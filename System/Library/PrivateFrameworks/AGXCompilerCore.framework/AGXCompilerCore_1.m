uint64_t AGCLLVMUserMeshShaderSW::getForwardProgressMode(AGCLLVMUserMeshShaderSW *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 565) + 12) >> 31;
}

BOOL AGCLLVMUserMeshShaderSW::enableSoftFaultOptimization(AGCLLVMUserMeshShaderSW *this)
{
  return (*(_BYTE *)(*((_QWORD *)this + 565) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserMeshShaderSW::isDMAPromotionDisabled(AGCLLVMUserMeshShaderSW *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 565) + 12) >> 7;
}

uint64_t AGCLLVMUserMeshShaderSW::constructReply(AGCLLVMUserMeshShaderSW *this)
{
  char *v2;
  char *v3;
  int v4;
  int v5;
  char v6;
  unint64_t v7;
  void *v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  unsigned int v25;
  char *v26;
  int v27;
  const char *v28;
  int v29;
  int v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  char *v35;
  char *v36;
  int v37;
  unsigned int v38;
  int v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  char *v44;
  char *v45;
  int v46;
  flatbuffers::FlatBufferBuilder *v47;
  int v48;
  const char *v49;
  char *v50;
  flatbuffers::FlatBufferBuilder *v51;
  flatbuffers::FlatBufferBuilder *v52;
  int v53;
  const char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  int *v60;
  unsigned int *v61;
  int *v62;
  uint64_t v63;
  char *v64;
  int *v65;
  unsigned int *v66;
  unsigned __int16 *v67;
  uint64_t v68;
  int *v69;
  unsigned __int16 *v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  std::string *v80;
  std::string::size_type v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  std::string::size_type size;
  std::string *v86;
  std::string::size_type v87;
  void **v88;
  std::string::size_type v89;
  unsigned int v90;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  void *__p[2];
  uint64_t v103;
  void *v104;
  _BYTE *v105;
  uint64_t v106;
  char *v107[2];
  _QWORD v108[65];
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int v116[8];
  char v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (!AGCDeserializedReply::deserialize((AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160)))return 0;
  AGCLLVMObject::validateBackendReply((AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  v96 = AGCLLVMUserObject::constructFlatReply(this);
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = v2 + 2472;
  v2[2542] = 1;
  v4 = *((_DWORD *)v2 + 626) - *((_DWORD *)v2 + 630) + *((_DWORD *)v2 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v2 + 2472, 4, *((_DWORD *)this + 1098));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 6, *((_DWORD *)this + 1099));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 8, *((_DWORD *)this + 1100));
  v5 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v3, v4);
  v6 = *((_BYTE *)this + 5264);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107[0] = (char *)v108;
  v107[1] = (char *)0x800000000;
  v108[64] = 0x1FFFFFFFFLL;
  v109 = v6;
  v116[7] = 0;
  v110 = 0u;
  v111 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  memset(v116, 0, 26);
  v117 = 1;
  if (*((_DWORD *)this + 1184))
  {
    v7 = *((_QWORD *)this + 591);
    do
    {
      GenericVaryingAllocator::addVarying((uint64_t)&v104, v7);
      v7 += 64;
    }
    while (v7 < *((_QWORD *)this + 591) + ((unint64_t)*((unsigned int *)this + 1184) << 6));
  }
  GenericVaryingAllocator::allocate((GenericVaryingAllocator *)&v104, *(const AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400));
  GenericVaryingAllocator::serialize((GenericVaryingAllocator *)&v104, (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  if (v105 == v104)
    v8 = &flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
  else
    v8 = v104;
  v9 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v8, (v105 - (_BYTE *)v104) >> 2);
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = v10 + 2472;
  v10[2542] = 1;
  v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v10 + 2472, 4, v113);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, SDWORD1(v113));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, SDWORD2(v113));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 10, SDWORD2(v111));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 12, SHIDWORD(v111));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 14, v112);
  LODWORD(v11) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, v12);
  v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v14 = v13 + 2472;
  v13[2542] = 1;
  v15 = *((_DWORD *)v13 + 626) - *((_DWORD *)v13 + 630) + *((_DWORD *)v13 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v13 + 2472, 4, v116[0]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 6, v116[1]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 8, v116[2]);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 10, SDWORD2(v114));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 12, SHIDWORD(v114));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 14, v115);
  v16 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v14, v15);
  v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v18 = v17 + 2472;
  v17[2542] = 1;
  v19 = *((_DWORD *)v17 + 626) - *((_DWORD *)v17 + 630) + *((_DWORD *)v17 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v17 + 2472, 4, v5);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 6, *((_DWORD *)this + 1152));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 8, *((_DWORD *)this + 1153));
  flatbuffers::FlatBufferBuilder::AddElement<signed char>(v18, 10, *((char *)this + 4624));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 12, *((_DWORD *)this + 1163));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 14, *((_DWORD *)this + 1165));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 16, *((_DWORD *)this + 1163));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 18, *((_DWORD *)this + 1165));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 60, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 20, *((_DWORD *)this + 1164));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 22, *((_DWORD *)this + 1166));
  v20 = (int)v11;
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v18, 24, (int)v11);
  LODWORD(v11) = v16;
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v18, 26, v16);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 28, LOBYTE(v116[6]), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v18, 30, v9);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 32, *((unsigned __int8 *)this + 4637), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 34, *((_DWORD *)this + 1158));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 36, *((unsigned __int8 *)this + 4641), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 38, *((unsigned __int8 *)this + 4639), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 40, *((unsigned __int8 *)this + 4643), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 42, *((unsigned __int8 *)this + 4629), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 44, *((unsigned __int8 *)this + 4638), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 46, *((unsigned __int8 *)this + 4645), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 48, *((_DWORD *)this + 1092));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 50, *((unsigned __int8 *)this + 4384), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 52, *((unsigned __int8 *)this + 4644), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v18, 54, *((_DWORD *)this + 1140));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 56, *((unsigned __int8 *)this + 12), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v18, 58, *((unsigned __int8 *)this + 4385), 0);
  v94 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v18, v19);
  v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v22 = v21 + 2472;
  v23 = *(_DWORD *)(*((_QWORD *)v21 + 50) + 864);
  v21[2542] = 1;
  v24 = *((_DWORD *)v21 + 626) - *((_DWORD *)v21 + 630) + *((_DWORD *)v21 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v21 + 2472, 12, v23);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 14, 0, 0);
  v25 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v22, 1);
  flatbuffers::FlatBufferBuilder::TrackField(v22, 10, v25);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 8, 0, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 6, 0, 0);
  v92 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v22, v24);
  v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v26[2542] = 1;
  v27 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v26 + 2472), (unsigned __int16)*((_DWORD *)v26 + 626) - (unsigned __int16)*((_DWORD *)v26 + 630) + *((_DWORD *)v26 + 628));
  flatbuffers::FlatBufferBuilder::Finish((AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), v27, v28);
  v29 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>> const&)::t, 0);
  v30 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t, 0);
  v31 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v32 = v31 + 2472;
  v31[2542] = 1;
  v33 = *((_DWORD *)v31 + 626) - *((_DWORD *)v31 + 630) + *((_DWORD *)v31 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v31 + 2472, v29);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v32, v30);
  v34 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v32, v33);
  v35 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v36 = v35 + 2472;
  v35[2542] = 1;
  v37 = *((_DWORD *)v35 + 626) - *((_DWORD *)v35 + 630) + *((_DWORD *)v35 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v35 + 2472, v34);
  v38 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v36, 1);
  flatbuffers::FlatBufferBuilder::TrackField(v36, 6, v38);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v36, 8, *((unsigned __int8 *)this + 4637), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 10, *((_DWORD *)this + 1167));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 12, *((_DWORD *)this + 1168));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 14, *((_DWORD *)this + 1158));
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v36, 16, v20);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v36, 18, (int)v11);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v36, 20, LOBYTE(v116[6]), 0);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v36, 22, v9);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 26, 0);
  v39 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v36, v37);
  v40 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v41 = v40 + 2568;
  LODWORD(v11) = *((unsigned __int8 *)this + 4641);
  v42 = *((unsigned __int8 *)this + 4639);
  LODWORD(v36) = *((unsigned __int8 *)this + 4629);
  v43 = *((unsigned __int8 *)this + 4638);
  LODWORD(v32) = *((unsigned __int8 *)this + 4645);
  v40[2638] = 1;
  LODWORD(v18) = *((_DWORD *)v40 + 650) - *((_DWORD *)v40 + 654) + *((_DWORD *)v40 + 652);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v40 + 2568, 14, (int)v32, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 12, (int)v32, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 10, v43, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 8, (int)v36, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 6, v42, 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v41, 4, (int)v11, 0);
  LODWORD(v11) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v41, (__int16)v18);
  v44 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v45 = v44 + 2472;
  v44[2542] = 1;
  v46 = *((_DWORD *)v44 + 626) - *((_DWORD *)v44 + 630) + *((_DWORD *)v44 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v44 + 2472, v96);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MeshShaderInfo>(v45, v94);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v45, v92);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v45, v39);
  v47 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
  v48 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v45, v46);
  flatbuffers::FlatBufferBuilder::Finish(v47, v48, v49);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  v50 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v51 = (flatbuffers::FlatBufferBuilder *)(v50 + 2568);
  v50[2638] = 1;
  LODWORD(v47) = *((_DWORD *)v50 + 650) - *((_DWORD *)v50 + 654) + *((_DWORD *)v50 + 652);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v50 + 2568, (int)v11);
  v52 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
  v53 = flatbuffers::FlatBufferBuilder::EndTable(v51, (__int16)v47);
  flatbuffers::FlatBufferBuilder::Finish(v52, v53, v54);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
  v55 = *(_QWORD *)(*(_QWORD *)this - 24);
  v56 = (char *)this + v55;
  v57 = (char *)this + v55 + 696;
  if (*(_QWORD *)v57)
  {
    if (*((_QWORD *)v56 + 88))
      v58 = (_QWORD *)((char *)this + v55 + 696);
    else
      v58 = v56 + 1256;
  }
  else
  {
    v58 = v56 + 1256;
  }
  v60 = (int *)(*v58 + *(unsigned int *)*v58);
  v61 = (unsigned int *)((char *)v60 + *(unsigned __int16 *)((char *)v60 - *v60 + 4));
  v62 = (int *)((char *)v61 + *v61);
  if (*(_QWORD *)v57)
  {
    v63 = *((_QWORD *)v56 + 88);
    v64 = v56 + 1256;
    if (!v63)
      v57 = v64;
  }
  else
  {
    v57 = v56 + 1256;
  }
  v65 = 0;
  v66 = (unsigned int *)((char *)v62 + *(unsigned __int16 *)((char *)v62 - *v62 + 8));
  if (*(_QWORD *)v57 && *((_QWORD *)v57 + 1))
    v65 = (int *)(*(_QWORD *)v57 + **(unsigned int **)v57);
  v67 = (unsigned __int16 *)((char *)v65 - *v65);
  if (*v67 >= 5u && (v68 = v67[2]) != 0)
    v69 = (int *)((char *)v65 + v68 + *(unsigned int *)((char *)v65 + v68));
  else
    v69 = 0;
  v70 = (unsigned __int16 *)((char *)v69 - *v69);
  if (*v70 >= 0x3Du && (v71 = v70[30]) != 0)
    v72 = *(int *)((char *)v69 + v71);
  else
    v72 = 0;
  v73 = *(unsigned int *)((char *)v66 + *v66);
  v74 = *((_DWORD *)this + 1152);
  v93 = *((_DWORD *)this + 1171);
  v95 = *((_DWORD *)this + 1169);
  v97 = *((_DWORD *)this + 1170);
  v75 = *((_DWORD *)this + 1153);
  v76 = *((_DWORD *)this + 1172);
  v77 = *((_DWORD *)this + 1140);
  v78 = *((_DWORD *)this + 1173);
  v79 = *(_DWORD *)(*(_QWORD *)((char *)this + v55 + 400) + 908);
  if (v78 > v79)
  {
    std::to_string(&v99, v78);
    v80 = std::string::insert(&v99, 0, "Mesh unique scalar count of ");
    v81 = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append(&v100, " exceeds limit of ");
    v83 = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v98, *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 908));
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = &v98;
    else
      v84 = (std::string *)v98.__r_.__value_.__r.__words[0];
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    else
      size = v98.__r_.__value_.__l.__size_;
    v86 = std::string::append(&v101, (const std::string::value_type *)v84, size);
    v87 = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v103 = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    if (v103 >= 0)
      v88 = __p;
    else
      v88 = (void **)__p[0];
    if (v103 >= 0)
      v89 = HIBYTE(v103);
    else
      v89 = (std::string::size_type)__p[1];
    std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (const std::string::value_type *)v88, v89);
    if (SHIBYTE(v103) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (v73 > 0x20)
  {
    v59 = 0;
  }
  else
  {
    v90 = validateUserMeshLocalMemoryUsage(v72, ((v74 + 3) & 0xFFFFFFFC) * v95 + v75 * v97 + (v93 * ((v74 + 3) & 0xFFFFFFFC) + v76 * v75) * v77, *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 900), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 896), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 904), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8));
    if (v78 <= v79)
      v59 = v90;
    else
      v59 = 0;
  }
  __p[0] = &v110;
  std::vector<GenericVaryingAllocator::OutIterator>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  llvm::SmallVector<GenericVarying,8u>::~SmallVector(v107);
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  return v59;
}

void `virtual thunk to'AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t v1;

  AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW((AGCLLVMUserMeshShaderSW *)((char *)this
                                                                              + *(_QWORD *)(*(_QWORD *)this - 48)));
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6776));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMUserMeshShaderSW::~AGCLLVMUserMeshShaderSW((AGCLLVMUserMeshShaderSW *)v1);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 6776));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMUserMeshShaderSW::dumpType(AGCLLVMUserMeshShaderSW *this)
{
  return "mesh";
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShaderSW::getShaderType(AGCLLVMUserMeshShaderSW *this)
{
  return 4;
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShaderSW::getForwardProgressMode(AGCLLVMUserMeshShaderSW *this)
{
  return *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 4520) + 12) >> 31;
}

void `virtual thunk to'AGCLLVMUserMeshShaderSW::getCompilationKeyDescription(AGCLLVMUserMeshShaderSW *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMUserMeshShaderSW::getCompilationKeyDescription((AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShaderSW::constructReply(AGCLLVMUserMeshShaderSW *this)
{
  return AGCLLVMUserMeshShaderSW::constructReply((AGCLLVMUserMeshShaderSW *)((char *)this
                                                                           + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShaderSW::getBufferBoundsCheckMode(AGCLLVMUserMeshShaderSW *this)
{
  return (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 4520) + 12) >> 4) & 7;
}

BOOL `virtual thunk to'AGCLLVMUserMeshShaderSW::enableSoftFaultOptimization(AGCLLVMUserMeshShaderSW *this)
{
  return (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 4520) + 15) & 0x40) == 0;
}

uint64_t `virtual thunk to'AGCLLVMUserMeshShaderSW::isDMAPromotionDisabled(AGCLLVMUserMeshShaderSW *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 4520) + 12) >> 7;
}

llvm::Value *AGCLLVMUserMeshShaderSW::getBasePointer(_QWORD *a1, llvm::Value *a2, int a3, unsigned int a4, uint64_t a5, llvm::Value *a6)
{
  llvm::Type *v11;
  llvm::Type *v12;
  llvm::Type *v13;
  llvm::IRBuilderBase *v14;
  llvm::Type **EmulationStateBuffer;
  llvm::Value *PointerCast;
  llvm::Type **v17;
  llvm::IRBuilderBase *v18;
  llvm::Value *v19;
  llvm::Value *Mul;
  llvm::Value *GEP;
  uint64_t v22;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::IRBuilderBase *v25;
  llvm::Value *v26;
  llvm::Value *Add;
  llvm::IRBuilderBase *v28;
  llvm::Type **v29;
  llvm::IRBuilderBase *v30;
  _BYTE v32[32];
  __int16 v33;
  _BYTE v34[32];
  __int16 v35;

  v11 = *(llvm::Type **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 216);
  v12 = (llvm::Type *)llvm::PointerType::get();
  v13 = (llvm::Type *)llvm::PointerType::get();
  v14 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  if (a3)
  {
    EmulationStateBuffer = (llvm::Type **)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(a1, 6, 0);
    v33 = 257;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast(v14, EmulationStateBuffer, v12, (const llvm::Twine *)v32);
  }
  else
  {
    v17 = (llvm::Type **)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(a1, 5, 0);
    v35 = 257;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast(v14, v17, v12, (const llvm::Twine *)v34);
  }
  v18 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v35 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, a2, v19, (const llvm::Twine *)v34);
  v33 = 257;
  GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v18, v11, PointerCast, Mul, (const llvm::Twine *)v32);
  v22 = (uint64_t)&a1[6 * a4 + 688];
  v23 = *(llvm::Value **)v22;
  if (!*(_BYTE *)(v22 + 12))
    a6 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = (llvm::Value *)llvm::ConstantInt::get();
  v25 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v35 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v25, a6, v24, (const llvm::Twine *)v34);
  v33 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v25, v23, v26, (const llvm::Twine *)v32);
  v28 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v35 = 257;
  v29 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v28, v11, GEP, Add, (const llvm::Twine *)v34);
  v30 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v35 = 257;
  return llvm::IRBuilderBase::CreatePointerCast(v30, v29, v13, (const llvm::Twine *)v34);
}

uint64_t llvm::IRBuilderBase::CreateAShr(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 168))(*((_QWORD *)this + 9));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

llvm::Value *AGCLLVMUserMeshShaderSW::generateAuxiliaryShaders(void)::$_0::operator()(llvm::Value *result)
{
  uint64_t v1;
  llvm::Value *v2;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v9[32];
  __int16 v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v1 = **(_QWORD **)result;
  if (v1)
  {
    v2 = result;
    v3 = (_QWORD *)*((_QWORD *)result + 1);
    v4 = (char *)v3 + *(_QWORD *)(*v3 - 24);
    v5 = *((_QWORD *)v4 + 29);
    v10 = 257;
    **(_QWORD **)result = llvm::IRBuilderBase::CreateCast((uint64_t)(v4 + 40), 49, v1, v5, (uint64_t)v9);
    v6 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 32;
    if (**((_BYTE **)v2 + 2))
      v7 = (uint64_t *)*((_QWORD *)v2 + 3);
    else
      v7 = (uint64_t *)*((_QWORD *)v2 + 5);
    v8 = *v7;
    v11[0] = **((_QWORD **)v2 + 4);
    v11[1] = **(_QWORD **)v2;
    v10 = 257;
    result = llvm::IRBuilderBase::CreateCall(v6 + 8, **(_QWORD **)(*(_QWORD *)v8 + 16), v8, (uint64_t)v11, 2, (uint64_t)v9);
    **(_QWORD **)v2 = 0;
    **((_QWORD **)v2 + 4) = 0;
  }
  return result;
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPosition(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Type **a4)
{
  char *v7;
  uint64_t GridProperties;
  llvm::Value *Value;
  char *v10;
  llvm::Type *v11;
  uint64_t v12;
  llvm::Value *VertexAmpId;
  llvm::Value *BasePointer;
  uint64_t GEP;
  _BYTE v17[32];
  __int16 v18;
  int v19;

  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v19 = 0;
  v18 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)&v19, 1, (uint64_t)v17);
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *a4;
  v12 = *((_QWORD *)v10 + 40);
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  BasePointer = AGCLLVMUserMeshShaderSW::getBasePointer(this, Value, 0, 0, v12, VertexAmpId);
  v18 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v10 + 40), v11, BasePointer, a3, (const llvm::Twine *)v17);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), a4, GEP, 0);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPointSize(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Type **a4)
{
  char *v7;
  uint64_t GridProperties;
  llvm::Value *Value;
  char *v10;
  llvm::Type *v11;
  uint64_t v12;
  llvm::Value *VertexAmpId;
  llvm::Value *BasePointer;
  uint64_t GEP;
  _BYTE v17[32];
  __int16 v18;
  int v19;

  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v19 = 0;
  v18 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)&v19, 1, (uint64_t)v17);
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *a4;
  v12 = *((_QWORD *)v10 + 25);
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  BasePointer = AGCLLVMUserMeshShaderSW::getBasePointer(this, Value, 0, 0x16u, v12, VertexAmpId);
  v18 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v10 + 40), v11, BasePointer, a3, (const llvm::Twine *)v17);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), a4, GEP, 0);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetClipDistance(AGCLLVMUserMeshShaderSW *this, _QWORD *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  llvm::Value *v6;
  llvm::Type **v7;
  char *v8;
  uint64_t GridProperties;
  llvm::Value *Value;
  uint64_t BuiltinPointer;
  _WORD v13[22];
  int v14;

  v3 = a2[1];
  v4 = (unsigned int *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = *(unsigned int **)v4;
  v5 = *v4;
  v6 = (llvm::Value *)a2[2];
  v7 = (llvm::Type **)a2[3];
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v14 = 0;
  v13[16] = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v8, GridProperties, (uint64_t)&v14, 1, (uint64_t)v13);
  BuiltinPointer = AGCLLVMUserMeshShaderSW::getBuiltinPointer(this, Value, 0x19u, v5, v6, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 200));
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v7, BuiltinPointer, 0);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetLayerId(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  char *v7;
  uint64_t v8;
  llvm::Value *Cast;
  llvm::Value *VertexAmpId;
  char *v11;
  uint64_t GridProperties;
  llvm::Value *Value;
  llvm::Type **BuiltinPointer;
  uint64_t *v15;
  uint64_t v16;
  uint64_t Select;
  char *v18;
  uint64_t v19;
  llvm::Type **v20;
  llvm::IRBuilderBase *v21;
  llvm::Type *v22;
  llvm::Value *PointerCast;
  _DWORD v25[8];
  __int16 v26;
  _BYTE v27[32];
  __int16 v28;

  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v8 = *((_QWORD *)v7 + 29);
  v28 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v7 + 40), 39, (uint64_t)a4, v8, (uint64_t)v27);
  if (*((_BYTE *)this + 4640))
  {
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShaderSW::buildSetVaryingData((uint64_t)this, 1, 0xFFFFFFFB, a3, Cast, VertexAmpId);
  }
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v25[0] = 0;
  v28 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v11, GridProperties, (uint64_t)v25, 1, (uint64_t)v27);
  BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShaderSW::getBuiltinPointer(this, Value, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
  v15 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v16 = llvm::ConstantInt::get();
  v28 = 257;
  llvm::IRBuilderBase::CreateICmp(v15, 37, (llvm::CmpInst **)Cast, v16, (uint64_t)v27);
  llvm::ConstantInt::get();
  v26 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v19 = *((_QWORD *)v18 + 28);
  v28 = 257;
  v20 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 38, Select, v19, (uint64_t)v27);
  v21 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v22 = (llvm::Type *)llvm::PointerType::get();
  v28 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v21, BuiltinPointer, v22, (const llvm::Twine *)v27);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v20, (uint64_t)PointerCast, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetViewportId(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  char *v7;
  uint64_t v8;
  llvm::Value *Cast;
  llvm::Value *VertexAmpId;
  char *v11;
  uint64_t GridProperties;
  llvm::Value *Value;
  llvm::Type **BuiltinPointer;
  uint64_t *v15;
  uint64_t v16;
  uint64_t Select;
  char *v18;
  uint64_t v19;
  llvm::Type **v20;
  char *v21;
  llvm::Type *v22;
  llvm::IRBuilderBase *v23;
  llvm::Type *v24;
  llvm::Value *PointerCast;
  llvm::Value *v26;
  uint64_t GEP;
  _DWORD v29[8];
  __int16 v30;
  _BYTE v31[32];
  __int16 v32;

  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v8 = *((_QWORD *)v7 + 29);
  v32 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v7 + 40), 39, (uint64_t)a4, v8, (uint64_t)v31);
  if (*((_BYTE *)this + 4642))
  {
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShaderSW::buildSetVaryingData((uint64_t)this, 1, 0xFFFFFFFC, a3, Cast, VertexAmpId);
  }
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v29[0] = 0;
  v32 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v11, GridProperties, (uint64_t)v29, 1, (uint64_t)v31);
  BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShaderSW::getBuiltinPointer(this, Value, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
  v15 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v16 = llvm::ConstantInt::get();
  v32 = 257;
  llvm::IRBuilderBase::CreateICmp(v15, 37, (llvm::CmpInst **)Cast, v16, (uint64_t)v31);
  llvm::ConstantInt::get();
  v30 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v19 = *((_QWORD *)v18 + 27);
  v32 = 257;
  v20 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 38, Select, v19, (uint64_t)v31);
  v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v22 = (llvm::Type *)*((_QWORD *)v21 + 27);
  v23 = (llvm::IRBuilderBase *)(v21 + 40);
  v24 = (llvm::Type *)llvm::PointerType::get();
  v32 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v23, BuiltinPointer, v24, (const llvm::Twine *)v31);
  v26 = (llvm::Value *)llvm::ConstantInt::get();
  v30 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP(v23, v22, PointerCast, v26, (const llvm::Twine *)v29);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v20, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPrimitiveId(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::Value *VertexAmpId;

  if (*((_BYTE *)this + 4646))
  {
    VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
    AGCLLVMUserMeshShaderSW::buildSetVaryingData((uint64_t)this, 1, 0xFFFFFFFF, a3, a4, VertexAmpId);
  }
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPrimitiveCulled(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  char *v7;
  uint64_t GridProperties;
  llvm::Value *Value;
  llvm::Type **BuiltinPointer;
  char *v11;
  uint64_t v12;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  llvm::Type **Shl;
  char *v17;
  llvm::Type *v18;
  llvm::IRBuilderBase *v19;
  llvm::Type *v20;
  llvm::Value *PointerCast;
  llvm::Value *v22;
  uint64_t GEP;
  _DWORD v25[8];
  __int16 v26;
  _BYTE v27[32];
  __int16 v28;

  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v25[0] = 0;
  v28 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)v25, 1, (uint64_t)v27);
  BuiltinPointer = (llvm::Type **)AGCLLVMUserMeshShaderSW::getBuiltinPointer(this, Value, 0x17u, 0, a3, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v12 = *((_QWORD *)v11 + 27);
  v28 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v11 + 40), 39, (uint64_t)a4, v12, (uint64_t)v27);
  v14 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v28 = 257;
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl(v14, Cast, v15, (const llvm::Twine *)v27);
  v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v18 = (llvm::Type *)*((_QWORD *)v17 + 27);
  v19 = (llvm::IRBuilderBase *)(v17 + 40);
  v20 = (llvm::Type *)llvm::PointerType::get();
  v28 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v19, BuiltinPointer, v20, (const llvm::Twine *)v27);
  v22 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP(v19, v18, PointerCast, v22, (const llvm::Twine *)v25);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), Shl, GEP, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetIndex(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Type **a4)
{
  char *v7;
  uint64_t GridProperties;
  llvm::Value *Value;
  llvm::Value *EmulationStateBuffer;
  llvm::Type *v11;
  llvm::Type *v12;
  llvm::IRBuilderBase *v13;
  llvm::Value *v14;
  llvm::Value *Mul;
  llvm::Value *Add;
  uint64_t GEP;
  _BYTE v19[32];
  __int16 v20;
  _DWORD v21[8];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;

  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v21[0] = 0;
  v24 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)v21, 1, (uint64_t)v23);
  EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 4, 0);
  v12 = v11;
  v13 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v13, Value, v14, (const llvm::Twine *)v23);
  v22 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, a3, Mul, (const llvm::Twine *)v21);
  v20 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP(v13, v12, EmulationStateBuffer, Add, (const llvm::Twine *)v19);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), a4, GEP, 0);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetIndices(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Type **a4)
{
  llvm::Type *v7;
  llvm::Type *v8;
  char *v9;
  uint64_t GridProperties;
  llvm::Value *Value;
  llvm::Value *EmulationStateBuffer;
  llvm::Type *v13;
  llvm::Type *v14;
  llvm::IRBuilderBase *v15;
  llvm::Value *v16;
  llvm::Value *Mul;
  llvm::Type **GEP;
  llvm::Value *PointerCast;
  llvm::IRBuilderBase *v20;
  llvm::Value *v21;
  llvm::Value *UDiv;
  llvm::IRBuilderBase *v23;
  uint64_t v24;
  _BYTE v26[32];
  __int16 v27;
  _DWORD v28[8];
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;

  v7 = *a4;
  v8 = (llvm::Type *)llvm::PointerType::get();
  v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v28[0] = 0;
  v31 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v9, GridProperties, (uint64_t)v28, 1, (uint64_t)v30);
  EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 4, 0);
  v14 = v13;
  v15 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v15 = (llvm::IRBuilderBase *)((char *)v15 + 40);
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v15, Value, v16, (const llvm::Twine *)v30);
  v29 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v15, v14, EmulationStateBuffer, Mul, (const llvm::Twine *)v28);
  v27 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v15, GEP, v8, (const llvm::Twine *)v26);
  v20 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v20, a3, v21, (const llvm::Twine *)v30);
  v23 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v31 = 257;
  v24 = llvm::IRBuilderBase::CreateGEP(v23, v7, PointerCast, UDiv, (const llvm::Twine *)v30);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), a4, v24, 0);
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetVertexData(AGCLLVMUserObjectShaderBase *this, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *VertexAmpId;

  v3 = a2[1];
  v4 = (_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = (_QWORD *)*v4;
  v5 = *(_DWORD *)v4;
  v6 = (llvm::Value *)a2[2];
  v7 = (llvm::Value *)a2[3];
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  return AGCLLVMUserMeshShaderSW::buildSetVaryingData((uint64_t)this, 0, v5, v6, v7, VertexAmpId);
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetPrimitiveData(AGCLLVMUserObjectShaderBase *this, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unsigned int v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *VertexAmpId;

  v3 = a2[1];
  v4 = (_QWORD *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = (_QWORD *)*v4;
  v5 = *(_DWORD *)v4;
  v6 = (llvm::Value *)a2[2];
  v7 = (llvm::Value *)a2[3];
  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(this);
  return AGCLLVMUserMeshShaderSW::buildSetVaryingData((uint64_t)this, 1, v5, v6, v7, VertexAmpId);
}

llvm::Value *AGCLLVMUserMeshShaderSW::buildSetPrimitiveCount(AGCLLVMUserMeshShaderSW *this, llvm::Value *a2, llvm::Value *a3)
{
  char *v5;
  uint64_t GridProperties;
  llvm::Value *Value;
  llvm::Value *EmulationStateBuffer;
  llvm::Type *v9;
  llvm::Type *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  llvm::Value *Mul;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE v28[32];
  __int16 v29;
  _QWORD v30[6];
  _QWORD __src[4];
  uint64_t v32;
  uint64_t v33;
  void *v34[2];
  _BYTE v35[16];
  __int16 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  LODWORD(__src[0]) = 0;
  v36 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v5, GridProperties, (uint64_t)__src, 1, (uint64_t)v34);
  EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 4, 0);
  v10 = v9;
  v30[0] = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 3, 0);
  v30[1] = Value;
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v12 = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 5, 0);
  v13 = llvm::PointerType::get();
  v36 = 257;
  v30[2] = llvm::IRBuilderBase::CreateCast((uint64_t)v11, 49, v12, v13, (uint64_t)v34);
  v14 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v32) = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v14, Value, v15, (const llvm::Twine *)__src);
  v29 = 257;
  v30[3] = llvm::IRBuilderBase::CreateGEP(v14, v10, EmulationStateBuffer, Mul, (const llvm::Twine *)v28);
  v30[4] = a3;
  v30[5] = llvm::ConstantInt::get();
  v17 = llvm::PointerType::get();
  v18 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
  v19 = llvm::PointerType::get();
  v20 = llvm::PointerType::get();
  v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v22 = *((_QWORD *)v21 + 29);
  v23 = *((_QWORD *)v21 + 27);
  __src[0] = v17;
  __src[1] = v18;
  __src[2] = v19;
  __src[3] = v20;
  v32 = v22;
  v33 = v23;
  v34[0] = v35;
  v34[1] = (void *)0x600000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v34, __src, v34);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v25 = v24;
  if (v34[0] != v35)
    free(v34[0]);
  v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v36 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v26, *(_QWORD *)(v25 + 24), v25, (uint64_t)v30, 6, (uint64_t)v34);
}

uint64_t AGCLLVMUserMeshShaderSW::getGlobalLinearGroupID(AGCLLVMUserMeshShaderSW *this)
{
  uint64_t GridProperties;
  char *v3;
  _WORD v5[22];
  int v6;

  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v6 = 5;
  v5[16] = 257;
  return llvm::IRBuilderBase::CreateExtractValue((uint64_t)v3, GridProperties, (uint64_t)&v6, 1, (uint64_t)v5);
}

llvm::Value *AGCLLVMUserMeshShaderSW::buildOSTGGridPosition(AGCLLVMUserMeshShaderSW *this)
{
  llvm::Value *EmulationStateBuffer;
  llvm::Type *v3;
  llvm::Type *v4;
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  char *v7;
  uint64_t GridProperties;
  llvm::Value *Value;
  llvm::Value *Mul;
  llvm::Type **GEP;
  llvm::IRBuilderBase *v12;
  llvm::Type *v13;
  llvm::Value *PointerCast;
  char *v15;
  llvm::Type *v16;
  AGCLLVMBuilder *v18;
  llvm::Value *v19;
  _WORD v20[20];
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  int v25;

  if ((*(_BYTE *)(*((_QWORD *)this + 565) + 17) & 1) != 0)
  {
    v18 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32);
    v19 = (llvm::Value *)llvm::ConstantInt::get();
    return AGCLLVMBuilder::splat(v18, 3, v19);
  }
  else
  {
    EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 2, 0);
    v4 = v3;
    v5 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v6 = (llvm::Value *)llvm::ConstantInt::get();
    v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
    v25 = 5;
    v24 = 257;
    Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v7, GridProperties, (uint64_t)&v25, 1, (uint64_t)v23);
    v22 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, Value, (const llvm::Twine *)v21);
    v20[16] = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v5, v4, EmulationStateBuffer, Mul, (const llvm::Twine *)v20);
    v12 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v13 = (llvm::Type *)llvm::PointerType::get();
    v24 = 257;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast(v12, GEP, v13, (const llvm::Twine *)v23);
    v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v16 = (llvm::Type *)*((_QWORD *)v15 + 38);
    v24 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v15 + 5, v16, (uint64_t)PointerCast, 0, (uint64_t)v23);
  }
}

uint64_t AGCLLVMUserMeshShaderSW::buildGlobalSizeUbergrid(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, int a3)
{
  llvm::Value *v5;
  llvm::IRBuilderBase *v6;
  uint64_t GridProperties;
  llvm::Value *Value;
  _BYTE v10[32];
  __int16 v11;
  _BYTE v12[32];
  __int16 v13;
  int v14;

  v5 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  v6 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v14 = a3 + 6;
  v13 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v6, GridProperties, (uint64_t)&v14, 1, (uint64_t)v12);
  v11 = 257;
  return llvm::IRBuilderBase::CreateMul(v6, Value, v5, (const llvm::Twine *)v10);
}

uint64_t AGCLLVMUserMeshShaderSW::buildGlobalIDUbergrid(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, uint64_t a3)
{
  char *v6;
  uint64_t GridProperties;
  llvm::Value *Value;
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::IRBuilderBase *v11;
  llvm::Value *Mul;
  _DWORD v14[8];
  __int16 v15;
  _BYTE v16[32];
  __int16 v17;

  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v14[0] = a3 + 1;
  v17 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v6, GridProperties, (uint64_t)v14, 1, (uint64_t)v16);
  v9 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalID(this, a2, a3);
  v11 = (AGCLLVMUserMeshShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v17 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, Value, v9, (const llvm::Twine *)v16);
  v15 = 257;
  return llvm::IRBuilderBase::CreateAdd(v11, Mul, v10, (const llvm::Twine *)v14);
}

uint64_t AGCLLVMUserMeshShaderSW::buildNumGroupsUbergrid(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, int a3)
{
  char *v4;
  uint64_t GridProperties;
  _WORD v7[22];
  int v8;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v8 = a3 + 6;
  v7[16] = 257;
  return llvm::IRBuilderBase::CreateExtractValue((uint64_t)v4, GridProperties, (uint64_t)&v8, 1, (uint64_t)v7);
}

uint64_t AGCLLVMUserMeshShaderSW::buildGroupIDSW(AGCLLVMUserMeshShaderSW *this, llvm::Type *a2, int a3)
{
  uint64_t GridProperties;
  char *v6;
  _WORD v8[22];
  int v9;

  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties(this);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v9 = a3 + 1;
  v8[16] = 257;
  return llvm::IRBuilderBase::CreateExtractValue((uint64_t)v6, GridProperties, (uint64_t)&v9, 1, (uint64_t)v8);
}

uint64_t AGCLLVMUserMeshShaderSW::getGridProperties(AGCLLVMUserMeshShaderSW *this)
{
  _QWORD *EmulationStateCacheForCurrentFunction;
  uint64_t v3;
  _QWORD *v4;
  llvm::ValueHandleBase *v5;
  char *v6;
  char *v7;
  llvm::IRBuilderBase *v8;
  uint64_t v9;
  llvm::BasicBlock *v10;
  uint64_t FirstInsertionPt;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t EmulationStateBuffer;
  uint64_t v22;
  uint64_t *v23;
  llvm::Type **v24;
  llvm::Value *v25;
  llvm::Type *v26;
  uint64_t AlignedLoad;
  uint64_t v28;
  uint64_t Cast;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  llvm::Value *v40;
  char *v41;
  uint64_t v43;
  llvm::ValueHandleBase *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[48];
  void *v55;
  uint64_t v56;
  _QWORD v57[2];
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t __src;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];

  v69[0] = *MEMORY[0x1E0C80C00];
  EmulationStateCacheForCurrentFunction = AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction(this);
  v3 = EmulationStateCacheForCurrentFunction[35];
  if (!v3)
  {
    v4 = EmulationStateCacheForCurrentFunction;
    v5 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 33);
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v49 = *(_OWORD *)(v6 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
    v51 = *((_DWORD *)v6 + 34);
    v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v8 = (llvm::IRBuilderBase *)(v7 + 40);
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 11) + 56) + 80);
    if (v9)
      v10 = (llvm::BasicBlock *)(v9 - 24);
    else
      v10 = 0;
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v10);
    if (FirstInsertionPt)
      v12 = (llvm::Instruction *)(FirstInsertionPt - 24);
    else
      v12 = 0;
    llvm::IRBuilderBase::SetInsertPoint(v8, v12);
    if (!llvm::StructType::getTypeByName())
    {
      v55 = *(void **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
      v56 = (uint64_t)v55;
      v57[0] = v55;
      v57[1] = v55;
      v58 = v55;
      v59 = v55;
      v60 = v55;
      v61 = v55;
      v62 = v55;
      llvm::StructType::create();
    }
    v13 = AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 0);
    v45 = AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 1);
    v14 = AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 2);
    v52 = v54;
    v53 = 0x600000000;
    if ((*(_BYTE *)(*((_QWORD *)this + 565) + 17) & 1) != 0)
    {
      __src = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
      v64 = __src;
      v65 = __src;
      v66 = __src;
      v67 = __src;
      v68 = __src;
      v55 = v57;
      v56 = 0x600000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v55, &__src, v69);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v20 = v36;
      if (v55 != v57)
        free(v55);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v13);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v45);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v14);
      v37 = (*(uint64_t (**)(AGCLLVMUserMeshShaderSW *, _QWORD, _QWORD))(*(_QWORD *)this + 504))(this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 0);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v37);
      v38 = (*(uint64_t (**)(AGCLLVMUserMeshShaderSW *, _QWORD, uint64_t))(*(_QWORD *)this + 504))(this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 1);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v38);
      v14 = (*(uint64_t (**)(AGCLLVMUserMeshShaderSW *, _QWORD, uint64_t))(*(_QWORD *)this + 504))(this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 2);
    }
    else
    {
      v43 = v13;
      v44 = v5;
      v15 = llvm::PointerType::get();
      v16 = llvm::PointerType::get();
      v17 = llvm::PointerType::get();
      v18 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
      __src = v15;
      v64 = v16;
      v65 = v17;
      v66 = v18;
      v67 = v18;
      v68 = v18;
      v55 = v57;
      v56 = 0x600000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v55, &__src, v69);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v20 = v19;
      if (v55 != v57)
        free(v55);
      EmulationStateBuffer = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 1, 1);
      v22 = AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 0, 1);
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40, *(_QWORD *)(v22 + 40), *(_QWORD *)(v22 + 32));
      v23 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v24 = (llvm::Type **)*((_QWORD *)this + 561);
      LOWORD(v58) = 257;
      v26 = AGCLLVMBuilder::tryDeducePointeeType(v24, v25);
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v23, v26, (uint64_t)v24, 0, (uint64_t)&v55);
      v28 = llvm::PointerType::get();
      LOWORD(v67) = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v23, 49, AlignedLoad, v28, (uint64_t)&__src);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, Cast);
      v30 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
      v31 = llvm::PointerType::get();
      LOWORD(v58) = 257;
      v32 = llvm::IRBuilderBase::CreateCast((uint64_t)v30, 49, EmulationStateBuffer, v31, (uint64_t)&v55);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v32);
      v33 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
      v34 = llvm::PointerType::get();
      LOWORD(v58) = 257;
      v35 = llvm::IRBuilderBase::CreateCast((uint64_t)v33, 49, v22, v34, (uint64_t)&v55);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v35);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v45);
      v5 = v44;
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v14);
    v39 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v55 = "agc.gpe.grid_properties";
    LOWORD(v58) = 259;
    v40 = llvm::IRBuilderBase::CreateCall((uint64_t)(v39 + 40), *(_QWORD *)(v20 + 24), v20, (uint64_t)v52, v53, (uint64_t)&v55);
    llvm::ValueHandleBase::operator=(v5, (uint64_t)v40);
    v41 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v46 = v49;
    v47 = v50;
    if (v50)
      llvm::MetadataTracking::track();
    v48 = v51;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v46, (uint64_t)(v41 + 8));
    if (v47)
      llvm::MetadataTracking::untrack();
    v3 = v4[35];
    if (v52 != v54)
      free(v52);
    if (v50)
      llvm::MetadataTracking::untrack();
  }
  return v3;
}

_QWORD *AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction(AGCLLVMUserObjectShaderBase *this)
{
  unint64_t v1;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *j;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint8x8_t v35;
  _QWORD **v36;
  _QWORD *k;
  unint64_t v38;
  _QWORD *v39;
  float v40;
  float v41;
  _BOOL8 v42;
  unint64_t v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD v50[39];
  unint64_t v51;
  char *v52;
  char v53;
  uint64_t v54[2];
  char v55;

  v3 = 0x9DDFEA08EB382D69;
  v4 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88) + 56);
  v5 = (_QWORD *)((char *)this + 4432);
  v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)this + 555);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v11 = v8 % v9;
    }
    else
    {
      v11 = v8 & (v9 - 1);
    }
    v12 = *(_QWORD **)(*v5 + 8 * v11);
    if (v12)
    {
      for (i = (_QWORD *)*v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v8)
        {
          if (i[2] == v4)
            goto LABEL_58;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  v50[0] = 4;
  v50[1] = 0;
  v50[2] = 0;
  v50[3] = 4;
  v50[4] = 0;
  v50[5] = 0;
  v50[6] = 4;
  v50[7] = 0;
  v50[8] = 0;
  v50[9] = 4;
  v50[10] = 0;
  v50[11] = 0;
  v50[12] = 4;
  v50[13] = 0;
  v50[14] = 0;
  v50[15] = 4;
  v50[16] = 0;
  v50[17] = 0;
  v50[18] = 4;
  v50[19] = 0;
  v50[20] = 0;
  v50[21] = 4;
  v50[22] = 0;
  v50[23] = 0;
  v50[24] = 4;
  v50[25] = 0;
  v50[26] = 0;
  v50[27] = 4;
  v50[28] = 0;
  v50[29] = 0;
  v50[30] = 4;
  v50[31] = 0;
  v50[32] = 0;
  v50[33] = 4;
  v50[34] = 0;
  v50[35] = 0;
  v50[37] = 0;
  v50[38] = 0;
  v50[36] = 4;
  v51 = v4;
  AGCLLVMUserObjectShaderBase::FunctionStateCache::FunctionStateCache((uint64_t)&v52, v50);
  v15 = v51;
  v16 = 0x9DDFEA08EB382D69 * (((8 * v51) + 8) ^ HIDWORD(v51));
  v17 = 0x9DDFEA08EB382D69 * (HIDWORD(v51) ^ (v16 >> 47) ^ v16);
  v18 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
  v3 = *((_QWORD *)this + 555);
  if (v3)
  {
    v19 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v1 = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
      if (v18 >= v3)
        v1 = v18 % v3;
    }
    else
    {
      v1 = v18 & (v3 - 1);
    }
    v21 = *(_QWORD **)(*v5 + 8 * v1);
    if (v21)
    {
      for (j = (_QWORD *)*v21; j; j = (_QWORD *)*j)
      {
        v23 = j[1];
        if (v23 == v18)
        {
          if (j[2] == v51)
            goto LABEL_57;
        }
        else
        {
          if (v19.u32[0] > 1uLL)
          {
            if (v23 >= v3)
              v23 %= v3;
          }
          else
          {
            v23 &= v3 - 1;
          }
          if (v23 != v1)
            break;
        }
      }
    }
    v20 = v5;
  }
  else
  {
    v20 = v5;
  }
  v24 = (_QWORD *)((char *)this + 4448);
  v25 = operator new(0x150uLL);
  v54[1] = (uint64_t)this + 4448;
  *v25 = 0;
  v25[1] = v18;
  v25[2] = v15;
  AGCLLVMUserObjectShaderBase::FunctionStateCache::FunctionStateCache((uint64_t)(v25 + 3), &v52);
  v55 = 1;
  v26 = (float)(unint64_t)(*((_QWORD *)this + 557) + 1);
  v27 = *((float *)this + 1116);
  if (!v3 || (float)(v27 * (float)v3) < v26)
  {
    v28 = 1;
    if (v3 >= 3)
      v28 = (v3 & (v3 - 1)) != 0;
    v29 = v28 | (2 * v3);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      v31 = v30;
    else
      v31 = v29;
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v20, v31);
    v3 = *((_QWORD *)this + 555);
    if ((v3 & (v3 - 1)) != 0)
    {
      if (v18 >= v3)
        v1 = v18 % v3;
      else
        v1 = v18;
    }
    else
    {
      v1 = (v3 - 1) & v18;
    }
  }
  v32 = *v20;
  v33 = *(_QWORD **)(*v20 + 8 * v1);
  if (v33)
  {
    *v25 = *v33;
    v5 = v20;
  }
  else
  {
    *v25 = *v24;
    *v24 = v25;
    *(_QWORD *)(v32 + 8 * v1) = v24;
    v5 = v20;
    if (!*v25)
      goto LABEL_56;
    v34 = *(_QWORD *)(*v25 + 8);
    if ((v3 & (v3 - 1)) != 0)
    {
      if (v34 >= v3)
        v34 %= v3;
    }
    else
    {
      v34 &= v3 - 1;
    }
    v33 = (_QWORD *)(*v20 + 8 * v34);
  }
  *v33 = v25;
LABEL_56:
  v54[0] = 0;
  ++*((_QWORD *)this + 557);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>>>>::reset[abi:nn180100](v54);
LABEL_57:
  AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)&v52);
  AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)v50);
  v9 = *((_QWORD *)this + 555);
LABEL_58:
  if (v9)
  {
    v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v35.i16[0] = vaddlv_u8(v35);
    if (v35.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v36 = *(_QWORD ***)(*v5 + 8 * v3);
    if (v36)
    {
      for (k = *v36; k; k = (_QWORD *)*k)
      {
        v38 = k[1];
        if (v38 == v8)
        {
          if (k[2] == v4)
            return k + 3;
        }
        else
        {
          if (v35.u32[0] > 1uLL)
          {
            if (v38 >= v9)
              v38 %= v9;
          }
          else
          {
            v38 &= v9 - 1;
          }
          if (v38 != v3)
            break;
        }
      }
    }
  }
  v39 = (_QWORD *)((char *)this + 4448);
  k = operator new(0x150uLL);
  v51 = (unint64_t)k;
  v52 = (char *)this + 4448;
  *k = 0;
  k[1] = v8;
  k[2] = v4;
  k[3] = 4;
  k[4] = 0;
  k[5] = 0;
  k[6] = 4;
  k[7] = 0;
  k[8] = 0;
  k[9] = 4;
  k[10] = 0;
  k[11] = 0;
  k[12] = 4;
  k[13] = 0;
  k[14] = 0;
  k[15] = 4;
  k[16] = 0;
  k[17] = 0;
  k[18] = 4;
  k[19] = 0;
  k[20] = 0;
  k[21] = 4;
  k[22] = 0;
  k[23] = 0;
  k[24] = 4;
  k[25] = 0;
  k[26] = 0;
  k[27] = 4;
  k[28] = 0;
  k[29] = 0;
  k[30] = 4;
  k[31] = 0;
  k[32] = 0;
  k[33] = 4;
  k[34] = 0;
  k[35] = 0;
  k[36] = 4;
  k[37] = 0;
  k[38] = 0;
  k[39] = 4;
  k[40] = 0;
  k[41] = 0;
  v53 = 1;
  v40 = (float)(unint64_t)(*((_QWORD *)this + 557) + 1);
  v41 = *((float *)this + 1116);
  if (!v9 || (float)(v41 * (float)v9) < v40)
  {
    v42 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    v43 = v42 | (2 * v9);
    v44 = vcvtps_u32_f32(v40 / v41);
    if (v43 <= v44)
      v45 = v44;
    else
      v45 = v43;
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v5, v45);
    v9 = *((_QWORD *)this + 555);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v46 = *v5;
  v47 = *(_QWORD **)(*v5 + 8 * v3);
  if (v47)
  {
    *k = *v47;
LABEL_96:
    *v47 = k;
    goto LABEL_97;
  }
  *k = *v39;
  *v39 = k;
  *(_QWORD *)(v46 + 8 * v3) = v39;
  if (*k)
  {
    v48 = *(_QWORD *)(*k + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v48 >= v9)
        v48 %= v9;
    }
    else
    {
      v48 &= v9 - 1;
    }
    v47 = (_QWORD *)(*v5 + 8 * v48);
    goto LABEL_96;
  }
LABEL_97:
  v51 = 0;
  ++*((_QWORD *)this + 557);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>>>>::reset[abi:nn180100]((uint64_t *)&v51);
  return k + 3;
}

uint64_t AGCLLVMUserObjectShaderBase::FunctionStateCache::FunctionStateCache(uint64_t a1, _QWORD *a2)
{
  llvm::ValueHandleBase *v4;

  v4 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)a1, 2u, a2);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)((char *)v4 + 24), 2u, a2 + 3);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 48), 2u, a2 + 6);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 72), 2u, a2 + 9);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 96), 2u, a2 + 12);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 120), 2u, a2 + 15);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 144), 2u, a2 + 18);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 168), 2u, a2 + 21);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 192), 2u, a2 + 24);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 216), 2u, a2 + 27);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 240), 2u, a2 + 30);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 264), 2u, a2 + 33);
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(a1 + 288), 2u, a2 + 36);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,void *>>>>::reset[abi:nn180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
      AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderBase::FunctionStateCache *)(v1 + 24));
    operator delete((void *)v1);
  }
}

uint64_t AGCLLVMUserMeshShaderSW::buildSetVaryingData(uint64_t a1, int a2, unsigned int a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6)
{
  int v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t GridProperties;
  llvm::Value *Value;
  llvm::Type *v26;
  llvm::Value *BasePointer;
  llvm::IRBuilderBase *v28;
  uint64_t v29;
  llvm::IRBuilderBase *v30;
  llvm::Value *v31;
  llvm::Value *VertexAmpCount;
  llvm::Value *v33;
  llvm::Value *Mul;
  llvm::Value *v35;
  llvm::Value *Add;
  llvm::IRBuilderBase *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::IRBuilderBase *v40;
  llvm::Value *v41;
  uint64_t v42;
  llvm::Value *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  const llvm::Twine *v46;
  llvm::IRBuilderBase *v47;
  llvm::IRBuilderBase *v48;
  llvm::Value *v49;
  uint64_t GEP;
  uint64_t v51;
  char v53;
  __int16 v54;
  _DWORD v55[8];
  __int16 v56;
  _BYTE v57[32];
  __int16 v58;
  llvm::Value *v59[2];
  __int128 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = ((a2 != 0) | (2 * a3)) + 7;
  if (a3 >= 0xFFFFFFF9)
    v7 = ~a3;
  v8 = *(unsigned int *)(a1 + 4736);
  if (!(_DWORD)v8)
    return llvm::UndefValue::get();
  v11 = *(_QWORD *)(a1 + 4728);
  v12 = v8 << 6;
  while (*(_DWORD *)(v11 + 16) != v7)
  {
    v11 += 64;
    v12 -= 64;
    if (!v12)
      return llvm::UndefValue::get();
  }
  *(_OWORD *)v59 = 0u;
  v60 = 0u;
  v14 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), a5, v59);
  v15 = v14;
  v16 = *(_QWORD *)v59[0];
  v17 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  if (*(_QWORD *)v59[0] == *(_QWORD *)(v17 + a1 + 208)
    || v16 == *(_QWORD *)(v17 + a1 + 216)
    || v16 == *(_QWORD *)(v17 + a1 + 224))
  {
    v51 = *(_QWORD *)(v17 + a1 + 232);
    if (v14)
    {
      v18 = v59;
      v19 = v14;
      do
      {
        v20 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v21 = (uint64_t)*v18;
        v22 = *(_QWORD *)(v20 + a1 + 200 + 32);
        v58 = 257;
        *v18++ = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v20 + a1 + 40, 39, v21, v22, (uint64_t)v57);
        --v19;
      }
      while (v19);
      v17 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    }
  }
  else
  {
    v51 = *(_QWORD *)v59[0];
  }
  v23 = v17 + a1 + 40;
  GridProperties = AGCLLVMUserMeshShaderSW::getGridProperties((AGCLLVMUserMeshShaderSW *)a1);
  v55[0] = 0;
  v58 = 257;
  Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue(v23, GridProperties, (uint64_t)v55, 1, (uint64_t)v57);
  v26 = (llvm::Type *)v51;
  BasePointer = AGCLLVMUserMeshShaderSW::getBasePointer((_QWORD *)a1, Value, a2, *(_DWORD *)(v11 + 60), v51, a6);
  if (a2 == 1)
  {
    v28 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
    v29 = llvm::ConstantInt::get();
    v30 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
    VertexAmpCount = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpCount((AGCLLVMUserObjectShaderBase *)a1, v31);
    v33 = (llvm::Value *)llvm::ConstantInt::get();
    v58 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v30, VertexAmpCount, v33, (const llvm::Twine *)v57);
    v56 = 257;
    v35 = (llvm::Value *)v29;
    v26 = (llvm::Type *)v51;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v28, v35, Mul, (const llvm::Twine *)v55);
    v37 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
    v58 = 257;
    a4 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v37, a4, Add, (const llvm::Twine *)v57);
  }
  if (v15)
  {
    v38 = 0;
    v39 = v15;
    do
    {
      if (*(_BYTE *)(v11 + 56))
      {
        v40 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        v41 = (llvm::Value *)llvm::ConstantInt::get();
        v58 = 257;
        v42 = llvm::IRBuilderBase::CreateMul(v40, a4, v41, (const llvm::Twine *)v57);
        v43 = (llvm::Value *)llvm::ConstantInt::get();
        v56 = 257;
        v44 = (llvm::Value *)v42;
        v26 = (llvm::Type *)v51;
        v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v40, v44, v43, (const llvm::Twine *)v55);
        v54 = 257;
        v46 = (const llvm::Twine *)&v53;
        v47 = v40;
      }
      else
      {
        v48 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        v49 = (llvm::Value *)llvm::ConstantInt::get();
        v58 = 257;
        v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v48, a4, v49, (const llvm::Twine *)v57);
        v56 = 257;
        v46 = (const llvm::Twine *)v55;
        v47 = v48;
      }
      GEP = llvm::IRBuilderBase::CreateGEP(v47, v26, BasePointer, v45, v46);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), (llvm::Type **)v59[v38++], GEP, 0);
    }
    while (v39 != v38);
  }
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserMeshShaderSW::getBuiltinPointer(AGCLLVMUserObjectShaderBase *a1, llvm::Value *a2, unsigned int a3, uint64_t a4, llvm::Value *a5, llvm::Type *a6)
{
  llvm::Value *VertexAmpId;
  llvm::Value *BasePointer;
  llvm::IRBuilderBase *v13;
  llvm::Value *v14;
  llvm::Value *Add;
  llvm::IRBuilderBase *v16;
  _BYTE v18[32];
  __int16 v19;

  VertexAmpId = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpId(a1);
  BasePointer = AGCLLVMUserMeshShaderSW::getBasePointer(a1, a2, 0, a3, (uint64_t)a6, VertexAmpId);
  v13 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v19 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, a5, v14, (const llvm::Twine *)v18);
  v16 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v19 = 257;
  return llvm::IRBuilderBase::CreateGEP(v16, a6, BasePointer, Add, (const llvm::Twine *)v18);
}

uint64_t AGCLLVMUserMeshShaderSW::addGenericVarying(uint64_t a1, uint64_t a2, int a3, int a4)
{
  llvm::MDString *v8;
  const char *v9;
  llvm::MDString *v10;
  const char *v11;
  _BOOL8 v12;
  llvm::MDString *v13;
  int Key;
  llvm *v16;
  unsigned int v17;
  int v18;
  int v20;
  int v21;
  int v22;
  void *String;
  size_t v24;
  __int128 v25;
  uint64_t v26;
  unsigned int v27[6];
  __int128 __p;
  uint64_t v29;
  unsigned int v30;

  v8 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
  if (a3)
    v9 = "air.primitive_data";
  else
    v9 = "air.vertex_data";
  if (isStringMDNode(v8, v9))
  {
    v30 = 0;
  }
  else
  {
    v10 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8));
    if (a3)
      v11 = "air.mesh_primitive_data";
    else
      v11 = "air.mesh_vertex_data";
    v12 = 0;
    v30 = 0;
    if (!isStringMDNode(v10, v11))
      return v12;
  }
  v27[0] = 1;
  if (!parseMDInt(0, a2, v27, &v30))
    return 0;
  v13 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
  if (!v13 || *(_BYTE *)v13)
    return 0;
  llvm::MDString::getString(v13);
  Key = llvm::StringMapImpl::FindKey();
  if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 4584))
    return 1;
  v16 = *(llvm **)(*(_QWORD *)(a1 + 4576) + 8 * Key);
  v17 = *((_DWORD *)v16 + 2);
  llvm::StringMapImpl::RemoveKey();
  llvm::deallocate_buffer(v16, (void *)(*(_QWORD *)v16 + 17));
  v18 = v17 & 0xF;
  v12 = !a3 && v18 != 3 || a3 == 1 && v18 == 3;
  if (a3)
    v20 = 8;
  else
    v20 = 7;
  v21 = v20 + 2 * v30;
  if (v30 > 0xFFFFFFF8)
    v22 = ~v30;
  else
    v22 = v21;
  GenericVarying::GenericVarying((uint64_t)v27, HIBYTE(v17) & 0x7F, BYTE2(v17), v18, BYTE1(v17), v22, a4);
  String = (void *)llvm::MDString::getString(v13);
  if (String)
  {
    std::string::basic_string[abi:nn180100](&v25, String, v24);
  }
  else
  {
    v25 = 0uLL;
    v26 = 0;
  }
  if (SHIBYTE(v29) < 0)
    operator delete((void *)__p);
  __p = v25;
  v29 = v26;
  GenericVaryingAllocator::addVarying(a1 + 4704, (unint64_t)v27);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)__p);
  return v12;
}

void AGCLLVMUserObjectShader::~AGCLLVMUserObjectShader(AGCLLVMUserObjectShader *this)
{
  uint64_t v1;

  AGCLLVMUserObjectShader::~AGCLLVMUserObjectShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4568));
}

{
  uint64_t v1;

  AGCLLVMUserObjectShader::~AGCLLVMUserObjectShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4568));
  JUMPOUT(0x1CAA2D68CLL);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7E6A520;
  *((_QWORD *)this + 571) = &unk_1E7E6A858;
  *((_QWORD *)this + 575) = &unk_1E7E6A948;
  v2 = *((_QWORD *)this + 568);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShader *)((char *)this + 4528));
  *(_QWORD *)this = off_1E7E6AC48;
  *((_QWORD *)this + 571) = &off_1E7E6AF40;
  *((_QWORD *)this + 575) = &off_1E7E6B030;
  v4 = *((_QWORD *)this + 564);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShader *)((char *)this + 4496));
  v6 = *((_QWORD *)this + 561);
  if (v6 != -8192 && v6 != -4096 && v6)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShader *)((char *)this + 4472));
  std::__hash_table<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::__unordered_map_hasher<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::hash<llvm::Function *>,std::equal_to<llvm::Function *>,true>,std::__unordered_map_equal<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::equal_to<llvm::Function *>,std::hash<llvm::Function *>,true>,std::allocator<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>>>::~__hash_table((uint64_t)this + 4432);
  v7 = *((_QWORD *)this + 553);
  if (v7 != -8192 && v7 != -4096 && v7)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShader *)((char *)this + 4408));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E6A960);
}

uint64_t AGCLLVMUserObjectShader::initCompile(AGCLLVMUserObjectShader *this)
{
  uint64_t v2;

  v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1092), *(_DWORD *)(*((_QWORD *)this + 565) + 20), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 864), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (unsigned int *)this + 1092);
  if ((_DWORD)v2)
    AGCLLVMUserObjectShaderBase::initCompile(this);
  return v2;
}

uint64_t AGCLLVMUserObjectShader::addWrapperPostfix(llvm::Type **this)
{
  llvm::Type **ChildcountGlobal;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::BasicBlock *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  llvm::CmpInst **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t ICmp;
  char *v25;
  llvm::IRBuilderBase *v26;
  llvm::Type *v27;
  llvm::Value *PointerCast;
  char *v29;
  llvm::Type *v30;
  llvm::Type **GEP;
  uint64_t *v32;
  llvm::Value *v33;
  llvm::Type *v34;
  uint64_t AlignedLoad;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t result;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  _QWORD v53[3];
  _QWORD v54[4];
  __int16 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  ChildcountGlobal = (llvm::Type **)AGCLLVMUserObjectShader::getOrCreateChildcountGlobal((AGCLLVMUserObjectShader *)this);
  v54[0] = llvm::ConstantInt::get();
  v54[1] = llvm::ConstantInt::get();
  AGCLLVMObject::buildWGBarrier((uint64_t)this + *((_QWORD *)*this - 3), (uint64_t)v54, 2);
  v3 = (char *)this + *((_QWORD *)*this - 3);
  v4 = *((_QWORD *)v3 + 50);
  v50 = *(_OWORD *)(v3 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v3 + 40));
  v52 = *((_DWORD *)v3 + 34);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 312))(v4, &v50);
  if (v51)
    llvm::MetadataTracking::untrack();
  v5 = llvm::FunctionType::get();
  v54[0] = "agc.object.write_childcount";
  v55 = 259;
  v6 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 368);
  v7 = llvm::User::operator new((llvm::User *)0x78);
  MEMORY[0x1CAA2CE58](v7, v5, 7, 0xFFFFFFFFLL, v54, v6);
  llvm::Function::addFnAttr();
  v8 = (char *)this + *((_QWORD *)*this - 3);
  v55 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)(v8 + 40), **(_QWORD **)(*(_QWORD *)v7 + 16), v7, 0, 0, (uint64_t)v54);
  v9 = (char *)this + *((_QWORD *)*this - 3);
  v47 = *(_OWORD *)(v9 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 40));
  v49 = *((_DWORD *)v9 + 34);
  v54[0] = "entry";
  v55 = 259;
  v10 = operator new();
  llvm::BasicBlock::BasicBlock();
  v54[0] = "write_childcount";
  v55 = 259;
  v11 = operator new();
  llvm::BasicBlock::BasicBlock();
  v54[0] = "exit";
  v55 = 259;
  v12 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v13 = (char *)this + *((_QWORD *)*this - 3);
  *((_QWORD *)v13 + 11) = v10;
  *((_QWORD *)v13 + 12) = v10 + 40;
  if (*((_DWORD *)this + 1094))
  {
    v14 = (char *)this + *((_QWORD *)*this - 3);
    v15 = (uint64_t)(v14 + 32);
    v16 = *((_QWORD *)v14 + 50);
    v17 = *(_QWORD *)(v16 + 960);
    if (v17)
      v18 = strlen(*(const char **)(v16 + 960));
    else
      v18 = 0;
    v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(v15, v17, v18, *(_QWORD *)(v15 + 144), *(_QWORD *)(v15 + 192), *(_QWORD *)(v15 + 192), *(_QWORD *)(v15 + 192));
    v53[0] = llvm::ConstantInt::get();
    v53[1] = llvm::ConstantInt::get();
    v53[2] = llvm::ConstantInt::get();
    v20 = (char *)this + *((_QWORD *)*this - 3) + 40;
    v55 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v20, *(_QWORD *)(v19 + 24), v19, (uint64_t)v53, 3, (uint64_t)v54);
  }
  v21 = (llvm::CmpInst **)AGCLLVMUserObjectShaderBase::buildLocalLinearID((AGCLLVMUserObjectShaderBase *)this, *(llvm::Type **)((char *)this + *((_QWORD *)*this - 3) + 232));
  v22 = (uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 40);
  v23 = llvm::ConstantInt::get();
  v55 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp(v22, 36, v21, v23, (uint64_t)v54);
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 40), ICmp, v11, (uint64_t)v12);
  v25 = (char *)this + *((_QWORD *)*this - 3);
  *((_QWORD *)v25 + 11) = v11;
  *((_QWORD *)v25 + 12) = v11 + 40;
  v26 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
  v27 = this[542];
  v55 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v26, ChildcountGlobal, v27, (const llvm::Twine *)v54);
  v29 = (char *)this + *((_QWORD *)*this - 3);
  v30 = (llvm::Type *)*((_QWORD *)v29 + 29);
  v55 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v29 + 40), v30, PointerCast, (llvm::Value *)v21, (const llvm::Twine *)v54);
  v32 = (uint64_t *)((char *)this + *((_QWORD *)*this - 3));
  v55 = 257;
  v34 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v33);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v32 + 5, v34, (uint64_t)GEP, 0, (uint64_t)v54);
  v36 = (char *)this + *((_QWORD *)*this - 3);
  v37 = *((_QWORD *)v36 + 50);
  v44 = *(_OWORD *)(v36 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v36 + 40));
  v46 = *((_DWORD *)v36 + 34);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v37 + 304))(v37, &v44, AlignedLoad);
  if (v45)
    llvm::MetadataTracking::untrack();
  llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40), v12);
  v38 = (char *)this + *((_QWORD *)*this - 3);
  *((_QWORD *)v38 + 11) = v12;
  *((_QWORD *)v38 + 12) = (char *)v12 + 40;
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40));
  v39 = (char *)this + *((_QWORD *)*this - 3) + 32;
  v41 = v47;
  v42 = v48;
  if (v48)
    llvm::MetadataTracking::track();
  v43 = v49;
  result = AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v41, (uint64_t)(v39 + 8));
  if (v42)
    result = llvm::MetadataTracking::untrack();
  if (v48)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t AGCLLVMUserObjectShader::setupShaderInputs(llvm::Function **this)
{
  llvm::Function *v2;
  uint64_t v3;
  llvm::Function *v4;
  uint64_t i;
  uint64_t v6;
  llvm::Type **ChildcountGlobal;
  llvm::IRBuilderBase *v8;
  llvm::Type *v9;
  _BYTE v11[32];
  __int16 v12;

  AGCLLVMUserObjectShaderBase::setupShaderInputs((AGCLLVMUserObjectShaderBase *)this);
  v2 = this[22];
  if ((*((_WORD *)v2 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this[22]);
    v4 = this[22];
    v3 = *((_QWORD *)v2 + 11);
    if ((*((_WORD *)v4 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(this[22]);
    v2 = v4;
  }
  else
  {
    v3 = *((_QWORD *)v2 + 11);
  }
  for (i = *((_QWORD *)v2 + 11) + 40 * *((_QWORD *)v2 + 12); v3 != i; v3 += 40)
  {
    v6 = *((_QWORD *)this[11] + *(unsigned int *)(v3 + 32));
    if (v6
      && isStringMDNode(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8), "air.mesh_grid_properties"))
    {
      ChildcountGlobal = (llvm::Type **)AGCLLVMUserObjectShader::getOrCreateChildcountGlobal((AGCLLVMUserObjectShader *)this);
      v8 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
      v9 = *(llvm::Type **)v3;
      v12 = 257;
      llvm::IRBuilderBase::CreatePointerCast(v8, ChildcountGlobal, v9, (const llvm::Twine *)v11);
      llvm::Value::replaceAllUsesWith();
    }
  }
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::setupShaderOutputs(AGCLLVMUserObjectShaderBase *this)
{
  llvm::Function *Function;

  Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((_QWORD *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  return 1;
}

uint64_t AGCLLVMUserObjectShader::replaceBuiltins(AGCLLVMUserObjectShader *this)
{
  uint64_t v2;
  llvm::LLVMContext **v3;
  uint64_t Function;
  llvm::Function *v5;
  uint64_t v6;
  llvm::Instruction *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t (**v23)(int, llvm::Value *);
  void *v24[2];
  _OWORD v25[5];
  int v26;
  uint64_t v27;
  _QWORD v28[29];
  AGCLLVMUserObjectShader *v29;
  _OWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = AGCLLVMUserObjectShaderBase::replaceBuiltins(this);
  if ((_DWORD)v2)
  {
    v3 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
    AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v23, *v3);
    v29 = this;
    v23 = &off_1E7E6BB40;
    v28[25] = v3;
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v5 = (llvm::Function *)Function;
      v16 = v26;
      v6 = *(_QWORD *)(Function + 8);
      while (v6)
      {
        v7 = *(llvm::Instruction **)(v6 + 24);
        v6 = *(_QWORD *)(v6 + 8);
        v26 = 0;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v24, v7);
        llvm::UndefValue::get();
        v31 = 0;
        memset(v30, 0, sizeof(v30));
        v8 = llvm::CallBase::arg_end(v7) - (_QWORD)v7 + 32 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF);
        if ((v8 & 0x1FFFFFFFE0) != 0)
        {
          v9 = (v8 >> 5);
          v10 = (uint64_t *)((char *)v7 - 32 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
          v11 = v30;
          do
          {
            v12 = *v10;
            v10 += 4;
            *v11++ = v12;
            --v9;
          }
          while (v9);
        }
        v13 = (char *)v29 + *(_QWORD *)(*(_QWORD *)v29 - 24);
        v20 = v25[2];
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)v24);
        v22 = v26;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v20, (uint64_t)(v13 + 40));
        if (v21)
          llvm::MetadataTracking::untrack();
        AGCLLVMUserObjectShader::buildSetMeshGridProperties(v29, *(llvm::Type ***)&v30[0], *((llvm::Value **)&v30[0] + 1));
        v14 = (char *)v29 + *(_QWORD *)(*(_QWORD *)v29 - 24);
        v17 = *(_OWORD *)(v14 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v14 + 40));
        v19 = *((_DWORD *)v14 + 34);
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v17, (uint64_t)v24);
        if (v18)
          llvm::MetadataTracking::untrack();
        if (*(_QWORD *)v7 != v28[1])
          llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v7);
      }
      v26 = v16;
      llvm::Function::eraseFromParent(v5);
    }
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v28);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v27);
    if (v24[0] != v25)
      free(v24[0]);
  }
  return v2;
}

uint64_t AGCLLVMUserObjectShader::usesCustomBorderColor(AGCLLVMUserObjectShader *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 565) + 16) & 1;
}

uint64_t AGCLLVMUserObjectShaderBase::getTempRegistersLimit(AGCLLVMUserObjectShaderBase *this, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v4 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 96))(v4);
  if ((_DWORD)result)
  {
    *a2 = result;
    result = (_DWORD)result != *(_DWORD *)(v4[50] + 884);
  }
  v6 = *((_DWORD *)this + 1092);
  if (v6)
  {
    v7 = 0;
    v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v9 = *((_QWORD *)v8 + 58);
    v10 = *(_DWORD *)(*((_QWORD *)v8 + 50) + 884);
    v11 = *(_DWORD *)(v9 + 440);
    v12 = v11 - 1;
    v13 = *(_QWORD *)(v9 + 432);
    do
    {
      v14 = (v12 + v7) >> 1;
      if (*(_DWORD *)(v13 + 4 * v14) < v6)
        v12 = v14 - 1;
      else
        v7 = v14 + 1;
    }
    while (v7 <= v12);
    v15 = v10 / v11 * v12;
    if (v15 >= *a2)
      v15 = *a2;
    *a2 = v15;
    return 1;
  }
  return result;
}

uint64_t AGCLLVMUserObjectShader::buildGlobalSize(AGCLLVMUserObjectShader *this, llvm::Type *a2, unsigned int a3)
{
  return AGCLLVMUserShader::buildGlobalSizeCommon(this, a2, a3, 0, 0);
}

uint64_t AGCLLVMUserObjectShader::buildNumGroups(AGCLLVMUserObjectShader *this, llvm::Type *a2, int a3)
{
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::IRBuilderBase *v8;
  llvm::Value *Add;
  llvm::Value *v10;
  llvm::Value *Sub;
  llvm::IRBuilderBase *v12;
  _WORD v14[20];
  _BYTE v15[32];
  __int16 v16;

  v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserObjectShader *))(*(_QWORD *)this + 496))(this);
  v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  v8 = (AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v16 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, v6, v7, (const llvm::Twine *)v15);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v8, Add, v10, (const llvm::Twine *)v14);
  v12 = (AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v16 = 257;
  return llvm::IRBuilderBase::CreateUDiv(v12, Sub, v7, (const llvm::Twine *)v15);
}

uint64_t AGCLLVMUserObjectShaderBase::replacePayloadBufferAccesses(AGCLLVMUserObjectShaderBase *this, llvm::Type **a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  llvm::Value *GEP;
  char *v8;
  llvm::Type *v9;
  llvm::Value *v10;
  char *v11;
  llvm::Type *v12;
  llvm::Value *v13;
  llvm::IRBuilderBase *v14;
  llvm::Type *v15;
  _BYTE v17[32];
  __int16 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v4 = (char *)this + 4384;
  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = *((_QWORD *)v5 + 50);
  v19 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
  v21 = *((_DWORD *)v5 + 34);
  GEP = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 320))(v6, &v19);
  if (v20)
    llvm::MetadataTracking::untrack();
  if (*v4)
  {
    v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v9 = (llvm::Type *)*((_QWORD *)v8 + 27);
    v10 = (llvm::Value *)llvm::ConstantInt::get();
    v18 = 257;
    GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v8 + 40), v9, GEP, v10, (const llvm::Twine *)v17);
  }
  if (v4[1])
  {
    v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v12 = (llvm::Type *)*((_QWORD *)v11 + 27);
    v13 = (llvm::Value *)llvm::ConstantInt::get();
    v18 = 257;
    GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v11 + 40), v12, GEP, v13, (const llvm::Twine *)v17);
  }
  v14 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v15 = *a2;
  v18 = 257;
  llvm::IRBuilderBase::CreatePointerCast(v14, (llvm::Type **)GEP, v15, (const llvm::Twine *)v17);
  llvm::Value::replaceAllUsesWith();
  return 1;
}

const char *AGCLLVMUserObjectShader::dumpType(AGCLLVMUserObjectShader *this)
{
  return "object";
}

uint64_t AGCLLVMUserObjectShader::getShaderType(AGCLLVMUserObjectShader *this)
{
  return 1;
}

void AGCLLVMUserObjectShader::getCompilationKeyDescription(AGCLLVMUserObjectShader *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *__p[2];
  char v40;
  void *v41[2];
  _QWORD v42[11];
  char v43;
  _BYTE v44[152];
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*((_QWORD *)this + 565);
  std::string::basic_string[abi:nn180100]<0>(v37, "AGCObjectContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v35, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v41);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v42, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v42[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v42[0] - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v45, (const void **)v35, (uint64_t)__p);
  if (v40 < 0)
    operator delete(__p[0]);
  v41[0] = *(void **)MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)v41 + *((_QWORD *)v41[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v42[0] = v5;
  v42[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v43 < 0)
    operator delete((void *)v42[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA2D638](v44);
  std::string::basic_string[abi:nn180100]<0>(v41, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v46, (const void **)v41, v3[5]);
  std::string::basic_string[abi:nn180100]<0>(__p, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v47, (const void **)__p, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v33, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v48, (const void **)v33, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v31, "customBorderColor");
  _agcFieldString<unsigned int>(&v49, (const void **)v31, v3[4] & 1);
  std::string::basic_string[abi:nn180100]<0>(v29, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v50, (const void **)v29, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v27, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v51, (const void **)v27, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v25, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v52, (const void **)v25, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v23, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v53, (const void **)v23, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v21, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v54, (const void **)v21, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v19, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v55, (const void **)v19, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v17, "enableStackShadow");
  _agcFieldString<unsigned int>(&v56, (const void **)v17, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v15, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v57, (const void **)v15, (v3[3] >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v13, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v58, (const void **)v13, (v3[3] >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v11, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v59, (const void **)v11, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v9, "meshNeedsTGCounts");
  _agcFieldString<unsigned int>(&v60, (const void **)v9, (v3[4] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "meshNeedsOSGridPosition");
  _agcFieldString<unsigned int>(&v61, (const void **)v7, (v3[4] >> 2) & 1);
  _agcGroupWithHeader(a2, (uint64_t)v37, (uint64_t)&v45, 17);
  v6 = 408;
  do
  {
    if (v45.__r_.__value_.__s.__data_[v6 - 1] < 0)
      operator delete(*(void **)&v44[v6 + 128]);
    v6 -= 24;
  }
  while (v6);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v42[0]) < 0)
    operator delete(v41[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  if (v38 < 0)
    operator delete(v37[0]);
}

uint64_t AGCLLVMUserObjectShader::getBufferBoundsCheckMode(AGCLLVMUserObjectShader *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 565) + 12) >> 4) & 7;
}

uint64_t AGCLLVMUserObjectShader::getForwardProgressMode(AGCLLVMUserObjectShader *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 565) + 12) >> 31;
}

BOOL AGCLLVMUserObjectShader::enableSoftFaultOptimization(AGCLLVMUserObjectShader *this)
{
  return (*(_BYTE *)(*((_QWORD *)this + 565) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserObjectShader::isDMAPromotionDisabled(AGCLLVMUserObjectShader *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 565) + 12) >> 7;
}

BOOL AGCLLVMUserObjectShader::constructReply(AGCLLVMUserObjectShader *this)
{
  _BOOL8 result;
  int v3;
  char *v4;
  char *v5;
  int v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  char *v13;
  char *v14;
  flatbuffers::FlatBufferBuilder *v15;
  int v16;
  const char *v17;
  int v18;
  char *v19;
  flatbuffers::FlatBufferBuilder *v20;
  flatbuffers::FlatBufferBuilder *v21;
  int v22;
  const char *v23;

  result = AGCDeserializedReply::deserialize((AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if ((_DWORD)result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v5 = v4 + 2472;
    v4[2542] = 1;
    v6 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v4 + 2472, 4, *((_DWORD *)this + 1098));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, 6, *((_DWORD *)this + 1099));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, 8, *((_DWORD *)this + 1100));
    LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v5, v6);
    v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v8 = v7 + 2472;
    v7[2542] = 1;
    v9 = *((_DWORD *)v7 + 626) - *((_DWORD *)v7 + 630) + *((_DWORD *)v7 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v7 + 2472, 4, *((_DWORD *)this + 1138));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v8, 6, *((_DWORD *)this + 1139));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v8, 8, *((_DWORD *)this + 1140));
    LODWORD(v8) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v8, v9);
    v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v11 = v10 + 2472;
    v10[2542] = 1;
    v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v10 + 2472, 4, (int)v5);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v11, 6, (int)v8);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, *((_DWORD *)this + 1094));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 10, *((_DWORD *)this + 1095));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 12, *((_DWORD *)this + 1092));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v11, 14, *((unsigned __int8 *)this + 12), 0);
    LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, v12);
    v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v14 = v13 + 2472;
    v13[2542] = 1;
    LODWORD(v11) = *((_DWORD *)v13 + 626) - *((_DWORD *)v13 + 630) + *((_DWORD *)v13 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v13 + 2472, v3);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ObjectShaderInfo>(v14, (int)v5);
    v15 = (AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v16 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v14, (__int16)v11);
    flatbuffers::FlatBufferBuilder::Finish(v15, v16, v17);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    v18 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
    v19 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v20 = (flatbuffers::FlatBufferBuilder *)(v19 + 2568);
    v19[2638] = 1;
    LODWORD(v5) = *((_DWORD *)v19 + 650) - *((_DWORD *)v19 + 654) + *((_DWORD *)v19 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v19 + 2568, v18);
    v21 = (AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
    v22 = flatbuffers::FlatBufferBuilder::EndTable(v20, (__int16)v5);
    flatbuffers::FlatBufferBuilder::Finish(v21, v22, v23);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
    return AGCLLVMUserObjectShaderBase::validateReply(this);
  }
  return result;
}

void `virtual thunk to'AGCLLVMUserObjectShader::~AGCLLVMUserObjectShader(AGCLLVMUserObjectShader *this)
{
  uint64_t v1;

  AGCLLVMUserObjectShader::~AGCLLVMUserObjectShader((AGCLLVMUserObjectShader *)((char *)this
                                                                              + *(_QWORD *)(*(_QWORD *)this - 48)));
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4568));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMUserObjectShader::~AGCLLVMUserObjectShader((AGCLLVMUserObjectShader *)v1);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4568));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMUserObjectShader::dumpType(AGCLLVMUserObjectShader *this)
{
  return "object";
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShader::getShaderType(AGCLLVMUserObjectShader *this)
{
  return 1;
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShader::getForwardProgressMode(AGCLLVMUserObjectShader *this)
{
  return *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 4520) + 12) >> 31;
}

void `virtual thunk to'AGCLLVMUserObjectShader::getCompilationKeyDescription(AGCLLVMUserObjectShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMUserObjectShader::getCompilationKeyDescription((AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMUserObjectShader::constructReply(AGCLLVMUserObjectShader *this)
{
  return AGCLLVMUserObjectShader::constructReply((AGCLLVMUserObjectShader *)((char *)this
                                                                           + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShaderBase::getTempRegistersLimit(AGCLLVMUserObjectShaderBase *this, unsigned int *a2)
{
  return AGCLLVMUserObjectShaderBase::getTempRegistersLimit((AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)), a2);
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShader::getBufferBoundsCheckMode(AGCLLVMUserObjectShader *this)
{
  return (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 4520) + 12) >> 4) & 7;
}

BOOL `virtual thunk to'AGCLLVMUserObjectShader::enableSoftFaultOptimization(AGCLLVMUserObjectShader *this)
{
  return (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 4520) + 15) & 0x40) == 0;
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShader::isDMAPromotionDisabled(AGCLLVMUserObjectShader *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 4520) + 12) >> 7;
}

uint64_t AGCLLVMUserObjectShaderBase::initCompile(AGCLLVMUserObjectShaderBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  AGCLLVMUserObject::initCompile(this);
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v3 = v2 + 8;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 != v2 + 8)
  {
    do
    {
      if (v4)
        v5 = (uint64_t *)(v4 - 56);
      else
        v5 = 0;
      v6 = *v5;
      if (*v5)
      {
        v7 = *(_DWORD *)(v6 + 8);
        if ((v7 & 0xFE) == 0x12)
          v7 = *(_DWORD *)(**(_QWORD **)(v6 + 16) + 8);
        if ((v7 & 0xFFFFFF00) == 0x300)
          llvm::GlobalObject::setSection();
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::setupShaderInputs(AGCLLVMUserObjectShaderBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Instruction *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  llvm::Value *v15;
  llvm::Type **v16;
  llvm::Value *VertexAmpCount;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  llvm::Instruction *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  char *v29;
  char *v31;
  unsigned int v32[8];
  __int16 v33;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  v31 = (char *)this + 4384;
  v2 = *((_QWORD *)this + 22);
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v6 = *((_QWORD *)this + 22);
    v5 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v2 = v6;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 88);
  }
  v7 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  if (v5 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)(v5 + 8))
      {
        v9 = *(_QWORD *)(v4 + 40);
        v10 = v9 ? (llvm::Instruction *)(v9 - 24) : 0;
        AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v10, *((_QWORD *)this + 6));
        v11 = *(unsigned int *)(v5 + 32);
        v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v11);
        if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v5, v11, v12) & 1) == 0)
        {
          if (isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8) + 8), "air.payload"))
          {
            v32[0] = 2;
            if (*(_DWORD *)(v12 + 8) >= 3u)
            {
              do
              {
                if (*((_DWORD *)this + 1094)
                  || !parseMDInt("air.arg_type_size", v12, v32, (_DWORD *)this + 1094))
                {
                  v14 = parseMDInt("air.arg_type_align_size", v12, v32, (_DWORD *)this + 1095);
                  v13 = v32[0];
                  if ((v14 & 1) == 0)
                    v13 = ++v32[0];
                }
                else
                {
                  v13 = v32[0];
                }
              }
              while (v13 < *(_DWORD *)(v12 + 8));
            }
            v8 = v5;
          }
          else if (isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8) + 8), "air.amplification_count"))
          {
            v16 = (llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32);
            VertexAmpCount = (llvm::Value *)AGCLLVMUserObjectShaderBase::getVertexAmpCount(this, v15);
            AGCLLVMBuilder::truncateToSmall(v16, VertexAmpCount, *(llvm::Type **)v5);
            llvm::Value::replaceAllUsesWith();
            v31[20] = 1;
          }
        }
      }
      v5 += 40;
    }
    while (v5 != v7);
  }
  v18 = *((_DWORD *)this + 1094);
  *((_DWORD *)this + 1093) = v18;
  if (*v31)
  {
    v18 += 16;
    *((_DWORD *)this + 1094) = v18;
    v19 = *((_DWORD *)this + 1095);
    if (v19 <= 4)
      v19 = 4;
    *((_DWORD *)this + 1095) = v19;
    *((_DWORD *)this + 1097) = 16;
  }
  if (v31[1])
  {
    *((_DWORD *)this + 1094) = v18 + 16;
    v20 = *((_DWORD *)this + 1095);
    if (v20 <= 4)
      v20 = 4;
    *((_DWORD *)this + 1095) = v20;
  }
  if (v8)
    (*(void (**)(AGCLLVMUserObjectShaderBase *, uint64_t))(*(_QWORD *)this + 512))(this, v8);
  if ((*(unsigned int (**)(AGCLLVMUserObjectShaderBase *))(*(_QWORD *)this + 488))(this)
    && *((_DWORD *)this + 1094))
  {
    v21 = *(_QWORD *)(v4 + 48);
    if (v21)
      v22 = (llvm::Instruction *)(v21 - 24);
    else
      v22 = 0;
    AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v22, *((_QWORD *)this + 6));
    v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v24 = (uint64_t)(v23 + 32);
    v25 = *((_QWORD *)v23 + 50);
    v26 = *(_QWORD *)(v25 + 960);
    if (v26)
      v27 = strlen(*(const char **)(v25 + 960));
    else
      v27 = 0;
    v28 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(v24, v26, v27, *(_QWORD *)(v24 + 144), *(_QWORD *)(v24 + 192), *(_QWORD *)(v24 + 192), *(_QWORD *)(v24 + 192));
    v34[0] = llvm::ConstantInt::get();
    v34[1] = llvm::ConstantInt::get();
    v34[2] = llvm::ConstantInt::get();
    v29 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v33 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v29, *(_QWORD *)(v28 + 24), v28, (uint64_t)v34, 3, (uint64_t)v32);
  }
  return 1;
}

uint64_t AGCLLVMUserObjectShaderBase::replaceBuiltins(AGCLLVMUserObjectShaderBase *this)
{
  uint64_t v2;
  llvm::LLVMContext **v3;
  unsigned __int8 v4;
  uint64_t i;
  char *v6;
  size_t v7;
  void *p_p;
  char *v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v18;
  void *__p;
  uint64_t (*v20)(AGCLLVMUserObjectShaderBase *);
  uint64_t v21;
  int v22;
  __int16 v23;
  uint64_t (**v24)(int, llvm::Value *);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[32];

  v28[30] = *MEMORY[0x1E0C80C00];
  v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if ((_DWORD)v2)
  {
    v3 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
    AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v24, *v3);
    v28[29] = this;
    v24 = &off_1E7E6BA08;
    v28[25] = v3;
    if ((v4 & 1) == 0
    {
      std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions, "air.get_global_size");
      dword_1EF8E8B00 = 1;
      xmmword_1EF8E8B08 = xmmword_1C3E37C00;
      dword_1EF8E8B18 = 4;
      word_1EF8E8B1C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8B20, "air.get_global_id");
      dword_1EF8E8B38 = 1;
      qword_1EF8E8B40 = (uint64_t)AGCLLVMUserObjectShaderBase::buildGlobalID;
      unk_1EF8E8B48 = 0;
      dword_1EF8E8B50 = 4;
      word_1EF8E8B54 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8B58, "air.get_local_size");
      dword_1EF8E8B70 = 1;
      qword_1EF8E8B78 = (uint64_t)AGCLLVMUserObjectShaderBase::buildLocalSize;
      unk_1EF8E8B80 = 0;
      dword_1EF8E8B88 = 4;
      word_1EF8E8B8C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8B90, "air.get_local_id");
      dword_1EF8E8BA8 = 1;
      qword_1EF8E8BB0 = (uint64_t)AGCLLVMUserObjectShaderBase::buildLocalID;
      unk_1EF8E8BB8 = 0;
      dword_1EF8E8BC0 = 4;
      word_1EF8E8BC4 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EF8E8BC6[2], "air.get_local_linear_id");
      dword_1EF8E8BE0 = 1;
      qword_1EF8E8BE8 = (uint64_t)AGCLLVMUserObjectShaderBase::buildLocalLinearID;
      unk_1EF8E8BF0 = 0;
      dword_1EF8E8BF8 = 2;
      word_1EF8E8BFC = 0;
      v18 = std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8C00, "air.get_num_groups");
      dword_1EF8E8C18 = 1;
      *((_OWORD *)v18 + 2) = xmmword_1C3E37C10;
      dword_1EF8E8C30 = 4;
      word_1EF8E8C34 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8C38, "air.get_group_id");
      dword_1EF8E8C50 = 1;
      qword_1EF8E8C58 = (uint64_t)AGCLLVMUserObjectShaderBase::buildGroupID;
      unk_1EF8E8C60 = 0;
      dword_1EF8E8C68 = 4;
      word_1EF8E8C6C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8C70, "air.get_dispatch_local_size");
      dword_1EF8E8C88 = 1;
      qword_1EF8E8C90 = (uint64_t)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize;
      unk_1EF8E8C98 = 0;
      dword_1EF8E8CA0 = 4;
      word_1EF8E8CA4 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EF8E8CA6[2], "air.get_quadgroups_per_threadgroup");
      dword_1EF8E8CC0 = 1;
      qword_1EF8E8CC8 = (uint64_t)AGCLLVMUserObjectShaderBase::buildQuadgroupsPerThreadgroup;
      unk_1EF8E8CD0 = 0;
      dword_1EF8E8CD8 = 2;
      word_1EF8E8CDC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8CE0, "air.get_simdgroups_per_threadgroup");
      dword_1EF8E8CF8 = 1;
      qword_1EF8E8D00 = (uint64_t)AGCLLVMUserObjectShaderBase::buildSimdgroupsPerThreadgroup;
      qword_1EF8E8D08 = 0;
      dword_1EF8E8D10 = 2;
      word_1EF8E8D14 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8D18, "air.get_dispatch_quadgroups_per_threadgroup");
      dword_1EF8E8D30 = 1;
      qword_1EF8E8D38 = (uint64_t)AGCLLVMUserObjectShaderBase::buildDispatchQuadgroupsPerThreadgroup;
      qword_1EF8E8D40 = 0;
      dword_1EF8E8D48 = 2;
      word_1EF8E8D4C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8D50, "air.get_dispatch_simdgroups_per_threadgroup");
      dword_1EF8E8D68 = 1;
      qword_1EF8E8D70 = (uint64_t)AGCLLVMUserObjectShaderBase::buildDispatchSimdgroupsPerThreadgroup;
      qword_1EF8E8D78 = 0;
      dword_1EF8E8D80 = 2;
      word_1EF8E8D84 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EF8E8D86[2], "air.get_quad_group");
      dword_1EF8E8DA0 = 1;
      qword_1EF8E8DA8 = (uint64_t)AGCLLVMUserObjectShaderBase::buildQuadGroup;
      qword_1EF8E8DB0 = 0;
      dword_1EF8E8DB8 = 2;
      word_1EF8E8DBC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8DC0, "air.get_thread_index_in_simdgroup");
      dword_1EF8E8DD8 = 1;
      qword_1EF8E8DE0 = (uint64_t)AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup;
      qword_1EF8E8DE8 = 0;
      dword_1EF8E8DF0 = 2;
      word_1EF8E8DF4 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8DF8, "air.get_simdgroup_index_in_threadgroup");
      dword_1EF8E8E10 = 1;
      qword_1EF8E8E18 = (uint64_t)AGCLLVMUserObjectShaderBase::buildSimdGroupIndexInThreadgroup;
      qword_1EF8E8E20 = 0;
      dword_1EF8E8E28 = 2;
      word_1EF8E8E2C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8E30, "air.get_dispatch_threads_per_threadgroup");
      dword_1EF8E8E48 = 1;
      qword_1EF8E8E50 = (uint64_t)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize;
      qword_1EF8E8E58 = 0;
      dword_1EF8E8E60 = 4;
      word_1EF8E8E64 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EF8E8E66[2], "air.get_quadgroup_index_in_threadgroup");
      dword_1EF8E8E80 = 1;
      qword_1EF8E8E88 = (uint64_t)AGCLLVMUserObjectShaderBase::buildQuadGroup;
      qword_1EF8E8E90 = 0;
      dword_1EF8E8E98 = 2;
      word_1EF8E8E9C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E8EA0, "air.get_thread_index_in_quadgroup");
      dword_1EF8E8EB8 = 1;
      qword_1EF8E8EC0 = (uint64_t)AGCLLVMUserObjectShaderBase::buildQuadElement;
      qword_1EF8E8EC8 = 0;
      dword_1EF8E8ED0 = 2;
      word_1EF8E8ED4 = 0;
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_591, 0, &dword_1C3C54000);
    }
    for (i = 0; i != 1008; i += 56)
    {
      v6 = &AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i];
      if (AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i + 23] >= 0)
        v7 = AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i + 23];
      else
        v7 = *(_QWORD *)&AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i + 8];
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v7 + 4);
      if (v21 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v7)
      {
        if (v6[23] >= 0)
          v9 = &AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i];
        else
          v9 = *(char **)v6;
        memmove(p_p, v9, v7);
      }
      strcpy((char *)p_p + v7, ".i32");
      if (v21 >= 0)
        v10 = &__p;
      else
        v10 = __p;
      if (v21 >= 0)
        v11 = HIBYTE(v21);
      else
        v11 = (uint64_t)v20;
      AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderBase>::doReplacement((uint64_t)&v24, (uint64_t)v10, v11, (uint64_t)(v6 + 24));
      if (SHIBYTE(v21) < 0)
        operator delete(__p);
      if (v6[23] >= 0)
        v12 = v6[23];
      else
        v12 = *((_QWORD *)v6 + 1);
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v12 + 4);
      if (v21 >= 0)
        v13 = &__p;
      else
        v13 = __p;
      if (v12)
      {
        if (v6[23] >= 0)
          v14 = &AGCLLVMUserObjectShaderBase::replaceBuiltins(void)::workitem_functions[i];
        else
          v14 = *(char **)v6;
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, ".i16");
      if (v21 >= 0)
        v15 = &__p;
      else
        v15 = __p;
      if (v21 >= 0)
        v16 = HIBYTE(v21);
      else
        v16 = (uint64_t)v20;
      AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderBase>::doReplacement((uint64_t)&v24, (uint64_t)v15, v16, (uint64_t)(v6 + 24));
      if (SHIBYTE(v21) < 0)
        operator delete(__p);
    }
    LODWORD(__p) = 1;
    v20 = AGCLLVMUserObjectShaderBase::getEmulationPayloadBuffer;
    v21 = 0;
    v22 = 1;
    v23 = 0;
    AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderBase>::doReplacement((uint64_t)&v24, (uint64_t)"agc.gpe.get_payload_buffer", 26, (uint64_t)&__p);
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v28);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v27);
    if (v25 != &v26)
      free(v25);
  }
  return v2;
}

uint64_t AGCLLVMUserObjectShaderBase::buildGlobalID(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildGlobalID(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildLocalSize(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildLocalSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildLocalID(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *, uint64_t))(*(_QWORD *)v7 + 256))(v7, &v11, a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildLocalLinearID(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = AGCLLVMGen3TargetLowerer::buildLocalLinearID(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::buildGroupID(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupDispatchSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserObjectShaderBase::buildQuadgroupsPerThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  return AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<2u>(this, a2, 0);
}

uint64_t AGCLLVMUserObjectShaderBase::buildSimdgroupsPerThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  return AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<5u>(this, a2, 0);
}

uint64_t AGCLLVMUserObjectShaderBase::buildDispatchQuadgroupsPerThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  return AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<2u>(this, a2, 1);
}

uint64_t AGCLLVMUserObjectShaderBase::buildDispatchSimdgroupsPerThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  return AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<5u>(this, a2, 1);
}

uint64_t AGCLLVMUserObjectShaderBase::buildQuadGroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = AGCLLVMGen3TargetLowerer::buildQuadGroup(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::buildThreadIndexInSimdGroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *))(*(_QWORD *)v5 + 1536))(v5, &v9, a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::buildSimdGroupIndexInThreadgroup(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *))(*(_QWORD *)v5 + 1544))(v5, &v9, a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::buildQuadElement(AGCLLVMUserObjectShaderBase *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserObjectShaderBase::getEmulationPayloadBuffer(AGCLLVMUserObjectShaderBase *this)
{
  return AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 2, 0);
}

uint64_t AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderBase>::doReplacement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  llvm::Function *v6;
  int v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *, _QWORD);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;
  llvm::IRBuilderBase *v20;
  llvm::Instruction *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  llvm::Value **v28;
  llvm::Instruction *v29;
  llvm::Value **v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Type *v33;
  uint64_t v34;
  int v35;
  llvm::Type *v36;
  uint64_t v37;
  llvm::Value **v38;
  llvm::Value *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD *);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  llvm::Value *FPTrunc;
  uint64_t (*v46)(_QWORD *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t (*v52)(_QWORD *, _QWORD, _QWORD);
  uint64_t v53;
  _QWORD *v54;
  uint64_t (*v55)(_QWORD *, _QWORD, _QWORD);
  uint64_t v56;
  _QWORD *v57;
  uint64_t (*v58)(_QWORD *, _OWORD *, void *, uint64_t);
  uint64_t v59;
  _QWORD *v60;
  _OWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD);
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Value *v70;
  uint64_t v71;
  int v72;
  llvm::Function *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Value *v77;
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  _QWORD v85[4];
  __int16 v86;
  _OWORD v87[3];
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  result = llvm::Module::getFunction();
  if (result)
  {
    v6 = (llvm::Function *)result;
    v7 = *(_DWORD *)(a4 + 24);
    if (v7 == 10)
    {
      v10 = *(_QWORD *)(result + 8);
      if (v10)
      {
        do
        {
          v11 = *(void (**)(_QWORD *, _QWORD))(a4 + 8);
          v12 = *(_QWORD *)(a4 + 16);
          v13 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v12 >> 1));
          if ((v12 & 1) != 0)
            v11 = *(void (**)(_QWORD *, _QWORD))(*v13 + v11);
          v14 = *(_QWORD *)(v10 + 8);
          v11(v13, *(_QWORD *)(v10 + 24));
          v10 = v14;
        }
        while (v14);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    if (v7 == 9)
    {
      v8 = *(_BYTE **)(a4 + 8);
      if (v8)
      {
        v9 = strlen(*(const char **)(a4 + 8));
        *(_QWORD *)&v87[0] = (char *)&v87[1] + 8;
        *(_OWORD *)((char *)v87 + 8) = xmmword_1C3E37B50;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v87, v8, &v8[v9]);
      }
      else
      {
        *(_QWORD *)&v87[1] = 64;
        *(_QWORD *)&v87[0] = (char *)&v87[1] + 8;
        *((_QWORD *)&v87[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v87, ".", "");
      v71 = *((_QWORD *)&v87[0] + 1);
      if (*(_QWORD *)&v87[1] < *((_QWORD *)&v87[0] + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v71 = *((_QWORD *)&v87[0] + 1);
      }
      *((_QWORD *)&v87[0] + 1) = v71;
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v87[0] != (_OWORD *)((char *)&v87[1] + 8))
        free(*(void **)&v87[0]);
      return llvm::Function::eraseFromParent(v6);
    }
    v15 = **(_QWORD **)(*(_QWORD *)(result + 24) + 16);
    v16 = (*(_DWORD *)(v15 + 8) & 0xFE) != 0x12 || *(_BYTE *)(a4 + 29) == 0;
    v17 = !v16;
    if (v16)
      v18 = 1;
    else
      v18 = *(_DWORD *)(v15 + 32);
    v74 = v18;
    v72 = *(_DWORD *)(a1 + 104);
    v73 = (llvm::Function *)result;
    v19 = *(_QWORD *)(result + 8);
    if (!v19)
    {
LABEL_95:
      *(_DWORD *)(a1 + 104) = v72;
      v6 = v73;
      return llvm::Function::eraseFromParent(v6);
    }
    v20 = (llvm::IRBuilderBase *)(a1 + 8);
    v76 = a4;
    while (1)
    {
      v21 = *(llvm::Instruction **)(v19 + 24);
      v22 = *(_QWORD *)(v19 + 8);
      if (*(_DWORD *)a4 == 1)
      {
        v23 = 0;
      }
      else
      {
        if (*(_DWORD *)a4 != 2)
          goto LABEL_27;
        v23 = 121;
      }
      *(_DWORD *)(a1 + 104) = v23;
LABEL_27:
      v75 = v22;
      llvm::IRBuilderBase::SetInsertPoint(v20, v21);
      v24 = llvm::UndefValue::get();
      if (v74)
      {
        for (i = 0; i != v74; ++i)
        {
          v77 = (llvm::Value *)v24;
          v88 = 0;
          memset(v87, 0, sizeof(v87));
          v26 = llvm::CallBase::arg_end(v21) - (_QWORD)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
          if ((v26 & 0x1FFFFFFFE0) != 0)
          {
            v27 = (v26 >> 5);
            v28 = (llvm::Value **)v87;
            v29 = v21;
            do
            {
              v30 = (llvm::Value **)((char *)v29 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              v31 = *v30;
              *v28 = *v30;
              if (v17 && (*(_DWORD *)(*(_QWORD *)v31 + 8) & 0xFE) == 0x12)
              {
                v86 = 257;
                v32 = (llvm::Value *)llvm::ConstantInt::get();
                *v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, v31, v32, (const llvm::Twine *)v85);
              }
              ++v28;
              v29 = (llvm::Instruction *)((char *)v29 + 32);
              --v27;
            }
            while (v27);
          }
          if (*(_BYTE *)(v76 + 28))
          {
            v33 = **(llvm::Type ***)&v87[0];
            if ((*(_DWORD *)(**(_QWORD **)&v87[0] + 8) & 0xFE) == 0x12)
              v33 = (llvm::Type *)**((_QWORD **)v33 + 2);
            v85[0] = llvm::Type::getPrimitiveSizeInBits(v33);
            v85[1] = v34;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              v35 = 0;
            }
            else
            {
              v36 = *(llvm::Type **)(a1 + 168);
              if ((*(_DWORD *)(**(_QWORD **)&v87[0] + 8) & 0xFE) == 0x12)
                v36 = (llvm::Type *)llvm::FixedVectorType::get();
              if ((v26 & 0x1FFFFFFFE0) != 0)
              {
                v37 = (v26 >> 5);
                v38 = (llvm::Value **)v87;
                do
                {
                  v39 = *v38;
                  v86 = 257;
                  *v38++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v20, v39, v36, (const llvm::Twine *)v85);
                  --v37;
                }
                while (v37);
                v35 = 1;
              }
              else
              {
                v35 = 1;
              }
            }
          }
          else
          {
            v35 = 0;
          }
          v40 = *(_QWORD *)(**(_QWORD **)(a1 + 368) - 24) + *(_QWORD *)(a1 + 368);
          v82 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(v20);
          v84 = *(_DWORD *)(a1 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v82, v40 + 40);
          if (v83)
            llvm::MetadataTracking::untrack();
          switch(*(_DWORD *)(v76 + 24))
          {
            case 1:
              v41 = *(uint64_t (**)(_QWORD *))(v76 + 8);
              v42 = *(_QWORD *)(v76 + 16);
              v43 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v42 >> 1));
              if ((v42 & 1) != 0)
                v41 = *(uint64_t (**)(_QWORD *))(*v43 + v41);
              v44 = v41(v43);
              goto LABEL_80;
            case 2:
              v46 = *(uint64_t (**)(_QWORD *, uint64_t))(v76 + 8);
              v47 = *(_QWORD *)(v76 + 16);
              v48 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v47 >> 1));
              if ((v47 & 1) != 0)
                v46 = *(uint64_t (**)(_QWORD *, uint64_t))(*v48 + v46);
              v49 = *(_QWORD *)v21;
              goto LABEL_61;
            case 3:
              v46 = *(uint64_t (**)(_QWORD *, uint64_t))(v76 + 8);
              v50 = *(_QWORD *)(v76 + 16);
              v48 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v50 >> 1));
              if ((v50 & 1) != 0)
                v46 = *(uint64_t (**)(_QWORD *, uint64_t))(*v48 + v46);
              v49 = *(_QWORD *)&v87[0];
LABEL_61:
              v44 = v46(v48, v49);
              goto LABEL_80;
            case 4:
              v51 = (unsigned int *)(*(_QWORD *)&v87[0] + 24);
              if (*(_DWORD *)(*(_QWORD *)&v87[0] + 32) >= 0x41u)
                v51 = *(unsigned int **)v51;
              v52 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(v76 + 8);
              v53 = *(_QWORD *)(v76 + 16);
              v54 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v53 >> 1));
              if ((v53 & 1) != 0)
                v52 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v54 + v52);
              v44 = v52(v54, *(_QWORD *)v21, *v51);
              goto LABEL_80;
            case 5:
              v55 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(v76 + 8);
              v56 = *(_QWORD *)(v76 + 16);
              v57 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v56 >> 1));
              if ((v56 & 1) != 0)
                v55 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v57 + v55);
              v44 = v55(v57, *(_QWORD *)&v87[0], *((_QWORD *)&v87[0] + 1));
              goto LABEL_80;
            case 6:
              v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(v76 + 8);
              v59 = *(_QWORD *)(v76 + 16);
              v60 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v59 >> 1));
              if ((v59 & 1) != 0)
                v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(*v60 + v58);
              v62 = (void *)*((_QWORD *)&v87[0] + 1);
              v61 = *(_OWORD **)&v87[0];
              v63 = *(_QWORD *)&v87[1];
              goto LABEL_76;
            case 7:
              v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(v76 + 8);
              v64 = *(_QWORD *)(v76 + 16);
              v60 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v64 >> 1));
              if ((v64 & 1) != 0)
                v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(*v60 + v58);
              v61 = v87;
              v62 = &unk_1C3E4D9BB;
              v63 = 0;
LABEL_76:
              v44 = v58(v60, v61, v62, v63);
              goto LABEL_80;
            case 8:
              v65 = *(uint64_t (**)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))(v76 + 8);
              v66 = *(_QWORD *)(v76 + 16);
              v67 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v66 >> 1));
              if ((v66 & 1) != 0)
                v65 = *(uint64_t (**)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))(*v67 + v65);
              v44 = v65(v67, *(_QWORD *)v21, v87, &unk_1C3E4D9BB, 0);
LABEL_80:
              FPTrunc = (llvm::Value *)v44;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          v68 = *(_QWORD *)(**(_QWORD **)(a1 + 368) - 24) + *(_QWORD *)(a1 + 368);
          v79 = *(_OWORD *)(v68 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v68 + 40));
          v81 = *(_DWORD *)(v68 + 136);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v79, (uint64_t)v20);
          if (v80)
            llvm::MetadataTracking::untrack();
          if (v35)
          {
            v69 = *(_QWORD *)v21;
            if (v17 && (*(_DWORD *)(v69 + 8) & 0xFE) == 0x12)
              v69 = **(_QWORD **)(v69 + 16);
            v86 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v20, FPTrunc, (llvm::Type *)v69, (const llvm::Twine *)v85);
            if (!v17)
              goto LABEL_91;
          }
          else if (!v17)
          {
            goto LABEL_91;
          }
          v86 = 257;
          v70 = (llvm::Value *)llvm::ConstantInt::get();
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v20, v77, FPTrunc, v70, (const llvm::Twine *)v85);
LABEL_91:
          v24 = (uint64_t)FPTrunc;
        }
      }
      if (*(_QWORD *)v21 != *(_QWORD *)(a1 + 144))
        llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v21);
      a4 = v76;
      v19 = v75;
      if (!v75)
        goto LABEL_95;
    }
  }
  return result;
}

uint64_t AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(_QWORD *a1, int a2, char a3)
{
  uint64_t v6;
  llvm::GlobalVariable *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::GlobalVariable *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *EmulationStateCacheForCurrentFunction;
  char *v18;
  llvm::Value *v19;
  char *v20;
  llvm::IRBuilderBase *v21;
  uint64_t v22;
  llvm::BasicBlock *v23;
  uint64_t FirstInsertionPt;
  llvm::Instruction *v25;
  uint64_t *v26;
  llvm::Type **v27;
  llvm::Type *v28;
  uint64_t AlignedLoad;
  uint64_t *v30;
  llvm::Type **v31;
  llvm::Value *v32;
  llvm::Type *v33;
  llvm::Type **v34;
  llvm::Value *v35;
  llvm::Value *v36;
  llvm::Type *v37;
  llvm::Type **GEP;
  llvm::Value *v39;
  llvm::Type *v40;
  uint64_t v41;
  llvm::Value *v42;
  uint64_t *v43;
  llvm::Type **v44;
  llvm::Value *v45;
  llvm::Type *v46;
  llvm::Type **v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Type *v50;
  llvm::Type **v51;
  llvm::Value *v52;
  llvm::Type *v53;
  uint64_t v54;
  llvm::Value *v55;
  llvm::ValueHandleBase *v56;
  llvm::Value *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  llvm::Type **v61;
  llvm::Value *v62;
  llvm::Type *v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Value *Cast;
  uint64_t Add;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  llvm::ValueHandleBase *v71;
  llvm::Value *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  llvm::Type **v76;
  llvm::Value *v77;
  llvm::Type *v78;
  uint64_t v79;
  uint64_t v80;
  llvm::Value *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  llvm::Value *v85;
  uint64_t *v86;
  uint64_t *v87;
  llvm::Type **v88;
  llvm::Value *v89;
  llvm::Type *v90;
  uint64_t v91;
  uint64_t v92;
  llvm::Value *v93;
  llvm::Value *v94;
  uint64_t *v95;
  uint64_t *v96;
  llvm::Type **v97;
  llvm::Value *v98;
  llvm::Type *v99;
  uint64_t v100;
  uint64_t v101;
  llvm::Value *v102;
  llvm::Value *v103;
  uint64_t *v104;
  uint64_t *v105;
  llvm::Type **v106;
  llvm::Value *v107;
  llvm::Type *v108;
  uint64_t v109;
  uint64_t v110;
  llvm::Value *v111;
  uint64_t v112;
  char *v113;
  llvm::ValueHandleBase *v114;
  uint64_t v115;
  llvm::Value *v116;
  uint64_t *v117;
  uint64_t *v118;
  llvm::Type **v119;
  llvm::Value *v120;
  llvm::Type *v121;
  uint64_t v122;
  uint64_t v123;
  llvm::Value *v124;
  llvm::Value *v125;
  uint64_t *v126;
  uint64_t *v127;
  llvm::Type **v128;
  llvm::Value *v129;
  llvm::Type *v130;
  uint64_t v131;
  uint64_t v132;
  llvm::Value *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t TypeByName;
  __int128 v139;
  uint64_t v140;
  int v141;
  _QWORD v142[4];
  __int16 v143;
  _BYTE v144[32];
  __int16 v145;
  __int128 v146;
  uint64_t v147;
  int v148;
  _QWORD v149[4];
  __int16 v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t __src;
  char v154[24];
  __int16 v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  if (!a1[561])
  {
    v6 = *a1;
    v156 = *(char **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 232);
    v157 = *(_QWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 232);
    v158 = *(_QWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 232);
    v159 = *(_QWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 232);
    v160 = *(_QWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 232);
    v161 = *(_QWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 232);
    v162 = *(_QWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 232);
    llvm::StructType::create();
    v7 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    v156 = "agc.mesh_state_buffer";
    LOWORD(v160) = 259;
    llvm::GlobalVariable::GlobalVariable();
    *((_BYTE *)v7 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 47);
    v10 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v8 + 32), v7);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v9, v10);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 559), (uint64_t)v7);
  }
  if (!a1[564])
  {
    v11 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    llvm::PointerType::get();
    v156 = "agc.gpe_mailbox_state_base";
    LOWORD(v160) = 259;
    llvm::GlobalVariable::GlobalVariable();
    *((_BYTE *)v11 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v12 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v13 = *((_QWORD *)v12 + 47);
    v14 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v12 + 32), v11);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v13, v14);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 562), (uint64_t)v11);
  }
  __src = llvm::PointerType::get();
  v156 = (char *)&v158;
  v157 = 0x100000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v156, &__src, v154);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v16 = v15;
  if (v156 != (char *)&v158)
    free(v156);
  EmulationStateCacheForCurrentFunction = AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction((AGCLLVMUserObjectShaderBase *)a1);
  TypeByName = llvm::StructType::getTypeByName();
  v18 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v146 = *(_OWORD *)(v18 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v18 + 40));
  v148 = *((_DWORD *)v18 + 34);
  if ((a3 & 1) == 0)
  {
    v20 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v21 = (llvm::IRBuilderBase *)(v20 + 40);
    v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v20 + 11) + 56) + 80);
    if (v22)
      v23 = (llvm::BasicBlock *)(v22 - 24);
    else
      v23 = 0;
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v23);
    if (FirstInsertionPt)
      v25 = (llvm::Instruction *)(FirstInsertionPt - 24);
    else
      v25 = 0;
    llvm::IRBuilderBase::SetInsertPoint(v21, v25);
  }
  if (!EmulationStateCacheForCurrentFunction[11])
  {
    v26 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v27 = (llvm::Type **)a1[561];
    LOWORD(v160) = 257;
    v28 = AGCLLVMBuilder::tryDeducePointeeType(v27, v19);
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v26 + 5, v28, (uint64_t)v27, 0, (uint64_t)&v156);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 9), AlignedLoad);
  }
  if (!EmulationStateCacheForCurrentFunction[5])
  {
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40, *(_QWORD *)(EmulationStateCacheForCurrentFunction[11] + 40), *(_QWORD *)(EmulationStateCacheForCurrentFunction[11] + 32));
    v149[0] = 0;
    v30 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v31 = (llvm::Type **)a1[564];
    LOWORD(v160) = 257;
    v33 = AGCLLVMBuilder::tryDeducePointeeType(v31, v32);
    v30 += 5;
    v34 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v30, v33, (uint64_t)v31, 0, (uint64_t)&v156);
    v35 = (llvm::Value *)llvm::ConstantInt::get();
    v155 = 257;
    v37 = AGCLLVMBuilder::tryDeducePointeeType(v34, v36);
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v30, v37, (llvm::Value *)v34, v35, (const llvm::Twine *)&__src);
    v145 = 257;
    v40 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v39);
    v149[0] = llvm::IRBuilderBase::CreateAlignedLoad(v30, v40, (uint64_t)GEP, 0, (uint64_t)v144);
    v41 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    LOWORD(v160) = 257;
    v42 = llvm::IRBuilderBase::CreateCall(v41, *(_QWORD *)(v16 + 24), v16, (uint64_t)v149, 1, (uint64_t)&v156);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 3), (uint64_t)v42);
  }
  if (!EmulationStateCacheForCurrentFunction[8])
  {
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40, *(_QWORD *)(EmulationStateCacheForCurrentFunction[11] + 40), *(_QWORD *)(EmulationStateCacheForCurrentFunction[11] + 32));
    v149[0] = 0;
    v43 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v44 = (llvm::Type **)a1[564];
    LOWORD(v160) = 257;
    v46 = AGCLLVMBuilder::tryDeducePointeeType(v44, v45);
    v43 += 5;
    v47 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v43, v46, (uint64_t)v44, 0, (uint64_t)&v156);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v155 = 257;
    v50 = AGCLLVMBuilder::tryDeducePointeeType(v47, v49);
    v51 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v43, v50, (llvm::Value *)v47, v48, (const llvm::Twine *)&__src);
    v145 = 257;
    v53 = AGCLLVMBuilder::tryDeducePointeeType(v51, v52);
    v149[0] = llvm::IRBuilderBase::CreateAlignedLoad(v43, v53, (uint64_t)v51, 0, (uint64_t)v144);
    v54 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    LOWORD(v160) = 257;
    v55 = llvm::IRBuilderBase::CreateCall(v54, *(_QWORD *)(v16 + 24), v16, (uint64_t)v149, 1, (uint64_t)&v156);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 6), (uint64_t)v55);
  }
  switch(a2)
  {
    case 0:
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40, *(_QWORD *)(EmulationStateCacheForCurrentFunction[5] + 40), *(_QWORD *)(EmulationStateCacheForCurrentFunction[5] + 32));
      v56 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 12);
      if (EmulationStateCacheForCurrentFunction[14])
        goto LABEL_34;
      v57 = (llvm::Value *)EmulationStateCacheForCurrentFunction[5];
      v58 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      v59 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      v152 = llvm::ConstantInt::get();
      v60 = (uint64_t)(v58 + 5);
      LOWORD(v160) = 257;
      v61 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v58 + 5), TypeByName, v59, &v151, 2, (uint64_t)&v156);
      v155 = 257;
      v63 = AGCLLVMBuilder::tryDeducePointeeType(v61, v62);
      v64 = llvm::IRBuilderBase::CreateAlignedLoad(v58 + 5, v63, (uint64_t)v61, 0, (uint64_t)&__src);
      v65 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240);
      v145 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v58 + 5), 39, v64, v65, (uint64_t)v144);
      v150 = 257;
      Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v58 + 5), v57, Cast, (const llvm::Twine *)v149);
      v68 = llvm::PointerType::get();
      v69 = "agc.gpe.object_metadata";
      goto LABEL_33;
    case 1:
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40, *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 40), *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 32));
      v56 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 15);
      if (EmulationStateCacheForCurrentFunction[17])
        goto LABEL_34;
      v103 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      v104 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      v105 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      v152 = llvm::ConstantInt::get();
      v60 = (uint64_t)(v104 + 5);
      LOWORD(v160) = 257;
      v106 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v104 + 5), TypeByName, v105, &v151, 2, (uint64_t)&v156);
      v155 = 257;
      v108 = AGCLLVMBuilder::tryDeducePointeeType(v106, v107);
      v109 = llvm::IRBuilderBase::CreateAlignedLoad(v104 + 5, v108, (uint64_t)v106, 0, (uint64_t)&__src);
      v110 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240);
      v145 = 257;
      v111 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v104 + 5), 39, v109, v110, (uint64_t)v144);
      v150 = 257;
      Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v104 + 5), v103, v111, (const llvm::Twine *)v149);
      v68 = llvm::PointerType::get();
      v69 = "agc.gpe.mesh_metadata";
      goto LABEL_33;
    case 2:
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40, *(_QWORD *)(EmulationStateCacheForCurrentFunction[5] + 40), *(_QWORD *)(EmulationStateCacheForCurrentFunction[5] + 32));
      v71 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 18);
      if (EmulationStateCacheForCurrentFunction[20])
        goto LABEL_40;
      v72 = (llvm::Value *)EmulationStateCacheForCurrentFunction[5];
      v73 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      v74 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      v152 = llvm::ConstantInt::get();
      v75 = (uint64_t)(v73 + 5);
      LOWORD(v160) = 257;
      v76 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v73 + 5), TypeByName, v74, &v151, 2, (uint64_t)&v156);
      v155 = 257;
      v78 = AGCLLVMBuilder::tryDeducePointeeType(v76, v77);
      v79 = llvm::IRBuilderBase::CreateAlignedLoad(v73 + 5, v78, (uint64_t)v76, 0, (uint64_t)&__src);
      v80 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240);
      v145 = 257;
      v81 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v73 + 5), 39, v79, v80, (uint64_t)v144);
      v150 = 257;
      v82 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v73 + 5), v72, v81, (const llvm::Twine *)v149);
      v83 = llvm::PointerType::get();
      v84 = "agc.gpe.payload_buffer";
      goto LABEL_39;
    case 3:
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40, *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 40), *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 32));
      v56 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 21);
      if (EmulationStateCacheForCurrentFunction[23])
        goto LABEL_34;
      v85 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      v86 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      v87 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      v152 = llvm::ConstantInt::get();
      v60 = (uint64_t)(v86 + 5);
      LOWORD(v160) = 257;
      v88 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v86 + 5), TypeByName, v87, &v151, 2, (uint64_t)&v156);
      v155 = 257;
      v90 = AGCLLVMBuilder::tryDeducePointeeType(v88, v89);
      v91 = llvm::IRBuilderBase::CreateAlignedLoad(v86 + 5, v90, (uint64_t)v88, 0, (uint64_t)&__src);
      v92 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240);
      v145 = 257;
      v93 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v86 + 5), 39, v91, v92, (uint64_t)v144);
      v150 = 257;
      Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v86 + 5), v85, v93, (const llvm::Twine *)v149);
      v68 = llvm::PointerType::get();
      v69 = "agc.gpe.vdm_stream";
LABEL_33:
      v142[0] = v69;
      v143 = 259;
      v112 = llvm::IRBuilderBase::CreateCast(v60, 48, Add, v68, (uint64_t)v142);
      llvm::ValueHandleBase::operator=(v56, v112);
LABEL_34:
      v113 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v114 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)&v156, 2u, v56);
      v115 = *((_QWORD *)v113 + 29);
      goto LABEL_41;
    case 4:
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40, *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 40), *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 32));
      v71 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 24);
      if (EmulationStateCacheForCurrentFunction[26])
        goto LABEL_40;
      v94 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      v95 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      v96 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      v152 = llvm::ConstantInt::get();
      v75 = (uint64_t)(v95 + 5);
      LOWORD(v160) = 257;
      v97 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v95 + 5), TypeByName, v96, &v151, 2, (uint64_t)&v156);
      v155 = 257;
      v99 = AGCLLVMBuilder::tryDeducePointeeType(v97, v98);
      v100 = llvm::IRBuilderBase::CreateAlignedLoad(v95 + 5, v99, (uint64_t)v97, 0, (uint64_t)&__src);
      v101 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240);
      v145 = 257;
      v102 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v95 + 5), 39, v100, v101, (uint64_t)v144);
      v150 = 257;
      v82 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v95 + 5), v94, v102, (const llvm::Twine *)v149);
      v83 = llvm::PointerType::get();
      v84 = "agc.gpe.index_buffer";
      goto LABEL_39;
    case 5:
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40, *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 40), *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 32));
      v71 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 27);
      if (EmulationStateCacheForCurrentFunction[29])
        goto LABEL_40;
      v116 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      v117 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      v118 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      v152 = llvm::ConstantInt::get();
      v75 = (uint64_t)(v117 + 5);
      LOWORD(v160) = 257;
      v119 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v117 + 5), TypeByName, v118, &v151, 2, (uint64_t)&v156);
      v155 = 257;
      v121 = AGCLLVMBuilder::tryDeducePointeeType(v119, v120);
      v122 = llvm::IRBuilderBase::CreateAlignedLoad(v117 + 5, v121, (uint64_t)v119, 0, (uint64_t)&__src);
      v123 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240);
      v145 = 257;
      v124 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v117 + 5), 39, v122, v123, (uint64_t)v144);
      v150 = 257;
      v82 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v117 + 5), v116, v124, (const llvm::Twine *)v149);
      v83 = llvm::PointerType::get();
      v84 = "agc.gpe.vertex_buffer";
      goto LABEL_39;
    case 6:
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40, *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 40), *(_QWORD *)(EmulationStateCacheForCurrentFunction[8] + 32));
      v71 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 30);
      if (EmulationStateCacheForCurrentFunction[32])
        goto LABEL_40;
      v125 = (llvm::Value *)EmulationStateCacheForCurrentFunction[8];
      v126 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
      v127 = (uint64_t *)EmulationStateCacheForCurrentFunction[11];
      v151 = (uint64_t *)llvm::ConstantInt::get();
      v152 = llvm::ConstantInt::get();
      v75 = (uint64_t)(v126 + 5);
      LOWORD(v160) = 257;
      v128 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v126 + 5), TypeByName, v127, &v151, 2, (uint64_t)&v156);
      v155 = 257;
      v130 = AGCLLVMBuilder::tryDeducePointeeType(v128, v129);
      v131 = llvm::IRBuilderBase::CreateAlignedLoad(v126 + 5, v130, (uint64_t)v128, 0, (uint64_t)&__src);
      v132 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240);
      v145 = 257;
      v133 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v126 + 5), 39, v131, v132, (uint64_t)v144);
      v150 = 257;
      v82 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v126 + 5), v125, v133, (const llvm::Twine *)v149);
      v83 = llvm::PointerType::get();
      v84 = "agc.gpe.primitive_buffer";
LABEL_39:
      v142[0] = v84;
      v143 = 259;
      v134 = llvm::IRBuilderBase::CreateCast(v75, 48, v82, v83, (uint64_t)v142);
      llvm::ValueHandleBase::operator=(v71, v134);
LABEL_40:
      v135 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v114 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)&v156, 2u, v71);
      v115 = *((_QWORD *)v135 + 27);
LABEL_41:
      v159 = v115;
      v70 = v158;
      if (v158 != -8192 && v158 != -4096 && v158)
        llvm::ValueHandleBase::RemoveFromUseList(v114);
LABEL_45:
      v136 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 32;
      v139 = v146;
      v140 = v147;
      if (v147)
        llvm::MetadataTracking::track();
      v141 = v148;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v139, v136 + 8);
      if (v140)
        llvm::MetadataTracking::untrack();
      if (v147)
        llvm::MetadataTracking::untrack();
      return v70;
    default:
      v70 = 0;
      goto LABEL_45;
  }
}

uint64_t AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<5u>(AGCLLVMUserObjectShaderBase *a1, llvm::Type *a2, int a3)
{
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v9;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  llvm::Value *Add;
  llvm::Value *v17;
  _WORD v19[20];
  _BYTE v20[32];
  __int16 v21;

  v5 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  if (a3)
  {
    v6 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 0);
    v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 2);
  }
  else
  {
    v11 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 0);
    v12 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 2);
  }
  v21 = 257;
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  v14 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

uint64_t AGCLLVMUserObjectShaderBase::buildGroupsPerThreadgroup<2u>(AGCLLVMUserObjectShaderBase *a1, llvm::Type *a2, int a3)
{
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v9;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  llvm::Value *Add;
  llvm::Value *v17;
  _WORD v19[20];
  _BYTE v20[32];
  __int16 v21;

  v5 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  if (a3)
  {
    v6 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 0);
    v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(a1, a2, 2);
  }
  else
  {
    v11 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 0);
    v12 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildLocalSize(a1, a2, 2);
  }
  v21 = 257;
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  v14 = (AGCLLVMUserObjectShaderBase *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

uint64_t AGCLLVMUserObjectShaderBase::getVertexAmpCount(AGCLLVMUserObjectShaderBase *this, llvm::Value *a2)
{
  llvm::Type **v3;
  llvm::GlobalVariable *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  llvm::Type *v10;
  const char *v12;
  __int16 v13;

  if (!*((_BYTE *)this + 4405))
    return llvm::ConstantInt::get();
  v3 = (llvm::Type **)*((_QWORD *)this + 553);
  if (!v3)
  {
    v4 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v12 = "agc.driver_constants.amp_count";
    v13 = 259;
    v5 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v5 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v7 = *((_QWORD *)v6 + 47);
    v8 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v6 + 32), v4);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v7, v8);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObjectShaderBase *)((char *)this + 4408), (uint64_t)v4);
    v3 = (llvm::Type **)*((_QWORD *)this + 553);
  }
  v9 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v13 = 257;
  v10 = AGCLLVMBuilder::tryDeducePointeeType(v3, a2);
  return llvm::IRBuilderBase::CreateAlignedLoad(v9 + 5, v10, (uint64_t)v3, 0, (uint64_t)&v12);
}

uint64_t AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD __src[3];
  void *v11[2];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  __src[0] = a5;
  __src[1] = a6;
  __src[2] = a7;
  v11[0] = v12;
  v11[1] = (void *)0x300000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v11, __src, v11);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v8 = v7;
  if (v11[0] != v12)
    free(v11[0]);
  return v8;
}

char *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ObjectShaderInfo>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 20, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

BOOL AGCLLVMUserObjectShaderBase::validateReply(AGCLLVMUserObjectShaderBase *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  uint64_t v10;
  unsigned int *v11;
  BOOL v12;
  int *v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int *v16;
  unsigned int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL8 result;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  std::string *v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *p_p;
  std::string::size_type size;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string __p;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  __int128 v46;
  uint64_t v47;

  v2 = *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = (char *)this + v2;
  v4 = *(_QWORD *)((char *)this + v2 + 696);
  if (v4)
  {
    if (*((_QWORD *)v3 + 88))
      v5 = (_QWORD *)((char *)this + v2 + 696);
    else
      v5 = v3 + 1256;
  }
  else
  {
    v5 = v3 + 1256;
  }
  v6 = (int *)(*v5 + *(unsigned int *)*v5);
  v7 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 4));
  v8 = (unsigned int *)((char *)v7
                      + *v7
                      + *(unsigned __int16 *)((char *)v7 + *v7 - *(unsigned int *)((char *)v7 + *v7) + 8));
  if (v4)
  {
    if (*((_QWORD *)v3 + 88))
      v9 = (char *)this + v2 + 696;
    else
      v9 = v3 + 1256;
  }
  else
  {
    v9 = v3 + 1256;
  }
  v11 = *(unsigned int **)v9;
  v10 = *((_QWORD *)v9 + 1);
  if (v11)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (v12)
    v13 = 0;
  else
    v13 = (int *)((char *)v11 + *v11);
  v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 5u && (v15 = v14[2]) != 0)
    v16 = (int *)((char *)v13 + v15 + *(unsigned int *)((char *)v13 + v15));
  else
    v16 = 0;
  v17 = *(unsigned int *)((char *)v8 + *v8);
  v18 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v18 >= 0x3Du && (v19 = v18[30]) != 0)
    v20 = *(int *)((char *)v16 + v19);
  else
    v20 = 0;
  if (v17 <= 0x20)
  {
    result = validateUserLocalMemoryUsage(v20, *(_DWORD *)(*(_QWORD *)((char *)this + v2 + 400) + 856), (std::string *)(v3 + 8));
    if (!result)
      return result;
    v22 = *((_DWORD *)this + 1093);
    v23 = *(_QWORD *)(*(_QWORD *)this - 24);
    v24 = *(_DWORD *)(*(_QWORD *)((char *)this + v23 + 400) + 892);
    if (v22 <= v24)
      return 1;
    v25 = (std::string *)((char *)this + v23 + 8);
    std::to_string(&v41, v22);
    v26 = std::string::insert(&v41, 0, "Object shader payload size (");
    v27 = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v28 = std::string::append(&v42, ") ");
    v29 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v43, "exceeds the maximum payload size allowed (");
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v24);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v34 = std::string::append(&v44, (const std::string::value_type *)p_p, size);
    v35 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v45, ")");
    v37 = v36->__r_.__value_.__r.__words[2];
    v46 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v47 = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (v47 >= 0)
      v38 = (const std::string::value_type *)&v46;
    else
      v38 = (const std::string::value_type *)v46;
    if (v47 >= 0)
      v39 = HIBYTE(v47);
    else
      v39 = *((_QWORD *)&v46 + 1);
    std::string::append(v25, v38, v39);
    if (SHIBYTE(v47) < 0)
      operator delete((void *)v46);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t AGCLLVMUserObjectShader::buildSetMeshGridProperties(AGCLLVMUserObjectShader *this, llvm::Type **a2, llvm::Value *a3)
{
  char *v5;
  llvm::IRBuilderBase *v6;
  llvm::Type *v7;
  llvm::Value *PointerCast;
  llvm::Type **v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  llvm::Type **v14;
  llvm::Type *v15;
  llvm::Value *v16;
  char *v17;
  llvm::Type *v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Type **GEP;
  llvm::Type *v23;
  llvm::Value *v24;
  uint64_t i;
  uint64_t v26;
  uint64_t *v27;
  llvm::Type **v28;
  char *v29;
  llvm::Type *v30;
  llvm::Value *v31;
  uint64_t v32;
  _BYTE v34[32];
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  _BYTE v45[32];
  __int16 v46;

  v5 = (char *)this + 4384;
  v6 = (AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v7 = (llvm::Type *)*((_QWORD *)this + 545);
  v46 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v6, a2, v7, (const llvm::Twine *)v45);
  v9 = (llvm::Type **)AGCLLVMBuilder::extendVector((AGCLLVMUserObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), a3, 4);
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *((_QWORD *)v10 + 50);
  v42 = *(_OWORD *)(v10 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v10 + 40));
  v44 = *((_DWORD *)v10 + 34);
  (*(void (**)(uint64_t, __int128 *, llvm::Value *, llvm::Type **))(*(_QWORD *)v11 + 296))(v11, &v42, PointerCast, v9);
  if (v43)
    llvm::MetadataTracking::untrack();
  if (*v5)
  {
    v12 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v13 = *((_QWORD *)v12 + 50);
    v39 = *(_OWORD *)(v12 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v12 + 40));
    v41 = *((_DWORD *)v12 + 34);
    v14 = (llvm::Type **)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v13 + 320))(v13, &v39);
    v15 = (llvm::Type *)llvm::PointerType::get();
    v46 = 257;
    v16 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v12 + 40), v14, v15, (const llvm::Twine *)v45);
    if (v40)
      llvm::MetadataTracking::untrack();
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v9, (uint64_t)v16, 0);
  }
  if (v5[1])
  {
    v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v18 = (llvm::Type *)*((_QWORD *)v17 + 27);
    v19 = *((_QWORD *)v17 + 50);
    v36 = *(_OWORD *)(v17 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v17 + 40));
    v38 = *((_DWORD *)v17 + 34);
    v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v19 + 320))(v19, &v36);
    v21 = (llvm::Value *)llvm::ConstantInt::get();
    v46 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v17 + 40), v18, v20, v21, (const llvm::Twine *)v45);
    v23 = (llvm::Type *)llvm::PointerType::get();
    v35 = 257;
    v24 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v17 + 40), GEP, v23, (const llvm::Twine *)v34);
    if (v37)
      llvm::MetadataTracking::untrack();
    for (i = 0; i != 3; ++i)
    {
      v26 = *(_QWORD *)(*(_QWORD *)this - 24);
      v27 = (uint64_t *)((char *)this + v26 + 40);
      v28 = (llvm::Type **)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + v26 + 232), i);
      v29 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v30 = (llvm::Type *)*((_QWORD *)v29 + 29);
      v31 = (llvm::Value *)llvm::ConstantInt::get();
      v46 = 257;
      v32 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v29 + 40), v30, v24, v31, (const llvm::Twine *)v45);
      llvm::IRBuilderBase::CreateAlignedStore(v27, v28, v32, 0);
    }
  }
  return llvm::UndefValue::get();
}

uint64_t AGCLLVMUserObjectShader::getOrCreateChildcountGlobal(AGCLLVMUserObjectShader *this)
{
  uint64_t result;
  llvm::Constant *v3;
  uint64_t v4;
  llvm::Type *v5;

  result = *((_QWORD *)this + 568);
  if (!result)
  {
    v3 = *(llvm::Constant **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 344);
    v4 = llvm::User::operator new((llvm::User *)0x58);
    llvm::Constant::getNullValue(v3, v5);
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    llvm::ValueHandleBase::operator=((AGCLLVMUserObjectShader *)((char *)this + 4528), v4);
    return *((_QWORD *)this + 568);
  }
  return result;
}

uint64_t AGCLLVMDriverShader::getMaxTempRegistersOverride(AGCLLVMDriverShader *this)
{
  return 0;
}

_QWORD *AGCLLVMDriverShader::debugName@<X0>(AGCLLVMDriverShader *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;

  v3 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 56))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  return std::string::basic_string[abi:nn180100]<0>(a2, v3);
}

void AGCLLVMPassThroughObjectShader::~AGCLLVMPassThroughObjectShader(AGCLLVMPassThroughObjectShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassThroughObjectShader *)((char *)this + 112));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassThroughObjectShader *)((char *)this + 112));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL AGCLLVMPassThroughObjectShader::constructReply(AGCLLVMPassThroughObjectShader *this)
{
  flatbuffers::FlatBufferBuilder *v2;
  __int16 v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  char *v15;
  flatbuffers::FlatBufferBuilder *v16;
  int v17;
  const char *v18;
  uint64_t v19;
  char *v20;
  flatbuffers::FlatBufferBuilder *v21;
  int v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  AGCLLVMPassThroughObjectShader *v27;
  int *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int **v31;
  int *v32;
  unsigned __int16 *v33;
  uint64_t v34;
  int *v35;
  unsigned int v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned int v39;

  if (!AGCDeserializedReply::deserialize((AGCLLVMPassThroughObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160)))return 0;
  AGCLLVMObject::validateBackendReply((AGCLLVMPassThroughObjectShader *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
  v2 = AGCLLVMObject::constructFlatReply((AGCLLVMPassThroughObjectShader *)((char *)this
                                                                          + *(_QWORD *)(*(_QWORD *)this - 24)));
  v4 = flatbuffers::FlatBufferBuilder::EndTable(v2, v3);
  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = v5 + 2472;
  v5[2542] = 1;
  v7 = *((_DWORD *)v5 + 626) - *((_DWORD *)v5 + 630) + *((_DWORD *)v5 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5 + 2472, 4, *((_DWORD *)this + 25));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v6, 6, *((_DWORD *)this + 26));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v6, 8, *((_DWORD *)this + 27));
  LODWORD(v6) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v6, v7);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = v8 + 2472;
  v8[2542] = 1;
  v10 = *((_DWORD *)v8 + 626) - *((_DWORD *)v8 + 630) + *((_DWORD *)v8 + 628);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v8 + 2472, 4, *((_DWORD *)this + 18));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v9, 6, *((_DWORD *)this + 19));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v9, 8, *((_DWORD *)this + 20));
  LODWORD(v9) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v9, v10);
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v12 = v11 + 2472;
  v11[2542] = 1;
  v13 = *((_DWORD *)v11 + 626) - *((_DWORD *)v11 + 630) + *((_DWORD *)v11 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v11 + 2472, 4, (int)v6);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v12, 6, (int)v9);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 8, *((_DWORD *)this + 22));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 10, *((_DWORD *)this + 23));
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v12, 12, *((_DWORD *)this + 21));
  LODWORD(v6) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v12, v13);
  v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v15 = v14 + 2472;
  v14[2542] = 1;
  LODWORD(v12) = *((_DWORD *)v14 + 626) - *((_DWORD *)v14 + 630) + *((_DWORD *)v14 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v14 + 2472, v4);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ObjectShaderInfo>(v15, (int)v6);
  v16 = (AGCLLVMPassThroughObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
  v17 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v15, (__int16)v12);
  flatbuffers::FlatBufferBuilder::Finish(v16, v17, v18);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMPassThroughObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  v19 = *(_QWORD *)this;
  v20 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v20[2638] = 1;
  v21 = (AGCLLVMPassThroughObjectShader *)((char *)this + *(_QWORD *)(v19 - 24) + 2568);
  v22 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v20 + 2568), (unsigned __int16)*((_DWORD *)v20 + 650) - (unsigned __int16)*((_DWORD *)v20 + 654) + *((_DWORD *)v20 + 652));
  flatbuffers::FlatBufferBuilder::Finish(v21, v22, v23);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMPassThroughObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
  v24 = *(_QWORD *)(*(_QWORD *)this - 24);
  v25 = (char *)this + v24;
  v26 = *(_QWORD *)((char *)this + v24 + 696);
  if (v26)
    v27 = *((_QWORD *)v25 + 88)
        ? (AGCLLVMPassThroughObjectShader *)((char *)this + v24 + 696)
        : (AGCLLVMPassThroughObjectShader *)(v25 + 1256);
  else
    v27 = (AGCLLVMPassThroughObjectShader *)(v25 + 1256);
  v28 = (int *)(*(_QWORD *)v27 + **(unsigned int **)v27);
  v29 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - *v28 + 4));
  v30 = (unsigned int *)((char *)v29
                       + *v29
                       + *(unsigned __int16 *)((char *)v29 + *v29 - *(unsigned int *)((char *)v29 + *v29) + 8));
  if (v26)
  {
    v31 = (unsigned int **)(v25 + 1256);
    if (*((_QWORD *)v25 + 88))
      v31 = (unsigned int **)((char *)this + v24 + 696);
  }
  else
  {
    v31 = (unsigned int **)(v25 + 1256);
  }
  v32 = 0;
  if (*v31 && v31[1])
    v32 = (int *)((char *)*v31 + **v31);
  v33 = (unsigned __int16 *)((char *)v32 - *v32);
  if (*v33 >= 5u && (v34 = v33[2]) != 0)
    v35 = (int *)((char *)v32 + v34 + *(unsigned int *)((char *)v32 + v34));
  else
    v35 = 0;
  v36 = *(unsigned int *)((char *)v30 + *v30);
  v37 = (unsigned __int16 *)((char *)v35 - *v35);
  if (*v37 >= 0x3Du && (v38 = v37[30]) != 0)
    v39 = *(int *)((char *)v35 + v38);
  else
    v39 = 0;
  return v36 <= 0x20
      && validateUserLocalMemoryUsage(v39, *(_DWORD *)(*(_QWORD *)((char *)this + v24 + 400) + 856), (std::string *)(v25 + 8));
}

const char *AGCLLVMPassThroughObjectShader::dumpType(AGCLLVMPassThroughObjectShader *this)
{
  return "object_passthrough";
}

uint64_t AGCLLVMPassThroughObjectShader::getShaderType(AGCLLVMPassThroughObjectShader *this)
{
  return 32;
}

void AGCLLVMPassThroughObjectShader::getCompilationKeyDescription(AGCLLVMPassThroughObjectShader *this@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;
  std::string v8;
  std::string v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v6, (char *)&unk_1C3E4D9BB);
  std::string::basic_string[abi:nn180100]<0>(__p, "mesh_needs_tgs");
  std::to_string(&v8, *((unsigned __int8 *)this + 96));
  _agcFieldString<std::string>(&v9, (const void **)__p, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  _agcGroupWithHeader(a2, (uint64_t)v6, (uint64_t)&v9, 1);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

_QWORD *AGCLLVMPassThroughObjectShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.passthrough_object");
}

void `virtual thunk to'AGCLLVMPassThroughObjectShader::~AGCLLVMPassThroughObjectShader(AGCLLVMPassThroughObjectShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassThroughObjectShader *)((char *)this
                                                                 + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                 + 112));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassThroughObjectShader *)((char *)this
                                                                 + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                 + 112));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMPassThroughObjectShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.passthrough_object");
}

const char *`virtual thunk to'AGCLLVMPassThroughObjectShader::dumpType(AGCLLVMPassThroughObjectShader *this)
{
  return "object_passthrough";
}

uint64_t `virtual thunk to'AGCLLVMPassThroughObjectShader::getShaderType(AGCLLVMPassThroughObjectShader *this)
{
  return 32;
}

uint64_t `virtual thunk to'AGCLLVMDriverShader::getMaxTempRegistersOverride(AGCLLVMDriverShader *this)
{
  return 0;
}

void `virtual thunk to'AGCLLVMPassThroughObjectShader::getCompilationKeyDescription(AGCLLVMPassThroughObjectShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMPassThroughObjectShader::getCompilationKeyDescription((AGCLLVMPassThroughObjectShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

_QWORD *`virtual thunk to'AGCLLVMDriverShader::debugName@<X0>(AGCLLVMDriverShader *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;

  v3 = (char *)this
     + *(_QWORD *)(*(_QWORD *)this - 144)
     + *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 144)) - 24);
  v4 = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 56))(v3);
  return std::string::basic_string[abi:nn180100]<0>(a2, v4);
}

BOOL `virtual thunk to'AGCLLVMPassThroughObjectShader::constructReply(AGCLLVMPassThroughObjectShader *this)
{
  return AGCLLVMPassThroughObjectShader::constructReply((AGCLLVMPassThroughObjectShader *)((char *)this
                                                                                         + *(_QWORD *)(*(_QWORD *)this - 152)));
}

void AGCLLVMUserObjectShaderBase::AGCLLVMUserObjectShaderBase(AGCLLVMUserObjectShaderBase *this, AGCLLVMCtx *a2, llvm::Module *a3, char *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t Operand;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v6 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)this, (uint64_t *)a2 + 1, (uint64_t)a3, a4, (uint64_t)&default_cs, 0, 0);
  v7 = *(_QWORD *)a2;
  *v6 = *(_QWORD *)a2;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24)) = *((_QWORD *)a2 + 7);
  *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 32) = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 540) = llvm::PointerType::get();
  *((_QWORD *)this + 541) = llvm::PointerType::get();
  *((_QWORD *)this + 542) = llvm::PointerType::get();
  *((_QWORD *)this + 543) = llvm::PointerType::get();
  *((_QWORD *)this + 544) = llvm::PointerType::get();
  *((_QWORD *)this + 545) = llvm::PointerType::get();
  *((_OWORD *)this + 273) = xmmword_1C3E37C20;
  *((_WORD *)this + 2192) = 0;
  *(_OWORD *)((char *)this + 4388) = 0u;
  *((_WORD *)this + 2202) = 0;
  *((_QWORD *)this + 551) = 4;
  *((_OWORD *)this + 276) = 0u;
  *((_OWORD *)this + 277) = 0u;
  *((_OWORD *)this + 278) = 0u;
  *((_DWORD *)this + 1116) = 1065353216;
  *((_QWORD *)this + 559) = 4;
  *((_QWORD *)this + 561) = 0;
  *((_QWORD *)this + 560) = 0;
  *((_QWORD *)this + 562) = 4;
  *((_QWORD *)this + 564) = 0;
  *((_QWORD *)this + 563) = 0;
  Operand = llvm::NamedMDNode::getOperand(*((llvm::NamedMDNode **)this + 8));
  v15 = 3;
  if (*(_DWORD *)(Operand + 8) >= 4u)
  {
    v9 = Operand;
    do
    {
      v10 = parseMDUint3(v9, "air.work_group_size", &v15, (_DWORD *)this + 1098);
      v11 = v15;
      if ((v10 & 1) == 0)
      {
        v12 = *(unsigned __int8 **)(v9 - 8 * *(unsigned int *)(v9 + 8) + 8 * v15);
        v13 = *v12;
        v14 = v13 > 0x22 || ((0x7FFFFFFF0uLL >> v13) & 1) == 0;
        if (v14 || (v17 = 0, !*((_DWORD *)v12 + 2)))
        {
LABEL_11:
          v15 = ++v11;
        }
        else
        {
          while (1)
          {
            v16 = 0;
            if ((parseMDInt("air.max_work_group_size", (uint64_t)v12, &v17, &v16) & 1) != 0)
              break;
            if (++v17 >= *((_DWORD *)v12 + 2))
              goto LABEL_11;
          }
          v15 = ++v11;
          *((_DWORD *)this + 1092) = v16;
        }
      }
    }
    while (v11 < *(_DWORD *)(v9 + 8));
  }
}

uint64_t AGCLLVMUserObjectShaderBase::getVertexAmpId(AGCLLVMUserObjectShaderBase *this)
{
  llvm::ValueHandleBase *EmulationStateCacheForCurrentFunction;
  uint64_t result;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::BasicBlock *v8;
  uint64_t FirstInsertionPt;
  llvm::Value *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  llvm::Value *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  _BYTE v23[32];
  __int16 v24;
  uint64_t VertexAmpCount;
  __int128 v26;
  uint64_t v27;
  int v28;

  if (!*((_BYTE *)this + 4405))
    return llvm::ConstantInt::get();
  EmulationStateCacheForCurrentFunction = (llvm::ValueHandleBase *)AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction(this);
  result = *((_QWORD *)EmulationStateCacheForCurrentFunction + 2);
  if (!result)
  {
    v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v26 = *(_OWORD *)(v4 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v4 + 40));
    v28 = *((_DWORD *)v4 + 34);
    v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v6 = (uint64_t)(v5 + 40);
    v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v5 + 11) + 56) + 80);
    if (v7)
      v8 = (llvm::BasicBlock *)(v7 - 24);
    else
      v8 = 0;
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v8);
    llvm::IRBuilderBase::SetInsertPoint(v6, (uint64_t)v8, FirstInsertionPt);
    VertexAmpCount = AGCLLVMUserObjectShaderBase::getVertexAmpCount(this, v10);
    v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v12 = (uint64_t)(v11 + 32);
    v13 = *((_QWORD *)v11 + 50);
    v14 = *(_QWORD *)(v13 + 1488);
    if (v14)
      v15 = strlen(*(const char **)(v13 + 1488));
    else
      v15 = 0;
    v16 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(v12, v14, v15, *(_QWORD *)(v12 + 200), *(_QWORD *)(v12 + 200));
    v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v24 = 257;
    v18 = llvm::IRBuilderBase::CreateCall((uint64_t)v17, *(_QWORD *)(v16 + 24), v16, (uint64_t)&VertexAmpCount, 1, (uint64_t)v23);
    llvm::ValueHandleBase::operator=(EmulationStateCacheForCurrentFunction, (uint64_t)v18);
    v19 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v20 = v26;
    v21 = v27;
    if (v27)
      llvm::MetadataTracking::track();
    v22 = v28;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v20, (uint64_t)(v19 + 8));
    if (v21)
      llvm::MetadataTracking::untrack();
    if (v27)
      llvm::MetadataTracking::untrack();
    return *((_QWORD *)EmulationStateCacheForCurrentFunction + 2);
  }
  return result;
}

void AGCLLVMUserObjectShaderBase::mutateValueAddressSpace(AGCLLVMUserObjectShaderBase *this, llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  const void **v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  char v32[24];
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  _BYTE v37[136];

  v2 = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1);
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 15)
    v2 = 0;
  v29 = *(_DWORD *)(v2 + 8);
  v33 = v37;
  v34 = v37;
  v35 = 16;
  v36 = 0;
  v4 = 0;
  if (v3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v3 + 24);
      if ((unint64_t)v5 >= v6)
      {
        v8 = (v5 - v4) >> 3;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61)
LABEL_61:
          abort();
        if ((uint64_t)(v6 - (_QWORD)v4) >> 2 > v9)
          v9 = (uint64_t)(v6 - (_QWORD)v4) >> 2;
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v10);
        else
          v11 = 0;
        v12 = (char *)(v10 + 8 * v8);
        *(_QWORD *)v12 = v7;
        v13 = v12 + 8;
        while (v5 != v4)
        {
          v14 = *((_QWORD *)v5 - 1);
          v5 -= 8;
          *((_QWORD *)v12 - 1) = v14;
          v12 -= 8;
        }
        v6 = v10 + 8 * v11;
        if (v4)
          operator delete(v4);
        v4 = v12;
        v5 = v13;
      }
      else
      {
        *(_QWORD *)v5 = v7;
        v5 += 8;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
    while (v4 != v5)
    {
      v16 = (uint64_t *)*((_QWORD *)v5 - 1);
      v5 -= 8;
      v15 = v16;
      if (v16)
      {
        v17 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)&v33, v15);
        v18 = v34 == v33 ? (uint64_t *)((char *)&v35 + 4) : &v35;
        if (&v34[8 * *(unsigned int *)v18] == (char *)v17)
        {
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v32, (llvm::SmallPtrSetImplBase *)&v33, v15);
          if (llvm::MemCpyInst::classof((uint64_t)v15))
          {
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (llvm::Instruction *)v15);
            llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v15 + 8));
            llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v15 + 8));
            llvm::IRBuilderBase::CreateMemTransferInst();
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v15);
          }
          else
          {
            v19 = *(_DWORD *)(*v15 + 8);
            if (v19 == 15)
            {
              if ((v19 & 0xFE) == 0x12)
                v19 = *(_DWORD *)(**(_QWORD **)(*v15 + 16) + 8);
              if ((v19 ^ v29) <= 0xFF)
              {
                *v15 = llvm::PointerType::get();
                v20 = v15[1];
                if (v20)
                {
                  v21 = v5;
                  do
                  {
                    v22 = *(_QWORD *)(v20 + 24);
                    if ((unint64_t)v21 >= v6)
                    {
                      v23 = (v21 - v4) >> 3;
                      v24 = v23 + 1;
                      if ((unint64_t)(v23 + 1) >> 61)
                        goto LABEL_61;
                      if ((uint64_t)(v6 - (_QWORD)v4) >> 2 > v24)
                        v24 = (uint64_t)(v6 - (_QWORD)v4) >> 2;
                      if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFF8)
                        v25 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v25 = v24;
                      if (v25)
                        v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v25);
                      else
                        v26 = 0;
                      v27 = (char *)(v25 + 8 * v23);
                      *(_QWORD *)v27 = v22;
                      v5 = v27 + 8;
                      while (v21 != v4)
                      {
                        v28 = *((_QWORD *)v21 - 1);
                        v21 -= 8;
                        *((_QWORD *)v27 - 1) = v28;
                        v27 -= 8;
                      }
                      v6 = v25 + 8 * v26;
                      if (v4)
                        operator delete(v4);
                      v4 = v27;
                    }
                    else
                    {
                      *(_QWORD *)v21 = v22;
                      v5 = v21 + 8;
                    }
                    v20 = *(_QWORD *)(v20 + 8);
                    v21 = v5;
                  }
                  while (v20);
                }
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a2 = llvm::PointerType::get();
  if (v34 != v33)
    free(v34);
  if (v4)
    operator delete(v4);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a1);
}

BOOL llvm::MemCpyInst::classof(uint64_t a1)
{
  uint64_t v1;
  int v3;

  if (*(_BYTE *)(a1 + 16) != 84)
    return 0;
  v1 = *(_QWORD *)(a1 - 32);
  if (!v1 || *(_BYTE *)(v1 + 16) || *(_QWORD *)(v1 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v1 + 33) & 0x20) == 0)
    return 0;
  v3 = *(_DWORD *)(v1 + 36);
  return v3 == 194 || v3 == 196;
}

_QWORD *AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(AGCLLVMUserObjectShaderBase *this, int a2, int a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *Name;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t i;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  llvm::Instruction *v45;
  uint64_t v46;
  __int16 ParamAlignment;
  uint64_t v48;
  uint64_t v49;
  llvm::Instruction **v50;
  uint64_t v51;
  llvm::Instruction *v52;
  llvm::IRBuilderBase *v53;
  llvm::Type **v54;
  llvm::Type *v55;
  llvm::Function *v56;
  uint64_t v57;
  uint64_t FnAttrs;
  uint64_t v59;
  llvm::Function *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  llvm::Value *v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  llvm::NamedMDNode *v79;
  llvm::NamedMDNode *j;
  int NumOperands;
  int v82;
  int k;
  uint64_t Operand;
  unint64_t v85;
  uint64_t v86;
  unint64_t m;
  llvm::Function *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  void *v97;
  _QWORD *result;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  void *v105[2];
  void *__p[2];
  int v107;
  int v108;
  int v109;
  _QWORD v110[4];
  __int16 v111;
  void *v112;
  uint64_t v113;
  _BYTE v114[64];
  void *v115;
  uint64_t v116;
  _BYTE v117[64];
  void *v118;
  uint64_t v119;
  _WORD v120[32];
  void *v121;
  uint64_t v122;
  _BYTE v123[64];
  void *v124[2];
  _BYTE v125[64];
  void *v126;
  uint64_t v127;
  _BYTE v128[64];
  _BYTE v129[24];
  _BYTE *v130;
  _QWORD v131[3];
  _QWORD *v132;
  _BYTE v133[24];
  _BYTE *v134;
  _BYTE v135[24];
  _BYTE *v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v108 = a3;
  v109 = a2;
  v136 = 0;
  *(_OWORD *)v105 = 0u;
  *(_OWORD *)__p = 0u;
  v107 = 1065353216;
  v4 = operator new(0x30uLL);
  *v4 = &off_1E7E6BA20;
  v4[1] = v105;
  v4[2] = &v109;
  v4[3] = &v108;
  v4[4] = v133;
  v4[5] = this;
  v134 = v4;
  v131[0] = &unk_1E7E6BA68;
  v131[1] = v135;
  v132 = v131;
  v5 = operator new(0x20uLL);
  *v5 = &unk_1E7E6BAB0;
  v5[1] = v135;
  v5[2] = &v109;
  v5[3] = &v108;
  v130 = v5;
  v6 = operator new(0x20uLL);
  *v6 = &off_1E7E6BAF8;
  v6[1] = v129;
  v6[2] = v133;
  v6[3] = v131;
  v136 = v6;
  v10 = *(_QWORD *)this;
  v126 = v128;
  v127 = 0x800000000;
  v124[0] = v125;
  v124[1] = (void *)0x800000000;
  v11 = *(_QWORD *)((char *)this + *(_QWORD *)(v10 - 24) + 368);
  v12 = *(_QWORD *)(v11 + 32);
  v100 = v11 + 24;
  if (v12 == v11 + 24)
    goto LABEL_145;
  do
  {
    if (v12)
      v13 = v12 - 56;
    else
      v13 = 0;
    v121 = v123;
    v122 = 0x800000000;
    if (v13 == *((_QWORD *)this + 22) || v13 == *((_QWORD *)this + 21))
      goto LABEL_22;
    if ((*(_BYTE *)(v13 + 33) & 0x20) != 0)
      goto LABEL_97;
    Name = (_DWORD *)llvm::Value::getName((llvm::Value *)v13);
    if (v7 >= 4 && *Name == 778266465)
      goto LABEL_97;
    v15 = (_DWORD *)llvm::Value::getName((llvm::Value *)v13);
    if (v7 >= 4 && *v15 == 779250017)
      goto LABEL_97;
    if (!*(_QWORD *)(v13 + 96))
    {
LABEL_22:
      v103 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v103 = 0;
      do
      {
        if ((*(_WORD *)(v13 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v13);
        v18 = *(_QWORD *)(v13 + 88);
        v19 = *(void **)(v18 + v16);
        v118 = v19;
        if (!v136)
LABEL_174:
          std::__throw_bad_function_call[abi:nn180100]();
        v20 = (*(uint64_t (**)(_BYTE *, void **))(*(_QWORD *)v136 + 48))(v136, &v118);
        if (v20)
        {
          *(_QWORD *)(v18 + v16) = v20;
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v121, v20);
          v103 = 1;
        }
        else
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v121, (uint64_t)v19);
        }
        ++v17;
        v16 += 40;
      }
      while (*(_QWORD *)(v13 + 96) > v17);
    }
    v118 = v120;
    v119 = 0x800000000;
    v115 = v117;
    v116 = 0x800000000;
    v112 = v114;
    v113 = 0x800000000;
    v21 = (uint64_t *)(v13 + 72);
    v102 = v13;
    v22 = *(uint64_t **)(v13 + 80);
    if (v22 == (uint64_t *)(v13 + 72))
      goto LABEL_75;
    do
    {
      v23 = v22 - 3;
      if (!v22)
        v23 = 0;
      v24 = v23 + 5;
      for (i = v23[6]; (uint64_t *)i != v24; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v26 = i - 24;
        else
          v26 = 0;
        v27 = llvm::MemCpyInst::classof(v26);
        if (i && v27)
        {
          v28 = v119;
          if (v119 >= (unint64_t)HIDWORD(v119))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v28 = v119;
          }
          *((_QWORD *)v118 + v28) = v26;
          LODWORD(v119) = v119 + 1;
          continue;
        }
        if (*(_BYTE *)(v26 + 16) == 84)
        {
          v29 = *(_QWORD *)(v26 - 32);
          if (v29)
          {
            if (!*(_BYTE *)(v29 + 16)
              && *(_QWORD *)(v29 + 24) == *(_QWORD *)(v26 + 72)
              && (*(_BYTE *)(v29 + 33) & 0x20) != 0
              && i
              && *(_DWORD *)(v29 + 36) == 199)
            {
              v38 = v116;
              if (v116 >= (unint64_t)HIDWORD(v116))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
                v38 = v116;
              }
              *((_QWORD *)v115 + v38) = v26;
              LODWORD(v116) = v116 + 1;
              continue;
            }
          }
        }
        v110[0] = *(_QWORD *)v26;
        if (!v136)
          goto LABEL_174;
        v30 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v136 + 48))(v136, v110);
        if (v30)
        {
          *(_QWORD *)v26 = v30;
          v31 = *(unsigned __int8 *)(v26 + 16);
          if (v31 == 62)
          {
            if ((*(_DWORD *)(v30 + 8) & 0xFE) == 0x12)
              v30 = **(_QWORD **)(v30 + 16);
            *(_QWORD *)(v26 + 72) = **(_QWORD **)(v30 + 16);
            goto LABEL_51;
          }
        }
        else
        {
          v31 = *(unsigned __int8 *)(v26 + 16);
        }
        if (v31 == 59)
        {
          v110[0] = *(_QWORD *)(v26 + 64);
          v32 = v136;
          if (!v136)
            goto LABEL_174;
          goto LABEL_63;
        }
        if (v31 != 78)
        {
          if (v31 != 62)
            continue;
LABEL_51:
          if (*(_BYTE *)(*(_QWORD *)(v26 + 64) + 8) != 16)
            continue;
          v110[0] = *(_QWORD *)(v26 + 64);
          v32 = v134;
          if (!v134)
            goto LABEL_174;
LABEL_63:
          v37 = (*(uint64_t (**)(_BYTE *, _QWORD *))(*(_QWORD *)v32 + 48))(v32, v110);
          if (v37)
            *(_QWORD *)(v26 + 64) = v37;
          continue;
        }
        v33 = **(_QWORD **)(v26 - 32);
        v34 = *(_DWORD *)(v33 + 8);
        if ((v34 & 0xFE) == 0x12)
          v34 = *(_DWORD *)(**(_QWORD **)(v33 + 16) + 8);
        v35 = *(_DWORD *)(*(_QWORD *)v26 + 8);
        if ((v35 & 0xFE) == 0x12)
          v35 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v26 + 16) + 8);
        if ((v35 ^ v34) <= 0xFF)
        {
          v36 = v113;
          if (v113 >= (unint64_t)HIDWORD(v113))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
            v36 = v113;
          }
          *((_QWORD *)v112 + v36) = v26;
          LODWORD(v113) = v113 + 1;
        }
      }
      v22 = (uint64_t *)v22[1];
    }
    while (v22 != v21);
    if ((_DWORD)v119)
    {
      v39 = (uint64_t *)v118;
      v40 = 8 * v119;
      do
      {
        v41 = *v39++;
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (llvm::Instruction *)v41);
        llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v41 + 64));
        llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v41 + 64));
        llvm::IRBuilderBase::CreateMemTransferInst();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v41);
        v40 -= 8;
      }
      while (v40);
    }
LABEL_75:
    if ((_DWORD)v116)
    {
      v42 = (uint64_t *)v115;
      v43 = 8 * v116;
      v44 = v101;
      do
      {
        v46 = *v42++;
        v45 = (llvm::Instruction *)v46;
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (llvm::Instruction *)v46);
        ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v46 + 64));
        v48 = (63 - __clz((1 << ParamAlignment))) | 0x100;
        v49 = 511;
        if ((ParamAlignment & 0xFF00) != 0)
          v49 = v48;
        v44 = v49 | v44 & 0xFFFFFFFFFFFF0000;
        llvm::IRBuilderBase::CreateMemSet();
        llvm::Instruction::eraseFromParent(v45);
        v43 -= 8;
      }
      while (v43);
    }
    else
    {
      v44 = v101;
    }
    v101 = v44;
    if ((_DWORD)v113)
    {
      v50 = (llvm::Instruction **)v112;
      v51 = 8 * v113;
      do
      {
        v52 = *v50++;
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v52);
        v53 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v54 = (llvm::Type **)*((_QWORD *)v52 - 4);
        v55 = *(llvm::Type **)v52;
        v111 = 257;
        llvm::IRBuilderBase::CreatePointerCast(v53, v54, v55, (const llvm::Twine *)v110);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v52);
        v51 -= 8;
      }
      while (v51);
    }
    if ((v103 & 1) != 0)
    {
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v57 = (uint64_t)v56;
      llvm::Function::stealArgumentListFrom(v56, (llvm::Function *)v102);
      if (*(uint64_t **)(v102 + 72) != v21)
        llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(v57 + 72, (uint64_t *)(v57 + 72), (uint64_t)v21, *(uint64_t **)(v102 + 80), v21);
      v110[0] = *(_QWORD *)(v102 + 112);
      FnAttrs = llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v110);
      if (FnAttrs)
      {
        LODWORD(v110[0]) = -1;
        v110[1] = FnAttrs;
        *(_QWORD *)(v57 + 112) = llvm::AttributeList::get();
      }
      llvm::Value::takeName();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v126, v102);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v124, v57);
    }
    if (v112 != v114)
      free(v112);
    if (v115 != v117)
      free(v115);
    if (v118 != v120)
      free(v118);
LABEL_97:
    if (v121 != v123)
      free(v121);
    v12 = *(_QWORD *)(v12 + 8);
  }
  while (v12 != v100);
  if (!(_DWORD)v127)
    goto LABEL_145;
  v59 = 0;
  while (2)
  {
    v60 = (llvm::Function *)*((_QWORD *)v126 + v59);
    v61 = *((_QWORD *)v124[0] + v59);
    while (2)
    {
      v62 = *((_QWORD *)v60 + 1);
      if (v62)
      {
        v63 = *(uint64_t **)(v62 + 24);
        v64 = *((unsigned __int8 *)v63 + 16);
        if (v63 && v64 == 84)
        {
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (llvm::Instruction *)v63);
          v121 = v123;
          v122 = 0x800000000;
          v65 = &v63[-4 * (*((_DWORD *)v63 + 5) & 0x7FFFFFF)];
          v66 = llvm::CallBase::arg_end((llvm::CallBase *)v63);
          while (v65 != (uint64_t *)v66)
          {
            v67 = *v65;
            v65 += 4;
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v121, v67);
          }
          v68 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
          v120[8] = 257;
          v69 = llvm::IRBuilderBase::CreateCall((uint64_t)v68, *(_QWORD *)(v61 + 24), v61, (uint64_t)v121, v122, (uint64_t)&v118);
          *((_WORD *)v69 + 9) = *((_WORD *)v69 + 9) & 0xFFFC | *((_WORD *)v63 + 9) & 3;
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v63);
          goto LABEL_125;
        }
        if (v63)
          v70 = v64 == 5;
        else
          v70 = 0;
        if (!v70)
        {
          llvm::User::replaceUsesOfWith();
          continue;
        }
        v71 = *v63;
        v121 = (void *)*v63;
        if (!v136)
          goto LABEL_174;
        v72 = (*(uint64_t (**)(_BYTE *, void **))(*(_QWORD *)v136 + 48))(v136, &v121);
        v73 = v72;
        v121 = v123;
        v122 = 0x400000000;
        v74 = *((_DWORD *)v63 + 5);
        v75 = v63;
        v76 = v74 & 0x7FFFFFF;
        if ((v74 & 0x7FFFFFF) != 0)
        {
          do
          {
            if ((llvm::Function *)v75[-4 * (*((_DWORD *)v63 + 5) & 0x7FFFFFF)] == v60)
              v77 = v61;
            else
              v77 = v75[-4 * (*((_DWORD *)v63 + 5) & 0x7FFFFFF)];
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v121, v77);
            v75 += 4;
            --v76;
          }
          while (v76);
          if (v73)
          {
LABEL_121:
            llvm::ConstantExpr::getWithOperands();
            *v63 = v73;
LABEL_124:
            llvm::Value::replaceAllUsesWith();
            *v63 = v71;
            llvm::Constant::destroyConstant((llvm::Constant *)v63);
LABEL_125:
            if (v121 != v123)
              free(v121);
            continue;
          }
        }
        else if (v72)
        {
          goto LABEL_121;
        }
        llvm::ConstantExpr::getWithOperands();
        goto LABEL_124;
      }
      break;
    }
    v104 = v59;
    v78 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
    v79 = (llvm::NamedMDNode *)(v78 + 72);
    for (j = *(llvm::NamedMDNode **)(v78 + 80); j != v79; j = (llvm::NamedMDNode *)*((_QWORD *)j + 1))
    {
      NumOperands = llvm::NamedMDNode::getNumOperands(j);
      if (NumOperands)
      {
        v82 = NumOperands;
        for (k = 0; k != v82; ++k)
        {
          Operand = llvm::NamedMDNode::getOperand(j);
          v85 = *(unsigned int *)(Operand + 8);
          if ((_DWORD)v85)
          {
            v86 = Operand;
            for (m = 0; m < v85; ++m)
            {
              v88 = *(llvm::Function **)(v86 - 8 * v85 + 8 * m);
              if (v88)
              {
                if (*(unsigned __int8 *)v88 - 1 > 1)
                {
                  v88 = 0;
                }
                else
                {
                  v88 = (llvm::Function *)*((_QWORD *)v88 + 16);
                  if (*((_BYTE *)v88 + 16))
                    v88 = 0;
                }
              }
              if (v88 == v60)
              {
                llvm::ValueAsMetadata::get();
                llvm::MDNode::replaceOperandWith();
                v85 = *(unsigned int *)(v86 + 8);
              }
            }
          }
        }
      }
    }
    llvm::Function::eraseFromParent(v60);
    v59 = v104 + 1;
    if (v104 + 1 < (unint64_t)v127)
      continue;
    break;
  }
LABEL_145:
  if (v124[0] != v125)
    free(v124[0]);
  if (v126 != v128)
    free(v126);
  v89 = v130;
  if (v130 == v129)
  {
    v90 = 4;
    v89 = v129;
LABEL_153:
    (*(void (**)(_QWORD *, unint64_t, uint64_t, uint64_t))(*v89 + 8 * v90))(v89, v7, v8, v9);
  }
  else if (v130)
  {
    v90 = 5;
    goto LABEL_153;
  }
  v91 = v132;
  if (v132 == v131)
  {
    v92 = 4;
    v91 = v131;
LABEL_158:
    (*(void (**)(_QWORD *, unint64_t, uint64_t, uint64_t))(*v91 + 8 * v92))(v91, v7, v8, v9);
  }
  else if (v132)
  {
    v92 = 5;
    goto LABEL_158;
  }
  v93 = v134;
  if (v134 == v133)
  {
    v94 = 4;
    v93 = v133;
LABEL_163:
    (*(void (**)(_QWORD *, unint64_t, uint64_t, uint64_t))(*v93 + 8 * v94))(v93, v7, v8, v9);
  }
  else if (v134)
  {
    v94 = 5;
    goto LABEL_163;
  }
  v95 = __p[0];
  if (__p[0])
  {
    do
    {
      v96 = (_QWORD *)*v95;
      operator delete(v95);
      v95 = v96;
    }
    while (v96);
  }
  v97 = v105[0];
  v105[0] = 0;
  if (v97)
    operator delete(v97);
  result = v136;
  if (v136 == v135)
  {
    v99 = 4;
    result = v135;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, uint64_t))(*result + 8 * v99))(result, v7, v8, v9);
  }
  else if (v136)
  {
    v99 = 5;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t, uint64_t))(*result + 8 * v99))(result, v7, v8, v9);
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7E6BAF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7E6BAF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_3>,llvm::Type * ()(llvm::Type *)>::operator()(_QWORD *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(*a2 + 8);
  switch(v2)
  {
    case 14:
      v3 = a1[3];
      break;
    case 16:
      v3 = a1[2];
      break;
    case 15:
      v3 = a1[1];
      break;
    default:
      return 0;
  }
  v6 = *a2;
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1C3CD78E8);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v6);
}

void std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2>,llvm::PointerType * ()(llvm::PointerType *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2>,llvm::PointerType * ()(llvm::PointerType *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_1E7E6BAB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2>,llvm::PointerType * ()(llvm::PointerType *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E7E6BAB0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_2>,llvm::PointerType * ()(llvm::PointerType *)>::operator()(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;

  v3 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v9 = **(_QWORD **)(*(_QWORD *)a2 + 16);
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1C3CD7A18);
  }
  v6 = v3 >> 8;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v9);
  if (v6 == **(_DWORD **)(a1 + 16) || v7)
    return llvm::PointerType::get();
  else
    return 0;
}

void std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1>,llvm::FunctionType * ()(llvm::FunctionType *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1>,llvm::FunctionType * ()(llvm::FunctionType *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E7E6BA68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1>,llvm::FunctionType * ()(llvm::FunctionType *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E7E6BA68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_1>,llvm::FunctionType * ()(llvm::FunctionType *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17[2];
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v17[0] = v18;
  v17[1] = (void *)0x800000000;
  v4 = *(uint64_t **)(v3 + 16);
  v5 = *v4;
  v6 = 0;
  if (8 * *(unsigned int *)(v3 + 12) != 8)
  {
    v7 = v4 + 1;
    v8 = 8 * ((8 * *(unsigned int *)(v3 + 12) - 8) >> 3);
    while (1)
    {
      v9 = *(_QWORD *)(a1 + 8);
      v16 = *v7;
      v10 = *(_QWORD *)(v9 + 24);
      if (!v10)
        break;
      v11 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v16);
      if (v11)
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, v11);
        v6 = 1;
      }
      else
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v17, *v7);
      }
      ++v7;
      v8 -= 8;
      if (!v8)
        goto LABEL_8;
    }
LABEL_15:
    std::__throw_bad_function_call[abi:nn180100]();
  }
LABEL_8:
  v12 = *(_QWORD *)(a1 + 8);
  v16 = v5;
  v13 = *(_QWORD *)(v12 + 24);
  if (!v13)
    goto LABEL_15;
  if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v16) != 0) | v6 & 1)
    v14 = llvm::FunctionType::get();
  else
    v14 = 0;
  if (v17[0] != v18)
    free(v17[0]);
  return v14;
}

void std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0>,llvm::StructType * ()(llvm::StructType *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0>,llvm::StructType * ()(llvm::StructType *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7E6BA20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0>,llvm::StructType * ()(llvm::StructType *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7E6BA20;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0,std::allocator<AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(unsigned int,unsigned int)::$_0>,llvm::StructType * ()(llvm::StructType *)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  void *Name;
  size_t v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v29;
  unint64_t v30;
  void *v31[2];
  _QWORD v32[9];

  v32[8] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v30 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(int8x8_t *)(v4 + 8);
  if (v5)
  {
    v6 = 0x9DDFEA08EB382D69 * (((8 * v3) + 8) ^ HIDWORD(v3));
    v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v3) ^ (v6 >> 47) ^ v6);
    v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
    v9 = (uint8x8_t)vcnt_s8(v5);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v8;
      if (v8 >= *(_QWORD *)&v5)
        v10 = v8 % *(_QWORD *)&v5;
    }
    else
    {
      v10 = v8 & (*(_QWORD *)&v5 - 1);
    }
    v11 = *(_QWORD **)(*(_QWORD *)v4 + 8 * v10);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v3)
            return std::__hash_table<std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::__unordered_map_hasher<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::hash<llvm::StructType *>,std::equal_to<llvm::StructType *>,true>,std::__unordered_map_equal<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::equal_to<llvm::StructType *>,std::hash<llvm::StructType *>,true>,std::allocator<std::__hash_value_type<llvm::StructType *,llvm::StructType *>>>::__emplace_unique_key_args<llvm::StructType *,std::piecewise_construct_t const&,std::tuple<llvm::StructType * const&>,std::tuple<>>((float *)v4, v3, &v30)[3];
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= *(_QWORD *)&v5)
              v13 %= *(_QWORD *)&v5;
          }
          else
          {
            v13 &= *(_QWORD *)&v5 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  if ((*(_BYTE *)(v3 + 9) & 1) == 0)
  {
    v26 = 0;
    std::__hash_table<std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::__unordered_map_hasher<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::hash<llvm::StructType *>,std::equal_to<llvm::StructType *>,true>,std::__unordered_map_equal<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::equal_to<llvm::StructType *>,std::hash<llvm::StructType *>,true>,std::allocator<std::__hash_value_type<llvm::StructType *,llvm::StructType *>>>::__emplace_unique_key_args<llvm::StructType *,std::piecewise_construct_t const&,std::tuple<llvm::StructType * const&>,std::tuple<>>((float *)v4, v3, &v30)[3] = 0;
    return v26;
  }
  v31[0] = v32;
  v31[1] = (void *)0x800000000;
  v14 = *(unsigned int *)(v3 + 12);
  if (!(_DWORD)v14)
  {
    v26 = 0;
    goto LABEL_45;
  }
  v15 = 0;
  v16 = *(uint64_t **)(v3 + 16);
  v17 = &v16[v14];
  do
  {
    while (1)
    {
      v18 = *v16;
      v19 = *(_DWORD *)(*v16 + 8);
      if (v19 == 16)
        break;
      if (v19 != 15)
        goto LABEL_32;
      if ((v19 & 0xFE) == 0x12)
        v19 = *(_DWORD *)(**(_QWORD **)(v18 + 16) + 8);
      if (**(_DWORD **)(a1 + 16) != v19 >> 8)
        goto LABEL_32;
      v20 = llvm::PointerType::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v31, v20);
      ++v16;
      v15 = 1;
      if (v16 == v17)
        goto LABEL_34;
    }
    v21 = *(_QWORD *)(a1 + 32);
    __p[0] = (void *)*v16;
    v22 = *(_QWORD *)(v21 + 24);
    if (!v22)
      std::__throw_bad_function_call[abi:nn180100]();
    v18 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v22 + 48))(v22, __p);
    v23 = v18 != 0;
    if (!v18)
      v18 = *v16;
    v15 |= v23;
LABEL_32:
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v31, v18);
    ++v16;
  }
  while (v16 != v17);
  if ((v15 & 1) == 0)
  {
    v26 = 0;
    goto LABEL_44;
  }
LABEL_34:
  if ((*(_BYTE *)(v3 + 9) & 4) != 0 || !*(_QWORD *)(v3 + 24))
  {
    v26 = llvm::StructType::get();
  }
  else
  {
    Name = (void *)llvm::StructType::getName((llvm::StructType *)v3);
    if (Name)
    {
      std::string::basic_string[abi:nn180100](__p, Name, v25);
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      v29 = 0;
    }
    llvm::StructType::setName();
    v26 = llvm::StructType::create();
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
  }
LABEL_44:
  v4 = *(_QWORD *)(a1 + 8);
LABEL_45:
  std::__hash_table<std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::__unordered_map_hasher<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::hash<llvm::StructType *>,std::equal_to<llvm::StructType *>,true>,std::__unordered_map_equal<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::equal_to<llvm::StructType *>,std::hash<llvm::StructType *>,true>,std::allocator<std::__hash_value_type<llvm::StructType *,llvm::StructType *>>>::__emplace_unique_key_args<llvm::StructType *,std::piecewise_construct_t const&,std::tuple<llvm::StructType * const&>,std::tuple<>>((float *)v4, v3, &v30)[3] = v26;
  if (v31[0] != v32)
    free(v31[0]);
  return v26;
}

_QWORD *std::__hash_table<std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::__unordered_map_hasher<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::hash<llvm::StructType *>,std::equal_to<llvm::StructType *>,true>,std::__unordered_map_equal<llvm::StructType *,std::__hash_value_type<llvm::StructType *,llvm::StructType *>,std::equal_to<llvm::StructType *>,std::hash<llvm::StructType *>,true>,std::allocator<std::__hash_value_type<llvm::StructType *,llvm::StructType *>>>::__emplace_unique_key_args<llvm::StructType *,std::piecewise_construct_t const&,std::tuple<llvm::StructType * const&>,std::tuple<>>(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v31[v3] = a1 + 4;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

_QWORD *AGCLLVMUserObjectShaderBase::replaceEmulatedPayloadBufferAccesses(AGCLLVMUserObjectShaderBase *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t inserted;
  char *v7;
  llvm::Type *v8;
  llvm::IRBuilderBase *v9;
  llvm::Value *v10;
  llvm::IRBuilderBase *v11;
  llvm::Value *v12;
  llvm::Value *Mul;
  llvm::Value *GEP;
  char *v15;
  llvm::Type *v16;
  llvm::Value *v17;
  llvm::IRBuilderBase *v18;
  llvm::Type *v19;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  _BYTE v25[32];
  __int16 v26;

  llvm::PointerType::get();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v8 = (llvm::Type *)*((_QWORD *)v7 + 27);
  v26 = 257;
  v9 = (llvm::IRBuilderBase *)(v7 + 40);
  v10 = llvm::IRBuilderBase::CreateCall((uint64_t)(v7 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v25);
  v11 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v12, a3, (const llvm::Twine *)v23);
  v22 = 257;
  GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v9, v8, v10, Mul, (const llvm::Twine *)v21);
  if (*((_BYTE *)this + 4385))
  {
    v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v16 = (llvm::Type *)*((_QWORD *)v15 + 27);
    v17 = (llvm::Value *)llvm::ConstantInt::get();
    v26 = 257;
    GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v15 + 40), v16, GEP, v17, (const llvm::Twine *)v25);
  }
  v18 = (AGCLLVMUserObjectShaderBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v19 = (llvm::Type *)llvm::PointerType::get();
  v26 = 257;
  llvm::IRBuilderBase::CreatePointerCast(v18, (llvm::Type **)GEP, v19, (const llvm::Twine *)v25);
  AGCLLVMUserObjectShaderBase::mutateValueAddressSpace(this, a2);
  llvm::Value::replaceAllUsesWith();
  return AGCLLVMUserObjectShaderBase::mutateAllFunctionAddressSpace(this, 6, 1);
}

uint64_t AGCLLVMUserObjectShaderBase::accumulateAPIMeshSize(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char *String;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unsigned int v20;

  v20 = 0;
  v7 = *(_DWORD *)(result + 8);
  if (!v7)
  {
    v15 = 0;
    goto LABEL_20;
  }
  v8 = result;
  v19 = a4;
  v9 = 0;
  v10 = 0;
  v11 = 10;
  do
  {
    result = isStringMDNode(*(llvm::MDString **)(v8 - 8 * v7 + 8 * v10), "air.shared");
    if ((result & 1) != 0)
    {
      v9 = 1;
    }
    else if (isStringMDNode(*(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8 * v10), "air.arg_type_name"))
    {
      String = (char *)llvm::MDString::getString(*(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8 * ++v10));
      result = AGCLLVMBuilder::getComponentType(String, v13, (int *)&v20);
      v11 = result;
    }
    else
    {
      result = isStringMDNode(*(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8 * v10), "air.primitive_culled");
      if ((result & 1) != 0)
        return result;
    }
    ++v10;
    v7 = *(_DWORD *)(v8 + 8);
  }
  while (v10 < v7);
  a4 = v19;
  if (v11 > 9)
  {
LABEL_19:
    v14 = 0;
    v15 = 0;
    v7 = v20;
    if ((v9 & 1) != 0)
      goto LABEL_18;
LABEL_20:
    v17 = (*(_DWORD *)(a4 + 4 * a2) + v15);
    *(_DWORD *)(a4 + 4 * a2) = v17 + v15 + ~((v17 - 1) % (unint64_t)v15);
    goto LABEL_21;
  }
  if (((1 << v11) & 0x89) != 0)
  {
    v7 = v20;
    v14 = 4 * v20;
  }
  else
  {
    if (((1 << v11) & 0x112) == 0)
    {
      if (((1 << v11) & 0x224) != 0)
      {
        v14 = v20;
        v7 = v20;
        goto LABEL_17;
      }
      goto LABEL_19;
    }
    v7 = v20;
    v14 = 2 * v20;
  }
LABEL_17:
  v15 = v14;
  if ((v9 & 1) == 0)
    goto LABEL_20;
LABEL_18:
  v16 = (*(_DWORD *)(a3 + 4 * a2) + v14);
  *(_DWORD *)(a3 + 4 * a2) = v16 + v14 + ~((v16 - 1) % (unint64_t)v14);
LABEL_21:
  *a5 += v7;
  return result;
}

void AGCLLVMUserObjectShaderSW::~AGCLLVMUserObjectShaderSW(AGCLLVMUserObjectShaderSW *this)
{
  uint64_t v1;

  AGCLLVMUserObjectShaderSW::~AGCLLVMUserObjectShaderSW(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4880));
}

{
  uint64_t v1;

  AGCLLVMUserObjectShaderSW::~AGCLLVMUserObjectShaderSW(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4880));
  JUMPOUT(0x1CAA2D68CLL);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7E6BB60;
  *((_QWORD *)this + 610) = &unk_1E7E6BE98;
  *((_QWORD *)this + 614) = &unk_1E7E6BF88;
  v2 = *((_QWORD *)this + 607);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderSW *)((char *)this + 4840));
  AGCLLVMUserObjectShaderBase::FunctionStateCache::~FunctionStateCache((AGCLLVMUserObjectShaderSW *)((char *)this + 4528));
  *(_QWORD *)this = off_1E7E6C008;
  *((_QWORD *)this + 610) = &off_1E7E6C300;
  *((_QWORD *)this + 614) = &off_1E7E6C3F0;
  v4 = *((_QWORD *)this + 564);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderSW *)((char *)this + 4496));
  v5 = *((_QWORD *)this + 561);
  if (v5 != -8192 && v5 != -4096 && v5)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderSW *)((char *)this + 4472));
  std::__hash_table<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::__unordered_map_hasher<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::hash<llvm::Function *>,std::equal_to<llvm::Function *>,true>,std::__unordered_map_equal<llvm::Function *,std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>,std::equal_to<llvm::Function *>,std::hash<llvm::Function *>,true>,std::allocator<std::__hash_value_type<llvm::Function *,AGCLLVMUserObjectShaderBase::FunctionStateCache>>>::~__hash_table((uint64_t)this + 4432);
  v6 = *((_QWORD *)this + 553);
  if (v6 != -8192 && v6 != -4096 && v6)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserObjectShaderSW *)((char *)this + 4408));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E6BFA0);
}

uint64_t AGCLLVMUserObjectShaderSW::initCompile(AGCLLVMUserObjectShaderSW *this)
{
  uint64_t v2;

  v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1092), *(_DWORD *)(*((_QWORD *)this + 565) + 20), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 864), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (unsigned int *)this + 1092);
  if ((_DWORD)v2)
    AGCLLVMUserObjectShaderBase::initCompile(this);
  return v2;
}

uint64_t AGCLLVMUserObjectShaderSW::addWrapperPrefix(AGCLLVMUserObjectShaderSW *this)
{
  llvm::Value *EmulationStateBuffer;
  llvm::Type *v3;
  llvm::Type *v4;
  llvm::Value *LinearThreadgroupID;
  uint64_t *v6;
  llvm::Type **v7;
  llvm::IRBuilderBase *v8;
  uint64_t GEP;
  _BYTE v11[32];
  __int16 v12;

  EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 0, 1);
  v4 = v3;
  LinearThreadgroupID = (llvm::Value *)AGCLLVMUserObjectShaderSW::getLinearThreadgroupID(this);
  v6 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v7 = (llvm::Type **)llvm::ConstantInt::get();
  v8 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v12 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP(v8, v4, EmulationStateBuffer, LinearThreadgroupID, (const llvm::Twine *)v11);
  llvm::IRBuilderBase::CreateAlignedStore(v6, v7, GEP, 0);
  AGCLLVMTargetBuilder::CreateBarrier((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32));
  return 1;
}

uint64_t AGCLLVMUserObjectShaderSW::wrapperPrefixData(AGCLLVMUserObjectShaderSW *this)
{
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 816) + 52))
    return 0;
  llvm::ConstantInt::get();
  return llvm::ConstantVector::getSplat();
}

uint64_t AGCLLVMUserObjectShaderSW::setupShaderInputs(llvm::Function **this)
{
  llvm::Function *v2;
  uint64_t v3;
  llvm::Function *v4;
  uint64_t v5;
  llvm::ValueHandleBase *v6;
  char *v7;
  uint64_t v8;
  llvm::MDString *v9;
  _QWORD *String;
  uint64_t v11;
  BOOL v12;
  llvm::Type **v14;
  llvm::ValueHandleBase *v15;
  llvm::Constant *v16;
  char *v17;
  uint64_t v18;
  llvm::Type *v19;
  uint64_t v20;
  llvm::IRBuilderBase *v21;
  llvm::Type *v22;
  const char *v24;
  __int16 v25;

  AGCLLVMUserObjectShaderBase::setupShaderInputs((AGCLLVMUserObjectShaderBase *)this);
  v2 = this[22];
  if ((*((_WORD *)v2 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this[22]);
    v4 = this[22];
    v3 = *((_QWORD *)v2 + 11);
    if ((*((_WORD *)v4 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(this[22]);
    v2 = v4;
  }
  else
  {
    v3 = *((_QWORD *)v2 + 11);
  }
  v5 = *((_QWORD *)v2 + 11) + 40 * *((_QWORD *)v2 + 12);
  if (v3 != v5)
  {
    v6 = (llvm::ValueHandleBase *)(this + 605);
    v7 = (char *)(this + 39);
    do
    {
      v8 = *((_QWORD *)this[11] + *(unsigned int *)(v3 + 32));
      if (v8)
      {
        v9 = *(llvm::MDString **)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8);
        if (!*(_BYTE *)v9)
        {
          String = (_QWORD *)llvm::MDString::getString(v9);
          if (v11 == 24)
          {
            v12 = *String == 0x6873656D2E726961 && String[1] == 0x72705F646972675FLL;
            if (v12 && String[2] == 0x736569747265706FLL)
            {
              v14 = (llvm::Type **)this[607];
              if (!v14)
              {
                v15 = v6;
                v16 = *(llvm::Constant **)&v7[*((_QWORD *)*this - 3) + 32];
                v24 = "agc.ms_childcount";
                v25 = 259;
                v17 = v7;
                v18 = llvm::User::operator new((llvm::User *)0x58);
                llvm::Constant::getNullValue(v16, v19);
                v6 = v15;
                llvm::GlobalVariable::GlobalVariable();
                llvm::GlobalObject::setSection();
                v20 = v18;
                v7 = v17;
                llvm::ValueHandleBase::operator=(v15, v20);
                v14 = (llvm::Type **)this[607];
              }
              v21 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
              v22 = *(llvm::Type **)v3;
              v25 = 257;
              llvm::IRBuilderBase::CreatePointerCast(v21, v14, v22, (const llvm::Twine *)&v24);
              llvm::Value::replaceAllUsesWith();
            }
          }
        }
      }
      v3 += 40;
    }
    while (v3 != v5);
  }
  return 1;
}

uint64_t AGCLLVMUserObjectShaderSW::replacePreRuntimeLinkBuiltins(AGCLLVMUserObjectShaderSW *this)
{
  llvm::LLVMContext **v2;
  int v4;
  uint64_t (*v5)(AGCLLVMUserObjectShaderSW *);
  uint64_t v6;
  int v7;
  __int16 v8;
  uint64_t (**v9)(int, llvm::Value *);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[31];

  v13[30] = *MEMORY[0x1E0C80C00];
  v2 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v9, *v2);
  v13[29] = this;
  v9 = &off_1E7E6CBA0;
  v13[25] = v2;
  v4 = 1;
  v5 = (uint64_t (*)(AGCLLVMUserObjectShaderSW *))AGCLLVMUserObjectShaderSW::buildSetMeshGridProperties;
  v6 = 0;
  v7 = 5;
  v8 = 0;
  AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderSW>::doReplacement((uint64_t)&v9, (uint64_t)"air.set_threadgroups_per_grid_mesh_properties", 45, (uint64_t)&v4);
  v4 = 1;
  v5 = AGCLLVMUserObjectShaderSW::getLinearThreadgroupID;
  v6 = 0;
  v7 = 1;
  v8 = 0;
  AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderSW>::doReplacement((uint64_t)&v9, (uint64_t)"agc.gpe.get_payload_id", 22, (uint64_t)&v4);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v13);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v12);
  if (v10 != &v11)
    free(v10);
  return 1;
}

uint64_t AGCLLVMUserObjectShaderSW::usesCustomBorderColor(AGCLLVMUserObjectShaderSW *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 565) + 16) & 1;
}

uint64_t AGCLLVMUserObjectShaderSW::buildGlobalSize(AGCLLVMUserObjectShaderSW *this, llvm::Type *a2)
{
  llvm::Type **v4;
  llvm::Type *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v11;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  char *v14;
  llvm::Type *v15;
  llvm::Value *v16;
  llvm::Type **GEP;
  uint64_t *v18;
  llvm::Value *v19;
  llvm::Type *v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Value *Cast;
  llvm::Type **v24;
  llvm::Type *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  llvm::Value *v30;
  uint64_t *v31;
  llvm::Type *v32;
  llvm::Value *v33;
  char *v34;
  llvm::Type *v35;
  llvm::Value *v36;
  llvm::Type **v37;
  uint64_t *v38;
  llvm::Value *v39;
  llvm::Type *v40;
  uint64_t v41;
  llvm::Value *v42;
  llvm::IRBuilderBase *v43;
  _BYTE v45[32];
  __int16 v46;
  _QWORD v47[2];
  uint64_t v48;
  __int16 v49;

  v4 = (llvm::Type **)*((_QWORD *)this + 535);
  if (!v4)
  {
    v5 = (llvm::Type *)llvm::PointerType::get();
    v6 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 368))(v6);
    v47[0] = "agc.indirect_wg_size_buffer_pointer.";
    v48 = v7;
    v49 = 2051;
    v8 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 368))(v8);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v5, (const llvm::Twine *)v47, v9, 12, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObjectShaderSW *)((char *)this + 4264), (uint64_t)GlobalBufferBinding);
    v4 = (llvm::Type **)*((_QWORD *)this + 535);
  }
  v11 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v49 = 257;
  v12 = AGCLLVMBuilder::tryDeducePointeeType(v4, a2);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v11 + 5, v12, (uint64_t)v4, 0, (uint64_t)v47);
  v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v15 = (llvm::Type *)*((_QWORD *)v14 + 29);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v49 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v14 + 40), v15, AlignedLoad, v16, (const llvm::Twine *)v47);
  v18 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v49 = 257;
  v20 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v19);
  v21 = llvm::IRBuilderBase::CreateAlignedLoad(v18, v20, (uint64_t)GEP, 0, (uint64_t)v47);
  v46 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, v21, (uint64_t)a2, (uint64_t)v45);
  v24 = (llvm::Type **)*((_QWORD *)this + 538);
  if (!v24)
  {
    v25 = (llvm::Type *)llvm::PointerType::get();
    v26 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 360))(v26);
    v47[0] = "agc.indirect_wg_count_buffer_pointer.";
    v48 = v27;
    v49 = 2051;
    v28 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 360))(v28);
    v30 = AGCLLVMUserObject::createGlobalBufferBinding(this, v25, (const llvm::Twine *)v47, v29, 12, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObjectShaderSW *)((char *)this + 4288), (uint64_t)v30);
    v24 = (llvm::Type **)*((_QWORD *)this + 538);
  }
  v31 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v49 = 257;
  v32 = AGCLLVMBuilder::tryDeducePointeeType(v24, v22);
  v33 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v31 + 5, v32, (uint64_t)v24, 0, (uint64_t)v47);
  v34 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v35 = (llvm::Type *)*((_QWORD *)v34 + 29);
  v36 = (llvm::Value *)llvm::ConstantInt::get();
  v49 = 257;
  v37 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v34 + 40), v35, v33, v36, (const llvm::Twine *)v47);
  v38 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v49 = 257;
  v40 = AGCLLVMBuilder::tryDeducePointeeType(v37, v39);
  v41 = llvm::IRBuilderBase::CreateAlignedLoad(v38, v40, (uint64_t)v37, 0, (uint64_t)v47);
  v46 = 257;
  v42 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v38, 38, v41, (uint64_t)a2, (uint64_t)v45);
  v43 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v49 = 257;
  return llvm::IRBuilderBase::CreateMul(v43, Cast, v42, (const llvm::Twine *)v47);
}

uint64_t AGCLLVMUserObjectShaderSW::buildNumGroups(AGCLLVMUserObjectShaderSW *this, llvm::Type *a2, int a3)
{
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::IRBuilderBase *v8;
  llvm::Value *Add;
  llvm::Value *v10;
  llvm::Value *Sub;
  llvm::IRBuilderBase *v12;
  _WORD v14[20];
  _BYTE v15[32];
  __int16 v16;

  v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserObjectShaderSW *))(*(_QWORD *)this + 496))(this);
  v7 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildDispatchLocalSize(this, a2, a3);
  v8 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v16 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, v6, v7, (const llvm::Twine *)v15);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v8, Add, v10, (const llvm::Twine *)v14);
  v12 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v16 = 257;
  return llvm::IRBuilderBase::CreateUDiv(v12, Sub, v7, (const llvm::Twine *)v15);
}

uint64_t AGCLLVMUserObjectShaderSW::replacePayloadBufferAccesses(AGCLLVMUserObjectShaderSW *this, llvm::Value *a2)
{
  uint64_t inserted;
  char *v5;
  llvm::Value *v6;
  _BYTE v8[32];
  __int16 v9;

  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = 257;
  v6 = llvm::IRBuilderBase::CreateCall((uint64_t)(v5 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v8);
  AGCLLVMUserObjectShaderBase::replaceEmulatedPayloadBufferAccesses(this, a2, v6);
  return 1;
}

const char *AGCLLVMUserObjectShaderSW::dumpType(AGCLLVMUserObjectShaderSW *this)
{
  return "object";
}

uint64_t AGCLLVMUserObjectShaderSW::getShaderType(AGCLLVMUserObjectShaderSW *this)
{
  return 3;
}

void AGCLLVMUserObjectShaderSW::getCompilationKeyDescription(AGCLLVMUserObjectShaderSW *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  _QWORD *v4;
  std::string::size_type v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  uint64_t i;
  char *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31;
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  std::string v53;
  std::string v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t v58;
  std::string v59;
  void *v60[2];
  char v61;
  void *v62;
  std::string::size_type v63;
  unsigned __int8 v64;
  std::string v65;
  std::string __p;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*((_QWORD *)this + 565);
  std::string::basic_string[abi:nn180100]<0>(&v53, "AGCObjectContextStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v51, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v54);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v54.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v54.__r_.__value_.__r.__words[2] - 24) + 8) = *(_DWORD *)((_BYTE *)v4
                                                                                               + *(_QWORD *)(v54.__r_.__value_.__r.__words[2] - 24)
                                                                                               + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v67, (const void **)v51, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v54.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + *(_QWORD *)(v54.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v54.__r_.__value_.__r.__words[2] = v5;
  v55 = MEMORY[0x1E0DE4FB8] + 16;
  if (v57 < 0)
    operator delete(v56);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA2D638](&v58);
  std::string::basic_string[abi:nn180100]<0>(v49, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v68, (const void **)v49, v3[5]);
  std::string::basic_string[abi:nn180100]<0>(v47, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v69, (const void **)v47, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v45, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v70, (const void **)v45, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v43, "customBorderColor");
  _agcFieldString<unsigned int>(&v71, (const void **)v43, v3[4] & 1);
  std::string::basic_string[abi:nn180100]<0>(v41, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v72, (const void **)v41, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v39, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v73, (const void **)v39, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v37, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v74, (const void **)v37, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v35, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v75, (const void **)v35, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v33, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v76, (const void **)v33, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v31, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v77, (const void **)&v31, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v29, "enableStackShadow");
  _agcFieldString<unsigned int>(&v78, (const void **)v29, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v27, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v79, (const void **)v27, (v3[3] >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v25, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v80, (const void **)v25, (v3[3] >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v23, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v81, (const void **)v23, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v21, "meshNeedsTGCounts");
  _agcFieldString<unsigned int>(&v82, (const void **)v21, (v3[4] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v19, "meshNeedsOSGridPosition");
  _agcFieldString<unsigned int>(&v83, (const void **)v19, (v3[4] >> 2) & 1);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v65, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    v65 = v53;
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v65, 0);
  std::string::basic_string[abi:nn180100]<0>(v60, "{");
  _agcIndentedLine(&v62, (std::string::value_type *)v60, 0);
  if ((v64 & 0x80u) == 0)
    v6 = (const std::string::value_type *)&v62;
  else
    v6 = (const std::string::value_type *)v62;
  if ((v64 & 0x80u) == 0)
    v7 = v64;
  else
    v7 = v63;
  v8 = std::string::append(&__p, v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v64 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  for (i = 0; i != 51; i += 3)
  {
    v11 = (char *)&v67 + i * 8;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[i + 2]) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    else
      __p = *(std::string *)v11;
    v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v59, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v59 = __p;
    _agcIndentedLine(&v62, (std::string::value_type *)&v59, 1);
    if ((v64 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&v62;
    else
      v13 = (const std::string::value_type *)v62;
    if ((v64 & 0x80u) == 0)
      v14 = v64;
    else
      v14 = v63;
    std::string::append(&v54, v13, v14);
    if ((char)v64 < 0)
      operator delete(v62);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((v12 & 0x80000000) == 0)
        continue;
    }
    else if ((v12 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v62, "}");
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v62, 0);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v54;
  else
    v15 = (std::string *)v54.__r_.__value_.__r.__words[0];
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  else
    size = v54.__r_.__value_.__l.__size_;
  v17 = std::string::insert(&__p, 0, (const std::string::value_type *)v15, size);
  *a2 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v64 < 0)
    operator delete(v62);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  v18 = 51;
  do
  {
    if (v67.__r_.__value_.__s.__data_[v18 * 8 - 1] < 0)
      operator delete((void *)__p.__r_.__value_.__r.__words[v18 + 1]);
    v18 -= 3;
  }
  while (v18 * 8);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMUserObjectShaderSW::getBufferBoundsCheckMode(AGCLLVMUserObjectShaderSW *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 565) + 12) >> 4) & 7;
}

uint64_t AGCLLVMUserObjectShaderSW::getForwardProgressMode(AGCLLVMUserObjectShaderSW *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 565) + 12) >> 31;
}

BOOL AGCLLVMUserObjectShaderSW::enableSoftFaultOptimization(AGCLLVMUserObjectShaderSW *this)
{
  return (*(_BYTE *)(*((_QWORD *)this + 565) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserObjectShaderSW::isDMAPromotionDisabled(AGCLLVMUserObjectShaderSW *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 565) + 12) >> 7;
}

BOOL AGCLLVMUserObjectShaderSW::constructReply(AGCLLVMUserObjectShaderSW *this)
{
  _BOOL8 result;
  int v3;
  char *v4;
  char *v5;
  int v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  unsigned int v16;
  char *v17;
  int v18;
  const char *v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  flatbuffers::FlatBufferBuilder *v26;
  int v27;
  const char *v28;
  char *v29;
  flatbuffers::FlatBufferBuilder *v30;
  flatbuffers::FlatBufferBuilder *v31;
  int v32;
  const char *v33;

  result = AGCDeserializedReply::deserialize((AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if ((_DWORD)result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v5 = v4 + 2472;
    v4[2542] = 1;
    v6 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v4 + 2472, 4, *((_DWORD *)this + 1098));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, 6, *((_DWORD *)this + 1099));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v5, 8, *((_DWORD *)this + 1100));
    LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v5, v6);
    v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v8 = v7 + 2472;
    v7[2542] = 1;
    v9 = *((_DWORD *)v7 + 626) - *((_DWORD *)v7 + 630) + *((_DWORD *)v7 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v7 + 2472, 4, *((_DWORD *)this + 1216));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v8, 6, *((_DWORD *)this + 1216));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v8, 8, *((_DWORD *)this + 1216));
    LODWORD(v8) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v8, v9);
    v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v11 = v10 + 2472;
    v10[2542] = 1;
    v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v10 + 2472, 4, (int)v5);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v11, 6, (int)v8);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, *((_DWORD *)this + 1094));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 10, *((_DWORD *)this + 1095));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 12, *((_DWORD *)this + 1092));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v11, 14, *((unsigned __int8 *)this + 12), 0);
    LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, v12);
    v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v14 = v13 + 2472;
    v15 = *(_DWORD *)(*((_QWORD *)v13 + 50) + 864);
    v13[2542] = 1;
    LODWORD(v11) = *((_DWORD *)v13 + 626) - *((_DWORD *)v13 + 630) + *((_DWORD *)v13 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v13 + 2472, 12, v15);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 14, 0, 0);
    v16 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v14, 1);
    flatbuffers::FlatBufferBuilder::TrackField(v14, 10, v16);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 8, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 6, 0, 0);
    LODWORD(v14) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v14, (__int16)v11);
    v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v17[2542] = 1;
    v18 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v17 + 2472), (unsigned __int16)*((_DWORD *)v17 + 626) - (unsigned __int16)*((_DWORD *)v17 + 630) + *((_DWORD *)v17 + 628));
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), v18, v19);
    v20 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v21 = v20 + 2568;
    v20[2638] = 1;
    v22 = *((_DWORD *)v20 + 650) - *((_DWORD *)v20 + 654) + *((_DWORD *)v20 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v20 + 2568, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v21, 6, 0, 0);
    LODWORD(v21) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v21, v22);
    v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v24 = v23 + 2472;
    v23[2542] = 1;
    v25 = *((_DWORD *)v23 + 626) - *((_DWORD *)v23 + 630) + *((_DWORD *)v23 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v23 + 2472, v3);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ObjectShaderInfo>(v24, (int)v5);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v24, (int)v14);
    v26 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v27 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v24, v25);
    flatbuffers::FlatBufferBuilder::Finish(v26, v27, v28);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    v29 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v30 = (flatbuffers::FlatBufferBuilder *)(v29 + 2568);
    v29[2638] = 1;
    LODWORD(v5) = *((_DWORD *)v29 + 650) - *((_DWORD *)v29 + 654) + *((_DWORD *)v29 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v29 + 2568, (int)v21);
    v31 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
    v32 = flatbuffers::FlatBufferBuilder::EndTable(v30, (__int16)v5);
    flatbuffers::FlatBufferBuilder::Finish(v31, v32, v33);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
    return AGCLLVMUserObjectShaderBase::validateReply(this);
  }
  return result;
}

void `virtual thunk to'AGCLLVMUserObjectShaderSW::~AGCLLVMUserObjectShaderSW(AGCLLVMUserObjectShaderSW *this)
{
  uint64_t v1;

  AGCLLVMUserObjectShaderSW::~AGCLLVMUserObjectShaderSW((AGCLLVMUserObjectShaderSW *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 48)));
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4880));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMUserObjectShaderSW::~AGCLLVMUserObjectShaderSW((AGCLLVMUserObjectShaderSW *)v1);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4880));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMUserObjectShaderSW::dumpType(AGCLLVMUserObjectShaderSW *this)
{
  return "object";
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShaderSW::getShaderType(AGCLLVMUserObjectShaderSW *this)
{
  return 3;
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShaderSW::getForwardProgressMode(AGCLLVMUserObjectShaderSW *this)
{
  return *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 4520) + 12) >> 31;
}

void `virtual thunk to'AGCLLVMUserObjectShaderSW::getCompilationKeyDescription(AGCLLVMUserObjectShaderSW *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMUserObjectShaderSW::getCompilationKeyDescription((AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMUserObjectShaderSW::constructReply(AGCLLVMUserObjectShaderSW *this)
{
  return AGCLLVMUserObjectShaderSW::constructReply((AGCLLVMUserObjectShaderSW *)((char *)this
                                                                               + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShaderSW::getBufferBoundsCheckMode(AGCLLVMUserObjectShaderSW *this)
{
  return (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 4520) + 12) >> 4) & 7;
}

BOOL `virtual thunk to'AGCLLVMUserObjectShaderSW::enableSoftFaultOptimization(AGCLLVMUserObjectShaderSW *this)
{
  return (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 4520) + 15) & 0x40) == 0;
}

uint64_t `virtual thunk to'AGCLLVMUserObjectShaderSW::isDMAPromotionDisabled(AGCLLVMUserObjectShaderSW *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 4520) + 12) >> 7;
}

uint64_t AGCLLVMUserObjectShaderSW::buildSetMeshGridProperties(AGCLLVMUserObjectShaderSW *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *EmulationStateBuffer;
  llvm::Type *v6;
  llvm::Type *v7;
  llvm::IRBuilderBase *v8;
  llvm::Value *v9;
  llvm::Value *LinearThreadgroupID;
  llvm::Value *Mul;
  llvm::Type **GEP;
  llvm::IRBuilderBase *v13;
  llvm::Type *v14;
  llvm::Value *PointerCast;
  uint64_t i;
  uint64_t v17;
  uint64_t *v18;
  llvm::Type **v19;
  char *v20;
  llvm::Type *v21;
  llvm::Value *v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm::Type *v25;
  llvm::Type *v26;
  llvm::Value *v27;
  char *v28;
  llvm::IRBuilderBase *v29;
  llvm::Value *v30;
  llvm::Value *Element;
  llvm::Value *v32;
  llvm::Value *v33;
  char *v34;
  llvm::IRBuilderBase *v35;
  llvm::Value *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *Shl;
  char *v42;
  AGCLLVMBuilder *v43;
  llvm::IRBuilderBase *v44;
  llvm::Value *v45;
  llvm::CmpInst **v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *Sub;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::IRBuilderBase *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::IRBuilderBase *v56;
  llvm::Value *v57;
  llvm::Type **v58;
  llvm::IRBuilderBase *v59;
  uint64_t v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;

  if (*((_BYTE *)this + 4385))
  {
    EmulationStateBuffer = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 2, 0);
    v7 = v6;
    v8 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v9 = (llvm::Value *)llvm::ConstantInt::get();
    LinearThreadgroupID = (llvm::Value *)AGCLLVMUserObjectShaderSW::getLinearThreadgroupID(this);
    v67 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v8, v9, LinearThreadgroupID, (const llvm::Twine *)v66);
    v65 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v8, v7, EmulationStateBuffer, Mul, (const llvm::Twine *)v64);
    v13 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v14 = (llvm::Type *)llvm::PointerType::get();
    v67 = 257;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast(v13, GEP, v14, (const llvm::Twine *)v66);
    for (i = 0; i != 3; ++i)
    {
      v17 = *(_QWORD *)(*(_QWORD *)this - 24);
      v18 = (uint64_t *)((char *)this + v17 + 40);
      v19 = (llvm::Type **)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + v17 + 232), i);
      v20 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v21 = (llvm::Type *)*((_QWORD *)v20 + 29);
      v22 = (llvm::Value *)llvm::ConstantInt::get();
      v67 = 257;
      v23 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v20 + 40), v21, PointerCast, v22, (const llvm::Twine *)v66);
      llvm::IRBuilderBase::CreateAlignedStore(v18, v19, v23, 0);
    }
  }
  v24 = (llvm::Value *)AGCLLVMUserObjectShaderBase::getEmulationStateBuffer(this, 0, 0);
  v26 = v25;
  v27 = (llvm::Value *)AGCLLVMUserObjectShaderSW::getLinearThreadgroupID(this);
  v28 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v67 = 257;
  v29 = (llvm::IRBuilderBase *)(v28 + 40);
  v30 = (llvm::Value *)llvm::ConstantInt::get();
  Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v29, a3, v30, (const llvm::Twine *)v66);
  v65 = 257;
  v32 = (llvm::Value *)llvm::ConstantInt::get();
  v33 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v29, Element, v32, (const llvm::Twine *)v64);
  v34 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v67 = 257;
  v35 = (llvm::IRBuilderBase *)(v34 + 40);
  v36 = (llvm::Value *)llvm::ConstantInt::get();
  v37 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v35, a3, v36, (const llvm::Twine *)v66);
  v65 = 257;
  v38 = (llvm::Value *)llvm::ConstantInt::get();
  v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v35, v37, v38, (const llvm::Twine *)v64);
  v40 = (llvm::Value *)llvm::ConstantInt::get();
  v63 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v35, v39, v40, (const llvm::Twine *)v62);
  v42 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v43 = (AGCLLVMBuilder *)(v42 + 32);
  v67 = 257;
  v44 = (llvm::IRBuilderBase *)(v42 + 40);
  v45 = (llvm::Value *)llvm::ConstantInt::get();
  v46 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v44, a3, v45, (const llvm::Twine *)v66);
  v47 = (llvm::Value *)llvm::ConstantInt::get();
  v48 = (llvm::Value *)AGCLLVMBuilder::buildICmpSel(v43, v46, v47, 34);
  v49 = (llvm::Value *)llvm::ConstantInt::get();
  v65 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v44, v48, v49, (const llvm::Twine *)v64);
  v63 = 257;
  v51 = (llvm::Value *)llvm::ConstantInt::get();
  v52 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v44, Sub, v51, (const llvm::Twine *)v62);
  v53 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v67 = 257;
  v55 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v53, v52, v54, (const llvm::Twine *)v66);
  v56 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v67 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v56, v33, Shl, (const llvm::Twine *)v66);
  v65 = 257;
  v58 = (llvm::Type **)llvm::IRBuilderBase::CreateOr(v56, v57, v55, (const llvm::Twine *)v64);
  v59 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v63 = 257;
  v60 = llvm::IRBuilderBase::CreateGEP(v59, v26, v24, v27, (const llvm::Twine *)v62);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v56, v58, v60, 0);
}

uint64_t AGCLLVMAirBuiltinReplacement<AGCLLVMUserObjectShaderSW>::doReplacement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  llvm::Function *v6;
  int v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *, _QWORD);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;
  llvm::IRBuilderBase *v20;
  llvm::Instruction *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  llvm::Value **v28;
  llvm::Instruction *v29;
  llvm::Value **v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Type *v33;
  uint64_t v34;
  int v35;
  llvm::Type *v36;
  uint64_t v37;
  llvm::Value **v38;
  llvm::Value *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD *);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  llvm::Value *FPTrunc;
  uint64_t (*v46)(_QWORD *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t (*v52)(_QWORD *, _QWORD, _QWORD);
  uint64_t v53;
  _QWORD *v54;
  uint64_t (*v55)(_QWORD *, _QWORD, _QWORD);
  uint64_t v56;
  _QWORD *v57;
  uint64_t (*v58)(_QWORD *, _OWORD *, void *, uint64_t);
  uint64_t v59;
  _QWORD *v60;
  _OWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD);
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Value *v70;
  uint64_t v71;
  int v72;
  llvm::Function *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Value *v77;
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  _QWORD v85[4];
  __int16 v86;
  _OWORD v87[3];
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  result = llvm::Module::getFunction();
  if (result)
  {
    v6 = (llvm::Function *)result;
    v7 = *(_DWORD *)(a4 + 24);
    if (v7 == 10)
    {
      v10 = *(_QWORD *)(result + 8);
      if (v10)
      {
        do
        {
          v11 = *(void (**)(_QWORD *, _QWORD))(a4 + 8);
          v12 = *(_QWORD *)(a4 + 16);
          v13 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v12 >> 1));
          if ((v12 & 1) != 0)
            v11 = *(void (**)(_QWORD *, _QWORD))(*v13 + v11);
          v14 = *(_QWORD *)(v10 + 8);
          v11(v13, *(_QWORD *)(v10 + 24));
          v10 = v14;
        }
        while (v14);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    if (v7 == 9)
    {
      v8 = *(_BYTE **)(a4 + 8);
      if (v8)
      {
        v9 = strlen(*(const char **)(a4 + 8));
        *(_QWORD *)&v87[0] = (char *)&v87[1] + 8;
        *(_OWORD *)((char *)v87 + 8) = xmmword_1C3E37B50;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v87, v8, &v8[v9]);
      }
      else
      {
        *(_QWORD *)&v87[1] = 64;
        *(_QWORD *)&v87[0] = (char *)&v87[1] + 8;
        *((_QWORD *)&v87[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v87, ".", "");
      v71 = *((_QWORD *)&v87[0] + 1);
      if (*(_QWORD *)&v87[1] < *((_QWORD *)&v87[0] + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v71 = *((_QWORD *)&v87[0] + 1);
      }
      *((_QWORD *)&v87[0] + 1) = v71;
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v87[0] != (_OWORD *)((char *)&v87[1] + 8))
        free(*(void **)&v87[0]);
      return llvm::Function::eraseFromParent(v6);
    }
    v15 = **(_QWORD **)(*(_QWORD *)(result + 24) + 16);
    v16 = (*(_DWORD *)(v15 + 8) & 0xFE) != 0x12 || *(_BYTE *)(a4 + 29) == 0;
    v17 = !v16;
    if (v16)
      v18 = 1;
    else
      v18 = *(_DWORD *)(v15 + 32);
    v74 = v18;
    v72 = *(_DWORD *)(a1 + 104);
    v73 = (llvm::Function *)result;
    v19 = *(_QWORD *)(result + 8);
    if (!v19)
    {
LABEL_95:
      *(_DWORD *)(a1 + 104) = v72;
      v6 = v73;
      return llvm::Function::eraseFromParent(v6);
    }
    v20 = (llvm::IRBuilderBase *)(a1 + 8);
    v76 = a4;
    while (1)
    {
      v21 = *(llvm::Instruction **)(v19 + 24);
      v22 = *(_QWORD *)(v19 + 8);
      if (*(_DWORD *)a4 == 1)
      {
        v23 = 0;
      }
      else
      {
        if (*(_DWORD *)a4 != 2)
          goto LABEL_27;
        v23 = 121;
      }
      *(_DWORD *)(a1 + 104) = v23;
LABEL_27:
      v75 = v22;
      llvm::IRBuilderBase::SetInsertPoint(v20, v21);
      v24 = llvm::UndefValue::get();
      if (v74)
      {
        for (i = 0; i != v74; ++i)
        {
          v77 = (llvm::Value *)v24;
          v88 = 0;
          memset(v87, 0, sizeof(v87));
          v26 = llvm::CallBase::arg_end(v21) - (_QWORD)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
          if ((v26 & 0x1FFFFFFFE0) != 0)
          {
            v27 = (v26 >> 5);
            v28 = (llvm::Value **)v87;
            v29 = v21;
            do
            {
              v30 = (llvm::Value **)((char *)v29 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              v31 = *v30;
              *v28 = *v30;
              if (v17 && (*(_DWORD *)(*(_QWORD *)v31 + 8) & 0xFE) == 0x12)
              {
                v86 = 257;
                v32 = (llvm::Value *)llvm::ConstantInt::get();
                *v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, v31, v32, (const llvm::Twine *)v85);
              }
              ++v28;
              v29 = (llvm::Instruction *)((char *)v29 + 32);
              --v27;
            }
            while (v27);
          }
          if (*(_BYTE *)(v76 + 28))
          {
            v33 = **(llvm::Type ***)&v87[0];
            if ((*(_DWORD *)(**(_QWORD **)&v87[0] + 8) & 0xFE) == 0x12)
              v33 = (llvm::Type *)**((_QWORD **)v33 + 2);
            v85[0] = llvm::Type::getPrimitiveSizeInBits(v33);
            v85[1] = v34;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              v35 = 0;
            }
            else
            {
              v36 = *(llvm::Type **)(a1 + 168);
              if ((*(_DWORD *)(**(_QWORD **)&v87[0] + 8) & 0xFE) == 0x12)
                v36 = (llvm::Type *)llvm::FixedVectorType::get();
              if ((v26 & 0x1FFFFFFFE0) != 0)
              {
                v37 = (v26 >> 5);
                v38 = (llvm::Value **)v87;
                do
                {
                  v39 = *v38;
                  v86 = 257;
                  *v38++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v20, v39, v36, (const llvm::Twine *)v85);
                  --v37;
                }
                while (v37);
                v35 = 1;
              }
              else
              {
                v35 = 1;
              }
            }
          }
          else
          {
            v35 = 0;
          }
          v40 = *(_QWORD *)(**(_QWORD **)(a1 + 368) - 24) + *(_QWORD *)(a1 + 368);
          v82 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(v20);
          v84 = *(_DWORD *)(a1 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v82, v40 + 40);
          if (v83)
            llvm::MetadataTracking::untrack();
          switch(*(_DWORD *)(v76 + 24))
          {
            case 1:
              v41 = *(uint64_t (**)(_QWORD *))(v76 + 8);
              v42 = *(_QWORD *)(v76 + 16);
              v43 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v42 >> 1));
              if ((v42 & 1) != 0)
                v41 = *(uint64_t (**)(_QWORD *))(*v43 + v41);
              v44 = v41(v43);
              goto LABEL_80;
            case 2:
              v46 = *(uint64_t (**)(_QWORD *, uint64_t))(v76 + 8);
              v47 = *(_QWORD *)(v76 + 16);
              v48 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v47 >> 1));
              if ((v47 & 1) != 0)
                v46 = *(uint64_t (**)(_QWORD *, uint64_t))(*v48 + v46);
              v49 = *(_QWORD *)v21;
              goto LABEL_61;
            case 3:
              v46 = *(uint64_t (**)(_QWORD *, uint64_t))(v76 + 8);
              v50 = *(_QWORD *)(v76 + 16);
              v48 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v50 >> 1));
              if ((v50 & 1) != 0)
                v46 = *(uint64_t (**)(_QWORD *, uint64_t))(*v48 + v46);
              v49 = *(_QWORD *)&v87[0];
LABEL_61:
              v44 = v46(v48, v49);
              goto LABEL_80;
            case 4:
              v51 = (unsigned int *)(*(_QWORD *)&v87[0] + 24);
              if (*(_DWORD *)(*(_QWORD *)&v87[0] + 32) >= 0x41u)
                v51 = *(unsigned int **)v51;
              v52 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(v76 + 8);
              v53 = *(_QWORD *)(v76 + 16);
              v54 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v53 >> 1));
              if ((v53 & 1) != 0)
                v52 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v54 + v52);
              v44 = v52(v54, *(_QWORD *)v21, *v51);
              goto LABEL_80;
            case 5:
              v55 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(v76 + 8);
              v56 = *(_QWORD *)(v76 + 16);
              v57 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v56 >> 1));
              if ((v56 & 1) != 0)
                v55 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v57 + v55);
              v44 = v55(v57, *(_QWORD *)&v87[0], *((_QWORD *)&v87[0] + 1));
              goto LABEL_80;
            case 6:
              v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(v76 + 8);
              v59 = *(_QWORD *)(v76 + 16);
              v60 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v59 >> 1));
              if ((v59 & 1) != 0)
                v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(*v60 + v58);
              v62 = (void *)*((_QWORD *)&v87[0] + 1);
              v61 = *(_OWORD **)&v87[0];
              v63 = *(_QWORD *)&v87[1];
              goto LABEL_76;
            case 7:
              v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(v76 + 8);
              v64 = *(_QWORD *)(v76 + 16);
              v60 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v64 >> 1));
              if ((v64 & 1) != 0)
                v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(*v60 + v58);
              v61 = v87;
              v62 = &unk_1C3E4D9BB;
              v63 = 0;
LABEL_76:
              v44 = v58(v60, v61, v62, v63);
              goto LABEL_80;
            case 8:
              v65 = *(uint64_t (**)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))(v76 + 8);
              v66 = *(_QWORD *)(v76 + 16);
              v67 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v66 >> 1));
              if ((v66 & 1) != 0)
                v65 = *(uint64_t (**)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))(*v67 + v65);
              v44 = v65(v67, *(_QWORD *)v21, v87, &unk_1C3E4D9BB, 0);
LABEL_80:
              FPTrunc = (llvm::Value *)v44;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          v68 = *(_QWORD *)(**(_QWORD **)(a1 + 368) - 24) + *(_QWORD *)(a1 + 368);
          v79 = *(_OWORD *)(v68 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v68 + 40));
          v81 = *(_DWORD *)(v68 + 136);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v79, (uint64_t)v20);
          if (v80)
            llvm::MetadataTracking::untrack();
          if (v35)
          {
            v69 = *(_QWORD *)v21;
            if (v17 && (*(_DWORD *)(v69 + 8) & 0xFE) == 0x12)
              v69 = **(_QWORD **)(v69 + 16);
            v86 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v20, FPTrunc, (llvm::Type *)v69, (const llvm::Twine *)v85);
            if (!v17)
              goto LABEL_91;
          }
          else if (!v17)
          {
            goto LABEL_91;
          }
          v86 = 257;
          v70 = (llvm::Value *)llvm::ConstantInt::get();
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v20, v77, FPTrunc, v70, (const llvm::Twine *)v85);
LABEL_91:
          v24 = (uint64_t)FPTrunc;
        }
      }
      if (*(_QWORD *)v21 != *(_QWORD *)(a1 + 144))
        llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v21);
      a4 = v76;
      v19 = v75;
      if (!v75)
        goto LABEL_95;
    }
  }
  return result;
}

uint64_t AGCLLVMUserObjectShaderSW::getLinearThreadgroupID(AGCLLVMUserObjectShaderSW *this)
{
  _QWORD *EmulationStateCacheForCurrentFunction;
  uint64_t v3;
  _QWORD *v4;
  llvm::ValueHandleBase *v5;
  char *v6;
  char *v7;
  llvm::IRBuilderBase *v8;
  uint64_t v9;
  llvm::BasicBlock *v10;
  uint64_t FirstInsertionPt;
  llvm::Instruction *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::IRBuilderBase *v18;
  llvm::Value *Mul;
  llvm::Value *Add;
  llvm::Value *v21;
  uint64_t v22;
  char *v23;
  __int128 v25;
  uint64_t v26;
  int v27;
  _BYTE v28[32];
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;
  _BYTE v32[32];
  __int16 v33;
  _BYTE v34[32];
  __int16 v35;
  __int128 v36;
  uint64_t v37;
  int v38;

  EmulationStateCacheForCurrentFunction = AGCLLVMUserObjectShaderBase::getEmulationStateCacheForCurrentFunction(this);
  v3 = EmulationStateCacheForCurrentFunction[38];
  if (!v3)
  {
    v4 = EmulationStateCacheForCurrentFunction;
    v5 = (llvm::ValueHandleBase *)(EmulationStateCacheForCurrentFunction + 36);
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v36 = *(_OWORD *)(v6 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
    v38 = *((_DWORD *)v6 + 34);
    v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v8 = (llvm::IRBuilderBase *)(v7 + 40);
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 11) + 56) + 80);
    if (v9)
      v10 = (llvm::BasicBlock *)(v9 - 24);
    else
      v10 = 0;
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v10);
    if (FirstInsertionPt)
      v12 = (llvm::Instruction *)(FirstInsertionPt - 24);
    else
      v12 = 0;
    llvm::IRBuilderBase::SetInsertPoint(v8, v12);
    v13 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserObjectShaderSW *, _QWORD, _QWORD))(*(_QWORD *)this + 504))(this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 0);
    v14 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserObjectShaderSW *, _QWORD, uint64_t))(*(_QWORD *)this
                                                                                                 + 504))(this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 1);
    v15 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 0);
    v16 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 1);
    v17 = (llvm::Value *)AGCLLVMUserObjectShaderBase::buildGroupID(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 2);
    v18 = (AGCLLVMUserObjectShaderSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v35 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, v17, v14, (const llvm::Twine *)v34);
    v33 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v18, Mul, v16, (const llvm::Twine *)v32);
    v31 = 257;
    v21 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, Add, v13, (const llvm::Twine *)v30);
    v29 = 257;
    v22 = llvm::IRBuilderBase::CreateAdd(v18, v21, v15, (const llvm::Twine *)v28);
    llvm::ValueHandleBase::operator=(v5, v22);
    v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v25 = v36;
    v26 = v37;
    if (v37)
      llvm::MetadataTracking::track();
    v27 = v38;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v25, (uint64_t)(v23 + 8));
    if (v26)
      llvm::MetadataTracking::untrack();
    v3 = v4[38];
    if (v37)
      llvm::MetadataTracking::untrack();
  }
  return v3;
}

void AGCLLVMAGPVertexShaderAnalysis::~AGCLLVMAGPVertexShaderAnalysis(AGCLLVMAGPVertexShaderAnalysis *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E72778;
  v2 = (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + 10056);
  *((_QWORD *)this + 1257) = &off_1E7E72AC8;
  *((_QWORD *)this + 1261) = &off_1E7E72BB8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6D060);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E72778;
  v2 = (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + 10056);
  *((_QWORD *)this + 1257) = &off_1E7E72AC8;
  *((_QWORD *)this + 1261) = &off_1E7E72BB8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6D060);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMAGPVertexShaderAnalysis::initCompile(AGCLLVMAGPVertexShaderAnalysis *this)
{
  uint64_t Function;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v15[2];
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[72];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  Function = llvm::Module::getFunction();
  if (Function)
  {
    v3 = *(_QWORD *)(Function + 80);
    v4 = v3 - 24;
    if (!v3)
      v4 = 0;
    v5 = *(_QWORD *)(v4 + 40);
    if (v5 == v4 + 40)
    {
      v8 = 0;
    }
    else
    {
      v6 = v5 - 24;
      if (v5)
        v7 = v5 - 24;
      else
        v7 = 0;
      if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
        v8 = 0;
      else
        v8 = v6;
    }
    if (*(_BYTE *)(v8 + 16) != 29)
      v8 = 0;
    v9 = *(_DWORD *)(v8 + 20) & 0x7FFFFFF;
    if ((_DWORD)v9 && (v10 = *(_QWORD *)(v8 - 32 * v9)) != 0)
    {
      v11 = *(unsigned __int8 *)(v10 + 16);
    }
    else
    {
      v12 = *(_QWORD *)(v8 + 24);
      if (v12)
        v13 = v12 - 24;
      else
        v13 = 0;
      v11 = *(unsigned __int8 *)(v13 + 16);
    }
    if (v11 == 84)
    {
      v15[0] = (char *)&v16;
      v15[1] = (char *)0x800000000;
      v17 = v19;
      v18 = 0x800000000;
      v19[64] = 1;
      llvm::InlineFunction();
      if (v17 != v19)
        free(v17);
      llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(v15);
    }
  }
  return AGCLLVMAGPVertexShader::initCompile(this);
}

uint64_t AGCLLVMAGPVertexShaderAnalysis::setupShaderOutputs(AGCLLVMAGPVertexShaderAnalysis *this)
{
  llvm::CallBase *v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t String;
  uint64_t v19;
  BOOL v20;
  llvm::Value *v22;
  const llvm::Type *v23;
  unsigned int v24;
  llvm::Value *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int isVertexOutputUniform;
  int v30;
  void *v31;
  size_t v32;
  size_t v33;
  unsigned int ComponentType;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  void **v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  void *__dst[2];
  uint64_t v56;
  llvm::Value *v57[2];
  _BYTE __p[24];
  __int128 v59;
  BOOL v60;
  __int16 v61;
  int v62;
  void *v63[2];
  _QWORD v64[10];

  v64[8] = *MEMORY[0x1E0C80C00];
  v2 = *(llvm::CallBase **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
  v3 = llvm::CallBase::arg_end(v2);
  v4 = (uint64_t **)((char *)v2 - 32 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  if (((v3 - (_QWORD)v4) & 0x1FFFFFFFE0) != 0)
  {
    v5 = *v4;
    v6 = **v4;
    v54 = v6;
    if (*(_BYTE *)(v6 + 8) == 16)
      v7 = *(_DWORD *)(v6 + 12);
    else
      v7 = 1;
  }
  else
  {
    v7 = 0;
    v54 = 0;
    v5 = 0;
  }
  v63[0] = v64;
  v63[1] = (void *)0x800000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)v63, v7, 0);
  if (v7)
  {
    if (*(_BYTE *)(v54 + 8) == 16)
      AGCLLVMBuilder::unboxStruct((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v5, (uint64_t)v63);
    else
      *(_QWORD *)v63[0] = v5;
  }
  v8 = (*(uint64_t (**)(AGCLLVMAGPVertexShaderAnalysis *))(*(_QWORD *)this + 472))(this);
  printMessage((char **)&AGCPrinter, "------ Start flat varying analysis for %s shader %u  ------", v9, v10, v11, v12, v13, v14, v8);
  v15 = v54;
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v17 = *(_QWORD *)(*((_QWORD *)this + 9) - 8 * *(unsigned int *)(*((_QWORD *)this + 9) + 8) + 8 * i);
      String = llvm::MDString::getString(*(llvm::MDString **)(v17 - 8 * *(unsigned int *)(v17 + 8)));
      if (v19 == 17)
      {
        v20 = *(_QWORD *)String == 0x747265762E726961 && *(_QWORD *)(String + 8) == 0x757074756F5F7865;
        if (v20 && *(_BYTE *)(String + 16) == 116)
        {
          v22 = (llvm::Value *)*((_QWORD *)v63[0] + i);
          v23 = *(const llvm::Type **)(*(_QWORD *)(v15 + 16) + 8 * i);
          if ((*((_DWORD *)v23 + 2) & 0xFE) == 0x12)
          {
            *(_OWORD *)v57 = 0u;
            *(_OWORD *)__p = 0u;
            v24 = AGCLLVMBuilder::unboxVector((AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v22, v57);
            if (v24)
            {
              v26 = 0;
              v27 = 0;
              v28 = v24;
              do
              {
                isVertexOutputUniform = AGCLLVMAGPVertexShaderAnalysis::isVertexOutputUniform(v57[v26], v25);
                v30 = 1 << v26;
                if (!isVertexOutputUniform)
                  LOBYTE(v30) = 0;
                v27 |= v30;
                ++v26;
              }
              while (v28 != v26);
            }
            else
            {
              v27 = 0;
            }
            v15 = v54;
          }
          else
          {
            v27 = AGCLLVMAGPVertexShaderAnalysis::isVertexOutputUniform(*((AGCLLVMAGPVertexShaderAnalysis **)v63[0] + i), v22);
          }
          if (v27)
          {
            v31 = (void *)llvm::MDString::getString(*(llvm::MDString **)(v17 - 8 * *(unsigned int *)(v17 + 8) + 8));
            v33 = v32;
            ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v23, (unsigned int *)v57);
            if ((*((_DWORD *)v23 + 2) & 0xFE) == 0x12)
              v41 = *((_DWORD *)v23 + 8);
            else
              v41 = 1;
            v42 = *((_DWORD *)this + 2365) + 1;
            *((_DWORD *)this + 2365) = v42;
            v57[0] = (llvm::Value *)__PAIR64__(ComponentType, v41);
            v57[1] = 0;
            *(_DWORD *)__p = v42;
            *(_OWORD *)&__p[8] = 0u;
            v59 = 0u;
            v60 = ComponentType == 1;
            v61 = 0;
            if (ComponentType == 1)
              v43 = 5;
            else
              v43 = 1;
            v62 = v43;
            if (v31)
            {
              std::string::basic_string[abi:nn180100](__dst, v31, v33);
              if (SBYTE7(v59) < 0)
                operator delete(*(void **)&__p[8]);
              *(_OWORD *)&__p[8] = *(_OWORD *)__dst;
              *(_QWORD *)&v59 = v56;
              HIBYTE(v61) = v27;
              std::string::basic_string[abi:nn180100](__dst, v31, v33);
              v44 = __dst;
              if (v56 < 0)
                LOBYTE(v44) = __dst[0];
            }
            else
            {
              *(_QWORD *)&__p[8] = 0;
              *(_QWORD *)&__p[16] = 0;
              *(_QWORD *)&v59 = 0;
              HIBYTE(v61) = v27;
              __dst[0] = 0;
              __dst[1] = 0;
              v44 = __dst;
              v56 = 0;
            }
            printMessage((char **)&AGCPrinter, "Promoted varying: {semantic: \"%s\", flat_components: %s%s%s%s}", v35, v36, v37, v38, v39, v40, (char)v44);
            if (SHIBYTE(v56) < 0)
              operator delete(__dst[0]);
            GenericVaryingAllocator::addVarying((uint64_t)this + 4320, (unint64_t)v57);
            if (SBYTE7(v59) < 0)
              operator delete(*(void **)&__p[8]);
          }
        }
      }
    }
  }
  v45 = (*(uint64_t (**)(AGCLLVMAGPVertexShaderAnalysis *))(*(_QWORD *)this + 472))(this);
  printMessage((char **)&AGCPrinter, "------ End flat varying analysis for %s shader %u  ------\n", v46, v47, v48, v49, v50, v51, v45);
  v52 = AGCLLVMAGPVertexShader::setupShaderOutputs(this);
  if (v63[0] != v64)
    free(v63[0]);
  return v52;
}

uint64_t AGCLLVMAGPVertexShader::supportsConstantSamplers(AGCLLVMAGPVertexShader *this)
{
  return 1;
}

uint64_t AGCLLVMAGPVertexShader::getPCFStateForUnit(AGCLLVMAGPVertexShader *this, char a2)
{
  return 16 * ((*((_DWORD *)this + 1263) >> a2) & 1u);
}

BOOL AGCLLVMAGPVertexShader::needsPCFClamp(AGCLLVMAGPVertexShader *this)
{
  return *((_DWORD *)this + 1263) != 0;
}

uint64_t AGCLLVMAGPVertexShader::disableGin1122SWWA(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + 10050);
}

uint64_t AGCLLVMAGPVertexShader::usesCustomBorderColor(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + 9457);
}

const char *AGCLLVMUserVertexShader::dumpType(AGCLLVMUserVertexShader *this)
{
  return "vertex";
}

uint64_t AGCLLVMUserVertexShader::getShaderType(AGCLLVMUserVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMAGPVertexShader::setupClipDistanceOutput(_QWORD *a1, llvm::Value *a2, uint64_t a3, llvm::Value **a4, _DWORD *a5)
{
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t Value;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  llvm::IRBuilderBase *v20;
  llvm::Value *v21;
  uint64_t Element;
  unsigned int v24[8];
  __int16 v25;
  int v26;

  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v10 = *(_BYTE *)(*(_QWORD *)a2 + 8) == 18;
  else
    v10 = 0;
  if (v10)
  {
    v26 = 0;
    v24[0] = 1;
    parseMDInt(0, a3, v24, &v26);
    v16 = *(unsigned int *)(v9 + 32);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 4 * v26;
      do
      {
        v19 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v25 = 257;
        v20 = (llvm::IRBuilderBase *)(v19 + 40);
        v21 = (llvm::Value *)llvm::ConstantInt::get();
        Element = llvm::IRBuilderBase::CreateExtractElement(v20, a2, v21, (const llvm::Twine *)v24);
        *a5 |= 1 << (v18 + v17);
        a4[(v18 + v17++)] = (llvm::Value *)Element;
      }
      while (v16 != v17);
    }
  }
  else
  {
    v11 = *(_QWORD *)(*a1 - 24);
    if (v9 == *(_QWORD *)((char *)a1 + v11 + 200))
    {
      *a5 |= 1u;
      *a4 = a2;
    }
    else
    {
      v12 = *(_DWORD *)(v9 + 32);
      if (v12 >= 9)
      {
        std::string::append((std::string *)((char *)a1 + v11 + 8), "Number of clip planes used exceeds supported maximum");
        return 0;
      }
      *a5 |= ~(-1 << v12);
      v26 = 0;
      if (v12)
      {
        do
        {
          v13 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
          v25 = 257;
          Value = llvm::IRBuilderBase::CreateExtractValue(v13, (uint64_t)a2, (uint64_t)&v26, 1, (uint64_t)v24);
          v15 = v26;
          a4[v26] = (llvm::Value *)Value;
          v26 = v15 + 1;
        }
        while (v15 + 1 < v12);
      }
    }
  }
  return 1;
}

uint64_t AGCLLVMAGPVertexShader::getGenericVaryingInfo(_QWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7)
{
  void *String;
  size_t v14;
  int ComponentType;
  std::string *p_p;
  std::string::size_type size;
  uint64_t GenericVaryingInfo;
  std::string __p;
  unsigned int v21;

  String = (void *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  GenericVarying::getComponentSemantic(&__p, String, v14, a7);
  ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), *(const llvm::Type **)(*(_QWORD *)(a2 + 16) + 8 * a3), &v21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  GenericVaryingInfo = AGCLLVMAGPVertexShader::getGenericVaryingInfo((uint64_t)a1, ComponentType, 1, p_p, size, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return GenericVaryingInfo;
}

llvm::Value *AGCLLVMAGPVertexShader::getPointSize(AGCLLVMAGPVertexShader *this, llvm::Value *a2)
{
  if (a2)
    return a2;
  if (!*((_BYTE *)this + 9458))
    return 0;
  return (llvm::Value *)llvm::ConstantFP::get();
}

uint64_t AGCLLVMUserVertexShader::getSupportExternalVisibleFunctions(AGCLLVMUserVertexShader *this)
{
  return *((unsigned __int8 *)this + 5060);
}

uint64_t AGCLLVMAGPVertexShader::getBufferBoundsCheckMode(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned int *)this + 2510);
}

uint64_t AGCLLVMAGPVertexShader::getForwardProgressMode(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned int *)this + 2511);
}

BOOL AGCLLVMAGPVertexShader::enableSoftFaultOptimization(AGCLLVMAGPVertexShader *this)
{
  return *((_BYTE *)this + 10051) == 0;
}

uint64_t AGCLLVMAGPVertexShader::isDMAPromotionDisabled(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + 10048);
}

BOOL AGCLLVMAGPVertexShaderAnalysis::constructReply(AGCLLVMAGPVertexShaderAnalysis *this)
{
  _BOOL8 result;
  int v3;
  int v4;
  _BOOL4 VaryingSignature;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  flatbuffers::FlatBufferBuilder *v13;
  int v14;
  const char *v15;
  uint64_t v16;

  result = AGCDeserializedReply::deserialize((AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if ((_DWORD)result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMAGPVertexShaderAnalysis *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = AGCLLVMUserVertexShader::constructFlatReply(this);
    GenericVaryingAllocator::serialize((AGCLLVMAGPVertexShaderAnalysis *)((char *)this + 4320), (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    v16 = 0;
    VaryingSignature = GenericVaryingAllocator::getVaryingSignature((uint64_t)this + 4320, (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), (_DWORD *)&v16 + 1, &v16);
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v7 = v6 + 2472;
    v6[2542] = 1;
    v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
    if (VaryingSignature)
    {
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v7, 10, SHIDWORD(v16));
      flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v7, 12, v16);
    }
    v9 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v7, v8);
    v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v11 = v10 + 2472;
    v10[2542] = 1;
    v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v10 + 2472, v3);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v11, v4);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(v11, v9);
    v13 = (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, v12);
    flatbuffers::FlatBufferBuilder::Finish(v13, v14, v15);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMAGPVertexShaderAnalysis *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    return AGCLLVMAGPVertexShader::validateReply(this);
  }
  return result;
}

void `virtual thunk to'AGCLLVMAGPVertexShaderAnalysis::~AGCLLVMAGPVertexShaderAnalysis(AGCLLVMAGPVertexShaderAnalysis *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E72778;
  v1[1257] = &off_1E7E72AC8;
  v1[1261] = &off_1E7E72BB8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6D060);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1257));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E72778;
  v1[1257] = &off_1E7E72AC8;
  v1[1261] = &off_1E7E72BB8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6D060);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1257));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMUserVertexShader::dumpType(AGCLLVMUserVertexShader *this)
{
  return "vertex";
}

uint64_t `virtual thunk to'AGCLLVMUserVertexShader::getShaderType(AGCLLVMUserVertexShader *this)
{
  return 0;
}

uint64_t `virtual thunk to'AGCLLVMAGPVertexShader::buildBackendRequest(AGCLLVMAGPVertexShader *this, llvm::AGX::CompileRequest *a2)
{
  return AGCLLVMAGPVertexShader::buildBackendRequest((AGCLLVMAGPVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 104)), a2);
}

uint64_t `virtual thunk to'AGCLLVMUserVertexShader::getSupportExternalVisibleFunctions(AGCLLVMUserVertexShader *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 120) + 5060);
}

uint64_t `virtual thunk to'AGCLLVMAGPVertexShader::getForwardProgressMode(AGCLLVMAGPVertexShader *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 10044);
}

void `virtual thunk to'AGCLLVMAGPVertexShader::getCompilationKeyDescription(AGCLLVMAGPVertexShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMAGPVertexShader::getCompilationKeyDescription((AGCLLVMAGPVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMAGPVertexShaderAnalysis::constructReply(AGCLLVMAGPVertexShaderAnalysis *this)
{
  return AGCLLVMAGPVertexShaderAnalysis::constructReply((AGCLLVMAGPVertexShaderAnalysis *)((char *)this
                                                                                         + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t `virtual thunk to'AGCLLVMAGPVertexShader::getBufferBoundsCheckMode(AGCLLVMAGPVertexShader *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 10040);
}

BOOL `virtual thunk to'AGCLLVMAGPVertexShader::enableSoftFaultOptimization(AGCLLVMAGPVertexShader *this)
{
  return *((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 10051) == 0;
}

uint64_t `virtual thunk to'AGCLLVMAGPVertexShader::isDMAPromotionDisabled(AGCLLVMAGPVertexShader *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 10048);
}

uint64_t AGCLLVMUserVertexShader::disableGin1122SWWA(AGCLLVMUserVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMUserVertexShader::getGenericVaryingInfo()
{
  return 0;
}

{
  return 0;
}

uint64_t AGCLLVMUserVertexShader::getNextUnlinkedVarying()
{
  return 0;
}

uint64_t AGCLLVMAGPVertexShaderAnalysis::isVertexOutputUniform(AGCLLVMAGPVertexShaderAnalysis *this, llvm::Value *a2)
{
  uint64_t *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  _BYTE *v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  llvm *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  llvm *v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  unsigned int v40;
  llvm *v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  BOOL v45;
  uint64_t v46;
  llvm *v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *SectionImpl;
  uint64_t v56;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  llvm *v63;
  uint64_t v64;
  int v65;
  _DWORD *v66;
  BOOL v67;
  uint64_t v68;
  llvm *v69;
  uint64_t v70;
  int v71;
  _DWORD *v72;
  BOOL v73;
  uint64_t v74;
  llvm *v75;
  uint64_t v76;
  llvm *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  AGCLLVMAGPVertexShaderAnalysis *v84;
  _BYTE *v85;
  _DWORD *v86;
  llvm *__src;
  uint64_t v88;
  unsigned int v89;
  void *v90;
  uint64_t v91;
  _QWORD v92[22];

  v92[20] = *MEMORY[0x1E0C80C00];
  __src = this;
  v88 = 0xFFFFFFFFLL;
  v84 = this;
  v90 = v92;
  v91 = 0xA00000000;
  llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::append<std::tuple<llvm::Value *,int> const*,void>((uint64_t)&v90, &__src, &v89);
  __src = 0;
  v88 = 0;
  v89 = 0;
  v2 = (uint64_t *)&v84;
LABEL_2:
  *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, v2)+ 8) = 255;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            do
            {
              if (!(_DWORD)v91)
              {
                v11 = 1;
                goto LABEL_168;
              }
              v3 = (char *)v90 + 16 * v91;
              v5 = *((_QWORD *)v3 - 2);
              v4 = *((_QWORD *)v3 - 1);
              LODWORD(v91) = v91 - 1;
              v6 = *(unsigned __int8 *)(v5 + 16);
              if (v5)
                v7 = v6 >= 0x15;
              else
                v7 = 1;
            }
            while (!v7);
            if (v5)
              v8 = v6 >= 0x1C;
            else
              v8 = 0;
            if (!v8)
              goto LABEL_167;
            v9 = *(unsigned __int8 *)(v5 + 16);
            v10 = (v9 - 59) > 0xFFFFFFED || *(unsigned __int8 *)(v5 + 16) - 83 > 0xFFFFFFFD;
            if (!v10 && v9 != 62 && v9 != 85)
              break;
            v17 = *(_DWORD *)(v5 + 20);
            v18 = v17 & 0x7FFFFFF;
            if ((v17 & 0x7FFFFFF) != 0)
            {
              v19 = 0;
              v20 = 0;
              do
              {
                if ((v17 & 0x40000000) != 0)
                  v21 = *(_QWORD *)(v5 - 8);
                else
                  v21 = v5 - 32 * v18;
                v22 = *(_BYTE **)(v21 + v19);
                if (v22)
                  v23 = v22[16] == 22;
                else
                  v23 = 0;
                if (!v23)
                {
                  if ((*(_DWORD *)(*(_QWORD *)v22 + 8) & 0xFE) == 0x12)
                    v24 = v4;
                  else
                    v24 = -1;
                  v85 = *(_BYTE **)(v21 + v19);
                  v86 = 0;
                  if (v24 == -1)
                    v25 = 255;
                  else
                    v25 = 1 << v24;
                  v26 = __src;
                  v27 = v89;
                  v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, (uint64_t)v22, &v86);
                  v29 = v86;
                  if (v28)
                    v30 = v86 == (_DWORD *)((char *)v26 + 16 * v27);
                  else
                    v30 = 1;
                  if (v30)
                  {
                    llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, (uint64_t)v22, v24);
                    *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, (uint64_t *)&v85)+ 8) = v25;
                  }
                  else if ((v25 & ~v86[2]) != 0)
                  {
                    llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, (uint64_t)v22, v24);
                    v29[2] |= v25;
                  }
                  v17 = *(_DWORD *)(v5 + 20);
                }
                ++v20;
                v18 = v17 & 0x7FFFFFF;
                v19 += 32;
              }
              while (v20 < v18);
            }
          }
          if (v9 == 83)
            goto LABEL_167;
          if ((v9 - 79) < 0xFFFFFFF3)
            break;
          v16 = *(_BYTE **)(v5 - 32);
          if ((*(_DWORD *)(*(_QWORD *)v16 + 8) & 0xFE) == 0x12)
          {
            if ((_DWORD)v4 == -1)
              goto LABEL_87;
            if ((*(_DWORD *)(*(_QWORD *)v5 + 8) & 0xFE) == 0x12
              && *(_DWORD *)(*(_QWORD *)v16 + 32) == *(_DWORD *)(*(_QWORD *)v5 + 32))
            {
              v85 = *(_BYTE **)(v5 - 32);
              v31 = 1 << v4;
              goto LABEL_88;
            }
          }
          else if ((_DWORD)v4 == -1)
          {
LABEL_87:
            v85 = *(_BYTE **)(v5 - 32);
            v31 = 255;
LABEL_88:
            v86 = 0;
            v47 = __src;
            v48 = v89;
            v49 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, (uint64_t)v16, &v86);
            v38 = v86;
            if (v49)
              v50 = v86 == (_DWORD *)((char *)v47 + 16 * v48);
            else
              v50 = 1;
            if (!v50)
              goto LABEL_150;
LABEL_153:
            v79 = (uint64_t)v16;
            v80 = v4;
            goto LABEL_154;
          }
          v85 = *(_BYTE **)(v5 - 32);
          v86 = 0;
          v41 = __src;
          v42 = v89;
          v43 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, (uint64_t)v16, &v86);
          v44 = v86;
          if (v43)
            v45 = v86 == (_DWORD *)((char *)v41 + 16 * v42);
          else
            v45 = 1;
          if (v45)
          {
            v82 = (uint64_t)v16;
LABEL_163:
            llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v82, 0xFFFFFFFF);
            v2 = (uint64_t *)&v85;
            goto LABEL_2;
          }
          if (*((unsigned __int8 *)v86 + 8) != 0xFF)
          {
            v46 = (uint64_t)v16;
            goto LABEL_86;
          }
        }
        v11 = 0;
        v12 = *(unsigned __int8 *)(v5 + 16);
        if (v12 <= 0x59)
          break;
        if (v12 == 90)
        {
          v53 = *(_QWORD *)(v5 - 32);
          if (*(_BYTE *)(v53 + 16) != 16)
            v53 = 0;
          if ((_DWORD)v4 == -1 || !v53)
          {
            v62 = *(_QWORD *)(v5 - 64);
            v85 = (_BYTE *)v62;
            v86 = 0;
            v63 = __src;
            v64 = v89;
            v65 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, v62, &v86);
            v66 = v86;
            if (v65)
              v67 = v86 == (_DWORD *)((char *)v63 + 16 * v64);
            else
              v67 = 1;
            if (v67)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v62, 0xFFFFFFFF);
              *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, (uint64_t *)&v85)+ 8) = 255;
            }
            else if (*((unsigned __int8 *)v86 + 8) != 0xFF)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v62, 0xFFFFFFFF);
              v66[2] |= 0xFFu;
            }
LABEL_144:
            v16 = *(_BYTE **)(v5 - 96);
            goto LABEL_145;
          }
          if (*(_DWORD *)(v53 + 32) >= 0x41u)
            v54 = **(_QWORD **)(v53 + 24);
          else
            v54 = *(_QWORD *)(v53 + 24);
          if (v54 != (int)v4)
            goto LABEL_144;
          v74 = *(_QWORD *)(v5 - 64);
          v85 = (_BYTE *)v74;
          v86 = 0;
          v75 = __src;
          v76 = v89;
          if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, v74, &v86)|| (v44 = v86, v86 == (_DWORD *)((char *)v75 + 16 * v76)))
          {
            v82 = v74;
            goto LABEL_163;
          }
          if (*((unsigned __int8 *)v86 + 8) != 0xFF)
          {
            v46 = v74;
            goto LABEL_86;
          }
        }
        else
        {
          if (v12 != 91)
            goto LABEL_168;
          if ((_DWORD)v4 == -1)
          {
            v68 = *(_QWORD *)(v5 - 64);
            v85 = (_BYTE *)v68;
            v86 = 0;
            v69 = __src;
            v70 = v89;
            v71 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, v68, &v86);
            v72 = v86;
            if (v71)
              v73 = v86 == (_DWORD *)((char *)v69 + 16 * v70);
            else
              v73 = 1;
            if (v73)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v68, 0xFFFFFFFF);
              *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, (uint64_t *)&v85)+ 8) = 255;
              v69 = __src;
              v70 = v89;
            }
            else if (*((unsigned __int8 *)v86 + 8) != 0xFF)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v68, 0xFFFFFFFF);
              v72[2] |= 0xFFu;
            }
            v81 = *(_QWORD *)(v5 - 32);
            v85 = (_BYTE *)v81;
            v86 = 0;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)v69, v70, v81, &v86)|| (v44 = v86, v86 == (_DWORD *)((char *)v69 + 16 * v70)))
            {
              v82 = v81;
              goto LABEL_163;
            }
            if (*((unsigned __int8 *)v86 + 8) != 0xFF)
            {
              v46 = v81;
LABEL_86:
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v46, 0xFFFFFFFF);
              v44[2] |= 0xFFu;
            }
          }
          else
          {
            v32 = *(_DWORD *)(*(_QWORD *)(v5 + 64) + 4 * v4);
            if (v32 != -1)
            {
              v33 = *(_QWORD *)(v5 - 64);
              v34 = *(_DWORD *)(*(_QWORD *)v33 + 32);
              v7 = v32 >= v34;
              v35 = v32 - v34;
              if (v7)
              {
                v33 = *(_QWORD *)(v5 - 32);
                v32 = v35;
              }
              v85 = (_BYTE *)v33;
              v86 = 0;
              if (v32 == -1)
                v31 = 255;
              else
                v31 = 1 << v32;
              v36 = __src;
              v37 = v89;
              if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, v33, &v86)|| (v38 = v86, v86 == (_DWORD *)((char *)v36 + 16 * v37)))
              {
                v79 = v33;
                v80 = v32;
LABEL_154:
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v79, v80);
                *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, (uint64_t *)&v85)+ 8) = v31;
              }
              else if ((v31 & ~v86[2]) != 0)
              {
                v39 = v33;
                v40 = v32;
                goto LABEL_152;
              }
            }
          }
        }
      }
      if (v12 != 60)
      {
        if (v12 != 89)
          goto LABEL_168;
        v13 = *(_QWORD *)(v5 - 32);
        if (v13)
          v14 = *(_BYTE *)(v13 + 16) == 16;
        else
          v14 = 0;
        if (v14)
        {
          v15 = (_QWORD *)(v13 + 24);
          if (*(_DWORD *)(v13 + 32) >= 0x41u)
            v15 = (_QWORD *)*v15;
          LODWORD(v4) = *(_DWORD *)v15;
        }
        v16 = *(_BYTE **)(v5 - 64);
        goto LABEL_145;
      }
      v16 = *(_BYTE **)(v5 - 32);
      if (v16 && v16[16] == 3)
        break;
      v52 = *(_DWORD *)(*(_QWORD *)v16 + 8);
      if ((v52 & 0xFE) == 0x12)
        v52 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v16 + 16) + 8);
      if ((v52 & 0xFFFFFF00) != 0x200)
        goto LABEL_167;
LABEL_145:
      v85 = v16;
      v86 = 0;
      if ((_DWORD)v4 == -1)
        v31 = 255;
      else
        v31 = 1 << v4;
      v77 = __src;
      v78 = v89;
      if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v89, (uint64_t)v16, &v86))goto LABEL_153;
      v38 = v86;
      if (v86 == (_DWORD *)((char *)v77 + 16 * v78))
        goto LABEL_153;
LABEL_150:
      if ((v31 & ~v38[2]) != 0)
      {
        v39 = (uint64_t)v16;
        v40 = v4;
LABEL_152:
        llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v90, v39, v40);
        v38[2] |= v31;
      }
    }
    if ((v16[34] & 0x40) == 0)
      break;
    SectionImpl = (_QWORD *)llvm::GlobalObject::getSectionImpl(*(llvm::GlobalObject **)(v5 - 32));
    if (v56 != 15)
      break;
    if (*SectionImpl != 0x625F726566667562 || *(_QWORD *)((char *)SectionImpl + 7) != 0x73676E69646E6962)
      break;
    v58 = *(_QWORD *)v16;
    v59 = *(_DWORD *)(*(_QWORD *)v16 + 8);
    if (v59 != 15)
      break;
    if ((v59 & 0xFE) == 0x12)
      v59 = *(_DWORD *)(**(_QWORD **)(v58 + 16) + 8);
    if ((v59 & 0xFFFFFF00) != 0x4000)
      break;
    v60 = **(_QWORD **)(v58 + 16);
    v61 = *(_DWORD *)(v60 + 8);
    if (v61 != 15)
      break;
    if ((v61 & 0xFE) == 0x12)
      v61 = *(_DWORD *)(**(_QWORD **)(v60 + 16) + 8);
  }
  while ((v61 & 0xFFFFFF00) == 0x200);
LABEL_167:
  v11 = 0;
LABEL_168:
  llvm::deallocate_buffer(__src, (void *)(16 * v89));
  if (v90 != v92)
    free(v90);
  return v11;
}

uint64_t llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::append<std::tuple<llvm::Value *,int> const*,void>(uint64_t result, _BYTE *__src, _BYTE *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;

  v5 = result;
  v6 = a3 - __src;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - __src) >> 4) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  if (__src != a3)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)v5 + 16 * v7), __src, v6);
    LODWORD(v7) = *(_DWORD *)(v5 + 8);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 4);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12))
    return llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(result, a2, a3);
  v4 = *(_QWORD *)result + 16 * v3;
  *(_QWORD *)v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  *(_DWORD *)(result + 8) = v3 + 1;
  return result;
}

_QWORD *llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  llvm *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x1CAA2C6C0](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = 16 * v3;
      v14 = v4;
      do
      {
        v15 = *(_QWORD *)v14;
        if ((*(_QWORD *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          v16 = v19;
          *v19 = *(_QWORD *)v14;
          *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
          ++*(_DWORD *)(a1 + 8);
        }
        v14 = (llvm *)((char *)v14 + 16);
        v13 -= 16;
      }
      while (v13);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      do
      {
        *result = -4096;
        result += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  return result;
}

char **llvm::SmallVector<llvm::WeakTrackingVH,8u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      v5 = *(_QWORD *)&v2[v4 - 8];
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v2[v4 - 24]);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void AGCLLVMAGPVertexShaderRegular::~AGCLLVMAGPVertexShaderRegular(AGCLLVMAGPVertexShaderRegular *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E737A0;
  v2 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E73AF0;
  *((_QWORD *)this + 1265) = &off_1E7E73BE0;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6D540);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E737A0;
  v2 = (AGCLLVMAGPVertexShaderRegular *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E73AF0;
  *((_QWORD *)this + 1265) = &off_1E7E73BE0;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6D540);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMAGPVertexShaderRegular::~AGCLLVMAGPVertexShaderRegular(AGCLLVMAGPVertexShaderRegular *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E737A0;
  v1[1261] = &off_1E7E73AF0;
  v1[1265] = &off_1E7E73BE0;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6D540);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E737A0;
  v1[1261] = &off_1E7E73AF0;
  v1[1265] = &off_1E7E73BE0;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6D540);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL `virtual thunk to'AGCLLVMAGPVertexShaderRegular::constructReply(AGCLLVMAGPVertexShaderRegular *this)
{
  return AGCLLVMAGPVertexShaderRegular::constructReply((AGCLLVMAGPVertexShaderRegular *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t llvm::Type::isSized(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 0x11)
    goto LABEL_6;
  v2 = 1;
  if (((1 << v1) & 0xAC7F) != 0)
    return v2;
  if (((1 << v1) & 0x30000) == 0)
  {
LABEL_6:
    if ((v1 & 0xFE) != 0x12 && v1 != 21)
      return 0;
  }
  return llvm::Type::isSizedDerivedType();
}

uint64_t AGCLLVMAGPVertexShaderRegular::canDMAPromote(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Type *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t SourceElementType;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t TypeAtIndex;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v66;
  uint64_t v67;
  llvm::Type *v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  BOOL v83;
  unint64_t v84;
  uint64_t v85;
  BOOL v86;
  unint64_t *v87;
  int v88;
  const char *v89;
  llvm::Constant *v91;
  llvm::Constant *v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  llvm::Value *v101;
  llvm::Value *v102;
  llvm::IRBuilderBase *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  unsigned __int8 *v126;
  BOOL v127;
  char v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  llvm::Constant **Add;
  llvm::Constant **v133;
  llvm::Type *v134;
  llvm::IRBuilderBase *v135;
  void *Name;
  uint64_t v137;
  int v138;
  uint64_t v139;
  char v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  char v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  llvm *v173;
  char *v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  char *v178;
  uint64_t v180;
  const char *v182;
  void *v183;
  uint64_t v186;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v192;
  char v193;
  llvm::DataLayout *v194;
  llvm::Type *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  int v199;
  void *__p;
  uint64_t v201;
  uint64_t v202;
  __int16 v203;
  llvm *v204[2];
  unsigned int v205;
  _BYTE v206[40];
  void *TypeAllocSize;
  uint64_t v208;
  _QWORD v209[2];
  uint64_t v210;
  char v211;
  uint64_t v212;
  int v213;
  void **p_p;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  _BYTE v218[64];
  unint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  _BYTE v222[64];
  uint64_t v223;
  uint64_t v224;

  v193 = a3;
  v224 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
    return 1;
  v9 = a6;
  v10 = a5;
  v11 = a1;
  if (!*(_QWORD *)(v8 + 8))
  {
    v12 = *(_QWORD *)(v8 + 24);
    if (*(_BYTE *)(v12 + 16) != 77)
      v12 = a2;
    v8 = *(_QWORD *)(v12 + 8);
    if (!v8)
      return 1;
  }
  v194 = (llvm::DataLayout *)(a1 + 29);
  v183 = (void *)(MEMORY[0x1E0DE2AB0] + 16);
  v13 = 1;
  while (1)
  {
    v14 = *(_QWORD *)(v8 + 24);
    if (!v14 || *(_BYTE *)(v14 + 16) != 62)
      break;
    v15 = *(_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 32);
    if (v15 && *(_BYTE *)(v15 + 16) == 67)
      v15 = *(_QWORD *)(v15 - 32);
    v199 = 1;
    v198 = 0;
    v16 = AGCLLVMAGPVertexShaderRegular::extractDivisor(v15, &v199, &v198);
    v23 = 0;
    if (v16)
    {
      if (*(_BYTE *)(v16 + 16) == 84)
      {
        v23 = *(_QWORD *)(v16 - 32);
        if (!v23 || *(_BYTE *)(v23 + 16) || *(_QWORD *)(v23 + 24) != *(_QWORD *)(v16 + 72))
          v23 = 0;
      }
    }
    v24 = v11[1257];
    if (v23 == v24)
      v25 = 1259;
    else
      v25 = 1260;
    v26 = v198;
    v27 = v198 != 0;
    if (!v23 || (v28 = v11[v25], v23 != v24) && v23 != v11[1258])
    {
      v182 = "Cannot DMA promote %s : GEP not indexed with instance_id/vertex_id";
      goto LABEL_314;
    }
    if (v198 && v198 != v28)
    {
      v182 = "Cannot DMA promote %s: GEP indexed with index type not matching base type";
      goto LABEL_314;
    }
    if ((v13 & 1) != 0)
    {
      v29 = v23 == v24;
      if (v23 == v24)
        v30 = 1;
      else
        v30 = 2;
      *a4 = v30;
      *(_DWORD *)(v10 + 24) = v199;
      *(_BYTE *)(v10 + 28) = v27;
      if (v29 && v26)
      {
        v182 = "Cannot DMA promote %s: GEP indexed with vertex_id and divisor with bias";
LABEL_314:
        printMessage((char **)&AGCPrinter, v182, v17, v18, v19, v20, v21, v22, v193);
        return 0;
      }
      goto LABEL_41;
    }
    if (*a4 == 2)
    {
      v24 = v11[1258];
    }
    else if (*a4 != 1)
    {
      goto LABEL_39;
    }
    if (v23 != v24)
      goto LABEL_311;
LABEL_39:
    if (v199 != *(_DWORD *)(v10 + 24) || *(unsigned __int8 *)(v10 + 28) != v27)
    {
LABEL_311:
      v182 = "Cannot DMA promote %s : GEP indexed inconsistently";
      goto LABEL_314;
    }
LABEL_41:
    v205 = 128;
    v204[0] = (llvm *)MEMORY[0x1CAA2C6C0](0x4000, 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty((uint64_t)v204);
    v206[0] = 0;
    v206[24] = 0;
    v220 = (uint64_t *)v222;
    v221 = 0x800000000;
    LOBYTE(v223) = 0;
    HIDWORD(v223) = 0;
    llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&v220, (char *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 64), (char *)v14);
    v31 = v221;
    v186 = v8;
    v32 = 1;
    if ((_DWORD)v221)
    {
      v33 = v220;
      do
      {
        v34 = *v33++;
        v32 &= *(_BYTE *)(v34 + 16) == 16;
        --v31;
      }
      while (v31);
    }
    LOBYTE(v223) = v32;
    v35 = llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v204, (llvm::Value *)v14);
    v36 = llvm::SmallVectorImpl<llvm::Value *>::operator=(v35, (uint64_t)&v220);
    *(_QWORD *)(v36 + 80) = v223;
    v37 = (char *)operator new(8uLL);
    *(_QWORD *)v37 = v14;
    v38 = v37 + 8;
    v197 = v37 + 8;
    v188 = v14;
    while (1)
    {
      v189 = v38;
      v190 = v37;
      if (v37 == v38)
        break;
      v40 = *((_QWORD *)v38 - 1);
      v38 -= 8;
      v39 = v40;
      v216 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>((uint64_t)v204[0], v205, v40, &v216))v48 = (char *)v216;
      else
        v48 = (char *)v204[0] + 128 * (unint64_t)v205;
      v216 = v218;
      v217 = 0x800000000;
      v49 = *((_DWORD *)v48 + 12);
      if (v49)
      {
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v216, (uint64_t)(v48 + 40));
        v49 = v217;
      }
      v219 = *((_QWORD *)v48 + 15);
      v192 = v39;
      if (v39 != v14 || v49)
      {
        SourceElementType = llvm::GEPOperator::getSourceElementType((llvm::GEPOperator *)v39);
        v51 = *(_DWORD *)(v39 + 20);
        v52 = v51 & 0x7FFFFFF;
        if ((v51 & 0x40000000) != 0)
          v53 = *(_QWORD *)(v39 - 8);
        else
          v53 = v39 - 32 * v52;
        v54 = v53 + 32;
        v55 = SourceElementType | 4;
        v56 = v53 + 32 * v52;
        if (v53 + 32 == v56)
        {
          LODWORD(v196) = 0;
        }
        else
        {
          do
          {
            v57 = v55;
            TypeAtIndex = v55 & 0xFFFFFFFFFFFFFFF8;
            if ((v55 & 4) == 0 || !TypeAtIndex)
              TypeAtIndex = llvm::StructType::getTypeAtIndex();
            v59 = *(unsigned __int8 *)(TypeAtIndex + 8);
            if (TypeAtIndex && v59 == 17 || TypeAtIndex && (v59 & 0xFE) == 0x12)
            {
              v55 = *(_QWORD *)(TypeAtIndex + 24) | 4;
            }
            else if (v59 == 16)
            {
              v55 = TypeAtIndex & 0xFFFFFFFFFFFFFFFBLL;
            }
            else
            {
              v55 = 0;
            }
            v54 += 32;
          }
          while (v54 != v56);
          v196 = (v57 >> 2) & 1;
        }
      }
      else
      {
        LODWORD(v196) = 0;
        v39 = v14;
      }
      v60 = *(_QWORD *)(v39 + 8);
      if (!v60)
        goto LABEL_257;
      while (1)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(v60 + 24) + 16) <= 0x1Bu)
          v61 = 0;
        else
          v61 = *(_QWORD *)(v60 + 24);
        v62 = *(unsigned __int8 *)(v61 + 16);
        if (v62 == 60 && v61 != 0)
        {
          AGCLLVMAGPVertexShaderRegular::LoadMap::addEntry(v9, (llvm::Value *)v61, (uint64_t)&v216);
          goto LABEL_256;
        }
        if (v62 == 62 && v61 != 0)
        {
          v126 = *(unsigned __int8 **)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32);
          if (v126)
            v127 = v126[16] > 0x14u;
          else
            v127 = 1;
          if (!v127 && llvm::Constant::isNullValue((llvm::Constant *)v126))
          {
            TypeAllocSize = v209;
            v208 = 0x800000000;
            if ((_DWORD)v217)
              llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)&v216);
            v215 = v219;
            llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&TypeAllocSize, (char *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 64), (char *)v61);
            v128 = v219;
            if ((_BYTE)v219)
            {
              v129 = v208;
              if ((_DWORD)v208)
              {
                v128 = 1;
                v130 = (uint64_t *)TypeAllocSize;
                do
                {
                  v131 = *v130++;
                  v128 &= *(_BYTE *)(v131 + 16) == 16;
                  --v129;
                }
                while (v129);
              }
              else
              {
                v128 = 1;
              }
            }
            LOBYTE(v215) = v128;
            v151 = llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v204, (llvm::Value *)v61);
            v152 = llvm::SmallVectorImpl<llvm::Value *>::operator=(v151, (uint64_t)&TypeAllocSize);
            *(_QWORD *)(v152 + 80) = v215;
            if (v38 < v197)
              goto LABEL_238;
            v153 = (v38 - v37) >> 3;
            v154 = v153 + 1;
            if (!((unint64_t)(v153 + 1) >> 61))
            {
              if ((v197 - v37) >> 2 > v154)
                v154 = (v197 - v37) >> 2;
              if ((unint64_t)(v197 - v37) >= 0x7FFFFFFFFFFFFFF8)
                v147 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v147 = v154;
              if (v147)
                v147 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v147);
              else
                v41 = 0;
              v148 = (char *)(v147 + 8 * v153);
              *(_QWORD *)v148 = v61;
              v149 = v148 + 8;
              if (v38 != v37)
              {
                do
                {
                  v155 = *((_QWORD *)v38 - 1);
                  v38 -= 8;
                  *((_QWORD *)v148 - 1) = v155;
                  v148 -= 8;
                }
                while (v38 != v37);
                goto LABEL_250;
              }
              goto LABEL_251;
            }
LABEL_316:
            abort();
          }
          if ((_DWORD)v196)
          {
            Add = (llvm::Constant **)*((_QWORD *)v216 + v217 - 1);
            v133 = *(llvm::Constant ***)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32);
            if (v133 == (llvm::Constant **)llvm::Constant::getNullValue(*v133, v41))
              goto LABEL_216;
            if (Add == (llvm::Constant **)llvm::Constant::getNullValue(*Add, v134))
            {
              Add = v133;
LABEL_216:
              TypeAllocSize = v209;
              v208 = 0x800000000;
              v138 = v217;
              if ((_DWORD)v217)
              {
                llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)&v216);
                v138 = v208;
              }
              v215 = v219;
              LODWORD(v208) = v138 - 1;
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&TypeAllocSize, (uint64_t)Add);
              llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>((uint64_t)&TypeAllocSize, (char *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 64), (char *)v61);
              v139 = v208;
              if ((_DWORD)v208)
              {
                v140 = 1;
                v141 = (uint64_t *)TypeAllocSize;
                do
                {
                  v142 = *v141++;
                  v140 &= *(_BYTE *)(v142 + 16) == 16;
                  --v139;
                }
                while (v139);
              }
              else
              {
                v140 = 1;
              }
              LOBYTE(v215) = v140;
              v143 = llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v204, (llvm::Value *)v61);
              v144 = llvm::SmallVectorImpl<llvm::Value *>::operator=(v143, (uint64_t)&TypeAllocSize);
              *(_QWORD *)(v144 + 80) = v215;
              if (v38 < v197)
              {
LABEL_238:
                *(_QWORD *)v38 = v61;
                v38 += 8;
              }
              else
              {
                v145 = (v38 - v37) >> 3;
                v146 = v145 + 1;
                if ((unint64_t)(v145 + 1) >> 61)
                  goto LABEL_316;
                if ((v197 - v37) >> 2 > v146)
                  v146 = (v197 - v37) >> 2;
                if ((unint64_t)(v197 - v37) >= 0x7FFFFFFFFFFFFFF8)
                  v147 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v147 = v146;
                if (v147)
                  v147 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v147);
                else
                  v41 = 0;
                v148 = (char *)(v147 + 8 * v145);
                *(_QWORD *)v148 = v61;
                v149 = v148 + 8;
                if (v38 != v37)
                {
                  do
                  {
                    v150 = *((_QWORD *)v38 - 1);
                    v38 -= 8;
                    *((_QWORD *)v148 - 1) = v150;
                    v148 -= 8;
                  }
                  while (v38 != v37);
LABEL_250:
                  v38 = v37;
                }
LABEL_251:
                v37 = v148;
                v197 = (char *)(v147 + 8 * (_QWORD)v41);
                if (v38)
                  operator delete(v38);
                v38 = v149;
              }
              if (TypeAllocSize != v209)
                free(TypeAllocSize);
              goto LABEL_256;
            }
            if (*v133 == *Add)
            {
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), (llvm::Instruction *)v61);
              v135 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
              Name = (void *)llvm::Value::getName((llvm::Value *)v61);
              LOWORD(v210) = 773;
              TypeAllocSize = Name;
              v208 = v137;
              v209[0] = ".sum";
              Add = (llvm::Constant **)llvm::IRBuilderBase::CreateAdd(v135, (llvm::Value *)v133, (llvm::Value *)Add, (const llvm::Twine *)&TypeAllocSize);
              goto LABEL_216;
            }
          }
          goto LABEL_269;
        }
        if (v62 != 77 || v61 == 0)
        {
          printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : GEP not used in a load", v42, v43, v44, v45, v46, v47, v193);
          goto LABEL_269;
        }
        if (*(_BYTE *)(*(_QWORD *)v61 + 8) != 15)
        {
          printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : pointer bitcast to non-pointer type", v42, v43, v44, v45, v46, v47, v193);
          goto LABEL_269;
        }
        v66 = *(_QWORD *)(v61 + 8);
        if (v66)
          break;
LABEL_256:
        v60 = *(_QWORD *)(v60 + 8);
        if (!v60)
        {
LABEL_257:
          TypeAllocSize = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>((uint64_t)v204[0], v205, v192, &TypeAllocSize))v156 = TypeAllocSize;
          else
            v156 = (_QWORD *)((char *)v204[0] + 128 * (unint64_t)v205);
          if ((_QWORD *)v204[0] + 16 * (unint64_t)v205 != v156)
            llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase((int32x2_t *)v204, v156);
          v157 = 1;
          goto LABEL_270;
        }
      }
      v67 = **(_QWORD **)(**(_QWORD **)(v61 - 32) + 16);
      v68 = **(llvm::Type ***)(*(_QWORD *)v61 + 16);
      v195 = v68;
      while (1)
      {
        v69 = *(uint64_t **)(v66 + 24);
        v70 = *((unsigned __int8 *)v69 + 16);
        if (!v69 || v70 != 60)
          break;
        if ((*(_DWORD *)(v67 + 8) & 0xFE) == 0x12
          && (v71 = *v69, (*(_DWORD *)(*v69 + 8) & 0xFE) == 0x12)
          && **(_QWORD **)(v67 + 16) == **(_QWORD **)(v71 + 16)
          && (v72 = *(unsigned int *)(v71 + 32), v73 = *(unsigned int *)(v67 + 32),
                                                 v72 > v73))
        {
          v74 = v69[1];
          if (v74)
          {
            while (1)
            {
              v75 = *(_QWORD *)(v74 + 24);
              v76 = *(unsigned __int8 *)(v75 + 16);
              if (v75 && v76 == 91)
              {
                v77 = *(unsigned int *)(*(_QWORD *)v75 + 32);
                v68 = v195;
                v78 = 0;
                if ((_DWORD)v77)
                {
                  v79 = *(unsigned int **)(v75 + 64);
                  v80 = -1;
                  while (1)
                  {
                    v82 = *v79++;
                    v81 = v82;
                    if ((v82 & 0x80000000) == 0
                      && v81 < v72
                      && *(uint64_t **)(v75 - 64) == v69)
                    {
                      goto LABEL_113;
                    }
                    v83 = v81 < v72 || v81 >= 2 * (int)v72;
                    if (!v83 && *(uint64_t **)(v75 - 32) == v69)
                      break;
LABEL_117:
                    if (!--v77)
                      goto LABEL_128;
                  }
                  v81 = (v81 - v72);
LABEL_113:
                  if (v80 >= v81)
                    v80 = v81;
                  if (v78 <= v81)
                    v78 = v81;
                  goto LABEL_117;
                }
                v80 = -1;
LABEL_128:
                v84 = v78 + 1;
              }
              else
              {
                v80 = 0;
                v68 = v195;
                if (!v75)
                  goto LABEL_126;
                v84 = v72;
                if (v76 == 89)
                {
                  v85 = *(_QWORD *)(v75 - 32);
                  if (v85)
                    v86 = *(_BYTE *)(v85 + 16) == 16;
                  else
                    v86 = 0;
                  if (!v86)
                  {
                    v80 = 0;
LABEL_126:
                    v84 = v72;
                    goto LABEL_132;
                  }
                  v87 = (unint64_t *)(v85 + 24);
                  if (*(_DWORD *)(v85 + 32) >= 0x41u)
                    v87 = (unint64_t *)*v87;
                  v80 = *v87;
                  v84 = v80 + 1;
                }
              }
LABEL_132:
              if (v80 >= v84 || v84 > v73)
                goto LABEL_164;
              v74 = *(_QWORD *)(v74 + 8);
              v88 = 1;
              v89 = "DMA promotion %s : truncated extend bitcast pattern";
              if (!v74)
                goto LABEL_169;
            }
          }
          v88 = 1;
          v89 = "DMA promotion %s : truncated extend bitcast pattern";
        }
        else
        {
LABEL_164:
          if ((_BYTE)v219 && isReinterpretedArray(v68, (llvm::Type *)v67, v194, v196))
          {
            v88 = 2;
            v89 = "DMA promotion %s : reinterpreted array bitcast pattern";
          }
          else
          {
            TypeAllocSize = (void *)llvm::DataLayout::getTypeAllocSize(v194, v68);
            v208 = v109;
            v110 = llvm::TypeSize::operator unsigned long long();
            __p = (void *)llvm::DataLayout::getTypeAllocSize(v194, (llvm::Type *)v67);
            v201 = v111;
            if (v110 > llvm::TypeSize::operator unsigned long long())
            {
              printMessage((char **)&AGCPrinter, "DMA promotion %s : unrecognized GEP bitcast pattern: ", v42, v43, v44, v45, v46, v47, v193);
              __p = 0;
              v201 = 0;
              v202 = 0;
              LODWORD(v208) = 0;
              v211 = 0;
              v212 = 0;
              v213 = 1;
              v209[1] = 0;
              v210 = 0;
              v209[0] = 0;
              TypeAllocSize = v183;
              p_p = &__p;
              llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&TypeAllocSize);
              llvm::Value::print((llvm::Value *)v61, (llvm::raw_ostream *)&TypeAllocSize);
              LOBYTE(v165) = (_BYTE)p_p;
              v9 = a6;
              if (*((char *)p_p + 23) < 0)
                v165 = *p_p;
              v14 = v188;
              printMessage((char **)&AGCPrinter, "bitcast: %s", v159, v160, v161, v162, v163, v164, (char)v165);
              if (SHIBYTE(v202) < 0)
              {
                *(_BYTE *)__p = 0;
                v201 = 0;
              }
              else
              {
                LOBYTE(__p) = 0;
                HIBYTE(v202) = 0;
              }
              llvm::Value::print((llvm::Value *)v69, (llvm::raw_ostream *)&TypeAllocSize);
              LOBYTE(v172) = (_BYTE)p_p;
              if (*((char *)p_p + 23) < 0)
                v172 = *p_p;
              printMessage((char **)&AGCPrinter, "load:    %s", v166, v167, v168, v169, v170, v171, (char)v172);
              llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&TypeAllocSize);
              if (SHIBYTE(v202) < 0)
                operator delete(__p);
              v157 = 0;
              goto LABEL_271;
            }
            v88 = 3;
            v89 = "DMA promotion %s : truncate to smaller sized type pattern";
            v9 = a6;
          }
        }
LABEL_169:
        printMessage((char **)&AGCPrinter, v89, v42, v43, v44, v45, v46, v47, v193);
        if (HIDWORD(v219))
        {
          printMessage((char **)&AGCPrinter, "DMA promotion %s : can't combine bitcast types", v112, v113, v114, v115, v116, v117, v193);
          goto LABEL_269;
        }
        TypeAllocSize = v209;
        v208 = 0x800000000;
        if ((_DWORD)v217)
          llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)&v216);
        v215 = __PAIR64__(v88, v219);
        AGCLLVMAGPVertexShaderRegular::LoadMap::addEntry(v9, (llvm::Value *)v69, (uint64_t)&TypeAllocSize);
        if (TypeAllocSize != v209)
          free(TypeAllocSize);
        v68 = v195;
LABEL_195:
        v66 = *(_QWORD *)(v66 + 8);
        if (!v66)
          goto LABEL_256;
      }
      if (v70 != 62 || v69 == 0)
      {
        v158 = "Cannot DMA promote %s : unknown GEP bitcast use";
        goto LABEL_268;
      }
      if (HIDWORD(v219))
      {
        v158 = "DMA promotion %s : GEP-of-bitcast can't combine bitcast types";
        goto LABEL_268;
      }
      if (!(_BYTE)v219 || !isReinterpretedArray(v68, (llvm::Type *)v67, v194, v196) || *((_BYTE *)v68 + 8) != 16)
      {
        v158 = "Cannot DMA promote %s : unknown GEP-of-bitcast use";
LABEL_268:
        printMessage((char **)&AGCPrinter, v158, v42, v43, v44, v45, v46, v47, v193);
        goto LABEL_269;
      }
      if ((*((_DWORD *)v69 + 5) & 0x7FFFFFF) != 4)
      {
        v158 = "Cannot DMA promote %s : GEP-of-bitcast needs to index to a scalar";
        goto LABEL_268;
      }
      if (*(unsigned __int8 *)(*(v69 - 12) + 16) >= 0x15u)
        v91 = 0;
      else
        v91 = (llvm::Constant *)*(v69 - 12);
      if (*(unsigned __int8 *)(*(v69 - 8) + 16) >= 0x15u)
        v92 = 0;
      else
        v92 = (llvm::Constant *)*(v69 - 8);
      if (v91)
        v93 = v92 == 0;
      else
        v93 = 1;
      if (!v93 && llvm::Constant::isNullValue(v91) && llvm::Constant::isNullValue(v92))
      {
        v100 = v9;
        v101 = (llvm::Value *)*((_QWORD *)v216 + v217 - 1);
        v102 = (llvm::Value *)v69[-4 * (*((_DWORD *)v69 + 5) & 0x7FFFFFF) + 12];
        if (*(_QWORD *)v102 != *(_QWORD *)v101)
        {
          v157 = 0;
          v9 = v100;
          goto LABEL_270;
        }
        printMessage((char **)&AGCPrinter, "DMA promotion %s : reinterpreted array bitcast pattern (through struct-array GEP)", v94, v95, v96, v97, v98, v99, v193);
        TypeAllocSize = v209;
        v208 = 0x800000000;
        if ((_DWORD)v217)
          llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&TypeAllocSize, (uint64_t)&v216);
        v215 = v219;
        v103 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
        v203 = 257;
        v104 = llvm::IRBuilderBase::CreateAdd(v103, v101, v102, (const llvm::Twine *)&__p);
        v105 = v208;
        *((_QWORD *)TypeAllocSize + v208 - 1) = v104;
        v106 = 1;
        if ((_DWORD)v105)
        {
          v107 = (uint64_t *)TypeAllocSize;
          v9 = v100;
          do
          {
            v108 = *v107++;
            v106 &= *(_BYTE *)(v108 + 16) == 16;
            --v105;
          }
          while (v105);
        }
        else
        {
          v9 = v100;
        }
        LOBYTE(v215) = v106;
        HIDWORD(v215) = 2;
        v118 = llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v204, (llvm::Value *)v69);
        v119 = llvm::SmallVectorImpl<llvm::Value *>::operator=(v118, (uint64_t)&TypeAllocSize);
        *(_QWORD *)(v119 + 80) = v215;
        if (v38 >= v197)
        {
          v120 = (v38 - v37) >> 3;
          v121 = v120 + 1;
          if ((unint64_t)(v120 + 1) >> 61)
            goto LABEL_316;
          if ((v197 - v37) >> 2 > v121)
            v121 = (v197 - v37) >> 2;
          if ((unint64_t)(v197 - v37) >= 0x7FFFFFFFFFFFFFF8)
            v122 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v122 = v121;
          if (v122)
            v122 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v122);
          else
            v41 = 0;
          v123 = (char *)(v122 + 8 * v120);
          *(_QWORD *)v123 = v69;
          v124 = v123 + 8;
          if (v38 != v37)
          {
            do
            {
              v125 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v123 - 1) = v125;
              v123 -= 8;
            }
            while (v38 != v37);
            v38 = v37;
          }
          v37 = v123;
          v197 = (char *)(v122 + 8 * (_QWORD)v41);
          if (v38)
            operator delete(v38);
          v38 = v124;
        }
        else
        {
          *(_QWORD *)v38 = v69;
          v38 += 8;
        }
        v68 = v195;
        if (TypeAllocSize != v209)
          free(TypeAllocSize);
        goto LABEL_195;
      }
LABEL_269:
      v157 = 0;
LABEL_270:
      v14 = v188;
LABEL_271:
      if (v216 != v218)
        free(v216);
      if ((v157 & 1) == 0)
        goto LABEL_289;
    }
    v37 = v38;
LABEL_289:
    if (v220 != (uint64_t *)v222)
      free(v220);
    llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v206);
    v173 = v204[0];
    if (v205)
    {
      v174 = (char *)v204[0] + 56;
      v175 = (unint64_t)v205 << 7;
      v176 = v189;
      do
      {
        v177 = *((_QWORD *)v174 - 4);
        if ((v177 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v178 = (char *)*((_QWORD *)v174 - 2);
          if (v174 != v178)
          {
            free(v178);
            v177 = *((_QWORD *)v174 - 4);
          }
        }
        if (v177 != -8192 && v177 != -4096 && v177 != 0)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v174 - 48));
        v174 += 128;
        v175 -= 128;
      }
      while (v175);
      v173 = v204[0];
      v180 = v205;
    }
    else
    {
      v180 = 0;
      v176 = v189;
    }
    llvm::deallocate_buffer(v173, (void *)(v180 << 7));
    if (v37)
      operator delete(v37);
    if (v190 != v176)
      return 0;
    v13 = 0;
    v8 = *(_QWORD *)(v186 + 8);
    v10 = a5;
    v11 = a1;
    if (!v8)
      return 1;
  }
  printMessage((char **)&AGCPrinter, "Cannot DMA promote %s : found a non-GEP use", a3, (uint64_t)a4, a5, a6, a7, a8, v193);
  return 0;
}

BOOL AGCLLVMAGPVertexShaderRegular::coerceStridedAccess(AGCLLVMAGPVertexShaderRegular *this, llvm::Value *a2, const char *a3, llvm::Type **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  _QWORD **v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t Divisor;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const char *v48;
  char v49;
  const char *p_p;
  llvm::Type *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Instruction *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  AGCLLVMAGPVertexShaderRegular *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  unint64_t i;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  char *v91;
  uint64_t *v92;
  uint64_t *Cast;
  uint64_t v94;
  _QWORD v95[4];
  __int16 v96;
  _QWORD v97[4];
  char v98;
  char v99;
  _QWORD v100[4];
  __int16 v101;
  void *__p;
  char v103;
  void *v104[2];
  _QWORD v105[10];

  v105[8] = *MEMORY[0x1E0C80C00];
  v12 = *((_QWORD *)a2 + 1);
  if (v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = 1;
    while (1)
    {
      result = 0;
      v17 = *(_QWORD *)(v12 + 24);
      if (!v17 || *(_BYTE *)(v17 + 16) != 62)
        return result;
      v18 = *(_QWORD *)(v17 - 32 * (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) + 32);
      if (v18)
      {
        if (*(_BYTE *)(v18 + 16) == 67)
        {
          v18 = *(_QWORD *)(v18 - 32);
          if (!v18)
            return 0;
        }
      }
      v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 <= 0x1B)
      {
        if (v19 != 5)
        {
          LODWORD(v20) = 0;
LABEL_34:
          if (v19 != 5)
            return 0;
          v21 = *(unsigned __int16 *)(v18 + 18);
LABEL_37:
          if (v21 == 17)
            goto LABEL_41;
          if (v21 != 25)
            return 0;
          goto LABEL_39;
        }
        v21 = *(unsigned __int16 *)(v18 + 18);
        if (v21 != 13)
        {
          LODWORD(v20) = 0;
          goto LABEL_37;
        }
      }
      else if (v19 != 41)
      {
        LODWORD(v20) = 0;
        goto LABEL_31;
      }
      v22 = *(_DWORD *)(v18 + 20);
      if ((v22 & 0x40000000) != 0)
        v23 = *(_QWORD *)(v18 - 8);
      else
        v23 = v18 - 32 * (v22 & 0x7FFFFFF);
      v24 = *(_QWORD *)(v23 + 32);
      if (v24)
        v25 = *(_BYTE *)(v24 + 16) == 16;
      else
        v25 = 0;
      if (!v25)
        return 0;
      v26 = *(_DWORD *)(v24 + 32);
      if (v26 > 0x40)
      {
        v20 = **(_QWORD **)(v24 + 24);
        if (v20 < 0)
          return 0;
      }
      else
      {
        v20 = *(_QWORD *)(v24 + 24);
        if (v20 << -(char)v26 < 0)
          return 0;
      }
      v27 = (v22 & 0x40000000) != 0 ? *(uint64_t **)(v18 - 8) : (uint64_t *)(v18 - 32 * (v22 & 0x7FFFFFF));
      v18 = *v27;
      if (!v18)
        return 0;
      v19 = *(unsigned __int8 *)(v18 + 16);
      if (v19 <= 0x1B)
        goto LABEL_34;
LABEL_31:
      if (v19 != 53)
      {
        if (v19 != 45)
          return 0;
LABEL_41:
        v30 = *(_DWORD *)(v18 + 20);
        if ((v30 & 0x40000000) != 0)
          v31 = *(uint64_t **)(v18 - 8);
        else
          v31 = (uint64_t *)(v18 - 32 * (v30 & 0x7FFFFFF));
        v37 = v31[4];
        if (v37)
          v38 = *(_BYTE *)(v37 + 16) == 16;
        else
          v38 = 0;
        if (!v38)
          return 0;
        v39 = (_QWORD *)(v37 + 24);
        if (*(_DWORD *)(v37 + 32) >= 0x41u)
          v39 = (_QWORD *)*v39;
        v40 = *(_DWORD *)v39;
        if (v20 >= *(_DWORD *)v39)
          return 0;
        goto LABEL_68;
      }
LABEL_39:
      v28 = *(_DWORD *)(v18 + 20);
      if ((v28 & 0x40000000) != 0)
        v29 = *(_QWORD *)(v18 - 8);
      else
        v29 = v18 - 32 * (v28 & 0x7FFFFFF);
      v32 = *(_QWORD *)(v29 + 32);
      if (v32)
        v33 = *(_BYTE *)(v32 + 16) == 16;
      else
        v33 = 0;
      if (!v33)
        return 0;
      v34 = (_QWORD **)(v32 + 24);
      v35 = *(_DWORD *)(v32 + 32);
      v36 = v34;
      if (v35 >= 0x41)
        v36 = *v34;
      if (*v36 > 0x1FuLL)
        return 0;
      if ((v28 & 0x40000000) != 0)
        v31 = *(uint64_t **)(v18 - 8);
      else
        v31 = (uint64_t *)(v18 - 32 * (v28 & 0x7FFFFFF));
      if (v35 >= 0x41)
        v34 = (_QWORD **)*v34;
      v40 = 1 << *(_DWORD *)v34;
      if (v40 <= v20)
        return 0;
LABEL_68:
      v41 = *v31;
      if ((v15 & 1) != 0)
      {
        Divisor = AGCLLVMAGPVertexShaderRegular::extractDivisor(*v31, (int *)v100, v104);
        if (!Divisor
          || *(_BYTE *)(Divisor + 16) != 84
          || (v43 = *(_QWORD *)(Divisor - 32)) == 0
          || *(_BYTE *)(v43 + 16)
          || *(_QWORD *)(v43 + 24) != *(_QWORD *)(Divisor + 72)
          || v43 != *((_QWORD *)this + 1257) && v43 != *((_QWORD *)this + 1258))
        {
          printMessage((char **)&AGCPrinter, "Will not coerce strided access %s : GEP not indexed with instance_id/vertex_id", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a3);
          return 0;
        }
        v13 = v41;
        v14 = v40;
      }
      else
      {
        v44 = v14 == v40 && v13 == v41;
        v41 = v13;
        v40 = v14;
        if (!v44)
        {
          printMessage((char **)&AGCPrinter, "Will not coerce strided access %s : GEP indexed inconsistently", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)a3);
          return 0;
        }
      }
      v15 = 0;
      v12 = *(_QWORD *)(v12 + 8);
      if (!v12)
        goto LABEL_85;
    }
  }
  v41 = 0;
  v40 = 0;
LABEL_85:
  v94 = v41;
  v45 = **(_QWORD **)(*(_QWORD *)a2 + 16);
  v104[0] = v105;
  v104[1] = (void *)0x800000000;
  llvm::SmallVectorImpl<llvm::Type *>::assign((uint64_t)v104, v40);
  if (v40)
  {
    v46 = 0;
    do
    {
      *(_QWORD *)((char *)v104[0] + v46) = v45;
      v46 += 8;
    }
    while (8 * v40 != v46);
  }
  v47 = *(unsigned __int8 *)a3;
  v48 = "agc.struct.coerced_arg";
  if (*a3)
  {
    v95[0] = "agc.struct.coerced_arg";
    v95[2] = a3;
    v96 = 771;
    v49 = 2;
  }
  else
  {
    v95[0] = "agc.struct.coerced_arg";
    v96 = 259;
    v49 = 3;
  }
  if (v47)
    v48 = (const char *)v95;
  v97[0] = v48;
  v97[2] = "x";
  v98 = v49;
  v99 = 3;
  v100[0] = v97;
  v100[2] = v40;
  v101 = 2050;
  p_p = (const char *)&__p;
  llvm::Twine::str((llvm::Twine *)v100);
  if ((v103 & 0x80000000) == 0 || (p_p = (const char *)__p) != 0)
    strlen(p_p);
  v51 = (llvm::Type *)llvm::StructType::create();
  *a4 = v51;
  if (v103 < 0)
  {
    operator delete(__p);
    v51 = *a4;
  }
  v100[0] = llvm::DataLayout::getTypeAllocSize((AGCLLVMAGPVertexShaderRegular *)((char *)this + 232), v51);
  v100[1] = v52;
  v53 = llvm::TypeSize::operator unsigned long long();
  v90 = (v53 & 3) == 0;
  if ((v53 & 3) != 0)
  {
    printMessage((char **)&AGCPrinter, "Will not coerce pointer %s : type size %u not a multiple of 4", v54, v55, v56, v57, v58, v59, (char)a3);
  }
  else
  {
    v60 = llvm::PointerType::get();
    v61 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
    if (v61)
      v62 = v61 - 24;
    else
      v62 = 0;
    v63 = *(_QWORD *)(v62 + 40);
    if (v63)
      v64 = (llvm::Instruction *)(v63 - 24);
    else
      v64 = 0;
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPVertexShaderRegular *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v64);
    v65 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v101 = 257;
    Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v65, 49, (uint64_t)a2, v60, (uint64_t)v100);
    v66 = *((_QWORD *)a2 + 1);
    if (v66)
    {
      v91 = (char *)this + 8;
      v92 = (uint64_t *)a4;
      do
      {
        v67 = *(_QWORD *)(v66 + 24);
        v66 = *(_QWORD *)(v66 + 8);
        if (v67 && *(_BYTE *)(v67 + 16) == 62)
        {
          v68 = operator new(8uLL);
          *v68 = v94;
          v69 = this;
          v70 = llvm::ConstantInt::get();
          v71 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(2uLL);
          v73 = v72;
          *((_QWORD *)v71 + 1) = v70;
          v74 = v71 + 16;
          *(_QWORD *)v71 = *v68;
          operator delete(v68);
          v75 = *(_DWORD *)(v67 + 20) & 0x7FFFFFF;
          if (v75 < 3)
          {
            v79 = v71 + 16;
          }
          else
          {
            v76 = &v71[8 * v73];
            for (i = 2; i < v75; ++i)
            {
              v78 = *(_QWORD *)(v67 - 32 * v75 + 32 * i);
              if (v74 >= v76)
              {
                v80 = (v74 - v71) >> 3;
                v81 = v80 + 1;
                if ((unint64_t)(v80 + 1) >> 61)
                  abort();
                if ((v76 - v71) >> 2 > v81)
                  v81 = (v76 - v71) >> 2;
                if ((unint64_t)(v76 - v71) >= 0x7FFFFFFFFFFFFFF8)
                  v82 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v82 = v81;
                if (v82)
                  v82 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v82);
                else
                  v83 = 0;
                v84 = (char *)(v82 + 8 * v80);
                *(_QWORD *)v84 = v78;
                v79 = v84 + 8;
                while (v74 != v71)
                {
                  v85 = *((_QWORD *)v74 - 1);
                  v74 -= 8;
                  *((_QWORD *)v84 - 1) = v85;
                  v84 -= 8;
                }
                v76 = (char *)(v82 + 8 * v83);
                if (v71)
                  operator delete(v71);
                v71 = v84;
              }
              else
              {
                *(_QWORD *)v74 = v78;
                v79 = v74 + 8;
              }
              v75 = *(_DWORD *)(v67 + 20) & 0x7FFFFFF;
              v74 = v79;
            }
          }
          this = v69;
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMAGPVertexShaderRegular *)((char *)v69 + *(_QWORD *)(*(_QWORD *)v69 - 24) + 40), (llvm::Instruction *)v67);
          v86 = llvm::GetElementPtrInst::isInBounds((llvm::GetElementPtrInst *)v67);
          v87 = *v92;
          v88 = (v79 - v71) >> 3;
          v89 = (uint64_t)&v91[*(_QWORD *)(*(_QWORD *)v69 - 24) + 32];
          v101 = 257;
          if ((v86 & 1) != 0)
            llvm::IRBuilderBase::CreateInBoundsGEP(v89, v87, Cast, (uint64_t **)v71, v88, (uint64_t)v100);
          else
            llvm::IRBuilderBase::CreateGEP(v89, v87, Cast, (uint64_t **)v71, v88, (uint64_t)v100);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v67);
          if (v71)
            operator delete(v71);
        }
      }
      while (v66);
    }
  }
  if (v104[0] != v105)
    free(v104[0]);
  return v90;
}

uint64_t AGCLLVMAGPVertexShaderRegular::analyzeLoads(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  llvm::DataLayout *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;

  v5 = (llvm::DataLayout *)(a1 + 232);
  llvm::DataLayout::getTypeSizeInBits(a1 + 232, a2);
  v6 = llvm::TypeSize::operator unsigned long long();
  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x10)
    return 0;
  if (!*((_DWORD *)a3 + 2))
    return -1;
  v7 = *((unsigned int *)a3 + 4);
  if ((_DWORD)v7)
  {
    v8 = v7 << 7;
    for (i = *a3; (*(_QWORD *)(i + 24) | 0x1000) == 0xFFFFFFFFFFFFF000; i += 128)
    {
      v8 -= 128;
      if (!v8)
        return -1;
    }
  }
  else
  {
    i = *a3;
  }
  v11 = *a3 + (v7 << 7);
  if (v11 == i)
    return -1;
  v12 = 0;
  v10 = -1;
LABEL_12:
  v13 = *(uint64_t **)(i + 24);
  if (*(_DWORD *)(i + 48))
  {
    v14 = **(_QWORD **)(i + 40);
    if (v14 && *(_BYTE *)(v14 + 16) == 16)
    {
      v26 = *(uint64_t **)(i + 24);
      v27 = v6;
      v16 = 0;
      v18 = 1;
      v19 = a2;
      while (1)
      {
        v20 = (unsigned int *)(v14 + 24);
        if (*(_DWORD *)(v14 + 32) >= 0x41u)
          v20 = *(unsigned int **)v20;
        v21 = *v20;
        v22 = *(unsigned __int8 *)(v19 + 8);
        if (v19 && v22 == 16)
        {
          if (*(_DWORD *)(v19 + 12) <= v21)
            return 0;
          v23 = *(_QWORD *)(llvm::DataLayout::getStructLayout() + 8 * v21 + 16);
          v19 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * v21);
        }
        else
        {
          if (!v19 || v22 != 17 || *(_QWORD *)(v19 + 32) <= v21)
            return 0;
          v19 = *(_QWORD *)(v19 + 24);
          llvm::DataLayout::getTypeAllocSize(v5, (llvm::Type *)v19);
          v23 = llvm::TypeSize::operator unsigned long long() * v21;
        }
        if (!v19)
          return 0;
        v16 += v23;
        llvm::DataLayout::getTypeSizeInBits((uint64_t)v5, v19);
        v24 = llvm::TypeSize::operator unsigned long long();
        if (v18 < *(unsigned int *)(i + 48))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(i + 40) + 8 * v18);
          if (v14)
          {
            ++v18;
            if (*(_BYTE *)(v14 + 16) == 16)
              continue;
          }
        }
        v17 = v24 + v16;
        v13 = v26;
        v6 = v27;
        goto LABEL_18;
      }
    }
  }
  v16 = 0;
  v17 = v6;
LABEL_18:
  if (*(_DWORD *)(i + 124) && *(_BYTE *)(i + 120))
  {
    llvm::DataLayout::getTypeSizeInBits((uint64_t)v5, *v13);
    v17 = llvm::TypeSize::operator unsigned long long() + v16;
  }
  if (v16 < v10)
    v10 = v16;
  if (v12 <= v17)
    v12 = v17;
  while (1)
  {
    i += 128;
    if (i == v11)
      return v10;
    if ((*(_QWORD *)(i + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (i != v11)
        goto LABEL_12;
      return v10;
    }
  }
}

uint64_t llvm::operator+(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = *((unsigned __int8 *)a2 + 32);
  if (!*((_BYTE *)a2 + 32) || (v4 = *((unsigned __int8 *)a3 + 32), !*((_BYTE *)a3 + 32)))
  {
    *(_WORD *)(result + 32) = 256;
    return result;
  }
  if (v3 == 1)
  {
    v5 = *((_OWORD *)a3 + 1);
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_OWORD *)(result + 16) = v5;
    v6 = a3[4];
LABEL_8:
    *(_QWORD *)(result + 32) = v6;
    return result;
  }
  if (v4 == 1)
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v7;
    v6 = a2[4];
    goto LABEL_8;
  }
  v8 = (uint64_t *)*a2;
  v9 = a2[1];
  if (*((_BYTE *)a2 + 33) != 1)
  {
    LOBYTE(v3) = 2;
    v8 = a2;
  }
  v10 = a3[1];
  if (*((_BYTE *)a3 + 33) == 1)
  {
    v11 = (uint64_t *)*a3;
  }
  else
  {
    LOBYTE(v4) = 2;
    v11 = a3;
  }
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = v9;
  *(_QWORD *)(result + 16) = v11;
  *(_QWORD *)(result + 24) = v10;
  *(_BYTE *)(result + 32) = v3;
  *(_BYTE *)(result + 33) = v4;
  return result;
}

llvm::Value *AGCLLVMAGPVertexShaderRegular::materializeVertexAttribute(_QWORD *a1, llvm::Type *this, int a3, _QWORD *a4, uint64_t a5)
{
  int v8;
  llvm::Value *result;
  _BOOL8 v10;
  unsigned int v11;
  llvm::Type *v12;
  llvm::Type **InsertValue;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Cast;
  uint64_t v23;
  llvm::BasicBlock **v24;
  llvm::Type **Alloca;
  llvm::IRBuilderBase *v26;
  llvm::Type *v27;
  llvm::Value *PointerCast;
  uint64_t *v29;
  unint64_t TypeAllocSize;
  _BOOL8 v31;
  __int16 v32;
  unsigned int v33;

  if ((*((_DWORD *)this + 2) & 0xFE) != 0x10)
    return AGCLLVMAGPVertexShaderRegular::materializeVectorOrScalarFromVI(a1, this, 0, a4);
  if (a3)
  {
    v8 = *((_DWORD *)this + 2);
    if (v8 == 17)
    {
      result = (llvm::Value *)AGCLLVMAGPVertexShaderRegular::materializeArrayFromVI(a1, (uint64_t)this, 0, a4);
      if (result)
        return result;
    }
    else if (v8 == 16)
    {
      result = (llvm::Value *)AGCLLVMAGPVertexShaderRegular::materializeStructFromVI(a1, (uint64_t)this, 0, a4, a5);
      if (result)
        return result;
    }
  }
  TypeAllocSize = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 29), this);
  v31 = v10;
  v11 = llvm::TypeSize::operator unsigned long long();
  v12 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 232), (llvm::Type *)(v11 >> 2));
  InsertValue = (llvm::Type **)llvm::UndefValue::get();
  llvm::DataLayout::getTypeSizeInBits((uint64_t)(a1 + 29), (uint64_t)this);
  TypeAllocSize = (unint64_t)(v14 + 7) >> 3;
  v31 = v15 == 1;
  v16 = llvm::TypeSize::operator unsigned long long();
  v33 = 0;
  if (v16 >= 4)
  {
    v17 = 0;
    v18 = v16 >> 2;
    do
    {
      v19 = *(_QWORD *)(*a1 - 24);
      v20 = *(_QWORD *)(*a4 + 8 * v17);
      v21 = *(_QWORD *)((char *)a1 + v19 + 232);
      v32 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + v19 + 40, 49, v20, v21, (uint64_t)&TypeAllocSize);
      v23 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v32 = 257;
      InsertValue = (llvm::Type **)llvm::IRBuilderBase::CreateInsertValue(v23, (uint64_t)InsertValue, Cast, (uint64_t)&v33, 1, (uint64_t)&TypeAllocSize);
      v17 = v33 + 1;
      v33 = v17;
    }
    while (v17 < v18);
  }
  v24 = (llvm::BasicBlock **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v32 = 257;
  Alloca = (llvm::Type **)llvm::IRBuilderBase::CreateAlloca(v24, v12, 0, (const llvm::Twine *)&TypeAllocSize);
  llvm::IRBuilderBase::CreateAlignedStore((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), InsertValue, (uint64_t)Alloca, 0);
  v26 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v27 = (llvm::Type *)llvm::PointerType::get();
  v32 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v26, Alloca, v27, (const llvm::Twine *)&TypeAllocSize);
  v29 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v32 = 257;
  return (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v29, this, (uint64_t)PointerCast, 0, (uint64_t)&TypeAllocSize);
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

{
  const void *v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = *(unsigned int *)(a2 + 8);
    v8 = *(unsigned int *)(a1 + 8);
    if (v8 >= v7)
    {
      if ((_DWORD)v7)
        memmove(*(void **)a1, v4, 8 * v7);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v7)
    {
      if ((_DWORD)v8)
      {
        memmove(*(void **)a1, v4, 8 * v8);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v8 = 0;
LABEL_14:
    v9 = *(unsigned int *)(a2 + 8);
    if (v8 != v9)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v7;
LABEL_17:
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase(int32x2_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  int32x2_t result;
  _QWORD v6[4];

  v4 = (_QWORD *)a2[5];
  if (v4 != a2 + 7)
    free(v4);
  v6[1] = 0;
  v6[2] = -8192;
  v6[0] = 2;
  v6[3] = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 1), v6);
  a2[4] = 0;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t AGCLLVMAGPVertexShaderRegular::createExtractFromVertexAttribute(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  llvm::Value *Value;
  char *v11;
  llvm::IRBuilderBase *v12;
  llvm::Value *v13;
  uint64_t v15;
  _BYTE v16[32];
  __int16 v17;

  if (a4 >= 2
    && (v8 = (uint64_t)(4 * a4 - 4) >> 2, (*(_DWORD *)(llvm::ExtractValueInst::getIndexedType() + 8) & 0xFE) == 0x12))
  {
    v9 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v17 = 257;
    Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue(v9, a2, a3, v8, (uint64_t)v16);
    v11 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v17 = 257;
    v12 = (llvm::IRBuilderBase *)(v11 + 40);
    v13 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateExtractElement(v12, Value, v13, (const llvm::Twine *)v16);
  }
  else
  {
    v15 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v17 = 257;
    return llvm::IRBuilderBase::CreateExtractValue(v15, a2, a3, a4, (uint64_t)v16);
  }
}

uint64_t AGCLLVMBuilder::CreateLoad(AGCLLVMBuilder *this, llvm::Type **a2, const llvm::Twine *a3)
{
  llvm::Type *v6;

  v6 = AGCLLVMBuilder::tryDeducePointeeType(a2, (llvm::Value *)a2);
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v6, (uint64_t)a2, 0, (uint64_t)a3);
}

uint64_t llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  char *v5;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v9 = v2;
  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if ((_DWORD)result)
  {
    v4 = v10;
    v5 = (char *)v10[5];
    if (v5 != (char *)(v10 + 7))
      free(v5);
    v11[1] = 0;
    v11[2] = -8192;
    v10 = &unk_1E7E8AB70;
    v11[0] = 2;
    v11[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  return result;
}

void llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  int v5;
  unint64_t v6;
  _DWORD *v7;
  int32x2_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v11[16];
  uint64_t v12;
  int32x2_t *v13;
  void *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[64];
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[64];
  uint64_t v27;
  _DWORD *v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE v34[64];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v13 = v4;
  v28 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v12, &v28);
  v6 = *(_QWORD *)v4 + ((unint64_t)v4[2].u32[0] << 7);
  if (v5)
    v7 = v28;
  else
    v7 = (_DWORD *)v6;
  v8 = v13;
  if ((_DWORD *)(*(_QWORD *)v13 + ((unint64_t)v13[2].u32[0] << 7)) != v7)
  {
    v24 = v26;
    v25 = 0x800000000;
    if (v7[12])
    {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v24, (uint64_t)(v7 + 10));
      v8 = v13;
    }
    v27 = *((_QWORD *)v7 + 15);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase(v8, v7);
    v9 = (uint64_t)v13;
    v19 = a2;
    v20 = v22;
    v21 = 0x800000000;
    if ((_DWORD)v25)
    {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v20, (uint64_t)&v24);
      a2 = v19;
    }
    v23 = v27;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v14, a2);
    v14 = &unk_1E7E8AB70;
    v17 = v9;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v29, (LODWORD(v15[0]) >> 1) & 3, v15);
    v28 = &unk_1E7E8AB70;
    v31 = v17;
    v32 = v34;
    v33 = 0x800000000;
    if ((_DWORD)v21)
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v32, (uint64_t)&v20);
    v35 = v23;
    v18 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v30, &v18) & 1) == 0)
    {
      v10 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(v9, (uint64_t)&v28, v18);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v10 + 1), v29);
      v10[4] = v31;
      v10[5] = v10 + 7;
      v10[6] = 0x800000000;
      if ((_DWORD)v33)
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v10 + 5), (uint64_t)&v32);
      v10[15] = v35;
    }
    if (v32 != v34)
      free(v32);
    if (v30 != -8192 && v30 != -4096 && v30)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    if (v16 != -8192 && v16 != -4096 && v16)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    if (v20 != v22)
      free(v20);
    if (v24 != v26)
      free(v24);
  }
  if (v12 != -8192 && v12 != -4096)
  {
    if (v12)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = a1 + (v4 << 7);
    v6 = *(_QWORD *)(v5 + 24);
    if (v6 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = a1 + (v4 << 7);
        v6 = *(_QWORD *)(v5 + 24);
        v7 = 1;
        if (v6 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((unint64_t)v8 << 7, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(a1);
  v9 = (char *)(v3 << 7);
  if ((_DWORD)v3)
  {
    v10 = 0;
    do
    {
      v11 = &v10[(_QWORD)v4];
      v12 = *(_QWORD *)&v10[(_QWORD)v4 + 24];
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v18 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v18);
        v13 = v18;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v18 + 1), (_QWORD *)v11 + 1);
        v13[4] = *((_QWORD *)v11 + 4);
        v13[5] = v13 + 7;
        v14 = (void **)(v11 + 40);
        v13[6] = 0x800000000;
        if (*((_DWORD *)v11 + 12))
          llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v13 + 5), (uint64_t)(v11 + 40));
        v13[15] = *(_QWORD *)&v10[(_QWORD)v4 + 120];
        ++*(_DWORD *)(a1 + 8);
        if (&v10[(_QWORD)v4 + 56] != *v14)
          free(*v14);
      }
      v15 = *((_QWORD *)v11 + 3);
      if (v15 != -8192 && v15 != -4096 && v15 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v10[(_QWORD)v4 + 8]);
      v10 += 128;
    }
    while (v9 != v10);
  }
  return llvm::deallocate_buffer(v4, v9);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(uint64_t result)
{
  uint64_t v1;
  char *v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = (char *)(*(_QWORD *)result + (v1 << 7));
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7E8AB70;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 120;
      result = (uint64_t)v3 + 128;
    }
    while (v4 != v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderRegular::materializeStructFromVI(_QWORD *a1, uint64_t a2, int a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t InsertValue;
  uint64_t StructLayout;
  unsigned int v12;
  uint64_t v13;
  llvm::Type *v14;
  unsigned int v15;
  unint64_t v16;
  char v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  unint64_t v26;
  const char **v27;
  const char *v28;
  unint64_t v29;
  const char *v32;
  unint64_t v33;
  const char *v34;
  __int16 v35;
  unint64_t TypeAllocSize;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  unsigned int v40;

  InsertValue = llvm::UndefValue::get();
  StructLayout = llvm::DataLayout::getStructLayout();
  v40 = 0;
  if (*(_DWORD *)(a2 + 12))
  {
    v12 = 0;
    v13 = StructLayout + 16;
    while (1)
    {
      v14 = *(llvm::Type **)(*(_QWORD *)(a2 + 16) + 8 * v12);
      v15 = *(_DWORD *)(v13 + 8 * v12);
      TypeAllocSize = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 29), v14);
      v37 = v16;
      v17 = llvm::TypeSize::operator unsigned long long();
      if ((v15 & 3) != 0 || (v17 & 3) != 0)
        return 0;
      v19 = a3 + (v15 >> 2);
      if ((*((_DWORD *)v14 + 2) & 0xFE) == 0x10)
      {
        v20 = *((_DWORD *)v14 + 2);
        if (v20 == 16)
        {
          v39 = 257;
          v21 = AGCLLVMAGPVertexShaderRegular::materializeStructFromVI(a1, v14, v19, a4, &TypeAllocSize);
        }
        else
        {
          if (v20 != 17)
            return 0;
          v21 = AGCLLVMAGPVertexShaderRegular::materializeArrayFromVI(a1, (uint64_t)v14, v19, a4);
        }
      }
      else
      {
        v21 = (uint64_t)AGCLLVMAGPVertexShaderRegular::materializeVectorOrScalarFromVI(a1, v14, v19, a4);
      }
      if (!v21)
        return 0;
      v22 = *(_QWORD *)(*a1 - 24);
      v23 = *(unsigned __int8 *)(a5 + 32);
      if (v23 == 1)
        break;
      if (*(_BYTE *)(a5 + 32))
      {
        v28 = *(const char **)a5;
        v29 = *(_QWORD *)(a5 + 8);
        v24 = 2;
        if (*(_BYTE *)(a5 + 33) != 1)
        {
          LOBYTE(v23) = 2;
          v28 = (const char *)a5;
        }
        v32 = v28;
        v33 = v29;
        v34 = ".elem";
        LOBYTE(v35) = v23;
        HIBYTE(v35) = 3;
        v26 = v5 & 0xFFFFFFFF00000000;
        v5 = v5 & 0xFFFFFFFF00000000 | v40;
        v27 = &v32;
        goto LABEL_22;
      }
      v24 = 0;
      v35 = 256;
      v5 &= 0xFFFFFFFF00000000;
      v25 = 1;
LABEL_23:
      LOBYTE(v39) = v24;
      HIBYTE(v39) = v25;
      InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)a1 + v22 + 40, InsertValue, v21, (uint64_t)&v40, 1, (uint64_t)&TypeAllocSize);
      v12 = v40 + 1;
      v40 = v12;
      if (v12 >= *(_DWORD *)(a2 + 12))
        return InsertValue;
    }
    v32 = ".elem";
    v35 = 259;
    v5 = v5 & 0xFFFFFFFF00000000 | v40;
    v24 = 3;
    v26 = v33;
    v27 = (const char **)".elem";
LABEL_22:
    TypeAllocSize = (unint64_t)v27;
    v37 = v26;
    v25 = 8;
    v38 = v5;
    goto LABEL_23;
  }
  return InsertValue;
}

uint64_t AGCLLVMAGPVertexShaderRegular::materializeArrayFromVI(_QWORD *a1, uint64_t a2, unsigned int a3, _QWORD *a4)
{
  llvm::Type *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t InsertValue;
  unsigned int v13;
  llvm::Value *v14;
  uint64_t v15;
  _QWORD v17[4];
  __int16 v18;
  unsigned int v19;

  v8 = *(llvm::Type **)(a2 + 24);
  v17[0] = llvm::DataLayout::getTypeAllocSize((llvm::DataLayout *)(a1 + 29), v8);
  v17[1] = v9;
  v10 = llvm::TypeSize::operator unsigned long long();
  if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x10 || (v10 & 3) != 0)
    return 0;
  InsertValue = llvm::UndefValue::get();
  v19 = 0;
  if (*(_QWORD *)(a2 + 32))
  {
    v13 = v10 >> 2;
    do
    {
      v14 = AGCLLVMAGPVertexShaderRegular::materializeVectorOrScalarFromVI(a1, v8, a3, a4);
      v15 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v18 = 257;
      InsertValue = llvm::IRBuilderBase::CreateInsertValue(v15, InsertValue, (uint64_t)v14, (uint64_t)&v19, 1, (uint64_t)v17);
      a3 += v13;
      ++v19;
    }
    while (*(_QWORD *)(a2 + 32) > (unint64_t)v19);
  }
  return InsertValue;
}

llvm::Value *AGCLLVMAGPVertexShaderRegular::materializeVectorOrScalarFromVI(_QWORD *a1, llvm::Type *this, unsigned int a3, _QWORD *a4)
{
  uint64_t v8;
  int ScalarSizeInBits;
  uint64_t v10;
  llvm::Value *Cast;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  char *v17;
  llvm::IRBuilderBase *v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  AGCLLVMBuilder *v27;
  llvm::Value *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Value *v35;
  _BYTE v36[32];
  __int16 v37;

  if ((*((_DWORD *)this + 2) & 0xFE) != 0x12)
  {
    v20 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v21 = *(_QWORD *)(*a4 + 8 * a3);
    v37 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateCast(v20, 49, v21, (uint64_t)this, (uint64_t)v36);
  }
  v8 = **((_QWORD **)this + 2);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  v10 = *((unsigned int *)this + 8);
  if (ScalarSizeInBits == 8)
  {
    v24 = llvm::FixedVectorType::get();
    v25 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v26 = *(_QWORD *)(*a4 + 8 * a3);
    v37 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v25, 49, v26, v24, (uint64_t)v36);
    if ((_DWORD)v10 == 4)
      return Cast;
    v27 = (AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32);
    v28 = Cast;
    v29 = v10;
    return (llvm::Value *)AGCLLVMBuilder::subrangeVector(v27, v28, 0, v29, 1);
  }
  if (ScalarSizeInBits == 16)
  {
    v30 = llvm::FixedVectorType::get();
    v31 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v32 = *(_QWORD *)(*a4 + 8 * a3);
    v37 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v31, 49, v32, v30, (uint64_t)v36);
    if ((v10 - 3) > 1)
      return Cast;
    v33 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
    v34 = *(_QWORD *)(*a4 + 8 * (a3 + 1));
    v37 = 257;
    v35 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v33, 49, v34, v30, (uint64_t)v36);
    Cast = (llvm::Value *)AGCLLVMBuilder::concatenateVectors((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), Cast, v35);
    if ((_DWORD)v10 != 3)
      return Cast;
    v27 = (AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32);
    v28 = Cast;
    v29 = 3;
    return (llvm::Value *)AGCLLVMBuilder::subrangeVector(v27, v28, 0, v29, 1);
  }
  if (ScalarSizeInBits != 32)
    return 0;
  Cast = (llvm::Value *)llvm::UndefValue::get();
  if ((_DWORD)v10)
  {
    v12 = 0;
    v13 = a3;
    do
    {
      v14 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v15 = *(_QWORD *)(*a4 + 8 * (v13 + v12));
      v37 = 257;
      v16 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14, 49, v15, v8, (uint64_t)v36);
      v17 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v37 = 257;
      v18 = (llvm::IRBuilderBase *)(v17 + 40);
      v19 = (llvm::Value *)llvm::ConstantInt::get();
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v18, Cast, v16, v19, (const llvm::Twine *)v36);
      ++v12;
    }
    while (v10 != v12);
  }
  return Cast;
}

uint64_t llvm::SmallVectorImpl<llvm::Type *>::assign(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;

  v3 = result;
  if (*(unsigned int *)(result + 12) >= a2)
  {
    v6 = *(unsigned int *)(result + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(result + 8);
    if (v7)
    {
      v8 = *(_QWORD **)result;
      do
      {
        *v8++ = 0;
        --v7;
      }
      while (v7);
    }
    v9 = v6 - a2;
    if (v6 < a2)
    {
      v10 = (_QWORD *)(*(_QWORD *)result + 8 * v6);
      do
        *v10++ = 0;
      while (!__CFADD__(v9++, 1));
    }
  }
  else
  {
    *(_DWORD *)(result + 8) = 0;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v4 = *(_QWORD **)v3;
    v5 = a2;
    do
    {
      *v4++ = 0;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(v3 + 8) = a2;
  return result;
}

llvm::GetElementPtrInst *llvm::IRBuilderBase::CreateInBoundsGEP(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t **a4, uint64_t a5, uint64_t a6)
{
  llvm::GetElementPtrInst *v12;

  v12 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), a2, a3, a4, a5, 1);
  if (!v12)
  {
    v12 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(a2, a3, a4, a5);
    llvm::GetElementPtrInst::setIsInBounds(v12);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, (uint64_t)v12, a6);
  }
  return v12;
}

uint64_t AGCLLVMAGPVertexShaderRegular::extractDivisor(uint64_t result, int *a2, _QWORD *a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *(unsigned __int8 *)(result + 16);
  if (v3 <= 0x1B)
  {
    if (v3 != 5 || *(_WORD *)(result + 18) != 13)
      return result;
  }
  else if (v3 != 41)
  {
    v4 = *(_DWORD *)(result + 20);
    v5 = 0;
    if ((v4 & 0x40000000) != 0)
      v6 = *(uint64_t **)(result - 8);
    else
      v6 = (uint64_t *)(result - 32 * (v4 & 0x7FFFFFF));
    v9 = result;
LABEL_20:
    v13 = *v6;
    v14 = *(unsigned __int8 *)(v9 + 16);
    if (v14 == 54)
    {
      v17 = *(_DWORD *)(v9 + 20);
      if ((v17 & 0x40000000) != 0)
        v18 = *(_QWORD *)(v9 - 8);
      else
        v18 = v9 - 32 * (v17 & 0x7FFFFFF);
      v25 = *(_QWORD *)(v18 + 32);
      if (v25)
        v26 = *(_BYTE *)(v25 + 16) == 16;
      else
        v26 = 0;
      if (v26)
      {
        if (*(_DWORD *)(v25 + 32) > 0x40u)
        {
          v27 = **(_QWORD **)(v25 + 24);
          if (v27 > 0x1F)
            return result;
        }
        else
        {
          v27 = *(_QWORD *)(v25 + 24);
          if (v27 >= 0x20)
            return result;
        }
        v24 = 1 << v27;
LABEL_75:
        *a2 = v24;
        *a3 = v5;
        return v13;
      }
    }
    else if (v14 == 47)
    {
      v15 = *(_DWORD *)(v9 + 20);
      v16 = (v15 & 0x40000000) != 0 ? *(_QWORD *)(v9 - 8) : v9 - 32 * (v15 & 0x7FFFFFF);
      v22 = *(_QWORD *)(v16 + 32);
      if (v22)
      {
        if (*(_BYTE *)(v22 + 16) == 16)
        {
          v23 = (_QWORD *)(v22 + 24);
          if (*(_DWORD *)(v22 + 32) >= 0x41u)
            v23 = (_QWORD *)*v23;
          v24 = *(_DWORD *)v23;
          goto LABEL_75;
        }
      }
    }
    return result;
  }
  v7 = *(_DWORD *)(result + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(uint64_t **)(result - 8);
  else
    v8 = (uint64_t *)(result - 32 * (v7 & 0x7FFFFFF));
  v9 = *v8;
  if (v9)
    v10 = *(unsigned __int8 *)(v9 + 16) >= 0x1Cu;
  else
    v10 = 0;
  if (v10)
  {
    v11 = *(_DWORD *)(v9 + 20);
    if ((v11 & 0x7FFFFFF) != 0)
    {
      v12 = (v11 & 0x40000000) != 0 ? *(uint64_t **)(v9 - 8) : (uint64_t *)(v9 - 32 * (v11 & 0x7FFFFFF));
      v19 = *v12;
      v20 = *(unsigned __int8 *)(v19 + 16);
      if (v20 <= 0x1B)
      {
        if (v20 != 5 || *(_WORD *)(v19 + 18) != 15)
          return result;
      }
      else if (v20 != 43)
      {
        return result;
      }
      v21 = (v7 & 0x40000000) != 0 ? *(_QWORD *)(result - 8) : result - 32 * (v7 & 0x7FFFFFF);
      v28 = *(_QWORD *)(v21 + 32);
      v29 = *(_BYTE *)(v28 + 16) == 84 ? v28 : 0;
      v30 = *(_DWORD *)(v19 + 20);
      v31 = (v30 & 0x40000000) != 0 ? *(_QWORD *)(v19 - 8) : v19 - 32 * (v30 & 0x7FFFFFF);
      v32 = *(_QWORD *)(v31 + 32);
      v33 = *(_BYTE *)(v32 + 16) == 84 ? v32 : 0;
      if (v29 && v33)
      {
        v5 = *(_QWORD *)(v29 - 32);
        if (!v5
          || *(_BYTE *)(v5 + 16)
          || (v34 = *(_QWORD *)(v29 + 72), v35 = *(_QWORD *)(v29 - 32), *(_QWORD *)(v5 + 24) != v34))
        {
          v35 = 0;
        }
        v36 = *(_QWORD *)(v33 - 32);
        if (!v36 || *(_BYTE *)(v36 + 16) || *(_QWORD *)(v36 + 24) != *(_QWORD *)(v33 + 72))
          v36 = 0;
        if (v35 == v36 && (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0)
        {
          if ((v30 & 0x40000000) != 0)
            v6 = *(uint64_t **)(v19 - 8);
          else
            v6 = (uint64_t *)(v19 - 32 * (v30 & 0x7FFFFFF));
          goto LABEL_20;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(uint64_t result)
{
  uint64_t v1;
  char *v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = (char *)(*(_QWORD *)result + (v1 << 7));
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7E8AB98;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 120;
      result = (uint64_t)v3 + 128;
    }
    while (v4 != v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Use *,void>(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 5) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 32;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 5);
  return result;
}

uint64_t llvm::ValueMap<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  char v3;
  uint64_t v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  v7 = &unk_1E7E8AB98;
  v10 = a1;
  v11 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(_QWORD *)(v4 + 32) = v10;
    *(_QWORD *)(v4 + 40) = v4 + 56;
    *(_QWORD *)(v4 + 48) = 0x800000000;
    *(_BYTE *)(v4 + 120) = 0;
    *(_DWORD *)(v4 + 124) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 40;
}

uint64_t AGCLLVMAGPVertexShaderRegular::LoadMap::addEntry(uint64_t a1, llvm::Value *a2, uint64_t a3)
{
  char v5;
  uint64_t v6;
  uint64_t result;
  int v9;
  void *v10;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v10, a2);
  v10 = &unk_1E7E8AB70;
  v13 = a1;
  v14 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v14);
  v6 = v14;
  if ((v5 & 1) == 0)
  {
    v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v10, v14);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 8), v11);
    *(_QWORD *)(v6 + 32) = v13;
    *(_QWORD *)(v6 + 40) = v6 + 56;
    *(_QWORD *)(v6 + 48) = 0x800000000;
    *(_BYTE *)(v6 + 120) = 0;
    *(_DWORD *)(v6 + 124) = 0;
  }
  if (v12 != -8192 && v12 != -4096 && v12 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  result = llvm::SmallVectorImpl<llvm::Value *>::operator=(v6 + 40, a3);
  *(_QWORD *)(v6 + 120) = *(_QWORD *)(a3 + 80);
  *(_BYTE *)(a1 + 64) &= *(_BYTE *)(a3 + 80);
  v9 = *(_DWORD *)(a3 + 84);
  *(_BYTE *)(a1 + 65) |= v9 == 2;
  *(_BYTE *)(a1 + 66) |= v9 == 3;
  return result;
}

BOOL isReinterpretedArray(llvm::Type *a1, llvm::Type *a2, llvm::DataLayout *a3, int a4)
{
  _BOOL8 result;
  uint64_t v7;

  if (!a4)
    return 0;
  if ((*((_DWORD *)a2 + 2) & 0xFE) == 0x12)
    return 0;
  llvm::DataLayout::getTypeSizeInBits((uint64_t)a3, (uint64_t)a2);
  if (llvm::TypeSize::operator unsigned long long() != 4)
    return 0;
  if ((*((_DWORD *)a1 + 2) & 0xFE) != 0x10)
    return 1;
  if (*((_DWORD *)a1 + 2) != 16 || *((_DWORD *)a1 + 3) != 1)
    return 0;
  result = 0;
  v7 = **((_QWORD **)a1 + 2);
  if (v7 && *(_BYTE *)(v7 + 8) == 17)
  {
    if (*(_QWORD *)(v7 + 32) == 3)
    {
      llvm::DataLayout::getTypeSizeInBits((uint64_t)a3, **(_QWORD **)(v7 + 16));
      return llvm::TypeSize::operator unsigned long long() == 4;
    }
    return 0;
  }
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase(int32x2_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  int32x2_t result;
  _QWORD v6[4];

  v4 = (_QWORD *)a2[5];
  if (v4 != a2 + 7)
    free(v4);
  v6[1] = 0;
  v6[2] = -8192;
  v6[0] = 2;
  v6[3] = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 1), v6);
  a2[4] = 0;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  char *v5;
  _BYTE v7[16];
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v7, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v9 = v2;
  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v8, &v10);
  if ((_DWORD)result)
  {
    v4 = v10;
    v5 = (char *)v10[5];
    if (v5 != (char *)(v10 + 7))
      free(v5);
    v11[1] = 0;
    v11[2] = -8192;
    v10 = &unk_1E7E8AB98;
    v11[0] = 2;
    v11[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v11);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v7);
  return result;
}

void llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  int v5;
  unint64_t v6;
  _DWORD *v7;
  int32x2_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE v11[16];
  uint64_t v12;
  int32x2_t *v13;
  void *v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[64];
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _BYTE v26[64];
  uint64_t v27;
  _DWORD *v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE v34[64];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v13 = v4;
  v28 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v12, &v28);
  v6 = *(_QWORD *)v4 + ((unint64_t)v4[2].u32[0] << 7);
  if (v5)
    v7 = v28;
  else
    v7 = (_DWORD *)v6;
  v8 = v13;
  if ((_DWORD *)(*(_QWORD *)v13 + ((unint64_t)v13[2].u32[0] << 7)) != v7)
  {
    v24 = v26;
    v25 = 0x800000000;
    if (v7[12])
    {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v24, (uint64_t)(v7 + 10));
      v8 = v13;
    }
    v27 = *((_QWORD *)v7 + 15);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::erase(v8, v7);
    v9 = (uint64_t)v13;
    v19 = a2;
    v20 = v22;
    v21 = 0x800000000;
    if ((_DWORD)v25)
    {
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v20, (uint64_t)&v24);
      a2 = v19;
    }
    v23 = v27;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v14, a2);
    v14 = &unk_1E7E8AB98;
    v17 = v9;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v29, (LODWORD(v15[0]) >> 1) & 3, v15);
    v28 = &unk_1E7E8AB98;
    v31 = v17;
    v32 = v34;
    v33 = 0x800000000;
    if ((_DWORD)v21)
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v32, (uint64_t)&v20);
    v35 = v23;
    v18 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v9, *(_DWORD *)(v9 + 16), v30, &v18) & 1) == 0)
    {
      v10 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>>(v9, (uint64_t)&v28, v18);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v10 + 1), v29);
      v10[4] = v31;
      v10[5] = v10 + 7;
      v10[6] = 0x800000000;
      if ((_DWORD)v33)
        llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v10 + 5), (uint64_t)&v32);
      v10[15] = v35;
    }
    if (v32 != v34)
      free(v32);
    if (v30 != -8192 && v30 != -4096 && v30)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v29);
    if (v16 != -8192 && v16 != -4096 && v16)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v15);
    if (v20 != v22)
      free(v20);
    if (v24 != v26)
      free(v24);
  }
  if (v12 != -8192 && v12 != -4096)
  {
    if (v12)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((unint64_t)v8 << 7, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::GetElementPtrInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::GetElementPtrInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::initEmpty(a1);
  v9 = (char *)(v3 << 7);
  if ((_DWORD)v3)
  {
    v10 = 0;
    do
    {
      v11 = &v10[(_QWORD)v4];
      v12 = *(_QWORD *)&v10[(_QWORD)v4 + 24];
      if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v18 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>,llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>,AGCLLVMAGPVertexShaderRegular::GEPInfo>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::LoadInst *,AGCLLVMAGPVertexShaderRegular::GEPInfo,llvm::ValueMapConfig<llvm::LoadInst *,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v12, &v18);
        v13 = v18;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v18 + 1), (_QWORD *)v11 + 1);
        v13[4] = *((_QWORD *)v11 + 4);
        v13[5] = v13 + 7;
        v14 = (void **)(v11 + 40);
        v13[6] = 0x800000000;
        if (*((_DWORD *)v11 + 12))
          llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)(v13 + 5), (uint64_t)(v11 + 40));
        v13[15] = *(_QWORD *)&v10[(_QWORD)v4 + 120];
        ++*(_DWORD *)(a1 + 8);
        if (&v10[(_QWORD)v4 + 56] != *v14)
          free(*v14);
      }
      v15 = *((_QWORD *)v11 + 3);
      if (v15 != -8192 && v15 != -4096 && v15 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v10[(_QWORD)v4 + 8]);
      v10 += 128;
    }
    while (v9 != v10);
  }
  return llvm::deallocate_buffer(v4, v9);
}

void AGCLLVMAGPVertexShaderPostTessellationHW::~AGCLLVMAGPVertexShaderPostTessellationHW(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  AGCLLVMObject *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7E6D728;
  v2 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10568);
  *((_QWORD *)this + 1321) = &unk_1E7E6DAA0;
  *((_QWORD *)this + 1325) = &unk_1E7E6DB90;
  v3 = *((_QWORD *)this + 1319);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10536));
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation(this, (uint64_t *)off_1E7E6DBA0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7E6D728;
  v2 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10568);
  *((_QWORD *)this + 1321) = &unk_1E7E6DAA0;
  *((_QWORD *)this + 1325) = &unk_1E7E6DB90;
  v3 = *((_QWORD *)this + 1319);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10536));
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation(this, (uint64_t *)off_1E7E6DBA0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::initCompile(llvm::Function **this)
{
  uint64_t result;
  llvm::Function *v3;
  uint64_t v4;
  llvm::BasicBlock *v5;
  uint64_t v6;
  llvm::Function *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t FirstInsertionPt;
  uint64_t v12;
  uint64_t String;
  uint64_t v14;
  llvm::Value *VIRead;
  llvm::IRBuilderBase *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::IRBuilderBase *v24;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::IRBuilderBase *v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  BOOL v39;
  BOOL v40;
  uint64_t inserted;
  char *v45;
  const std::string::value_type *v49;
  llvm::Value *v50;
  llvm::Value *InsertElement;
  char *v52;
  _BYTE v53[32];
  __int16 v54;
  _BYTE v55[32];
  __int16 v56;
  _BYTE v57[32];
  __int16 v58;
  _BYTE v59[32];
  __int16 v60;

  result = AGCLLVMAGPVertexShaderPostTessellation::initCompile(this);
  if (!(_DWORD)result)
    return result;
  v3 = this[22];
  v4 = *((_QWORD *)v3 + 10);
  v5 = v4 ? (llvm::BasicBlock *)(v4 - 24) : 0;
  if ((*((_WORD *)v3 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this[22]);
    v7 = this[22];
    v6 = *((_QWORD *)v3 + 11);
    if ((*((_WORD *)v7 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(this[22]);
    v3 = v7;
  }
  else
  {
    v6 = *((_QWORD *)v3 + 11);
  }
  v8 = *((_QWORD *)v3 + 11) + 40 * *((_QWORD *)v3 + 12);
  result = 1;
  if (v6 == v8)
    return result;
  v9 = (char *)(this + 1);
  v52 = (char *)(this + 23);
  while (1)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_62;
    v10 = (uint64_t)&v9[*((_QWORD *)*this - 3) + 32];
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v5);
    llvm::IRBuilderBase::SetInsertPoint(v10, (uint64_t)v5, FirstInsertionPt);
    v12 = *((_QWORD *)this[11] + *(unsigned int *)(v6 + 32));
    String = llvm::MDString::getString(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8) + 8));
    if (v14 > 27)
      break;
    if (v14 != 17)
    {
      if (v14 == 20
        && *(_QWORD *)String == 0x676E69722E726961
        && *(_QWORD *)(String + 8) == 0x65765F656764655FLL
        && *(_DWORD *)(String + 16) == 2019914866)
      {
        VIRead = (llvm::Value *)AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)(this + 628), 9);
        llvm::FixedVectorType::get();
        v50 = (llvm::Value *)llvm::UndefValue::get();
        v18 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
        v19 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = 257;
        LShr = llvm::IRBuilderBase::CreateLShr(v18, VIRead, v19, (const llvm::Twine *)v59);
        v21 = *(_QWORD *)&v52[*((_QWORD *)*this - 3) + 32];
        v58 = 257;
        Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, LShr, v21, (uint64_t)v57);
        v56 = 257;
        v23 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v18, v50, Cast, v23, (const llvm::Twine *)v55);
        v24 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
        v25 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = 257;
        v26 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v24, VIRead, v25, (const llvm::Twine *)v59);
        v27 = (llvm::Value *)llvm::ConstantInt::get();
        v58 = 257;
        v28 = llvm::IRBuilderBase::CreateAnd(v24, v26, v27, (const llvm::Twine *)v57);
        v29 = *(_QWORD *)&v52[*((_QWORD *)*this - 3) + 32];
        v56 = 257;
        v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v24, 38, v28, v29, (uint64_t)v55);
        v54 = 257;
        v31 = (llvm::Value *)llvm::ConstantInt::get();
        v32 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v24, InsertElement, v30, v31, (const llvm::Twine *)v53);
        v33 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
        v34 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = 257;
        v35 = llvm::IRBuilderBase::CreateAnd(v33, VIRead, v34, (const llvm::Twine *)v59);
        v36 = *(_QWORD *)&v52[*((_QWORD *)*this - 3) + 32];
        v58 = 257;
        v37 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v33, 38, v35, v36, (uint64_t)v57);
        v56 = 257;
        v38 = (llvm::Value *)llvm::ConstantInt::get();
        llvm::IRBuilderBase::CreateInsertElement(v33, v32, v37, v38, (const llvm::Twine *)v55);
        llvm::Value::replaceAllUsesWith();
        *((_BYTE *)this + 10560) = 1;
      }
      goto LABEL_62;
    }
    if (*(_QWORD *)String == 0x657361622E726961
      && *(_QWORD *)(String + 8) == 0x636E6174736E695FLL
      && *(_BYTE *)(String + 16) == 101)
    {
      inserted = AGCLLVMBuilder::getOrInsertFunction<>();
      v45 = &v9[*((_QWORD *)*this - 3)];
      v60 = 257;
      llvm::IRBuilderBase::CreateCall((uint64_t)(v45 + 32), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v59);
      goto LABEL_61;
    }
LABEL_62:
    v6 += 40;
    if (v6 == v8)
      return 1;
  }
  if (v14 != 28)
  {
    if (v14 != 30)
      goto LABEL_62;
    v39 = *(_QWORD *)String == 0x69736E692E726961 && *(_QWORD *)(String + 8) == 0x65737365745F6564;
    v40 = v39 && *(_QWORD *)(String + 16) == 0x5F6E6F6974616C6CLL;
    if (!v40 || *(_QWORD *)(String + 22) != 0x726F746361665F6ELL)
      goto LABEL_62;
    if (*(_QWORD *)v6 != *(_QWORD *)AGCLLVMAGPVertexShaderPostTessellationHW::getTessellationFactor((AGCLLVMAGPVertexShaderPostTessellationHW *)this, 1))
    {
      v49 = "MTLTessellationFactorFormat and inside_tessellation_factor shader input type mismatch";
      goto LABEL_66;
    }
    goto LABEL_61;
  }
  if (*(_QWORD *)String != 0x656764652E726961
    || *(_QWORD *)(String + 8) != 0x6C6C65737365745FLL
    || *(_QWORD *)(String + 16) != 0x61665F6E6F697461
    || *(_DWORD *)(String + 24) != 1919906915)
  {
    goto LABEL_62;
  }
  if (*(_QWORD *)v6 == *(_QWORD *)AGCLLVMAGPVertexShaderPostTessellationHW::getTessellationFactor((AGCLLVMAGPVertexShaderPostTessellationHW *)this, 0))
  {
LABEL_61:
    llvm::Value::replaceAllUsesWith();
    goto LABEL_62;
  }
  v49 = "MTLTessellationFactorFormat and edge_tessellation_factor shader input type mismatch";
LABEL_66:
  std::string::append((std::string *)((char *)this + *((_QWORD *)*this - 3) + 8), v49);
  return 0;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::replaceBuiltins(AGCLLVMAGPVertexShaderPostTessellation *this)
{
  uint64_t v2;
  llvm::LLVMContext **v3;
  unsigned __int8 v4;
  uint64_t Function;
  llvm::Function *v6;
  llvm::Function *v7;
  size_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD);
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  llvm::Instruction *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t i;
  unint64_t v23;
  uint64_t v24;
  llvm::Value **v25;
  llvm::Instruction *v26;
  llvm::Value **v27;
  llvm::Value *v28;
  llvm::Value *v29;
  llvm::Type *v30;
  uint64_t v31;
  int v32;
  llvm::Type *v33;
  uint64_t v34;
  llvm::Value **v35;
  llvm::Value *v36;
  char *v37;
  uint64_t (*v38)(_QWORD *);
  _QWORD *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD *, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v45;
  llvm::Value *FPTrunc;
  unsigned int *v47;
  uint64_t (*v48)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v49;
  uint64_t (*v50)(_QWORD *, _OWORD *, void *, uint64_t);
  _QWORD *v51;
  _OWORD *v52;
  void *v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD);
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  llvm::Value *v59;
  uint64_t v60;
  int v62;
  llvm::Function *v63;
  int v64;
  uint64_t v65;
  llvm::Value *v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  _QWORD v73[4];
  __int16 v74;
  uint64_t (**v75)(int, llvm::Value *);
  void *v76[2];
  _OWORD v77[5];
  int v78;
  uint64_t v79;
  _QWORD v80[29];
  AGCLLVMAGPVertexShaderPostTessellation *v81;
  _OWORD v82[3];
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if (!(_DWORD)v2)
    return v2;
  v3 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v75, *v3);
  v81 = this;
  v75 = &off_1E7E8AC10;
  v80[25] = v3;
  if ((v4 & 1) == 0
  {
    AGCLLVMAGPVertexShaderPostTessellation::replaceBuiltins(void)::tessellation_builtins = (uint64_t)"air.get_num_patch_control_points";
    dword_1EF8E7600 = 1;
    qword_1EF8E7608 = (uint64_t)AGCLLVMAGPVertexShaderPostTessellation::buildNumPatchControlPoints;
    dword_1EF8E7610 = 0;
    dword_1EF8E7618 = 2;
    word_1EF8E761C = 0;
  }
  if (AGCLLVMAGPVertexShaderPostTessellation::replaceBuiltins(void)::tessellation_builtins)
    strlen((const char *)AGCLLVMAGPVertexShaderPostTessellation::replaceBuiltins(void)::tessellation_builtins);
  Function = llvm::Module::getFunction();
  if (Function)
  {
    v6 = (llvm::Function *)Function;
    if (dword_1EF8E7618 == 10)
    {
      v9 = *(_QWORD *)(Function + 8);
      if (v9)
      {
        do
        {
          v10 = (void (*)(_QWORD *, _QWORD))qword_1EF8E7608;
          v11 = (_QWORD *)((char *)v81 + (dword_1EF8E7610 >> 1));
          if ((dword_1EF8E7610 & 1) != 0)
            v10 = *(void (**)(_QWORD *, _QWORD))(*v11 + qword_1EF8E7608);
          v12 = *(_QWORD *)(v9 + 8);
          v10(v11, *(_QWORD *)(v9 + 24));
          v9 = v12;
        }
        while (v12);
      }
      goto LABEL_103;
    }
    if (dword_1EF8E7618 == 9)
    {
      v7 = (llvm::Function *)Function;
      if (qword_1EF8E7608)
      {
        v8 = strlen((const char *)qword_1EF8E7608);
        *(_QWORD *)&v82[0] = (char *)&v82[1] + 8;
        *(_OWORD *)((char *)v82 + 8) = xmmword_1C3E37B50;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v82, (_BYTE *)qword_1EF8E7608, (_BYTE *)(qword_1EF8E7608 + v8));
      }
      else
      {
        *(_QWORD *)&v82[1] = 64;
        *(_QWORD *)&v82[0] = (char *)&v82[1] + 8;
        *((_QWORD *)&v82[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v82, ".", "");
      v60 = *((_QWORD *)&v82[0] + 1);
      v6 = v7;
      if (*(_QWORD *)&v82[1] < *((_QWORD *)&v82[0] + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v60 = *((_QWORD *)&v82[0] + 1);
      }
      *((_QWORD *)&v82[0] + 1) = v60;
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v82[0] != (_OWORD *)((char *)&v82[1] + 8))
        free(*(void **)&v82[0]);
      goto LABEL_103;
    }
    v63 = (llvm::Function *)Function;
    v13 = **(_QWORD **)(*(_QWORD *)(Function + 24) + 16);
    v14 = (*(_DWORD *)(v13 + 8) & 0xFE) != 0x12 || HIBYTE(word_1EF8E761C) == 0;
    v15 = !v14;
    if (v14)
      v16 = 1;
    else
      v16 = *(_DWORD *)(v13 + 32);
    v64 = v16;
    v62 = v78;
    v17 = *(_QWORD *)(Function + 8);
    if (!v17)
    {
LABEL_97:
      v2 = v2;
      v78 = v62;
      v6 = v63;
LABEL_103:
      llvm::Function::eraseFromParent(v6);
      goto LABEL_104;
    }
    while (1)
    {
      v18 = *(llvm::Instruction **)(v17 + 24);
      v19 = *(_QWORD *)(v17 + 8);
      if (dword_1EF8E7600 == 1)
      {
        v20 = 0;
      }
      else
      {
        if (dword_1EF8E7600 != 2)
          goto LABEL_30;
        v20 = 121;
      }
      v78 = v20;
LABEL_30:
      v65 = v19;
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v76, v18);
      v21 = llvm::UndefValue::get();
      if (v64)
      {
        for (i = 0; i != v64; ++i)
        {
          v66 = (llvm::Value *)v21;
          v83 = 0;
          memset(v82, 0, sizeof(v82));
          v23 = llvm::CallBase::arg_end(v18) - (_QWORD)v18 + 32 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF);
          if ((v23 & 0x1FFFFFFFE0) != 0)
          {
            v24 = (v23 >> 5);
            v25 = (llvm::Value **)v82;
            v26 = v18;
            do
            {
              v27 = (llvm::Value **)((char *)v26 - 32 * (*((_DWORD *)v18 + 5) & 0x7FFFFFF));
              v28 = *v27;
              *v25 = *v27;
              if (v15 && (*(_DWORD *)(*(_QWORD *)v28 + 8) & 0xFE) == 0x12)
              {
                v74 = 257;
                v29 = (llvm::Value *)llvm::ConstantInt::get();
                *v25 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v76, v28, v29, (const llvm::Twine *)v73);
              }
              ++v25;
              v26 = (llvm::Instruction *)((char *)v26 + 32);
              --v24;
            }
            while (v24);
          }
          if ((_BYTE)word_1EF8E761C)
          {
            v30 = **(llvm::Type ***)&v82[0];
            if ((*(_DWORD *)(**(_QWORD **)&v82[0] + 8) & 0xFE) == 0x12)
              v30 = (llvm::Type *)**((_QWORD **)v30 + 2);
            v73[0] = llvm::Type::getPrimitiveSizeInBits(v30);
            v73[1] = v31;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              v32 = 0;
            }
            else
            {
              v33 = (llvm::Type *)v80[4];
              if ((*(_DWORD *)(**(_QWORD **)&v82[0] + 8) & 0xFE) == 0x12)
                v33 = (llvm::Type *)llvm::FixedVectorType::get();
              if ((v23 & 0x1FFFFFFFE0) != 0)
              {
                v34 = (v23 >> 5);
                v35 = (llvm::Value **)v82;
                do
                {
                  v36 = *v35;
                  v74 = 257;
                  *v35++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v76, v36, v33, (const llvm::Twine *)v73);
                  --v34;
                }
                while (v34);
              }
              v32 = 1;
            }
          }
          else
          {
            v32 = 0;
          }
          v37 = (char *)v81 + *(_QWORD *)(*(_QWORD *)v81 - 24);
          v70 = v77[2];
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)v76);
          v72 = v78;
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v70, (uint64_t)(v37 + 40));
          if (v71)
            llvm::MetadataTracking::untrack();
          switch(dword_1EF8E7618)
          {
            case 1:
              v38 = (uint64_t (*)(_QWORD *))qword_1EF8E7608;
              v39 = (_QWORD *)((char *)v81 + (dword_1EF8E7610 >> 1));
              if ((dword_1EF8E7610 & 1) != 0)
                v38 = *(uint64_t (**)(_QWORD *))(*v39 + qword_1EF8E7608);
              v40 = v38(v39);
              goto LABEL_82;
            case 2:
              v41 = (uint64_t (*)(_QWORD *, uint64_t))qword_1EF8E7608;
              v42 = (_QWORD *)((char *)v81 + (dword_1EF8E7610 >> 1));
              if ((dword_1EF8E7610 & 1) != 0)
                v41 = *(uint64_t (**)(_QWORD *, uint64_t))(*v42 + qword_1EF8E7608);
              v43 = *(_QWORD *)v18;
              goto LABEL_66;
            case 3:
              v41 = (uint64_t (*)(_QWORD *, uint64_t))qword_1EF8E7608;
              v42 = (_QWORD *)((char *)v81 + (dword_1EF8E7610 >> 1));
              if ((dword_1EF8E7610 & 1) != 0)
                v41 = *(uint64_t (**)(_QWORD *, uint64_t))(*v42 + qword_1EF8E7608);
              v43 = *(_QWORD *)&v82[0];
LABEL_66:
              v40 = v41(v42, v43);
              goto LABEL_82;
            case 4:
              v47 = (unsigned int *)(*(_QWORD *)&v82[0] + 24);
              if (*(_DWORD *)(*(_QWORD *)&v82[0] + 32) >= 0x41u)
                v47 = *(unsigned int **)v47;
              v48 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))qword_1EF8E7608;
              v49 = (_QWORD *)((char *)v81 + (dword_1EF8E7610 >> 1));
              if ((dword_1EF8E7610 & 1) != 0)
                v48 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v49 + qword_1EF8E7608);
              v40 = v48(v49, *(_QWORD *)v18, *v47);
              goto LABEL_82;
            case 5:
              v44 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))qword_1EF8E7608;
              v45 = (_QWORD *)((char *)v81 + (dword_1EF8E7610 >> 1));
              if ((dword_1EF8E7610 & 1) != 0)
                v44 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v45 + qword_1EF8E7608);
              v40 = v44(v45, *(_QWORD *)&v82[0], *((_QWORD *)&v82[0] + 1));
              goto LABEL_82;
            case 6:
              v50 = (uint64_t (*)(_QWORD *, _OWORD *, void *, uint64_t))qword_1EF8E7608;
              v51 = (_QWORD *)((char *)v81 + (dword_1EF8E7610 >> 1));
              if ((dword_1EF8E7610 & 1) != 0)
                v50 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(*v51
                                                                                    + qword_1EF8E7608);
              v53 = (void *)*((_QWORD *)&v82[0] + 1);
              v52 = *(_OWORD **)&v82[0];
              v54 = *(_QWORD *)&v82[1];
              goto LABEL_78;
            case 7:
              v50 = (uint64_t (*)(_QWORD *, _OWORD *, void *, uint64_t))qword_1EF8E7608;
              v51 = (_QWORD *)((char *)v81 + (dword_1EF8E7610 >> 1));
              if ((dword_1EF8E7610 & 1) != 0)
                v50 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(*v51
                                                                                    + qword_1EF8E7608);
              v52 = v82;
              v53 = &unk_1C3E4D9BB;
              v54 = 0;
LABEL_78:
              v40 = v50(v51, v52, v53, v54);
              goto LABEL_82;
            case 8:
              v55 = (uint64_t (*)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))qword_1EF8E7608;
              v56 = (_QWORD *)((char *)v81 + (dword_1EF8E7610 >> 1));
              if ((dword_1EF8E7610 & 1) != 0)
                v55 = *(uint64_t (**)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))(*v56
                                                                                           + qword_1EF8E7608);
              v40 = v55(v56, *(_QWORD *)v18, v82, &unk_1C3E4D9BB, 0);
LABEL_82:
              FPTrunc = (llvm::Value *)v40;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          v57 = (char *)v81 + *(_QWORD *)(*(_QWORD *)v81 - 24);
          v67 = *(_OWORD *)(v57 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v57 + 40));
          v69 = *((_DWORD *)v57 + 34);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v67, (uint64_t)v76);
          if (v68)
            llvm::MetadataTracking::untrack();
          if (v32)
          {
            v58 = *(_QWORD *)v18;
            if (v15 && (*(_DWORD *)(v58 + 8) & 0xFE) == 0x12)
              v58 = **(_QWORD **)(v58 + 16);
            v74 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v76, FPTrunc, (llvm::Type *)v58, (const llvm::Twine *)v73);
            if (!v15)
              goto LABEL_93;
          }
          else if (!v15)
          {
            goto LABEL_93;
          }
          v74 = 257;
          v59 = (llvm::Value *)llvm::ConstantInt::get();
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v76, v66, FPTrunc, v59, (const llvm::Twine *)v73);
LABEL_93:
          v21 = (uint64_t)FPTrunc;
        }
      }
      if (*(_QWORD *)v18 != v80[1])
        llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v18);
      v17 = v65;
      if (!v65)
        goto LABEL_97;
    }
  }
LABEL_104:
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v80);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v79);
  if (v76[0] != v77)
    free(v76[0]);
  return v2;
}

const char *AGCLLVMAGPVertexShaderPostTessellationHW::dumpType(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  return "post-tessellation-vertex-hw";
}

BOOL AGCLLVMAGPVertexShaderPostTessellationHW::constructReply(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  _BOOL8 v2;
  char *v3;
  char *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  flatbuffers::FlatBufferBuilder *v14;
  int v15;
  int v16;
  const char *v17;

  v2 = AGCLLVMAGPVertexShaderPostTessellation::constructReply(this);
  if (v2)
  {
    v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v4 = v3 + 2568;
    v5 = *((unsigned __int8 *)this + 5033);
    v6 = *((unsigned __int8 *)this + 5034);
    v7 = *((unsigned __int8 *)this + 5092);
    v8 = *((unsigned __int8 *)this + 5093);
    v9 = *((unsigned __int8 *)this + 5094);
    v10 = *((unsigned __int8 *)this + 5095);
    v3[2638] = 1;
    v11 = *((_DWORD *)v3 + 650) - *((_DWORD *)v3 + 654) + *((_DWORD *)v3 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v3 + 2568, 14, v10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 12, v9, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 10, v8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 8, v7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 6, v6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 4, v5, 0);
    v12 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v4, v11);
    v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v14 = (flatbuffers::FlatBufferBuilder *)(v13 + 2568);
    v13[2638] = 1;
    v15 = *((_DWORD *)v13 + 650) - *((_DWORD *)v13 + 654) + *((_DWORD *)v13 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v13 + 2568, v12);
    v16 = flatbuffers::FlatBufferBuilder::EndTable(v14, v15);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568), v16, v17);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
  }
  return v2;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::getPatchPosition(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  char *v2;
  llvm::Value *VIRead;
  llvm::Value *v4;
  llvm::Value *v5;
  char *v6;
  llvm::IRBuilderBase *v7;
  llvm::Value *v8;
  uint64_t InsertElement;
  char *v10;
  llvm::IRBuilderBase *v11;
  llvm::Value *v12;
  llvm::IRBuilderBase *v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  char *v17;
  llvm::IRBuilderBase *v18;
  llvm::Value *v19;
  llvm::Value *v20;
  char *v21;
  llvm::IRBuilderBase *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  llvm::IRBuilderBase *v28;
  llvm::Value *v29;
  uint64_t Element;
  char *v31;
  llvm::IRBuilderBase *v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t FAdd;
  uint64_t FSub;
  char *v37;
  llvm::IRBuilderBase *v38;
  _WORD v40[20];
  _BYTE v41[32];
  __int16 v42;
  _BYTE v43[32];
  __int16 v44;
  _BYTE v45[32];
  __int16 v46;

  v2 = (char *)this + 5024;
  VIRead = (llvm::Value *)AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)this + 5024, 6);
  v4 = (llvm::Value *)AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)v2, 7);
  if (*((_DWORD *)this + 2513))
  {
    v5 = (llvm::Value *)llvm::UndefValue::get();
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = 257;
    v7 = (llvm::IRBuilderBase *)(v6 + 40);
    v8 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = llvm::IRBuilderBase::CreateInsertElement(v7, v5, VIRead, v8, (const llvm::Twine *)v45);
    v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = 257;
    v11 = (llvm::IRBuilderBase *)(v10 + 40);
    v12 = (llvm::Value *)llvm::ConstantInt::get();
    v13 = v11;
    v14 = (llvm::Value *)InsertElement;
    v15 = v4;
  }
  else
  {
    v16 = (llvm::Value *)llvm::UndefValue::get();
    v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = 257;
    v18 = (llvm::IRBuilderBase *)(v17 + 40);
    v19 = (llvm::Value *)llvm::ConstantInt::get();
    v20 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v18, v16, VIRead, v19, (const llvm::Twine *)v45);
    v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = 257;
    v22 = (llvm::IRBuilderBase *)(v21 + 40);
    v23 = (llvm::Value *)llvm::ConstantInt::get();
    v24 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v22, v20, v4, v23, (const llvm::Twine *)v45);
    v25 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v26 = llvm::ConstantFP::get();
    v27 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = 257;
    v28 = (llvm::IRBuilderBase *)(v27 + 40);
    v29 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement(v28, v24, v29, (const llvm::Twine *)v45);
    v31 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v44 = 257;
    v32 = (llvm::IRBuilderBase *)(v31 + 40);
    v33 = (llvm::Value *)llvm::ConstantInt::get();
    v34 = llvm::IRBuilderBase::CreateExtractElement(v32, v24, v33, (const llvm::Twine *)v43);
    v42 = 257;
    FAdd = llvm::IRBuilderBase::CreateFAdd((uint64_t)v28, Element, v34, (uint64_t)v41);
    v40[16] = 257;
    FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)v25, v26, FAdd, (uint64_t)v40);
    v37 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = 257;
    v38 = (llvm::IRBuilderBase *)(v37 + 40);
    v12 = (llvm::Value *)llvm::ConstantInt::get();
    v13 = v38;
    v14 = v24;
    v15 = (llvm::Value *)FSub;
  }
  return llvm::IRBuilderBase::CreateInsertElement(v13, v14, v15, v12, (const llvm::Twine *)v45);
}

llvm::Value *AGCLLVMAGPVertexShaderPostTessellationHW::getInstanceID(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  uint64_t inserted;
  char *v3;
  _BYTE v5[32];
  __int16 v6;

  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(v3 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v5);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::getDrawPatchIndex(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  char *v2;
  uint64_t VIRead;
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  VIRead = AGCLLVMUserVertexShader::createVIRead(this, (uint64_t)this + 5024, 8);
  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
  v7 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v2, 49, VIRead, v4, (uint64_t)v6);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::needsRingEdgeVertex(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  return *((unsigned __int8 *)this + 10560);
}

void `virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationHW::~AGCLLVMAGPVertexShaderPostTessellationHW(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E6D728;
  v1[1321] = &unk_1E7E6DAA0;
  v1[1325] = &unk_1E7E6DB90;
  v2 = v1[1319];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1317));
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation((AGCLLVMAGPVertexShaderPostTessellation *)v1, (uint64_t *)off_1E7E6DBA0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1321));
}

{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E6D728;
  v1[1321] = &unk_1E7E6DAA0;
  v1[1325] = &unk_1E7E6DB90;
  v2 = v1[1319];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1317));
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation((AGCLLVMAGPVertexShaderPostTessellation *)v1, (uint64_t *)off_1E7E6DBA0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1321));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationHW::dumpType(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  return "post-tessellation-vertex-hw";
}

BOOL `virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationHW::constructReply(AGCLLVMAGPVertexShaderPostTessellationHW *this)
{
  return AGCLLVMAGPVertexShaderPostTessellationHW::constructReply((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 152)));
}

void AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation(AGCLLVMAGPVertexShaderPostTessellation *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  char *v12;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[13];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) = a2[14];
  v5 = *((_QWORD *)this + 1316);
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + 10512));
  for (i = 0; i != -360; i -= 24)
  {
    v8 = *(_QWORD *)((char *)this + i + 10424);
    if (v8 != -8192 && v8 != -4096 && v8 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + i + 10408));
  }
  v10 = a2[1];
  *(_QWORD *)this = v10;
  *(_QWORD *)((char *)this + *(_QWORD *)(v10 - 24)) = a2[11];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) = a2[12];
  v11 = (char *)*((_QWORD *)this + 1249);
  if (v11 != (char *)this + 10008)
    free(v11);
  v12 = (char *)*((_QWORD *)this + 1183);
  if (v12 != (char *)this + 9480)
    free(v12);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, a2 + 2);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::initCompile(llvm::Function **this)
{
  uint64_t inited;
  uint64_t v3;
  llvm::BasicBlock *v4;
  llvm::Function *v5;
  uint64_t v6;
  llvm::Function *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *String;
  uint64_t v15;
  llvm::Type **v18;
  llvm::Value *v19;
  BOOL v20;
  llvm::Type *v23;
  uint64_t v24;
  unsigned int v25;
  llvm::Value *v26;
  llvm::BasicBlock *v27;
  llvm::BasicBlock *v28;
  llvm::BasicBlock *v29;
  llvm::BasicBlock *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  llvm::Instruction *v34;
  _QWORD *v35;
  llvm::Instruction *v36;
  llvm::Type *v40;
  uint64_t v41;
  unsigned int v42;
  llvm::Type **GlobalBufferBinding;
  char *v44;
  llvm::Value *v45;
  llvm::Type *v46;
  char *v47;
  uint64_t *v48;
  llvm::CmpInst **TessConstant;
  uint64_t v50;
  uint64_t ICmp;
  char *v52;
  char *v53;
  llvm::Type **v54;
  llvm::Value *v55;
  llvm::Type *v56;
  llvm::Value *AlignedLoad;
  char *v58;
  llvm::Type *v59;
  llvm::Type **GEP;
  char *v61;
  llvm::Value *v62;
  llvm::Type *v63;
  llvm::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::Type *v68;
  llvm::User *PHI;
  unsigned int v71;
  llvm::BasicBlock *v72;
  AGCLLVMBuilder *v73;
  llvm::Value *v74;
  uint64_t FirstInsertionPt;
  _QWORD v76[4];
  __int16 v77;

  inited = AGCLLVMAGPVertexShader::initCompile((AGCLLVMAGPVertexShader *)this);
  if ((_DWORD)inited)
  {
    v3 = *((_QWORD *)this[22] + 10);
    if (v3)
      v4 = (llvm::BasicBlock *)(v3 - 24);
    else
      v4 = 0;
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v4);
    if (AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v4, &FirstInsertionPt))
    {
      v77 = 257;
      v4 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    }
    v5 = this[22];
    if ((*((_WORD *)v5 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(this[22]);
      v7 = this[22];
      v6 = *((_QWORD *)v5 + 11);
      if ((*((_WORD *)v7 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments(this[22]);
      v5 = v7;
    }
    else
    {
      v6 = *((_QWORD *)v5 + 11);
    }
    v8 = *((_QWORD *)v5 + 11) + 40 * *((_QWORD *)v5 + 12);
    if (v6 != v8)
    {
      v9 = (char *)(this + 1);
      v10 = (char *)(this + 46);
      v71 = inited;
      do
      {
        if (*(_QWORD *)(v6 + 8))
        {
          v11 = (uint64_t)&v9[*((_QWORD *)*this - 3) + 32];
          v12 = llvm::BasicBlock::getFirstInsertionPt(v4);
          llvm::IRBuilderBase::SetInsertPoint(v11, (uint64_t)v4, v12);
          v13 = *((_QWORD *)this[11] + *(unsigned int *)(v6 + 32));
          String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v13 - 8 * *(unsigned int *)(v13 + 8) + 8));
          if (v15 > 20)
          {
            if (v15 == 30)
            {
              if (*String != 0x746E6F632E726961
                || String[1] != 0x6E696F705F6C6F72
                || String[2] != 0x5F7865646E695F74
                || *(_QWORD *)((char *)String + 22) != 0x7265666675625F78)
              {
                goto LABEL_71;
              }
              v40 = *(llvm::Type **)v6;
              v76[0] = "agc.control_point_index_buffer";
              v77 = 259;
              v41 = *(_QWORD *)(*(_QWORD *)&v10[*((_QWORD *)*this - 3) + 32] + 824);
              v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 136))(v41);
              GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v40, (const llvm::Twine *)v76, v42, 0, 5, 0);
              v44 = &v9[*((_QWORD *)*this - 3)];
              v77 = 257;
              v46 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v45);
              llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v44 + 4, v46, (uint64_t)GlobalBufferBinding, 0, (uint64_t)v76);
            }
            else
            {
              if (v15 != 21)
                goto LABEL_71;
              v20 = *String == 0x69736F702E726961 && String[1] == 0x5F6E695F6E6F6974;
              if (!v20 || *(_QWORD *)((char *)String + 13) != 0x68637461705F6E69)
                goto LABEL_71;
              (*((void (**)(llvm::Function **))*this + 77))(this);
            }
LABEL_70:
            llvm::Value::replaceAllUsesWith();
            goto LABEL_71;
          }
          if (v15 == 12)
          {
            if (*String != 0x637461702E726961 || *((_DWORD *)String + 2) != 1684627304)
              goto LABEL_71;
            v73 = (AGCLLVMBuilder *)*((_QWORD *)*this - 3);
            v74 = (llvm::Value *)(*((uint64_t (**)(llvm::Function **))*this + 79))(this);
            if (!this[1316])
            {
              v23 = (llvm::Type *)llvm::PointerType::get();
              v76[0] = "agc.patch_index_buffer";
              v77 = 259;
              v24 = *(_QWORD *)(*(_QWORD *)&v10[*((_QWORD *)*this - 3) + 32] + 824);
              v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 120))(v24);
              v26 = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v23, (const llvm::Twine *)v76, v25, 0, 5, 0);
              llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 1314), (uint64_t)v26);
            }
            v27 = *(llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 88);
            v76[0] = "patch_id_merge";
            v77 = 259;
            v28 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
            v76[0] = "patch_id_indirect";
            v77 = 259;
            v29 = (llvm::BasicBlock *)operator new();
            llvm::BasicBlock::BasicBlock();
            v30 = v27;
            v33 = (_QWORD *)*((_QWORD *)v27 + 5);
            v32 = (_QWORD *)((char *)v27 + 40);
            v31 = v33;
            if (v33 == v32)
            {
              v36 = 0;
            }
            else
            {
              v34 = (llvm::Instruction *)(v31 - 3);
              if (v31)
                v35 = v31 - 3;
              else
                v35 = 0;
              if (*((unsigned __int8 *)v35 + 16) - 29 >= 0xB)
                v36 = 0;
              else
                v36 = v34;
            }
            llvm::Instruction::eraseFromParent(v36);
            v47 = (char *)this + *((_QWORD *)*this - 3);
            v72 = v30;
            *((_QWORD *)v47 + 11) = v30;
            *((_QWORD *)v47 + 12) = v32;
            v48 = (uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 40);
            TessConstant = (llvm::CmpInst **)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)1);
            v50 = llvm::ConstantInt::get();
            v77 = 257;
            ICmp = llvm::IRBuilderBase::CreateICmp(v48, 33, TessConstant, v50, (uint64_t)v76);
            llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 40), ICmp, (uint64_t)v29, (uint64_t)v28);
            v52 = (char *)this + *((_QWORD *)*this - 3);
            *((_QWORD *)v52 + 11) = v29;
            *((_QWORD *)v52 + 12) = (char *)v29 + 40;
            v53 = &v9[*((_QWORD *)*this - 3)];
            v54 = (llvm::Type **)this[1316];
            v77 = 257;
            v56 = AGCLLVMBuilder::tryDeducePointeeType(v54, v55);
            AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v53 + 4, v56, (uint64_t)v54, 0, (uint64_t)v76);
            v58 = (char *)this + *((_QWORD *)*this - 3);
            v59 = (llvm::Type *)*((_QWORD *)v58 + 29);
            v77 = 257;
            GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v58 + 40), v59, AlignedLoad, v74, (const llvm::Twine *)v76);
            v61 = &v9[*((_QWORD *)*this - 3)];
            v77 = 257;
            v63 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v62);
            v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v61 + 4, v63, (uint64_t)GEP, 0, (uint64_t)v76);
            llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40), v28);
            v65 = (uint64_t)&v9[*((_QWORD *)*this - 3) + 32];
            v66 = llvm::BasicBlock::getFirstInsertionPt(v28);
            llvm::IRBuilderBase::SetInsertPoint(v65, (uint64_t)v28, v66);
            v67 = *((_QWORD *)*this - 3);
            v68 = *(llvm::Function **)((char *)this + v67 + 232);
            v77 = 257;
            PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)((char *)this + v67 + 40), v68, 2, (const llvm::Twine *)v76);
            llvm::PHINode::addIncoming(PHI, v64, v29);
            llvm::PHINode::addIncoming(PHI, v74, v72);
            AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + (_QWORD)v73 + 32), PHI, *(llvm::Type **)v6);
            inited = v71;
            v10 = (char *)(this + 46);
            goto LABEL_70;
          }
          if (v15 == 15)
          {
            if (*String == 0x637461702E726961 && *(_QWORD *)((char *)String + 7) == 0x74726174735F6863)
            {
              v18 = (llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 32);
              v19 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)2);
            }
            else
            {
              if (*String != 0x74736E692E726961 || *(_QWORD *)((char *)String + 7) != 0x64695F65636E6174)
                goto LABEL_71;
              v18 = (llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 32);
              v19 = (llvm::Value *)(*((uint64_t (**)(llvm::Function **))*this + 78))(this);
            }
            AGCLLVMBuilder::truncateToSmall(v18, v19, *(llvm::Type **)v6);
            goto LABEL_70;
          }
        }
LABEL_71:
        v6 += 40;
      }
      while (v6 != v8);
    }
  }
  return inited;
}

BOOL AGCLLVMAGPVertexShaderPostTessellation::constructReply(AGCLLVMAGPVertexShaderPostTessellation *this)
{
  _BOOL8 result;
  int v3;
  int v4;
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  flatbuffers::FlatBufferBuilder *v13;
  int v14;
  const char *v15;

  result = AGCDeserializedReply::deserialize((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if ((_DWORD)result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = AGCLLVMUserVertexShader::constructFlatReply(this);
    v5 = AGCLLVMAGPVertexShader::constructMTLVertexInfo(this);
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v7 = v6 + 2472;
    v6[2542] = 1;
    v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<signed char>(v6 + 2472, 4, *((char *)this + 10052));
    flatbuffers::FlatBufferBuilder::AddElement<signed char>(v7, 6, *((char *)this + 10056));
    flatbuffers::FlatBufferBuilder::AddElement<signed char>(v7, 8, *((char *)this + 10060));
    flatbuffers::FlatBufferBuilder::AddElement<signed char>(v7, 14, *((char *)this + 10064));
    v9 = (*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellation *))(*(_QWORD *)this + 640))(this);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v7, 16, v9, 0);
    LODWORD(v7) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v7, v8);
    v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v11 = v10 + 2472;
    v10[2542] = 1;
    v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v10 + 2472, v3);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v11, v4);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLVertexInfo>(v11, v5);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLPostTessellationInfo>(v11, (int)v7);
    v13 = (AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, v12);
    flatbuffers::FlatBufferBuilder::Finish(v13, v14, v15);
    return AGCLLVMAGPVertexShader::validateReply(this);
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::needsRingEdgeVertex(AGCLLVMAGPVertexShaderPostTessellation *this)
{
  return 0;
}

BOOL `virtual thunk to'AGCLLVMAGPVertexShaderPostTessellation::constructReply(AGCLLVMAGPVertexShaderPostTessellation *this)
{
  return AGCLLVMAGPVertexShaderPostTessellation::constructReply((AGCLLVMAGPVertexShaderPostTessellation *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 152)));
}

char *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::MTLPostTessellationInfo>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 16, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(_QWORD *a1, llvm::Value *a2)
{
  _QWORD *v3;
  llvm::Type **v4;
  llvm::ValueHandleBase *v5;
  uint64_t v6;
  char v7;
  llvm::GlobalVariable *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  llvm::Type *v14;
  char *v16;
  __int16 v17;

  v3 = &a1[3 * a2];
  v4 = (llvm::Type **)v3[1261];
  if (!v4)
  {
    v5 = (llvm::ValueHandleBase *)(v3 + 1259);
    v6 = 3 * a2;
    v7 = 1;
    v8 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v9 = (&AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(AGCLLVMAGPVertexShaderPostTessellation::TessConstant)::tess_constant_info)[v6];
    HIBYTE(v17) = 1;
    if (*v9)
    {
      v16 = v9;
      v7 = 3;
    }
    LOBYTE(v17) = v7;
    llvm::GlobalVariable::GlobalVariable();
    *((_BYTE *)v8 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v11 = *((_QWORD *)v10 + 47);
    v12 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v10 + 32), v8);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v11, v12);
    llvm::ValueHandleBase::operator=(v5, (uint64_t)v8);
    v4 = (llvm::Type **)*((_QWORD *)v5 + 2);
  }
  v13 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v17 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(v4, a2);
  return llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v14, (uint64_t)v4, 0, (uint64_t)&v16);
}

llvm::Value *AGCLLVMAGPVertexShaderPostTessellation::buildNumPatchControlPoints(AGCLLVMAGPVertexShaderPostTessellation *this, llvm::Type *a2)
{
  llvm::Type **v3;
  llvm::Value *TessConstant;

  v3 = (llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32);
  TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xD);
  return AGCLLVMBuilder::truncateToSmall(v3, TessConstant, a2);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::getTessellationFactor(AGCLLVMAGPVertexShaderPostTessellationHW *this, char a2)
{
  uint64_t v4;
  llvm::ArrayType *v5;
  llvm::Type *v6;
  uint64_t v7;
  unsigned int v8;
  llvm::Value *GlobalBufferBinding;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::ArrayType *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  llvm::Type **v18;
  llvm::Value *v19;
  llvm::Type *v20;
  uint64_t AlignedLoad;
  uint64_t *Cast;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::IRBuilderBase *v26;
  llvm::Type **GEP;
  llvm::Value *v28;
  llvm::Type *v29;
  char *v30;
  llvm::Value *TessConstant;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Value *Mul;
  llvm::Value *v35;
  llvm::Value *v36;
  llvm::IRBuilderBase *v37;
  llvm::Value *Value;
  llvm::Value *v39;
  llvm::Value *InsertElement;
  llvm::IRBuilderBase *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  char *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  char v49;
  __int16 v50;
  _BYTE v51[32];
  __int16 v52;
  _QWORD v53[4];
  __int16 v54;
  uint64_t *v55[4];
  __int16 v56;
  uint64_t *v57[2];
  uint64_t v58;
  llvm::ArrayType *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = 168;
  if (!*((_DWORD *)this + 2641))
    v4 = 152;
  v5 = *(llvm::ArrayType **)((char *)this + v4 + *(_QWORD *)(*(_QWORD *)this - 24) + 32);
  if (!*((_QWORD *)this + 1319))
  {
    v6 = (llvm::Type *)llvm::PointerType::get();
    v53[0] = "agc.tessellation_factor_buffer";
    v54 = 259;
    v7 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v6, (const llvm::Twine *)v53, v8, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + 10536), (uint64_t)GlobalBufferBinding);
  }
  v58 = 0;
  v59 = 0;
  if (*((_DWORD *)this + 2513))
  {
    v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v11 = 288;
    if (!*((_DWORD *)this + 2641))
      v11 = 280;
    v12 = 224;
    if (!*((_DWORD *)this + 2641))
      v12 = 216;
    v13 = *(_QWORD *)&v10[v11];
    v14 = *(llvm::ArrayType **)&v10[v12];
    v58 = v13;
    v59 = v14;
  }
  else
  {
    v58 = llvm::ArrayType::get(v5, (llvm::Type *)3);
    v59 = v5;
  }
  v15 = llvm::StructType::create();
  v16 = llvm::PointerType::get();
  v17 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v18 = (llvm::Type **)*((_QWORD *)this + 1319);
  v54 = 257;
  v20 = AGCLLVMBuilder::tryDeducePointeeType(v18, v19);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v17, v20, (uint64_t)v18, 0, (uint64_t)v53);
  v52 = 257;
  Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v17, 49, AlignedLoad, v16, (uint64_t)v51);
  switch(*((_DWORD *)this + 2515))
  {
    case 0:
      v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v55[0] = (uint64_t *)llvm::ConstantInt::get();
      goto LABEL_18;
    case 1:
      v25 = (uint64_t *)(*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellationHW *))(*(_QWORD *)this + 632))(this);
      goto LABEL_17;
    case 2:
      v25 = (uint64_t *)(*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellationHW *))(*(_QWORD *)this + 624))(this);
LABEL_17:
      v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v55[0] = v25;
LABEL_18:
      v55[1] = (uint64_t *)llvm::ConstantInt::get();
      v26 = (llvm::IRBuilderBase *)(v23 + 40);
      v54 = 257;
      GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v26, v15, Cast, v55, 2, (uint64_t)v53);
      v52 = 257;
      v29 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v28);
      v30 = v51;
      goto LABEL_20;
    case 3:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xE);
      v32 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellationHW *))(*(_QWORD *)this
                                                                                                 + 632))(this);
      v33 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAGPVertexShaderPostTessellationHW *))(*(_QWORD *)this
                                                                                                 + 624))(this);
      v26 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v54 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v26, v33, TessConstant, (const llvm::Twine *)v53);
      v52 = 257;
      v57[0] = (uint64_t *)llvm::IRBuilderBase::CreateAdd(v26, v32, Mul, (const llvm::Twine *)v51);
      v57[1] = (uint64_t *)llvm::ConstantInt::get();
      v56 = 257;
      GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v26, v15, Cast, v57, 2, (uint64_t)v55);
      v50 = 257;
      v29 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v35);
      v30 = &v49;
LABEL_20:
      v24 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v26, v29, (uint64_t)GEP, 0, (uint64_t)v30);
      break;
    default:
      v24 = 0;
      break;
  }
  if (!*((_DWORD *)this + 2513) && (a2 & 1) == 0)
  {
    v36 = (llvm::Value *)llvm::UndefValue::get();
    v37 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    LODWORD(v55[0]) = 0;
    v54 = 257;
    Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v37, v24, (uint64_t)v55, 1, (uint64_t)v53);
    v52 = 257;
    v39 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v37, v36, Value, v39, (const llvm::Twine *)v51);
    v41 = (AGCLLVMAGPVertexShaderPostTessellationHW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    LODWORD(v55[0]) = 1;
    v54 = 257;
    v42 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v41, v24, (uint64_t)v55, 1, (uint64_t)v53);
    v52 = 257;
    v43 = (llvm::Value *)llvm::ConstantInt::get();
    v44 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v41, InsertElement, v42, v43, (const llvm::Twine *)v51);
    v45 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    LODWORD(v55[0]) = 2;
    v54 = 257;
    v46 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v45 + 40), v24, (uint64_t)v55, 1, (uint64_t)v53);
    v52 = 257;
    v47 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v45 + 40), v44, v46, v47, (const llvm::Twine *)v51);
  }
  return v24;
}

void AGCLLVMAGPVertexShaderPostTessellationSW::~AGCLLVMAGPVertexShaderPostTessellationSW(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7E6DC40;
  *((_QWORD *)this + 1332) = &unk_1E7E6DFB8;
  *((_QWORD *)this + 1336) = &unk_1E7E6E0A8;
  v2 = *((_QWORD *)this + 1329);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10616));
  v4 = *((_QWORD *)this + 1326);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10592));
  v6 = *((_QWORD *)this + 1322);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10560));
  v8 = *((_QWORD *)this + 1319);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10536));
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation(this, (uint64_t *)off_1E7E6E0B8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10656));
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7E6DC40;
  *((_QWORD *)this + 1332) = &unk_1E7E6DFB8;
  *((_QWORD *)this + 1336) = &unk_1E7E6E0A8;
  v2 = *((_QWORD *)this + 1329);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10616));
  v4 = *((_QWORD *)this + 1326);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10592));
  v6 = *((_QWORD *)this + 1322);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10560));
  v8 = *((_QWORD *)this + 1319);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10536));
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation(this, (uint64_t *)off_1E7E6E0B8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10656));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::initCompile(llvm::Function **this)
{
  uint64_t inited;
  llvm::Function *v3;
  uint64_t v4;
  llvm::BasicBlock *v5;
  uint64_t v6;
  llvm::Function *v7;
  uint64_t i;
  char *v9;
  uint64_t FirstInsertionPt;
  uint64_t v11;
  uint64_t String;
  uint64_t v13;
  llvm::Type **v16;
  llvm::Value *TessConstant;

  inited = AGCLLVMAGPVertexShaderPostTessellation::initCompile(this);
  if ((_DWORD)inited)
  {
    v3 = this[22];
    v4 = *((_QWORD *)v3 + 10);
    if (v4)
      v5 = (llvm::BasicBlock *)(v4 - 24);
    else
      v5 = 0;
    if ((*((_WORD *)v3 + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(this[22]);
      v7 = this[22];
      v6 = *((_QWORD *)v3 + 11);
      if ((*((_WORD *)v7 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments(this[22]);
      v3 = v7;
    }
    else
    {
      v6 = *((_QWORD *)v3 + 11);
    }
    for (i = *((_QWORD *)v3 + 11) + 40 * *((_QWORD *)v3 + 12); v6 != i; v6 += 40)
    {
      if (*(_QWORD *)(v6 + 8))
      {
        v9 = (char *)this + *((_QWORD *)*this - 3) + 40;
        FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v5);
        llvm::IRBuilderBase::SetInsertPoint((uint64_t)v9, (uint64_t)v5, FirstInsertionPt);
        v11 = *((_QWORD *)this[11] + *(unsigned int *)(v6 + 32));
        String = llvm::MDString::getString(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8));
        if (v13 == 17
          && *(_QWORD *)String == 0x657361622E726961
          && *(_QWORD *)(String + 8) == 0x636E6174736E695FLL
          && *(_BYTE *)(String + 16) == 101)
        {
          v16 = (llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 32);
          TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)4);
          AGCLLVMBuilder::truncateToSmall(v16, TessConstant, *(llvm::Type **)v6);
          llvm::Value::replaceAllUsesWith();
        }
      }
    }
  }
  return inited;
}

const char *AGCLLVMAGPVertexShaderPostTessellationSW::dumpType(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  return "post-tessellation-vertex-sw";
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getPatchPosition(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  AGCLLVMAGPVertexShaderPostTessellationSW *v1;
  char *v2;
  _BYTE *v3;
  int v4;
  char *v5;
  uint64_t v6;
  llvm::Type *v7;
  llvm::Type *v8;
  uint64_t v9;
  unsigned int v10;
  llvm::Type **GlobalBufferBinding;
  uint64_t *v12;
  llvm::Value *v13;
  llvm::Type *v14;
  llvm::Value *AlignedLoad;
  uint64_t inserted;
  char *v17;
  llvm::Value *v18;
  llvm::IRBuilderBase *v19;
  llvm::Type **GEP;
  uint64_t *v21;
  llvm::Value *v22;
  llvm::Type *v23;
  llvm::Value *InsertElement;
  int v25;
  llvm::Value *VIRead;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Cast;
  llvm::Value *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t i;
  uint64_t v36;
  llvm::IRBuilderBase *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *Element;
  char *v41;
  llvm::IRBuilderBase *v42;
  llvm::Value *v43;
  int v44;
  uint64_t v45;
  int v46;
  _OWORD *v47;
  _OWORD *v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  llvm::Value *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v60;
  char *v61;
  llvm::IRBuilderBase *v62;
  llvm::Value *v63;
  char *v64;
  llvm::IRBuilderBase *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  llvm::CmpInst **v68;
  uint64_t v69;
  llvm::Value *Select;
  char *v71;
  llvm::IRBuilderBase *v72;
  llvm::Value *v73;
  llvm::Value *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  AGCLLVMBuilder *v78;
  llvm::Value *v79;
  llvm::Value *v80;
  AGCLLVMBuilder *v81;
  llvm::Value *v82;
  int v83;
  llvm::IRBuilderBase *v84;
  llvm::Value *v85;
  char *v86;
  llvm::IRBuilderBase *v87;
  llvm::Value *v88;
  llvm::Value *v89;
  char *v90;
  llvm::Value *v91;
  llvm::IRBuilderBase *v92;
  llvm::Value *v93;
  llvm::Value *v94;
  llvm::Value *Add;
  llvm::Value *Sub;
  llvm::Value *v97;
  char *v98;
  llvm::IRBuilderBase *v99;
  llvm::Value *v100;
  llvm::IRBuilderBase *v101;
  llvm::Value *v102;
  char *v103;
  llvm::IRBuilderBase *v104;
  llvm::Value *v105;
  llvm::Value *v106;
  char *v107;
  llvm::Value *v108;
  llvm::IRBuilderBase *v109;
  llvm::Value *v110;
  llvm::IRBuilderBase *v111;
  llvm::Value *v112;
  llvm::Value *v113;
  llvm::Value *v114;
  llvm::Value *v115;
  char *v116;
  llvm::IRBuilderBase *v117;
  llvm::Value *v118;
  llvm::IRBuilderBase *v119;
  llvm::Value *v120;
  llvm::Value *v121;
  char *v122;
  llvm::IRBuilderBase *v123;
  llvm::Value *v124;
  llvm::Value *v125;
  llvm::IRBuilderBase *v126;
  llvm::CmpInst **v127;
  uint64_t v128;
  llvm::Value *InternalPerPatchID;
  AGCLLVMBuilder *v130;
  llvm::Value *InternalPerPatchData;
  llvm::IRBuilderBase *v132;
  llvm::Value *v133;
  llvm::Value *v134;
  llvm::IRBuilderBase *v135;
  llvm::Value *v136;
  llvm::Value *Xor;
  llvm::Value *v138;
  llvm::Value *v139;
  llvm::Value *v140;
  llvm::Value *v141;
  llvm::Value *v142;
  char *v143;
  llvm::IRBuilderBase *v144;
  llvm::Value *v145;
  llvm::IRBuilderBase *v146;
  llvm::Value *v147;
  char *v148;
  llvm::IRBuilderBase *v149;
  llvm::Value *v150;
  char *v151;
  llvm::IRBuilderBase *v152;
  llvm::Value *v153;
  llvm::Value *v154;
  char *v155;
  llvm::IRBuilderBase *v156;
  llvm::Value *v157;
  llvm::Value *v158;
  llvm::IRBuilderBase *v159;
  llvm::CmpInst **v160;
  uint64_t v161;
  llvm::Value *ICmp;
  llvm::IRBuilderBase *v163;
  llvm::Value *IsOuterEdgeDraw;
  llvm::Value *v165;
  llvm::IRBuilderBase *v166;
  llvm::Value *v167;
  llvm::Value *v168;
  llvm::Value *v169;
  llvm::Value *OneOverTessIndexTableEntry;
  char *v171;
  llvm::Value *v172;
  llvm::Value *v173;
  llvm::Value *v174;
  char *v175;
  llvm::Value *v176;
  llvm::Value *v177;
  llvm::Value *v178;
  llvm::Value *v179;
  llvm::IRBuilderBase *v180;
  llvm::Value *Mul;
  char *v182;
  llvm::IRBuilderBase *v183;
  AGCLLVMBuilder *v184;
  llvm::Value *v185;
  llvm::Value *v186;
  llvm::Value *v187;
  llvm::Value *v188;
  char *v189;
  llvm::IRBuilderBase *v190;
  llvm::Value *v191;
  llvm::Value *v192;
  llvm::IRBuilderBase *v193;
  llvm::CmpInst **v194;
  uint64_t v195;
  llvm::Value *v196;
  llvm::Value *v197;
  llvm::Value *v198;
  char *v199;
  llvm::IRBuilderBase *v200;
  llvm::Value *v201;
  llvm::Type ***v202;
  llvm::CmpInst **v203;
  uint64_t v204;
  llvm::Value *v205;
  char *v206;
  llvm::IRBuilderBase *v207;
  llvm::Value *v208;
  llvm::CmpInst **v209;
  uint64_t v210;
  llvm::Value *v211;
  llvm::IRBuilderBase *v212;
  llvm::Value *v213;
  llvm::CmpInst **v214;
  uint64_t *v215;
  uint64_t v216;
  llvm::Value *v217;
  uint64_t *v218;
  uint64_t v219;
  llvm::Value *v220;
  llvm::IRBuilderBase *v221;
  llvm::IRBuilderBase *v222;
  llvm::Constant *v223;
  llvm::Type *v224;
  llvm::Value *v225;
  llvm::IRBuilderBase *v226;
  char *v227;
  llvm::IRBuilderBase *v228;
  llvm::Value *v229;
  char *v230;
  AGCLLVMBuilder *v231;
  llvm::Value *v232;
  llvm::Value *SDiv;
  llvm::IRBuilderBase *v234;
  uint64_t v235;
  char *v236;
  llvm::IRBuilderBase *v237;
  llvm::Value *v238;
  llvm::CmpInst **v239;
  uint64_t *v240;
  uint64_t v241;
  llvm::Value *v242;
  llvm::IRBuilderBase *v243;
  llvm::Value *v244;
  llvm::Value *v245;
  llvm::IRBuilderBase *v246;
  llvm::Value *v247;
  llvm::Value *v248;
  llvm::Value *v249;
  llvm::Value *v250;
  char *v251;
  llvm::IRBuilderBase *v252;
  llvm::Value *v253;
  llvm::Value *v254;
  llvm::IRBuilderBase *v255;
  llvm::Value *v256;
  char *v257;
  llvm::IRBuilderBase *v258;
  llvm::Value *v259;
  llvm::Value *v260;
  llvm::Value *v261;
  char *v262;
  llvm::IRBuilderBase *v263;
  llvm::Value *v264;
  llvm::Value *v265;
  llvm::Value *v266;
  char *v267;
  llvm::IRBuilderBase *v268;
  llvm::Value *v269;
  llvm::Value *v270;
  char *v271;
  llvm::IRBuilderBase *v272;
  llvm::Value *v273;
  llvm::IRBuilderBase *v274;
  llvm::Value *v275;
  llvm::CmpInst **v276;
  uint64_t *v277;
  uint64_t v278;
  llvm::Value *v279;
  llvm::IRBuilderBase *v280;
  llvm::Value *Splat;
  llvm::IRBuilderBase *v282;
  llvm::Value *v283;
  llvm::CmpInst **v284;
  uint64_t *v285;
  uint64_t v286;
  llvm::IRBuilderBase *v287;
  llvm::Value *v288;
  llvm::IRBuilderBase *v289;
  llvm::Value *v290;
  char *v291;
  llvm::IRBuilderBase *v292;
  llvm::Value *v293;
  llvm::CmpInst **v294;
  uint64_t v295;
  llvm::Value *v296;
  char *v297;
  llvm::IRBuilderBase *v298;
  llvm::Value *v299;
  llvm::CmpInst **v300;
  uint64_t v301;
  llvm::Value *v302;
  llvm::IRBuilderBase *v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  llvm::Value *v308;
  char *v309;
  llvm::Type *v310;
  uint64_t UIToFP;
  char *v312;
  uint64_t v313;
  AGCLLVMBuilder *v314;
  llvm::Value *v315;
  AGCLLVMBuilder *v316;
  int v317;
  llvm::IRBuilderBase *v318;
  llvm::Value *v319;
  char *v320;
  llvm::IRBuilderBase *v321;
  llvm::Value *v322;
  llvm::Value *v323;
  char *v324;
  llvm::IRBuilderBase *v325;
  llvm::Value *v326;
  llvm::Value *v327;
  llvm::Value *v328;
  llvm::Value *v329;
  char *v330;
  llvm::IRBuilderBase *v331;
  llvm::Value *v332;
  char *v333;
  llvm::Type *v334;
  char *v335;
  AGCLLVMBuilder *v336;
  llvm::Value *v337;
  uint64_t v339;
  _BYTE *v340;
  llvm::Value *v341;
  _BYTE v342[32];
  __int16 v343;
  _QWORD v344[4];
  __int16 v345;
  _QWORD v346[4];
  __int16 v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  char v352;
  __int16 v353;
  uint64_t v354;

  v1 = this;
  v354 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = (char *)this + 10068;
  v4 = *((unsigned __int8 *)this + 10068);
  if (*(_BYTE *)(*((_QWORD *)v2 + 50) + 1734))
  {
    v5 = v2 + 32;
    v6 = 304;
    if (!*((_BYTE *)this + 10068))
      v6 = 240;
    v7 = *(llvm::Type **)&v5[v6];
    v8 = (llvm::Type *)llvm::PointerType::get();
    v348 = "agc.vertex_location_in_patch.uv";
    v353 = 259;
    v9 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 128))(v9);
    GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding(v1, v8, (const llvm::Twine *)&v348, v10, 0, 5, 0);
    v12 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
    v353 = 257;
    v14 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v13);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v12 + 5, v14, (uint64_t)GlobalBufferBinding, 0, (uint64_t)&v348);
    inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    v17 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v18 = llvm::IRBuilderBase::CreateCall((uint64_t)(v17 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)&v348);
    v19 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v353 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v19, v7, AlignedLoad, v18, (const llvm::Twine *)&v348);
    v21 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24));
    v353 = 257;
    v23 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v22);
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v21 + 5, v23, (uint64_t)GEP, 0, (uint64_t)&v348);
    v25 = *v3;
  }
  else
  {
    VIRead = AGCLLVMUserVertexShader::createVIRead(this);
    v27 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v28 = (uint64_t)(v27 + 40);
    v29 = *((_QWORD *)v27 + 34);
    if (v4)
    {
      v353 = 257;
      Cast = llvm::IRBuilderBase::CreateCast(v28, 49, (uint64_t)VIRead, v29, (uint64_t)&v348);
      v31 = AGCLLVMUserVertexShader::createVIRead(v1);
      v32 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v33 = *((_QWORD *)v32 + 34);
      v353 = 257;
      v34 = llvm::IRBuilderBase::CreateCast((uint64_t)(v32 + 40), 49, (uint64_t)v31, v33, (uint64_t)&v348);
      InsertElement = (llvm::Value *)llvm::UndefValue::get();
      for (i = 0; i != 4; ++i)
      {
        v36 = (uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32;
        v353 = 257;
        v37 = (llvm::IRBuilderBase *)(v36 + 8);
        v38 = (llvm::Value *)llvm::ConstantInt::get();
        if (i > 1)
          v39 = (llvm::Value *)v34;
        else
          v39 = (llvm::Value *)Cast;
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v37, v39, v38, (const llvm::Twine *)&v348);
        v41 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        v353 = 257;
        v42 = (llvm::IRBuilderBase *)(v41 + 40);
        v43 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v42, InsertElement, Element, v43, (const llvm::Twine *)&v348);
      }
    }
    else
    {
      v353 = 257;
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v28, 49, (uint64_t)VIRead, v29, (uint64_t)&v348);
    }
    v352 = 0;
    v44 = *((_DWORD *)v1 + 1256);
    v351 = 1;
    LODWORD(v348) = v44;
    v45 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
    HIDWORD(v348) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 128))(v45);
    if (*v3)
      v46 = 2;
    else
      v46 = 1;
    HIDWORD(v349) = v46;
    LODWORD(v350) = 0;
    HIDWORD(v350) = v46;
    LOBYTE(v349) = 0;
    v47 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>((uint64_t)v1 + 9464, (unint64_t)&v348);
    v48 = (_OWORD *)(*((_QWORD *)v1 + 1183) + 32 * *((unsigned int *)v1 + 2368));
    v49 = v47[1];
    *v48 = *v47;
    v48[1] = v49;
    ++*((_DWORD *)v1 + 2368);
    v25 = *v3;
    if (*v3)
      v50 = 2;
    else
      v50 = 1;
    *((_DWORD *)v1 + 1256) += v50;
  }
  v51 = *(_QWORD *)(*(_QWORD *)v1 - 24);
  v340 = v3;
  if (v25)
  {
    v52 = 1;
    v53 = AGCLLVMBuilder::subrangeVector((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + v51 + 32), InsertElement, 0, 2, 1);
    v54 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v55 = *((_QWORD *)v54 + 35);
    v353 = 257;
    v56 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v54 + 40), 39, v53, v55, (uint64_t)&v348);
    v57 = AGCLLVMBuilder::subrangeVector((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32), InsertElement, 2u, 2, 1);
    v58 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v59 = *((_QWORD *)v58 + 35);
    v353 = 257;
    v339 = llvm::IRBuilderBase::CreateCast((uint64_t)(v58 + 40), 40, v57, v59, (uint64_t)&v348);
    do
    {
      v60 = v52;
      v61 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v62 = (llvm::IRBuilderBase *)(v61 + 40);
      v63 = (llvm::Value *)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateExtractElement(v62, v56, v63, (const llvm::Twine *)&v348);
      v64 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v65 = (llvm::IRBuilderBase *)(v64 + 40);
      v66 = (llvm::Value *)llvm::ConstantInt::get();
      v67 = v56;
      v68 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v65, InsertElement, v66, (const llvm::Twine *)&v348);
      v69 = llvm::ConstantInt::get();
      v343 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v65, 32, v68, v69, (uint64_t)v342);
      llvm::ConstantInt::get();
      v347 = 257;
      Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      v71 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v72 = (llvm::IRBuilderBase *)(v71 + 40);
      v73 = (llvm::Value *)llvm::ConstantInt::get();
      v56 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v72, v67, Select, v73, (const llvm::Twine *)&v348);
      v52 = 0;
    }
    while ((v60 & 1) != 0);
    v74 = (llvm::Value *)v339;
  }
  else
  {
    v75 = *(_QWORD *)((char *)v1 + v51 + 280);
    v353 = 257;
    llvm::IRBuilderBase::CreateCast((uint64_t)v1 + v51 + 40, 39, (uint64_t)InsertElement, v75, (uint64_t)&v348);
    v76 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v77 = (uint64_t *)(v76 + 40);
    v78 = (AGCLLVMBuilder *)(v76 + 32);
    v79 = (llvm::Value *)llvm::ConstantInt::get();
    v80 = AGCLLVMBuilder::splat(v78, 2, v79);
    v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v77, 32, (llvm::CmpInst **)InsertElement, (uint64_t)v80, (uint64_t)&v348);
    v81 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32);
    v82 = (llvm::Value *)llvm::ConstantInt::get();
    AGCLLVMBuilder::splat(v81, 2, v82);
    v343 = 257;
    v56 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    v74 = 0;
  }
  v83 = *((_DWORD *)v1 + 2513);
  if (!v83)
  {
    v84 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v85 = (llvm::Value *)llvm::ConstantInt::get();
    v86 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v87 = (llvm::IRBuilderBase *)(v86 + 40);
    v88 = (llvm::Value *)llvm::ConstantInt::get();
    v89 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v87, v56, v88, (const llvm::Twine *)&v348);
    v90 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v343 = 257;
    v91 = v56;
    v92 = (llvm::IRBuilderBase *)(v90 + 40);
    v93 = (llvm::Value *)llvm::ConstantInt::get();
    v94 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v92, v91, v93, (const llvm::Twine *)v342);
    v347 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v87, v89, v94, (const llvm::Twine *)v346);
    v345 = 257;
    Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v84, v85, Add, (const llvm::Twine *)v344);
    v97 = AGCLLVMBuilder::extendVector((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32), v91, 3);
    v98 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v99 = (llvm::IRBuilderBase *)(v98 + 40);
    v100 = (llvm::Value *)llvm::ConstantInt::get();
    v56 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v99, v97, Sub, v100, (const llvm::Twine *)&v348);
    if (!*v3)
    {
      v83 = *((_DWORD *)v1 + 2513);
      goto LABEL_36;
    }
    v101 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v102 = (llvm::Value *)llvm::ConstantInt::get();
    v103 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v104 = (llvm::IRBuilderBase *)(v103 + 40);
    v105 = (llvm::Value *)llvm::ConstantInt::get();
    v106 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v104, v74, v105, (const llvm::Twine *)&v348);
    v107 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v343 = 257;
    v108 = v56;
    v109 = (llvm::IRBuilderBase *)(v107 + 40);
    v110 = (llvm::Value *)llvm::ConstantInt::get();
    v111 = v109;
    v56 = v108;
    v112 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v111, v74, v110, (const llvm::Twine *)v342);
    v347 = 257;
    v113 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v104, v106, v112, (const llvm::Twine *)v346);
    v345 = 257;
    v114 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v101, v102, v113, (const llvm::Twine *)v344);
    v115 = AGCLLVMBuilder::extendVector((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32), v74, 3);
    v116 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v117 = (llvm::IRBuilderBase *)(v116 + 40);
    v118 = (llvm::Value *)llvm::ConstantInt::get();
    v74 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v117, v115, v114, v118, (const llvm::Twine *)&v348);
    v83 = *((_DWORD *)v1 + 2513);
  }
  if (*v3)
  {
    v119 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    if (v83)
    {
      v353 = 257;
      v120 = (llvm::Value *)llvm::ConstantInt::get();
      v121 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v119, v56, v120, (const llvm::Twine *)&v348);
      v122 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v123 = (llvm::IRBuilderBase *)(v122 + 40);
      v124 = (llvm::Value *)llvm::ConstantInt::get();
      v125 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v123, v74, v124, (const llvm::Twine *)&v348);
      v126 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v353 = 257;
      v127 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateOr(v126, v121, v125, (const llvm::Twine *)&v348);
      v128 = llvm::ConstantInt::get();
      v343 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v126, 32, v127, v128, (uint64_t)v342);
      InternalPerPatchID = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)v1, 1);
      v130 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 32);
      InternalPerPatchData = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)v1, 0, InternalPerPatchID);
      AGCLLVMBuilder::splat(v130, 2, InternalPerPatchData);
      v132 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v133 = (llvm::Value *)llvm::ConstantInt::get();
      v353 = 257;
      v134 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v132, InternalPerPatchID, v133, (const llvm::Twine *)&v348);
      v135 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v136 = (llvm::Value *)llvm::ConstantInt::get();
      v353 = 257;
      Xor = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v135, v134, v136, (const llvm::Twine *)&v348);
      v138 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)v1, 1, v134);
      v139 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)v1, 1, Xor);
      v140 = v74;
      v141 = v56;
      v142 = (llvm::Value *)llvm::UndefValue::get();
      v143 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v144 = (llvm::IRBuilderBase *)(v143 + 40);
      v145 = (llvm::Value *)llvm::ConstantInt::get();
      v146 = v144;
      v3 = v340;
      v147 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v146, v142, v138, v145, (const llvm::Twine *)&v348);
      v148 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v149 = (llvm::IRBuilderBase *)(v148 + 40);
      v150 = (llvm::Value *)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateInsertElement(v149, v147, v139, v150, (const llvm::Twine *)&v348);
      v353 = 257;
      v341 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      v151 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v152 = (llvm::IRBuilderBase *)(v151 + 40);
      v153 = (llvm::Value *)llvm::ConstantInt::get();
      v154 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v152, v141, v153, (const llvm::Twine *)&v348);
      v155 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v156 = (llvm::IRBuilderBase *)(v155 + 40);
      v157 = (llvm::Value *)llvm::ConstantInt::get();
      v158 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v156, v140, v157, (const llvm::Twine *)&v348);
      v159 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v353 = 257;
      v160 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateOr(v159, v154, v158, (const llvm::Twine *)&v348);
      v161 = llvm::ConstantInt::get();
      v343 = 257;
      ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v159, 33, v160, v161, (uint64_t)v342);
      v163 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      IsOuterEdgeDraw = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getIsOuterEdgeDraw(v1);
      v353 = 257;
      llvm::IRBuilderBase::CreateAnd(v163, ICmp, IsOuterEdgeDraw, (const llvm::Twine *)&v348);
      v165 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)v1, 1);
      v166 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v167 = (llvm::Value *)llvm::ConstantInt::get();
      v353 = 257;
      v168 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v166, v165, v167, (const llvm::Twine *)&v348);
      v169 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)v1, 2, v168);
      OneOverTessIndexTableEntry = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getOneOverTessIndexTableEntry(v1, v169);
      v171 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v172 = (llvm::Value *)llvm::ConstantInt::get();
      v173 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v171 + 40), OneOverTessIndexTableEntry, v172, (const llvm::Twine *)&v348);
      v343 = 257;
      v174 = (llvm::Value *)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v171 + 40), v141, v173, v174, (const llvm::Twine *)v342);
      v175 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v176 = (llvm::Value *)llvm::ConstantInt::get();
      v177 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v175 + 40), OneOverTessIndexTableEntry, v176, (const llvm::Twine *)&v348);
      v343 = 257;
      v178 = (llvm::Value *)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v175 + 40), v140, v177, v178, (const llvm::Twine *)v342);
      v353 = 257;
      v56 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      v353 = 257;
      v179 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      v180 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v353 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v180, v179, v341, (const llvm::Twine *)&v348);
      v182 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v183 = (llvm::IRBuilderBase *)(v182 + 40);
      v184 = (AGCLLVMBuilder *)(v182 + 32);
      v185 = (llvm::Value *)llvm::ConstantInt::get();
      v186 = AGCLLVMBuilder::splat(v184, 2, v185);
      v353 = 257;
    }
    else
    {
      v353 = 257;
      v187 = (llvm::Value *)llvm::ConstantInt::get();
      v188 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v119, v56, v187, (const llvm::Twine *)&v348);
      v189 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v190 = (llvm::IRBuilderBase *)(v189 + 40);
      v191 = (llvm::Value *)llvm::ConstantInt::get();
      v192 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v190, v74, v191, (const llvm::Twine *)&v348);
      v193 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v353 = 257;
      v194 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateOr(v193, v188, v192, (const llvm::Twine *)&v348);
      v195 = llvm::ConstantInt::get();
      v343 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v193, 32, v194, v195, (uint64_t)v342);
      v196 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)v1, 1);
      AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)v1, 0, v196);
      v197 = (llvm::Value *)llvm::ConstantInt::get();
      AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)v1, 1, v197);
      v353 = 257;
      v198 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      if (*((_DWORD *)v1 + 2514) == 3)
      {
        v348 = (const char *)llvm::ConstantInt::get();
        v349 = llvm::ConstantInt::get();
        v350 = llvm::ConstantInt::get();
        llvm::ConstantVector::get();
        v348 = (const char *)llvm::ConstantInt::get();
        v349 = llvm::ConstantInt::get();
        v350 = llvm::ConstantInt::get();
        llvm::ConstantVector::get();
        v348 = (const char *)llvm::ConstantInt::get();
        v349 = llvm::ConstantInt::get();
        v350 = llvm::ConstantInt::get();
        llvm::ConstantVector::get();
        v348 = (const char *)llvm::ConstantInt::get();
        v349 = llvm::ConstantInt::get();
        v350 = llvm::ConstantInt::get();
        llvm::ConstantVector::get();
        v199 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
        v353 = 257;
        v200 = (llvm::IRBuilderBase *)(v199 + 40);
        v201 = (llvm::Value *)llvm::ConstantInt::get();
        v202 = (llvm::Type ***)v1;
        v203 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v200, v56, v201, (const llvm::Twine *)&v348);
        v204 = llvm::ConstantInt::get();
        v343 = 257;
        v205 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v200, 32, v203, v204, (uint64_t)v342);
        v206 = (char *)v202 + (_QWORD)*(*v202 - 3);
        v353 = 257;
        v207 = (llvm::IRBuilderBase *)(v206 + 40);
        v208 = (llvm::Value *)llvm::ConstantInt::get();
        v209 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v207, v56, v208, (const llvm::Twine *)&v348);
        v210 = llvm::ConstantInt::get();
        v343 = 257;
        v211 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v207, 32, v209, v210, (uint64_t)v342);
        v212 = (llvm::IRBuilderBase *)((char *)v202 + (_QWORD)*(*v202 - 3) + 40);
        v353 = 257;
        v213 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v212, v205, v211, (const llvm::Twine *)&v348);
        v214 = (llvm::CmpInst **)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID(v202, 1);
        v215 = (uint64_t *)((char *)v202 + (_QWORD)*(*v202 - 3) + 40);
        v216 = llvm::ConstantInt::get();
        v353 = 257;
        v217 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v215, 32, v214, v216, (uint64_t)&v348);
        v218 = (uint64_t *)((char *)v202 + (_QWORD)*(*v202 - 3) + 40);
        v219 = llvm::ConstantInt::get();
        v353 = 257;
        v220 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v218, 32, v214, v219, (uint64_t)&v348);
        v221 = (llvm::IRBuilderBase *)((char *)v202 + (_QWORD)*(*v202 - 3) + 40);
        v353 = 257;
        llvm::IRBuilderBase::CreateAnd(v221, v217, v213, (const llvm::Twine *)&v348);
        v222 = (llvm::IRBuilderBase *)((char *)v202 + (_QWORD)*(*v202 - 3) + 40);
        v353 = 257;
        llvm::IRBuilderBase::CreateAnd(v222, v220, v213, (const llvm::Twine *)&v348);
        v223 = (llvm::Constant *)llvm::FixedVectorType::get();
        llvm::Constant::getNullValue(v223, v224);
        v353 = 257;
        llvm::IRBuilderBase::CreateSelect();
        v353 = 257;
        v225 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
        v226 = (llvm::IRBuilderBase *)((char *)v202 + (_QWORD)*(*v202 - 3) + 40);
        v353 = 257;
        v74 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v226, v74, v225, (const llvm::Twine *)&v348);
        v353 = 257;
        v1 = (AGCLLVMAGPVertexShaderPostTessellationSW *)v202;
        llvm::IRBuilderBase::CreateSelect();
        v353 = 257;
        v3 = v340;
        v56 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      }
      v227 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v228 = (llvm::IRBuilderBase *)(v227 + 40);
      v229 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)(v227 + 32), 3, v198);
      v353 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v228, v74, v229, (const llvm::Twine *)&v348);
      v230 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v183 = (llvm::IRBuilderBase *)(v230 + 40);
      v231 = (AGCLLVMBuilder *)(v230 + 32);
      v232 = (llvm::Value *)llvm::ConstantInt::get();
      v186 = AGCLLVMBuilder::splat(v231, 3, v232);
      v353 = 257;
    }
    SDiv = (llvm::Value *)llvm::IRBuilderBase::CreateSDiv(v183, Mul, v186, (const llvm::Twine *)&v348);
    v234 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v353 = 257;
    v235 = llvm::IRBuilderBase::CreateAdd(v234, v56, SDiv, (const llvm::Twine *)&v348);
    goto LABEL_38;
  }
LABEL_36:
  if (v83 != 1)
    goto LABEL_39;
  v236 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
  v353 = 257;
  v237 = (llvm::IRBuilderBase *)(v236 + 40);
  v238 = (llvm::Value *)llvm::ConstantInt::get();
  v239 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v237, v56, v238, (const llvm::Twine *)&v348);
  v240 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v241 = llvm::ConstantInt::get();
  v353 = 257;
  v242 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v240, 33, v239, v241, (uint64_t)&v348);
  v243 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v244 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getIsOuterEdgeDraw(v1);
  v353 = 257;
  llvm::IRBuilderBase::CreateAnd(v243, v242, v244, (const llvm::Twine *)&v348);
  v245 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)v1, 1);
  v246 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
  v247 = (llvm::Value *)llvm::ConstantInt::get();
  v353 = 257;
  v248 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v246, v245, v247, (const llvm::Twine *)&v348);
  v249 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData((uint64_t)v1, 2, v248);
  v250 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getOneOverTessIndexTableEntry(v1, v249);
  v251 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
  v353 = 257;
  v252 = (llvm::IRBuilderBase *)(v251 + 40);
  v253 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateInsertElement(v252, v56, v250, v253, (const llvm::Twine *)&v348);
  v353 = 257;
  v235 = llvm::IRBuilderBase::CreateSelect();
LABEL_38:
  v56 = (llvm::Value *)v235;
LABEL_39:
  v254 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)v1, 1);
  if (*((_DWORD *)v1 + 2513))
  {
    v255 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v256 = (llvm::Value *)llvm::ConstantInt::get();
    v257 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v258 = (llvm::IRBuilderBase *)(v257 + 40);
    v259 = (llvm::Value *)llvm::ConstantInt::get();
    v260 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v258, v56, v259, (const llvm::Twine *)&v348);
    v343 = 257;
    v261 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v255, v256, v260, (const llvm::Twine *)v342);
    v262 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v263 = (llvm::IRBuilderBase *)(v262 + 40);
    v264 = (llvm::Value *)llvm::ConstantInt::get();
    v265 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v263, v56, v264, (const llvm::Twine *)&v348);
    v266 = (llvm::Value *)llvm::UndefValue::get();
    v267 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v268 = (llvm::IRBuilderBase *)(v267 + 40);
    v269 = (llvm::Value *)llvm::ConstantInt::get();
    v270 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v268, v266, v261, v269, (const llvm::Twine *)&v348);
    v271 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v272 = (llvm::IRBuilderBase *)(v271 + 40);
    v273 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateInsertElement(v272, v270, v265, v273, (const llvm::Twine *)&v348);
    v274 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v275 = (llvm::Value *)llvm::ConstantInt::get();
    v353 = 257;
    v276 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v274, v254, v275, (const llvm::Twine *)&v348);
    v277 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v278 = llvm::ConstantInt::get();
    v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v277, 33, v276, v278, (uint64_t)&v348);
    v353 = 257;
    v279 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    v280 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    llvm::ConstantInt::get();
    Splat = (llvm::Value *)llvm::ConstantDataVector::getSplat();
    v353 = 257;
    llvm::IRBuilderBase::CreateSub(v280, Splat, v279, (const llvm::Twine *)&v348);
    v282 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v283 = (llvm::Value *)llvm::ConstantInt::get();
    v353 = 257;
    v284 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v282, v254, v283, (const llvm::Twine *)&v348);
    v285 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v286 = llvm::ConstantInt::get();
    v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v285, 33, v284, v286, (uint64_t)&v348);
    v353 = 257;
  }
  else
  {
    v346[0] = llvm::ConstantInt::get();
    v346[1] = llvm::ConstantInt::get();
    v346[2] = llvm::ConstantInt::get();
    v287 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v288 = (llvm::Value *)llvm::ConstantVector::get();
    v353 = 257;
    llvm::IRBuilderBase::CreateShuffleVector(v287, v56, v56, v288, (const llvm::Twine *)&v348);
    v344[0] = llvm::ConstantInt::get();
    v344[1] = llvm::ConstantInt::get();
    v344[2] = llvm::ConstantInt::get();
    v289 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v290 = (llvm::Value *)llvm::ConstantVector::get();
    v353 = 257;
    llvm::IRBuilderBase::CreateShuffleVector(v289, v56, v56, v290, (const llvm::Twine *)&v348);
    v291 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v292 = (llvm::IRBuilderBase *)(v291 + 40);
    v293 = (llvm::Value *)llvm::ConstantInt::get();
    v294 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v292, v56, v293, (const llvm::Twine *)&v348);
    v295 = llvm::ConstantInt::get();
    v343 = 257;
    v296 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v292, 32, v294, v295, (uint64_t)v342);
    v297 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v353 = 257;
    v298 = (llvm::IRBuilderBase *)(v297 + 40);
    v299 = (llvm::Value *)llvm::ConstantInt::get();
    v300 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement(v298, v56, v299, (const llvm::Twine *)&v348);
    v301 = llvm::ConstantInt::get();
    v343 = 257;
    v302 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v298, 32, v300, v301, (uint64_t)v342);
    v303 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v353 = 257;
    llvm::IRBuilderBase::CreateAnd(v303, v296, v302, (const llvm::Twine *)&v348);
    v304 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v305 = llvm::ConstantInt::get();
    v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v304, 32, (llvm::CmpInst **)v254, v305, (uint64_t)&v348);
    v306 = (uint64_t *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
    v307 = llvm::ConstantInt::get();
    v353 = 257;
    llvm::IRBuilderBase::CreateICmp(v306, 32, (llvm::CmpInst **)v254, v307, (uint64_t)&v348);
    v353 = 257;
    llvm::IRBuilderBase::CreateSelect();
    v353 = 257;
    llvm::IRBuilderBase::CreateSelect();
    v353 = 257;
    v3 = v340;
  }
  v308 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  if (*((_DWORD *)v1 + 2513))
  {
    v309 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v310 = (llvm::Type *)*((_QWORD *)v309 + 32);
    v353 = 257;
    UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(v309 + 40), v308, v310, (const llvm::Twine *)&v348);
    v312 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v313 = (uint64_t)(v312 + 40);
    v314 = (AGCLLVMBuilder *)(v312 + 32);
    v315 = (llvm::Value *)llvm::ConstantFP::get();
    v316 = v314;
    v317 = 2;
  }
  else
  {
    if (*v3)
    {
      v318 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 40);
      v319 = (llvm::Value *)llvm::ConstantInt::get();
      v320 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v321 = (llvm::IRBuilderBase *)(v320 + 40);
      v322 = (llvm::Value *)llvm::ConstantInt::get();
      v323 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v321, v308, v322, (const llvm::Twine *)&v348);
      v324 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v343 = 257;
      v325 = (llvm::IRBuilderBase *)(v324 + 40);
      v326 = (llvm::Value *)llvm::ConstantInt::get();
      v327 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v325, v308, v326, (const llvm::Twine *)v342);
      v347 = 257;
      v328 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v321, v323, v327, (const llvm::Twine *)v346);
      v345 = 257;
      v329 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v318, v319, v328, (const llvm::Twine *)v344);
      v330 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      v353 = 257;
      v331 = (llvm::IRBuilderBase *)(v330 + 40);
      v332 = (llvm::Value *)llvm::ConstantInt::get();
      v308 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v331, v308, v329, v332, (const llvm::Twine *)&v348);
    }
    v333 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v334 = (llvm::Type *)*((_QWORD *)v333 + 37);
    v353 = 257;
    UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(v333 + 40), v308, v334, (const llvm::Twine *)&v348);
    v335 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v313 = (uint64_t)(v335 + 40);
    v336 = (AGCLLVMBuilder *)(v335 + 32);
    v315 = (llvm::Value *)llvm::ConstantFP::get();
    v316 = v336;
    v317 = 3;
  }
  v337 = AGCLLVMBuilder::splat(v316, v317, v315);
  v353 = 257;
  return llvm::IRBuilderBase::CreateFMul(v313, UIToFP, (uint64_t)v337, (uint64_t)&v348);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getInstanceID(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  llvm::Value *TessConstant;
  llvm::Value *v3;
  llvm::Value *InternalInstanceID;
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *Mul;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  AGCLLVMObject *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t result;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *InternalPerPatchID;
  uint64_t v21;
  uint64_t v22;
  AGCLLVMObject *v23;
  llvm::Value *v24;
  llvm::IRBuilderBase *v25;
  llvm::Value *v26;
  _BYTE v27[32];
  __int16 v28;

  switch(*((_DWORD *)this + 2515))
  {
    case 0:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xA);
      v3 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xB);
      InternalInstanceID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID(this);
      v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v6 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)3);
      v7 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)5);
      v28 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v27);
      v9 = AGCLLVMAGPVertexShaderPostTessellationSW::buildMulShiftMod(this, InternalInstanceID, Mul, TessConstant, v3);
      v10 = AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      v11 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)7);
      v12 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v13 = (llvm::Value *)v9;
      v14 = (llvm::Value *)v10;
      goto LABEL_7;
    case 1:
      v16 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)8);
      v17 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)9);
      v18 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)5);
      v19 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID(this);
      InternalPerPatchID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::buildMulShiftMod(this, v19, v18, v16, v17);
      goto LABEL_8;
    case 2:
      InternalPerPatchID = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 0);
      goto LABEL_8;
    case 3:
      v21 = AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      v22 = AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)7);
      v23 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v13 = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 0);
      v12 = v23;
      v14 = (llvm::Value *)v21;
      v11 = (llvm::Value *)v22;
LABEL_7:
      InternalPerPatchID = (llvm::Value *)AGCLLVMObject::buildMulShiftDiv(v12, v13, v14, v11);
LABEL_8:
      v24 = InternalPerPatchID;
      v25 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v26 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)4);
      v28 = 257;
      result = llvm::IRBuilderBase::CreateAdd(v25, v24, v26, (const llvm::Twine *)v27);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getDrawPatchIndex(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  llvm::Value *TessConstant;
  llvm::Value *v3;
  llvm::Value *v4;
  llvm::Value *InternalInstanceID;
  llvm::Value *v6;
  llvm::Value *InternalPerPatchID;
  llvm::IRBuilderBase *v8;
  llvm::Value *v9;
  _BYTE v11[32];
  __int16 v12;

  switch(*((_DWORD *)this + 2515))
  {
    case 0:
    case 2:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      v3 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)7);
      v4 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)3);
      InternalInstanceID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID(this);
      goto LABEL_6;
    case 1:
      InternalPerPatchID = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 0);
      goto LABEL_7;
    case 3:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      v3 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)7);
      v4 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)3);
      InternalInstanceID = AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)this, 0);
LABEL_6:
      InternalPerPatchID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::buildMulShiftMod(this, InternalInstanceID, v4, TessConstant, v3);
LABEL_7:
      v6 = InternalPerPatchID;
      break;
    default:
      v6 = 0;
      break;
  }
  v8 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v9 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)2);
  v12 = 257;
  return llvm::IRBuilderBase::CreateAdd(v8, v6, v9, (const llvm::Twine *)v11);
}

void `virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationSW::~AGCLLVMAGPVertexShaderPostTessellationSW(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E6DC40;
  v1[1332] = &unk_1E7E6DFB8;
  v1[1336] = &unk_1E7E6E0A8;
  v2 = v1[1329];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1327));
  v4 = v1[1326];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1324));
  v6 = v1[1322];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1320));
  v8 = v1[1319];
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1317));
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation((AGCLLVMAGPVertexShaderPostTessellation *)v1, (uint64_t *)off_1E7E6E0B8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1332));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E6DC40;
  v1[1332] = &unk_1E7E6DFB8;
  v1[1336] = &unk_1E7E6E0A8;
  v2 = v1[1329];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1327));
  v4 = v1[1326];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1324));
  v6 = v1[1322];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1320));
  v8 = v1[1319];
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 1317));
  AGCLLVMAGPVertexShaderPostTessellation::~AGCLLVMAGPVertexShaderPostTessellation((AGCLLVMAGPVertexShaderPostTessellation *)v1, (uint64_t *)off_1E7E6E0B8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1332));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMAGPVertexShaderPostTessellationSW::dumpType(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  return "post-tessellation-vertex-sw";
}

llvm::Value *AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID(llvm::Type ***this, int a2)
{
  llvm::Value *TessConstant;
  AGCLLVMAGPVertexShaderPostTessellationSW *v5;
  uint64_t v6;
  uint64_t *v7;
  llvm::Value *v8;
  char *v9;
  llvm::Value *InternalInstanceID;
  llvm::Value *InternalDrawIndexOffset;
  llvm::Value *Add;
  uint64_t v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t v18;
  llvm::Type **v19;
  llvm::Type *v20;
  uint64_t v21;
  unsigned int v22;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v24;
  llvm::Type *v25;
  uint64_t *AlignedLoad;
  char v27;
  char v28;
  char *v29;
  llvm::Type **GEP;
  uint64_t *v31;
  llvm::Value *v32;
  llvm::Type *v33;
  llvm::Value *LShr;
  llvm::IRBuilderBase *v35;
  llvm::Value *v36;
  llvm::IRBuilderBase *v37;
  llvm::Value *v38;
  uint64_t *v40[2];
  _QWORD v41[4];
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  switch(*((_DWORD *)this + 2515))
  {
    case 0:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xA);
      v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)this;
      v6 = 11;
      goto LABEL_6;
    case 1:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)8);
      v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)this;
      v6 = 9;
      goto LABEL_6;
    case 2:
      TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)6);
      v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)this;
      v6 = 7;
LABEL_6:
      v8 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(v5, (llvm::Value *)v6);
      v9 = (char *)*(*this - 3) + (_QWORD)this;
      InternalInstanceID = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID((AGCLLVMAGPVertexShaderPostTessellationSW *)this);
      InternalDrawIndexOffset = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalDrawIndexOffset((AGCLLVMAGPVertexShaderPostTessellationSW *)this);
      v42 = 257;
      Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v9 + 40), InternalInstanceID, InternalDrawIndexOffset, (const llvm::Twine *)v41);
      v13 = AGCLLVMObject::buildMulShiftDiv((AGCLLVMObject *)v9, Add, TessConstant, v8);
      goto LABEL_8;
    case 3:
      v14 = (llvm::IRBuilderBase *)((char *)this + (_QWORD)*(*this - 3) + 40);
      v15 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID((AGCLLVMAGPVertexShaderPostTessellationSW *)this);
      v16 = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalDrawIndexOffset((AGCLLVMAGPVertexShaderPostTessellationSW *)this);
      v42 = 257;
      v13 = llvm::IRBuilderBase::CreateAdd(v14, v15, v16, (const llvm::Twine *)v41);
LABEL_8:
      v7 = (uint64_t *)v13;
      break;
    default:
      v7 = 0;
      break;
  }
  v41[0] = *(llvm::Type ***)((char *)this + (_QWORD)*(*this - 3) + 232);
  v18 = llvm::StructType::get();
  v19 = this[1319];
  if (!v19)
  {
    v20 = (llvm::Type *)llvm::PointerType::get();
    v41[0] = "agc.internal_per_patch_id";
    v42 = 259;
    v21 = (*(_QWORD **)((char *)this + (_QWORD)*(*this - 3) + 400))[103];
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 64))(v21);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)this, v20, (const llvm::Twine *)v41, v22, 0, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(this + 1317), (uint64_t)GlobalBufferBinding);
    v19 = this[1319];
  }
  v24 = (uint64_t *)((char *)this + (_QWORD)*(*this - 3));
  v42 = 257;
  v25 = AGCLLVMBuilder::tryDeducePointeeType(v19, v17);
  AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v24 + 5, v25, (uint64_t)v19, 0, (uint64_t)v41);
  if (a2 == 1)
  {
    v28 = 0;
    v27 = 1;
  }
  else if (a2)
  {
    v28 = 0;
    v27 = 1;
  }
  else
  {
    v27 = 0;
    v28 = 1;
  }
  v29 = (char *)this + (_QWORD)*(*this - 3);
  v40[0] = v7;
  v40[1] = (uint64_t *)llvm::ConstantInt::get();
  v42 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v29 + 40), v18, AlignedLoad, v40, 2, (uint64_t)v41);
  v31 = (uint64_t *)((char *)this + (_QWORD)*(*this - 3));
  v42 = 257;
  v33 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v32);
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v31 + 5, v33, (uint64_t)GEP, 0, (uint64_t)v41);
  if ((v27 & 1) == 0)
  {
    v35 = (llvm::IRBuilderBase *)((char *)this + (_QWORD)*(*this - 3) + 40);
    v36 = (llvm::Value *)llvm::ConstantInt::get();
    v42 = 257;
    LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v35, LShr, v36, (const llvm::Twine *)v41);
  }
  if ((v28 & 1) == 0)
  {
    v37 = (llvm::IRBuilderBase *)((char *)this + (_QWORD)*(*this - 3) + 40);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v42 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v37, LShr, v38, (const llvm::Twine *)v41);
  }
  return LShr;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getInternalInstanceID(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  uint64_t inserted;
  char *v3;
  llvm::Value *v4;
  llvm::IRBuilderBase *v5;
  llvm::Value *TessConstant;
  _BYTE v8[32];
  __int16 v9;

  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = 257;
  v4 = llvm::IRBuilderBase::CreateCall((uint64_t)(v3 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v8);
  v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  TessConstant = (llvm::Value *)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, 0);
  v9 = 257;
  return llvm::IRBuilderBase::CreateAdd(v5, v4, TessConstant, (const llvm::Twine *)v8);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::buildMulShiftMod(AGCLLVMAGPVertexShaderPostTessellationSW *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value *a5)
{
  llvm::Value *v8;
  llvm::IRBuilderBase *v9;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v11;
  _BYTE v13[32];
  __int16 v14;

  v8 = (llvm::Value *)AGCLLVMObject::buildMulShiftDiv((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), a2, a4, a5);
  v9 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v14 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, v8, a3, (const llvm::Twine *)v13);
  v11 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v14 = 257;
  return llvm::IRBuilderBase::CreateSub(v11, a2, Mul, (const llvm::Twine *)v13);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getInternalDrawIndexOffset(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  llvm::Type *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  llvm::Value *GlobalBufferBinding;
  char *v7;
  llvm::Type *v8;
  uint64_t *v9;
  uint64_t AlignedLoad;
  _WORD v12[20];
  _QWORD v13[4];
  __int16 v14;

  v2 = (llvm::Type *)llvm::PointerType::get();
  v3 = *((_QWORD *)this + 1329);
  if (!v3)
  {
    v13[0] = "agc.internal_draw_index_offset";
    v14 = 259;
    v4 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 80))(v4);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v2, (const llvm::Twine *)v13, v5, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10616), (uint64_t)GlobalBufferBinding);
    v3 = *((_QWORD *)this + 1329);
  }
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v8 = (llvm::Type *)*((_QWORD *)v7 + 29);
  v9 = (uint64_t *)(v7 + 40);
  v14 = 257;
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v7 + 5, v2, v3, 0, (uint64_t)v13);
  v12[16] = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad(v9, v8, AlignedLoad, 0, (uint64_t)v12);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getIsOuterEdgeDraw(AGCLLVMAGPVertexShaderPostTessellationSW *this)
{
  uint64_t *v1;
  llvm::CmpInst **TessConstant;
  uint64_t v3;
  _BYTE v5[32];
  __int16 v6;

  v1 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  TessConstant = (llvm::CmpInst **)AGCLLVMAGPVertexShaderPostTessellation::getTessConstant(this, (llvm::Value *)0xC);
  v3 = llvm::ConstantInt::get();
  v6 = 257;
  return llvm::IRBuilderBase::CreateICmp(v1, 33, TessConstant, v3, (uint64_t)v5);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchData(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  llvm::Value *v5;
  uint64_t *InternalPerPatchID;
  llvm::Type **v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  llvm::Type *v13;
  uint64_t v14;
  unsigned int v15;
  llvm::Value *GlobalBufferBinding;
  uint64_t v17;
  llvm::Type *v18;
  uint64_t *AlignedLoad;
  llvm::IRBuilderBase *v20;
  llvm::Value *v21;
  uint64_t *Add;
  uint64_t v23;
  uint64_t v24;
  llvm::Type **GEP;
  uint64_t v26;
  llvm::Value *v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v33[3];
  _QWORD v34[4];
  __int16 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  InternalPerPatchID = (uint64_t *)AGCLLVMAGPVertexShaderPostTessellationSW::getInternalPerPatchID((llvm::Type ***)a1, 0);
  v7 = *(llvm::Type ***)(a1 + 10576);
  if (!v7)
  {
    v8 = 4;
    if (*(_DWORD *)(a1 + 10052) == 1)
    {
      if (*(_BYTE *)(a1 + 10068))
        v9 = 6;
      else
        v9 = 0;
      if (*(_BYTE *)(a1 + 10068))
        v10 = 4;
      else
        v10 = -1;
      if (*(_BYTE *)(a1 + 10068))
        v11 = 0;
      else
        v11 = -1;
      if (*(_BYTE *)(a1 + 10068))
        v8 = 8;
      else
        v8 = 2;
    }
    else
    {
      v11 = 0;
      v10 = 3;
      v9 = -1;
    }
    *(_DWORD *)(a1 + 10640) = v11;
    *(_DWORD *)(a1 + 10644) = v10;
    *(_DWORD *)(a1 + 10648) = v9;
    llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 224), (llvm::Type *)v8);
    v12 = llvm::StructType::get();
    v13 = (llvm::Type *)llvm::PointerType::get();
    v34[0] = "agc.internal_per_patch_data";
    v35 = 259;
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 824);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v13, (const llvm::Twine *)v34, v15, 0, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 10560), (uint64_t)GlobalBufferBinding);
    *(_QWORD *)(a1 + 10584) = v12;
    v7 = *(llvm::Type ***)(a1 + 10576);
  }
  v17 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  v35 = 257;
  v18 = AGCLLVMBuilder::tryDeducePointeeType(v7, v5);
  AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v17 + 40), v18, (uint64_t)v7, 0, (uint64_t)v34);
  v20 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  v35 = 257;
  Add = (uint64_t *)llvm::IRBuilderBase::CreateAdd(v20, a3, v21, (const llvm::Twine *)v34);
  v23 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  v24 = *(_QWORD *)(a1 + 10584);
  v33[0] = InternalPerPatchID;
  v33[1] = (uint64_t *)llvm::ConstantInt::get();
  v33[2] = Add;
  v35 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v23 + 40, v24, AlignedLoad, v33, 3, (uint64_t)v34);
  v26 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  v35 = 257;
  v28 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v27);
  v29 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v26 + 40), v28, (uint64_t)GEP, 0, (uint64_t)v34);
  v30 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  v31 = *(_QWORD *)(v30 + 232);
  v35 = 257;
  return llvm::IRBuilderBase::CreateCast(v30 + 40, 39, v29, v31, (uint64_t)v34);
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::getOneOverTessIndexTableEntry(AGCLLVMAGPVertexShaderPostTessellationSW *this, llvm::Value *a2)
{
  uint64_t *v2;
  llvm::Type **v4;
  llvm::ValueHandleBase *v5;
  _BYTE *v6;
  uint64_t v7;
  llvm::ArrayType *v8;
  uint64_t v9;
  int v10;
  llvm::Type *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  llvm::Value *v18;
  llvm::Type *v19;
  llvm::Type **GEP;
  llvm::Value *v21;
  llvm::Type *v22;
  llvm::ArrayType *v24;
  uint64_t *v26[2];
  _QWORD v27[4];
  __int16 v28;
  void *v29;
  uint64_t v30;
  _WORD v31[64];
  uint64_t v32;

  v2 = (uint64_t *)a2;
  v32 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::Type **)*((_QWORD *)this + 1326);
  if (!v4)
  {
    v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10592);
    v6 = (char *)this + 10068;
    v7 = 248;
    if (!*((_BYTE *)this + 10068))
      v7 = 200;
    v8 = *(llvm::ArrayType **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + v7 + 32);
    v9 = *((unsigned int *)this + 2514);
    if (v9 >= 4)
    {
      v11 = 0;
      v29 = v31;
      v30 = 0x1000000000;
    }
    else
    {
      v10 = 0;
      v11 = (llvm::Type *)dword_1C3E38680[v9];
      v24 = v8;
      v29 = v31;
      v30 = 0x1000000000;
      v12 = -1;
      do
      {
        v13 = llvm::ConstantInt::get();
        v14 = v13;
        if (*v6)
        {
          v27[0] = v13;
          v27[1] = llvm::ConstantInt::get();
          v14 = llvm::ConstantVector::get();
        }
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v29, v14);
        ++v10;
        v12 += 2;
      }
      while ((_DWORD)v11 != v10);
      v5 = (AGCLLVMAGPVertexShaderPostTessellationSW *)((char *)this + 10592);
      v2 = (uint64_t *)a2;
      v8 = v24;
    }
    llvm::ArrayType::get(v8, v11);
    llvm::ConstantArray::get();
    v15 = llvm::User::operator new((llvm::User *)0x58);
    v27[0] = "agc.one_over_inner_tess_table";
    v28 = 259;
    v16 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v16 + 80) |= 1u;
    llvm::ValueHandleBase::operator=(v5, v15);
    if (v29 != v31)
      free(v29);
    v4 = (llvm::Type **)*((_QWORD *)this + 1326);
  }
  v17 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v26[0] = (uint64_t *)llvm::ConstantInt::get();
  v26[1] = v2;
  v31[8] = 257;
  v19 = AGCLLVMBuilder::tryDeducePointeeType(v4, v18);
  v17 += 5;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v17, (uint64_t)v19, (uint64_t *)v4, v26, 2, (uint64_t)&v29);
  v28 = 257;
  v22 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v21);
  return llvm::IRBuilderBase::CreateAlignedLoad(v17, v22, (uint64_t)GEP, 0, (uint64_t)v27);
}

uint64_t llvm::IRBuilderBase::CreateSDiv(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;
  BOOL v7;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u && a3 && *((unsigned __int8 *)a3 + 16) <= 0x14u)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 112))(*((_QWORD *)this + 9));
    if (v6)
      v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
    else
      v7 = 0;
    if (v7)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  else
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

uint64_t llvm::IRBuilderBase::CreateXor(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;

  v6 = llvm::IRBuilderBase::foldConstant((uint64_t)this, 30, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  if (!v6)
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

void AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(AGCLLVMDriverTessellationShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E6E158;
  v2 = (AGCLLVMDriverTessellationShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &unk_1E7E6E4B0;
  *((_QWORD *)this + 1270) = &unk_1E7E6E5A0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E77590;
  *((_QWORD *)this + 1266) = &off_1E7E778E0;
  *((_QWORD *)this + 1270) = &off_1E7E779D0;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6E5C0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E6E158;
  v2 = (AGCLLVMDriverTessellationShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &unk_1E7E6E4B0;
  *((_QWORD *)this + 1270) = &unk_1E7E6E5A0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E77590;
  *((_QWORD *)this + 1266) = &off_1E7E778E0;
  *((_QWORD *)this + 1270) = &off_1E7E779D0;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6E5C0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverTessellationShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(_QWORD *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

uint64_t AGCLLVMDriverTessellationShader::setupShaderInputs(AGCLLVMDriverTessellationShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v2 = *((unsigned int *)this + 2368);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 1183);
    v4 = v3 + 32 * v2;
    v5 = (uint64_t *)*((_QWORD *)this + 1262);
    v6 = *((unsigned int *)this + 2526);
    v7 = &v5[v6];
    do
    {
      i = v5;
      if ((_DWORD)v6)
      {
        for (i = v5; !*i || *i == -8; ++i)
          ;
      }
      v10 = *(_DWORD *)(v3 + 4);
      if (i != v7)
      {
        v11 = *i;
        while (*(_DWORD *)(v11 + 8) != v10)
        {
          do
          {
            v12 = i[1];
            ++i;
            v11 = v12;
            if (v12)
              v13 = v11 == -8;
            else
              v13 = 1;
          }
          while (v13);
          if (i == v7)
            goto LABEL_21;
        }
        v10 = *(_DWORD *)(v11 + 16);
      }
LABEL_21:
      *(_DWORD *)(v3 + 4) = v10;
      v3 += 32;
    }
    while (v3 != v4);
  }
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 10096);
  return AGCLLVMAGPVertexShader::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverTessellationShader::getShaderType(AGCLLVMDriverTessellationShader *this)
{
  return 28;
}

void AGCLLVMDriverTessellationShader::getCompilationKeyDescription(AGCLLVMDriverTessellationShader *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*((_QWORD *)this + 1261);
  if (v3)
  {
    std::string::basic_string[abi:nn180100]<0>(v13, "AGCTessellationDriverState");
    std::string::basic_string[abi:nn180100]<0>(v11, "patch_type");
    _agcFieldString<char const*>(&v15, (const void **)v11, _agcTessellationPatchTypeStrings[*v3 & 3]);
    std::string::basic_string[abi:nn180100]<0>(v9, "partition_mode");
    _agcFieldString<char const*>(&v16, (const void **)v9, _agcTessellationPartitionModeStrings[((unint64_t)*v3 >> 2) & 7]);
    std::string::basic_string[abi:nn180100]<0>(v7, "step_function");
    _agcFieldString<char const*>(&v17, (const void **)v7, _agcTessellationStepFunctionStrings[*v3 >> 5]);
    std::string::basic_string[abi:nn180100]<0>(__p, "unused");
    _agcFieldString<unsigned int>(&v18, (const void **)__p, *v3 >> 8);
    _agcGroupWithHeader(a2, (uint64_t)v13, (uint64_t)&v15, 4);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v18.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v18.__r_.__value_.__l.__data_ + i * 8));
    }
    if (v6 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
    if (v10 < 0)
      operator delete(v9[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(a2, (char *)&unk_1C3E4D9BB);
  }
}

void `virtual thunk to'AGCLLVMDriverTessellationShader::~AGCLLVMDriverTessellationShader(AGCLLVMDriverTessellationShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E6E158;
  v1[1266] = &unk_1E7E6E4B0;
  v1[1270] = &unk_1E7E6E5A0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E77590;
  v1[1266] = &off_1E7E778E0;
  v1[1270] = &off_1E7E779D0;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6E5C0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E6E158;
  v1[1266] = &unk_1E7E6E4B0;
  v1[1270] = &unk_1E7E6E5A0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E77590;
  v1[1266] = &off_1E7E778E0;
  v1[1270] = &off_1E7E779D0;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6E5C0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t `virtual thunk to'AGCLLVMDriverTessellationShader::getShaderType(AGCLLVMDriverTessellationShader *this)
{
  return 28;
}

void `virtual thunk to'AGCLLVMDriverTessellationShader::getCompilationKeyDescription(AGCLLVMDriverTessellationShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMDriverTessellationShader::getCompilationKeyDescription((AGCLLVMDriverTessellationShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

uint64_t llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 33));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void AGCLLVMDriverVDMNOPDBGShader::~AGCLLVMDriverVDMNOPDBGShader(AGCLLVMDriverVDMNOPDBGShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E785B8;
  v2 = (AGCLLVMDriverVDMNOPDBGShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E78910;
  *((_QWORD *)this + 1270) = &off_1E7E78A00;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E78E88;
  *((_QWORD *)this + 1266) = &off_1E7E791D8;
  *((_QWORD *)this + 1270) = &off_1E7E792C8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E70410);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E785B8;
  v2 = (AGCLLVMDriverVDMNOPDBGShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E78910;
  *((_QWORD *)this + 1270) = &off_1E7E78A00;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E78E88;
  *((_QWORD *)this + 1266) = &off_1E7E791D8;
  *((_QWORD *)this + 1270) = &off_1E7E792C8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E70410);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverVDMNOPDBGShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t result;
  llvm::Function *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Instruction *v7;
  char *v8;
  _BYTE v9[32];
  __int16 v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  result = AGCLLVMDriverTessellationShader::setupShaderWrapper(this);
  if ((_DWORD)result)
  {
    result = llvm::Module::getFunction();
    if (result)
    {
      v3 = (llvm::Function *)result;
      v4 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *((_QWORD *)*this - 3) + 32, (uint64_t)"llvm.agx1.nop.dbg", 17, *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 176), *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 224));
      v11[0] = llvm::ConstantInt::get();
      v5 = *((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = *(_QWORD *)(v5 + 8);
          v7 = *(llvm::Instruction **)(v5 + 24);
          llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40), v7);
          v8 = (char *)this + *((_QWORD *)*this - 3) + 40;
          v10 = 257;
          llvm::IRBuilderBase::CreateCall((uint64_t)v8, *(_QWORD *)(v4 + 24), v4, (uint64_t)v11, 1, (uint64_t)v9);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v7);
          v5 = v6;
        }
        while (v6);
      }
      llvm::Function::eraseFromParent(v3);
      return 1;
    }
  }
  return result;
}

const char *AGCLLVMDriverVDMNOPDBGShader::dumpType(AGCLLVMDriverVDMNOPDBGShader *this)
{
  return "vdmnopdbg-driver";
}

void `virtual thunk to'AGCLLVMDriverVDMNOPDBGShader::~AGCLLVMDriverVDMNOPDBGShader(AGCLLVMDriverVDMNOPDBGShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E785B8;
  v1[1266] = &off_1E7E78910;
  v1[1270] = &off_1E7E78A00;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E78E88;
  v1[1266] = &off_1E7E791D8;
  v1[1270] = &off_1E7E792C8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E70410);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E785B8;
  v1[1266] = &off_1E7E78910;
  v1[1270] = &off_1E7E78A00;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E78E88;
  v1[1266] = &off_1E7E791D8;
  v1[1270] = &off_1E7E792C8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E70410);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverVDMNOPDBGShader::dumpType(AGCLLVMDriverVDMNOPDBGShader *this)
{
  return "vdmnopdbg-driver";
}

void AGCLLVMDriverExecuteIndirectESLGenerationShader::~AGCLLVMDriverExecuteIndirectESLGenerationShader(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E704B0;
  v2 = (AGCLLVMDriverExecuteIndirectESLGenerationShader *)((char *)this + 10120);
  *((_QWORD *)this + 1265) = &unk_1E7E70808;
  *((_QWORD *)this + 1269) = &unk_1E7E708F8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10088);
  *(_QWORD *)this = off_1E7E7A318;
  *((_QWORD *)this + 1265) = &off_1E7E7A668;
  *((_QWORD *)this + 1269) = &off_1E7E7A758;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E70918);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E704B0;
  v2 = (AGCLLVMDriverExecuteIndirectESLGenerationShader *)((char *)this + 10120);
  *((_QWORD *)this + 1265) = &unk_1E7E70808;
  *((_QWORD *)this + 1269) = &unk_1E7E708F8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10088);
  *(_QWORD *)this = off_1E7E7A318;
  *((_QWORD *)this + 1265) = &off_1E7E7A668;
  *((_QWORD *)this + 1269) = &off_1E7E7A758;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E70918);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverExecuteIndirectESLGenerationShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(_QWORD *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

const char *AGCLLVMDriverExecuteIndirectESLGenerationShader::dumpType(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  return "graphics-execute-indirect-esl-driver";
}

uint64_t AGCLLVMDriverExecuteIndirectESLGenerationShader::getShaderType(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  return 27;
}

void `virtual thunk to'AGCLLVMDriverExecuteIndirectESLGenerationShader::~AGCLLVMDriverExecuteIndirectESLGenerationShader(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E704B0;
  v1[1265] = &unk_1E7E70808;
  v1[1269] = &unk_1E7E708F8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1261));
  *v1 = off_1E7E7A318;
  v1[1265] = &off_1E7E7A668;
  v1[1269] = &off_1E7E7A758;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E70918);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1265));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E704B0;
  v1[1265] = &unk_1E7E70808;
  v1[1269] = &unk_1E7E708F8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1261));
  *v1 = off_1E7E7A318;
  v1[1265] = &off_1E7E7A668;
  v1[1269] = &off_1E7E7A758;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E70918);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1265));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverExecuteIndirectESLGenerationShader::dumpType(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  return "graphics-execute-indirect-esl-driver";
}

uint64_t `virtual thunk to'AGCLLVMDriverExecuteIndirectESLGenerationShader::getShaderType(AGCLLVMDriverExecuteIndirectESLGenerationShader *this)
{
  return 27;
}

void AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::~AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E709A8;
  v2 = (AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *)((char *)this + 10120);
  *((_QWORD *)this + 1265) = &unk_1E7E70D00;
  *((_QWORD *)this + 1269) = &unk_1E7E70DF0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10088);
  *(_QWORD *)this = off_1E7E7B7A8;
  *((_QWORD *)this + 1265) = &off_1E7E7BAF8;
  *((_QWORD *)this + 1269) = &off_1E7E7BBE8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E70E10);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E709A8;
  v2 = (AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *)((char *)this + 10120);
  *((_QWORD *)this + 1265) = &unk_1E7E70D00;
  *((_QWORD *)this + 1269) = &unk_1E7E70DF0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10088);
  *(_QWORD *)this = off_1E7E7B7A8;
  *((_QWORD *)this + 1265) = &off_1E7E7BAF8;
  *((_QWORD *)this + 1269) = &off_1E7E7BBE8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E70E10);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(_QWORD *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

const char *AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  return "graphics-execute-indirect-range-driver";
}

uint64_t AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::getShaderType(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  return 27;
}

void `virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::~AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E709A8;
  v1[1265] = &unk_1E7E70D00;
  v1[1269] = &unk_1E7E70DF0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1261));
  *v1 = off_1E7E7B7A8;
  v1[1265] = &off_1E7E7BAF8;
  v1[1269] = &off_1E7E7BBE8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E70E10);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1265));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E709A8;
  v1[1265] = &unk_1E7E70D00;
  v1[1269] = &unk_1E7E70DF0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1261));
  *v1 = off_1E7E7B7A8;
  v1[1265] = &off_1E7E7BAF8;
  v1[1269] = &off_1E7E7BBE8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E70E10);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1265));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  return "graphics-execute-indirect-range-driver";
}

uint64_t `virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::getShaderType(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this)
{
  return 27;
}

void AGCLLVMDriverVRRPatchVertexShader::~AGCLLVMDriverVRRPatchVertexShader(AGCLLVMDriverVRRPatchVertexShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E7CC38;
  v2 = (AGCLLVMDriverVRRPatchVertexShader *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E7CF88;
  *((_QWORD *)this + 1265) = &off_1E7E7D078;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E71308);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E7CC38;
  v2 = (AGCLLVMDriverVRRPatchVertexShader *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E7CF88;
  *((_QWORD *)this + 1265) = &off_1E7E7D078;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E71308);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverVRRPatchVertexShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(_QWORD *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

const char *AGCLLVMDriverVRRPatchVertexShader::dumpType(AGCLLVMDriverVRRPatchVertexShader *this)
{
  return "vrr-patchup-vertex-driver";
}

uint64_t AGCLLVMDriverVRRPatchVertexShader::getShaderType(AGCLLVMDriverVRRPatchVertexShader *this)
{
  return 31;
}

void `virtual thunk to'AGCLLVMDriverVRRPatchVertexShader::~AGCLLVMDriverVRRPatchVertexShader(AGCLLVMDriverVRRPatchVertexShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E7CC38;
  v1[1261] = &off_1E7E7CF88;
  v1[1265] = &off_1E7E7D078;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E71308);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E7CC38;
  v1[1261] = &off_1E7E7CF88;
  v1[1265] = &off_1E7E7D078;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E71308);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverVRRPatchVertexShader::dumpType(AGCLLVMDriverVRRPatchVertexShader *this)
{
  return "vrr-patchup-vertex-driver";
}

uint64_t `virtual thunk to'AGCLLVMDriverVRRPatchVertexShader::getShaderType(AGCLLVMDriverVRRPatchVertexShader *this)
{
  return 31;
}

void AGCLLVMDriverGPUGatherVertexShader::~AGCLLVMDriverGPUGatherVertexShader(AGCLLVMDriverGPUGatherVertexShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E7E0C8;
  v2 = (AGCLLVMDriverGPUGatherVertexShader *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E7E418;
  *((_QWORD *)this + 1265) = &off_1E7E7E508;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E71800);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E7E0C8;
  v2 = (AGCLLVMDriverGPUGatherVertexShader *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E7E418;
  *((_QWORD *)this + 1265) = &off_1E7E7E508;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E71800);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverGPUGatherVertexShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(_QWORD *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

const char *AGCLLVMDriverGPUGatherVertexShader::dumpType(AGCLLVMDriverGPUGatherVertexShader *this)
{
  return "gpu-gather-vertex-driver";
}

uint64_t AGCLLVMDriverGPUGatherVertexShader::getShaderType(AGCLLVMDriverGPUGatherVertexShader *this)
{
  return 23;
}

void `virtual thunk to'AGCLLVMDriverGPUGatherVertexShader::~AGCLLVMDriverGPUGatherVertexShader(AGCLLVMDriverGPUGatherVertexShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E7E0C8;
  v1[1261] = &off_1E7E7E418;
  v1[1265] = &off_1E7E7E508;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E71800);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E7E0C8;
  v1[1261] = &off_1E7E7E418;
  v1[1265] = &off_1E7E7E508;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E71800);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverGPUGatherVertexShader::dumpType(AGCLLVMDriverGPUGatherVertexShader *this)
{
  return "gpu-gather-vertex-driver";
}

uint64_t `virtual thunk to'AGCLLVMDriverGPUGatherVertexShader::getShaderType(AGCLLVMDriverGPUGatherVertexShader *this)
{
  return 23;
}

void AGCLLVMDriverFastClearVertexShaders::~AGCLLVMDriverFastClearVertexShaders(AGCLLVMDriverFastClearVertexShaders *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E7F558;
  v2 = (AGCLLVMDriverFastClearVertexShaders *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E7F8A8;
  *((_QWORD *)this + 1265) = &off_1E7E7F998;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E71CF8);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E7F558;
  v2 = (AGCLLVMDriverFastClearVertexShaders *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E7F8A8;
  *((_QWORD *)this + 1265) = &off_1E7E7F998;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E71CF8);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverFastClearVertexShaders::dumpType(AGCLLVMDriverFastClearVertexShaders *this)
{
  return "blit-fast-clear-vertex-driver";
}

uint64_t AGCLLVMDriverFastClearVertexShaders::getShaderType(AGCLLVMDriverFastClearVertexShaders *this)
{
  return 27;
}

void `virtual thunk to'AGCLLVMDriverFastClearVertexShaders::~AGCLLVMDriverFastClearVertexShaders(AGCLLVMDriverFastClearVertexShaders *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E7F558;
  v1[1261] = &off_1E7E7F8A8;
  v1[1265] = &off_1E7E7F998;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E71CF8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E7F558;
  v1[1261] = &off_1E7E7F8A8;
  v1[1265] = &off_1E7E7F998;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E71CF8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverFastClearVertexShaders::dumpType(AGCLLVMDriverFastClearVertexShaders *this)
{
  return "blit-fast-clear-vertex-driver";
}

uint64_t `virtual thunk to'AGCLLVMDriverFastClearVertexShaders::getShaderType(AGCLLVMDriverFastClearVertexShaders *this)
{
  return 27;
}

void AGCLLVMDriverPDSPatchUpVertexShader::~AGCLLVMDriverPDSPatchUpVertexShader(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E809E8;
  v2 = (AGCLLVMDriverPDSPatchUpVertexShader *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E80D38;
  *((_QWORD *)this + 1265) = &off_1E7E80E28;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E721F0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E809E8;
  v2 = (AGCLLVMDriverPDSPatchUpVertexShader *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E80D38;
  *((_QWORD *)this + 1265) = &off_1E7E80E28;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E721F0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverPDSPatchUpVertexShader::setupShaderWrapper(llvm::Function **this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMAGPVertexShaderRegular::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 400);
    (*(void (**)(uint64_t, llvm::Function *))(*(_QWORD *)v3 + 408))(v3, this[21]);
  }
  return v2;
}

const char *AGCLLVMDriverPDSPatchUpVertexShader::dumpType(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  return "pds-patchup-vertex-driver";
}

uint64_t AGCLLVMDriverPDSPatchUpVertexShader::getShaderType(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  return 25;
}

void `virtual thunk to'AGCLLVMDriverPDSPatchUpVertexShader::~AGCLLVMDriverPDSPatchUpVertexShader(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E809E8;
  v1[1261] = &off_1E7E80D38;
  v1[1265] = &off_1E7E80E28;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E721F0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = off_1E7E809E8;
  v1[1261] = &off_1E7E80D38;
  v1[1265] = &off_1E7E80E28;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E721F0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1261));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverPDSPatchUpVertexShader::dumpType(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  return "pds-patchup-vertex-driver";
}

uint64_t `virtual thunk to'AGCLLVMDriverPDSPatchUpVertexShader::getShaderType(AGCLLVMDriverPDSPatchUpVertexShader *this)
{
  return 25;
}

void AGCLLVMAGPVertexShaderGen4::~AGCLLVMAGPVertexShaderGen4(AGCLLVMAGPVertexShaderGen4 *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E81E78;
  v2 = (AGCLLVMAGPVertexShaderGen4 *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E821C8;
  *((_QWORD *)this + 1265) = &off_1E7E822B8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E726E8);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = off_1E7E81E78;
  v2 = (AGCLLVMAGPVertexShaderGen4 *)((char *)this + 10088);
  *((_QWORD *)this + 1261) = &off_1E7E821C8;
  *((_QWORD *)this + 1265) = &off_1E7E822B8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E726E8);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL `virtual thunk to'AGCLLVMAGPVertexShaderGen4::constructReply(AGCLLVMAGPVertexShaderGen4 *this)
{
  return AGCLLVMAGPVertexShaderGen4::constructReply((AGCLLVMAGPVertexShaderGen4 *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t AGCLLVMAGPVertexShaderPostTessellation::AGCLLVMAGPVertexShaderPostTessellation(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Operand;
  uint64_t v14;
  _DWORD *String;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;

  v9 = AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader(a1, a2 + 1, a3, a4, a5, a6);
  v10 = *a2;
  *(_QWORD *)v9 = *a2;
  *(_QWORD *)(v9 + *(_QWORD *)(v10 - 24)) = a2[13];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 - 24) + v9 + 32) = a2[14];
  *(_DWORD *)(v9 + 10056) = (*(_DWORD *)(a4 + 16) >> 8) & 3;
  *(_DWORD *)(v9 + 10060) = (*(_DWORD *)(a4 + 16) >> 10) & 3;
  v11 = -360;
  do
  {
    v12 = a1 + v11;
    *(_QWORD *)(v12 + 10432) = 4;
    *(_OWORD *)(v12 + 10440) = 0uLL;
    v11 += 24;
  }
  while (v11);
  *(_QWORD *)(a1 + 10512) = 4;
  *(_QWORD *)(a1 + 10528) = 0;
  *(_QWORD *)(a1 + 10520) = 0;
  Operand = llvm::NamedMDNode::getOperand(*(llvm::NamedMDNode **)(a1 + 64));
  v14 = *(_QWORD *)(Operand - 8 * *(unsigned int *)(Operand + 8) + 24);
  String = (_DWORD *)llvm::MDString::getString(*(llvm::MDString **)(v14 - 8 * *(unsigned int *)(v14 + 8) + 8));
  v16 = 0;
  if (v17 == 4)
    v16 = *String == 1684108657;
  *(_DWORD *)(a1 + 10052) = v16;
  *(_BYTE *)(a1 + 10068) = (*(_DWORD *)(a1 + 10056) & 0xFFFFFFFE) == 2;
  v18 = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 10432) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 200);
  *(_QWORD *)(a1 + 10440) = *(_QWORD *)(*(_QWORD *)(v18 - 24) + a1 + 184);
  *(_QWORD *)(a1 + 10448) = *(_QWORD *)(*(_QWORD *)(v18 - 24) + a1 + 208);
  *(_QWORD *)(a1 + 10456) = *(_QWORD *)(*(_QWORD *)(v18 - 24) + a1 + 232);
  *(_QWORD *)(a1 + 10464) = *(_QWORD *)(*(_QWORD *)(v18 - 24) + a1 + 224);
  *(_QWORD *)(a1 + 10472) = *(_QWORD *)(*(_QWORD *)(v18 - 24) + a1 + 216);
  *(_QWORD *)(a1 + 10488) = *(_QWORD *)(*(_QWORD *)(v18 - 24) + a1 + 232);
  *(_QWORD *)(a1 + 10496) = *(_QWORD *)(*(_QWORD *)(v18 - 24) + a1 + 224);
  *(_QWORD *)(a1 + 10504) = *(_QWORD *)(*(_QWORD *)(v18 - 24) + a1 + 216);
  return a1;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationHW::AGCLLVMAGPVertexShaderPostTessellationHW(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t result;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 10568), a2, *a3);
  result = AGCLLVMAGPVertexShaderPostTessellation::AGCLLVMAGPVertexShaderPostTessellation(a1, (uint64_t *)off_1E7E6DBA0, (uint64_t)a3, a4, a5, a6);
  *(_QWORD *)a1 = &off_1E7E6D728;
  *(_QWORD *)(a1 + 10568) = &unk_1E7E6DAA0;
  *(_QWORD *)(a1 + 10600) = &unk_1E7E6DB90;
  *(_QWORD *)(a1 + 10536) = 4;
  *(_QWORD *)(a1 + 10552) = 0;
  *(_QWORD *)(a1 + 10544) = 0;
  *(_BYTE *)(a1 + 10560) = 0;
  *(_DWORD *)(a1 + 10564) = (*(_DWORD *)(a4 + 16) >> 22) & 1;
  *(_DWORD *)(a1 + 10064) = 2;
  return result;
}

uint64_t AGCLLVMAGPVertexShaderPostTessellationSW::AGCLLVMAGPVertexShaderPostTessellationSW(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t result;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 10656), a2, *a3);
  result = AGCLLVMAGPVertexShaderPostTessellation::AGCLLVMAGPVertexShaderPostTessellation(a1, (uint64_t *)off_1E7E6E0B8, (uint64_t)a3, a4, a5, a6);
  *(_QWORD *)a1 = &off_1E7E6DC40;
  *(_QWORD *)(a1 + 10656) = &unk_1E7E6DFB8;
  *(_QWORD *)(a1 + 10688) = &unk_1E7E6E0A8;
  *(_QWORD *)(a1 + 10536) = 4;
  *(_QWORD *)(a1 + 10552) = 0;
  *(_QWORD *)(a1 + 10544) = 0;
  *(_QWORD *)(a1 + 10560) = 4;
  *(_QWORD *)(a1 + 10568) = 0;
  *(_QWORD *)(a1 + 10584) = 0;
  *(_QWORD *)(a1 + 10576) = 0;
  *(_QWORD *)(a1 + 10592) = 4;
  *(_QWORD *)(a1 + 10608) = 0;
  *(_QWORD *)(a1 + 10600) = 0;
  *(_QWORD *)(a1 + 10616) = 4;
  *(_QWORD *)(a1 + 10624) = 0;
  *(_QWORD *)(a1 + 10640) = 0;
  *(_QWORD *)(a1 + 10632) = 0;
  *(_DWORD *)(a1 + 10648) = 0;
  *(_DWORD *)(a1 + 10064) = 1;
  return result;
}

double AGCLLVMDriverTessellationShader::AGCLLVMDriverTessellationShader(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  int v11;
  uint64_t v12;

  if ((v7 & 1) == 0)
  {
    v12 = a3;
    a3 = v12;
    if (v11)
    {
      AGCLLVMDriverTessellationShader::getDefaultCS(void)::defaultCS = 0;
      *(_QWORD *)algn_1EF8E8EE8 = 0;
      qword_1EF8E8EF0 = 0;
      a3 = v12;
    }
  }
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader(a1, a2 + 2, a3, (uint64_t)&AGCLLVMDriverTessellationShader::getDefaultCS(void)::defaultCS, 0, 0);
  v8 = a2[1];
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 24)) = a2[14];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32) = a2[15];
  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v9 - 24)) = a2[16];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32) = a2[17];
  *(_QWORD *)(a1 + 10088) = a4;
  result = 0.0;
  *(_OWORD *)(a1 + 10096) = 0u;
  *(_DWORD *)(a1 + 10112) = 0;
  *(_DWORD *)(a1 + 10116) = 32;
  return result;
}

uint64_t *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x1CAA2C6C0](a3 + 33, 8);
  v11 = v10;
  v12 = v10 + 32;
  if (a3)
    memcpy((void *)(v10 + 32), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = a3;
  *(_DWORD *)(v11 + 24) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

void AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::~AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader(AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E82EA0;
  v2 = (AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E831F8;
  *((_QWORD *)this + 1270) = &off_1E7E832E8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E83770;
  *((_QWORD *)this + 1266) = &off_1E7E83AC0;
  *((_QWORD *)this + 1270) = &off_1E7E83BB0;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6EAC0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E82EA0;
  v2 = (AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E831F8;
  *((_QWORD *)this + 1270) = &off_1E7E832E8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E83770;
  *((_QWORD *)this + 1266) = &off_1E7E83AC0;
  *((_QWORD *)this + 1270) = &off_1E7E83BB0;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6EAC0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::dumpType(AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *this)
{
  return "tessellation-non-bucketed-emit-draw-commands-driver";
}

void `virtual thunk to'AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::~AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader(AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E82EA0;
  v1[1266] = &off_1E7E831F8;
  v1[1270] = &off_1E7E832E8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E83770;
  v1[1266] = &off_1E7E83AC0;
  v1[1270] = &off_1E7E83BB0;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6EAC0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E82EA0;
  v1[1266] = &off_1E7E831F8;
  v1[1270] = &off_1E7E832E8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E83770;
  v1[1266] = &off_1E7E83AC0;
  v1[1270] = &off_1E7E83BB0;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6EAC0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::dumpType(AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader *this)
{
  return "tessellation-non-bucketed-emit-draw-commands-driver";
}

void AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::~AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader(AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E84798;
  v2 = (AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E84AF0;
  *((_QWORD *)this + 1270) = &off_1E7E84BE0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E85068;
  *((_QWORD *)this + 1266) = &off_1E7E853B8;
  *((_QWORD *)this + 1270) = &off_1E7E854A8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6EFD0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E84798;
  v2 = (AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E84AF0;
  *((_QWORD *)this + 1270) = &off_1E7E84BE0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E85068;
  *((_QWORD *)this + 1266) = &off_1E7E853B8;
  *((_QWORD *)this + 1270) = &off_1E7E854A8;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6EFD0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::dumpType(AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *this)
{
  return "bucketed-tessellation-driver-emit-draw-commands-driver";
}

void `virtual thunk to'AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::~AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader(AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E84798;
  v1[1266] = &off_1E7E84AF0;
  v1[1270] = &off_1E7E84BE0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E85068;
  v1[1266] = &off_1E7E853B8;
  v1[1270] = &off_1E7E854A8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6EFD0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E84798;
  v1[1266] = &off_1E7E84AF0;
  v1[1270] = &off_1E7E84BE0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E85068;
  v1[1266] = &off_1E7E853B8;
  v1[1270] = &off_1E7E854A8;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6EFD0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::dumpType(AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader *this)
{
  return "bucketed-tessellation-driver-emit-draw-commands-driver";
}

void AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::~AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader(AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E86090;
  v2 = (AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E863E8;
  *((_QWORD *)this + 1270) = &off_1E7E864D8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E86960;
  *((_QWORD *)this + 1266) = &off_1E7E86CB0;
  *((_QWORD *)this + 1270) = &off_1E7E86DA0;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6F4E0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E86090;
  v2 = (AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E863E8;
  *((_QWORD *)this + 1270) = &off_1E7E864D8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E86960;
  *((_QWORD *)this + 1266) = &off_1E7E86CB0;
  *((_QWORD *)this + 1270) = &off_1E7E86DA0;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6F4E0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::dumpType(AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *this)
{
  return "bucketed-tessellation-compute-instance-counts-driver";
}

void `virtual thunk to'AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::~AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader(AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E86090;
  v1[1266] = &off_1E7E863E8;
  v1[1270] = &off_1E7E864D8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E86960;
  v1[1266] = &off_1E7E86CB0;
  v1[1270] = &off_1E7E86DA0;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6F4E0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E86090;
  v1[1266] = &off_1E7E863E8;
  v1[1270] = &off_1E7E864D8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E86960;
  v1[1266] = &off_1E7E86CB0;
  v1[1270] = &off_1E7E86DA0;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6F4E0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::dumpType(AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader *this)
{
  return "bucketed-tessellation-compute-instance-counts-driver";
}

void AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::~AGCLLVMDriverTessellationBucketedSumInstanceCountsShader(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E87988;
  v2 = (AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E87CE0;
  *((_QWORD *)this + 1270) = &off_1E7E87DD0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E88258;
  *((_QWORD *)this + 1266) = &off_1E7E885A8;
  *((_QWORD *)this + 1270) = &off_1E7E88698;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6F9F0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E87988;
  v2 = (AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E87CE0;
  *((_QWORD *)this + 1270) = &off_1E7E87DD0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E88258;
  *((_QWORD *)this + 1266) = &off_1E7E885A8;
  *((_QWORD *)this + 1270) = &off_1E7E88698;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6F9F0);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::dumpType(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this)
{
  return "bucketed-tessellation-driver-sum-instance-counts-driver";
}

void `virtual thunk to'AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::~AGCLLVMDriverTessellationBucketedSumInstanceCountsShader(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E87988;
  v1[1266] = &off_1E7E87CE0;
  v1[1270] = &off_1E7E87DD0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E88258;
  v1[1266] = &off_1E7E885A8;
  v1[1270] = &off_1E7E88698;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6F9F0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E87988;
  v1[1266] = &off_1E7E87CE0;
  v1[1270] = &off_1E7E87DD0;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E88258;
  v1[1266] = &off_1E7E885A8;
  v1[1270] = &off_1E7E88698;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6F9F0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::dumpType(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this)
{
  return "bucketed-tessellation-driver-sum-instance-counts-driver";
}

void AGCLLVMDriverTessellationClearInstanceCountsShader::~AGCLLVMDriverTessellationClearInstanceCountsShader(AGCLLVMDriverTessellationClearInstanceCountsShader *this)
{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E89280;
  v2 = (AGCLLVMDriverTessellationClearInstanceCountsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E895D8;
  *((_QWORD *)this + 1270) = &off_1E7E896C8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E89B50;
  *((_QWORD *)this + 1266) = &off_1E7E89EA0;
  *((_QWORD *)this + 1270) = &off_1E7E89F90;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6FF00);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E89280;
  v2 = (AGCLLVMDriverTessellationClearInstanceCountsShader *)((char *)this + 10128);
  *((_QWORD *)this + 1266) = &off_1E7E895D8;
  *((_QWORD *)this + 1270) = &off_1E7E896C8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 10096);
  *(_QWORD *)this = off_1E7E89B50;
  *((_QWORD *)this + 1266) = &off_1E7E89EA0;
  *((_QWORD *)this + 1270) = &off_1E7E89F90;
  v3 = (char *)*((_QWORD *)this + 1249);
  if (v3 != (char *)this + 10008)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 1183);
  if (v4 != (char *)this + 9480)
    free(v4);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)this + 9424);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7E6FF00);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverTessellationClearInstanceCountsShader::dumpType(AGCLLVMDriverTessellationClearInstanceCountsShader *this)
{
  return "bucketed-clear-instance-counts-driver";
}

void `virtual thunk to'AGCLLVMDriverTessellationClearInstanceCountsShader::~AGCLLVMDriverTessellationClearInstanceCountsShader(AGCLLVMDriverTessellationClearInstanceCountsShader *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E89280;
  v1[1266] = &off_1E7E895D8;
  v1[1270] = &off_1E7E896C8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E89B50;
  v1[1266] = &off_1E7E89EA0;
  v1[1270] = &off_1E7E89F90;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6FF00);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E89280;
  v1[1266] = &off_1E7E895D8;
  v1[1270] = &off_1E7E896C8;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1262));
  *v1 = off_1E7E89B50;
  v1[1266] = &off_1E7E89EA0;
  v1[1270] = &off_1E7E89F90;
  v2 = (_QWORD *)v1[1249];
  if (v2 != v1 + 1251)
    free(v2);
  v3 = (_QWORD *)v1[1183];
  if (v3 != v1 + 1185)
    free(v3);
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 1178));
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7E6FF00);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1266));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverTessellationClearInstanceCountsShader::dumpType(AGCLLVMDriverTessellationClearInstanceCountsShader *this)
{
  return "bucketed-clear-instance-counts-driver";
}

char *AGCLLVMDriverTessellationNonBucketedEmitDrawCommandsShader::create(AGCLLVMCtx *a1, uint64_t a2, _DWORD *a3)
{
  const std::string::value_type **v6;
  uint64_t i;
  const std::string::value_type **v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t j;
  const std::string::value_type **v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t k;
  std::string *v18;
  std::string::size_type size;
  llvm::LLVMContext **Bitcode;
  _QWORD *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v46[3];
  _QWORD v47[3];
  _QWORD v48[3];
  _QWORD v49[3];
  std::string v50;

  std::string::basic_string[abi:nn180100]<0>(v46, "tess_nb_0_");
  std::string::basic_string[abi:nn180100]<0>(v47, "tess_nb_1_");
  v6 = (const std::string::value_type **)&v46[3 * (*a3 & 3)];
  if (*((char *)v6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *v6, (std::string::size_type)v6[1]);
  else
    v50 = *(std::string *)v6;
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v47[i + 2]) < 0)
      operator delete((void *)v46[i + 3]);
  }
  std::string::basic_string[abi:nn180100]<0>(v46, "0_");
  std::string::basic_string[abi:nn180100]<0>(v47, "1_");
  std::string::basic_string[abi:nn180100]<0>(v48, "2_");
  std::string::basic_string[abi:nn180100]<0>(v49, "3_");
  v8 = (const std::string::value_type **)&v46[3 * ((*a3 >> 2) & 7)];
  v9 = *((char *)v8 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)&v46[3 * ((*a3 >> 2) & 7)];
  else
    v10 = *v8;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)v8 + 23);
  else
    v11 = (std::string::size_type)v8[1];
  std::string::append(&v50, v10, v11);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v49[j + 2]) < 0)
      operator delete((void *)v49[j]);
  }
  std::string::basic_string[abi:nn180100]<0>(v46, "0");
  std::string::basic_string[abi:nn180100]<0>(v47, "1");
  std::string::basic_string[abi:nn180100]<0>(v48, "2");
  std::string::basic_string[abi:nn180100]<0>(v49, "3");
  v13 = (const std::string::value_type **)&v46[3 * (*a3 >> 5)];
  v14 = *((char *)v13 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)&v46[3 * (*a3 >> 5)];
  else
    v15 = *v13;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)v13 + 23);
  else
    v16 = (std::string::size_type)v13[1];
  std::string::append(&v50, v15, v16);
  for (k = 0; k != -12; k -= 3)
  {
    if (SHIBYTE(v49[k + 2]) < 0)
      operator delete((void *)v49[k]);
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v50;
  else
    v18 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  else
    size = v50.__r_.__value_.__l.__size_;
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode(a2, (const UInt8 *)v18, size, 0);
  v21 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v21 + 1266), a1, *Bitcode);
  v22 = AGCLLVMDriverTessellationShader::AGCLLVMDriverTessellationShader((uint64_t)v21, (uint64_t *)off_1E7E6EAA8, (uint64_t)Bitcode, (uint64_t)a3);
  *v21 = &off_1E7E6E650;
  v21[1266] = &unk_1E7E6E9A8;
  v21[1270] = &unk_1E7E6EA98;
  v23 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v21[1316] + 824) + 88))(*(_QWORD *)(v21[1316] + 824), v22);
  v24 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "drawElementsIndirectCommands", 0x1CuLL);
  *(_QWORD *)(v24 + 8) = 0;
  *(_DWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 20) = 0;
  v25 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 64))(v25);
  v27 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "internalPerPatch_ID", 0x13uLL);
  *(_QWORD *)(v27 + 8) = 1;
  *(_DWORD *)(v27 + 16) = v26;
  *(_QWORD *)(v27 + 20) = 0;
  v28 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
  v30 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "internalPerPatch_Data", 0x15uLL);
  *(_QWORD *)(v30 + 8) = 2;
  *(_DWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 20) = 0;
  v31 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 56))(v31);
  v33 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "tessFactors", 0xBuLL);
  *(_QWORD *)(v33 + 8) = 3;
  *(_DWORD *)(v33 + 16) = v32;
  *(_QWORD *)(v33 + 20) = 0;
  v34 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "tessFactorScale", 0xFuLL);
  *(_OWORD *)(v34 + 8) = xmmword_1C3E37C30;
  *(_DWORD *)(v34 + 24) = 2;
  v35 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 96))(v35);
  v37 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "drawElementsIndirectCommands_ORIGINAL", 0x25uLL);
  *(_QWORD *)(v37 + 8) = 5;
  *(_DWORD *)(v37 + 16) = v36;
  *(_QWORD *)(v37 + 20) = 0;
  v38 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "instanceCount", 0xDuLL);
  *(_OWORD *)(v38 + 8) = xmmword_1C3E37C40;
  *(_DWORD *)(v38 + 24) = 1;
  v39 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchCount", 0xAuLL);
  *(_OWORD *)(v39 + 8) = xmmword_1C3E37C50;
  *(_DWORD *)(v39 + 24) = 0;
  v40 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "instanceStrideInTessFactorUnits", 0x1FuLL);
  *(_OWORD *)(v40 + 8) = xmmword_1C3E37C60;
  *(_DWORD *)(v40 + 24) = 4;
  v41 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchStart", 0xAuLL);
  *(_OWORD *)(v41 + 8) = xmmword_1C3E37C70;
  *(_DWORD *)(v41 + 24) = 0;
  v42 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "baseInstance", 0xCuLL);
  *(_OWORD *)(v42 + 8) = xmmword_1C3E37C80;
  *(_DWORD *)(v42 + 24) = 6;
  v43 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "maxTessellationFactor", 0x15uLL);
  *(_OWORD *)(v43 + 8) = xmmword_1C3E37C90;
  *(_DWORD *)(v43 + 24) = 16;
  v44 = *(_QWORD *)(*v21 - 24);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  return (char *)v21 + v44;
}

char *AGCLLVMDriverTessellationBucketedEmitDrawCommandsShader::create(AGCLLVMCtx *a1, uint64_t a2, _DWORD *a3)
{
  const std::string::value_type **v6;
  uint64_t i;
  const std::string::value_type **v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t j;
  const std::string::value_type **v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t k;
  std::string *v18;
  std::string::size_type size;
  llvm::LLVMContext **Bitcode;
  _QWORD *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v55[3];
  _QWORD v56[3];
  _QWORD v57[3];
  _QWORD v58[3];
  std::string v59;

  std::string::basic_string[abi:nn180100]<0>(v55, "tess_b3_0_");
  std::string::basic_string[abi:nn180100]<0>(v56, "tess_b3_1_");
  v6 = (const std::string::value_type **)&v55[3 * (*a3 & 3)];
  if (*((char *)v6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v59, *v6, (std::string::size_type)v6[1]);
  else
    v59 = *(std::string *)v6;
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v56[i + 2]) < 0)
      operator delete((void *)v55[i + 3]);
  }
  std::string::basic_string[abi:nn180100]<0>(v55, "0_");
  std::string::basic_string[abi:nn180100]<0>(v56, "1_");
  std::string::basic_string[abi:nn180100]<0>(v57, "2_");
  std::string::basic_string[abi:nn180100]<0>(v58, "3_");
  v8 = (const std::string::value_type **)&v55[3 * ((*a3 >> 2) & 7)];
  v9 = *((char *)v8 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)&v55[3 * ((*a3 >> 2) & 7)];
  else
    v10 = *v8;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)v8 + 23);
  else
    v11 = (std::string::size_type)v8[1];
  std::string::append(&v59, v10, v11);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v58[j + 2]) < 0)
      operator delete((void *)v58[j]);
  }
  std::string::basic_string[abi:nn180100]<0>(v55, "0");
  std::string::basic_string[abi:nn180100]<0>(v56, "1");
  std::string::basic_string[abi:nn180100]<0>(v57, "2");
  std::string::basic_string[abi:nn180100]<0>(v58, "3");
  v13 = (const std::string::value_type **)&v55[3 * (*a3 >> 5)];
  v14 = *((char *)v13 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)&v55[3 * (*a3 >> 5)];
  else
    v15 = *v13;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)v13 + 23);
  else
    v16 = (std::string::size_type)v13[1];
  std::string::append(&v59, v15, v16);
  for (k = 0; k != -12; k -= 3)
  {
    if (SHIBYTE(v58[k + 2]) < 0)
      operator delete((void *)v58[k]);
  }
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v59;
  else
    v18 = (std::string *)v59.__r_.__value_.__r.__words[0];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  else
    size = v59.__r_.__value_.__l.__size_;
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode(a2, (const UInt8 *)v18, size, 0);
  v21 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v21 + 1266), a1, *Bitcode);
  v22 = AGCLLVMDriverTessellationShader::AGCLLVMDriverTessellationShader((uint64_t)v21, (uint64_t *)off_1E7E6EFB8, (uint64_t)Bitcode, (uint64_t)a3);
  *v21 = &off_1E7E6EB60;
  v21[1266] = &unk_1E7E6EEB8;
  v21[1270] = &unk_1E7E6EFA8;
  v23 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v21[1316] + 824) + 64))(*(_QWORD *)(v21[1316] + 824), v22);
  v24 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "internalPerPatch_ID", 0x13uLL);
  *(_QWORD *)(v24 + 8) = 1;
  *(_DWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 20) = 0;
  v25 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
  v27 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "internalPerPatch_Data", 0x15uLL);
  *(_QWORD *)(v27 + 8) = 2;
  *(_DWORD *)(v27 + 16) = v26;
  *(_QWORD *)(v27 + 20) = 0;
  v28 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 56))(v28);
  v30 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "tessFactors", 0xBuLL);
  *(_QWORD *)(v30 + 8) = 3;
  *(_DWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 20) = 0;
  v31 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "tessFactorScale", 0xFuLL);
  *(_OWORD *)(v31 + 8) = xmmword_1C3E37C30;
  *(_DWORD *)(v31 + 24) = 2;
  v32 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 104))(v32);
  v34 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "internalInstanceCounts", 0x16uLL);
  *(_QWORD *)(v34 + 8) = 5;
  *(_DWORD *)(v34 + 16) = v33;
  *(_QWORD *)(v34 + 20) = 0;
  v35 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 80))(v35);
  v37 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "internalDrawIndexOffsets", 0x18uLL);
  *(_QWORD *)(v37 + 8) = 6;
  *(_DWORD *)(v37 + 16) = v36;
  *(_QWORD *)(v37 + 20) = 0;
  v38 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 112))(v38);
  v40 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "packedInternalInstanceIDs", 0x19uLL);
  *(_QWORD *)(v40 + 8) = 7;
  *(_DWORD *)(v40 + 16) = v39;
  *(_QWORD *)(v40 + 20) = 0;
  v41 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "instanceCount", 0xDuLL);
  *(_OWORD *)(v41 + 8) = xmmword_1C3E37C40;
  *(_DWORD *)(v41 + 24) = 1;
  v42 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchCount", 0xAuLL);
  *(_OWORD *)(v42 + 8) = xmmword_1C3E37C50;
  *(_DWORD *)(v42 + 24) = 0;
  v43 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "instanceStrideInTessFactorUnits", 0x1FuLL);
  *(_OWORD *)(v43 + 8) = xmmword_1C3E37C60;
  *(_DWORD *)(v43 + 24) = 4;
  v44 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchStart", 0xAuLL);
  *(_OWORD *)(v44 + 8) = xmmword_1C3E37C70;
  *(_DWORD *)(v44 + 24) = 0;
  v45 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "baseInstance", 0xCuLL);
  *(_OWORD *)(v45 + 8) = xmmword_1C3E37C80;
  *(_DWORD *)(v45 + 24) = 6;
  v46 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchCountMultiplier", 0x14uLL);
  *(_OWORD *)(v46 + 8) = xmmword_1C3E37CA0;
  *(_DWORD *)(v46 + 24) = 10;
  v47 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchCountShift", 0xFuLL);
  *(_OWORD *)(v47 + 8) = xmmword_1C3E37CB0;
  *(_DWORD *)(v47 + 24) = 11;
  v48 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "instanceCountMultiplier", 0x17uLL);
  *(_OWORD *)(v48 + 8) = xmmword_1C3E37CC0;
  *(_DWORD *)(v48 + 24) = 12;
  v49 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "instanceCountShift", 0x12uLL);
  *(_OWORD *)(v49 + 8) = xmmword_1C3E37CD0;
  *(_DWORD *)(v49 + 24) = 13;
  v50 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchCountTimesInstanceCountMultiplier", 0x26uLL);
  *(_OWORD *)(v50 + 8) = xmmword_1C3E37CE0;
  *(_DWORD *)(v50 + 24) = 14;
  v51 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchCountTimesInstanceCountShift", 0x21uLL);
  *(_OWORD *)(v51 + 8) = xmmword_1C3E37CF0;
  *(_DWORD *)(v51 + 24) = 15;
  v52 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "maxTessellationFactor", 0x15uLL);
  *(_OWORD *)(v52 + 8) = xmmword_1C3E37C90;
  *(_DWORD *)(v52 + 24) = 16;
  v53 = *(_QWORD *)(*v21 - 24);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  return (char *)v21 + v53;
}

char *AGCLLVMDriverTessellationBucketedComputeInstanceCountsShader::create(AGCLLVMCtx *a1, uint64_t a2, _DWORD *a3)
{
  const std::string::value_type **v6;
  uint64_t i;
  const std::string::value_type **v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t j;
  const std::string::value_type **v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  uint64_t k;
  std::string *v18;
  std::string::size_type size;
  llvm::LLVMContext **Bitcode;
  _QWORD *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[3];
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD v43[3];
  std::string v44;

  std::string::basic_string[abi:nn180100]<0>(v40, "tess_b1_0_");
  std::string::basic_string[abi:nn180100]<0>(v41, "tess_b1_1_");
  v6 = (const std::string::value_type **)&v40[3 * (*a3 & 3)];
  if (*((char *)v6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *v6, (std::string::size_type)v6[1]);
  else
    v44 = *(std::string *)v6;
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v41[i + 2]) < 0)
      operator delete((void *)v40[i + 3]);
  }
  std::string::basic_string[abi:nn180100]<0>(v40, "0_");
  std::string::basic_string[abi:nn180100]<0>(v41, "1_");
  std::string::basic_string[abi:nn180100]<0>(v42, "2_");
  std::string::basic_string[abi:nn180100]<0>(v43, "3_");
  v8 = (const std::string::value_type **)&v40[3 * ((*a3 >> 2) & 7)];
  v9 = *((char *)v8 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)&v40[3 * ((*a3 >> 2) & 7)];
  else
    v10 = *v8;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)v8 + 23);
  else
    v11 = (std::string::size_type)v8[1];
  std::string::append(&v44, v10, v11);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v43[j + 2]) < 0)
      operator delete((void *)v43[j]);
  }
  std::string::basic_string[abi:nn180100]<0>(v40, "0");
  std::string::basic_string[abi:nn180100]<0>(v41, "1");
  std::string::basic_string[abi:nn180100]<0>(v42, "2");
  std::string::basic_string[abi:nn180100]<0>(v43, "3");
  v13 = (const std::string::value_type **)&v40[3 * (*a3 >> 5)];
  v14 = *((char *)v13 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)&v40[3 * (*a3 >> 5)];
  else
    v15 = *v13;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)v13 + 23);
  else
    v16 = (std::string::size_type)v13[1];
  std::string::append(&v44, v15, v16);
  for (k = 0; k != -12; k -= 3)
  {
    if (SHIBYTE(v43[k + 2]) < 0)
      operator delete((void *)v43[k]);
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v44;
  else
    v18 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    size = v44.__r_.__value_.__l.__size_;
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode(a2, (const UInt8 *)v18, size, 0);
  v21 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v21 + 1266), a1, *Bitcode);
  v22 = AGCLLVMDriverTessellationShader::AGCLLVMDriverTessellationShader((uint64_t)v21, (uint64_t *)off_1E7E6F4C8, (uint64_t)Bitcode, (uint64_t)a3);
  *v21 = &off_1E7E6F070;
  v21[1266] = &unk_1E7E6F3C8;
  v21[1270] = &unk_1E7E6F4B8;
  v23 = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v21[1316] + 824) + 56))(*(_QWORD *)(v21[1316] + 824), v22);
  v24 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "tessFactors", 0xBuLL);
  *(_QWORD *)(v24 + 8) = 3;
  *(_DWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 20) = 0;
  v25 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "tessFactorScale", 0xFuLL);
  *(_OWORD *)(v25 + 8) = xmmword_1C3E37C30;
  *(_DWORD *)(v25 + 24) = 2;
  v26 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 104))(v26);
  v28 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "internalInstanceCounts", 0x16uLL);
  *(_QWORD *)(v28 + 8) = 5;
  *(_DWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 20) = 0;
  v29 = *(_QWORD *)(*(_QWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 400) + 824);
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 112))(v29);
  v31 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "packedInternalInstanceIDs", 0x19uLL);
  *(_QWORD *)(v31 + 8) = 7;
  *(_DWORD *)(v31 + 16) = v30;
  *(_QWORD *)(v31 + 20) = 0;
  v32 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "instanceCount", 0xDuLL);
  *(_OWORD *)(v32 + 8) = xmmword_1C3E37C40;
  *(_DWORD *)(v32 + 24) = 1;
  v33 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchCount", 0xAuLL);
  *(_OWORD *)(v33 + 8) = xmmword_1C3E37C50;
  *(_DWORD *)(v33 + 24) = 0;
  v34 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "instanceStrideInTessFactorUnits", 0x1FuLL);
  *(_OWORD *)(v34 + 8) = xmmword_1C3E37C60;
  *(_DWORD *)(v34 + 24) = 4;
  v35 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "patchStart", 0xAuLL);
  *(_OWORD *)(v35 + 8) = xmmword_1C3E37C70;
  *(_DWORD *)(v35 + 24) = 0;
  v36 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "baseInstance", 0xCuLL);
  *(_OWORD *)(v36 + 8) = xmmword_1C3E37C80;
  *(_DWORD *)(v36 + 24) = 6;
  v37 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v21 + 1262), "maxTessellationFactor", 0x15uLL);
  *(_OWORD *)(v37 + 8) = xmmword_1C3E37C90;
  *(_DWORD *)(v37 + 24) = 16;
  v38 = *(_QWORD *)(*v21 - 24);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  return (char *)v21 + v38;
}

uint64_t AGCLLVMDriverTessellationBucketedSumInstanceCountsShader::create(AGCLLVMDriverTessellationBucketedSumInstanceCountsShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  _QWORD *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)"tess_b2", 7, 0);
  v5 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v5 + 1266), this, *Bitcode);
  v6 = AGCLLVMDriverTessellationShader::AGCLLVMDriverTessellationShader((uint64_t)v5, (uint64_t *)off_1E7E6F9D8, (uint64_t)Bitcode, 0);
  *v5 = &off_1E7E6F580;
  v5[1266] = &unk_1E7E6F8D8;
  v5[1270] = &unk_1E7E6F9C8;
  LODWORD(Bitcode) = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v5[1316] + 824) + 88))(*(_QWORD *)(v5[1316] + 824), v6);
  v7 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v5 + 1262), "drawElementsIndirectCommands", 0x1CuLL);
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v7 + 20) = 0;
  v8 = *(_QWORD *)(*(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 104))(v8);
  v9 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v5 + 1262), "internalInstanceCounts", 0x16uLL);
  *(_QWORD *)(v9 + 8) = 5;
  *(_DWORD *)(v9 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v9 + 20) = 0;
  v10 = *(_QWORD *)(*(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 80))(v10);
  v11 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v5 + 1262), "internalDrawIndexOffsets", 0x18uLL);
  *(_QWORD *)(v11 + 8) = 6;
  *(_DWORD *)(v11 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v11 + 20) = 0;
  v12 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v5 + 1262), "max_draw_commands_roundup_div_16", 0x20uLL);
  *(_OWORD *)(v12 + 8) = xmmword_1C3E37C40;
  *(_DWORD *)(v12 + 24) = 9;
  return (uint64_t)v5 + *(_QWORD *)(*v5 - 24);
}

uint64_t AGCLLVMDriverTessellationClearInstanceCountsShader::create(AGCLLVMDriverTessellationClearInstanceCountsShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  _QWORD *v5;
  double v6;
  uint64_t v7;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)"tess_b0", 7, 0);
  v5 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v5 + 1266), this, *Bitcode);
  v6 = AGCLLVMDriverTessellationShader::AGCLLVMDriverTessellationShader((uint64_t)v5, (uint64_t *)off_1E7E6FEE8, (uint64_t)Bitcode, 0);
  *v5 = &off_1E7E6FA90;
  v5[1266] = &unk_1E7E6FDE8;
  v5[1270] = &unk_1E7E6FED8;
  LODWORD(this) = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(v5[1316] + 824) + 104))(*(_QWORD *)(v5[1316] + 824), v6);
  v7 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v5 + 1262), "buf", 3uLL);
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 16) = (_DWORD)this;
  *(_QWORD *)(v7 + 20) = 0;
  return (uint64_t)v5 + *(_QWORD *)(*v5 - 24);
}

_QWORD *AGCLLVMDriverVDMNOPDBGShader::create(AGCLLVMDriverVDMNOPDBGShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  _QWORD *v5;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)"vdm_nopdbg", 10, 0);
  v5 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v5 + 1266), this, *Bitcode);
  AGCLLVMDriverTessellationShader::AGCLLVMDriverTessellationShader((uint64_t)v5, (uint64_t *)off_1E7E703F8, (uint64_t)Bitcode, 0);
  *v5 = &off_1E7E6FFA0;
  v5[1266] = &unk_1E7E702F8;
  v5[1270] = &unk_1E7E703E8;
  return v5 + 1266;
}

uint64_t AGCLLVMDriverExecuteIndirectESLGenerationShader::create(AGCLLVMDriverExecuteIndirectESLGenerationShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  const std::string::value_type *v5;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  llvm::LLVMContext **Bitcode;
  uint64_t v10;
  unsigned __int8 v11;
  std::string::size_type size;
  void **v14;
  std::string *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t i;
  std::string::size_type v19;
  void **v20;
  std::string *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t j;
  std::string::size_type v25;
  void **v26;
  std::string *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t k;
  char **v31;
  char *v32;
  uint64_t v33;
  void *__p[2];
  char v35;
  std::string v36;
  std::string v37;
  _DWORD v38[2];
  _QWORD v39[3];
  int v40;
  _QWORD v41[3];
  int v42;
  _QWORD v43[4];

  v43[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&v37, "gei_esl_gen");
  switch(*(_DWORD *)(*((_QWORD *)this + 4) + 28))
  {
    case 4:
      v6 = "gei_pds_gen_gen1";
      goto LABEL_9;
    case 6:
    case 7:
      v6 = "gei_pds_gen_gen2";
LABEL_9:
      MEMORY[0x1CAA2D494](&v37, v6);
      break;
    case 8:
      v5 = "_tmp_gen1";
      goto LABEL_11;
    case 9:
    case 0xA:
    case 0xB:
    case 0x17:
      v5 = "_tmp_gen2";
      goto LABEL_11;
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      v5 = "2";
      goto LABEL_11;
    case 0x11:
    case 0x12:
      v5 = "3";
      goto LABEL_11;
    case 0x13:
    case 0x14:
    case 0x15:
      v5 = "3x";
      goto LABEL_11;
    case 0x16:
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      else
        size = v37.__r_.__value_.__l.__size_;
      v14 = __p;
      std::string::basic_string[abi:nn180100]((uint64_t)__p, size + 6);
      if (v35 < 0)
        v14 = (void **)__p[0];
      if (size)
      {
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v15 = &v37;
        else
          v15 = (std::string *)v37.__r_.__value_.__r.__words[0];
        memmove(v14, v15, size);
      }
      strcpy((char *)v14 + size, "4_g15p");
      v16 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
      v38[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v39, "a0");
      v40 = 3;
      std::string::basic_string[abi:nn180100]<0>(v41, "b0");
      v17 = 0;
      v32 = 0;
      v33 = 0;
      v31 = &v32;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v31, (uint64_t *)&v32, v38[v17], (uint64_t)&v38[v17]);
        v17 += 8;
      }
      while (v17 != 16);
      getFullBitcodePath(&v36, (uint64_t)__p, v16, (uint64_t)&v31);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v37 = v36;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v32);
      for (i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v41[i + 2]) < 0)
          operator delete((void *)v41[i]);
      }
      goto LABEL_78;
    case 0x18:
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      else
        v19 = v37.__r_.__value_.__l.__size_;
      v20 = __p;
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v19 + 6);
      if (v35 < 0)
        v20 = (void **)__p[0];
      if (v19)
      {
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v37;
        else
          v21 = (std::string *)v37.__r_.__value_.__r.__words[0];
        memmove(v20, v21, v19);
      }
      strcpy((char *)v20 + v19, "4_g15g");
      v22 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
      v38[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v39, "a0");
      v40 = 3;
      std::string::basic_string[abi:nn180100]<0>(v41, "b0");
      v42 = 5;
      std::string::basic_string[abi:nn180100]<0>(v43, "c0");
      v23 = 0;
      v32 = 0;
      v33 = 0;
      v31 = &v32;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v31, (uint64_t *)&v32, v38[v23], (uint64_t)&v38[v23]);
        v23 += 8;
      }
      while (v23 != 24);
      getFullBitcodePath(&v36, (uint64_t)__p, v22, (uint64_t)&v31);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v37 = v36;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v32);
      for (j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v43[j + 2]) < 0)
          operator delete((void *)v43[j]);
      }
      goto LABEL_78;
    case 0x1F:
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      else
        v25 = v37.__r_.__value_.__l.__size_;
      v26 = __p;
      std::string::basic_string[abi:nn180100]((uint64_t)__p, v25 + 6);
      if (v35 < 0)
        v26 = (void **)__p[0];
      if (v25)
      {
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = &v37;
        else
          v27 = (std::string *)v37.__r_.__value_.__r.__words[0];
        memmove(v26, v27, v25);
      }
      strcpy((char *)v26 + v25, "4_g16p");
      v28 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
      v38[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v39, "a0");
      v40 = 3;
      std::string::basic_string[abi:nn180100]<0>(v41, "b0");
      v42 = 4;
      std::string::basic_string[abi:nn180100]<0>(v43, "b0");
      v29 = 0;
      v32 = 0;
      v33 = 0;
      v31 = &v32;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v31, (uint64_t *)&v32, v38[v29], (uint64_t)&v38[v29]);
        v29 += 8;
      }
      while (v29 != 24);
      getFullBitcodePath(&v36, (uint64_t)__p, v28, (uint64_t)&v31);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v37 = v36;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v32);
      for (k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v43[k + 2]) < 0)
          operator delete((void *)v43[k]);
      }
LABEL_78:
      if (v35 < 0)
        operator delete(__p[0]);
      break;
    case 0x20:
    case 0x22:
      v5 = "4_hal200";
LABEL_11:
      std::string::append(&v37, v5);
      break;
    default:
      break;
  }
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v37;
  else
    v7 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    v8 = v37.__r_.__value_.__l.__size_;
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v7, v8, 0);
  v10 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v10 + 10120), this, *Bitcode);
  if ((v11 & 1) == 0
  {
    AGCLLVMDriverExecuteIndirectESLGenerationShader::getDefaultCS(void)::defaultCS = 0;
    *(_QWORD *)algn_1EF8E8F08 = 0;
    qword_1EF8E8F10 = 0;
  }
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader(v10, (uint64_t *)off_1E7E70910, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverExecuteIndirectESLGenerationShader::getDefaultCS(void)::defaultCS, 0, 0);
  *(_QWORD *)v10 = &off_1E7E704B0;
  *(_QWORD *)(v10 + 10120) = &unk_1E7E70808;
  *(_QWORD *)(v10 + 10152) = &unk_1E7E708F8;
  *(_OWORD *)(v10 + 10088) = 0u;
  *(_QWORD *)(v10 + 10104) = 0x2000000000;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return v10 + 10120;
}

uint64_t *std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>(uint64_t *result, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  char *v22;
  std::string *v23;
  uint64_t v24;

  v5 = result;
  v6 = result + 1;
  if (result + 1 == a2 || (v7 = *((_DWORD *)a2 + 8), v7 > a3))
  {
    v8 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v10 = a2;
LABEL_16:
      if (v8)
        v13 = v10;
      else
        v13 = a2;
      if (v8)
        v11 = v10 + 1;
      else
        v11 = a2;
      goto LABEL_22;
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v15 = a2;
      do
      {
        v10 = (uint64_t *)v15[2];
        v16 = *v10 == (_QWORD)v15;
        v15 = v10;
      }
      while (v16);
    }
    if (*((_DWORD *)v10 + 8) < a3)
      goto LABEL_16;
    v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t *)v17;
          v18 = *(_DWORD *)(v17 + 32);
          if (v18 <= a3)
            break;
          v17 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v18 >= a3)
          break;
        v6 = v13 + 1;
        v17 = v13[1];
        if (!v17)
          goto LABEL_44;
      }
LABEL_51:
      v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3)
      return result;
    v11 = a2 + 1;
    v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        v11 = v12;
        v12 = (uint64_t *)*v12;
        v13 = v11;
        v14 = v11;
      }
      while (v12);
    }
    else
    {
      v14 = a2;
      do
      {
        v19 = v14;
        v14 = (uint64_t *)v14[2];
      }
      while ((uint64_t *)*v14 != v19);
      v13 = a2;
    }
    if (v14 == v6 || *((_DWORD *)v14 + 8) > a3)
    {
LABEL_22:
      v6 = v11;
      if (*v11)
        return result;
      goto LABEL_44;
    }
    v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t *)v20;
          v21 = *(_DWORD *)(v20 + 32);
          if (v21 <= a3)
            break;
          v20 = *v13;
          v6 = v13;
          if (!*v13)
            goto LABEL_44;
        }
        if (v21 >= a3)
          goto LABEL_51;
        v6 = v13 + 1;
        v20 = v13[1];
        if (!v20)
          goto LABEL_44;
      }
    }
  }
  v13 = result + 1;
LABEL_44:
  v22 = (char *)operator new(0x40uLL);
  *((_DWORD *)v22 + 8) = *(_DWORD *)a4;
  v23 = (std::string *)(v22 + 40);
  if (*(char *)(a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 8);
    *((_QWORD *)v22 + 7) = *(_QWORD *)(a4 + 24);
  }
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = v13;
  *v6 = (uint64_t)v22;
  v24 = *(_QWORD *)*v5;
  if (v24)
  {
    *v5 = v24;
    v22 = (char *)*v6;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], (uint64_t *)v22);
  ++v5[2];
  return result;
}

void getFullBitcodePath(std::string *this, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  signed int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  size_t v14;
  std::string *v15;
  const std::string::value_type *v16;
  const std::string::value_type *v17;
  uint64_t v18;
  const std::string::value_type *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string v24;

  v8 = *(_QWORD *)(a4 + 8);
  v6 = a4 + 8;
  v7 = v8;
  if (!v8)
    goto LABEL_11;
  v9 = HIWORD(a3);
  v10 = v6;
  do
  {
    v11 = *(_DWORD *)(v7 + 32);
    v12 = v11 < v9;
    if (v11 >= v9)
      v13 = (uint64_t *)v7;
    else
      v13 = (uint64_t *)(v7 + 8);
    if (!v12)
      v10 = v7;
    v7 = *v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= *(_DWORD *)(v10 + 32))
  {
    if (*(char *)(a2 + 23) >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
    v15 = &v24;
    std::string::basic_string[abi:nn180100]((uint64_t)&v24, v14 + 1);
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)v24.__r_.__value_.__r.__words[0];
    if (v14)
    {
      if (*(char *)(a2 + 23) >= 0)
        v16 = (const std::string::value_type *)a2;
      else
        v16 = *(const std::string::value_type **)a2;
      memmove(v15, v16, v14);
    }
    *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 95;
    v19 = *(const std::string::value_type **)(v10 + 40);
    v18 = v10 + 40;
    v17 = v19;
    v20 = *(char *)(v18 + 23);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)v18;
    else
      v21 = v17;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(v18 + 23);
    else
      v22 = *(_QWORD *)(v18 + 8);
    v23 = std::string::append(&v24, v21, v22);
    *this = *v23;
    v23->__r_.__value_.__r.__words[0] = 0;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_11:
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      *this = *(std::string *)a2;
  }
}

void std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

uint64_t AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::create(AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  const char *v5;
  const std::string::value_type *v6;
  std::string *v7;
  std::string::size_type size;
  llvm::LLVMContext **Bitcode;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t i;
  unsigned int v16;
  uint64_t v17;
  uint64_t j;
  unsigned int v19;
  uint64_t v20;
  uint64_t k;
  char **v22;
  char *v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  std::string v27;
  std::string v28;
  _DWORD v29[2];
  _QWORD v30[3];
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&v28, "gei_esl_gen");
  switch(*(_DWORD *)(*((_QWORD *)this + 4) + 28))
  {
    case 4:
      v5 = "gei_pds_gen_range_exec_gen1";
      goto LABEL_12;
    case 6:
    case 7:
      v5 = "gei_pds_gen_range_exec_gen2";
      goto LABEL_12;
    case 8:
      v6 = "_tmp_range_exec_gen1";
      goto LABEL_4;
    case 9:
    case 0xA:
    case 0xB:
    case 0x17:
      v6 = "_tmp_range_exec_gen2";
LABEL_4:
      std::string::append(&v28, v6);
      break;
    case 0xC:
      v5 = "gei_esl_range_exec_gen";
      goto LABEL_12;
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      v5 = "gei_esl_range_exec_gen2";
      goto LABEL_12;
    case 0x11:
    case 0x12:
      v5 = "gei_esl_range_exec_gen3";
      goto LABEL_12;
    case 0x13:
    case 0x14:
    case 0x15:
      v5 = "gei_esl_range_exec_gen3x";
      goto LABEL_12;
    case 0x16:
      std::string::basic_string[abi:nn180100]<0>(__p, "gei_esl_range_exec_gen4_g15p");
      v13 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
      v29[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v30, "a0");
      v31 = 3;
      std::string::basic_string[abi:nn180100]<0>(v32, "b0");
      v14 = 0;
      v23 = 0;
      v24 = 0;
      v22 = &v23;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v22, (uint64_t *)&v23, v29[v14], (uint64_t)&v29[v14]);
        v14 += 8;
      }
      while (v14 != 16);
      getFullBitcodePath(&v27, (uint64_t)__p, v13, (uint64_t)&v22);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v28 = v27;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v23);
      for (i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v32[i + 2]) < 0)
          operator delete((void *)v32[i]);
      }
      goto LABEL_49;
    case 0x18:
      std::string::basic_string[abi:nn180100]<0>(__p, "gei_esl_range_exec_gen4_g15g");
      v16 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
      v29[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v30, "a0");
      v31 = 3;
      std::string::basic_string[abi:nn180100]<0>(v32, "b0");
      v33 = 5;
      std::string::basic_string[abi:nn180100]<0>(v34, "c0");
      v17 = 0;
      v23 = 0;
      v24 = 0;
      v22 = &v23;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v22, (uint64_t *)&v23, v29[v17], (uint64_t)&v29[v17]);
        v17 += 8;
      }
      while (v17 != 24);
      getFullBitcodePath(&v27, (uint64_t)__p, v16, (uint64_t)&v22);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v28 = v27;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v23);
      for (j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v34[j + 2]) < 0)
          operator delete((void *)v34[j]);
      }
      goto LABEL_49;
    case 0x1F:
      std::string::basic_string[abi:nn180100]<0>(__p, "gei_esl_range_exec_gen4_g16p");
      v19 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
      v29[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v30, "a0");
      v31 = 3;
      std::string::basic_string[abi:nn180100]<0>(v32, "b0");
      v33 = 4;
      std::string::basic_string[abi:nn180100]<0>(v34, "b0");
      v20 = 0;
      v23 = 0;
      v24 = 0;
      v22 = &v23;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v22, (uint64_t *)&v23, v29[v20], (uint64_t)&v29[v20]);
        v20 += 8;
      }
      while (v20 != 24);
      getFullBitcodePath(&v27, (uint64_t)__p, v19, (uint64_t)&v22);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v28 = v27;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v23);
      for (k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v34[k + 2]) < 0)
          operator delete((void *)v34[k]);
      }
LABEL_49:
      if (v26 < 0)
        operator delete(__p[0]);
      break;
    case 0x20:
    case 0x22:
      v5 = "gei_esl_range_exec_gen4_hal200";
LABEL_12:
      MEMORY[0x1CAA2D494](&v28, v5);
      break;
    default:
      break;
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v28;
  else
    v7 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    size = v28.__r_.__value_.__l.__size_;
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v7, size, 0);
  v10 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v10 + 10120), this, *Bitcode);
  if ((v11 & 1) == 0
  {
    AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::getDefaultCS(void)::defaultCS = 0;
    *(_QWORD *)algn_1EF8E8F28 = 0;
    qword_1EF8E8F30 = 0;
  }
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader(v10, (uint64_t *)off_1E7E70E08, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverExecuteIndirectRangeExecutionVertexShader::getDefaultCS(void)::defaultCS, 0, 0);
  *(_QWORD *)v10 = &off_1E7E709A8;
  *(_QWORD *)(v10 + 10120) = &unk_1E7E70D00;
  *(_QWORD *)(v10 + 10152) = &unk_1E7E70DF0;
  *(_OWORD *)(v10 + 10088) = 0u;
  *(_QWORD *)(v10 + 10104) = 0x2000000000;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v10 + 10120;
}

_QWORD *AGCLLVMDriverVRRPatchVertexShader::create(AGCLLVMDriverVRRPatchVertexShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  const char *v5;
  std::string *p_p;
  std::string::size_type size;
  llvm::LLVMContext **Bitcode;
  _QWORD *v9;
  unsigned __int8 v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  unsigned int v15;
  uint64_t v16;
  uint64_t j;
  unsigned int v18;
  uint64_t v19;
  uint64_t k;
  char **v21;
  char *v22;
  uint64_t v23;
  void *v24[2];
  char v25;
  std::string v26;
  std::string __p;
  _DWORD v28[2];
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[4];

  v33[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&__p, (char *)&unk_1C3E4D9BB);
  switch(*(_DWORD *)(*((_QWORD *)this + 4) + 28))
  {
    case 0xC:
      v5 = "late_latched_vrr_g12";
      goto LABEL_7;
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      v5 = "late_latched_vrr_g13";
      goto LABEL_7;
    case 0x11:
    case 0x12:
      v5 = "late_latched_vrr_g14";
      goto LABEL_7;
    case 0x13:
    case 0x14:
    case 0x15:
      v5 = "late_latched_vrr_g14x";
      goto LABEL_7;
    case 0x16:
      std::string::basic_string[abi:nn180100]<0>(v24, "late_latched_vrr_g15p");
      v12 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
      v28[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v29, "a0");
      v30 = 3;
      std::string::basic_string[abi:nn180100]<0>(v31, "b0");
      v13 = 0;
      v22 = 0;
      v23 = 0;
      v21 = &v22;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v21, (uint64_t *)&v22, v28[v13], (uint64_t)&v28[v13]);
        v13 += 8;
      }
      while (v13 != 16);
      getFullBitcodePath(&v26, (uint64_t)v24, v12, (uint64_t)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v26;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v22);
      for (i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v31[i + 2]) < 0)
          operator delete((void *)v31[i]);
      }
      goto LABEL_44;
    case 0x18:
      std::string::basic_string[abi:nn180100]<0>(v24, "late_latched_vrr_g15g");
      v15 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
      v28[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v29, "a0");
      v30 = 3;
      std::string::basic_string[abi:nn180100]<0>(v31, "b0");
      v32 = 5;
      std::string::basic_string[abi:nn180100]<0>(v33, "c0");
      v16 = 0;
      v22 = 0;
      v23 = 0;
      v21 = &v22;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v21, (uint64_t *)&v22, v28[v16], (uint64_t)&v28[v16]);
        v16 += 8;
      }
      while (v16 != 24);
      getFullBitcodePath(&v26, (uint64_t)v24, v15, (uint64_t)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v26;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v22);
      for (j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v33[j + 2]) < 0)
          operator delete((void *)v33[j]);
      }
      goto LABEL_44;
    case 0x1F:
      std::string::basic_string[abi:nn180100]<0>(v24, "late_latched_vrr_g16p");
      v18 = *(_DWORD *)(*((_QWORD *)this + 4) + 24);
      v28[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v29, "a0");
      v30 = 3;
      std::string::basic_string[abi:nn180100]<0>(v31, "b0");
      v32 = 4;
      std::string::basic_string[abi:nn180100]<0>(v33, "b0");
      v19 = 0;
      v22 = 0;
      v23 = 0;
      v21 = &v22;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v21, (uint64_t *)&v22, v28[v19], (uint64_t)&v28[v19]);
        v19 += 8;
      }
      while (v19 != 24);
      getFullBitcodePath(&v26, (uint64_t)v24, v18, (uint64_t)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v26;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v22);
      for (k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v33[k + 2]) < 0)
          operator delete((void *)v33[k]);
      }
LABEL_44:
      if (v25 < 0)
        operator delete(v24[0]);
      break;
    case 0x20:
    case 0x22:
      v5 = "late_latched_vrr_hal200";
LABEL_7:
      MEMORY[0x1CAA2D494](&__p, v5);
      break;
    default:
      break;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)p_p, size, 1);
  v9 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v9 + 1261), this, *Bitcode);
  if ((v10 & 1) == 0
  {
    AGCLLVMDriverVRRPatchVertexShader::getDefaultCS(void)::defaultCS = 0;
    *(_QWORD *)algn_1EF8E8F48 = 0;
    qword_1EF8E8F50 = 0;
  }
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader((uint64_t)v9, (uint64_t *)off_1E7E71300, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverVRRPatchVertexShader::getDefaultCS(void)::defaultCS, 0, 0);
  *v9 = &off_1E7E70EA0;
  v9[1261] = &unk_1E7E711F8;
  v9[1265] = &unk_1E7E712E8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v9 + 1261;
}

_QWORD *AGCLLVMDriverGPUGatherVertexShader::create(AGCLLVMDriverGPUGatherVertexShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  unsigned int v5;
  void **v6;
  CFIndex v7;
  llvm::LLVMContext **Bitcode;
  _QWORD *v9;
  unsigned __int8 v10;
  void *__p[2];
  unsigned __int8 v13;

  std::string::basic_string[abi:nn180100]<0>(__p, (char *)&unk_1C3E4D9BB);
  v5 = *(_DWORD *)(*((_QWORD *)this + 4) + 28) - 4;
  if (v5 <= 0x1E && ((0x50FFF5FDu >> v5) & 1) != 0)
    MEMORY[0x1CAA2D494](__p, off_1E7E8AC28[v5]);
  if ((v13 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v7 = v13;
  else
    v7 = (CFIndex)__p[1];
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v6, v7, 0);
  v9 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v9 + 1261), this, *Bitcode);
  if ((v10 & 1) == 0
  {
    AGCLLVMDriverGPUGatherVertexShader::getDefaultCS(void)::defaultCS = 0;
    *(_QWORD *)algn_1EF8E8F68 = 0;
    qword_1EF8E8F70 = 0;
  }
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader((uint64_t)v9, (uint64_t *)off_1E7E717F8, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverGPUGatherVertexShader::getDefaultCS(void)::defaultCS, 0, 0);
  *v9 = &off_1E7E71398;
  v9[1261] = &unk_1E7E716F0;
  v9[1265] = &unk_1E7E717E0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return v9 + 1261;
}

_QWORD *AGCLLVMDriverFastClearVertexShaders::create(AGCLLVMCtx *a1, uint64_t a2, unsigned int a3)
{
  const UInt8 *v5;
  int v6;
  const char *v7;
  size_t v8;
  int v9;
  llvm::LLVMContext **Bitcode;
  _QWORD *v11;
  unsigned __int8 v12;

  if ((a3 & 3) == 1)
  {
    if ((a3 & 4) != 0)
    {
      v7 = "blit_vertex_fast_clear_gen1_meta";
    }
    else
    {
      v5 = 0;
      v9 = (a3 >> 3);
      v7 = "blit_vertex_fast_clear_gen1_1";
      v8 = 0;
      switch(v9)
      {
        case 1:
          goto LABEL_12;
        case 2:
          v7 = "blit_vertex_fast_clear_gen1_2";
          goto LABEL_12;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_13;
        case 4:
          v7 = "blit_vertex_fast_clear_gen1_4";
          goto LABEL_12;
        case 8:
          v7 = "blit_vertex_fast_clear_gen1_8";
          goto LABEL_12;
        default:
          v8 = 0;
          if (v9 != 16)
            goto LABEL_13;
          v7 = "blit_vertex_fast_clear_gen1_16";
          break;
      }
    }
    goto LABEL_12;
  }
  if ((a3 & 3) == 2)
  {
    if ((a3 & 4) != 0)
    {
      v7 = "blit_vertex_fast_clear_gen2_meta";
    }
    else
    {
      v5 = 0;
      v6 = (a3 >> 3);
      v7 = "blit_vertex_fast_clear_gen2_1";
      v8 = 0;
      switch(v6)
      {
        case 1:
          break;
        case 2:
          v7 = "blit_vertex_fast_clear_gen2_2";
          break;
        case 3:
        case 6:
        case 7:
          goto LABEL_13;
        case 4:
          v7 = "blit_vertex_fast_clear_gen2_4";
          break;
        case 5:
          v7 = "blit_vertex_fast_clear_gen2_5";
          break;
        case 8:
          v7 = "blit_vertex_fast_clear_gen2_8";
          break;
        default:
          v8 = 0;
          if (v6 != 16)
            goto LABEL_13;
          v7 = "blit_vertex_fast_clear_gen2_16";
          break;
      }
    }
LABEL_12:
    v8 = strlen(v7);
    v5 = (const UInt8 *)v7;
    goto LABEL_13;
  }
  v5 = 0;
  v8 = 0;
LABEL_13:
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode(a2, v5, v8, 1);
  v11 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 1261), a1, *Bitcode);
  if ((v12 & 1) == 0
  {
    AGCLLVMDriverFastClearVertexShaders::getDefaultCS(void)::defaultCS = 0;
    *(_QWORD *)algn_1EF8E8F88 = 0;
    qword_1EF8E8F90 = 0;
  }
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader((uint64_t)v11, (uint64_t *)off_1E7E71CF0, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverFastClearVertexShaders::getDefaultCS(void)::defaultCS, 0, 0);
  *v11 = &off_1E7E71890;
  v11[1261] = &unk_1E7E71BE8;
  v11[1265] = &unk_1E7E71CD8;
  return v11 + 1261;
}

_QWORD *AGCLLVMDriverPDSPatchUpVertexShader::create(AGCLLVMDriverPDSPatchUpVertexShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  _QWORD *v5;
  unsigned __int8 v6;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)"pds_patchup_vertex", 18, 0);
  v5 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v5 + 1261), this, *Bitcode);
  if ((v6 & 1) == 0
  {
    AGCLLVMDriverPDSPatchUpVertexShader::getDefaultCS(void)::defaultCS = 0;
    *(_QWORD *)algn_1EF8E8FA8 = 0;
    qword_1EF8E8FB0 = 0;
  }
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader((uint64_t)v5, (uint64_t *)off_1E7E721E8, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverPDSPatchUpVertexShader::getDefaultCS(void)::defaultCS, 0, 0);
  *v5 = &off_1E7E71D88;
  v5[1261] = &unk_1E7E720E0;
  v5[1265] = &unk_1E7E721D0;
  return v5 + 1261;
}

char *AGCArgumentBuffer::parseMDRoot(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *i;
  unint64_t v15;
  uint8x8_t v16;
  void **v17;
  _QWORD *v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  char *v43;
  void *v44;
  uint64_t v45;
  void *__p;
  char v47;
  void (**v48)(AGCArgumentBuffer::Array *__hidden);
  int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52[2];
  _BYTE v53[256];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v12 = v9 % v10;
    }
    else
    {
      v12 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    if (v13)
    {
      for (i = (_QWORD *)*v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == a2)
            return (char *)(i + 3);
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  v49 = 3;
  v48 = &off_1E7E8AD70;
  v50 = 0;
  v51 = 1;
  v52[0] = v53;
  v52[1] = (void *)0x800000000;
  v55 = 0;
  v56 = 0;
  v54 = 0;
  v57 = 1;
  if (v10)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v17 = *(void ***)(*(_QWORD *)(a1 + 48) + 8 * v3);
    if (v17)
    {
      v18 = *v17;
      if (*v17)
      {
        do
        {
          v19 = v18[1];
          if (v19 == v9)
          {
            if (v18[2] == a2)
              goto LABEL_90;
          }
          else
          {
            if (v16.u32[0] > 1uLL)
            {
              if (v19 >= v10)
                v19 %= v10;
            }
            else
            {
              v19 &= v10 - 1;
            }
            if (v19 != v3)
              break;
          }
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
    }
  }
  v18 = operator new(0x70uLL);
  *v18 = 0;
  v18[1] = v9;
  *((_DWORD *)v18 + 8) = 2;
  v18[5] = v18 + 7;
  v18[6] = 0x400000000;
  v18[2] = a2;
  v18[3] = &off_1E7E8AE10;
  v18[11] = 0;
  v18[12] = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 72) + 1);
  v21 = *(float *)(a1 + 80);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v10 = *(_QWORD *)(a1 + 56);
    }
    if (*(_QWORD *)&prime > v10)
      goto LABEL_46;
    if (*(_QWORD *)&prime < v10)
    {
      v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 72) / *(float *)(a1 + 80));
      if (v10 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_46:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = *(void **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          *(int8x8_t *)(a1 + 56) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = *(_QWORD **)(a1 + 64);
          if (v29)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v30) = a1 + 64;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  v37 = *(_QWORD *)(a1 + 48);
                  if (!*(_QWORD *)(v37 + 8 * v36))
                  {
                    *(_QWORD *)(v37 + 8 * v36) = v29;
                    goto LABEL_71;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v36);
                  **(_QWORD **)(*(_QWORD *)(a1 + 48) + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_71:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_75;
        }
        v44 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = 0;
        if (v44)
          operator delete(v44);
        v10 = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
LABEL_75:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v38 = *(_QWORD *)(a1 + 48);
  v39 = *(_QWORD **)(v38 + 8 * v3);
  if (v39)
  {
    *v18 = *v39;
  }
  else
  {
    *v18 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v18;
    *(_QWORD *)(v38 + 8 * v3) = a1 + 64;
    if (!*v18)
      goto LABEL_89;
    v40 = *(_QWORD *)(*v18 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v40 >= v10)
        v40 %= v10;
    }
    else
    {
      v40 &= v10 - 1;
    }
    v39 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v40);
  }
  *v39 = v18;
LABEL_89:
  ++*(_QWORD *)(a1 + 72);
LABEL_90:
  v43 = (char *)(v18 + 3);
  AGCArgumentBuffer::ResourceTracker::pushArray((AGCArgumentBuffer::ResourceTracker *)v52, (AGCArgumentBuffer::Array *)&v48, 0);
  AGCArgumentBuffer::parseMDStruct((uint64_t)&v45, a1, a2, a3, 0, (uint64_t)(v18 + 3), (int32x2_t *)v52);
  AGCArgumentBuffer::ResourceTracker::popArray((uint64_t *)v52);
  *((_DWORD *)v18 + 22) = HIDWORD(v51);
  *((_DWORD *)v18 + 23) = v54;
  *((_DWORD *)v18 + 24) = v55;
  *((_DWORD *)v18 + 25) = HIDWORD(v54);
  v18[13] = a3;
  if (v47 < 0)
    operator delete(__p);
  if (v52[0] != v53)
    free(v52[0]);
  v41 = v50;
  v48 = &off_1E7E8AD70;
  v50 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  return v43;
}

void llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::destroy_range(char *a1, char *a2)
{
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  if (a2 != a1)
  {
    v3 = a2 - 40;
    do
    {
      v4 = (char *)*((_QWORD *)v3 - 2);
      if (v3 != v4)
        free(v4);
      v5 = (char *)*((_QWORD *)v3 - 8);
      if (v3 - 48 != v5)
        free(v5);
      v6 = v3 - 64;
      v3 -= 104;
    }
    while (v6 != a1);
  }
}

uint64_t llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::push_back(uint64_t a1, char *a2)
{
  char *v2;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  char *v12;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v10 = v5 + 104 * v4;
    if (v5 <= (unint64_t)a2 && v10 > (unint64_t)a2)
    {
      v12 = &a2[-v5];
      llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::grow(a1);
      v5 = *(_QWORD *)a1;
      v2 = &v12[*(_QWORD *)a1];
    }
    else
    {
      llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::grow(a1);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = (_QWORD *)(v5 + 104 * v6);
  *v7 = v7 + 2;
  v7[1] = 0x400000000;
  if (*((_DWORD *)v2 + 2))
    llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)v7, (uint64_t)v2);
  v8 = v5 + 104 * v6;
  *(_QWORD *)(v8 + 48) = v8 + 64;
  result = v8 + 48;
  *(_QWORD *)(result + 8) = 0x400000000;
  if (*((_DWORD *)v2 + 14))
    result = llvm::SmallVectorImpl<llvm::Value *>::operator=(result, (uint64_t)(v2 + 48));
  *(_DWORD *)(v5 + 104 * v6 + 96) = *((_DWORD *)v2 + 24);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::buildStruct(AGCArgumentBuffer::Tier1TypeBuilder *this, AGCArgumentBuffer::Struct *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  llvm::ArrayType *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  _BYTE v24[32];
  void *v25;
  uint64_t v26;
  void *v27[2];
  _BYTE v28[16];
  void *v29;
  uint64_t v30;
  _DWORD v31[10];
  void *v32;
  uint64_t v33;
  _BYTE v34[64];
  void *v35;
  uint64_t v36;
  _QWORD v37[5];
  int v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  AGCArgumentBuffer::Tier1TypeBuilder::endGroup(this);
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 1000, *(_DWORD *)(*((_QWORD *)this + 19) + 104 * *((unsigned int *)this + 40) - 96));
  AGCArgumentBuffer::Tier1TypeBuilder::pushArrayIndices((uint64_t)this);
  v22 = v24;
  v23 = 0x400000000;
  if (*((_DWORD *)this + 16))
  {
    llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v22, (uint64_t)this + 56);
    v25 = v27;
    v26 = 0x400000000;
    v29 = v31;
    v30 = 0x400000000;
    if ((_DWORD)v23)
      llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)&v29, (uint64_t)&v22);
  }
  else
  {
    v25 = v27;
    v26 = 0x400000000;
    v29 = v31;
    v30 = 0x400000000;
  }
  v31[8] = 0;
  llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::push_back((uint64_t)this + 152, (char *)&v25);
  if (v29 != v31)
    free(v29);
  if (v25 != v27)
    free(v25);
  if (v22 != v24)
    free(v22);
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)this + 19) + 104 * *((unsigned int *)this + 40);
  *(_DWORD *)(v4 - 8) = *(_DWORD *)(v4 - 96);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4 - 104, 0);
  v5 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (uint64_t *)*((_QWORD *)a2 + 2);
    v8 = 8 * v5;
    do
    {
      if (*v7)
        v6 |= AGCArgumentBuffer::Tier1TypeBuilder::buildField((uint64_t)this, *v7);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  LODWORD(v26) = 7;
  v27[0] = v28;
  v27[1] = (void *)0x400000000;
  v32 = v34;
  v33 = 0x800000000;
  v35 = v37;
  v36 = 0x400000000;
  v37[4] = 0;
  v38 = 0;
  v25 = &off_1E7E8AD90;
  v39 = 0;
  if ((v6 & 1) != 0)
  {
    AGCArgumentBuffer::Tier1TypeBuilder::endConstantGroup((uint64_t)this);
    v39 = *((_QWORD *)this + 3);
    AGCArgumentBuffer::Tier1TypeBuilder::buildConstant(this, (AGCArgumentBuffer::Constant *)&v25);
  }
  AGCArgumentBuffer::Tier1TypeBuilder::endGroup(this);
  v9 = (_QWORD *)((char *)this + 56);
  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)this + 56, *((_QWORD *)this + 19) + 104 * *((unsigned int *)this + 40) - 56);
  v10 = (llvm::ArrayType *)llvm::StructType::get();
  v11 = *((unsigned int *)this + 16);
  if ((_DWORD)v11)
  {
    v12 = *v9 + 8 * v11;
    do
    {
      v13 = *(_QWORD *)(v12 - 8);
      v12 -= 8;
      v10 = (llvm::ArrayType *)llvm::ArrayType::get(v10, (llvm::Type *)*(unsigned int *)(v13 + 24));
    }
    while (v12 != *v9);
    v14 = *((_DWORD *)this + 16);
    if (v14)
    {
      v15 = *((_DWORD *)this + 264) - v14;
      v16 = *((_DWORD *)this + 252) - v14;
      *((_DWORD *)this + 264) = v15;
      *((_DWORD *)this + 252) = v16;
    }
  }
  --*((_DWORD *)this + 252);
  v17 = *((_DWORD *)this + 40) - 1;
  *((_DWORD *)this + 40) = v17;
  v18 = *((_QWORD *)this + 19) + 104 * v17;
  v19 = *(void **)(v18 + 48);
  if (v19 != (void *)(v18 + 64))
    free(v19);
  if (*(_QWORD *)v18 != v18 + 16)
    free(*(void **)v18);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(*((_QWORD *)this + 19) + 104 * *((unsigned int *)this + 40) - 104, (uint64_t)v10);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  v20 = *((_QWORD *)this + 19) + 104 * *((unsigned int *)this + 40);
  *(_DWORD *)(v20 - 8) = *(_DWORD *)(v20 - 96);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v20 - 104, 0);
  v25 = &off_1E7E8AD30;
  if (v35 != v37)
    free(v35);
  if (v32 != v34)
    free(v32);
  if (v27[0] != v28)
    free(v27[0]);
  return v6 & 1;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::buildField(uint64_t a1, uint64_t a2)
{
  int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v8;
  uint64_t v9;

  v3 = *(_DWORD *)(a2 + 8);
  if (a2 && !v3)
  {
    do
    {
      a2 = *(_QWORD *)(a2 + 16);
      v3 = *(_DWORD *)(a2 + 8);
      if (a2)
        v4 = v3 == 0;
      else
        v4 = 0;
    }
    while (v4);
  }
  v5 = v3 - 3;
  if (v5 >= 0xFFFFFFFE)
    return AGCArgumentBuffer::Tier1TypeBuilder::buildStruct((AGCArgumentBuffer::Tier1TypeBuilder *)a1, (AGCArgumentBuffer::Struct *)a2);
  switch(v5)
  {
    case 0u:
      v6 = *(_DWORD *)(a1 + 64);
      if (v6 >= *(_DWORD *)(a1 + 68))
      {
        v9 = a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
        a2 = v9;
        v6 = *(_DWORD *)(a1 + 64);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6) = a2;
      ++*(_DWORD *)(a1 + 64);
      result = AGCArgumentBuffer::Tier1TypeBuilder::buildField(a1, *(_QWORD *)(a2 + 16));
      --*(_DWORD *)(a1 + 64);
      return result;
    case 1u:
      v8 = (unsigned int *)(a1 + 48);
      goto LABEL_16;
    case 2u:
      v8 = (unsigned int *)(a1 + 40);
      goto LABEL_16;
    case 3u:
      v8 = (unsigned int *)(a1 + 44);
LABEL_16:
      AGCArgumentBuffer::Tier1TypeBuilder::buildResource((AGCArgumentBuffer::Tier1TypeBuilder *)a1, (AGCArgumentBuffer::Resource *)a2, v8);
      return 1;
    case 4u:
      AGCArgumentBuffer::Tier1TypeBuilder::buildConstant((AGCArgumentBuffer::Tier1TypeBuilder *)a1, (AGCArgumentBuffer::Constant *)a2);
      goto LABEL_18;
    default:
LABEL_18:
      result = 0;
      break;
  }
  return result;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::buildConstant(AGCArgumentBuffer::Tier1TypeBuilder *this, AGCArgumentBuffer::Constant *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::ArrayType *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  int v15;

  v4 = (char *)this + 1000;
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 1000, *(_DWORD *)(*((_QWORD *)this + 19) + 104 * *((unsigned int *)this + 40) - 96));
  llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)v4, *((_DWORD *)this + 28));
  AGCArgumentBuffer::Tier1TypeBuilder::pushArrayIndices((uint64_t)this);
  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)a2 + 184, (uint64_t)this + 1048);
  v5 = *((unsigned int *)this + 252);
  if ((_DWORD)v5)
  {
    v6 = *((_QWORD *)this + 125);
    v7 = 4 * v5;
    do
    {
      v6 += 4;
      v8 = llvm::ConstantInt::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)a2 + 104, v8);
      v7 -= 4;
    }
    while (v7);
  }
  v9 = (llvm::ArrayType *)*((_QWORD *)a2 + 31);
  v10 = *((unsigned int *)this + 16);
  if ((_DWORD)v10)
  {
    v11 = *((_QWORD *)this + 7) + 8 * v10;
    do
    {
      v12 = *(_QWORD *)(v11 - 8);
      v11 -= 8;
      v9 = (llvm::ArrayType *)llvm::ArrayType::get(v9, (llvm::Type *)*(unsigned int *)(v12 + 24));
    }
    while (v11 != *((_QWORD *)this + 7));
  }
  result = llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this + 104, (uint64_t)v9);
  v14 = *((_DWORD *)this + 16);
  v15 = *((_DWORD *)this + 252);
  if (v14)
  {
    v15 -= v14;
    *((_DWORD *)this + 264) -= v14;
  }
  *((_DWORD *)this + 252) = v15 - 2;
  return result;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::buildResource(AGCArgumentBuffer::Tier1TypeBuilder *this, AGCArgumentBuffer::Resource *a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  AGCArgumentBuffer::Tier1TypeBuilder::endConstantGroup((uint64_t)this);
  *((_DWORD *)a2 + 25) = *a3;
  llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)a2 + 184, (uint64_t)this + 1048);
  v6 = *((unsigned int *)this + 252);
  if ((_DWORD)v6)
  {
    v7 = *((_QWORD *)this + 125);
    v8 = 4 * v6;
    do
    {
      v7 += 4;
      v9 = llvm::ConstantInt::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)a2 + 104, v9);
      v8 -= 4;
    }
    while (v8);
  }
  v10 = *((unsigned int *)this + 16);
  if ((_DWORD)v10)
  {
    v11 = (uint64_t *)*((_QWORD *)this + 7);
    v12 = 8 * v10;
    v13 = 1;
    do
    {
      v14 = *v11++;
      v13 *= *(_DWORD *)(v14 + 24);
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    v13 = 1;
  }
  v15 = (char *)a2 + 104;
  v16 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, v16);
  v17 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, v17);
  v18 = llvm::ConstantInt::get();
  result = llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, v18);
  *a3 += v13;
  return result;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::endConstantGroup(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(this + 112))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 152) + 104 * *(unsigned int *)(this + 160) - 104;
    v3 = llvm::StructType::get();
    this = llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v2, v3);
    *(_DWORD *)(v1 + 112) = 0;
  }
  return this;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::pushArrayIndices(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned int *)(this + 64);
  if ((_DWORD)v1)
  {
    v2 = this;
    v3 = *(uint64_t **)(this + 56);
    v4 = this + 1048;
    v5 = this + 1000;
    v6 = 8 * v1;
    do
    {
      v7 = *v3++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4, *(unsigned int *)(v7 + 32) | ((unint64_t)*(unsigned int *)(v2 + 1008) << 32));
      this = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v5, 0);
      v6 -= 8;
    }
    while (v6);
  }
  return this;
}

uint64_t AGCArgumentBuffer::Tier1TypeBuilder::endGroup(AGCArgumentBuffer::Tier1TypeBuilder *this)
{
  llvm::ArrayType *v2;
  llvm::ArrayType *v3;
  llvm::ArrayType *v4;
  llvm::ArrayType *v5;
  llvm::ArrayType *v6;
  llvm::ArrayType *v7;
  llvm::ArrayType *v8;
  llvm::Type *v9;
  llvm::Type *v10;
  llvm::Type *v11;
  llvm::Type *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (llvm::ArrayType *)*((_QWORD *)this + 4);
  v3 = (llvm::ArrayType *)llvm::ArrayType::get(v2, (llvm::Type *)*(unsigned int *)(*((_QWORD *)this + 1) + 1704));
  v4 = (llvm::ArrayType *)llvm::ArrayType::get(v3, (llvm::Type *)*((unsigned int *)this + 10));
  v5 = (llvm::ArrayType *)llvm::ArrayType::get(*((llvm::ArrayType **)this + 4), (llvm::Type *)*(unsigned int *)(*((_QWORD *)this + 1) + 1708));
  v6 = (llvm::ArrayType *)llvm::ArrayType::get(v5, (llvm::Type *)*((unsigned int *)this + 11));
  v7 = (llvm::ArrayType *)llvm::ArrayType::get(*((llvm::ArrayType **)this + 3), (llvm::Type *)*(unsigned int *)(*((_QWORD *)this + 1) + 1756));
  v8 = (llvm::ArrayType *)*((_QWORD *)this + 4);
  llvm::ArrayType::get(v8, 0);
  v9 = (llvm::Type *)*((unsigned int *)this + 12);
  if ((_DWORD)v9)
    llvm::ArrayType::get(v2, v9);
  if (*((_DWORD *)this + 10))
    llvm::ArrayType::get(v4, (llvm::Type *)2);
  if (*((_DWORD *)this + 11))
    llvm::ArrayType::get(v6, (llvm::Type *)1);
  v10 = (llvm::Type *)*((unsigned int *)this + 10);
  if ((_DWORD)v10)
  {
    llvm::ArrayType::get(v7, v10);
    v11 = (llvm::Type *)*((unsigned int *)this + 10);
    if ((_DWORD)v11)
      llvm::ArrayType::get(v8, v11);
  }
  v12 = (llvm::Type *)*((unsigned int *)this + 11);
  if ((_DWORD)v12)
    llvm::ArrayType::get(v8, v12);
  if (*((_DWORD *)this + 12) || *((_DWORD *)this + 10))
  {
    v13 = *((_QWORD *)this + 19) + 104 * *((unsigned int *)this + 40) - 104;
  }
  else
  {
    v13 = *((_QWORD *)this + 19) + 104 * *((unsigned int *)this + 40) - 104;
    if (!*((_DWORD *)this + 11))
    {
      v14 = llvm::StructType::get();
      goto LABEL_16;
    }
  }
  v14 = llvm::StructType::get();
LABEL_16:
  *(_QWORD *)(*(_QWORD *)v13 + 8 * *(unsigned int *)(v13 + 96)) = v14;
  return AGCArgumentBuffer::Tier1TypeBuilder::endConstantGroup((uint64_t)this);
}

void AGCArgumentBuffer::Resource::~Resource(AGCArgumentBuffer::Resource *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCArgumentBuffer::Constant::~Constant(AGCArgumentBuffer::Constant *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
  JUMPOUT(0x1CAA2D68CLL);
}

void llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::grow(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(char **)a1;
  v4 = *(_DWORD *)(a1 + 8);
  if (v4)
  {
    v5 = 0;
    v6 = 104 * v4;
    do
    {
      v7 = (_QWORD *)(v2 + v5);
      *v7 = v2 + v5 + 16;
      v7[1] = 0x400000000;
      if (*(_DWORD *)&v3[v5 + 8])
        v7 = (_QWORD *)llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)v7, (uint64_t)&v3[v5]);
      v7[6] = v7 + 8;
      v8 = (uint64_t)(v7 + 6);
      *(_QWORD *)(v8 + 8) = 0x400000000;
      if (*(_DWORD *)&v3[v5 + 56])
        llvm::SmallVectorImpl<llvm::Value *>::operator=(v8, (uint64_t)&v3[v5 + 48]);
      *(_DWORD *)(v2 + v5 + 96) = *(_DWORD *)&v3[v5 + 96];
      v5 += 104;
    }
    while (v6 != v5);
    v3 = *(char **)a1;
    v9 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v9 = 0;
  }
  llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::destroy_range(v3, &v3[104 * v9]);
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

__n128 AGCArgumentBuffer::ResourceTracker::pushArray(AGCArgumentBuffer::ResourceTracker *this, AGCArgumentBuffer::Array *a2, int a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  AGCArgumentBuffer::Array **v9;
  _OWORD *v10;
  __n128 result;
  __int128 v12;
  BOOL v13;
  char *v14;
  AGCArgumentBuffer::Array *v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;

  v6 = *((_DWORD *)this + 72);
  v15 = a2;
  v16 = a3;
  v17 = 0;
  v18 = 0;
  v19 = v6;
  v7 = *((unsigned int *)this + 2);
  v8 = *(_QWORD *)this;
  v9 = &v15;
  if (v7 >= *((_DWORD *)this + 3))
  {
    v13 = v8 + 32 * v7 > (unint64_t)&v15;
    if (v8 <= (unint64_t)&v15 && v13)
    {
      v14 = (char *)&v15 - v8;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_QWORD *)this;
      v9 = (AGCArgumentBuffer::Array **)&v14[*(_QWORD *)this];
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_QWORD *)this;
      v9 = &v15;
    }
  }
  v10 = (_OWORD *)(v8 + 32 * *((unsigned int *)this + 2));
  result = *(__n128 *)v9;
  v12 = *((_OWORD *)v9 + 1);
  *v10 = *(_OWORD *)v9;
  v10[1] = v12;
  ++*((_DWORD *)this + 2);
  *((_DWORD *)this + 74) *= *((_DWORD *)a2 + 6);
  LODWORD(v10) = *((_DWORD *)this + 73) + a3;
  *((_DWORD *)this + 73) = (_DWORD)v10 + 1;
  *((_DWORD *)a2 + 8) = (_DWORD)v10;
  return result;
}

void AGCArgumentBuffer::parseMDStruct(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int32x2_t *a7)
{
  uint64_t v12;
  unint64_t v13;
  llvm::LLVMContext *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t i;
  unsigned int v32;
  unsigned int v33;
  _BYTE *v34;
  BOOL v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  _BYTE *v45;
  llvm::MDString *v46;
  llvm::MDString *v47;
  llvm::MDString *v48;
  _DWORD *String;
  size_t v50;
  unint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  unsigned int *v54;
  _DWORD *v55;
  unsigned int v56;
  uint64_t *v57;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  std::string::value_type v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  llvm::MDString *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  unsigned __int8 *v73;
  unint64_t v74;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char v83;
  char v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  BOOL v96;
  _BOOL4 v99;
  unsigned int v100;
  char v101;
  unsigned int v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  size_t v107;
  _BYTE *v108;
  void *v109;
  int64_t v110;
  int v113;
  BOOL v115;
  int v116;
  uint64_t v122;
  BOOL v124;
  uint64_t v125;
  const char *v128;
  size_t v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  char v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  BOOL v139;
  char v140;
  int v141;
  uint64_t v142;
  AGCArgumentBuffer::Resource *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  std::string::value_type v147;
  BOOL v148;
  char v149;
  uint64_t v150;
  unint64_t v154;
  unint64_t v155;
  int v156;
  const char *v157;
  size_t v158;
  BOOL v159;
  std::string *v160;
  BOOL v161;
  BOOL v162;
  int v163;
  uint64_t v164;
  AGCArgumentBuffer::Resource *v165;
  int v166;
  uint64_t v167;
  uint64_t *v168;
  int v169;
  uint64_t *j;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  BOOL v175;
  BOOL v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  std::string *v181;
  unsigned __int16 v182;
  int v183;
  int v184;
  uint64_t v185;
  unsigned int *v186;
  uint64_t v187;
  _QWORD *__s1a;
  _QWORD *__s1;
  BOOL v190;
  void *__s;
  uint64_t v192;
  uint64_t v194;
  uint64_t **v195;
  std::string *v196;
  unsigned int v197;
  _BYTE *v198;
  size_t __n;
  __int16 v200;
  int v201;
  unsigned int v202;
  int v203;
  __int16 v204;
  int v205;
  int v206;
  int v207;
  uint64_t v208;
  void *__dst;
  std::string::value_type *v210;
  std::string::size_type v211;
  unsigned __int8 v212;
  _DWORD *v213;
  uint64_t v214;
  _QWORD v215[4];

  v12 = a1;
  v215[2] = *MEMORY[0x1E0C80C00];
  *(_WORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v196 = (std::string *)(a1 + 8);
  std::string::push_back((std::string *)(a1 + 8), 123);
  v13 = *(unsigned int *)(a4 + 12);
  v213 = v215;
  v214 = 0x400000000;
  llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)&v213, v13, 0);
  v15 = *(_QWORD *)a7 + 32 * a7[1].u32[0];
  if (!*(_BYTE *)(v15 - 16))
  {
    *(_BYTE *)(v15 - 16) = 1;
    *(_DWORD *)(v15 - 20) = a5;
  }
  a7[36] = vadd_s32(a7[36], (int32x2_t)0x100000001);
  v195 = (uint64_t **)(a6 + 16);
  v16 = *(unsigned int *)(a6 + 24);
  if ((_DWORD)v16 != (_DWORD)v13)
  {
    if (v16 <= v13)
    {
      if (*(_DWORD *)(a6 + 28) < v13)
      {
        __dst = 0;
        v20 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
        v21 = *(uint64_t **)(a6 + 16);
        v22 = *(unsigned int *)(a6 + 24);
        if ((_DWORD)v22)
        {
          v23 = a4;
          v24 = 8 * v22;
          v25 = 8 * v22;
          v26 = (_QWORD *)v20;
          do
          {
            v27 = *v21;
            *v21++ = 0;
            *v26++ = v27;
            v25 -= 8;
          }
          while (v25);
          v28 = (uint64_t)(*v195 - 1);
          do
          {
            v29 = *(_QWORD *)(v28 + v24);
            *(_QWORD *)(v28 + v24) = 0;
            if (v29)
              (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            v24 -= 8;
          }
          while (v24);
          v21 = *v195;
          a4 = v23;
        }
        v30 = (int)__dst;
        if (v21 != (uint64_t *)(a6 + 32))
          free(v21);
        *(_QWORD *)(a6 + 16) = v20;
        *(_DWORD *)(a6 + 28) = v30;
        v16 = *(unsigned int *)(a6 + 24);
      }
      if (v16 != v13)
        bzero(&(*v195)[v16], 8 * v13 - 8 * v16);
    }
    else
    {
      v17 = 8 * v13 - 8 * v16;
      v18 = &(*v195)[v16 - 1];
      do
      {
        v19 = *v18;
        *v18 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        --v18;
        v17 += 8;
      }
      while (v17);
    }
    *(_DWORD *)(a6 + 24) = v13;
  }
  if ((_DWORD)v13)
  {
    for (i = 0; i != v13; ++i)
    {
      llvm::Type::getInt32Ty(*(llvm::Type **)(a2 + 8), v14);
      __dst = (void *)llvm::ConstantInt::get();
      v210 = (std::string::value_type *)llvm::ConstantInt::get();
      v213[i] = llvm::DataLayout::getIndexedOffsetInType();
    }
  }
  v32 = *(_DWORD *)(a3 + 8);
  if (v32)
  {
    v33 = 0;
    v186 = (unsigned int *)&a7[35];
    v185 = a2;
    v194 = v12;
    v197 = *(_DWORD *)(a3 + 8);
    v192 = a4;
    do
    {
      v208 = 0;
      v206 = -1;
      v207 = 0;
      if (isStringMDNode(*(llvm::MDString **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * v33), "air.struct_type_info"))
      {
        v34 = *(_BYTE **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * (v33 + 1));
        if (v34 && ((*v34 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v34)) == 0)
          v34 = 0;
        v198 = v34;
        if (v34)
          v35 = *(_BYTE *)v12 == 0;
        else
          v35 = 1;
        v36 = !v35;
        *(_BYTE *)v12 = v36;
        v33 += 2;
      }
      else
      {
        v198 = 0;
      }
      LODWORD(__dst) = v33;
      v37 = parseMDInt(0, a3, (unsigned int *)&__dst, (_DWORD *)&v208 + 1);
      if (*(_BYTE *)v12)
        v38 = v37;
      else
        v38 = 0;
      *(_BYTE *)v12 = v38;
      LODWORD(__dst) = v33 + 1;
      v39 = parseMDInt(0, a3, (unsigned int *)&__dst, &v208);
      if (*(_BYTE *)v12)
        v40 = v39;
      else
        v40 = 0;
      *(_BYTE *)v12 = v40;
      v41 = v33 + 3;
      LODWORD(__dst) = v33 + 2;
      v42 = parseMDInt(0, a3, (unsigned int *)&__dst, &v207);
      if (*(_BYTE *)v12)
        v43 = v42;
      else
        v43 = 0;
      v44 = a3 - 8 * *(unsigned int *)(a3 + 8);
      v45 = *(_BYTE **)(v44 + 8 * v41);
      if (v45)
      {
        if (*v45)
          v46 = 0;
        else
          v46 = *(llvm::MDString **)(v44 + 8 * v41);
      }
      else
      {
        v46 = 0;
      }
      if (!v46)
        v43 = 0;
      v47 = *(llvm::MDString **)(v44 + 8 * (v33 + 4));
      if (v47)
      {
        if (*(_BYTE *)v47)
          v48 = 0;
        else
          v48 = v47;
      }
      else
      {
        v48 = 0;
      }
      if (!v48)
        v43 = 0;
      *(_BYTE *)v12 = v43;
      String = (_DWORD *)llvm::MDString::getString(v46);
      __n = v50;
      llvm::MDString::getString(v48);
      v51 = v214;
      if ((_DWORD)v214)
      {
        v52 = v213;
        do
        {
          v53 = v51 >> 1;
          v54 = (unsigned int *)&v52[4 * (v51 >> 1)];
          v56 = *v54;
          v55 = v54 + 1;
          v51 += ~(v51 >> 1);
          if (v56 < HIDWORD(v208))
            v52 = v55;
          else
            v51 = v53;
        }
        while (v51);
      }
      else
      {
        v52 = v213;
      }
      v57 = *v195;
      if (__n >= 7 && *String == 1801675120 && *(_DWORD *)((char *)String + 3) == 1600415083)
        v207 *= *((char *)String + __n - 1) - 48;
      __s = String;
      v59 = &v57[((unint64_t)(v52 - (_BYTE *)v213) >> 2)];
      v60 = *(_QWORD *)(*(_QWORD *)(a4 + 16) + 8 * ((unint64_t)(v52 - (_BYTE *)v213) >> 2));
      if (*(_BYTE *)(v60 + 8) == 17)
      {
        v61 = 0;
        v62 = 1;
        do
        {
          v63 = v59;
          v64 = operator new();
          v65 = *(_DWORD *)(v60 + 32);
          *(_DWORD *)(v64 + 8) = 3;
          *(_QWORD *)v64 = &off_1E7E8AD70;
          *(_QWORD *)(v64 + 16) = 0;
          v59 = (uint64_t *)(v64 + 16);
          *(_QWORD *)(v64 + 24) = v65;
          v66 = *v63;
          *v63 = v64;
          if (v66)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
            v65 = *(_DWORD *)(v64 + 24);
          }
          v62 *= (_BYTE)v65;
          v60 = **(_QWORD **)(v60 + 16);
          AGCArgumentBuffer::ResourceTracker::pushArray((AGCArgumentBuffer::ResourceTracker *)a7, (AGCArgumentBuffer::Array *)v64, 0);
          ++v61;
        }
        while (*(_BYTE *)(v60 + 8) == 17);
        if (v61)
          std::string::push_back(v196, v62);
        v12 = v194;
        v32 = v197;
      }
      else
      {
        v61 = 0;
      }
      v33 += 5;
      while (v33 < v32)
      {
        v67 = *(llvm::MDString **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * v33);
        if (isStringMDNode(v67, "air.render_target")
          || isStringMDNode(v67, "air.raster_order_group")
          || isStringMDNode(v67, "air.imageblock_index"))
        {
          goto LABEL_94;
        }
        if (!isStringMDNode(v67, "air.indirect_argument"))
          break;
        LODWORD(__dst) = v33 + 1;
        if (parseMDInt(0, a3, (unsigned int *)&__dst, &v206))
        {
          v68 = (v206 + a5);
          v206 += a5;
          v69 = operator new();
          *(_DWORD *)(v69 + 8) = 1;
          *(_QWORD *)v69 = &off_1E7EB7F38;
          *(_QWORD *)(v69 + 16) = v69 + 32;
          *(_QWORD *)(v69 + 24) = 0x400000000;
          v70 = *v59;
          *v59 = v69;
          if (v70)
            (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
          AGCArgumentBuffer::parseMDStruct(&__dst, a2, v198, v60, v68, v69, a7);
          *(_BYTE *)(v12 + 1) |= BYTE1(__dst);
          if ((v212 & 0x80u) == 0)
            v71 = (const std::string::value_type *)&v210;
          else
            v71 = v210;
          if ((v212 & 0x80u) == 0)
            v72 = v212;
          else
            v72 = v211;
          std::string::append(v196, v71, v72);
          *(_BYTE *)v12 &= __dst;
          if ((char)v212 < 0)
            operator delete(v210);
          v33 += 2;
          v32 = v197;
        }
        else
        {
          v73 = *(unsigned __int8 **)(a3 - 8 * *(unsigned int *)(a3 + 8) + 8 * (v33 + 1));
          if (v73)
          {
            v74 = *v73;
            if (v74 <= 0x22 && ((0x7FFFFFFF0uLL >> v74) & 1) != 0)
            {
              v76 = (char *)llvm::MDString::getString(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8]);
              v205 = 0;
              v204 = 0;
              v203 = 0;
              v77 = v76;
              v79 = v78;
              switch(v78)
              {
                case 10:
                  if (*(_QWORD *)v76 == 0x666675622E726961 && *((_WORD *)v76 + 4) == 29285)
                    goto LABEL_154;
                  break;
                case 11:
                  if (*(_QWORD *)v76 == 0x747865742E726961 && *(_QWORD *)(v76 + 3) == 0x657275747865742ELL)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v202) = 0;
                    v161 = parseMDTexture((uint64_t)v73, &v206, &v205, (char *)&__dst, (BOOL *)&v204 + 1, (BOOL *)&v202, &v204, &v203);
                    if (*(_BYTE *)v12)
                      v162 = v161;
                    else
                      v162 = 0;
                    *(_BYTE *)v12 = v162;
                    v163 = v206 + a5;
                    v206 += a5;
                    if (HIBYTE(v204))
                    {
                      v59 = (uint64_t *)AGCArgumentBuffer::unwrapArray(v59, v60, (AGCArgumentBuffer::ResourceTracker *)a7);
                      ++v61;
                      std::string::push_back(v196, v205);
                      v163 = v206;
                    }
                    v164 = operator new();
                    v165 = (AGCArgumentBuffer::Resource *)v164;
                    *(_DWORD *)(v164 + 8) = 5;
                    *(_QWORD *)(v164 + 16) = v164 + 32;
                    *(_QWORD *)(v164 + 24) = 0x400000000;
                    *(_QWORD *)(v164 + 104) = v164 + 120;
                    *(_QWORD *)(v164 + 112) = 0x800000000;
                    *(_QWORD *)(v164 + 184) = v164 + 200;
                    *(_QWORD *)(v164 + 192) = 0x400000000;
                    *(_DWORD *)(v164 + 236) = 0;
                    *(_DWORD *)(v164 + 240) = 0;
                    *(_QWORD *)v164 = &off_1E7E8ADD0;
                    *(_QWORD *)(v164 + 248) = 0;
                    *(_DWORD *)(v164 + 232) = v163;
                    *(_BYTE *)(v164 + 244) = (_BYTE)__dst;
                    *(_BYTE *)(v164 + 245) = v202;
                    if ((_BYTE)v204)
                    {
                      v166 = v203;
                      *(_BYTE *)(v164 + 252) = 1;
                      *(_DWORD *)(v164 + 248) = v166;
                    }
                    v167 = *v59;
                    *v59 = (uint64_t)v165;
                    v32 = v197;
                    if (v167)
                      (*(void (**)(uint64_t))(*(_QWORD *)v167 + 8))(v167);
                    AGCArgumentBuffer::ResourceTracker::addResource((uint64_t)a7, v165, (unsigned int *)&a7[34]);
                    v160 = v196;
                    v147 = 58;
                    goto LABEL_324;
                  }
                  if (*(_QWORD *)v76 == 0x706D61732E726961 && *(_QWORD *)(v76 + 3) == 0x72656C706D61732ELL)
                  {
                    v83 = parseMDSampler((uint64_t)v73, &v206, &v205, (BOOL *)&v204 + 1);
                    if (*(_BYTE *)v12)
                      v84 = v83;
                    else
                      v84 = 0;
                    *(_BYTE *)v12 = v84;
                    v85 = v206 + a5;
                    v206 += a5;
                    if (HIBYTE(v204))
                    {
                      v59 = (uint64_t *)AGCArgumentBuffer::unwrapArray(v59, v60, (AGCArgumentBuffer::ResourceTracker *)a7);
                      ++v61;
                      std::string::push_back(v196, v205);
                      v85 = v206;
                    }
                    v86 = operator new();
                    *(_DWORD *)(v86 + 8) = 6;
                    *(_QWORD *)(v86 + 16) = v86 + 32;
                    *(_QWORD *)(v86 + 24) = 0x400000000;
                    *(_QWORD *)(v86 + 104) = v86 + 120;
                    *(_QWORD *)(v86 + 112) = 0x800000000;
                    *(_QWORD *)(v86 + 184) = v86 + 200;
                    *(_QWORD *)(v86 + 192) = 0x400000000;
                    *(_DWORD *)(v86 + 236) = 0;
                    *(_DWORD *)(v86 + 240) = 0;
                    *(_QWORD *)v86 = &off_1E7E8ADF0;
                    *(_DWORD *)(v86 + 232) = v85;
                    v87 = *v59;
                    *v59 = v86;
                    if (v87)
                      (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
                    AGCArgumentBuffer::ResourceTracker::addResource((uint64_t)a7, (AGCArgumentBuffer::Resource *)v86, (unsigned int *)&a7[34] + 1);
                    std::string::push_back(v196, 59);
                    *(_BYTE *)(v12 + 1) = 1;
                    v32 = v197;
                  }
                  break;
                case 18:
                  if (*(_QWORD *)v76 == 0x6D6D6F632E726961
                    && *((_QWORD *)v76 + 1) == 0x666675625F646E61
                    && *((_WORD *)v76 + 8) == 29285)
                  {
                    goto LABEL_252;
                  }
                  break;
                case 19:
                  if (*(_QWORD *)v76 != 0x69646E692E726961
                    || *((_QWORD *)v76 + 1) != 0x6675625F74636572
                    || *(_QWORD *)(v76 + 11) != 0x7265666675625F74)
                  {
                    break;
                  }
LABEL_154:
                  HIBYTE(v204) = 0;
                  v92 = *(_DWORD *)(v60 + 8);
                  if (v92 != 16 || *(_BYTE *)(**(_QWORD **)(v60 + 16) + 8) != 17)
                    goto LABEL_355;
                  LODWORD(__dst) = 2;
                  v202 = 0;
                  parseMDLocationIndex((uint64_t)v73, &__dst, &v206, &v205);
                  v93 = ((_DWORD)__dst + 1);
                  LODWORD(__dst) = v93;
                  if (isStringMDNode(*(llvm::MDString **)&v73[8 * v93 + -8 * *((unsigned int *)v73 + 2)], "air.address_space"))
                  {
                    parseMDInt("air.address_space", (uint64_t)v73, (unsigned int *)&__dst, &v202);
                    v93 = __dst;
                  }
                  if (isStringMDNode(*(llvm::MDString **)&v73[8 * v93 + -8 * *((unsigned int *)v73 + 2)], "air.arg_type_name"))
                  {
                    LODWORD(__dst) = v93 + 1;
                    v94 = llvm::MDString::getString(*(llvm::MDString **)&v73[8 * (v93 + 1)
                                                                           + -8 * *((unsigned int *)v73 + 2)]);
                    v96 = v95 >= 5 && *(_DWORD *)v94 == 1634890337 && *(_BYTE *)(v94 + 4) == 121;
                    HIBYTE(v204) = v96;
                  }
                  v59 = (uint64_t *)AGCArgumentBuffer::unwrapArray(v59, v60, (AGCArgumentBuffer::ResourceTracker *)a7);
                  ++v61;
                  for (j = *(uint64_t **)(**(_QWORD **)(v60 + 16) + 16); ; j = *(uint64_t **)(v60 + 16))
                  {
                    v60 = *j;
                    v92 = *(_DWORD *)(*j + 8);
LABEL_355:
                    if (v92 != 16)
                    {
                      v201 = 0;
                      v202 = 0;
                      __dst = 0;
                      v200 = 0;
                      if ((v92 & 0xFE) == 0x12)
                        v92 = *(_DWORD *)(**(_QWORD **)(v60 + 16) + 8);
                      v175 = parseMDBuffer((uint64_t)v73, v92 >> 8, &v206, &v205, &v202, &v201, (uint64_t *)&__dst, (char *)&v200, &v204, &v203, (char *)&v200 + 1);
                      if (*(_BYTE *)v12)
                        v176 = v175;
                      else
                        v176 = 0;
                      *(_BYTE *)v12 = v176;
                      v206 += a5;
                      v177 = v206;
                      v178 = operator new();
                      *(_DWORD *)(v178 + 8) = 4;
                      *(_QWORD *)(v178 + 16) = v178 + 32;
                      *(_QWORD *)(v178 + 24) = 0x400000000;
                      *(_QWORD *)(v178 + 104) = v178 + 120;
                      *(_QWORD *)(v178 + 112) = 0x800000000;
                      *(_QWORD *)(v178 + 184) = v178 + 200;
                      *(_QWORD *)(v178 + 192) = 0x400000000;
                      *(_DWORD *)(v178 + 236) = 0;
                      *(_DWORD *)(v178 + 240) = 0;
                      *(_QWORD *)v178 = &off_1E7E8ADB0;
                      *(_QWORD *)(v178 + 248) = 0;
                      *(_BYTE *)(v178 + 256) = v200;
                      *(_QWORD *)(v178 + 264) = v60;
                      *(_QWORD *)(v178 + 272) = 0;
                      *(_DWORD *)(v178 + 260) = v202;
                      *(_DWORD *)(v178 + 232) = v177;
                      if (HIBYTE(v200))
                        *(_QWORD *)(v178 + 248) = AGCArgumentBuffer::parseMDRoot(a2, __dst, **(_QWORD **)(v60 + 16));
                      v32 = v197;
                      if ((_BYTE)v204)
                      {
                        if (!*(_BYTE *)(v178 + 276))
                          *(_BYTE *)(v178 + 276) = 1;
                        *(_DWORD *)(v178 + 272) = v203;
                      }
                      v179 = *v59;
                      *v59 = v178;
                      if (v179)
                        (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
                      AGCArgumentBuffer::ResourceTracker::addResource((uint64_t)a7, (AGCArgumentBuffer::Resource *)v178, v186);
                      if (HIBYTE(v204))
                        std::string::push_back(v196, v205);
                      v160 = v196;
                      v147 = 60;
                      goto LABEL_324;
                    }
                    v172 = v59;
                    v173 = operator new();
                    *(_DWORD *)(v173 + 8) = 0;
                    *(_QWORD *)v173 = &off_1E7E8AD50;
                    *(_QWORD *)(v173 + 16) = 0;
                    v59 = (uint64_t *)(v173 + 16);
                    v174 = *v172;
                    *v172 = v173;
                    if (v174)
                      (*(void (**)(uint64_t))(*(_QWORD *)v174 + 8))(v174);
                  }
                case 21:
                  if (*(_QWORD *)v76 != 0x69646E692E726961
                    || *((_QWORD *)v76 + 1) != 0x6E6F635F74636572
                    || *(_QWORD *)(v76 + 13) != 0x746E6174736E6F63)
                  {
                    break;
                  }
                  v99 = isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8], "air.indirect_constant");
                  if (v99)
                  {
                    v100 = *((_DWORD *)v73 + 2);
                    LODWORD(__dst) = 2;
                    if (v100 >= 3)
                    {
                      do
                      {
                        v101 = parseMDLocationIndex((uint64_t)v73, &__dst, &v206, &v205);
                        v102 = __dst;
                        if ((v101 & 1) == 0)
                        {
                          v102 = (_DWORD)__dst + 1;
                          LODWORD(__dst) = (_DWORD)__dst + 1;
                        }
                      }
                      while (v102 < v100);
                    }
                    a2 = v185;
                  }
                  if (*(_BYTE *)v12)
                    v103 = v99;
                  else
                    v103 = 0;
                  *(_BYTE *)v12 = v103;
                  v206 += a5;
                  v104 = v206;
                  v105 = operator new();
                  *(_DWORD *)(v105 + 8) = 7;
                  *(_QWORD *)(v105 + 16) = v105 + 32;
                  *(_QWORD *)(v105 + 24) = 0x400000000;
                  *(_QWORD *)(v105 + 104) = v105 + 120;
                  *(_QWORD *)(v105 + 112) = 0x800000000;
                  *(_QWORD *)(v105 + 184) = v105 + 200;
                  *(_QWORD *)(v105 + 192) = 0x400000000;
                  *(_DWORD *)(v105 + 236) = 0;
                  *(_DWORD *)(v105 + 240) = 0;
                  *(_QWORD *)v105 = &off_1E7E8AD90;
                  *(_DWORD *)(v105 + 232) = v104;
                  *(_QWORD *)(v105 + 248) = v60;
                  v106 = *v59;
                  *v59 = v105;
                  if (v106)
                    (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
                  AGCArgumentBuffer::ResourceTracker::addResource((uint64_t)a7, (AGCArgumentBuffer::Resource *)v105, (unsigned int *)&a7[35] + 1);
                  v32 = v197;
                  v107 = __n;
                  if (__n)
                  {
                    v108 = memchr(__s, 60, __n);
                    v109 = __s;
                    if (v108)
                    {
                      if (__n >= v108 - (_BYTE *)__s)
                        v110 = v108 - (_BYTE *)__s;
                      else
                        v110 = __n;
                      if (v108 - (_BYTE *)__s == -1)
                        v107 = __n;
                      else
                        v107 = v110;
                    }
                    if (__s)
                    {
LABEL_189:
                      std::string::basic_string[abi:nn180100](&__dst, v109, v107);
                      goto LABEL_338;
                    }
                  }
                  else
                  {
                    v109 = __s;
                    if (__s)
                      goto LABEL_189;
                  }
                  __dst = 0;
                  v210 = 0;
                  v211 = 0;
LABEL_338:
                  bufferTypeMap();
                  v168 = std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::find<std::string>((uint64_t)&bufferTypeMap(void)::localBufferTypeMap, &__dst);
                  bufferTypeMap();
                  if (v168 == &qword_1EF8E7D68
                    && (pixelTypeMap(),
                        v168 = std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::find<std::string>((uint64_t)&pixelTypeMap(void)::localPixelFormatTypeMap, &__dst), pixelTypeMap(), v168 == &qword_1EF8E8FC8))
                  {
                    LOBYTE(v169) = 0;
                  }
                  else
                  {
                    v169 = *((_DWORD *)v168 + 14);
                  }
                  if (SHIBYTE(v211) < 0)
                    operator delete(__dst);
                  std::string::push_back(v196, v169);
                  break;
                case 23:
                  if (*(_QWORD *)v76 != 0x747065642E726961
                    || *((_QWORD *)v76 + 1) != 0x69636E6574735F68
                    || *(_QWORD *)(v76 + 15) != 0x65746174735F6C69)
                  {
                    break;
                  }
                  goto LABEL_252;
                case 25:
                  v113 = v76[24];
                  v115 = *(_QWORD *)v76 == 0x646E65722E726961
                      && *((_QWORD *)v76 + 1) == 0x6C657069705F7265
                      && *((_QWORD *)v76 + 2) == 0x746174735F656E69;
                  v116 = 101;
                  goto LABEL_223;
                case 26:
                  if (*(_QWORD *)v76 == 0x706D6F632E726961
                    && *((_QWORD *)v76 + 1) == 0x657069705F657475
                    && *((_QWORD *)v76 + 2) == 0x6174735F656E696CLL
                    && *((_WORD *)v76 + 12) == 25972)
                  {
                    goto LABEL_252;
                  }
                  v113 = *((unsigned __int16 *)v76 + 12);
                  v115 = *(_QWORD *)v76 == 0x697369762E726961
                      && *((_QWORD *)v76 + 1) == 0x636E75665F656C62
                      && *((_QWORD *)v76 + 2) == 0x6261745F6E6F6974;
                  v116 = 25964;
LABEL_223:
                  if (!v115 || v113 != v116)
                    break;
                  goto LABEL_252;
                case 27:
                  v122 = *(_QWORD *)(v76 + 19);
                  v124 = *(_QWORD *)v76 == 0x69646E692E726961
                      && *((_QWORD *)v76 + 1) == 0x6D6F635F74636572
                      && *((_QWORD *)v76 + 2) == 0x6675625F646E616DLL;
                  v125 = 0x7265666675625F64;
                  goto LABEL_243;
                case 31:
                  v122 = *(_QWORD *)(v76 + 23);
                  v124 = *(_QWORD *)v76 == 0x65746E692E726961
                      && *((_QWORD *)v76 + 1) == 0x6E6F697463657372
                      && *((_QWORD *)v76 + 2) == 0x6F6974636E75665FLL;
                  v125 = 0x656C6261745F6E6FLL;
LABEL_243:
                  if (!v124 || v122 != v125)
                    break;
                  goto LABEL_252;
                case 35:
                  v128 = "air.instance_acceleration_structure";
                  v129 = 35;
                  goto LABEL_251;
                case 36:
                  v128 = "air.primitive_acceleration_structure";
                  v129 = 36;
LABEL_251:
                  __s1a = v76;
                  v130 = v79;
                  v131 = memcmp(v76, v128, v129);
                  v79 = v130;
                  v77 = __s1a;
                  a2 = v185;
                  if (!v131)
                  {
LABEL_252:
                    v187 = v79;
                    __s1 = v77;
                    if (isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8], "air.indirect_command_buffer")|| isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8], "air.command_buffer")|| isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8], "air.compute_pipeline_state")|| isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8], "air.render_pipeline_state")|| isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8], "air.visible_function_table")|| isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8], "air.primitive_acceleration_structure")|| isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8],
                           "air.instance_acceleration_structure")
                      || isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8], "air.intersection_function_table")|| isStringMDNode(*(llvm::MDString **)&v73[-8 * *((unsigned int *)v73 + 2) + 8], "air.depth_stencil_state"))
                    {
                      v190 = 0;
                      HIBYTE(v204) = 0;
                      v205 = 1;
                      v132 = *((_DWORD *)v73 + 2);
                      LODWORD(__dst) = 2;
                      if (v132 >= 3)
                      {
                        v190 = 0;
                        do
                        {
                          v133 = parseMDLocationIndex((uint64_t)v73, &__dst, &v206, &v205);
                          v134 = __dst;
                          if ((v133 & 1) == 0)
                          {
                            v135 = (_DWORD)__dst + 1;
                            LODWORD(__dst) = (_DWORD)__dst + 1;
                            if (isStringMDNode(*(llvm::MDString **)&v73[8 * v134 + -8 * *((unsigned int *)v73 + 2)], "air.arg_type_name"))
                            {
                              LODWORD(v134) = v134 + 2;
                              LODWORD(__dst) = v134;
                              v136 = llvm::MDString::getString(*(llvm::MDString **)&v73[8 * v135
                                                                                      + -8 * *((unsigned int *)v73 + 2)]);
                              if (v137 >= 5)
                              {
                                v139 = *(_DWORD *)v136 == 1634890337 && *(_BYTE *)(v136 + 4) == 121;
                                v190 = v139;
                              }
                              else
                              {
                                v190 = 0;
                              }
                            }
                            else
                            {
                              LODWORD(v134) = v134 + 1;
                            }
                            v12 = v194;
                          }
                        }
                        while (v134 < v132);
                        HIBYTE(v204) = v190;
                        a2 = v185;
                      }
                      v140 = 1;
                    }
                    else
                    {
                      v190 = 0;
                      v140 = 0;
                    }
                    if (!*(_BYTE *)v12)
                      v140 = 0;
                    *(_BYTE *)v12 = v140;
                    v206 += a5;
                    if (v190)
                    {
                      v59 = (uint64_t *)AGCArgumentBuffer::unwrapArray(v59, v60, (AGCArgumentBuffer::ResourceTracker *)a7);
                      ++v61;
                      v141 = HIBYTE(v204);
                    }
                    else
                    {
                      v141 = 0;
                    }
                    v142 = operator new();
                    v143 = (AGCArgumentBuffer::Resource *)v142;
                    *(_DWORD *)(v142 + 8) = 4;
                    *(_QWORD *)(v142 + 16) = v142 + 32;
                    *(_QWORD *)(v142 + 24) = 0x400000000;
                    *(_QWORD *)(v142 + 104) = v142 + 120;
                    *(_QWORD *)(v142 + 112) = 0x800000000;
                    *(_QWORD *)(v142 + 184) = v142 + 200;
                    *(_QWORD *)(v142 + 192) = 0x400000000;
                    *(_DWORD *)(v142 + 236) = 0;
                    *(_DWORD *)(v142 + 240) = 0;
                    *(_QWORD *)v142 = &off_1E7E8ADB0;
                    *(_QWORD *)(v142 + 248) = 0;
                    *(_BYTE *)(v142 + 256) = 0;
                    *(_DWORD *)(v142 + 276) = 0;
                    *(_QWORD *)(v142 + 268) = 0;
                    v144 = v60;
                    *(_QWORD *)(v142 + 260) = 0;
                    if (v141)
                      v144 = **(_QWORD **)(**(_QWORD **)(v60 + 16) + 16);
                    *(_QWORD *)(v142 + 264) = **(_QWORD **)(v144 + 16);
                    *(_DWORD *)(v142 + 232) = v206;
                    v145 = operator new();
                    *(_DWORD *)(v145 + 8) = 0;
                    *(_QWORD *)v145 = &off_1E7E8AD50;
                    *(_QWORD *)(v145 + 16) = v143;
                    v146 = *v59;
                    *v59 = v145;
                    if (v146)
                      (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
                    AGCArgumentBuffer::ResourceTracker::addResource((uint64_t)a7, v143, v186);
                    v147 = 0;
                    v32 = v197;
                    switch(v187)
                    {
                      case 25:
                        v148 = (*__s1 ^ 0x646E65722E726961 | __s1[1] ^ 0x6C657069705F7265 | __s1[2] ^ 0x746174735F656E69 | *((unsigned __int8 *)__s1 + 24) ^ 0x65) == 0;
                        v149 = 78;
                        goto LABEL_305;
                      case 26:
                        if (*__s1 == 0x706D6F632E726961
                          && __s1[1] == 0x657069705F657475
                          && __s1[2] == 0x6174735F656E696CLL
                          && *((_WORD *)__s1 + 12) == 25972)
                        {
                          v147 = 79;
                        }
                        else
                        {
                          v148 = (*__s1 ^ 0x697369762E726961 | __s1[1] ^ 0x636E75665F656C62 | __s1[2] ^ 0x6261745F6E6F6974 | *((unsigned __int16 *)__s1 + 12) ^ 0x656CLL) == 0;
                          v149 = 60;
LABEL_305:
                          if (v148)
                            v147 = v149;
                          else
                            v147 = 0;
                        }
LABEL_323:
                        v160 = v196;
                        break;
                      case 27:
                        v150 = *__s1 ^ 0x69646E692E726961 | __s1[1] ^ 0x6D6F635F74636572 | __s1[2] ^ 0x6675625F646E616DLL | *(_QWORD *)((char *)__s1 + 19) ^ 0x7265666675625F64;
                        goto LABEL_304;
                      case 28:
                      case 29:
                      case 30:
                      case 32:
                      case 33:
                      case 34:
                        goto LABEL_323;
                      case 31:
                        v154 = 0x6169722E696E7465;
                        v155 = bswap64(*__s1);
                        if (v155 == 0x6169722E696E7465
                          && (v154 = 0x7273656374696F6ELL, v155 = bswap64(__s1[1]), v155 == 0x7273656374696F6ELL)
                          && (v154 = 0x5F66756E6374696FLL, v155 = bswap64(__s1[2]), v155 == 0x5F66756E6374696FLL)
                          && (v154 = 0x6F6E5F7461626C65,
                              v155 = bswap64(*(_QWORD *)((char *)__s1 + 23)),
                              v155 == 0x6F6E5F7461626C65))
                        {
                          v156 = 0;
                        }
                        else if (v155 < v154)
                        {
                          v156 = -1;
                        }
                        else
                        {
                          v156 = 1;
                        }
                        v159 = v156 == 0;
                        goto LABEL_320;
                      case 35:
                        v157 = "air.instance_acceleration_structure";
                        v158 = 35;
                        goto LABEL_315;
                      case 36:
                        v157 = "air.primitive_acceleration_structure";
                        v158 = 36;
LABEL_315:
                        v159 = memcmp(__s1, v157, v158) == 0;
LABEL_320:
                        if (v159)
                          v147 = 60;
                        else
                          v147 = 0;
                        goto LABEL_323;
                      default:
                        if (v187 != 18)
                          goto LABEL_323;
                        v150 = *__s1 ^ 0x6D6D6F632E726961 | __s1[1] ^ 0x666675625F646E61 | *((unsigned __int16 *)__s1
                                                                                               + 8) ^ 0x7265;
LABEL_304:
                        v148 = v150 == 0;
                        v149 = 80;
                        goto LABEL_305;
                    }
LABEL_324:
                    std::string::push_back(v160, v147);
                    *(_BYTE *)(v12 + 1) = 1;
                  }
                  break;
                default:
                  break;
              }
LABEL_94:
              v33 += 2;
            }
          }
        }
      }
      while (v61)
      {
        AGCArgumentBuffer::ResourceTracker::popArray((uint64_t *)a7);
        --v61;
      }
      a4 = v192;
    }
    while (v33 < v32);
  }
  std::string::push_back(v196, 125);
  if (*(_BYTE *)(v12 + 1))
  {
    v180 = *(unsigned __int8 *)(v12 + 31);
    if ((v180 & 0x80u) == 0)
      v181 = v196;
    else
      v181 = *(std::string **)(v12 + 8);
    if ((v180 & 0x80u) != 0)
      v180 = *(_QWORD *)(v12 + 16);
    if (v180)
    {
      v182 = -1;
      do
      {
        v183 = v181->__r_.__value_.__s.__data_[0];
        v181 = (std::string *)((char *)v181 + 1);
        v182 = crc_table[v183 ^ ((unsigned __int16)(v182 & 0xFF00) >> 8)] ^ (v182 << 8);
        --v180;
      }
      while (v180);
      v184 = v182 | 0x7FE00000;
    }
    else
    {
      v184 = 2145452031;
    }
    *(_DWORD *)a2 = v184;
  }
  a7[36] = vadd_s32(a7[36], (int32x2_t)-1);
  if (v213 != (_DWORD *)v215)
    free(v213);
}

uint64_t *AGCArgumentBuffer::ResourceTracker::popArray(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;

  v1 = *this;
  v2 = *((unsigned int *)this + 2);
  v3 = *this + 32 * v2;
  v4 = *(_QWORD *)(v3 - 32);
  v5 = *(unsigned __int8 *)(v3 - 24);
  v6 = *(_QWORD *)(v3 - 20);
  v7 = *(_DWORD *)(v3 - 12);
  v8 = *(_DWORD *)(v4 + 24);
  *((_DWORD *)this + 74) /= v8;
  v9 = v7 - v6 + 1;
  *(_DWORD *)(v4 + 28) = v9;
  v10 = (v2 - 1);
  *((_DWORD *)this + 2) = v10;
  if ((_DWORD)v10)
  {
    v11 = v1 + 32 * v10;
    if (!*(_BYTE *)(v11 - 16))
    {
      *(_QWORD *)(v11 - 20) = v6;
      v8 = *(_DWORD *)(v4 + 24);
      v9 = *(_DWORD *)(v4 + 28);
    }
    v12 = v6 + v9 * v8 - 1;
    if (*(_DWORD *)(v11 - 12) > v12)
      v12 = *(_DWORD *)(v11 - 12);
    *(_DWORD *)(v11 - 12) = v12;
  }
  if (v5)
    v13 = -2;
  else
    v13 = -1;
  *((_DWORD *)this + 73) += v13;
  return this;
}

uint64_t AGCArgumentBuffer::ResourceTracker::addResource(uint64_t this, AGCArgumentBuffer::Resource *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _OWORD *v9;
  BOOL v10;
  unint64_t v11;
  __int128 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;

  v5 = this;
  v6 = *(unsigned int *)(this + 8);
  if ((_DWORD)v6 == 1)
  {
    v7 = *((_DWORD *)a2 + 6);
  }
  else
  {
    v17 = *(_QWORD *)this + 32 * v6;
    v7 = *((_DWORD *)a2 + 6);
    v18 = 1;
    v19 = v17;
    do
    {
      v21 = *(_QWORD *)(v19 - 32);
      v19 -= 32;
      v20 = v21;
      if (v7 >= *((_DWORD *)a2 + 7))
      {
        this = llvm::SmallVectorBase<unsigned int>::grow_pod();
        v7 = *((_DWORD *)a2 + 6);
      }
      v22 = (_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v7);
      *v22 = v20;
      v22[1] = v18;
      v7 = *((_DWORD *)a2 + 6) + 1;
      *((_DWORD *)a2 + 6) = v7;
      v18 *= *(_DWORD *)(*(_QWORD *)(v17 - 32) + 24);
      v17 = v19;
    }
    while (v19 != *(_QWORD *)v5 + 32);
  }
  v8 = *((_QWORD *)a2 + 2);
  v9 = (_OWORD *)(v8 + 16 * v7 - 16);
  if (v7)
    v10 = (unint64_t)v9 > v8;
  else
    v10 = 0;
  if (v10)
  {
    v11 = v8 + 16;
    do
    {
      v12 = *(_OWORD *)(v11 - 16);
      *(_OWORD *)(v11 - 16) = *v9;
      *v9-- = v12;
      v13 = v11 >= (unint64_t)v9;
      v11 += 16;
    }
    while (!v13);
  }
  v14 = *(unsigned int *)(v5 + 8);
  v15 = *(_QWORD *)v5 + 32 * v14;
  if ((_DWORD)v14 == 1)
  {
    v16 = *(_QWORD *)v5 + 32;
  }
  else
  {
    v23 = 32 * v14 - 32;
    v16 = *(_QWORD *)v5 + 32;
    while (*(_DWORD *)(v16 + 24) != *(_DWORD *)(v5 + 288))
    {
      v16 += 32;
      v23 -= 32;
      if (!v23)
      {
        v16 = v15;
        break;
      }
    }
  }
  *((_DWORD *)a2 + 24) = (unint64_t)(v16 - (*(_QWORD *)v5 + 32)) >> 5;
  v24 = *((_DWORD *)a2 + 58);
  if (!*(_BYTE *)(v15 - 16))
  {
    *(_BYTE *)(v15 - 16) = 1;
    *(_DWORD *)(v15 - 20) = v24;
  }
  if (*(_DWORD *)(v15 - 12) > v24)
    v24 = *(_DWORD *)(v15 - 12);
  *(_DWORD *)(v15 - 12) = v24;
  *((_DWORD *)a2 + 59) = *a3;
  v25 = *(_DWORD *)(v5 + 296);
  *((_DWORD *)a2 + 60) = v25;
  *a3 += v25;
  return this;
}

void bufferTypeMap(void)
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  int v4;
  _QWORD v5[3];
  int v6;
  _QWORD v7[3];
  int v8;
  _QWORD v9[3];
  int v10;
  _QWORD v11[3];
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[3];
  int v34;
  _QWORD v35[3];
  int v36;
  _QWORD v37[3];
  int v38;
  _QWORD v39[3];
  int v40;
  _QWORD v41[3];
  int v42;
  _QWORD v43[3];
  int v44;
  _QWORD v45[3];
  int v46;
  _QWORD v47[3];
  int v48;
  _QWORD v49[3];
  int v50;
  _QWORD v51[3];
  int v52;
  _QWORD v53[3];
  int v54;
  _QWORD v55[3];
  int v56;
  _QWORD v57[3];
  int v58;
  _QWORD v59[3];
  int v60;
  _QWORD v61[3];
  int v62;
  _QWORD v63[3];
  int v64;
  _QWORD v65[3];
  int v66;
  _QWORD v67[3];
  int v68;
  _QWORD v69[3];
  int v70;
  _QWORD v71[3];
  int v72;
  _QWORD v73[3];
  int v74;
  _QWORD v75[3];
  int v76;
  _QWORD v77[3];
  int v78;
  _QWORD v79[3];
  int v80;
  _QWORD v81[3];
  int v82;
  _QWORD v83[3];
  int v84;
  _QWORD v85[3];
  int v86;
  _QWORD v87[3];
  int v88;
  _QWORD v89[3];
  int v90;
  _QWORD v91[3];
  int v92;
  _QWORD v93[3];
  int v94;
  _QWORD v95[3];
  int v96;
  _QWORD v97[3];
  int v98;
  _QWORD v99[3];
  int v100;
  _QWORD v101[3];
  int v102;
  _QWORD v103[3];
  int v104;
  _QWORD v105[3];
  int v106;
  _QWORD v107[3];
  int v108;
  _QWORD v109[3];
  int v110;
  _QWORD v111[3];
  int v112;
  _QWORD v113[3];
  int v114;
  _QWORD v115[3];
  int v116;
  _QWORD v117[3];
  int v118;
  _QWORD v119[3];
  int v120;
  _QWORD v121[3];
  int v122;
  _QWORD v123[3];
  int v124;
  _QWORD v125[3];
  int v126;
  _QWORD v127[3];
  int v128;
  _QWORD v129[3];
  int v130;
  _QWORD v131[3];
  int v132;
  _QWORD v133[3];
  int v134;
  _QWORD v135[3];
  int v136;
  _QWORD v137[3];
  int v138;
  _QWORD v139[3];
  int v140;
  _QWORD v141[3];
  int v142;
  _QWORD v143[3];
  int v144;
  _QWORD v145[3];
  int v146;
  _QWORD v147[3];
  int v148;
  _QWORD v149[3];
  int v150;
  _QWORD v151[3];
  int v152;
  _QWORD v153[3];
  int v154;
  _QWORD v155[3];
  int v156;
  _QWORD v157[3];
  int v158;
  _QWORD v159[3];
  int v160;
  _QWORD v161[3];
  int v162;
  _QWORD v163[3];
  int v164;
  _QWORD v165[3];
  int v166;
  _QWORD v167[3];
  int v168;
  _QWORD v169[3];
  int v170;
  _QWORD v171[3];
  int v172;
  _QWORD v173[3];
  int v174;
  _QWORD v175[3];
  int v176;
  _QWORD v177[3];
  int v178;
  _QWORD v179[3];
  int v180;
  _QWORD v181[3];
  int v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  {
    std::string::basic_string[abi:nn180100]<0>(v3, "float");
    v4 = 3;
    std::string::basic_string[abi:nn180100]<0>(v5, "float2");
    v6 = 4;
    std::string::basic_string[abi:nn180100]<0>(v7, "float3");
    v8 = 5;
    std::string::basic_string[abi:nn180100]<0>(v9, "float4");
    v10 = 6;
    std::string::basic_string[abi:nn180100]<0>(v11, "packed_float");
    v12 = 3;
    std::string::basic_string[abi:nn180100]<0>(v13, "packed_float2");
    v14 = 4;
    std::string::basic_string[abi:nn180100]<0>(v15, "packed_float3");
    v16 = 5;
    std::string::basic_string[abi:nn180100]<0>(v17, "packed_float4");
    v18 = 6;
    std::string::basic_string[abi:nn180100]<0>(v19, "half");
    v20 = 16;
    std::string::basic_string[abi:nn180100]<0>(v21, "half2");
    v22 = 17;
    std::string::basic_string[abi:nn180100]<0>(v23, "half3");
    v24 = 18;
    std::string::basic_string[abi:nn180100]<0>(v25, "half4");
    v26 = 19;
    std::string::basic_string[abi:nn180100]<0>(v27, "packed_half");
    v28 = 16;
    std::string::basic_string[abi:nn180100]<0>(v29, "packed_half2");
    v30 = 17;
    std::string::basic_string[abi:nn180100]<0>(v31, "packed_half3");
    v32 = 18;
    std::string::basic_string[abi:nn180100]<0>(v33, "packed_half4");
    v34 = 19;
    std::string::basic_string[abi:nn180100]<0>(v35, "int");
    v36 = 29;
    std::string::basic_string[abi:nn180100]<0>(v37, "int2");
    v38 = 30;
    std::string::basic_string[abi:nn180100]<0>(v39, "int3");
    v40 = 31;
    std::string::basic_string[abi:nn180100]<0>(v41, "int4");
    v42 = 32;
    std::string::basic_string[abi:nn180100]<0>(v43, "packed_int");
    v44 = 29;
    std::string::basic_string[abi:nn180100]<0>(v45, "packed_int2");
    v46 = 30;
    std::string::basic_string[abi:nn180100]<0>(v47, "packed_int3");
    v48 = 31;
    std::string::basic_string[abi:nn180100]<0>(v49, "packed_int4");
    v50 = 32;
    std::string::basic_string[abi:nn180100]<0>(v51, "uint");
    v52 = 33;
    std::string::basic_string[abi:nn180100]<0>(v53, "uint2");
    v54 = 34;
    std::string::basic_string[abi:nn180100]<0>(v55, "uint3");
    v56 = 35;
    std::string::basic_string[abi:nn180100]<0>(v57, "uint4");
    v58 = 36;
    std::string::basic_string[abi:nn180100]<0>(v59, "packed_uint");
    v60 = 33;
    std::string::basic_string[abi:nn180100]<0>(v61, "packed_uint2");
    v62 = 34;
    std::string::basic_string[abi:nn180100]<0>(v63, "packed_uint3");
    v64 = 35;
    std::string::basic_string[abi:nn180100]<0>(v65, "packed_uint4");
    v66 = 36;
    std::string::basic_string[abi:nn180100]<0>(v67, "short");
    v68 = 37;
    std::string::basic_string[abi:nn180100]<0>(v69, "short2");
    v70 = 38;
    std::string::basic_string[abi:nn180100]<0>(v71, "short3");
    v72 = 39;
    std::string::basic_string[abi:nn180100]<0>(v73, "short4");
    v74 = 40;
    std::string::basic_string[abi:nn180100]<0>(v75, "packed_short");
    v76 = 37;
    std::string::basic_string[abi:nn180100]<0>(v77, "packed_short2");
    v78 = 38;
    std::string::basic_string[abi:nn180100]<0>(v79, "packed_short3");
    v80 = 39;
    std::string::basic_string[abi:nn180100]<0>(v81, "packed_short4");
    v82 = 40;
    std::string::basic_string[abi:nn180100]<0>(v83, "ushort");
    v84 = 41;
    std::string::basic_string[abi:nn180100]<0>(v85, "ushort2");
    v86 = 42;
    std::string::basic_string[abi:nn180100]<0>(v87, "ushort3");
    v88 = 43;
    std::string::basic_string[abi:nn180100]<0>(v89, "ushort4");
    v90 = 44;
    std::string::basic_string[abi:nn180100]<0>(v91, "packed_ushort");
    v92 = 41;
    std::string::basic_string[abi:nn180100]<0>(v93, "packed_ushort2");
    v94 = 42;
    std::string::basic_string[abi:nn180100]<0>(v95, "packed_ushort3");
    v96 = 43;
    std::string::basic_string[abi:nn180100]<0>(v97, "packed_ushort4");
    v98 = 44;
    std::string::basic_string[abi:nn180100]<0>(v99, "char");
    v100 = 45;
    std::string::basic_string[abi:nn180100]<0>(v101, "char2");
    v102 = 46;
    std::string::basic_string[abi:nn180100]<0>(v103, "char3");
    v104 = 47;
    std::string::basic_string[abi:nn180100]<0>(v105, "char4");
    v106 = 48;
    std::string::basic_string[abi:nn180100]<0>(v107, "packed_char");
    v108 = 45;
    std::string::basic_string[abi:nn180100]<0>(v109, "packed_char2");
    v110 = 46;
    std::string::basic_string[abi:nn180100]<0>(v111, "packed_char3");
    v112 = 47;
    std::string::basic_string[abi:nn180100]<0>(v113, "packed_char4");
    v114 = 48;
    std::string::basic_string[abi:nn180100]<0>(v115, "uchar");
    v116 = 49;
    std::string::basic_string[abi:nn180100]<0>(v117, "uchar2");
    v118 = 50;
    std::string::basic_string[abi:nn180100]<0>(v119, "uchar3");
    v120 = 51;
    std::string::basic_string[abi:nn180100]<0>(v121, "uchar4");
    v122 = 52;
    std::string::basic_string[abi:nn180100]<0>(v123, "packed_uchar");
    v124 = 49;
    std::string::basic_string[abi:nn180100]<0>(v125, "packed_uchar2");
    v126 = 50;
    std::string::basic_string[abi:nn180100]<0>(v127, "packed_uchar3");
    v128 = 51;
    std::string::basic_string[abi:nn180100]<0>(v129, "packed_uchar4");
    v130 = 52;
    std::string::basic_string[abi:nn180100]<0>(v131, "BOOL");
    v132 = 53;
    std::string::basic_string[abi:nn180100]<0>(v133, "BOOL2");
    v134 = 54;
    std::string::basic_string[abi:nn180100]<0>(v135, "BOOL3");
    v136 = 55;
    std::string::basic_string[abi:nn180100]<0>(v137, "BOOL4");
    v138 = 56;
    std::string::basic_string[abi:nn180100]<0>(v139, "packed_BOOL");
    v140 = 53;
    std::string::basic_string[abi:nn180100]<0>(v141, "packed_BOOL2");
    v142 = 54;
    std::string::basic_string[abi:nn180100]<0>(v143, "packed_BOOL3");
    v144 = 55;
    std::string::basic_string[abi:nn180100]<0>(v145, "packed_BOOL4");
    v146 = 56;
    std::string::basic_string[abi:nn180100]<0>(v147, "float2x2");
    v148 = 7;
    std::string::basic_string[abi:nn180100]<0>(v149, "float2x3");
    v150 = 8;
    std::string::basic_string[abi:nn180100]<0>(v151, "float2x4");
    v152 = 9;
    std::string::basic_string[abi:nn180100]<0>(v153, "float3x2");
    v154 = 10;
    std::string::basic_string[abi:nn180100]<0>(v155, "float3x3");
    v156 = 11;
    std::string::basic_string[abi:nn180100]<0>(v157, "float3x4");
    v158 = 12;
    std::string::basic_string[abi:nn180100]<0>(v159, "float4x2");
    v160 = 13;
    std::string::basic_string[abi:nn180100]<0>(v161, "float4x3");
    v162 = 14;
    std::string::basic_string[abi:nn180100]<0>(v163, "float4x4");
    v164 = 15;
    std::string::basic_string[abi:nn180100]<0>(v165, "half2x2");
    v166 = 20;
    std::string::basic_string[abi:nn180100]<0>(v167, "half2x3");
    v168 = 21;
    std::string::basic_string[abi:nn180100]<0>(v169, "half2x4");
    v170 = 22;
    std::string::basic_string[abi:nn180100]<0>(v171, "half3x2");
    v172 = 23;
    std::string::basic_string[abi:nn180100]<0>(v173, "half3x3");
    v174 = 24;
    std::string::basic_string[abi:nn180100]<0>(v175, "half3x4");
    v176 = 25;
    std::string::basic_string[abi:nn180100]<0>(v177, "half4x2");
    v178 = 26;
    std::string::basic_string[abi:nn180100]<0>(v179, "half4x3");
    v180 = 27;
    std::string::basic_string[abi:nn180100]<0>(v181, "half4x4");
    v1 = 0;
    v182 = 28;
    qword_1EF8E7D70 = 0;
    qword_1EF8E7D68 = 0;
    bufferTypeMap(void)::localBufferTypeMap = (uint64_t)&qword_1EF8E7D68;
    do
    {
      std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLCompilerDataType> const&>((uint64_t)&bufferTypeMap(void)::localBufferTypeMap, &qword_1EF8E7D68, &v3[v1], (uint64_t)&v3[v1]);
      v1 += 4;
    }
    while (v1 != 360);
    v2 = 360;
    do
    {
      if (*((char *)&v3[v2 - 1] - 1) < 0)
        operator delete((void *)v3[v2 - 4]);
      v2 -= 4;
    }
    while (v2 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,MTLCompilerDataType>::~map[abi:nn180100], &bufferTypeMap(void)::localBufferTypeMap, &dword_1C3C54000);
  }
}

_QWORD *std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::less<std::string>::operator()[abi:nn180100](v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || std::less<std::string>::operator()[abi:nn180100](a2, v5 + 4))
    return v2;
  return v5;
}

void pixelTypeMap(void)
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  int v4;
  _QWORD v5[3];
  int v6;
  _QWORD v7[3];
  int v8;
  _QWORD v9[3];
  int v10;
  _QWORD v11[3];
  int v12;
  _QWORD v13[3];
  int v14;
  _QWORD v15[3];
  int v16;
  _QWORD v17[3];
  int v18;
  _QWORD v19[3];
  int v20;
  _QWORD v21[3];
  int v22;
  _QWORD v23[3];
  int v24;
  _QWORD v25[3];
  int v26;
  _QWORD v27[3];
  int v28;
  _QWORD v29[3];
  int v30;
  _QWORD v31[3];
  int v32;
  _QWORD v33[3];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  {
    std::string::basic_string[abi:nn180100]<0>(v3, "r8unorm");
    v4 = 62;
    std::string::basic_string[abi:nn180100]<0>(v5, "r8snorm");
    v6 = 63;
    std::string::basic_string[abi:nn180100]<0>(v7, "r16unorm");
    v8 = 64;
    std::string::basic_string[abi:nn180100]<0>(v9, "r16snorm");
    v10 = 65;
    std::string::basic_string[abi:nn180100]<0>(v11, "rg8unorm");
    v12 = 66;
    std::string::basic_string[abi:nn180100]<0>(v13, "rg8snorm");
    v14 = 67;
    std::string::basic_string[abi:nn180100]<0>(v15, "rg16unorm");
    v16 = 68;
    std::string::basic_string[abi:nn180100]<0>(v17, "rg16snorm");
    v18 = 69;
    std::string::basic_string[abi:nn180100]<0>(v19, "rgba8unorm");
    v20 = 70;
    std::string::basic_string[abi:nn180100]<0>(v21, "srgba8unorm");
    v22 = 71;
    std::string::basic_string[abi:nn180100]<0>(v23, "rgba8snorm");
    v24 = 72;
    std::string::basic_string[abi:nn180100]<0>(v25, "rgba16unorm");
    v26 = 73;
    std::string::basic_string[abi:nn180100]<0>(v27, "rgba16snorm");
    v28 = 74;
    std::string::basic_string[abi:nn180100]<0>(v29, "rgb10a2");
    v30 = 75;
    std::string::basic_string[abi:nn180100]<0>(v31, "rg11b10f");
    v32 = 76;
    std::string::basic_string[abi:nn180100]<0>(v33, "rgb9e5");
    v1 = 0;
    v34 = 77;
    qword_1EF8E8FD0 = 0;
    qword_1EF8E8FC8 = 0;
    pixelTypeMap(void)::localPixelFormatTypeMap = (uint64_t)&qword_1EF8E8FC8;
    do
    {
      std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLCompilerDataType> const&>((uint64_t)&pixelTypeMap(void)::localPixelFormatTypeMap, &qword_1EF8E8FC8, &v3[v1], (uint64_t)&v3[v1]);
      v1 += 4;
    }
    while (v1 != 64);
    v2 = 64;
    do
    {
      if (*((char *)&v3[v2 - 1] - 1) < 0)
        operator delete((void *)v3[v2 - 4]);
      v2 -= 4;
    }
    while (v2 * 8);
    __cxa_atexit((void (*)(void *))std::map<std::string,MTLCompilerDataType>::~map[abi:nn180100], &pixelTypeMap(void)::localPixelFormatTypeMap, &dword_1C3C54000);
  }
}

uint64_t AGCArgumentBuffer::unwrapArray(uint64_t *a1, uint64_t a2, AGCArgumentBuffer::ResourceTracker *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = operator new();
  *(_DWORD *)(v6 + 8) = 0;
  *(_QWORD *)v6 = &off_1E7E8AD50;
  *(_QWORD *)(v6 + 16) = 0;
  v7 = operator new();
  v8 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
  *(_DWORD *)(v7 + 8) = 3;
  *(_QWORD *)v7 = &off_1E7E8AD70;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v8;
  v9 = *a1;
  *a1 = v6;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v7;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    *(_QWORD *)(v6 + 16) = v7;
  }
  AGCArgumentBuffer::ResourceTracker::pushArray(a3, (AGCArgumentBuffer::Array *)v7, 1);
  return v7 + 16;
}

void AGCArgumentBuffer::Sampler::~Sampler(AGCArgumentBuffer::Sampler *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCArgumentBuffer::Texture::~Texture(AGCArgumentBuffer::Texture *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCArgumentBuffer::DummyStruct::~DummyStruct(AGCArgumentBuffer::DummyStruct *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7E8AD50;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7E8AD50;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCArgumentBuffer::Buffer::~Buffer(AGCArgumentBuffer::Buffer *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
}

{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7E8AD30;
  v2 = (char *)*((_QWORD *)this + 23);
  if (v2 != (char *)this + 200)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 2);
  if (v4 != (char *)this + 32)
    free(v4);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t std::__tree<std::__value_type<std::string,MTLCompilerDataType>,std::__map_value_compare<std::string,std::__value_type<std::string,MTLCompilerDataType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MTLCompilerDataType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MTLCompilerDataType> const&>(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  char *v18;
  std::string *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;

  v7 = result;
  v8 = (_QWORD *)(result + 8);
  if ((_QWORD *)(result + 8) != a2)
  {
    result = std::less<std::string>::operator()[abi:nn180100](a3, a2 + 4);
    if (!(_DWORD)result)
    {
      result = std::less<std::string>::operator()[abi:nn180100](a2 + 4, a3);
      if (!(_DWORD)result)
      {
        v22 = a2;
        v23 = a2;
        v14 = &v22;
        if (a2)
          return result;
        goto LABEL_31;
      }
      v12 = a2[1];
      if (v12)
      {
        v13 = (_QWORD *)a2[1];
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        v17 = a2;
        do
        {
          v14 = (_QWORD *)v17[2];
          v16 = *v14 == (_QWORD)v17;
          v17 = v14;
        }
        while (!v16);
      }
      if (v14 == v8 || (result = std::less<std::string>::operator()[abi:nn180100](a3, v14 + 4), (_DWORD)result))
      {
        if (v12)
        {
          v23 = v14;
        }
        else
        {
          v23 = a2;
          v14 = a2 + 1;
        }
LABEL_30:
        if (*v14)
          return result;
        goto LABEL_31;
      }
LABEL_29:
      result = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v7, &v23, a3);
      v14 = (_QWORD *)result;
      goto LABEL_30;
    }
  }
  v9 = *a2;
  if (*(_QWORD **)v7 != a2)
  {
    if (v9)
    {
      v10 = (_QWORD *)*a2;
      do
      {
        v11 = v10;
        v10 = (_QWORD *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (_QWORD *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    result = std::less<std::string>::operator()[abi:nn180100](v11 + 4, a3);
    if ((_DWORD)result)
      goto LABEL_17;
    goto LABEL_29;
  }
  v11 = a2;
LABEL_17:
  if (v9)
  {
    v23 = v11;
    v14 = v11 + 1;
    goto LABEL_30;
  }
  v23 = a2;
  v14 = a2;
LABEL_31:
  v18 = (char *)operator new(0x40uLL);
  v19 = (std::string *)(v18 + 32);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *((_QWORD *)v18 + 6) = *(_QWORD *)(a4 + 16);
  }
  *((_DWORD *)v18 + 14) = *(_DWORD *)(a4 + 24);
  v20 = v23;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = v20;
  *v14 = v18;
  v21 = **(_QWORD **)v7;
  if (v21)
  {
    *(_QWORD *)v7 = v21;
    v18 = (char *)*v14;
  }
  result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), (uint64_t *)v18);
  ++*(_QWORD *)(v7 + 16);
  return result;
}

uint64_t std::map<std::string,MTLCompilerDataType>::~map[abi:nn180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

void AGCArgumentBuffer::Struct::~Struct(char **this)
{
  *this = (char *)&off_1E7EB7F38;
  llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(this + 2);
}

{
  *this = (char *)&off_1E7EB7F38;
  llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(this + 2);
  JUMPOUT(0x1CAA2D68CLL);
}

char **llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void AGCArgumentBuffer::Root::~Root(char **this)
{
  *this = (char *)&off_1E7EB7F38;
  llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(this + 2);
}

{
  *this = (char *)&off_1E7EB7F38;
  llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector(this + 2);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCArgumentBuffer::Array::~Array(AGCArgumentBuffer::Array *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7E8AD70;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7E8AD70;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCArgumentBuffer::AGCArgumentBuffer(uint64_t a1, AGCArgumentBuffer::Struct *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  char *v9;
  llvm::LLVMContext *v10;
  AGCArgumentBuffer::Struct *v11;
  llvm::LLVMContext *v12;
  char *v13;
  AGCArgumentBuffer::Struct *v15[5];
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[32];
  void *v21;
  uint64_t v22;
  _BYTE v23[32];
  void *v24;
  uint64_t v25;
  _BYTE v26[832];
  void *v27;
  uint64_t v28;
  _BYTE v29[32];
  void *v30[2];
  _BYTE v31[32];
  void *v32[2];
  _BYTE v33[32];
  _DWORD *v34;
  uint64_t v35;
  _DWORD v36[10];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a7;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  v9 = AGCArgumentBuffer::parseMDRoot(a1, a5, a6);
  *(_QWORD *)(a1 + 32) = v9;
  if (*((_BYTE *)a2 + 1755))
  {
    v11 = *(AGCArgumentBuffer::Struct **)(a1 + 8);
    v15[0] = (AGCArgumentBuffer::Struct *)v9;
    v15[1] = a2;
    v15[2] = v11;
    v15[3] = (AGCArgumentBuffer::Struct *)llvm::Type::getInt32Ty(v11, v10);
    v15[4] = (AGCArgumentBuffer::Struct *)llvm::Type::getInt64Ty(v11, v12);
    v16 = 0;
    v17 = 0;
    v18 = v20;
    v19 = 0x400000000;
    v21 = v23;
    v22 = 0x400000000;
    v24 = v26;
    v25 = 0x800000000;
    v27 = v29;
    v28 = 0x800000000;
    v30[0] = v31;
    v30[1] = (void *)0x400000000;
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v30, 0);
    v32[0] = v33;
    v32[1] = (void *)0x400000000;
    v34 = v36;
    v35 = 0x400000000;
    v36[8] = 0;
    llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::push_back((uint64_t)&v24, (char *)v32);
    if (v34 != v36)
      free(v34);
    if (v32[0] != v33)
      free(v32[0]);
    v16 = 0;
    v17 = 0;
    v13 = (char *)v24 + 104 * v25;
    *((_DWORD *)v13 - 2) = *((_DWORD *)v13 - 24);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)(v13 - 104), 0);
    AGCArgumentBuffer::Tier1TypeBuilder::buildStruct((AGCArgumentBuffer::Tier1TypeBuilder *)v15, v15[0]);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(*((_QWORD *)v24 + 13 * v25 - 13) + 8);
    if (v30[0] != v31)
      free(v30[0]);
    if (v27 != v29)
      free(v27);
    llvm::SmallVectorTemplateBase<AGCArgumentBuffer::Tier1TypeBuilder::SubStruct,false>::destroy_range((char *)v24, (char *)v24 + 104 * v25);
    if (v24 != v26)
      free(v24);
    if (v21 != v23)
      free(v21);
    if (v18 != v20)
      free(v18);
  }
  return a1;
}

AGCArgumentBuffer *AGCArgumentBuffer::lookup(AGCArgumentBuffer *this, const llvm::GetElementPtrInst *a2, const llvm::Use **a3, BOOL *a4)
{
  const llvm::Use *v6;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  llvm::APInt *v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  BOOL v18;
  unsigned int *v19;

  *a4 = 1;
  v6 = (const llvm::GetElementPtrInst *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF) + 64);
  if (v6 < a2)
  {
    v9 = 1;
    do
    {
      v10 = *(_QWORD *)v6;
      if (*(_QWORD *)v6)
        v11 = *(_BYTE *)(*(_QWORD *)v6 + 16) == 16;
      else
        v11 = 0;
      if (v11)
      {
        v13 = (llvm::APInt *)(v10 + 24);
        v14 = *(_DWORD *)(v10 + 32);
        if (v14 > 0x40)
          v15 = llvm::APInt::countLeadingZerosSlowCase(v13) == v14;
        else
          v15 = *(_QWORD *)v13 == 0;
        v12 = v15;
      }
      else
      {
        v12 = 0;
      }
      if (v9)
        v9 = v12;
      else
        v9 = 0;
      *a4 = v9;
      v16 = *((_DWORD *)this + 2);
      if ((v16 - 3) < 0xFFFFFFFE || this == 0)
      {
        v18 = v16 != 3 || this == 0;
        if (v18 && (v16 || !this))
        {
          if ((v16 - 5) >= 2)
            break;
        }
        else
        {
          this = (AGCArgumentBuffer *)*((_QWORD *)this + 2);
        }
      }
      else
      {
        v19 = (unsigned int *)(v10 + 24);
        if (*(_DWORD *)(v10 + 32) >= 0x41u)
          v19 = *(unsigned int **)v19;
        this = *(AGCArgumentBuffer **)(*((_QWORD *)this + 2) + 8 * *v19);
        if (!this)
          return this;
      }
      v6 = (const llvm::Use *)((char *)v6 + 32);
    }
    while (v6 < a2);
  }
  *a3 = v6;
  return this;
}

llvm::Value *AGCArgumentBuffer::Resource::getResourceId(uint64_t a1, llvm::Type **a2, uint64_t a3)
{
  llvm::LLVMContext *v6;
  llvm::Value *Add;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Type **v11;
  llvm::Type *Int32Ty;
  llvm::Type **ZExtOrTrunc;
  llvm::LLVMContext *v14;
  llvm::Value *v15;
  llvm::Value *Mul;
  _BYTE v18[32];
  __int16 v19;

  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  Add = (llvm::Value *)llvm::ConstantInt::get();
  v8 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = v9 + 16 * v8;
    do
    {
      v11 = *(llvm::Type ***)(a3
                            + 32
                            - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)
                            + 32 * *(unsigned int *)(*(_QWORD *)v9 + 32));
      Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(a2[8], v6);
      v19 = 257;
      ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)a2, v11, Int32Ty, (const llvm::Twine *)v18);
      llvm::Type::getInt32Ty(a2[8], v14);
      v15 = (llvm::Value *)llvm::ConstantInt::get();
      v19 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)a2, v15, (llvm::Value *)ZExtOrTrunc, (const llvm::Twine *)v18);
      v19 = 257;
      Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)a2, Add, Mul, (const llvm::Twine *)v18);
      v9 += 16;
    }
    while (v9 != v10);
  }
  return Add;
}

unint64_t AGCArgumentBuffer::Resource::getResourceIdBounds(AGCArgumentBuffer::Resource *this, llvm::GetElementPtrInst *a2)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  llvm::APInt *v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  _QWORD *v20;

  v2 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  v5 = *((_QWORD *)v2 + 4);
  v4 = v2 + 32;
  v3 = v5;
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v5)
    v7 = v6 == 16;
  else
    v7 = 0;
  if (!v7)
    goto LABEL_8;
  v9 = (llvm::APInt *)(v3 + 24);
  v10 = *(_DWORD *)(v3 + 32);
  if (v10 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v9) != v10)
      goto LABEL_8;
  }
  else if (*(_QWORD *)v9)
  {
LABEL_8:
    v11 = 0;
    v12 = 0;
    return v12 | v11;
  }
  v13 = *((unsigned int *)this + 6);
  if ((_DWORD)v13)
  {
    LODWORD(v11) = 0;
    v14 = 0;
    v15 = 16 * v13;
    v16 = (_DWORD *)(*((_QWORD *)this + 2) + 8);
    do
    {
      v17 = *((_QWORD *)v16 - 1);
      v18 = *(_QWORD *)&v4[32 * *(unsigned int *)(v17 + 32)];
      if (v18)
        v19 = *(_BYTE *)(v18 + 16) == 16;
      else
        v19 = 0;
      if (v19)
      {
        v20 = (_QWORD *)(v18 + 24);
        if (*(_DWORD *)(v18 + 32) >= 0x41u)
          v20 = (_QWORD *)*v20;
        LODWORD(v11) = v11 + *v16 * *(_DWORD *)v20;
      }
      else
      {
        v14 += (*(_DWORD *)(v17 + 24) - 1) * *v16;
      }
      v16 += 4;
      v15 -= 16;
    }
    while (v15);
  }
  else
  {
    v14 = 0;
    LODWORD(v11) = 0;
  }
  v12 = v11 & 0xFFFFFF00 | ((unint64_t)(v11 + v14) << 32);
  v11 = v11;
  return v12 | v11;
}

llvm::Value *AGCArgumentBuffer::Resource::getResourceArrayIndex(uint64_t a1, llvm::Type **a2, _QWORD *a3)
{
  llvm::LLVMContext *v6;
  llvm::Value *Add;
  uint64_t v8;
  uint64_t v9;
  llvm::Type **v10;
  llvm::Type *Int32Ty;
  llvm::Type **ZExtOrTrunc;
  llvm::LLVMContext *v13;
  llvm::Value *v14;
  llvm::Value *Mul;
  _BYTE v17[32];
  __int16 v18;

  llvm::Type::getInt32Ty(a2[8], (llvm::LLVMContext *)a2);
  Add = (llvm::Value *)llvm::ConstantInt::get();
  v8 = *(int *)(a1 + 96);
  if (v8 != *(_DWORD *)(a1 + 24))
  {
    v9 = *(_QWORD *)(a1 + 16) + 16 * v8;
    do
    {
      v10 = *(llvm::Type ***)(*a3 + 8 * *(unsigned int *)(*(_QWORD *)v9 + 32));
      Int32Ty = (llvm::Type *)llvm::Type::getInt32Ty(a2[8], v6);
      v18 = 257;
      ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)a2, v10, Int32Ty, (const llvm::Twine *)v17);
      llvm::Type::getInt32Ty(a2[8], v13);
      v14 = (llvm::Value *)llvm::ConstantInt::get();
      v18 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)a2, (llvm::Value *)ZExtOrTrunc, v14, (const llvm::Twine *)v17);
      v18 = 257;
      Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)a2, Add, Mul, (const llvm::Twine *)v17);
      v9 += 16;
    }
    while (v9 != *(_QWORD *)(a1 + 16) + 16 * *(unsigned int *)(a1 + 24));
  }
  return Add;
}

llvm::Value *AGCArgumentBuffer::Buffer::remapToTier1Indices(_QWORD *a1, uint64_t a2, llvm::Type **a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *result;

  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 112))
    llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)a1, a2 + 104);
  v8 = *(unsigned int *)(a2 + 192);
  if ((_DWORD)v8)
  {
    v9 = *(unsigned int **)(a2 + 184);
    v10 = &v9[2 * v8];
    do
    {
      v11 = *v9;
      v12 = v9[1];
      v9 += 2;
      *(_QWORD *)(*a1 + 8 * v12) = *(_QWORD *)(*a4 + 8 * v11);
    }
    while (v9 != v10);
  }
  result = AGCArgumentBuffer::Resource::getResourceArrayIndex(a2, a3, a4);
  *(_QWORD *)(*a1 + 8 * *((unsigned int *)a1 + 2) - 8) = result;
  return result;
}

uint64_t AGCArgumentBuffer::Sampler::typeSet(AGCArgumentBuffer::Sampler *this, AGCLLVMTargetLowerer *a2, llvm::LLVMContext *a3)
{
  llvm::ArrayType *Int64Ty;
  uint64_t v7;
  llvm::LLVMContext *v8;
  uint64_t v9;

  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 0x300000000;
  Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(a3, a2);
  v7 = llvm::ArrayType::get(Int64Ty, (llvm::Type *)*((unsigned int *)a2 + 427));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v7);
  v9 = llvm::Type::getInt64Ty(a3, v8);
  return llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v9);
}

uint64_t AGCArgumentBuffer::Texture::typeSet(AGCArgumentBuffer::Texture *this, AGCLLVMTargetLowerer *a2, llvm::LLVMContext *a3)
{
  llvm::ArrayType *Int64Ty;
  uint64_t v7;
  llvm::LLVMContext *v8;
  llvm::ArrayType *v9;
  uint64_t v10;
  llvm::LLVMContext *v11;
  llvm::ArrayType *Int32Ty;
  uint64_t v13;
  llvm::LLVMContext *v14;
  uint64_t v15;

  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 0x400000000;
  Int64Ty = (llvm::ArrayType *)llvm::Type::getInt64Ty(a3, a2);
  v7 = llvm::ArrayType::get(Int64Ty, (llvm::Type *)*((unsigned int *)a2 + 426));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v7);
  v9 = (llvm::ArrayType *)llvm::Type::getInt64Ty(a3, v8);
  v10 = llvm::ArrayType::get(v9, (llvm::Type *)*((unsigned int *)a2 + 426));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v10);
  Int32Ty = (llvm::ArrayType *)llvm::Type::getInt32Ty(a3, v11);
  v13 = llvm::ArrayType::get(Int32Ty, (llvm::Type *)*((unsigned int *)a2 + 439));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v13);
  v15 = llvm::Type::getInt64Ty(a3, v14);
  return llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, v15);
}

_QWORD *AGCArgumentBuffer::Constant::remapToTier1Indices(_QWORD *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;

  *result = result + 2;
  result[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 112))
    result = (_QWORD *)llvm::SmallVectorImpl<llvm::Value *>::operator=((uint64_t)result, a2 + 104);
  v5 = *(unsigned int *)(a2 + 192);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int **)(a2 + 184);
    v7 = &v6[2 * v5];
    do
    {
      v8 = *v6;
      v9 = v6[1];
      v6 += 2;
      *(_QWORD *)(*result + 8 * v9) = *(_QWORD *)(*a3 + 8 * v8);
    }
    while (v6 != v7);
  }
  return result;
}

llvm::Value *AGCLLVMAirBuiltins::buildSinCos(AGCLLVMAirBuiltins *this, llvm::Value *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::Value *FMul;
  uint64_t v9;
  llvm::Value *Floor;
  uint64_t FSub;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE v20[32];
  __int16 v21;

  v6 = *(_QWORD *)a2;
  v7 = llvm::ConstantFP::get();
  v21 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, v7, (uint64_t)v20);
  if (a3)
  {
    v9 = llvm::ConstantFP::get();
    v21 = 257;
    FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, (uint64_t)FMul, v9, (uint64_t)v20);
  }
  Floor = AGCLLVMTargetBuilder::CreateFloor(this, FMul);
  v21 = 257;
  FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)FMul, (uint64_t)Floor, (uint64_t)v20);
  v12 = llvm::ConstantFP::get();
  v21 = 257;
  v19 = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, FSub, v12, (uint64_t)v20);
  v14 = 1248;
  if (v6 == *((_QWORD *)this + 19))
    v14 = 1256;
  v13 = *((_QWORD *)this + 46);
  v15 = *(_QWORD *)(v13 + v14);
  if (v15)
    v16 = strlen(*(const char **)(v13 + v14));
  else
    v16 = 0;
  v17 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v15, v16, v6, v6);
  v21 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v17 + 24), v17, (uint64_t)&v19, 1, (uint64_t)v20);
}

llvm::User *AGCLLVMAirBuiltins::buildArctan(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  llvm::Type *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  llvm::IRBuilderBase *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::BasicBlock *v13;
  llvm::Value *v14;
  llvm::Value *FDiv;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t FSub;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::CmpInst **Cast;
  llvm::Value *Select;
  uint64_t v24;
  llvm::Instruction *v25;
  uint64_t v26;
  llvm::Instruction *v27;
  uint64_t FCmpHelper;
  uint64_t FirstInsertionPt;
  llvm::User *PHI;
  llvm::BasicBlock *v32;
  uint64_t v33;
  llvm::Value *FMul;
  llvm::BasicBlock *v35;
  uint64_t v36;
  llvm::Value *Fabs;
  _BYTE v38[32];
  __int16 v39;
  _QWORD v40[4];
  __int16 v41;
  llvm::Value *v42;

  v42 = a2;
  v4 = *(llvm::Type **)a2;
  v6 = 1240;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 21))
    v6 = 1232;
  v5 = *((_QWORD *)this + 46);
  v7 = *(_QWORD *)(v5 + v6);
  if (v7)
    v8 = strlen(*(const char **)(v5 + v6));
  else
    v8 = 0;
  v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v7, v8, (uint64_t)v4, (uint64_t)v4);
  v36 = llvm::ConstantFP::get();
  v33 = llvm::ConstantFP::get();
  AGCLLVMTargetBuilder::CreateFabs(this, a2);
  v10 = (AGCLLVMAirBuiltins *)((char *)this + 8);
  v11 = *((_QWORD *)this + 7);
  v32 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v12 = operator new();
  llvm::BasicBlock::BasicBlock();
  v40[0] = "not_less_than_one";
  v13 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v35 = (llvm::BasicBlock *)v12;
  *((_QWORD *)this + 7) = v12;
  *((_QWORD *)this + 8) = v12 + 40;
  v41 = 257;
  v14 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v9 + 24), v9, (uint64_t)&v42, 1, (uint64_t)v40);
  v39 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)v14, (uint64_t)v42, (uint64_t)v38);
  llvm::IRBuilderBase::CreateBr((AGCLLVMAirBuiltins *)((char *)this + 8), v32);
  *((_QWORD *)this + 7) = v13;
  *((_QWORD *)this + 8) = (char *)v13 + 40;
  v41 = 257;
  FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v36, (uint64_t)v42, (uint64_t)v40);
  Fabs = AGCLLVMTargetBuilder::CreateFabs(this, FDiv);
  v41 = 257;
  v16 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v9 + 24), v9, (uint64_t)&Fabs, 1, (uint64_t)v40);
  v39 = 257;
  v17 = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)v16, (uint64_t)Fabs, (uint64_t)v38);
  v41 = 257;
  FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v33, v17, (uint64_t)v40);
  v19 = 192;
  if (v4 == *((llvm::Type **)this + 21))
    v19 = 200;
  v20 = *(_QWORD *)((char *)this + v19);
  v21 = llvm::ConstantInt::get();
  v41 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)FDiv, v20, (uint64_t)v40);
  v39 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 40, Cast, v21, (uint64_t)v38);
  v41 = 257;
  llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, FSub, (uint64_t)v40);
  v39 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  llvm::IRBuilderBase::CreateBr((AGCLLVMAirBuiltins *)((char *)this + 8), v32);
  v24 = *(_QWORD *)(v11 + 40);
  if (v24 == v11 + 40)
  {
    v27 = 0;
  }
  else
  {
    v25 = (llvm::Instruction *)(v24 - 24);
    if (v24)
      v26 = v24 - 24;
    else
      v26 = 0;
    if (*(unsigned __int8 *)(v26 + 16) - 29 >= 0xB)
      v27 = 0;
    else
      v27 = v25;
  }
  llvm::Instruction::eraseFromParent(v27);
  *((_QWORD *)this + 7) = v11;
  *((_QWORD *)this + 8) = v11 + 40;
  v41 = 257;
  FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)this + 1, FCmpHelper, (uint64_t)v35, (uint64_t)v13);
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v32);
  llvm::IRBuilderBase::SetInsertPoint((uint64_t)v10, (uint64_t)v32, FirstInsertionPt);
  v41 = 257;
  PHI = llvm::IRBuilderBase::CreatePHI(v10, v4, 2, (const llvm::Twine *)v40);
  llvm::PHINode::addIncoming(PHI, FMul, v35);
  llvm::PHINode::addIncoming(PHI, Select, v13);
  return PHI;
}

uint64_t AGCLLVMAirBuiltins::buildArccos(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t FMul;
  llvm::Value *FSub;
  llvm::Value *Sqrt;
  uint64_t FAdd;
  uint64_t FDiv;
  uint64_t Select;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;

  llvm::ConstantFP::get();
  v4 = llvm::ConstantFP::get();
  v5 = llvm::ConstantFP::get();
  v18 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v17);
  v16 = 257;
  FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v4, FMul, (uint64_t)v15);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FSub);
  v18 = 257;
  FAdd = llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, (uint64_t)a2, (uint64_t)v17);
  v18 = 257;
  FDiv = llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, (uint64_t)Sqrt, (uint64_t)v17);
  v18 = 257;
  llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, FDiv, FAdd, (uint64_t)v17);
  v18 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v18 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v18 = 257;
  v12 = llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, Select, (uint64_t)v17);
  v13 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t))(*(_QWORD *)this + 32))(this, v12);
  v16 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v5, v13, (uint64_t)v15);
}

uint64_t AGCLLVMAirBuiltins::buildArcsin(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t FMul;
  llvm::Value *FSub;
  llvm::Value *Sqrt;
  uint64_t FAdd;
  uint64_t FDiv;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;
  _BYTE v15[32];
  __int16 v16;

  v4 = llvm::ConstantFP::get();
  v5 = llvm::ConstantFP::get();
  v16 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v15);
  v14 = 257;
  FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v4, FMul, (uint64_t)v13);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FSub);
  v16 = 257;
  FAdd = llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, (uint64_t)Sqrt, (uint64_t)v15);
  v16 = 257;
  FDiv = llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, FAdd, (uint64_t)v15);
  v11 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t))(*(_QWORD *)this + 32))(this, FDiv);
  v14 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v5, v11, (uint64_t)v13);
}

uint64_t AGCLLVMAirBuiltins::buildTan(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  v4 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, llvm::Value *, _QWORD))(*(_QWORD *)this + 24))(this, a2, 0);
  v5 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, llvm::Value *, uint64_t))(*(_QWORD *)this + 24))(this, a2, 1);
  v8 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, v5, (uint64_t)v7);
}

uint64_t AGCLLVMAirBuiltins::buildCeil(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  char *v3;
  llvm::Value *FNeg;
  llvm::Value *Floor;
  _BYTE v7[32];
  __int16 v8;

  v3 = (char *)this + 8;
  v8 = 257;
  FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)a2, (uint64_t)v7);
  Floor = AGCLLVMTargetBuilder::CreateFloor(this, FNeg);
  v8 = 257;
  return llvm::IRBuilderBase::CreateFNeg((uint64_t)v3, (uint64_t)Floor, (uint64_t)v7);
}

uint64_t AGCLLVMAirBuiltins::buildPow(llvm::Type **this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::IRBuilderBase *v6;
  llvm::Value *FCmpHelper;
  llvm::Type *v8;
  llvm::Value *FPToSI;
  llvm::Value *v10;
  llvm::CmpInst **v11;
  uint64_t v12;
  llvm::Value *ICmp;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *Fabs;
  llvm::Value *v17;
  uint64_t v19;
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;

  v6 = (llvm::IRBuilderBase *)(this + 1);
  AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, a3);
  llvm::ConstantFP::get();
  v22 = 257;
  FCmpHelper = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
  v8 = this[25];
  v22 = 257;
  FPToSI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToSI(v6, a3, v8, (const llvm::Twine *)v21);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  v11 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v6, FPToSI, v10, (const llvm::Twine *)v21);
  v12 = llvm::ConstantInt::get();
  v20 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v6, 32, v11, v12, (uint64_t)&v19);
  v22 = 257;
  v14 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v6, ICmp, FCmpHelper, (const llvm::Twine *)v21);
  llvm::ConstantFP::get();
  v22 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateFCmpHelper();
  v22 = 257;
  llvm::IRBuilderBase::CreateAnd(v6, v15, v14, (const llvm::Twine *)v21);
  Fabs = AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, a2);
  v17 = AGCLLVMAirBuiltins::buildPowr((AGCLLVMAirBuiltins *)this, Fabs, a3);
  v22 = 257;
  llvm::IRBuilderBase::CreateFNeg((uint64_t)v6, (uint64_t)v17, (uint64_t)v21);
  v20 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildRNE(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Type *v9;
  _BYTE v11[32];
  __int16 v12;
  _BYTE v13[32];
  __int16 v14;
  llvm::Value *v15;

  v15 = a2;
  v4 = *((_QWORD *)this + 46);
  v5 = *(_QWORD *)(v4 + 1280);
  if (v5)
    v6 = strlen(*(const char **)(v4 + 1280));
  else
    v6 = 0;
  v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v5, v6, *((_QWORD *)this + 25), *((_QWORD *)this + 21));
  AGCLLVMTargetBuilder::CreateFabs(this, a2);
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  v14 = 257;
  v8 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, **(_QWORD **)(*(_QWORD *)v7 + 16), v7, (uint64_t)&v15, 1, (uint64_t)v13);
  v9 = (llvm::Type *)*((_QWORD *)this + 21);
  v12 = 257;
  llvm::IRBuilderBase::CreateSIToFP((AGCLLVMAirBuiltins *)((char *)this + 8), v8, v9, (const llvm::Twine *)v11);
  v14 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildTrunc(llvm::Type **this, llvm::Type **a2)
{
  llvm::Type *v4;
  llvm::Type *v5;
  llvm::Value *FPToSI;
  _WORD v8[20];
  _BYTE v9[32];
  __int16 v10;

  v4 = *a2;
  llvm::ConstantFP::get();
  AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, (llvm::Value *)a2);
  v10 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v5 = this[25];
  v10 = 257;
  FPToSI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToSI((llvm::IRBuilderBase *)(this + 1), (llvm::Value *)a2, v5, (const llvm::Twine *)v9);
  v8[16] = 257;
  llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)(this + 1), FPToSI, v4, (const llvm::Twine *)v8);
  v10 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildPackNorm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v6 = *(unsigned __int8 *)(a3 + 1);
  if (v6 == 16)
  {
    v9 = *(_QWORD *)(a1 + 368);
    v14 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v16 = *(_DWORD *)(a1 + 104);
    v8 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 88))(v9, &v14, a2, 16, *(unsigned __int8 *)(a3 + 3), 1);
    if (!v15)
    {
LABEL_7:
      v10 = *(_QWORD *)(a1 + 200);
      v13 = 257;
      return llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v8, v10, (uint64_t)v12);
    }
LABEL_6:
    llvm::MetadataTracking::untrack();
    goto LABEL_7;
  }
  if (v6 == 8)
  {
    v7 = *(_QWORD *)(a1 + 368);
    v17 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v19 = *(_DWORD *)(a1 + 104);
    v8 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 88))(v7, &v17, a2, 8, *(unsigned __int8 *)(a3 + 3), 1);
    if (!v18)
      goto LABEL_7;
    goto LABEL_6;
  }
  return 0;
}

llvm::Value *AGCLLVMAirBuiltins::buildUnpackNorm(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t Cast;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  _BYTE v20[32];
  __int16 v21;

  v5 = a3[1];
  if (v5 == 16)
  {
    v10 = *(_QWORD *)(a1 + 240);
    v21 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v10, (uint64_t)v20);
    v12 = *(_QWORD *)(a1 + 368);
    v14 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v16 = *(_DWORD *)(a1 + 104);
    v9 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 96))(v12, &v14, Cast, 16, a3[3], 32);
    if (!v15)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v5 != 8)
    return 0;
  v6 = *(_QWORD *)(a1 + 296);
  v21 = 257;
  v7 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v6, (uint64_t)v20);
  v8 = *(_QWORD *)(a1 + 368);
  v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v19 = *(_DWORD *)(a1 + 104);
  v9 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 96))(v8, &v17, v7, 8, a3[3], 32);
  if (v18)
LABEL_6:
    llvm::MetadataTracking::untrack();
LABEL_7:
  if (*a3 == 16)
    return AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, v9, *(llvm::Type **)(a1 + 152));
  return v9;
}

uint64_t AGCLLVMAirBuiltins::buildPackSRGB(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  llvm::Value *v4;
  llvm::Value *v5;
  uint64_t Element;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *v9;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  _BYTE v25[32];
  __int16 v26;

  v4 = (llvm::Value *)llvm::UndefValue::get();
  v26 = 257;
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  Element = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMAirBuiltins *)((char *)this + 8), a2, v5, (const llvm::Twine *)v25);
  v7 = *((_QWORD *)this + 46);
  v22 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v24 = *((_DWORD *)this + 26);
  v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 88))(v7, &v22, Element, 8, 0, 1);
  v26 = 257;
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltins *)((char *)this + 8), v4, v8, v9, (const llvm::Twine *)v25);
  if (v23)
    llvm::MetadataTracking::untrack();
  for (i = 0; i != 3; ++i)
  {
    v26 = 257;
    v12 = (llvm::Value *)llvm::ConstantInt::get();
    v13 = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMAirBuiltins *)((char *)this + 8), a2, v12, (const llvm::Twine *)v25);
    v14 = *((_QWORD *)this + 46);
    v19 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
    v21 = *((_DWORD *)this + 26);
    v15 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 144))(v14, &v19, v13, 0, *((_QWORD *)this + 23));
    if (v20)
      llvm::MetadataTracking::untrack();
    v26 = 257;
    v16 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltins *)((char *)this + 8), InsertElement, v15, v16, (const llvm::Twine *)v25);
  }
  v17 = *((_QWORD *)this + 25);
  v26 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)InsertElement, v17, (uint64_t)v25);
}

uint64_t AGCLLVMAirBuiltins::buildUnpackSRGB(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  llvm::IRBuilderBase *v5;
  uint64_t v6;
  llvm::Value *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t Cast;
  BOOL v14;
  llvm::Value *v15;
  uint64_t v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t Element;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value *InsertElement;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Value *v29;
  uint64_t result;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _BYTE v37[32];
  __int16 v38;

  if (a4 > 4)
  {
    v10 = bswap32(*(_DWORD *)(a3 + a4 - 5));
    if (v10 == 1983145521)
    {
      v11 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
    }
    else if (v10 < 0x76346631)
    {
      v11 = -1;
    }
    else
    {
      v11 = 1;
    }
    v5 = (llvm::IRBuilderBase *)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 296);
    v38 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v12, (uint64_t)v37);
    v14 = v11 == 0;
    v7 = (llvm::Value *)Cast;
    v8 = v14;
    if (v14)
      v9 = 16;
    else
      v9 = 32;
  }
  else
  {
    v5 = (llvm::IRBuilderBase *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 296);
    v38 = 257;
    v7 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v6, (uint64_t)v37);
    v8 = 0;
    v9 = 32;
  }
  v15 = (llvm::Value *)llvm::UndefValue::get();
  v16 = *(_QWORD *)(a1 + 368);
  v34 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(v5);
  v36 = *(_DWORD *)(a1 + 104);
  v38 = 257;
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v18 = v7;
  Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v7, v17, (const llvm::Twine *)v37);
  v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v16 + 96))(v16, &v34, Element, 8, 0, v9);
  if (v35)
    llvm::MetadataTracking::untrack();
  v38 = 257;
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v15, v20, v21, (const llvm::Twine *)v37);
  v23 = 0;
  if (v8)
    v24 = 152;
  else
    v24 = 168;
  do
  {
    v38 = 257;
    v25 = (llvm::Value *)llvm::ConstantInt::get();
    v26 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v18, v25, (const llvm::Twine *)v37);
    v27 = *(_QWORD *)(a1 + 368);
    v31 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(v5);
    v33 = *(_DWORD *)(a1 + 104);
    v28 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 152))(v27, &v31, v26, 0, *(_QWORD *)(a1 + v24));
    if (v32)
      llvm::MetadataTracking::untrack();
    v38 = 257;
    v29 = (llvm::Value *)llvm::ConstantInt::get();
    result = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v28, v29, (const llvm::Twine *)v37);
    InsertElement = (llvm::Value *)result;
    ++v23;
  }
  while (v23 != 3);
  return result;
}

uint64_t AGCLLVMAirBuiltins::buildCoherentLoad()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildCoherentStore()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildAtomic(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 v8;
  int v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  const std::string::value_type *v13;
  int v14;
  uint64_t v15;
  const std::string::value_type **v16;
  char v17;
  int v18;
  const std::string::value_type *v19;
  int *v20;
  const std::string::value_type *v21;
  const char *v22;
  const char *v23;
  int v24;
  std::string *v25;
  std::string::size_type size;
  _DWORD *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string *p_str;
  std::string *v31;
  std::string::size_type v32;
  uint64_t v33;
  std::string::size_type v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  uint64_t v39;
  std::string::size_type v40;
  std::string *v41;
  std::string *v42;
  char *v43;
  std::string *v44;
  std::string::size_type v45;
  uint64_t v46;
  std::string::size_type v47;
  std::string *v48;
  std::string *v49;
  char *v50;
  std::string *v51;
  std::string::size_type v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string *v55;
  std::string *v56;
  std::string *v57;
  std::string::size_type v58;
  uint64_t v59;
  std::string::size_type v60;
  std::string *v61;
  std::string *v62;
  char *v63;
  std::string *v64;
  std::string::size_type v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int Key;
  llvm::LLVMContext *v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  int v81;
  unsigned int v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  _BYTE *v88;
  _QWORD *v89;
  llvm::Type **AtomicRMW;
  uint64_t v91;
  uint64_t Cast;
  uint64_t *v93;
  llvm::Type *v94;
  uint64_t *v95;
  uint64_t AlignedLoad;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  llvm::Module *Module;
  uint64_t DataLayout;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  llvm::APInt *v121;
  unsigned int v122;
  BOOL v123;
  uint64_t v124;
  llvm::Type *v125;
  llvm::Type *FloatTy;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  int v130;
  uint64_t AlignedStore;
  uint64_t v132;
  uint64_t v133;
  llvm::APInt *v134;
  unsigned int v135;
  BOOL v136;
  uint64_t v137;
  uint64_t v138;
  llvm::IRBuilderBase *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unsigned int v147;
  __int16 v148;
  _QWORD *v149;
  BOOL v150;
  int v151;
  llvm::IRBuilderBase *v152;
  uint64_t v153;
  uint64_t v154;
  llvm::LLVMContext *v155;
  llvm::Type *v156;
  uint64_t Int32Ty;
  const std::string::value_type *v158;
  std::string::size_type v159;
  void *v160;
  uint64_t v161;
  llvm::Type *v162;
  uint64_t v163;
  uint64_t v164;
  __int16 v165;
  uint64_t v166;
  void **v167;
  std::string::size_type v168;
  __int16 v170;
  uint64_t *v171;
  _BYTE v172[40];
  int v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  int v178;
  __int128 v179;
  llvm::LLVMContext *v180;
  int v181;
  __int128 v182;
  uint64_t v183;
  int v184;
  void *__p[2];
  unsigned __int8 v186;
  __int128 v187;
  uint64_t v188;
  int v189;
  _QWORD v190[2];
  unsigned __int8 v191;
  __int128 v192;
  uint64_t v193;
  int v194;
  std::string v195;
  std::string __str;
  std::string v197;
  __int16 v198;

  v2 = a2;
  v4 = *(_QWORD *)*a2;
  v5 = *(_DWORD *)(v4 + 8);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
  v6 = v5 & 0xFFFFFF00;
  v7 = *(_QWORD *)(a1 + 752);
  if (v6 == 256)
  {
    if (v7)
      *(_BYTE *)(v7 + 9) = 1;
  }
  else if (v7)
  {
    *(_BYTE *)(v7 + 8) = 1;
  }
  if ((v8 & 1) == 0
  {
    AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map = 0;
    *(_QWORD *)&dword_1ED838DB0 = 0;
    qword_1ED838DB8 = 0x1800000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map, &dword_1C3C54000);
  }
  v9 = dword_1ED838DB4;
  v171 = v2;
  if (!dword_1ED838DB4)
  {
    v10 = 0;
    memset(&v197, 0, sizeof(v197));
    v11 = ".s";
    v12 = ".u";
    v13 = ".i32";
    qmemcpy(v172, ".load.i3.store.i.cmpxchg.weak.i3.xchg.i3", sizeof(v172));
    v14 = 1;
    do
    {
      v173 = v14;
      LODWORD(v174) = v9;
      std::string::basic_string[abi:nn180100]<0>(&__str, off_1E7E8B200[v10]);
      v15 = 0;
      do
      {
        v175 = v15;
        v16 = (const std::string::value_type **)&(&off_1E7E8B190)[2 * v15];
        v17 = 1;
        do
        {
          std::string::operator=(&v197, &__str);
          std::string::append(&v197, *v16);
          v18 = v17 & 1;
          if ((v17 & 1) != 0)
            v19 = v12;
          else
            v19 = v11;
          if ((v17 & 1) != 0)
            v20 = (int *)v16 + 3;
          else
            v20 = (int *)(v16 + 1);
          std::string::append(&v197, v19);
          std::string::append(&v197, v13);
          v21 = v13;
          v22 = v12;
          v23 = v11;
          v24 = *v20;
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v25 = &v197;
          else
            v25 = (std::string *)v197.__r_.__value_.__r.__words[0];
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
          else
            size = v197.__r_.__value_.__l.__size_;
          v17 = 0;
          v27 = (_DWORD *)*llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v25, size);
          v27[2] = 0;
          v27[3] = v24;
          v11 = v23;
          v12 = v22;
          v13 = v21;
          v27[4] = 0;
        }
        while (v18);
        v15 = v175 + 1;
      }
      while (v175 != 6);
      if ((v173 & 1) != 0)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v28 = __str.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:nn180100]((uint64_t)&v195, v28 + 10);
        if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v195;
        else
          v29 = (std::string *)v195.__r_.__value_.__r.__words[0];
        if (v28)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          memmove(v29, p_str, v28);
        }
        strcpy((char *)v29 + v28, ".max.u.i64");
        if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v31 = &v195;
        else
          v31 = (std::string *)v195.__r_.__value_.__r.__words[0];
        if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
        else
          v32 = v195.__r_.__value_.__l.__size_;
        v33 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v31, v32);
        *(_QWORD *)(v33 + 8) = 0x900000000;
        *(_DWORD *)(v33 + 16) = 1;
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v195.__r_.__value_.__l.__data_);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v34 = __str.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:nn180100]((uint64_t)&v195, v34 + 10);
        if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v195;
        else
          v35 = (std::string *)v195.__r_.__value_.__r.__words[0];
        if (v34)
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v36 = &__str;
          else
            v36 = (std::string *)__str.__r_.__value_.__r.__words[0];
          memmove(v35, v36, v34);
        }
        strcpy((char *)v35 + v34, ".min.u.i64");
        if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v195;
        else
          v37 = (std::string *)v195.__r_.__value_.__r.__words[0];
        if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
        else
          v38 = v195.__r_.__value_.__l.__size_;
        v39 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v37, v38);
        *(_QWORD *)(v39 + 8) = 0xA00000000;
        *(_DWORD *)(v39 + 16) = 1;
        if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v195.__r_.__value_.__l.__data_);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v40 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:nn180100]((uint64_t)&v195, v40 + 9);
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v195;
      else
        v41 = (std::string *)v195.__r_.__value_.__r.__words[0];
      if (v40)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &__str;
        else
          v42 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v41, v42, v40);
      }
      v43 = (char *)v41 + v40;
      *(_QWORD *)v43 = *(_QWORD *)&v172[32];
      *((_WORD *)v43 + 4) = 50;
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      v197 = v195;
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v197;
      else
        v44 = (std::string *)v197.__r_.__value_.__r.__words[0];
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
      else
        v45 = v197.__r_.__value_.__l.__size_;
      v46 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v44, v45);
      *(_QWORD *)(v46 + 8) = 0;
      *(_DWORD *)(v46 + 16) = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v47 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:nn180100]((uint64_t)&v195, v47 + 17);
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v195;
      else
        v48 = (std::string *)v195.__r_.__value_.__r.__words[0];
      if (v47)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &__str;
        else
          v49 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v48, v49, v47);
      }
      v50 = (char *)v48 + v47;
      *(_OWORD *)v50 = *(_OWORD *)&v172[16];
      *((_WORD *)v50 + 8) = 50;
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      v197 = v195;
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v197;
      else
        v51 = (std::string *)v197.__r_.__value_.__r.__words[0];
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
      else
        v52 = v197.__r_.__value_.__l.__size_;
      v53 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v51, v52);
      *(_QWORD *)(v53 + 8) = 0xD00000001;
      *(_DWORD *)(v53 + 16) = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v54 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:nn180100]((uint64_t)&v195, v54 + 10);
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = &v195;
      else
        v55 = (std::string *)v195.__r_.__value_.__r.__words[0];
      if (v54)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &__str;
        else
          v56 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v55, v56, v54);
      }
      *(std::string::size_type *)((char *)v55->__r_.__value_.__r.__words + v54) = *(_QWORD *)&v172[8];
      strcpy(&v55->__r_.__value_.__s.__data_[v54 + 8], "32");
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      v197 = v195;
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &v197;
      else
        v57 = (std::string *)v197.__r_.__value_.__r.__words[0];
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
      else
        v58 = v197.__r_.__value_.__l.__size_;
      v59 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v57, v58);
      *(_QWORD *)(v59 + 8) = 0xD00000003;
      *(_DWORD *)(v59 + 16) = 0;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v60 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:nn180100]((uint64_t)&v195, v60 + 9);
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = &v195;
      else
        v61 = (std::string *)v195.__r_.__value_.__r.__words[0];
      if (v60)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v62 = &__str;
        else
          v62 = (std::string *)__str.__r_.__value_.__r.__words[0];
        memmove(v61, v62, v60);
      }
      v63 = (char *)v61 + v60;
      *(_QWORD *)v63 = *(_QWORD *)v172;
      *((_WORD *)v63 + 4) = 50;
      if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v197.__r_.__value_.__l.__data_);
      v197 = v195;
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v197;
      else
        v64 = (std::string *)v197.__r_.__value_.__r.__words[0];
      if ((v195.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = HIBYTE(v195.__r_.__value_.__r.__words[2]);
      else
        v65 = v197.__r_.__value_.__l.__size_;
      v66 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(v64, v65);
      *(_QWORD *)(v66 + 8) = 0xD00000002;
      *(_DWORD *)(v66 + 16) = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v14 = 0;
      v9 = 1;
      v10 = 1;
      v13 = v21;
    }
    while ((v174 & 1) == 0);
    v67 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.add.f32", 0xEuLL);
    *(_QWORD *)(v67 + 8) = 0xB00000000;
    *(_DWORD *)(v67 + 16) = 2;
    v68 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.sub.f32", 0xEuLL);
    *(_QWORD *)(v68 + 8) = 0xC00000000;
    *(_DWORD *)(v68 + 16) = 2;
    v69 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.xchg.f32", 0xFuLL);
    *(_QWORD *)(v69 + 8) = 0;
    *(_DWORD *)(v69 + 16) = 2;
    v70 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.cmpxchg.weak.f32", 0x17uLL);
    *(_QWORD *)(v70 + 8) = 0xD00000001;
    *(_DWORD *)(v70 + 16) = 2;
    v71 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.store.f32", 0x10uLL);
    *(_QWORD *)(v71 + 8) = 0xD00000003;
    *(_DWORD *)(v71 + 16) = 2;
    v72 = *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>("global.load.f32", 0xFuLL);
    *(_QWORD *)(v72 + 8) = 0xD00000002;
    *(_DWORD *)(v72 + 16) = 2;
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);
    v2 = v171;
  }
  Key = llvm::StringMapImpl::FindKey();
  v75 = Key;
  if (Key == -1)
    v75 = dword_1ED838DB0;
  v76 = *(_DWORD **)(AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map + 8 * v75);
  switch(v76[2])
  {
    case 0:
      v77 = *v2;
      v78 = v2[2];
      v79 = v2[3];
      v80 = (_QWORD *)(v78 + 24);
      if (*(_DWORD *)(v78 + 32) >= 0x41u)
        v80 = (_QWORD *)*v80;
      v81 = *(_DWORD *)v80;
      v82 = v81 - 2;
      v83 = v81 + 2;
      if (v82 >= 4)
        v83 = 2;
      LODWORD(v175) = v83;
      v84 = (uint64_t *)v2[1];
      v85 = *(_QWORD *)(a1 + 368);
      v192 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v194 = *(_DWORD *)(a1 + 104);
      v86 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v85 + 64))(v85, &v192, v77, v79);
      if (v193)
        llvm::MetadataTracking::untrack();
      v87 = v76[4];
      if (v87 != 2)
        goto LABEL_165;
      v88 = *(_BYTE **)(a1 + 368);
      if (!v88[1794])
      {
        std::string::basic_string[abi:nn180100]<0>(v190, "Unsupported float atomic operation for given target.");
        if ((v191 & 0x80u) == 0)
          v158 = (const std::string::value_type *)v190;
        else
          v158 = (const std::string::value_type *)v190[0];
        if ((v191 & 0x80u) == 0)
          v159 = v191;
        else
          v159 = v190[1];
        std::string::append((std::string *)(*(_QWORD *)(a1 + 752) + *(_QWORD *)(**(_QWORD **)(a1 + 752) - 24) + 8), v158, v159);
        *(_BYTE *)(a1 + 768) = 0;
        if ((char)v191 < 0)
        {
          v160 = (void *)v190[0];
LABEL_248:
          operator delete(v160);
        }
        return 0;
      }
      if (v88[1796])
      {
        v89 = *(_QWORD **)(a1 + 752);
        if (!v89 || (*((_BYTE *)v89 + *(_QWORD *)(*v89 - 24) + 136) & 1) == 0)
        {
          v187 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
          v189 = *(_DWORD *)(a1 + 104);
          v86 = (*(uint64_t (**)(_BYTE *, __int128 *, uint64_t))(*(_QWORD *)v88 + 72))(v88, &v187, v86);
          if (v188)
            llvm::MetadataTracking::untrack();
        }
      }
      v87 = v76[4];
LABEL_165:
      if (v87 == 1 && !*(_BYTE *)(*(_QWORD *)(a1 + 368) + 1787))
      {
        std::string::basic_string[abi:nn180100]<0>(__p, "Unsupported float atomic operation for given target.");
        if ((v186 & 0x80u) == 0)
          v167 = __p;
        else
          v167 = (void **)__p[0];
        if ((v186 & 0x80u) == 0)
          v168 = v186;
        else
          v168 = (std::string::size_type)__p[1];
        std::string::append((std::string *)(*(_QWORD *)(a1 + 752) + *(_QWORD *)(**(_QWORD **)(a1 + 752) - 24) + 8), (const std::string::value_type *)v167, v168);
        *(_BYTE *)(a1 + 768) = 0;
        if ((char)v186 < 0)
        {
          v160 = __p[0];
          goto LABEL_248;
        }
        return 0;
      }
      AtomicRMW = (llvm::Type **)llvm::IRBuilderBase::CreateAtomicRMW((uint64_t *)(a1 + 8), v76[3], v86, v84);
      setVolatility<llvm::AtomicRMWInst>((uint64_t)AtomicRMW, v171[4]);
      return (uint64_t)AtomicRMW;
    case 1:
      Cast = *v2;
      v91 = v2[1];
      v93 = (uint64_t *)v2[2];
      v94 = (llvm::Type *)*v93;
      v95 = (uint64_t *)(a1 + 8);
      v198 = 257;
      *(_QWORD *)&v172[16] = v91;
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v94, v91, 0, (uint64_t)&v197);
      v174 = *(_QWORD *)(a1 + 168);
      v175 = *v93;
      if (*v93 == v174)
      {
        v97 = llvm::PointerType::get();
        v198 = 257;
        Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, Cast, v97, (uint64_t)&v197);
        v98 = *(_QWORD *)(a1 + 200);
        v198 = 257;
        llvm::IRBuilderBase::CreateCast(a1 + 8, 49, AlignedLoad, v98, (uint64_t)&v197);
        v99 = *(_QWORD *)(a1 + 200);
        v198 = 257;
        v93 = (uint64_t *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v93, v99, (uint64_t)&v197);
      }
      v100 = v2[3];
      v101 = (_QWORD *)(v100 + 24);
      if (*(_DWORD *)(v100 + 32) >= 0x41u)
        v101 = (_QWORD *)*v101;
      v102 = *(_DWORD *)v101;
      if ((v102 - 2) >= 4)
        v103 = 2;
      else
        v103 = v102 + 2;
      v173 = v103;
      v104 = v2[4];
      v105 = (_QWORD *)(v104 + 24);
      if (*(_DWORD *)(v104 + 32) >= 0x41u)
        v105 = (_QWORD *)*v105;
      v106 = *(_DWORD *)v105;
      v107 = v106 - 2;
      v108 = v106 + 2;
      if (v107 >= 4)
        v109 = 2;
      else
        v109 = v108;
      *(_DWORD *)&v172[32] = v109;
      v110 = v2[5];
      v111 = *(_QWORD *)(a1 + 368);
      v182 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v184 = *(_DWORD *)(a1 + 104);
      (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v111 + 64))(v111, &v182, Cast, v110);
      if (v183)
        llvm::MetadataTracking::untrack();
      Module = (llvm::Module *)llvm::BasicBlock::getModule(*(llvm::BasicBlock **)(a1 + 56));
      DataLayout = llvm::Module::getDataLayout(Module);
      llvm::DataLayout::getTypeSizeInBits(DataLayout, *v93);
      v197.__r_.__value_.__r.__words[0] = (unint64_t)(v114 + 7) >> 3;
      v197.__r_.__value_.__l.__size_ = v115 == 1;
      llvm::TypeSize::operator unsigned long long();
      v116 = llvm::User::operator new((llvm::User *)0x40);
      llvm::AtomicCmpXchgInst::AtomicCmpXchgInst();
      v198 = 257;
      (*(void (**)(_QWORD, uint64_t, std::string *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), v116, &v197, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
      v117 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v117)
      {
        v118 = *(_QWORD *)(a1 + 8);
        v119 = v118 + 16 * v117;
        do
        {
          llvm::Instruction::setMetadata();
          v118 += 16;
        }
        while (v118 != v119);
      }
      v120 = v171[6];
      if (v120 && *(_BYTE *)(v120 + 16) == 16)
      {
        v121 = (llvm::APInt *)(v120 + 24);
        v122 = *(_DWORD *)(v120 + 32);
        if (v122 > 0x40)
          v123 = llvm::APInt::countLeadingZerosSlowCase(v121) == v122;
        else
          v123 = *(_QWORD *)v121 == 0;
        v165 = v123;
        *(_WORD *)(v116 + 18) = *(_WORD *)(v116 + 18) & 0xFFFE | v165 ^ 1;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 0;
      v198 = 257;
      AtomicRMW = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue((uint64_t)v95, v116, (uint64_t)&__str, 1, (uint64_t)&v197);
      if (v175 == v174)
      {
        v166 = *(_QWORD *)(a1 + 168);
        v198 = 257;
        AtomicRMW = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v95, 49, (uint64_t)AtomicRMW, v166, (uint64_t)&v197);
      }
      llvm::IRBuilderBase::CreateAlignedStore(v95, AtomicRMW, *(uint64_t *)&v172[16], 0);
      return (uint64_t)AtomicRMW;
    case 2:
      v124 = *v2;
      v125 = *(llvm::Type **)(a1 + 72);
      if (v76[4])
        FloatTy = (llvm::Type *)llvm::Type::getFloatTy(v125, v74);
      else
        FloatTy = (llvm::Type *)llvm::Type::getInt32Ty(v125, v74);
      v144 = v2[1];
      v145 = v2[2];
      v146 = (_QWORD *)(v144 + 24);
      if (*(_DWORD *)(v144 + 32) >= 0x41u)
        v146 = (_QWORD *)*v146;
      v147 = *(_DWORD *)v146 - 2;
      if (v147 >= 4)
        v148 = 256;
      else
        v148 = ((_WORD)v147 << 7) + 512;
      v149 = (_QWORD *)(v145 + 24);
      if (*(_DWORD *)(v145 + 32) >= 0x41u)
        v149 = (_QWORD *)*v149;
      v150 = (*(_DWORD *)v149 - 1) < 2;
      v151 = *(_DWORD *)(*(_QWORD *)v124 + 8);
      if ((v151 & 0xFE) == 0x12)
        v151 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v124 + 16) + 8);
      v152 = (llvm::IRBuilderBase *)(a1 + 8);
      if ((v151 & 0xFFFFFF00) == 0x300)
      {
        v198 = 257;
        AtomicRMW = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), FloatTy, v124, 0, (uint64_t)&v197);
        setVolatility<llvm::AtomicRMWInst>((uint64_t)AtomicRMW, v171[3]);
      }
      else
      {
        v153 = *(_QWORD *)(a1 + 368);
        v179 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(v152);
        v181 = *(_DWORD *)(a1 + 104);
        v154 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v153 + 64))(v153, &v179, v124, v145);
        v155 = v180;
        if (v180)
          llvm::MetadataTracking::untrack();
        v156 = *(llvm::Type **)(a1 + 72);
        if (v76[4])
          Int32Ty = llvm::Type::getFloatTy(v156, v155);
        else
          Int32Ty = llvm::Type::getInt32Ty(v156, v155);
        v161 = Int32Ty;
        if (Int32Ty == *(_QWORD *)(a1 + 168))
        {
          v163 = llvm::PointerType::get();
          v198 = 257;
          v154 = llvm::IRBuilderBase::CreateCast((uint64_t)v152, 49, v154, v163, (uint64_t)&v197);
          v162 = *(llvm::Type **)(a1 + 200);
        }
        else
        {
          v162 = (llvm::Type *)Int32Ty;
        }
        v198 = 257;
        v164 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v152, v162, v154, 0, (uint64_t)&v197);
        *(_WORD *)(v164 + 18) = *(_WORD *)(v164 + 18) & 0xFC7F | v148;
        *(_BYTE *)(v164 + 60) = v150;
        setVolatility<llvm::AtomicRMWInst>(v164, v171[3]);
        v198 = 257;
        return llvm::IRBuilderBase::CreateCast((uint64_t)v152, 49, v164, v161, (uint64_t)&v197);
      }
      return (uint64_t)AtomicRMW;
    case 3:
      v127 = *v2;
      v128 = v2[3];
      v129 = (uint64_t *)v2[1];
      v130 = *(_DWORD *)(*(_QWORD *)*v2 + 8);
      if ((v130 & 0xFE) == 0x12)
        v130 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v127 + 16) + 8);
      if ((v130 & 0xFFFFFF00) != 0x300)
      {
        v137 = *(_QWORD *)(a1 + 368);
        v138 = a1;
        v139 = (llvm::IRBuilderBase *)(a1 + 8);
        v176 = *(_OWORD *)(v138 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(v139);
        v178 = *(_DWORD *)(v138 + 104);
        v140 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v137 + 64))(v137, &v176, v127, v128);
        if (v177)
          llvm::MetadataTracking::untrack();
        if (*v129 == *(_QWORD *)(v138 + 168))
        {
          v141 = llvm::PointerType::get();
          v198 = 257;
          v140 = llvm::IRBuilderBase::CreateCast((uint64_t)v139, 49, v140, v141, (uint64_t)&v197);
          v142 = *(_QWORD *)(v138 + 200);
          v198 = 257;
          v129 = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v139, 49, (uint64_t)v129, v142, (uint64_t)&v197);
        }
        v143 = llvm::IRBuilderBase::CreateAtomicRMW((uint64_t *)v139, 0, v140, v129);
        setVolatility<llvm::AtomicRMWInst>(v143, v171[4]);
        return 0;
      }
      AlignedStore = llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)v2[1], *v2, 0);
      v132 = v2[4];
      if (!v132 || *(_BYTE *)(v132 + 16) != 16)
        return 0;
      v133 = AlignedStore;
      v134 = (llvm::APInt *)(v132 + 24);
      v135 = *(_DWORD *)(v132 + 32);
      if (v135 > 0x40)
        v136 = llvm::APInt::countLeadingZerosSlowCase(v134) == v135;
      else
        v136 = *(_QWORD *)v134 == 0;
      v170 = v136;
      AtomicRMW = 0;
      *(_WORD *)(v133 + 18) = *(_WORD *)(v133 + 18) & 0xFFFE | v170 ^ 1;
      return (uint64_t)AtomicRMW;
    default:
      return 0;
  }
}

uint64_t AGCLLVMAirBuiltins::buildQuadBroadcast()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffle()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleUp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleDown()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleXor()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleRotateUp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadShuffleRotateDown()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadBallot()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdBroadcast()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffle()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleUp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleDown()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleXor()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleRotateUp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdShuffleRotateDown()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdBallot()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdActiveThreadsMask()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadActiveThreadsMask(AGCLLVMAirBuiltins *this)
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdAll()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdAny()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadAll()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadAny()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdVoteAll()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdVoteAny()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadVoteAll()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildQuadVoteAny()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdYield()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetThreadPositionInGrid()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetPosition()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetSampleID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetVertexID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetInstanceID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetAmplificationID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetPatchID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGetRenderTargetArrayIndex()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildWGBarrier()
{
  return 0;
}

llvm::Value *AGCLLVMAirBuiltins::buildSimdBarrier(uint64_t a1)
{
  uint64_t v2;
  uint64_t inserted;
  _BYTE v5[32];
  __int16 v6;

  v2 = *(_QWORD *)(a1 + 368);
  if (*(_QWORD *)(v2 + 952))
    strlen(*(const char **)(v2 + 952));
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v6 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v5);
}

uint64_t AGCLLVMAirBuiltins::buildQuadElement()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildThreadsPerSimdgroup()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildThreadIndexInSimdGroup()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdGroupIndexInThreadgroup()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildCoordinateWarp()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildCoordinateDewarp()
{
  return 0;
}

uint64_t llvm::IRBuilderBase::CreateAtomicRMW(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  llvm::Module *Module;
  uint64_t DataLayout;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  __int16 v16;

  Module = (llvm::Module *)llvm::BasicBlock::getModule((llvm::BasicBlock *)a1[6]);
  DataLayout = llvm::Module::getDataLayout(Module);
  llvm::DataLayout::getTypeSizeInBits(DataLayout, *a4);
  v15[0] = (unint64_t)(v8 + 7) >> 3;
  v15[1] = v9 == 1;
  llvm::TypeSize::operator unsigned long long();
  v10 = llvm::User::operator new((llvm::User *)0x40);
  llvm::AtomicRMWInst::AtomicRMWInst();
  v16 = 257;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v10, v15, a1[6], a1[7]);
  v11 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v11)
  {
    v12 = *a1;
    v13 = v12 + 16 * v11;
    do
    {
      llvm::Instruction::setMetadata();
      v12 += 16;
    }
    while (v12 != v13);
  }
  return v10;
}

uint64_t setVolatility<llvm::AtomicRMWInst>(uint64_t a1, uint64_t a2)
{
  llvm::APInt *v3;
  unsigned int v4;
  BOOL v5;
  __int16 v6;

  if (a2 && *(_BYTE *)(a2 + 16) == 16)
  {
    v3 = (llvm::APInt *)(a2 + 24);
    v4 = *(_DWORD *)(a2 + 32);
    if (v4 > 0x40)
      v5 = llvm::APInt::countLeadingZerosSlowCase(v3) == v4;
    else
      v5 = *(_QWORD *)v3 == 0;
    v6 = v5;
    *(_WORD *)(a1 + 18) = *(_WORD *)(a1 + 18) & 0xFFFE | v6 ^ 1;
  }
  return a1;
}

uint64_t llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 25));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *llvm::StringMap<AGCLLVMAirBuiltins::AtomicFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1ED838DB8) = qword_1ED838DB8 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 25, 8);
  v9 = v8;
  v10 = v8 + 24;
  if (a2)
    memcpy((void *)(v8 + 24), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  *i = v9;
  ++dword_1ED838DB4;
  for (i = (uint64_t *)(AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirBuiltins::initializeAtomicMap(void)::atomic_map));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::IRBuilderBase::CreateFPToSI(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 42, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t llvm::IRBuilderBase::CreateSIToFP(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Type *a3, const llvm::Twine *a4)
{
  if (*((_BYTE *)this + 100))
    return llvm::IRBuilderBase::CreateConstrainedFPCast();
  else
    return llvm::IRBuilderBase::CreateCast((uint64_t)this, 44, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

llvm::Value *AGCLLVMAirBuiltins::buildPowr(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _WORD v10[20];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 19))
  {
    v8 = "llvm.agx.powr.f16";
LABEL_6:
    v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v8, 17, v6, v6, v6);
    goto LABEL_7;
  }
  if (v6 == *((_QWORD *)this + 21))
  {
    v8 = "llvm.agx.powr.f32";
    goto LABEL_6;
  }
  v7 = 0;
LABEL_7:
  v11[0] = a2;
  v11[1] = a3;
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v7 + 24), v7, (uint64_t)v11, 2, (uint64_t)v10);
}

uint64_t llvm::IRBuilderBase::CreateFNeg(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;

  if (!a2 || *(unsigned __int8 *)(a2 + 16) > 0x14u)
  {
    v5 = llvm::UnaryOperator::Create();
    llvm::IRBuilderBase::setFPAttrs(a1, v5);
LABEL_9:
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)a1, v5, a3);
    return v5;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 200))(*(_QWORD *)(a1 + 72));
  if (v5)
    v6 = *(unsigned __int8 *)(v5 + 16) >= 0x1Cu;
  else
    v6 = 0;
  if (v6)
    goto LABEL_9;
  return v5;
}

llvm::Value *AGCLLVMTargetBuilder::CreateFloor(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *((_QWORD *)this + 46);
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMTargetBuilder *)((char *)this + 8));
  v5 = *((_DWORD *)this + 26);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.floor");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

llvm::Value *AGCLLVMTargetBuilder::CreateSqrt(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *((_QWORD *)this + 46);
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMTargetBuilder *)((char *)this + 8));
  v5 = *((_DWORD *)this + 26);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.sqrt");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

void AGCLLVMAirBuiltinsGen2::~AGCLLVMAirBuiltinsGen2(AGCLLVMAirBuiltinsGen2 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMAirBuiltinsGen2::buildArctan(AGCLLVMAirBuiltinsGen2 *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t Select;
  llvm::Value *FMul;
  llvm::Value *v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;

  v4 = llvm::ConstantFP::get();
  AGCLLVMTargetBuilder::CreateFabs(this, a2);
  llvm::IRBuilderBase::CreateFCmpHelper();
  v14 = 257;
  llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, (uint64_t)a2, (uint64_t)v13);
  Select = llvm::IRBuilderBase::CreateSelect();
  v14 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, Select, Select, (uint64_t)v13);
  v7 = (llvm::Value *)llvm::ConstantFP::get();
  v8 = 4u;
  do
  {
    v9 = (llvm::Value *)llvm::ConstantFP::get();
    v7 = AGCLLVMBuilder::buildFma(this, v7, FMul, v9);
    v8 += 4;
  }
  while (v8 != 32);
  v14 = 257;
  v10 = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, Select, (uint64_t)v7, (uint64_t)v13);
  llvm::ConstantFP::get();
  v14 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  v14 = 257;
  v11 = llvm::IRBuilderBase::CreateSelect();
  v14 = 257;
  llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v11, v10, (uint64_t)v13);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::User *AGCLLVMAirBuiltinsGen2::buildArccos(AGCLLVMAirBuiltinsGen2 *this, llvm::Value *a2)
{
  llvm::Value *Fabs;
  llvm::IRBuilderBase *v4;
  uint64_t FCmpHelper;
  uint64_t v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  llvm::BasicBlock *v9;
  uint64_t v10;
  llvm::Instruction *v11;
  uint64_t v12;
  llvm::Instruction *v13;
  llvm::Value *FMul;
  llvm::Instruction *v15;
  llvm::Value *FNeg;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Instruction *v20;
  uint64_t Select;
  llvm::Value *v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm::Value *v25;
  llvm::Instruction *v26;
  llvm::Instruction *v27;
  uint64_t v28;
  llvm::Instruction *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  uint64_t FirstInsertionPt;
  llvm::Type *v35;
  llvm::User *PHI;
  llvm::Instruction *v38;
  _BYTE v40[32];
  __int16 v41;
  _QWORD v42[4];
  __int16 v43;

  Fabs = AGCLLVMTargetBuilder::CreateFabs(this, a2);
  v4 = (AGCLLVMAirBuiltinsGen2 *)((char *)this + 8);
  llvm::ConstantFP::get();
  v43 = 257;
  FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
  v6 = *((_QWORD *)this + 7);
  v7 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v8 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v42[0] = "gt_point_7";
  v43 = 259;
  v9 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v10 = *(_QWORD *)(v6 + 40);
  if (v10 == v6 + 40)
  {
    v13 = 0;
  }
  else
  {
    v11 = (llvm::Instruction *)(v10 - 24);
    if (v10)
      v12 = v10 - 24;
    else
      v12 = 0;
    if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB)
      v13 = 0;
    else
      v13 = v11;
  }
  llvm::Instruction::eraseFromParent(v13);
  *((_QWORD *)this + 7) = v6;
  *((_QWORD *)this + 8) = v6 + 40;
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)this + 1, FCmpHelper, (uint64_t)v8, (uint64_t)v9);
  *((_QWORD *)this + 7) = v8;
  *((_QWORD *)this + 8) = (char *)v8 + 40;
  v43 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)Fabs, (uint64_t)Fabs, (uint64_t)v42);
  v15 = AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare(this, FMul);
  v43 = 257;
  FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)v15, (uint64_t)v42);
  v17 = (llvm::Value *)llvm::ConstantFP::get();
  v38 = AGCLLVMBuilder::buildFma(this, FNeg, a2, v17);
  llvm::IRBuilderBase::CreateBr((AGCLLVMAirBuiltinsGen2 *)((char *)this + 8), v7);
  *((_QWORD *)this + 7) = v9;
  *((_QWORD *)this + 8) = (char *)v9 + 40;
  v18 = (llvm::Value *)llvm::ConstantFP::get();
  v19 = (llvm::Value *)llvm::ConstantFP::get();
  v20 = AGCLLVMBuilder::buildFma(this, v18, Fabs, v19);
  AGCLLVMTargetBuilder::CreateRsqrt(this, v20);
  llvm::ConstantFP::get();
  AGCLLVMTargetBuilder::CreateFabs(this, v20);
  v43 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  Select = llvm::IRBuilderBase::CreateSelect();
  v43 = 257;
  v22 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)v20, Select, (uint64_t)v42);
  v23 = llvm::ConstantFP::get();
  v43 = 257;
  v24 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, Select, v23, (uint64_t)v42);
  v25 = (llvm::Value *)llvm::ConstantFP::get();
  v26 = AGCLLVMBuilder::buildFma(this, v24, v22, v25);
  v27 = AGCLLVMBuilder::buildFma(this, v22, v26, v22);
  v28 = llvm::ConstantFP::get();
  v29 = AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare(this, v20);
  v43 = 257;
  v30 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v28, (uint64_t)v29, (uint64_t)v42);
  llvm::ConstantFP::get();
  v43 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v43 = 257;
  v31 = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)v27, (uint64_t)v42);
  v32 = (llvm::Value *)llvm::ConstantFP::get();
  AGCLLVMBuilder::buildFma(this, v31, v30, v32);
  v41 = 257;
  llvm::IRBuilderBase::CreateFMul((uint64_t)v4, (uint64_t)v30, (uint64_t)v27, (uint64_t)v40);
  v33 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  llvm::IRBuilderBase::CreateBr(v4, v7);
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v7);
  llvm::IRBuilderBase::SetInsertPoint((uint64_t)v4, (uint64_t)v7, FirstInsertionPt);
  v35 = *(llvm::Type **)a2;
  v43 = 257;
  PHI = llvm::IRBuilderBase::CreatePHI(v4, v35, 2, (const llvm::Twine *)v42);
  llvm::PHINode::addIncoming(PHI, v38, v8);
  llvm::PHINode::addIncoming(PHI, v33, v9);
  return PHI;
}

uint64_t AGCLLVMAirBuiltinsGen2::buildArcsin(AGCLLVMAirBuiltinsGen2 *this, llvm::Value *a2)
{
  llvm::Value *Fabs;
  uint64_t FCmpHelper;
  uint64_t v5;
  llvm::BasicBlock *v6;
  llvm::BasicBlock *v7;
  llvm::BasicBlock *v8;
  uint64_t v9;
  llvm::Instruction *v10;
  uint64_t v11;
  llvm::Instruction *v12;
  llvm::Value *FMul;
  llvm::Instruction *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Instruction *v18;
  llvm::Value *Sqrt;
  llvm::Instruction *v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Instruction *v24;
  uint64_t FirstInsertionPt;
  llvm::Type *v26;
  llvm::User *PHI;
  _QWORD v30[4];
  __int16 v31;

  Fabs = AGCLLVMTargetBuilder::CreateFabs(this, a2);
  llvm::ConstantFP::get();
  v31 = 257;
  FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper();
  v5 = *((_QWORD *)this + 7);
  v6 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v7 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v30[0] = "gt_point_7";
  v31 = 259;
  v8 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v9 = *(_QWORD *)(v5 + 40);
  if (v9 == v5 + 40)
  {
    v12 = 0;
  }
  else
  {
    v10 = (llvm::Instruction *)(v9 - 24);
    if (v9)
      v11 = v9 - 24;
    else
      v11 = 0;
    if (*(unsigned __int8 *)(v11 + 16) - 29 >= 0xB)
      v12 = 0;
    else
      v12 = v10;
  }
  llvm::Instruction::eraseFromParent(v12);
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 8) = v5 + 40;
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)this + 1, FCmpHelper, (uint64_t)v7, (uint64_t)v8);
  *((_QWORD *)this + 7) = v7;
  *((_QWORD *)this + 8) = (char *)v7 + 40;
  v31 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)Fabs, (uint64_t)Fabs, (uint64_t)v30);
  v14 = AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare(this, FMul);
  v31 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)Fabs, (uint64_t)v14, (uint64_t)v30);
  llvm::IRBuilderBase::CreateBr((AGCLLVMAirBuiltinsGen2 *)((char *)this + 8), v6);
  *((_QWORD *)this + 7) = v8;
  *((_QWORD *)this + 8) = (char *)v8 + 40;
  v16 = (llvm::Value *)llvm::ConstantFP::get();
  v17 = (llvm::Value *)llvm::ConstantFP::get();
  v18 = AGCLLVMBuilder::buildFma(this, v16, Fabs, v17);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, v18);
  v20 = AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare(this, v18);
  v21 = llvm::ConstantFP::get();
  v31 = 257;
  v22 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v21, (uint64_t)Sqrt, (uint64_t)v30);
  v23 = (llvm::Value *)llvm::ConstantFP::get();
  v24 = AGCLLVMBuilder::buildFma(this, v22, v20, v23);
  llvm::IRBuilderBase::CreateBr((AGCLLVMAirBuiltinsGen2 *)((char *)this + 8), v6);
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v6);
  llvm::IRBuilderBase::SetInsertPoint((uint64_t)this + 8, (uint64_t)v6, FirstInsertionPt);
  v26 = *(llvm::Type **)a2;
  v31 = 257;
  PHI = llvm::IRBuilderBase::CreatePHI((AGCLLVMAirBuiltinsGen2 *)((char *)this + 8), v26, 2, (const llvm::Twine *)v30);
  llvm::PHINode::addIncoming(PHI, v15, v7);
  llvm::PHINode::addIncoming(PHI, v24, v8);
  llvm::ConstantFP::get();
  v31 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v31 = 257;
  llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)PHI, (uint64_t)v30);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Instruction *AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare(AGCLLVMAirBuiltinsGen2 *this, llvm::Value *a2)
{
  llvm::Value *v4;
  uint64_t v5;
  llvm::Value *v6;
  llvm::Instruction *result;

  v4 = (llvm::Value *)llvm::ConstantFP::get();
  v5 = 4u;
  do
  {
    v6 = (llvm::Value *)llvm::ConstantFP::get();
    result = AGCLLVMBuilder::buildFma(this, v4, a2, v6);
    v4 = result;
    v5 += 4;
  }
  while (v5 != 28);
  return result;
}

llvm::Value *AGCLLVMTargetBuilder::CreateRsqrt(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *((_QWORD *)this + 46);
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMTargetBuilder *)((char *)this + 8));
  v5 = *((_DWORD *)this + 26);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.rsqrt");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

void AGCLLVMAirBuiltinsGen3::~AGCLLVMAirBuiltinsGen3(AGCLLVMAirBuiltinsGen3 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildPackNorm(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v6 = *(_QWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v11 = *(_DWORD *)(a1 + 104);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 88))(v6, &v9, a2, a3[1], a3[3], a3[2]);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildUnpackNorm(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v6 = *(_QWORD *)(a1 + 368);
  v9 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v11 = *(_DWORD *)(a1 + 104);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 96))(v6, &v9, a2, a3[1], a3[3], *a3);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildPackSRGB(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *((_QWORD *)this + 46);
  v5 = (char *)this + 8;
  v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v13 = *((_DWORD *)this + 26);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, _QWORD, _QWORD))(*(_QWORD *)v4 + 144))(v4, &v11, a2, 0, *((_QWORD *)this + 37));
  if (v12)
    llvm::MetadataTracking::untrack();
  v7 = *((_QWORD *)this + 25);
  v10 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v5, 49, v6, v7, (uint64_t)v9);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildUnpackSRGB(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Cast;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;
  _BYTE v17[32];
  __int16 v18;

  if (a4 > 4)
  {
    v6 = bswap32(*(_DWORD *)(a3 + a4 - 5));
    if (v6 == 1983145521)
    {
      v7 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
    }
    else if (v6 < 0x76346631)
    {
      v7 = -1;
    }
    else
    {
      v7 = 1;
    }
    if (v7)
      v5 = (uint64_t *)(a1 + 288);
    else
      v5 = (uint64_t *)(a1 + 280);
  }
  else
  {
    v5 = (uint64_t *)(a1 + 288);
  }
  v8 = *v5;
  v9 = *(_QWORD *)(a1 + 296);
  v18 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a2, v9, (uint64_t)v17);
  v11 = *(_QWORD *)(a1 + 368);
  v14 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v16 = *(_DWORD *)(a1 + 104);
  v12 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 152))(v11, &v14, Cast, 0, v8);
  if (v15)
    llvm::MetadataTracking::untrack();
  return v12;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildCoherentLoad(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  v20 = a4;
  v21 = a5;
  v22 = v24;
  v23 = 0x400000000;
  llvm::StringRef::split();
  v8 = v24[3] == 8 && **((_QWORD **)v22 + 2) == 0x656C6974616C6F76;
  if (*((_QWORD *)v22 + 1) == 15)
  {
    v9 = 0x6465766963655F63;
    v10 = bswap64(**(_QWORD **)v22);
    if (v10 == 0x6465766963655F63
      && (v9 = 0x636F686572656E74, v10 = bswap64(*(_QWORD *)(*(_QWORD *)v22 + 7)), v10 == 0x636F686572656E74))
    {
      v11 = 0;
    }
    else if (v10 < v9)
    {
      v11 = -1;
    }
    else
    {
      v11 = 1;
    }
    if (v11)
      v12 = 3;
    else
      v12 = 2;
  }
  else
  {
    v12 = 3;
  }
  v13 = *(_QWORD *)(a1 + 368);
  v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v19 = *(_DWORD *)(a1 + 104);
  v14 = 16;
  if (v8)
    v14 = 32;
  v15 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _BOOL8))(*(_QWORD *)v13 + 424))(v13, &v17, *a3, a2, *(_QWORD *)((char *)v22 + v14), *(_QWORD *)((char *)v22 + v14 + 8), v12, v8);
  if (v18)
    llvm::MetadataTracking::untrack();
  if (v22 != v24)
    free(v22);
  return v15;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildCoherentStore(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v18 = a3;
  v19 = a4;
  v20 = v22;
  v21 = 0x400000000;
  llvm::StringRef::split();
  v6 = v22[3] == 8 && **((_QWORD **)v20 + 2) == 0x656C6974616C6F76;
  if (*((_QWORD *)v20 + 1) == 15)
  {
    v7 = 0x6465766963655F63;
    v8 = bswap64(**(_QWORD **)v20);
    if (v8 == 0x6465766963655F63
      && (v7 = 0x636F686572656E74, v8 = bswap64(*(_QWORD *)(*(_QWORD *)v20 + 7)), v8 == 0x636F686572656E74))
    {
      v9 = 0;
    }
    else if (v8 < v7)
    {
      v9 = -1;
    }
    else
    {
      v9 = 1;
    }
    if (v9)
      v10 = 3;
    else
      v10 = 2;
  }
  else
  {
    v10 = 3;
  }
  v11 = *(_QWORD *)(a1 + 368);
  v15 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v17 = *(_DWORD *)(a1 + 104);
  v12 = 16;
  if (v6)
    v12 = 32;
  v13 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _BOOL8))(*(_QWORD *)v11 + 432))(v11, &v15, a2[1], *a2, *(_QWORD *)((char *)v20 + v12), *(_QWORD *)((char *)v20 + v12 + 8), v10, v6);
  if (v16)
    llvm::MetadataTracking::untrack();
  if (v20 != v22)
    free(v20);
  return v13;
}

llvm::Value *AGCLLVMAirBuiltinsGen3::buildAtomic(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _WORD v16[20];
  _BYTE v17[32];
  __int16 v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  if (a4 != 5)
    return (llvm::Value *)AGCLLVMAirBuiltins::buildAtomic((uint64_t)a1, a2);
  if (*(_DWORD *)a3 != 1668179302 || *(_BYTE *)(a3 + 4) != 101)
    return (llvm::Value *)AGCLLVMAirBuiltins::buildAtomic((uint64_t)a1, a2);
  v8 = a1[46];
  v9 = *(_QWORD *)(v8 + 960);
  if (v9)
    v10 = strlen(*(const char **)(v8 + 960));
  else
    v10 = 0;
  v11 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, v9, v10, a1[18], a1[24], a1[24], a1[24]);
  v19[0] = AGCLLVMAirBuiltinsGen3::remapAIRMemoryFlags((AGCLLVMAirBuiltinsGen3 *)a1, (llvm::Value *)*a2);
  v12 = a2[1];
  v13 = a1[24];
  v18 = 257;
  v19[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v12, v13, (uint64_t)v17);
  v14 = a2[2];
  v15 = a1[24];
  v16[16] = 257;
  v19[2] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v14, v15, (uint64_t)v16);
  v18 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v11 + 24), v11, (uint64_t)v19, 3, (uint64_t)v17);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadBroadcast(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  char **v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  v7 = (char **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = AGCLLVMGen3TargetLowerer::buildQuadBroadcast(v7, (uint64_t)&v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffle(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  char **v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  v7 = (char **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = AGCLLVMGen3TargetLowerer::buildQuadShuffle(v7, (uint64_t)&v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleUp(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1560))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleDown(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1568))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleXor(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  char **v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  v7 = (char **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = AGCLLVMGen3TargetLowerer::buildQuadShuffleXor(v7, (uint64_t)&v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleRotateUp(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v8 = *((_DWORD *)this + 26);
  v13 = v8;
  v14 = v11;
  v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    v8 = v13;
  }
  v16 = v8;
  v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 4, 4);
  if (v15)
    llvm::MetadataTracking::untrack();
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadShuffleRotateDown(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v8 = *((_DWORD *)this + 26);
  v13 = v8;
  v14 = v11;
  v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    v8 = v13;
  }
  v16 = v8;
  v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 5, 4);
  if (v15)
    llvm::MetadataTracking::untrack();
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadBallot(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v3 = *((_QWORD *)this + 94);
  if (v3)
    *(_BYTE *)(v3 + 16) = 1;
  v4 = (*(uint64_t (**)(_QWORD, llvm::Value *))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46), a2);
  v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v9 = *((_DWORD *)this + 26);
  v5 = AGCLLVMGen3TargetLowerer::buildQuadBallot(v4, &v7);
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdBroadcast(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v8 = *((_DWORD *)this + 26);
  v13 = v8;
  v14 = v11;
  v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    v8 = v13;
  }
  v16 = v8;
  v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 0, *(_DWORD *)(v7 + 872));
  if (v15)
    llvm::MetadataTracking::untrack();
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffle(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v8 = *((_DWORD *)this + 26);
  v13 = v8;
  v14 = v11;
  v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    v8 = v13;
  }
  v16 = v8;
  v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 0, *(_DWORD *)(v7 + 872));
  if (v15)
    llvm::MetadataTracking::untrack();
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleUp(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1576))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleDown(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1584))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleXor(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v8 = *((_DWORD *)this + 26);
  v13 = v8;
  v14 = v11;
  v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    v8 = v13;
  }
  v16 = v8;
  v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 3, *(_DWORD *)(v7 + 872));
  if (v15)
    llvm::MetadataTracking::untrack();
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleRotateUp(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v8 = *((_DWORD *)this + 26);
  v13 = v8;
  v14 = v11;
  v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    v8 = v13;
  }
  v16 = v8;
  v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 4, *(_DWORD *)(v7 + 872));
  if (v15)
    llvm::MetadataTracking::untrack();
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdShuffleRotateDown(AGCLLVMAirBuiltinsGen3 *this, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v8 = *((_DWORD *)this + 26);
  v13 = v8;
  v14 = v11;
  v15 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    v8 = v13;
  }
  v16 = v8;
  v9 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v7, (uint64_t)&v14, a2, a3, 5, *(_DWORD *)(v7 + 872));
  if (v15)
    llvm::MetadataTracking::untrack();
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdBallot(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v7 = *(_QWORD *)(a1 + 752);
  if (v7)
    *(_BYTE *)(v7 + 17) = 1;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v15 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v17 = *(_DWORD *)(a1 + 104);
  v9 = AGCLLVMGen3TargetLowerer::buildSimdBallot(v8, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  if (a4 > 2 && *(_WORD *)(a3 + a4 - 3) == 13929 && *(_BYTE *)(a3 + a4 - 1) == 52)
  {
    v11 = *(_QWORD *)(a1 + 208);
    v14 = 257;
    return llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v9, v11, (uint64_t)v13);
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdActiveThreadsMask(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  v7 = *(_QWORD *)(a1 + 752);
  if (v7)
    *(_BYTE *)(v7 + 17) = 1;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v18 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v9 = *(_DWORD *)(a1 + 104);
  v20 = v9;
  v14 = v18;
  v15 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track();
    v9 = v20;
  }
  v16 = v9;
  llvm::ConstantInt::get();
  v10 = AGCLLVMGen3TargetLowerer::buildSimdBallot(v8, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  if (v19)
    llvm::MetadataTracking::untrack();
  if (a4 > 2 && *(_WORD *)(a3 + a4 - 3) == 13929 && *(_BYTE *)(a3 + a4 - 1) == 52)
  {
    v12 = *(_QWORD *)(a1 + 208);
    v17 = 257;
    return llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v10, v12, (uint64_t)&v14);
  }
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadActiveThreadsMask(AGCLLVMAirBuiltinsGen3 *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  v2 = *((_QWORD *)this + 94);
  if (v2)
    *(_BYTE *)(v2 + 16) = 1;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
  v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen3 *)((char *)this + 8));
  v4 = *((_DWORD *)this + 26);
  v9 = v4;
  v10 = v7;
  v11 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track();
    v4 = v9;
  }
  v12 = v4;
  llvm::ConstantInt::get();
  v5 = AGCLLVMGen3TargetLowerer::buildQuadBallot(v3, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadReduce(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::Type **v6;
  char *Name;
  size_t v8;
  AGCLLVMAirBuiltinsGen3 *Prefix;
  int Key;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  __int128 v18;
  uint64_t v19;
  int v20;
  char *v21;
  unint64_t v22;
  char *v23[2];
  __int128 v24;
  uint64_t v25;
  int v26;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 16) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = *((_QWORD *)a2 - 4);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *((_QWORD *)a2 + 9))
    v5 = 0;
  v6 = (llvm::Type **)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  Name = (char *)llvm::Value::getName((llvm::Value *)v5);
  v23[0] = 0;
  v23[1] = 0;
  v21 = 0;
  v22 = 0;
  Prefix = (AGCLLVMAirBuiltinsGen3 *)AGCLLVMBuilder::findPrefix(Name, v8, v23, &v21, "air.", 4uLL);
  AGCLLVMAirBuiltinsGen3::initializeReduceMap(Prefix);
  Key = llvm::StringMapImpl::FindKey();
  v11 = Key;
  if (Key == -1)
    v11 = dword_1EF8E8FE8;
  v12 = *(_QWORD *)(AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map + 8 * v11);
  v13 = v22 >= 2 && *(unsigned __int16 *)v21 == 11891;
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v18 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v15 = *(_DWORD *)(a1 + 104);
  v20 = v15;
  v16 = *(_DWORD *)(v12 + 8);
  v24 = v18;
  v25 = v19;
  if (v19)
  {
    llvm::MetadataTracking::track();
    v15 = v20;
  }
  v26 = v15;
  AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(v14, (uint64_t)&v24, v6, v16, v13);
  if (v25)
    llvm::MetadataTracking::untrack();
  if (v19)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadIsFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm::Type **v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 16) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v6 = *(_DWORD *)(a1 + 104);
  v12 = v6;
  v18 = v10;
  v19 = v11;
  if (v11)
  {
    llvm::MetadataTracking::track();
    v6 = v12;
  }
  v20 = v6;
  v7 = (llvm::Type **)AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v18, *(_QWORD *)(v5 + 192));
  if (v19)
    llvm::MetadataTracking::untrack();
  v15 = v10;
  v16 = v11;
  if (v11)
    llvm::MetadataTracking::track();
  v17 = v12;
  v8 = AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(v5, (uint64_t)&v15, v7, 6u, 0);
  if (v16)
    llvm::MetadataTracking::untrack();
  v14 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(v5 + 8), 32, v7, v8, (uint64_t)v13);
  if (v11)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadBroadcastFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  llvm::Type **v5;
  uint64_t v6;
  int v7;
  llvm::Type **v8;
  llvm::Value *v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 16) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = (llvm::Type **)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v7 = *(_DWORD *)(a1 + 104);
  v13 = v7;
  v20 = v11;
  v21 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    v7 = v13;
  }
  v22 = v7;
  v8 = (llvm::Type **)AGCLLVMGen3TargetLowerer::buildQuadElement(v6, (uint64_t)&v20, *(_QWORD *)(v6 + 192));
  if (v21)
    llvm::MetadataTracking::untrack();
  v17 = v11;
  v18 = v12;
  if (v12)
    llvm::MetadataTracking::track();
  v19 = v13;
  v9 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(v6, (uint64_t)&v17, v8, 6u, 0);
  if (v18)
    llvm::MetadataTracking::untrack();
  v14 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 8));
  v16 = *(_DWORD *)(v6 + 104);
  AGCLLVMGen3TargetLowerer::buildQuadBroadcast((char **)v6, (uint64_t)&v14, v5, v9);
  if (v15)
    llvm::MetadataTracking::untrack();
  if (v12)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdReduce(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char *Name;
  size_t v8;
  AGCLLVMAirBuiltinsGen3 *Prefix;
  int Key;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *InsertElement;
  int ScalarSizeInBits;
  uint64_t v21;
  uint64_t v22;
  uint64_t *Cast;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t i;
  llvm::Value *v28;
  llvm::Value *Element;
  llvm::Value *v30;
  llvm::Value *v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Value *v37;
  uint64_t *v38;
  uint64_t v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t *v45;
  llvm::Value *v46;
  uint64_t v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  uint64_t v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Value *v64;
  uint64_t j;
  llvm::Value *v66;
  llvm::Value *v67;
  llvm::Value *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  char *v75;
  unint64_t v76;
  char *v77[2];
  __int128 v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  char v84[32];
  __int16 v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  _BYTE v92[32];
  __int16 v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  __int16 v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  __int128 v101;
  uint64_t v102;
  int v103;
  __int128 v104;
  uint64_t v105;
  int v106;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 17) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = *((_QWORD *)a2 - 4);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *((_QWORD *)a2 + 9))
    v5 = 0;
  v6 = (uint64_t *)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  Name = (char *)llvm::Value::getName((llvm::Value *)v5);
  v77[0] = 0;
  v77[1] = 0;
  v75 = 0;
  v76 = 0;
  Prefix = (AGCLLVMAirBuiltinsGen3 *)AGCLLVMBuilder::findPrefix(Name, v8, v77, &v75, "air.", 4uLL);
  AGCLLVMAirBuiltinsGen3::initializeReduceMap(Prefix);
  Key = llvm::StringMapImpl::FindKey();
  v11 = Key;
  if (Key == -1)
    v11 = dword_1EF8E8FE8;
  v12 = *(_QWORD *)(AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map + 8 * v11);
  v13 = v76 >= 2 && *(_WORD *)v75 == 11891;
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v72 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v15 = *(_DWORD *)(a1 + 104);
  v74 = v15;
  v16 = *(_DWORD *)(v12 + 8);
  if (*(_BYTE *)(v12 + 12))
  {
    v78 = v72;
    v79 = v73;
    if (v73)
    {
      llvm::MetadataTracking::track();
      v15 = v74;
      v80 = v74;
      v104 = v78;
      v105 = v79;
      if (v79)
      {
        llvm::MetadataTracking::track();
        v15 = v80;
      }
    }
    else
    {
      v80 = v15;
      v104 = v78;
      v105 = 0;
    }
    v106 = v15;
    AGCLLVMTargetLowerer::SetIP(v14, &v104);
    if (v105)
      llvm::MetadataTracking::untrack();
    v17 = *v6;
    if ((*(_DWORD *)(*v6 + 8) & 0xFE) != 0x12 || **(_QWORD **)(v17 + 16) == *(_QWORD *)(v14 + 200))
    {
      v101 = *(_OWORD *)(v14 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v14 + 8));
      v103 = *(_DWORD *)(v14 + 104);
      AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v101, v6, v16, v13);
      if (v102)
        llvm::MetadataTracking::untrack();
    }
    else
    {
      v18 = *(unsigned int *)(v17 + 32);
      llvm::FixedVectorType::get();
      InsertElement = (llvm::Value *)llvm::UndefValue::get();
      ScalarSizeInBits = llvm::Type::getScalarSizeInBits((llvm::Type *)v17);
      if (ScalarSizeInBits == 8)
      {
        v21 = 200;
        if ((_DWORD)v18 == 2)
          v21 = 192;
        v22 = *(_QWORD *)(v14 + v21);
        v70 = llvm::FixedVectorType::get();
        if ((_DWORD)v18 == 3)
          v6 = (uint64_t *)AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)v14, (llvm::Value *)v6, 4);
        v98 = *(_OWORD *)(v14 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v14 + 8));
        v100 = *(_DWORD *)(v14 + 104);
        v97 = 257;
        Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, (uint64_t)v6, v22, (uint64_t)&v94);
        v24 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v98, Cast, v16, v13);
        if (v99)
          llvm::MetadataTracking::untrack();
        v97 = 257;
        v25 = llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v24, v70, (uint64_t)&v94);
        if ((_DWORD)v18)
        {
          v26 = (llvm::Value *)v25;
          for (i = 0; i != v18; ++i)
          {
            v97 = 257;
            v28 = (llvm::Value *)llvm::ConstantInt::get();
            Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v26, v28, (const llvm::Twine *)&v94);
            v93 = 257;
            v30 = (llvm::Value *)llvm::ConstantInt::get();
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), InsertElement, Element, v30, (const llvm::Twine *)v92);
          }
        }
      }
      else if ((_DWORD)v18 != 3 && ScalarSizeInBits == 16)
      {
        v60 = 248;
        if ((_DWORD)v18 == 2)
          v60 = 200;
        v69 = *(_QWORD *)(v14 + v60);
        v71 = llvm::FixedVectorType::get();
        v89 = *(_OWORD *)(v14 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v14 + 8));
        v91 = *(_DWORD *)(v14 + 104);
        v97 = 257;
        v61 = (uint64_t *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, (uint64_t)v6, v69, (uint64_t)&v94);
        v62 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v89, v61, v16, v13);
        if (v90)
          llvm::MetadataTracking::untrack();
        v97 = 257;
        v63 = llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v62, v71, (uint64_t)&v94);
        if ((_DWORD)v18)
        {
          v64 = (llvm::Value *)v63;
          for (j = 0; j != v18; ++j)
          {
            v97 = 257;
            v66 = (llvm::Value *)llvm::ConstantInt::get();
            v67 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v64, v66, (const llvm::Twine *)&v94);
            v93 = 257;
            v68 = (llvm::Value *)llvm::ConstantInt::get();
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), InsertElement, v67, v68, (const llvm::Twine *)v92);
          }
        }
      }
      else if ((_DWORD)v18 == 3 && ScalarSizeInBits == 16)
      {
        v34 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)v14, (llvm::Value *)v6, 4);
        v35 = *(_QWORD *)(v14 + 248);
        v97 = 257;
        v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, (uint64_t)v34, v35, (uint64_t)&v94);
        v97 = 257;
        v37 = (llvm::Value *)llvm::ConstantInt::get();
        v38 = (uint64_t *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v36, v37, (const llvm::Twine *)&v94);
        v86 = *(_OWORD *)(v14 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v14 + 8));
        v88 = *(_DWORD *)(v14 + 104);
        v39 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v86, v38, v16, v13);
        if (v87)
          llvm::MetadataTracking::untrack();
        v97 = 257;
        v40 = (llvm::Value *)llvm::ConstantInt::get();
        v41 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v36, v40, (const llvm::Twine *)&v94);
        v42 = *(_QWORD *)(v14 + 240);
        v93 = 257;
        v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v41, v42, (uint64_t)v92);
        v85 = 257;
        v44 = (llvm::Value *)llvm::ConstantInt::get();
        v45 = (uint64_t *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v43, v44, (const llvm::Twine *)v84);
        v81 = *(_OWORD *)(v14 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v14 + 8));
        v83 = *(_DWORD *)(v14 + 104);
        v46 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v81, v45, v16, v13);
        if (v82)
          llvm::MetadataTracking::untrack();
        v47 = *(_QWORD *)(v14 + 240);
        v97 = 257;
        v48 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v39, v47, (uint64_t)&v94);
        v93 = 257;
        v49 = (llvm::Value *)llvm::ConstantInt::get();
        v50 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v48, v49, (const llvm::Twine *)v92);
        v51 = *(_QWORD *)(v14 + 240);
        v97 = 257;
        v52 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v14 + 8, 49, v39, v51, (uint64_t)&v94);
        v93 = 257;
        v53 = (llvm::Value *)llvm::ConstantInt::get();
        v54 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v14 + 8), v52, v53, (const llvm::Twine *)v92);
        v97 = 257;
        v55 = (llvm::Value *)llvm::ConstantInt::get();
        v56 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), InsertElement, v50, v55, (const llvm::Twine *)&v94);
        v97 = 257;
        v57 = (llvm::Value *)llvm::ConstantInt::get();
        v58 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), v56, v54, v57, (const llvm::Twine *)&v94);
        v97 = 257;
        v59 = (llvm::Value *)llvm::ConstantInt::get();
        llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v14 + 8), v58, v46, v59, (const llvm::Twine *)&v94);
      }
    }
    if (v79)
LABEL_39:
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v94 = v72;
    v95 = v73;
    if (v73)
    {
      llvm::MetadataTracking::track();
      v15 = v74;
    }
    v96 = v15;
    AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(v14, (uint64_t)&v94, v6, v16, v13);
    if (v95)
      goto LABEL_39;
  }
  if (v73)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdIsFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  llvm::Value *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t ActiveThreadIndex;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[32];
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 17) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v6 = *(_DWORD *)(a1 + 104);
  v14 = v6;
  v23 = v12;
  v24 = v13;
  if (v13)
  {
    llvm::MetadataTracking::track();
    v6 = v14;
  }
  v25 = v6;
  v7 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v5 + 1536))(v5, &v23, *(_QWORD *)(v5 + 192));
  if (v24)
    llvm::MetadataTracking::untrack();
  v8 = (uint64_t *)(v5 + 8);
  v20 = *(_OWORD *)(v5 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 8));
  v22 = *(_DWORD *)(v5 + 104);
  v9 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(v5, (uint64_t)&v20, v7);
  if (v21)
    llvm::MetadataTracking::untrack();
  v17 = *(_OWORD *)(v5 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 8));
  v19 = *(_DWORD *)(v5 + 104);
  ActiveThreadIndex = AGCLLVMGen3TargetLowerer::buildEmulatedFirstActiveThreadIndex(v5, (uint64_t)&v17, (uint64_t *)v7, v9);
  if (v18)
    llvm::MetadataTracking::untrack();
  v16 = 257;
  llvm::IRBuilderBase::CreateICmp(v8, 32, (llvm::CmpInst **)v7, ActiveThreadIndex, (uint64_t)v15);
  if (v13)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdBroadcastFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  llvm::Type **v5;
  uint64_t v6;
  int v7;
  llvm::Value *v8;
  uint64_t v9;
  llvm::Value *ActiveThreadIndex;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 17) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = (llvm::Type **)*((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v7 = *(_DWORD *)(a1 + 104);
  v14 = v7;
  v24 = v12;
  v25 = v13;
  if (v13)
  {
    llvm::MetadataTracking::track();
    v7 = v14;
  }
  v26 = v7;
  v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v6 + 1536))(v6, &v24, *(_QWORD *)(v6 + 192));
  if (v25)
    llvm::MetadataTracking::untrack();
  v21 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 8));
  v23 = *(_DWORD *)(v6 + 104);
  v9 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(v6, (uint64_t)&v21, v8);
  if (v22)
    llvm::MetadataTracking::untrack();
  v18 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 8));
  v20 = *(_DWORD *)(v6 + 104);
  ActiveThreadIndex = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedFirstActiveThreadIndex(v6, (uint64_t)&v18, (uint64_t *)v8, v9);
  if (v19)
    llvm::MetadataTracking::untrack();
  v15 = v12;
  v16 = v13;
  if (v13)
    llvm::MetadataTracking::track();
  v17 = v14;
  AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(v6, (uint64_t)&v15, v5, ActiveThreadIndex, 0, *(_DWORD *)(v6 + 872));
  if (v16)
    llvm::MetadataTracking::untrack();
  if (v13)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

llvm::Value *AGCLLVMAirBuiltinsGen3::buildWGBarrier(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Cast;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)a1[94];
  if (v4)
    *((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 456) = 1;
  v5 = a1[46];
  v6 = *(_QWORD *)(v5 + 936);
  if (v6)
    v7 = strlen(*(const char **)(v5 + 936));
  else
    v7 = 0;
  v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, v6, v7, a1[18], a1[24], a1[24]);
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v10 = a1[24];
    v15 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v9, v10, (uint64_t)v14);
  }
  else
  {
    Cast = llvm::ConstantInt::get();
  }
  v12 = Cast;
  v16[0] = AGCLLVMAirBuiltinsGen3::remapAIRMemoryFlags((AGCLLVMAirBuiltinsGen3 *)a1, *(llvm::Value **)a2);
  v16[1] = v12;
  v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v8 + 24), v8, (uint64_t)v16, 2, (uint64_t)v14);
}

llvm::Value *AGCLLVMAirBuiltinsGen3::buildSimdBarrier(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Cast;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v4 = a1[94];
  if (v4)
    *(_BYTE *)(v4 + 16) = 1;
  v5 = a1[46];
  v6 = *(_QWORD *)(v5 + 952);
  if (v6)
    v7 = strlen(*(const char **)(v5 + 952));
  else
    v7 = 0;
  v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, v6, v7, a1[18], a1[24], a1[24]);
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v10 = a1[24];
    v15 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v9, v10, (uint64_t)v14);
  }
  else
  {
    Cast = llvm::ConstantInt::get();
  }
  v12 = Cast;
  v16[0] = AGCLLVMAirBuiltinsGen3::remapAIRMemoryFlags((AGCLLVMAirBuiltinsGen3 *)a1, *(llvm::Value **)a2);
  v16[1] = v12;
  v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v8 + 24), v8, (uint64_t)v16, 2, (uint64_t)v14);
}

uint64_t AGCLLVMAirBuiltinsGen3::buildQuadElement(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  int v15;

  v5 = *(_QWORD *)(a1 + 752);
  if (v5)
    *(_BYTE *)(v5 + 16) = 1;
  if (a4 == 3)
  {
    v6 = bswap32(*a3) >> 16;
    if (v6 == 26931)
    {
      v7 = *((unsigned __int8 *)a3 + 2) - 50;
    }
    else if (v6 < 0x6933)
    {
      v7 = -1;
    }
    else
    {
      v7 = 1;
    }
    if (v7)
      v8 = (uint64_t *)(a1 + 192);
    else
      v8 = (uint64_t *)(a1 + 200);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 192);
  }
  v9 = *v8;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v15 = *(_DWORD *)(a1 + 104);
  v11 = AGCLLVMGen3TargetLowerer::buildQuadElement(v10, (uint64_t)&v13, v9);
  if (v14)
    llvm::MetadataTracking::untrack();
  return v11;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildThreadsPerSimdgroup(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 752);
  if (v1)
    *(_BYTE *)(v1 + 16) = 1;
  return llvm::ConstantInt::get();
}

uint64_t AGCLLVMAirBuiltinsGen3::buildThreadIndexInSimdGroup(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  int v15;

  v5 = *(_QWORD *)(a1 + 752);
  if (v5)
    *(_BYTE *)(v5 + 16) = 1;
  if (a4 == 3)
  {
    v6 = bswap32(*a3) >> 16;
    if (v6 == 26931)
    {
      v7 = *((unsigned __int8 *)a3 + 2) - 50;
    }
    else if (v6 < 0x6933)
    {
      v7 = -1;
    }
    else
    {
      v7 = 1;
    }
    if (v7)
      v8 = (uint64_t *)(a1 + 192);
    else
      v8 = (uint64_t *)(a1 + 200);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 192);
  }
  v9 = *v8;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v15 = *(_DWORD *)(a1 + 104);
  v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v10 + 1536))(v10, &v13, v9);
  if (v14)
    llvm::MetadataTracking::untrack();
  return v11;
}

uint64_t AGCLLVMAirBuiltinsGen3::buildSimdGroupIndexInThreadgroup(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  int v15;

  v5 = *(_QWORD *)(a1 + 752);
  if (v5)
    *(_BYTE *)(v5 + 16) = 1;
  if (a4 == 3)
  {
    v6 = bswap32(*a3) >> 16;
    if (v6 == 26931)
    {
      v7 = *((unsigned __int8 *)a3 + 2) - 50;
    }
    else if (v6 < 0x6933)
    {
      v7 = -1;
    }
    else
    {
      v7 = 1;
    }
    if (v7)
      v8 = (uint64_t *)(a1 + 192);
    else
      v8 = (uint64_t *)(a1 + 200);
  }
  else
  {
    v8 = (uint64_t *)(a1 + 192);
  }
  v9 = *v8;
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
  v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v15 = *(_DWORD *)(a1 + 104);
  v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v10 + 1544))(v10, &v13, v9);
  if (v14)
    llvm::MetadataTracking::untrack();
  return v11;
}

uint64_t AGCLLVMAirBuiltinsGen3::remapAIRMemoryFlags(AGCLLVMAirBuiltinsGen3 *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *LShr;
  llvm::Value *v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  _WORD v14[20];
  _BYTE v15[32];
  __int16 v16;

  v4 = (AGCLLVMAirBuiltinsGen3 *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v16 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v15);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v14);
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v16 = 257;
  v10 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v9, (const llvm::Twine *)v15);
  v16 = 257;
  v11 = llvm::IRBuilderBase::CreateOr(v4, v10, LShr, (const llvm::Twine *)v15);
  v12 = *((_QWORD *)this + 24);
  v16 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, v11, v12, (uint64_t)v15);
}

void AGCLLVMAirBuiltinsGen3::initializeReduceMap(AGCLLVMAirBuiltinsGen3 *this)
{
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if ((v1 & 1) == 0
  {
    AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map = 0;
    *(_QWORD *)&dword_1EF8E8FE8 = 0;
    qword_1EF8E8FF0 = 0x1000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map, &dword_1C3C54000);
  }
  if (!dword_1EF8E8FEC)
  {
    v2 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_and", 8uLL);
    *(_DWORD *)(v2 + 8) = 0;
    *(_BYTE *)(v2 + 12) = 1;
    v3 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_or", 7uLL);
    *(_DWORD *)(v3 + 8) = 1;
    *(_BYTE *)(v3 + 12) = 1;
    v4 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_xor", 8uLL);
    *(_DWORD *)(v4 + 8) = 2;
    *(_BYTE *)(v4 + 12) = 1;
    v5 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_product", 0xCuLL);
    *(_DWORD *)(v5 + 8) = 3;
    *(_BYTE *)(v5 + 12) = 0;
    v6 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_sum", 8uLL);
    *(_DWORD *)(v6 + 8) = 4;
    *(_BYTE *)(v6 + 12) = 0;
    v7 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_max", 8uLL);
    *(_DWORD *)(v7 + 8) = 5;
    *(_BYTE *)(v7 + 12) = 0;
    v8 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_min", 8uLL);
    *(_DWORD *)(v8 + 8) = 6;
    *(_BYTE *)(v8 + 12) = 0;
    v9 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_prefix_inclusive_product", 0x1DuLL);
    *(_DWORD *)(v9 + 8) = 7;
    *(_BYTE *)(v9 + 12) = 0;
    v10 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_prefix_inclusive_sum", 0x19uLL);
    *(_DWORD *)(v10 + 8) = 8;
    *(_BYTE *)(v10 + 12) = 0;
    v11 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_prefix_exclusive_product", 0x1DuLL);
    *(_DWORD *)(v11 + 8) = 9;
    *(_BYTE *)(v11 + 12) = 0;
    v12 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_prefix_exclusive_sum", 0x19uLL);
    *(_DWORD *)(v12 + 8) = 10;
    *(_BYTE *)(v12 + 12) = 0;
    v13 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_all", 8uLL);
    *(_DWORD *)(v13 + 8) = 0;
    *(_BYTE *)(v13 + 12) = 0;
    v14 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("quad_any", 8uLL);
    *(_DWORD *)(v14 + 8) = 1;
    *(_BYTE *)(v14 + 12) = 0;
    v15 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_and", 8uLL);
    *(_DWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 12) = 1;
    v16 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_or", 7uLL);
    *(_DWORD *)(v16 + 8) = 1;
    *(_BYTE *)(v16 + 12) = 1;
    v17 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_xor", 8uLL);
    *(_DWORD *)(v17 + 8) = 2;
    *(_BYTE *)(v17 + 12) = 1;
    v18 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_product", 0xCuLL);
    *(_DWORD *)(v18 + 8) = 3;
    *(_BYTE *)(v18 + 12) = 0;
    v19 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_sum", 8uLL);
    *(_DWORD *)(v19 + 8) = 4;
    *(_BYTE *)(v19 + 12) = 0;
    v20 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_max", 8uLL);
    *(_DWORD *)(v20 + 8) = 5;
    *(_BYTE *)(v20 + 12) = 0;
    v21 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_min", 8uLL);
    *(_DWORD *)(v21 + 8) = 6;
    *(_BYTE *)(v21 + 12) = 0;
    v22 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_prefix_inclusive_product", 0x1DuLL);
    *(_DWORD *)(v22 + 8) = 7;
    *(_BYTE *)(v22 + 12) = 0;
    v23 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_prefix_inclusive_sum", 0x19uLL);
    *(_DWORD *)(v23 + 8) = 8;
    *(_BYTE *)(v23 + 12) = 0;
    v24 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_prefix_exclusive_product", 0x1DuLL);
    *(_DWORD *)(v24 + 8) = 9;
    *(_BYTE *)(v24 + 12) = 0;
    v25 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_prefix_exclusive_sum", 0x19uLL);
    *(_DWORD *)(v25 + 8) = 10;
    *(_BYTE *)(v25 + 12) = 0;
    v26 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_all", 8uLL);
    *(_DWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 12) = 0;
    v27 = *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>("simd_any", 8uLL);
    *(_DWORD *)(v27 + 8) = 1;
    *(_BYTE *)(v27 + 12) = 0;
  }
}

uint64_t llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *llvm::StringMap<AGCLLVMAirBuiltinsGen3::ReductionFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EF8E8FF0) = qword_1EF8E8FF0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 17, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 16;
  if (a2)
    memcpy((void *)(v8 + 16), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *v9 = a2;
  v9[1] = 0;
  *i = (uint64_t)v9;
  ++dword_1EF8E8FEC;
  for (i = (uint64_t *)(AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirBuiltinsGen3::initializeReduceMap(void)::reduce_map));
        !*i || *i == -8;
  return i;
}

void AGCLLVMAirBuiltinsGen4::~AGCLLVMAirBuiltinsGen4(AGCLLVMAirBuiltinsGen4 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateUp(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1672))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateDown(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  llvm::Value *v7;
  uint64_t Sub;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[32];
  __int16 v16;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v16 = 257;
  Sub = llvm::IRBuilderBase::CreateSub((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), v7, a3, (const llvm::Twine *)v15);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v12 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v14 = *((_DWORD *)this + 26);
  v10 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t))(*(_QWORD *)v9 + 1672))(v9, &v12, a2, Sub);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadBallot(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *((_QWORD *)this + 94);
  if (v4)
    *(_BYTE *)(v4 + 16) = 1;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v10 = *((_DWORD *)this + 26);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *))(*(_QWORD *)v5 + 1680))(v5, &v8, a2);
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdBroadcast(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1688))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffle(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1696))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleUp(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1576))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleDown(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1584))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleXor(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1704))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateUp(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *))(*(_QWORD *)v7 + 1712))(v7, &v10, a2, a3);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateDown(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  llvm::Value *v7;
  uint64_t Sub;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[32];
  __int16 v16;

  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v16 = 257;
  Sub = llvm::IRBuilderBase::CreateSub((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), v7, a3, (const llvm::Twine *)v15);
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v12 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v14 = *((_DWORD *)this + 26);
  v10 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t))(*(_QWORD *)v9 + 1712))(v9, &v12, a2, Sub);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdBallot(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v8 = *(_QWORD *)(a1 + 752);
  if (v8)
    *(_BYTE *)(v8 + 17) = 1;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v16 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v18 = *(_DWORD *)(a1 + 104);
  v10 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v9 + 1720))(v9, &v16, *a2);
  if (v17)
    llvm::MetadataTracking::untrack();
  if (a4 > 2 && *(_WORD *)(a3 + a4 - 3) == 13929 && *(_BYTE *)(a3 + a4 - 1) == 52)
  {
    v12 = *(_QWORD *)(a1 + 208);
    v15 = 257;
    return llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v10, v12, (uint64_t)v14);
  }
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdActiveThreadsMask(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v7 = *(_QWORD *)(a1 + 752);
  if (v7)
    *(_BYTE *)(v7 + 17) = 1;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v15 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v17 = *(_DWORD *)(a1 + 104);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 1728))(v8, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  if (a4 > 2 && *(_WORD *)(a3 + a4 - 3) == 13929 && *(_BYTE *)(a3 + a4 - 1) == 52)
  {
    v11 = *(_QWORD *)(a1 + 208);
    v14 = 257;
    return llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v9, v11, (uint64_t)v13);
  }
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadActiveThreadsMask(AGCLLVMAirBuiltinsGen4 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  int v8;

  v2 = *((_QWORD *)this + 94);
  if (v2)
    *(_BYTE *)(v2 + 16) = 1;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v6 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v8 = *((_DWORD *)this + 26);
  v4 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 1736))(v3, &v6);
  if (v7)
    llvm::MetadataTracking::untrack();
  return v4;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdAll(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *((_QWORD *)this + 94);
  if (v4)
    *(_BYTE *)(v4 + 17) = 1;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v10 = *((_DWORD *)this + 26);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *))(*(_QWORD *)v5 + 1744))(v5, &v8, a2);
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdAny(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *((_QWORD *)this + 94);
  if (v4)
    *(_BYTE *)(v4 + 17) = 1;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v10 = *((_DWORD *)this + 26);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *))(*(_QWORD *)v5 + 1752))(v5, &v8, a2);
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadAll(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *((_QWORD *)this + 94);
  if (v4)
    *(_BYTE *)(v4 + 16) = 1;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v10 = *((_DWORD *)this + 26);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *))(*(_QWORD *)v5 + 1760))(v5, &v8, a2);
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadAny(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *((_QWORD *)this + 94);
  if (v4)
    *(_BYTE *)(v4 + 16) = 1;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v10 = *((_DWORD *)this + 26);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *))(*(_QWORD *)v5 + 1768))(v5, &v8, a2);
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdVoteAll(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  BOOL v5;
  uint64_t Cast;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[32];
  __int16 v16;

  if (a4 > 2 && (*(_WORD *)(a3 + a4 - 3) == 13929 ? (v5 = *(_BYTE *)(a3 + a4 - 1) == 52) : (v5 = 0), v5))
  {
    v7 = *a2;
    v8 = *(_QWORD *)(a1 + 200);
    v16 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v7, v8, (uint64_t)v15);
  }
  else
  {
    Cast = *a2;
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v14 = *(_DWORD *)(a1 + 104);
  v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v9 + 1776))(v9, &v12, Cast, 0);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdVoteAny(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  BOOL v5;
  uint64_t Cast;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  _BYTE v15[32];
  __int16 v16;

  if (a4 > 2 && (*(_WORD *)(a3 + a4 - 3) == 13929 ? (v5 = *(_BYTE *)(a3 + a4 - 1) == 52) : (v5 = 0), v5))
  {
    v7 = *a2;
    v8 = *(_QWORD *)(a1 + 200);
    v16 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v7, v8, (uint64_t)v15);
  }
  else
  {
    Cast = *a2;
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v14 = *(_DWORD *)(a1 + 104);
  v10 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v9 + 1784))(v9, &v12, Cast, 0);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadVoteAll(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v9 = *((_DWORD *)this + 26);
  v5 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t))(*(_QWORD *)v4 + 1776))(v4, &v7, a2, 1);
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildQuadVoteAny(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v9 = *((_DWORD *)this + 26);
  v5 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t))(*(_QWORD *)v4 + 1784))(v4, &v7, a2, 1);
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetThreadPositionInGrid(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  uint64_t v3;
  llvm::Value *v4;
  uint64_t v5;
  llvm::Value *v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::Value *InsertElement;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v3 = (*(uint64_t (**)(_QWORD, llvm::Value *))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46), a2);
  v24 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v26 = *((_DWORD *)this + 26);
  v4 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildGlobalID(v3, (uint64_t)&v24, *((_QWORD *)this + 25), 0);
  if (v25)
    llvm::MetadataTracking::untrack();
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v21 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v23 = *((_DWORD *)this + 26);
  v6 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildGlobalID(v5, (uint64_t)&v21, *((_QWORD *)this + 25), 1);
  if (v22)
    llvm::MetadataTracking::untrack();
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v18 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8));
  v20 = *((_DWORD *)this + 26);
  v8 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildGlobalID(v7, (uint64_t)&v18, *((_QWORD *)this + 25), 2);
  if (v19)
    llvm::MetadataTracking::untrack();
  llvm::FixedVectorType::get();
  v9 = (llvm::Value *)llvm::UndefValue::get();
  v17 = 257;
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), v9, v4, v10, (const llvm::Twine *)v16);
  v17 = 257;
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), InsertElement, v6, v12, (const llvm::Twine *)v16);
  v17 = 257;
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltinsGen4 *)((char *)this + 8), v13, v8, v14, (const llvm::Twine *)v16);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetPosition()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetSampleID()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetVertexID(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_vertex_id");
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetInstanceID(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_instance_id");
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetAmplificationID(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_amplification_id");
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetPatchID(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_patch_id");
}

uint64_t AGCLLVMAirBuiltinsGen4::buildGetRenderTargetArrayIndex(AGCLLVMAirBuiltinsGen4 *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(this, "agc.trace_buffer_render_target_array_index");
}

uint64_t AGCLLVMAirBuiltinsGen4::buildCoordinateWarp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v13 = *(_DWORD *)(a1 + 104);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 1656))(v8, &v11, a2, a3, a4);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildCoordinateDewarp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v13 = *(_DWORD *)(a1 + 104);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 1664))(v8, &v11, a2, a3, a4);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdMatrixLoad(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t Name;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 12) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = *((_QWORD *)a2 - 4);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *((_QWORD *)a2 + 9))
    v5 = 0;
  Name = llvm::Value::getName((llvm::Value *)v5);
  v15 = v6;
  v7 = llvm::StringRef::find() != -1;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, uint64_t))(*(_QWORD *)a1 + 528))(a1, 0, "i32", 3);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v13 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, __int128 *, _QWORD, llvm::Instruction *, uint64_t, _BOOL8))(*(_QWORD *)v9 + 1792))(v9, &v11, 0, a2, v8, v7);
  if (v12)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdMatrixStore(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t Name;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 12) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = *((_QWORD *)a2 - 4);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *((_QWORD *)a2 + 9))
    v5 = 0;
  Name = llvm::Value::getName((llvm::Value *)v5);
  v15 = v6;
  v7 = llvm::StringRef::find() != -1;
  v8 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, uint64_t))(*(_QWORD *)a1 + 528))(a1, 0, "i32", 3);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v13 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, __int128 *, uint64_t, llvm::Instruction *, uint64_t, _BOOL8))(*(_QWORD *)v9 + 1792))(v9, &v11, 1, a2, v8, v7);
  if (v12)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdMatrixMultiplyAccumulate(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 12) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = *(_QWORD *)a2;
  v6 = (uint64_t *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v7 = *v6;
  v8 = v6[4];
  v9 = v6[8];
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v14 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 1800))(v10, &v12, v5, v7, v8, v9);
  if (v13)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen4::buildSimdMatrixThreadElementsInit(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t Name;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 752);
  if (v4)
    *(_BYTE *)(v4 + 12) = 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = *((_QWORD *)a2 - 4);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *((_QWORD *)a2 + 9))
    v5 = 0;
  Name = llvm::Value::getName((llvm::Value *)v5);
  v17 = v6;
  v7 = llvm::StringRef::find() != -1;
  v8 = *(_QWORD *)a2;
  v9 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, const char *, uint64_t))(*(_QWORD *)a1 + 528))(a1, 0, "i32", 3);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v15 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v11 + 1808))(v11, &v13, v8, v9, v10, v7);
  if (v14)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltins::declareDebugTraceBufferTLSGlobal(AGCLLVMAirBuiltins *this, const char *__s)
{
  llvm::Value *v4;
  uint64_t GlobalVariable;
  char v6;
  llvm::Type *v7;
  const char *v9;
  __int16 v10;

  if (__s)
    strlen(__s);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    v6 = 1;
    GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    HIBYTE(v10) = 1;
    if (*__s)
    {
      v9 = __s;
      v6 = 3;
    }
    LOBYTE(v10) = v6;
    llvm::GlobalVariable::GlobalVariable();
    *(_DWORD *)(GlobalVariable + 32) = *(_DWORD *)(GlobalVariable + 32) & 0xFFFFE3FF | 0x400;
  }
  v10 = 257;
  v7 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)GlobalVariable, v4);
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v7, GlobalVariable, 0, (uint64_t)&v9);
}

void AGCLLVMAirBuiltinsGen5::~AGCLLVMAirBuiltinsGen5(AGCLLVMAirBuiltinsGen5 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CAA2D68CLL);
}

llvm::Value *AGCLLVMAirBuiltinsGen5::buildCeil(AGCLLVMAirBuiltinsGen5 *this, llvm::Value *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = *((_QWORD *)this + 46);
  v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen5 *)((char *)this + 8));
  v9 = *((_DWORD *)this + 26);
  v5 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v7, (uint64_t *)a2, "llvm.ceil");
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

llvm::Value *AGCLLVMAirBuiltinsGen5::buildPow(AGCLLVMAirBuiltinsGen5 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  _WORD v10[20];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 19))
  {
    v8 = "llvm.agx2.pow.f16";
LABEL_6:
    v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v8, 17, v6, v6, v6);
    goto LABEL_7;
  }
  if (v6 == *((_QWORD *)this + 21))
  {
    v8 = "llvm.agx2.pow.f32";
    goto LABEL_6;
  }
  v7 = 0;
LABEL_7:
  v11[0] = a2;
  v11[1] = a3;
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v7 + 24), v7, (uint64_t)v11, 2, (uint64_t)v10);
}

llvm::Value *AGCLLVMAirBuiltinsGen5::buildRNE(AGCLLVMAirBuiltinsGen5 *this, llvm::Value *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = *((_QWORD *)this + 46);
  v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen5 *)((char *)this + 8));
  v9 = *((_DWORD *)this + 26);
  v5 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v7, (uint64_t *)a2, "llvm.rint");
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

llvm::Value *AGCLLVMAirBuiltinsGen5::buildTrunc(AGCLLVMAirBuiltinsGen5 *this, llvm::Value *a2)
{
  uint64_t v4;
  llvm::Value *v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = *((_QWORD *)this + 46);
  v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen5 *)((char *)this + 8));
  v9 = *((_DWORD *)this + 26);
  v5 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v7, (uint64_t *)a2, "llvm.trunc");
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

uint64_t AGCLLVMAirBuiltinsGen5::buildShuffleAndFill(uint64_t a1, uint64_t a2)
{
  llvm::IRBuilderBase *v4;
  uint64_t v5;
  void *Name;
  size_t v7;
  size_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  _BOOL8 v15;
  __int128 v17;
  uint64_t v18;
  int v19;
  void *v20;
  size_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), (llvm::Instruction *)a2);
  v5 = *(_QWORD *)(a2 - 32);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *(_QWORD *)(a2 + 72))
    v5 = 0;
  Name = (void *)llvm::Value::getName((llvm::Value *)v5);
  v8 = v7;
  v20 = Name;
  v21 = v7;
  v9 = (_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v10 = (uint64_t *)v9[4];
  v22[0] = *v9;
  v22[1] = v10;
  v11 = v9[8];
  v12 = v9[12];
  v22[2] = v11;
  v22[3] = v12;
  llvm::UndefValue::get();
  if (AGCLLVMAirBuiltins::validateScalarOrVectorArgument(a1, *(_QWORD *)v22[0], Name, v8))
  {
    if (AGCLLVMAirBuiltins::validateScalarOrVectorArgument(a1, *v10, Name, v8))
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
      v17 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(v4);
      v19 = *(_DWORD *)(a1 + 104);
      v14 = llvm::StringRef::find() != -1;
      v15 = llvm::StringRef::find() != -1;
      (*(void (**)(uint64_t, __int128 *, _QWORD *, uint64_t, _BOOL8, _BOOL8))(*(_QWORD *)v13 + 1872))(v13, &v17, v22, 4, v14, v15);
      if (v18)
        llvm::MetadataTracking::untrack();
    }
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
}

uint64_t AGCLLVMAirBuiltins::validateScalarOrVectorArgument(uint64_t a1, uint64_t a2, void *a3, size_t a4)
{
  _QWORD *v8;
  unsigned int v9;
  void **v10;
  uint64_t v11;
  void **p_p;
  uint64_t v13;
  _QWORD *v14;
  void **v15;
  std::string::size_type v16;
  void *v17[2];
  unsigned __int8 v18;
  void *__p;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[11];
  char v23;
  uint64_t v24;

  if ((*(_DWORD *)(a2 + 8) & 0xFE) != 0x12 || *(_DWORD *)(a2 + 32) < 5u)
    return 1;
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v22);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"n = ", 4);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)" in vec<T,n> is an invalid argument to ", 39);
  if (a3)
  {
    std::string::basic_string[abi:nn180100](&__p, a3, a4);
    v9 = HIBYTE(v21);
    v10 = (void **)__p;
    v11 = v20;
  }
  else
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
    __p = 0;
    v20 = 0;
    v21 = 0;
  }
  if ((v9 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = v10;
  if ((v9 & 0x80u) == 0)
    v13 = v9;
  else
    v13 = v11;
  v14 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v13);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v14, (uint64_t)". ", 2);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v22, (uint64_t)"n must be less or equal to 4.", 29);
  std::stringbuf::str();
  if ((v18 & 0x80u) == 0)
    v15 = v17;
  else
    v15 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v16 = v18;
  else
    v16 = (std::string::size_type)v17[1];
  std::string::append((std::string *)(*(_QWORD *)(a1 + 752) + *(_QWORD *)(**(_QWORD **)(a1 + 752) - 24) + 8), (const std::string::value_type *)v15, v16);
  *(_BYTE *)(a1 + 768) = 0;
  if ((char)v18 < 0)
    operator delete(v17[0]);
  v22[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v22[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA2D638](&v24);
  return 0;
}

uint64_t std::ostringstream::basic_ostringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = v4;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

uint64_t AGCLLVMAirBuiltinsGen5::buildBroadcastFirstActiveThread(uint64_t a1, uint64_t a2)
{
  llvm::IRBuilderBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Type **v8;
  char **v9;
  int v10;
  int v11;
  uint64_t IsFirstActiveThread;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  _BYTE v31[32];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  uint64_t Cast;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  int v44;

  v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), (llvm::Instruction *)a2);
  v5 = *(_QWORD *)(a2 - 32);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *(_QWORD *)(a2 + 72))
    v5 = 0;
  v33[0] = llvm::Value::getName((llvm::Value *)v5);
  v33[1] = v6;
  v7 = llvm::StringRef::find();
  v8 = *(llvm::Type ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v9 = (char **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v22 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(v4);
  v10 = *(_DWORD *)(a1 + 104);
  v24 = v10;
  v28 = v22;
  v29 = v23;
  if (v23)
  {
    llvm::MetadataTracking::track();
    v10 = v24;
  }
  v30 = v10;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v28, (uint64_t)(v9 + 1));
  if (v29)
    llvm::MetadataTracking::untrack();
  v25 = *(_OWORD *)(v9 + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 1));
  v11 = *((_DWORD *)v9 + 26);
  v27 = v11;
  v42 = v25;
  v43 = v26;
  if (v26)
  {
    llvm::MetadataTracking::track();
    v11 = v27;
  }
  v44 = v11;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v42, (uint64_t)(v9 + 1));
  if (v43)
    llvm::MetadataTracking::untrack();
  v39 = *(_OWORD *)(v9 + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 1));
  v41 = *((_DWORD *)v9 + 26);
  IsFirstActiveThread = AGCLLVMGen5TargetLowerer::buildIsFirstActiveThread((uint64_t)v9, &v39, v7 != -1);
  if (v40)
    llvm::MetadataTracking::untrack();
  v36 = *(_OWORD *)(v9 + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 1));
  v38 = *((_DWORD *)v9 + 26);
  if (v7 == -1)
    v13 = (*((uint64_t (**)(char **, __int128 *, uint64_t))*v9 + 215))(v9, &v36, IsFirstActiveThread);
  else
    v13 = (*((uint64_t (**)(char **, __int128 *, uint64_t))*v9 + 210))(v9, &v36, IsFirstActiveThread);
  v14 = v13;
  if (v37)
    llvm::MetadataTracking::untrack();
  v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)v9, (uint64_t)"llvm.agx2.ft1", 13, (uint64_t)v9[25], (uint64_t)v9[25]);
  v16 = (uint64_t)v9[25];
  v34 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 1), 39, v14, v16, (uint64_t)v33);
  v32 = 257;
  v17 = llvm::IRBuilderBase::CreateCall((uint64_t)(v9 + 1), *(_QWORD *)(v15 + 24), v15, (uint64_t)&Cast, 1, (uint64_t)v31);
  if (v26)
    llvm::MetadataTracking::untrack();
  v42 = *(_OWORD *)(v9 + 7);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 1));
  v44 = *((_DWORD *)v9 + 26);
  v18 = (uint64_t)v9[24];
  if (v7 == -1)
  {
    v32 = 257;
    v20 = llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 1), 38, (uint64_t)v17, v18, (uint64_t)v31);
    (*((void (**)(char **, __int128 *, llvm::Type **, uint64_t))*v9 + 211))(v9, &v42, v8, v20);
  }
  else
  {
    v34 = 257;
    v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v9 + 1), 38, (uint64_t)v17, v18, (uint64_t)v33);
    AGCLLVMGen3TargetLowerer::buildQuadBroadcast(v9, (uint64_t)&v42, v8, v19);
  }
  if (v43)
    llvm::MetadataTracking::untrack();
  if (v23)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
}

uint64_t AGCLLVMAirBuiltinsGen5::buildIsFirstActiveThread(uint64_t a1, llvm::Instruction *a2)
{
  llvm::IRBuilderBase *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t Name;
  uint64_t v14;

  v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = *((_QWORD *)a2 - 4);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *((_QWORD *)a2 + 9))
    v5 = 0;
  Name = llvm::Value::getName((llvm::Value *)v5);
  v14 = v6;
  v7 = llvm::StringRef::find() != -1;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(v4);
  v12 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen5TargetLowerer::buildIsFirstActiveThread(v8, &v10, v7);
  if (v11)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen5::buildIsHelperThread(uint64_t a1, llvm::Instruction *a2)
{
  llvm::IRBuilderBase *v4;
  uint64_t v5;
  int v6;
  uint64_t inserted;
  llvm::CmpInst **v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  _BYTE v14[32];
  __int16 v15;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
  v11 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(v4);
  v6 = *(_DWORD *)(a1 + 104);
  v13 = v6;
  v18 = v11;
  v19 = v12;
  if (v12)
  {
    llvm::MetadataTracking::track();
    v6 = v13;
  }
  v20 = v6;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v18, v5 + 8);
  if (v19)
    llvm::MetadataTracking::untrack();
  if (*(_QWORD *)(v5 + 2760))
    strlen(*(const char **)(v5 + 2760));
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v17 = 257;
  v8 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall(v5 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v16);
  v9 = llvm::ConstantInt::get();
  v15 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(v5 + 8), 32, v8, v9, (uint64_t)v14);
  if (v12)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMAirBuiltinsGen5::buildReduce(uint64_t a1, uint64_t a2)
{
  llvm::IRBuilderBase *v4;
  uint64_t v5;
  void *Name;
  size_t v7;
  size_t v8;
  llvm::Value *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;

  v4 = (llvm::IRBuilderBase *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), (llvm::Instruction *)a2);
  v5 = *(_QWORD *)(a2 - 32);
  if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *(_QWORD *)(a2 + 72))
    v5 = 0;
  Name = (void *)llvm::Value::getName((llvm::Value *)v5);
  v8 = v7;
  v9 = *(llvm::Value **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  llvm::UndefValue::get();
  if (AGCLLVMAirBuiltins::validateScalarOrVectorArgument(a1, *(_QWORD *)v9, Name, v8))
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 688))(*(_QWORD *)(a1 + 368));
    v12 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(v4);
    v14 = *(_DWORD *)(a1 + 104);
    AGCLLVMGen5TargetLowerer::buildReduce(v10, &v12, (uint64_t)Name, v8, v9);
    if (v13)
      llvm::MetadataTracking::untrack();
  }
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
}

void AGCLLVMAirBuiltinsGen6::~AGCLLVMAirBuiltinsGen6(AGCLLVMAirBuiltinsGen6 *this)
{
  AGCLLVMAirBuiltins::~AGCLLVMAirBuiltins(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMAirBuiltinsGen6::buildQuadShuffleRotateUp(AGCLLVMAirBuiltinsGen6 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  const char *Value;
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  if (!*(_BYTE *)(*((_QWORD *)this + 46) + 1790))
  {
    if (!MGGetBoolAnswer())
      return AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateUp(this, a2, a3);
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ROTATE_AS_SHUFFLE_AND_FILL", v10);
    if (!Value || *Value == 48 || !atoi(Value))
      return AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateUp(this, a2, a3);
  }
  v15[0] = a2;
  v15[1] = a2;
  v15[2] = a3;
  v15[3] = llvm::ConstantInt::get();
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v12 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen6 *)((char *)this + 8));
  v14 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 1872))(v7, &v12, v15, 4, 0, 1);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen6::buildQuadShuffleRotateDown(AGCLLVMAirBuiltinsGen6 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  const char *Value;
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 16) = 1;
  if (!*(_BYTE *)(*((_QWORD *)this + 46) + 1790))
  {
    if (!MGGetBoolAnswer())
      return AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateDown(this, a2, a3);
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ROTATE_AS_SHUFFLE_AND_FILL", v10);
    if (!Value || *Value == 48 || !atoi(Value))
      return AGCLLVMAirBuiltinsGen4::buildQuadShuffleRotateDown(this, a2, a3);
  }
  v15[0] = a2;
  v15[1] = a2;
  v15[2] = a3;
  v15[3] = llvm::ConstantInt::get();
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v12 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen6 *)((char *)this + 8));
  v14 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 1872))(v7, &v12, v15, 4, 1, 1);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen6::buildSimdShuffleRotateUp(AGCLLVMAirBuiltinsGen6 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  const char *Value;
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  if (!*(_BYTE *)(*((_QWORD *)this + 46) + 1790))
  {
    if (!MGGetBoolAnswer())
      return AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateUp(this, a2, a3);
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ROTATE_AS_SHUFFLE_AND_FILL", v10);
    if (!Value || *Value == 48 || !atoi(Value))
      return AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateUp(this, a2, a3);
  }
  v15[0] = a2;
  v15[1] = a2;
  v15[2] = a3;
  v15[3] = llvm::ConstantInt::get();
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v12 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen6 *)((char *)this + 8));
  v14 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v7 + 1872))(v7, &v12, v15, 4, 0, 0);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen6::buildSimdShuffleRotateDown(AGCLLVMAirBuiltinsGen6 *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v10;
  const char *Value;
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 94);
  if (v6)
    *(_BYTE *)(v6 + 17) = 1;
  if (!*(_BYTE *)(*((_QWORD *)this + 46) + 1790))
  {
    if (!MGGetBoolAnswer())
      return AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateDown(this, a2, a3);
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_SIMD_ROTATE_AS_SHUFFLE_AND_FILL", v10);
    if (!Value || *Value == 48 || !atoi(Value))
      return AGCLLVMAirBuiltinsGen4::buildSimdShuffleRotateDown(this, a2, a3);
  }
  v15[0] = a2;
  v15[1] = a2;
  v15[2] = a3;
  v15[3] = llvm::ConstantInt::get();
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 688))(*((_QWORD *)this + 46));
  v12 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen6 *)((char *)this + 8));
  v14 = *((_DWORD *)this + 26);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 1872))(v7, &v12, v15, 4, 1, 0);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltinsGen7::buildSinCos(AGCLLVMAirBuiltinsGen7 *this, llvm::Type **a2, int a3)
{
  llvm::Value *FPExt;
  llvm::Type *v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::Type *v11;
  llvm::Instruction *v12;
  llvm::Value *FSub;
  llvm::Instruction *v14;
  llvm::Instruction *v15;
  uint64_t v16;
  llvm::Value *Fabs;
  uint64_t v18;
  llvm::Value *Cast;
  llvm::Value *v20;
  llvm::CmpInst **v21;
  uint64_t v22;
  uint64_t Select;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Value *v31;
  llvm::Value *FMul;
  _BYTE v34[32];
  __int16 v35;
  uint64_t v36;
  _BYTE v37[32];
  __int16 v38;

  FPExt = (llvm::Value *)a2;
  v6 = *a2;
  v7 = (llvm::Value *)llvm::ConstantFP::get();
  v8 = (llvm::Value *)llvm::ConstantFP::get();
  v9 = (llvm::Value *)llvm::ConstantFP::get();
  v10 = (llvm::Value *)llvm::ConstantFP::get();
  if (v6 == *((llvm::Type **)this + 19))
  {
    v11 = (llvm::Type *)*((_QWORD *)this + 21);
    v38 = 257;
    FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), FPExt, v11, (const llvm::Twine *)v37);
  }
  v12 = AGCLLVMBuilder::buildFma(this, FPExt, v8, v7);
  v38 = 257;
  FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)v7, (uint64_t)v12, (uint64_t)v37);
  v14 = AGCLLVMBuilder::buildFma(this, FPExt, v8, FSub);
  v15 = AGCLLVMBuilder::buildFma(this, FPExt, v9, v14);
  if (v6 == *((llvm::Type **)this + 21))
  {
    v15 = AGCLLVMBuilder::buildFma(this, FPExt, v10, v15);
    v36 = (uint64_t)v15;
  }
  v16 = llvm::ConstantFP::get();
  Fabs = AGCLLVMTargetBuilder::CreateFabs(this, v15);
  v38 = 257;
  llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v16, (uint64_t)Fabs, (uint64_t)v37);
  v18 = *((_QWORD *)this + 25);
  v38 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v12, v18, (uint64_t)v37);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v38 = 257;
  v21 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), Cast, v20, (const llvm::Twine *)v37);
  v22 = llvm::ConstantInt::get();
  v38 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, v21, v22, (uint64_t)v37);
  v38 = 257;
  if (a3)
  {
    llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)v15, (uint64_t)v37);
    v35 = 257;
  }
  Select = llvm::IRBuilderBase::CreateSelect();
  v24 = *((_QWORD *)this + 25);
  v38 = 257;
  v25 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v12, v24, (uint64_t)v37);
  v26 = (llvm::Value *)llvm::ConstantInt::get();
  v38 = 257;
  v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), v25, v26, (const llvm::Twine *)v37);
  v28 = llvm::ConstantInt::get();
  v38 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, v27, v28, (uint64_t)v37);
  v38 = 257;
  llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, Select, (uint64_t)v37);
  v35 = 257;
  v29 = llvm::IRBuilderBase::CreateSelect();
  v36 = v29;
  v30 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)"llvm.agx2.sinc.f32", 18, *((_QWORD *)this + 21), *((_QWORD *)this + 21));
  v38 = 257;
  v31 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v30 + 24), v30, (uint64_t)&v36, 1, (uint64_t)v37);
  v35 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v29, (uint64_t)v31, (uint64_t)v34);
  v36 = (uint64_t)FMul;
  if (v6 == *((llvm::Type **)this + 19))
  {
    v38 = 257;
    return llvm::IRBuilderBase::CreateFPTrunc((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), FMul, v6, (const llvm::Twine *)v37);
  }
  else
  {
    AGCLLVMTargetBuilder::CreateFabs(this, FPExt);
    llvm::ConstantFP::get();
    v38 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    if (a3)
      llvm::ConstantFP::get();
    v35 = 257;
    llvm::IRBuilderBase::CreateSelect();
    llvm::ConstantFP::get();
    v38 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantFP::get();
    v35 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
}

llvm::User *AGCLLVMAirBuiltinsGen7::buildArccos(llvm::Type **this, llvm::Value *a2)
{
  llvm::Type *v4;
  llvm::Value *FPExt;
  llvm::Value *Fabs;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Instruction *v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t FMul;
  uint64_t v13;
  llvm::Value *v14;
  llvm::Instruction *v15;
  llvm::Value *v16;
  llvm::Value *FNeg;
  llvm::Value *v18;
  llvm::Type *v19;
  _BYTE v20[32];
  __int16 v21;
  llvm::Value *Select;
  _BYTE v23[32];
  __int16 v24;

  if (*(llvm::Type **)a2 != this[19])
    return AGCLLVMAirBuiltinsGen2::buildArccos((AGCLLVMAirBuiltinsGen2 *)this, a2);
  v4 = this[21];
  v24 = 257;
  FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(this + 1), a2, v4, (const llvm::Twine *)v23);
  Fabs = AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, FPExt);
  v7 = (llvm::Value *)llvm::ConstantFP::get();
  v8 = (llvm::Value *)llvm::ConstantFP::get();
  v9 = AGCLLVMBuilder::buildFma((AGCLLVMBuilder *)this, v7, Fabs, v8);
  Select = v9;
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)"llvm.agx2.sqrt.step.f32", 23, (uint64_t)this[21], (uint64_t)this[21]);
  v24 = 257;
  v11 = llvm::IRBuilderBase::CreateCall((uint64_t)(this + 1), *(_QWORD *)(v10 + 24), v10, (uint64_t)&Select, 1, (uint64_t)v23);
  v21 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), (uint64_t)v9, (uint64_t)v11, (uint64_t)v20);
  v13 = llvm::ConstantFP::get();
  v24 = 257;
  v14 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), FMul, FMul, (uint64_t)v23);
  v15 = AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare((AGCLLVMAirBuiltinsGen2 *)this, v14);
  v24 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), v13, (uint64_t)v15, (uint64_t)v23);
  llvm::ConstantFP::get();
  v24 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v24 = 257;
  FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)(this + 1), FMul, (uint64_t)v23);
  v18 = (llvm::Value *)llvm::ConstantFP::get();
  AGCLLVMBuilder::buildFma((AGCLLVMBuilder *)this, FNeg, v16, v18);
  v21 = 257;
  llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), (uint64_t)v16, FMul, (uint64_t)v20);
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v19 = this[19];
  v24 = 257;
  return (llvm::User *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(this + 1), Select, v19, (const llvm::Twine *)v23);
}

uint64_t AGCLLVMAirBuiltinsGen7::buildArcsin(llvm::Type **this, llvm::Value *a2)
{
  llvm::Type *v4;
  llvm::Value *FPExt;
  llvm::Value *Fabs;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Instruction *v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t FMul;
  uint64_t Select;
  llvm::Value *v14;
  llvm::Instruction *v15;
  uint64_t v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Type *v19;
  _BYTE v20[32];
  __int16 v21;
  llvm::Value *v22;
  _BYTE v23[32];
  __int16 v24;

  if (*(llvm::Type **)a2 != this[19])
    return AGCLLVMAirBuiltinsGen2::buildArcsin((AGCLLVMAirBuiltinsGen2 *)this, a2);
  v4 = this[21];
  v24 = 257;
  FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(this + 1), a2, v4, (const llvm::Twine *)v23);
  Fabs = AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, FPExt);
  llvm::ConstantFP::get();
  v24 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v7 = (llvm::Value *)llvm::ConstantFP::get();
  v8 = (llvm::Value *)llvm::ConstantFP::get();
  v9 = AGCLLVMBuilder::buildFma((AGCLLVMBuilder *)this, v7, Fabs, v8);
  v22 = v9;
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)"llvm.agx2.sqrt.step.f32", 23, (uint64_t)this[21], (uint64_t)this[21]);
  v24 = 257;
  v11 = llvm::IRBuilderBase::CreateCall((uint64_t)(this + 1), *(_QWORD *)(v10 + 24), v10, (uint64_t)&v22, 1, (uint64_t)v23);
  v21 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), (uint64_t)v9, (uint64_t)v11, (uint64_t)v20);
  v24 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v24 = 257;
  v14 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), Select, Select, (uint64_t)v23);
  v15 = AGCLLVMAirBuiltinsGen2::buildInverseTrigPolynomialWithSquare((AGCLLVMAirBuiltinsGen2 *)this, v14);
  v24 = 257;
  llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), (uint64_t)v15, (uint64_t)Fabs, (uint64_t)v23);
  v16 = llvm::ConstantFP::get();
  v24 = 257;
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(this + 1), v16, FMul, (uint64_t)v23);
  v18 = (llvm::Value *)llvm::ConstantFP::get();
  v22 = AGCLLVMBuilder::buildFma((AGCLLVMBuilder *)this, v17, v15, v18);
  v24 = 257;
  v22 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  llvm::ConstantFP::get();
  v24 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v24 = 257;
  llvm::IRBuilderBase::CreateFNeg((uint64_t)(this + 1), (uint64_t)v22, (uint64_t)v23);
  v21 = 257;
  v22 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v19 = this[19];
  v24 = 257;
  return llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(this + 1), v22, v19, (const llvm::Twine *)v23);
}

uint64_t AGCLLVMAirBuiltinsGen7::buildTan(AGCLLVMAirBuiltinsGen7 *this, llvm::Value *a2)
{
  llvm::Value *FPExt;
  uint64_t v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Type *v9;
  llvm::Instruction *v10;
  llvm::Value *FSub;
  llvm::Instruction *v12;
  llvm::Instruction *v13;
  llvm::Instruction *v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  llvm::Value *Fabs;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Instruction *v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm::Value *v25;
  llvm::CmpInst **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *FMul;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Instruction *v34;
  llvm::Value *v35;
  llvm::Instruction *v36;
  llvm::Value *v37;
  llvm::Instruction *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t FNeg;
  uint64_t v42;
  llvm::Value *Cast;
  llvm::Value *v44;
  llvm::CmpInst **v45;
  uint64_t v46;
  llvm::Value *Select;
  llvm::Type *v48;
  _BYTE v49[32];
  __int16 v50;
  llvm::Value *v51;
  uint64_t v52;
  _BYTE v53[32];
  __int16 v54;

  FPExt = a2;
  v4 = *(_QWORD *)a2;
  v5 = (llvm::Value *)llvm::ConstantFP::get();
  v6 = (llvm::Value *)llvm::ConstantFP::get();
  v7 = (llvm::Value *)llvm::ConstantFP::get();
  v8 = (llvm::Value *)llvm::ConstantFP::get();
  if (v4 == *((_QWORD *)this + 19))
  {
    v9 = (llvm::Type *)*((_QWORD *)this + 21);
    v54 = 257;
    FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), FPExt, v9, (const llvm::Twine *)v53);
  }
  v10 = AGCLLVMBuilder::buildFma(this, FPExt, v6, v5);
  v54 = 257;
  FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)v5, (uint64_t)v10, (uint64_t)v53);
  v12 = AGCLLVMBuilder::buildFma(this, FPExt, v6, FSub);
  v13 = AGCLLVMBuilder::buildFma(this, FPExt, v7, v12);
  if (v4 == *((_QWORD *)this + 19))
  {
    v54 = 257;
    FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)v13, (uint64_t)v13, (uint64_t)v53);
    v32 = (llvm::Value *)llvm::ConstantFP::get();
    v33 = (llvm::Value *)llvm::ConstantFP::get();
    v34 = AGCLLVMBuilder::buildFma(this, FMul, v32, v33);
    v35 = (llvm::Value *)llvm::ConstantFP::get();
    v36 = AGCLLVMBuilder::buildFma(this, v34, FMul, v35);
    v37 = (llvm::Value *)llvm::ConstantFP::get();
    v38 = AGCLLVMBuilder::buildFma(this, v36, FMul, v37);
    v54 = 257;
    v39 = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)v13, (uint64_t)v38, (uint64_t)v53);
    v40 = llvm::ConstantFP::get();
    v54 = 257;
    FNeg = llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, v39, (uint64_t)v53);
    v50 = 257;
    llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v40, FNeg, (uint64_t)v49);
    v42 = *((_QWORD *)this + 25);
    v54 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v10, v42, (uint64_t)v53);
    v44 = (llvm::Value *)llvm::ConstantInt::get();
    v54 = 257;
    v45 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), Cast, v44, (const llvm::Twine *)v53);
    v46 = llvm::ConstantInt::get();
    v54 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, v45, v46, (uint64_t)v53);
    v54 = 257;
    Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    v48 = (llvm::Type *)*((_QWORD *)this + 19);
    v50 = 257;
    return llvm::IRBuilderBase::CreateFPTrunc((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), Select, v48, (const llvm::Twine *)v49);
  }
  else
  {
    v14 = AGCLLVMBuilder::buildFma(this, FPExt, v8, v13);
    v51 = v14;
    v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)"llvm.agx2.sinc.f32", 18, v4, v4);
    v54 = 257;
    v16 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v15 + 24), v15, (uint64_t)&v51, 1, (uint64_t)v53);
    v50 = 257;
    llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)v14, (uint64_t)v16, (uint64_t)v49);
    v17 = llvm::ConstantFP::get();
    Fabs = AGCLLVMTargetBuilder::CreateFabs(this, v51);
    v54 = 257;
    v52 = llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v17, (uint64_t)Fabs, (uint64_t)v53);
    v54 = 257;
    v19 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v15 + 24), v15, (uint64_t)&v52, 1, (uint64_t)v53);
    v20 = AGCLLVMTargetBuilder::CreateFabs(this, v51);
    v54 = 257;
    v21 = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)v20, (uint64_t)v53);
    v22 = AGCLLVMBuilder::buildFma(this, v19, v21, v19);
    v23 = *((_QWORD *)this + 25);
    v54 = 257;
    v24 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v10, v23, (uint64_t)v53);
    v25 = (llvm::Value *)llvm::ConstantInt::get();
    v54 = 257;
    v26 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8), v24, v25, (const llvm::Twine *)v53);
    v27 = llvm::ConstantInt::get();
    v54 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, v26, v27, (uint64_t)v53);
    v54 = 257;
    v28 = llvm::IRBuilderBase::CreateSelect();
    v54 = 257;
    llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)v22, (uint64_t)v53);
    v50 = 257;
    v29 = llvm::IRBuilderBase::CreateSelect();
    v54 = 257;
    llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v29, v28, (uint64_t)v53);
    AGCLLVMTargetBuilder::CreateFabs(this, FPExt);
    llvm::ConstantFP::get();
    v54 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    v50 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
}

uint64_t AGCLLVMAirBuiltinsGen7::buildSimdYield(AGCLLVMAirBuiltinsGen7 *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v4 = *((_QWORD *)this + 94);
  if (v4)
    *(_BYTE *)(v4 + 17) = 1;
  v5 = *((_QWORD *)this + 46);
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltinsGen7 *)((char *)this + 8));
  v10 = *((_DWORD *)this + 26);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *))(*(_QWORD *)v5 + 744))(v5, &v8, a2);
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildArctan2(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  char *v6;
  uint64_t FDiv;
  uint64_t v8;
  uint64_t Select;
  _BYTE v11[32];
  __int16 v12;

  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  v6 = (char *)this + 8;
  v12 = 257;
  FDiv = llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v11);
  v8 = (*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t))(*(_QWORD *)this + 32))(this, FDiv);
  v12 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v12 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v12 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v12 = 257;
  llvm::IRBuilderBase::CreateFAdd((uint64_t)v6, v8, Select, (uint64_t)v11);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *AGCLLVMAirBuiltins::buildMetalSinCos(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  llvm::Type **v7;
  llvm::Value *v9;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v12;
  uint64_t Element;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  _BYTE v19[32];
  __int16 v20;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12
    && (v6 = *(unsigned int *)(*(_QWORD *)a2 + 32), (_DWORD)v6 != 1))
  {
    v9 = (llvm::Value *)llvm::UndefValue::get();
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v20 = 257;
        v12 = (llvm::Value *)llvm::ConstantInt::get();
        Element = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMAirBuiltins *)((char *)this + 8), a2, v12, (const llvm::Twine *)v19);
        v14 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, Element, 1);
        v20 = 257;
        v15 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltins *)((char *)this + 8), InsertElement, v14, v15, (const llvm::Twine *)v19);
        v16 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMAirBuiltins *, uint64_t, _QWORD))(*(_QWORD *)this + 24))(this, Element, 0);
        v20 = 257;
        v17 = (llvm::Value *)llvm::ConstantInt::get();
        v9 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMAirBuiltins *)((char *)this + 8), v9, v16, v17, (const llvm::Twine *)v19);
      }
    }
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)this + 1, (llvm::Type **)InsertElement, (uint64_t)a3, 0);
    return v9;
  }
  else
  {
    v7 = (llvm::Type **)(*(uint64_t (**)(AGCLLVMAirBuiltins *, llvm::Value *, uint64_t))(*(_QWORD *)this + 24))(this, a2, 1);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)this + 1, v7, (uint64_t)a3, 0);
    return (llvm::Value *)(*(uint64_t (**)(AGCLLVMAirBuiltins *, llvm::Value *, _QWORD))(*(_QWORD *)this + 24))(this, a2, 0);
  }
}

llvm::Value *AGCLLVMAirBuiltins::buildArccosh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  char *v4;
  uint64_t FMul;
  uint64_t v6;
  llvm::Value *FSub;
  llvm::Value *Sqrt;
  llvm::Value *FAdd;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (char *)this + 8;
  v13 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v12);
  v6 = llvm::ConstantFP::get();
  v11[16] = 257;
  FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)v4, FMul, v6, (uint64_t)v11);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FSub);
  v13 = 257;
  FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, (uint64_t)a2, (uint64_t)Sqrt, (uint64_t)v12);
  return AGCLLVMTargetBuilder::CreateLog(this, FAdd);
}

llvm::Value *AGCLLVMTargetBuilder::CreateLog(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *((_QWORD *)this + 46);
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMTargetBuilder *)((char *)this + 8));
  v5 = *((_DWORD *)this + 26);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.log");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

llvm::Value *AGCLLVMAirBuiltins::buildArcsinh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  char *v4;
  uint64_t FMul;
  uint64_t v6;
  llvm::Value *FAdd;
  llvm::Value *Sqrt;
  llvm::Value *v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (char *)this + 8;
  v13 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v12);
  v6 = llvm::ConstantFP::get();
  v11[16] = 257;
  FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, FMul, v6, (uint64_t)v11);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FAdd);
  v13 = 257;
  v9 = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, (uint64_t)a2, (uint64_t)Sqrt, (uint64_t)v12);
  return AGCLLVMTargetBuilder::CreateLog(this, v9);
}

uint64_t AGCLLVMAirBuiltins::buildArctanh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t FAdd;
  uint64_t FSub;
  llvm::Value *FDiv;
  llvm::Value *Log;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v4 = llvm::ConstantFP::get();
  v12 = 257;
  FAdd = llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, (uint64_t)a2, (uint64_t)v11);
  v12 = 257;
  FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v4, (uint64_t)a2, (uint64_t)v11);
  v12 = 257;
  FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, FAdd, FSub, (uint64_t)v11);
  Log = AGCLLVMTargetBuilder::CreateLog(this, FDiv);
  v9 = llvm::ConstantFP::get();
  v12 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)Log, v9, (uint64_t)v11);
}

uint64_t AGCLLVMAirBuiltins::buildCosh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  llvm::Value *Exp;
  llvm::Value *FNeg;
  llvm::Value *v6;
  uint64_t FAdd;
  uint64_t v8;
  _WORD v10[20];
  _BYTE v11[32];
  __int16 v12;

  Exp = AGCLLVMTargetBuilder::CreateExp(this, a2);
  v12 = 257;
  FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)a2, (uint64_t)v11);
  v6 = AGCLLVMTargetBuilder::CreateExp(this, FNeg);
  v12 = 257;
  FAdd = llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, (uint64_t)Exp, (uint64_t)v6, (uint64_t)v11);
  v8 = llvm::ConstantFP::get();
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, FAdd, v8, (uint64_t)v10);
}

llvm::Value *AGCLLVMTargetBuilder::CreateExp(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *((_QWORD *)this + 46);
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMTargetBuilder *)((char *)this + 8));
  v5 = *((_DWORD *)this + 26);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.exp");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildFmod(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::IRBuilderBase *v6;
  uint64_t *FDiv;
  uint64_t v8;
  int v9;
  llvm::Value *v10;
  uint64_t FMul;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v6 = (AGCLLVMAirBuiltins *)((char *)this + 8);
  v18 = 257;
  FDiv = (uint64_t *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v17);
  v8 = *((_QWORD *)this + 46);
  v19 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation(v6);
  v9 = *((_DWORD *)this + 26);
  v21 = v9;
  v13 = v19;
  v14 = v20;
  if (v20)
  {
    llvm::MetadataTracking::track();
    v9 = v21;
  }
  v15 = v9;
  v10 = AGCLLVMTargetLowerer::CallFPIntrinsic(v8, (uint64_t)&v13, FDiv, "llvm.trunc");
  if (v14)
    llvm::MetadataTracking::untrack();
  if (v20)
    llvm::MetadataTracking::untrack();
  v18 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)v6, (uint64_t)v10, (uint64_t)a3, (uint64_t)v17);
  v16 = 257;
  return llvm::IRBuilderBase::CreateFSub((uint64_t)v6, (uint64_t)a2, FMul, (uint64_t)&v13);
}

uint64_t AGCLLVMAirBuiltins::buildMod(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  char *v6;
  llvm::Value *FDiv;
  llvm::Value *Floor;
  uint64_t FMul;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v6 = (char *)this + 8;
  v13 = 257;
  FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v12);
  Floor = AGCLLVMTargetBuilder::CreateFloor(this, FDiv);
  v13 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)v6, (uint64_t)Floor, (uint64_t)a3, (uint64_t)v12);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateFSub((uint64_t)v6, (uint64_t)a2, FMul, (uint64_t)v11);
}

uint64_t AGCLLVMAirBuiltins::buildFract(llvm::Type **this, llvm::Value *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::CmpInst **Shl;
  llvm::Value *Floor;
  llvm::Value *v14;
  _BYTE v15[32];
  __int16 v16;

  v4 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    if (*(_BYTE *)(**(_QWORD **)(v4 + 16) + 8) == 2)
    {
      v5 = *(_DWORD *)(v4 + 32);
      v6 = (llvm::Value *)llvm::ConstantInt::get();
      v7 = (uint64_t)AGCLLVMBuilder::splat((AGCLLVMBuilder *)this, v5, v6);
LABEL_6:
      v8 = v7;
      v9 = (llvm::Value *)AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)this, a2, this[25]);
      v16 = 257;
      v10 = (llvm::Value *)llvm::ConstantInt::get();
      Shl = (llvm::CmpInst **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(this + 1), v9, v10, (const llvm::Twine *)v15);
      v16 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, 32, Shl, v8, (uint64_t)v15);
      Floor = AGCLLVMTargetBuilder::CreateFloor((AGCLLVMTargetBuilder *)this, a2);
      v16 = 257;
      llvm::IRBuilderBase::CreateFSub((uint64_t)(this + 1), (uint64_t)a2, (uint64_t)Floor, (uint64_t)v15);
      llvm::ConstantFP::get();
      v16 = 257;
      llvm::IRBuilderBase::CreateFCmpHelper();
      llvm::ConstantFP::get();
      llvm::IRBuilderBase::CreateSelect();
      llvm::ConstantFP::get();
      v16 = 257;
      return llvm::IRBuilderBase::CreateSelect();
    }
  }
  else if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 2)
  {
    v7 = llvm::ConstantInt::get();
    goto LABEL_6;
  }
  v14 = AGCLLVMTargetBuilder::CreateFloor((AGCLLVMTargetBuilder *)this, a2);
  v16 = 257;
  return llvm::IRBuilderBase::CreateFSub((uint64_t)(this + 1), (uint64_t)a2, (uint64_t)v14, (uint64_t)v15);
}

uint64_t AGCLLVMAirBuiltins::buildFastFract(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  char *v4;
  llvm::Value *Floor;
  uint64_t FSub;
  uint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *Cast;
  _BYTE v15[32];
  __int16 v16;

  v4 = (char *)this + 8;
  Floor = AGCLLVMTargetBuilder::CreateFloor(this, a2);
  v16 = 257;
  FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)v4, (uint64_t)a2, (uint64_t)Floor, (uint64_t)v15);
  v7 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v9 = v8;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v9 = *(unsigned __int8 *)(**(_QWORD **)(v7 + 16) + 8);
  if (v9 == 2)
  {
    v10 = (_QWORD *)*((_QWORD *)this + 94);
    if (!v10 || (*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 136) & 4) == 0)
    {
      if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
        v8 = *(unsigned __int8 *)(**(_QWORD **)(v7 + 16) + 8);
      if (v8 == 2)
      {
        v11 = llvm::ConstantInt::get();
        v12 = *((_QWORD *)this + 21);
      }
      else
      {
        v11 = llvm::ConstantInt::get();
        v12 = *((_QWORD *)this + 19);
      }
      v16 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v4, 49, v11, v12, (uint64_t)v15);
      if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
        AGCLLVMBuilder::splat(this, *(_DWORD *)(v7 + 32), Cast);
      AGCLLVMTargetBuilder::CreateFabs(this, a2);
      v16 = 257;
      llvm::IRBuilderBase::CreateFCmpHelper();
      llvm::ConstantFP::get();
      v16 = 257;
      return llvm::IRBuilderBase::CreateSelect();
    }
  }
  return FSub;
}

uint64_t AGCLLVMAirBuiltins::buildFmad(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  char *v5;
  uint64_t FMul;
  _BYTE v8[32];
  __int16 v9;

  v5 = (char *)this + 8;
  v9 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v8);
  v9 = 257;
  return llvm::IRBuilderBase::CreateFAdd((uint64_t)v5, FMul, (uint64_t)a4, (uint64_t)v8);
}

uint64_t AGCLLVMAirBuiltins::buildFastFMin(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  _QWORD *v6;
  int v7;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  int v15;

  v6 = (_QWORD *)*((_QWORD *)this + 94);
  if (v6)
    LODWORD(v6) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 136) & 2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  else
    v7 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  v9 = v7 == 2 && (_DWORD)v6 == 0;
  v10 = *((_QWORD *)this + 46);
  v13 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v15 = *((_DWORD *)this + 26);
  v11 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *, _BOOL8))(*(_QWORD *)v10 + 48))(v10, &v13, a2, a3, v9);
  if (v14)
    llvm::MetadataTracking::untrack();
  return v11;
}

llvm::Value *AGCLLVMAirBuiltins::buildExp10(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  llvm::Value *FMul;
  _BYTE v7[32];
  __int16 v8;

  v4 = llvm::ConstantFP::get();
  v8 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, v4, (uint64_t)v7);
  return AGCLLVMTargetBuilder::CreateExp2(this, FMul);
}

llvm::Value *AGCLLVMTargetBuilder::CreateExp2(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *((_QWORD *)this + 46);
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMTargetBuilder *)((char *)this + 8));
  v5 = *((_DWORD *)this + 26);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.exp2");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildLog10(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  llvm::Value *Log2;
  _BYTE v7[32];
  __int16 v8;

  v4 = llvm::ConstantFP::get();
  Log2 = AGCLLVMTargetBuilder::CreateLog2(this, a2);
  v8 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)Log2, v4, (uint64_t)v7);
}

llvm::Value *AGCLLVMTargetBuilder::CreateLog2(AGCLLVMTargetBuilder *this, llvm::Value *a2)
{
  uint64_t v4;
  int v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v4 = *((_QWORD *)this + 46);
  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMTargetBuilder *)((char *)this + 8));
  v5 = *((_DWORD *)this + 26);
  v10 = v5;
  v11 = v8;
  v12 = v9;
  if (v9)
  {
    llvm::MetadataTracking::track();
    v5 = v10;
  }
  v13 = v5;
  v6 = AGCLLVMTargetLowerer::CallFPIntrinsic(v4, (uint64_t)&v11, (uint64_t *)a2, "llvm.log2");
  if (v12)
    llvm::MetadataTracking::untrack();
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMAirBuiltins::buildRound(llvm::Type **this, llvm::Value *a2)
{
  uint64_t Select;
  llvm::Value *FAdd;
  llvm::Type *v6;
  llvm::Value *FPToSI;
  llvm::Type *v8;
  uint64_t v10;
  __int16 v11;
  _BYTE v12[32];
  __int16 v13;

  AGCLLVMTargetBuilder::CreateFabs((AGCLLVMTargetBuilder *)this, a2);
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateSelect();
  v11 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v13 = 257;
  FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)(this + 1), (uint64_t)a2, Select, (uint64_t)v12);
  v6 = this[25];
  v13 = 257;
  FPToSI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToSI((llvm::IRBuilderBase *)(this + 1), FAdd, v6, (const llvm::Twine *)v12);
  v8 = this[21];
  v11 = 257;
  llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)(this + 1), FPToSI, v8, (const llvm::Twine *)&v10);
  llvm::ConstantFP::get();
  v13 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v13 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildSinh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  llvm::Value *Exp;
  llvm::Value *FNeg;
  llvm::Value *v6;
  uint64_t FSub;
  uint64_t v8;
  _WORD v10[20];
  _BYTE v11[32];
  __int16 v12;

  Exp = AGCLLVMTargetBuilder::CreateExp(this, a2);
  v12 = 257;
  FNeg = (llvm::Value *)llvm::IRBuilderBase::CreateFNeg((uint64_t)this + 8, (uint64_t)a2, (uint64_t)v11);
  v6 = AGCLLVMTargetBuilder::CreateExp(this, FNeg);
  v12 = 257;
  FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)Exp, (uint64_t)v6, (uint64_t)v11);
  v8 = llvm::ConstantFP::get();
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, FSub, v8, (uint64_t)v10);
}

uint64_t AGCLLVMAirBuiltins::buildTanh(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  char *v4;
  uint64_t v5;
  llvm::Value *FMul;
  llvm::Value *Exp;
  uint64_t v8;
  uint64_t FSub;
  uint64_t v10;
  uint64_t FAdd;
  _BYTE v13[32];
  __int16 v14;

  v4 = (char *)this + 8;
  v5 = llvm::ConstantFP::get();
  v14 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v4, (uint64_t)a2, v5, (uint64_t)v13);
  Exp = AGCLLVMTargetBuilder::CreateExp(this, FMul);
  v8 = llvm::ConstantFP::get();
  v14 = 257;
  FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)v4, (uint64_t)Exp, v8, (uint64_t)v13);
  v10 = llvm::ConstantFP::get();
  v14 = 257;
  FAdd = llvm::IRBuilderBase::CreateFAdd((uint64_t)v4, (uint64_t)Exp, v10, (uint64_t)v13);
  v14 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)v4, FSub, FAdd, (uint64_t)v13);
}

llvm::Value *llvm::IRBuilderBase::CreateIntCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, BOOL a4, const llvm::Twine *a5)
{
  llvm::Value *IntegerCast;
  BOOL v8;

  IntegerCast = (llvm::Value *)a2;
  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      IntegerCast = (llvm::Value *)llvm::CastInst::CreateIntegerCast();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)IntegerCast, (uint64_t)a5);
    }
    else
    {
      IntegerCast = (llvm::Value *)(*(uint64_t (**)(_QWORD, llvm::Type **))(**((_QWORD **)this + 9) + 248))(*((_QWORD *)this + 9), a2);
      if (IntegerCast)
        v8 = *((unsigned __int8 *)IntegerCast + 16) >= 0x1Cu;
      else
        v8 = 0;
      if (v8)
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)IntegerCast, (uint64_t)a5);
    }
  }
  return IntegerCast;
}

uint64_t llvm::StringMap<AGCLLVMAirBuiltins::ConversionFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 25));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<char,true>::push_back(uint64_t result, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if ((unint64_t)(v4 + 1) > *(_QWORD *)(result + 16))
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod();
    v4 = v3[1];
  }
  *(_BYTE *)(*v3 + v4) = a2;
  ++v3[1];
  return result;
}

uint64_t AGCLLVMAirBuiltins::buildPack(uint64_t a1, llvm::Value **a2)
{
  int Key;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  llvm::Value *v10;
  llvm::Type *v11;
  llvm::Value *NullValue;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  _BYTE v31[32];
  __int16 v32;

  AGCLLVMAirBuiltins::initializePackUnpackMap((AGCLLVMAirBuiltins *)a1);
  Key = llvm::StringMapImpl::FindKey();
  v5 = AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map;
  if (Key == -1)
    v6 = dword_1ED8391E0;
  else
    v6 = Key;
  v7 = *(_QWORD *)(AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map + 8 * v6);
  switch(*(_DWORD *)(v7 + 8))
  {
    case 0:
      return (*(uint64_t (**)(uint64_t, llvm::Value *, uint64_t))(*(_QWORD *)a1 + 96))(a1, *a2, v7 + 12);
    case 1:
      v9 = *(_QWORD *)*a2;
      if (*(_DWORD *)(v9 + 32) == 3)
      {
        if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
          v9 = **(_QWORD **)(v9 + 16);
        v10 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, *a2, 4);
        *a2 = v10;
        NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)v9, v11);
        v32 = 257;
        v13 = (llvm::Value *)llvm::ConstantInt::get();
        *a2 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v10, NullValue, v13, (const llvm::Twine *)v31);
      }
      v14 = *(_QWORD *)(a1 + 368);
      v28 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v30 = *(_DWORD *)(a1 + 104);
      v15 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v14 + 104))(v14, &v28, 5, *(_QWORD *)(a1 + 200), *a2, 1, *(unsigned __int8 *)(*(_QWORD *)(v5 + 8 * v6) + 12));
      if (v29)
        goto LABEL_17;
      return v15;
    case 2:
      v16 = *(_QWORD *)(a1 + 368);
      v25 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v27 = *(_DWORD *)(a1 + 104);
      v15 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v16 + 104))(v16, &v25, 0, *(_QWORD *)(a1 + 192), *a2, 1, 0);
      if (!v26)
        return v15;
      goto LABEL_17;
    case 3:
      v17 = *(_QWORD *)(a1 + 368);
      v22 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v24 = *(_DWORD *)(a1 + 104);
      v15 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v17 + 104))(v17, &v22, 7, *(_QWORD *)(a1 + 192), *a2, 1, 0);
      if (!v23)
        return v15;
      goto LABEL_17;
    case 4:
      v18 = *(_QWORD *)(a1 + 368);
      v19 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v21 = *(_DWORD *)(a1 + 104);
      v15 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v18 + 104))(v18, &v19, 8, *(_QWORD *)(a1 + 192), *a2, 1, 0);
      if (v20)
LABEL_17:
        llvm::MetadataTracking::untrack();
      return v15;
    case 5:
      return (*(uint64_t (**)(uint64_t, llvm::Value *))(*(_QWORD *)a1 + 112))(a1, *a2);
    default:
      return 0;
  }
}

void AGCLLVMAirBuiltins::initializePackUnpackMap(AGCLLVMAirBuiltins *this)
{
  unsigned __int8 v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  char *v11;
  unsigned __int8 v12;
  std::string *v13;
  std::string::size_type size;
  const void *p_p;
  size_t v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  char v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  const std::string::value_type *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  std::string *v34;
  std::string::size_type v35;
  uint64_t v36;
  char v37;
  char v38;
  std::string *v39;
  std::string::size_type v40;
  uint64_t v41;
  char v42;
  char v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  char v49;
  char v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  uint64_t v55;
  char v56;
  char v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  char v62;
  char v63;
  uint64_t v64;
  char v65;
  char v66;
  void *__p;
  size_t v68;
  unsigned __int8 v69;
  std::string v70;
  std::string v71;

  if ((v1 & 1) == 0
  {
    AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map = 0;
    *(_QWORD *)&dword_1ED8391E0 = 0;
    qword_1ED8391E8 = 0x1000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map, &dword_1C3C54000);
  }
  v2 = dword_1ED8391E4;
  if (!dword_1ED8391E4)
  {
    v3 = 0;
    do
    {
      v4 = 0;
      v5 = 0;
      v63 = v2;
      v6 = off_1E7E8B158[v3];
      do
      {
        v7 = 0;
        v65 = v4;
        v8 = off_1E7E8B168[v5];
        do
        {
          v9 = atoi(v6);
          v10 = atoi(v8);
          v11 = off_1E7E8B178[v7];
          v12 = atoi(v11);
          std::string::basic_string[abi:nn180100]<0>(&v71, ".");
          if ((v12 & 0xFE) != 0)
          {
            std::string::append(&v71, "v");
            std::string::append(&v71, v11);
          }
          std::string::append(&v71, "f");
          std::string::append(&v71, v6);
          std::string::basic_string[abi:nn180100]<0>(&v70, v11);
          std::string::append(&v70, "x");
          std::string::append(&v70, v8);
          if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = &v71;
          else
            v13 = (std::string *)v71.__r_.__value_.__r.__words[0];
          if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
          else
            size = v71.__r_.__value_.__l.__size_;
          std::string::append(&v70, (const std::string::value_type *)v13, size);
          std::operator+<char>();
          if ((v69 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v69 & 0x80u) == 0)
            v16 = v69;
          else
            v16 = v68;
          v17 = ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v12 << 48);
          *(_QWORD *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(p_p, v16)+ 8) = v17 | 0x100000000000000;
          if ((char)v69 < 0)
            operator delete(__p);
          std::operator+<char>();
          if ((v69 & 0x80u) == 0)
            v18 = &__p;
          else
            v18 = __p;
          if ((v69 & 0x80u) == 0)
            v19 = v69;
          else
            v19 = v68;
          *(_QWORD *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v18, v19)+ 8) = v17;
          if ((char)v69 < 0)
            operator delete(__p);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v71.__r_.__value_.__l.__data_);
          ++v7;
        }
        while (v7 != 3);
        v4 = 1;
        v5 = 1;
      }
      while ((v65 & 1) == 0);
      v2 = 1;
      v3 = 1;
    }
    while ((v63 & 1) == 0);
    v20 = 0;
    v21 = 0;
    v64 = 0x10000000001;
    do
    {
      v62 = v20;
      v22 = 1;
      do
      {
        v66 = v22;
        v23 = (v22 & 1) == 0;
        if ((v22 & 1) != 0)
          v24 = ".rgb10.v3f";
        else
          v24 = ".rgb10a2.v4f";
        v25 = 0x1000000000000;
        if (!v23)
          v25 = 0;
        v26 = v64 | v25;
        v27 = 1;
        do
        {
          v28 = v27;
          if ((v27 & 1) != 0)
            v29 = "unorm";
          else
            v29 = "snorm";
          if ((v27 & 1) != 0)
            v30 = 0;
          else
            v30 = 0x100000000;
          v31 = v26 | v30;
          v32 = 1;
          do
          {
            v33 = v32;
            std::string::basic_string[abi:nn180100]<0>(&v71, v29);
            std::string::append(&v71, v24);
            std::string::append(&v71, off_1E7E8B158[v21]);
            if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v34 = &v71;
            else
              v34 = (std::string *)v71.__r_.__value_.__r.__words[0];
            if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v35 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
            else
              v35 = v71.__r_.__value_.__l.__size_;
            *(_QWORD *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v34, v35)+ 8) = v31;
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v71.__r_.__value_.__l.__data_);
            v32 = 0;
          }
          while ((v33 & 1) != 0);
          v27 = 0;
        }
        while ((v28 & 1) != 0);
        v22 = 0;
      }
      while ((v66 & 1) != 0);
      v64 = 1;
      v20 = 1;
      v21 = 1;
    }
    while ((v62 & 1) == 0);
    v36 = 0;
    v37 = 1;
    do
    {
      v38 = v37;
      std::string::basic_string[abi:nn180100]<0>(&v71, "unorm.rgb565.v3f");
      std::string::append(&v71, off_1E7E8B158[v36]);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v71;
      else
        v39 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v40 = v71.__r_.__value_.__l.__size_;
      *(_QWORD *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v39, v40)+ 8) = 2;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v37 = 0;
      v36 = 1;
    }
    while ((v38 & 1) != 0);
    v41 = 0;
    v42 = 1;
    do
    {
      v43 = v42;
      std::string::basic_string[abi:nn180100]<0>(&v70, "unorm4x8.srgb.v4f");
      v44 = std::string::append(&v70, off_1E7E8B158[v41]);
      v45 = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v71;
      else
        v46 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v47 = v71.__r_.__value_.__l.__size_;
      *(_QWORD *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v46, v47)+ 8) = 5;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v42 = 0;
      v41 = 1;
    }
    while ((v43 & 1) != 0);
    v48 = 0;
    v49 = 1;
    do
    {
      v50 = v49;
      std::string::basic_string[abi:nn180100]<0>(&v70, "unorm.rg11b10f.v3f");
      v51 = std::string::append(&v70, off_1E7E8B158[v48]);
      v52 = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v71;
      else
        v53 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v54 = v71.__r_.__value_.__l.__size_;
      *(_QWORD *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v53, v54)+ 8) = 3;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v49 = 0;
      v48 = 1;
    }
    while ((v50 & 1) != 0);
    v55 = 0;
    v56 = 1;
    do
    {
      v57 = v56;
      std::string::basic_string[abi:nn180100]<0>(&v70, "unorm.rgb9e5.v3f");
      v58 = std::string::append(&v70, off_1E7E8B158[v55]);
      v59 = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v71;
      else
        v60 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v61 = v71.__r_.__value_.__l.__size_;
      *(_QWORD *)(*llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(v60, v61)+ 8) = 4;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      v56 = 0;
      v55 = 1;
    }
    while ((v57 & 1) != 0);
  }
}

uint64_t llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *llvm::StringMap<AGCLLVMAirBuiltins::PackUnpackFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1ED8391E8) = qword_1ED8391E8 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 17, 8);
  v9 = v8;
  v10 = v8 + 16;
  if (a2)
    memcpy((void *)(v8 + 16), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_DWORD *)(v9 + 8) = 0;
  *i = v9;
  ++dword_1ED8391E4;
  for (i = (uint64_t *)(AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map));
        !*i || *i == -8;
  return i;
}

uint64_t AGCLLVMAirBuiltins::buildUnpack(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  int Key;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  int v45;

  AGCLLVMAirBuiltins::initializePackUnpackMap((AGCLLVMAirBuiltins *)a1);
  Key = llvm::StringMapImpl::FindKey();
  v9 = AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map;
  if (Key == -1)
    v10 = dword_1ED8391E0;
  else
    v10 = Key;
  v11 = *(_QWORD *)(AGCLLVMAirBuiltins::initializePackUnpackMap(void)::pack_unpack_map + 8 * v10);
  switch(*(_DWORD *)(v11 + 8))
  {
    case 0:
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 104))(a1, *a2, v11 + 12);
    case 1:
      if (*(_BYTE *)(v11 + 14))
        v17 = 5;
      else
        v17 = 4;
      v18 = *(_BYTE *)(v11 + 13) == 0;
      v19 = 152;
      if (v18)
        v19 = 168;
      v20 = *(_QWORD *)(a1 + v19);
      v21 = *(_QWORD *)(a1 + 368);
      v43 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v45 = *(_DWORD *)(a1 + 104);
      v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v21 + 112))(v21, &v43, v17, v20, *a2, 1, *(unsigned __int8 *)(*(_QWORD *)(v9 + 8 * v10) + 12));
      if (v44)
        goto LABEL_50;
      return v16;
    case 2:
      if (a4 > 2)
      {
        v22 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v22 == 26161)
        {
          v23 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v22 < 0x6631)
        {
          v23 = -1;
        }
        else
        {
          v23 = 1;
        }
        if (v23)
          v13 = (uint64_t *)(a1 + 168);
        else
          v13 = (uint64_t *)(a1 + 152);
      }
      else
      {
        v13 = (uint64_t *)(a1 + 168);
      }
      v28 = *v13;
      v29 = *(_QWORD *)(a1 + 368);
      v40 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v42 = *(_DWORD *)(a1 + 104);
      v16 = (*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v29 + 112))(v29, &v40, 0, v28, *a2, 1, 0);
      if (!v41)
        return v16;
      goto LABEL_50;
    case 3:
      if (a4 > 2)
      {
        v24 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v24 == 26161)
        {
          v25 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v24 < 0x6631)
        {
          v25 = -1;
        }
        else
        {
          v25 = 1;
        }
        if (v25)
          v14 = (uint64_t *)(a1 + 168);
        else
          v14 = (uint64_t *)(a1 + 152);
      }
      else
      {
        v14 = (uint64_t *)(a1 + 168);
      }
      v30 = *v14;
      v31 = *(_QWORD *)(a1 + 368);
      v37 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v39 = *(_DWORD *)(a1 + 104);
      v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v31 + 112))(v31, &v37, 7, v30, *a2, 1, 0);
      if (!v38)
        return v16;
      goto LABEL_50;
    case 4:
      if (a4 > 2)
      {
        v26 = bswap32(*(unsigned __int16 *)(a3 + a4 - 3)) >> 16;
        if (v26 == 26161)
        {
          v27 = *(unsigned __int8 *)(a3 + a4 - 1) - 54;
        }
        else if (v26 < 0x6631)
        {
          v27 = -1;
        }
        else
        {
          v27 = 1;
        }
        if (v27)
          v15 = (uint64_t *)(a1 + 168);
        else
          v15 = (uint64_t *)(a1 + 152);
      }
      else
      {
        v15 = (uint64_t *)(a1 + 168);
      }
      v32 = *v15;
      v33 = *(_QWORD *)(a1 + 368);
      v34 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v36 = *(_DWORD *)(a1 + 104);
      v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v33 + 112))(v33, &v34, 8, v32, *a2, 1, 0);
      if (v35)
LABEL_50:
        llvm::MetadataTracking::untrack();
      return v16;
    case 5:
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)a1 + 120))(a1, *a2, a3, a4);
    default:
      return 0;
  }
}

uint64_t AGCLLVMAirBuiltins::buildClamp(AGCLLVMBuilder *this, uint64_t a2, unsigned __int8 *a3)
{
  int v4;
  llvm::Value *v5;
  llvm::CmpInst **v6;
  llvm::Value *v8;
  llvm::CmpInst **v9;
  llvm::CmpInst **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::CmpInst *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v4 = *a3;
  if (v4 == 117)
  {
    v8 = *(llvm::Value **)(a2 + 16);
    v9 = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(this, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), 34);
    return AGCLLVMBuilder::buildICmpSel(this, v9, v8, 36);
  }
  else if (v4 == 115)
  {
    v5 = *(llvm::Value **)(a2 + 16);
    v6 = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(this, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), 38);
    return AGCLLVMBuilder::buildICmpSel(this, v6, v5, 40);
  }
  else
  {
    v10 = *(llvm::CmpInst ***)a2;
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *((_QWORD *)this + 46);
    v16 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMBuilder *)((char *)this + 8));
    v18 = *((_DWORD *)this + 26);
    v14 = *v10;
    if ((*((_DWORD *)*v10 + 2) & 0xFE) == 0x12)
      v14 = (llvm::CmpInst *)**((_QWORD **)v14 + 2);
    v15 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::CmpInst **, uint64_t, uint64_t, BOOL))(*(_QWORD *)v13 + 80))(v13, &v16, v10, v11, v12, v14 == *((llvm::CmpInst **)this + 21));
    if (v17)
      llvm::MetadataTracking::untrack();
    return v15;
  }
}

uint64_t AGCLLVMAirBuiltins::buildPopCount(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  char *v10;
  llvm::Value *v11;
  _BYTE v13[32];
  __int16 v14;
  _BYTE v15[32];
  __int16 v16;
  uint64_t Cast;

  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)this + 24);
  v6 = *(_QWORD *)a2 == *((_QWORD *)this + 23) || v4 == v5;
  v7 = *(_QWORD *)a2;
  if (v6)
  {
    if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 46) + 816) + 44))
      v7 = *((_QWORD *)this + 25);
    else
      v7 = *((_QWORD *)this + 24);
  }
  if (v7 == v5)
    v8 = "llvm.ctpop.i16";
  else
    v8 = "llvm.ctpop.i32";
  v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)v8, 14, v4, v4);
  v10 = (char *)this + 8;
  v16 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, (uint64_t)a2, v7, (uint64_t)v15);
  v14 = 257;
  v11 = llvm::IRBuilderBase::CreateCall((uint64_t)v10, *(_QWORD *)(v9 + 24), v9, (uint64_t)&Cast, 1, (uint64_t)v13);
  v16 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, (uint64_t)v11, v4, (uint64_t)v15);
}

uint64_t AGCLLVMAirBuiltins::buildBitMask(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  llvm::Value *v4;
  llvm::Value *Shl;
  _WORD v7[20];
  _BYTE v8[32];
  __int16 v9;

  v4 = (llvm::Value *)llvm::ConstantInt::get();
  this = (AGCLLVMAirBuiltins *)((char *)this + 8);
  v9 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(this, v4, a2, (const llvm::Twine *)v8);
  v7[16] = 257;
  return llvm::IRBuilderBase::CreateSub(this, Shl, v4, (const llvm::Twine *)v7);
}

uint64_t AGCLLVMAirBuiltins::buildExtractBits(AGCLLVMAirBuiltins *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Constant *v8;
  uint64_t v9;
  llvm::IRBuilderBase *v10;
  llvm::Value *Cast;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::Value *LShr;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *Sub;
  llvm::Value *Shl;
  llvm::CmpInst **v20;
  uint64_t v21;
  llvm::Type *v22;
  llvm::Value *AllOnesValue;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t Select;
  uint64_t v28;
  _BYTE v29[32];
  __int16 v30;
  _BYTE v31[32];
  __int16 v32;

  v5 = *(uint64_t **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v28 = **(_QWORD **)a2;
  v7 = 200;
  if (*(_DWORD *)(v28 + 8) >> 8 == 64)
    v7 = 208;
  v8 = *(llvm::Constant **)((char *)a1 + v7);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = (AGCLLVMAirBuiltins *)((char *)a1 + 8);
  v32 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 39, (uint64_t)v5, (uint64_t)v8, (uint64_t)v31);
  v32 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, v6, (uint64_t)v8, (uint64_t)v31);
  v32 = 257;
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, v9, (uint64_t)v8, (uint64_t)v31);
  v32 = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v10, Cast, v12, (const llvm::Twine *)v31);
  v15 = (llvm::Value *)AGCLLVMAirBuiltins::buildBitMask(a1, v13);
  v30 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v10, LShr, v15, (const llvm::Twine *)v29);
  if (*a3 == 115)
  {
    v17 = (llvm::Value *)llvm::ConstantInt::get();
    v32 = 257;
    Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v10, v13, v17, (const llvm::Twine *)v31);
    v30 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v10, v17, Sub, (const llvm::Twine *)v29);
    v32 = 257;
    v20 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v10, v16, Shl, (const llvm::Twine *)v31);
    v21 = llvm::ConstantInt::get();
    v30 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v10, 33, v20, v21, (uint64_t)v29);
    AllOnesValue = (llvm::Value *)llvm::Constant::getAllOnesValue(v8, v22);
    v32 = 257;
    v24 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v10, AllOnesValue, v13, (const llvm::Twine *)v31);
    v30 = 257;
    llvm::IRBuilderBase::CreateOr(v10, v16, v24, (const llvm::Twine *)v29);
    v32 = 257;
    llvm::IRBuilderBase::CreateSelect();
  }
  v25 = llvm::ConstantInt::get();
  v32 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)v10, 32, (llvm::CmpInst **)v13, v25, (uint64_t)v31);
  v30 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v32 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, Select, v28, (uint64_t)v31);
}

uint64_t AGCLLVMAirBuiltins::buildInsertBits(AGCLLVMAirBuiltins *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::IRBuilderBase *v10;
  llvm::Value *Cast;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::Value *Shl;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Value *Not;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *v20;
  uint64_t v21;
  uint64_t Select;
  _BYTE v24[32];
  __int16 v25;
  _BYTE v26[32];
  __int16 v27;

  v4 = *(uint64_t **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = **(_QWORD **)a2;
  v6 = 200;
  if (*(_DWORD *)(v5 + 8) >> 8 == 64)
    v6 = 208;
  v7 = *(_QWORD *)((char *)a1 + v6);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = (AGCLLVMAirBuiltins *)((char *)a1 + 8);
  v27 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 39, v8, v7, (uint64_t)v26);
  v27 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, v9, v7, (uint64_t)v26);
  v13 = (llvm::Value *)AGCLLVMAirBuiltins::buildBitMask(a1, v12);
  v27 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v10, v13, Cast, (const llvm::Twine *)v26);
  v27 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, (uint64_t)v4, v7, (uint64_t)v26);
  v27 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 39, v3, v7, (uint64_t)v26);
  v27 = 257;
  Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v10, Shl, (const llvm::Twine *)v26);
  v25 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v10, v15, Not, (const llvm::Twine *)v24);
  v27 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v10, v16, Cast, (const llvm::Twine *)v26);
  v25 = 257;
  v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v10, v19, Shl, (const llvm::Twine *)v24);
  v27 = 257;
  llvm::IRBuilderBase::CreateOr(v10, v18, v20, (const llvm::Twine *)v26);
  v21 = llvm::ConstantInt::get();
  v27 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)v10, 32, (llvm::CmpInst **)v12, v21, (uint64_t)v26);
  v25 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v27 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, Select, v5, (uint64_t)v26);
}

uint64_t AGCLLVMAirBuiltins::buildReverseBits(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *Cast;
  llvm::Value *v14;
  uint64_t LShr;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  uint64_t v22;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::Value *Shl;
  void *__p[2];
  unsigned __int8 v28;
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;
  uint64_t v32;

  v4 = *(_QWORD *)a2;
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8 > 0x20u)
  {
    v12 = *((_QWORD *)this + 25);
    v31 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, (uint64_t)a2, v12, (uint64_t)v30);
    v14 = (llvm::Value *)llvm::ConstantInt::get();
    v31 = 257;
    LShr = llvm::IRBuilderBase::CreateLShr((AGCLLVMAirBuiltins *)((char *)this + 8), a2, v14, (const llvm::Twine *)v30);
    v16 = *((_QWORD *)this + 25);
    v29 = 257;
    v17 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, LShr, v16, (uint64_t)__p);
    v18 = AGCLLVMAirBuiltins::buildReverseBits(this, Cast);
    v19 = AGCLLVMAirBuiltins::buildReverseBits(this, v17);
    v20 = *((_QWORD *)this + 26);
    v31 = 257;
    v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, v18, v20, (uint64_t)v30);
    v22 = *((_QWORD *)this + 26);
    v31 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, v19, v22, (uint64_t)v30);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v31 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((AGCLLVMAirBuiltins *)((char *)this + 8), v21, v24, (const llvm::Twine *)v30);
    v29 = 257;
    return llvm::IRBuilderBase::CreateOr((AGCLLVMAirBuiltins *)((char *)this + 8), Shl, v23, (const llvm::Twine *)__p);
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(__p, *(char **)(*((_QWORD *)this + 46) + 1208));
    if ((v28 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v28 & 0x80u) == 0)
      v6 = v28;
    else
      v6 = (uint64_t)__p[1];
    v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, (uint64_t)v5, v6, *((_QWORD *)this + 25), *((_QWORD *)this + 25));
    v8 = *((_QWORD *)this + 25);
    v31 = 257;
    v32 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, (uint64_t)a2, v8, (uint64_t)v30);
    v31 = 257;
    v9 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v7 + 24), v7, (uint64_t)&v32, 1, (uint64_t)v30);
    v32 = (uint64_t)v9;
    v10 = (llvm::Value *)llvm::ConstantInt::get();
    v31 = 257;
    v32 = llvm::IRBuilderBase::CreateLShr((AGCLLVMAirBuiltins *)((char *)this + 8), v9, v10, (const llvm::Twine *)v30);
    v31 = 257;
    v11 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, v32, v4, (uint64_t)v30);
    if ((char)v28 < 0)
      operator delete(__p[0]);
  }
  return v11;
}

uint64_t AGCLLVMAirBuiltins::buildSign(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  llvm::IRBuilderBase::CreateFCmpHelper();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildMix(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8;
  uint64_t FSub;
  uint64_t FMul;
  uint64_t v11;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;

  v8 = llvm::ConstantFP::get();
  this = (AGCLLVMAirBuiltins *)((char *)this + 8);
  v15 = 257;
  FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)this, v8, (uint64_t)a4, (uint64_t)v14);
  v13[16] = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this, (uint64_t)a2, FSub, (uint64_t)v13);
  v15 = 257;
  v11 = llvm::IRBuilderBase::CreateFMul((uint64_t)this, (uint64_t)a3, (uint64_t)a4, (uint64_t)v14);
  v15 = 257;
  return llvm::IRBuilderBase::CreateFAdd((uint64_t)this, FMul, v11, (uint64_t)v14);
}

llvm::Value *AGCLLVMAirBuiltins::buildDot(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  _BYTE v4[32];
  __int16 v5;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    return AGCLLVMBuilder::buildDotProduct(this, a2, a3);
  v5 = 257;
  return (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v4);
}

uint64_t AGCLLVMAirBuiltins::buildGCmp(AGCLLVMAirBuiltins *this, llvm::Value *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 46);
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v7 = 192;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 21))
    v7 = 200;
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v6 + 144))(v6, &v10, a2, a3, *(_QWORD *)((char *)this + v7));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltins::buildGExp(AGCLLVMAirBuiltins *this, llvm::Value *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 46);
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v7 = 152;
  if (*(_QWORD *)a2 == *((_QWORD *)this + 25))
    v7 = 168;
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v6 + 152))(v6, &v10, a2, a3, *(_QWORD *)((char *)this + v7));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltins::buildFMedian3(_QWORD *a1, llvm::Value **a2)
{
  llvm::Value *v4;
  llvm::Value *v5;
  _QWORD *Select;
  llvm::Value *v7;
  uint64_t v8;
  llvm::Value *Cast;
  llvm::Value *v10;
  llvm::CmpInst **v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;

  v4 = *a2;
  v5 = a2[1];
  AGCLLVMAirBuiltins::buildNanFMin((AGCLLVMAirBuiltins *)a1, *a2, v5);
  AGCLLVMAirBuiltins::buildNanFMax((AGCLLVMAirBuiltins *)a1, v4, v5);
  v15 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  Select = (_QWORD *)llvm::IRBuilderBase::CreateSelect();
  v7 = (llvm::Value *)AGCLLVMAirBuiltins::buildNanFMin((AGCLLVMAirBuiltins *)a1, *a2, a2[1]);
  AGCLLVMAirBuiltins::buildNanFMin((AGCLLVMAirBuiltins *)a1, v7, a2[2]);
  if (*Select == a1[21])
    v8 = a1[25];
  else
    v8 = a1[24];
  v15 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)Select, v8, (uint64_t)v14);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v15 = 257;
  v11 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), Cast, v10, (const llvm::Twine *)v14);
  v12 = llvm::ConstantInt::get();
  v15 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 34, v11, v12, (uint64_t)v14);
  v15 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildNanFMin(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v6 = *((_QWORD *)this + 46);
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v7 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v7 = **(_QWORD **)(v7 + 16);
  v8 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *, BOOL))(*(_QWORD *)v6 + 48))(v6, &v10, a2, a3, v7 == *((_QWORD *)this + 21));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMAirBuiltins::buildFastFMedian3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  llvm::Value *v3;
  llvm::Value *v4;

  v3 = *a2;
  v4 = a2[1];
  AGCLLVMAirBuiltins::buildFastFMin(a1, *a2, v4);
  AGCLLVMAirBuiltins::buildFastFMax(a1, v3, v4);
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::IRBuilderBase::CreateSelect();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::buildProjectiveCoordinates(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  llvm::Value *ShuffleVector;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *FDiv;
  llvm::Value *v19;
  _BYTE v21[32];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  ShuffleVector = a2;
  v30 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 32);
  if (*((_BYTE *)a2 + 16) == 74)
  {
    v5 = *((_QWORD *)a2 - 4);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v5 && v6 == 91)
    {
      v7 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 64) + 16);
      if (v7 == 73)
        v8 = *(_QWORD *)(v5 - 64);
      else
        v8 = 0;
      v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 32) + 16);
      if (v9 == 73)
        v10 = *(_QWORD *)(v5 - 32);
      else
        v10 = 0;
      if (v8 | v10
        && ((v7 - 11) < 2 || *(_QWORD *)(**(_QWORD **)(v8 - 32) + 24) == *((_QWORD *)this + 21))
        && ((v9 - 11) <= 1 || *(_QWORD *)(**(_QWORD **)(v10 - 32) + 24) == *((_QWORD *)this + 21)))
      {
        llvm::VectorType::get();
        if (v8)
        {
          v11 = *(_QWORD *)(v8 - 32);
          if (v10)
          {
LABEL_23:
            v12 = *(_QWORD *)(v10 - 32);
LABEL_26:
            v13 = *(_QWORD *)(v5 + 64);
            v14 = *(unsigned int *)(v5 + 72);
            v22 = 257;
            ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((uint64_t)this + 8, v11, v12, v13, v14, (uint64_t)v21);
            goto LABEL_27;
          }
        }
        else
        {
          v11 = llvm::UndefValue::get();
          if (v10)
            goto LABEL_23;
        }
        v12 = llvm::UndefValue::get();
        goto LABEL_26;
      }
    }
    else if (v5 && v6 == 73 && *(_QWORD *)(**(_QWORD **)(v5 - 32) + 24) == *((_QWORD *)this + 21))
    {
      ShuffleVector = *(llvm::Value **)(v5 - 32);
    }
  }
LABEL_27:
  v27 = llvm::ConstantInt::get();
  v28 = llvm::ConstantInt::get();
  v29 = llvm::ConstantInt::get();
  v15 = AGCLLVMBuilder::subrangeVector(this, ShuffleVector, 0, v4 - 1, 1);
  v16 = (llvm::Value *)llvm::ConstantVector::get();
  v22 = 257;
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMAirBuiltins *)((char *)this + 8), ShuffleVector, ShuffleVector, v16, (const llvm::Twine *)v21);
  v22 = 257;
  FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v15, (uint64_t)v17, (uint64_t)v21);
  v23 = llvm::ConstantInt::get();
  v24 = llvm::ConstantInt::get();
  v25 = llvm::ConstantInt::get();
  v26 = llvm::ConstantInt::get();
  v19 = (llvm::Value *)llvm::ConstantVector::get();
  v22 = 257;
  return llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMAirBuiltins *)((char *)this + 8), FDiv, v17, v19, (const llvm::Twine *)v21);
}

uint64_t AGCLLVMAirBuiltins::buildAssert(AGCLLVMAirBuiltins *this)
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildSimdWidth()
{
  return llvm::ConstantInt::get();
}

uint64_t AGCLLVMAirBuiltins::buildThreadExecutionWidth()
{
  return llvm::ConstantInt::get();
}

void AGCLLVMAirBuiltins::replaceIsUniform(uint64_t a1, llvm::Instruction *a2)
{
  const char *v3;
  const char *Value;
  llvm::Function *Function;
  uint64_t v6;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t Name;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  std::string __dst;
  void *__p[2];
  std::string::size_type v18;

  if (MGGetBoolAnswer()
    && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_IS_UNIFORM_STRIPPING", v3)) != 0
    && *Value != 48
    && atoi(Value))
  {
    Function = (llvm::Function *)llvm::Module::getFunction();
    v6 = *((_QWORD *)a2 + 1);
    if (v6)
    {
      do
      {
        v7 = *(_QWORD *)(v6 + 8);
        llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v6 + 24));
        v6 = v7;
      }
      while (v7);
    }
    llvm::Instruction::eraseFromParent(a2);
    if (!*((_QWORD *)Function + 1))
      llvm::Function::eraseFromParent(Function);
  }
  else
  {
    v8 = (llvm::Value *)*((_QWORD *)a2 - 4);
    v9 = *((_QWORD *)v8 + 3);
    Name = llvm::Value::getName(v8);
    if (Name)
    {
      if (v11 >= 0xE)
        v12 = 14;
      else
        v12 = v11;
      std::string::basic_string[abi:nn180100](&__dst, (void *)(Name + v12), v11 - v12);
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
    }
    v13 = std::string::insert(&__dst, 0, "llvm.agx.is.uniform");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v18 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    llvm::Module::getOrInsertFunction();
    *((_QWORD *)a2 + 9) = v9;
    llvm::CallBase::setCalledOperand((uint64_t)a2, v15);
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
  }
}

uint64_t llvm::CallBase::setCalledOperand(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)(result - 32);
  if (*(_QWORD *)(result - 32))
  {
    **(_QWORD **)(result - 16) = *(_QWORD *)(result - 24);
    v3 = *(_QWORD *)(result - 24);
    if (v3)
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(result - 16);
  }
  *v2 = a2;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 8);
    v4 = (_QWORD *)(a2 + 8);
    v5 = v6;
    *(_QWORD *)(result - 24) = v6;
    if (v6)
      *(_QWORD *)(v5 + 16) = result - 24;
    *(_QWORD *)(result - 16) = v4;
    *v4 = v2;
  }
  return result;
}

uint64_t AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v2;
  _BYTE v4[32];
  __int16 v5;

  v2 = *((_QWORD *)this + 26);
  v5 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 47, (uint64_t)a2, v2, (uint64_t)v4);
}

uint64_t *AGCLLVMAirBuiltinsMap::insertBuiltinReplacementsBase(AGCLLVMAirBuiltinsMap *this, const AGCLLVMTargetConfig *a2)
{
  const AGCLLVMTargetConfig *v2;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *result;
  uint64_t v152;

  v2 = a2;
  v4 = *((_BYTE *)a2 + 41);
  v5 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "acos", 4uLL);
  *(_DWORD *)(v5 + 8) = 1;
  *(_OWORD *)(v5 + 16) = xmmword_1C3E37D00;
  *(_DWORD *)(v5 + 32) = 3;
  *(_BYTE *)(v5 + 36) = v4;
  *(_BYTE *)(v5 + 37) = 1;
  v6 = *((_BYTE *)v2 + 42);
  v7 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "asin", 4uLL);
  *(_DWORD *)(v7 + 8) = 1;
  *(_OWORD *)(v7 + 16) = xmmword_1C3E37D10;
  *(_DWORD *)(v7 + 32) = 3;
  *(_BYTE *)(v7 + 36) = v6;
  *(_BYTE *)(v7 + 37) = 1;
  v8 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "atan", 4uLL);
  *(_DWORD *)(v8 + 8) = 1;
  *(_OWORD *)(v8 + 16) = xmmword_1C3E37D20;
  *(_DWORD *)(v8 + 32) = 3;
  *(_WORD *)(v8 + 36) = 257;
  v9 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "atan2", 5uLL);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 16) = AGCLLVMAirBuiltins::buildArctan2;
  *(_QWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = 5;
  *(_WORD *)(v9 + 36) = 257;
  v10 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "acosh", 5uLL);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = AGCLLVMAirBuiltins::buildArccosh;
  *(_QWORD *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 32) = 3;
  *(_WORD *)(v10 + 36) = 257;
  v11 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "asinh", 5uLL);
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 16) = AGCLLVMAirBuiltins::buildArcsinh;
  *(_QWORD *)(v11 + 24) = 0;
  *(_DWORD *)(v11 + 32) = 3;
  *(_WORD *)(v11 + 36) = 257;
  v12 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "atanh", 5uLL);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = AGCLLVMAirBuiltins::buildArctanh;
  *(_QWORD *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 32) = 3;
  *(_WORD *)(v12 + 36) = 257;
  v13 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "pow", 3uLL);
  *(_DWORD *)(v13 + 8) = 1;
  *(_OWORD *)(v13 + 16) = xmmword_1C3E37D30;
  *(_DWORD *)(v13 + 32) = 5;
  *(_WORD *)(v13 + 36) = 257;
  v14 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "powr", 4uLL);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = AGCLLVMAirBuiltins::buildPowr;
  *(_QWORD *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 32) = 5;
  *(_WORD *)(v14 + 36) = 257;
  v15 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "cosh", 4uLL);
  *(_DWORD *)(v15 + 8) = 1;
  *(_QWORD *)(v15 + 16) = AGCLLVMAirBuiltins::buildCosh;
  *(_QWORD *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 32) = 3;
  *(_WORD *)(v15 + 36) = 257;
  v16 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sinh", 4uLL);
  *(_DWORD *)(v16 + 8) = 1;
  *(_QWORD *)(v16 + 16) = AGCLLVMAirBuiltins::buildSinh;
  *(_QWORD *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 32) = 3;
  *(_WORD *)(v16 + 36) = 257;
  v17 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "tanh", 4uLL);
  *(_DWORD *)(v17 + 8) = 1;
  *(_QWORD *)(v17 + 16) = AGCLLVMAirBuiltins::buildTanh;
  *(_QWORD *)(v17 + 24) = 0;
  *(_DWORD *)(v17 + 32) = 3;
  *(_WORD *)(v17 + 36) = 257;
  v18 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "exp10", 5uLL);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = AGCLLVMAirBuiltins::buildExp10;
  *(_QWORD *)(v18 + 24) = 0;
  *(_DWORD *)(v18 + 32) = 3;
  *(_WORD *)(v18 + 36) = 257;
  v19 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "log10", 5uLL);
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 16) = AGCLLVMAirBuiltins::buildLog10;
  *(_QWORD *)(v19 + 24) = 0;
  *(_DWORD *)(v19 + 32) = 3;
  *(_WORD *)(v19 + 36) = 257;
  v20 = *((_BYTE *)v2 + 40);
  v21 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "cos", 3uLL);
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)(v21 + 16) = AGCLLVMAirBuiltins::buildCos;
  *(_QWORD *)(v21 + 24) = 0;
  *(_DWORD *)(v21 + 32) = 3;
  *(_BYTE *)(v21 + 36) = v20;
  *(_BYTE *)(v21 + 37) = 1;
  v22 = *((_BYTE *)v2 + 40);
  v23 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sin", 3uLL);
  *(_DWORD *)(v23 + 8) = 1;
  *(_QWORD *)(v23 + 16) = AGCLLVMAirBuiltins::buildSin;
  *(_QWORD *)(v23 + 24) = 0;
  *(_DWORD *)(v23 + 32) = 3;
  *(_BYTE *)(v23 + 36) = v22;
  *(_BYTE *)(v23 + 37) = 1;
  v24 = *((_BYTE *)v2 + 40);
  v25 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "tan", 3uLL);
  *(_DWORD *)(v25 + 8) = 1;
  *(_OWORD *)(v25 + 16) = xmmword_1C3E37D40;
  *(_DWORD *)(v25 + 32) = 3;
  *(_BYTE *)(v25 + 36) = v24;
  *(_BYTE *)(v25 + 37) = 1;
  v26 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sincos", 6uLL);
  *(_DWORD *)(v26 + 8) = 1;
  *(_QWORD *)(v26 + 16) = AGCLLVMAirBuiltins::buildMetalSinCos;
  *(_QWORD *)(v26 + 24) = 0;
  *(_DWORD *)(v26 + 32) = 5;
  *(_WORD *)(v26 + 36) = 0;
  v27 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "rint", 4uLL);
  *(_DWORD *)(v27 + 8) = 1;
  *(_OWORD *)(v27 + 16) = xmmword_1C3E37D50;
  *(_DWORD *)(v27 + 32) = 3;
  *(_WORD *)(v27 + 36) = 257;
  v28 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "round", 5uLL);
  *(_DWORD *)(v28 + 8) = 1;
  *(_QWORD *)(v28 + 16) = AGCLLVMAirBuiltins::buildRound;
  *(_QWORD *)(v28 + 24) = 0;
  *(_DWORD *)(v28 + 32) = 3;
  *(_WORD *)(v28 + 36) = 257;
  v29 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmod", 4uLL);
  *(_DWORD *)(v29 + 8) = 1;
  *(_QWORD *)(v29 + 16) = AGCLLVMAirBuiltins::buildFmod;
  *(_QWORD *)(v29 + 24) = 0;
  *(_DWORD *)(v29 + 32) = 5;
  *(_WORD *)(v29 + 36) = 1;
  v30 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mod", 3uLL);
  *(_DWORD *)(v30 + 8) = 1;
  *(_QWORD *)(v30 + 16) = AGCLLVMAirBuiltins::buildMod;
  *(_QWORD *)(v30 + 24) = 0;
  *(_DWORD *)(v30 + 32) = 5;
  *(_WORD *)(v30 + 36) = 1;
  v31 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "ceil", 4uLL);
  *(_DWORD *)(v31 + 8) = 1;
  *(_OWORD *)(v31 + 16) = xmmword_1C3E37D60;
  *(_DWORD *)(v31 + 32) = 3;
  *(_WORD *)(v31 + 36) = 256;
  v32 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "exp", 3uLL);
  *(_DWORD *)(v32 + 8) = 1;
  *(_QWORD *)(v32 + 16) = AGCLLVMTargetBuilder::CreateExp;
  *(_QWORD *)(v32 + 24) = 0;
  *(_DWORD *)(v32 + 32) = 3;
  *(_WORD *)(v32 + 36) = 1;
  v33 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "exp2", 4uLL);
  *(_DWORD *)(v33 + 8) = 1;
  *(_QWORD *)(v33 + 16) = AGCLLVMTargetBuilder::CreateExp2;
  *(_QWORD *)(v33 + 24) = 0;
  *(_DWORD *)(v33 + 32) = 3;
  *(_WORD *)(v33 + 36) = 0;
  v34 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fabs", 4uLL);
  *(_DWORD *)(v34 + 8) = 1;
  *(_QWORD *)(v34 + 16) = AGCLLVMTargetBuilder::CreateFabs;
  *(_QWORD *)(v34 + 24) = 0;
  *(_DWORD *)(v34 + 32) = 3;
  *(_WORD *)(v34 + 36) = 0;
  v35 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "floor", 5uLL);
  *(_DWORD *)(v35 + 8) = 1;
  *(_QWORD *)(v35 + 16) = AGCLLVMTargetBuilder::CreateFloor;
  *(_QWORD *)(v35 + 24) = 0;
  *(_DWORD *)(v35 + 32) = 3;
  *(_WORD *)(v35 + 36) = 0;
  v36 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fma", 3uLL);
  *(_DWORD *)(v36 + 8) = 1;
  *(_QWORD *)(v36 + 16) = AGCLLVMBuilder::buildFma;
  *(_QWORD *)(v36 + 24) = 0;
  *(_DWORD *)(v36 + 32) = 6;
  *(_WORD *)(v36 + 36) = 0;
  v37 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmax", 4uLL);
  *(_DWORD *)(v37 + 8) = 1;
  *(_QWORD *)(v37 + 16) = AGCLLVMAirBuiltins::buildNanFMax;
  *(_QWORD *)(v37 + 24) = 0;
  *(_DWORD *)(v37 + 32) = 5;
  *(_WORD *)(v37 + 36) = 256;
  v38 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmin", 4uLL);
  *(_DWORD *)(v38 + 8) = 1;
  *(_QWORD *)(v38 + 16) = AGCLLVMAirBuiltins::buildNanFMin;
  *(_QWORD *)(v38 + 24) = 0;
  *(_DWORD *)(v38 + 32) = 5;
  *(_WORD *)(v38 + 36) = 256;
  v39 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fract", 5uLL);
  *(_DWORD *)(v39 + 8) = 1;
  *(_QWORD *)(v39 + 16) = AGCLLVMAirBuiltins::buildFract;
  *(_QWORD *)(v39 + 24) = 0;
  *(_DWORD *)(v39 + 32) = 3;
  *(_WORD *)(v39 + 36) = 0;
  v40 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "ldexp", 5uLL);
  *(_DWORD *)(v40 + 8) = 1;
  *(_QWORD *)(v40 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v40 + 24) = 0;
  *(_DWORD *)(v40 + 32) = 7;
  *(_WORD *)(v40 + 36) = 256;
  v41 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "log", 3uLL);
  *(_DWORD *)(v41 + 8) = 1;
  *(_QWORD *)(v41 + 16) = AGCLLVMTargetBuilder::CreateLog;
  *(_QWORD *)(v41 + 24) = 0;
  *(_DWORD *)(v41 + 32) = 3;
  *(_WORD *)(v41 + 36) = 1;
  v42 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "log2", 4uLL);
  *(_DWORD *)(v42 + 8) = 1;
  *(_QWORD *)(v42 + 16) = AGCLLVMTargetBuilder::CreateLog2;
  *(_QWORD *)(v42 + 24) = 0;
  *(_DWORD *)(v42 + 32) = 3;
  *(_WORD *)(v42 + 36) = 0;
  v43 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mad", 3uLL);
  *(_DWORD *)(v43 + 8) = 1;
  *(_QWORD *)(v43 + 16) = AGCLLVMAirBuiltins::buildFmad;
  *(_QWORD *)(v43 + 24) = 0;
  *(_DWORD *)(v43 + 32) = 6;
  *(_WORD *)(v43 + 36) = 0;
  v44 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "rsqrt", 5uLL);
  *(_DWORD *)(v44 + 8) = 1;
  *(_QWORD *)(v44 + 16) = AGCLLVMTargetBuilder::CreateRsqrt;
  *(_QWORD *)(v44 + 24) = 0;
  *(_DWORD *)(v44 + 32) = 3;
  *(_WORD *)(v44 + 36) = 256;
  v45 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sqrt", 4uLL);
  *(_DWORD *)(v45 + 8) = 1;
  *(_QWORD *)(v45 + 16) = AGCLLVMTargetBuilder::CreateSqrt;
  *(_QWORD *)(v45 + 24) = 0;
  *(_DWORD *)(v45 + 32) = 3;
  *(_WORD *)(v45 + 36) = 0;
  v46 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "trunc", 5uLL);
  *(_DWORD *)(v46 + 8) = 1;
  *(_OWORD *)(v46 + 16) = xmmword_1C3E37D70;
  *(_DWORD *)(v46 + 32) = 3;
  *(_WORD *)(v46 + 36) = 256;
  v47 = *((_BYTE *)v2 + 41);
  v48 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_acos", 9uLL);
  *(_DWORD *)(v48 + 8) = 2;
  *(_OWORD *)(v48 + 16) = xmmword_1C3E37D00;
  *(_DWORD *)(v48 + 32) = 3;
  *(_BYTE *)(v48 + 36) = v47;
  *(_BYTE *)(v48 + 37) = 1;
  v49 = *((_BYTE *)v2 + 42);
  v50 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_asin", 9uLL);
  *(_DWORD *)(v50 + 8) = 2;
  *(_OWORD *)(v50 + 16) = xmmword_1C3E37D10;
  *(_DWORD *)(v50 + 32) = 3;
  *(_BYTE *)(v50 + 36) = v49;
  *(_BYTE *)(v50 + 37) = 1;
  v51 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_atan", 9uLL);
  *(_DWORD *)(v51 + 8) = 2;
  *(_OWORD *)(v51 + 16) = xmmword_1C3E37D20;
  *(_DWORD *)(v51 + 32) = 3;
  *(_WORD *)(v51 + 36) = 257;
  v52 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_atan2", 0xAuLL);
  *(_DWORD *)(v52 + 8) = 2;
  *(_QWORD *)(v52 + 16) = AGCLLVMAirBuiltins::buildArctan2;
  *(_QWORD *)(v52 + 24) = 0;
  *(_DWORD *)(v52 + 32) = 5;
  *(_WORD *)(v52 + 36) = 257;
  v53 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_exp10", 0xAuLL);
  *(_DWORD *)(v53 + 8) = 2;
  *(_QWORD *)(v53 + 16) = AGCLLVMAirBuiltins::buildExp10;
  *(_QWORD *)(v53 + 24) = 0;
  *(_DWORD *)(v53 + 32) = 3;
  *(_WORD *)(v53 + 36) = 0;
  v54 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_log10", 0xAuLL);
  *(_DWORD *)(v54 + 8) = 2;
  *(_QWORD *)(v54 + 16) = AGCLLVMAirBuiltins::buildLog10;
  *(_QWORD *)(v54 + 24) = 0;
  *(_DWORD *)(v54 + 32) = 3;
  *(_WORD *)(v54 + 36) = 1;
  v55 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_acosh", 0xAuLL);
  *(_DWORD *)(v55 + 8) = 2;
  *(_QWORD *)(v55 + 16) = AGCLLVMAirBuiltins::buildArccosh;
  *(_QWORD *)(v55 + 24) = 0;
  *(_DWORD *)(v55 + 32) = 3;
  *(_WORD *)(v55 + 36) = 257;
  v56 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_asinh", 0xAuLL);
  *(_DWORD *)(v56 + 8) = 2;
  *(_QWORD *)(v56 + 16) = AGCLLVMAirBuiltins::buildArcsinh;
  *(_QWORD *)(v56 + 24) = 0;
  *(_DWORD *)(v56 + 32) = 3;
  *(_WORD *)(v56 + 36) = 257;
  v57 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_atanh", 0xAuLL);
  *(_DWORD *)(v57 + 8) = 2;
  *(_QWORD *)(v57 + 16) = AGCLLVMAirBuiltins::buildArctanh;
  *(_QWORD *)(v57 + 24) = 0;
  *(_DWORD *)(v57 + 32) = 3;
  *(_WORD *)(v57 + 36) = 257;
  v58 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_pow", 8uLL);
  *(_DWORD *)(v58 + 8) = 2;
  *(_OWORD *)(v58 + 16) = xmmword_1C3E37D30;
  *(_DWORD *)(v58 + 32) = 5;
  *(_BYTE *)(v58 + 36) = 1;
  *(_BYTE *)(v58 + 37) = 1;
  v59 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_powr", 9uLL);
  *(_DWORD *)(v59 + 8) = 2;
  *(_QWORD *)(v59 + 16) = AGCLLVMAirBuiltins::buildPowr;
  *(_QWORD *)(v59 + 24) = 0;
  *(_DWORD *)(v59 + 32) = 5;
  *(_BYTE *)(v59 + 36) = 1;
  *(_BYTE *)(v59 + 37) = 1;
  v60 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_cosh", 9uLL);
  *(_DWORD *)(v60 + 8) = 2;
  *(_QWORD *)(v60 + 16) = AGCLLVMAirBuiltins::buildCosh;
  *(_QWORD *)(v60 + 24) = 0;
  *(_DWORD *)(v60 + 32) = 3;
  *(_BYTE *)(v60 + 36) = 1;
  *(_BYTE *)(v60 + 37) = 1;
  v61 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_sinh", 9uLL);
  *(_DWORD *)(v61 + 8) = 2;
  *(_QWORD *)(v61 + 16) = AGCLLVMAirBuiltins::buildSinh;
  *(_QWORD *)(v61 + 24) = 0;
  *(_DWORD *)(v61 + 32) = 3;
  *(_BYTE *)(v61 + 36) = 1;
  *(_BYTE *)(v61 + 37) = 1;
  v62 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_tanh", 9uLL);
  *(_DWORD *)(v62 + 8) = 2;
  *(_QWORD *)(v62 + 16) = AGCLLVMAirBuiltins::buildTanh;
  *(_QWORD *)(v62 + 24) = 0;
  *(_DWORD *)(v62 + 32) = 3;
  *(_BYTE *)(v62 + 36) = 1;
  *(_BYTE *)(v62 + 37) = 1;
  v63 = *((_BYTE *)v2 + 40);
  v64 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_cos", 8uLL);
  *(_DWORD *)(v64 + 8) = 2;
  *(_QWORD *)(v64 + 16) = AGCLLVMAirBuiltins::buildCos;
  *(_QWORD *)(v64 + 24) = 0;
  *(_DWORD *)(v64 + 32) = 3;
  *(_BYTE *)(v64 + 36) = v63;
  *(_BYTE *)(v64 + 37) = 1;
  v65 = *((_BYTE *)v2 + 40);
  v66 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_sin", 8uLL);
  *(_DWORD *)(v66 + 8) = 2;
  *(_QWORD *)(v66 + 16) = AGCLLVMAirBuiltins::buildSin;
  *(_QWORD *)(v66 + 24) = 0;
  *(_DWORD *)(v66 + 32) = 3;
  *(_BYTE *)(v66 + 36) = v65;
  *(_BYTE *)(v66 + 37) = 1;
  v67 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_tan", 8uLL);
  *(_DWORD *)(v67 + 8) = 2;
  *(_OWORD *)(v67 + 16) = xmmword_1C3E37D40;
  *(_DWORD *)(v67 + 32) = 3;
  *(_BYTE *)(v67 + 36) = 1;
  *(_BYTE *)(v67 + 37) = 1;
  v68 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_sincos", 0xBuLL);
  *(_DWORD *)(v68 + 8) = 2;
  *(_QWORD *)(v68 + 16) = AGCLLVMAirBuiltins::buildMetalSinCos;
  *(_QWORD *)(v68 + 24) = 0;
  *(_DWORD *)(v68 + 32) = 5;
  *(_WORD *)(v68 + 36) = 0;
  v69 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_round", 0xAuLL);
  *(_DWORD *)(v69 + 8) = 2;
  *(_QWORD *)(v69 + 16) = AGCLLVMAirBuiltins::buildRound;
  *(_QWORD *)(v69 + 24) = 0;
  *(_DWORD *)(v69 + 32) = 3;
  *(_BYTE *)(v69 + 36) = 1;
  *(_BYTE *)(v69 + 37) = 1;
  v70 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmod", 9uLL);
  *(_DWORD *)(v70 + 8) = 2;
  *(_QWORD *)(v70 + 16) = AGCLLVMAirBuiltins::buildFmod;
  *(_QWORD *)(v70 + 24) = 0;
  *(_DWORD *)(v70 + 32) = 5;
  *(_WORD *)(v70 + 36) = 1;
  v71 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_mod", 8uLL);
  *(_DWORD *)(v71 + 8) = 2;
  *(_QWORD *)(v71 + 16) = AGCLLVMAirBuiltins::buildMod;
  *(_QWORD *)(v71 + 24) = 0;
  *(_DWORD *)(v71 + 32) = 5;
  *(_WORD *)(v71 + 36) = 1;
  v72 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_exp", 8uLL);
  *(_DWORD *)(v72 + 8) = 2;
  *(_QWORD *)(v72 + 16) = AGCLLVMTargetBuilder::CreateExp;
  *(_QWORD *)(v72 + 24) = 0;
  *(_DWORD *)(v72 + 32) = 3;
  *(_WORD *)(v72 + 36) = 0;
  v73 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_exp2", 9uLL);
  *(_DWORD *)(v73 + 8) = 2;
  *(_QWORD *)(v73 + 16) = AGCLLVMTargetBuilder::CreateExp2;
  *(_QWORD *)(v73 + 24) = 0;
  *(_DWORD *)(v73 + 32) = 3;
  *(_WORD *)(v73 + 36) = 0;
  v74 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_ldexp", 0xAuLL);
  *(_DWORD *)(v74 + 8) = 2;
  *(_QWORD *)(v74 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v74 + 24) = 0;
  *(_DWORD *)(v74 + 32) = 7;
  *(_BYTE *)(v74 + 36) = 0;
  *(_BYTE *)(v74 + 37) = 1;
  v75 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_log", 8uLL);
  *(_DWORD *)(v75 + 8) = 2;
  *(_QWORD *)(v75 + 16) = AGCLLVMTargetBuilder::CreateLog;
  *(_QWORD *)(v75 + 24) = 0;
  *(_DWORD *)(v75 + 32) = 3;
  *(_WORD *)(v75 + 36) = 0;
  v76 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_log2", 9uLL);
  *(_DWORD *)(v76 + 8) = 2;
  *(_QWORD *)(v76 + 16) = AGCLLVMTargetBuilder::CreateLog2;
  *(_QWORD *)(v76 + 24) = 0;
  *(_DWORD *)(v76 + 32) = 3;
  *(_WORD *)(v76 + 36) = 0;
  v77 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_rsqrt", 0xAuLL);
  *(_DWORD *)(v77 + 8) = 2;
  *(_QWORD *)(v77 + 16) = AGCLLVMTargetBuilder::CreateRsqrt;
  *(_QWORD *)(v77 + 24) = 0;
  *(_DWORD *)(v77 + 32) = 3;
  *(_BYTE *)(v77 + 36) = 0;
  *(_BYTE *)(v77 + 37) = 1;
  v78 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_sqrt", 9uLL);
  *(_DWORD *)(v78 + 8) = 2;
  *(_QWORD *)(v78 + 16) = AGCLLVMTargetBuilder::CreateSqrt;
  *(_QWORD *)(v78 + 24) = 0;
  *(_DWORD *)(v78 + 32) = 3;
  *(_WORD *)(v78 + 36) = 0;
  v79 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_ceil", 9uLL);
  *(_DWORD *)(v79 + 8) = 2;
  *(_OWORD *)(v79 + 16) = xmmword_1C3E37D60;
  *(_DWORD *)(v79 + 32) = 3;
  *(_BYTE *)(v79 + 36) = 0;
  *(_BYTE *)(v79 + 37) = 1;
  v80 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fabs", 9uLL);
  *(_DWORD *)(v80 + 8) = 2;
  *(_QWORD *)(v80 + 16) = AGCLLVMTargetBuilder::CreateFabs;
  *(_QWORD *)(v80 + 24) = 0;
  *(_DWORD *)(v80 + 32) = 3;
  *(_WORD *)(v80 + 36) = 0;
  v81 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_floor", 0xAuLL);
  *(_DWORD *)(v81 + 8) = 2;
  *(_QWORD *)(v81 + 16) = AGCLLVMTargetBuilder::CreateFloor;
  *(_QWORD *)(v81 + 24) = 0;
  *(_DWORD *)(v81 + 32) = 3;
  *(_WORD *)(v81 + 36) = 0;
  v82 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fract", 0xAuLL);
  *(_DWORD *)(v82 + 8) = 2;
  *(_QWORD *)(v82 + 16) = AGCLLVMAirBuiltins::buildFastFract;
  *(_QWORD *)(v82 + 24) = 0;
  *(_DWORD *)(v82 + 32) = 3;
  *(_WORD *)(v82 + 36) = 0;
  v83 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_rint", 9uLL);
  *(_DWORD *)(v83 + 8) = 2;
  *(_OWORD *)(v83 + 16) = xmmword_1C3E37D50;
  *(_DWORD *)(v83 + 32) = 3;
  *(_BYTE *)(v83 + 36) = 1;
  *(_BYTE *)(v83 + 37) = 1;
  v84 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_trunc", 0xAuLL);
  *(_DWORD *)(v84 + 8) = 2;
  *(_OWORD *)(v84 + 16) = xmmword_1C3E37D70;
  *(_DWORD *)(v84 + 32) = 3;
  *(_BYTE *)(v84 + 36) = 0;
  *(_BYTE *)(v84 + 37) = 1;
  v85 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmax", 9uLL);
  *(_DWORD *)(v85 + 8) = 2;
  *(_QWORD *)(v85 + 16) = AGCLLVMAirBuiltins::buildFastFMax;
  *(_QWORD *)(v85 + 24) = 0;
  *(_DWORD *)(v85 + 32) = 5;
  *(_BYTE *)(v85 + 36) = 0;
  *(_BYTE *)(v85 + 37) = 1;
  v86 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmin", 9uLL);
  *(_DWORD *)(v86 + 8) = 2;
  *(_QWORD *)(v86 + 16) = AGCLLVMAirBuiltins::buildFastFMin;
  *(_QWORD *)(v86 + 24) = 0;
  *(_DWORD *)(v86 + 32) = 5;
  *(_BYTE *)(v86 + 36) = 0;
  *(_BYTE *)(v86 + 37) = 1;
  v87 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "gamma_expand", 0xCuLL);
  *(_DWORD *)(v87 + 8) = 1;
  *(_QWORD *)(v87 + 16) = AGCLLVMAirBuiltins::buildGExp8;
  *(_QWORD *)(v87 + 24) = 0;
  *(_DWORD *)(v87 + 32) = 3;
  *(_WORD *)(v87 + 36) = 0;
  v88 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "gamma_compress", 0xEuLL);
  *(_DWORD *)(v88 + 8) = 1;
  *(_QWORD *)(v88 + 16) = AGCLLVMAirBuiltins::buildGCmp8;
  *(_QWORD *)(v88 + 24) = 0;
  *(_DWORD *)(v88 + 32) = 3;
  *(_WORD *)(v88 + 36) = 0;
  v89 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "gamma_expand_xr", 0xFuLL);
  *(_DWORD *)(v89 + 8) = 1;
  *(_QWORD *)(v89 + 16) = AGCLLVMAirBuiltins::buildGExp10;
  *(_QWORD *)(v89 + 24) = 0;
  *(_DWORD *)(v89 + 32) = 3;
  *(_WORD *)(v89 + 36) = 0;
  v90 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "gamma_compress_xr", 0x11uLL);
  *(_DWORD *)(v90 + 8) = 1;
  *(_QWORD *)(v90 + 16) = AGCLLVMAirBuiltins::buildGCmp10;
  *(_QWORD *)(v90 + 24) = 0;
  *(_DWORD *)(v90 + 32) = 3;
  *(_WORD *)(v90 + 36) = 0;
  v91 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "convert", 7uLL);
  *(_DWORD *)(v91 + 8) = 1;
  *(_QWORD *)(v91 + 16) = AGCLLVMAirBuiltins::buildConvert;
  *(_QWORD *)(v91 + 24) = 0;
  *(_DWORD *)(v91 + 32) = 7;
  *(_BYTE *)(v91 + 36) = 0;
  *(_BYTE *)(v91 + 37) = 1;
  v92 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "pack", 4uLL);
  *(_DWORD *)(v92 + 8) = 1;
  *(_QWORD *)(v92 + 16) = AGCLLVMAirBuiltins::buildPack;
  *(_QWORD *)(v92 + 24) = 0;
  *(_DWORD *)(v92 + 32) = 7;
  *(_WORD *)(v92 + 36) = 0;
  v93 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "unpack", 6uLL);
  *(_DWORD *)(v93 + 8) = 1;
  *(_QWORD *)(v93 + 16) = AGCLLVMAirBuiltins::buildUnpack;
  *(_QWORD *)(v93 + 24) = 0;
  *(_DWORD *)(v93 + 32) = 7;
  *(_WORD *)(v93 + 36) = 0;
  v94 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "abs", 3uLL);
  *(_DWORD *)(v94 + 8) = 1;
  *(_QWORD *)(v94 + 16) = AGCLLVMAirBuiltins::buildAbs;
  *(_QWORD *)(v94 + 24) = 0;
  *(_DWORD *)(v94 + 32) = 7;
  *(_BYTE *)(v94 + 36) = 0;
  *(_BYTE *)(v94 + 37) = 1;
  v95 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "abs_diff", 8uLL);
  *(_DWORD *)(v95 + 8) = 1;
  *(_QWORD *)(v95 + 16) = AGCLLVMAirBuiltins::buildAbsDiff;
  *(_QWORD *)(v95 + 24) = 0;
  *(_DWORD *)(v95 + 32) = 7;
  *(_BYTE *)(v95 + 36) = 0;
  *(_BYTE *)(v95 + 37) = 1;
  v96 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "add_sat", 7uLL);
  *(_DWORD *)(v96 + 8) = 1;
  *(_QWORD *)(v96 + 16) = AGCLLVMAirBuiltins::buildAddSat;
  *(_QWORD *)(v96 + 24) = 0;
  *(_DWORD *)(v96 + 32) = 7;
  *(_BYTE *)(v96 + 36) = 0;
  *(_BYTE *)(v96 + 37) = 1;
  v97 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sub_sat", 7uLL);
  *(_DWORD *)(v97 + 8) = 1;
  *(_QWORD *)(v97 + 16) = AGCLLVMAirBuiltins::buildSubSat;
  *(_QWORD *)(v97 + 24) = 0;
  *(_DWORD *)(v97 + 32) = 7;
  *(_BYTE *)(v97 + 36) = 0;
  *(_BYTE *)(v97 + 37) = 1;
  v98 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "hadd", 4uLL);
  *(_DWORD *)(v98 + 8) = 1;
  *(_QWORD *)(v98 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v98 + 24) = 0;
  *(_DWORD *)(v98 + 32) = 7;
  *(_BYTE *)(v98 + 36) = 0;
  *(_BYTE *)(v98 + 37) = 1;
  v99 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "rhadd", 5uLL);
  *(_DWORD *)(v99 + 8) = 1;
  *(_QWORD *)(v99 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v99 + 24) = 0;
  *(_DWORD *)(v99 + 32) = 7;
  *(_BYTE *)(v99 + 36) = 0;
  *(_BYTE *)(v99 + 37) = 1;
  v100 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "clamp", 5uLL);
  *(_DWORD *)(v100 + 8) = 1;
  *(_QWORD *)(v100 + 16) = AGCLLVMAirBuiltins::buildClamp;
  *(_QWORD *)(v100 + 24) = 0;
  *(_DWORD *)(v100 + 32) = 7;
  *(_BYTE *)(v100 + 36) = 0;
  *(_BYTE *)(v100 + 37) = 1;
  v101 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "clz", 3uLL);
  *(_DWORD *)(v101 + 8) = 1;
  *(_QWORD *)(v101 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v101 + 24) = 0;
  *(_DWORD *)(v101 + 32) = 7;
  *(_BYTE *)(v101 + 36) = 0;
  *(_BYTE *)(v101 + 37) = 1;
  v102 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "ctz", 3uLL);
  *(_DWORD *)(v102 + 8) = 1;
  *(_QWORD *)(v102 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v102 + 24) = 0;
  *(_DWORD *)(v102 + 32) = 7;
  *(_BYTE *)(v102 + 36) = 0;
  *(_BYTE *)(v102 + 37) = 1;
  v103 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mad_hi", 6uLL);
  *(_DWORD *)(v103 + 8) = 1;
  *(_QWORD *)(v103 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v103 + 24) = 0;
  *(_DWORD *)(v103 + 32) = 7;
  *(_BYTE *)(v103 + 36) = 0;
  *(_BYTE *)(v103 + 37) = 1;
  v104 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mad_sat", 7uLL);
  *(_DWORD *)(v104 + 8) = 1;
  *(_QWORD *)(v104 + 16) = AGCLLVMAirBuiltins::buildMadSat;
  *(_QWORD *)(v104 + 24) = 0;
  *(_DWORD *)(v104 + 32) = 7;
  *(_BYTE *)(v104 + 36) = 0;
  *(_BYTE *)(v104 + 37) = 1;
  v105 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "max", 3uLL);
  *(_DWORD *)(v105 + 8) = 1;
  *(_QWORD *)(v105 + 16) = AGCLLVMAirBuiltins::buildIMax;
  *(_QWORD *)(v105 + 24) = 0;
  *(_DWORD *)(v105 + 32) = 7;
  *(_BYTE *)(v105 + 36) = 0;
  *(_BYTE *)(v105 + 37) = 1;
  v106 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "min", 3uLL);
  *(_DWORD *)(v106 + 8) = 1;
  *(_QWORD *)(v106 + 16) = AGCLLVMAirBuiltins::buildIMin;
  *(_QWORD *)(v106 + 24) = 0;
  *(_DWORD *)(v106 + 32) = 7;
  *(_BYTE *)(v106 + 36) = 0;
  *(_BYTE *)(v106 + 37) = 1;
  v107 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mul_hi", 6uLL);
  *(_DWORD *)(v107 + 8) = 1;
  *(_QWORD *)(v107 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v107 + 24) = 0;
  *(_DWORD *)(v107 + 32) = 7;
  *(_BYTE *)(v107 + 36) = 0;
  *(_BYTE *)(v107 + 37) = 1;
  v108 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "rotate", 6uLL);
  *(_DWORD *)(v108 + 8) = 1;
  *(_QWORD *)(v108 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v108 + 24) = 0;
  *(_DWORD *)(v108 + 32) = 7;
  *(_BYTE *)(v108 + 36) = 0;
  *(_BYTE *)(v108 + 37) = 1;
  v109 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "popcount", 8uLL);
  *(_DWORD *)(v109 + 8) = 1;
  *(_QWORD *)(v109 + 16) = AGCLLVMAirBuiltins::buildPopCount;
  *(_QWORD *)(v109 + 24) = 0;
  *(_DWORD *)(v109 + 32) = 3;
  *(_BYTE *)(v109 + 36) = 0;
  *(_BYTE *)(v109 + 37) = 1;
  v110 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "extract_bits", 0xCuLL);
  *(_DWORD *)(v110 + 8) = 1;
  *(_QWORD *)(v110 + 16) = AGCLLVMAirBuiltins::buildExtractBits;
  *(_QWORD *)(v110 + 24) = 0;
  *(_DWORD *)(v110 + 32) = 7;
  *(_BYTE *)(v110 + 36) = 0;
  *(_BYTE *)(v110 + 37) = 1;
  v111 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "insert_bits", 0xBuLL);
  *(_DWORD *)(v111 + 8) = 1;
  *(_QWORD *)(v111 + 16) = AGCLLVMAirBuiltins::buildInsertBits;
  *(_QWORD *)(v111 + 24) = 0;
  *(_DWORD *)(v111 + 32) = 7;
  *(_BYTE *)(v111 + 36) = 0;
  *(_BYTE *)(v111 + 37) = 1;
  v112 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "reverse_bits", 0xCuLL);
  *(_DWORD *)(v112 + 8) = 1;
  *(_QWORD *)(v112 + 16) = AGCLLVMAirBuiltins::buildReverseBits;
  *(_QWORD *)(v112 + 24) = 0;
  *(_DWORD *)(v112 + 32) = 3;
  *(_BYTE *)(v112 + 36) = 0;
  *(_BYTE *)(v112 + 37) = 1;
  v113 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "any", 3uLL);
  *(_DWORD *)(v113 + 8) = 1;
  *(_QWORD *)(v113 + 16) = AGCLLVMAirBuiltins::buildAny;
  *(_QWORD *)(v113 + 24) = 0;
  *(_DWORD *)(v113 + 32) = 3;
  *(_WORD *)(v113 + 36) = 0;
  v114 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "all", 3uLL);
  *(_DWORD *)(v114 + 8) = 1;
  *(_QWORD *)(v114 + 16) = AGCLLVMAirBuiltins::buildAll;
  *(_QWORD *)(v114 + 24) = 0;
  *(_DWORD *)(v114 + 32) = 3;
  *(_WORD *)(v114 + 36) = 0;
  v115 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "any_msb", 7uLL);
  *(_DWORD *)(v115 + 8) = 1;
  *(_QWORD *)(v115 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v115 + 24) = 0;
  *(_DWORD *)(v115 + 32) = 7;
  *(_BYTE *)(v115 + 36) = 0;
  *(_BYTE *)(v115 + 37) = 1;
  v116 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "all_msb", 7uLL);
  *(_DWORD *)(v116 + 8) = 1;
  *(_QWORD *)(v116 + 16) = AGCLLVMAirBuiltins::unimplemented;
  *(_QWORD *)(v116 + 24) = 0;
  *(_DWORD *)(v116 + 32) = 7;
  *(_BYTE *)(v116 + 36) = 0;
  *(_BYTE *)(v116 + 37) = 1;
  v117 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "saturate", 8uLL);
  *(_DWORD *)(v117 + 8) = 1;
  *(_QWORD *)(v117 + 16) = AGCLLVMAirBuiltins::buildNanFSaturate;
  *(_QWORD *)(v117 + 24) = 0;
  *(_DWORD *)(v117 + 32) = 3;
  *(_BYTE *)(v117 + 36) = 0;
  *(_BYTE *)(v117 + 37) = 1;
  v118 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mix", 3uLL);
  *(_DWORD *)(v118 + 8) = 1;
  *(_QWORD *)(v118 + 16) = AGCLLVMAirBuiltins::buildMix;
  *(_QWORD *)(v118 + 24) = 0;
  *(_DWORD *)(v118 + 32) = 6;
  *(_WORD *)(v118 + 36) = 0;
  v119 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "sign", 4uLL);
  *(_DWORD *)(v119 + 8) = 1;
  *(_QWORD *)(v119 + 16) = AGCLLVMAirBuiltins::buildSign;
  *(_QWORD *)(v119 + 24) = 0;
  *(_DWORD *)(v119 + 32) = 3;
  *(_BYTE *)(v119 + 36) = 0;
  *(_BYTE *)(v119 + 37) = 1;
  v120 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "dot", 3uLL);
  *(_DWORD *)(v120 + 8) = 1;
  *(_QWORD *)(v120 + 16) = AGCLLVMAirBuiltins::buildDot;
  *(_QWORD *)(v120 + 24) = 0;
  *(_DWORD *)(v120 + 32) = 5;
  *(_WORD *)(v120 + 36) = 0;
  v121 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_clamp", 0xAuLL);
  *(_DWORD *)(v121 + 8) = 2;
  *(_QWORD *)(v121 + 16) = AGCLLVMAirBuiltins::buildFastFClamp;
  *(_QWORD *)(v121 + 24) = 0;
  *(_DWORD *)(v121 + 32) = 6;
  *(_BYTE *)(v121 + 36) = 0;
  *(_BYTE *)(v121 + 37) = 1;
  v122 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_saturate", 0xDuLL);
  *(_DWORD *)(v122 + 8) = 2;
  *(_QWORD *)(v122 + 16) = AGCLLVMAirBuiltins::buildFastFSaturate;
  *(_QWORD *)(v122 + 24) = 0;
  *(_DWORD *)(v122 + 32) = 3;
  *(_BYTE *)(v122 + 36) = 0;
  *(_BYTE *)(v122 + 37) = 1;
  v123 = *((_BYTE *)v2 + 43);
  v124 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "dfdx", 4uLL);
  *(_DWORD *)(v124 + 8) = 1;
  *(_QWORD *)(v124 + 16) = AGCLLVMAirBuiltins::buildDfdx;
  *(_QWORD *)(v124 + 24) = 0;
  *(_DWORD *)(v124 + 32) = 3;
  *(_BYTE *)(v124 + 36) = v123;
  *(_BYTE *)(v124 + 37) = 1;
  v125 = *((_BYTE *)v2 + 43);
  v126 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "dfdy", 4uLL);
  *(_DWORD *)(v126 + 8) = 1;
  *(_QWORD *)(v126 + 16) = AGCLLVMAirBuiltins::buildDfdy;
  *(_QWORD *)(v126 + 24) = 0;
  *(_DWORD *)(v126 + 32) = 3;
  *(_BYTE *)(v126 + 36) = v125;
  *(_BYTE *)(v126 + 37) = 1;
  LOBYTE(v2) = *((_BYTE *)v2 + 43);
  v127 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fwidth", 6uLL);
  *(_DWORD *)(v127 + 8) = 1;
  *(_QWORD *)(v127 + 16) = AGCLLVMAirBuiltins::buildWidth;
  *(_QWORD *)(v127 + 24) = 0;
  *(_DWORD *)(v127 + 32) = 3;
  *(_BYTE *)(v127 + 36) = (_BYTE)v2;
  *(_BYTE *)(v127 + 37) = 1;
  v128 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "atomic", 6uLL);
  *(_DWORD *)(v128 + 8) = 1;
  *(_OWORD *)(v128 + 16) = xmmword_1C3E37D80;
  *(_DWORD *)(v128 + 32) = 7;
  *(_WORD *)(v128 + 36) = 0;
  v129 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "assert", 6uLL);
  *(_DWORD *)(v129 + 8) = 1;
  *(_QWORD *)(v129 + 16) = AGCLLVMAirBuiltins::buildAssert;
  *(_QWORD *)(v129 + 24) = 0;
  *(_DWORD *)(v129 + 32) = 1;
  *(_WORD *)(v129 + 36) = 0;
  v130 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_simd_width", 0xEuLL);
  *(_DWORD *)(v130 + 8) = 1;
  *(_QWORD *)(v130 + 16) = AGCLLVMAirBuiltins::buildSimdWidth;
  *(_QWORD *)(v130 + 24) = 0;
  *(_DWORD *)(v130 + 32) = 7;
  *(_WORD *)(v130 + 36) = 0;
  v131 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_simdgroup_size", 0x12uLL);
  *(_DWORD *)(v131 + 8) = 1;
  *(_QWORD *)(v131 + 16) = AGCLLVMAirBuiltins::buildSimdWidth;
  *(_QWORD *)(v131 + 24) = 0;
  *(_DWORD *)(v131 + 32) = 7;
  *(_WORD *)(v131 + 36) = 0;
  v132 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_thread_execution_width", 0x1AuLL);
  *(_DWORD *)(v132 + 8) = 1;
  *(_QWORD *)(v132 + 16) = AGCLLVMAirBuiltins::buildThreadExecutionWidth;
  *(_QWORD *)(v132 + 24) = 0;
  *(_DWORD *)(v132 + 32) = 7;
  *(_WORD *)(v132 + 36) = 0;
  v133 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "simdgroup", 9uLL);
  *(_DWORD *)(v133 + 8) = 1;
  *(_OWORD *)(v133 + 16) = xmmword_1C3E37C10;
  *(_DWORD *)(v133 + 32) = 7;
  *(_WORD *)(v133 + 36) = 0;
  v134 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "is_uniform", 0xAuLL);
  *(_DWORD *)(v134 + 8) = 1;
  *(_QWORD *)(v134 + 16) = AGCLLVMAirBuiltins::replaceIsUniform;
  *(_QWORD *)(v134 + 24) = 0;
  *(_DWORD *)(v134 + 32) = 10;
  *(_WORD *)(v134 + 36) = 0;
  v135 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mul24", 5uLL);
  *(_DWORD *)(v135 + 8) = 1;
  *(_QWORD *)(v135 + 16) = AGCLLVMAirBuiltins::buildIMul24;
  *(_QWORD *)(v135 + 24) = 0;
  *(_DWORD *)(v135 + 32) = 7;
  *(_BYTE *)(v135 + 36) = 0;
  *(_BYTE *)(v135 + 37) = 1;
  v136 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "mad24", 5uLL);
  *(_DWORD *)(v136 + 8) = 1;
  *(_QWORD *)(v136 + 16) = AGCLLVMAirBuiltins::buildIMad24;
  *(_QWORD *)(v136 + 24) = 0;
  *(_DWORD *)(v136 + 32) = 7;
  *(_BYTE *)(v136 + 36) = 0;
  *(_BYTE *)(v136 + 37) = 1;
  v137 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "min3", 4uLL);
  *(_DWORD *)(v137 + 8) = 1;
  *(_QWORD *)(v137 + 16) = AGCLLVMAirBuiltins::buildIMin3;
  *(_QWORD *)(v137 + 24) = 0;
  *(_DWORD *)(v137 + 32) = 7;
  *(_BYTE *)(v137 + 36) = 0;
  *(_BYTE *)(v137 + 37) = 1;
  v138 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmin3", 5uLL);
  *(_DWORD *)(v138 + 8) = 1;
  *(_QWORD *)(v138 + 16) = AGCLLVMAirBuiltins::buildFMin3;
  *(_QWORD *)(v138 + 24) = 0;
  *(_DWORD *)(v138 + 32) = 7;
  *(_BYTE *)(v138 + 36) = 0;
  *(_BYTE *)(v138 + 37) = 1;
  v139 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmin3", 0xAuLL);
  *(_DWORD *)(v139 + 8) = 2;
  *(_QWORD *)(v139 + 16) = AGCLLVMAirBuiltins::buildFastFMin3;
  *(_QWORD *)(v139 + 24) = 0;
  *(_DWORD *)(v139 + 32) = 7;
  *(_BYTE *)(v139 + 36) = 0;
  *(_BYTE *)(v139 + 37) = 1;
  v140 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "max3", 4uLL);
  *(_DWORD *)(v140 + 8) = 1;
  *(_QWORD *)(v140 + 16) = AGCLLVMAirBuiltins::buildIMax3;
  *(_QWORD *)(v140 + 24) = 0;
  *(_DWORD *)(v140 + 32) = 7;
  *(_BYTE *)(v140 + 36) = 0;
  *(_BYTE *)(v140 + 37) = 1;
  v141 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmax3", 5uLL);
  *(_DWORD *)(v141 + 8) = 1;
  *(_QWORD *)(v141 + 16) = AGCLLVMAirBuiltins::buildFMax3;
  *(_QWORD *)(v141 + 24) = 0;
  *(_DWORD *)(v141 + 32) = 7;
  *(_BYTE *)(v141 + 36) = 0;
  *(_BYTE *)(v141 + 37) = 1;
  v142 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmax3", 0xAuLL);
  *(_DWORD *)(v142 + 8) = 2;
  *(_QWORD *)(v142 + 16) = AGCLLVMAirBuiltins::buildFastFMax3;
  *(_QWORD *)(v142 + 24) = 0;
  *(_DWORD *)(v142 + 32) = 7;
  *(_BYTE *)(v142 + 36) = 0;
  *(_BYTE *)(v142 + 37) = 1;
  v143 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "median3", 7uLL);
  *(_DWORD *)(v143 + 8) = 1;
  *(_QWORD *)(v143 + 16) = AGCLLVMAirBuiltins::buildIMedian3;
  *(_QWORD *)(v143 + 24) = 0;
  *(_DWORD *)(v143 + 32) = 7;
  *(_BYTE *)(v143 + 36) = 0;
  *(_BYTE *)(v143 + 37) = 1;
  v144 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fmedian3", 8uLL);
  *(_DWORD *)(v144 + 8) = 1;
  *(_QWORD *)(v144 + 16) = AGCLLVMAirBuiltins::buildFMedian3;
  *(_QWORD *)(v144 + 24) = 0;
  *(_DWORD *)(v144 + 32) = 7;
  *(_BYTE *)(v144 + 36) = 0;
  *(_BYTE *)(v144 + 37) = 1;
  v145 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "fast_fmedian3", 0xDuLL);
  *(_DWORD *)(v145 + 8) = 2;
  *(_QWORD *)(v145 + 16) = AGCLLVMAirBuiltins::buildFastFMedian3;
  *(_QWORD *)(v145 + 24) = 0;
  *(_DWORD *)(v145 + 32) = 7;
  *(_BYTE *)(v145 + 36) = 0;
  *(_BYTE *)(v145 + 37) = 1;
  v146 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "projective_coordinates", 0x16uLL);
  *(_DWORD *)(v146 + 8) = 1;
  *(_QWORD *)(v146 + 16) = AGCLLVMAirBuiltins::buildProjectiveCoordinates;
  *(_QWORD *)(v146 + 24) = 0;
  *(_DWORD *)(v146 + 32) = 3;
  *(_WORD *)(v146 + 36) = 0;
  v147 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_unique_identifier_compute_pipeline_state", 0x2CuLL);
  *(_DWORD *)(v147 + 8) = 1;
  *(_QWORD *)(v147 + 16) = AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft;
  *(_QWORD *)(v147 + 24) = 0;
  *(_DWORD *)(v147 + 32) = 3;
  *(_BYTE *)(v147 + 36) = 0;
  *(_BYTE *)(v147 + 37) = 1;
  v148 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_unique_identifier_render_pipeline_state", 0x2BuLL);
  *(_DWORD *)(v148 + 8) = 1;
  *(_QWORD *)(v148 + 16) = AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft;
  *(_QWORD *)(v148 + 24) = 0;
  *(_DWORD *)(v148 + 32) = 3;
  *(_BYTE *)(v148 + 36) = 0;
  *(_BYTE *)(v148 + 37) = 1;
  v149 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_unique_identifier_command_buffer", 0x24uLL);
  *(_DWORD *)(v149 + 8) = 1;
  *(_QWORD *)(v149 + 16) = AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft;
  *(_QWORD *)(v149 + 24) = 0;
  *(_DWORD *)(v149 + 32) = 3;
  *(_BYTE *)(v149 + 36) = 0;
  *(_BYTE *)(v149 + 37) = 1;
  v150 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_unique_identifier_visible_function_table", 0x2CuLL);
  *(_DWORD *)(v150 + 8) = 1;
  *(_QWORD *)(v150 + 16) = AGCLLVMAirBuiltins::buildGetUniqueIdentifierPsoIcbVft;
  *(_QWORD *)(v150 + 24) = 0;
  *(_DWORD *)(v150 + 32) = 3;
  *(_BYTE *)(v150 + 36) = 0;
  *(_BYTE *)(v150 + 37) = 1;
  result = llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(this, "get_threads_per_simdgroup", 0x19uLL);
  v152 = *result;
  *(_DWORD *)(v152 + 8) = 1;
  *(_QWORD *)(v152 + 16) = AGCLLVMAirBuiltins::buildThreadExecutionWidth;
  *(_QWORD *)(v152 + 24) = 0;
  *(_DWORD *)(v152 + 32) = 7;
  *(_WORD *)(v152 + 36) = 0;
  return result;
}

uint64_t *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x1CAA2C6C0](a3 + 41, 8);
  v11 = v10;
  v12 = v10 + 40;
  if (a3)
    memcpy((void *)(v10 + 40), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)v11 = a3;
  *(_DWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 32) = 0;
  *(_WORD *)(v11 + 36) = 0;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

uint64_t AGCLLVMAirBuiltins::buildCos(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2, 1);
}

uint64_t AGCLLVMAirBuiltins::buildSin(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, 0);
}

uint64_t AGCLLVMAirBuiltins::unimplemented()
{
  return 0;
}

uint64_t AGCLLVMAirBuiltins::buildGExp8(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildGExp(this, a2, 0);
}

uint64_t AGCLLVMAirBuiltins::buildGCmp8(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildGCmp(this, a2, 0);
}

uint64_t AGCLLVMAirBuiltins::buildGExp10(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildGExp(this, a2, 1);
}

uint64_t AGCLLVMAirBuiltins::buildGCmp10(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildGCmp(this, a2, 1);
}

llvm::Value *AGCLLVMAirBuiltins::buildAbs(uint64_t *a1, llvm::CmpInst ***a2, _BYTE *a3)
{
  llvm::CmpInst **v3;
  llvm::Type *v5;
  const char *IntIntrinsicName;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  llvm::Value *InsertElement;
  uint64_t v11;
  uint64_t i;
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t *v16;
  llvm::Value *v19;
  _BYTE v20[32];
  __int16 v21;
  llvm::CmpInst **v22;
  llvm::Value *v23[2];
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (*a3 == 117)
    return (llvm::Value *)v3;
  v5 = *v3;
  if ((*((_DWORD *)*v3 + 2) & 0xFE) == 0x12)
    v5 = (llvm::Type *)**((_QWORD **)*v3 + 2);
  IntIntrinsicName = (const char *)AGCLLVMTargetLowerer::getIntIntrinsicName((uint64_t *)(a1[46] + 976), v5);
  if (!IntIntrinsicName)
  {
    v15 = llvm::ConstantInt::get();
    v16 = a1 + 1;
    v21 = 257;
    llvm::IRBuilderBase::CreateICmp(v16, 40, v3, v15, (uint64_t)v20);
    v21 = 257;
    llvm::IRBuilderBase::CreateNeg((llvm::IRBuilderBase *)v16, (llvm::Value *)v3, (const llvm::Twine *)v20);
    v21 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
  v7 = (uint64_t)IntIntrinsicName;
  v8 = strlen(IntIntrinsicName);
  v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, v7, v8, (uint64_t)v5, (uint64_t)v5);
  v22 = v3;
  if ((*((_DWORD *)*v3 + 2) & 0xFE) != 0x12)
  {
    v21 = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v9 + 24), v9, (uint64_t)&v22, 1, (uint64_t)v20);
  }
  llvm::FixedVectorType::get();
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, (llvm::Value *)v3, v23);
  v11 = *((unsigned int *)*v3 + 8);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v19 = v23[i];
      v21 = 257;
      v13 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v9 + 24), v9, (uint64_t)&v19, 1, (uint64_t)v20);
      v19 = v13;
      v21 = 257;
      v14 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v13, v14, (const llvm::Twine *)v20);
    }
  }
  return InsertElement;
}

uint64_t AGCLLVMAirBuiltins::buildAbsDiff(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  llvm::CmpInst **v3;
  llvm::Value *v4;
  llvm::IRBuilderBase *v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  _BYTE v11[32];
  __int16 v12;

  v3 = *(llvm::CmpInst ***)a2;
  v4 = *(llvm::Value **)(a2 + 8);
  v5 = (llvm::IRBuilderBase *)(a1 + 8);
  if (*a3 == 117)
  {
    v12 = 257;
    v6 = (uint64_t *)(a1 + 8);
    v7 = 36;
  }
  else
  {
    v12 = 257;
    v6 = (uint64_t *)(a1 + 8);
    v7 = 40;
  }
  llvm::IRBuilderBase::CreateICmp(v6, v7, v3, (uint64_t)v4, (uint64_t)v11);
  v12 = 257;
  llvm::IRBuilderBase::CreateSub(v5, v4, (llvm::Value *)v3, (const llvm::Twine *)v11);
  v10 = 257;
  llvm::IRBuilderBase::CreateSub(v5, (llvm::Value *)v3, v4, (const llvm::Twine *)v9);
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Type **AGCLLVMAirBuiltins::buildAddSat(AGCLLVMTargetBuilder *a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  return AGCLLVMTargetBuilder::buildAddSat(a1, *a2, a2[1], *a3 == 115);
}

llvm::Value *AGCLLVMAirBuiltins::buildSubSat(uint64_t a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  llvm::Type **v4;
  llvm::Value *v5;
  int v6;
  llvm::Type *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  const char *IntIntrinsicName;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  unsigned int ScalarSizeInBits;
  llvm::IRBuilderBase *v18;
  llvm::Value *Sub;
  llvm::Value *Xor;
  llvm::Value *v21;
  llvm::Value *Not;
  llvm::CmpInst **v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Type *v26;
  llvm::Type *v27;
  llvm::CmpInst **v28;
  llvm::Type **Neg;
  llvm::Value *v30;
  llvm::CmpInst **LShr;
  uint64_t v32;
  _BYTE v33[32];
  __int16 v34;
  _BYTE v35[32];
  __int16 v36;
  _BYTE v37[32];
  __int16 v38;
  llvm::Type *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  _BYTE v42[32];
  __int16 v43;
  _QWORD v44[4];
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = (llvm::Value *)a2[1];
  v6 = *a3;
  v7 = **a2;
  v8 = *(_QWORD *)(a1 + 368);
  v9 = (uint64_t *)(v8 + 1112);
  v10 = (uint64_t *)(v8 + 1080);
  if (v6 == 115)
    v11 = v10;
  else
    v11 = v9;
  IntIntrinsicName = (const char *)AGCLLVMTargetLowerer::getIntIntrinsicName(v11, **a2);
  if (IntIntrinsicName)
  {
    v13 = (uint64_t)IntIntrinsicName;
    v14 = strlen(IntIntrinsicName);
    v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v13, v14, (uint64_t)v7, (uint64_t)v7, (uint64_t)v7);
    v44[0] = v4;
    v44[1] = v5;
    v43 = 257;
    return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v15 + 24), v15, (uint64_t)v44, 2, (uint64_t)v42);
  }
  else
  {
    v40 = 0;
    v41 = 0;
    v39 = 0;
    AGCLLVMTargetBuilder::getMinMaxConstants(*(AGCLLVMTargetBuilder **)(a1 + 72), v7, v6 == 115, &v41, &v40, &v39);
    if (v6 == 115)
    {
      ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v39);
      v18 = (llvm::IRBuilderBase *)(a1 + 8);
      if (ScalarSizeInBits <= llvm::Type::getScalarSizeInBits(v7))
      {
        v43 = 257;
        Neg = (llvm::Type **)llvm::IRBuilderBase::CreateNeg((llvm::IRBuilderBase *)(a1 + 8), v5, (const llvm::Twine *)v42);
        AGCLLVMTargetBuilder::buildAddSat((AGCLLVMTargetBuilder *)a1, v4, Neg, 1);
        llvm::Type::getScalarSizeInBits(v7);
        v43 = 257;
        v30 = (llvm::Value *)llvm::ConstantInt::get();
        LShr = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v18, (llvm::Value *)v4, v30, (const llvm::Twine *)v42);
        v32 = llvm::ConstantInt::get();
        v43 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 32, LShr, v32, (uint64_t)v42);
        v45 = 257;
        llvm::IRBuilderBase::CreateSub(v18, (llvm::Value *)v4, v5, (const llvm::Twine *)v44);
        v38 = 257;
        llvm::IRBuilderBase::CreateSelect();
        v43 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 32, (llvm::CmpInst **)v5, (uint64_t)v41, (uint64_t)v42);
        v45 = 257;
      }
      else
      {
        v43 = 257;
        Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v4, v5, (const llvm::Twine *)v42);
        v43 = 257;
        Xor = (llvm::Value *)llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v4, v5, (const llvm::Twine *)v42);
        v45 = 257;
        v21 = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v18, v5, Sub, (const llvm::Twine *)v44);
        v38 = 257;
        Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v18, v21, (const llvm::Twine *)v37);
        v36 = 257;
        v23 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v18, Xor, Not, (const llvm::Twine *)v35);
        v24 = llvm::ConstantInt::get();
        v34 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 40, v23, v24, (uint64_t)v33);
        v25 = llvm::ConstantInt::get();
        v43 = 257;
        llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 39, v4, v25, (uint64_t)v42);
        v26 = *v4;
        v43 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, (uint64_t)v40, (uint64_t)v26, (uint64_t)v42);
        v27 = *v4;
        v45 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, (uint64_t)v41, (uint64_t)v27, (uint64_t)v44);
        v38 = 257;
        llvm::IRBuilderBase::CreateSelect();
        v43 = 257;
      }
    }
    else
    {
      v43 = 257;
      v28 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v4, v5, (const llvm::Twine *)v42);
      v43 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v28, (uint64_t)v4, (uint64_t)v42);
      llvm::ConstantInt::get();
      v45 = 257;
    }
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

llvm::Type **AGCLLVMAirBuiltins::buildMadSat(uint64_t a1, llvm::Type ***a2, unsigned __int8 *a3)
{
  llvm::Type **v4;
  llvm::Type **v5;
  llvm::Type **v6;
  int v7;
  llvm::Type *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  const char *IntIntrinsicName;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  llvm::IRBuilderBase *v18;
  llvm::Type *v19;
  llvm::Type **SExtOrTrunc;
  llvm::Type **v21;
  llvm::Type **v22;
  llvm::Value *Mul;
  llvm::CmpInst **Add;
  llvm::CmpInst **Select;
  llvm::Type **v26;
  llvm::Type **ZExtOrTrunc;
  llvm::Type **v28;
  llvm::Type **v29;
  llvm::Value *v30;
  llvm::CmpInst **v31;
  llvm::Type **v32;
  llvm::Type *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  _BYTE v36[32];
  __int16 v37;
  _QWORD v38[4];
  __int16 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = a2[1];
  v6 = a2[2];
  v7 = *a3;
  v8 = **a2;
  v9 = *(_QWORD *)(a1 + 368);
  v10 = (uint64_t *)(v9 + 1176);
  v11 = (uint64_t *)(v9 + 1144);
  if (v7 == 115)
    v12 = v11;
  else
    v12 = v10;
  IntIntrinsicName = (const char *)AGCLLVMTargetLowerer::getIntIntrinsicName(v12, **a2);
  if (IntIntrinsicName)
  {
    v14 = (uint64_t)IntIntrinsicName;
    v15 = strlen(IntIntrinsicName);
    v16 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(a1, v14, v15, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8);
    v38[0] = v5;
    v38[1] = v4;
    v38[2] = v6;
    v37 = 257;
    return (llvm::Type **)llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v16 + 24), v16, (uint64_t)v38, 3, (uint64_t)v36);
  }
  else
  {
    v34 = 0;
    v35 = 0;
    v33 = 0;
    AGCLLVMTargetBuilder::getMinMaxConstants(*(AGCLLVMTargetBuilder **)(a1 + 72), v8, v7 == 115, &v35, &v34, &v33);
    v18 = (llvm::IRBuilderBase *)(a1 + 8);
    v19 = v33;
    v37 = 257;
    if (v7 == 115)
    {
      SExtOrTrunc = llvm::IRBuilderBase::CreateSExtOrTrunc(v18, v5, v33, (const llvm::Twine *)v36);
      v37 = 257;
      v21 = llvm::IRBuilderBase::CreateSExtOrTrunc(v18, v4, v19, (const llvm::Twine *)v36);
      v37 = 257;
      v22 = llvm::IRBuilderBase::CreateSExtOrTrunc(v18, v6, v19, (const llvm::Twine *)v36);
      v37 = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, (llvm::Value *)SExtOrTrunc, (llvm::Value *)v21, (const llvm::Twine *)v36);
      v37 = 257;
      Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v18, Mul, (llvm::Value *)v22, (const llvm::Twine *)v36);
      v37 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 40, Add, (uint64_t)v35, (uint64_t)v36);
      v39 = 257;
      Select = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSelect();
      v37 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 38, Select, (uint64_t)v34, (uint64_t)v36);
      v39 = 257;
      v26 = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
      v37 = 257;
      return llvm::IRBuilderBase::CreateSExtOrTrunc(v18, v26, v8, (const llvm::Twine *)v36);
    }
    else
    {
      ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc(v18, v5, v33, (const llvm::Twine *)v36);
      v37 = 257;
      v28 = llvm::IRBuilderBase::CreateZExtOrTrunc(v18, v4, v19, (const llvm::Twine *)v36);
      v37 = 257;
      v29 = llvm::IRBuilderBase::CreateZExtOrTrunc(v18, v6, v19, (const llvm::Twine *)v36);
      v37 = 257;
      v30 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v18, (llvm::Value *)ZExtOrTrunc, (llvm::Value *)v28, (const llvm::Twine *)v36);
      v37 = 257;
      v31 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v18, v30, (llvm::Value *)v29, (const llvm::Twine *)v36);
      v37 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v18, 34, v31, (uint64_t)v34, (uint64_t)v36);
      v39 = 257;
      v32 = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
      v37 = 257;
      return llvm::IRBuilderBase::CreateZExtOrTrunc(v18, v32, v8, (const llvm::Twine *)v36);
    }
  }
}

uint64_t AGCLLVMAirBuiltins::buildIMax(AGCLLVMBuilder *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  if (*a3 == 115)
    v3 = 38;
  else
    v3 = 34;
  return AGCLLVMBuilder::buildICmpSel(a1, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), v3);
}

uint64_t AGCLLVMAirBuiltins::buildIMin(AGCLLVMBuilder *a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  if (*a3 == 115)
    v3 = 40;
  else
    v3 = 36;
  return AGCLLVMBuilder::buildICmpSel(a1, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), v3);
}

llvm::Value *AGCLLVMAirBuiltins::buildAll(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  return AGCLLVMAirBuiltins::buildAnyOrAll(this, a2, 0);
}

uint64_t AGCLLVMAirBuiltins::buildFastFClamp(AGCLLVMAirBuiltins *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v8 = *((_QWORD *)this + 46);
  v11 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v13 = *((_DWORD *)this + 26);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, llvm::Value *, llvm::Value *, _QWORD))(*(_QWORD *)v8 + 80))(v8, &v11, a2, a3, a4, 0);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMAirBuiltins::buildFastFSaturate(AGCLLVMAirBuiltins *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  int v9;

  v4 = *((_QWORD *)this + 46);
  v7 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMAirBuiltins *)((char *)this + 8));
  v9 = *((_DWORD *)this + 26);
  v5 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, _QWORD))(*(_QWORD *)v4 + 40))(v4, &v7, a2, 0);
  if (v8)
    llvm::MetadataTracking::untrack();
  return v5;
}

uint64_t AGCLLVMAirBuiltins::buildIMul24(AGCLLVMAirBuiltins *this, llvm::Value **a2, unsigned __int8 *a3, uint64_t a4)
{
  _BOOL4 v6;
  llvm::Value *v7;
  llvm::Value *v8;
  _BYTE v10[32];
  __int16 v11;

  if (a4)
    v6 = *a3 == 115;
  else
    v6 = 0;
  v7 = (llvm::Value *)AGCLLVMAirBuiltins::truncateTo24B(this, *a2, v6);
  v8 = (llvm::Value *)AGCLLVMAirBuiltins::truncateTo24B(this, a2[1], v6);
  v11 = 257;
  return llvm::IRBuilderBase::CreateMul((AGCLLVMAirBuiltins *)((char *)this + 8), v7, v8, (const llvm::Twine *)v10);
}

uint64_t AGCLLVMAirBuiltins::buildIMad24(AGCLLVMAirBuiltins *a1, llvm::Value **a2, unsigned __int8 *a3, uint64_t a4)
{
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  _BYTE v9[32];
  __int16 v10;

  v5 = (AGCLLVMAirBuiltins *)((char *)a1 + 8);
  v6 = (llvm::Value *)AGCLLVMAirBuiltins::buildIMul24(a1, a2, a3, a4);
  v7 = a2[2];
  v10 = 257;
  return llvm::IRBuilderBase::CreateAdd(v5, v6, v7, (const llvm::Twine *)v9);
}

uint64_t AGCLLVMAirBuiltins::buildIMin3(AGCLLVMBuilder *a1, uint64_t a2, _BYTE *a3)
{
  llvm::Value *v4;
  uint64_t v5;
  llvm::CmpInst **v6;

  v4 = *(llvm::Value **)(a2 + 16);
  if (*a3 == 115)
    v5 = 40;
  else
    v5 = 36;
  v6 = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(a1, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), v5);
  return AGCLLVMBuilder::buildICmpSel(a1, v6, v4, v5);
}

uint64_t AGCLLVMAirBuiltins::buildFMin3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  llvm::Value *v4;

  v4 = (llvm::Value *)AGCLLVMAirBuiltins::buildNanFMin(a1, *a2, a2[1]);
  return AGCLLVMAirBuiltins::buildNanFMin(a1, v4, a2[2]);
}

uint64_t AGCLLVMAirBuiltins::buildFastFMin3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  llvm::Value *v4;

  v4 = (llvm::Value *)AGCLLVMAirBuiltins::buildFastFMin(a1, *a2, a2[1]);
  return AGCLLVMAirBuiltins::buildFastFMin(a1, v4, a2[2]);
}

uint64_t AGCLLVMAirBuiltins::buildIMax3(AGCLLVMBuilder *a1, uint64_t a2, _BYTE *a3)
{
  llvm::Value *v4;
  uint64_t v5;
  llvm::CmpInst **v6;

  v4 = *(llvm::Value **)(a2 + 16);
  if (*a3 == 115)
    v5 = 38;
  else
    v5 = 34;
  v6 = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(a1, *(llvm::CmpInst ***)a2, *(llvm::Value **)(a2 + 8), v5);
  return AGCLLVMBuilder::buildICmpSel(a1, v6, v4, v5);
}

uint64_t AGCLLVMAirBuiltins::buildFMax3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  llvm::Value *v4;

  v4 = (llvm::Value *)AGCLLVMAirBuiltins::buildNanFMax(a1, *a2, a2[1]);
  return AGCLLVMAirBuiltins::buildNanFMax(a1, v4, a2[2]);
}

uint64_t AGCLLVMAirBuiltins::buildFastFMax3(AGCLLVMAirBuiltins *a1, llvm::Value **a2)
{
  llvm::Value *v4;

  v4 = (llvm::Value *)AGCLLVMAirBuiltins::buildFastFMax(a1, *a2, a2[1]);
  return AGCLLVMAirBuiltins::buildFastFMax(a1, v4, a2[2]);
}

uint64_t AGCLLVMAirBuiltins::buildIMedian3(AGCLLVMBuilder *a1, uint64_t a2, _BYTE *a3)
{
  llvm::CmpInst **v4;
  llvm::Value *v5;
  llvm::CmpInst **v6;
  uint64_t *v7;
  llvm::CmpInst **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;

  v4 = *(llvm::CmpInst ***)a2;
  v5 = *(llvm::Value **)(a2 + 8);
  v6 = *(llvm::CmpInst ***)(a2 + 16);
  v7 = (uint64_t *)((char *)a1 + 8);
  v8 = *(llvm::CmpInst ***)a2;
  if (*a3 == 115)
  {
    v9 = AGCLLVMBuilder::buildICmpSel(a1, v8, v5, 40);
    v10 = AGCLLVMBuilder::buildICmpSel(a1, v4, v5, 38);
    v18 = 257;
    llvm::IRBuilderBase::CreateICmp(v7, 41, v6, v9, (uint64_t)v17);
    v16 = 257;
    v11 = v7;
    v12 = 39;
  }
  else
  {
    v13 = AGCLLVMBuilder::buildICmpSel(a1, v8, v5, 36);
    v10 = AGCLLVMBuilder::buildICmpSel(a1, v4, v5, 34);
    v18 = 257;
    llvm::IRBuilderBase::CreateICmp(v7, 37, v6, v13, (uint64_t)v17);
    v16 = 257;
    v11 = v7;
    v12 = 35;
  }
  llvm::IRBuilderBase::CreateICmp(v11, v12, v6, v10, (uint64_t)v15);
  llvm::IRBuilderBase::CreateSelect();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMAirBuiltins::truncateTo24B(AGCLLVMAirBuiltins *this, llvm::Value *a2, int a3)
{
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  llvm::Value *Shl;
  llvm::Value *v8;
  _BYTE v10[32];
  __int16 v11;

  v5 = (AGCLLVMAirBuiltins *)((char *)this + 8);
  v11 = 257;
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v5, a2, v6, (const llvm::Twine *)v10);
  v11 = 257;
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  if (a3)
    return llvm::IRBuilderBase::CreateAShr(v5, Shl, v8, (const llvm::Twine *)v10);
  else
    return llvm::IRBuilderBase::CreateLShr(v5, Shl, v8, (const llvm::Twine *)v10);
}

uint64_t llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      for (i = 0; i != v2; ++i)
      {
        v4 = *(uint64_t **)(*(_QWORD *)a1 + 8 * i);
        if (v4 != (uint64_t *)-8 && v4 != 0)
        {
          v6 = *v4;
          if (*((_DWORD *)v4 + 5))
          {
            v7 = *((unsigned int *)v4 + 4);
            if ((_DWORD)v7)
            {
              v8 = 0;
              v9 = 8 * v7;
              do
              {
                v10 = *(llvm **)(v4[1] + v8);
                if (v10 != (llvm *)-8 && v10 != 0)
                  llvm::deallocate_buffer(v10, (void *)(*(_QWORD *)v10 + 25));
                v8 += 8;
              }
              while (v9 != v8);
            }
          }
          free((void *)v4[1]);
          llvm::deallocate_buffer((llvm *)v4, (void *)(v6 + 41));
        }
      }
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *llvm::StringMap<llvm::StringMap<llvm::Value * (AGCLLVMAirTrigIdentities::*)(llvm::Value *),llvm::MallocAllocator>,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1ED8398C0) = qword_1ED8398C0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 41, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 40;
  if (a2)
    memcpy((void *)(v8 + 40), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *v9 = a2;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = 0x1800000000;
  *i = (uint64_t)v9;
  ++dword_1ED8398BC;
  for (i = (uint64_t *)(AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirTrigIdentities::initializeTrigReplacementMap(void)::trig_replacements));
        !*i || *i == -8;
  return i;
}

uint64_t AGCLLVMAirTrigIdentities::buildNopIdentity(uint64_t a1, uint64_t a2)
{
  return a2;
}

llvm::Value *AGCLLVMAirTrigIdentities::buildPythagoreanIdentity(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t FMul;
  llvm::Value *FSub;
  _WORD v8[20];
  _BYTE v9[32];
  __int16 v10;

  v4 = llvm::ConstantFP::get();
  v10 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v9);
  v8[16] = 257;
  FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, v4, FMul, (uint64_t)v8);
  return AGCLLVMTargetBuilder::CreateSqrt(this, FSub);
}

uint64_t AGCLLVMAirTrigIdentities::buildSinArctan(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t FMul;
  llvm::Value *FAdd;
  llvm::Value *Sqrt;
  _WORD v9[20];
  _BYTE v10[32];
  __int16 v11;

  v4 = llvm::ConstantFP::get();
  v11 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v10);
  v9[16] = 257;
  FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, FMul, (uint64_t)v9);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FAdd);
  v11 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, (uint64_t)a2, (uint64_t)Sqrt, (uint64_t)v10);
}

uint64_t AGCLLVMAirTrigIdentities::buildCosArctan(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t FMul;
  llvm::Value *FAdd;
  llvm::Value *Sqrt;
  _WORD v9[20];
  _BYTE v10[32];
  __int16 v11;

  v4 = llvm::ConstantFP::get();
  v11 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, (uint64_t)a2, (uint64_t)a2, (uint64_t)v10);
  v9[16] = 257;
  FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)this + 8, v4, FMul, (uint64_t)v9);
  Sqrt = AGCLLVMTargetBuilder::CreateSqrt(this, FAdd);
  v11 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)this + 8, v4, (uint64_t)Sqrt, (uint64_t)v10);
}

uint64_t AGCLLVMAirTrigIdentities::buildTanArcsin(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  char *v3;
  llvm::Value *v4;
  _BYTE v6[32];
  __int16 v7;

  v3 = (char *)this + 8;
  v4 = AGCLLVMAirTrigIdentities::buildPythagoreanIdentity(this, a2);
  v7 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)v3, (uint64_t)a2, (uint64_t)v4, (uint64_t)v6);
}

uint64_t AGCLLVMAirTrigIdentities::buildTanArccos(AGCLLVMAirTrigIdentities *this, llvm::Value *a2)
{
  char *v3;
  llvm::Value *v4;
  _BYTE v6[32];
  __int16 v7;

  v3 = (char *)this + 8;
  v4 = AGCLLVMAirTrigIdentities::buildPythagoreanIdentity(this, a2);
  v7 = 257;
  return llvm::IRBuilderBase::CreateFDiv((uint64_t)v3, (uint64_t)v4, (uint64_t)a2, (uint64_t)v6);
}

void AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(AGCLLVMUserComputeKernelLegacy *this)
{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMUserComputeKernelBase::getMaxTotalThreadsPerThreadgroup(AGCLLVMUserComputeKernelBase *this)
{
  return *((unsigned int *)this + 1083);
}

uint64_t AGCLLVMUserComputeKernelLegacy::initCompile(AGCLLVMUserComputeKernelLegacy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *String;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t inited;
  int v16;
  unint64_t v17;
  uint64_t Function;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  char *v24;

  v2 = *((_QWORD *)this + 22);
  v24 = (char *)this + 4328;
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)v2);
    v4 = *((_QWORD *)this + 22);
    v3 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v2 = v4;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 88);
  }
  v5 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  if (v3 != v5)
  {
    while (1)
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v3 + 32));
      if (!v6 || !*(_QWORD *)(v3 + 8))
        goto LABEL_37;
      String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8));
      if (v8 == 34)
        break;
      if (v8 != 31)
      {
        if (v8 != 27)
          goto LABEL_37;
        v9 = *String == 0x657268742E726961 && String[1] == 0x7469736F705F6461;
        v10 = v9 && String[2] == 0x675F6E695F6E6F69;
        if (!v10 || *(_QWORD *)((char *)String + 19) != 0x646972675F6E695FLL)
          goto LABEL_37;
LABEL_25:
        if ((*(_DWORD *)(*(_QWORD *)v3 + 8) & 0xFE) == 0x12)
          goto LABEL_66;
        goto LABEL_37;
      }
      if (*String == 0x657268742E726961
        && String[1] == 0x7865646E695F6461
        && String[2] == 0x657268745F6E695FLL
        && *(_QWORD *)((char *)String + 23) == 0x70756F7267646165)
      {
LABEL_66:
        v24[456] = 1;
        goto LABEL_38;
      }
LABEL_37:
      v3 += 40;
      if (v3 == v5)
        goto LABEL_38;
    }
    if (memcmp(String, "air.thread_position_in_threadgroup", 0x22uLL))
      goto LABEL_37;
    goto LABEL_25;
  }
LABEL_38:
  inited = AGCLLVMUserComputeKernelBase::initCompile(this);
  if ((_DWORD)inited)
  {
    LOBYTE(v16) = 1;
    if (*v24)
    {
LABEL_57:
      *((_QWORD *)this + 545) = -1;
      *((_DWORD *)this + 1092) = -1;
LABEL_58:
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 4336, 0);
      *((_DWORD *)this + 1090) = 0;
    }
    else
    {
      v17 = 0;
      v16 = 0;
      do
      {
        strlen(off_1E7E8C598[v17]);
        Function = llvm::Module::getFunction();
        if (Function)
        {
          if (!*(_QWORD *)(Function + 96))
            goto LABEL_56;
          v19 = *(_QWORD *)(Function + 8);
          if (v19)
          {
            while (1)
            {
              v20 = *(_QWORD *)(*(_QWORD *)(v19 + 24) - 32 * (*(_DWORD *)(*(_QWORD *)(v19 + 24) + 20) & 0x7FFFFFF));
              if (!v20 || *(_BYTE *)(v20 + 16) != 16)
                break;
              v22 = (_QWORD *)(v20 + 24);
              if (*(_DWORD *)(v20 + 32) >= 0x41u)
                v22 = (_QWORD *)*v22;
              v16 |= 1 << *(_DWORD *)v22;
              v19 = *(_QWORD *)(v19 + 8);
              if (!v19)
                goto LABEL_52;
            }
LABEL_56:
            LOBYTE(v16) = 7;
            goto LABEL_57;
          }
        }
LABEL_52:
        if (v17 > 6)
          break;
        ++v17;
      }
      while (v16 != 7);
      *((_QWORD *)this + 545) = -1;
      *((_DWORD *)this + 1092) = -1;
      if ((v16 & 1) != 0)
        goto LABEL_58;
    }
    if ((v16 & 6) != 0)
    {
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 4336, 3);
      if ((v16 & 2) != 0)
        *((_DWORD *)this + 1091) = *((_DWORD *)this + 1086) - 1;
      if ((v16 & 4) != 0)
        *((_DWORD *)this + 1092) = *((_DWORD *)this + 1086) - 1;
    }
    AGCLLVMUserShader::setUniformAtomicsMode(this);
  }
  return inited;
}

uint64_t AGCLLVMUserComputeKernelLegacy::wrapperFunctionType(AGCLLVMUserComputeKernelLegacy *this)
{
  uint64_t v1;
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v1 = *((unsigned int *)this + 1086);
  if ((_DWORD)v1)
  {
    v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v3 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(*((unsigned int *)this + 1086));
    v4 = 0;
    do
    {
      *(_QWORD *)&v3[v4] = *((_QWORD *)v2 + 25);
      v4 += 8;
    }
    while (8 * v1 != v4);
    v5 = v3;
  }
  else
  {
    v5 = 0;
  }
  v6 = llvm::FunctionType::get();
  if (v5)
    operator delete(v5);
  return v6;
}

uint64_t AGCLLVMUserComputeKernelBase::wrapperCallingConvention(AGCLLVMUserComputeKernelBase *this)
{
  return 106;
}

uint64_t AGCLLVMUserComputeKernelBase::wrapperPrefixData(AGCLLVMUserComputeKernelBase *this)
{
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 816) + 52))
    return 0;
  llvm::ConstantInt::get();
  return llvm::ConstantDataVector::getSplat();
}

uint64_t AGCLLVMUserComputeKernelBase::setupShaderInputs(AGCLLVMUserComputeKernelBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Instruction *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t String;
  uint64_t v13;
  uint64_t result;

  v2 = *((_QWORD *)this + 22);
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v6 = *((_QWORD *)this + 22);
    v5 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v2 = v6;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 88);
  }
  v7 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  while (v5 != v7)
  {
    if (*(_QWORD *)(v5 + 8))
    {
      v8 = *(_QWORD *)(v4 + 40);
      v9 = v8 ? (llvm::Instruction *)(v8 - 24) : 0;
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v9, *((_QWORD *)this + 6));
      v10 = *(unsigned int *)(v5 + 32);
      v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v10);
      if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v5, v10, v11) & 1) == 0)
      {
        String = llvm::MDString::getString(*(llvm::MDString **)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8));
        result = (*(uint64_t (**)(AGCLLVMUserComputeKernelBase *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 552))(this, String, v13, *(_QWORD *)v5);
        if (!result)
          return result;
        llvm::Value::replaceAllUsesWith();
      }
    }
    v5 += 40;
  }
  return 1;
}

uint64_t AGCLLVMUserComputeKernelBase::setupShaderOutputs(AGCLLVMUserComputeKernelBase *this)
{
  llvm::Function *Function;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((_QWORD *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  if ((*(_BYTE *)(*((_QWORD *)this + 540) + 16) & 0x40) != 0)
  {
    v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
    v4 = v3 + 24;
    v5 = *(_QWORD *)(v3 + 32);
    if (v5 != v3 + 24)
    {
      do
      {
        if (v5)
          v6 = v5 - 56;
        else
          v6 = 0;
        v9[0] = *(_QWORD *)(v6 + 112);
        llvm::AttributeList::getFnAttrs((llvm::AttributeList *)v9);
        v8 = llvm::AttributeSet::addAttribute();
        LODWORD(v9[0]) = -1;
        v9[1] = v8;
        *(_QWORD *)(v6 + 112) = llvm::AttributeList::get();
        v5 = *(_QWORD *)(v5 + 8);
      }
      while (v5 != v4);
    }
  }
  return 1;
}

uint64_t AGCLLVMUserComputeKernelLegacy::replaceBuiltins(AGCLLVMUserComputeKernelLegacy *this)
{
  AGCLLVMUserComputeKernelLegacy *v1;
  uint64_t v2;
  llvm::BasicBlock *v3;
  llvm::BasicBlock *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  llvm::Instruction *v9;
  _QWORD *v10;
  llvm::Instruction *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::ValueHandleBase *v15;
  char v16;
  uint64_t v17;
  llvm::Type **v18;
  llvm::IRBuilderBase *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  uint64_t Mul;
  llvm::IRBuilderBase *v23;
  llvm::Value *v24;
  llvm::Value *v25;
  uint64_t Add;
  llvm::Type **v27;
  llvm::IRBuilderBase *v28;
  llvm::Value *v29;
  llvm::Value *v30;
  uint64_t v31;
  llvm::IRBuilderBase *v32;
  llvm::Value *v33;
  llvm::Value *v34;
  uint64_t v35;
  char *v36;
  uint64_t WGPadSHGlobal;
  char *v38;
  uint64_t v39;
  llvm::Value *Cast;
  char *v41;
  llvm::IRBuilderBase *v42;
  llvm::Value *v43;
  uint64_t Element;
  char *v45;
  uint64_t *v46;
  llvm::CmpInst **v47;
  uint64_t ICmp;
  char *v49;
  uint64_t FirstInsertionPt;
  llvm::Value *v51;
  llvm::Value *v52;
  char *v53;
  uint64_t v54;
  llvm::Type *v55;
  llvm::Value *v56;
  char *v57;
  llvm::IRBuilderBase *v58;
  uint64_t v59;
  llvm::Value *v60;
  uint64_t v61;
  char *v62;
  llvm::Value *v63;
  llvm::Value *v64;
  llvm::Value *v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  llvm::Value *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  llvm::LLVMContext **v82;
  unsigned __int8 v83;
  uint64_t i;
  uint64_t Function;
  llvm::Function *v86;
  uint64_t *v87;
  uint64_t *v88;
  _BYTE *v89;
  size_t v90;
  uint64_t v91;
  uint64_t *v92;
  void (**v93)(_QWORD *, _QWORD);
  uint64_t *v94;
  void (*v95)(_QWORD *, _QWORD);
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  llvm::Instruction *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t j;
  unint64_t v109;
  uint64_t v110;
  llvm::Value **v111;
  llvm::Instruction *v112;
  llvm::Value **v113;
  llvm::Value *v114;
  llvm::Value *v115;
  llvm::Type *v116;
  uint64_t v117;
  int v118;
  llvm::Type *v119;
  uint64_t v120;
  llvm::Value **v121;
  llvm::Value *v122;
  char *v123;
  uint64_t (*v124)(_QWORD);
  _QWORD *v125;
  uint64_t v126;
  uint64_t (*v127)(_QWORD);
  _QWORD *v128;
  uint64_t (*v129)(_QWORD);
  _QWORD *v130;
  uint64_t v131;
  unsigned int *v132;
  uint64_t (*v133)(_QWORD);
  _QWORD *v134;
  uint64_t (*v135)(_QWORD);
  _QWORD *v136;
  uint64_t (*v137)(_QWORD);
  _QWORD *v138;
  _OWORD *v139;
  void *v140;
  uint64_t v141;
  llvm::Value *FPTrunc;
  char *v143;
  uint64_t v144;
  llvm::Value *v145;
  uint64_t v146;
  llvm::GlobalVariable *v147;
  uint64_t v148;
  llvm::Value *v149;
  int v150;
  char *v151;
  int v152;
  llvm::Instruction *v153;
  uint64_t v154;
  _QWORD *v155;
  llvm::Value *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  const char **v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  llvm::Value *v168;
  uint64_t v169;
  llvm::Type **v170;
  llvm::GlobalVariable *v171;
  llvm::Type *v172;
  char *v173;
  uint64_t AlignedLoad;
  unsigned int v176;
  int v177;
  uint64_t v178;
  llvm::Function *v179;
  uint64_t *v181;
  uint64_t v182;
  uint64_t *v183;
  llvm::ValueHandleBase *v184;
  _BYTE *v185;
  _DWORD *v186;
  uint64_t v187;
  char *v188;
  llvm::Value *v189;
  llvm::Value *v190;
  __int128 v191;
  uint64_t v192;
  int v193;
  __int128 v194;
  uint64_t v195;
  int v196;
  uint64_t PrimitiveSizeInBits;
  uint64_t v198;
  uint64_t v199;
  __int16 v200;
  void *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  __int16 v205;
  __int128 v206;
  int v207;
  uint64_t v208;
  _QWORD v209[29];
  AGCLLVMUserComputeKernelLegacy *v210;
  _OWORD v211[2];
  __int128 v212;
  uint64_t v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  v176 = AGCLLVMUserObject::replaceBuiltins(this);
  if (!v176)
    return v176;
  v1 = this;
  v2 = *(_QWORD *)(*((_QWORD *)this + 21) + 80);
  if (v2)
    v3 = (llvm::BasicBlock *)(v2 - 24);
  else
    v3 = 0;
  if (*((_BYTE *)this + 4328))
  {
    *(_QWORD *)&v194 = llvm::BasicBlock::getFirstInsertionPt(v3);
    AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v3, (uint64_t *)&v194);
    v201 = "kernel_entry";
    v205 = 259;
    v4 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    v201 = "early_out_block";
    v205 = 259;
    v5 = operator new();
    v6 = llvm::BasicBlock::BasicBlock();
    v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v7 + 11) = v6;
    *((_QWORD *)v7 + 12) = v6 + 40;
    llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserComputeKernelLegacy *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                        + 40));
    v8 = (_QWORD *)*((_QWORD *)v3 + 5);
    if (v8 == (_QWORD *)((char *)v3 + 40))
    {
      v11 = 0;
    }
    else
    {
      v9 = (llvm::Instruction *)(v8 - 3);
      if (v8)
        v10 = v8 - 3;
      else
        v10 = 0;
      if (*((unsigned __int8 *)v10 + 16) - 29 >= 0xB)
        v11 = 0;
      else
        v11 = v9;
    }
    llvm::Instruction::eraseFromParent(v11);
    v36 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v36 + 11) = v3;
    *((_QWORD *)v36 + 12) = (char *)v3 + 40;
    WGPadSHGlobal = AGCLLVMUserComputeKernelLegacy::getWGPadSHGlobal((llvm::Type ***)this, 0);
    v38 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v39 = *((_QWORD *)v38 + 34);
    v205 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v38 + 40), 49, WGPadSHGlobal, v39, (uint64_t)&v201);
    v41 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v205 = 257;
    v42 = (llvm::IRBuilderBase *)(v41 + 40);
    v43 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement(v42, Cast, v43, (const llvm::Twine *)&v201);
    v45 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = (uint64_t *)(v45 + 40);
    v47 = (llvm::CmpInst **)AGCLLVMUserComputeKernelLegacy::buildLocalIDInternal(this, *((llvm::Type **)v45 + 28), 0);
    v205 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp(v46, 35, v47, Element, (uint64_t)&v201);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp, v5, (uint64_t)v4);
    v49 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v4);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v49, (uint64_t)v4, FirstInsertionPt);
    memset(v211, 0, 24);
    v51 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::getWGPadSHGlobal((llvm::Type ***)this, (llvm::Value *)1);
    v52 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::getWGPadSHGlobal((llvm::Type ***)this, (llvm::Value *)2);
    v53 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v54 = 192;
    if (!*(_QWORD *)(*((_QWORD *)v53 + 50) + 1008))
      v54 = 200;
    v55 = *(llvm::Type **)&v53[v54 + 32];
    v56 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalIDInternal(this, v55, 0);
    if (*((_BYTE *)this + 4784))
    {
      v57 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v205 = 257;
      v58 = (llvm::IRBuilderBase *)(v57 + 40);
      v59 = 1;
      v60 = (llvm::Value *)llvm::ConstantInt::get();
      v61 = llvm::IRBuilderBase::CreateExtractElement(v58, Cast, v60, (const llvm::Twine *)&v201);
      v62 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
      v205 = 257;
      v63 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v62, 39, v61, (uint64_t)v55, (uint64_t)&v201);
      v64 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildWGMulShiftMod(this, v56, v63, v51, (llvm::Value **)&v211[1]);
      v65 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, v55, 0);
      v66 = AGCLLVMUserComputeKernelLegacy::buildWGMulShiftMod(this, v64, v65, v52, (llvm::Value **)v211 + 1);
      v67 = 0;
      *(_QWORD *)&v211[0] = v66;
      do
      {
        v68 = v67;
        v69 = *(_QWORD *)(*(_QWORD *)this - 24);
        v70 = *((_QWORD *)v211 + v59);
        v71 = *(_QWORD *)((char *)this + v69 + 232);
        v205 = 257;
        v72 = llvm::IRBuilderBase::CreateCast((uint64_t)this + v69 + 40, 39, v70, v71, (uint64_t)&v201);
        PrimitiveSizeInBits = 4;
        v198 = 0;
        v199 = v72;
        if (v72 != -8192 && v72 != -4096 && v72 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&PrimitiveSizeInBits);
        llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 24 * v59 + 4376), &PrimitiveSizeInBits);
        if (v199 != -8192 && v199 != -4096 && v199)
          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&PrimitiveSizeInBits);
        v67 = 1;
        v59 = 2;
      }
      while ((v68 & 1) == 0);
      v74 = *(_QWORD *)&v211[0];
    }
    else
    {
      v75 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, v55, 0);
      v74 = AGCLLVMUserComputeKernelLegacy::buildWGMulShiftMod(this, v56, v75, v52, 0);
      *(_QWORD *)&v211[0] = v74;
    }
    v76 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v77 = *((_QWORD *)v76 + 29);
    v205 = 257;
    v78 = llvm::IRBuilderBase::CreateCast((uint64_t)(v76 + 40), 39, v74, v77, (uint64_t)&v201);
    PrimitiveSizeInBits = 4;
    v198 = 0;
    v199 = v78;
    if (v78 != -8192 && v78 != -4096 && v78 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&PrimitiveSizeInBits);
    llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4376), &PrimitiveSizeInBits);
    if (v199 != -8192 && v199 != -4096 && v199)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&PrimitiveSizeInBits);
    v80 = AGCLLVMUserComputeKernelLegacy::buildLocalIDInternal(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), 0);
    v201 = (void *)4;
    v202 = 0;
    v203 = v80;
    if (v80 != -8192 && v80 != -4096 && v80 != 0)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v201);
    llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448), &v201);
    if (v203 != -8192 && v203 != -4096 && v203)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v201);
  }
  else
  {
    v12 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v13 = llvm::BasicBlock::getFirstInsertionPt(v3);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v12, (uint64_t)v3, v13);
    v14 = 0;
    v15 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + 4376);
    v16 = 1;
    do
    {
      v17 = AGCLLVMUserComputeKernelLegacy::buildLocalIDInternal(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), v14);
      llvm::ValueHandleBase::operator=(v15, v17);
      v16 &= *((_QWORD *)v15 + 2) != 0;
      ++v14;
      v15 = (llvm::ValueHandleBase *)((char *)v15 + 24);
    }
    while (v14 != 3);
    if ((v16 & 1) != 0)
    {
      v18 = (llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v19 = (llvm::IRBuilderBase *)(v18 + 5);
      v20 = (llvm::Value *)*((_QWORD *)this + 555);
      v21 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, v18[29], 1u);
      v205 = 257;
      Mul = llvm::IRBuilderBase::CreateMul(v19, v20, v21, (const llvm::Twine *)&v201);
      llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448), Mul);
      v23 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v24 = (llvm::Value *)*((_QWORD *)this + 558);
      v25 = (llvm::Value *)*((_QWORD *)this + 552);
      v205 = 257;
      Add = llvm::IRBuilderBase::CreateAdd(v23, v24, v25, (const llvm::Twine *)&v201);
      llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448), Add);
      v27 = (llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v28 = (llvm::IRBuilderBase *)(v27 + 5);
      v29 = (llvm::Value *)*((_QWORD *)this + 558);
      v30 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, v27[29], 0);
      v205 = 257;
      v31 = llvm::IRBuilderBase::CreateMul(v28, v29, v30, (const llvm::Twine *)&v201);
      llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448), v31);
      v32 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v33 = (llvm::Value *)*((_QWORD *)this + 558);
      v34 = (llvm::Value *)*((_QWORD *)this + 549);
      v205 = 257;
      v35 = llvm::IRBuilderBase::CreateAdd(v32, v33, v34, (const llvm::Twine *)&v201);
      llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448), v35);
    }
  }
  v82 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v201, *v82);
  v210 = this;
  v201 = &off_1E7EB1380;
  v209[25] = v82;
  if ((v83 & 1) == 0
  {
    AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[0] = (uint64_t)"air.get_global_size.i32";
    dword_1ED838DD8 = 1;
    qword_1ED838DE0 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalSize;
    unk_1ED838DE8 = 0;
    dword_1ED838DF0 = 4;
    word_1ED838DF4 = 0;
    qword_1ED838DF8 = (uint64_t)"air.get_global_size.i16";
    dword_1ED838E00 = 1;
    qword_1ED838E08 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalSize;
    unk_1ED838E10 = 0;
    dword_1ED838E18 = 4;
    word_1ED838E1C = 0;
    qword_1ED838E20 = (uint64_t)"air.get_global_id.i32";
    dword_1ED838E28 = 1;
    qword_1ED838E30 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalID;
    unk_1ED838E38 = 0;
    dword_1ED838E40 = 4;
    word_1ED838E44 = 0;
    qword_1ED838E48 = (uint64_t)"air.get_global_id.i16";
    dword_1ED838E50 = 1;
    qword_1ED838E58 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalID;
    unk_1ED838E60 = 0;
    dword_1ED838E68 = 4;
    word_1ED838E6C = 0;
    qword_1ED838E70 = (uint64_t)"air.get_local_size.i32";
    dword_1ED838E78 = 1;
    qword_1ED838E80 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalSize;
    unk_1ED838E88 = 0;
    dword_1ED838E90 = 4;
    word_1ED838E94 = 0;
    qword_1ED838E98 = (uint64_t)"air.get_local_size.i16";
    dword_1ED838EA0 = 1;
    qword_1ED838EA8 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalSize;
    unk_1ED838EB0 = 0;
    dword_1ED838EB8 = 4;
    word_1ED838EBC = 0;
    qword_1ED838EC0 = (uint64_t)"air.get_local_id.i32";
    dword_1ED838EC8 = 1;
    qword_1ED838ED0 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalID;
    unk_1ED838ED8 = 0;
    dword_1ED838EE0 = 4;
    word_1ED838EE4 = 0;
    qword_1ED838EE8 = (uint64_t)"air.get_local_id.i16";
    dword_1ED838EF0 = 1;
    qword_1ED838EF8 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalID;
    unk_1ED838F00 = 0;
    dword_1ED838F08 = 4;
    word_1ED838F0C = 0;
    qword_1ED838F10 = (uint64_t)"air.get_local_linear_id.i32";
    dword_1ED838F18 = 1;
    qword_1ED838F20 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalLinearId;
    unk_1ED838F28 = 0;
    dword_1ED838F30 = 2;
    word_1ED838F34 = 0;
    qword_1ED838F38 = (uint64_t)"air.get_local_linear_id.i16";
    dword_1ED838F40 = 1;
    qword_1ED838F48 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildLocalLinearId;
    unk_1ED838F50 = 0;
    dword_1ED838F58 = 2;
    word_1ED838F5C = 0;
    qword_1ED838F60 = (uint64_t)"air.get_global_linear_id.i32";
    dword_1ED838F68 = 1;
    qword_1ED838F70 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalLinearId;
    unk_1ED838F78 = 0;
    dword_1ED838F80 = 2;
    word_1ED838F84 = 0;
    qword_1ED838F88 = (uint64_t)"air.get_global_linear_id.i16";
    dword_1ED838F90 = 1;
    qword_1ED838F98 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGlobalLinearId;
    unk_1ED838FA0 = 0;
    dword_1ED838FA8 = 2;
    word_1ED838FAC = 0;
    qword_1ED838FB0 = (uint64_t)"air.get_num_groups.i32";
    dword_1ED838FB8 = 1;
    qword_1ED838FC0 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildNumGroups;
    unk_1ED838FC8 = 0;
    dword_1ED838FD0 = 4;
    word_1ED838FD4 = 0;
    qword_1ED838FD8 = (uint64_t)"air.get_num_groups.i16";
    dword_1ED838FE0 = 1;
    qword_1ED838FE8 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildNumGroups;
    qword_1ED838FF0 = 0;
    dword_1ED838FF8 = 4;
    word_1ED838FFC = 0;
    qword_1ED839000 = (uint64_t)"air.get_group_id.i32";
    dword_1ED839008 = 1;
    qword_1ED839010 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGroupID;
    qword_1ED839018 = 0;
    dword_1ED839020 = 4;
    word_1ED839024 = 0;
    qword_1ED839028 = (uint64_t)"air.get_group_id.i16";
    dword_1ED839030 = 1;
    qword_1ED839038 = (uint64_t)AGCLLVMUserComputeKernelLegacy::buildGroupID;
    qword_1ED839040 = 0;
    dword_1ED839048 = 4;
    word_1ED83904C = 0;
    qword_1ED839050 = (uint64_t)"air.get_stage_in_grid_origin.i32";
    dword_1ED839058 = 1;
    xmmword_1ED839060 = xmmword_1C3E37D90;
    dword_1ED839070 = 4;
    word_1ED839074 = 0;
    qword_1ED839078 = (uint64_t)"air.get_stage_in_grid_origin.i16";
    dword_1ED839080 = 1;
    xmmword_1ED839088 = xmmword_1C3E37D90;
    dword_1ED839098 = 4;
    word_1ED83909C = 0;
    qword_1ED8390A0 = (uint64_t)"air.get_stage_in_grid_size.i32";
    dword_1ED8390A8 = 1;
    xmmword_1ED8390B0 = xmmword_1C3E37DA0;
    dword_1ED8390C0 = 4;
    word_1ED8390C4 = 0;
    qword_1ED8390C8 = (uint64_t)"air.get_stage_in_grid_size.i16";
    dword_1ED8390D0 = 1;
    xmmword_1ED8390D8 = xmmword_1C3E37DA0;
    dword_1ED8390E8 = 4;
    word_1ED8390EC = 0;
  }
  for (i = 0; i != 20; ++i)
  {
    if (AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * i])
      strlen((const char *)AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * i]);
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v86 = (llvm::Function *)Function;
      v87 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * i];
      v186 = v87 + 4;
      if (*((_DWORD *)v87 + 8) == 10)
      {
        v91 = *(_QWORD *)(Function + 8);
        if (v91)
        {
          v92 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * i];
          v93 = (void (**)(_QWORD *, _QWORD))(v92 + 2);
          v94 = v92 + 3;
          do
          {
            v95 = *v93;
            v96 = (_QWORD *)((char *)v210 + (*v94 >> 1));
            if ((*v94 & 1) != 0)
              v95 = *(void (**)(_QWORD *, _QWORD))(*v96 + v95);
            v97 = *(_QWORD *)(v91 + 8);
            v95(v96, *(_QWORD *)(v91 + 24));
            v91 = v97;
          }
          while (v97);
        }
        goto LABEL_159;
      }
      if (*((_DWORD *)v87 + 8) == 9)
      {
        v88 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * i];
        v89 = (_BYTE *)v88[2];
        if (v89)
        {
          v90 = strlen((const char *)v88[2]);
          *(_QWORD *)&v211[0] = (char *)&v211[1] + 8;
          *(_OWORD *)((char *)v211 + 8) = xmmword_1C3E37B50;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v211, v89, &v89[v90]);
        }
        else
        {
          *(_QWORD *)&v211[1] = 64;
          v211[0] = (unint64_t)&v211[1] + 8;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v211, ".", "");
        v146 = *((_QWORD *)&v211[0] + 1);
        if (*(_QWORD *)&v211[1] < *((_QWORD *)&v211[0] + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v146 = *((_QWORD *)&v211[0] + 1);
        }
        *((_QWORD *)&v211[0] + 1) = v146;
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (*(_OWORD **)&v211[0] != (_OWORD *)((char *)&v211[1] + 8))
          free(*(void **)&v211[0]);
        goto LABEL_159;
      }
      v178 = i;
      v179 = (llvm::Function *)Function;
      v98 = **(_QWORD **)(*(_QWORD *)(Function + 24) + 16);
      v99 = (*(_DWORD *)(v98 + 8) & 0xFE) != 0x12
         || BYTE5(AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * i + 4]) == 0;
      v100 = !v99;
      if (v99)
        v101 = 1;
      else
        v101 = *(unsigned int *)(v98 + 32);
      v187 = v101;
      v177 = v207;
      v102 = *(_QWORD *)(Function + 8);
      if (!v102)
      {
LABEL_153:
        v207 = v177;
        v86 = v179;
        v1 = this;
        i = v178;
LABEL_159:
        llvm::Function::eraseFromParent(v86);
        continue;
      }
      v181 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * i + 1];
      v103 = &AGCLLVMUserComputeKernelLegacy::replaceWorkitemFunctions(void)::workitem_functions[5 * i];
      v185 = (char *)v103 + 36;
      v183 = v103 + 3;
      v184 = (llvm::ValueHandleBase *)(v103 + 2);
      while (1)
      {
        v104 = *(llvm::Instruction **)(v102 + 24);
        v105 = *(_QWORD *)(v102 + 8);
        if (*(_DWORD *)v181 == 1)
          break;
        if (*(_DWORD *)v181 == 2)
        {
          v106 = 121;
LABEL_85:
          v207 = v106;
        }
        v182 = v105;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)&v202, v104);
        v107 = llvm::UndefValue::get();
        if (v187)
        {
          for (j = 0; j != v187; ++j)
          {
            v189 = (llvm::Value *)v107;
            v213 = 0;
            v212 = 0u;
            memset(v211, 0, sizeof(v211));
            v109 = llvm::CallBase::arg_end(v104) - (_QWORD)v104 + 32 * (*((_DWORD *)v104 + 5) & 0x7FFFFFF);
            if ((v109 & 0x1FFFFFFFE0) != 0)
            {
              v110 = (v109 >> 5);
              v111 = (llvm::Value **)v211;
              v112 = v104;
              do
              {
                v113 = (llvm::Value **)((char *)v112 - 32 * (*((_DWORD *)v104 + 5) & 0x7FFFFFF));
                v114 = *v113;
                *v111 = *v113;
                if (v100 && (*(_DWORD *)(*(_QWORD *)v114 + 8) & 0xFE) == 0x12)
                {
                  v200 = 257;
                  v115 = (llvm::Value *)llvm::ConstantInt::get();
                  *v111 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)&v202, v114, v115, (const llvm::Twine *)&PrimitiveSizeInBits);
                }
                ++v111;
                v112 = (llvm::Instruction *)((char *)v112 + 32);
                --v110;
              }
              while (v110);
            }
            if (*v185)
            {
              v116 = **(llvm::Type ***)&v211[0];
              if ((*(_DWORD *)(**(_QWORD **)&v211[0] + 8) & 0xFE) == 0x12)
                v116 = (llvm::Type *)**((_QWORD **)v116 + 2);
              PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v116);
              v198 = v117;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                v118 = 0;
              }
              else
              {
                v119 = (llvm::Type *)v209[4];
                if ((*(_DWORD *)(**(_QWORD **)&v211[0] + 8) & 0xFE) == 0x12)
                  v119 = (llvm::Type *)llvm::FixedVectorType::get();
                if ((v109 & 0x1FFFFFFFE0) != 0)
                {
                  v120 = (v109 >> 5);
                  v121 = (llvm::Value **)v211;
                  do
                  {
                    v122 = *v121;
                    v200 = 257;
                    *v121++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)&v202, v122, v119, (const llvm::Twine *)&PrimitiveSizeInBits);
                    --v120;
                  }
                  while (v120);
                  v118 = 1;
                }
                else
                {
                  v118 = 1;
                }
              }
            }
            else
            {
              v118 = 0;
            }
            v123 = (char *)v210 + *(_QWORD *)(*(_QWORD *)v210 - 24);
            v194 = v206;
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)&v202);
            v196 = v207;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v194, (uint64_t)(v123 + 40));
            if (v195)
              llvm::MetadataTracking::untrack();
            switch(*v186)
            {
              case 1:
                v124 = *(uint64_t (**)(_QWORD))v184;
                v125 = (_QWORD *)((char *)v210 + (*v183 >> 1));
                if ((*v183 & 1) != 0)
                  v124 = *(uint64_t (**)(_QWORD))(*v125 + v124);
                v126 = v124(v125);
                goto LABEL_139;
              case 2:
                v129 = *(uint64_t (**)(_QWORD))v184;
                v130 = (_QWORD *)((char *)v210 + (*v183 >> 1));
                if ((*v183 & 1) != 0)
                  v129 = *(uint64_t (**)(_QWORD))(*v130 + v129);
                v131 = *(_QWORD *)v104;
                goto LABEL_130;
              case 3:
                v129 = *(uint64_t (**)(_QWORD))v184;
                v130 = (_QWORD *)((char *)v210 + (*v183 >> 1));
                if ((*v183 & 1) != 0)
                  v129 = *(uint64_t (**)(_QWORD))(*v130 + v129);
                v131 = *(_QWORD *)&v211[0];
LABEL_130:
                v126 = ((uint64_t (*)(_QWORD *, uint64_t))v129)(v130, v131);
                goto LABEL_139;
              case 4:
                v132 = (unsigned int *)(*(_QWORD *)&v211[0] + 24);
                if (*(_DWORD *)(*(_QWORD *)&v211[0] + 32) >= 0x41u)
                  v132 = *(unsigned int **)v132;
                v133 = *(uint64_t (**)(_QWORD))v184;
                v134 = (_QWORD *)((char *)v210 + (*v183 >> 1));
                if ((*v183 & 1) != 0)
                  v133 = *(uint64_t (**)(_QWORD))(*v134 + v133);
                v126 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v133)(v134, *(_QWORD *)v104, *v132);
                goto LABEL_139;
              case 5:
                v127 = *(uint64_t (**)(_QWORD))v184;
                v128 = (_QWORD *)((char *)v210 + (*v183 >> 1));
                if ((*v183 & 1) != 0)
                  v127 = *(uint64_t (**)(_QWORD))(*v128 + v127);
                v126 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v127)(v128, *(_QWORD *)&v211[0], *((_QWORD *)&v211[0] + 1));
                goto LABEL_139;
              case 6:
                v137 = *(uint64_t (**)(_QWORD))v184;
                v138 = (_QWORD *)((char *)v210 + (*v183 >> 1));
                if ((*v183 & 1) != 0)
                  v137 = *(uint64_t (**)(_QWORD))(*v138 + v137);
                v140 = (void *)*((_QWORD *)&v211[0] + 1);
                v139 = *(_OWORD **)&v211[0];
                v141 = *(_QWORD *)&v211[1];
                goto LABEL_138;
              case 7:
                v137 = *(uint64_t (**)(_QWORD))v184;
                v138 = (_QWORD *)((char *)v210 + (*v183 >> 1));
                if ((*v183 & 1) != 0)
                  v137 = *(uint64_t (**)(_QWORD))(*v138 + v137);
                v139 = v211;
                v140 = &unk_1C3E4D9BB;
                v141 = 0;
LABEL_138:
                v126 = ((uint64_t (*)(_QWORD *, _OWORD *, void *, uint64_t))v137)(v138, v139, v140, v141);
                goto LABEL_139;
              case 8:
                v135 = *(uint64_t (**)(_QWORD))v184;
                v136 = (_QWORD *)((char *)v210 + (*v183 >> 1));
                if ((*v183 & 1) != 0)
                  v135 = *(uint64_t (**)(_QWORD))(*v136 + v135);
                v126 = ((uint64_t (*)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))v135)(v136, *(_QWORD *)v104, v211, &unk_1C3E4D9BB, 0);
LABEL_139:
                FPTrunc = (llvm::Value *)v126;
                break;
              default:
                FPTrunc = 0;
                break;
            }
            v143 = (char *)v210 + *(_QWORD *)(*(_QWORD *)v210 - 24);
            v191 = *(_OWORD *)(v143 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v143 + 40));
            v193 = *((_DWORD *)v143 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v191, (uint64_t)&v202);
            if (v192)
              llvm::MetadataTracking::untrack();
            if (v118)
            {
              v144 = *(_QWORD *)v104;
              if (v100 && (*(_DWORD *)(v144 + 8) & 0xFE) == 0x12)
                v144 = **(_QWORD **)(v144 + 16);
              v200 = 257;
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)&v202, FPTrunc, (llvm::Type *)v144, (const llvm::Twine *)&PrimitiveSizeInBits);
            }
            if (v100)
            {
              v200 = 257;
              v145 = (llvm::Value *)llvm::ConstantInt::get();
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)&v202, v189, FPTrunc, v145, (const llvm::Twine *)&PrimitiveSizeInBits);
            }
            v107 = (uint64_t)FPTrunc;
          }
        }
        if (*(_QWORD *)v104 != v209[1])
          llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v104);
        v102 = v182;
        if (!v182)
          goto LABEL_153;
      }
      v106 = 0;
      goto LABEL_85;
    }
  }
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v209);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v208);
  if (v202 != &v204)
    free(v202);
  if (*((_BYTE *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 456))
  {
    if (!*((_QWORD *)this + 573))
    {
      v201 = "agc.barrier_target_count";
      v205 = 259;
      v147 = AGCLLVMUserComputeKernelBase::constructSHGlobal(this);
      llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4568), (uint64_t)v147);
    }
    if (!*((_QWORD *)this + 576))
    {
      v148 = llvm::User::operator new((llvm::User *)0x58);
      v201 = "agc.barrier_counter";
      v205 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4592), v148);
    }
    v149 = *(llvm::Value **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 3280) + 8);
    if (v149)
    {
      v150 = 0;
      v151 = (char *)this + 200;
      v188 = (char *)this + 368;
      v152 = 1;
      do
      {
        v153 = (llvm::Instruction *)*((_QWORD *)v149 + 3);
        v154 = *((_QWORD *)v153 - 4 * (*((_DWORD *)v153 + 5) & 0x7FFFFFF));
        v155 = (_QWORD *)(v154 + 24);
        if (*(_DWORD *)(v154 + 32) >= 0x41u)
          v155 = (_QWORD *)*v155;
        v156 = (llvm::Value *)*((_QWORD *)v149 + 1);
        v157 = (_QWORD *)*v155;
        v201 = &v203;
        v202 = (void *)0x400000000;
        v158 = llvm::PointerType::get();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v201, v158);
        v159 = llvm::PointerType::get();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v201, v159);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v201, *(_QWORD *)&v151[*(_QWORD *)(*(_QWORD *)this - 24) + 32]);
        v160 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
        if (*(_QWORD *)(v160 + 944))
          v161 = (v157 & 1) == 0;
        else
          v161 = 1;
        v190 = v156;
        if (v161)
        {
          v163 = (const char **)(v160 + 936);
        }
        else
        {
          v162 = llvm::PointerType::get();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v201, v162);
          v163 = (const char **)(*(_QWORD *)&v188[*(_QWORD *)(*(_QWORD *)this - 24) + 32] + 944);
        }
        v164 = *v163;
        llvm::FunctionType::get();
        if (v164)
          strlen(v164);
        llvm::Module::getOrInsertFunction();
        v166 = v165;
        if (v201 != &v203)
          free(v201);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v153);
        v201 = &v203;
        v202 = (void *)0x400000000;
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v201, *((_QWORD *)this + 576));
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v201, *((_QWORD *)this + 573));
        v167 = llvm::ConstantInt::get();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v201, v167);
        v169 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
        if (*(_QWORD *)(*(_QWORD *)&v188[v169] + 944) && (v157 & 1) != 0)
        {
          v170 = (llvm::Type **)*((_QWORD *)this + 579);
          if (!v170)
          {
            *(_QWORD *)&v211[0] = "agc.mem_fence_addr";
            LOWORD(v212) = 259;
            llvm::PointerType::get();
            v171 = AGCLLVMUserComputeKernelBase::constructSHGlobal(this);
            llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4616), (uint64_t)v171);
            v170 = (llvm::Type **)*((_QWORD *)this + 579);
            v169 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
          }
          LOWORD(v212) = 257;
          v172 = AGCLLVMBuilder::tryDeducePointeeType(v170, v168);
          v173 = (char *)this + 8;
          AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)((char *)this + v169 + 8), v172, (uint64_t)v170, 0, (uint64_t)v211);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v201, AlignedLoad);
          v169 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
        }
        else
        {
          v173 = (char *)this + 8;
        }
        LOWORD(v212) = 257;
        llvm::IRBuilderBase::CreateCall((uint64_t)&v173[v169], *(_QWORD *)(v166 + 24), v166, (uint64_t)v201, v202, (uint64_t)v211);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v153);
        v149 = v190;
        if (v201 != &v203)
          free(v201);
        ++v152;
        ++v150;
        v151 = (char *)this + 200;
      }
      while (v190);
    }
  }
  return v176;
}

uint64_t AGCLLVMUserComputeKernelBase::optimizeThreadgroupBarriers(uint64_t this)
{
  if ((*(_DWORD *)(this + 4332) - 33) >= 0xFFFFFFE0)
  {
    if (*(_BYTE *)(this + *(_QWORD *)(*(_QWORD *)this - 24) + 456))
    {
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      return llvm::Value::replaceAllUsesWith();
    }
  }
  return this;
}

uint64_t AGCLLVMUserComputeKernelBase::improveDMAPromotionOpportunity(AGCLLVMUserComputeKernelBase *this)
{
  AGCLLVMUserShader::improveDMAPromotionOpportunityAGP(this);
  return 1;
}

uint64_t AGCLLVMUserComputeKernelBase::getMaxSharedRegisters(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 852);
}

uint64_t AGCLLVMUserComputeKernelBase::supportsConstantSamplers(AGCLLVMUserComputeKernelBase *this)
{
  return 1;
}

uint64_t AGCLLVMUserComputeKernelBase::getPCFStateForUnit(AGCLLVMUserComputeKernelBase *this)
{
  return 0;
}

uint64_t AGCLLVMUserComputeKernelBase::needsPCFClamp(AGCLLVMUserComputeKernelBase *this)
{
  return 0;
}

uint64_t AGCLLVMUserComputeKernelBase::usesCustomBorderColor(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 540) + 16) >> 1) & 1;
}

uint64_t AGCLLVMUserComputeKernelBase::debugTraceBufferEnabled(AGCLLVMUserComputeKernelBase *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 540) + 17) & 1;
}

const char *AGCLLVMUserComputeKernelBase::dumpType(AGCLLVMUserComputeKernelBase *this)
{
  return "compute";
}

uint64_t AGCLLVMUserComputeKernelBase::getShaderType(AGCLLVMUserComputeKernelBase *this)
{
  return 7;
}

const char *AGCLLVMUserComputeKernelBase::getMaxTempRegistersOverride(AGCLLVMUserComputeKernelBase *this)
{
  const char *result;

  result = AGCLLVMObject::getMaxTempRegistersOverride(this);
  if (!(_DWORD)result)
    return (const char *)(unsigned __int16)(*(_DWORD *)(*((_QWORD *)this + 540) + 12) >> 10);
  return result;
}

uint64_t AGCLLVMUserComputeKernelBase::getTempRegistersLimit(AGCLLVMUserComputeKernelBase *this, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v4 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 96))(v4);
  if ((_DWORD)result)
  {
    *a2 = result;
    result = (_DWORD)result != *(_DWORD *)(v4[50] + 884);
  }
  v6 = *((_DWORD *)this + 1083);
  if (v6)
  {
    v7 = 0;
    v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v9 = *((_QWORD *)v8 + 58);
    v10 = *(_DWORD *)(*((_QWORD *)v8 + 50) + 884);
    v11 = *(_DWORD *)(v9 + 440);
    v12 = v11 - 1;
    v13 = *(_QWORD *)(v9 + 432);
    do
    {
      v14 = (v12 + v7) >> 1;
      if (*(_DWORD *)(v13 + 4 * v14) < v6)
        v12 = v14 - 1;
      else
        v7 = v14 + 1;
    }
    while (v7 <= v12);
    v15 = v10 / v11 * v12;
    if (v15 >= *a2)
      v15 = *a2;
    *a2 = v15;
    return 1;
  }
  return result;
}

void AGCLLVMUserComputeKernelBase::getCompilationKeyDescription(AGCLLVMUserComputeKernelBase *this@<X0>, std::string *a2@<X8>)
{
  unsigned int *v3;
  _QWORD *v4;
  std::string::size_type v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  uint64_t i;
  char *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type size;
  std::string *v17;
  uint64_t v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27;
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  std::string v49;
  std::string v50;
  uint64_t v51;
  void *v52;
  char v53;
  uint64_t v54;
  std::string v55;
  void *v56[2];
  char v57;
  void *v58;
  std::string::size_type v59;
  unsigned __int8 v60;
  std::string v61;
  std::string __p;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v3 = (unsigned int *)*((_QWORD *)this + 540);
  std::string::basic_string[abi:nn180100]<0>(&v49, "AGCComputeStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v47, "mutableBuffers");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v50);
  v4 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v50.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v50.__r_.__value_.__r.__words[2] - 24) + 8) = *(_DWORD *)((_BYTE *)v4
                                                                                               + *(_QWORD *)(v50.__r_.__value_.__r.__words[2] - 24)
                                                                                               + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v63, (const void **)v47, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v50.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + *(_QWORD *)(v50.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v50.__r_.__value_.__r.__words[2] = v5;
  v51 = MEMORY[0x1E0DE4FB8] + 16;
  if (v53 < 0)
    operator delete(v52);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA2D638](&v54);
  std::string::basic_string[abi:nn180100]<0>(v45, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v64, (const void **)v45, v3[2]);
  std::string::basic_string[abi:nn180100]<0>(v43, "wgSizeMultipleOfSIMDWidth");
  _agcFieldString<unsigned int>(&v65, (const void **)v43, v3[4] & 1);
  std::string::basic_string[abi:nn180100]<0>(v41, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v66, (const void **)v41, v3[3] & 1);
  std::string::basic_string[abi:nn180100]<0>(v39, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v67, (const void **)v39, (v3[3] >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v37, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v68, (const void **)v37, (v3[3] >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v35, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v69, (const void **)v35, (v3[3] >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v33, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v70, (const void **)v33, (v3[3] >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v31, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v71, (const void **)v31, (v3[3] >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v29, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v72, (const void **)v29, (v3[3] >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v27, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v73, (const void **)&v27, (unsigned __int16)(v3[3] >> 10));
  std::string::basic_string[abi:nn180100]<0>(v25, "enableStackShadow");
  _agcFieldString<unsigned int>(&v74, (const void **)v25, (v3[3] >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v23, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v75, (const void **)v23, v3[3] >> 31);
  std::string::basic_string[abi:nn180100]<0>(v21, "textureWriteFPRoundingMode");
  _agcFieldString<unsigned int>(&v76, (const void **)v21, (v3[4] >> 3) & 3);
  std::string::basic_string[abi:nn180100]<0>(v19, "unused");
  _agcFieldString<unsigned int>(&v77, (const void **)v19, v3[4] >> 12);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v61, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v61 = v49;
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v61, 0);
  std::string::basic_string[abi:nn180100]<0>(v56, "{");
  _agcIndentedLine(&v58, (std::string::value_type *)v56, 0);
  if ((v60 & 0x80u) == 0)
    v6 = (const std::string::value_type *)&v58;
  else
    v6 = (const std::string::value_type *)v58;
  if ((v60 & 0x80u) == 0)
    v7 = v60;
  else
    v7 = v59;
  v8 = std::string::append(&__p, v6, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v60 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  for (i = 0; i != 45; i += 3)
  {
    v11 = (char *)&v63 + i * 8;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[i + 2]) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
    else
      __p = *(std::string *)v11;
    v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v55, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v55 = __p;
    _agcIndentedLine(&v58, (std::string::value_type *)&v55, 1);
    if ((v60 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&v58;
    else
      v13 = (const std::string::value_type *)v58;
    if ((v60 & 0x80u) == 0)
      v14 = v60;
    else
      v14 = v59;
    std::string::append(&v50, v13, v14);
    if ((char)v60 < 0)
      operator delete(v58);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v55.__r_.__value_.__l.__data_);
      if ((v12 & 0x80000000) == 0)
        continue;
    }
    else if ((v12 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v58, "}");
  _agcIndentedLine((void **)&__p.__r_.__value_.__l.__data_, (std::string::value_type *)&v58, 0);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v50;
  else
    v15 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  else
    size = v50.__r_.__value_.__l.__size_;
  v17 = std::string::insert(&__p, 0, (const std::string::value_type *)v15, size);
  *a2 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v60 < 0)
    operator delete(v58);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v18 = 45;
  do
  {
    if (v63.__r_.__value_.__s.__data_[v18 * 8 - 1] < 0)
      operator delete((void *)__p.__r_.__value_.__r.__words[v18 + 1]);
    v18 -= 3;
  }
  while (v18 * 8);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  if (v40 < 0)
    operator delete(v39[0]);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMUserComputeKernelBase::needsThreadgroupMemoryOOBChecks(AGCLLVMUserComputeKernelBase *this)
{
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1766))
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(this);
  else
    return 0;
}

uint64_t AGCLLVMUserComputeKernelBase::getBufferBoundsCheckMode(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 540) + 12) >> 4) & 7;
}

uint64_t AGCLLVMUserComputeKernelBase::getForwardProgressMode(AGCLLVMUserComputeKernelBase *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 540) + 12) >> 31;
}

BOOL AGCLLVMUserComputeKernelBase::enableSoftFaultOptimization(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_BYTE *)(*((_QWORD *)this + 540) + 15) & 0x40) == 0;
}

uint64_t AGCLLVMUserComputeKernelBase::isDMAPromotionDisabled(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 540) + 12) >> 7;
}

llvm::Value *AGCLLVMUserComputeKernelBase::constructStageInGridConstant(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  llvm::Value *GlobalBufferBinding;
  llvm::Value *v14;
  uint64_t *v15;
  llvm::Type **v16;
  llvm::Value *v17;
  llvm::Type *v18;
  llvm::Value *AlignedLoad;
  llvm::Value *result;
  char *v25;
  llvm::Type *v26;
  llvm::Value *v27;
  llvm::Type **GEP;
  uint64_t *v29;
  llvm::Value *v30;
  llvm::Type *v31;
  llvm::Value *v32;
  char *v33;
  llvm::IRBuilderBase *v34;
  llvm::Value *v35;
  llvm::Value *InsertElement;
  char *v37;
  llvm::Type *v38;
  llvm::Value *v39;
  llvm::Type **v40;
  uint64_t *v41;
  llvm::Value *v42;
  llvm::Type *v43;
  llvm::Value *v44;
  char *v45;
  llvm::IRBuilderBase *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  char *v49;
  llvm::Type *v50;
  llvm::Value *v51;
  llvm::Type **v52;
  uint64_t *v53;
  llvm::Value *v54;
  llvm::Type *v55;
  llvm::Value *v56;
  char *v57;
  llvm::IRBuilderBase *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  int v61;
  llvm::Value *v62;
  _QWORD v63[4];
  __int16 v64;

  if (!a1[532])
  {
    v8 = (llvm::Type *)llvm::PointerType::get();
    v9 = *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 824);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 400))(v9);
    v63[0] = "agc.stagein_buffer_pointer.";
    v63[2] = v10;
    v64 = 2051;
    v11 = *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 824);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 400))(v11);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v8, (const llvm::Twine *)v63, v12, 24, 5, 0);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 530), (uint64_t)GlobalBufferBinding);
  }
  llvm::FixedVectorType::get();
  v14 = (llvm::Value *)llvm::UndefValue::get();
  v15 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v16 = (llvm::Type **)a1[532];
  v64 = 257;
  v18 = AGCLLVMBuilder::tryDeducePointeeType(v16, v17);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v15 + 5, v18, (uint64_t)v16, 0, (uint64_t)v63);
  if (a3 == 22)
  {
    if (*a2 != 0x676174732E726961
      || a2[1] != 0x6972675F6E695F65
      || *(_QWORD *)((char *)a2 + 14) != 0x657A69735F646972)
    {
      return 0;
    }
  }
  else
  {
    result = 0;
    if (a3 != 24)
      return result;
    if (*a2 != 0x676174732E726961 || a2[1] != 0x6972675F6E695F65 || a2[2] != 0x6E696769726F5F64)
      return 0;
  }
  v25 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v26 = (llvm::Type *)*((_QWORD *)v25 + 29);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v64 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v25 + 40), v26, AlignedLoad, v27, (const llvm::Twine *)v63);
  v29 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v64 = 257;
  v31 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v30);
  v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v29 + 5, v31, (uint64_t)GEP, 0, (uint64_t)v63);
  v33 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v64 = 257;
  v34 = (llvm::IRBuilderBase *)(v33 + 40);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v34, v14, v32, v35, (const llvm::Twine *)v63);
  v37 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v38 = (llvm::Type *)*((_QWORD *)v37 + 29);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v64 = 257;
  v40 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v37 + 40), v38, AlignedLoad, v39, (const llvm::Twine *)v63);
  v41 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v64 = 257;
  v43 = AGCLLVMBuilder::tryDeducePointeeType(v40, v42);
  v44 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v41 + 5, v43, (uint64_t)v40, 0, (uint64_t)v63);
  v45 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v64 = 257;
  v46 = (llvm::IRBuilderBase *)(v45 + 40);
  v47 = (llvm::Value *)llvm::ConstantInt::get();
  v48 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v46, InsertElement, v44, v47, (const llvm::Twine *)v63);
  v49 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v50 = (llvm::Type *)*((_QWORD *)v49 + 29);
  v51 = (llvm::Value *)llvm::ConstantInt::get();
  v64 = 257;
  v52 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v49 + 40), v50, AlignedLoad, v51, (const llvm::Twine *)v63);
  v53 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v64 = 257;
  v55 = AGCLLVMBuilder::tryDeducePointeeType(v52, v54);
  v56 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v53 + 5, v55, (uint64_t)v52, 0, (uint64_t)v63);
  v57 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v64 = 257;
  v58 = (llvm::IRBuilderBase *)(v57 + 40);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v60 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v58, v48, v56, v59, (const llvm::Twine *)v63);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
    v61 = *(_DWORD *)(a4 + 32);
  else
    v61 = 1;
  v62 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), v60, 0, v61, 1);
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
    a4 = **(_QWORD **)(a4 + 16);
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), v62, (llvm::Type *)a4);
}

uint64_t AGCLLVMUserComputeKernelBase::getSupportExternalVisibleFunctions(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 540) + 16) >> 5) & 1;
}

uint64_t AGCLLVMUserComputeKernelBase::getMaxLocalMemorySize(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 856);
}

uint64_t AGCLLVMUserComputeKernelBase::getReservedLocalMemorySize(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 880);
}

uint64_t AGCLLVMUserComputeKernelBase::buildStageInOrigin(AGCLLVMUserComputeKernelBase *this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4)
{
  return AGCLLVMUserShader::buildStageInOriginCommon(this, a3, 0, a4);
}

uint64_t AGCLLVMUserComputeKernelBase::buildStageInSize(AGCLLVMUserComputeKernelBase *this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4)
{
  return AGCLLVMUserShader::buildStageInSizeCommon(this, a3, 0, a4);
}

uint64_t AGCLLVMUserComputeKernelBase::getTextureWriteFPRoundingMode(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 540) + 16) >> 3) & 3;
}

uint64_t AGCLLVMUserComputeKernelBase::enableImgWBlkPBECmp(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 540) + 17) >> 1) & 1;
}

BOOL AGCLLVMUserComputeKernelLegacy::constructReply(AGCLLVMUserComputeKernelLegacy *this)
{
  unint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  _BOOL8 v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  int v26;
  flatbuffers::FlatBufferBuilder *v27;
  int v28;
  const char *v29;
  int v31;

  if (!AGCDeserializedReply::deserialize((AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160)))return 0;
  AGCLLVMObject::validateBackendReply((AGCLLVMUserComputeKernelLegacy *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
  v31 = AGCLLVMUserObject::constructFlatReply(this);
  if (*((_DWORD *)this + 1086))
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v7 = v6 + 2472;
      v6[2542] = 1;
      v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v6 + 2472, 4, v2);
      flatbuffers::FlatBufferBuilder::AddElement<signed char>(v7, 6, *(char *)(*((_QWORD *)this + 542) + 4 * v2));
      v9 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v7, v8);
      v10 = v9;
      if ((unint64_t)v4 >= v5)
      {
        v12 = (v4 - v3) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          abort();
        if ((uint64_t)(v5 - (_QWORD)v3) >> 1 > v13)
          v13 = (uint64_t)(v5 - (_QWORD)v3) >> 1;
        if (v5 - (unint64_t)v3 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v14);
        else
          v15 = 0;
        v16 = (char *)(v14 + 4 * v12);
        *(_DWORD *)v16 = v10;
        v11 = v16 + 4;
        while (v4 != v3)
        {
          v17 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        v5 = v14 + 4 * v15;
        if (v3)
          operator delete(v3);
        v3 = v16;
      }
      else
      {
        *(_DWORD *)v4 = v9;
        v11 = v4 + 4;
      }
      ++v2;
      v4 = v11;
    }
    while (v2 < *((unsigned int *)this + 1086));
  }
  else
  {
    v3 = 0;
    v11 = 0;
  }
  if (v11 == v3)
    v19 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>> const&)::t;
  else
    v19 = v3;
  v20 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v19, (v11 - v3) >> 2);
  v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v22 = v21 + 2472;
  v21[2542] = 1;
  v23 = *((_DWORD *)v21 + 626) - *((_DWORD *)v21 + 630) + *((_DWORD *)v21 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v21 + 2472, v20);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 6, *((unsigned __int8 *)this + 8), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 8, *((unsigned __int8 *)this + 9), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v22, 10, *((unsigned __int8 *)this + 4328), 0);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v22, 12, *((_DWORD *)this + 1083));
  LODWORD(v22) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v22, v23);
  v24 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v25 = v24 + 2472;
  v24[2542] = 1;
  v26 = *((_DWORD *)v24 + 626) - *((_DWORD *)v24 + 630) + *((_DWORD *)v24 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v24 + 2472, v31);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v25, (int)v22);
  v27 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
  v28 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v25, v26);
  flatbuffers::FlatBufferBuilder::Finish(v27, v28, v29);
  AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  v18 = AGCLLVMUserComputeKernelBase::validateReply(this);
  if (v3)
    operator delete(v3);
  return v18;
}

void `virtual thunk to'AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(AGCLLVMUserComputeKernelLegacy *this)
{
  uint64_t v1;

  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMUserComputeKernelBase::dumpType(AGCLLVMUserComputeKernelBase *this)
{
  return "compute";
}

uint64_t `virtual thunk to'AGCLLVMUserComputeKernelBase::getShaderType(AGCLLVMUserComputeKernelBase *this)
{
  return 7;
}

const char *`virtual thunk to'AGCLLVMUserComputeKernelBase::getMaxTempRegistersOverride(AGCLLVMUserComputeKernelBase *this)
{
  uint64_t v2;
  const char *result;

  v2 = *(_QWORD *)(*(_QWORD *)this - 112);
  result = AGCLLVMObject::getMaxTempRegistersOverride(this);
  if (!(_DWORD)result)
    return (const char *)(unsigned __int16)(*(_DWORD *)(*(_QWORD *)((char *)this + v2 + 4320) + 12) >> 10);
  return result;
}

uint64_t `virtual thunk to'AGCLLVMUserComputeKernelBase::getSupportExternalVisibleFunctions(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 120) + 4320) + 16) >> 5) & 1;
}

uint64_t `virtual thunk to'AGCLLVMUserComputeKernelBase::getForwardProgressMode(AGCLLVMUserComputeKernelBase *this)
{
  return *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 4320) + 12) >> 31;
}

void `virtual thunk to'AGCLLVMUserComputeKernelBase::getCompilationKeyDescription(AGCLLVMUserComputeKernelBase *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMUserComputeKernelBase::getCompilationKeyDescription((AGCLLVMUserComputeKernelBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMUserComputeKernelLegacy::constructReply(AGCLLVMUserComputeKernelLegacy *this)
{
  return AGCLLVMUserComputeKernelLegacy::constructReply((AGCLLVMUserComputeKernelLegacy *)((char *)this
                                                                                         + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t `virtual thunk to'AGCLLVMUserComputeKernelBase::getTempRegistersLimit(AGCLLVMUserComputeKernelBase *this, unsigned int *a2)
{
  return AGCLLVMUserComputeKernelBase::getTempRegistersLimit((AGCLLVMUserComputeKernelBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)), a2);
}

uint64_t `virtual thunk to'AGCLLVMUserComputeKernelBase::getBufferBoundsCheckMode(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 4320) + 12) >> 4) & 7;
}

BOOL `virtual thunk to'AGCLLVMUserComputeKernelBase::enableSoftFaultOptimization(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 4320) + 15) & 0x40) == 0;
}

uint64_t `virtual thunk to'AGCLLVMUserComputeKernelBase::isDMAPromotionDisabled(AGCLLVMUserComputeKernelBase *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 4320) + 12) >> 7;
}

uint64_t `virtual thunk to'AGCLLVMUserComputeKernelBase::needsThreadgroupMemoryOOBChecks(AGCLLVMUserComputeKernelBase *this)
{
  AGCLLVMUserObject *v1;

  v1 = (AGCLLVMUserComputeKernelBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216));
  if (*(_BYTE *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 1766))
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(v1);
  else
    return 0;
}

uint64_t `virtual thunk to'AGCLLVMUserComputeKernelBase::getTextureWriteFPRoundingMode(AGCLLVMUserComputeKernelBase *this)
{
  return (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224) + 4320) + 16) >> 3) & 3;
}

uint64_t `virtual thunk to'AGCLLVMUserComputeKernelBase::enableImgWBlkPBECmp(AGCLLVMUserComputeKernelBase *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232) + 4320) + 17) >> 1) & 1;
}

void AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(AGCLLVMUserComputeKernelLegacy *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  uint64_t v20;
  uint64_t k;
  uint64_t v23;
  char *v25;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[10];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) = a2[11];
  v5 = *((_QWORD *)this + 597);
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4760));
  v7 = *((_QWORD *)this + 594);
  if (v7 != -8192 && v7 != -4096 && v7)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4736));
  v8 = *((_QWORD *)this + 591);
  if (v8 != -8192 && v8 != -4096 && v8)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4712));
  for (i = 0; i != -72; i -= 24)
  {
    v10 = *(_QWORD *)((char *)this + i + 4704);
    if (v10 != -8192 && v10 != -4096 && v10 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + i + 4688));
  }
  v12 = *((_QWORD *)this + 579);
  if (v12 != -8192 && v12 != -4096 && v12 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4616));
  v14 = *((_QWORD *)this + 576);
  if (v14 != -8192 && v14 != -4096 && v14)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4592));
  v15 = *((_QWORD *)this + 573);
  if (v15 != -8192 && v15 != -4096 && v15)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4568));
  v16 = *((_QWORD *)this + 570);
  if (v16 != -8192 && v16 != -4096 && v16)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4544));
  for (j = 0; j != -72; j -= 24)
  {
    v18 = *(_QWORD *)((char *)this + j + 4536);
    if (v18 != -8192 && v18 != -4096 && v18 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + j + 4520));
  }
  v20 = *((_QWORD *)this + 558);
  if (v20 != -8192 && v20 != -4096 && v20 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4448));
  for (k = 0; k != -72; k -= 24)
  {
    v23 = *(_QWORD *)((char *)this + k + 4440);
    if (v23 != -8192 && v23 != -4096 && v23 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelLegacy *)((char *)this + k + 4424));
  }
  v25 = (char *)*((_QWORD *)this + 542);
  if (v25 != (char *)this + 4352)
    free(v25);
  AGCLLVMUserShader::~AGCLLVMUserShader(this, a2 + 2);
}

uint64_t AGCLLVMUserComputeKernelBase::initCompile(AGCLLVMUserComputeKernelBase *this)
{
  uint64_t v2;
  const char *v3;
  unsigned int v4;
  const char *Value;
  const char *v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  const char *v10;
  int v11;
  const char *v12;
  const char *v13;
  _BOOL4 v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;

  v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1083), *(_DWORD *)(*((_QWORD *)this + 540) + 8), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 864), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (unsigned int *)this + 1083);
  if ((_DWORD)v2)
  {
    AGCLLVMUserObject::initCompile(this);
    llvm::Module::getOrInsertNamedMetadata();
    llvm::MDString::get();
    (*(void (**)(AGCLLVMUserComputeKernelBase *))(*(_QWORD *)this + 568))(this);
    llvm::ConstantInt::get();
    llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    v4 = 0;
    if (MGGetBoolAnswer())
    {
      Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_LM_SPILL_ID_MIN", v3);
      if (Value && *Value != 48)
        v4 = atoi(Value);
      else
        v4 = 0;
    }
    if (MGGetBoolAnswer()
      && (v7 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_LM_SPILL_ID_MAX", v6)) != 0
      && *v7 != 48)
    {
      v8 = atoi(v7);
    }
    else
    {
      v8 = 0;
    }
    if (MGGetBoolAnswer()
      && (v10 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_LM_SPILL_SIZE", v9)) != 0
      && *v10 != 48)
    {
      v11 = atoi(v10);
    }
    else
    {
      v11 = 0;
    }
    v14 = MGGetBoolAnswer()
       && (v13 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_LM_SPILL_SGPR", v12)) != 0
       && *v13 != 48
       && atoi(v13) != 0;
    v15 = *(_QWORD *)this;
    v16 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 3272);
    if (v11)
      v17 = 1;
    else
      v17 = v14;
    if (v4 <= v16 && v16 <= v8 && v17)
    {
      llvm::Module::getOrInsertNamedMetadata();
      llvm::MDString::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      if (v14)
        llvm::Module::getOrInsertNamedMetadata();
      v15 = *(_QWORD *)this;
    }
    if (*((_DWORD *)this + 10) >= 2u)
    {
      llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)((char *)this + *(_QWORD *)(v15 - 24) + 464) + 336), *(llvm::Module **)((char *)this + *(_QWORD *)(v15 - 24) + 368));
      v15 = *(_QWORD *)this;
    }
    v18 = *(_QWORD *)((char *)this + *(_QWORD *)(v15 - 24) + 368);
    v19 = v18 + 8;
    v20 = *(_QWORD *)(v18 + 16);
    if (v20 != v18 + 8)
    {
      do
      {
        if (v20)
          v21 = (uint64_t *)(v20 - 56);
        else
          v21 = 0;
        v22 = *v21;
        if (*v21)
        {
          v23 = *(_DWORD *)(v22 + 8);
          if ((v23 & 0xFE) == 0x12)
            v23 = *(_DWORD *)(**(_QWORD **)(v22 + 16) + 8);
          if ((v23 & 0xFFFFFF00) == 0x300)
            llvm::GlobalObject::setSection();
        }
        v20 = *(_QWORD *)(v20 + 8);
      }
      while (v20 != v19);
    }
  }
  return v2;
}

BOOL AGCLLVMUserComputeKernelBase::validateReply(AGCLLVMUserComputeKernelBase *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  unsigned int *v13;
  BOOL v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = v2 + 696;
  v4 = *((_QWORD *)v2 + 87);
  if (v4)
  {
    if (*((_QWORD *)v2 + 88))
      v5 = v2 + 696;
    else
      v5 = v2 + 1256;
  }
  else
  {
    v5 = v2 + 1256;
  }
  v6 = (int *)(*v5 + *(unsigned int *)*v5);
  v7 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 4));
  v8 = (unsigned int *)((char *)v7
                      + *v7
                      + *(unsigned __int16 *)((char *)v7 + *v7 - *(unsigned int *)((char *)v7 + *v7) + 8));
  if (*(unsigned int *)((char *)v8 + *v8) > 0x20)
    return 0;
  if (v4)
  {
    v9 = *((_QWORD *)v2 + 88);
    v10 = v2 + 1256;
    if (v9)
      v10 = v3;
  }
  else
  {
    v10 = v2 + 1256;
  }
  v13 = *(unsigned int **)v10;
  v12 = *((_QWORD *)v10 + 1);
  if (v13)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (v14)
    v15 = 0;
  else
    v15 = (int *)((char *)v13 + *v13);
  v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (v17 = v16[2]) != 0)
    v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  else
    v18 = 0;
  v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 0x3Du && (v20 = v19[30]) != 0)
    v21 = *(int *)((char *)v18 + v20);
  else
    v21 = 0;
  v22 = (*(uint64_t (**)(AGCLLVMUserComputeKernelBase *))(*(_QWORD *)this + 568))(this);
  v23 = v22 - (*(uint64_t (**)(AGCLLVMUserComputeKernelBase *))(*(_QWORD *)this + 576))(this);
  return validateUserLocalMemoryUsage(v21, v23, (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8));
}

llvm::GlobalVariable *AGCLLVMUserComputeKernelBase::constructSHGlobal(_QWORD *a1)
{
  llvm::GlobalVariable *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v3 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v3 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  v4 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v5 = *((_QWORD *)v4 + 47);
  v6 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v4 + 32), v2);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v5, v6);
  return v2;
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildGlobalSize(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  _BYTE v9[32];
  __int16 v10;

  v5 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v6 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, a2, a3);
  v7 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildNumGroups(this, a2);
  v10 = 257;
  return llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v9);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildGlobalID(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  llvm::IRBuilderBase *v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v10;
  uint64_t v11;
  llvm::Value *Cast;
  _BYTE v14[32];
  __int16 v15;

  v6 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v7 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildLocalSize(this, a2, a3);
  v8 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGroupID(this, a2, a3);
  v15 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v6, v7, v8, (const llvm::Twine *)v14);
  v10 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v11 = *((_QWORD *)this + 3 * a3 + 549);
  v15 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, v11, (uint64_t)a2, (uint64_t)v14);
  v15 = 257;
  return llvm::IRBuilderBase::CreateAdd(v10, Mul, Cast, (const llvm::Twine *)v14);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildLocalSize(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  char *v5;
  llvm::Type **v6;
  llvm::ValueHandleBase *v7;
  char *v8;
  llvm::GlobalVariable *v9;
  uint64_t *v10;
  llvm::Type *v11;
  uint64_t AlignedLoad;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v5 = (char *)this + 24 * a3;
  v6 = (llvm::Type **)*((_QWORD *)v5 + 561);
  if (!v6)
  {
    v7 = (llvm::ValueHandleBase *)(v5 + 4472);
    *(_QWORD *)&v14 = "agc.";
    *(_QWORD *)&v15 = "local_size";
    LOWORD(v16) = 771;
    v8 = AGCLLVMUserComputeKernelLegacy::buildLocalSize(llvm::Type *,unsigned int)::xyz[a3];
    if (*v8)
    {
      *(_QWORD *)&v17 = &v14;
      *(_QWORD *)&v18 = v8;
      LOWORD(v19) = 770;
    }
    else
    {
      v17 = v14;
      v18 = v15;
      v19 = v16;
    }
    v9 = AGCLLVMUserComputeKernelBase::constructSHGlobal(this);
    llvm::ValueHandleBase::operator=(v7, (uint64_t)v9);
    v6 = (llvm::Type **)*((_QWORD *)v7 + 2);
  }
  v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  LOWORD(v19) = 257;
  v11 = AGCLLVMBuilder::tryDeducePointeeType(v6, a2);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v10, v11, (uint64_t)v6, 0, (uint64_t)&v17);
  LOWORD(v16) = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, AlignedLoad, (uint64_t)a2, (uint64_t)&v14);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildLocalID(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  char *v3;
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v4 = *((_QWORD *)this + 3 * a3 + 549);
  v7 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v3, 38, v4, (uint64_t)a2, (uint64_t)v6);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildLocalLinearId(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2)
{
  char *v2;
  uint64_t v3;
  _BYTE v5[32];
  __int16 v6;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v3 = *((_QWORD *)this + 558);
  v6 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v2, 38, v3, (uint64_t)a2, (uint64_t)v5);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildGlobalLinearId(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v8;
  llvm::Value *v9;
  llvm::Value *Add;
  llvm::IRBuilderBase *v11;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  _BYTE v17[32];
  __int16 v18;

  v4 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v5 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalID(this, a2, 2u);
  v6 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalSize(this, a2, 1u);
  v18 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v4, v5, v6, (const llvm::Twine *)v17);
  v8 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v9 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalID(this, a2, 1u);
  v18 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, Mul, v9, (const llvm::Twine *)v17);
  v11 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v12 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalSize(this, a2, 0);
  v18 = 257;
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, Add, v12, (const llvm::Twine *)v17);
  v14 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v15 = (llvm::Value *)AGCLLVMUserComputeKernelLegacy::buildGlobalID(this, a2, 0);
  v18 = 257;
  return llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v17);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildNumGroups(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2)
{
  llvm::Type **v4;
  llvm::Type *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v11;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  char *v14;
  llvm::Type *v15;
  llvm::Value *v16;
  llvm::Type **GEP;
  uint64_t *v18;
  llvm::Value *v19;
  llvm::Type *v20;
  uint64_t v21;
  _WORD v23[20];
  _QWORD v24[4];
  __int16 v25;

  v4 = (llvm::Type **)*((_QWORD *)this + 538);
  if (!v4)
  {
    v5 = (llvm::Type *)llvm::PointerType::get();
    v6 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 360))(v6);
    v24[0] = "agc.indirect_wg_count_buffer_pointer.";
    v24[2] = v7;
    v25 = 2051;
    v8 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 360))(v8);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v5, (const llvm::Twine *)v24, v9, 12, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelLegacy *)((char *)this + 4288), (uint64_t)GlobalBufferBinding);
    v4 = (llvm::Type **)*((_QWORD *)this + 538);
  }
  v11 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v25 = 257;
  v12 = AGCLLVMBuilder::tryDeducePointeeType(v4, a2);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v11 + 5, v12, (uint64_t)v4, 0, (uint64_t)v24);
  v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v15 = (llvm::Type *)*((_QWORD *)v14 + 29);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v25 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v14 + 40), v15, AlignedLoad, v16, (const llvm::Twine *)v24);
  v18 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v25 = 257;
  v20 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v19);
  v21 = llvm::IRBuilderBase::CreateAlignedLoad(v18, v20, (uint64_t)GEP, 0, (uint64_t)v24);
  v23[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, v21, (uint64_t)a2, (uint64_t)v23);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildGroupID(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  char *v5;
  llvm::Type **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  llvm::ValueHandleBase *v11;
  __int16 v12;
  uint64_t *v13;
  llvm::Type *v14;
  uint64_t AlignedLoad;
  void *__p;
  char v18;
  __int16 v19;
  _QWORD v20[2];
  char *v21;
  __int16 v22;

  v5 = (char *)this + 24 * a3;
  v6 = (llvm::Type **)*((_QWORD *)v5 + 582);
  if (!v6)
  {
    v7 = a3;
    v8 = llvm::User::operator new((llvm::User *)0x58);
    v9 = AGCLLVMDriverCDMShader::buildLocalSize(AGCLLVMBuilder::InsertPoint,llvm::Type *,unsigned int)::$_1::operator() const(void)::xyz[v7];
    if (*v9)
    {
      v20[0] = "agx.group_id_";
      v21 = v9;
      v10 = 771;
    }
    else
    {
      v20[0] = "agx.group_id_";
      v10 = 259;
    }
    v22 = v10;
    v11 = (llvm::ValueHandleBase *)(v5 + 4640);
    llvm::GlobalVariable::GlobalVariable();
    if (*v9)
    {
      v20[0] = "cl_group_id_";
      v21 = v9;
      v12 = 771;
    }
    else
    {
      v20[0] = "cl_group_id_";
      v12 = 259;
    }
    v22 = v12;
    llvm::Twine::str((llvm::Twine *)v20);
    llvm::GlobalObject::setSection();
    if (v18 < 0)
      operator delete(__p);
    llvm::GlobalObject::setAlignment();
    llvm::ValueHandleBase::operator=(v11, v8);
    v6 = (llvm::Type **)*((_QWORD *)v11 + 2);
  }
  v13 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v22 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(v6, a2);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v13, v14, (uint64_t)v6, 0, (uint64_t)v20);
  v19 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v13, 38, AlignedLoad, (uint64_t)a2, (uint64_t)&__p);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildLocalIDInternal(AGCLLVMUserComputeKernelLegacy *this, llvm::Type *a2, unsigned int a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  llvm::Value *Cast;
  char *v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  uint64_t Element;
  char *v17;
  char *v18;
  _BYTE v20[32];
  __int16 v21;

  v3 = *((_DWORD *)this + a3 + 1090);
  if (v3 == -1)
    return 0;
  v7 = *((_QWORD *)this + 21);
  if ((*(_WORD *)(v7 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 21));
  v8 = 40 * (v3 - 1) + 40;
  if (!v3)
    v8 = 0;
  v9 = *(_QWORD *)(v7 + 88) + v8;
  if (a3)
  {
    v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v11 = *((_QWORD *)v10 + 34);
    v21 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v10 + 40), 49, v9, v11, (uint64_t)v20);
    v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v21 = 257;
    v14 = (llvm::IRBuilderBase *)(v13 + 40);
    v15 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement(v14, Cast, v15, (const llvm::Twine *)v20);
    v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v21 = 257;
    v9 = llvm::IRBuilderBase::CreateCast((uint64_t)v17, 39, Element, (uint64_t)a2, (uint64_t)v20);
  }
  v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v21 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v18, 38, v9, (uint64_t)a2, (uint64_t)v20);
}

uint64_t AGCLLVMUserComputeKernelLegacy::getWGPadSHGlobal(llvm::Type ***a1, llvm::Value *a2)
{
  llvm::Type **v3;
  llvm::Type ***v4;
  llvm::ValueHandleBase *v5;
  llvm::GlobalVariable *v6;
  uint64_t *v7;
  llvm::Type *v8;
  const char *v10;
  __int16 v11;

  if ((_DWORD)a2 == 2)
  {
    v3 = a1[597];
    if (!v3)
    {
      v4 = a1 + 597;
      v5 = (llvm::ValueHandleBase *)(a1 + 595);
      v10 = "agc.local_xdim_mul_and_shift";
      v11 = 259;
      goto LABEL_10;
    }
  }
  else if ((_DWORD)a2 == 1)
  {
    v3 = a1[594];
    if (!v3)
    {
      v4 = a1 + 594;
      v5 = (llvm::ValueHandleBase *)(a1 + 592);
      v10 = "agc.local_slice_mul_and_shift";
      v11 = 259;
      goto LABEL_10;
    }
  }
  else
  {
    if ((_DWORD)a2)
    {
      v3 = 0;
      goto LABEL_12;
    }
    v3 = a1[591];
    if (!v3)
    {
      v4 = a1 + 591;
      v5 = (llvm::ValueHandleBase *)(a1 + 589);
      v10 = "agc.local_slice_and_linear_size";
      v11 = 259;
LABEL_10:
      v6 = AGCLLVMUserComputeKernelBase::constructSHGlobal(a1);
      llvm::ValueHandleBase::operator=(v5, (uint64_t)v6);
      v3 = *v4;
    }
  }
LABEL_12:
  v7 = (uint64_t *)((char *)a1 + (_QWORD)*(*a1 - 3));
  v11 = 257;
  v8 = AGCLLVMBuilder::tryDeducePointeeType(v3, a2);
  return llvm::IRBuilderBase::CreateAlignedLoad(v7 + 5, v8, (uint64_t)v3, 0, (uint64_t)&v10);
}

uint64_t AGCLLVMUserComputeKernelLegacy::buildWGMulShiftMod(AGCLLVMUserComputeKernelLegacy *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4, llvm::Value **a5)
{
  char *v10;
  llvm::IRBuilderBase *v11;
  llvm::Value *v12;
  uint64_t Element;
  char *v14;
  llvm::IRBuilderBase *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  llvm::Value *v25;
  llvm::IRBuilderBase *v26;
  uint64_t v27;
  llvm::Value *Cast;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v30;
  uint64_t Add;
  char *v32;
  uint64_t v33;
  llvm::Value *v34;
  char *v35;
  llvm::IRBuilderBase *v36;
  llvm::Value *v37;
  llvm::IRBuilderBase *v38;
  uint64_t LShr;
  uint64_t v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::IRBuilderBase *v43;
  llvm::Value *v44;
  llvm::IRBuilderBase *v45;
  _BYTE v47[32];
  __int16 v48;
  _QWORD v49[4];
  __int16 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v48 = 257;
  v11 = (llvm::IRBuilderBase *)(v10 + 40);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  Element = llvm::IRBuilderBase::CreateExtractElement(v11, a4, v12, (const llvm::Twine *)v47);
  v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v48 = 257;
  v15 = (llvm::IRBuilderBase *)(v14 + 40);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v15, a4, v16, (const llvm::Twine *)v47);
  v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v19 = (uint64_t)(v18 + 32);
  v20 = *((_QWORD *)v18 + 50);
  v21 = *(_QWORD *)(v20 + 1008);
  if (v21)
  {
    v22 = strlen(*(const char **)(v20 + 1008));
    v23 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(v19, v21, v22, *(_QWORD *)(v19 + 192), *(_QWORD *)(v19 + 192), *(_QWORD *)(v19 + 192), *(_QWORD *)(v19 + 192));
    v49[0] = a2;
    v49[1] = Element;
    v49[2] = a2;
    v24 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v48 = 257;
    v25 = llvm::IRBuilderBase::CreateCall((uint64_t)v24, *(_QWORD *)(v23 + 24), v23, (uint64_t)v49, 3, (uint64_t)v47);
  }
  else
  {
    v26 = (llvm::IRBuilderBase *)(v18 + 40);
    v27 = *((_QWORD *)v18 + 29);
    v48 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v18 + 40), 39, Element, v27, (uint64_t)v47);
    v50 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v26, a2, Cast, (const llvm::Twine *)v49);
    v30 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v48 = 257;
    Add = llvm::IRBuilderBase::CreateAdd(v30, Mul, a2, (const llvm::Twine *)v47);
    v32 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v33 = *((_QWORD *)v32 + 34);
    v48 = 257;
    v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v32 + 40), 49, Add, v33, (uint64_t)v47);
    v35 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v48 = 257;
    v36 = (llvm::IRBuilderBase *)(v35 + 40);
    v37 = (llvm::Value *)llvm::ConstantInt::get();
    v25 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v36, v34, v37, (const llvm::Twine *)v47);
  }
  v38 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v48 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v38, v25, v17, (const llvm::Twine *)v47);
  v40 = *(_QWORD *)a2;
  v50 = 257;
  v41 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v38, 39, LShr, v40, (uint64_t)v49);
  v42 = v41;
  if (a5)
    *a5 = v41;
  v43 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v48 = 257;
  v44 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v43, v42, a3, (const llvm::Twine *)v47);
  v45 = (AGCLLVMUserComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v48 = 257;
  return llvm::IRBuilderBase::CreateSub(v45, a2, v44, (const llvm::Twine *)v47);
}

void AGCLLVMDriverGPUGatherComputeShaderLegacy::~AGCLLVMDriverGPUGatherComputeShaderLegacy(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  AGCLLVMObject *v2;

  *(_QWORD *)this = &off_1E7E8CAD8;
  v2 = (AGCLLVMDriverGPUGatherComputeShaderLegacy *)((char *)this + 4824);
  *((_QWORD *)this + 603) = &unk_1E7E8CE38;
  *((_QWORD *)this + 607) = &unk_1E7E8CF28;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8CF40);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;

  *(_QWORD *)this = &off_1E7E8CAD8;
  v2 = (AGCLLVMDriverGPUGatherComputeShaderLegacy *)((char *)this + 4824);
  *((_QWORD *)this + 603) = &unk_1E7E8CE38;
  *((_QWORD *)this + 607) = &unk_1E7E8CF28;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8CF40);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverGPUGatherComputeShaderLegacy::setupShaderInputs(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4792);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverGPUGatherComputeShaderLegacy::dumpType(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  return "gpu-gather-compute-driver-legacy";
}

uint64_t AGCLLVMDriverGPUGatherComputeShaderLegacy::getShaderType(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  return 24;
}

void `virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderLegacy::~AGCLLVMDriverGPUGatherComputeShaderLegacy(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8CAD8;
  v1[603] = &unk_1E7E8CE38;
  v1[607] = &unk_1E7E8CF28;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E8CF40);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
}

{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8CAD8;
  v1[603] = &unk_1E7E8CE38;
  v1[607] = &unk_1E7E8CF28;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E8CF40);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderLegacy::dumpType(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  return "gpu-gather-compute-driver-legacy";
}

uint64_t `virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderLegacy::getShaderType(AGCLLVMDriverGPUGatherComputeShaderLegacy *this)
{
  return 24;
}

void AGCLLVMDriverComputeKernelLegacy::~AGCLLVMDriverComputeKernelLegacy(AGCLLVMDriverComputeKernelLegacy *this)
{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8CA50);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8CA50);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverComputeKernelLegacy::getShaderType(AGCLLVMDriverComputeKernelLegacy *this)
{
  return 22;
}

void `virtual thunk to'AGCLLVMDriverComputeKernelLegacy::~AGCLLVMDriverComputeKernelLegacy(AGCLLVMDriverComputeKernelLegacy *this)
{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMDriverComputeKernelLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), (uint64_t *)&off_1E7E8CA50);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E8CA50);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t `virtual thunk to'AGCLLVMDriverComputeKernelLegacy::getShaderType(AGCLLVMDriverComputeKernelLegacy *this)
{
  return 22;
}

void AGCLLVMDriverPDSPatchUpComputeShaderLegacy::~AGCLLVMDriverPDSPatchUpComputeShaderLegacy(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  AGCLLVMObject *v2;

  *(_QWORD *)this = &off_1E7E8CFD8;
  v2 = (AGCLLVMDriverPDSPatchUpComputeShaderLegacy *)((char *)this + 4824);
  *((_QWORD *)this + 603) = &unk_1E7E8D338;
  *((_QWORD *)this + 607) = &unk_1E7E8D428;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8D440);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;

  *(_QWORD *)this = &off_1E7E8CFD8;
  v2 = (AGCLLVMDriverPDSPatchUpComputeShaderLegacy *)((char *)this + 4824);
  *((_QWORD *)this + 603) = &unk_1E7E8D338;
  *((_QWORD *)this + 607) = &unk_1E7E8D428;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8D440);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverPDSPatchUpComputeShaderLegacy::setupShaderInputs(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4792);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverPDSPatchUpComputeShaderLegacy::dumpType(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  return "pds-patchup-compute-driver-legacy";
}

uint64_t AGCLLVMDriverPDSPatchUpComputeShaderLegacy::getShaderType(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  return 26;
}

void `virtual thunk to'AGCLLVMDriverPDSPatchUpComputeShaderLegacy::~AGCLLVMDriverPDSPatchUpComputeShaderLegacy(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8CFD8;
  v1[603] = &unk_1E7E8D338;
  v1[607] = &unk_1E7E8D428;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E8D440);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
}

{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8CFD8;
  v1[603] = &unk_1E7E8D338;
  v1[607] = &unk_1E7E8D428;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E8D440);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverPDSPatchUpComputeShaderLegacy::dumpType(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  return "pds-patchup-compute-driver-legacy";
}

uint64_t `virtual thunk to'AGCLLVMDriverPDSPatchUpComputeShaderLegacy::getShaderType(AGCLLVMDriverPDSPatchUpComputeShaderLegacy *this)
{
  return 26;
}

void AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(AGCLLVMUserComputeKernelG10 *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7E8DED8;
  *((_QWORD *)this + 553) = &unk_1E7E8E238;
  *((_QWORD *)this + 557) = &unk_1E7E8E328;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelG10 *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelG10 *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelG10 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8E340);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUserComputeKernelG10 *)((char *)this + 4424));
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7E8DED8;
  *((_QWORD *)this + 553) = &unk_1E7E8E238;
  *((_QWORD *)this + 557) = &unk_1E7E8E328;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelG10 *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelG10 *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserComputeKernelG10 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8E340);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUserComputeKernelG10 *)((char *)this + 4424));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMUserComputeKernelG10::initCompile(AGCLLVMUserComputeKernelG10 *this)
{
  AGCLLVMUserShader::setUniformAtomicsMode(this);
  return AGCLLVMUserComputeKernelBase::initCompile(this);
}

AGCLLVMUserComputeKernelG10 *AGCLLVMUserComputeKernelG10::addWrapperPostfix(AGCLLVMUserComputeKernelG10 *this)
{
  char *v1;
  _BYTE *v2;
  AGCLLVMUserComputeKernelG10 *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Type **v8;
  llvm::Value *v9;
  llvm::IRBuilderBase *v10;
  llvm::CmpInst **Mul;
  uint64_t *v12;
  llvm::Value *v13;
  llvm::Type *v14;
  uint64_t AlignedLoad;
  llvm::Type **v16;
  llvm::IRBuilderBase *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::BasicBlock *v21;
  llvm::BasicBlock *v22;
  llvm::BasicBlock *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t ICmp;
  char *v28;
  char *v29;
  llvm::Type *v30;
  llvm::User *PHI;
  llvm::IRBuilderBase *v32;
  llvm::Value *v33;
  llvm::IRBuilderBase *v34;
  llvm::Value *Add;
  char *v36;
  llvm::Type *v37;
  uint64_t *v38;
  llvm::Type **GEP;
  llvm::Value *v40;
  llvm::Type *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t FirstInsertionPt;
  llvm::Value *v47;
  llvm::Value *Cast;
  char v49[32];
  __int16 v50;
  _QWORD v51[4];
  __int16 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  _QWORD v56[4];

  v56[2] = *MEMORY[0x1E0C80C00];
  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v2 = (_BYTE *)*((_QWORD *)v1 + 50);
  if (v2[1793])
  {
    v3 = this;
    v4 = v1 + 32;
    v53 = *(_OWORD *)(v1 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v1 + 40));
    v55 = *((_DWORD *)v4 + 26);
    (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v2 + 312))(v2, &v53);
    if (v54)
      llvm::MetadataTracking::untrack();
    v56[0] = llvm::ConstantInt::get();
    v56[1] = llvm::ConstantInt::get();
    AGCLLVMObject::buildWGBarrier((uint64_t)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24), (uint64_t)v56, 2);
    v5 = (uint64_t)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40;
    v6 = llvm::ConstantInt::get();
    v7 = llvm::PointerType::get();
    v52 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v5, 48, v6, v7, (uint64_t)v51);
    v51[0] = "agc.lm_size";
    v52 = 259;
    v8 = (llvm::Type **)AGCLLVMUserComputeKernelBase::constructSHGlobal(v3);
    v47 = (llvm::Value *)llvm::ConstantInt::get();
    v9 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalLinearIDG10(v3, *(llvm::Type **)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 232));
    v10 = (AGCLLVMUserComputeKernelG10 *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40);
    v52 = 257;
    Mul = (llvm::CmpInst **)llvm::IRBuilderBase::CreateMul(v10, v9, v47, (const llvm::Twine *)v51);
    v12 = (uint64_t *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24));
    v52 = 257;
    v14 = AGCLLVMBuilder::tryDeducePointeeType(v8, v13);
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v12 + 5, v14, (uint64_t)v8, 0, (uint64_t)v51);
    v16 = (llvm::Type **)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24));
    v17 = (llvm::IRBuilderBase *)(v16 + 5);
    v18 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<5u>(v3, v16[29], 0);
    v19 = (llvm::Value *)llvm::ConstantInt::get();
    v52 = 257;
    v20 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v17, v18, v19, (const llvm::Twine *)v51);
    v21 = *(llvm::BasicBlock **)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 88);
    v51[0] = "gin793.loop.end";
    v52 = 259;
    v22 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v51[0] = "gin793.loop.begin";
    v52 = 259;
    v23 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v24 = (char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24);
    *((_QWORD *)v24 + 11) = v21;
    *((_QWORD *)v24 + 12) = (char *)v21 + 40;
    v25 = (uint64_t *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40);
    v52 = 257;
    v26 = AlignedLoad;
    ICmp = llvm::IRBuilderBase::CreateICmp(v25, 40, Mul, AlignedLoad, (uint64_t)v51);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40), ICmp, (uint64_t)v23, (uint64_t)v22);
    v28 = (char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24);
    *((_QWORD *)v28 + 11) = v23;
    *((_QWORD *)v28 + 12) = (char *)v23 + 40;
    v29 = (char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24);
    v30 = (llvm::Type *)*((_QWORD *)v29 + 29);
    v52 = 257;
    PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v29 + 40), v30, 2, (const llvm::Twine *)v51);
    llvm::PHINode::addIncoming(PHI, (llvm::Value *)Mul, v21);
    v32 = (AGCLLVMUserComputeKernelG10 *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40);
    v52 = 257;
    v33 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v32, v47, v20, (const llvm::Twine *)v51);
    v34 = (AGCLLVMUserComputeKernelG10 *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40);
    v52 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v34, PHI, v33, (const llvm::Twine *)v51);
    llvm::PHINode::addIncoming(PHI, Add, v23);
    v36 = (char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24);
    v37 = (llvm::Type *)*((_QWORD *)v36 + 27);
    v38 = (uint64_t *)(v36 + 40);
    v52 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v36 + 40), v37, Cast, PHI, (const llvm::Twine *)v51);
    v50 = 257;
    v41 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v40);
    v42 = llvm::IRBuilderBase::CreateAlignedLoad(v38, v41, (uint64_t)GEP, 0, (uint64_t)v49);
    *(_WORD *)(v42 + 18) |= 1u;
    v43 = (uint64_t *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40);
    v52 = 257;
    v44 = llvm::IRBuilderBase::CreateICmp(v43, 40, (llvm::CmpInst **)Add, v26, (uint64_t)v51);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40), v44, (uint64_t)v23, (uint64_t)v22);
    v45 = (uint64_t)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40;
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v22);
    return (AGCLLVMUserComputeKernelG10 *)llvm::IRBuilderBase::SetInsertPoint(v45, (uint64_t)v22, FirstInsertionPt);
  }
  return this;
}

uint64_t AGCLLVMUserComputeKernelG10::wrapperFunctionType(AGCLLVMUserComputeKernelG10 *this)
{
  return llvm::FunctionType::get();
}

uint64_t AGCLLVMUserComputeKernelG10::setupShaderInputs(AGCLLVMUserComputeKernelG10 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  llvm::MDString *v7;
  _QWORD *String;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  llvm::BasicBlock *v13;
  char *v14;
  uint64_t FirstInsertionPt;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  llvm::Value *AlignedLoad;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  llvm::Type **v26;
  uint64_t *v27;
  llvm::Value *v28;
  llvm::Type *v29;
  char *v30;
  uint64_t v31;
  llvm::Value *Cast;
  char *v33;
  llvm::Type *v34;
  uint64_t GEP;
  char *v36;
  uint64_t v37;
  llvm::Use *v38;
  llvm::Use *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int OperandNo;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  llvm::Value *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  uint64_t v58;
  uint64_t **v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t j;
  uint64_t v63;
  llvm::Type *v64;
  uint64_t v65;
  llvm::Use *v66;
  llvm::Use *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  llvm *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v88;
  llvm::Value *v89;
  uint64_t *v90;
  unint64_t v91;
  llvm *v92[2];
  unsigned int v93;
  _BYTE v94[40];
  void *v95;
  uint64_t v96;
  _BYTE v97[16];
  __int16 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 22);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v4 = *((_QWORD *)this + 22);
    v3 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v2 = v4;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 88);
  }
  for (i = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96); v3 != i; v3 += 40)
  {
    v6 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v3 + 32));
    if (v6)
    {
      v7 = *(llvm::MDString **)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8);
      if (!*(_BYTE *)v7)
      {
        String = (_QWORD *)llvm::MDString::getString(v7);
        if (v9 == 14 && *String == 0x67616D692E726961 && *(_QWORD *)((char *)String + 6) == 0x6B636F6C62656761)
        {
          LODWORD(v95) = 2;
          if (*(_DWORD *)(v6 + 8) >= 3u)
          {
            do
            {
              if ((parseMDInt("air.imageblock_data_size", v6, (unsigned int *)&v95, (_DWORD *)this + 1096) & 1) != 0)
                break;
              LODWORD(v95) = (_DWORD)v95 + 1;
            }
            while (v95 < *(_DWORD *)(v6 + 8));
          }
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
        }
      }
    }
  }
  if (!*((_DWORD *)this + 1096))
    return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
  v11 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 680))(v11) + 2392))
    return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
  v12 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
  v13 = v12 ? (llvm::BasicBlock *)(v12 - 24) : 0;
  v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v13);
  llvm::IRBuilderBase::SetInsertPoint((uint64_t)v14, (uint64_t)v13, FirstInsertionPt);
  v93 = 128;
  v92[0] = (llvm *)MEMORY[0x1CAA2C6C0](6144, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::initEmpty((uint64_t)v92);
  v94[0] = 0;
  v94[24] = 0;
  v16 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v17 = v16 + 8;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18 == v16 + 8)
  {
    v80 = 1;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v91 = 0;
    AlignedLoad = 0;
    v88 = v16 + 8;
    do
    {
      if (v18)
        v22 = (uint64_t *)(v18 - 56);
      else
        v22 = 0;
      v23 = *v22;
      if (*v22)
      {
        v24 = *(_DWORD *)(v23 + 8);
        if ((v24 & 0xFE) == 0x12)
          v24 = *(_DWORD *)(**(_QWORD **)(v23 + 16) + 8);
        if ((v24 & 0xFFFFFF00) == 0x300 && v22[1])
        {
          v90 = v22;
          v25 = *(_QWORD *)this;
          if (!AlignedLoad)
          {
            v95 = "agc.lib_size_in_bytes";
            v98 = 259;
            v26 = (llvm::Type **)AGCLLVMUserComputeKernelBase::constructSHGlobal(this);
            v27 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8);
            v98 = 257;
            v29 = AGCLLVMBuilder::tryDeducePointeeType(v26, v28);
            AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v27 + 4, v29, (uint64_t)v26, 0, (uint64_t)&v95);
            v25 = *(_QWORD *)this;
          }
          v30 = (char *)this + *(_QWORD *)(v25 - 24) + 40;
          v31 = llvm::PointerType::get();
          v98 = 257;
          Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v30, 49, (uint64_t)v90, v31, (uint64_t)&v95);
          v33 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v34 = (llvm::Type *)*((_QWORD *)v33 + 27);
          v98 = 257;
          v89 = AlignedLoad;
          GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v33 + 40), v34, Cast, AlignedLoad, (const llvm::Twine *)&v95);
          v36 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
          v98 = 257;
          v37 = llvm::IRBuilderBase::CreateCast((uint64_t)v36, 49, GEP, v23, (uint64_t)&v95);
          v38 = (llvm::Use *)v90[1];
          while (v38)
          {
            while (1)
            {
              while (1)
              {
                v39 = v38;
                v38 = (llvm::Use *)*((_QWORD *)v38 + 1);
                v40 = *((_QWORD *)v39 + 3);
                v41 = *(unsigned __int8 *)(v40 + 16);
                if (v41 < 0x1C)
                  break;
                OperandNo = llvm::Use::getOperandNo(v39);
                llvm::User::setOperand(v40, OperandNo, 0);
                v43 = *((_QWORD *)v39 + 3);
                v44 = llvm::Use::getOperandNo(v39);
                llvm::User::setOperand(v43, v44, v37);
                if (!v38)
                  goto LABEL_62;
              }
              if (v41 != 5)
                goto LABEL_104;
              if ((llvm::Value *)v40 != Cast)
                break;
LABEL_45:
              if (!v38)
                goto LABEL_62;
            }
            if ((unint64_t)v20 < v91)
            {
              *v20++ = v40;
              goto LABEL_45;
            }
            v45 = v37;
            v46 = Cast;
            v47 = v20 - v19;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 61)
LABEL_123:
              abort();
            if ((uint64_t)(v91 - (_QWORD)v19) >> 2 > v48)
              v48 = (uint64_t)(v91 - (_QWORD)v19) >> 2;
            if (v91 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
              v49 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v49 = v48;
            if (v49)
              v49 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v49);
            else
              v50 = 0;
            v51 = (uint64_t *)(v49 + 8 * v47);
            *v51 = v40;
            v52 = v51 + 1;
            while (v20 != v19)
            {
              v53 = *--v20;
              *--v51 = v53;
            }
            v91 = v49 + 8 * v50;
            if (v19)
              operator delete(v19);
            v19 = v51;
            v20 = v52;
            Cast = v46;
            v37 = v45;
          }
LABEL_62:
          *llvm::ValueMap<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v92, (llvm::Value *)v90) = v37;
          v17 = v88;
          AlignedLoad = v89;
        }
      }
      v18 = *(_QWORD *)(v18 + 8);
    }
    while (v18 != v17);
    if (v19 == v20)
    {
LABEL_103:
      v80 = 1;
    }
    else
    {
      while (1)
      {
        v55 = *--v20;
        v54 = v55;
        v56 = (uint64_t *)*llvm::ValueMap<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v92, *(llvm::Value **)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF)));
        v57 = *(unsigned __int16 *)(v55 + 18);
        switch(v57)
        {
          case '"':
            v59 = (uint64_t **)v97;
            v95 = v97;
            v96 = 0x1000000000;
            v60 = *(_DWORD *)(v54 + 20) & 0x7FFFFFF;
            if (v60 < 2)
            {
              v63 = 0;
            }
            else
            {
              v61 = v54 + 32;
              for (j = 1; j < v60; ++j)
              {
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v95, *(_QWORD *)(v61 - 32 * v60));
                v60 = *(_DWORD *)(v54 + 20) & 0x7FFFFFF;
                v61 += 32;
              }
              v59 = (uint64_t **)v95;
              v63 = v96;
            }
            v65 = *v56;
            if ((*(_DWORD *)(*v56 + 8) & 0xFE) == 0x12)
              v65 = **(_QWORD **)(v65 + 16);
            v58 = llvm::GetElementPtrInst::Create(**(_QWORD **)(v65 + 16), v56, v59, v63);
            if (v95 != v97)
              free(v95);
            break;
          case '5':
            llvm::ConstantExpr::getPredicate((llvm::ConstantExpr *)v54);
            v58 = llvm::User::operator new((llvm::User *)0x40);
            v98 = 257;
            llvm::CmpInst::makeCmpResultType((llvm::CmpInst *)*v56, v64);
            llvm::CmpInst::CmpInst();
            break;
          case '1':
            v58 = llvm::User::operator new((llvm::User *)0x40);
            v98 = 257;
            llvm::BitCastInst::BitCastInst();
            break;
          default:
            goto LABEL_104;
        }
        llvm::Instruction::insertAfter();
        v66 = *(llvm::Use **)(v54 + 8);
        if (v66)
          break;
LABEL_102:
        *llvm::ValueMap<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v92, (llvm::Value *)v54) = v58;
        if (v19 == v20)
          goto LABEL_103;
      }
      while (1)
      {
        while (1)
        {
          v67 = v66;
          v66 = (llvm::Use *)*((_QWORD *)v66 + 1);
          v68 = *((_QWORD *)v67 + 3);
          v69 = *(unsigned __int8 *)(v68 + 16);
          if (v69 < 0x1C)
            break;
          v70 = llvm::Use::getOperandNo(v67);
          llvm::User::setOperand(v68, v70, 0);
          v71 = *((_QWORD *)v67 + 3);
          v72 = llvm::Use::getOperandNo(v67);
          llvm::User::setOperand(v71, v72, v58);
          if (!v66)
            goto LABEL_102;
        }
        if (v69 != 5)
          break;
        if ((unint64_t)v20 >= v91)
        {
          v73 = v20 - v19;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 61)
            goto LABEL_123;
          if ((uint64_t)(v91 - (_QWORD)v19) >> 2 > v74)
            v74 = (uint64_t)(v91 - (_QWORD)v19) >> 2;
          if (v91 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v75 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v75 = v74;
          if (v75)
            v75 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v75);
          else
            v76 = 0;
          v77 = (uint64_t *)(v75 + 8 * v73);
          *v77 = v68;
          v78 = v77 + 1;
          while (v20 != v19)
          {
            v79 = *--v20;
            *--v77 = v79;
          }
          v91 = v75 + 8 * v76;
          if (v19)
            operator delete(v19);
          v19 = v77;
          v20 = v78;
          if (!v66)
            goto LABEL_102;
        }
        else
        {
          *v20++ = v68;
          if (!v66)
            goto LABEL_102;
        }
      }
LABEL_104:
      v80 = 0;
    }
    if (v19)
      operator delete(v19);
  }
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v94);
  v81 = v92[0];
  if (v93)
  {
    v82 = (uint64_t *)((char *)v92[0] + 24);
    v83 = 48 * v93;
    do
    {
      v84 = *v82;
      if (*v82 != -8192 && v84 != -4096 && v84 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v82 - 2));
      v82 += 6;
      v83 -= 48;
    }
    while (v83);
    v81 = v92[0];
    v86 = 48 * v93;
  }
  else
  {
    v86 = 0;
  }
  llvm::deallocate_buffer(v81, (void *)v86);
  if (v80)
    return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
  else
    return 0;
}

uint64_t AGCLLVMUserComputeKernelG10::setupImageBlocks(AGCLLVMUserComputeKernelG10 *this)
{
  uint64_t v2;
  const char *v3;
  uint64_t Function;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  AGCLLVMAirImageBlockGen3 *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (!*((_DWORD *)this + 1096))
    return 1;
  v2 = 0;
  v3 = "air.imageblock_data";
  while (1)
  {
    strlen(v3);
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v5 = *(_QWORD *)(Function + 8);
      if (v5)
        break;
    }
LABEL_10:
    v9 = v2 + 1;
    v3 = (&AGCLLVMUserComputeKernelG10::setupImageBlocks(void)::disallowed_functions_with_msaa_rates)[2 * v2 + 2];
    v2 = 1;
    if (v9 == 2)
    {
      v10 = 0;
      while (1)
      {
        strlen(AGCLLVMUserComputeKernelG10::setupImageBlocks(void)::disallowed_function_list[v10]);
        v11 = llvm::Module::getFunction();
        if (v11)
        {
          if (*(_QWORD *)(v11 + 8))
            break;
        }
        if (++v10 == 3)
        {
          v12 = (AGCLLVMAirImageBlockGen3 *)operator new();
          AGCLLVMAirImageBlockGen3::AGCLLVMAirImageBlockGen3(v12, this, *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), *(AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), (AGCLLVMUserComputeKernelG10 *)((char *)this + 232));
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          v15 = v14 & (*(unsigned int (**)(AGCLLVMAirImageBlockGen3 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 16))(v12, *((unsigned __int16 *)this + 2192), 0, 0);
          (*(void (**)(AGCLLVMAirImageBlockGen3 *))(*(_QWORD *)v12 + 32))(v12);
          return v15;
        }
      }
      goto LABEL_16;
    }
  }
  while (1)
  {
    v6 = *(_QWORD *)(v5 + 24);
    v5 = *(_QWORD *)(v5 + 8);
    if (*(_QWORD *)(v6 + 8))
    {
      v7 = *(_QWORD *)(v6
                     - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)
                     + 32
                     * LOBYTE((&AGCLLVMUserComputeKernelG10::setupImageBlocks(void)::disallowed_functions_with_msaa_rates)[2 * v2 + 1]));
      v8 = (_QWORD *)(v7 + 24);
      if (*(_DWORD *)(v7 + 32) >= 0x41u)
        v8 = (_QWORD *)*v8;
      if ((*(_DWORD *)v8 - 1) < 2)
        break;
    }
    if (!v5)
      goto LABEL_10;
  }
LABEL_16:
  std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), "MSAA imageblock features are not available to compute kernels");
  return 0;
}

uint64_t AGCLLVMUserComputeKernelG10::replaceBuiltins(AGCLLVMUserComputeKernelG10 *this)
{
  uint64_t v2;

  v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if ((_DWORD)v2)
    AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(this);
  return v2;
}

llvm::Value *AGCLLVMUserComputeKernelG10::replaceBuiltinFunction(_QWORD *a1, uint64_t a2, llvm::Type *a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t i;
  size_t v14;
  const void *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  llvm::Value *Select;
  _QWORD *String;
  uint64_t v26;
  uint64_t v27;
  int Key;
  uint64_t v29;
  uint64_t v30;
  llvm::Value *v31;
  llvm::Type **v32;
  llvm::Type *v33;
  uint64_t v34;
  unsigned int v35;
  llvm::Value *GlobalBufferBinding;
  char *v37;
  llvm::Type *v38;
  llvm::Type *v39;
  uint64_t *v40;
  llvm::Value *AlignedLoad;
  llvm::Value *v42;
  llvm::Type **GEP;
  llvm::Value *v44;
  llvm::Type *v45;
  llvm::Type **v46;
  llvm::IRBuilderBase *v47;
  llvm::Value *v48;
  llvm::Value *TruncOrBitCast;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  llvm::IRBuilderBase *v56;
  uint64_t *v57;
  llvm::Type *v58;
  llvm::Type **v59;
  llvm::Type *v60;
  llvm::Value *v61;
  uint64_t v62;
  llvm::Value *v63;
  llvm::Type **v64;
  llvm::Value *v65;
  llvm::Type *v66;
  llvm::CmpInst **v67;
  uint64_t *v68;
  uint64_t v69;
  _BYTE v74[32];
  __int16 v75;
  _QWORD v76[4];
  __int16 v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  int v81;
  _QWORD v82[2];
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  int v86;
  const char *v87;
  uint64_t v88;
  int v89;
  const char *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 824);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 520))(v5);
  v82[0] = "air.threadgroup_position_in_grid";
  v82[1] = 32;
  LODWORD(v83) = v6;
  v7 = *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 824);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 528))(v7);
  v84 = "air.threadgroups_per_grid";
  v85 = 25;
  v86 = v8;
  v9 = *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 824);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 536))(v9);
  v87 = "air.thread_position_in_grid";
  v88 = 27;
  v89 = v10;
  v11 = *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 824);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 544))(v11);
  v90 = "air.threads_per_grid";
  v91 = 20;
  v92 = v12;
  llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)&v78);
  for (i = 0; i != 12; i += 3)
  {
    v15 = (const void *)v82[i];
    v14 = v82[i + 1];
    v16 = v82[i + 2];
    v17 = llvm::StringMapImpl::LookupBucketFor();
    v18 = v78;
    v19 = *(_QWORD *)(v78 + 8 * v17);
    if (v19)
    {
      if (v19 != -8)
        continue;
      --v81;
    }
    v20 = MEMORY[0x1CAA2C6C0](v14 + 17, 8);
    v21 = v20;
    v22 = v20 + 16;
    if (v14)
      memcpy((void *)(v20 + 16), v15, v14);
    *(_BYTE *)(v22 + v14) = 0;
    *(_QWORD *)v21 = v14;
    *(_DWORD *)(v21 + 8) = v16;
    *(_QWORD *)(v18 + 8 * v17) = v21;
    ++v80;
    llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v78);
  }
  v23 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v76[0] = llvm::ConstantInt::get();
  LOWORD(v85) = 257;
  Select = llvm::IRBuilderBase::CreateCall((uint64_t)(v23 + 40), *(_QWORD *)(a2 + 24), a2, (uint64_t)v76, 1, (uint64_t)v82);
  String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8));
  v27 = v26;
  Key = llvm::StringMapImpl::FindKey();
  v29 = v78;
  if (Key == -1)
    v30 = v79;
  else
    v30 = Key;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 424))(a1) && v29 + 8 * v30 != v78 + 8 * v79)
  {
    v32 = (llvm::Type **)a1[551];
    if (!v32)
    {
      v33 = (llvm::Type *)llvm::PointerType::get();
      v34 = *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 824);
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 512))(v34);
      v82[0] = "agc.split_dispatch_parameters.";
      v83 = v35;
      LOWORD(v85) = 2051;
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding((AGCLLVMUserObject *)a1, v33, (const llvm::Twine *)v82, v35, 0, 5, 0);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 549), (uint64_t)GlobalBufferBinding);
      v32 = (llvm::Type **)a1[551];
    }
    v37 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v38 = (llvm::Type *)*((_QWORD *)v37 + 29);
    LOWORD(v85) = 257;
    v39 = AGCLLVMBuilder::tryDeducePointeeType(v32, v31);
    v40 = (uint64_t *)(v37 + 40);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v37 + 5, v39, (uint64_t)v32, 0, (uint64_t)v82);
    v42 = (llvm::Value *)llvm::ConstantInt::get();
    v77 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v37 + 40), v38, AlignedLoad, v42, (const llvm::Twine *)v76);
    v75 = 257;
    v45 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v44);
    v46 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v40, v45, (uint64_t)GEP, 0, (uint64_t)v74);
    v47 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    LOWORD(v85) = 257;
    TruncOrBitCast = llvm::IRBuilderBase::CreateTruncOrBitCast(v47, v46, a3, (const llvm::Twine *)v82);
    if (v27 == 32)
    {
      v50 = String[2];
      v51 = String[3];
      v52 = *String == 0x657268742E726961 && String[1] == 0x5F70756F72676461;
      v53 = 0x6E6F697469736F70;
LABEL_26:
      if (v52 && v50 == v53 && v51 == 0x646972675F6E695FLL)
      {
        v56 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
        LOWORD(v85) = 257;
        llvm::IRBuilderBase::CreateAdd(v56, TruncOrBitCast, Select, (const llvm::Twine *)v82);
      }
    }
    else if (v27 == 27)
    {
      v50 = String[2];
      v51 = *(_QWORD *)((char *)String + 19);
      v52 = *String == 0x657268742E726961 && String[1] == 0x7469736F705F6461;
      v53 = 0x675F6E695F6E6F69;
      goto LABEL_26;
    }
    v57 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v58 = (llvm::Type *)v57[29];
    v59 = (llvm::Type **)a1[551];
    LOWORD(v85) = 257;
    v60 = AGCLLVMBuilder::tryDeducePointeeType(v59, v48);
    v57 += 5;
    v61 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v57, v60, (uint64_t)v59, 0, (uint64_t)v82);
    v62 = *(_QWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 824);
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 552))(v62);
    v63 = (llvm::Value *)llvm::ConstantInt::get();
    v77 = 257;
    v64 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v57, v58, v61, v63, (const llvm::Twine *)v76);
    v75 = 257;
    v66 = AGCLLVMBuilder::tryDeducePointeeType(v64, v65);
    v67 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad(v57, v66, (uint64_t)v64, 0, (uint64_t)v74);
    v68 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v69 = llvm::ConstantInt::get();
    LOWORD(v85) = 257;
    llvm::IRBuilderBase::CreateICmp(v68, 33, v67, v69, (uint64_t)v82);
    v77 = 257;
    Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
  llvm::StringMap<unsigned int,llvm::MallocAllocator>::~StringMap((uint64_t)&v78);
  return Select;
}

uint64_t AGCLLVMUserComputeKernelG10::supportComputeSplitDispatch(AGCLLVMUserComputeKernelG10 *this)
{
  return *((unsigned __int8 *)this + 4416);
}

BOOL AGCLLVMUserComputeKernelG10::constructReply(AGCLLVMUserComputeKernelG10 *this)
{
  _BOOL8 result;
  int v3;
  char *v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int **v21;
  int *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  char *v32;
  char *v33;
  int v34;
  flatbuffers::FlatBufferBuilder *v35;
  int v36;
  const char *v37;
  unsigned int **v38;
  int *v39;
  unsigned __int16 *v40;
  uint64_t v41;
  int *v42;
  unsigned __int16 *v43;
  uint64_t v44;

  result = AGCDeserializedReply::deserialize((AGCLLVMUserComputeKernelG10 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if ((_DWORD)result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserComputeKernelG10 *)((char *)this
                                                                      + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v5 = v4 + 2472;
    v6 = *((unsigned __int8 *)this + 8);
    v7 = *((unsigned __int8 *)this + 9);
    v8 = *((unsigned __int8 *)this + 4328);
    v9 = *((_DWORD *)this + 1083);
    v10 = *((unsigned __int8 *)this + 12);
    v4[2542] = 1;
    v11 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v4 + 2472, 12, v9);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v5, 14, v10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v5, 10, v8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v5, 8, v7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v5, 6, v6, 0);
    LODWORD(v5) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v5, v11);
    v12 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v13 = v12 + 2472;
    v12[2542] = 1;
    v14 = *((_DWORD *)v12 + 626) - *((_DWORD *)v12 + 630) + *((_DWORD *)v12 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v12 + 2472, v3);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v13, (int)v5);
    v15 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v13, v14);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMUserComputeKernelG10 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), v15, v16);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserComputeKernelG10 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    if (*((_BYTE *)this + 17))
    {
      v17 = *(_QWORD *)this;
    }
    else
    {
      v17 = *(_QWORD *)this;
      if (!*((_BYTE *)this + 16))
      {
        v18 = *(_QWORD *)(v17 - 24);
        v19 = (char *)this + v18;
        if (!*((_BYTE *)this + v18 + 456) && !*((_DWORD *)this + 1096))
        {
          v20 = *((_QWORD *)v19 + 87);
          if (v20)
          {
            v21 = (unsigned int **)(v19 + 1256);
            if (*((_QWORD *)v19 + 88))
              v21 = (unsigned int **)(v19 + 696);
          }
          else
          {
            v21 = (unsigned int **)(v19 + 1256);
          }
          v22 = 0;
          if (*v21 && v21[1])
            v22 = (int *)((char *)*v21 + **v21);
          v23 = (unsigned __int16 *)((char *)v22 - *v22);
          if (*v23 >= 5u && (v24 = v23[2]) != 0)
            v25 = (int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
          else
            v25 = 0;
          if ((getBackendReplyReadsTGSRs(v25) & 1) == 0)
          {
            if (v20)
            {
              v38 = (unsigned int **)(v19 + 1256);
              if (*((_QWORD *)v19 + 88))
                v38 = (unsigned int **)(v19 + 696);
            }
            else
            {
              v38 = (unsigned int **)(v19 + 1256);
            }
            v39 = 0;
            if (*v38 && v38[1])
              v39 = (int *)((char *)*v38 + **v38);
            v40 = (unsigned __int16 *)((char *)v39 - *v39);
            if (*v40 >= 0xBu && (v41 = v40[5]) != 0)
              v42 = (int *)((char *)v39 + v41 + *(unsigned int *)((char *)v39 + v41));
            else
              v42 = 0;
            v43 = (unsigned __int16 *)((char *)v42 - *v42);
            if (*v43 < 9u || (v44 = v43[4]) == 0 || !*(int *)((char *)v42 + v44))
            {
              v27 = 0;
              v26 = 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v26 = 0;
    v18 = *(_QWORD *)(v17 - 24);
    v27 = *((_DWORD *)this + 1096);
LABEL_22:
    v28 = (char *)this + v18;
    v29 = (char *)this + v18 + 2568;
    v28[2638] = 1;
    v30 = *((_DWORD *)v28 + 650) - *((_DWORD *)v28 + 654) + *((_DWORD *)v28 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v29, 4, v27);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v29, 6, v26, 0);
    v31 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v29, v30);
    LODWORD(v29) = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
    v32 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v33 = v32 + 2568;
    v32[2638] = 1;
    v34 = *((_DWORD *)v32 + 650) - *((_DWORD *)v32 + 654) + *((_DWORD *)v32 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v32 + 2568, v31);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v33, (int)v29);
    v35 = (AGCLLVMUserComputeKernelG10 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
    v36 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v33, v34);
    flatbuffers::FlatBufferBuilder::Finish(v35, v36, v37);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserComputeKernelG10 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
    return AGCLLVMUserComputeKernelBase::validateReply(this);
  }
  return result;
}

void `virtual thunk to'AGCLLVMUserComputeKernelG10::~AGCLLVMUserComputeKernelG10(AGCLLVMUserComputeKernelG10 *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8DED8;
  v1[553] = &unk_1E7E8E238;
  v1[557] = &unk_1E7E8E328;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8E340);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 553));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8DED8;
  v1[553] = &unk_1E7E8E238;
  v1[557] = &unk_1E7E8E328;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8E340);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 553));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL `virtual thunk to'AGCLLVMUserComputeKernelG10::constructReply(AGCLLVMUserComputeKernelG10 *this)
{
  return AGCLLVMUserComputeKernelG10::constructReply((AGCLLVMUserComputeKernelG10 *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t getBackendReplyReadsTGSRs(int *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  char v6;
  unsigned int v7;

  v1 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v1 < 0x3Fu)
    return 0;
  v2 = v1[31];
  if (!v2)
    return 0;
  v3 = (unsigned int *)((char *)a1 + v2 + *(unsigned int *)((char *)a1 + v2));
  v4 = *v3;
  if (!(_DWORD)v4)
    return 0;
  v5 = v3 + 1;
  while (1)
  {
    v7 = *v5++;
    v6 = v7;
    if (v7 < 0x36 && ((0x3F000000000777uLL >> v6) & 1) != 0)
      break;
    if (!--v4)
      return 0;
  }
  return 1;
}

llvm::Value *llvm::IRBuilderBase::CreateTruncOrBitCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  llvm::Value *TruncOrBitCast;
  BOOL v7;

  TruncOrBitCast = (llvm::Value *)a2;
  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      TruncOrBitCast = (llvm::Value *)llvm::CastInst::CreateTruncOrBitCast();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)TruncOrBitCast, (uint64_t)a4);
    }
    else
    {
      TruncOrBitCast = (llvm::Value *)(*(uint64_t (**)(_QWORD, llvm::Type **, llvm::Type *))(**((_QWORD **)this + 9) + 304))(*((_QWORD *)this + 9), a2, a3);
      if (TruncOrBitCast)
        v7 = *((unsigned __int8 *)TruncOrBitCast + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)TruncOrBitCast, (uint64_t)a4);
    }
  }
  return TruncOrBitCast;
}

void AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(AGCLLVMUserComputeKernelG10 *this)
{
  llvm::LLVMContext **v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t Function;
  llvm::Function *v7;
  uint64_t *v8;
  uint64_t *v9;
  _BYTE *v10;
  size_t v11;
  uint64_t v12;
  uint64_t *v13;
  void (**v14)(_QWORD *, _QWORD);
  uint64_t *v15;
  void (*v16)(_QWORD *, _QWORD);
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  llvm::Instruction *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t i;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  llvm::Value **v33;
  llvm::Instruction *v34;
  llvm::Value **v35;
  llvm::Value *v36;
  llvm::Value *v37;
  llvm::Type *v38;
  uint64_t v39;
  int v40;
  llvm::Type *v41;
  uint64_t v42;
  llvm::Value **v43;
  llvm::Value *v44;
  char *v45;
  uint64_t (*v46)(_QWORD);
  _QWORD *v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD);
  _QWORD *v50;
  uint64_t (*v51)(_QWORD);
  _QWORD *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t (*v55)(_QWORD);
  _QWORD *v56;
  uint64_t (*v57)(_QWORD);
  _QWORD *v58;
  uint64_t (*v59)(_QWORD);
  _QWORD *v60;
  _OWORD *v61;
  void *v62;
  uint64_t v63;
  llvm::Value *FPTrunc;
  char *v65;
  uint64_t v66;
  llvm::Value *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  llvm::Function *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t (**v75)(_QWORD);
  _BYTE *v76;
  _DWORD *v77;
  uint64_t v78;
  llvm::Value *v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  _QWORD v86[4];
  __int16 v87;
  uint64_t (**v88)(int, llvm::Value *);
  void *v89[2];
  _OWORD v90[5];
  int v91;
  uint64_t v92;
  _QWORD v93[29];
  AGCLLVMUserComputeKernelG10 *v94;
  _OWORD v95[3];
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v2 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v88, *v2);
  v94 = this;
  v88 = &off_1E7EB1398;
  v93[25] = v2;
  if ((v3 & 1) == 0
  {
    AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[0] = (uint64_t)"air.get_global_size.i32";
    dword_1ED839218 = 1;
    qword_1ED839220 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGlobalSizeG10;
    unk_1ED839228 = 0;
    dword_1ED839230 = 4;
    word_1ED839234 = 0;
    qword_1ED839238 = (uint64_t)"air.get_global_size.i16";
    dword_1ED839240 = 1;
    qword_1ED839248 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGlobalSizeG10;
    unk_1ED839250 = 0;
    dword_1ED839258 = 4;
    word_1ED83925C = 0;
    qword_1ED839260 = (uint64_t)"air.get_global_id.i32";
    dword_1ED839268 = 1;
    qword_1ED839270 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGlobalIDG10;
    unk_1ED839278 = 0;
    dword_1ED839280 = 4;
    word_1ED839284 = 0;
    qword_1ED839288 = (uint64_t)"air.get_global_id.i16";
    dword_1ED839290 = 1;
    qword_1ED839298 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGlobalIDG10;
    unk_1ED8392A0 = 0;
    dword_1ED8392A8 = 4;
    word_1ED8392AC = 0;
    qword_1ED8392B0 = (uint64_t)"air.get_local_size.i32";
    dword_1ED8392B8 = 1;
    qword_1ED8392C0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalSizeG10;
    unk_1ED8392C8 = 0;
    dword_1ED8392D0 = 4;
    word_1ED8392D4 = 0;
    qword_1ED8392D8 = (uint64_t)"air.get_local_size.i16";
    dword_1ED8392E0 = 1;
    qword_1ED8392E8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalSizeG10;
    unk_1ED8392F0 = 0;
    dword_1ED8392F8 = 4;
    word_1ED8392FC = 0;
    qword_1ED839300 = (uint64_t)"air.get_local_id.i32";
    dword_1ED839308 = 1;
    qword_1ED839310 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalIDG10;
    unk_1ED839318 = 0;
    dword_1ED839320 = 4;
    word_1ED839324 = 0;
    qword_1ED839328 = (uint64_t)"air.get_local_id.i16";
    dword_1ED839330 = 1;
    qword_1ED839338 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalIDG10;
    unk_1ED839340 = 0;
    dword_1ED839348 = 4;
    word_1ED83934C = 0;
    qword_1ED839350 = (uint64_t)"air.get_local_linear_id.i32";
    dword_1ED839358 = 1;
    qword_1ED839360 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalLinearIDG10;
    unk_1ED839368 = 0;
    dword_1ED839370 = 2;
    word_1ED839374 = 0;
    qword_1ED839378 = (uint64_t)"air.get_local_linear_id.i16";
    dword_1ED839380 = 1;
    qword_1ED839388 = (uint64_t)AGCLLVMUserComputeKernelG10::buildLocalLinearIDG10;
    unk_1ED839390 = 0;
    dword_1ED839398 = 2;
    word_1ED83939C = 0;
    qword_1ED8393A0 = (uint64_t)"air.get_num_groups.i32";
    dword_1ED8393A8 = 1;
    qword_1ED8393B0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildNumGroupsG10;
    unk_1ED8393B8 = 0;
    dword_1ED8393C0 = 4;
    word_1ED8393C4 = 0;
    qword_1ED8393C8 = (uint64_t)"air.get_num_groups.i16";
    dword_1ED8393D0 = 1;
    qword_1ED8393D8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildNumGroupsG10;
    unk_1ED8393E0 = 0;
    dword_1ED8393E8 = 4;
    word_1ED8393EC = 0;
    qword_1ED8393F0 = (uint64_t)"air.get_group_id.i32";
    dword_1ED8393F8 = 1;
    qword_1ED839400 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGroupIDG10;
    unk_1ED839408 = 0;
    dword_1ED839410 = 4;
    word_1ED839414 = 0;
    qword_1ED839418 = (uint64_t)"air.get_group_id.i16";
    dword_1ED839420 = 1;
    qword_1ED839428 = (uint64_t)AGCLLVMUserComputeKernelG10::buildGroupIDG10;
    qword_1ED839430 = 0;
    dword_1ED839438 = 4;
    word_1ED83943C = 0;
    qword_1ED839440 = (uint64_t)"air.get_dispatch_local_size.i32";
    dword_1ED839448 = 1;
    qword_1ED839450 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10;
    qword_1ED839458 = 0;
    dword_1ED839460 = 4;
    word_1ED839464 = 0;
    qword_1ED839468 = (uint64_t)"air.get_dispatch_local_size.i16";
    dword_1ED839470 = 1;
    qword_1ED839478 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10;
    qword_1ED839480 = 0;
    dword_1ED839488 = 4;
    word_1ED83948C = 0;
    qword_1ED839490 = (uint64_t)"air.get_quadgroups_per_threadgroup.i32";
    dword_1ED839498 = 1;
    qword_1ED8394A0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupG10;
    qword_1ED8394A8 = 0;
    dword_1ED8394B0 = 2;
    word_1ED8394B4 = 0;
    qword_1ED8394B8 = (uint64_t)"air.get_quadgroups_per_threadgroup.i16";
    dword_1ED8394C0 = 1;
    qword_1ED8394C8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupG10;
    qword_1ED8394D0 = 0;
    dword_1ED8394D8 = 2;
    word_1ED8394DC = 0;
    qword_1ED8394E0 = (uint64_t)"air.get_simdgroups_per_threadgroup.i32";
    dword_1ED8394E8 = 1;
    qword_1ED8394F0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildSimdgroupsPerThreadgroupG10;
    qword_1ED8394F8 = 0;
    dword_1ED839500 = 2;
    word_1ED839504 = 0;
    qword_1ED839508 = (uint64_t)"air.get_simdgroups_per_threadgroup.i16";
    dword_1ED839510 = 1;
    qword_1ED839518 = (uint64_t)AGCLLVMUserComputeKernelG10::buildSimdgroupsPerThreadgroupG10;
    qword_1ED839520 = 0;
    dword_1ED839528 = 2;
    word_1ED83952C = 0;
    qword_1ED839530 = (uint64_t)"air.get_dispatch_quadgroups_per_threadgroup.i32";
    dword_1ED839538 = 1;
    qword_1ED839540 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchQuadgroupsPerThreadgroupG10;
    qword_1ED839548 = 0;
    dword_1ED839550 = 2;
    word_1ED839554 = 0;
    qword_1ED839558 = (uint64_t)"air.get_dispatch_quadgroups_per_threadgroup.i16";
    dword_1ED839560 = 1;
    qword_1ED839568 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchQuadgroupsPerThreadgroupG10;
    qword_1ED839570 = 0;
    dword_1ED839578 = 2;
    word_1ED83957C = 0;
    qword_1ED839580 = (uint64_t)"air.get_dispatch_simdgroups_per_threadgroup.i32";
    dword_1ED839588 = 1;
    qword_1ED839590 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchSimdgroupsPerThreadgroupG10;
    qword_1ED839598 = 0;
    dword_1ED8395A0 = 2;
    word_1ED8395A4 = 0;
    qword_1ED8395A8 = (uint64_t)"air.get_dispatch_simdgroups_per_threadgroup.i16";
    dword_1ED8395B0 = 1;
    qword_1ED8395B8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchSimdgroupsPerThreadgroupG10;
    qword_1ED8395C0 = 0;
    dword_1ED8395C8 = 2;
    word_1ED8395CC = 0;
    qword_1ED8395D0 = (uint64_t)"air.get_quad_group.i32";
    dword_1ED8395D8 = 1;
    qword_1ED8395E0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadGroupG10;
    qword_1ED8395E8 = 0;
    dword_1ED8395F0 = 2;
    word_1ED8395F4 = 0;
    qword_1ED8395F8 = (uint64_t)"air.get_quad_group.i16";
    dword_1ED839600 = 1;
    qword_1ED839608 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadGroupG10;
    qword_1ED839610 = 0;
    dword_1ED839618 = 2;
    word_1ED83961C = 0;
    qword_1ED839620 = (uint64_t)"air.get_thread_index_in_simdgroup.i32";
    dword_1ED839628 = 1;
    qword_1ED839630 = (uint64_t)AGCLLVMUserComputeKernelG10::buildThreadIndexInSimdGroupG10;
    qword_1ED839638 = 0;
    dword_1ED839640 = 2;
    word_1ED839644 = 0;
    qword_1ED839648 = (uint64_t)"air.get_thread_index_in_simdgroup.i16";
    dword_1ED839650 = 1;
    qword_1ED839658 = (uint64_t)AGCLLVMUserComputeKernelG10::buildThreadIndexInSimdGroupG10;
    qword_1ED839660 = 0;
    dword_1ED839668 = 2;
    word_1ED83966C = 0;
    qword_1ED839670 = (uint64_t)"air.get_simdgroup_index_in_threadgroup.i32";
    dword_1ED839678 = 1;
    qword_1ED839680 = (uint64_t)AGCLLVMUserComputeKernelG10::buildSimdGroupIndexInThreadgroupG10;
    qword_1ED839688 = 0;
    dword_1ED839690 = 2;
    word_1ED839694 = 0;
    qword_1ED839698 = (uint64_t)"air.get_simdgroup_index_in_threadgroup.i16";
    dword_1ED8396A0 = 1;
    qword_1ED8396A8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildSimdGroupIndexInThreadgroupG10;
    qword_1ED8396B0 = 0;
    dword_1ED8396B8 = 2;
    word_1ED8396BC = 0;
    qword_1ED8396C0 = (uint64_t)"air.get_dispatch_threads_per_threadgroup.i32";
    dword_1ED8396C8 = 1;
    qword_1ED8396D0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10;
    qword_1ED8396D8 = 0;
    dword_1ED8396E0 = 4;
    word_1ED8396E4 = 0;
    qword_1ED8396E8 = (uint64_t)"air.get_dispatch_threads_per_threadgroup.i16";
    dword_1ED8396F0 = 1;
    qword_1ED8396F8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10;
    qword_1ED839700 = 0;
    dword_1ED839708 = 4;
    word_1ED83970C = 0;
    qword_1ED839710 = (uint64_t)"air.get_stage_in_grid_origin.i32";
    dword_1ED839718 = 1;
    xmmword_1ED839720 = xmmword_1C3E37D90;
    dword_1ED839730 = 4;
    word_1ED839734 = 0;
    qword_1ED839738 = (uint64_t)"air.get_stage_in_grid_origin.i16";
    dword_1ED839740 = 1;
    xmmword_1ED839748 = xmmword_1C3E37D90;
    dword_1ED839758 = 4;
    word_1ED83975C = 0;
    qword_1ED839760 = (uint64_t)"air.get_stage_in_grid_size.i32";
    dword_1ED839768 = 1;
    xmmword_1ED839770 = xmmword_1C3E37DA0;
    dword_1ED839780 = 4;
    word_1ED839784 = 0;
    qword_1ED839788 = (uint64_t)"air.get_stage_in_grid_size.i16";
    dword_1ED839790 = 1;
    xmmword_1ED839798 = xmmword_1C3E37DA0;
    dword_1ED8397A8 = 4;
    word_1ED8397AC = 0;
    qword_1ED8397B0 = (uint64_t)"air.get_quadgroup_index_in_threadgroup.i32";
    dword_1ED8397B8 = 1;
    qword_1ED8397C0 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadGroupG10;
    qword_1ED8397C8 = 0;
    dword_1ED8397D0 = 2;
    word_1ED8397D4 = 0;
    qword_1ED8397D8 = (uint64_t)"air.get_quadgroup_index_in_threadgroup.i16";
    dword_1ED8397E0 = 1;
    qword_1ED8397E8 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadGroupG10;
    qword_1ED8397F0 = 0;
    dword_1ED8397F8 = 2;
    word_1ED8397FC = 0;
    qword_1ED839800 = (uint64_t)"air.get_thread_index_in_quadgroup.i32";
    dword_1ED839808 = 1;
    qword_1ED839810 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadElementG10;
    qword_1ED839818 = 0;
    dword_1ED839820 = 2;
    word_1ED839824 = 0;
    qword_1ED839828 = (uint64_t)"air.get_thread_index_in_quadgroup.i16";
    dword_1ED839830 = 1;
    qword_1ED839838 = (uint64_t)AGCLLVMUserComputeKernelG10::buildQuadElementG10;
    qword_1ED839840 = 0;
    dword_1ED839848 = 2;
    word_1ED83984C = 0;
  }
  v4 = 0;
  v5 = &v81;
  do
  {
    if (AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v4])
      strlen((const char *)AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v4]);
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v7 = (llvm::Function *)Function;
      v8 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v4];
      v77 = v8 + 4;
      if (*((_DWORD *)v8 + 8) == 10)
      {
        v12 = *(_QWORD *)(Function + 8);
        if (v12)
        {
          v13 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v4];
          v14 = (void (**)(_QWORD *, _QWORD))(v13 + 2);
          v15 = v13 + 3;
          do
          {
            v16 = *v14;
            v17 = (_QWORD *)((char *)v94 + (*v15 >> 1));
            if ((*v15 & 1) != 0)
              v16 = *(void (**)(_QWORD *, _QWORD))(*v17 + v16);
            v18 = *(_QWORD *)(v12 + 8);
            v16(v17, *(_QWORD *)(v12 + 24));
            v12 = v18;
          }
          while (v18);
        }
        goto LABEL_105;
      }
      if (*((_DWORD *)v8 + 8) == 9)
      {
        v9 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v4];
        v10 = (_BYTE *)v9[2];
        if (v10)
        {
          v11 = strlen((const char *)v9[2]);
          *(_QWORD *)&v95[0] = (char *)&v95[1] + 8;
          *(_OWORD *)((char *)v95 + 8) = xmmword_1C3E37B50;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v95, v10, &v10[v11]);
        }
        else
        {
          *(_QWORD *)&v95[1] = 64;
          v95[0] = (unint64_t)&v95[1] + 8;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v95, ".", "");
        v68 = *((_QWORD *)&v95[0] + 1);
        if (*(_QWORD *)&v95[1] < *((_QWORD *)&v95[0] + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v68 = *((_QWORD *)&v95[0] + 1);
        }
        *((_QWORD *)&v95[0] + 1) = v68;
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (*(_OWORD **)&v95[0] != (_OWORD *)((char *)&v95[1] + 8))
          free(*(void **)&v95[0]);
        goto LABEL_105;
      }
      v70 = v4;
      v71 = (llvm::Function *)Function;
      v19 = **(_QWORD **)(*(_QWORD *)(Function + 24) + 16);
      v20 = (*(_DWORD *)(v19 + 8) & 0xFE) != 0x12
         || BYTE5(AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v4 + 4]) == 0;
      v21 = !v20;
      if (v20)
        v22 = 1;
      else
        v22 = *(unsigned int *)(v19 + 32);
      v78 = v22;
      v69 = v91;
      v23 = *(_QWORD *)(Function + 8);
      if (!v23)
      {
LABEL_99:
        v91 = v69;
        v4 = v70;
        v7 = v71;
LABEL_105:
        llvm::Function::eraseFromParent(v7);
        goto LABEL_106;
      }
      v72 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v4 + 1];
      v24 = &AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(void)::workitem_functions[5 * v4];
      v76 = (char *)v24 + 36;
      v74 = v24 + 3;
      v75 = (uint64_t (**)(_QWORD))(v24 + 2);
      while (1)
      {
        v25 = *(llvm::Instruction **)(v23 + 24);
        v26 = *(_QWORD *)(v23 + 8);
        if (*(_DWORD *)v72 == 1)
        {
          v27 = 0;
        }
        else
        {
          if (*(_DWORD *)v72 != 2)
            goto LABEL_32;
          v27 = 121;
        }
        v91 = v27;
LABEL_32:
        v73 = v26;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v89, v25);
        v28 = llvm::UndefValue::get();
        if (v78)
        {
          for (i = 0; i != v78; ++i)
          {
            v79 = (llvm::Value *)v28;
            v30 = v5;
            v96 = 0;
            memset(v95, 0, sizeof(v95));
            v31 = llvm::CallBase::arg_end(v25) - (_QWORD)v25 + 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF);
            if ((v31 & 0x1FFFFFFFE0) != 0)
            {
              v32 = (v31 >> 5);
              v33 = (llvm::Value **)v95;
              v34 = v25;
              do
              {
                v35 = (llvm::Value **)((char *)v34 - 32 * (*((_DWORD *)v25 + 5) & 0x7FFFFFF));
                v36 = *v35;
                *v33 = *v35;
                if (v21 && (*(_DWORD *)(*(_QWORD *)v36 + 8) & 0xFE) == 0x12)
                {
                  v87 = 257;
                  v37 = (llvm::Value *)llvm::ConstantInt::get();
                  *v33 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v89, v36, v37, (const llvm::Twine *)v86);
                }
                ++v33;
                v34 = (llvm::Instruction *)((char *)v34 + 32);
                --v32;
              }
              while (v32);
            }
            if (*v76)
            {
              v38 = **(llvm::Type ***)&v95[0];
              v5 = v30;
              if ((*(_DWORD *)(**(_QWORD **)&v95[0] + 8) & 0xFE) == 0x12)
                v38 = (llvm::Type *)**((_QWORD **)v38 + 2);
              v86[0] = llvm::Type::getPrimitiveSizeInBits(v38);
              v86[1] = v39;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                v40 = 0;
              }
              else
              {
                v41 = (llvm::Type *)v93[4];
                if ((*(_DWORD *)(**(_QWORD **)&v95[0] + 8) & 0xFE) == 0x12)
                  v41 = (llvm::Type *)llvm::FixedVectorType::get();
                if ((v31 & 0x1FFFFFFFE0) != 0)
                {
                  v42 = (v31 >> 5);
                  v43 = (llvm::Value **)v95;
                  do
                  {
                    v44 = *v43;
                    v87 = 257;
                    *v43++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v89, v44, v41, (const llvm::Twine *)v86);
                    --v42;
                  }
                  while (v42);
                }
                v40 = 1;
              }
            }
            else
            {
              v40 = 0;
              v5 = v30;
            }
            v45 = (char *)v94 + *(_QWORD *)(*(_QWORD *)v94 - 24);
            v83 = v90[2];
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)v89);
            v85 = v91;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v83, (uint64_t)(v45 + 40));
            if (v84)
              llvm::MetadataTracking::untrack();
            switch(*v77)
            {
              case 1:
                v46 = *v75;
                v47 = (_QWORD *)((char *)v94 + (*v74 >> 1));
                if ((*v74 & 1) != 0)
                  v46 = *(uint64_t (**)(_QWORD))(*v47 + v46);
                v48 = v46(v47);
                goto LABEL_84;
              case 2:
                v51 = *v75;
                v52 = (_QWORD *)((char *)v94 + (*v74 >> 1));
                if ((*v74 & 1) != 0)
                  v51 = *(uint64_t (**)(_QWORD))(*v52 + v51);
                v53 = *(_QWORD *)v25;
                goto LABEL_75;
              case 3:
                v51 = *v75;
                v52 = (_QWORD *)((char *)v94 + (*v74 >> 1));
                if ((*v74 & 1) != 0)
                  v51 = *(uint64_t (**)(_QWORD))(*v52 + v51);
                v53 = *(_QWORD *)&v95[0];
LABEL_75:
                v48 = ((uint64_t (*)(_QWORD *, uint64_t))v51)(v52, v53);
                goto LABEL_84;
              case 4:
                v54 = (unsigned int *)(*(_QWORD *)&v95[0] + 24);
                if (*(_DWORD *)(*(_QWORD *)&v95[0] + 32) >= 0x41u)
                  v54 = *(unsigned int **)v54;
                v55 = *v75;
                v56 = (_QWORD *)((char *)v94 + (*v74 >> 1));
                if ((*v74 & 1) != 0)
                  v55 = *(uint64_t (**)(_QWORD))(*v56 + v55);
                v48 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v55)(v56, *(_QWORD *)v25, *v54);
                goto LABEL_84;
              case 5:
                v49 = *v75;
                v50 = (_QWORD *)((char *)v94 + (*v74 >> 1));
                if ((*v74 & 1) != 0)
                  v49 = *(uint64_t (**)(_QWORD))(*v50 + v49);
                v48 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v49)(v50, *(_QWORD *)&v95[0], *((_QWORD *)&v95[0] + 1));
                goto LABEL_84;
              case 6:
                v59 = *v75;
                v60 = (_QWORD *)((char *)v94 + (*v74 >> 1));
                if ((*v74 & 1) != 0)
                  v59 = *(uint64_t (**)(_QWORD))(*v60 + v59);
                v62 = (void *)*((_QWORD *)&v95[0] + 1);
                v61 = *(_OWORD **)&v95[0];
                v63 = *(_QWORD *)&v95[1];
                goto LABEL_83;
              case 7:
                v59 = *v75;
                v60 = (_QWORD *)((char *)v94 + (*v74 >> 1));
                if ((*v74 & 1) != 0)
                  v59 = *(uint64_t (**)(_QWORD))(*v60 + v59);
                v61 = v95;
                v62 = &unk_1C3E4D9BB;
                v63 = 0;
LABEL_83:
                v48 = ((uint64_t (*)(_QWORD *, _OWORD *, void *, uint64_t))v59)(v60, v61, v62, v63);
                goto LABEL_84;
              case 8:
                v57 = *v75;
                v58 = (_QWORD *)((char *)v94 + (*v74 >> 1));
                if ((*v74 & 1) != 0)
                  v57 = *(uint64_t (**)(_QWORD))(*v58 + v57);
                v48 = ((uint64_t (*)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))v57)(v58, *(_QWORD *)v25, v95, &unk_1C3E4D9BB, 0);
LABEL_84:
                FPTrunc = (llvm::Value *)v48;
                break;
              default:
                FPTrunc = 0;
                break;
            }
            v65 = (char *)v94 + *(_QWORD *)(*(_QWORD *)v94 - 24);
            v80 = *(_OWORD *)(v65 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v65 + 40));
            v82 = *((_DWORD *)v65 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v80, (uint64_t)v89);
            if (v81)
              llvm::MetadataTracking::untrack();
            if (v40)
            {
              v66 = *(_QWORD *)v25;
              if (v21 && (*(_DWORD *)(v66 + 8) & 0xFE) == 0x12)
                v66 = **(_QWORD **)(v66 + 16);
              v87 = 257;
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v89, FPTrunc, (llvm::Type *)v66, (const llvm::Twine *)v86);
              if (!v21)
                goto LABEL_95;
            }
            else if (!v21)
            {
              goto LABEL_95;
            }
            v87 = 257;
            v67 = (llvm::Value *)llvm::ConstantInt::get();
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v89, v79, FPTrunc, v67, (const llvm::Twine *)v86);
LABEL_95:
            v28 = (uint64_t)FPTrunc;
          }
        }
        if (*(_QWORD *)v25 != v93[1])
          llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v25);
        v23 = v73;
        if (!v73)
          goto LABEL_99;
      }
    }
LABEL_106:
    ++v4;
  }
  while (v4 != 40);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v93);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v92);
  if (v89[0] != v90)
    free(v89[0]);
}

uint64_t AGCLLVMUserComputeKernelG10::buildGlobalSizeG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, unsigned int a3)
{
  return AGCLLVMUserShader::buildGlobalSizeCommon(this, a2, a3, 0, 0);
}

uint64_t AGCLLVMUserComputeKernelG10::buildGlobalIDG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildGlobalID(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildLocalSizeG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildLocalSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildLocalIDG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *, uint64_t))(*(_QWORD *)v7 + 256))(v7, &v11, a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildLocalLinearIDG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = AGCLLVMGen3TargetLowerer::buildLocalLinearID(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildNumGroupsG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, unsigned int a3)
{
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::IRBuilderBase *v8;
  llvm::Value *Add;
  llvm::Value *v10;
  llvm::Value *Sub;
  uint64_t v12;
  char *v13;
  _WORD v15[20];
  _BYTE v16[32];
  __int16 v17;

  v6 = (llvm::Value *)AGCLLVMUserShader::buildGlobalSizeCommon(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), a3, 0, 0);
  v7 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(this, *(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), a3);
  v8 = (AGCLLVMUserComputeKernelG10 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v17 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v8, v6, v7, (const llvm::Twine *)v16);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v15[16] = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v8, Add, v10, (const llvm::Twine *)v15);
  v12 = AGCLLVMUserComputeKernelG10::buildFastDivideThreadgroupSize(this, Sub, v7);
  v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v17 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v13, 38, v12, (uint64_t)a2, (uint64_t)v16);
}

uint64_t AGCLLVMUserComputeKernelG10::buildGroupIDG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupDispatchSize(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  return AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<2u>(this, a2, 0);
}

uint64_t AGCLLVMUserComputeKernelG10::buildSimdgroupsPerThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  return AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<5u>(this, a2, 0);
}

uint64_t AGCLLVMUserComputeKernelG10::buildDispatchQuadgroupsPerThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  return AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<2u>(this, a2, 1);
}

uint64_t AGCLLVMUserComputeKernelG10::buildDispatchSimdgroupsPerThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  return AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<5u>(this, a2, 1);
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadGroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = AGCLLVMGen3TargetLowerer::buildQuadGroup(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildThreadIndexInSimdGroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *))(*(_QWORD *)v5 + 1536))(v5, &v9, a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildSimdGroupIndexInThreadgroupG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *))(*(_QWORD *)v5 + 1544))(v5, &v9, a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadElementG10(AGCLLVMUserComputeKernelG10 *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<5u>(AGCLLVMUserComputeKernelG10 *a1, llvm::Type *a2, int a3)
{
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v9;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  llvm::Value *Add;
  llvm::Value *v17;
  _WORD v19[20];
  _BYTE v20[32];
  __int16 v21;

  v5 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  if (a3)
  {
    v6 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 0);
    v7 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 2);
  }
  else
  {
    v11 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 0);
    v12 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 2);
  }
  v21 = 257;
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  v14 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

uint64_t AGCLLVMUserComputeKernelG10::buildQuadgroupsPerThreadgroupCommon<2u>(AGCLLVMUserComputeKernelG10 *a1, llvm::Type *a2, int a3)
{
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v9;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  llvm::Value *Add;
  llvm::Value *v17;
  _WORD v19[20];
  _BYTE v20[32];
  __int16 v21;

  v5 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  if (a3)
  {
    v6 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 0);
    v7 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildDispatchLocalSizeG10(a1, a2, 2);
  }
  else
  {
    v11 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 0);
    v12 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = (llvm::Value *)AGCLLVMUserComputeKernelG10::buildLocalSizeG10(a1, a2, 2);
  }
  v21 = 257;
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  v14 = (AGCLLVMUserComputeKernelG10 *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

uint64_t AGCLLVMUserComputeKernelG10::buildFastDivideThreadgroupSize(AGCLLVMUserComputeKernelG10 *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Type *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v11;
  llvm::Value *AlignedLoad;
  llvm::IRBuilderBase *v13;
  llvm::Value *v14;
  llvm::Value *Sub;
  char *v16;
  llvm::Type *v17;
  uint64_t GEP;
  char *v19;
  llvm::Type *v20;
  llvm::Value *v21;
  char *v22;
  llvm::IRBuilderBase *v23;
  llvm::Value *v24;
  llvm::Value *Element;
  char *v26;
  llvm::IRBuilderBase *v27;
  llvm::Value *v28;
  llvm::Value *v29;
  _QWORD v31[4];
  __int16 v32;

  v6 = (llvm::Type *)llvm::PointerType::get();
  v7 = *((_QWORD *)this + 547);
  if (!v7)
  {
    v31[0] = "agc.fast_integer_divide_buffer_pointer";
    v32 = 259;
    v8 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 376))(v8);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v6, (const llvm::Twine *)v31, v9, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserComputeKernelG10 *)((char *)this + 4360), (uint64_t)GlobalBufferBinding);
    v7 = *((_QWORD *)this + 547);
  }
  v11 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v32 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v11, v6, v7, 0, (uint64_t)v31);
  v13 = (AGCLLVMUserComputeKernelG10 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v32 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v13, a3, v14, (const llvm::Twine *)v31);
  v16 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v17 = (llvm::Type *)*((_QWORD *)v16 + 35);
  v32 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v16 + 40), v17, AlignedLoad, Sub, (const llvm::Twine *)v31);
  v19 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v20 = (llvm::Type *)*((_QWORD *)v19 + 35);
  v32 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v19 + 5, v20, GEP, 0, (uint64_t)v31);
  v22 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v32 = 257;
  v23 = (llvm::IRBuilderBase *)(v22 + 40);
  v24 = (llvm::Value *)llvm::ConstantInt::get();
  Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v23, v21, v24, (const llvm::Twine *)v31);
  v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v32 = 257;
  v27 = (llvm::IRBuilderBase *)(v26 + 40);
  v28 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v27, v21, v28, (const llvm::Twine *)v31);
  return AGCLLVMObject::buildMulShiftDiv((AGCLLVMUserComputeKernelG10 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), a2, Element, v29);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::initEmpty(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7EB1328;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 40;
      result = (uint64_t)v3 + 48;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t llvm::User::setOperand(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0)
    v4 = *(_QWORD *)(result - 8);
  else
    v4 = result - 32 * (v3 & 0x7FFFFFF);
  v5 = v4 + 32 * a2;
  if (*(_QWORD *)v5)
  {
    **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)v5 = a3;
  if (a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v7 = (_QWORD *)(a3 + 8);
    v8 = v9;
    v10 = v4 + 32 * a2;
    *(_QWORD *)(v10 + 8) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = v10 + 8;
    *(_QWORD *)(v10 + 16) = v7;
    *v7 = v5;
  }
  return result;
}

_QWORD *llvm::ValueMap<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  char v3;
  _QWORD *v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  v7 = &unk_1E7EB1328;
  v10 = a1;
  v11 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 48 * v8, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::initEmpty(a1);
  if ((_DWORD)v3)
  {
    v9 = (uint64_t *)((char *)v4 + 24);
    v10 = 48 * v3;
    do
    {
      v11 = *v9;
      if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v15);
        v12 = v15;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v15 + 8), v9 - 2);
        *(_QWORD *)(v12 + 32) = v9[1];
        *(_QWORD *)(v12 + 40) = v9[2];
        ++*(_DWORD *)(a1 + 8);
        v11 = *v9;
      }
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
      v9 += 6;
      v10 -= 48;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(48 * v3));
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    v10[1] = 0;
    v10[2] = -8192;
    v9 = &unk_1E7EB1328;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t result;
  _QWORD *v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE v12[16];
  uint64_t v13;
  int32x2_t *v14;
  void *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v14 = v4;
  v19 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if ((_DWORD)result)
    v6 = v19;
  else
    v6 = (_QWORD *)(*(_QWORD *)v4 + 48 * v4[2].u32[0]);
  v7 = v14;
  if ((_QWORD *)(*(_QWORD *)v14 + 48 * v14[2].u32[0]) != v6)
  {
    v8 = v6[5];
    v20[1] = 0;
    v21 = -8192;
    v19 = &unk_1E7EB1328;
    v20[0] = 2;
    v22 = 0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 1), v20);
    v9 = v21;
    v6[4] = v22;
    if (v9 != -8192 && v9 != -4096 && v9)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    v10 = (uint64_t)v14;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v15, a2);
    v15 = &unk_1E7EB1328;
    v18 = v10;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    v19 = &unk_1E7EB1328;
    v22 = v18;
    v23 = v8;
    v24 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      v11 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::Instruction *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::Instruction *,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>(v10, (uint64_t)&v19, v24);
      result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 1), v20);
      v11[4] = v22;
      v11[5] = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    if (v17 != -8192 && v17 != -4096 && v17)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
  }
  return result;
}

void AGCLLVMDriverTGSizeOptimizationShader::~AGCLLVMDriverTGSizeOptimizationShader(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E8E8D8;
  *((_QWORD *)this + 557) = &unk_1E7E8EC38;
  *((_QWORD *)this + 561) = &unk_1E7E8ED28;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E98370;
  *((_QWORD *)this + 557) = &off_1E7E986D0;
  *((_QWORD *)this + 561) = &off_1E7E987C0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8ED50);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4456));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E8E8D8;
  *((_QWORD *)this + 557) = &unk_1E7E8EC38;
  *((_QWORD *)this + 561) = &unk_1E7E8ED28;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E98370;
  *((_QWORD *)this + 557) = &off_1E7E986D0;
  *((_QWORD *)this + 561) = &off_1E7E987C0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8ED50);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + 4456));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverTGSizeOptimizationShader::setupShaderInputs(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

uint64_t AGCLLVMDriverTGSizeOptimizationShader::replaceBuiltins(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  uint64_t v2;
  uint64_t Function;
  llvm::Function *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Instruction *v7;
  llvm::Value **v8;

  v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if ((_DWORD)v2)
  {
    AGCLLVMUserComputeKernelG10::replaceWorkitemFunctions(this);
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v4 = (llvm::Function *)Function;
      v5 = *(_QWORD *)(Function + 8);
      if (v5)
      {
        do
        {
          v6 = *(_QWORD *)(v5 + 8);
          v7 = *(llvm::Instruction **)(v5 + 24);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMDriverTGSizeOptimizationShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v7);
          v8 = (llvm::Value **)((char *)v7 - 32 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF));
          AGCLLVMUserComputeKernelG10::buildFastDivideThreadgroupSize(this, *v8, v8[4]);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v7);
          v5 = v6;
        }
        while (v6);
      }
      llvm::Function::eraseFromParent(v4);
    }
  }
  return v2;
}

const char *AGCLLVMDriverTGSizeOptimizationShader::dumpType(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  return "tg-size-optimization-driver";
}

uint64_t AGCLLVMDriverComputeKernel::getShaderType(AGCLLVMDriverComputeKernel *this)
{
  return 22;
}

uint64_t AGCLLVMDriverComputeKernel::enableSoftFaultOptimization(AGCLLVMDriverComputeKernel *this)
{
  return 0;
}

uint64_t AGCLLVMDriverComputeKernel::getMaxLocalMemorySize(AGCLLVMDriverComputeKernel *this)
{
  return *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 860);
}

void `virtual thunk to'AGCLLVMDriverTGSizeOptimizationShader::~AGCLLVMDriverTGSizeOptimizationShader(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8E8D8;
  v1[557] = &unk_1E7E8EC38;
  v1[561] = &unk_1E7E8ED28;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E98370;
  v1[557] = &off_1E7E986D0;
  v1[561] = &off_1E7E987C0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8ED50);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8E8D8;
  v1[557] = &unk_1E7E8EC38;
  v1[561] = &unk_1E7E8ED28;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E98370;
  v1[557] = &off_1E7E986D0;
  v1[561] = &off_1E7E987C0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8ED50);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverTGSizeOptimizationShader::dumpType(AGCLLVMDriverTGSizeOptimizationShader *this)
{
  return "tg-size-optimization-driver";
}

uint64_t `virtual thunk to'AGCLLVMDriverComputeKernel::getShaderType(AGCLLVMDriverComputeKernel *this)
{
  return 22;
}

uint64_t `virtual thunk to'AGCLLVMDriverComputeKernel::enableSoftFaultOptimization(AGCLLVMDriverComputeKernel *this)
{
  return 0;
}

void AGCLLVMDriverComputeKernel::~AGCLLVMDriverComputeKernel(AGCLLVMDriverComputeKernel *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EA9A60;
  *((_QWORD *)this + 553) = &off_1E7EA9DC0;
  *((_QWORD *)this + 557) = &off_1E7EA9EB0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeKernel *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeKernel *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeKernel *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8E860);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverComputeKernel *)((char *)this + 4424));
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EA9A60;
  *((_QWORD *)this + 553) = &off_1E7EA9DC0;
  *((_QWORD *)this + 557) = &off_1E7EA9EB0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeKernel *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeKernel *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeKernel *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8E860);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverComputeKernel *)((char *)this + 4424));
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMDriverComputeKernel::~AGCLLVMDriverComputeKernel(AGCLLVMDriverComputeKernel *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EA9A60;
  v1[553] = &off_1E7EA9DC0;
  v1[557] = &off_1E7EA9EB0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8E860);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 553));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EA9A60;
  v1[553] = &off_1E7EA9DC0;
  v1[557] = &off_1E7EA9EB0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8E860);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 553));
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E8FD18;
  *((_QWORD *)this + 557) = &unk_1E7E90078;
  *((_QWORD *)this + 561) = &unk_1E7E90168;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E99850;
  *((_QWORD *)this + 557) = &off_1E7E99BB0;
  *((_QWORD *)this + 561) = &off_1E7E99CA0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E90190);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4456));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E8FD18;
  *((_QWORD *)this + 557) = &unk_1E7E90078;
  *((_QWORD *)this + 561) = &unk_1E7E90168;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E99850;
  *((_QWORD *)this + 557) = &off_1E7E99BB0;
  *((_QWORD *)this + 561) = &off_1E7E99CA0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E90190);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *)((char *)this + 4456));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::setupShaderInputs(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  return "compute-ei-range-exec";
}

void `virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8FD18;
  v1[557] = &unk_1E7E90078;
  v1[561] = &unk_1E7E90168;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E99850;
  v1[557] = &off_1E7E99BB0;
  v1[561] = &off_1E7E99CA0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E90190);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E8FD18;
  v1[557] = &unk_1E7E90078;
  v1[561] = &unk_1E7E90168;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E99850;
  v1[557] = &off_1E7E99BB0;
  v1[561] = &off_1E7E99CA0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E90190);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader *this)
{
  return "compute-ei-range-exec";
}

void AGCLLVMDriverExecuteIndirectComputeShaderGen5::~AGCLLVMDriverExecuteIndirectComputeShaderGen5(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E90218;
  *((_QWORD *)this + 557) = &unk_1E7E90578;
  *((_QWORD *)this + 561) = &unk_1E7E90668;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9A8C0;
  *((_QWORD *)this + 557) = &off_1E7E9AC20;
  *((_QWORD *)this + 561) = &off_1E7E9AD10;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E90688);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4456));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E90218;
  *((_QWORD *)this + 557) = &unk_1E7E90578;
  *((_QWORD *)this + 561) = &unk_1E7E90668;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9A8C0;
  *((_QWORD *)this + 557) = &off_1E7E9AC20;
  *((_QWORD *)this + 561) = &off_1E7E9AD10;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E90688);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverExecuteIndirectComputeShaderGen5 *)((char *)this + 4456));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverExecuteIndirectComputeShaderGen5::setupShaderInputs(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverExecuteIndirectComputeShaderGen5::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  return "compute-ei-patch";
}

uint64_t AGCLLVMDriverExecuteIndirectComputeShaderGen5::getShaderType(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  return 22;
}

void `virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderGen5::~AGCLLVMDriverExecuteIndirectComputeShaderGen5(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E90218;
  v1[557] = &unk_1E7E90578;
  v1[561] = &unk_1E7E90668;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9A8C0;
  v1[557] = &off_1E7E9AC20;
  v1[561] = &off_1E7E9AD10;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E90688);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E90218;
  v1[557] = &unk_1E7E90578;
  v1[561] = &unk_1E7E90668;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9A8C0;
  v1[557] = &off_1E7E9AC20;
  v1[561] = &off_1E7E9AD10;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E90688);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderGen5::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  return "compute-ei-patch";
}

uint64_t `virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderGen5::getShaderType(AGCLLVMDriverExecuteIndirectComputeShaderGen5 *this)
{
  return 22;
}

void AGCLLVMDriverGPUGatherComputeShaderGen3::~AGCLLVMDriverGPUGatherComputeShaderGen3(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E90700;
  *((_QWORD *)this + 557) = &unk_1E7E90A60;
  *((_QWORD *)this + 561) = &unk_1E7E90B50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9BDA0;
  *((_QWORD *)this + 557) = &off_1E7E9C100;
  *((_QWORD *)this + 561) = &off_1E7E9C1F0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E90B78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4456));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E90700;
  *((_QWORD *)this + 557) = &unk_1E7E90A60;
  *((_QWORD *)this + 561) = &unk_1E7E90B50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9BDA0;
  *((_QWORD *)this + 557) = &off_1E7E9C100;
  *((_QWORD *)this + 561) = &off_1E7E9C1F0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E90B78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverGPUGatherComputeShaderGen3 *)((char *)this + 4456));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverGPUGatherComputeShaderGen3::setupShaderInputs(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverGPUGatherComputeShaderGen3::dumpType(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  return "gpu-gather-compute-driver-gen3";
}

void `virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderGen3::~AGCLLVMDriverGPUGatherComputeShaderGen3(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E90700;
  v1[557] = &unk_1E7E90A60;
  v1[561] = &unk_1E7E90B50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9BDA0;
  v1[557] = &off_1E7E9C100;
  v1[561] = &off_1E7E9C1F0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E90B78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E90700;
  v1[557] = &unk_1E7E90A60;
  v1[561] = &unk_1E7E90B50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9BDA0;
  v1[557] = &off_1E7E9C100;
  v1[561] = &off_1E7E9C1F0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E90B78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverGPUGatherComputeShaderGen3::dumpType(AGCLLVMDriverGPUGatherComputeShaderGen3 *this)
{
  return "gpu-gather-compute-driver-gen3";
}

void AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E90C00;
  *((_QWORD *)this + 557) = &unk_1E7E90F60;
  *((_QWORD *)this + 561) = &unk_1E7E91050;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9D280;
  *((_QWORD *)this + 557) = &off_1E7E9D5E0;
  *((_QWORD *)this + 561) = &off_1E7E9D6D0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E91078);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4456));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E90C00;
  *((_QWORD *)this + 557) = &unk_1E7E90F60;
  *((_QWORD *)this + 561) = &unk_1E7E91050;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9D280;
  *((_QWORD *)this + 557) = &off_1E7E9D5E0;
  *((_QWORD *)this + 561) = &off_1E7E9D6D0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E91078);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *)((char *)this + 4456));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::setupShaderWrapper(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v3 + 416))(v3, *((_QWORD *)this + 21), 0x100000002, 0);
  }
  return v2;
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::setupShaderInputs(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  return "geometry-pipeline-emulation-setup-shader";
}

void `virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E90C00;
  v1[557] = &unk_1E7E90F60;
  v1[561] = &unk_1E7E91050;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9D280;
  v1[557] = &off_1E7E9D5E0;
  v1[561] = &off_1E7E9D6D0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E91078);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E90C00;
  v1[557] = &unk_1E7E90F60;
  v1[561] = &unk_1E7E91050;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9D280;
  v1[557] = &off_1E7E9D5E0;
  v1[561] = &off_1E7E9D6D0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E91078);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader *this)
{
  return "geometry-pipeline-emulation-setup-shader";
}

void AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E91100;
  *((_QWORD *)this + 557) = &unk_1E7E91460;
  *((_QWORD *)this + 561) = &unk_1E7E91550;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9E760;
  *((_QWORD *)this + 557) = &off_1E7E9EAC0;
  *((_QWORD *)this + 561) = &off_1E7E9EBB0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E91578);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4456));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E91100;
  *((_QWORD *)this + 557) = &unk_1E7E91460;
  *((_QWORD *)this + 561) = &unk_1E7E91550;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9E760;
  *((_QWORD *)this + 557) = &off_1E7E9EAC0;
  *((_QWORD *)this + 561) = &off_1E7E9EBB0;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E91578);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *)((char *)this + 4456));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::setupShaderWrapper(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v3 + 416))(v3, *((_QWORD *)this + 21), 0x100000002, 0);
  }
  return v2;
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::setupShaderInputs(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  return "geometry-pipeline-emulation-post-os-shader";
}

void `virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E91100;
  v1[557] = &unk_1E7E91460;
  v1[561] = &unk_1E7E91550;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9E760;
  v1[557] = &off_1E7E9EAC0;
  v1[561] = &off_1E7E9EBB0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E91578);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E91100;
  v1[557] = &unk_1E7E91460;
  v1[561] = &unk_1E7E91550;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9E760;
  v1[557] = &off_1E7E9EAC0;
  v1[561] = &off_1E7E9EBB0;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E91578);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader *this)
{
  return "geometry-pipeline-emulation-post-os-shader";
}

void AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E91600;
  *((_QWORD *)this + 557) = &unk_1E7E91960;
  *((_QWORD *)this + 561) = &unk_1E7E91A50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9FC40;
  *((_QWORD *)this + 557) = &off_1E7E9FFA0;
  *((_QWORD *)this + 561) = &off_1E7EA0090;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E91A78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4456));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E91600;
  *((_QWORD *)this + 557) = &unk_1E7E91960;
  *((_QWORD *)this + 561) = &unk_1E7E91A50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7E9FC40;
  *((_QWORD *)this + 557) = &off_1E7E9FFA0;
  *((_QWORD *)this + 561) = &off_1E7EA0090;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E91A78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *)((char *)this + 4456));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::setupShaderWrapper(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v3 + 416))(v3, *((_QWORD *)this + 21), 0x100000002, 0);
  }
  return v2;
}

uint64_t AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::setupShaderInputs(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  return "geometry-pipeline-emulation-pre-ms-shader";
}

void `virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::~AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E91600;
  v1[557] = &unk_1E7E91960;
  v1[561] = &unk_1E7E91A50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9FC40;
  v1[557] = &off_1E7E9FFA0;
  v1[561] = &off_1E7EA0090;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E91A78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E91600;
  v1[557] = &unk_1E7E91960;
  v1[561] = &unk_1E7E91A50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7E9FC40;
  v1[557] = &off_1E7E9FFA0;
  v1[561] = &off_1E7EA0090;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E91A78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::dumpType(AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader *this)
{
  return "geometry-pipeline-emulation-pre-ms-shader";
}

void AGCLLVMDriverComputeProgressMarkerShaderGen3::~AGCLLVMDriverComputeProgressMarkerShaderGen3(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E92000;
  *((_QWORD *)this + 557) = &unk_1E7E92360;
  *((_QWORD *)this + 561) = &unk_1E7E92450;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7EA1120;
  *((_QWORD *)this + 557) = &off_1E7EA1480;
  *((_QWORD *)this + 561) = &off_1E7EA1570;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E92478);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4456));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E92000;
  *((_QWORD *)this + 557) = &unk_1E7E92360;
  *((_QWORD *)this + 561) = &unk_1E7E92450;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7EA1120;
  *((_QWORD *)this + 557) = &off_1E7EA1480;
  *((_QWORD *)this + 561) = &off_1E7EA1570;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E92478);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverComputeProgressMarkerShaderGen3 *)((char *)this + 4456));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverComputeProgressMarkerShaderGen3::setupShaderWrapper(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 416))(v3, *((_QWORD *)this + 21), 2, 0x100000000);
  }
  return v2;
}

uint64_t AGCLLVMDriverComputeProgressMarkerShaderGen3::setupShaderInputs(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverComputeProgressMarkerShaderGen3::dumpType(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  return "compute-progress-marker-driver-gen3";
}

void `virtual thunk to'AGCLLVMDriverComputeProgressMarkerShaderGen3::~AGCLLVMDriverComputeProgressMarkerShaderGen3(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E92000;
  v1[557] = &unk_1E7E92360;
  v1[561] = &unk_1E7E92450;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7EA1120;
  v1[557] = &off_1E7EA1480;
  v1[561] = &off_1E7EA1570;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E92478);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E92000;
  v1[557] = &unk_1E7E92360;
  v1[561] = &unk_1E7E92450;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7EA1120;
  v1[557] = &off_1E7EA1480;
  v1[561] = &off_1E7EA1570;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E92478);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 557));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverComputeProgressMarkerShaderGen3::dumpType(AGCLLVMDriverComputeProgressMarkerShaderGen3 *this)
{
  return "compute-progress-marker-driver-gen3";
}

void AGCLLVMDriverComputeControlFlowPredicateShaderGen3::~AGCLLVMDriverComputeControlFlowPredicateShaderGen3(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E92500;
  *((_QWORD *)this + 558) = &unk_1E7E92860;
  *((_QWORD *)this + 562) = &unk_1E7E92950;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7EA2600;
  *((_QWORD *)this + 558) = &off_1E7EA2960;
  *((_QWORD *)this + 562) = &off_1E7EA2A50;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E92978);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4464));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7E92500;
  *((_QWORD *)this + 558) = &unk_1E7E92860;
  *((_QWORD *)this + 562) = &unk_1E7E92950;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7EA2600;
  *((_QWORD *)this + 558) = &off_1E7EA2960;
  *((_QWORD *)this + 562) = &off_1E7EA2A50;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4392));
  v3 = *((_QWORD *)this + 547);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 544);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E92978);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + 4464));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverComputeControlFlowPredicateShaderGen3::setupShaderWrapper(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  uint64_t result;
  uint64_t v3;
  size_t v4;
  llvm::Function *v5;
  uint64_t v6;
  llvm::CmpInst **v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::Value *ICmp;
  llvm::Function *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Instruction *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  result = AGCLLVMUserObject::setupShaderWrapper(this);
  if ((_DWORD)result)
  {
    v3 = *((unsigned int *)this + 1114);
    v4 = strlen(off_1E7EB1340[v3]);
    v5 = (llvm::Function *)AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, (uint64_t)off_1E7EB1340[v3], v4, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 208), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
    v6 = (uint64_t)v5;
    if ((*((_WORD *)v5 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(v5);
    v7 = *(llvm::CmpInst ***)(v6 + 88);
    llvm::Value::setName();
    llvm::Value::setName();
    v23[0] = "entry";
    v24 = 259;
    operator new();
    v8 = llvm::BasicBlock::BasicBlock();
    v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v9 + 11) = v8;
    *((_QWORD *)v9 + 12) = v8 + 40;
    switch((int)v3)
    {
      case 0:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 32;
        goto LABEL_12;
      case 1:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 33;
        goto LABEL_12;
      case 2:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 34;
        goto LABEL_12;
      case 3:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 35;
        goto LABEL_12;
      case 4:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 36;
        goto LABEL_12;
      case 5:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 37;
LABEL_12:
        ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v10, v11, v7, (uint64_t)(v7 + 5), (uint64_t)v23);
        break;
      default:
        ICmp = 0;
        break;
    }
    llvm::IRBuilderBase::CreateRet((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp);
    result = llvm::Module::getFunction();
    if (result)
    {
      v13 = (llvm::Function *)result;
      v14 = *(_QWORD *)(result + 8);
      if (v14)
      {
        do
        {
          v15 = *(_QWORD *)(v14 + 8);
          v16 = *(llvm::Instruction **)(v14 + 24);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *)((char *)this+ *(_QWORD *)(*(_QWORD *)this - 24)+ 40), v16);
          v17 = (uint64_t *)((char *)v16 - 32 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF));
          v18 = *v17;
          v19 = v17[4];
          v25[0] = v18;
          v25[1] = v19;
          v20 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
          v24 = 257;
          llvm::IRBuilderBase::CreateCall((uint64_t)v20, *(_QWORD *)(v6 + 24), v6, (uint64_t)v25, 2, (uint64_t)v23);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v16);
          v14 = v15;
        }
        while (v15);
      }
      llvm::Function::eraseFromParent(v13);
      if (*((_BYTE *)this + 4461))
        v21 = 2;
      else
        v21 = 0x100000001;
      v22 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v22 + 416))(v22, *((_QWORD *)this + 21), v21, *((unsigned __int8 *)this + 4460) | 0x100000000);
      return 1;
    }
  }
  return result;
}

uint64_t AGCLLVMDriverComputeControlFlowPredicateShaderGen3::setupShaderInputs(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4424);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverComputeControlFlowPredicateShaderGen3::dumpType(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  return "compute-control-flow-predicate-gen3";
}

void `virtual thunk to'AGCLLVMDriverComputeControlFlowPredicateShaderGen3::~AGCLLVMDriverComputeControlFlowPredicateShaderGen3(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E92500;
  v1[558] = &unk_1E7E92860;
  v1[562] = &unk_1E7E92950;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7EA2600;
  v1[558] = &off_1E7EA2960;
  v1[562] = &off_1E7EA2A50;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E92978);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 558));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E92500;
  v1[558] = &unk_1E7E92860;
  v1[562] = &unk_1E7E92950;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 553));
  *v1 = &off_1E7EA2600;
  v1[558] = &off_1E7EA2960;
  v1[562] = &off_1E7EA2A50;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E92978);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 558));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverComputeControlFlowPredicateShaderGen3::dumpType(AGCLLVMDriverComputeControlFlowPredicateShaderGen3 *this)
{
  return "compute-control-flow-predicate-gen3";
}

uint64_t llvm::IRBuilderBase::CreateRet(llvm::IRBuilderBase *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[32];
  __int16 v8;

  v4 = *((_QWORD *)this + 8);
  v5 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x1CAA2C174](v5, v4, a2, 0);
  v8 = 257;
  return llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v5, (uint64_t)v7);
}

void AGCLLVMDriverComputeProgressMarkerShaderLegacy::~AGCLLVMDriverComputeProgressMarkerShaderLegacy(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  AGCLLVMObject *v2;

  *(_QWORD *)this = &off_1E7E92A00;
  v2 = (AGCLLVMDriverComputeProgressMarkerShaderLegacy *)((char *)this + 4824);
  *((_QWORD *)this + 603) = &unk_1E7E92D60;
  *((_QWORD *)this + 607) = &unk_1E7E92E50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E92E68);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;

  *(_QWORD *)this = &off_1E7E92A00;
  v2 = (AGCLLVMDriverComputeProgressMarkerShaderLegacy *)((char *)this + 4824);
  *((_QWORD *)this + 603) = &unk_1E7E92D60;
  *((_QWORD *)this + 607) = &unk_1E7E92E50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E92E68);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverComputeProgressMarkerShaderLegacy::setupShaderWrapper(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = AGCLLVMUserObject::setupShaderWrapper(this);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 416))(v3, *((_QWORD *)this + 21), 0x100000002, 0x100000000);
  }
  return v2;
}

uint64_t AGCLLVMDriverComputeProgressMarkerShaderLegacy::setupShaderInputs(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4792);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverComputeProgressMarkerShaderLegacy::dumpType(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  return "compute-progress-marker-driver-legacy";
}

void `virtual thunk to'AGCLLVMDriverComputeProgressMarkerShaderLegacy::~AGCLLVMDriverComputeProgressMarkerShaderLegacy(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E92A00;
  v1[603] = &unk_1E7E92D60;
  v1[607] = &unk_1E7E92E50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E92E68);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
}

{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E92A00;
  v1[603] = &unk_1E7E92D60;
  v1[607] = &unk_1E7E92E50;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E92E68);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 603));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverComputeProgressMarkerShaderLegacy::dumpType(AGCLLVMDriverComputeProgressMarkerShaderLegacy *this)
{
  return "compute-progress-marker-driver-legacy";
}

void AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::~AGCLLVMDriverComputeControlFlowPredicateShaderLegacy(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  AGCLLVMObject *v2;

  *(_QWORD *)this = &off_1E7E92F00;
  v2 = (AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *)((char *)this + 4832);
  *((_QWORD *)this + 604) = &unk_1E7E93260;
  *((_QWORD *)this + 608) = &unk_1E7E93350;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E93368);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;

  *(_QWORD *)this = &off_1E7E92F00;
  v2 = (AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *)((char *)this + 4832);
  *((_QWORD *)this + 604) = &unk_1E7E93260;
  *((_QWORD *)this + 608) = &unk_1E7E93350;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4792);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E93368);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::setupShaderWrapper(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  uint64_t result;
  uint64_t v3;
  size_t v4;
  llvm::Function *v5;
  uint64_t v6;
  llvm::CmpInst **v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  llvm::Value *ICmp;
  llvm::Function *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Instruction *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x1E0C80C00];
  result = AGCLLVMUserObject::setupShaderWrapper(this);
  if ((_DWORD)result)
  {
    v3 = *((unsigned int *)this + 1206);
    v4 = strlen(off_1E7EB1340[v3]);
    v5 = (llvm::Function *)AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, (uint64_t)off_1E7EB1340[v3], v4, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 208), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
    v6 = (uint64_t)v5;
    if ((*((_WORD *)v5 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(v5);
    v7 = *(llvm::CmpInst ***)(v6 + 88);
    llvm::Value::setName();
    llvm::Value::setName();
    v23[0] = "entry";
    v24 = 259;
    operator new();
    v8 = llvm::BasicBlock::BasicBlock();
    v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v9 + 11) = v8;
    *((_QWORD *)v9 + 12) = v8 + 40;
    switch((int)v3)
    {
      case 0:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 32;
        goto LABEL_12;
      case 1:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 33;
        goto LABEL_12;
      case 2:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 34;
        goto LABEL_12;
      case 3:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 35;
        goto LABEL_12;
      case 4:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 36;
        goto LABEL_12;
      case 5:
        v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v24 = 257;
        v11 = 37;
LABEL_12:
        ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v10, v11, v7, (uint64_t)(v7 + 5), (uint64_t)v23);
        break;
      default:
        ICmp = 0;
        break;
    }
    llvm::IRBuilderBase::CreateRet((AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp);
    result = llvm::Module::getFunction();
    if (result)
    {
      v13 = (llvm::Function *)result;
      v14 = *(_QWORD *)(result + 8);
      if (v14)
      {
        do
        {
          v15 = *(_QWORD *)(v14 + 8);
          v16 = *(llvm::Instruction **)(v14 + 24);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *)((char *)this+ *(_QWORD *)(*(_QWORD *)this - 24)+ 40), v16);
          v17 = (uint64_t *)((char *)v16 - 32 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF));
          v18 = *v17;
          v19 = v17[4];
          v25[0] = v18;
          v25[1] = v19;
          v20 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
          v24 = 257;
          llvm::IRBuilderBase::CreateCall((uint64_t)v20, *(_QWORD *)(v6 + 24), v6, (uint64_t)v25, 2, (uint64_t)v23);
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent(v16);
          v14 = v15;
        }
        while (v15);
      }
      llvm::Function::eraseFromParent(v13);
      if (*((_BYTE *)this + 4829))
        v21 = 0x100000002;
      else
        v21 = 0x100000001;
      v22 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v22 + 416))(v22, *((_QWORD *)this + 21), v21, *((unsigned __int8 *)this + 4828) | 0x100000000);
      return 1;
    }
  }
  return result;
}

uint64_t AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::setupShaderInputs(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  AGCLLVMUserObject::remapDriverBindpoint((uint64_t)this, (uint64_t)this + 4792);
  return AGCLLVMUserComputeKernelBase::setupShaderInputs(this);
}

const char *AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::dumpType(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  return "compute-control-flow-predicate-legacy";
}

void `virtual thunk to'AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::~AGCLLVMDriverComputeControlFlowPredicateShaderLegacy(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E92F00;
  v1[604] = &unk_1E7E93260;
  v1[608] = &unk_1E7E93350;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E93368);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 604));
}

{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7E92F00;
  v1[604] = &unk_1E7E93260;
  v1[608] = &unk_1E7E93350;
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)(v1 + 599));
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E93368);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 604));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::dumpType(AGCLLVMDriverComputeControlFlowPredicateShaderLegacy *this)
{
  return "compute-control-flow-predicate-legacy";
}

uint64_t AGCLLVMUserComputeKernelBase::AGCLLVMUserComputeKernelBase(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t Function;
  BOOL v10;
  uint64_t v11;

  v7 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, a2 + 1, a3, "air.kernel", (uint64_t)&default_cs, 0, 0);
  v8 = *a2;
  *v7 = *a2;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(v8 - 24)) = a2[7];
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 32) = a2[8];
  v7[540] = a4;
  *((_BYTE *)v7 + 4328) = (*(_DWORD *)(a4 + 16) & 1) == 0;
  *((_BYTE *)v7 + 3712) = *(_BYTE *)(a4 + 13) & 1;
  *((_BYTE *)v7 + 3713) = (*(_DWORD *)(a4 + 12) & 0x200) != 0;
  AGCLLVMUserShader::enableStatistics((uint64_t)v7, *(_DWORD *)(a4 + 12) & 1, (*(_DWORD *)(a4 + 12) >> 1) & 1);
  *(_BYTE *)(a1 + 18) = (*(_BYTE *)(a4 + 12) & 8) != 0;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 2760) = (*(_DWORD *)(a4 + 12) & 0x4000000) != 0;
  *(_QWORD *)(a1 + 3304) = *(_QWORD *)a4;
  *(_DWORD *)(a1 + 4332) = AGCLLVMUserShader::parseMaxTotalThreadsPerThreadgroup((AGCLLVMUserShader *)a1);
  *(_BYTE *)(a1 + 20) = (*(_BYTE *)(a4 + 12) & 4) != 0;
  Function = llvm::Module::getFunction();
  if (Function)
    v10 = *(_QWORD *)(Function + 8) != 0;
  else
    v10 = 0;
  v11 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  *(_BYTE *)(v11 + 456) = v10;
  *(_QWORD *)(v11 + 3280) = Function;
  *(_BYTE *)(a1 + 19) = (*(_DWORD *)(a4 + 16) & 0x80) != 0;
  return a1;
}

uint64_t AGCLLVMUserComputeKernelLegacy::AGCLLVMUserComputeKernelLegacy(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  result = AGCLLVMUserComputeKernelBase::AGCLLVMUserComputeKernelBase(a1, a2 + 1, a3, a4);
  v6 = *a2;
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + *(_QWORD *)(v6 - 24)) = a2[10];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result - 24) + result + 32) = a2[11];
  *(_QWORD *)(result + 4336) = result + 4352;
  *(_QWORD *)(result + 4344) = 0x200000000;
  v7 = 4376;
  do
  {
    v8 = (_QWORD *)(result + v7);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = 4;
    v9 = result + v7 + 24;
    v7 += 24;
  }
  while (v9 != result + 4448);
  *(_QWORD *)(result + 4448) = 4;
  *(_QWORD *)(result + 4464) = 0;
  *(_QWORD *)(result + 4456) = 0;
  v10 = 4472;
  do
  {
    v11 = (_QWORD *)(result + v10);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 4;
    v12 = result + v10 + 24;
    v10 += 24;
  }
  while (v12 != result + 4544);
  *(_QWORD *)(result + 4544) = 4;
  *(_QWORD *)(result + 4560) = 0;
  *(_QWORD *)(result + 4552) = 0;
  *(_QWORD *)(result + 4568) = 4;
  *(_QWORD *)(result + 4584) = 0;
  *(_QWORD *)(result + 4576) = 0;
  *(_QWORD *)(result + 4592) = 4;
  *(_QWORD *)(result + 4608) = 0;
  *(_QWORD *)(result + 4600) = 0;
  *(_QWORD *)(result + 4616) = 4;
  *(_QWORD *)(result + 4632) = 0;
  v13 = 4640;
  *(_QWORD *)(result + 4624) = 0;
  do
  {
    v14 = (_QWORD *)(result + v13);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = 4;
    v15 = result + v13 + 24;
    v13 += 24;
  }
  while (v15 != result + 4712);
  *(_QWORD *)(result + 4712) = 4;
  *(_QWORD *)(result + 4728) = 0;
  *(_QWORD *)(result + 4720) = 0;
  *(_QWORD *)(result + 4736) = 4;
  *(_QWORD *)(result + 4752) = 0;
  *(_QWORD *)(result + 4744) = 0;
  *(_QWORD *)(result + 4760) = 4;
  *(_QWORD *)(result + 4776) = 0;
  *(_QWORD *)(result + 4768) = 0;
  *(_BYTE *)(result + 4784) = 0;
  return result;
}

void AGCLLVMDriverExecuteIndirectComputeShaderLegacy::~AGCLLVMDriverExecuteIndirectComputeShaderLegacy(AGCLLVMDriverExecuteIndirectComputeShaderLegacy *this)
{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8D940);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8D940);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverExecuteIndirectComputeShaderLegacy::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderLegacy *this)
{
  return "execute-indirect-compute-driver-legacy";
}

void `virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderLegacy::~AGCLLVMDriverExecuteIndirectComputeShaderLegacy(AGCLLVMDriverExecuteIndirectComputeShaderLegacy *this)
{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMDriverExecuteIndirectComputeShaderLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), (uint64_t *)&off_1E7E8D940);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E8D940);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderLegacy::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderLegacy *this)
{
  return "execute-indirect-compute-driver-legacy";
}

void AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *this)
{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8DE40);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy(this, (uint64_t *)&off_1E7E8DE40);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *this)
{
  return "execute-indirect-range-exec-compute-driver-legacy";
}

void `virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *this)
{
  uint64_t v1;

  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), (uint64_t *)&off_1E7E8DE40);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMUserComputeKernelLegacy::~AGCLLVMUserComputeKernelLegacy((AGCLLVMUserComputeKernelLegacy *)v1, (uint64_t *)&off_1E7E8DE40);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4792));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy *this)
{
  return "execute-indirect-range-exec-compute-driver-legacy";
}

uint64_t AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  BOOL v7;
  uint64_t v8;

  result = AGCLLVMUserComputeKernelBase::AGCLLVMUserComputeKernelBase(a1, a2 + 1, a3, a4);
  v7 = 0;
  v8 = *a2;
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + *(_QWORD *)(v8 - 24)) = a2[10];
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result - 24) + result + 32) = a2[11];
  *(_QWORD *)(result + 4336) = 4;
  *(_QWORD *)(result + 4352) = 0;
  *(_QWORD *)(result + 4344) = 0;
  *(_QWORD *)(result + 4360) = 4;
  *(_QWORD *)(result + 4376) = 0;
  *(_QWORD *)(result + 4368) = 0;
  *(_DWORD *)(result + 4384) = 0;
  *(_QWORD *)(result + 4392) = 4;
  *(_QWORD *)(result + 4408) = 0;
  *(_QWORD *)(result + 4400) = 0;
  if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    v7 = (*(_BYTE *)(a4 + 13) & 2) == 0;
  *(_BYTE *)(result + 4416) = v7;
  return result;
}

uint64_t AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  BOOL v7;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 4424), a2, *a3);
  AGCLLVMUserComputeKernelBase::AGCLLVMUserComputeKernelBase(a1, (uint64_t *)off_1E7E8E338, (uint64_t)a3, a4);
  v7 = 0;
  *(_QWORD *)(a1 + 4424) = &unk_1E7E8E238;
  *(_QWORD *)a1 = &off_1E7E8DED8;
  *(_QWORD *)(a1 + 4456) = &unk_1E7E8E328;
  *(_QWORD *)(a1 + 4336) = 4;
  *(_QWORD *)(a1 + 4352) = 0;
  *(_QWORD *)(a1 + 4344) = 0;
  *(_QWORD *)(a1 + 4360) = 4;
  *(_QWORD *)(a1 + 4376) = 0;
  *(_QWORD *)(a1 + 4368) = 0;
  *(_DWORD *)(a1 + 4384) = 0;
  *(_QWORD *)(a1 + 4392) = 4;
  *(_QWORD *)(a1 + 4408) = 0;
  *(_QWORD *)(a1 + 4400) = 0;
  if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    v7 = (*(_BYTE *)(a4 + 13) & 2) == 0;
  *(_BYTE *)(a1 + 4416) = v7;
  return a1;
}

char *AGCLLVMDriverTGSizeOptimizationShader::create(AGCLLVMCtx *a1, uint64_t a2)
{
  void **v4;
  CFIndex v5;
  llvm::LLVMContext **Bitcode;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;

  std::string::basic_string[abi:nn180100]<0>(__p, "tg_size_opt");
  if ((v14 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v5 = v14;
  else
    v5 = (CFIndex)__p[1];
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode(a2, (const UInt8 *)v4, v5, 0);
  v7 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v7 + 557), a1, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v7, (uint64_t *)&off_1E7E8ED40, (uint64_t)Bitcode, (uint64_t)&pluginCreateLLVMObject(AGCLLVMCtx &,_AGCStreamToken,llvm::LLVMContext &,llvm::Module *,CompilationState &)::computeCS);
  *v7 = &off_1E7E8E8D8;
  v7[557] = &unk_1E7E8EC38;
  v7[561] = &unk_1E7E8ED28;
  *(_OWORD *)(v7 + 553) = 0u;
  v7[555] = 0x2000000000;
  LODWORD(Bitcode) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7[607] + 824) + 384))(*(_QWORD *)(v7[607] + 824));
  v8 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v7 + 553), "inputs", 6uLL);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v8 + 20) = 0;
  v9 = *(_QWORD *)(*(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 392))(v9);
  v10 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v7 + 553), "count", 5uLL);
  *(_QWORD *)(v10 + 8) = 1;
  *(_DWORD *)(v10 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v10 + 20) = 0;
  v11 = *(_QWORD *)(*v7 - 24);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  return (char *)v7 + v11;
}

void AGCLLVMDriverSparseShaders::~AGCLLVMDriverSparseShaders(AGCLLVMDriverSparseShaders *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EAAF40;
  *((_QWORD *)this + 554) = &off_1E7EAB2A0;
  *((_QWORD *)this + 558) = &off_1E7EAB390;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverSparseShaders *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverSparseShaders *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverSparseShaders *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8F250);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverSparseShaders *)((char *)this + 4432));
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EAAF40;
  *((_QWORD *)this + 554) = &off_1E7EAB2A0;
  *((_QWORD *)this + 558) = &off_1E7EAB390;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverSparseShaders *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverSparseShaders *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverSparseShaders *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8F250);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverSparseShaders *)((char *)this + 4432));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverSparseShaders::dumpType(AGCLLVMDriverSparseShaders *this)
{
  return *((_QWORD *)this + 553);
}

void `virtual thunk to'AGCLLVMDriverSparseShaders::~AGCLLVMDriverSparseShaders(AGCLLVMDriverSparseShaders *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EAAF40;
  v1[554] = &off_1E7EAB2A0;
  v1[558] = &off_1E7EAB390;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8F250);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 554));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EAAF40;
  v1[554] = &off_1E7EAB2A0;
  v1[558] = &off_1E7EAB390;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8F250);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 554));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t `virtual thunk to'AGCLLVMDriverSparseShaders::dumpType(AGCLLVMDriverSparseShaders *this)
{
  return *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72) + 4424);
}

_QWORD *AGCLLVMDriverSparseShaders::create(AGCLLVMDriverSparseShaders *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  char **v9;
  const UInt8 *v10;
  size_t v11;
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v13;
  _QWORD *v14;

  v5 = *(_DWORD *)(*((_QWORD *)this + 4) + 28);
  v6 = v5 > 0x22;
  v7 = (1 << v5) & 0x581000000;
  if (v6 || v7 == 0)
    v9 = off_1E7E8F2E0;
  else
    v9 = off_1E7E8F2C0;
  v10 = (const UInt8 *)v9[a3];
  if (v10)
    v11 = strlen(v9[a3]);
  else
    v11 = 0;
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, v10, v11, 1);
  if ((v13 & 1) == 0
  {
    AGCLLVMDriverSparseShaders::create(AGCLLVMCtx &,llvm::LLVMContext &,unsigned int)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9098 = 0;
    qword_1EF8E90A0 = 0;
  }
  v14 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v14 + 554), this, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v14, (uint64_t *)&off_1E7E8F240, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverSparseShaders::create(AGCLLVMCtx &,llvm::LLVMContext &,unsigned int)::computeCS);
  *v14 = &off_1E7E8EDD8;
  v14[554] = &unk_1E7E8F138;
  v14[558] = &unk_1E7E8F228;
  v14[553] = v10;
  return v14 + 554;
}

void AGCLLVMDriverFastClearShaders::~AGCLLVMDriverFastClearShaders(AGCLLVMDriverFastClearShaders *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EAC420;
  *((_QWORD *)this + 554) = &off_1E7EAC780;
  *((_QWORD *)this + 558) = &off_1E7EAC870;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverFastClearShaders *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverFastClearShaders *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverFastClearShaders *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8F790);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverFastClearShaders *)((char *)this + 4432));
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EAC420;
  *((_QWORD *)this + 554) = &off_1E7EAC780;
  *((_QWORD *)this + 558) = &off_1E7EAC870;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverFastClearShaders *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverFastClearShaders *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverFastClearShaders *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8F790);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverFastClearShaders *)((char *)this + 4432));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMDriverFastClearShaders::dumpType(AGCLLVMDriverFastClearShaders *this)
{
  return *((_QWORD *)this + 553);
}

void `virtual thunk to'AGCLLVMDriverFastClearShaders::~AGCLLVMDriverFastClearShaders(AGCLLVMDriverFastClearShaders *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EAC420;
  v1[554] = &off_1E7EAC780;
  v1[558] = &off_1E7EAC870;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8F790);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 554));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EAC420;
  v1[554] = &off_1E7EAC780;
  v1[558] = &off_1E7EAC870;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8F790);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 554));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t `virtual thunk to'AGCLLVMDriverFastClearShaders::dumpType(AGCLLVMDriverFastClearShaders *this)
{
  return *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72) + 4424);
}

_QWORD *AGCLLVMDriverFastClearShaders::create(AGCLLVMCtx *a1, uint64_t a2, unsigned int a3)
{
  const UInt8 *v5;
  int v6;
  const char *v7;
  size_t v8;
  int v9;
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v11;
  _QWORD *v12;

  if ((a3 & 3) == 1)
  {
    if ((a3 & 4) != 0)
    {
      v7 = "blit_fast_clear_gen1_meta";
    }
    else if ((a3 & 0x800) != 0)
    {
      v7 = "blit_fast_clear_gen1_meta_copy";
    }
    else
    {
      v5 = 0;
      v9 = (a3 >> 3);
      v7 = "blit_fast_clear_gen1_1";
      v8 = 0;
      switch(v9)
      {
        case 1:
          goto LABEL_16;
        case 2:
          v7 = "blit_fast_clear_gen1_2";
          goto LABEL_16;
        case 3:
        case 5:
        case 6:
        case 7:
          goto LABEL_17;
        case 4:
          v7 = "blit_fast_clear_gen1_4";
          goto LABEL_16;
        case 8:
          v7 = "blit_fast_clear_gen1_8";
          goto LABEL_16;
        default:
          v8 = 0;
          if (v9 != 16)
            goto LABEL_17;
          v7 = "blit_fast_clear_gen1_16";
          break;
      }
    }
    goto LABEL_16;
  }
  if ((a3 & 3) == 2)
  {
    if ((a3 & 4) != 0)
    {
      v7 = "blit_fast_clear_gen2_meta";
    }
    else if ((a3 & 0x800) != 0)
    {
      v7 = "blit_fast_clear_gen2_meta_copy";
    }
    else
    {
      v5 = 0;
      v6 = (a3 >> 3);
      v7 = "blit_fast_clear_gen2_1";
      v8 = 0;
      switch(v6)
      {
        case 1:
          break;
        case 2:
          v7 = "blit_fast_clear_gen2_2";
          break;
        case 3:
        case 6:
        case 7:
          goto LABEL_17;
        case 4:
          v7 = "blit_fast_clear_gen2_4";
          break;
        case 5:
          v7 = "blit_fast_clear_gen2_5";
          break;
        case 8:
          v7 = "blit_fast_clear_gen2_8";
          break;
        default:
          v8 = 0;
          if (v6 != 16)
            goto LABEL_17;
          v7 = "blit_fast_clear_gen2_16";
          break;
      }
    }
LABEL_16:
    v8 = strlen(v7);
    v5 = (const UInt8 *)v7;
    goto LABEL_17;
  }
  v5 = 0;
  v8 = 0;
LABEL_17:
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode(a2, v5, v8, 1);
  if ((v11 & 1) == 0
  {
    AGCLLVMDriverFastClearShaders::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBlitFastClearState const*)::computeCS = 0;
    *(_QWORD *)algn_1EF8E90B8 = 0;
    qword_1EF8E90C0 = 0;
  }
  v12 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v12 + 554), a1, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v12, (uint64_t *)&off_1E7E8F780, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverFastClearShaders::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBlitFastClearState const*)::computeCS);
  *v12 = &off_1E7E8F318;
  v12[554] = &unk_1E7E8F678;
  v12[558] = &unk_1E7E8F768;
  v12[553] = v5;
  return v12 + 554;
}

void AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EAD900;
  *((_QWORD *)this + 553) = &off_1E7EADC60;
  *((_QWORD *)this + 557) = &off_1E7EADD50;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8FC90);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *)((char *)this + 4424));
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EAD900;
  *((_QWORD *)this + 553) = &off_1E7EADC60;
  *((_QWORD *)this + 557) = &off_1E7EADD50;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E8FC90);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *)((char *)this + 4424));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *this)
{
  return "execute-indirect-range-exec-compute-driver-g10";
}

void `virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::~AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EAD900;
  v1[553] = &off_1E7EADC60;
  v1[557] = &off_1E7EADD50;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8FC90);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 553));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EAD900;
  v1[553] = &off_1E7EADC60;
  v1[557] = &off_1E7EADD50;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E8FC90);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 553));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::dumpType(AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10 *this)
{
  return "execute-indirect-range-exec-compute-driver-g10";
}

_QWORD *AGCLLVMDriverExecuteIndirectComputeShaderG10::create(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  int v5;
  const char *v6;
  void **v7;
  CFIndex v8;
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v10;
  _QWORD *v11;
  void *__p[2];
  unsigned __int8 v14;

  std::string::basic_string[abi:nn180100]<0>(__p, (char *)&unk_1C3E4D9BB);
  v5 = *(_DWORD *)(*((_QWORD *)this + 4) + 28);
  if (v5 > 11)
  {
    if (v5 == 12)
    {
      v6 = "cei_esl_gen_gen3";
      goto LABEL_9;
    }
    if (v5 != 23)
      goto LABEL_10;
  }
  else if ((v5 - 9) >= 3)
  {
    if (v5 != 8)
      goto LABEL_10;
    v6 = "cei_esl_gen_gen1";
    goto LABEL_9;
  }
  v6 = "cei_esl_gen_gen2";
LABEL_9:
  MEMORY[0x1CAA2D494](__p, v6);
LABEL_10:
  if ((v14 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v8 = v14;
  else
    v8 = (CFIndex)__p[1];
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v7, v8, 0);
  if ((v10 & 1) == 0
  {
    AGCLLVMDriverExecuteIndirectComputeShaderG10::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E91B8 = 0;
    qword_1EF8E91C0 = 0;
  }
  v11 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 553), this, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v11, (uint64_t *)&off_1E7E91F68, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverExecuteIndirectComputeShaderG10::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v11 = &off_1E7E91B00;
  v11[553] = &unk_1E7E91E60;
  v11[557] = &unk_1E7E91F50;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  return v11 + 553;
}

void AGCLLVMDriverExecuteIndirectComputeShaderG10::~AGCLLVMDriverExecuteIndirectComputeShaderG10(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EAEDE0;
  *((_QWORD *)this + 553) = &off_1E7EAF140;
  *((_QWORD *)this + 557) = &off_1E7EAF230;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderG10 *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderG10 *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderG10 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E91F78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverExecuteIndirectComputeShaderG10 *)((char *)this + 4424));
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7EAEDE0;
  *((_QWORD *)this + 553) = &off_1E7EAF140;
  *((_QWORD *)this + 557) = &off_1E7EAF230;
  v2 = *((_QWORD *)this + 551);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderG10 *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderG10 *)((char *)this + 4360));
  v6 = *((_QWORD *)this + 544);
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverExecuteIndirectComputeShaderG10 *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E91F78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverExecuteIndirectComputeShaderG10 *)((char *)this + 4424));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverExecuteIndirectComputeShaderG10::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this)
{
  return "execute-indirect-compute-driver-g10";
}

void `virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderG10::~AGCLLVMDriverExecuteIndirectComputeShaderG10(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EAEDE0;
  v1[553] = &off_1E7EAF140;
  v1[557] = &off_1E7EAF230;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E91F78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 553));
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EAEDE0;
  v1[553] = &off_1E7EAF140;
  v1[557] = &off_1E7EAF230;
  v2 = v1[551];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 549));
  v4 = v1[547];
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 545));
  v6 = v1[544];
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 542));
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7E91F78);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 553));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMDriverExecuteIndirectComputeShaderG10::dumpType(AGCLLVMDriverExecuteIndirectComputeShaderG10 *this)
{
  return "execute-indirect-compute-driver-g10";
}

const char *getComputeControlFlowBitcodeFileName(uint64_t a1)
{
  int v1;
  const char *result;
  int v4;
  const char *v5;

  v1 = *(_DWORD *)(a1 + 28) - 4;
  result = "compute_control_flow_predicate_g5";
  switch(v1)
  {
    case 0:
      return result;
    case 2:
    case 3:
      result = "compute_control_flow_predicate_g9";
      break;
    case 4:
      result = "compute_control_flow_predicate_g10";
      break;
    case 5:
    case 6:
    case 7:
    case 19:
      result = "compute_control_flow_predicate_g11";
      break;
    case 8:
      result = "compute_control_flow_predicate_g12";
      break;
    case 10:
    case 12:
    case 21:
    case 22:
    case 23:
      result = "compute_control_flow_predicate_g13";
      break;
    case 13:
    case 14:
      result = "compute_control_flow_predicate_g14";
      break;
    case 15:
    case 16:
    case 17:
      result = "compute_control_flow_predicate_g14x";
      break;
    case 18:
      result = "compute_control_flow_predicate_g15p_b0";
      break;
    case 20:
      v4 = HIWORD(*(_DWORD *)(a1 + 24));
      v5 = "compute_control_flow_predicate_g15g_a0";
      if (v4 == 3)
        v5 = "compute_control_flow_predicate_g15g_b0";
      if (v4 == 5)
        result = "compute_control_flow_predicate_g15g_c0";
      else
        result = v5;
      break;
    case 27:
      if (*(unsigned __int16 *)(a1 + 26) - 3 >= 2)
        result = "compute_control_flow_predicate_g16p_a0";
      else
        result = "compute_control_flow_predicate_g16p_b0";
      break;
    case 28:
    case 30:
      result = "compute_control_flow_predicate_hal200";
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void AGCLLVMDriverBVHBuilderComputeShader::~AGCLLVMDriverBVHBuilderComputeShader(AGCLLVMDriverBVHBuilderComputeShader *this)
{
  uint64_t v1;

  AGCLLVMDriverBVHBuilderComputeShader::~AGCLLVMDriverBVHBuilderComputeShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4544));
}

{
  uint64_t v1;

  AGCLLVMDriverBVHBuilderComputeShader::~AGCLLVMDriverBVHBuilderComputeShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4544));
  JUMPOUT(0x1CAA2D68CLL);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7E93840;
  *((_QWORD *)this + 568) = &unk_1E7E93BA0;
  *((_QWORD *)this + 572) = &unk_1E7E93C90;
  v2 = (char *)*((_QWORD *)this + 557);
  if (v2 != (char *)this + 4480)
    free(v2);
  llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::~StringMap((uint64_t)this + 4424);
  *(_QWORD *)this = &off_1E7EB02C0;
  *((_QWORD *)this + 568) = &off_1E7EB0620;
  *((_QWORD *)this + 572) = &off_1E7EB0710;
  v3 = *((_QWORD *)this + 551);
  if (v3 != -8192 && v3 != -4096 && v3)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverBVHBuilderComputeShader *)((char *)this + 4392));
  v4 = *((_QWORD *)this + 547);
  if (v4 != -8192 && v4 != -4096 && v4)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverBVHBuilderComputeShader *)((char *)this + 4360));
  v5 = *((_QWORD *)this + 544);
  if (v5 != -8192 && v5 != -4096 && v5)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMDriverBVHBuilderComputeShader *)((char *)this + 4336));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7E93CB8);
}

uint64_t AGCLLVMDriverBVHBuilderComputeShader::dumpType(AGCLLVMDriverBVHBuilderComputeShader *this)
{
  llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)this + 4456, 0);
  --*((_QWORD *)this + 558);
  return *((_QWORD *)this + 557);
}

void `virtual thunk to'AGCLLVMDriverBVHBuilderComputeShader::~AGCLLVMDriverBVHBuilderComputeShader(AGCLLVMDriverBVHBuilderComputeShader *this)
{
  uint64_t v1;

  AGCLLVMDriverBVHBuilderComputeShader::~AGCLLVMDriverBVHBuilderComputeShader((AGCLLVMDriverBVHBuilderComputeShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)));
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4544));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMDriverBVHBuilderComputeShader::~AGCLLVMDriverBVHBuilderComputeShader((AGCLLVMDriverBVHBuilderComputeShader *)v1);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4544));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t `virtual thunk to'AGCLLVMDriverBVHBuilderComputeShader::dumpType(AGCLLVMDriverBVHBuilderComputeShader *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 72);
  llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)(v1 + 4456), 0);
  --*((_QWORD *)v1 + 558);
  return *((_QWORD *)v1 + 557);
}

void AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t v1;

  AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4384));
}

{
  uint64_t v1;

  AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4384));
  JUMPOUT(0x1CAA2D68CLL);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7EB13B8;
  *((_QWORD *)this + 548) = &unk_1E7EB16E0;
  *((_QWORD *)this + 552) = &unk_1E7EB17D0;
  v2 = *((_QWORD *)this + 547);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserDynamicLibrary *)((char *)this + 4360));
  v4 = *((_QWORD *)this + 542);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserDynamicLibrary *)((char *)this + 4320));
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7EB17E0);
}

uint64_t AGCLLVMUserDynamicLibrary::getMaxTotalThreadsPerThreadgroup(AGCLLVMUserDynamicLibrary *this)
{
  return *((unsigned int *)this + 1086);
}

void AGCLLVMUserDynamicLibrary::simplifyGenericIR(AGCLLVMUserDynamicLibrary *this)
{
  llvm::Module *v2;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::NamedMDNode *v10;
  int NumOperands;
  int v12;
  int i;
  uint64_t Operand;
  uint64_t v15;
  unsigned __int8 *v16;
  llvm::Constant *v17;
  llvm::Constant *v18;
  char v19;
  const char *v20;
  __int16 v21;

  v2 = *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v20 = "air.visible_function_references";
  v21 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)&v20);
  if (NamedMetadata)
  {
    v10 = NamedMetadata;
    NumOperands = llvm::NamedMDNode::getNumOperands(NamedMetadata);
    if (NumOperands)
    {
      v12 = NumOperands;
      for (i = 0; i != v12; ++i)
      {
        Operand = llvm::NamedMDNode::getOperand(v10);
        if (isStringMDNode(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8)), "air.visible_function_reference"))
        {
          v15 = Operand - 8 * *(unsigned int *)(Operand + 8);
          v16 = *(unsigned __int8 **)(v15 + 8);
          if (v16 && *v16 - 1 <= 1)
          {
            v17 = (llvm::Constant *)*((_QWORD *)v16 + 16);
            if (*((_BYTE *)v17 + 16))
              v18 = 0;
            else
              v18 = v17;
          }
          else
          {
            v18 = 0;
          }
          llvm::MDString::getString(*(llvm::MDString **)(v15 + 16));
          if (llvm::Module::getFunction())
          {
            llvm::ConstantExpr::getBitCast();
            llvm::Value::replaceAllUsesWith();
            llvm::Constant::removeDeadConstantUsers(v18);
            if (!*((_QWORD *)v18 + 1))
              llvm::Function::eraseFromParent(v18);
          }
        }
      }
    }
    llvm::NamedMDNode::clearOperands(v10);
    llvm::NamedMDNode::eraseFromParent(v10);
  }
  SimplifyGenericIR(*(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 378), v4, v5, v6, v7, v8, v9, v19);
}

uint64_t AGCLLVMUserDynamicLibrary::initCompile(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t v2;

  v2 = validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1086), 0, *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 864), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (unsigned int *)this + 1086);
  if ((_DWORD)v2)
    AGCLLVMUserObject::initCompile(this);
  return v2;
}

uint64_t AGCLLVMUserDynamicLibrary::wrapperFunctionType(AGCLLVMUserDynamicLibrary *this)
{
  return 0;
}

uint64_t AGCLLVMUserDynamicLibrary::wrapperCallingConvention(AGCLLVMUserDynamicLibrary *this)
{
  return 107;
}

uint64_t AGCLLVMUserDynamicLibrary::setupShaderWrapper(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::setupShaderInputs(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t Function;
  uint64_t v3;
  llvm::Instruction *v4;
  uint64_t v5;
  int v6;
  char *v7;
  llvm::IRBuilderBase *v8;
  uint64_t DylibBaseGetterFunc;
  uint64_t v10;
  char *v11;
  llvm::Type **v12;
  uint64_t v13;
  llvm::Type *v14;
  llvm::Value *PointerCast;
  uint64_t v16;
  char *v17;
  uint64_t AlignedLoad;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  llvm::CmpInst **v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Function *v26;
  uint64_t FragmentBuiltinEncoderStateType;
  uint64_t v28;
  uint64_t v29;
  llvm::Instruction *v30;
  uint64_t PerEncoderIndirectionTableGlobal;
  llvm::Type **v32;
  uint64_t v33;
  uint64_t *v34;
  llvm::Type *v35;
  uint64_t *v36;
  uint64_t v37;
  llvm::Type **GEP;
  llvm::IRBuilderBase *v39;
  llvm::Type *v40;
  uint64_t *v41;
  llvm::Value *v42;
  uint64_t v43;
  uint64_t *v44;
  llvm::IRBuilderBase *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *Mul;
  uint64_t *v49;
  uint64_t v50;
  llvm::Type **v51;
  llvm::Value *v52;
  llvm::Type *v53;
  llvm::Value *v54;
  char *v55;
  llvm::IRBuilderBase *v56;
  llvm::Value *v57;
  llvm::Value *InsertElement;
  llvm::IRBuilderBase *v59;
  llvm::Value *v60;
  uint64_t Add;
  char *v62;
  uint64_t v63;
  uint64_t *v64;
  llvm::Type **v65;
  llvm::Value *v66;
  llvm::Type *v67;
  llvm::Value *v68;
  char *v69;
  llvm::IRBuilderBase *v70;
  llvm::Value *v71;
  llvm::Function *v73;
  llvm::Type *v74;
  llvm::Function *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  Function = llvm::Module::getFunction();
  if (Function)
  {
    v77 = (char *)this + 8;
    v86 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
    v87 = v86;
    v73 = (llvm::Function *)Function;
    v74 = (llvm::Type *)llvm::StructType::get();
    v3 = *((_QWORD *)v73 + 1);
    while (v3)
    {
      v4 = *(llvm::Instruction **)(v3 + 24);
      v3 = *(_QWORD *)(v3 + 8);
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v4);
      v5 = llvm::CallBase::arg_end(v4);
      v6 = *((_DWORD *)v4 + 5);
      v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v8 = (llvm::IRBuilderBase *)(v7 + 40);
      v82 = *(_OWORD *)(v7 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v7 + 40));
      v84 = *((_DWORD *)v7 + 34);
      DylibBaseGetterFunc = AGCLLVMUserObject::createDylibBaseGetterFunc(this);
      v10 = *(_QWORD *)(*(_QWORD *)this - 24);
      v79 = v82;
      v80 = v83;
      if (v83)
        llvm::MetadataTracking::track();
      v81 = v84;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v79, (uint64_t)&v77[v10 + 32]);
      if (v80)
        llvm::MetadataTracking::untrack();
      v11 = &v77[*(_QWORD *)(*(_QWORD *)this - 24)];
      v88 = 257;
      v12 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t)(v11 + 32), **(_QWORD **)(*(_QWORD *)DylibBaseGetterFunc + 16), DylibBaseGetterFunc, 0, 0, (uint64_t)&v86);
      if (v83)
        llvm::MetadataTracking::untrack();
      v13 = (v5 - ((_QWORD)v4 - 32 * (v6 & 0x7FFFFFF))) & 0x1FFFFFFFE0;
      v86 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
      v87 = v86;
      llvm::StructType::get();
      v14 = (llvm::Type *)llvm::PointerType::get();
      v88 = 257;
      PointerCast = llvm::IRBuilderBase::CreatePointerCast(v8, v12, v14, (const llvm::Twine *)&v86);
      v16 = *(_QWORD *)(*(_QWORD *)this - 24);
      v17 = (char *)this + v16 + 40;
      v88 = 257;
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)&v77[v16 + 32], v74, (uint64_t)PointerCast, 0, (uint64_t)&v86);
      if (v13 == 32)
      {
        LODWORD(v79) = 1;
        *(_QWORD *)&v82 = "colorSampleCount";
        v85 = 259;
        llvm::IRBuilderBase::CreateExtractValue((uint64_t)v17, AlignedLoad, (uint64_t)&v79, 1, (uint64_t)&v82);
        v19 = *(_QWORD *)(*(_QWORD *)this - 24);
        v20 = (char *)this + v19 + 40;
        v88 = 257;
        v21 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)&v77[v19 + 32], v74, (uint64_t)PointerCast, 0, (uint64_t)&v86);
        LODWORD(v79) = 0;
        *(_QWORD *)&v82 = "sampleCount";
        v85 = 259;
        llvm::IRBuilderBase::CreateExtractValue((uint64_t)v20, v21, (uint64_t)&v79, 1, (uint64_t)&v82);
        v22 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v23 = (llvm::CmpInst **)*((_QWORD *)v4 - 4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
        v24 = llvm::ConstantInt::get();
        v88 = 257;
        llvm::IRBuilderBase::CreateICmp(v22, 32, v23, v24, (uint64_t)&v86);
        v88 = 257;
        llvm::IRBuilderBase::CreateSelect();
      }
      else
      {
        LODWORD(v79) = 0;
        *(_QWORD *)&v82 = "sampleCount";
        v85 = 259;
        llvm::IRBuilderBase::CreateExtractValue((uint64_t)v17, AlignedLoad, (uint64_t)&v79, 1, (uint64_t)&v82);
      }
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v4);
    }
    llvm::Function::eraseFromParent(v73);
  }
  v25 = llvm::Module::getFunction();
  if (v25)
  {
    v26 = (llvm::Function *)v25;
    FragmentBuiltinEncoderStateType = AGCLLVMUserObject::getFragmentBuiltinEncoderStateType(this);
    v75 = v26;
    v28 = *((_QWORD *)v26 + 1);
    if (v28)
    {
      v29 = FragmentBuiltinEncoderStateType;
      v76 = (char *)this + 8;
      do
      {
        v78 = *(_QWORD *)(v28 + 8);
        v30 = *(llvm::Instruction **)(v28 + 24);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v30);
        PerEncoderIndirectionTableGlobal = AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
        v33 = (uint64_t)v32;
        v34 = (uint64_t *)&v76[*(_QWORD *)(*(_QWORD *)this - 24)];
        v88 = 257;
        v35 = AGCLLVMBuilder::tryDeducePointeeType(v32, (llvm::Value *)v32);
        v34 += 4;
        v36 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v34, v35, v33, 0, (uint64_t)&v86);
        *(_QWORD *)&v79 = llvm::ConstantInt::get();
        v37 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 1040))(v37);
        *((_QWORD *)&v79 + 1) = llvm::ConstantInt::get();
        v85 = 257;
        GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v34, PerEncoderIndirectionTableGlobal, v36, (uint64_t **)&v79, 2, (uint64_t)&v82);
        v39 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        AGCLLVMUserObject::getFragmentBuiltinEncoderStateType(this);
        v40 = (llvm::Type *)llvm::PointerType::get();
        v88 = 257;
        v41 = (uint64_t *)llvm::IRBuilderBase::CreatePointerCast(v39, GEP, v40, (const llvm::Twine *)&v86);
        v42 = (llvm::Value *)llvm::UndefValue::get();
        v43 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
        *(_QWORD *)&v82 = llvm::ConstantInt::get();
        *((_QWORD *)&v82 + 1) = llvm::ConstantInt::get();
        v88 = 257;
        v44 = (uint64_t *)llvm::IRBuilderBase::CreateGEP((uint64_t)&v76[v43], v29, v41, (uint64_t **)&v82, 2, (uint64_t)&v86);
        v45 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v46 = (llvm::Value *)*((_QWORD *)v30 - 4 * (*((_DWORD *)v30 + 5) & 0x7FFFFFF));
        v47 = (llvm::Value *)llvm::ConstantInt::get();
        v88 = 257;
        Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v45, v46, v47, (const llvm::Twine *)&v86);
        v49 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
        *(_QWORD *)&v79 = llvm::ConstantInt::get();
        *((_QWORD *)&v79 + 1) = Mul;
        v49 += 5;
        v88 = 257;
        v50 = v29;
        v51 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v49, v29, v44, (uint64_t **)&v79, 2, (uint64_t)&v86);
        v85 = 257;
        v53 = AGCLLVMBuilder::tryDeducePointeeType(v51, v52);
        v54 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v49, v53, (uint64_t)v51, 0, (uint64_t)&v82);
        v55 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v88 = 257;
        v56 = (llvm::IRBuilderBase *)(v55 + 40);
        v57 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v56, v42, v54, v57, (const llvm::Twine *)&v86);
        v59 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v60 = (llvm::Value *)llvm::ConstantInt::get();
        v88 = 257;
        Add = llvm::IRBuilderBase::CreateAdd(v59, Mul, v60, (const llvm::Twine *)&v86);
        v62 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v63 = *((_QWORD *)v62 + 32);
        *(_QWORD *)&v79 = llvm::ConstantInt::get();
        *((_QWORD *)&v79 + 1) = Add;
        v64 = (uint64_t *)(v62 + 40);
        v29 = v50;
        v88 = 257;
        v65 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v64, v63, v44, (uint64_t **)&v79, 2, (uint64_t)&v86);
        v85 = 257;
        v67 = AGCLLVMBuilder::tryDeducePointeeType(v65, v66);
        v68 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v64, v67, (uint64_t)v65, 0, (uint64_t)&v82);
        v69 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v88 = 257;
        v70 = (llvm::IRBuilderBase *)(v69 + 40);
        v71 = (llvm::Value *)llvm::ConstantInt::get();
        llvm::IRBuilderBase::CreateInsertElement(v70, InsertElement, v68, v71, (const llvm::Twine *)&v86);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v30);
        v28 = v78;
      }
      while (v78);
    }
    llvm::Function::eraseFromParent(v75);
  }
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::setupShaderOutputs(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t Function;
  llvm::Function *v3;
  uint64_t v4;
  llvm::Instruction *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  Function = llvm::Module::getFunction();
  if (Function)
  {
    v3 = (llvm::Function *)Function;
    v4 = *(_QWORD *)(Function + 8);
    while (v4)
    {
      v5 = *(llvm::Instruction **)(v4 + 24);
      v4 = *(_QWORD *)(v4 + 8);
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v5);
      v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v7 = *((_QWORD *)v6 + 50);
      v10 = *(_OWORD *)(v6 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
      v12 = *((_DWORD *)v6 + 34);
      v8 = llvm::ConstantInt::get();
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v7 + 616))(v7, &v10, v8);
      if (v11)
        llvm::MetadataTracking::untrack();
      llvm::Instruction::eraseFromParent(v5);
    }
    llvm::Function::eraseFromParent(v3);
  }
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::setupInterpolationFunctions(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::replaceBuiltins(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t v2;
  llvm::LLVMContext **v3;
  unsigned __int8 v4;
  uint64_t i;
  char *v6;
  size_t v7;
  void *p_p;
  char *v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  void *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void *__p;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t (**v21)(int, llvm::Value *);
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[32];

  v25[30] = *MEMORY[0x1E0C80C00];
  v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if ((_DWORD)v2)
  {
    v3 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
    AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v21, *v3);
    v25[29] = this;
    v21 = &off_1E7EB1FC8;
    v25[25] = v3;
    if ((v4 & 1) == 0
    {
      std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions, "air.get_dispatch_local_size");
      dword_1EF8E92A0 = 1;
      qword_1EF8E92A8 = (uint64_t)AGCLLVMUserDynamicLibrary::buildDispatchLocalSize;
      unk_1EF8E92B0 = 0;
      dword_1EF8E92B8 = 4;
      word_1EF8E92BC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E92C0, "air.get_dispatch_quadgroups_per_threadgroup");
      dword_1EF8E92D8 = 1;
      qword_1EF8E92E0 = (uint64_t)AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup;
      unk_1EF8E92E8 = 0;
      dword_1EF8E92F0 = 2;
      word_1EF8E92F4 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E92F8, "air.get_dispatch_simdgroups_per_threadgroup");
      dword_1EF8E9310 = 1;
      qword_1EF8E9318 = (uint64_t)AGCLLVMUserDynamicLibrary::buildDispatchSimdgroupsPerThreadgroup;
      unk_1EF8E9320 = 0;
      dword_1EF8E9328 = 2;
      word_1EF8E932C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E9330, "air.get_dispatch_threads_per_threadgroup");
      dword_1EF8E9348 = 1;
      qword_1EF8E9350 = (uint64_t)AGCLLVMUserDynamicLibrary::buildDispatchLocalSize;
      unk_1EF8E9358 = 0;
      dword_1EF8E9360 = 4;
      word_1EF8E9364 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EF8E9366[2], "air.get_global_id");
      dword_1EF8E9380 = 1;
      qword_1EF8E9388 = (uint64_t)AGCLLVMUserDynamicLibrary::buildGlobalID;
      unk_1EF8E9390 = 0;
      dword_1EF8E9398 = 4;
      word_1EF8E939C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E93A0, "air.get_global_size");
      dword_1EF8E93B8 = 1;
      qword_1EF8E93C0 = (uint64_t)AGCLLVMUserDynamicLibrary::buildGlobalSize;
      unk_1EF8E93C8 = 0;
      dword_1EF8E93D0 = 4;
      word_1EF8E93D4 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E93D8, "air.get_group_id");
      dword_1EF8E93F0 = 1;
      qword_1EF8E93F8 = (uint64_t)AGCLLVMUserDynamicLibrary::buildGroupID;
      unk_1EF8E9400 = 0;
      dword_1EF8E9408 = 4;
      word_1EF8E940C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E9410, "air.get_local_id");
      dword_1EF8E9428 = 1;
      qword_1EF8E9430 = (uint64_t)AGCLLVMUserDynamicLibrary::buildLocalID;
      unk_1EF8E9438 = 0;
      dword_1EF8E9440 = 4;
      word_1EF8E9444 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EF8E9446[2], "air.get_local_linear_id");
      dword_1EF8E9460 = 1;
      qword_1EF8E9468 = (uint64_t)AGCLLVMUserDynamicLibrary::buildLocalLinearID;
      unk_1EF8E9470 = 0;
      dword_1EF8E9478 = 2;
      word_1EF8E947C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E9480, "air.get_local_size");
      dword_1EF8E9498 = 1;
      qword_1EF8E94A0 = (uint64_t)AGCLLVMUserDynamicLibrary::buildLocalSize;
      qword_1EF8E94A8 = 0;
      dword_1EF8E94B0 = 4;
      word_1EF8E94B4 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E94B8, "air.get_num_groups");
      dword_1EF8E94D0 = 1;
      qword_1EF8E94D8 = (uint64_t)AGCLLVMUserDynamicLibrary::buildNumGroups;
      qword_1EF8E94E0 = 0;
      dword_1EF8E94E8 = 4;
      word_1EF8E94EC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E94F0, "air.get_quadgroups_per_threadgroup");
      dword_1EF8E9508 = 1;
      qword_1EF8E9510 = (uint64_t)AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup;
      qword_1EF8E9518 = 0;
      dword_1EF8E9520 = 2;
      word_1EF8E9524 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EF8E9526[2], "air.get_quadgroup_index_in_threadgroup");
      dword_1EF8E9540 = 1;
      qword_1EF8E9548 = (uint64_t)AGCLLVMUserDynamicLibrary::buildQuadGroup;
      qword_1EF8E9550 = 0;
      dword_1EF8E9558 = 2;
      word_1EF8E955C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E9560, "air.get_quad_group");
      dword_1EF8E9578 = 1;
      qword_1EF8E9580 = (uint64_t)AGCLLVMUserDynamicLibrary::buildQuadGroup;
      qword_1EF8E9588 = 0;
      dword_1EF8E9590 = 2;
      word_1EF8E9594 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E9598, "air.get_simdgroups_per_threadgroup");
      dword_1EF8E95B0 = 1;
      qword_1EF8E95B8 = (uint64_t)AGCLLVMUserDynamicLibrary::buildSimdgroupsPerThreadgroup;
      qword_1EF8E95C0 = 0;
      dword_1EF8E95C8 = 2;
      word_1EF8E95CC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E95D0, "air.get_simdgroup_index_in_threadgroup");
      dword_1EF8E95E8 = 1;
      qword_1EF8E95F0 = (uint64_t)AGCLLVMUserDynamicLibrary::buildSimdGroupIndexInThreadgroup;
      qword_1EF8E95F8 = 0;
      dword_1EF8E9600 = 2;
      word_1EF8E9604 = 0;
      std::string::basic_string[abi:nn180100]<0>(&algn_1EF8E9606[2], "air.get_stage_in_grid_origin");
      dword_1EF8E9620 = 1;
      qword_1EF8E9628 = (uint64_t)AGCLLVMUserDynamicLibrary::buildStageInOrigin;
      qword_1EF8E9630 = 0;
      dword_1EF8E9638 = 4;
      word_1EF8E963C = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E9640, "air.get_stage_in_grid_size");
      dword_1EF8E9658 = 1;
      qword_1EF8E9660 = (uint64_t)AGCLLVMUserDynamicLibrary::buildStageInSize;
      qword_1EF8E9668 = 0;
      dword_1EF8E9670 = 4;
      word_1EF8E9674 = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E9678, "air.get_thread_index_in_quadgroup");
      dword_1EF8E9690 = 1;
      qword_1EF8E9698 = (uint64_t)AGCLLVMUserDynamicLibrary::buildQuadElement;
      qword_1EF8E96A0 = 0;
      dword_1EF8E96A8 = 2;
      word_1EF8E96AC = 0;
      std::string::basic_string[abi:nn180100]<0>(qword_1EF8E96B0, "air.get_thread_index_in_simdgroup");
      dword_1EF8E96C8 = 1;
      qword_1EF8E96D0 = (uint64_t)AGCLLVMUserDynamicLibrary::buildThreadIndexInSimdGroup;
      qword_1EF8E96D8 = 0;
      dword_1EF8E96E0 = 2;
      word_1EF8E96E4 = 0;
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1919, 0, &dword_1C3C54000);
    }
    for (i = 0; i != 1120; i += 56)
    {
      v6 = &AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i];
      if (AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i + 23] >= 0)
        v7 = AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i + 23];
      else
        v7 = *(_QWORD *)&AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i + 8];
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v7 + 4);
      if ((v20 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v7)
      {
        if (v6[23] >= 0)
          v9 = &AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i];
        else
          v9 = *(char **)v6;
        memmove(p_p, v9, v7);
      }
      strcpy((char *)p_p + v7, ".i16");
      if ((v20 & 0x80u) == 0)
        v10 = &__p;
      else
        v10 = __p;
      if ((v20 & 0x80u) == 0)
        v11 = v20;
      else
        v11 = v19;
      AGCLLVMAirBuiltinReplacement<AGCLLVMUserDynamicLibrary>::doReplacement((uint64_t)&v21, (uint64_t)v10, v11, (uint64_t)(v6 + 24));
      if ((char)v20 < 0)
        operator delete(__p);
      if (v6[23] >= 0)
        v12 = v6[23];
      else
        v12 = *((_QWORD *)v6 + 1);
      std::string::basic_string[abi:nn180100]((uint64_t)&__p, v12 + 4);
      if ((v20 & 0x80u) == 0)
        v13 = &__p;
      else
        v13 = __p;
      if (v12)
      {
        if (v6[23] >= 0)
          v14 = &AGCLLVMUserDynamicLibrary::replaceWorkitemFunctions(void)::workitem_functions[i];
        else
          v14 = *(char **)v6;
        memmove(v13, v14, v12);
      }
      strcpy((char *)v13 + v12, ".i32");
      if ((v20 & 0x80u) == 0)
        v15 = &__p;
      else
        v15 = __p;
      if ((v20 & 0x80u) == 0)
        v16 = v20;
      else
        v16 = v19;
      AGCLLVMAirBuiltinReplacement<AGCLLVMUserDynamicLibrary>::doReplacement((uint64_t)&v21, (uint64_t)v15, v16, (uint64_t)(v6 + 24));
      if ((char)v20 < 0)
        operator delete(__p);
    }
    llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v25);
    llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v24);
    if (v22 != &v23)
      free(v22);
  }
  return v2;
}

uint64_t AGCLLVMUserDynamicLibrary::getMaxSharedRegisters(AGCLLVMUserDynamicLibrary *this)
{
  _DWORD *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v2 = v1[211];
  v3 = v1[212];
  v4 = v1[213];
  if (v3 < v2)
    v2 = v3;
  if (v4 >= v2)
    return v2;
  else
    return v4;
}

uint64_t AGCLLVMUserDynamicLibrary::supportsConstantSamplers(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::getPCFStateForUnit(AGCLLVMUserDynamicLibrary *this)
{
  return 0;
}

uint64_t AGCLLVMUserDynamicLibrary::needsPCFClamp(AGCLLVMUserDynamicLibrary *this)
{
  return 0;
}

uint64_t AGCLLVMUserDynamicLibrary::disableGin1122SWWA(AGCLLVMUserDynamicLibrary *this)
{
  return *((unsigned __int8 *)this + 4348);
}

uint64_t AGCLLVMUserDynamicLibrary::getTileConstant(AGCLLVMUserDynamicLibrary *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  llvm::Type **DylibBuiltinPerCommandStateVar;
  llvm::Value *v6;
  llvm::Type *v7;
  llvm::Type **AlignedLoad;
  llvm::Type *v9;
  uint64_t *PointerCast;
  uint64_t *v11;
  llvm::Type **v12;
  llvm::Value *v13;
  llvm::Type *v14;
  _BYTE v16[32];
  __int16 v17;
  uint64_t *v18[2];
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 232);
  v19[0] = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 232);
  v19[1] = v2;
  v19[2] = v2;
  v19[3] = v2;
  v3 = llvm::StructType::get();
  v4 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  DylibBuiltinPerCommandStateVar = (llvm::Type **)AGCLLVMUserDynamicLibrary::getDylibBuiltinPerCommandStateVar(a1);
  v20 = 257;
  v7 = AGCLLVMBuilder::tryDeducePointeeType(DylibBuiltinPerCommandStateVar, v6);
  AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v4, v7, (uint64_t)DylibBuiltinPerCommandStateVar, 0, (uint64_t)v19);
  v9 = (llvm::Type *)llvm::PointerType::get();
  v17 = 257;
  PointerCast = (uint64_t *)llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)v4, AlignedLoad, v9, (const llvm::Twine *)v16);
  v11 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v18[0] = (uint64_t *)llvm::ConstantInt::get();
  v18[1] = (uint64_t *)llvm::ConstantInt::get();
  v20 = 257;
  v12 = (llvm::Type **)llvm::IRBuilderBase::CreateInBoundsGEP((uint64_t)(v11 + 5), v3, PointerCast, v18, 2, (uint64_t)v19);
  v17 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(v12, v13);
  return llvm::IRBuilderBase::CreateAlignedLoad(v11 + 5, v14, (uint64_t)v12, 0, (uint64_t)v16);
}

const char *AGCLLVMUserDynamicLibrary::dumpType(AGCLLVMUserDynamicLibrary *this)
{
  return "dynamic-library";
}

uint64_t AGCLLVMUserDynamicLibrary::getShaderType(AGCLLVMUserDynamicLibrary *this)
{
  return 8;
}

uint64_t AGCLLVMUserDynamicLibrary::getRelocModel(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t AGCLLVMUserDynamicLibrary::getTempRegistersLimit(AGCLLVMUserDynamicLibrary *this, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v4 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 96))(v4);
  if ((_DWORD)result)
  {
    *a2 = result;
    result = (_DWORD)result != *(_DWORD *)(v4[50] + 884);
  }
  v6 = *((_DWORD *)this + 1086);
  if (v6)
  {
    v7 = 0;
    v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v9 = *((_QWORD *)v8 + 58);
    v10 = *(_DWORD *)(*((_QWORD *)v8 + 50) + 884);
    v11 = *(_DWORD *)(v9 + 440);
    v12 = v11 - 1;
    v13 = *(_QWORD *)(v9 + 432);
    do
    {
      v14 = (v12 + v7) >> 1;
      if (*(_DWORD *)(v13 + 4 * v14) < v6)
        v12 = v14 - 1;
      else
        v7 = v14 + 1;
    }
    while (v7 <= v12);
    v15 = v10 / v11 * v12;
    if (v15 >= *a2)
      v15 = *a2;
    *a2 = v15;
    return 1;
  }
  return result;
}

uint64_t AGCLLVMUserDynamicLibrary::getBufferBoundsCheckMode(AGCLLVMUserDynamicLibrary *this)
{
  return (**((_DWORD **)this + 544) >> 4) & 7;
}

uint64_t AGCLLVMUserDynamicLibrary::getForwardProgressMode(AGCLLVMUserDynamicLibrary *this)
{
  return **((_DWORD **)this + 544) >> 31;
}

BOOL AGCLLVMUserDynamicLibrary::enableSoftFaultOptimization(AGCLLVMUserDynamicLibrary *this)
{
  return (*(_BYTE *)(*((_QWORD *)this + 544) + 3) & 0x40) == 0;
}

uint64_t AGCLLVMUserDynamicLibrary::isDMAPromotionDisabled(AGCLLVMUserDynamicLibrary *this)
{
  return **((unsigned __int8 **)this + 544) >> 7;
}

uint64_t AGCLLVMUserDynamicLibrary::finalizeDriverBindings(AGCLLVMUserDynamicLibrary *this, llvm::Function *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  llvm::Module::getOrInsertNamedMetadata();
  v3 = *(_QWORD *)(*(_QWORD *)this - 24);
  v4 = *(unsigned int *)((char *)this + v3 + 2784);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)((char *)this + v3 + 2776);
    v6 = 8 * v4;
    do
    {
      v7 = (_QWORD *)(*(_QWORD *)v5 - 8 * *(unsigned int *)(*(_QWORD *)v5 + 8));
      if (*v7)
      {
        v8 = v7[1];
        if (v8)
        {
          if (*(_BYTE *)v8 == 1)
          {
            v9 = *(_QWORD *)(v8 + 128);
            if (*(_BYTE *)(v9 + 16) == 16)
            {
              v10 = (_QWORD *)(v9 + 24);
              if (*(_DWORD *)(v9 + 32) >= 0x41u)
                v10 = (_QWORD *)*v10;
              v11 = (_QWORD *)*v10;
              if (v11 == (_QWORD *)114 || v11 == (_QWORD *)18)
                llvm::NamedMDNode::addOperand();
            }
          }
        }
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
    v3 = *(_QWORD *)(*(_QWORD *)this - 24);
  }
  v13 = *(unsigned int *)((char *)this + v3 + 3088);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)((char *)this + v3 + 3080);
    v15 = 8 * v13;
    do
    {
      v14 += 8;
      llvm::NamedMDNode::addOperand();
      v15 -= 8;
    }
    while (v15);
  }
  llvm::Module::getOrInsertNamedMetadata();
  v16 = *(_QWORD *)(*(_QWORD *)this - 24);
  v17 = *(unsigned int *)((char *)this + v16 + 2944);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)((char *)this + v16 + 2936);
    v19 = 8 * v17;
    do
    {
      v18 += 8;
      llvm::NamedMDNode::addOperand();
      v19 -= 8;
    }
    while (v19);
  }
  llvm::Module::getOrInsertNamedMetadata();
  v20 = *((unsigned int *)this + 720);
  if ((_DWORD)v20)
  {
    v21 = *((_QWORD *)this + 359);
    v22 = 8 * v20;
    do
    {
      v21 += 8;
      llvm::NamedMDNode::addOperand();
      v22 -= 8;
    }
    while (v22);
  }
  return 1;
}

void AGCLLVMUserDynamicLibrary::getCompilationKeyDescription(AGCLLVMUserDynamicLibrary *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  const std::string::value_type *p_p;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  uint64_t i;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  void *v19;
  char v20;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  std::string v41;
  std::string v42;
  void *v43[2];
  char v44;
  void *__p;
  std::string::size_type v46;
  unsigned __int8 v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*((_QWORD *)this + 544);
  std::string::basic_string[abi:nn180100]<0>(&v41, "AGCDynamicLibraryStateAGP");
  std::string::basic_string[abi:nn180100]<0>(v39, "genCompilerStatistics");
  _agcFieldString<unsigned int>(&v51, (const void **)v39, *v3 & 1);
  std::string::basic_string[abi:nn180100]<0>(v37, "genTelemetryStatistics");
  _agcFieldString<unsigned int>(&v52, (const void **)v37, (*v3 >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v35, "disableTextureRWBoundsCheck");
  _agcFieldString<unsigned int>(&v53, (const void **)v35, (*v3 >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v33, "debugInstrumentationEnabled");
  _agcFieldString<unsigned int>(&v54, (const void **)v33, (*v3 >> 3) & 1);
  std::string::basic_string[abi:nn180100]<0>(v31, "debugInfoEnabled");
  _agcFieldString<unsigned int>(&v55, (const void **)v31, (*v3 >> 26) & 1);
  std::string::basic_string[abi:nn180100]<0>(v29, "bufferBoundsCheckMode");
  _agcFieldString<unsigned int>(&v56, (const void **)v29, (*v3 >> 4) & 7);
  std::string::basic_string[abi:nn180100]<0>(v27, "disableDMAPromotion");
  _agcFieldString<unsigned int>(&v57, (const void **)v27, (*v3 >> 7) & 1);
  std::string::basic_string[abi:nn180100]<0>(v25, "forceSoftwareEmulatedRaytracing");
  _agcFieldString<unsigned int>(&v58, (const void **)v25, (*v3 >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v23, "mayLinkBinaryFunctions");
  _agcFieldString<unsigned int>(&v59, (const void **)v23, (*v3 >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v21, "maxTempRegisters");
  _agcFieldString<unsigned int>(&v60, (const void **)v21, (unsigned __int16)(*v3 >> 10));
  std::string::basic_string[abi:nn180100]<0>(&v19, "enableStackShadow");
  _agcFieldString<unsigned int>(&v61, (const void **)&v19, (*v3 >> 27) & 1);
  std::string::basic_string[abi:nn180100]<0>(v17, "forwardProgressMode");
  _agcFieldString<unsigned int>(&v62, (const void **)v17, *v3 >> 31);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v48, v41.__r_.__value_.__l.__data_, v41.__r_.__value_.__l.__size_);
  else
    v48 = v41;
  _agcIndentedLine((void **)&v49.__r_.__value_.__l.__data_, (std::string::value_type *)&v48, 0);
  std::string::basic_string[abi:nn180100]<0>(v43, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v43, 0);
  if ((v47 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v47 & 0x80u) == 0)
    v5 = v47;
  else
    v5 = v46;
  v6 = std::string::append(&v49, p_p, v5);
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v47 < 0)
    operator delete(__p);
  if (v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  for (i = 0; i != 36; i += 3)
  {
    v9 = (std::string *)((char *)&v51 + i * 8);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[i + 2]) < 0)
      std::string::__init_copy_ctor_external(&v49, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    else
      v49 = *v9;
    v10 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v42, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    else
      v42 = v49;
    _agcIndentedLine(&__p, (std::string::value_type *)&v42, 1);
    if ((v47 & 0x80u) == 0)
      v11 = (const std::string::value_type *)&__p;
    else
      v11 = (const std::string::value_type *)__p;
    if ((v47 & 0x80u) == 0)
      v12 = v47;
    else
      v12 = v46;
    std::string::append(&v50, v11, v12);
    if ((char)v47 < 0)
      operator delete(__p);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v42.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        continue;
    }
    else if ((v10 & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, "}");
  _agcIndentedLine((void **)&v49.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v50;
  else
    v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  else
    size = v50.__r_.__value_.__l.__size_;
  v15 = std::string::insert(&v49, 0, (const std::string::value_type *)v13, size);
  *a2 = *v15;
  v15->__r_.__value_.__r.__words[0] = 0;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if ((char)v47 < 0)
    operator delete(__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v16 = 288;
  do
  {
    if (v51.__r_.__value_.__s.__data_[v16 - 1] < 0)
      operator delete(*(void **)((char *)&v50.__r_.__value_.__l.__data_ + v16));
    v16 -= 24;
  }
  while (v16);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  if (v38 < 0)
    operator delete(v37[0]);
  if (v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMUserDynamicLibrary::getSupportExternalVisibleFunctions(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

BOOL AGCLLVMUserDynamicLibrary::constructReply(AGCLLVMUserDynamicLibrary *this)
{
  _BOOL8 v2;
  int v3;
  char *v4;
  flatbuffers::FlatBufferBuilder *v5;
  int v6;
  flatbuffers::FlatBufferBuilder *v7;
  int v8;
  const char *v9;
  int v10;
  char *v11;
  flatbuffers::FlatBufferBuilder *v12;
  int v13;
  flatbuffers::FlatBufferBuilder *v14;
  int v15;
  const char *v16;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v5 = (flatbuffers::FlatBufferBuilder *)(v4 + 2472);
    v4[2542] = 1;
    v6 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v4 + 2472, v3);
    v7 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v8 = flatbuffers::FlatBufferBuilder::EndTable(v5, v6);
    flatbuffers::FlatBufferBuilder::Finish(v7, v8, v9);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    v10 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
    v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v12 = (flatbuffers::FlatBufferBuilder *)(v11 + 2568);
    v11[2638] = 1;
    v13 = *((_DWORD *)v11 + 650) - *((_DWORD *)v11 + 654) + *((_DWORD *)v11 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v11 + 2568, v10);
    v14 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
    v15 = flatbuffers::FlatBufferBuilder::EndTable(v12, v13);
    flatbuffers::FlatBufferBuilder::Finish(v14, v15, v16);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
  }
  return v2;
}

void `virtual thunk to'AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t v1;

  AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary((AGCLLVMUserDynamicLibrary *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 48)));
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4384));
}

{
  AGCLLVMUserDynamicLibrary::~AGCLLVMUserDynamicLibrary((AGCLLVMUserDynamicLibrary *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 48)));
}

const char *`virtual thunk to'AGCLLVMUserDynamicLibrary::dumpType(AGCLLVMUserDynamicLibrary *this)
{
  return "dynamic-library";
}

uint64_t `virtual thunk to'AGCLLVMUserDynamicLibrary::getShaderType(AGCLLVMUserDynamicLibrary *this)
{
  return 8;
}

uint64_t `virtual thunk to'AGCLLVMUserDynamicLibrary::getRelocModel(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t `virtual thunk to'AGCLLVMUserDynamicLibrary::getSupportExternalVisibleFunctions(AGCLLVMUserDynamicLibrary *this)
{
  return 1;
}

uint64_t `virtual thunk to'AGCLLVMUserDynamicLibrary::getForwardProgressMode(AGCLLVMUserDynamicLibrary *this)
{
  return **(_DWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 4352) >> 31;
}

void `virtual thunk to'AGCLLVMUserDynamicLibrary::getCompilationKeyDescription(AGCLLVMUserDynamicLibrary *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMUserDynamicLibrary::getCompilationKeyDescription((AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMUserDynamicLibrary::constructReply(AGCLLVMUserDynamicLibrary *this)
{
  return AGCLLVMUserDynamicLibrary::constructReply((AGCLLVMUserDynamicLibrary *)((char *)this
                                                                               + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t `virtual thunk to'AGCLLVMUserDynamicLibrary::getTempRegistersLimit(AGCLLVMUserDynamicLibrary *this, unsigned int *a2)
{
  return AGCLLVMUserDynamicLibrary::getTempRegistersLimit((AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)), a2);
}

uint64_t `virtual thunk to'AGCLLVMUserDynamicLibrary::finalizeDriverBindings(AGCLLVMUserDynamicLibrary *this, llvm::Function *a2)
{
  AGCLLVMUserDynamicLibrary::finalizeDriverBindings((AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 184)), a2);
  return 1;
}

uint64_t `virtual thunk to'AGCLLVMUserDynamicLibrary::getBufferBoundsCheckMode(AGCLLVMUserDynamicLibrary *this)
{
  return (**(_DWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 4352) >> 4) & 7;
}

BOOL `virtual thunk to'AGCLLVMUserDynamicLibrary::enableSoftFaultOptimization(AGCLLVMUserDynamicLibrary *this)
{
  return (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 4352) + 3) & 0x40) == 0;
}

uint64_t `virtual thunk to'AGCLLVMUserDynamicLibrary::isDMAPromotionDisabled(AGCLLVMUserDynamicLibrary *this)
{
  return **(unsigned __int8 **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 4352) >> 7;
}

uint64_t AGCLLVMUserDynamicLibrary::getDylibBuiltinPerCommandStateVar(AGCLLVMUserDynamicLibrary *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  llvm::Type *v5;
  AGCLLVMUserObject *GlobalBufferBinding;
  llvm::Value *v7;
  AGCLLVMObject *v8;
  const char *v9;
  __int16 v10;

  result = *((_QWORD *)this + 542);
  if (!result)
  {
    v3 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 576))(v3, 0);
    v5 = (llvm::Type *)llvm::PointerType::get();
    v9 = "agc.dylib_builtin_percommand_state_base";
    v10 = 259;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v5, (const llvm::Twine *)&v9, v4, 0, 5, 0);
    AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v7);
    v8 = (AGCLLVMUserDynamicLibrary *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v8 + 50) + 832) + 128))(*(_QWORD *)(*((_QWORD *)v8 + 50) + 832));
    AGCLLVMObject::addDylibBinding(v8, GlobalBufferBinding);
    llvm::ValueHandleBase::operator=((AGCLLVMUserDynamicLibrary *)((char *)this + 4320), (uint64_t)GlobalBufferBinding);
    return *((_QWORD *)this + 542);
  }
  return result;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  llvm::User *v8;
  uint64_t i;
  _BYTE *v10;
  uint64_t v11;
  __int128 v13;
  _BYTE v14[24];
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;

  v6 = operator new(0x20uLL);
  *v6 = &off_1E7EB2190;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  v15 = v6;
  v7 = operator new(0x20uLL);
  *v7 = &off_1E7EB21D8;
  v7[1] = this;
  v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  v16 = v7;
  v17 = 0;
  v19 = 0;
  v13 = xmmword_1C3E37DB0;
  v8 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v14, (uint64_t)&v13);
  for (i = 0; i != -128; i -= 32)
  {
    v10 = *(_BYTE **)((char *)&v19 + i);
    if (&v18[i] == v10)
    {
      v10 = &v18[i];
      v11 = 4;
    }
    else
    {
      if (!v10)
        continue;
      v11 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
  }
  return v8;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  llvm::User *v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;
  _QWORD v8[4];
  _QWORD v9[11];
  uint64_t v10;

  v8[0] = &off_1E7EB2388;
  v8[1] = this;
  v8[2] = a2;
  v8[3] = v8;
  v9[0] = &off_1E7EB23D0;
  v9[1] = this;
  v9[2] = a2;
  v9[3] = v9;
  v9[7] = 0;
  v10 = 0;
  v7 = xmmword_1C3E37DB0;
  v2 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v8, (uint64_t)&v7);
  for (i = 0; i != -16; i -= 4)
  {
    v4 = *(_QWORD **)((char *)&v10 + i * 8);
    if (&v9[i + 8] == v4)
    {
      v4 = &v9[i + 8];
      v5 = 4;
    }
    else
    {
      if (!v4)
        continue;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v2;
}

uint64_t AGCLLVMUserDynamicLibrary::buildDispatchSimdgroupsPerThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  return AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<5u>(this, a2, 1);
}

llvm::User *AGCLLVMUserDynamicLibrary::buildGlobalID(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  llvm::User *v11;
  uint64_t i;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  _BYTE v19[24];
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE v23[24];
  uint64_t v24;

  v6 = operator new(0x20uLL);
  *v6 = &off_1E7EB2220;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  v20 = v6;
  v7 = operator new(0x20uLL);
  *v7 = &off_1E7EB2268;
  v7[1] = this;
  v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  v21 = v7;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E7EB22B0;
  v8[1] = this;
  v8[2] = a2;
  *((_DWORD *)v8 + 6) = a3;
  v22 = v8;
  v24 = 0;
  v16 = 0x100000000;
  v17 = 1;
  v9 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 872))(v9))
    v10 = 1;
  else
    v10 = 2;
  v18 = v10;
  v11 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v19, (uint64_t)&v16);
  for (i = 0; i != -128; i -= 32)
  {
    v13 = *(_BYTE **)((char *)&v24 + i);
    if (&v23[i] == v13)
    {
      v13 = &v23[i];
      v14 = 4;
    }
    else
    {
      if (!v13)
        continue;
      v14 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
  }
  return v11;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildGlobalSize(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  llvm::User *v12;
  uint64_t i;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  int v19;
  _BYTE v20[24];
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[24];
  _QWORD *v25;

  v6 = operator new(0x20uLL);
  *v6 = &off_1E7EB24A8;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  v21 = v6;
  v7 = operator new(0x20uLL);
  *v7 = &off_1E7EB24F0;
  v7[1] = this;
  v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  v22 = v7;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E7EB2538;
  v8[1] = this;
  v8[2] = a2;
  *((_DWORD *)v8 + 6) = a3;
  v23 = v8;
  v9 = operator new(0x20uLL);
  *v9 = &off_1E7EB2580;
  v9[1] = this;
  v9[2] = a2;
  *((_DWORD *)v9 + 6) = a3;
  v25 = v9;
  v17 = 0x100000000;
  v18 = 1;
  v10 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 872))(v10))
    v11 = 2;
  else
    v11 = 3;
  v19 = v11;
  v12 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v20, (uint64_t)&v17);
  for (i = 0; i != -16; i -= 4)
  {
    v14 = (&v25)[i];
    if (&v24[i * 8] == v14)
    {
      v14 = &v24[i * 8];
      v15 = 4;
    }
    else
    {
      if (!v14)
        continue;
      v15 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  }
  return v12;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildGroupID(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  llvm::User *v9;
  uint64_t i;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  int v16;
  _BYTE v17[24];
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v21[24];
  uint64_t v22;

  v6 = operator new(0x20uLL);
  *v6 = &off_1E7EB1FE0;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  v18 = v6;
  v7 = operator new(0x20uLL);
  *v7 = &off_1E7EB2028;
  v7[1] = this;
  v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  v19 = v7;
  v20 = 0;
  v22 = 0;
  v14 = 0;
  v15 = 0;
  v8 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 872))(v8) ^ 1;
  v9 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v17, (uint64_t)&v14);
  for (i = 0; i != -128; i -= 32)
  {
    v11 = *(_BYTE **)((char *)&v22 + i);
    if (&v21[i] == v11)
    {
      v11 = &v21[i];
      v12 = 4;
    }
    else
    {
      if (!v11)
        continue;
      v12 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
  }
  return v9;
}

uint64_t AGCLLVMUserDynamicLibrary::buildLocalID(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *, uint64_t))(*(_QWORD *)v7 + 256))(v7, &v11, a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildLocalLinearID(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  llvm::User *v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;
  _QWORD v8[4];
  _QWORD v9[11];
  uint64_t v10;

  v8[0] = &off_1E7EB2100;
  v8[1] = this;
  v8[2] = a2;
  v8[3] = v8;
  v9[0] = &off_1E7EB2148;
  v9[1] = this;
  v9[2] = a2;
  v9[3] = v9;
  v9[7] = 0;
  v10 = 0;
  v7 = xmmword_1C3E37DB0;
  v2 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v8, (uint64_t)&v7);
  for (i = 0; i != -16; i -= 4)
  {
    v4 = *(_QWORD **)((char *)&v10 + i * 8);
    if (&v9[i + 8] == v4)
    {
      v4 = &v9[i + 8];
      v5 = 4;
    }
    else
    {
      if (!v4)
        continue;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v2;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildLocalSize(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  llvm::User *v8;
  uint64_t i;
  _BYTE *v10;
  uint64_t v11;
  __int128 v13;
  _BYTE v14[24];
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _BYTE v18[24];
  uint64_t v19;

  v6 = operator new(0x20uLL);
  *v6 = &off_1E7EB2070;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  v15 = v6;
  v7 = operator new(0x20uLL);
  *v7 = &off_1E7EB20B8;
  v7[1] = this;
  v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  v16 = v7;
  v17 = 0;
  v19 = 0;
  v13 = xmmword_1C3E37DB0;
  v8 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v14, (uint64_t)&v13);
  for (i = 0; i != -128; i -= 32)
  {
    v10 = *(_BYTE **)((char *)&v19 + i);
    if (&v18[i] == v10)
    {
      v10 = &v18[i];
      v11 = 4;
    }
    else
    {
      if (!v10)
        continue;
      v11 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
  }
  return v8;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildNumGroups(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  llvm::User *v12;
  uint64_t i;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  int v19;
  _BYTE v20[24];
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE v24[24];
  _QWORD *v25;

  v6 = operator new(0x20uLL);
  *v6 = &off_1E7EB25C8;
  v6[1] = this;
  v6[2] = a2;
  *((_DWORD *)v6 + 6) = a3;
  v21 = v6;
  v7 = operator new(0x20uLL);
  *v7 = &off_1E7EB2610;
  v7[1] = this;
  v7[2] = a2;
  *((_DWORD *)v7 + 6) = a3;
  v22 = v7;
  v8 = operator new(0x20uLL);
  *v8 = &off_1E7EB2658;
  v8[1] = this;
  v8[2] = a2;
  *((_DWORD *)v8 + 6) = a3;
  v23 = v8;
  v9 = operator new(0x20uLL);
  *v9 = &off_1E7EB26A0;
  v9[1] = this;
  v9[2] = a2;
  *((_DWORD *)v9 + 6) = a3;
  v25 = v9;
  v17 = 0x100000000;
  v18 = 1;
  v10 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 872))(v10))
    v11 = 2;
  else
    v11 = 3;
  v19 = v11;
  v12 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v20, (uint64_t)&v17);
  for (i = 0; i != -16; i -= 4)
  {
    v14 = (&v25)[i];
    if (&v24[i * 8] == v14)
    {
      v14 = &v24[i * 8];
      v15 = 4;
    }
    else
    {
      if (!v14)
        continue;
      v15 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  }
  return v12;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  llvm::User *v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;
  _QWORD v8[4];
  _QWORD v9[11];
  uint64_t v10;

  v8[0] = &off_1E7EB2418;
  v8[1] = this;
  v8[2] = a2;
  v8[3] = v8;
  v9[0] = &off_1E7EB2460;
  v9[1] = this;
  v9[2] = a2;
  v9[3] = v9;
  v9[7] = 0;
  v10 = 0;
  v7 = xmmword_1C3E37DB0;
  v2 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v8, (uint64_t)&v7);
  for (i = 0; i != -16; i -= 4)
  {
    v4 = *(_QWORD **)((char *)&v10 + i * 8);
    if (&v9[i + 8] == v4)
    {
      v4 = &v9[i + 8];
      v5 = 4;
    }
    else
    {
      if (!v4)
        continue;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v2;
}

llvm::User *AGCLLVMUserDynamicLibrary::buildQuadGroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  llvm::User *v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;
  _QWORD v8[4];
  _QWORD v9[11];
  uint64_t v10;

  v8[0] = &off_1E7EB22F8;
  v8[1] = this;
  v8[2] = a2;
  v8[3] = v8;
  v9[0] = &off_1E7EB2340;
  v9[1] = this;
  v9[2] = a2;
  v9[3] = v9;
  v9[7] = 0;
  v10 = 0;
  v7 = xmmword_1C3E37DB0;
  v2 = AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(this, a2, (uint64_t)v8, (uint64_t)&v7);
  for (i = 0; i != -16; i -= 4)
  {
    v4 = *(_QWORD **)((char *)&v10 + i * 8);
    if (&v9[i + 8] == v4)
    {
      v4 = &v9[i + 8];
      v5 = 4;
    }
    else
    {
      if (!v4)
        continue;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v2;
}

uint64_t AGCLLVMUserDynamicLibrary::buildSimdgroupsPerThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  return AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<5u>(this, a2, 0);
}

uint64_t AGCLLVMUserDynamicLibrary::buildSimdGroupIndexInThreadgroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *))(*(_QWORD *)v5 + 1544))(v5, &v9, a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserDynamicLibrary::buildStageInOrigin(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, llvm::Type *a3)
{
  llvm::Value *ComputeBuiltinPerCommandStatePtr;
  llvm::Value *v6;

  ComputeBuiltinPerCommandStatePtr = (llvm::Value *)AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(this);
  return AGCLLVMUserShader::buildStageInOriginCommon(this, a3, ComputeBuiltinPerCommandStatePtr, v6);
}

uint64_t AGCLLVMUserDynamicLibrary::buildStageInSize(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2, llvm::Type *a3)
{
  llvm::Value *ComputeBuiltinPerCommandStatePtr;
  llvm::Value *v6;

  ComputeBuiltinPerCommandStatePtr = (llvm::Value *)AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(this);
  return AGCLLVMUserShader::buildStageInSizeCommon(this, a3, ComputeBuiltinPerCommandStatePtr, v6);
}

uint64_t AGCLLVMUserDynamicLibrary::buildQuadElement(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserDynamicLibrary::buildThreadIndexInSimdGroup(AGCLLVMUserDynamicLibrary *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *))(*(_QWORD *)v5 + 1536))(v5, &v9, a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMAirBuiltinReplacement<AGCLLVMUserDynamicLibrary>::doReplacement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  llvm::Function *v6;
  int v7;
  _BYTE *v8;
  size_t v9;
  uint64_t v10;
  void (*v11)(_QWORD *, _QWORD);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  uint64_t v19;
  llvm::IRBuilderBase *v20;
  llvm::Instruction *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t v27;
  llvm::Value **v28;
  llvm::Instruction *v29;
  llvm::Value **v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Type *v33;
  uint64_t v34;
  int v35;
  llvm::Type *v36;
  uint64_t v37;
  llvm::Value **v38;
  llvm::Value *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD *);
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  llvm::Value *FPTrunc;
  uint64_t (*v46)(_QWORD *, uint64_t);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t (*v52)(_QWORD *, _QWORD, _QWORD);
  uint64_t v53;
  _QWORD *v54;
  uint64_t (*v55)(_QWORD *, _QWORD, _QWORD);
  uint64_t v56;
  _QWORD *v57;
  uint64_t (*v58)(_QWORD *, _OWORD *, void *, uint64_t);
  uint64_t v59;
  _QWORD *v60;
  _OWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD);
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Value *v70;
  uint64_t v71;
  int v72;
  llvm::Function *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Value *v77;
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  _QWORD v85[4];
  __int16 v86;
  _OWORD v87[3];
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  result = llvm::Module::getFunction();
  if (result)
  {
    v6 = (llvm::Function *)result;
    v7 = *(_DWORD *)(a4 + 24);
    if (v7 == 10)
    {
      v10 = *(_QWORD *)(result + 8);
      if (v10)
      {
        do
        {
          v11 = *(void (**)(_QWORD *, _QWORD))(a4 + 8);
          v12 = *(_QWORD *)(a4 + 16);
          v13 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v12 >> 1));
          if ((v12 & 1) != 0)
            v11 = *(void (**)(_QWORD *, _QWORD))(*v13 + v11);
          v14 = *(_QWORD *)(v10 + 8);
          v11(v13, *(_QWORD *)(v10 + 24));
          v10 = v14;
        }
        while (v14);
      }
      return llvm::Function::eraseFromParent(v6);
    }
    if (v7 == 9)
    {
      v8 = *(_BYTE **)(a4 + 8);
      if (v8)
      {
        v9 = strlen(*(const char **)(a4 + 8));
        *(_QWORD *)&v87[0] = (char *)&v87[1] + 8;
        *(_OWORD *)((char *)v87 + 8) = xmmword_1C3E37B50;
        llvm::SmallVectorImpl<char>::append<char const*,void>(v87, v8, &v8[v9]);
      }
      else
      {
        *(_QWORD *)&v87[1] = 64;
        *(_QWORD *)&v87[0] = (char *)&v87[1] + 8;
        *((_QWORD *)&v87[0] + 1) = 0;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(v87, ".", "");
      v71 = *((_QWORD *)&v87[0] + 1);
      if (*(_QWORD *)&v87[1] < *((_QWORD *)&v87[0] + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v71 = *((_QWORD *)&v87[0] + 1);
      }
      *((_QWORD *)&v87[0] + 1) = v71;
      llvm::Module::getOrInsertFunction();
      llvm::Value::replaceAllUsesWith();
      if (*(_OWORD **)&v87[0] != (_OWORD *)((char *)&v87[1] + 8))
        free(*(void **)&v87[0]);
      return llvm::Function::eraseFromParent(v6);
    }
    v15 = **(_QWORD **)(*(_QWORD *)(result + 24) + 16);
    v16 = (*(_DWORD *)(v15 + 8) & 0xFE) != 0x12 || *(_BYTE *)(a4 + 29) == 0;
    v17 = !v16;
    if (v16)
      v18 = 1;
    else
      v18 = *(_DWORD *)(v15 + 32);
    v74 = v18;
    v72 = *(_DWORD *)(a1 + 104);
    v73 = (llvm::Function *)result;
    v19 = *(_QWORD *)(result + 8);
    if (!v19)
    {
LABEL_95:
      *(_DWORD *)(a1 + 104) = v72;
      v6 = v73;
      return llvm::Function::eraseFromParent(v6);
    }
    v20 = (llvm::IRBuilderBase *)(a1 + 8);
    v76 = a4;
    while (1)
    {
      v21 = *(llvm::Instruction **)(v19 + 24);
      v22 = *(_QWORD *)(v19 + 8);
      if (*(_DWORD *)a4 == 1)
      {
        v23 = 0;
      }
      else
      {
        if (*(_DWORD *)a4 != 2)
          goto LABEL_27;
        v23 = 121;
      }
      *(_DWORD *)(a1 + 104) = v23;
LABEL_27:
      v75 = v22;
      llvm::IRBuilderBase::SetInsertPoint(v20, v21);
      v24 = llvm::UndefValue::get();
      if (v74)
      {
        for (i = 0; i != v74; ++i)
        {
          v77 = (llvm::Value *)v24;
          v88 = 0;
          memset(v87, 0, sizeof(v87));
          v26 = llvm::CallBase::arg_end(v21) - (_QWORD)v21 + 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF);
          if ((v26 & 0x1FFFFFFFE0) != 0)
          {
            v27 = (v26 >> 5);
            v28 = (llvm::Value **)v87;
            v29 = v21;
            do
            {
              v30 = (llvm::Value **)((char *)v29 - 32 * (*((_DWORD *)v21 + 5) & 0x7FFFFFF));
              v31 = *v30;
              *v28 = *v30;
              if (v17 && (*(_DWORD *)(*(_QWORD *)v31 + 8) & 0xFE) == 0x12)
              {
                v86 = 257;
                v32 = (llvm::Value *)llvm::ConstantInt::get();
                *v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v20, v31, v32, (const llvm::Twine *)v85);
              }
              ++v28;
              v29 = (llvm::Instruction *)((char *)v29 + 32);
              --v27;
            }
            while (v27);
          }
          if (*(_BYTE *)(v76 + 28))
          {
            v33 = **(llvm::Type ***)&v87[0];
            if ((*(_DWORD *)(**(_QWORD **)&v87[0] + 8) & 0xFE) == 0x12)
              v33 = (llvm::Type *)**((_QWORD **)v33 + 2);
            v85[0] = llvm::Type::getPrimitiveSizeInBits(v33);
            v85[1] = v34;
            if (llvm::TypeSize::operator unsigned long long() == 32)
            {
              v35 = 0;
            }
            else
            {
              v36 = *(llvm::Type **)(a1 + 168);
              if ((*(_DWORD *)(**(_QWORD **)&v87[0] + 8) & 0xFE) == 0x12)
                v36 = (llvm::Type *)llvm::FixedVectorType::get();
              if ((v26 & 0x1FFFFFFFE0) != 0)
              {
                v37 = (v26 >> 5);
                v38 = (llvm::Value **)v87;
                do
                {
                  v39 = *v38;
                  v86 = 257;
                  *v38++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v20, v39, v36, (const llvm::Twine *)v85);
                  --v37;
                }
                while (v37);
                v35 = 1;
              }
              else
              {
                v35 = 1;
              }
            }
          }
          else
          {
            v35 = 0;
          }
          v40 = *(_QWORD *)(**(_QWORD **)(a1 + 368) - 24) + *(_QWORD *)(a1 + 368);
          v82 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(v20);
          v84 = *(_DWORD *)(a1 + 104);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v82, v40 + 40);
          if (v83)
            llvm::MetadataTracking::untrack();
          switch(*(_DWORD *)(v76 + 24))
          {
            case 1:
              v41 = *(uint64_t (**)(_QWORD *))(v76 + 8);
              v42 = *(_QWORD *)(v76 + 16);
              v43 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v42 >> 1));
              if ((v42 & 1) != 0)
                v41 = *(uint64_t (**)(_QWORD *))(*v43 + v41);
              v44 = v41(v43);
              goto LABEL_80;
            case 2:
              v46 = *(uint64_t (**)(_QWORD *, uint64_t))(v76 + 8);
              v47 = *(_QWORD *)(v76 + 16);
              v48 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v47 >> 1));
              if ((v47 & 1) != 0)
                v46 = *(uint64_t (**)(_QWORD *, uint64_t))(*v48 + v46);
              v49 = *(_QWORD *)v21;
              goto LABEL_61;
            case 3:
              v46 = *(uint64_t (**)(_QWORD *, uint64_t))(v76 + 8);
              v50 = *(_QWORD *)(v76 + 16);
              v48 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v50 >> 1));
              if ((v50 & 1) != 0)
                v46 = *(uint64_t (**)(_QWORD *, uint64_t))(*v48 + v46);
              v49 = *(_QWORD *)&v87[0];
LABEL_61:
              v44 = v46(v48, v49);
              goto LABEL_80;
            case 4:
              v51 = (unsigned int *)(*(_QWORD *)&v87[0] + 24);
              if (*(_DWORD *)(*(_QWORD *)&v87[0] + 32) >= 0x41u)
                v51 = *(unsigned int **)v51;
              v52 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(v76 + 8);
              v53 = *(_QWORD *)(v76 + 16);
              v54 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v53 >> 1));
              if ((v53 & 1) != 0)
                v52 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v54 + v52);
              v44 = v52(v54, *(_QWORD *)v21, *v51);
              goto LABEL_80;
            case 5:
              v55 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(v76 + 8);
              v56 = *(_QWORD *)(v76 + 16);
              v57 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v56 >> 1));
              if ((v56 & 1) != 0)
                v55 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v57 + v55);
              v44 = v55(v57, *(_QWORD *)&v87[0], *((_QWORD *)&v87[0] + 1));
              goto LABEL_80;
            case 6:
              v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(v76 + 8);
              v59 = *(_QWORD *)(v76 + 16);
              v60 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v59 >> 1));
              if ((v59 & 1) != 0)
                v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(*v60 + v58);
              v62 = (void *)*((_QWORD *)&v87[0] + 1);
              v61 = *(_OWORD **)&v87[0];
              v63 = *(_QWORD *)&v87[1];
              goto LABEL_76;
            case 7:
              v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(v76 + 8);
              v64 = *(_QWORD *)(v76 + 16);
              v60 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v64 >> 1));
              if ((v64 & 1) != 0)
                v58 = *(uint64_t (**)(_QWORD *, _OWORD *, void *, uint64_t))(*v60 + v58);
              v61 = v87;
              v62 = &unk_1C3E4D9BB;
              v63 = 0;
LABEL_76:
              v44 = v58(v60, v61, v62, v63);
              goto LABEL_80;
            case 8:
              v65 = *(uint64_t (**)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))(v76 + 8);
              v66 = *(_QWORD *)(v76 + 16);
              v67 = (_QWORD *)(*(_QWORD *)(a1 + 368) + (v66 >> 1));
              if ((v66 & 1) != 0)
                v65 = *(uint64_t (**)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))(*v67 + v65);
              v44 = v65(v67, *(_QWORD *)v21, v87, &unk_1C3E4D9BB, 0);
LABEL_80:
              FPTrunc = (llvm::Value *)v44;
              break;
            default:
              FPTrunc = 0;
              break;
          }
          v68 = *(_QWORD *)(**(_QWORD **)(a1 + 368) - 24) + *(_QWORD *)(a1 + 368);
          v79 = *(_OWORD *)(v68 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v68 + 40));
          v81 = *(_DWORD *)(v68 + 136);
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v79, (uint64_t)v20);
          if (v80)
            llvm::MetadataTracking::untrack();
          if (v35)
          {
            v69 = *(_QWORD *)v21;
            if (v17 && (*(_DWORD *)(v69 + 8) & 0xFE) == 0x12)
              v69 = **(_QWORD **)(v69 + 16);
            v86 = 257;
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v20, FPTrunc, (llvm::Type *)v69, (const llvm::Twine *)v85);
            if (!v17)
              goto LABEL_91;
          }
          else if (!v17)
          {
            goto LABEL_91;
          }
          v86 = 257;
          v70 = (llvm::Value *)llvm::ConstantInt::get();
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v20, v77, FPTrunc, v70, (const llvm::Twine *)v85);
LABEL_91:
          v24 = (uint64_t)FPTrunc;
        }
      }
      if (*(_QWORD *)v21 != *(_QWORD *)(a1 + 144))
        llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v21);
      a4 = v76;
      v19 = v75;
      if (!v75)
        goto LABEL_95;
    }
  }
  return result;
}

uint64_t AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(AGCLLVMUserDynamicLibrary *a1)
{
  llvm::Type *v2;
  uint64_t *v3;
  uint64_t DylibBuiltinPerCommandStateVar;
  uint64_t *AlignedLoad;
  char *v6;
  llvm::Type *v7;
  llvm::GetElementPtrInst *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;
  uint64_t *v16[2];

  v16[1] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v2 = (llvm::Type *)llvm::PointerType::get();
  v3 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  DylibBuiltinPerCommandStateVar = AGCLLVMUserDynamicLibrary::getDylibBuiltinPerCommandStateVar(a1);
  v15 = 257;
  AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v3 + 5, v2, DylibBuiltinPerCommandStateVar, 0, (uint64_t)v14);
  v6 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v7 = (llvm::Type *)*((_QWORD *)v6 + 30);
  v16[0] = (uint64_t *)llvm::ConstantInt::get();
  v15 = 257;
  v8 = llvm::IRBuilderBase::CreateInBoundsGEP((uint64_t)(v6 + 40), (uint64_t)v7, AlignedLoad, v16, 1, (uint64_t)v14);
  v13[16] = 257;
  v9 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v6 + 5, v7, (uint64_t)v8, 0, (uint64_t)v13);
  v10 = llvm::PointerType::get();
  v11 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
  v15 = 257;
  return llvm::IRBuilderBase::CreateCast(v11, 48, v9, v10, (uint64_t)v14);
}

uint64_t AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<5u>(AGCLLVMUserDynamicLibrary *a1, llvm::Type *a2, int a3)
{
  llvm::IRBuilderBase *v5;
  llvm::User *v6;
  llvm::User *v7;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v9;
  llvm::User *v10;
  llvm::User *v11;
  llvm::User *v12;
  llvm::Value *v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  llvm::Value *Add;
  llvm::Value *v17;
  _WORD v19[20];
  _BYTE v20[32];
  __int16 v21;

  v5 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  if (a3)
  {
    v6 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 0);
    v7 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 2);
  }
  else
  {
    v11 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 0);
    v12 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 2);
  }
  v21 = 257;
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  v14 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

llvm::User *AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(_QWORD *a1, llvm::Type *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::BasicBlock *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Instruction *v19;
  uint64_t v20;
  llvm::Instruction *v21;
  char *v22;
  uint64_t Switch;
  uint64_t v24;
  uint64_t FirstInsertionPt;
  uint64_t v26;
  uint64_t v27;
  llvm::IRBuilderBase *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  llvm::BasicBlock *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  llvm::Value *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v52;
  uint64_t v53;
  llvm::User *PHI;
  uint64_t v56;
  void *__p;
  char v58;
  int v59;
  void **p_p;
  __int16 v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0)
  {
LABEL_43:
    {
      std::string::basic_string[abi:nn180100]<0>(AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name, "Tile");
      std::string::basic_string[abi:nn180100]<0>(&AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name[24], "Compute");
      std::string::basic_string[abi:nn180100]<0>(&AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name[48], "Object");
      std::string::basic_string[abi:nn180100]<0>(&AGCLLVMUserDynamicLibrary::buildStageSpecificBuiltin(llvm::Type *,std::array<std::function<llvm::Value * ()(void)>,4ul> const&,std::array<int,4ul> const&)::stage_name[72], "Mesh");
      __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_43, 0, &dword_1C3C54000);
    }
  }
  v65 = 0x700000009;
  v8 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 872))(v8))
    v9 = 1;
  else
    v9 = 3;
  v66 = v9;
  v10 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 872))(v10);
  v11 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v12 = *((_QWORD *)v11 + 50);
  v62 = *(_OWORD *)(v11 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v11 + 40));
  v64 = *((_DWORD *)v11 + 34);
  v13 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 968))(v12, &v62);
  if (v63)
    llvm::MetadataTracking::untrack();
  v14 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 88);
  v61 = 257;
  v15 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v56 = v14;
  v18 = *(_QWORD *)(v14 + 40);
  v17 = v14 + 40;
  v16 = v18;
  if (v18 == v17)
  {
    v21 = 0;
  }
  else
  {
    v19 = (llvm::Instruction *)(v16 - 24);
    if (v16)
      v20 = v16 - 24;
    else
      v20 = 0;
    if (*(unsigned __int8 *)(v20 + 16) - 29 >= 0xB)
      v21 = 0;
    else
      v21 = v19;
  }
  llvm::Instruction::eraseFromParent(v21);
  v22 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v22 + 11) = v56;
  *((_QWORD *)v22 + 12) = v17;
  Switch = llvm::IRBuilderBase::CreateSwitch((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), v13, (uint64_t)v15, 2);
  v24 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v15);
  v26 = v24;
  v27 = Switch;
  llvm::IRBuilderBase::SetInsertPoint(v26, (uint64_t)v15, FirstInsertionPt);
  v28 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v61 = 257;
  PHI = llvm::IRBuilderBase::CreatePHI(v28, a2, 2, (const llvm::Twine *)&p_p);
  v29 = 0;
  v30 = 0;
  v52 = 0;
  v31 = 0;
  v59 = 0;
  v32 = 1;
  v53 = a4;
  do
  {
    v33 = v32;
    if (*(_DWORD *)(a4 + 4 * v30) == -1 || *((_BYTE *)&v59 + v30))
    {
      v34 = v31;
    }
    else
    {
      std::operator+<char>();
      v61 = 260;
      p_p = &__p;
      v35 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      if (v58 < 0)
        operator delete(__p);
      v36 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
      v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 688))(v36);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v37 + 1824))(v37, *((unsigned int *)&v65 + v30));
      llvm::ConstantInt::get();
      llvm::SwitchInst::addCase();
      v38 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      *((_QWORD *)v38 + 11) = v35;
      *((_QWORD *)v38 + 12) = (char *)v35 + 40;
      llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), v15);
      a2 = (llvm::Type *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v39 = llvm::BasicBlock::getFirstInsertionPt(v35);
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)a2, (uint64_t)v35, v39);
      a4 = v53;
      v40 = *(_QWORD *)(a3 + 32 * *(int *)(v53 + 4 * v30) + 24);
      if (!v40)
      {
        std::__throw_bad_function_call[abi:nn180100]();
        goto LABEL_43;
      }
      v41 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 96);
      v42 = (llvm::Value *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 48))(v40);
      v43 = v41 - 24;
      if (!v41)
        v43 = 0;
      llvm::PHINode::addIncoming(PHI, v42, *(llvm::BasicBlock **)(v43 + 40));
      if ((v33 & 1) != 0)
      {
        if (*(_DWORD *)(v53 + 4 * v30) == *(_DWORD *)(v53 + 4))
        {
          v44 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 688))(v44);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v45 + 1824))(v45, 7);
          llvm::ConstantInt::get();
          llvm::SwitchInst::addCase();
          v34 = 2;
          v46 = 1;
        }
        else
        {
          v34 = 1;
          v46 = v52;
        }
        v52 = v46;
        BYTE1(v59) = v46;
      }
      else
      {
        v34 = 1;
      }
      if (v34 > v31 || (v29 & ((_DWORD)v34 == (_DWORD)v31)) != 0)
        llvm::SwitchInst::setDefaultDest(v27, (uint64_t)v35);
      else
        v34 = v31;
    }
    v32 = 0;
    v29 = 1;
    v30 = 1;
    v31 = v34;
  }
  while ((v33 & 1) != 0);
  v47 = *(_DWORD *)(v27 + 20);
  if ((v47 & 0x40000000) != 0)
  {
    if (*(llvm::BasicBlock **)(*(_QWORD *)(v27 - 8) + 32) == v15)
    {
      v48 = *(_QWORD *)(v27 - 8);
      goto LABEL_40;
    }
  }
  else if (*(llvm::BasicBlock **)(v27 - 32 * (v47 & 0x7FFFFFF) + 32) == v15)
  {
    v48 = v27 - 32 * (v47 & 0x7FFFFFF);
LABEL_40:
    llvm::SwitchInst::setDefaultDest(v27, *(_QWORD *)(v48 + 96));
  }
  v49 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
  v50 = llvm::BasicBlock::getFirstInsertionPt(v15);
  llvm::IRBuilderBase::SetInsertPoint(v49, (uint64_t)v15, v50);
  return PHI;
}

uint64_t llvm::IRBuilderBase::CreateSwitch(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[32];
  __int16 v14;

  v8 = llvm::User::operator new((llvm::User *)0x40);
  MEMORY[0x1CAA2C1F8](v8, a2, a3, a4, 0);
  v14 = 257;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], v8, v13, a1[6], a1[7]);
  v9 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v9)
  {
    v10 = *a1;
    v11 = v10 + 16 * v9;
    do
    {
      llvm::Instruction::setMetadata();
      v10 += 16;
    }
    while (v10 != v11);
  }
  return v8;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB2340;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2340;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 400);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 680))(v3);
  v5 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
  v10 = *((_DWORD *)v5 + 34);
  v6 = AGCLLVMGen3TargetLowerer::buildQuadGroup(v4, (uint64_t)&v8, *(_QWORD *)(a1 + 16));
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB22F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB22F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadGroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 456))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB2460;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2460;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<2u>(*(AGCLLVMUserDynamicLibrary **)(a1 + 8), *(llvm::Type **)(a1 + 16), 0);
}

uint64_t AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<2u>(AGCLLVMUserDynamicLibrary *a1, llvm::Type *a2, int a3)
{
  llvm::IRBuilderBase *v5;
  llvm::User *v6;
  llvm::User *v7;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v9;
  llvm::User *v10;
  llvm::User *v11;
  llvm::User *v12;
  llvm::Value *v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  llvm::Value *Add;
  llvm::Value *v17;
  _WORD v19[20];
  _BYTE v20[32];
  __int16 v21;

  v5 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  if (a3)
  {
    v6 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 0);
    v7 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(a1, a2, 2);
  }
  else
  {
    v11 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 0);
    v12 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 1);
    v21 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, v11, v12, (const llvm::Twine *)v20);
    v9 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v10 = AGCLLVMUserDynamicLibrary::buildLocalSize(a1, a2, 2);
  }
  v21 = 257;
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Mul, v10, (const llvm::Twine *)v20);
  v14 = (AGCLLVMUserDynamicLibrary *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v14, v13, v15, (const llvm::Twine *)v20);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v19[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v14, Add, v17, (const llvm::Twine *)v19);
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB2418;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2418;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::User *std::__function::__func<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(*(AGCLLVMUserDynamicLibrary **)(a1 + 8), *(llvm::Type **)(a1 + 16));
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB26A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB26A0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB2658;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2658;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB2610;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2610;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  AGCLLVMUserDynamicLibrary *v2;
  llvm::User *v3;
  llvm::User *v4;
  llvm::IRBuilderBase *v5;
  llvm::Value *Add;
  llvm::Value *v7;
  llvm::Value *Sub;
  llvm::IRBuilderBase *v9;
  uint64_t UDiv;
  uint64_t v11;
  uint64_t v12;
  _WORD v14[20];
  _BYTE v15[32];
  __int16 v16;

  v2 = *(AGCLLVMUserDynamicLibrary **)(a1 + 8);
  v3 = AGCLLVMUserDynamicLibrary::buildGlobalSize(v2, *(llvm::Type **)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 232), *(_DWORD *)(a1 + 24));
  v4 = AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(v2, *(llvm::Type **)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 232), *(_DWORD *)(a1 + 24));
  v5 = (AGCLLVMUserDynamicLibrary *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
  v16 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v5, v3, v4, (const llvm::Twine *)v15);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v14[16] = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v5, Add, v7, (const llvm::Twine *)v14);
  v9 = (AGCLLVMUserDynamicLibrary *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40);
  v16 = 257;
  UDiv = llvm::IRBuilderBase::CreateUDiv(v9, Sub, v4, (const llvm::Twine *)v15);
  v11 = (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24) + 40;
  v12 = *(_QWORD *)(a1 + 16);
  v16 = 257;
  return llvm::IRBuilderBase::CreateCast(v11, 38, UDiv, v12, (uint64_t)v15);
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB25C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB25C8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildNumGroups(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadgroupsPerGrid(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16), *(_DWORD *)(a1 + 24));
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB20B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB20B8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 400);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 680))(v3);
  v5 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
  v10 = *((_DWORD *)v5 + 34);
  v6 = AGCLLVMGen3TargetLowerer::buildLocalSize(v4, (uint64_t)&v8, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24));
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB2070;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2070;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadsPerThreadgroup(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16), *(_DWORD *)(a1 + 24));
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB2148;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2148;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 400);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 680))(v3);
  v5 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
  v10 = *((_DWORD *)v5 + 34);
  v6 = AGCLLVMGen3TargetLowerer::buildLocalLinearID(v4, (uint64_t)&v8, *(_QWORD *)(a1 + 16));
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB2100;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2100;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildLocalLinearID(llvm::Type *)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadIndexInThreadgroup(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16));
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB2028;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2028;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB1FE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB1FE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGroupID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 400);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 680))(v3);
  v5 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
  v10 = *((_DWORD *)v5 + 34);
  v6 = AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v4, (uint64_t)&v8, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24));
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB2580;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2580;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB2538;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2538;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB24F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB24F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  AGCLLVMUserDynamicLibrary *v1;
  llvm::Type *v2;
  unsigned int v3;
  llvm::Value *ComputeBuiltinPerCommandStatePtr;
  llvm::Value *v5;

  v1 = *(AGCLLVMUserDynamicLibrary **)(a1 + 8);
  v2 = *(llvm::Type **)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 24);
  ComputeBuiltinPerCommandStatePtr = (llvm::Value *)AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(v1);
  v5 = (llvm::Value *)AGCLLVMUserDynamicLibrary::loadComputeBuiltinPerCommandStatePtr(v1);
  return AGCLLVMUserShader::buildGlobalSizeCommon(v1, v2, v3, ComputeBuiltinPerCommandStatePtr, v5);
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB24A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB24A8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalSize(llvm::Type *,unsigned int)::$_3>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadsPerGrid(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16), *(_DWORD *)(a1 + 24));
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB22B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB22B0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()()
{
  return 0;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB2268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2268;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 400);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 680))(v3);
  v5 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
  v10 = *((_DWORD *)v5 + 34);
  v6 = AGCLLVMGen3TargetLowerer::buildGlobalID(v4, (uint64_t)&v8, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24));
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB2220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2220;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2,std::allocator<AGCLLVMUserDynamicLibrary::buildGlobalID(llvm::Type *,unsigned int)::$_2>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 448))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned int *)(a1 + 24));
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB23D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB23D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserDynamicLibrary::buildQuadgroupsPerThreadgroupCommon<2u>(*(AGCLLVMUserDynamicLibrary **)(a1 + 8), *(llvm::Type **)(a1 + 16), 1);
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB2388;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2388;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchQuadgroupsPerThreadgroup(llvm::Type *)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16));
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB21D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB21D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_0>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *(_QWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 400);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 680))(v3);
  v5 = (char *)v2 + *(_QWORD *)(*v2 - 24);
  v8 = *(_OWORD *)(v5 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v5 + 40));
  v10 = *((_DWORD *)v5 + 34);
  v6 = AGCLLVMGen3TargetLowerer::buildThreadgroupDispatchSize(v4, (uint64_t)&v8, *(_QWORD *)(a1 + 16), *(_DWORD *)(a1 + 24));
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

void std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB2190;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB2190;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::Value *std::__function::__func<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1,std::allocator<AGCLLVMUserDynamicLibrary::buildDispatchLocalSize(llvm::Type *,unsigned int)::$_1>,llvm::Value * ()(void)>::operator()(uint64_t a1)
{
  return AGCLLVMUserShader::buildTileThreadsPerThreadgroup(*(AGCLLVMUserShader **)(a1 + 8), *(llvm::Type **)(a1 + 16), *(_DWORD *)(a1 + 24));
}

uint64_t AGCLLVMUserDynamicLibrary::AGCLLVMUserDynamicLibrary(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  uint64_t *v7;
  llvm::Module *v8;
  uint64_t NamedMetadata;
  llvm::NamedMDNode *v10;
  unsigned int i;
  uint64_t Operand;
  uint64_t v13;
  _BOOL4 v14;
  const char *v16;
  __int16 v17;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 4384), a2, *a3);
  v7 = AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, (uint64_t *)off_1E7EB17E0, (uint64_t)a3, "air.dylib", (uint64_t)&default_cs, 0, 1);
  *(_QWORD *)a1 = &off_1E7EB13B8;
  *(_QWORD *)(a1 + 4384) = &unk_1E7EB16E0;
  *(_QWORD *)(a1 + 4416) = &unk_1E7EB17D0;
  *(_QWORD *)(a1 + 4320) = 4;
  *(_QWORD *)(a1 + 4336) = 0;
  *(_QWORD *)(a1 + 4328) = 0;
  *(_QWORD *)(a1 + 4341) = 0;
  *(_QWORD *)(a1 + 4352) = a4;
  *(_QWORD *)(a1 + 4360) = 4;
  *(_QWORD *)(a1 + 4376) = 0;
  *(_QWORD *)(a1 + 4368) = 0;
  AGCLLVMUserShader::enableStatistics((uint64_t)v7, *(_DWORD *)a4 & 1, (*(_DWORD *)a4 >> 1) & 1);
  *(_BYTE *)(a1 + 18) = (*(_BYTE *)a4 & 8) != 0;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 2760) = (*(_DWORD *)a4 & 0x4000000) != 0;
  *(_BYTE *)(a1 + 20) = (*(_BYTE *)a4 & 4) != 0;
  *(_BYTE *)(a1 + 3712) = *(_BYTE *)(a4 + 1) & 1;
  *(_DWORD *)(a1 + 4344) = AGCLLVMUserShader::parseMaxTotalThreadsPerThreadgroup((AGCLLVMUserShader *)a1);
  *(_BYTE *)(a1 + 3713) = 1;
  *(_BYTE *)(a1 + 4348) = (*(_DWORD *)a4 & 0x20000000) != 0;
  v8 = *(llvm::Module **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 368);
  v16 = "llvm.module.flags";
  v17 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v8, (const llvm::Twine *)&v16);
  if (NamedMetadata)
  {
    v10 = (llvm::NamedMDNode *)NamedMetadata;
    for (i = 0; i < llvm::NamedMDNode::getNumOperands(v10); ++i)
    {
      Operand = llvm::NamedMDNode::getOperand(v10);
      v13 = 8 - 8 * *(unsigned int *)(Operand + 8);
      while (v13)
      {
        v14 = isStringMDNode(*(llvm::MDString **)(Operand + v13), "PIC Level");
        v13 += 8;
        if (v14)
        {
          llvm::ConstantInt::get();
          llvm::ValueAsMetadata::get();
          llvm::MDNode::replaceOperandWith();
          goto LABEL_10;
        }
      }
    }
  }
  llvm::Module::addModuleFlag();
LABEL_10:
  llvm::Module::getOrInsertNamedMetadata();
  return a1;
}

BOOL AGCLLVMUserFragmentShader::getEffectiveFragmentRate(int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  int v7;

  if (a1 == 1 && a3 == 18)
  {
    return *(_QWORD *)a2 == 0x706D61732E726961
        && *(_QWORD *)(a2 + 8) == 0x5F6B73616D5F656CLL
        && *(_WORD *)(a2 + 16) == 28265;
  }
  else
  {
    if (a3 != 21)
      return 0;
    v5 = 0x6169722E636F6C6FLL;
    v6 = bswap64(*(_QWORD *)a2);
    if (v6 == 0x6169722E636F6C6FLL
      && (v5 = 0x725F73616D706C65, v6 = bswap64(*(_QWORD *)(a2 + 8)), v6 == 0x725F73616D706C65)
      && (v5 = 0x706C655F6D61736BLL, v6 = bswap64(*(_QWORD *)(a2 + 13)), v6 == 0x706C655F6D61736BLL))
    {
      v7 = 0;
    }
    else if (v5 < v6)
    {
      v7 = -1;
    }
    else
    {
      v7 = 1;
    }
    return v7 == 0;
  }
}

llvm::GetElementPtrInst *AGCLLVMBuilder::CreateConstInBoundsGEP1_32(AGCLLVMBuilder *this, llvm::Type *a2, llvm::Value *a3)
{
  uint64_t v5;
  uint64_t v6;
  llvm::GetElementPtrInst *v7;
  _BYTE v9[32];
  __int16 v10;
  __int16 v11;
  uint64_t *v12;

  v5 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v5 = **(_QWORD **)(v5 + 16);
  v6 = **(_QWORD **)(v5 + 16);
  v10 = 257;
  llvm::Type::getInt32Ty(*((llvm::Type **)this + 9), a2);
  v12 = (uint64_t *)llvm::ConstantInt::get();
  v7 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Type *, uint64_t **, uint64_t, uint64_t))(**((_QWORD **)this + 10) + 48))(*((_QWORD *)this + 10), v6, a2, &v12, 1, 1);
  if (!v7)
  {
    v11 = 257;
    v7 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create(v6, (uint64_t *)a2, &v12, 1);
    llvm::GetElementPtrInst::setIsInBounds(v7);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this + 1, (uint64_t)v7, (uint64_t)v9);
  }
  return v7;
}

llvm::GetElementPtrInst *AGCLLVMBuilder::CreateConstInBoundsGEP2_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, unsigned int a5, const llvm::Twine *a6)
{
  unsigned int v6;
  uint64_t v8;
  llvm::Type *v9;
  _BYTE v11[32];
  __int16 v12;

  v6 = a3;
  v8 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  v9 = **(llvm::Type ***)(v8 + 16);
  v12 = 257;
  return llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(this + 1, v9, a2, v6, (uint64_t)v11, a6);
}

uint64_t AGCLLVMUserFragmentShader::buildAlphaQuantize(AGCLLVMUserFragmentShader *this, llvm::Value *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v5 = *((_QWORD *)v4 + 50);
  v14 = *(_OWORD *)(v4 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v4 + 40));
  v16 = *((_DWORD *)v4 + 34);
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 88))(v5, &v14, a2, 8, 0, 1);
  if (v15)
    llvm::MetadataTracking::untrack();
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v8 = *((_QWORD *)v7 + 50);
  v11 = *(_OWORD *)(v7 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v7 + 40));
  v13 = *((_DWORD *)v7 + 34);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 96))(v8, &v11, v6, 8, 0, 32);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

uint64_t blendIsNoOpForPassthrough(int a1, int a2, int a3)
{
  int v3;
  uint64_t result;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;

  v3 = a1 - 1;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((a2 != 2 || a3 != 1) && (a2 != 4 || a3 != 3) && (a2 != 4 || a3 != 7))
      {
        v6 = a3 == 3 || a3 == 7;
        v7 = v6;
        if ((a2 != 8 || !v7) && (a2 != 6 || a3 != 5) && (a2 != 6 || a3 != 9))
        {
          v8 = a3 == 5 || a3 == 9;
          v9 = v8;
          if ((a2 != 10 || !v9) && (a2 != 1 || a3 != 2) && (a2 != 3 || a3 != 4) && (a2 != 7 || a3 != 4))
          {
            v10 = a2 == 3 || a2 == 7;
            v11 = v10;
            if ((a3 != 8 || !v11) && (a2 != 5 || a3 != 6) && (a2 != 9 || a3 != 6))
            {
              v5 = (a2 == 5 || a2 == 9) && a3 == 10;
              goto LABEL_60;
            }
          }
        }
      }
      break;
    case 3:
      v5 = a2 == 2 && a3 == 1;
      goto LABEL_60;
    case 4:
    case 5:
      v5 = a2 == 1 && a3 == 2;
LABEL_60:
      result = v5;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

llvm::GetElementPtrInst *llvm::IRBuilderBase::CreateConstInBoundsGEP2_32(llvm::Type **this, llvm::Type *a2, llvm::Value *a3, unsigned int a4, uint64_t a5, const llvm::Twine *a6)
{
  llvm::LLVMContext *v10;
  llvm::GetElementPtrInst *v11;
  uint64_t *v13[3];

  v13[2] = *(uint64_t **)MEMORY[0x1E0C80C00];
  llvm::Type::getInt32Ty(this[8], a2);
  v13[0] = (uint64_t *)llvm::ConstantInt::get();
  llvm::Type::getInt32Ty(this[8], v10);
  v13[1] = (uint64_t *)llvm::ConstantInt::get();
  v11 = (llvm::GetElementPtrInst *)(*(uint64_t (**)(llvm::Type *, llvm::Type *, llvm::Value *, uint64_t **, uint64_t, uint64_t))(*(_QWORD *)this[9] + 48))(this[9], a2, a3, v13, 2, 1);
  if (!v11)
  {
    v11 = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::Create((uint64_t)a2, (uint64_t *)a3, v13, 2);
    llvm::GetElementPtrInst::setIsInBounds(v11);
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)v11, a5);
  }
  return v11;
}

void AGCLLVMGLFragmentShader::~AGCLLVMGLFragmentShader(AGCLLVMGLFragmentShader *this)
{
  AGCLLVMObject *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7EB2748;
  v2 = (AGCLLVMGLFragmentShader *)((char *)this + 5936);
  *((_QWORD *)this + 742) = &unk_1E7EB2AC8;
  *((_QWORD *)this + 746) = &unk_1E7EB2BB8;
  *((_QWORD *)this + 540) = &unk_1E7EB29C8;
  v3 = *((_QWORD *)this + 740);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGLFragmentShader *)((char *)this + 5904));
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(this, (uint64_t *)off_1E7EB2BC8);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7EB2748;
  v2 = (AGCLLVMGLFragmentShader *)((char *)this + 5936);
  *((_QWORD *)this + 742) = &unk_1E7EB2AC8;
  *((_QWORD *)this + 746) = &unk_1E7EB2BB8;
  *((_QWORD *)this + 540) = &unk_1E7EB29C8;
  v3 = *((_QWORD *)this + 740);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGLFragmentShader *)((char *)this + 5904));
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(this, (uint64_t *)off_1E7EB2BC8);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMGLFragmentShader::adjustDfDyForInversion(AGCLLVMGLFragmentShader *this, llvm::Type **a2)
{
  llvm::Type *FragCoordYAdjustAndType;
  unsigned int v5;
  unsigned int v6;
  const llvm::Twine *v7;
  llvm::Type **ConstInBoundsGEP2_32;
  uint64_t *v9;
  llvm::Value *v10;
  llvm::Type *v11;
  llvm::Value *AlignedLoad;
  llvm::IRBuilderBase *v13;
  llvm::Type *v14;
  uint64_t FPTrunc;
  char *v16;
  _BYTE v18[32];
  __int16 v19;

  FragCoordYAdjustAndType = (llvm::Type *)AGCLLVMGLFragmentShader::getFragCoordYAdjustAndType(this);
  ConstInBoundsGEP2_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), FragCoordYAdjustAndType, 0, v5, v6, v7);
  v9 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v19 = 257;
  v11 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP2_32, v10);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v9 + 5, v11, (uint64_t)ConstInBoundsGEP2_32, 0, (uint64_t)v18);
  v13 = (AGCLLVMGLFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v14 = *a2;
  v19 = 257;
  FPTrunc = llvm::IRBuilderBase::CreateFPTrunc(v13, AlignedLoad, v14, (const llvm::Twine *)v18);
  v16 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v19 = 257;
  return llvm::IRBuilderBase::CreateFMul((uint64_t)v16, (uint64_t)a2, FPTrunc, (uint64_t)v18);
}

uint64_t AGCLLVMGLFragmentShader::initCompile(AGCLLVMGLFragmentShader *this)
{
  uint64_t inited;
  uint64_t v3;

  inited = AGCLLVMUserFragmentShader::initCompile(this);
  v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 168))(v3, *((_QWORD *)this + 614));
  return inited;
}

uint64_t AGCLLVMGLFragmentShader::remapTexSampUnit(AGCLLVMGLFragmentShader *this, uint64_t a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 737);
  if (*v2 > a2)
    return v2[a2 + 1];
  return a2;
}

uint64_t AGCLLVMGLFragmentShader::getPCFStateForUnit(AGCLLVMGLFragmentShader *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 735);
  if (v2)
    return *(unsigned __int16 *)(v2 + 2 * a2);
  else
    return 0;
}

BOOL AGCLLVMGLFragmentShader::needsPCFClamp(AGCLLVMGLFragmentShader *this)
{
  return *((_QWORD *)this + 735) != 0;
}

uint64_t AGCLLVMGLFragmentShader::getTextureBiasStateForUnit(AGCLLVMGLFragmentShader *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 736);
  if (v2)
    return *(unsigned __int8 *)(v2 + a2);
  else
    return 0;
}

uint64_t AGCLLVMGLFragmentShader::hasES1LodBias(AGCLLVMGLFragmentShader *this)
{
  return *((unsigned __int8 *)this + 5928);
}

uint64_t AGCLLVMGLFragmentShader::areIndirectTexturesSupported(AGCLLVMGLFragmentShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLFragmentShader::areIndirectTextureWritesSupported(AGCLLVMGLFragmentShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLFragmentShader::areIndirectSamplersSupported(AGCLLVMGLFragmentShader *this)
{
  return 0;
}

void AGCLLVMGLFragmentShader::getFragmentVaryings(AGCLLVMBuilder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  AGCLLVMUserShader *v8;
  AGCLLVMUserShader *v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  llvm::MDString *v13;
  llvm::MDString *v14;
  llvm::MDString *v15;
  const void *String;
  size_t v17;
  size_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  unsigned int v23;
  int Key;
  int v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  void **v39;
  void *__p[2];
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48[2];
  _QWORD v49[5];

  v49[3] = *MEMORY[0x1E0C80C00];
  *a4 = a4 + 2;
  a4[1] = 0x400000000;
  AGCLLVMBuilder::getVariableTypeMap(a1);
  AGCLLVMUserShader::getVaryingModeMap(v8);
  AGCLLVMUserShader::getInterpolationLocationMap(v9);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v10 = *(_DWORD *)(a2 + 32);
  else
    v10 = 1;
  v42 = 0;
  LODWORD(v43) = 3;
  parseMDInt(0, a3, (unsigned int *)&v43, &v42);
  v11 = a3 - 8 * *(unsigned int *)(a3 + 8);
  v12 = *(_BYTE **)(v11 + 32);
  if (v12)
  {
    if (*v12)
      v13 = 0;
    else
      v13 = *(llvm::MDString **)(v11 + 32);
  }
  else
  {
    v13 = 0;
  }
  v14 = *(llvm::MDString **)(v11 + 40);
  if (v14)
  {
    if (*(_BYTE *)v14)
      v15 = 0;
    else
      v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  String = (const void *)llvm::MDString::getString(v13);
  v18 = v17;
  v19 = (const void *)llvm::MDString::getString(v15);
  v21 = v20;
  __p[0] = 0;
  __p[1] = 0;
  v41 = 0;
  v32 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 1;
  v34 = 0;
  v35 = 0;
  v33 = 0;
  v31 = MEMORY[0x1E0DE2AB0] + 16;
  v39 = __p;
  llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v31);
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    a2 = **(_QWORD **)(a2 + 16);
  llvm::Type::print((llvm::Type *)a2, (llvm::raw_ostream *)&v31);
  v22 = *(_DWORD *)(*llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>(v19, v21) + 8);
  v23 = *(_DWORD *)(*llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>(String, v18)+ 8);
  if (v23 == 1)
    v22 = 3;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48[0] = v49;
  v48[1] = (void *)0x500000000;
  llvm::SmallVectorImpl<unsigned int>::assign((uint64_t)v48, 5uLL, -559038737);
  v43 = __PAIR64__(v23, v10);
  LODWORD(v44) = v22;
  Key = llvm::StringMapImpl::FindKey();
  v25 = 10;
  if (Key != -1 && Key != (unint64_t)dword_1ED839A70)
    v25 = *(_DWORD *)(*(_QWORD *)(AGCLLVMBuilder::getVariableTypeMap(void)::variable_type_map + 8 * Key) + 8);
  HIDWORD(v44) = v25;
  v45 = v42;
  v47 = AGCLLVMUserFragmentShader::setupInterpolation(a1, 1, v42, v43);
  llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v31);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  v26 = llvm::SmallVectorTemplateCommon<AGCLLVMUserFragmentShader::FragmentVarying,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserFragmentShader::FragmentVarying,false>>((uint64_t)a4, (unint64_t)&v43);
  v27 = *a4 + 80 * *((unsigned int *)a4 + 2);
  v28 = *(_OWORD *)v26;
  v29 = *(_OWORD *)(v26 + 16);
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v26 + 32);
  *(_OWORD *)v27 = v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(_QWORD *)(v27 + 48) = 0x500000000;
  *(_QWORD *)(v27 + 40) = v27 + 56;
  v30 = v27 + 40;
  if (*(_DWORD *)(v26 + 48))
    llvm::SmallVectorImpl<unsigned int>::operator=(v30, v26 + 40);
  ++*((_DWORD *)a4 + 2);
  if (v48[0] != v49)
    free(v48[0]);
}

uint64_t AGCLLVMGLFragmentShader::getFragmentViewportOrLayerIdVarying@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0x500000000;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  return llvm::SmallVectorImpl<unsigned int>::assign(a1 + 40, 5uLL, -559038737);
}

uint64_t AGCLLVMGLFragmentShader::getPrimitiveIdVarying@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0x500000000;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  return llvm::SmallVectorImpl<unsigned int>::assign(a1 + 40, 5uLL, -559038737);
}

uint64_t AGCLLVMGLFragmentShader::getBarycentricCoordVarying@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0x500000000;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  return llvm::SmallVectorImpl<unsigned int>::assign(a1 + 40, 5uLL, -559038737);
}

uint64_t AGCLLVMGLFragmentShader::adjustFragCoordY(AGCLLVMGLFragmentShader *this, llvm::Value *a2)
{
  llvm::Type *FragCoordYAdjustAndType;
  unsigned int v5;
  unsigned int v6;
  const llvm::Twine *v7;
  llvm::Type **ConstInBoundsGEP2_32;
  unsigned int v9;
  unsigned int v10;
  const llvm::Twine *v11;
  llvm::Type **v12;
  uint64_t *v13;
  llvm::Value *v14;
  llvm::Type *v15;
  uint64_t AlignedLoad;
  uint64_t *v17;
  llvm::Value *v18;
  llvm::Type *v19;
  uint64_t v20;
  char *v21;
  uint64_t FMul;
  _WORD v24[20];
  _BYTE v25[32];
  __int16 v26;

  FragCoordYAdjustAndType = (llvm::Type *)AGCLLVMGLFragmentShader::getFragCoordYAdjustAndType(this);
  ConstInBoundsGEP2_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), FragCoordYAdjustAndType, 0, v5, v6, v7);
  v12 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), FragCoordYAdjustAndType, (llvm::Value *)1, v9, v10, v11);
  v13 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v26 = 257;
  v15 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP2_32, v14);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v15, (uint64_t)ConstInBoundsGEP2_32, 0, (uint64_t)v25);
  v17 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v26 = 257;
  v19 = AGCLLVMBuilder::tryDeducePointeeType(v12, v18);
  v20 = llvm::IRBuilderBase::CreateAlignedLoad(v17 + 5, v19, (uint64_t)v12, 0, (uint64_t)v25);
  v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v26 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)v21, (uint64_t)a2, AlignedLoad, (uint64_t)v25);
  v24[16] = 257;
  return llvm::IRBuilderBase::CreateFAdd((uint64_t)v21, FMul, v20, (uint64_t)v24);
}

void AGCLLVMGLFragmentShader::getCompilationKeyDescription(AGCLLVMGLFragmentShader *this@<X0>, std::string *a2@<X8>)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t j;
  char *v8;
  uint64_t k;
  uint64_t m;
  uint64_t v11;
  uint64_t n;
  uint64_t ii;
  unsigned int *v14;
  uint64_t jj;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  std::string::size_type v21;
  uint64_t kk;
  uint64_t v23;
  uint64_t mm;
  uint64_t nn;
  std::string *v26;
  std::string::size_type v27;
  uint64_t i1;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string *v36;
  std::string v37;
  std::string v38;
  std::string v39;
  void *v40[2];
  char v41;
  std::string v42;
  void *v43[2];
  char v44;
  std::string v45;
  void *v46[2];
  char v47;
  std::string v48;
  void *v49[2];
  char v50;
  std::string v51;
  void *v52[2];
  char v53;
  std::string v54;
  void *__p[2];
  char v56;
  std::string v57;
  void *v58[2];
  char v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  void *v64[2];
  char v65;
  std::string v66;
  void *v67[2];
  std::string::size_type v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned int *)*((_QWORD *)this + 727);
  std::string::basic_string[abi:nn180100]<0>(v49, "AGCFragmentContextStateGL");
  std::string::basic_string[abi:nn180100]<0>(&v54, "AGCFragmentContextState");
  std::string::basic_string[abi:nn180100]<0>(v52, "fragmentState");
  std::string::basic_string[abi:nn180100]<0>(&v90, "AGCFragmentState");
  std::string::basic_string[abi:nn180100]<0>(&v75, "GL and Metal state:");
  std::string::basic_string[abi:nn180100]<0>(&v73, "alphaToCoverage");
  _agcFieldString<unsigned int>(&v76, (const void **)&v73.__r_.__value_.__l.__data_, *v4 & 1);
  std::string::basic_string[abi:nn180100]<0>(v71, "alphaToOne");
  _agcFieldString<unsigned int>(&v77, (const void **)v71, (*v4 >> 1) & 1);
  std::string::basic_string[abi:nn180100]<0>(v69, "sampleCoverage");
  _agcFieldString<unsigned int>(&v78, (const void **)v69, (*v4 >> 2) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v79, "GL specific state:");
  std::string::basic_string[abi:nn180100]<0>(v67, "depthStencilWriteDisabled");
  _agcFieldString<unsigned int>(&v80, (const void **)v67, (*v4 >> 4) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v66, "logicOp");
  _agcFieldString<unsigned int>(&v81, (const void **)&v66.__r_.__value_.__l.__data_, (*v4 >> 5) & 1);
  std::string::basic_string[abi:nn180100]<0>(v64, "logicOpState");
  _agcFieldString<char const*>(&v82, (const void **)v64, _agcLogicOpStrings[((unint64_t)*v4 >> 6) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(&v63, "alphaTest");
  _agcFieldString<unsigned int>(&v83, (const void **)&v63.__r_.__value_.__l.__data_, (*v4 >> 11) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v62, "alphaTestFunc");
  _agcFieldString<char const*>(&v84, (const void **)&v62.__r_.__value_.__l.__data_, _agcCompareFuncStrings[(unsigned __int16)*v4 >> 12]);
  std::string::basic_string[abi:nn180100]<0>(&v61, "smoothPoints");
  _agcFieldString<unsigned int>(&v85, (const void **)&v61.__r_.__value_.__l.__data_, HIWORD(*v4) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v60, "pointSpriteEnabled");
  _agcFieldString<unsigned int>(&v86, (const void **)&v60.__r_.__value_.__l.__data_, (*v4 >> 17) & 1);
  std::string::basic_string[abi:nn180100]<0>(v58, "outputPointSize");
  _agcFieldString<unsigned int>(&v87, (const void **)v58, (*v4 >> 18) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v57, "shaderDebugEnable");
  _agcFieldString<unsigned int>(&v88, (const void **)&v57.__r_.__value_.__l.__data_, (*v4 >> 19) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v89, (const void **)__p, *v4 >> 20);
  _agcGroupWithHeader(&v51, (uint64_t)&v90, 0, (uint64_t)&v75, 15);
  v5 = 360;
  do
  {
    if (v75.__r_.__value_.__s.__data_[v5 - 1] < 0)
      operator delete(*(void **)((char *)&v74.__r_.__value_.__l.__data_ + v5));
    v5 -= 24;
  }
  while (v5);
  if (v56 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v59 < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  _agcFieldString<std::string>(&v90, (const void **)v52, (uint64_t)&v51);
  std::string::basic_string[abi:nn180100]<0>(v64, "colorMaskState");
  std::string::basic_string[abi:nn180100]<0>(&v73, "AGCColorMaskState");
  std::string::basic_string[abi:nn180100]<0>(v71, "redEnableBits");
  _agcFieldStringHex(&v75, (const void **)v71);
  std::string::basic_string[abi:nn180100]<0>(v69, "greenEnableBits");
  _agcFieldStringHex(&v76, (const void **)v69);
  std::string::basic_string[abi:nn180100]<0>(v67, "blueEnableBits");
  _agcFieldStringHex(&v77, (const void **)v67);
  std::string::basic_string[abi:nn180100]<0>(&v66, "alphaEnableBits");
  _agcFieldStringHex(&v78, (const void **)&v66.__r_.__value_.__l.__data_);
  _agcGroupWithHeader(&v63, (uint64_t)&v73, 0, (uint64_t)&v75, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v78.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v78.__r_.__value_.__l.__data_ + i * 8));
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  _agcFieldString<std::string>(&v91, (const void **)v64, (uint64_t)&v63);
  _agcGroupWithHeader(&v73, (uint64_t)&v54, 0, (uint64_t)&v90, 2);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v91.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v90 + j * 8 + 24));
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:nn180100]<0>(&v61, "blendState");
  std::string::basic_string[abi:nn180100]<0>(&v90, "AGCBlendState");
  std::string::basic_string[abi:nn180100]<0>(v71, "enabled");
  if ((v4[4] & 1) != 0)
    v8 = "yes";
  else
    v8 = "no";
  _agcFieldString<char const*>(&v75, (const void **)v71, v8);
  std::string::basic_string[abi:nn180100]<0>(v69, "src");
  _agcFieldString<char const*>(&v76, (const void **)v69, _agcBlendFactorStrings[((unint64_t)v4[4] >> 1) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(v67, "dst");
  _agcFieldString<char const*>(&v77, (const void **)v67, _agcBlendFactorStrings[((unint64_t)v4[4] >> 6) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(&v66, "srcA");
  _agcFieldString<char const*>(&v78, (const void **)&v66.__r_.__value_.__l.__data_, _agcBlendFactorStrings[(unsigned __int16)v4[4] >> 11]);
  std::string::basic_string[abi:nn180100]<0>(v64, "dstA");
  _agcFieldString<char const*>(&v79, (const void **)v64, _agcBlendFactorStrings[*((_WORD *)v4 + 9) & 0x1F]);
  std::string::basic_string[abi:nn180100]<0>(&v63, "equation");
  _agcFieldString<char const*>(&v80, (const void **)&v63.__r_.__value_.__l.__data_, _agcBlendEquationStrings[((unint64_t)v4[4] >> 21) & 7]);
  std::string::basic_string[abi:nn180100]<0>(&v62, "equationA");
  _agcFieldString<char const*>(&v81, (const void **)&v62.__r_.__value_.__l.__data_, _agcBlendEquationStrings[*((_BYTE *)v4 + 19) & 7]);
  _agcGroupWithHeader(&v60, (uint64_t)&v90, 0, (uint64_t)&v75, 7);
  for (k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v81.__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(*(void **)((char *)&v81.__r_.__value_.__l.__data_ + k * 8));
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  _agcFieldString<std::string>(&v74, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v60);
  _agcGroupWithHeader(&v38, (uint64_t)v49, 0, (uint64_t)&v73, 2);
  for (m = 0; m != -6; m -= 3)
  {
    if (SHIBYTE(v74.__r_.__value_.__r.__words[m + 2]) < 0)
      operator delete(*(void **)((char *)&v73 + m * 8 + 24));
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v49[0]);
  v11 = *((_QWORD *)this + 614);
  std::string::basic_string[abi:nn180100]<0>(&v73, "AGCDrawBufferState");
  std::string::basic_string[abi:nn180100]<0>(v71, "enabledBits");
  _agcFieldStringHex(&v90, (const void **)v71);
  std::string::basic_string[abi:nn180100]<0>(v69, "sampleCount");
  _agcFieldString<unsigned int>(&v91, (const void **)v69, (*(_DWORD *)(v11 + 32) >> 8) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v67, "colorSampleCount");
  _agcFieldString<unsigned int>(&v92, (const void **)v67, (unsigned __int16)*(_DWORD *)(v11 + 32) >> 12);
  std::string::basic_string[abi:nn180100]<0>(&v66, "outputPartitionSize");
  _agcFieldString<unsigned int>(&v93, (const void **)&v66.__r_.__value_.__l.__data_, *(_WORD *)(v11 + 34) & 0x1FF);
  std::string::basic_string[abi:nn180100]<0>(v64, "LIBSpilling");
  _agcFieldString<unsigned int>(&v94, (const void **)v64, (*(_DWORD *)(v11 + 32) >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(&v63, "unused");
  _agcFieldString<unsigned int>(&v95, (const void **)&v63.__r_.__value_.__l.__data_, *(_DWORD *)(v11 + 32) >> 27);
  std::string::basic_string[abi:nn180100]<0>(&v62, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(&v61, "encoded[0]");
  _agcStringRepresentation(&v60, (_DWORD *)v11);
  _agcFieldString<std::string>(&v75, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&v60);
  std::string::basic_string[abi:nn180100]<0>(v58, "encoded[1]");
  _agcStringRepresentation(&v57, (_DWORD *)(v11 + 4));
  _agcFieldString<std::string>(&v76, (const void **)v58, (uint64_t)&v57);
  std::string::basic_string[abi:nn180100]<0>(__p, "encoded[2]");
  _agcStringRepresentation(&v54, (_DWORD *)(v11 + 8));
  _agcFieldString<std::string>(&v77, (const void **)__p, (uint64_t)&v54);
  std::string::basic_string[abi:nn180100]<0>(v52, "encoded[3]");
  _agcStringRepresentation(&v51, (_DWORD *)(v11 + 12));
  _agcFieldString<std::string>(&v78, (const void **)v52, (uint64_t)&v51);
  std::string::basic_string[abi:nn180100]<0>(v49, "encoded[4]");
  _agcStringRepresentation(&v48, (_DWORD *)(v11 + 16));
  _agcFieldString<std::string>(&v79, (const void **)v49, (uint64_t)&v48);
  std::string::basic_string[abi:nn180100]<0>(v46, "encoded[5]");
  _agcStringRepresentation(&v45, (_DWORD *)(v11 + 20));
  _agcFieldString<std::string>(&v80, (const void **)v46, (uint64_t)&v45);
  std::string::basic_string[abi:nn180100]<0>(v43, "encoded[6]");
  _agcStringRepresentation(&v42, (_DWORD *)(v11 + 24));
  _agcFieldString<std::string>(&v81, (const void **)v43, (uint64_t)&v42);
  std::string::basic_string[abi:nn180100]<0>(v40, "encoded[7]");
  _agcStringRepresentation(&v39, (_DWORD *)(v11 + 28));
  _agcFieldString<std::string>(&v82, (const void **)v40, (uint64_t)&v39);
  _agcGroupWithHeader(&v96, (uint64_t)&v62, 0, (uint64_t)&v75, 8);
  _agcGroupWithHeader(&v37, (uint64_t)&v73, 0, (uint64_t)&v90, 7);
  for (n = 0; n != -21; n -= 3)
  {
    if (SHIBYTE(v96.__r_.__value_.__r.__words[n + 2]) < 0)
      operator delete(*(void **)((char *)&v96.__r_.__value_.__l.__data_ + n * 8));
  }
  for (ii = 0; ii != -24; ii -= 3)
  {
    if (SHIBYTE(v82.__r_.__value_.__r.__words[ii + 2]) < 0)
      operator delete(*(void **)((char *)&v82.__r_.__value_.__l.__data_ + ii * 8));
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(v46[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v59 < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (v65 < 0)
    operator delete(v64[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v14 = (unsigned int *)*((_QWORD *)this + 737);
  std::string::basic_string[abi:nn180100]<0>(&v90, (char *)&unk_1C3E4D9BB);
  for (jj = 1; jj != 33; ++jj)
  {
    std::to_string(&v73, v14[jj]);
    v16 = std::string::append(&v73, " ");
    v17 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v75;
    else
      v18 = (std::string *)v75.__r_.__value_.__r.__words[0];
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    else
      size = v75.__r_.__value_.__l.__size_;
    std::string::append(&v90, (const std::string::value_type *)v18, size);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v73, "AGCSamplerRemapStateGL");
  std::string::basic_string[abi:nn180100]<0>(v71, "samplerCount");
  _agcFieldString<unsigned int>(&v75, (const void **)v71, *v14);
  std::string::basic_string[abi:nn180100]<0>(v69, "samplerToTexUnitMap");
  std::operator+<char>();
  v20 = std::string::append(&v66, "]");
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)v67 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v68 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  _agcFieldString<std::string>(&v76, (const void **)v69, (uint64_t)v67);
  _agcGroupWithHeader(&v60, (uint64_t)&v73, 0, (uint64_t)&v75, 2);
  for (kk = 0; kk != -6; kk -= 3)
  {
    if (SHIBYTE(v76.__r_.__value_.__r.__words[kk + 2]) < 0)
      operator delete(*(void **)((char *)&v75 + kk * 8 + 24));
  }
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  v23 = *((_QWORD *)this + 735);
  if (v23)
  {
    v36 = a2;
    std::string::basic_string[abi:nn180100]<0>(&v62, (char *)&unk_1C3E4D9BB);
    for (mm = 0; mm != 32; ++mm)
    {
      std::string::basic_string[abi:nn180100]<0>(&v90, "AGCSamplerPCFState");
      std::string::basic_string[abi:nn180100]<0>(&v73, "compareFunc");
      _agcFieldString<char const*>(&v75, (const void **)&v73.__r_.__value_.__l.__data_, _agcCompareFuncStrings[*(_WORD *)(v23 + 2 * mm) & 0xF]);
      std::string::basic_string[abi:nn180100]<0>(v71, "clampPCFEnabled");
      _agcFieldString<unsigned short>(&v76, (const void **)v71, (*(_WORD *)(v23 + 2 * mm) >> 4) & 1);
      std::string::basic_string[abi:nn180100]<0>(v69, "mipmapMinFilterEnabled");
      _agcFieldString<unsigned short>(&v77, (const void **)v69, (*(_WORD *)(v23 + 2 * mm) >> 5) & 1);
      std::string::basic_string[abi:nn180100]<0>(v67, "trilinearMinFilterEnabled");
      _agcFieldString<unsigned short>(&v78, (const void **)v67, (*(_WORD *)(v23 + 2 * mm) >> 6) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v66, "linearMinFilterEnabled");
      _agcFieldString<unsigned short>(&v79, (const void **)&v66.__r_.__value_.__l.__data_, (*(_WORD *)(v23 + 2 * mm) >> 7) & 1);
      std::string::basic_string[abi:nn180100]<0>(v64, "linearMagFilterEnabled");
      _agcFieldString<unsigned short>(&v80, (const void **)v64, HIBYTE(*(_WORD *)(v23 + 2 * mm)) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v63, "unused");
      _agcFieldString<unsigned short>(&v81, (const void **)&v63.__r_.__value_.__l.__data_, *(_WORD *)(v23 + 2 * mm) >> 9);
      _agcGroupWithHeader(&v61, (uint64_t)&v90, 1, (uint64_t)&v75, 7);
      for (nn = 0; nn != -21; nn -= 3)
      {
        if (SHIBYTE(v81.__r_.__value_.__r.__words[nn + 2]) < 0)
          operator delete(*(void **)((char *)&v81.__r_.__value_.__l.__data_ + nn * 8));
      }
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (v65 < 0)
        operator delete(v64[0]);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68) < 0)
        operator delete(v67[0]);
      if (v70 < 0)
        operator delete(v69[0]);
      if (v72 < 0)
        operator delete(v71[0]);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v61;
      else
        v26 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        v27 = v61.__r_.__value_.__l.__size_;
      std::string::append(&v62, (const std::string::value_type *)v26, v27);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:nn180100]<0>(&v90, "AGCSamplerPCFStates");
    std::string::basic_string[abi:nn180100]<0>(&v75, "pcf : ");
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v76, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    else
      v76 = v62;
    a2 = v36;
    _agcGroupWithHeader(&v73, (uint64_t)&v90, 0, (uint64_t)&v75, 2);
    for (i1 = 0; i1 != -6; i1 -= 3)
    {
      if (SHIBYTE(v76.__r_.__value_.__r.__words[i1 + 2]) < 0)
        operator delete(*(void **)((char *)&v75 + i1 * 8 + 24));
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v73, (char *)&unk_1C3E4D9BB);
  }
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v90, (const void **)&v38.__r_.__value_.__l.__data_, (const void **)&v37.__r_.__value_.__l.__data_);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v60;
  else
    v29 = (std::string *)v60.__r_.__value_.__r.__words[0];
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    v30 = v60.__r_.__value_.__l.__size_;
  v31 = std::string::append(&v90, (const std::string::value_type *)v29, v30);
  v32 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v73;
  else
    v33 = (std::string *)v73.__r_.__value_.__r.__words[0];
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  else
    v34 = v73.__r_.__value_.__l.__size_;
  v35 = std::string::append(&v75, (const std::string::value_type *)v33, v34);
  *a2 = *v35;
  v35->__r_.__value_.__r.__words[0] = 0;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

BOOL AGCLLVMGLFragmentShader::constructReply(AGCLLVMGLFragmentShader *this)
{
  _BOOL8 v2;
  int v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  flatbuffers::FlatBufferBuilder *v8;
  int v9;
  const char *v10;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMGLFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMGLFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = AGCLLVMUserFragmentShader::constructFlatReply(this);
    v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v6 = v5 + 2472;
    v5[2542] = 1;
    v7 = *((_DWORD *)v5 + 626) - *((_DWORD *)v5 + 630) + *((_DWORD *)v5 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v5 + 2472, v3);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(v6, v4);
    v8 = (AGCLLVMGLFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v9 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v6, v7);
    flatbuffers::FlatBufferBuilder::Finish(v8, v9, v10);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMGLFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  }
  return v2;
}

uint64_t AGCLLVMGLFragmentShader::requiresDebugInfo(AGCLLVMGLFragmentShader *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 727) + 2) >> 3) & 1;
}

void `non-virtual thunk to'AGCLLVMGLFragmentShader::~AGCLLVMGLFragmentShader(AGCLLVMGLFragmentShader *this)
{
  AGCLLVMUserFragmentShader *v1;
  AGCLLVMObject *v2;
  uint64_t v3;

  v1 = (AGCLLVMGLFragmentShader *)((char *)this - 4320);
  *((_QWORD *)this - 540) = &off_1E7EB2748;
  v2 = (AGCLLVMGLFragmentShader *)((char *)this + 1616);
  *((_QWORD *)this + 202) = &unk_1E7EB2AC8;
  *((_QWORD *)this + 206) = &unk_1E7EB2BB8;
  *(_QWORD *)this = &unk_1E7EB29C8;
  v3 = *((_QWORD *)this + 200);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGLFragmentShader *)((char *)this + 1584));
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(v1, (uint64_t *)off_1E7EB2BC8);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMUserFragmentShader *v1;
  AGCLLVMObject *v2;
  uint64_t v3;

  v1 = (AGCLLVMGLFragmentShader *)((char *)this - 4320);
  *((_QWORD *)this - 540) = &off_1E7EB2748;
  v2 = (AGCLLVMGLFragmentShader *)((char *)this + 1616);
  *((_QWORD *)this + 202) = &unk_1E7EB2AC8;
  *((_QWORD *)this + 206) = &unk_1E7EB2BB8;
  *(_QWORD *)this = &unk_1E7EB29C8;
  v3 = *((_QWORD *)this + 200);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMGLFragmentShader *)((char *)this + 1584));
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader(v1, (uint64_t *)off_1E7EB2BC8);
  AGCLLVMObject::~AGCLLVMObject(v2);
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMGLFragmentShader::~AGCLLVMGLFragmentShader(AGCLLVMGLFragmentShader *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EB2748;
  v1[742] = &unk_1E7EB2AC8;
  v1[746] = &unk_1E7EB2BB8;
  v1[540] = &unk_1E7EB29C8;
  v2 = v1[740];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 738));
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader((AGCLLVMUserFragmentShader *)v1, (uint64_t *)off_1E7EB2BC8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 742));
}

{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EB2748;
  v1[742] = &unk_1E7EB2AC8;
  v1[746] = &unk_1E7EB2BB8;
  v1[540] = &unk_1E7EB29C8;
  v2 = v1[740];
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v1 + 738));
  AGCLLVMUserFragmentShader::~AGCLLVMUserFragmentShader((AGCLLVMUserFragmentShader *)v1, (uint64_t *)off_1E7EB2BC8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 742));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t `virtual thunk to'AGCLLVMGLFragmentShader::requiresDebugInfo(AGCLLVMGLFragmentShader *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96) + 5816) + 2) >> 3) & 1;
}

void `virtual thunk to'AGCLLVMGLFragmentShader::getCompilationKeyDescription(AGCLLVMGLFragmentShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMGLFragmentShader::getCompilationKeyDescription((AGCLLVMGLFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMGLFragmentShader::constructReply(AGCLLVMGLFragmentShader *this)
{
  return AGCLLVMGLFragmentShader::constructReply((AGCLLVMGLFragmentShader *)((char *)this
                                                                           + *(_QWORD *)(*(_QWORD *)this - 152)));
}

void _agcGroupWithHeader(std::string *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  const std::string::value_type *p_p;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t i;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  void *v20[2];
  char v21;
  std::string v22;
  void *v23[2];
  char v24;
  void *__p;
  std::string::size_type v26;
  unsigned __int8 v27;
  std::string v28;
  std::string v29;
  std::string v30;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v28 = *(std::string *)a2;
  _agcIndentedLine((void **)&v29.__r_.__value_.__l.__data_, (std::string::value_type *)&v28, a3);
  std::string::basic_string[abi:nn180100]<0>(v23, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v23, a3);
  if ((v27 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v27 & 0x80u) == 0)
    v10 = v27;
  else
    v10 = v26;
  v11 = std::string::append(&v29, p_p, v10);
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v27 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if (!a5)
      goto LABEL_41;
    goto LABEL_20;
  }
  if (a5)
  {
LABEL_20:
    for (i = 24 * a5; i; i -= 24)
    {
      if (*(char *)(a4 + 23) < 0)
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      else
        v29 = *(std::string *)a4;
      v14 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v22, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v22 = v29;
      _agcIndentedLine(&__p, (std::string::value_type *)&v22, a3 + 1);
      if ((v27 & 0x80u) == 0)
        v15 = (const std::string::value_type *)&__p;
      else
        v15 = (const std::string::value_type *)__p;
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = v26;
      std::string::append(&v30, v15, v16);
      if ((char)v27 < 0)
        operator delete(__p);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v22.__r_.__value_.__l.__data_);
        if (v14 < 0)
LABEL_40:
          operator delete(v29.__r_.__value_.__l.__data_);
      }
      else if (v14 < 0)
      {
        goto LABEL_40;
      }
      a4 += 24;
    }
  }
LABEL_41:
  std::string::basic_string[abi:nn180100]<0>(v20, "}");
  _agcIndentedLine((void **)&v29.__r_.__value_.__l.__data_, (std::string::value_type *)v20, a3);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v30;
  else
    v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  else
    size = v30.__r_.__value_.__l.__size_;
  v19 = std::string::insert(&v29, 0, (const std::string::value_type *)v17, size);
  *a1 = *v19;
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void _agcFieldString<unsigned short>(std::string *a1, const void **a2, unsigned __int16 a3)
{
  std::string v5;

  std::to_string(&v5, a3);
  _agcFieldString<std::string>(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMGLFragmentShader::getFragCoordYAdjustAndType(AGCLLVMGLFragmentShader *this)
{
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  llvm::GlobalVariable *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11[0] = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 200);
  v11[1] = v11[0];
  v2 = llvm::StructType::get();
  v3 = (AGCLLVMGLFragmentShader *)((char *)this + 5904);
  if (!*((_QWORD *)this + 740))
  {
    v4 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v11[0] = "agc.frag_coord_y_adjust";
    v14 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v6 = *((_QWORD *)v5 + 47);
    v7 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v5 + 32), v4);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v6, v7);
    llvm::ValueHandleBase::operator=(v3, (uint64_t)v4);
  }
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v11, 2u, v3);
  v13 = v2;
  v8 = v12;
  if (v12 != -8192 && v12 != -4096 && v12 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v11);
  return v8;
}

uint64_t llvm::StringMap<ComponentType,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 17));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *std::__call_once_proxy[abi:nn180100]<std::tuple<AGCLLVMBuilder::getVariableTypeMap(void)::{lambda(llvm::StringMap<ComponentType,llvm::MallocAllocator> &)#1} &,llvm::StringMap<ComponentType,llvm::MallocAllocator> &>>(uint64_t a1)
{
  llvm::StringMapImpl *v1;
  uint64_t *result;

  v1 = *(llvm::StringMapImpl **)(*(_QWORD *)a1 + 8);
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "i1", 2uLL) + 8) = 2;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "BOOL", 4uLL) + 8) = 2;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "i8", 2uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "char", 4uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "int8_t", 6uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uchar", 5uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uint8_t", 7uLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "unsigned char", 0xDuLL) + 8) = 5;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "i16", 3uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "short", 5uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "int16_t", 7uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "ushort", 6uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uint16_t", 8uLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "unsigned short", 0xEuLL) + 8) = 4;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "i32", 3uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "int", 3uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "int32_t", 7uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uint", 4uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "uint32_t", 8uLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "unsigned int", 0xCuLL) + 8) = 3;
  *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "half", 4uLL) + 8) = 1;
  result = llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>(v1, "float", 5uLL);
  *(_DWORD *)(*result + 8) = 0;
  return result;
}

uint64_t AGCLLVMGLFragmentShader::AGCLLVMGLFragmentShader(uint64_t a1, AGCLLVMCtx *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v23;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 5936), a2, *(llvm::LLVMContext **)a3);
  v15 = AGCLLVMUserFragmentShader::AGCLLVMUserFragmentShader(a1, (uint64_t *)off_1E7EB2BC8, (llvm::Module *)a3, a4, a7, 1);
  *(_QWORD *)a1 = &off_1E7EB2748;
  *(_QWORD *)(a1 + 5936) = &unk_1E7EB2AC8;
  *(_QWORD *)(a1 + 5968) = &unk_1E7EB2BB8;
  *(_QWORD *)(a1 + 4320) = &unk_1E7EB29C8;
  *(_QWORD *)(a1 + 5880) = a6;
  *(_QWORD *)(a1 + 5888) = a8;
  *(_QWORD *)(a1 + 5896) = a5;
  *(_QWORD *)(a1 + 5904) = 4;
  *(_QWORD *)(a1 + 5920) = 0;
  *(_QWORD *)(a1 + 5912) = 0;
  AGCLLVMUserShader::markNoAliasForGL(v15);
  v16 = (_QWORD *)(a3 + 168);
  v17 = *(char *)(a3 + 191);
  if (v17 < 0)
  {
    if (*(_QWORD *)(a3 + 176) != 22)
    {
LABEL_15:
      v23 = 0;
      goto LABEL_16;
    }
    v16 = (_QWORD *)*v16;
  }
  else if (v17 != 22)
  {
    goto LABEL_15;
  }
  v18 = (_QWORD *)*v16;
  v19 = v16[1];
  v20 = *(_QWORD *)((char *)v16 + 14);
  v23 = v18 == (_QWORD *)0x746E656D67617246 && v19 == 0x505F65746174535FLL && v20 == 0x6D6172676F72505FLL;
LABEL_16:
  *(_BYTE *)(a1 + 5928) = v23;
  return a1;
}

void AGCLLVMGLVertexShader::~AGCLLVMGLVertexShader(AGCLLVMGLVertexShader *this)
{
  void *v2;
  void *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7EB3F40;
  *((_QWORD *)this + 1211) = &unk_1E7EB4278;
  *((_QWORD *)this + 1215) = &unk_1E7EB4368;
  v2 = (void *)*((_QWORD *)this + 1208);
  if (v2)
  {
    *((_QWORD *)this + 1209) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1201);
  if (v3)
  {
    *((_QWORD *)this + 1202) = v3;
    operator delete(v3);
  }
  v4 = (char *)*((_QWORD *)this + 1178);
  if (v4 != (char *)this + 9440)
    free(v4);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7EB4378);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMGLVertexShader *)((char *)this + 9688));
}

{
  void *v2;
  void *v3;
  char *v4;

  *(_QWORD *)this = &off_1E7EB3F40;
  *((_QWORD *)this + 1211) = &unk_1E7EB4278;
  *((_QWORD *)this + 1215) = &unk_1E7EB4368;
  v2 = (void *)*((_QWORD *)this + 1208);
  if (v2)
  {
    *((_QWORD *)this + 1209) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1201);
  if (v3)
  {
    *((_QWORD *)this + 1202) = v3;
    operator delete(v3);
  }
  v4 = (char *)*((_QWORD *)this + 1178);
  if (v4 != (char *)this + 9440)
    free(v4);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader(this, (uint64_t *)off_1E7EB4378);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMGLVertexShader *)((char *)this + 9688));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMGLVertexShader::initCompile(AGCLLVMGLVertexShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::MDString *v55;
  unint64_t *String;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  char v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  char *v66;
  unint64_t v67;
  _DWORD *v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  unint64_t v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  char *v82;
  unint64_t v83;
  _DWORD *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  unint64_t v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  int v96;
  char *v97;
  unint64_t v98;
  char *v99;
  _BYTE *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  __int128 v108;
  uint64_t v110;
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  int v115;
  int v116;
  int v117;

  AGCLLVMUserObject::initCompile(this);
  v2 = *((_QWORD *)this + 1205);
  v3 = *(unsigned int *)(v2 + 80);
  if (*(_DWORD *)(v2 + 80))
  {
    v4 = 0;
    do
    {
      v5 = (unsigned int *)*((_QWORD *)this + 1178);
      v6 = *((unsigned int *)this + 2358);
      v7 = v5;
      if ((_DWORD)v6)
      {
        v8 = 4 * v6;
        v7 = (unsigned int *)*((_QWORD *)this + 1178);
        while (*(unsigned __int8 *)(*((_QWORD *)this + 1205) + 4 * v4) >= *(unsigned __int8 *)(*((_QWORD *)this + 1205) + 4 * *v7))
        {
          ++v7;
          v8 -= 4;
          if (!v8)
            goto LABEL_14;
        }
      }
      if (&v5[v6] == v7)
      {
LABEL_14:
        llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)this + 9424, v4);
      }
      else
      {
        if (v6 >= *((_DWORD *)this + 2359))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
          v9 = *((_QWORD *)this + 1178);
          v6 = *((unsigned int *)this + 2358);
        }
        else
        {
          v9 = *((_QWORD *)this + 1178);
        }
        v10 = (_DWORD *)(v9 + 4 * (v7 - v5));
        *(_DWORD *)(v9 + 4 * v6) = *(_DWORD *)(v9 + 4 * v6 - 4);
        v11 = *((unsigned int *)this + 2358);
        v12 = v9 + 4 * v11 - 4;
        if ((_DWORD *)v12 != v10)
        {
          memmove(v10 + 1, v10, v12 - (_QWORD)v10);
          LODWORD(v11) = *((_DWORD *)this + 2358);
        }
        *((_DWORD *)this + 2358) = v11 + 1;
        *v10 = v4;
      }
      ++v4;
    }
    while (v4 != v3);
  }
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 9664), *((unsigned int *)this + 2358));
  v13 = *((unsigned int *)this + 2358);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    v117 = 0;
    v16 = (char *)this + 368;
    v110 = *((unsigned int *)this + 2358);
    do
    {
      v17 = *(unsigned int *)(*((_QWORD *)this + 1178) + 4 * v14);
      v18 = *((_QWORD *)this + 1205);
      v19 = *(_DWORD *)(v18 + 4 * v17);
      v20 = v19;
      v21 = *(_QWORD *)(v18 + 80);
      if (v19 == BYTE4(v21))
      {
        v22 = 0;
        v23 = 0;
        v24 = 3;
      }
      else if (v19 == BYTE5(v21))
      {
        v22 = 0;
        v23 = 1;
        v24 = 1;
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v22 = 1;
      }
      if (BYTE2(v19) > 0xAu)
        v25 = -1;
      else
        v25 = (dword_1C3DF0450[BYTE2(v19)] + dword_1C3DF0450[BYTE2(v19)] * BYTE1(v19) + 3) >> 2;
      *(_DWORD *)(*((_QWORD *)this + 1208) + 4 * v17) = v25;
      v26 = *(_DWORD *)(v18 + 4 * v17);
      v27 = BYTE1(v26);
      v28 = v26;
      v29 = BYTE2(v26);
      v30 = *((_DWORD *)this + 1256);
      v31 = (char *)*((_QWORD *)this + 1202);
      v32 = *((_QWORD *)this + 1203);
      if ((unint64_t)v31 >= v32)
      {
        v116 = v15;
        v34 = (char *)*((_QWORD *)this + 1201);
        v35 = 0xCCCCCCCCCCCCCCCDLL * ((v31 - v34) >> 2);
        v36 = v35 + 1;
        if (v35 + 1 > 0xCCCCCCCCCCCCCCCLL)
          goto LABEL_138;
        v111 = v25;
        v112 = v22;
        v113 = v23;
        v114 = BYTE4(v21);
        v115 = v20;
        v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v32 - (_QWORD)v34) >> 2);
        if (2 * v37 > v36)
          v36 = 2 * v37;
        if (v37 >= 0x666666666666666)
          v38 = 0xCCCCCCCCCCCCCCCLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = v24;
          v40 = std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(v38);
          v24 = v39;
          v38 = (unint64_t)v40;
          v31 = (char *)*((_QWORD *)this + 1202);
          v34 = (char *)*((_QWORD *)this + 1201);
        }
        else
        {
          v41 = 0;
        }
        v42 = (_DWORD *)(v38 + 20 * v35);
        *v42 = v27;
        v42[1] = v28;
        v42[2] = v29;
        v42[3] = v30;
        v42[4] = v24;
        v43 = v42;
        if (v31 != v34)
        {
          do
          {
            v44 = *(_OWORD *)(v31 - 20);
            *(v43 - 1) = *((_DWORD *)v31 - 1);
            *(_OWORD *)(v43 - 5) = v44;
            v43 -= 5;
            v31 -= 20;
          }
          while (v31 != v34);
          v34 = (char *)*((_QWORD *)this + 1201);
        }
        *((_QWORD *)this + 1201) = v43;
        v33 = v42 + 5;
        *((_QWORD *)this + 1202) = v42 + 5;
        *((_QWORD *)this + 1203) = v38 + 20 * v41;
        if (v34)
          operator delete(v34);
        v20 = v115;
        v15 = v116;
        v16 = (char *)this + 368;
        v13 = v110;
        BYTE4(v21) = v114;
        v22 = v112;
        v23 = v113;
        v25 = v111;
      }
      else
      {
        *(_DWORD *)v31 = v27;
        *((_DWORD *)v31 + 1) = v28;
        *((_DWORD *)v31 + 2) = v29;
        *((_DWORD *)v31 + 3) = v30;
        v33 = v31 + 20;
        *((_DWORD *)v31 + 4) = v24;
      }
      *((_QWORD *)this + 1202) = v33;
      v45 = *(_QWORD *)this;
      if (*(_BYTE *)(*(_QWORD *)&v16[*(_QWORD *)(*(_QWORD *)this - 24) + 32] + 1734))
      {
        if (v22)
        {
          v25 = 0;
          v15 |= *(_QWORD *)(*((_QWORD *)this + 1205) + 72) >> *(_BYTE *)(v18 + 4 * v17);
          v117 = 1;
        }
        else
        {
          v46 = v23 | v117;
          if (v20 == BYTE4(v21))
            v46 = 1;
          v117 = v46;
          if (v20 != BYTE4(v21))
            v15 |= v23;
          v25 = 0;
        }
      }
      *((_DWORD *)this + 1256) += v25;
      ++v14;
    }
    while (v14 != v13);
  }
  else
  {
    LOBYTE(v117) = 0;
    LOBYTE(v15) = 0;
    v45 = *(_QWORD *)this;
  }
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(v45 - 24) + 400) + 1735))
  {
    v47 = v15;
    v48 = *((_QWORD *)this + 22);
    if ((*(_WORD *)(v48 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
      v51 = *((_QWORD *)this + 22);
      v49 = *(_QWORD *)(v48 + 88);
      if ((*(_WORD *)(v51 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
      v48 = v51;
    }
    else
    {
      v49 = *(_QWORD *)(v48 + 88);
    }
    v52 = *(_QWORD *)(v48 + 88) + 40 * *(_QWORD *)(v48 + 96);
    if (v49 == v52)
    {
LABEL_80:
      v50 = 0;
    }
    else
    {
      while (1)
      {
        v53 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v49 + 32));
        if (*(_QWORD *)(v49 + 8) && v53 != 0)
        {
          v55 = *(llvm::MDString **)(v53 - 8 * *(unsigned int *)(v53 + 8) + 8);
          if (!*(_BYTE *)v55)
          {
            String = (unint64_t *)llvm::MDString::getString(v55);
            if (v57 == 29)
            {
              v58 = bswap64(*String);
              v59 = 0x6169722E76657274;
              if (v58 != 0x6169722E76657274)
                goto LABEL_75;
              v58 = bswap64(String[1]);
              v59 = 0x65785F7472616E73;
              if (v58 == 0x65785F7472616E73
                && (v59 = 0x666F726D5F666565, v58 = bswap64(String[2]), v58 == 0x666F726D5F666565)
                && (v59 = 0x666565646261636BLL,
                    v58 = bswap64(*(unint64_t *)((char *)String + 21)),
                    v58 == 0x666565646261636BLL))
              {
                v60 = 0;
              }
              else
              {
LABEL_75:
                v60 = v58 < v59 ? -1 : 1;
              }
              if (!v60)
                break;
            }
          }
        }
        v49 += 40;
        if (v49 == v52)
          goto LABEL_80;
      }
      v50 = 1;
    }
    LOBYTE(v15) = v47;
  }
  else
  {
    v50 = 0;
  }
  if ((v117 & 1) != 0)
  {
    v61 = v15;
    v62 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    v63 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v62 + 440))(v62, (char *)this + 5024, 4);
    v64 = v63;
    v65 = *(unsigned __int8 *)(*((_QWORD *)this + 1205) + 84);
    v66 = (char *)*((_QWORD *)this + 1202);
    v67 = *((_QWORD *)this + 1203);
    if ((unint64_t)v66 >= v67)
    {
      v69 = (char *)*((_QWORD *)this + 1201);
      v70 = 0xCCCCCCCCCCCCCCCDLL * ((v66 - v69) >> 2);
      v71 = v70 + 1;
      if (v70 + 1 > 0xCCCCCCCCCCCCCCCLL)
        goto LABEL_138;
      v72 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v67 - (_QWORD)v69) >> 2);
      if (2 * v72 > v71)
        v71 = 2 * v72;
      if (v72 >= 0x666666666666666)
        v73 = 0xCCCCCCCCCCCCCCCLL;
      else
        v73 = v71;
      if (v73)
      {
        v73 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(v73);
        v66 = (char *)*((_QWORD *)this + 1202);
        v69 = (char *)*((_QWORD *)this + 1201);
      }
      else
      {
        v74 = 0;
      }
      v75 = (_DWORD *)(v73 + 20 * v70);
      v76 = v73 + 20 * v74;
      *v75 = 0;
      v75[1] = v65;
      v75[2] = 3;
      v75[3] = v64;
      v75[4] = 4;
      v68 = v75 + 5;
      if (v66 != v69)
      {
        do
        {
          v77 = *(_OWORD *)(v66 - 20);
          *(v75 - 1) = *((_DWORD *)v66 - 1);
          *(_OWORD *)(v75 - 5) = v77;
          v75 -= 5;
          v66 -= 20;
        }
        while (v66 != v69);
        v69 = (char *)*((_QWORD *)this + 1201);
      }
      *((_QWORD *)this + 1201) = v75;
      *((_QWORD *)this + 1202) = v68;
      *((_QWORD *)this + 1203) = v76;
      if (v69)
        operator delete(v69);
    }
    else
    {
      *(_DWORD *)v66 = 0;
      *((_DWORD *)v66 + 1) = v65;
      *((_DWORD *)v66 + 2) = 3;
      *((_DWORD *)v66 + 3) = v63;
      v68 = v66 + 20;
      *((_DWORD *)v66 + 4) = 4;
    }
    *((_QWORD *)this + 1202) = v68;
    *((_DWORD *)this + 2408) = v64;
    LOBYTE(v15) = v61;
  }
  if ((v15 & 1) != 0)
  {
    v78 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    v79 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v78 + 440))(v78, (char *)this + 5024, 2);
    v80 = v79;
    v81 = ((unsigned __int16)WORD2(*(_QWORD *)(*((_QWORD *)this + 1205) + 80)) >> 8);
    v82 = (char *)*((_QWORD *)this + 1202);
    v83 = *((_QWORD *)this + 1203);
    if ((unint64_t)v82 >= v83)
    {
      v85 = (char *)*((_QWORD *)this + 1201);
      v86 = 0xCCCCCCCCCCCCCCCDLL * ((v82 - v85) >> 2);
      v87 = v86 + 1;
      if (v86 + 1 > 0xCCCCCCCCCCCCCCCLL)
        goto LABEL_138;
      v88 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v83 - (_QWORD)v85) >> 2);
      if (2 * v88 > v87)
        v87 = 2 * v88;
      if (v88 >= 0x666666666666666)
        v89 = 0xCCCCCCCCCCCCCCCLL;
      else
        v89 = v87;
      if (v89)
      {
        v89 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(v89);
        v82 = (char *)*((_QWORD *)this + 1202);
        v85 = (char *)*((_QWORD *)this + 1201);
      }
      else
      {
        v90 = 0;
      }
      v91 = (_DWORD *)(v89 + 20 * v86);
      v92 = v89 + 20 * v90;
      *v91 = 0;
      v91[1] = v81;
      v91[2] = 3;
      v91[3] = v80;
      v91[4] = 2;
      v84 = v91 + 5;
      if (v82 != v85)
      {
        do
        {
          v93 = *(_OWORD *)(v82 - 20);
          *(v91 - 1) = *((_DWORD *)v82 - 1);
          *(_OWORD *)(v91 - 5) = v93;
          v91 -= 5;
          v82 -= 20;
        }
        while (v82 != v85);
        v85 = (char *)*((_QWORD *)this + 1201);
      }
      *((_QWORD *)this + 1201) = v91;
      *((_QWORD *)this + 1202) = v84;
      *((_QWORD *)this + 1203) = v92;
      if (v85)
        operator delete(v85);
    }
    else
    {
      *(_DWORD *)v82 = 0;
      *((_DWORD *)v82 + 1) = v81;
      *((_DWORD *)v82 + 2) = 3;
      *((_DWORD *)v82 + 3) = v79;
      v84 = v82 + 20;
      *((_DWORD *)v82 + 4) = 2;
    }
    *((_QWORD *)this + 1202) = v84;
    *((_DWORD *)this + 2409) = v80;
  }
  if (v50)
  {
    v94 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    v95 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v94 + 440))(v94, (char *)this + 5024, 5);
    v96 = v95;
    v97 = (char *)*((_QWORD *)this + 1202);
    v98 = *((_QWORD *)this + 1203);
    if ((unint64_t)v97 < v98)
    {
      *(_QWORD *)v97 = 0;
      *((_DWORD *)v97 + 2) = 3;
      *((_DWORD *)v97 + 3) = v95;
      v99 = v97 + 20;
      *((_DWORD *)v97 + 4) = 5;
LABEL_135:
      *((_QWORD *)this + 1202) = v99;
      *((_DWORD *)this + 1299) = v96;
      return 1;
    }
    v100 = (_BYTE *)*((_QWORD *)this + 1201);
    v101 = 0xCCCCCCCCCCCCCCCDLL * ((v97 - v100) >> 2);
    v102 = v101 + 1;
    if (v101 + 1 <= 0xCCCCCCCCCCCCCCCLL)
    {
      v103 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v98 - (_QWORD)v100) >> 2);
      if (2 * v103 > v102)
        v102 = 2 * v103;
      if (v103 >= 0x666666666666666)
        v104 = 0xCCCCCCCCCCCCCCCLL;
      else
        v104 = v102;
      if (v104)
      {
        v104 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(v104);
        v97 = (char *)*((_QWORD *)this + 1202);
        v100 = (_BYTE *)*((_QWORD *)this + 1201);
      }
      else
      {
        v105 = 0;
      }
      v106 = v104 + 20 * v101;
      v107 = v104 + 20 * v105;
      *(_QWORD *)v106 = 0;
      *(_DWORD *)(v106 + 8) = 3;
      *(_DWORD *)(v106 + 12) = v96;
      *(_DWORD *)(v106 + 16) = 5;
      v99 = (char *)(v106 + 20);
      if (v97 != v100)
      {
        do
        {
          v108 = *(_OWORD *)(v97 - 20);
          *(_DWORD *)(v106 - 4) = *((_DWORD *)v97 - 1);
          *(_OWORD *)(v106 - 20) = v108;
          v106 -= 20;
          v97 -= 20;
        }
        while (v97 != v100);
        v100 = (_BYTE *)*((_QWORD *)this + 1201);
      }
      *((_QWORD *)this + 1201) = v106;
      *((_QWORD *)this + 1202) = v99;
      *((_QWORD *)this + 1203) = v107;
      if (v100)
        operator delete(v100);
      goto LABEL_135;
    }
LABEL_138:
    abort();
  }
  return 1;
}

uint64_t AGCLLVMGLVertexShader::setupShaderInputs(llvm::Function **this)
{
  uint64_t Int8PtrTy;
  const char *v3;
  uint64_t v4;
  llvm::BasicBlock *v5;
  llvm::Function *v6;
  llvm::Function *v7;
  uint64_t v8;
  char *v9;
  llvm::Value *VIRead;
  uint64_t v11;
  uint64_t Cast;
  uint64_t v13;
  llvm::IRBuilderBase *v14;
  uint64_t v15;
  llvm::Instruction *v16;
  uint64_t v17;
  int v18;
  llvm::Value *v19;
  llvm::Function *v20;
  uint64_t v21;
  llvm::Value *InsertElement;
  uint64_t i;
  char *v24;
  llvm::Value *v25;
  llvm::Value *v26;
  int v27;
  AGCLLVMGLVertexShader *v28;
  char *v29;
  llvm::Value *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::GlobalVariable *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  llvm::Instruction *v42;
  _QWORD *v43;
  llvm::Instruction *v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  llvm::Value *v49;
  llvm::Type *v50;
  llvm::CmpInst **AlignedLoad;
  llvm::IRBuilderBase *v52;
  uint64_t v53;
  llvm::Instruction *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Function *v57;
  uint64_t v58;
  llvm::GlobalVariable *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  const llvm::Twine *v67;
  llvm::Type **ConstInBoundsGEP2_32;
  unsigned int v69;
  unsigned int v70;
  const llvm::Twine *v71;
  llvm::Value *v72;
  int v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t *v77;
  llvm::Type *v78;
  uint64_t v79;
  llvm::Value *v80;
  uint64_t GEP;
  uint64_t v82;
  llvm::Value *v83;
  uint64_t Select;
  unint64_t v85;
  llvm::GlobalVariable *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  const llvm::Twine *v93;
  llvm::Type **v94;
  unsigned int v95;
  unsigned int v96;
  const llvm::Twine *v97;
  llvm::Type **v98;
  uint64_t *v99;
  llvm::Value *v100;
  llvm::Type *v101;
  uint64_t v102;
  uint64_t *v103;
  llvm::Value *v104;
  llvm::Type *v105;
  llvm::Value *v106;
  uint64_t v107;
  uint64_t v108;
  llvm::Value *v109;
  uint64_t v110;
  llvm::IRBuilderBase *v111;
  uint64_t v112;
  llvm::Value *v113;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v115;
  llvm::Value *Add;
  llvm::IRBuilderBase *v117;
  llvm::Value *v118;
  uint64_t LShr;
  uint64_t v120;
  llvm::Value *v121;
  llvm::IRBuilderBase *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  llvm::Type *v127;
  uint64_t v128;
  uint64_t v129;
  llvm::IRBuilderBase *v130;
  uint64_t v131;
  llvm::Value *v132;
  llvm::IRBuilderBase *v133;
  llvm::Value *v134;
  char *v135;
  llvm::Type *v136;
  char *v137;
  uint64_t v138;
  llvm::Type **v139;
  llvm::Value *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  llvm::Type *v147;
  uint64_t v148;
  uint64_t v149;
  llvm::Value *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Value *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  llvm::Type *v159;
  llvm::User *PHI;
  llvm::IRBuilderBase *v161;
  uint64_t v162;
  llvm::Instruction *v163;
  char *v164;
  llvm::Type *v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t Function;
  uint64_t *v170;
  llvm::Instruction *v171;
  llvm::Function *v172;
  llvm::Function *v173;
  uint64_t v174;
  llvm::Function *v175;
  uint64_t j;
  uint64_t v177;
  llvm::Instruction *v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *String;
  uint64_t v182;
  _BYTE *v184;
  llvm::MDString *v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  uint64_t v189;
  llvm::Function *v190;
  llvm::Value *v191;
  uint64_t v192;
  llvm::Instruction *v193;
  uint64_t *v194;
  uint64_t v195;
  llvm::Function *v196;
  uint64_t ICmp;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  llvm::Value *v202;
  llvm::Value *v203;
  uint64_t v204;
  llvm::BasicBlock *v205;
  uint64_t v206;
  AGCLLVMBuilder *v207;
  llvm::BasicBlock *v208;
  llvm::BasicBlock *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  llvm::Function *v214;
  llvm::Value *v215;
  llvm::Value *v216;
  llvm::Instruction *v217;
  uint64_t FirstInsertionPt;
  _DWORD v219[8];
  __int16 v220;
  int v221[8];
  __int16 v222;
  const char *v223;
  const char *v224;
  unint64_t v225;
  __int16 v226;
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  AGCLLVMUserVertexShader::setupShaderInputs((AGCLLVMUserVertexShader *)this);
  Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 392), (llvm::LLVMContext *)2);
  v3 = *(const char **)((char *)this + *((_QWORD *)*this - 3) + 232);
  v223 = (const char *)Int8PtrTy;
  v224 = v3;
  llvm::StructType::get();
  v4 = *((_QWORD *)this[22] + 10);
  if (v4)
    v5 = (llvm::BasicBlock *)(v4 - 24);
  else
    v5 = 0;
  v6 = *this;
  if ((*(_BYTE **)((char *)this + *((_QWORD *)*this - 3) + 400))[1734])
  {
    v7 = this[1205];
    v8 = *((_QWORD *)v7 + 8);
    v201 = *((_QWORD *)v7 + 9);
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v5);
    AGCLLVMUserObject::hoistAllocas((uint64_t)this, (uint64_t)v5, &FirstInsertionPt);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)this + *((_QWORD *)*this - 3) + 40, (uint64_t)v5, FirstInsertionPt);
    if (*((_DWORD *)this + 2409) == -1)
    {
      v204 = 0;
    }
    else
    {
      v9 = (char *)this + *((_QWORD *)*this - 3) + 40;
      VIRead = AGCLLVMUserVertexShader::createVIRead((AGCLLVMUserVertexShader *)this);
      v11 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 232);
      v226 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v9, 49, (uint64_t)VIRead, v11, (uint64_t)&v223);
      v13 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 240);
      v222 = 257;
      v204 = llvm::IRBuilderBase::CreateCast((uint64_t)v9, 39, Cast, v13, (uint64_t)v221);
    }
    v199 = v8;
    if (*((_DWORD *)this + 2408) == -1)
    {
      v34 = 0;
    }
    else
    {
      v29 = (char *)this + *((_QWORD *)*this - 3) + 40;
      v30 = AGCLLVMUserVertexShader::createVIRead((AGCLLVMUserVertexShader *)this);
      v31 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 232);
      v226 = 257;
      v32 = llvm::IRBuilderBase::CreateCast((uint64_t)v29, 49, (uint64_t)v30, v31, (uint64_t)&v223);
      v33 = *(uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 240);
      v222 = 257;
      v34 = llvm::IRBuilderBase::CreateCast((uint64_t)v29, 39, v32, v33, (uint64_t)v221);
    }
    v202 = (llvm::Value *)v34;
    v35 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v223 = "agc.primitive_buffer_path";
    v226 = 259;
    v36 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v36 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v37 = (char *)this + *((_QWORD *)*this - 3);
    v38 = *((_QWORD *)v37 + 47);
    v39 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v37 + 32), v35);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v38, v39);
    v226 = 257;
    v205 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    this[1200] = v205;
    v223 = "primbuf_path";
    v226 = 259;
    v209 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v223 = "va_path";
    v226 = 259;
    v208 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v40 = llvm::ConstantInt::get();
    v41 = (_QWORD *)*((_QWORD *)v5 + 5);
    if (v41 == (_QWORD *)((char *)v5 + 40))
    {
      v44 = 0;
    }
    else
    {
      v42 = (llvm::Instruction *)(v41 - 3);
      if (v41)
        v43 = v41 - 3;
      else
        v43 = 0;
      if (*((unsigned __int8 *)v43 + 16) - 29 >= 0xB)
        v44 = 0;
      else
        v44 = v42;
    }
    llvm::Instruction::eraseFromParent(v44);
    v45 = (char *)this + *((_QWORD *)*this - 3);
    *((_QWORD *)v45 + 11) = v5;
    *((_QWORD *)v45 + 12) = (char *)v5 + 40;
    v46 = *((_QWORD *)*this - 3);
    v47 = (uint64_t *)((char *)this + v46 + 40);
    v216 = (llvm::Value *)(this + 1);
    v48 = (uint64_t *)((char *)this + v46 + 8);
    v226 = 257;
    v50 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v35, v49);
    AlignedLoad = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad(v48 + 4, v50, (uint64_t)v35, 0, (uint64_t)&v223);
    v222 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp(v47, 32, AlignedLoad, v40, (uint64_t)v221);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *((_QWORD *)*this - 3) + 40), ICmp, (uint64_t)v208, (uint64_t)v209);
    v52 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
    v53 = llvm::BasicBlock::getFirstInsertionPt(v205);
    if (v53)
      v54 = (llvm::Instruction *)(v53 - 24);
    else
      v54 = 0;
    llvm::IRBuilderBase::SetInsertPoint(v52, v54);
    v55 = *((unsigned int *)this + 2358);
    if ((_DWORD)v55)
    {
      v56 = 0;
      v210 = (char *)(this + 25);
      v206 = 4 * v55;
      v200 = (char *)(this + 26);
      do
      {
        v57 = this[1205];
        v58 = 4 * *(unsigned int *)((char *)this[1178] + v56);
        v212 = *(unsigned int *)((char *)this[1178] + v56);
        llvm::FixedVectorType::get();
        v59 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        v60 = v213 & 0xFFFFFFFF00000000 | *((unsigned __int8 *)v57 + v58);
        v223 = "agc.vertex_attrib_info";
        v213 = v60;
        v225 = v60;
        v226 = 2051;
        v61 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v61 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        v62 = (char *)this + *((_QWORD *)*this - 3);
        v63 = *((_QWORD *)v62 + 47);
        v64 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v62 + 32), v59);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v63, v64);
        ConstInBoundsGEP2_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 32), v59, 0, v65, v66, v67);
        v207 = AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 32), v59, (llvm::Value *)1, v69, v70, v71);
        v73 = *((unsigned __int8 *)v57 + v58);
        v74 = *((_QWORD *)this[1205] + 10);
        if (v73 == BYTE4(v74) || v73 == BYTE5(v74))
        {
          v75 = (char *)this + *((_QWORD *)*this - 3);
          *((_QWORD *)v75 + 11) = v209;
          *((_QWORD *)v75 + 12) = (char *)v209 + 40;
        }
        v76 = (char *)(this + 1);
        v77 = (uint64_t *)((char *)v216 + *((_QWORD *)*this - 3));
        v226 = 257;
        v78 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP2_32, v72);
        v79 = llvm::IRBuilderBase::CreateAlignedLoad(v77 + 4, v78, (uint64_t)ConstInBoundsGEP2_32, 0, (uint64_t)&v223);
        GEP = v79;
        v82 = 1 << *((_BYTE *)v57 + v58);
        if ((v82 & v8) == 0)
        {
          v203 = (llvm::Value *)v79;
          v83 = v202;
          if ((v82 & v201) != 0)
          {
            v226 = 257;
            Select = llvm::IRBuilderBase::CreateSelect();
            v85 = *((unsigned __int8 *)v57 + v58);
            v223 = *(const char **)&v210[*((_QWORD *)*this - 3) + 32];
            v224 = v223;
            llvm::StructType::get();
            v86 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
            v223 = "agc.vertex_divisor_scale";
            v225 = v85;
            v226 = 2051;
            v87 = llvm::GlobalVariable::GlobalVariable();
            *(_BYTE *)(v87 + 80) |= 1u;
            llvm::GlobalObject::setSection();
            v88 = (char *)this + *((_QWORD *)*this - 3);
            v89 = *((_QWORD *)v88 + 47);
            v90 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v88 + 32), v86);
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v89, v90);
            v94 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 32), v86, 0, v91, v92, v93);
            v98 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Function **)((char *)this + *((_QWORD *)*this - 3) + 32), v86, (llvm::Value *)1, v95, v96, v97);
            v99 = (uint64_t *)((char *)v216 + *((_QWORD *)*this - 3));
            v226 = 257;
            v101 = AGCLLVMBuilder::tryDeducePointeeType(v94, v100);
            v102 = llvm::IRBuilderBase::CreateAlignedLoad(v99 + 4, v101, (uint64_t)v94, 0, (uint64_t)&v223);
            v103 = (uint64_t *)((char *)v216 + *((_QWORD *)*this - 3));
            v226 = 257;
            v105 = AGCLLVMBuilder::tryDeducePointeeType(v98, v104);
            v106 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v103 + 4, v105, (uint64_t)v98, 0, (uint64_t)&v223);
            v107 = *((_QWORD *)*this - 3);
            v108 = *(_QWORD *)&v200[v107 + 32];
            v226 = 257;
            v109 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + v107 + 40, 39, Select, v108, (uint64_t)&v223);
            v110 = *((_QWORD *)*this - 3);
            v111 = (llvm::IRBuilderBase *)((char *)this + v110 + 40);
            v112 = *(_QWORD *)&v200[v110 + 32];
            v226 = 257;
            v113 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v111, 39, v102, v112, (uint64_t)&v223);
            v222 = 257;
            Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v111, v113, v109, (const llvm::Twine *)v221);
            v220 = 257;
            v115 = v111;
            v8 = v199;
            Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v115, Mul, v109, (const llvm::Twine *)v219);
            v117 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
            v226 = 257;
            v118 = (llvm::Value *)llvm::ConstantInt::get();
            LShr = llvm::IRBuilderBase::CreateLShr(v117, Add, v118, (const llvm::Twine *)&v223);
            v120 = *(_QWORD *)&v210[*((_QWORD *)*this - 3) + 32];
            v222 = 257;
            v121 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v117, 38, LShr, v120, (uint64_t)v221);
            v122 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
            v226 = 257;
            v123 = llvm::IRBuilderBase::CreateLShr(v122, v121, v106, (const llvm::Twine *)&v223);
            v124 = *((_QWORD *)*this - 3);
            v125 = *(_QWORD *)&v200[v124 + 32];
            v226 = 257;
            v83 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + v124 + 40, 39, v123, v125, (uint64_t)&v223);
          }
          v126 = (uint64_t *)((char *)v216 + *((_QWORD *)*this - 3));
          v226 = 257;
          v127 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v207, v80);
          v128 = llvm::IRBuilderBase::CreateAlignedLoad(v126 + 4, v127, (uint64_t)v207, 0, (uint64_t)&v223);
          v129 = *((_QWORD *)*this - 3);
          v130 = (llvm::IRBuilderBase *)((char *)this + v129 + 40);
          v131 = *(_QWORD *)&v200[v129 + 32];
          v226 = 257;
          v132 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v130, 39, v128, v131, (uint64_t)&v223);
          v222 = 257;
          v133 = v130;
          v76 = (char *)(this + 1);
          v134 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v133, v132, v83, (const llvm::Twine *)v221);
          v135 = (char *)this + *((_QWORD *)*this - 3);
          v136 = (llvm::Type *)*((_QWORD *)v135 + 27);
          v226 = 257;
          GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v135 + 40), v136, v203, v134, (const llvm::Twine *)&v223);
        }
        v137 = (char *)this + *((_QWORD *)*this - 3) + 40;
        v138 = llvm::PointerType::get();
        v226 = 257;
        v139 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)v137, 49, GEP, v138, (uint64_t)&v223);
        v141 = (uint64_t)v139;
        v142 = *((unsigned __int8 *)v57 + v58);
        v143 = *((_QWORD *)this[1205] + 10);
        if (v142 == BYTE4(v143) || v142 == BYTE5(v143))
        {
          v144 = *((_QWORD *)*this - 3);
          v145 = (char *)this + v144 + 40;
          v146 = &v76[v144];
          v226 = 257;
          v147 = AGCLLVMBuilder::tryDeducePointeeType(v139, v140);
          v148 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v146 + 4, v147, v141, 0, (uint64_t)&v223);
          v149 = *(_QWORD *)&v210[*((_QWORD *)*this - 3) + 32];
          v222 = 257;
          v150 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v145, 49, v148, v149, (uint64_t)v221);
          v151 = (char *)this + *((_QWORD *)*this - 3);
          *((_QWORD *)v151 + 11) = v208;
          *((_QWORD *)v151 + 12) = (char *)v208 + 40;
          v152 = *((_QWORD *)*this - 3);
          v153 = *(_QWORD *)&v210[v152 + 32];
          if (*((unsigned __int8 *)v57 + v58) != *((unsigned __int8 *)this[1205] + 84))
          {
            v226 = 257;
            v154 = v204;
          }
          else
          {
            v226 = 257;
            v154 = (uint64_t)v202;
          }
          v155 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + v152 + 40, 38, v154, v153, (uint64_t)&v223);
          v156 = (uint64_t)v216 + *((_QWORD *)*this - 3) + 32;
          v157 = llvm::BasicBlock::getFirstInsertionPt(v205);
          llvm::IRBuilderBase::SetInsertPoint(v156, (uint64_t)v205, v157);
          v158 = *((_QWORD *)*this - 3);
          v159 = *(llvm::Type **)&v210[v158 + 32];
          v226 = 257;
          PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)((char *)this + v158 + 40), v159, 2, (const llvm::Twine *)&v223);
          llvm::PHINode::addIncoming(PHI, v155, v208);
          llvm::PHINode::addIncoming(PHI, v150, v209);
          v161 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40);
          v162 = llvm::BasicBlock::getFirstInsertionPt(v205);
          if (v162)
            v163 = (llvm::Instruction *)(v162 - 24);
          else
            v163 = 0;
          llvm::IRBuilderBase::SetInsertPoint(v161, v163);
        }
        else
        {
          v164 = &v76[*((_QWORD *)*this - 3)];
          v226 = 257;
          v165 = AGCLLVMBuilder::tryDeducePointeeType(v139, v140);
          llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v164 + 4, v165, v141, 0, (uint64_t)&v223);
        }
        this[v212 + 1184] = (llvm::Function *)AGCLLVMGLVertexShader::castAttribToElementType((uint64_t)this, *((_DWORD *)v57 + v212));
        v56 += 4;
      }
      while (v206 != v56);
    }
    v166 = (char *)this + *((_QWORD *)*this - 3);
    *((_QWORD *)v166 + 11) = v209;
    *((_QWORD *)v166 + 12) = (char *)v209 + 40;
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40), v205);
    v167 = (char *)this + *((_QWORD *)*this - 3);
    *((_QWORD *)v167 + 11) = v208;
    *((_QWORD *)v167 + 12) = (char *)v208 + 40;
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40), v205);
    v168 = (char *)this + *((_QWORD *)*this - 3);
    *((_QWORD *)v168 + 11) = v205;
    *((_QWORD *)v168 + 12) = (char *)v205 + 40;
  }
  else
  {
    this[1200] = v5;
    v14 = (llvm::IRBuilderBase *)((char *)this + *((_QWORD *)v6 - 3) + 40);
    v15 = llvm::BasicBlock::getFirstInsertionPt(v5);
    if (v15)
      v16 = (llvm::Instruction *)(v15 - 24);
    else
      v16 = 0;
    llvm::IRBuilderBase::SetInsertPoint(v14, v16);
    v211 = *((unsigned int *)this + 2358);
    if ((_DWORD)v211)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v19 = (llvm::Value *)*((unsigned int *)this[1178] + v17);
        v20 = this[1205];
        v21 = *((unsigned int *)this[1208] + (_QWORD)v19);
        llvm::FixedVectorType::get();
        InsertElement = (llvm::Value *)llvm::UndefValue::get();
        if ((_DWORD)v21)
        {
          v214 = v20;
          v215 = v19;
          for (i = 0; i != v21; ++i)
          {
            v24 = (char *)this + *((_QWORD *)*this - 3);
            v25 = AGCLLVMUserVertexShader::createVIRead((AGCLLVMUserVertexShader *)this);
            v226 = 257;
            v26 = (llvm::Value *)llvm::ConstantInt::get();
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v24 + 40), InsertElement, v25, v26, (const llvm::Twine *)&v223);
          }
          v18 += i;
          v19 = v215;
          v27 = *((_DWORD *)v214 + (_QWORD)v215);
          v28 = (AGCLLVMGLVertexShader *)this;
        }
        else
        {
          v27 = *((_DWORD *)v20 + (_QWORD)v19);
          v28 = (AGCLLVMGLVertexShader *)this;
        }
        this[(_QWORD)v19 + 1184] = (llvm::Function *)AGCLLVMGLVertexShader::castAttribToElementType((uint64_t)v28, v27);
        ++v17;
      }
      while (v17 != v211);
    }
  }
  Function = llvm::Module::getFunction();
  v170 = (uint64_t *)Function;
  if (Function)
    v171 = *(llvm::Instruction **)(*(_QWORD *)(Function + 8) + 24);
  else
    v171 = 0;
  v217 = v171;
  v172 = this[1200];
  v221[0] = 0;
  v173 = this[22];
  if ((*((_WORD *)v173 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this[22]);
    v175 = this[22];
    v174 = *((_QWORD *)v173 + 11);
    if ((*((_WORD *)v175 + 9) & 1) != 0)
      llvm::Function::BuildLazyArguments(this[22]);
    v173 = v175;
  }
  else
  {
    v174 = *((_QWORD *)v173 + 11);
  }
  for (j = *((_QWORD *)v173 + 11) + 40 * *((_QWORD *)v173 + 12); v174 != j; v174 += 40)
  {
    if (*(_QWORD *)(v174 + 8))
    {
      v177 = *((_QWORD *)v172 + 5);
      v178 = v177 ? (llvm::Instruction *)(v177 - 24) : 0;
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40), v178);
      v179 = *(unsigned int *)(v174 + 32);
      v180 = *((_QWORD *)this[11] + v179);
      if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v174, v179, v180) & 1) == 0)
      {
        String = (_QWORD *)llvm::MDString::getString(*(llvm::MDString **)(v180 - 8 * *(unsigned int *)(v180 + 8) + 8));
        if (v182 == 16 && *String == 0x747265762E726961 && String[1] == 0x7475706E695F7865)
        {
          v184 = *(_BYTE **)(v180 - 8 * *(unsigned int *)(v180 + 8) + 16);
          if (v184)
          {
            if (*v184)
              v185 = 0;
            else
              v185 = *(llvm::MDString **)(v180 - 8 * *(unsigned int *)(v180 + 8) + 16);
          }
          else
          {
            v185 = 0;
          }
          v186 = llvm::MDString::getString(v185);
          if (v187 == 12
            && (*(_QWORD *)v186 == 0x61636F6C2E726961 ? (v188 = *(_DWORD *)(v186 + 8) == 1852795252) : (v188 = 0), v188))
          {
            v194 = *(uint64_t **)(*(_QWORD *)(v174 + 8) + 24);
            LODWORD(v223) = 3;
            parseMDInt(0, v180, (unsigned int *)&v223, v221);
            AGCLLVMGLVertexShader::replaceAttributeUses((uint64_t)this, v194[1], v221[0], 0);
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v194);
          }
          else
          {
            v219[0] = 0;
            LODWORD(v223) = 3;
            parseMDInt(0, v180, (unsigned int *)&v223, v219);
            v189 = v219[0];
            v190 = this[1205];
            v191 = this[v219[0] + 1184];
            v192 = *((_QWORD *)this[1200] + 5);
            if (v192)
              v193 = (llvm::Instruction *)(v192 - 24);
            else
              v193 = 0;
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)this + *((_QWORD *)*this - 3) + 40), v193);
            AGCLLVMGLVertexShader::generateAttributeValue(this, (int *)v190 + v189, *(_QWORD *)v174, v191);
            llvm::Value::replaceAllUsesWith();
          }
        }
      }
    }
  }
  if (v170)
  {
    if (v217)
    {
      if (llvm::Value::getNumUses(v217))
        AGCLLVMGLVertexShader::replaceAttributeUses((uint64_t)this, v170[1], *((unsigned __int8 *)this[1205] + 84), 3);
      else
        llvm::Instruction::eraseFromParent(v217);
    }
    llvm::Function::eraseFromParent((llvm::Function *)v170);
  }
  v195 = llvm::Module::getFunction();
  if (v195)
  {
    v196 = (llvm::Function *)v195;
    AGCLLVMGLVertexShader::replaceAttributeUses((uint64_t)this, *(_QWORD *)(v195 + 8), (unsigned __int16)WORD2(*((_QWORD *)this[1205] + 10)) >> 8, 1);
    llvm::Function::eraseFromParent(v196);
  }
  return 1;
}

uint64_t AGCLLVMGLVertexShader::remapTexSampUnit(AGCLLVMGLVertexShader *this, uint64_t a2)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 1207);
  if (*v2 > a2)
    return v2[a2 + 1];
  return a2;
}

uint64_t AGCLLVMGLVertexShader::getPCFStateForUnit(AGCLLVMGLVertexShader *this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1206);
  if (v2)
    return *(unsigned __int16 *)(v2 + 2 * a2);
  else
    return 0;
}

BOOL AGCLLVMGLVertexShader::needsPCFClamp(AGCLLVMGLVertexShader *this)
{
  return *((_QWORD *)this + 1206) == 0;
}

uint64_t AGCLLVMGLVertexShader::areIndirectTexturesSupported(AGCLLVMGLVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLVertexShader::areIndirectTextureWritesSupported(AGCLLVMGLVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLVertexShader::areIndirectSamplersSupported(AGCLLVMGLVertexShader *this)
{
  return 0;
}

uint64_t AGCLLVMGLVertexShader::setupClipDistanceOutput(_QWORD *a1, llvm::Value *a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  llvm::IRBuilderBase *v16;
  llvm::Value *v17;
  uint64_t Element;
  unsigned int v20[8];
  __int16 v21;
  int v22;

  v22 = 0;
  v20[0] = 1;
  parseMDInt(0, a3, v20, &v22);
  v9 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v10 = *(_BYTE *)(*(_QWORD *)a2 + 8) == 18;
  else
    v10 = 0;
  if (v10)
  {
    v12 = *(unsigned int *)(v9 + 32);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 4 * v22;
      do
      {
        v15 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v21 = 257;
        v16 = (llvm::IRBuilderBase *)(v15 + 40);
        v17 = (llvm::Value *)llvm::ConstantInt::get();
        Element = llvm::IRBuilderBase::CreateExtractElement(v16, a2, v17, (const llvm::Twine *)v20);
        *a5 |= 1 << (v14 + v13);
        *(_QWORD *)(a4 + 8 * (v14 + v13++)) = Element;
      }
      while (v12 != v13);
    }
  }
  else if (*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 200) == v9)
  {
    v11 = 4 * v22;
    *a5 |= 1 << (4 * v22);
    *(_QWORD *)(a4 + 8 * v11) = a2;
  }
  return 1;
}

uint64_t AGCLLVMGLVertexShader::getGenericVaryingInfo(AGCLLVMUserShader *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v5;
  AGCLLVMUserShader *v11;
  const llvm::Type *v12;
  int ComponentType;
  int v14;
  char v15;
  uint64_t v16;
  llvm::MDString *v17;
  llvm::MDString *v18;
  uint64_t v19;
  char v20;
  const void *String;
  size_t v22;
  uint64_t v23;
  const void *v24;
  size_t v25;
  int v26;
  int v27;
  BOOL v28;
  BOOL v29;
  int v30;
  int v31;
  void **v32;
  int v34;
  unsigned int v35;
  unsigned int v36;

  AGCLLVMUserShader::getVaryingModeMap(a1);
  AGCLLVMUserShader::getInterpolationLocationMap(v11);
  v12 = *(const llvm::Type **)(*(_QWORD *)(a2 + 16) + 8 * a3);
  ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32), v12, &v35);
  if ((*((_DWORD *)v12 + 2) & 0xFE) == 0x12)
    v14 = *((_DWORD *)v12 + 8);
  else
    v14 = 1;
  v34 = 0;
  v36 = 2;
  v15 = parseMDInt(0, a4, &v36, &v34);
  v16 = a4 - 8 * *(unsigned int *)(a4 + 8);
  v17 = *(llvm::MDString **)(v16 + 24);
  if (v17 && *(_BYTE *)v17)
    v17 = 0;
  v18 = *(llvm::MDString **)(v16 + 32);
  if (!v18)
    return 0;
  v19 = 0;
  v20 = v15 ^ 1;
  if (!v17)
    v20 = 1;
  if ((v20 & 1) == 0 && !*(_BYTE *)v18)
  {
    String = (const void *)llvm::MDString::getString(v17);
    v23 = *(unsigned int *)(*llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>(String, v22)+ 8);
    v24 = (const void *)llvm::MDString::getString(v18);
    v26 = *(_DWORD *)(*llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>(v24, v25) + 8);
    if (v23 == 1)
      v26 = 3;
    v27 = v34;
    v28 = ComponentType == 1;
    switch((int)v23)
    {
      case 0:
        if (ComponentType == 1)
          v5 = 5;
        else
          v5 = 1;
        break;
      case 1:
        v29 = ComponentType == 1;
        v30 = 2;
        v31 = 6;
        goto LABEL_25;
      case 2:
        v29 = ComponentType == 1;
        v30 = 3;
        v31 = 7;
        goto LABEL_25;
      case 3:
        if (ComponentType == 1)
          v5 = 19;
        else
          v5 = 18;
        break;
      case 5:
        v29 = ComponentType == 1;
        v30 = 4;
        v31 = 8;
LABEL_25:
        if (v29)
          v5 = v31;
        else
          v5 = v30;
        break;
      default:
        break;
    }
    *(_DWORD *)a5 = v14;
    *(_DWORD *)(a5 + 4) = ComponentType;
    *(_DWORD *)(a5 + 8) = v23;
    *(_DWORD *)(a5 + 12) = v26;
    *(_DWORD *)(a5 + 16) = v27;
    v32 = (void **)(a5 + 24);
    if (*(char *)(a5 + 47) < 0)
      operator delete(*v32);
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_BYTE *)(a5 + 56) = v28;
    *(_WORD *)(a5 + 57) = 0;
    *(_DWORD *)(a5 + 60) = v5;
    return 1;
  }
  return v19;
}

uint64_t AGCLLVMGLVertexShader::isPointSizePresent(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 9640) + 89) & 1;
}

uint64_t AGCLLVMGLVertexShader::getPointSize(AGCLLVMGLVertexShader *this, llvm::Value *a2)
{
  llvm::Value *v2;
  llvm::GlobalVariable *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  llvm::Value *v10;
  llvm::Type *v11;
  llvm::Value *AlignedLoad;
  llvm::Type *v13;
  uint64_t FPTrunc;
  char *v15;
  _BYTE v17[32];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v2 = a2;
  if (!a2)
    v2 = (llvm::Value *)llvm::ConstantFP::get();
  v4 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v19[0] = "agc.vertex_point_size_adjust";
  v20 = 259;
  v5 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v5 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v7 = *((_QWORD *)v6 + 47);
  v8 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v6 + 32), v4);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v7, v8);
  v9 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v20 = 257;
  v11 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v10);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v9, v11, (uint64_t)v4, 0, (uint64_t)v19);
  v13 = *(llvm::Type **)v2;
  v18 = 257;
  FPTrunc = llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v9, AlignedLoad, v13, (const llvm::Twine *)v17);
  v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v20 = 257;
  return llvm::IRBuilderBase::CreateFAdd((uint64_t)v15, (uint64_t)v2, FPTrunc, (uint64_t)v19);
}

uint64_t AGCLLVMGLVertexShader::constructFlatVertexInputs(AGCLLVMGLVertexShader *this)
{
  uint64_t Function;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  int *v44;
  int v45;
  char *v46;
  char *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  int v67;
  char *v68;
  int v69;
  char *v70;
  int v71;
  char *v72;
  char *v73;
  int v74;
  uint64_t v75;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;

  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1734))
    goto LABEL_68;
  Function = llvm::Module::getFunction();
  llvm::SmallBitVector::SmallBitVector((llvm::SmallBitVector *)&v80, *((unsigned int *)this + 1256));
  if ((*(_WORD *)(Function + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
    v3 = *(_QWORD *)(Function + 88);
    if ((*(_WORD *)(Function + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
      v4 = *(_QWORD *)(Function + 88);
      goto LABEL_7;
    }
  }
  else
  {
    v3 = *(_QWORD *)(Function + 88);
  }
  v4 = v3;
LABEL_7:
  v5 = v4 + 40 * *(_QWORD *)(Function + 96);
  if (v3 != v5)
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)(v3 + 8))
      {
        if ((v80 & 1) != 0)
          v80 = v80 & 0xFC00000000000000 | (2
                                            * (((v80 >> 1) & ~(-1 << (v80 >> 58)) | (1 << v6)) & ~(-1 << (v80 >> 58)))) | 1;
        else
          *(_QWORD *)(*(_QWORD *)v80 + 8 * (v6 >> 6)) |= 1 << v6;
      }
      v3 += 40;
      ++v6;
    }
    while (v3 != v5);
  }
  v7 = *((_QWORD *)this + 1201);
  if (*((_QWORD *)this + 1202) != v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7 + 20 * v8;
      v11 = *(unsigned int *)(v10 + 8);
      if (v11 > 0xA)
        LODWORD(v12) = -1;
      else
        v12 = (qword_1C3DF0480[v11] * (unint64_t)(*(_DWORD *)(v7 + 20 * v8) + 1) + 3) >> 2;
      v13 = *(unsigned int *)(v10 + 12);
      llvm::SmallBitVector::SmallBitVector((llvm::SmallBitVector *)&v79, *((unsigned int *)this + 1256));
      if ((_DWORD)v12)
      {
        v14 = v12 + v13;
        if ((v79 & 1) != 0)
        {
          v79 = v79 & 0xFC00000000000000 | (2
                                            * (((v79 >> 1) & ~(-1 << (v79 >> 58)) | ((1 << v14) + (-1 << v13))) & ~(-1 << (v79 >> 58)))) | 1;
          goto LABEL_30;
        }
        v15 = v13 >> 6;
        if ((v13 >> 6) == v14 >> 6)
        {
          v16 = (1 << v14) + (-1 << v13);
          v17 = (uint64_t *)(*(_QWORD *)v79 + 8 * v15);
LABEL_29:
          *v17 |= v16;
          goto LABEL_30;
        }
        v18 = *(uint64_t **)v79;
        *(_QWORD *)(*(_QWORD *)v79 + 8 * v15) |= -1 << v13;
        v19 = (v13 + 63) & 0xFFFFFFC0;
        if (v19 + 64 <= v14)
        {
          do
          {
            v18[v19 >> 6] = -1;
            v20 = v19 + 64;
            v21 = v19 + 128;
            v19 += 64;
          }
          while (v21 <= v14);
        }
        else
        {
          v20 = (v13 + 63) & 0xFFFFFFC0;
        }
        if (v20 < v14)
        {
          v16 = ~(-1 << v14);
          v17 = &v18[v20 >> 6];
          goto LABEL_29;
        }
      }
LABEL_30:
      if ((v79 & 1) != 0)
      {
        v32 = v79 >> 58;
        if ((v80 & 1) == 0)
        {
          v33 = *(unsigned int *)(v80 + 64);
          goto LABEL_47;
        }
        if ((((v79 & v80) >> 1) & ~((-1 << v32) | (-1 << (v80 >> 58)))) == 0)
          goto LABEL_63;
      }
      else
      {
        if ((v80 & 1) != 0)
        {
          v32 = *(unsigned int *)(v79 + 64);
          v33 = v80 >> 58;
LABEL_47:
          if (v33 < v32)
            v32 = v33;
          if (!v32)
          {
LABEL_63:
            v35 = *((_QWORD *)this + 1201) + 20 * (int)v9;
            v36 = *((_QWORD *)this + 1202);
            v37 = v36 - (v35 + 20);
            if (v36 != v35 + 20)
              memmove((void *)(*((_QWORD *)this + 1201) + 20 * (int)v9), (const void *)(v35 + 20), v36 - (v35 + 20));
            *((_QWORD *)this + 1202) = v35 + v37;
            goto LABEL_66;
          }
          v34 = 0;
          while (2)
          {
            if ((v79 & 1) != 0)
            {
              if (((v79 >> 1) & ~(-1 << (v79 >> 58)) & (1 << v34)) == 0)
                goto LABEL_59;
            }
            else if ((*(_QWORD *)(*(_QWORD *)v79 + 8 * (v34 >> 6)) & (1 << v34)) == 0)
            {
              goto LABEL_59;
            }
            if ((v80 & 1) != 0)
            {
              if (((v80 >> 1) & ~(-1 << (v80 >> 58)) & (1 << v34)) != 0)
                goto LABEL_62;
            }
            else if ((*(_QWORD *)(*(_QWORD *)v80 + 8 * (v34 >> 6)) & (1 << v34)) != 0)
            {
              goto LABEL_62;
            }
LABEL_59:
            if (v32 == ++v34)
              goto LABEL_63;
            continue;
          }
        }
        LODWORD(v22) = *(_DWORD *)(v79 + 8);
        v23 = *(_DWORD *)(v80 + 8);
        if (v23 >= v22)
          v22 = v22;
        else
          v22 = v23;
        if (!(_DWORD)v22)
          goto LABEL_63;
        v24 = *(uint64_t **)v79;
        v25 = *(uint64_t **)v80;
        v26 = v22 - 1;
        do
        {
          v28 = *v24++;
          v27 = v28;
          v29 = *v25++;
          v30 = v29 & v27;
          if (v30)
            v31 = 1;
          else
            v31 = v26 == 0;
          --v26;
        }
        while (!v31);
        if (!v30)
          goto LABEL_63;
      }
LABEL_62:
      ++v9;
LABEL_66:
      llvm::SmallBitVector::~SmallBitVector((void ***)&v79);
      v8 = v9;
      v7 = *((_QWORD *)this + 1201);
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 1202) - v7) >> 2) > v9);
  }
  llvm::SmallBitVector::~SmallBitVector((void ***)&v80);
LABEL_68:
  v38 = *((_QWORD *)this + 1201);
  v39 = 0;
  if (-858993459 * ((unint64_t)(*((_QWORD *)this + 1202) - v38) >> 2))
  {
    v40 = 0;
    v77 = 0;
    v78 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    while (1)
    {
      v44 = (int *)(v38 + 20 * v43);
      v45 = v44[4];
      v46 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v47 = v46 + 2472;
      v46[2542] = 1;
      v48 = *((_DWORD *)v46 + 626) - *((_DWORD *)v46 + 630) + *((_DWORD *)v46 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v46 + 2472, 4, *v44);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v47, 6, *(_DWORD *)(*((_QWORD *)this + 1201) + 20 * v43 + 4));
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v47, 8, *(_DWORD *)(*((_QWORD *)this + 1201) + 20 * v43 + 8));
      v49 = *(_DWORD *)(*((_QWORD *)this + 1201) + 20 * v43 + 12);
      if (v45)
      {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v47, 12, v49);
        flatbuffers::FlatBufferBuilder::AddElement<signed char>(v47, 10, *(char *)(*((_QWORD *)this + 1201) + 20 * v43 + 16));
        v50 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v47, v48);
        v51 = v50;
        if ((unint64_t)v42 >= v78)
        {
          v55 = (v42 - v41) >> 2;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 62)
            goto LABEL_120;
          if ((uint64_t)(v78 - (_QWORD)v41) >> 1 > v56)
            v56 = (uint64_t)(v78 - (_QWORD)v41) >> 1;
          if (v78 - (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v56;
          if (v57)
            v57 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v57);
          else
            v58 = 0;
          v63 = (char *)(v57 + 4 * v55);
          *(_DWORD *)v63 = v51;
          v64 = v63 + 4;
          while (v42 != v41)
          {
            v65 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v63 - 1) = v65;
            v63 -= 4;
          }
          v78 = v57 + 4 * v58;
          if (v41)
            operator delete(v41);
          v54 = v40;
          v41 = v63;
          v42 = v64;
          goto LABEL_106;
        }
        *(_DWORD *)v42 = v50;
        v42 += 4;
      }
      else
      {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v47, 10, v49);
        v52 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v47, v48);
        v53 = v52;
        if ((unint64_t)v40 >= v77)
        {
          v59 = (v40 - v39) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
LABEL_120:
            abort();
          if ((uint64_t)(v77 - (_QWORD)v39) >> 1 > v60)
            v60 = (uint64_t)(v77 - (_QWORD)v39) >> 1;
          if (v77 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v61 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v61 = v60;
          if (v61)
            v61 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v61);
          else
            v62 = 0;
          v66 = (char *)(v61 + 4 * v59);
          *(_DWORD *)v66 = v53;
          v54 = v66 + 4;
          while (v40 != v39)
          {
            v67 = *((_DWORD *)v40 - 1);
            v40 -= 4;
            *((_DWORD *)v66 - 1) = v67;
            v66 -= 4;
          }
          v77 = v61 + 4 * v62;
          if (v39)
            operator delete(v39);
          v39 = v66;
          goto LABEL_106;
        }
        *(_DWORD *)v40 = v52;
        v40 += 4;
      }
      v54 = v40;
LABEL_106:
      ++v43;
      v38 = *((_QWORD *)this + 1201);
      v40 = v54;
      if (v43 >= -858993459 * ((unint64_t)(*((_QWORD *)this + 1202) - v38) >> 2))
        goto LABEL_109;
    }
  }
  v41 = 0;
  v42 = 0;
  v54 = 0;
LABEL_109:
  if (v54 == v39)
    v68 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>> const&)::t;
  else
    v68 = v39;
  v69 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v68, (v54 - v39) >> 2);
  if (v42 == v41)
    v70 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t;
  else
    v70 = v41;
  v71 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v70, (v42 - v41) >> 2);
  v72 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v73 = v72 + 2472;
  v72[2542] = 1;
  v74 = *((_DWORD *)v72 + 626) - *((_DWORD *)v72 + 630) + *((_DWORD *)v72 + 628);
  flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v72 + 2472, v69);
  flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v73, v71);
  v75 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v73, v74);
  if (v41)
    operator delete(v41);
  if (v39)
    operator delete(v39);
  return v75;
}

void AGCLLVMGLVertexShader::getCompilationKeyDescription(AGCLLVMGLVertexShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  unint64_t i;
  std::string *v6;
  std::string::size_type size;
  uint64_t j;
  uint64_t k;
  uint64_t v10;
  uint64_t m;
  uint64_t n;
  std::string *v13;
  std::string::size_type v14;
  uint64_t ii;
  unsigned int *v16;
  uint64_t jj;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t kk;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string v30;
  std::string v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  std::string v36;
  std::string v37;
  std::string __p;
  std::string v39;
  void *v40[2];
  std::string::size_type v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54[2];
  std::string v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 1205);
  std::string::basic_string[abi:nn180100]<0>(v34, "AGCVertexContextStateGL");
  std::string::basic_string[abi:nn180100]<0>(v32, "vertexUnpackState");
  std::string::basic_string[abi:nn180100]<0>(&v37, (char *)&unk_1C3E4D9BB);
  if (*(_DWORD *)(v2 + 80))
  {
    v3 = 0;
    do
    {
      v4 = (unsigned __int8 *)(v2 + 4 * v3);
      std::string::basic_string[abi:nn180100]<0>(&v47, "AGCVertexElement");
      std::string::basic_string[abi:nn180100]<0>(&v46, "code");
      _agcFieldString<unsigned int>(&v49, (const void **)&v46.__r_.__value_.__l.__data_, *v4);
      std::string::basic_string[abi:nn180100]<0>(v44, "components");
      _agcFieldString<unsigned int>(&v50, (const void **)v44, v4[1]);
      std::string::basic_string[abi:nn180100]<0>(v42, "type");
      _agcFieldString<char const*>(&v51, (const void **)v42, _agcVertexElementTypeStrings[v4[2]]);
      std::string::basic_string[abi:nn180100]<0>(v40, "normalized");
      _agcFieldString<unsigned int>(&v52, (const void **)v40, HIBYTE(*(_DWORD *)v4) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v39, "bgraSwizzle");
      _agcFieldString<unsigned int>(&v53, (const void **)&v39.__r_.__value_.__l.__data_, (*(_DWORD *)v4 >> 25) & 1);
      std::string::basic_string[abi:nn180100]<0>(&__p, "unused");
      _agcFieldString<unsigned int>(v54, (const void **)&__p.__r_.__value_.__l.__data_, *(_DWORD *)v4 >> 26);
      _agcGroupWithHeader(&v36, (uint64_t)&v47, 0, (uint64_t)&v49, 6);
      for (i = 0; i != 0x1FFFFFFFFFFFFFEELL; i -= 3)
      {
        if (SHIBYTE(v54[0].__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(v54[i / 3].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41) < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v36;
      else
        v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        size = v36.__r_.__value_.__l.__size_;
      std::string::append(&v37, (const std::string::value_type *)v6, size);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      ++v3;
    }
    while (v3 < *(unsigned int *)(v2 + 80));
  }
  std::string::basic_string[abi:nn180100]<0>(&v47, "AGCVertexUnpackState");
  std::string::basic_string[abi:nn180100]<0>(&v46, "currentAttribs");
  _agcFieldString<unsigned long long>(&v49, (const void **)&v46.__r_.__value_.__l.__data_, *(_QWORD *)(v2 + 64));
  std::string::basic_string[abi:nn180100]<0>(v44, "instancedAttribs");
  _agcFieldString<unsigned long long>(&v50, (const void **)v44, *(_QWORD *)(v2 + 72));
  std::string::basic_string[abi:nn180100]<0>(v42, "elementCount");
  _agcFieldString<unsigned long long>(&v51, (const void **)v42, *(unsigned int *)(v2 + 80));
  std::string::basic_string[abi:nn180100]<0>(v40, "vertexIDCode");
  _agcFieldString<unsigned long long>(&v52, (const void **)v40, *(unsigned __int8 *)(v2 + 84));
  std::string::basic_string[abi:nn180100]<0>(&v39, "instanceIDCode");
  _agcFieldString<unsigned long long>(&v53, (const void **)&v39.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v2 + 85));
  std::string::basic_string[abi:nn180100]<0>(&__p, "unused");
  _agcFieldString<unsigned long long>(v54, (const void **)&__p.__r_.__value_.__l.__data_, *(unsigned __int16 *)(v2 + 86));
  std::string::basic_string[abi:nn180100]<0>(&v36, "elements : ");
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v48, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v48 = v37;
  _agcGroupWithHeader(&v55, (uint64_t)&v36, 0, (uint64_t)&v48, 1);
  _agcGroupWithHeader(&v31, (uint64_t)&v47, 0, (uint64_t)&v49, 7);
  for (j = 0; j != -21; j -= 3)
  {
    if (SHIBYTE(v55.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v55.__r_.__value_.__l.__data_ + j * 8));
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  _agcFieldString<std::string>(&v49, (const void **)v32, (uint64_t)&v31);
  std::string::basic_string[abi:nn180100]<0>(&v47, "clip_distance_enable_mask");
  _agcFieldString<unsigned long long>(&v50, (const void **)&v47.__r_.__value_.__l.__data_, *(unsigned __int8 *)(v2 + 88));
  std::string::basic_string[abi:nn180100]<0>(&v46, "outputPointSize");
  _agcFieldString<unsigned long long>(&v51, (const void **)&v46.__r_.__value_.__l.__data_, (*(_QWORD *)(v2 + 88) >> 8) & 1);
  std::string::basic_string[abi:nn180100]<0>(v44, "shaderDebugEnable");
  _agcFieldString<unsigned long long>(&v52, (const void **)v44, (*(_QWORD *)(v2 + 88) >> 9) & 1);
  std::string::basic_string[abi:nn180100]<0>(v42, "unused");
  _agcFieldString<unsigned long long>(&v53, (const void **)v42, *(_QWORD *)(v2 + 88) >> 10);
  _agcGroupWithHeader(&v30, (uint64_t)v34, 0, (uint64_t)&v49, 5);
  for (k = 0; k != -15; k -= 3)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(*(void **)((char *)&v53.__r_.__value_.__l.__data_ + k * 8));
  }
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  v10 = *((_QWORD *)this + 1206);
  if (v10)
  {
    std::string::basic_string[abi:nn180100]<0>(&v36, (char *)&unk_1C3E4D9BB);
    for (m = 0; m != 32; ++m)
    {
      std::string::basic_string[abi:nn180100]<0>(&v47, "AGCSamplerPCFState");
      std::string::basic_string[abi:nn180100]<0>(&v46, "compareFunc");
      _agcFieldString<char const*>(&v49, (const void **)&v46.__r_.__value_.__l.__data_, _agcCompareFuncStrings[*(_WORD *)(v10 + 2 * m) & 0xF]);
      std::string::basic_string[abi:nn180100]<0>(v44, "clampPCFEnabled");
      _agcFieldString<unsigned short>(&v50, (const void **)v44, (*(_WORD *)(v10 + 2 * m) >> 4) & 1);
      std::string::basic_string[abi:nn180100]<0>(v42, "mipmapMinFilterEnabled");
      _agcFieldString<unsigned short>(&v51, (const void **)v42, (*(_WORD *)(v10 + 2 * m) >> 5) & 1);
      std::string::basic_string[abi:nn180100]<0>(v40, "trilinearMinFilterEnabled");
      _agcFieldString<unsigned short>(&v52, (const void **)v40, (*(_WORD *)(v10 + 2 * m) >> 6) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v39, "linearMinFilterEnabled");
      _agcFieldString<unsigned short>(&v53, (const void **)&v39.__r_.__value_.__l.__data_, (*(_WORD *)(v10 + 2 * m) >> 7) & 1);
      std::string::basic_string[abi:nn180100]<0>(&__p, "linearMagFilterEnabled");
      _agcFieldString<unsigned short>(v54, (const void **)&__p.__r_.__value_.__l.__data_, HIBYTE(*(_WORD *)(v10 + 2 * m)) & 1);
      std::string::basic_string[abi:nn180100]<0>(&v37, "unused");
      _agcFieldString<unsigned short>(&v55, (const void **)&v37.__r_.__value_.__l.__data_, *(_WORD *)(v10 + 2 * m) >> 9);
      _agcGroupWithHeader(&v48, (uint64_t)&v47, 1, (uint64_t)&v49, 7);
      for (n = 0; n != -21; n -= 3)
      {
        if (SHIBYTE(v55.__r_.__value_.__r.__words[n + 2]) < 0)
          operator delete(*(void **)((char *)&v55.__r_.__value_.__l.__data_ + n * 8));
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41) < 0)
        operator delete(v40[0]);
      if (v43 < 0)
        operator delete(v42[0]);
      if (v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v48;
      else
        v13 = (std::string *)v48.__r_.__value_.__r.__words[0];
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      else
        v14 = v48.__r_.__value_.__l.__size_;
      std::string::append(&v36, (const std::string::value_type *)v13, v14);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:nn180100]<0>(&v47, "AGCSamplerPCFStates");
    std::string::basic_string[abi:nn180100]<0>(&v49, "pcf : ");
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v50, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    else
      v50 = v36;
    _agcGroupWithHeader(&__p, (uint64_t)&v47, 0, (uint64_t)&v49, 2);
    for (ii = 0; ii != -6; ii -= 3)
    {
      if (SHIBYTE(v50.__r_.__value_.__r.__words[ii + 2]) < 0)
        operator delete(*(void **)((char *)&v49 + ii * 8 + 24));
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&__p, (char *)&unk_1C3E4D9BB);
  }
  v16 = (unsigned int *)*((_QWORD *)this + 1207);
  std::string::basic_string[abi:nn180100]<0>(&v47, (char *)&unk_1C3E4D9BB);
  for (jj = 1; jj != 33; ++jj)
  {
    std::to_string(&v46, v16[jj]);
    v18 = std::string::append(&v46, " ");
    v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v49;
    else
      v20 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      v21 = v49.__r_.__value_.__l.__size_;
    std::string::append(&v47, (const std::string::value_type *)v20, v21);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:nn180100]<0>(&v46, "AGCSamplerRemapStateGL");
  std::string::basic_string[abi:nn180100]<0>(v44, "samplerCount");
  _agcFieldString<unsigned int>(&v49, (const void **)v44, *v16);
  std::string::basic_string[abi:nn180100]<0>(v42, "samplerToTexUnitMap");
  std::operator+<char>();
  v22 = std::string::append(&v39, "]");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)v40 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v41 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  _agcFieldString<std::string>(&v50, (const void **)v42, (uint64_t)v40);
  _agcGroupWithHeader(&v37, (uint64_t)&v46, 0, (uint64_t)&v49, 2);
  for (kk = 0; kk != -6; kk -= 3)
  {
    if (SHIBYTE(v50.__r_.__value_.__r.__words[kk + 2]) < 0)
      operator delete(*(void **)((char *)&v49 + kk * 8 + 24));
  }
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v49, (const void **)&v30.__r_.__value_.__l.__data_, (const void **)&__p.__r_.__value_.__l.__data_);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v37;
  else
    v25 = (std::string *)v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  else
    v26 = v37.__r_.__value_.__l.__size_;
  v27 = std::string::append(&v49, (const std::string::value_type *)v25, v26);
  *a2 = *v27;
  v27->__r_.__value_.__r.__words[0] = 0;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

BOOL AGCLLVMGLVertexShader::constructReply(AGCLLVMGLVertexShader *this)
{
  _BOOL8 v2;
  int v3;
  int v4;
  char *v5;
  char *v6;
  int v7;
  flatbuffers::FlatBufferBuilder *v8;
  int v9;
  const char *v10;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMGLVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMGLVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = AGCLLVMUserVertexShader::constructFlatReply(this);
    v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v6 = v5 + 2472;
    v5[2542] = 1;
    v7 = *((_DWORD *)v5 + 626) - *((_DWORD *)v5 + 630) + *((_DWORD *)v5 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v5 + 2472, v3);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v6, v4);
    v8 = (AGCLLVMGLVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v9 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v6, v7);
    flatbuffers::FlatBufferBuilder::Finish(v8, v9, v10);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMGLVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  }
  return v2;
}

uint64_t AGCLLVMGLVertexShader::requiresDebugInfo(AGCLLVMGLVertexShader *this)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 1205) + 89) >> 1) & 1;
}

void `virtual thunk to'AGCLLVMGLVertexShader::~AGCLLVMGLVertexShader(AGCLLVMGLVertexShader *this)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EB3F40;
  v1[1211] = &unk_1E7EB4278;
  v1[1215] = &unk_1E7EB4368;
  v2 = (void *)v1[1208];
  if (v2)
  {
    v1[1209] = v2;
    operator delete(v2);
  }
  v3 = (void *)v1[1201];
  if (v3)
  {
    v1[1202] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)v1[1178];
  if (v4 != v1 + 1180)
    free(v4);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7EB4378);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1211));
}

{
  _QWORD *v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48));
  *v1 = &off_1E7EB3F40;
  v1[1211] = &unk_1E7EB4278;
  v1[1215] = &unk_1E7EB4368;
  v2 = (void *)v1[1208];
  if (v2)
  {
    v1[1209] = v2;
    operator delete(v2);
  }
  v3 = (void *)v1[1201];
  if (v3)
  {
    v1[1202] = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)v1[1178];
  if (v4 != v1 + 1180)
    free(v4);
  AGCLLVMUserVertexShader::~AGCLLVMUserVertexShader((AGCLLVMUserVertexShader *)v1, (uint64_t *)off_1E7EB4378);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 1211));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t `virtual thunk to'AGCLLVMGLVertexShader::requiresDebugInfo(AGCLLVMGLVertexShader *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 96) + 9640) + 89) >> 1) & 1;
}

void `virtual thunk to'AGCLLVMGLVertexShader::getCompilationKeyDescription(AGCLLVMGLVertexShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMGLVertexShader::getCompilationKeyDescription((AGCLLVMGLVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMGLVertexShader::constructReply(AGCLLVMGLVertexShader *this)
{
  return AGCLLVMGLVertexShader::constructReply((AGCLLVMGLVertexShader *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 152)));
}

llvm::SmallBitVector *llvm::SmallBitVector::SmallBitVector(llvm::SmallBitVector *this, uint64_t a2)
{
  int v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a2;
  *(_QWORD *)this = 1;
  if (a2 > 0x39)
  {
    v5 = (_QWORD *)operator new();
    v4 = (uint64_t)v5;
    v6 = (v2 + 63) >> 6;
    v7 = v5 + 2;
    *v5 = v5 + 2;
    v5[1] = 0x600000000;
    if ((v2 + 63) < 0x1C0)
    {
      if ((v2 + 63) >= 0x40)
      {
        do
        {
          *v7++ = 0;
          --v6;
        }
        while (v6);
      }
    }
    else
    {
      *((_DWORD *)v5 + 2) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v8 = *(_QWORD **)v4;
      do
      {
        *v8++ = 0;
        --v6;
      }
      while (v6);
    }
    *(_DWORD *)(v4 + 8) = (v2 + 63) >> 6;
    *(_DWORD *)(v4 + 64) = v2;
  }
  else
  {
    v4 = (a2 << 58) | 1;
  }
  *(_QWORD *)this = v4;
  return this;
}

void llvm::SmallBitVector::~SmallBitVector(void ***this)
{
  void **v1;

  v1 = *this;
  if ((*this & 1) == 0 && v1)
  {
    if (*v1 != v1 + 2)
      free(*v1);
    MEMORY[0x1CAA2D68C](v1, 0x1080C40EF38A13ELL);
  }
}

uint64_t AGCLLVMGLVertexShader::replaceAttributeUses(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  llvm::Instruction *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;

  if (a2)
  {
    v5 = a2;
    v6 = (_QWORD *)result;
    v7 = *(_QWORD *)(result + 9640);
    v8 = result + 200;
    v9 = a4 & 0xFFFFFFFD;
    do
    {
      v10 = *(llvm::Instruction **)(v5 + 24);
      v5 = *(_QWORD *)(v5 + 8);
      v11 = *(_QWORD *)(*v6 - 24);
      v12 = (uint64_t *)(v11 + v8 + 32);
      if (v9 != 1)
        v12 = (uint64_t *)v10;
      v13 = *v12;
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v6 + v11 + 40), v10);
      v14 = v6[1205];
      v15 = *(unsigned int *)(v14 + 80);
      if (*(_DWORD *)(v14 + 80))
      {
        v16 = 0;
        while (*(unsigned __int8 *)(v7 + 4 * v16) != a3)
        {
          if (v15 == ++v16)
          {
            v17 = 0;
            LODWORD(v16) = v15;
            goto LABEL_12;
          }
        }
        v17 = (llvm::Value *)v6[v16 + 1184];
      }
      else
      {
        LODWORD(v16) = 0;
        v17 = 0;
      }
LABEL_12:
      AGCLLVMGLVertexShader::generateAttributeValue(v6, (int *)(v7 + 4 * v16), v13, v17);
      llvm::Value::replaceAllUsesWith();
      result = llvm::Instruction::eraseFromParent(v10);
    }
    while (v5);
  }
  return result;
}

llvm::Value *AGCLLVMGLVertexShader::generateAttributeValue(_QWORD *a1, int *a2, uint64_t a3, llvm::Value *a4)
{
  llvm::Type *v5;
  int *v6;
  unsigned int v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *ShuffleVector;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  llvm::Type *v20;
  llvm::Type *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  llvm::IRBuilderBase *v25;
  uint64_t Cast;
  llvm::Type *v27;
  llvm::IRBuilderBase *v28;
  llvm::Value *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t FMul;
  char *v34;
  uint64_t v35;
  llvm::Value *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  llvm::Value *v43;
  llvm::IRBuilderBase *v44;
  llvm::Value *v45;
  unsigned int v46;
  unsigned int v47;
  llvm::Value *v48;
  char *v49;
  llvm::IRBuilderBase *v50;
  llvm::Value *v51;
  llvm::Value *v53;
  int *v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  _BYTE v64[32];
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v5 = (llvm::Type *)a3;
  v6 = a2;
  v70 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    v8 = *(_DWORD *)(a3 + 32);
    v5 = **(llvm::Type ***)(a3 + 16);
  }
  else
  {
    v8 = 1;
  }
  v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v5 == *((llvm::Type **)v9 + 25) || (v10 = v9 + 32, v5 == (llvm::Type *)v10[19]))
  {
    if (*((unsigned __int8 *)a2 + 2) - 9 >= 2)
      llvm::FixedVectorType::get();
    v12 = llvm::ConstantFP::get();
    v11 = llvm::ConstantFP::get();
    v14 = *v6;
    if ((*v6 & 0x1000000) == 0)
    {
      if (BYTE2(v14) <= 0xAu)
        __asm { BR              X10 }
      goto LABEL_9;
    }
    v15 = 1;
    v16 = 16;
    switch(BYTE2(v14))
    {
      case 3:
        v54 = v6;
        v29 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), a4, 1);
        v30 = llvm::ConstantFP::get();
        v31 = llvm::ConstantFP::get();
        v32 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
        v65 = 257;
        FMul = llvm::IRBuilderBase::CreateFMul(v32, (uint64_t)v29, v30, (uint64_t)v64);
        v34 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v35 = *((_QWORD *)v34 + 50);
        v61 = *(_OWORD *)(v34 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v34 + 40));
        v63 = *((_DWORD *)v34 + 34);
        ShuffleVector = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 56))(v35, &v61, FMul, v31, 0);
        if (v62)
          goto LABEL_42;
        goto LABEL_43;
      case 4:
        v36 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), a4, 0);
        v39 = llvm::ConstantFP::get();
        v40 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
        v65 = 257;
        Cast = llvm::IRBuilderBase::CreateFMul(v40, (uint64_t)v36, v39, (uint64_t)v64);
        goto LABEL_44;
      case 5:
        goto LABEL_41;
      case 6:
        v15 = 0;
        goto LABEL_41;
      case 7:
        goto LABEL_40;
      case 8:
        v15 = 0;
LABEL_40:
        v16 = 8;
LABEL_41:
        v53 = a4;
        v54 = v6;
        v37 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v38 = *((_QWORD *)v37 + 50);
        v55 = *(_OWORD *)(v37 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v37 + 40));
        v57 = *((_DWORD *)v37 + 34);
        ShuffleVector = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 96))(v38, &v55, v53, v16, v15, 32);
        if (v56)
LABEL_42:
          llvm::MetadataTracking::untrack();
LABEL_43:
        v6 = v54;
        break;
      case 9:
      case 0xA:
        v17 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v18 = *((_QWORD *)v17 + 50);
        v58 = *(_OWORD *)(v17 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v17 + 40));
        v60 = *((_DWORD *)v17 + 34);
        ShuffleVector = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, llvm::Value *, uint64_t, BOOL))(*(_QWORD *)v18 + 112))(v18, &v58, 5, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 200), a4, 1, *((unsigned __int8 *)v6 + 2) << 16 == 589824);
        if (v59)
          llvm::MetadataTracking::untrack();
        break;
      default:
        goto LABEL_9;
    }
  }
  else
  {
    if (v5 != (llvm::Type *)v10[25] && v5 != (llvm::Type *)v10[24])
    {
      v11 = 0;
      v12 = 0;
LABEL_9:
      ShuffleVector = 0;
      goto LABEL_45;
    }
    v11 = 0;
    v19 = *((unsigned __int8 *)a2 + 2);
    if (v19 <= 0xA)
    {
      if (((1 << v19) & 0x2A8) != 0)
      {
        v20 = (llvm::Type *)llvm::FixedVectorType::get();
        v12 = llvm::ConstantInt::get();
        v11 = llvm::ConstantInt::get();
        if (llvm::Type::getScalarSizeInBits(*(llvm::Type **)a4) <= 0x1F)
        {
          v23 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
          v65 = 257;
          v24 = 40;
LABEL_31:
          Cast = llvm::IRBuilderBase::CreateCast(v23, v24, (uint64_t)a4, (uint64_t)v20, (uint64_t)v64);
          goto LABEL_44;
        }
      }
      else
      {
        if (((1 << v19) & 0x550) == 0)
        {
          v12 = 0;
          ShuffleVector = 0;
          if (*((_BYTE *)a2 + 2))
            goto LABEL_45;
          v27 = (llvm::Type *)llvm::FixedVectorType::get();
          v12 = llvm::ConstantInt::get();
          v11 = llvm::ConstantInt::get();
          v28 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
          v65 = 257;
          Cast = llvm::IRBuilderBase::CreateFPToSI(v28, a4, v27, (const llvm::Twine *)v64);
          goto LABEL_44;
        }
        v20 = (llvm::Type *)llvm::FixedVectorType::get();
        v12 = llvm::ConstantInt::get();
        v11 = llvm::ConstantInt::get();
        v21 = *(llvm::Type **)a4;
        if ((*(_DWORD *)(*(_QWORD *)a4 + 8) & 0xFE) == 0x12)
          v22 = *(unsigned __int8 *)(**((_QWORD **)v21 + 2) + 8);
        else
          v22 = *(_DWORD *)(*(_QWORD *)a4 + 8);
        if (v22 <= 6)
        {
          v25 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
          v65 = 257;
          Cast = llvm::IRBuilderBase::CreateFPToUI(v25, a4, v20, (const llvm::Twine *)v64);
LABEL_44:
          ShuffleVector = (llvm::Value *)Cast;
          goto LABEL_45;
        }
        if (llvm::Type::getScalarSizeInBits(v21) <= 0x1F)
        {
          v23 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
          v65 = 257;
          v24 = 39;
          goto LABEL_31;
        }
      }
      ShuffleVector = a4;
      goto LABEL_45;
    }
    v12 = 0;
    ShuffleVector = 0;
  }
LABEL_45:
  v41 = *(_DWORD *)(*(_QWORD *)ShuffleVector + 32);
  v42 = *v6;
  if ((*v6 & 0x2000000) != 0)
  {
    v66 = llvm::ConstantInt::get();
    v67 = llvm::ConstantInt::get();
    v68 = llvm::ConstantInt::get();
    v69 = llvm::ConstantInt::get();
    v43 = (llvm::Value *)llvm::ConstantVector::get();
    v44 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v45 = (llvm::Value *)llvm::UndefValue::get();
    v65 = 257;
    ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(v44, ShuffleVector, v45, v43, (const llvm::Twine *)v64);
    v42 = *v6;
  }
  v46 = BYTE1(v42);
  v47 = BYTE1(v42) + 1;
  if (v41 > v47)
    ShuffleVector = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), ShuffleVector, 0, v47, 0);
  if (v8 == 1 || v8 <= v46)
  {
    ShuffleVector = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), ShuffleVector, 0, v8, 1);
  }
  else if (v8 > v47)
  {
    ShuffleVector = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), ShuffleVector, v8);
    do
    {
      if (v47 == 3)
        v48 = (llvm::Value *)v11;
      else
        v48 = (llvm::Value *)v12;
      v49 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v65 = 257;
      v50 = (llvm::IRBuilderBase *)(v49 + 40);
      v51 = (llvm::Value *)llvm::ConstantInt::get();
      ShuffleVector = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v50, ShuffleVector, v48, v51, (const llvm::Twine *)v64);
      ++v47;
    }
    while (v8 != v47);
  }
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), ShuffleVector, v5);
}

uint64_t AGCLLVMGLVertexShader::castAttribToElementType(uint64_t a1, int a2)
{
  if (BYTE2(a2) <= 0xAu)
    __asm { BR              X10 }
  return 0;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<AGCLLVMGLVertexShader::VertexInput>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(20 * a1);
}

uint64_t AGCLLVMGLVertexShader::AGCLLVMGLVertexShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 9688), a2, *a3);
  v11 = AGCLLVMUserVertexShader::AGCLLVMUserVertexShader(a1, (uint64_t *)off_1E7EB4378, (uint64_t)a3, a4, 1);
  *(_QWORD *)a1 = &off_1E7EB3F40;
  *(_QWORD *)(a1 + 9688) = &unk_1E7EB4278;
  *(_QWORD *)(a1 + 9720) = &unk_1E7EB4368;
  *(_QWORD *)(a1 + 9424) = a1 + 9440;
  *(_QWORD *)(a1 + 9432) = 0x800000000;
  *(_OWORD *)(a1 + 9472) = 0u;
  *(_OWORD *)(a1 + 9488) = 0u;
  *(_OWORD *)(a1 + 9504) = 0u;
  *(_OWORD *)(a1 + 9520) = 0u;
  *(_OWORD *)(a1 + 9536) = 0u;
  *(_OWORD *)(a1 + 9552) = 0u;
  *(_OWORD *)(a1 + 9568) = 0u;
  *(_OWORD *)(a1 + 9584) = 0u;
  *(_QWORD *)(a1 + 9608) = 0;
  *(_OWORD *)(a1 + 9616) = 0u;
  *(_QWORD *)(a1 + 9632) = -1;
  *(_QWORD *)(a1 + 9640) = a4;
  *(_QWORD *)(a1 + 9648) = a6;
  *(_QWORD *)(a1 + 9656) = a5;
  *(_QWORD *)(a1 + 9680) = 0;
  *(_OWORD *)(a1 + 9664) = 0u;
  *(_DWORD *)(a1 + 5048) = *(unsigned __int8 *)(a4 + 88);
  AGCLLVMUserShader::markNoAliasForGL(v11);
  return a1;
}

uint64_t AGCLLVMAirImageBlockGen3::replaceBulkMemWrites(AGCLLVMAirImageBlockGen3 *this)
{
  uint64_t v1;
  uint64_t v2;
  llvm::IRBuilderBase *v4;
  uint64_t v5;
  int v6;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  _BOOL4 v19;
  llvm::Instruction *v20;
  _DWORD *v21;
  uint64_t v22;
  llvm::BasicBlock *v23;
  uint64_t v24;
  llvm::BasicBlock *v25;
  _QWORD *v26;
  llvm::Instruction *v27;
  _QWORD *v28;
  llvm::Instruction *v29;
  llvm::Type **v30;
  uint64_t v31;
  llvm::Value *Cast;
  llvm::Value *ICmp;
  llvm::Value *v34;
  llvm::Value *Element;
  llvm::Value *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::CmpInst **v40;
  llvm::Value *v41;
  uint64_t Add;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  _QWORD *v46;
  llvm::Value *v47;
  llvm::Value *Sub;
  uint64_t v49;
  llvm::Value *v50;
  _QWORD *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  uint64_t v55;
  uint64_t v56;
  llvm::BasicBlock *v57;
  _BOOL4 v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  char v63[32];
  __int16 v64;
  _BYTE v65[32];
  __int16 v66;
  _BYTE v67[32];
  __int16 v68;
  void *v69[2];
  char v70;
  void *__p[2];
  char v72;
  __int128 v73;
  __int128 v74;
  _BYTE v75[29];
  __int128 v76;
  __int128 v77;
  _WORD v78[24];

  v1 = *((_QWORD *)this + 42);
  v2 = *(_QWORD *)(v1 + 32);
  v55 = v1 + 24;
  if (v2 != v1 + 24)
  {
    v4 = (AGCLLVMAirImageBlockGen3 *)((char *)this + 8);
    do
    {
      if (v2)
        v5 = v2 - 56;
      else
        v5 = 0;
      v56 = *(_QWORD *)(v2 + 8);
      v6 = *(_DWORD *)(v5 + 36);
      if ((v6 - 194) <= 5 && ((1 << (v6 + 62)) & 0x29) != 0)
      {
        if ((*(_WORD *)(v5 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v5);
        v8 = *(_QWORD **)(v5 + 88);
        v9 = *(_DWORD *)(*v8 + 8);
        if ((v9 & 0xFE) == 0x12)
          v9 = *(_DWORD *)(**(_QWORD **)(*v8 + 16) + 8);
        v10 = v8[5];
        if (*(_BYTE *)(v10 + 8) != 15)
          v10 = 0;
        if (v10)
        {
          v11 = *(_DWORD *)(v10 + 8);
          if ((v11 & 0xFE) == 0x12)
            v11 = *(_DWORD *)(**(_QWORD **)(v10 + 16) + 8);
          v12 = v11 >> 8;
        }
        else
        {
          v12 = 0;
        }
        v13 = v9 >> 8;
        if (v10)
          v14 = v12 == 4;
        else
          v14 = 0;
        v15 = v14;
        if (v13 == 4 || v15 != 0)
        {
          v17 = *(_QWORD *)(v5 + 8);
          if (v17)
          {
            v19 = v6 == 197 && v13 == v12;
            v58 = v19;
            do
            {
              v20 = *(llvm::Instruction **)(v17 + 24);
              v21 = (_DWORD *)((char *)v20 - 32 * (*((_DWORD *)v20 + 5) & 0x7FFFFFF));
              v59 = *(_QWORD *)(v17 + 8);
              v60 = *(unsigned __int8 **)v21;
              v62 = (unsigned __int8 *)*((_QWORD *)v21 + 4);
              v22 = *((_QWORD *)v21 + 8);
              llvm::ConstantInt::get();
              llvm::IRBuilderBase::SetInsertPoint(v4, v20);
              v23 = (llvm::BasicBlock *)*((_QWORD *)this + 7);
              *(_QWORD *)&v76 = "loop.done";
              v78[0] = 259;
              v24 = llvm::BasicBlock::splitBasicBlock();
              *(_QWORD *)&v76 = "loop.forward";
              v78[0] = 259;
              v25 = (llvm::BasicBlock *)operator new();
              v61 = v24;
              llvm::BasicBlock::BasicBlock();
              *((_QWORD *)this + 7) = v23;
              *((_QWORD *)this + 8) = (char *)v23 + 40;
              v26 = (_QWORD *)*((_QWORD *)v23 + 5);
              if (v26 == (_QWORD *)((char *)v23 + 40))
              {
                v29 = 0;
              }
              else
              {
                v27 = (llvm::Instruction *)(v26 - 3);
                if (v26)
                  v28 = v26 - 3;
                else
                  v28 = 0;
                if (*((unsigned __int8 *)v28 + 16) - 29 >= 0xB)
                  v29 = 0;
                else
                  v29 = v27;
              }
              v30 = (llvm::Type **)v60;
              llvm::Instruction::eraseFromParent(v29);
              v31 = *((_QWORD *)this + 24);
              v78[0] = 257;
              Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, v22, v31, (uint64_t)&v76);
              if (v58)
              {
                *(_QWORD *)&v76 = "loop.reverse";
                v78[0] = 259;
                v57 = (llvm::BasicBlock *)operator new();
                llvm::BasicBlock::BasicBlock();
                v77 = 0u;
                memset(v78, 0, 29);
                v76 = 0u;
                v74 = 0u;
                memset(v75, 0, sizeof(v75));
                v73 = 0u;
                std::string::basic_string[abi:nn180100]<0>(__p, 0);
                AGCLLVMAirImageBlockGen3::unpackImageBlockData(this, (uint64_t)&v76, v60, (uint64_t)__p);
                if (v72 < 0)
                  operator delete(__p[0]);
                std::string::basic_string[abi:nn180100]<0>(v69, 0);
                AGCLLVMAirImageBlockGen3::unpackImageBlockData(this, (uint64_t)&v73, v62, (uint64_t)v69);
                if (v70 < 0)
                  operator delete(v69[0]);
                v68 = 257;
                ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v4, 32, (llvm::CmpInst **)v74, v77, (uint64_t)v67);
                v68 = 257;
                v34 = (llvm::Value *)llvm::ConstantInt::get();
                Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v4, ICmp, v34, (const llvm::Twine *)v67);
                v66 = 257;
                v36 = (llvm::Value *)llvm::ConstantInt::get();
                v37 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v4, ICmp, v36, (const llvm::Twine *)v65);
                v64 = 257;
                v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, Element, v37, (const llvm::Twine *)v63);
                v39 = (llvm::Value *)v73;
                v40 = (llvm::CmpInst **)v76;
                v68 = 257;
                v41 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v4, 36, (llvm::CmpInst **)v73, v76, (uint64_t)v67);
                v68 = 257;
                Add = llvm::IRBuilderBase::CreateAdd(v4, v39, Cast, (const llvm::Twine *)v67);
                v66 = 257;
                v43 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v4, 34, v40, Add, (uint64_t)v65);
                v68 = 257;
                v44 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, v41, v43, (const llvm::Twine *)v67);
                v68 = 257;
                v45 = llvm::IRBuilderBase::CreateAnd(v4, v44, v38, (const llvm::Twine *)v67);
                llvm::IRBuilderBase::CreateCondBr((uint64_t *)v4, v45, (uint64_t)v57, (uint64_t)v25);
                v46 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
                v47 = (llvm::Value *)llvm::ConstantInt::get();
                v68 = 257;
                Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v4, Cast, v47, (const llvm::Twine *)v67);
                v49 = llvm::ConstantInt::get();
                v50 = (llvm::Value *)llvm::ConstantInt::get();
                v30 = (llvm::Type **)v60;
                AGCLLVMGen3TargetLowerer::buildImageBlockMemWriteLoop(v46, v23, v57, v61, (llvm::Type **)v60, (llvm::Type **)v62, Sub, v49, v50, 0x27u);
                if ((v75[15] & 0x80000000) != 0)
                  operator delete(*((void **)&v74 + 1));
                v17 = v59;
                if (SHIBYTE(v78[7]) < 0)
                  operator delete(*((void **)&v77 + 1));
              }
              else
              {
                llvm::IRBuilderBase::CreateBr(v4, v25);
                v17 = v59;
              }
              v51 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 46) + 680))(*((_QWORD *)this + 46));
              v52 = (llvm::Value *)llvm::ConstantInt::get();
              v53 = (llvm::Value *)llvm::ConstantInt::get();
              AGCLLVMGen3TargetLowerer::buildImageBlockMemWriteLoop(v51, v23, v25, v61, v30, (llvm::Type **)v62, v52, (uint64_t)Cast, v53, 0x24u);
              llvm::Instruction::eraseFromParent(v20);
            }
            while (v17);
          }
        }
      }
      v2 = v56;
    }
    while (v56 != v55);
  }
  return 1;
}

uint64_t AGCLLVMAirImageBlockGen3::setupImageBlocks(llvm::Value *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;
  char v22;
  llvm::Value **v23;
  uint64_t v24;
  char v25;
  char v26;
  void **v27;
  int v28;
  int v29;
  size_t v30;
  int v31;
  BOOL v32;
  _BYTE *v33;
  llvm::Value *v34;
  int v35;
  BOOL v36;
  _BYTE *v37;
  _BYTE *v38;
  size_t v39;
  int v40;
  size_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t j;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int Key;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  llvm::IRBuilderBase *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned __int16 *v78;
  unsigned __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned __int8 *v83;
  llvm::Value *v84;
  llvm::Type ***v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  llvm::Instruction *v90;
  uint64_t v91;
  int v92;
  unsigned __int8 *v93;
  llvm::Value *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void **v100;
  uint64_t v101;
  llvm::Instruction *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  double ImageBlockOffsetAndFormatFromDrawBuffer;
  uint64_t v121;
  void **v122;
  uint64_t v123;
  llvm::Constant **ShuffleVector;
  llvm::Constant *v125;
  llvm::Type *v126;
  llvm::Value *NullValue;
  llvm::Value *v128;
  llvm::Value *v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  llvm::Constant *v133;
  llvm::Type *v134;
  llvm::Value *v135;
  llvm::Value *v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  llvm::Value *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  llvm::Value *v145;
  uint64_t v146;
  uint64_t Select;
  llvm::Value *v148;
  uint64_t LShr;
  uint64_t v150;
  llvm::Value *v151;
  uint64_t v152;
  llvm::Value *v153;
  llvm::CmpInst **v154;
  uint64_t v155;
  llvm::Value *v156;
  llvm::Value *v157;
  llvm::Value *v158;
  llvm::Value *UDiv;
  llvm::Value *v160;
  llvm::Value *v161;
  llvm::Value *ImageBlockSampleMask;
  llvm::Value *v163;
  llvm::Value *v164;
  llvm::Value *v165;
  llvm::Value *InsertElement;
  llvm::Value *v167;
  llvm::Value *Element;
  llvm::Value *v169;
  llvm::Value *v170;
  llvm::Value *v171;
  llvm::Value *v172;
  llvm::Value *v173;
  llvm::Value *v174;
  llvm::Value *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t Cast;
  llvm::Instruction *NextNonDebugInstruction;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  llvm::Constant *v184;
  llvm::Value *v185;
  _QWORD *v186;
  llvm::Value *v187;
  _QWORD *v188;
  uint64_t v189;
  llvm::Value *v190;
  uint64_t v191;
  uint64_t v192;
  unsigned __int8 *v193;
  llvm::Value *v194;
  uint64_t *v195;
  llvm::Type *v196;
  uint64_t v197;
  uint64_t v198;
  void **v199;
  uint64_t v200;
  uint64_t v202;
  uint64_t v203;
  llvm::Value *v204;
  llvm::Value *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  llvm::Value *v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  llvm::DataLayout *v216;
  int v217;
  unsigned int v218;
  __int128 v219;
  uint64_t v220;
  int v221;
  __int128 v222;
  uint64_t v223;
  int v224;
  __int128 v225;
  uint64_t v226;
  int v227;
  __int128 v228;
  uint64_t v229;
  int v230;
  void *v231[2];
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  int v235;
  __int128 v236;
  uint64_t v237;
  int v238;
  void *__p[2];
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  int v243;
  __int128 v244;
  uint64_t v245;
  int v246;
  __int128 v247;
  uint64_t v248;
  int v249;
  __int128 v250;
  uint64_t v251;
  int v252;
  void *__dst[2];
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  int v257;
  __int128 v258;
  uint64_t v259;
  int v260;
  __int128 v261;
  uint64_t v262;
  int v263;
  __int128 v264;
  uint64_t v265;
  int v266;
  __int128 v267;
  uint64_t v268;
  int v269;
  __int128 v270;
  size_t __len[2];
  uint64_t v272;
  uint64_t Name;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  int v277;
  __int128 v278;
  uint64_t v279;
  int v280;
  __int128 v281;
  uint64_t v282;
  int v283;
  __int16 v284;
  llvm::Value *v285[2];
  void *v286[2];
  _OWORD v287[2];
  _BYTE __src[24];
  _BYTE v289[64];
  void *v290[2];
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int16 v295;
  uint64_t v296;
  _QWORD v297[4];

  v297[1] = *MEMORY[0x1E0C80C00];
  if ((v7 & 1) == 0
  {
    AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map = 0;
    *(_QWORD *)&dword_1EF8E7698 = 0;
    qword_1EF8E76A0 = 0x3000000000;
    __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::~StringMap, &AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map, &dword_1C3C54000);
  }
  v212 = a1;
  if (!dword_1EF8E769C)
  {
    v210 = a3;
    v206 = a4;
    *(_OWORD *)&__src[4] = 0uLL;
    v8 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.imageblock_data", 0x13uLL);
    *(_QWORD *)(v8 + 8) = 0x300000000;
    *(_DWORD *)(v8 + 16) = 2;
    *(_DWORD *)(v8 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v8 + 20) = *(_OWORD *)__src;
    *(_QWORD *)(v8 + 40) = -4261347073;
    *(_QWORD *)&__src[12] = 0;
    *(_QWORD *)&__src[4] = 0;
    v9 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.implicit_imageblock_data", 0x1CuLL);
    *(_QWORD *)(v9 + 8) = 0x300000001;
    *(_DWORD *)(v9 + 16) = 2;
    *(_DWORD *)(v9 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v9 + 20) = *(_OWORD *)__src;
    *(_QWORD *)(v9 + 40) = -4244504320;
    *(_QWORD *)&__src[12] = 0;
    *(_QWORD *)&__src[4] = 0;
    v10 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_imageblock_width", 0x18uLL);
    *(_QWORD *)(v10 + 8) = 2;
    *(_DWORD *)(v10 + 16) = 2;
    *(_DWORD *)(v10 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v10 + 20) = *(_OWORD *)__src;
    *(_QWORD *)(v10 + 40) = -1;
    *(_QWORD *)&__src[12] = 0;
    *(_QWORD *)&__src[4] = 0;
    v11 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_imageblock_height", 0x19uLL);
    *(_QWORD *)(v11 + 8) = 0x100000002;
    *(_DWORD *)(v11 + 16) = 2;
    *(_DWORD *)(v11 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v11 + 20) = *(_OWORD *)__src;
    *(_QWORD *)(v11 + 40) = -1;
    *(_QWORD *)&__src[12] = 0;
    *(_QWORD *)&__src[4] = 0;
    v12 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_imageblock_samples", 0x1AuLL);
    *(_QWORD *)(v12 + 8) = 0x200000002;
    *(_DWORD *)(v12 + 16) = 2;
    *(_DWORD *)(v12 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v12 + 20) = *(_OWORD *)__src;
    *(_QWORD *)(v12 + 40) = -1;
    *(_QWORD *)&__src[12] = 0;
    *(_QWORD *)&__src[4] = 0;
    v13 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_imageblock_num_colors", 0x1DuLL);
    *(_QWORD *)(v13 + 8) = 0x300000005;
    *(_DWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v13 + 20) = *(_OWORD *)__src;
    *(_QWORD *)(v13 + 40) = -1;
    *(_QWORD *)&__src[12] = 0;
    *(_QWORD *)&__src[4] = 0;
    v14 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>("air.get_color_coverage_mask", 0x1BuLL);
    *(_QWORD *)(v14 + 8) = 0x300000005;
    *(_DWORD *)(v14 + 16) = 1;
    *(_DWORD *)(v14 + 36) = *(_DWORD *)&__src[16];
    *(_OWORD *)(v14 + 20) = *(_OWORD *)__src;
    *(_QWORD *)(v14 + 40) = -1;
    std::string::basic_string[abi:nn180100]<0>(v285, ".imageblock");
    std::string::basic_string[abi:nn180100]<0>(&v286[1], ".implicit_imageblock");
    std::string::basic_string[abi:nn180100]<0>(v290, ".mask");
    std::string::basic_string[abi:nn180100]<0>((_QWORD *)&v291 + 1, (char *)&unk_1C3E4D9BB);
    v15 = 0;
    v16 = 0;
    *(_QWORD *)__src = v289;
    v17 = "air.load";
    *(_OWORD *)&__src[8] = xmmword_1C3E37B50;
    do
    {
      v18 = 0;
      v213 = v16;
      v19 = &(&AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::op_types)[2 * v16 + 1];
      v20 = ".i8";
      do
      {
        v214 = v18;
        v21 = 0;
        v22 = 1;
        do
        {
          v215 = v22;
          v23 = &v285[3 * v21];
          v217 = std::string::compare((const std::string *)v23, ".imageblock");
          if (v15 & 1 | (v217 != 0))
          {
            v24 = 0;
            v25 = 1;
            do
            {
              v26 = v25;
              v27 = &v290[3 * v24];
              v28 = std::string::compare((const std::string *)v27, ".mask");
              if (v15 & 1 | (v28 != 0))
              {
                v29 = v28;
                v30 = strlen(v17);
                *(_QWORD *)&__src[8] = 0;
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v17, &v17[v30]);
                v31 = *((char *)v23 + 23);
                v32 = v31 < 0;
                if (v31 >= 0)
                  v33 = v23;
                else
                  v33 = *v23;
                v34 = (llvm::Value *)*((unsigned __int8 *)v23 + 23);
                if (v32)
                  v34 = v23[1];
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v33, (_BYTE *)v34 + (_QWORD)v33);
                v35 = *((char *)v27 + 23);
                v36 = v35 < 0;
                if (v35 >= 0)
                  v37 = v27;
                else
                  v37 = *v27;
                v38 = (_BYTE *)*((unsigned __int8 *)v27 + 23);
                if (v36)
                  v38 = v27[1];
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v37, &v38[(_QWORD)v37]);
                v39 = strlen(v20);
                llvm::SmallVectorImpl<char>::append<char const*,void>(__src, v20, &v20[v39]);
                v40 = *(_DWORD *)v19;
                v41 = strlen(v20);
                if (v41)
                  v42 = v20 + 1;
                else
                  v42 = v20;
                if (v40 == 4)
                {
                  v44 = 0xFF00FF03FFFF0201;
                  if (v29)
                    v44 = 0xFF00FFFF04030201;
                  if (v217)
                    v43 = v44;
                  else
                    v43 = 0x3000102FFFFFFFFLL;
                }
                else if (v40 == 3)
                {
                  v43 = -4244504320;
                }
                else
                {
                  v43 = -1;
                }
                v45 = v41 - (v41 != 0);
                v46 = *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>(*(const void **)__src, *(size_t *)&__src[8]);
                *(_DWORD *)(v46 + 8) = v40;
                *(_QWORD *)(v46 + 12) = 0x200000003;
                *(_QWORD *)(v46 + 24) = v42;
                *(_QWORD *)(v46 + 32) = v45;
                *(_QWORD *)(v46 + 40) = v43;
              }
              v25 = 0;
              v24 = 1;
            }
            while ((v26 & 1) != 0);
          }
          v22 = 0;
          v21 = 1;
        }
        while ((v215 & 1) != 0);
        v18 = v214 + 1;
        v20 = (&pixel_data_types)[2 * v214 + 2];
      }
      while (v214 != 14);
      v17 = (&AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::op_types)[2 * v213 + 2];
      v15 = 1;
      v16 = 1;
    }
    while (v213 != 1);
    if (*(_BYTE **)__src != v289)
      free(*(void **)__src);
    v47 = 0;
    a4 = v206;
    a1 = v212;
    do
    {
      if (*((char *)&v292 + v47 + 15) < 0)
        operator delete(*(void **)((char *)&v291 + v47 + 8));
      v47 -= 24;
    }
    while (v47 != -48);
    for (i = 0; i != -6; i -= 3)
    {
      if (*((char *)v287 + i * 8 + 15) < 0)
        operator delete(v286[i + 1]);
    }
    a3 = v210;
  }
  *(_QWORD *)__src = &__src[16];
  *(_QWORD *)&__src[8] = 0x800000000;
  v290[0] = &v291;
  v290[1] = (void *)0x800000008;
  v291 = 0u;
  v292 = 0u;
  if (a4)
    v49 = *(_BYTE *)(a4 + 33) & 0xF;
  else
    v49 = 1;
  v218 = v49;
  v50 = *((_QWORD *)a1 + 42);
  v51 = v50 + 24;
  v52 = *(_QWORD *)(v50 + 32);
  if (v52 != v50 + 24)
  {
    v53 = 0x1EF8E7000uLL;
    do
    {
      v54 = v52 - 56;
      if (!v52)
        v54 = 0;
      v55 = v54 + 72;
      for (j = *(_QWORD *)(v54 + 80); j != v55; j = *(_QWORD *)(j + 8))
      {
        v57 = j - 24;
        if (!j)
          v57 = 0;
        v58 = *(_QWORD *)(v57 + 48);
        if (v58 != v57 + 40)
        {
          while (1)
          {
LABEL_94:
            if (j == v55)
              goto LABEL_95;
            if (v58)
              v59 = v58 - 24;
            else
              v59 = 0;
            v60 = *(unsigned __int8 *)(v59 + 16);
            if (v60 == 84)
              v61 = v59;
            else
              v61 = 0;
            if (v58 && v60 == 84)
            {
              v62 = *(_QWORD *)(v61 - 32);
              if (!v62 || *(_BYTE *)(v62 + 16) || *(_QWORD *)(v62 + 24) != *(_QWORD *)(v61 + 72))
                goto LABEL_87;
              llvm::Value::getName((llvm::Value *)v62);
              Key = llvm::StringMapImpl::FindKey();
              if (Key == -1 || Key == (unint64_t)dword_1EF8E7698)
                goto LABEL_87;
              if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 1680) + 8 * Key) + 8) <= 1u)
              {
                v65 = *(unsigned int *)&__src[8];
                if (*(_DWORD *)&__src[8])
                {
                  v66 = a4;
                  v67 = a3;
                  if (*(_DWORD *)&__src[8] >= *(_DWORD *)&__src[12])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                    v65 = *(unsigned int *)&__src[8];
                  }
                  v68 = *(uint64_t **)__src;
                  *(_QWORD *)(*(_QWORD *)__src + 8 * v65) = *(_QWORD *)(*(_QWORD *)__src + 8 * v65 - 8);
                  v69 = *(_QWORD *)__src + 8 * v65 - 8;
                  if ((uint64_t *)v69 != v68)
                  {
                    memmove(v68 + 1, v68, v69 - (_QWORD)v68);
                    LODWORD(v65) = *(_DWORD *)&__src[8];
                  }
                  *(_DWORD *)&__src[8] = v65 + 1;
                  *v68 = v59;
                  a3 = v67;
                  a4 = v66;
                  v53 = 0x1EF8E7000;
                  goto LABEL_87;
                }
              }
            }
            else if ((v60 & 0xFE) != 0x3C || v58 == 0)
            {
              goto LABEL_87;
            }
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__src, v59);
LABEL_87:
            v58 = *(_QWORD *)(v58 + 8);
            v71 = j - 24;
            if (!j)
              v71 = 0;
            if (v58 == v71 + 40)
            {
              while (1)
              {
                j = *(_QWORD *)(j + 8);
                if (j == v55)
                  goto LABEL_95;
                v72 = j - 24;
                if (!j)
                  v72 = 0;
                v58 = *(_QWORD *)(v72 + 48);
                if (v58 != v72 + 40)
                  goto LABEL_94;
              }
            }
          }
        }
      }
LABEL_95:
      v52 = *(_QWORD *)(v52 + 8);
    }
    while (v52 != v51);
    if (*(_DWORD *)&__src[8])
    {
      v73 = (llvm::Value *)((char *)v212 + 8);
      v74 = *(uint64_t **)__src;
      v216 = (llvm::Value *)((char *)v212 + 384);
      v75 = 8 * *(unsigned int *)&__src[8];
      while (1)
      {
        v76 = *v74;
        v77 = *(unsigned __int8 *)(*v74 + 16);
        v78 = v77 == 60 ? (unsigned __int16 *)*v74 : 0;
        v79 = v77 == 61 ? (unsigned __int16 *)*v74 : 0;
        if (!v76)
          break;
        if (v77 != 84)
          break;
        v80 = *(_QWORD *)(v76 - 32);
        if (!v80 || *(_BYTE *)(v80 + 16) || *(_QWORD *)(v80 + 24) != *(_QWORD *)(v76 + 72))
          break;
        Name = llvm::Value::getName(*(llvm::Value **)(v76 - 32));
        v274 = v103;
        v104 = llvm::StringMapImpl::FindKey();
        v105 = AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map;
        if (v104 == -1)
          v106 = dword_1EF8E7698;
        else
          v106 = v104;
        llvm::IRBuilderBase::SetInsertPoint(v73, (llvm::Instruction *)v76);
        v107 = *(_QWORD *)(v105 + 8 * v106);
        v108 = *(_OWORD *)(v107 + 24);
        v270 = *(_OWORD *)(v107 + 8);
        *(_OWORD *)__len = v108;
        v272 = *(_QWORD *)(v107 + 40);
        switch((int)v270)
        {
          case 0:
          case 1:
            memset(v287, 0, 29);
            *(_OWORD *)v286 = 0u;
            *(_OWORD *)v285 = 0u;
            v207 = a4;
            if ((_DWORD)v270)
            {
              v109 = *(_QWORD *)(v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF) + 32 * v272);
              v110 = (_QWORD *)(v109 + 24);
              if (*(_DWORD *)(v109 + 32) >= 0x41u)
                v110 = (_QWORD *)*v110;
              v111 = (_QWORD *)*v110;
              v285[0] = (llvm::Value *)llvm::ConstantInt::get();
              if (AGCLLVMAirImageBlockGen3::getRTZModeFromImageBlockUser((uint64_t)v212, (uint64_t)v285, v76))*((_DWORD *)v290[0] + v111) = DWORD2(v287[1]);
            }
            else
            {
              v285[0] = (llvm::Value *)llvm::ConstantInt::get();
            }
            v286[0] = *(void **)(v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF) + 32 * BYTE1(v272));
            v161 = (llvm::Value *)v286[0];
            ImageBlockSampleMask = (llvm::Value *)AGCLLVMAirImageBlockGen3::getImageBlockSampleMask((uint64_t)v212, (unsigned __int8 *)&v270, v76);
            v285[1] = ImageBlockSampleMask;
            v205 = *(llvm::Value **)v76;
            v163 = (llvm::Value *)llvm::UndefValue::get();
            v164 = v285[0];
            v284 = 257;
            v165 = (llvm::Value *)llvm::ConstantInt::get();
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v73, v163, v164, v165, (const llvm::Twine *)&v281);
            v284 = 257;
            v167 = (llvm::Value *)llvm::ConstantInt::get();
            Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v73, v161, v167, (const llvm::Twine *)&v281);
            v295 = 257;
            v169 = (llvm::Value *)llvm::ConstantInt::get();
            v170 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v73, InsertElement, Element, v169, (const llvm::Twine *)&v293);
            v284 = 257;
            v171 = (llvm::Value *)llvm::ConstantInt::get();
            v172 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v73, v161, v171, (const llvm::Twine *)&v281);
            v295 = 257;
            v173 = (llvm::Value *)llvm::ConstantInt::get();
            v174 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v73, v170, v172, v173, (const llvm::Twine *)&v293);
            v284 = 257;
            v175 = (llvm::Value *)llvm::ConstantInt::get();
            v176 = llvm::IRBuilderBase::CreateInsertElement(v73, v174, ImageBlockSampleMask, v175, (const llvm::Twine *)&v281);
            v177 = *((_QWORD *)v212 + 26);
            v284 = 257;
            Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v73, 49, v176, v177, (uint64_t)&v281);
            v295 = 257;
            ShuffleVector = (llvm::Constant **)llvm::IRBuilderBase::CreateCast((uint64_t)v73, 48, Cast, (uint64_t)v205, (uint64_t)&v293);
            if (SHIBYTE(v287[0]) < 0)
              operator delete(v286[1]);
            a4 = v207;
            goto LABEL_236;
          case 2:
            switch(DWORD1(v270))
            {
              case 0:
                goto LABEL_233;
              case 2:
                v192 = llvm::ConstantInt::get();
                break;
              case 1:
LABEL_233:
                llvm::FunctionType::get();
                llvm::Module::getOrInsertFunction();
                LOWORD(v287[0]) = 257;
                v190 = llvm::IRBuilderBase::CreateCall((uint64_t)v73, **(_QWORD **)(*(_QWORD *)v189 + 16), v189, 0, 0, (uint64_t)v285);
                v191 = *(_QWORD *)v76;
                LOWORD(v287[0]) = 257;
                v192 = llvm::IRBuilderBase::CreateCast((uint64_t)v73, 38, (uint64_t)v190, v191, (uint64_t)v285);
                break;
              default:
                goto LABEL_238;
            }
            ShuffleVector = (llvm::Constant **)v192;
            goto LABEL_236;
          case 3:
            memset(v287, 0, 29);
            *(_OWORD *)v286 = 0u;
            *(_OWORD *)v285 = 0u;
            v286[0] = *(void **)(v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF) + 32 * BYTE1(v272));
            v285[1] = (llvm::Value *)AGCLLVMAirImageBlockGen3::getImageBlockSampleMask((uint64_t)v212, (unsigned __int8 *)&v270, v76);
            v117 = *(_QWORD *)(v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF) + 32 * v272);
            v118 = (_QWORD *)(v117 + 24);
            if (*(_DWORD *)(v117 + 32) >= 0x41u)
              v118 = (_QWORD *)*v118;
            v119 = (_QWORD *)*v118;
            ImageBlockOffsetAndFormatFromDrawBuffer = AGCLLVMAirImageBlockGen3::getImageBlockOffsetAndFormatFromDrawBuffer(*((_QWORD *)v212 + 24), *(unsigned int *)(*((_QWORD *)v212 + 46) + 868), (uint64_t)v285, a4, *v118);
            v121 = (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46), ImageBlockOffsetAndFormatFromDrawBuffer);
            v255 = *(_OWORD *)((char *)v212 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation(v73);
            v257 = *((_DWORD *)v212 + 26);
            if (v287[0] >= 0)
              v122 = &v286[1];
            else
              v122 = (void **)v286[1];
            if (v287[0] >= 0)
              v123 = HIBYTE(v287[0]);
            else
              v123 = *(_QWORD *)&v287[0];
            ShuffleVector = (llvm::Constant **)AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(v121, &v255, (uint64_t)v122, v123, v218, a2, *(llvm::Type ****)v76, (uint64_t)v285[0], (uint64_t)v285[1], (uint64_t)v286[0]);
            if (v256)
              llvm::MetadataTracking::untrack();
            if ((*(_DWORD *)(a4 + 4 * v119) & 0xE00) == 0xC00)
            {
              v125 = *ShuffleVector;
              v293 = 0u;
              v294 = 0u;
              *(_QWORD *)&v293 = llvm::ConstantInt::get();
              *((_QWORD *)&v293 + 1) = llvm::ConstantInt::get();
              *(_QWORD *)&v294 = llvm::ConstantInt::get();
              *((_QWORD *)&v294 + 1) = llvm::ConstantInt::get();
              NullValue = (llvm::Value *)llvm::Constant::getNullValue(v125, v126);
              v128 = (llvm::Value *)llvm::ConstantVector::get();
              v284 = 257;
              ShuffleVector = (llvm::Constant **)llvm::IRBuilderBase::CreateShuffleVector(v73, (llvm::Value *)ShuffleVector, NullValue, v128, (const llvm::Twine *)&v281);
            }
            if (llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)ShuffleVector))
            {
              NextNonDebugInstruction = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)ShuffleVector);
              llvm::IRBuilderBase::SetInsertPoint(v73, NextNonDebugInstruction);
            }
            else
            {
              v184 = ShuffleVector[5];
              *((_QWORD *)v212 + 7) = v184;
              *((_QWORD *)v212 + 8) = (char *)v184 + 40;
            }
            if (SHIBYTE(v287[0]) < 0)
              operator delete(v286[1]);
            goto LABEL_236;
          case 4:
            memset(v287, 0, 29);
            *(_OWORD *)v286 = 0u;
            *(_OWORD *)v285 = 0u;
            v129 = *(llvm::Value **)(v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF) + 32 * BYTE6(v272));
            if (llvm::StringRef::find() == -1)
            {
              v180 = llvm::CallBase::arg_end((llvm::CallBase *)v76);
              v181 = v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF);
              if (((v180 - v181) & 0x1FFFFFFFE0) == 0xA0)
              {
                v182 = *(_QWORD *)(v181 + 32 * HIBYTE(v272));
                v183 = (unsigned int *)(v182 + 24);
                if (*(_DWORD *)(v182 + 32) >= 0x41u)
                  v183 = *(unsigned int **)v183;
                v137 = *v183;
              }
              else
              {
                v137 = 0;
              }
              v193 = *(unsigned __int8 **)(v181 + 32 * BYTE5(v272));
              if (__len[0])
              {
                std::string::basic_string[abi:nn180100](__dst, (void *)__len[0], __len[1]);
              }
              else
              {
                __dst[1] = 0;
                __dst[0] = 0;
                v254 = 0;
              }
              AGCLLVMAirImageBlockGen3::unpackImageBlockData(v212, (uint64_t)v285, v193, (uint64_t)__dst);
              if (SHIBYTE(v254) < 0)
                operator delete(__dst[0]);
              v194 = (llvm::Value *)llvm::ConstantInt::get();
              v284 = 257;
              v285[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v73, v194, v285[0], (const llvm::Twine *)&v281);
            }
            else
            {
              v286[0] = *(void **)(v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF) + 32 * BYTE1(v272));
              v130 = *(_QWORD *)(v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF) + 32 * v272);
              v131 = (_QWORD *)(v130 + 24);
              if (*(_DWORD *)(v130 + 32) >= 0x41u)
                v131 = (_QWORD *)*v131;
              v132 = (_QWORD *)*v131;
              AGCLLVMAirImageBlockGen3::getImageBlockOffsetAndFormatFromDrawBuffer(*((_QWORD *)v212 + 24), *(unsigned int *)(*((_QWORD *)v212 + 46) + 868), (uint64_t)v285, a4, *v131);
              BYTE12(v287[1]) = 1;
              DWORD2(v287[1]) = *((_DWORD *)v290[0] + v132);
              if ((*(_DWORD *)(a4 + 4 * v132) & 0xE00) == 0xC00)
              {
                v133 = *(llvm::Constant **)v129;
                v293 = 0u;
                v294 = 0u;
                *(_QWORD *)&v293 = llvm::ConstantInt::get();
                *((_QWORD *)&v293 + 1) = llvm::ConstantInt::get();
                *(_QWORD *)&v294 = llvm::ConstantInt::get();
                *((_QWORD *)&v294 + 1) = llvm::ConstantInt::get();
                v135 = (llvm::Value *)llvm::Constant::getNullValue(v133, v134);
                v136 = (llvm::Value *)llvm::ConstantVector::get();
                v284 = 257;
                v129 = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(v73, v129, v135, v136, (const llvm::Twine *)&v281);
              }
              v137 = 0;
            }
            v285[1] = (llvm::Value *)AGCLLVMAirImageBlockGen3::getImageBlockSampleMask((uint64_t)v212, (unsigned __int8 *)&v270, v76);
            if (BYTE4(v272) != 255)
              *((_BYTE *)v212 + 944) = 1;
            v250 = *(_OWORD *)((char *)v212 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation(v73);
            v252 = *((_DWORD *)v212 + 26);
            v195 = AGCLLVMAirImageBlockGen3::buildEmulatedRTZConversion((uint64_t)v212, &v250, (uint64_t *)v129, (uint64_t)v285);
            if (v251)
              llvm::MetadataTracking::untrack();
            v281 = 0uLL;
            v283 = 0;
            v282 = 0;
            if (!v137)
              goto LABEL_259;
            (*(void (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
            v196 = (llvm::Type *)*v195;
            if (*(_BYTE *)(*v195 + 8) == 15)
              v196 = (llvm::Type *)**((_QWORD **)v196 + 2);
            if (v137 % llvm::DataLayout::getABITypeAlignment(v216, v196))
            {
              v197 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
              v247 = *(_OWORD *)((char *)v212 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(v73);
              v249 = *((_DWORD *)v212 + 26);
              AGCLLVMGen3TargetLowerer::splitUnalignedStore((uint64_t)&v293, v197, &v247, 0, v218, a2, (llvm::Type **)v195, v285[0], (uint64_t)v285[1], (uint64_t)v286[0]);
              v281 = v293;
              llvm::TrackingMDRef::operator=(&v282, &v294);
              v283 = DWORD2(v294);
              if ((_QWORD)v294)
                llvm::MetadataTracking::untrack();
              if (v248)
                goto LABEL_268;
            }
            else
            {
LABEL_259:
              v198 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
              v244 = *(_OWORD *)((char *)v212 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(v73);
              v246 = *((_DWORD *)v212 + 26);
              if (v287[0] >= 0)
                v199 = &v286[1];
              else
                v199 = (void **)v286[1];
              if (v287[0] >= 0)
                v200 = HIBYTE(v287[0]);
              else
                v200 = *(_QWORD *)&v287[0];
              AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR((uint64_t)&v293, v198, &v244, (uint64_t)v199, v200, v218, a2, (llvm::Type **)v195, (uint64_t)v285[0], DWORD2(v287[1]) == 1, (uint64_t)v285[1], (uint64_t)v286[0], SBYTE12(v287[1]));
              v281 = v293;
              llvm::TrackingMDRef::operator=(&v282, &v294);
              v283 = DWORD2(v294);
              if ((_QWORD)v294)
                llvm::MetadataTracking::untrack();
              if (v245)
LABEL_268:
                llvm::MetadataTracking::untrack();
            }
            if ((_QWORD)v281)
            {
              v241 = v281;
              v242 = v282;
              if (v282)
                llvm::MetadataTracking::track();
              v243 = v283;
              AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v241, (uint64_t)v73);
              if (v242)
                llvm::MetadataTracking::untrack();
            }
            if (v282)
              llvm::MetadataTracking::untrack();
            if (SHIBYTE(v287[0]) < 0)
              operator delete(v286[1]);
LABEL_238:
            llvm::Instruction::eraseFromParent((llvm::Instruction *)v76);
            if (!*(_QWORD *)(v80 + 8))
              llvm::Function::eraseFromParent((llvm::Function *)v80);
            break;
          case 5:
            v138 = (uint64_t *)(v76 - 32 * (*(_DWORD *)(v76 + 20) & 0x7FFFFFF));
            v139 = *v138;
            if (DWORD2(v270) == 1)
            {
              v209 = a4;
              v185 = (llvm::Value *)v138[4];
              v186 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
              v261 = *(_OWORD *)((char *)v212 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(v73);
              v263 = *((_DWORD *)v212 + 26);
              v187 = AGCLLVMGen3TargetLowerer::buildColorCoverageMaskSet(v186, &v261, v139);
              if (v262)
                llvm::MetadataTracking::untrack();
              v188 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
              v258 = *(_OWORD *)((char *)v212 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(v73);
              v260 = *((_DWORD *)v212 + 26);
              ShuffleVector = (llvm::Constant **)AGCLLVMGen3TargetLowerer::buildExtractColorCoverageMask(v188, &v258, v187, v185);
              if (v259)
                llvm::MetadataTracking::untrack();
              a4 = v209;
            }
            else
            {
              if (DWORD2(v270))
                goto LABEL_238;
              v140 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
              v267 = *(_OWORD *)((char *)v212 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(v73);
              v269 = *((_DWORD *)v212 + 26);
              v141 = AGCLLVMGen3TargetLowerer::buildColorCoverageMaskSet(v140, &v267, v139);
              if (v268)
                llvm::MetadataTracking::untrack();
              v142 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
              v264 = *(_OWORD *)((char *)v212 + 56);
              llvm::IRBuilderBase::getCurrentDebugLocation(v73);
              v266 = *((_DWORD *)v212 + 26);
              v203 = (*(uint64_t (**)(_QWORD *))(*v142 + 1520))(v142);
              v278 = v264;
              v279 = v265;
              if (v265)
                llvm::MetadataTracking::track();
              v280 = v266;
              AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v278, (uint64_t)(v142 + 1));
              if (v279)
                llvm::MetadataTracking::untrack();
              v204 = v141;
              v275 = v264;
              v276 = v265;
              if (v265)
                llvm::MetadataTracking::track();
              v277 = v266;
              v202 = v142[26];
              v143 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)v142, (uint64_t)"llvm.agx2.ft1", 13, v142[25], v142[25]);
              v144 = v142[25];
              LOWORD(v287[0]) = 257;
              v297[0] = llvm::IRBuilderBase::CreateCast((uint64_t)(v142 + 1), 38, (uint64_t)v204, v144, (uint64_t)v285);
              LOWORD(v287[0]) = 257;
              v145 = llvm::IRBuilderBase::CreateCall((uint64_t)(v142 + 1), *(_QWORD *)(v143 + 24), v143, (uint64_t)v297, 1, (uint64_t)v285);
              v146 = v142[24];
              v284 = 257;
              Select = llvm::IRBuilderBase::CreateCast((uint64_t)(v142 + 1), 38, (uint64_t)v145, v146, (uint64_t)&v281);
              if (v203 == v202)
              {
                v148 = (llvm::Value *)llvm::ConstantInt::get();
                LOWORD(v287[0]) = 257;
                LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(v142 + 1), v204, v148, (const llvm::Twine *)v285);
                v150 = v142[25];
                v284 = 257;
                v296 = llvm::IRBuilderBase::CreateCast((uint64_t)(v142 + 1), 38, LShr, v150, (uint64_t)&v281);
                LOWORD(v287[0]) = 257;
                v151 = llvm::IRBuilderBase::CreateCall((uint64_t)(v142 + 1), *(_QWORD *)(v143 + 24), v143, (uint64_t)&v296, 1, (uint64_t)v285);
                v152 = v142[24];
                v284 = 257;
                v153 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v142 + 1), 38, (uint64_t)v151, v152, (uint64_t)&v281);
                v208 = a4;
                v154 = (llvm::CmpInst **)v296;
                v155 = llvm::ConstantInt::get();
                LOWORD(v287[0]) = 257;
                llvm::IRBuilderBase::CreateICmp(v142 + 1, 32, v154, v155, (uint64_t)v285);
                v156 = (llvm::Value *)llvm::ConstantInt::get();
                v284 = 257;
                llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v142 + 1), v153, v156, (const llvm::Twine *)&v281);
                v295 = 257;
                a4 = v208;
                Select = llvm::IRBuilderBase::CreateSelect();
              }
              v157 = (llvm::Value *)Select;
              if (v276)
                llvm::MetadataTracking::untrack();
              v158 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v287[0]) = 257;
              UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv((llvm::IRBuilderBase *)(v142 + 1), v157, v158, (const llvm::Twine *)v285);
              v160 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v287[0]) = 257;
              ShuffleVector = (llvm::Constant **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v142 + 1), UDiv, v160, (const llvm::Twine *)v285);
              if (v265)
                llvm::MetadataTracking::untrack();
            }
LABEL_236:
            if (ShuffleVector)
              llvm::Value::replaceAllUsesWith();
            goto LABEL_238;
          default:
            goto LABEL_238;
        }
LABEL_175:
        ++v74;
        v75 -= 8;
        if (!v75)
          goto LABEL_278;
      }
      if (v78)
      {
        v81 = **((_QWORD **)v78 - 4);
        v82 = *(_DWORD *)(v81 + 8);
        if ((v82 & 0xFE) == 0x12)
          v82 = *(_DWORD *)(**(_QWORD **)(v81 + 16) + 8);
        if ((v82 & 0xFFFFFF00) != 0x400)
          goto LABEL_175;
        llvm::IRBuilderBase::SetInsertPoint(v73, (llvm::Instruction *)v78);
        memset(v287, 0, 29);
        *(_OWORD *)v286 = 0u;
        *(_OWORD *)v285 = 0u;
        v83 = (unsigned __int8 *)*((_QWORD *)v78 - 4);
        __p[1] = 0;
        __p[0] = 0;
        v240 = 0;
        AGCLLVMAirImageBlockGen3::unpackImageBlockData(v212, (uint64_t)v285, v83, (uint64_t)__p);
        if (SHIBYTE(v240) < 0)
          operator delete(__p[0]);
        v84 = (llvm::Value *)llvm::ConstantInt::get();
        v284 = 257;
        v285[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v73, v84, v285[0], (const llvm::Twine *)&v281);
        v85 = *(llvm::Type ****)v78;
        (*(void (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
        v86 = **((_QWORD **)v78 - 4);
        if (*(_BYTE *)(v86 + 8) == 15)
          v86 = **(_QWORD **)(v86 + 16);
        v87 = (1 << ((unint64_t)v78[9] >> 1));
        v88 = v87 % llvm::DataLayout::getABITypeAlignment(v216, (llvm::Type *)v86);
        v89 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
        if (v88)
        {
          v236 = *(_OWORD *)((char *)v212 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(v73);
          v238 = *((_DWORD *)v212 + 26);
          v90 = AGCLLVMGen3TargetLowerer::splitUnalignedLoads(v89, &v236, 0, v218, a2, (uint64_t)v85, v285[0], (uint64_t)v285[1], (uint64_t)v286[0]);
          if (v237)
            llvm::MetadataTracking::untrack();
        }
        else
        {
          v233 = *(_OWORD *)((char *)v212 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation(v73);
          v235 = *((_DWORD *)v212 + 26);
          if (v287[0] >= 0)
            v100 = &v286[1];
          else
            v100 = (void **)v286[1];
          if (v287[0] >= 0)
            v101 = HIBYTE(v287[0]);
          else
            v101 = *(_QWORD *)&v287[0];
          v90 = (llvm::Instruction *)AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(v89, &v233, (uint64_t)v100, v101, v218, a2, v85, (uint64_t)v285[0], (uint64_t)v285[1], (uint64_t)v286[0]);
          if (v234)
            llvm::MetadataTracking::untrack();
          if (llvm::Instruction::getNextNonDebugInstruction(v90))
          {
            v102 = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(v90);
            llvm::IRBuilderBase::SetInsertPoint(v73, v102);
          }
          else
          {
            v115 = *((_QWORD *)v90 + 5);
            *((_QWORD *)v212 + 7) = v115;
            *((_QWORD *)v212 + 8) = v115 + 40;
          }
        }
        v116 = *(_QWORD *)v78;
        v284 = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)v73, 49, (uint64_t)v90, v116, (uint64_t)&v281);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v78);
        goto LABEL_173;
      }
      if (!v79)
        goto LABEL_175;
      v91 = **((_QWORD **)v79 - 4);
      v92 = *(_DWORD *)(v91 + 8);
      if ((v92 & 0xFE) == 0x12)
        v92 = *(_DWORD *)(**(_QWORD **)(v91 + 16) + 8);
      if ((v92 & 0xFFFFFF00) != 0x400)
        goto LABEL_175;
      llvm::IRBuilderBase::SetInsertPoint(v73, (llvm::Instruction *)v79);
      memset(v287, 0, 29);
      *(_OWORD *)v286 = 0u;
      *(_OWORD *)v285 = 0u;
      v93 = (unsigned __int8 *)*((_QWORD *)v79 - 4);
      v231[0] = 0;
      v231[1] = 0;
      v232 = 0;
      AGCLLVMAirImageBlockGen3::unpackImageBlockData(v212, (uint64_t)v285, v93, (uint64_t)v231);
      if (SHIBYTE(v232) < 0)
        operator delete(v231[0]);
      v94 = (llvm::Value *)llvm::ConstantInt::get();
      v284 = 257;
      v285[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v73, v94, v285[0], (const llvm::Twine *)&v281);
      v95 = (uint64_t *)*((_QWORD *)v79 - 8);
      v228 = *(_OWORD *)((char *)v212 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation(v73);
      v230 = *((_DWORD *)v212 + 26);
      v96 = AGCLLVMAirImageBlockGen3::buildEmulatedRTZConversion((uint64_t)v212, &v228, v95, (uint64_t)v285);
      if (v229)
        llvm::MetadataTracking::untrack();
      v281 = 0uLL;
      v283 = 0;
      v282 = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
      v97 = **((_QWORD **)v79 - 4);
      if (*(_BYTE *)(v97 + 8) == 15)
        v97 = **(_QWORD **)(v97 + 16);
      v98 = (1 << ((unint64_t)v79[9] >> 1));
      if (v98 % llvm::DataLayout::getABITypeAlignment(v216, (llvm::Type *)v97))
      {
        v99 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
        v225 = *(_OWORD *)((char *)v212 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(v73);
        v227 = *((_DWORD *)v212 + 26);
        AGCLLVMGen3TargetLowerer::splitUnalignedStore((uint64_t)&v293, v99, &v225, 0, v218, a2, (llvm::Type **)v96, v285[0], (uint64_t)v285[1], (uint64_t)v286[0]);
        v281 = v293;
        llvm::TrackingMDRef::operator=(&v282, &v294);
        v283 = DWORD2(v294);
        if ((_QWORD)v294)
          llvm::MetadataTracking::untrack();
        if (!v226)
          goto LABEL_164;
      }
      else
      {
        v112 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v212 + 46) + 680))(*((_QWORD *)v212 + 46));
        v222 = *(_OWORD *)((char *)v212 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation(v73);
        v224 = *((_DWORD *)v212 + 26);
        if (v287[0] >= 0)
          v113 = &v286[1];
        else
          v113 = (void **)v286[1];
        if (v287[0] >= 0)
          v114 = HIBYTE(v287[0]);
        else
          v114 = *(_QWORD *)&v287[0];
        AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR((uint64_t)&v293, v112, &v222, (uint64_t)v113, v114, v218, a2, (llvm::Type **)v96, (uint64_t)v285[0], DWORD2(v287[1]) == 1, (uint64_t)v285[1], (uint64_t)v286[0], 0);
        v281 = v293;
        llvm::TrackingMDRef::operator=(&v282, &v294);
        v283 = DWORD2(v294);
        if ((_QWORD)v294)
          llvm::MetadataTracking::untrack();
        if (!v223)
          goto LABEL_164;
      }
      llvm::MetadataTracking::untrack();
LABEL_164:
      if ((_QWORD)v281)
      {
        v219 = v281;
        v220 = v282;
        if (v282)
          llvm::MetadataTracking::track();
        v221 = v283;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v219, (uint64_t)v73);
        if (v220)
          llvm::MetadataTracking::untrack();
      }
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v79);
      if (v282)
        llvm::MetadataTracking::untrack();
LABEL_173:
      if (SHIBYTE(v287[0]) < 0)
        operator delete(v286[1]);
      goto LABEL_175;
    }
  }
LABEL_278:
  if (v290[0] != &v291)
    free(v290[0]);
  if (*(_BYTE **)__src != &__src[16])
    free(*(void **)__src);
  return 1;
}

void AGCLLVMAirImageBlockGen3::~AGCLLVMAirImageBlockGen3(AGCLLVMAirImageBlockGen3 *this)
{
  AGCLLVMAirImageBlockGen3::~AGCLLVMAirImageBlockGen3(this);
  JUMPOUT(0x1CAA2D68CLL);
}

{
  void *v2;
  unsigned int v3;
  llvm *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;

  *(_QWORD *)this = &off_1E7EB73E8;
  v2 = (void *)*((_QWORD *)this + 111);
  if (v2 != *((void **)this + 110))
    free(v2);
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)this + 840);
  v3 = *((_DWORD *)this + 208);
  v4 = (llvm *)*((_QWORD *)this + 102);
  if (v3)
  {
    v5 = (char *)v4 + 64;
    v6 = 104 * v3;
    do
    {
      v7 = *((_QWORD *)v5 - 5);
      if ((v7 | 0x1000) != 0xFFFFFFFFFFFFF000 && v5[23] < 0)
      {
        operator delete(*(void **)v5);
        v7 = *((_QWORD *)v5 - 5);
      }
      if (v7 != -8192 && v7 != -4096 && v7 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v5 - 56));
      v5 += 104;
      v6 -= 104;
    }
    while (v6);
    v4 = (llvm *)*((_QWORD *)this + 102);
    v9 = 104 * *((unsigned int *)this + 208);
  }
  else
  {
    v9 = 0;
  }
  llvm::deallocate_buffer(v4, (void *)v9);
  *(_QWORD *)this = &off_1E7EB7420;
  MEMORY[0x1CAA2C150]((char *)this + 384);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((AGCLLVMAirImageBlockGen3 *)((char *)this + 136));
  llvm::IRBuilderFolder::~IRBuilderFolder((AGCLLVMAirImageBlockGen3 *)((char *)this + 128));
  v10 = (char *)*((_QWORD *)this + 1);
  if (v10 != (char *)this + 24)
    free(v10);
}

uint64_t AGCLLVMAirImageBlockGen3::getRTZModeFromImageBlockUser(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int Key;
  uint64_t v10;
  int DefaultRoundingMode;

  AGCLLVMUserObject::getSampleFunctionMap((AGCLLVMUserObject *)a1);
  v6 = *(_QWORD *)(a3 + 8);
  if (!v6)
    return 0;
  while (1)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 && *(_BYTE *)(v7 + 16) == 84)
    {
      v8 = *(_QWORD *)(v7 - 32);
      if (!v8 || *(_BYTE *)(v8 + 16) || *(_QWORD *)(v8 + 24) != *(_QWORD *)(v7 + 72))
        v8 = 0;
      llvm::Value::getName((llvm::Value *)v8);
      Key = llvm::StringMapImpl::FindKey();
      if (Key != -1 && Key != (unint64_t)dword_1ED839C70)
      {
        v10 = *(_QWORD *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * Key);
        if (*(_DWORD *)(v10 + 8) == 8)
          break;
      }
    }
    v6 = *(_QWORD *)(v6 + 8);
    if (!v6)
      return 0;
  }
  DefaultRoundingMode = *(_DWORD *)(v10 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(v7
                                   - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)
                                   + 32 * *(unsigned __int8 *)(v10 + 38));
  if (!DefaultRoundingMode)
    DefaultRoundingMode = AGCLLVMObject::getDefaultRoundingMode((AGCLLVMObject *)(*(_QWORD *)(a1 + 376)
                                                                                + *(_QWORD *)(**(_QWORD **)(a1 + 376)
                                                                                            - 24)));
  *(_DWORD *)(a2 + 56) = AGCLLVMTargetLowerer::getRTZMode(*(_BYTE **)(a1 + 368), DefaultRoundingMode);
  return 1;
}

uint64_t AGCLLVMAirImageBlockGen3::getImageBlockSampleMask(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  llvm::Value *v13;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  uint64_t Shl;
  uint64_t v17;
  llvm::Value *v18;
  _QWORD *v19;
  llvm::Value *v20;
  _QWORD *v21;
  _WORD v22[20];
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  v4 = a2[36];
  if (v4 != 255)
    return *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * v4);
  v9 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
  v10 = *(_QWORD *)(v9 + 32 * a2[34]);
  v11 = (_QWORD *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v11 = (_QWORD *)*v11;
  v12 = *(_DWORD *)v11;
  if (v12 == 2)
  {
    v13 = *(llvm::Value **)(v9 + 32 * a2[35]);
    v14 = (llvm::IRBuilderBase *)(a1 + 8);
    v15 = (llvm::Value *)llvm::ConstantInt::get();
    v24 = 257;
    Shl = llvm::IRBuilderBase::CreateShl(v14, v15, v13, (const llvm::Twine *)v23);
    v17 = *(_QWORD *)v13;
    v22[16] = 257;
    return llvm::IRBuilderBase::CreateCast((uint64_t)v14, 39, Shl, v17, (uint64_t)v22);
  }
  if (v12 == 1)
  {
    v18 = *(llvm::Value **)(v9 + 32 * a2[35]);
    v19 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
    v28 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v30 = *(_DWORD *)(a1 + 104);
    v20 = AGCLLVMGen3TargetLowerer::buildColorCoverageMaskSet(v19, &v28, *(_QWORD *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32 * a2[33]));
    if (v29)
      llvm::MetadataTracking::untrack();
    v21 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 680))(*(_QWORD *)(a1 + 368));
    v25 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v27 = *(_DWORD *)(a1 + 104);
    v5 = AGCLLVMGen3TargetLowerer::buildExtractColorCoverageMask(v21, &v25, v20, v18);
    if (v26)
      llvm::MetadataTracking::untrack();
    return v5;
  }
  if (v12)
    return 0;
  return llvm::ConstantInt::get();
}

double AGCLLVMAirImageBlockGen3::getImageBlockOffsetAndFormatFromDrawBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  const std::string::value_type *v9;
  int v10;
  const char *v11;
  int v12;
  const char *v13;
  void **v14;
  double result;
  std::string v16;

  v6 = *(_DWORD *)(a4 + 4 * a5);
  if ((v6 & 0x100) != 0)
    v7 = v6 & 0xE0 | 1;
  else
    v7 = *(_DWORD *)(a4 + 4 * a5);
  v8 = llvm::ConstantInt::get();
  v9 = 0;
  *(_QWORD *)a3 = v8;
  v10 = (v7 & 0x1F) - 1;
  v11 = "i8";
  v12 = v7 >> 5;
  v13 = "8unorm";
  switch(v10)
  {
    case 0:
      v9 = "srgba8unorm";
      goto LABEL_18;
    case 1:
      v13 = "8snorm";
      goto LABEL_12;
    case 2:
      goto LABEL_12;
    case 3:
    case 4:
      goto LABEL_14;
    case 5:
      v13 = "16snorm";
      goto LABEL_12;
    case 6:
      v13 = "16unorm";
LABEL_12:
      memset(&v16, 0, sizeof(v16));
      std::string::append(&v16, off_1E7EB5070[v12 - 1]);
      v9 = v13;
      goto LABEL_19;
    case 7:
    case 8:
      v11 = "i16";
      goto LABEL_14;
    case 9:
    case 10:
      v11 = "i32";
      goto LABEL_14;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 21:
      v11 = "f16";
      goto LABEL_14;
    case 16:
      v11 = "f32";
LABEL_14:
      memset(&v16, 0, sizeof(v16));
      std::string::append(&v16, (const std::string::value_type *)*(&off_1E7EB5090 + (v12 - 1)));
      v9 = v11;
      goto LABEL_19;
    case 18:
      v9 = "rgb10a2";
      goto LABEL_18;
    case 19:
      v9 = "rgb9e5";
      goto LABEL_18;
    case 20:
      v9 = "rg11b10f";
      goto LABEL_18;
    default:
LABEL_18:
      memset(&v16, 0, sizeof(v16));
LABEL_19:
      std::string::append(&v16, v9);
      v14 = (void **)(a3 + 24);
      if (*(char *)(a3 + 47) < 0)
        operator delete(*v14);
      result = *(double *)&v16.__r_.__value_.__l.__data_;
      *(_OWORD *)v14 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
      *(_QWORD *)(a3 + 40) = *((_QWORD *)&v16.__r_.__value_.__l + 2);
      return result;
  }
}

llvm::Value *AGCLLVMAirImageBlockGen3::unpackImageBlockData(llvm::Value *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Cast;
  uint64_t v12;
  llvm::Value *result;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  _BYTE v17[32];
  __int16 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[2];

  AGCLLVMAirImageBlockGen3::extractConstantImageBlockData((AGCLLVMAirImageBlockGen3 *)&v19, a1, a3);
  *(_OWORD *)a2 = v19;
  *(_QWORD *)(a2 + 16) = v20;
  v8 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v21;
  v9 = v23[0];
  *(_QWORD *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 53) = *(_QWORD *)((char *)v23 + 5);
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a4 + 23))
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*(_QWORD *)(a4 + 8))
LABEL_5:
    std::string::operator=((std::string *)(a2 + 24), (const std::string *)a4);
LABEL_6:
  v10 = *((_QWORD *)a1 + 26);
  WORD4(v21) = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 47, (uint64_t)a3, v10, (uint64_t)&v19);
  v12 = *((_QWORD *)a1 + 38);
  v18 = 257;
  result = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 49, Cast, v12, (uint64_t)v17);
  v14 = result;
  if (!*(_QWORD *)a2)
  {
    WORD4(v21) = 257;
    v15 = (llvm::Value *)llvm::ConstantInt::get();
    result = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::Value *)((char *)a1 + 8), v14, v15, (const llvm::Twine *)&v19);
    *(_QWORD *)a2 = result;
  }
  if (!*(_QWORD *)(a2 + 16))
  {
    result = (llvm::Value *)AGCLLVMBuilder::subrangeVector(a1, v14, 1u, 2, 1);
    *(_QWORD *)(a2 + 16) = result;
  }
  if (!*(_QWORD *)(a2 + 8))
  {
    WORD4(v21) = 257;
    v16 = (llvm::Value *)llvm::ConstantInt::get();
    result = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::Value *)((char *)a1 + 8), v14, v16, (const llvm::Twine *)&v19);
    *(_QWORD *)(a2 + 8) = result;
  }
  return result;
}

uint64_t *AGCLLVMAirImageBlockGen3::buildEmulatedRTZConversion(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *Select;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v19;
  llvm::Instruction *v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  llvm::Instruction *v26;
  _QWORD *v27;
  int NumSuccessors;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  _BYTE *v36;
  uint64_t v37;
  llvm::Instruction *v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[10];

  Select = a3;
  v51[8] = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  if ((*(_DWORD *)(*a3 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  if (v8 != *(_QWORD *)(a1 + 168))
    return Select;
  v9 = *(_DWORD *)(a4 + 56);
  if ((v9 & 0xFFFFFFFE) != 2)
    return Select;
  v46 = *a2;
  v47 = *((_QWORD *)a2 + 2);
  if (v47)
    llvm::MetadataTracking::track();
  v48 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v46, a1 + 8);
  if (v47)
    llvm::MetadataTracking::untrack();
  v10 = v9 == 3;
  v11 = *(_QWORD *)(a1 + 368);
  v43 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v45 = *(_DWORD *)(a1 + 104);
  v12 = AGCLLVMTargetLowerer::buildRTZF16Value(v11, (uint64_t)&v43, Select, v10);
  if (v44)
    llvm::MetadataTracking::untrack();
  v13 = (_QWORD *)(a4 + 24);
  if (*(char *)(a4 + 47) < 0)
  {
    v14 = *(_QWORD *)(a4 + 32);
    if (!v14)
    {
LABEL_25:
      v19 = *(_QWORD *)(a1 + 56);
      if (*(unsigned __int8 *)(v12 + 16) <= 0x1Bu)
        v20 = 0;
      else
        v20 = (llvm::Instruction *)v12;
      v39 = v20;
      v49 = v51;
      v50 = 0x800000000;
      v21 = *(_QWORD *)(a4 + 48);
      if (v21)
      {
        if (*(unsigned __int8 *)(v21 + 16) >= 0x1Cu)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v49, v21);
          v22 = v50;
          if ((_DWORD)v50)
          {
            v23 = (_QWORD *)(v19 + 40);
            do
            {
              v24 = *((_QWORD *)v49 + --v22);
              LODWORD(v50) = v22;
              v25 = (_QWORD *)*v23;
              if ((_QWORD *)*v23 != v23)
              {
                v26 = (llvm::Instruction *)(v25 - 3);
                if (v25)
                  v27 = v25 - 3;
                else
                  v27 = 0;
                if (*((unsigned __int8 *)v27 + 16) - 29 <= 0xA)
                {
                  NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)(v25 - 3));
                  if (NumSuccessors)
                  {
                    v29 = NumSuccessors;
                    v30 = 0;
                    while (*(_QWORD *)(v24 + 40) != llvm::Instruction::getSuccessor(v26))
                    {
                      if (v29 == ++v30)
                        goto LABEL_54;
                    }
                    llvm::Instruction::moveAfter((llvm::Instruction *)v24, v39);
                    v31 = *(_DWORD *)(v24 + 20);
                    if ((v31 & 0x40000000) != 0)
                    {
                      v33 = *(uint64_t **)(v24 - 8);
                      v32 = v31 & 0x7FFFFFF;
                    }
                    else
                    {
                      v32 = v31 & 0x7FFFFFF;
                      v33 = (uint64_t *)(v24 - 32 * v32);
                    }
                    if (v32)
                    {
                      v34 = 32 * v32;
                      do
                      {
                        if (*v33)
                          v35 = *(unsigned __int8 *)(*v33 + 16) >= 0x1Cu;
                        else
                          v35 = 0;
                        if (v35)
                          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v49, *v33);
                        v33 += 4;
                        v34 -= 32;
                      }
                      while (v34);
                    }
                  }
                }
LABEL_54:
                v22 = v50;
              }
            }
            while (v22);
          }
        }
      }
      v36 = *(_BYTE **)(a1 + 376);
      v40 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v42 = *(_DWORD *)(a1 + 104);
      AGCLLVMUserObject::buildEmulatedIsF16Format(v36, &v40, *(AGCLLVMUserObject **)(a4 + 48));
      if (v41)
        llvm::MetadataTracking::untrack();
      Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect();
      if (v49 != v51)
        free(v49);
      return Select;
    }
    v13 = (_QWORD *)*v13;
  }
  else
  {
    v14 = *(unsigned __int8 *)(a4 + 47);
    if (!*(_BYTE *)(a4 + 47))
      goto LABEL_25;
  }
  if (v14 >= 3)
  {
    v15 = (char *)v13 + v14;
    v16 = v13;
    do
    {
      v17 = (char *)memchr(v16, 102, v14 - 2);
      if (!v17)
        break;
      if (*(_WORD *)v17 == 12646 && v17[2] == 54)
      {
        if (v17 - (char *)v13 == -1)
          v37 = (uint64_t)Select;
        else
          v37 = v12;
        if (v17 != v15)
          return (uint64_t *)v37;
        return Select;
      }
      v16 = v17 + 1;
      v14 = v15 - (_BYTE *)v16;
    }
    while (v15 - (_BYTE *)v16 >= 3);
  }
  return Select;
}

void AGCLLVMAirImageBlockGen3::extractConstantImageBlockData(AGCLLVMAirImageBlockGen3 *this, llvm::Value *a2, unsigned __int8 *a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  std::string *v11;
  int v12;
  unsigned int v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  char RTZModeFromImageBlockUser;
  unsigned int v18;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  llvm::Value *v27;
  _QWORD *v28;
  llvm::Value *v29;
  llvm::Value **v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  llvm::Value *InsertElement;
  llvm::Value *v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  const void **imp;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  llvm::Value *v50;
  llvm::Value *v51;
  char v52;
  uint64_t v53;
  std::string::pointer data;
  std::string::size_type v55;
  uint64_t v56;
  llvm::Constant *AggregateElement;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  __int16 v62;
  char *v63;
  llvm::IRBuilderBase *v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  __int128 v68;
  void *v69;
  std::string __p;
  _QWORD v71[2];
  __int128 v72;
  void *v73[2];
  _QWORD v74[4];
  __int128 v75;
  uint64_t v76;
  int v77;
  std::string v78[3];
  llvm::Value *v79;
  llvm::Value *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  memset(v78, 0, 61);
  v79 = 0;
  v80 = 0;
  v6 = *((_DWORD *)a2 + 208);
  if (v6)
  {
    v7 = *((_QWORD *)a2 + 102);
    v8 = ((a3 >> 4) ^ (a3 >> 9)) & (v6 - 1);
    v9 = v7 + 104 * v8;
    v10 = *(unsigned __int8 **)(v9 + 24);
    if (v10 == a3)
    {
LABEL_3:
      if (v9 != v7 + 104 * v6)
      {
        *(_OWORD *)this = *(_OWORD *)(v9 + 40);
        *((_QWORD *)this + 2) = *(_QWORD *)(v9 + 56);
        v11 = (std::string *)((char *)this + 24);
        if (*(char *)(v9 + 87) < 0)
        {
          std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v9 + 64), *(_QWORD *)(v9 + 72));
        }
        else
        {
          *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)(v9 + 64);
          *((_QWORD *)this + 5) = *(_QWORD *)(v9 + 80);
        }
        *((_QWORD *)this + 6) = *(_QWORD *)(v9 + 88);
        *(_QWORD *)((char *)this + 53) = *(_QWORD *)(v9 + 93);
        return;
      }
    }
    else
    {
      v12 = 1;
      while (v10 != (unsigned __int8 *)-4096)
      {
        v13 = v8 + v12++;
        v8 = v13 & (v6 - 1);
        v9 = v7 + 104 * v8;
        v10 = *(unsigned __int8 **)(v9 + 24);
        if (v10 == a3)
          goto LABEL_3;
      }
    }
  }
  v75 = *(_OWORD *)((char *)a2 + 56);
  v63 = (char *)a2 + 816;
  v64 = (llvm::Value *)((char *)a2 + 8);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::Value *)((char *)a2 + 8));
  v77 = *((_DWORD *)a2 + 26);
  if (a3 && a3[16] >= 0x1Cu)
    llvm::IRBuilderBase::SetInsertPoint(v64, (llvm::Instruction *)a3);
  v14 = 0;
  v15 = 0;
  v16 = (uint64_t)a3;
  while (2)
  {
    v62 = v14;
    if ((v15 & 1) != 0)
    {
LABEL_17:
      RTZModeFromImageBlockUser = 1;
      goto LABEL_19;
    }
    while (1)
    {
      RTZModeFromImageBlockUser = AGCLLVMAirImageBlockGen3::getRTZModeFromImageBlockUser((uint64_t)a2, (uint64_t)v78, v16);
LABEL_19:
      v18 = *(unsigned __int8 *)(v16 + 16);
      if (v18 == 83 && v16 != 0)
      {
        imp = llvm::SmallPtrSetImplBase::find_imp((llvm::Value *)((char *)a2 + 880), (const void *)v16);
        v42 = *((_QWORD *)a2 + 111);
        v43 = 896;
        if (v42 == *((_QWORD *)a2 + 110))
          v43 = 900;
        if (imp == (const void **)(v42 + 8 * *(unsigned int *)((char *)a2 + v43)))
        {
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&v72, (llvm::Value *)((char *)a2 + 880), (void *)v16);
          *(_OWORD *)v73 = 0u;
          memset(v74, 0, 29);
          v72 = 0u;
          v44 = *(_DWORD *)(v16 + 20);
          v45 = v44 & 0x7FFFFFF;
          if ((v44 & 0x7FFFFFF) != 0)
          {
            v46 = 0;
            v47 = 0;
            v48 = 1;
            do
            {
              if ((v44 & 0x40000000) != 0)
                v49 = *(_QWORD *)(v16 - 8);
              else
                v49 = v16 - 32 * v45;
              if (*(_QWORD *)(v49 + v46) != v16)
              {
                AGCLLVMAirImageBlockGen3::extractConstantImageBlockData((AGCLLVMAirImageBlockGen3 *)&v68, a2);
                if ((v48 & 1) != 0)
                {
                  v72 = v68;
                  v73[0] = v69;
                  std::string::operator=((std::string *)&v73[1], &__p);
                  v74[2] = v71[0];
                  *(_QWORD *)((char *)&v74[2] + 5) = *(_QWORD *)((char *)v71 + 5);
                }
                else
                {
                  if ((_QWORD)v68 != (_QWORD)v72)
                    *(_QWORD *)&v72 = 0;
                  if (v69 != v73[0])
                    v73[0] = 0;
                  if (*((_QWORD *)&v68 + 1) != *((_QWORD *)&v72 + 1))
                    *((_QWORD *)&v72 + 1) = 0;
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v48 = 0;
                v44 = *(_DWORD *)(v16 + 20);
              }
              ++v47;
              v45 = v44 & 0x7FFFFFF;
              v46 += 32;
            }
            while (v47 < v45);
          }
          llvm::SmallPtrSetImplBase::erase_imp((llvm::Value *)((char *)a2 + 880), (const void *)v16);
          if (!v78[0].__r_.__value_.__r.__words[0])
          {
            v50 = (llvm::Value *)v72;
            if ((_QWORD)v72)
            {
              v51 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
              v78[0].__r_.__value_.__r.__words[0] = llvm::IRBuilderBase::CreateAdd(v64, v50, v51, (const llvm::Twine *)&v68);
            }
          }
          if (!v78[0].__r_.__value_.__r.__words[2] && v73[0])
            v78[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v73[0];
          if (!v78[0].__r_.__value_.__l.__size_ && *((_QWORD *)&v72 + 1))
            v78[0].__r_.__value_.__l.__size_ = *((_QWORD *)&v72 + 1);
          if (SHIBYTE(v74[1]) < 0)
            operator delete(v73[1]);
        }
        else
        {
          memset(v78, 0, 24);
          if (SHIBYTE(v78[1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v78[1].__r_.__value_.__l.__data_);
          memset(&v78[1], 0, 37);
        }
        goto LABEL_109;
      }
      if (v18 - 78 < 0xFFFFFFFE || v16 == 0)
        break;
LABEL_60:
      v24 = *(_DWORD *)(v16 + 20);
      if ((v24 & 0x40000000) != 0)
      {
        v38 = *(uint64_t **)(v16 - 8);
        goto LABEL_63;
      }
LABEL_61:
      v38 = (uint64_t *)(v16 - 32 * (v24 & 0x7FFFFFF));
LABEL_63:
      v16 = *v38;
      if ((RTZModeFromImageBlockUser & 1) != 0)
        goto LABEL_17;
    }
    if (v18 == 5 && v16 != 0)
    {
      if ((*(_WORD *)(v16 + 18) & 0xFFFE) != 0x30)
        goto LABEL_109;
      v24 = *(_DWORD *)(v16 + 20);
      goto LABEL_61;
    }
    if (v18 == 62 && v16)
    {
      if (**(_QWORD **)(*(_QWORD *)v16 + 16) != *((_QWORD *)a2 + 23))
        goto LABEL_109;
      if ((*(_DWORD *)(v16 + 20) & 0x7FFFFFF) != 2)
        goto LABEL_109;
      v39 = *(_QWORD *)(v16 - 32);
      if (*(_BYTE *)(v39 + 16) != 16)
        goto LABEL_109;
      v40 = (_QWORD *)(v39 + 24);
      if (*(_DWORD *)(v39 + 32) >= 0x41u)
        v40 = (_QWORD *)*v40;
      v16 = *(_QWORD *)(v16 - 64);
      v14 = v62 + *(_WORD *)v40;
      v15 = 1;
      continue;
    }
    break;
  }
  if (v18 == 90 && v16)
  {
    v22 = *(_DWORD *)(v16 + 20);
    if ((v22 & 0x40000000) != 0)
      v23 = *(_QWORD *)(v16 - 8);
    else
      v23 = v16 - 32 * (v22 & 0x7FFFFFF);
    if (**(_QWORD **)v23 != *((_QWORD *)a2 + 38))
      goto LABEL_109;
    v25 = *(_QWORD *)(v23 + 64);
    if (*(_BYTE *)(v25 + 16) != 16)
      goto LABEL_109;
    v26 = (_QWORD *)(v25 + 24);
    if (*(_DWORD *)(v25 + 32) >= 0x41u)
      v26 = (_QWORD *)*v26;
    v27 = *(llvm::Value **)(v23 + 32);
    v28 = (_QWORD *)*v26;
    if ((unint64_t)(*v26 - 1) < 2)
    {
      v30 = &v79 + (_QWORD)v28;
      v31 = *(v30 - 1);
      if (!v31)
        v31 = v27;
      *(v30 - 1) = v31;
      if (!v78[0].__r_.__value_.__r.__words[2])
      {
        v32 = v79;
        if (v79)
        {
          v33 = v80;
          if (v80)
          {
            v34 = (llvm::Value *)llvm::UndefValue::get();
            LOWORD(v74[0]) = 257;
            v35 = (llvm::Value *)llvm::ConstantInt::get();
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v64, v34, v32, v35, (const llvm::Twine *)&v72);
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
            v37 = (llvm::Value *)llvm::ConstantInt::get();
            v78[0].__r_.__value_.__r.__words[2] = llvm::IRBuilderBase::CreateInsertElement(v64, InsertElement, v33, v37, (const llvm::Twine *)&v68);
          }
        }
      }
    }
    else if (v28 == (_QWORD *)3)
    {
      if (!v78[0].__r_.__value_.__l.__size_)
        v78[0].__r_.__value_.__l.__size_ = (std::string::size_type)v27;
    }
    else if (!v28 && !v78[0].__r_.__value_.__r.__words[0])
    {
      v29 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v74[0]) = 257;
      v78[0].__r_.__value_.__r.__words[0] = llvm::IRBuilderBase::CreateAdd(v64, v27, v29, (const llvm::Twine *)&v72);
    }
    goto LABEL_60;
  }
  if (v18 <= 0x14)
  {
    if (v16)
    {
      if (*(_QWORD *)v16 == *((_QWORD *)a2 + 38))
      {
        AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement((llvm::Constant *)v16);
        if (AggregateElement)
        {
          if (llvm::Constant::isZeroValue(AggregateElement))
          {
            if (!v78[0].__r_.__value_.__r.__words[0])
              v78[0].__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
            v58 = v79;
            if (!v79)
            {
              v58 = (llvm::Value *)llvm::Constant::getAggregateElement((llvm::Constant *)v16);
              v79 = v58;
            }
            v59 = v80;
            if (!v80)
            {
              v59 = (llvm::Value *)llvm::Constant::getAggregateElement((llvm::Constant *)v16);
              v80 = v59;
              v58 = v79;
            }
            if (!v78[0].__r_.__value_.__r.__words[2] && v58 && v59)
            {
              v60 = (llvm::Value *)llvm::UndefValue::get();
              LOWORD(v74[0]) = 257;
              v61 = (llvm::Value *)AGCLLVMBuilder::CreateInsertElement(a2, v60, v58, 0, (const llvm::Twine *)&v72);
              LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
              v78[0].__r_.__value_.__r.__words[2] = AGCLLVMBuilder::CreateInsertElement(a2, v61, v59, 1u, (const llvm::Twine *)&v68);
            }
            if (!v78[0].__r_.__value_.__l.__size_)
              v78[0].__r_.__value_.__l.__size_ = llvm::Constant::getAggregateElement((llvm::Constant *)v16);
          }
        }
      }
    }
  }
LABEL_109:
  v65 = v75;
  v66 = v76;
  if (v76)
    llvm::MetadataTracking::track();
  v67 = v77;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v65, (uint64_t)v64);
  if (v66)
    llvm::MetadataTracking::untrack();
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v72, (llvm::Value *)a3);
  *(_QWORD *)&v72 = &unk_1E7EB50C0;
  v74[0] = v63;
  *(_QWORD *)&v68 = 0;
  v52 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*((_QWORD *)a2 + 102), *((_DWORD *)a2 + 208), (uint64_t)v73[1], &v68);
  v53 = v68;
  if ((v52 & 1) == 0)
  {
    v53 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t)v63, (uint64_t)&v72, v68);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v53 + 8), (_QWORD *)&v72 + 1);
    *(_QWORD *)(v53 + 32) = v74[0];
    *(_OWORD *)(v53 + 40) = 0u;
    *(_OWORD *)(v53 + 56) = 0u;
    *(_OWORD *)(v53 + 72) = 0u;
    *(_OWORD *)(v53 + 85) = 0u;
  }
  if (v73[1] != (void *)-8192 && v73[1] != (void *)-4096 && v73[1])
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)((char *)&v72 + 8));
  *(std::string *)(v53 + 40) = v78[0];
  std::string::operator=((std::string *)(v53 + 64), &v78[1]);
  v55 = v78[1].__r_.__value_.__r.__words[2];
  data = v78[2].__r_.__value_.__l.__data_;
  *(_QWORD *)(v53 + 88) = v78[2].__r_.__value_.__l.__data_;
  v56 = *(std::string::size_type *)((char *)v78[2].__r_.__value_.__r.__words + 5);
  *(_QWORD *)(v53 + 93) = *(std::string::size_type *)((char *)v78[2].__r_.__value_.__r.__words + 5);
  *(std::string *)this = v78[0];
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)&v78[1].__r_.__value_.__l.__data_;
  memset(&v78[1], 0, sizeof(std::string));
  *(_QWORD *)((char *)this + 53) = v56;
  *((_QWORD *)this + 5) = v55;
  *((_QWORD *)this + 6) = data;
  if (v76)
  {
    llvm::MetadataTracking::untrack();
    if (SHIBYTE(v78[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78[1].__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 104 * v8, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::initEmpty(a1);
  if (v3)
  {
    v9 = (char *)v4 + 64;
    v10 = 104 * v3;
    do
    {
      v11 = *((_QWORD *)v9 - 5);
      if ((v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v19 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v19);
        v12 = v19;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v19 + 8), (_QWORD *)v9 - 7);
        *(_QWORD *)(v12 + 32) = *((_QWORD *)v9 - 4);
        v13 = *(_OWORD *)(v9 - 24);
        *(_QWORD *)(v12 + 56) = *((_QWORD *)v9 - 1);
        *(_OWORD *)(v12 + 40) = v13;
        v14 = *(_OWORD *)v9;
        *(_QWORD *)(v12 + 80) = *((_QWORD *)v9 + 2);
        *(_OWORD *)(v12 + 64) = v14;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
        *(_QWORD *)v9 = 0;
        v15 = *((_QWORD *)v9 + 3);
        *(_QWORD *)(v12 + 93) = *(_QWORD *)(v9 + 29);
        *(_QWORD *)(v12 + 88) = v15;
        ++*(_DWORD *)(a1 + 8);
        if (v9[23] < 0)
          operator delete(*(void **)v9);
      }
      v16 = *((_QWORD *)v9 - 5);
      if (v16 != -8192 && v16 != -4096 && v16 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 56));
      v9 += 104;
      v10 -= 104;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(104 * v3));
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::initEmpty(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 104 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7EB50C0;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 96;
      result = (uint64_t)v3 + 104;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void **v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  void **v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    if (*((char *)v9 + 87) < 0)
      operator delete(v9[8]);
    v10[1] = 0;
    v10[2] = -8192;
    v9 = (void **)&unk_1E7EB50C0;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

void llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t v5;
  int32x2_t *v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _BYTE v15[13];
  __int128 v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  int32x2_t *v20;
  void *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void *__p[3];
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[5];

  v34[2] = *MEMORY[0x1E0C80C00];
  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v18, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v20 = v4;
  v25 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v19, &v25))v5 = (uint64_t)v25;
  else
    v5 = *(_QWORD *)v4 + 104 * v4[2].u32[0];
  v6 = v20;
  if (*(_QWORD *)v20 + 104 * v20[2].u32[0] != v5)
  {
    v16 = *(_OWORD *)(v5 + 40);
    v7 = *(void **)(v5 + 64);
    v17 = *(_QWORD *)(v5 + 56);
    v34[0] = *(_QWORD *)(v5 + 72);
    *(_QWORD *)((char *)v34 + 7) = *(_QWORD *)(v5 + 79);
    v8 = *(_BYTE *)(v5 + 87);
    *(_QWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v5 + 80) = 0;
    *(_QWORD *)(v5 + 64) = 0;
    *(_QWORD *)&v15[5] = *(_QWORD *)(v5 + 93);
    *(_QWORD *)v15 = *(_QWORD *)(v5 + 88);
    v26[1] = 0;
    v27 = -8192;
    v25 = &unk_1E7EB50C0;
    v26[0] = 2;
    v28 = 0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v5 + 8), v26);
    v9 = v27;
    *(_QWORD *)(v5 + 32) = v28;
    if (v9 != -8192 && v9 != -4096 && v9)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
    v6[1] = vadd_s32(v6[1], (int32x2_t)0x1FFFFFFFFLL);
    v10 = (uint64_t)v20;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v21, a2);
    v21 = &unk_1E7EB50C0;
    v24 = v10;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v26, (LODWORD(v22[0]) >> 1) & 3, v22);
    v25 = &unk_1E7EB50C0;
    v28 = v24;
    v29 = v16;
    v30 = v17;
    __p[0] = v7;
    __p[1] = (void *)v34[0];
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v34 + 7);
    HIBYTE(__p[2]) = v8;
    v32[0] = *(_QWORD *)v15;
    *(_QWORD *)((char *)v32 + 5) = *(_QWORD *)&v15[5];
    v33 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::SmallPtrSet<llvm::BasicBlock*,4u>>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::SmallPtrSet<llvm::BasicBlock*,4u>,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v27, &v33))
    {
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
    else
    {
      v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(v10, (uint64_t)&v25, v33);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 8), v26);
      *(_QWORD *)(v11 + 32) = v28;
      v12 = v29;
      *(_QWORD *)(v11 + 56) = v30;
      *(_OWORD *)(v11 + 40) = v12;
      v13 = *(_OWORD *)__p;
      *(void **)(v11 + 80) = __p[2];
      *(_OWORD *)(v11 + 64) = v13;
      memset(__p, 0, sizeof(__p));
      v14 = *(_QWORD *)((char *)v32 + 5);
      *(_QWORD *)(v11 + 88) = v32[0];
      *(_QWORD *)(v11 + 93) = v14;
    }
    if (v27 != -8192 && v27 != -4096 && v27)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v26);
    if (v23 != -8192 && v23 != -4096 && v23)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
  }
  if (v19 != -8192 && v19 != -4096)
  {
    if (v19)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
  }
}

uint64_t llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 49));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *llvm::StringMap<AGCLLVMAirImageBlock::AIRImageBlockFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1EF8E76A0) = qword_1EF8E76A0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 49, 8);
  v9 = v8;
  v10 = v8 + 48;
  if (a2)
    memcpy((void *)(v8 + 48), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = 0x300000006;
  *(_DWORD *)(v9 + 16) = 2;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = -1;
  *i = v9;
  ++dword_1EF8E769C;
  for (i = (uint64_t *)(AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMAirImageBlock::initializeImageBlockMaps(void)::image_block_function_map));
        !*i || *i == -8;
  return i;
}

void AGCLLVMAirImageBlockGen3::AGCLLVMAirImageBlockGen3(AGCLLVMAirImageBlockGen3 *this, AGCLLVMUserObject *a2, llvm::LLVMContext **a3, AGCLLVMTargetLowerer *a4, const llvm::DataLayout *a5)
{
  _QWORD *v9;
  uint64_t v10;
  const llvm::DataLayout *v11;
  void **v12;
  std::string *v13;
  void **v14;
  const void **v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void **v19;
  const void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  AGCLLVMTargetLowerer *v29;

  v9 = (_QWORD *)((char *)this + 396);
  AGCLLVMBuilder::AGCLLVMBuilder(this, *a3);
  *(_QWORD *)v10 = &off_1E7EB7420;
  v29 = a4;
  *(_QWORD *)(v10 + 368) = a4;
  *(_QWORD *)(v10 + 376) = a2;
  v11 = (const llvm::DataLayout *)(v10 + 384);
  *(_WORD *)(v10 + 392) = 0;
  *(_WORD *)(v10 + 404) = 0;
  *(_QWORD *)(v10 + 416) = v10 + 440;
  *(_OWORD *)((char *)v9 + 28) = xmmword_1C3E37DE0;
  v12 = (void **)(v10 + 448);
  *(_QWORD *)(v10 + 448) = v10 + 464;
  *(_QWORD *)(v10 + 456) = 0x1000000000;
  v13 = (std::string *)(v10 + 592);
  *(_QWORD *)(v10 + 592) = 0;
  *(_QWORD *)(v10 + 608) = 0;
  *(_QWORD *)(v10 + 600) = 0;
  *(_QWORD *)(v10 + 616) = v10 + 632;
  *(_QWORD *)(v10 + 624) = 0x800000000;
  *(_QWORD *)(v10 + 760) = 0;
  *(_QWORD *)(v10 + 768) = v10 + 784;
  *(_QWORD *)(v10 + 776) = 0x800000000;
  llvm::DataLayout::clear((llvm::DataLayout *)(v10 + 384));
  std::string::operator=(v13, (const std::string *)((char *)a5 + 208));
  *((_BYTE *)this + 384) = *(_BYTE *)a5;
  *((_DWORD *)this + 97) = *((_DWORD *)a5 + 1);
  *((_WORD *)this + 196) = *((_WORD *)a5 + 4);
  *((_WORD *)this + 202) = *((_WORD *)a5 + 10);
  *v9 = *(_QWORD *)((char *)a5 + 12);
  *((_QWORD *)this + 51) = *((_QWORD *)a5 + 3);
  if (v11 != a5)
  {
    v14 = (void **)((char *)this + 416);
    v15 = (const void **)((char *)a5 + 32);
    v16 = *((_QWORD *)a5 + 5);
    v17 = *(_QWORD *)((char *)v9 + 28);
    if (v17 >= v16)
    {
      if (v16)
        memmove(*v14, *v15, *((_QWORD *)a5 + 5));
    }
    else
    {
      if (*((_QWORD *)this + 54) >= v16)
      {
        if (v17)
          memmove(*v14, *v15, *(_QWORD *)((char *)v9 + 28));
      }
      else
      {
        *(_QWORD *)((char *)v9 + 28) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod();
        v17 = 0;
      }
      v18 = *((_QWORD *)a5 + 5);
      if (v17 != v18)
        memcpy((char *)*v14 + v17, (char *)*v15 + v17, (_BYTE *)*v15 + v18 - ((_BYTE *)*v15 + v17));
    }
    *(_QWORD *)((char *)v9 + 28) = v16;
  }
  v19 = (void **)((char *)this + 616);
  v20 = (const void **)((char *)a5 + 64);
  if (v12 != (void **)((char *)a5 + 64))
  {
    v21 = *((unsigned int *)a5 + 18);
    v22 = *((unsigned int *)this + 114);
    if (v22 >= v21)
    {
      if ((_DWORD)v21)
        memmove(*v12, *v20, 8 * v21 - 2);
      goto LABEL_23;
    }
    if (*((_DWORD *)this + 115) >= v21)
    {
      if ((_DWORD)v22)
      {
        memmove(*v12, *v20, 8 * v22 - 2);
        goto LABEL_21;
      }
    }
    else
    {
      *((_DWORD *)this + 114) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v22 = 0;
LABEL_21:
    v23 = *((unsigned int *)a5 + 18);
    if (v22 != v23)
      memcpy((char *)*v12 + 8 * v22, (char *)*v20 + 8 * v22, (_BYTE *)*v20 + 8 * v23 - ((_BYTE *)*v20 + 8 * v22));
LABEL_23:
    *((_DWORD *)this + 114) = v21;
  }
  v24 = (const void **)((char *)a5 + 232);
  if (v19 != (void **)((char *)a5 + 232))
  {
    v25 = *((unsigned int *)a5 + 60);
    v26 = *((unsigned int *)this + 156);
    if (v26 >= v25)
    {
      if ((_DWORD)v25)
        memmove(*v19, *v24, 16 * v25);
      goto LABEL_35;
    }
    if (*((_DWORD *)this + 157) >= v25)
    {
      if ((_DWORD)v26)
      {
        memmove(*v19, *v24, 16 * v26);
        goto LABEL_33;
      }
    }
    else
    {
      *((_DWORD *)this + 156) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v26 = 0;
LABEL_33:
    v27 = *((unsigned int *)a5 + 60);
    if (v26 != v27)
      memcpy((char *)*v19 + 16 * v26, (char *)*v24 + 16 * v26, (_BYTE *)*v24 + 16 * v27 - ((_BYTE *)*v24 + 16 * v26));
LABEL_35:
    *((_DWORD *)this + 156) = v25;
  }
  llvm::SmallVectorImpl<unsigned int>::operator=((uint64_t)this + 768, (uint64_t)a5 + 384);
  *((_QWORD *)this + 42) = a3;
  *((_DWORD *)this + 26) = *((_DWORD *)v29 + 26);
  *(_QWORD *)this = &off_1E7EB73E8;
  *((_DWORD *)this + 208) = 128;
  *((_QWORD *)this + 102) = MEMORY[0x1CAA2C6C0](13312, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCLLVMAirImageBlockGen3::ImageBlockData,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCLLVMAirImageBlockGen3::ImageBlockData>>::initEmpty((uint64_t)this + 816);
  *((_BYTE *)this + 840) = 0;
  *((_BYTE *)this + 864) = 0;
  *((_QWORD *)this + 110) = (char *)this + 912;
  *((_QWORD *)this + 111) = (char *)this + 912;
  *((_QWORD *)this + 112) = 4;
  *((_DWORD *)this + 226) = 0;
  *((_BYTE *)this + 944) = 0;
}

void AGCLLVMDriverIntersectionShader::~AGCLLVMDriverIntersectionShader(AGCLLVMDriverIntersectionShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this + 88));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this + 88));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDriverIntersectionShader::dumpType(AGCLLVMDriverIntersectionShader *this)
{
  uint64_t v2;
  int v3;
  const char *result;
  uint64_t v5;

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v3 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 1352))(v2, **((_DWORD **)this + 10) & 0xF, (**((_DWORD **)this + 10) >> 4) & 3);
  result = "cliqueS-push-intersection-(driver)";
  switch(v3)
  {
    case 0:
      return result;
    case 1:
      result = "cliqueS-pop-intersection-(driver)";
      break;
    case 2:
      v5 = *((_QWORD *)this + 10);
      result = "cliqueS-timesplit-intersection-(driver)";
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 1) & 0x80) == 0)
          result = "cliqueS-temporal-split-intersection-(driver)";
      }
      break;
    case 3:
      result = "cliqueS-general-(driver)";
      break;
    default:
      result = "intersection-(driver)";
      break;
  }
  return result;
}

uint64_t AGCLLVMDriverIntersectionShader::getShaderType(AGCLLVMDriverIntersectionShader *this)
{
  return 30;
}

void AGCLLVMDriverIntersectionShader::getCompilationKeyDescription(AGCLLVMDriverIntersectionShader *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*((_QWORD *)this + 10);
  std::string::basic_string[abi:nn180100]<0>(v21, "AGCDriverIntersectionState");
  std::string::basic_string[abi:nn180100]<0>(v19, "primitiveType");
  _agcFieldString<unsigned int>(&v23, (const void **)v19, *v3 & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v17, "leafVariant");
  _agcFieldString<unsigned int>(&v24, (const void **)v17, (*v3 >> 4) & 3);
  std::string::basic_string[abi:nn180100]<0>(v15, "payloadVariant");
  _agcFieldString<unsigned int>(&v25, (const void **)v15, (*v3 >> 6) & 7);
  std::string::basic_string[abi:nn180100]<0>(v13, "threadsPerLeafPOT");
  _agcFieldString<unsigned int>(&v26, (const void **)v13, (*v3 >> 9) & 7);
  std::string::basic_string[abi:nn180100]<0>(v11, "maxParallelLeavesPOT");
  _agcFieldString<unsigned int>(&v27, (const void **)v11, (*v3 >> 12) & 7);
  std::string::basic_string[abi:nn180100]<0>(v9, "disableTemporalSplits");
  _agcFieldString<unsigned int>(&v28, (const void **)v9, (*v3 >> 15) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "doraEnabled");
  _agcFieldString<unsigned int>(&v29, (const void **)v7, HIWORD(*v3) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v30, (const void **)__p, *v3 >> 17);
  _agcGroupWithHeader(a2, (uint64_t)v21, (uint64_t)&v23, 8);
  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v30.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
}

BOOL AGCLLVMDriverIntersectionShader::constructReply(AGCLLVMDriverIntersectionShader *this)
{
  _BOOL8 v2;
  char *v3;
  char *v4;
  int v5;
  unsigned int v6;
  flatbuffers::FlatBufferBuilder *v7;
  __int16 v8;
  int v9;
  char *v10;
  char *v11;
  int v12;
  flatbuffers::FlatBufferBuilder *v13;
  int v14;
  const char *v15;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMDriverIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                          + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v4 = v3 + 2472;
    v3[2542] = 1;
    v5 = *((_DWORD *)v3 + 626) - *((_DWORD *)v3 + 630) + *((_DWORD *)v3 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v3 + 2472, 4, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v4, 6, 0, 0);
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((uint64_t)v4, 1);
    flatbuffers::FlatBufferBuilder::TrackField(v4, 8, v6);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v4, 10, ((unint64_t)**((unsigned int **)this + 10) >> 9) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v4, 12, ((unint64_t)**((unsigned int **)this + 10) >> 12) & 7, 0);
    LODWORD(v4) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v4, v5);
    v7 = AGCLLVMObject::constructFlatReply((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                             + *(_QWORD *)(*(_QWORD *)this - 24)));
    v9 = flatbuffers::FlatBufferBuilder::EndTable(v7, v8);
    v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v11 = v10 + 2472;
    v10[2542] = 1;
    v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::IntersectionFunctionInfo>(v10 + 2472, (int)v4);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v11, v9);
    v13 = (AGCLLVMDriverIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, v12);
    flatbuffers::FlatBufferBuilder::Finish(v13, v14, v15);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMDriverIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  }
  return v2;
}

void AGCLLVMDriverIntersectionShader::wrapperName(AGCLLVMDriverIntersectionShader *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  void *__p[2];
  char v5;

  (*(void (**)(void **__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)((char *)this
                                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                                            + 400)
                                                                              + 1280))(__p, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), **((_DWORD **)this + 10) & 0xF, (**((_DWORD **)this + 10) >> 6) & 7, (**((_DWORD **)this + 10) >> 4) & 3);
  if (v5 >= 0)
    v3 = (char *)__p;
  else
    v3 = (char *)__p[0];
  std::string::basic_string[abi:nn180100]<0>(a2, v3);
  if (v5 < 0)
    operator delete(__p[0]);
}

void `non-virtual thunk to'AGCLLVMDriverIntersectionShader::~AGCLLVMDriverIntersectionShader(AGCLLVMDriverIntersectionShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this + 16));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this + 16));
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMDriverIntersectionShader::~AGCLLVMDriverIntersectionShader(AGCLLVMDriverIntersectionShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                  + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                  + 88));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                  + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                  + 88));
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMDriverIntersectionShader::wrapperName(AGCLLVMDriverIntersectionShader *this@<X0>, _QWORD *a2@<X8>)
{
  AGCLLVMDriverIntersectionShader::wrapperName((AGCLLVMDriverIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 64)), a2);
}

const char *`virtual thunk to'AGCLLVMDriverIntersectionShader::dumpType(AGCLLVMDriverIntersectionShader *this)
{
  return AGCLLVMDriverIntersectionShader::dumpType((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                                     + *(_QWORD *)(*(_QWORD *)this - 72)));
}

uint64_t `virtual thunk to'AGCLLVMDriverIntersectionShader::getShaderType(AGCLLVMDriverIntersectionShader *this)
{
  return 30;
}

void `virtual thunk to'AGCLLVMDriverIntersectionShader::getCompilationKeyDescription(AGCLLVMDriverIntersectionShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMDriverIntersectionShader::getCompilationKeyDescription((AGCLLVMDriverIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMDriverIntersectionShader::constructReply(AGCLLVMDriverIntersectionShader *this)
{
  return AGCLLVMDriverIntersectionShader::constructReply((AGCLLVMDriverIntersectionShader *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 152)));
}

char *flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::IntersectionFunctionInfo>(char *result, int a2)
{
  char *v3;

  if (a2)
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::Align((flatbuffers::FlatBufferBuilder *)result, 4uLL);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v3, 18, *((_DWORD *)v3 + 8) - *((_DWORD *)v3 + 12) + *((_DWORD *)v3 + 10) - a2 + 4);
  }
  return result;
}

void AGCLLVMUserIntersectionShader::~AGCLLVMUserIntersectionShader(AGCLLVMUserIntersectionShader *this)
{
  uint64_t v1;

  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7EB57D8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4408));
}

{
  uint64_t v1;

  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7EB57D8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4408));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMUserIntersectionShader::initCompile(AGCLLVMUserIntersectionShader *this)
{
  const char *v2;
  const char *v3;
  const char *Value;
  __int16 v5;
  __int16 v6;
  int v7;
  char v8;
  llvm::legacy::PassManager *v9;
  llvm *v10;
  uint64_t PostOrderFunctionAttrsLegacyPass;
  llvm *v12;
  uint64_t UnifyFunctionExitNodesPass;
  uint64_t v14;
  llvm *v15;
  uint64_t TypeBasedAAWrapperPass;
  llvm *v17;
  uint64_t ScopedNoAliasAAWrapperPass;
  llvm *v19;
  uint64_t BasicAAWrapperPass;
  llvm *v21;
  uint64_t GPUAAWrapperPass;
  uint64_t v23;
  llvm *v24;
  uint64_t LICMPass;
  llvm *v26;
  uint64_t IndVarSimplifyPass;
  uint64_t SimpleLoopUnrollPass;
  llvm *v29;
  uint64_t NewGVNPass;
  llvm *v31;
  uint64_t DeadStoreEliminationPass;
  llvm *v33;
  uint64_t AggressiveDCEPass;
  uint64_t CFGSimplificationPass;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x1E0C80C00];
  if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_RT_FORCE_SIDE_EFFECTS", v2))
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_RT_FORCE_SIDE_EFFECTS", v3);
    v5 = Value && *Value != 48 && atoi(Value) != 0;
    v6 = 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = *((_DWORD *)this + 1082);
  if ((v7 & 0x7000) != 0)
    v8 = BYTE2(v7) & 1;
  else
    v8 = 1;
  v9 = (llvm::legacy::PassManager *)operator new();
  v10 = (llvm *)llvm::legacy::PassManager::PassManager(v9);
  PostOrderFunctionAttrsLegacyPass = llvm::createPostOrderFunctionAttrsLegacyPass(v10);
  v12 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, PostOrderFunctionAttrsLegacyPass);
  UnifyFunctionExitNodesPass = llvm::createUnifyFunctionExitNodesPass(v12);
  (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, UnifyFunctionExitNodesPass);
  v14 = operator new();
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = &AGCLLVMUserIntersectionShaderLoopShaderPass::ID;
  *(_DWORD *)(v14 + 24) = 2;
  *(_QWORD *)v14 = &off_1E7EB6628;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 32) = (char *)this + 88;
  v15 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v14);
  TypeBasedAAWrapperPass = llvm::createTypeBasedAAWrapperPass(v15);
  v17 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, TypeBasedAAWrapperPass);
  ScopedNoAliasAAWrapperPass = llvm::createScopedNoAliasAAWrapperPass(v17);
  v19 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, ScopedNoAliasAAWrapperPass);
  BasicAAWrapperPass = llvm::createBasicAAWrapperPass(v19);
  v21 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, BasicAAWrapperPass);
  GPUAAWrapperPass = llvm::createGPUAAWrapperPass(v21);
  (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, GPUAAWrapperPass);
  v23 = operator new();
  *(_QWORD *)(v23 + 8) = 0;
  *(_QWORD *)(v23 + 16) = &AGCLLVMUserIntersectionShaderPass::ID;
  *(_DWORD *)(v23 + 24) = 2;
  *(_QWORD *)v23 = &off_1E7EB66C8;
  *(_WORD *)(v23 + 28) = v5 | (v6 << 8);
  *(_BYTE *)(v23 + 30) = v8;
  v24 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v23);
  LICMPass = llvm::createLICMPass(v24);
  v26 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, LICMPass);
  IndVarSimplifyPass = llvm::createIndVarSimplifyPass(v26);
  (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, IndVarSimplifyPass);
  SimpleLoopUnrollPass = llvm::createSimpleLoopUnrollPass((llvm *)2);
  v29 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, SimpleLoopUnrollPass);
  NewGVNPass = llvm::createNewGVNPass(v29);
  v31 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, NewGVNPass);
  DeadStoreEliminationPass = llvm::createDeadStoreEliminationPass(v31);
  v33 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, DeadStoreEliminationPass);
  AggressiveDCEPass = llvm::createAggressiveDCEPass(v33);
  (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, AggressiveDCEPass);
  v39[3] = 0;
  CFGSimplificationPass = llvm::createCFGSimplificationPass();
  (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v9 + 16))(v9, CFGSimplificationPass);
  if (!v39)
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v39[0] + 32))(v39, v36, v37);
  llvm::legacy::PassManager::run(v9, *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
  (*(void (**)(llvm::legacy::PassManager *))(*(_QWORD *)v9 + 8))(v9);
  AGCLLVMUserObject::initCompile(this);
  return 1;
}

uint64_t AGCLLVMUserIntersectionShader::wrapperFunctionType(AGCLLVMUserIntersectionShader *this)
{
  return llvm::FunctionType::get();
}

uint64_t AGCLLVMUserIntersectionShader::wrapperCallingConvention(AGCLLVMUserIntersectionShader *this)
{
  return 106;
}

uint64_t AGCLLVMUserIntersectionShader::isIntersectionFunctionBufferIntersectionFunction(AGCLLVMUserIntersectionShader *this)
{
  return HIBYTE(*((unsigned __int16 *)this + 2200)) & 1;
}

uint64_t AGCLLVMUserIntersectionShader::setupShaderInputs(AGCLLVMUserIntersectionShader *this)
{
  uint64_t v2;
  uint64_t GlobalRayStridesGlobal;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Instruction *v8;
  llvm::Module *v9;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  _QWORD *Name;
  unint64_t v36;
  char *v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  llvm::Type **v46;
  llvm::Type *v47;
  int v48;
  llvm::IRBuilderBase *v49;
  llvm::IRBuilderBase *v50;
  llvm::Instruction **v51;
  uint64_t v52;
  llvm::Instruction *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  uint64_t v60;
  llvm::Instruction *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  llvm::Instruction *v68;
  llvm::IRBuilderBase *v69;
  llvm::Type *v70;
  llvm::Instruction *v71;
  char *v72;
  uint64_t v73;
  uint64_t Function;
  llvm::Instruction *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  llvm::Instruction *v80;
  char *v81;
  uint64_t v82;
  llvm::Instruction *v83;
  char *v84;
  uint64_t v85;
  llvm::Instruction *v86;
  llvm::Instruction *v87;
  llvm::Instruction *v88;
  char *v89;
  uint64_t v90;
  llvm::Instruction *v91;
  char *v92;
  uint64_t v93;
  llvm::Instruction *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  llvm::Instruction *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  uint64_t v113;
  int v114;
  __int128 v115;
  uint64_t v116;
  int v117;
  __int128 v118;
  uint64_t v119;
  int v120;
  __int128 v121;
  uint64_t v122;
  int v123;
  __int128 v124;
  uint64_t v125;
  int v126;
  __int128 v127;
  uint64_t v128;
  int v129;
  __int128 v130;
  uint64_t v131;
  int v132;
  __int128 v133;
  uint64_t v134;
  int v135;
  _DWORD v136[8];
  __int16 v137;
  __int128 v138;
  uint64_t v139;
  int v140;
  __int128 v141;
  uint64_t v142;
  int v143;
  __int128 v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  uint64_t v148;
  int v149;
  __int128 v150;
  uint64_t v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 760))(v2);
  GlobalRayStridesGlobal = AGCLLVMUserObject::createGlobalRayStridesGlobal(this);
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)((char *)this
                                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                                        + 400)
                                                                          + 1288))(&v153, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), GlobalRayStridesGlobal);
  v4 = v154;
  *(_OWORD *)((char *)this + 3784) = v153;
  *(_OWORD *)((char *)this + 3800) = v4;
  *(_OWORD *)((char *)this + 3816) = v155;
  v5 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
  v6 = v5 - 24;
  if (!v5)
    v6 = 0;
  v108 = v6;
  v7 = *(_QWORD *)(v6 + 40);
  if (v7)
    v8 = (llvm::Instruction *)(v7 - 24);
  else
    v8 = 0;
  AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v8, *((_QWORD *)this + 6));
  v9 = *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  *(_QWORD *)&v153 = "air.intersection";
  LOWORD(v155) = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v9, (const llvm::Twine *)&v153);
  if (NamedMetadata)
  {
    Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
    v12 = Operand - 8 * *(unsigned int *)(Operand + 8) + 32;
    if (v12 != Operand)
    {
      v13 = Operand;
      do
      {
        if (isStringMDNode(*(llvm::MDString **)v12, "air.triangle_data"))
        {
          v14 = 8;
        }
        else if (isStringMDNode(*(llvm::MDString **)v12, "air.curve_data"))
        {
          v14 = 128;
        }
        else
        {
          if (isStringMDNode(*(llvm::MDString **)v12, "air.instancing"))
          {
            v15 = 1;
            v14 = 1;
LABEL_15:
            *((_DWORD *)this + 1094) = v15;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v12, "air.world_space_data"))
          {
            v14 = 16;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v12, "air.primitive_motion"))
          {
            v14 = 2;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v12, "air.instance_motion"))
          {
            v14 = 4;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v12, "air.extended_limits"))
          {
            v14 = 32;
            goto LABEL_24;
          }
          if (isStringMDNode(*(llvm::MDString **)v12, "air.multi_level_instancing"))
          {
            v17 = *(unsigned __int8 **)(v12 + 8);
            v12 += 8;
            v16 = v17;
            if (*v17 - 3 >= 0xFFFFFFFE && (v18 = *((_QWORD *)v16 + 16), *(_BYTE *)(v18 + 16) == 16))
            {
              v19 = (_QWORD *)(v18 + 24);
              if (*(_DWORD *)(v18 + 32) >= 0x41u)
                v19 = (_QWORD *)*v19;
              v15 = *(_DWORD *)v19 - 1;
              v14 = 64;
            }
            else
            {
              v14 = 64;
              v15 = 31;
            }
            goto LABEL_15;
          }
          if (!isStringMDNode(*(llvm::MDString **)v12, "air.intersection_function_buffer"))
            goto LABEL_25;
          v14 = 256;
        }
LABEL_24:
        *((_WORD *)this + 2200) |= v14;
LABEL_25:
        v12 += 8;
      }
      while (v12 != v13);
    }
  }
  v20 = *((_DWORD *)this + 1083);
  switch(v20)
  {
    case 3:
      v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v27 = *((_QWORD *)v26 + 50);
      v144 = *(_OWORD *)(v26 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v26 + 40));
      v146 = *((_DWORD *)v26 + 34);
      LODWORD(v26) = *((_DWORD *)this + 1082);
      v28 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
      v29 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v28 + 1384))(v28, *((unsigned __int16 *)this + 2200));
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, char *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v27 + 1144))(&v153, v27, &v144, (char *)this + 3784, v26 & 3, v29, (*((unsigned __int16 *)this + 2200) >> 5) & 1, (*((_DWORD *)this + 1082) >> 9) & 7);
      v30 = v154;
      *((_OWORD *)this + 271) = v153;
      *((_OWORD *)this + 272) = v30;
      if (!v145)
        break;
      goto LABEL_42;
    case 2:
      v103 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v104 = *((_QWORD *)v103 + 50);
      v147 = *(_OWORD *)(v103 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v103 + 40));
      v149 = *((_DWORD *)v103 + 34);
      LODWORD(v103) = *((_DWORD *)this + 1082);
      v105 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
      v106 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v105 + 1384))(v105, *((unsigned __int16 *)this + 2200));
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, char *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v104 + 1136))(&v153, v104, &v147, (char *)this + 3784, v103 & 3, v106, (*((unsigned __int16 *)this + 2200) >> 5) & 1, (*((_DWORD *)this + 1082) >> 9) & 7);
      v107 = v154;
      *((_OWORD *)this + 271) = v153;
      *((_OWORD *)this + 272) = v107;
      if (!v148)
        break;
LABEL_42:
      llvm::MetadataTracking::untrack();
      break;
    case 1:
      v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v22 = *((_QWORD *)v21 + 50);
      v150 = *(_OWORD *)(v21 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v21 + 40));
      v152 = *((_DWORD *)v21 + 34);
      LODWORD(v21) = *((_DWORD *)this + 1082);
      v23 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
      v24 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 1384))(v23, *((unsigned __int16 *)this + 2200));
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, char *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v22 + 1128))(&v153, v22, &v150, (char *)this + 3784, v21 & 3, v24, (*((unsigned __int16 *)this + 2200) >> 5) & 1, (*((_DWORD *)this + 1082) >> 9) & 7, 0);
      v25 = v154;
      *((_OWORD *)this + 271) = v153;
      *((_OWORD *)this + 272) = v25;
      if (v151)
        goto LABEL_42;
      break;
  }
  v31 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v32 = v31 + 24;
  v33 = *(_QWORD *)(v31 + 32);
  if (v33 != v31 + 24)
  {
    do
    {
      if (v33)
        v34 = (llvm::Value *)(v33 - 56);
      else
        v34 = 0;
      Name = (_QWORD *)llvm::Value::getName(v34);
      if (v36 >= 0xF && *Name == 0x612E74722E786761 && *(_QWORD *)((char *)Name + 7) == 0x746E656D75677261)
      {
        v38 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v141 = *(_OWORD *)(v38 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v38 + 40));
        v143 = *((_DWORD *)v38 + 34);
        *(_QWORD *)&v153 = &v154;
        *((_QWORD *)&v153 + 1) = 0x800000000;
        v39 = *((_QWORD *)v34 + 1);
        if (v39)
        {
          do
          {
            v40 = *(_DWORD **)(v39 + 24);
            v41 = *(_QWORD *)&v40[-8 * (v40[5] & 0x7FFFFFF)];
            v42 = (unsigned int *)(v41 + 24);
            if (*(_DWORD *)(v41 + 32) >= 0x41u)
              v42 = *(unsigned int **)v42;
            v43 = *v42;
            llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), *(llvm::Instruction **)(v39 + 24));
            v44 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v45 = *((_QWORD *)v44 + 50);
            v138 = *(_OWORD *)(v44 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v44 + 40));
            v140 = *((_DWORD *)v44 + 34);
            v46 = (llvm::Type **)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, char *, _QWORD, _QWORD))(*(_QWORD *)v45 + 936))(v45, &v138, v43, (char *)this + 4336, *((unsigned __int16 *)this + 2200), *((unsigned int *)this + 1094));
            if (v139)
              llvm::MetadataTracking::untrack();
            v47 = *(llvm::Type **)v40;
            v48 = *(unsigned __int8 *)(*(_QWORD *)v40 + 8);
            if (v48 == 15)
            {
              if (v47 != *v46)
              {
                v50 = (AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
                v137 = 257;
                llvm::IRBuilderBase::CreatePointerCast(v50, v46, v47, (const llvm::Twine *)v136);
              }
            }
            else if (v48 == 13 && v47 != *v46)
            {
              v49 = (AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
              v137 = 257;
              llvm::IRBuilderBase::CreateZExtOrTrunc(v49, v46, v47, (const llvm::Twine *)v136);
            }
            llvm::Value::replaceAllUsesWith();
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v153, (uint64_t)v40);
            v39 = *(_QWORD *)(v39 + 8);
          }
          while (v39);
          if (DWORD2(v153))
          {
            v51 = (llvm::Instruction **)v153;
            v52 = 8 * DWORD2(v153);
            do
            {
              v53 = *v51++;
              llvm::Instruction::eraseFromParent(v53);
              v52 -= 8;
            }
            while (v52);
          }
        }
        v54 = *(_QWORD *)(*(_QWORD *)this - 24);
        v133 = v141;
        v134 = v142;
        if (v142)
          llvm::MetadataTracking::track();
        v135 = v143;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v133, (uint64_t)this + v54 + 40);
        if (v134)
          llvm::MetadataTracking::untrack();
        if ((__int128 *)v153 != &v154)
          free((void *)v153);
        if (v142)
          llvm::MetadataTracking::untrack();
      }
      v33 = *(_QWORD *)(v33 + 8);
    }
    while (v33 != v32);
  }
  v55 = *((_QWORD *)this + 22);
  if ((*(_WORD *)(v55 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v58 = *((_QWORD *)this + 22);
    v56 = *(_QWORD *)(v55 + 88);
    v57 = v108;
    if ((*(_WORD *)(v58 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v55 = v58;
  }
  else
  {
    v56 = *(_QWORD *)(v55 + 88);
    v57 = v108;
  }
  for (i = *(_QWORD *)(v55 + 88) + 40 * *(_QWORD *)(v55 + 96); v56 != i; v56 += 40)
  {
    if (*(_QWORD *)(v56 + 8))
    {
      v60 = *(_QWORD *)(v57 + 40);
      v61 = v60 ? (llvm::Instruction *)(v60 - 24) : 0;
      AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v61, *((_QWORD *)this + 6));
      v62 = *(unsigned int *)(v56 + 32);
      v63 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * v62);
      if ((AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v56, v62, v63) & 1) == 0
        && isStringMDNode(*(llvm::MDString **)(v63 - 8 * *(unsigned int *)(v63 + 8) + 8), "air.payload"))
      {
        v64 = *(llvm::Type **)v56;
        v65 = *((_QWORD *)this + 544);
        v66 = *(_QWORD *)(v65 + 32);
        if (v66)
          v67 = v66 == *(_QWORD *)(v65 + 40) + 40;
        else
          v67 = 1;
        if (v67)
          v68 = 0;
        else
          v68 = (llvm::Instruction *)(v66 - 24);
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v68);
        v69 = (AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        LOWORD(v155) = 257;
        llvm::IRBuilderBase::CreatePointerCast(v69, (llvm::Type **)v65, v64, (const llvm::Twine *)&v153);
        llvm::Value::replaceAllUsesWith();
        v136[0] = 0;
        LODWORD(v153) = 5;
        parseMDInt(0, v63, (unsigned int *)&v153, v136);
        *((_QWORD *)this + 548) = v136[0];
        v70 = v64;
        v57 = v108;
        *((_QWORD *)this + 549) = llvm::DataLayout::getABITypeAlignment((AGCLLVMUserIntersectionShader *)((char *)this + 232), v70);
        AGCLLVMUserObject::createSCSUserDataBoundGlobal(this);
      }
    }
  }
  AGCLLVMUserObject::createSCSDriverDataStartGlobal(this);
  v71 = *(llvm::Instruction **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v71);
  v72 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v73 = *((_QWORD *)v72 + 50);
  v130 = *(_OWORD *)(v72 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v72 + 40));
  v132 = *((_DWORD *)v72 + 34);
  (*(void (**)(uint64_t, __int128 *, char *))(*(_QWORD *)v73 + 1232))(v73, &v130, (char *)this + 4336);
  if (v131)
    llvm::MetadataTracking::untrack();
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v71);
  Function = llvm::Module::getFunction();
  if (Function)
  {
    v75 = *(llvm::Instruction **)(*(_QWORD *)(Function + 8) + 24);
    v76 = *((_QWORD *)v75 - 4 * (*((_DWORD *)v75 + 5) & 0x7FFFFFF));
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v75);
    v77 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v78 = *((_QWORD *)v77 + 50);
    v127 = *(_OWORD *)(v77 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v77 + 40));
    v129 = *((_DWORD *)v77 + 34);
    (*(void (**)(uint64_t, __int128 *, char *, uint64_t))(*(_QWORD *)v78 + 1240))(v78, &v127, (char *)this + 4336, v76);
    if (v128)
      llvm::MetadataTracking::untrack();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v75);
  }
  v79 = llvm::Module::getFunction();
  if (v79)
  {
    v80 = *(llvm::Instruction **)(*(_QWORD *)(v79 + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v80);
    AGCLLVMUserIntersectionShader::unpackUserResult((AGCLLVMUserIntersectionShader *)&v153, this, *((_QWORD *)v80 - 4 * (*((_DWORD *)v80 + 5) & 0x7FFFFFF)));
    v81 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v82 = *((_QWORD *)v81 + 50);
    v124 = *(_OWORD *)(v81 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v81 + 40));
    v126 = *((_DWORD *)v81 + 34);
    (*(void (**)(uint64_t, __int128 *, char *, _QWORD, _QWORD, _QWORD, _QWORD, BOOL))(*(_QWORD *)v82 + 1184))(v82, &v124, (char *)this + 4336, v153, *((_QWORD *)&v153 + 1), v154, 0, (*((_DWORD *)this + 1082) & 0x7000) == 0);
    if (v125)
      llvm::MetadataTracking::untrack();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v80);
    v83 = *(llvm::Instruction **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v83);
    v84 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v85 = *((_QWORD *)v84 + 50);
    v121 = *(_OWORD *)(v84 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v84 + 40));
    v123 = *((_DWORD *)v84 + 34);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v85 + 1200))(v85, &v121);
    if (v122)
      llvm::MetadataTracking::untrack();
    llvm::Instruction::eraseFromParent(v83);
    v86 = *(llvm::Instruction **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v86);
    AGCLLVMUserIntersectionShader::unpackUserResult((AGCLLVMUserIntersectionShader *)&v153, this, *((_QWORD *)v86 - 4 * (*((_DWORD *)v86 + 5) & 0x7FFFFFF)));
    llvm::Value::replaceAllUsesWith();
    v87 = v86;
  }
  else
  {
    v88 = *(llvm::Instruction **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v88);
    v89 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v90 = *((_QWORD *)v89 + 50);
    v118 = *(_OWORD *)(v89 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v89 + 40));
    v120 = *((_DWORD *)v89 + 34);
    (*(void (**)(uint64_t, __int128 *, char *))(*(_QWORD *)v90 + 1224))(v90, &v118, (char *)this + 4336);
    if (v119)
      llvm::MetadataTracking::untrack();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v88);
    v91 = *(llvm::Instruction **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v91);
    AGCLLVMUserIntersectionShader::unpackUserResult((AGCLLVMUserIntersectionShader *)&v153, this, *((_QWORD *)v91 - 4 * (*((_DWORD *)v91 + 5) & 0x7FFFFFF)));
    v92 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v93 = *((_QWORD *)v92 + 50);
    v115 = *(_OWORD *)(v92 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v92 + 40));
    v117 = *((_DWORD *)v92 + 34);
    (*(void (**)(uint64_t, __int128 *, char *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v93 + 1192))(v93, &v115, (char *)this + 4336, v153, *((_QWORD *)&v153 + 1), v154);
    if (v116)
      llvm::MetadataTracking::untrack();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v91);
    v94 = *(llvm::Instruction **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v94);
    v95 = *((_QWORD *)v94 - 4 * (*((_DWORD *)v94 + 5) & 0x7FFFFFF));
    v96 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v97 = *((_QWORD *)v96 + 50);
    v112 = *(_OWORD *)(v96 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v96 + 40));
    v114 = *((_DWORD *)v96 + 34);
    (*(void (**)(uint64_t, __int128 *, char *, uint64_t))(*(_QWORD *)v97 + 1208))(v97, &v112, (char *)this + 4336, v95);
    if (v113)
      llvm::MetadataTracking::untrack();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v94);
    v98 = *(llvm::Instruction **)(*(_QWORD *)(llvm::Module::getFunction() + 8) + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v98);
    v99 = *((_QWORD *)v98 - 4 * (*((_DWORD *)v98 + 5) & 0x7FFFFFF));
    v100 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v101 = *((_QWORD *)v100 + 50);
    v109 = *(_OWORD *)(v100 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v100 + 40));
    v111 = *((_DWORD *)v100 + 34);
    (*(void (**)(uint64_t, __int128 *, char *, uint64_t))(*(_QWORD *)v101 + 1216))(v101, &v109, (char *)this + 4336, v99);
    if (v110)
      llvm::MetadataTracking::untrack();
    v87 = v98;
  }
  llvm::Instruction::eraseFromParent(v87);
  return 1;
}

uint64_t AGCLLVMUserIntersectionShader::setupShaderOutputs(AGCLLVMUserIntersectionShader *this)
{
  llvm::Function *Function;

  Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((_QWORD *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  return 1;
}

uint64_t AGCLLVMUserIntersectionShader::replaceBuiltins(AGCLLVMUserIntersectionShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = AGCLLVMUserObject::replaceBuiltins(this);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    v4 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 1384))(v3, *((unsigned __int16 *)this + 2200));
    (*(void (**)(uint64_t, char *, _QWORD, uint64_t))(*(_QWORD *)v3 + 1376))(v3, (char *)this + 3784, 0, v4);
  }
  return v2;
}

uint64_t AGCLLVMUserIntersectionShader::getMaxSharedRegisters(AGCLLVMUserIntersectionShader *this)
{
  return *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 852);
}

uint64_t AGCLLVMUserIntersectionShader::supportsConstantSamplers(AGCLLVMUserIntersectionShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserIntersectionShader::getPCFStateForUnit(AGCLLVMUserIntersectionShader *this)
{
  return 0;
}

uint64_t AGCLLVMUserIntersectionShader::needsPCFClamp(AGCLLVMUserIntersectionShader *this)
{
  return 0;
}

const char *AGCLLVMUserIntersectionShader::dumpType(AGCLLVMUserIntersectionShader *this)
{
  return "intersection-(user)";
}

uint64_t AGCLLVMUserIntersectionShader::getShaderType(AGCLLVMUserIntersectionShader *this)
{
  return 29;
}

uint64_t AGCLLVMUserIntersectionShader::getRelocModel(AGCLLVMUserIntersectionShader *this)
{
  return (*((_DWORD *)this + 1082) >> 18) & 1;
}

uint64_t AGCLLVMUserIntersectionShader::getSupportExternalVisibleFunctions(AGCLLVMUserIntersectionShader *this)
{
  return *((_BYTE *)this + 4329) & 1;
}

void AGCLLVMUserIntersectionShader::getCompilationKeyDescription(AGCLLVMUserIntersectionShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v21, "AGCUserIntersectionState");
  std::string::basic_string[abi:nn180100]<0>(v19, "leafVariant");
  _agcFieldString<unsigned int>(&v23, (const void **)v19, *((_DWORD *)this + 1082) & 3);
  std::string::basic_string[abi:nn180100]<0>(v17, "threadsPerLeafPOT");
  _agcFieldString<unsigned int>(&v24, (const void **)v17, (*((_DWORD *)this + 1082) >> 9) & 7);
  std::string::basic_string[abi:nn180100]<0>(v15, "maxParallelLeavesPOT");
  _agcFieldString<unsigned int>(&v25, (const void **)v15, (*((_DWORD *)this + 1082) >> 12) & 7);
  std::string::basic_string[abi:nn180100]<0>(v13, "disableParallelLeafLoop");
  _agcFieldString<unsigned int>(&v26, (const void **)v13, HIWORD(*((_DWORD *)this + 1082)) & 1);
  std::string::basic_string[abi:nn180100]<0>(v11, "disableTemporalSplits");
  _agcFieldString<unsigned int>(&v27, (const void **)v11, (*((_DWORD *)this + 1082) >> 17) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "compileAsPic");
  _agcFieldString<unsigned int>(&v28, (const void **)v9, (*((_DWORD *)this + 1082) >> 18) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "doraEnabled");
  _agcFieldString<unsigned int>(&v29, (const void **)v7, (*((_DWORD *)this + 1082) >> 19) & 1);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v30, (const void **)__p, *((_DWORD *)this + 1082) >> 20);
  _agcGroupWithHeader(a2, (uint64_t)v21, (uint64_t)&v23, 8);
  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v30.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
}

BOOL AGCLLVMUserIntersectionShader::constructReply(AGCLLVMUserIntersectionShader *this)
{
  _BOOL8 v2;
  int v3;
  uint64_t v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  char *v14;
  char *v15;
  int v16;
  flatbuffers::FlatBufferBuilder *v17;
  int v18;
  const char *v19;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserIntersectionShader *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = *(_QWORD *)this;
    v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v6 = v5 + 2472;
    v5[2542] = 1;
    v7 = *((_DWORD *)v5 + 626) - *((_DWORD *)v5 + 630) + *((_DWORD *)v5 + 628);
    v8 = *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24) + 400);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 1272))(v8, *((_QWORD *)this + 548), 0, *((unsigned __int16 *)this + 2200), *((unsigned int *)this + 1094));
    v11 = v10;
    if (*((_DWORD *)this + 1083) >= 4u)
      v12 = 0;
    else
      v12 = *((_DWORD *)this + 1083);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 4, v9, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 6, v11, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 8, *((_QWORD *)this + 549), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v6, 18, *((_DWORD *)this + 1094));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 10, ((unint64_t)*((unsigned int *)this + 1082) >> 9) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v6, 12, ((unint64_t)*((unsigned int *)this + 1082) >> 12) & 7, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v6, 14, *((unsigned __int8 *)this + 12), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v6, 20, *((_BYTE *)this + 4401) & 1, 0);
    flatbuffers::FlatBufferBuilder::AddElement<signed char>(v6, 22, v12);
    v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v6, v7);
    v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v15 = v14 + 2472;
    v14[2542] = 1;
    v16 = *((_DWORD *)v14 + 626) - *((_DWORD *)v14 + 630) + *((_DWORD *)v14 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v14 + 2472, v3);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::IntersectionFunctionInfo>(v15, v13);
    v17 = (AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v18 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v15, v16);
    flatbuffers::FlatBufferBuilder::Finish(v17, v18, v19);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  }
  return v2;
}

void `non-virtual thunk to'AGCLLVMUserIntersectionShader::~AGCLLVMUserIntersectionShader(AGCLLVMUserIntersectionShader *this)
{
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserIntersectionShader *)((char *)this - 4320), (uint64_t *)off_1E7EB57D8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUserIntersectionShader *)((char *)this + 88));
}

{
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserIntersectionShader *)((char *)this - 4320), (uint64_t *)off_1E7EB57D8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUserIntersectionShader *)((char *)this + 88));
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMUserIntersectionShader::~AGCLLVMUserIntersectionShader(AGCLLVMUserIntersectionShader *this)
{
  uint64_t v1;

  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)), (uint64_t *)off_1E7EB57D8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4408));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7EB57D8);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4408));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMUserIntersectionShader::dumpType(AGCLLVMUserIntersectionShader *this)
{
  return "intersection-(user)";
}

uint64_t `virtual thunk to'AGCLLVMUserIntersectionShader::getShaderType(AGCLLVMUserIntersectionShader *this)
{
  return 29;
}

uint64_t `virtual thunk to'AGCLLVMUserIntersectionShader::getRelocModel(AGCLLVMUserIntersectionShader *this)
{
  return (*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88) + 4328) >> 18) & 1;
}

uint64_t `virtual thunk to'AGCLLVMUserIntersectionShader::getSupportExternalVisibleFunctions(AGCLLVMUserIntersectionShader *this)
{
  return *((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 120) + 4329) & 1;
}

void `virtual thunk to'AGCLLVMUserIntersectionShader::getCompilationKeyDescription(AGCLLVMUserIntersectionShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMUserIntersectionShader::getCompilationKeyDescription((AGCLLVMUserIntersectionShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMUserIntersectionShader::constructReply(AGCLLVMUserIntersectionShader *this)
{
  return AGCLLVMUserIntersectionShader::constructReply((AGCLLVMUserIntersectionShader *)((char *)this
                                                                                       + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t AGCLLVMUserIntersectionShader::unpackUserResult(AGCLLVMUserIntersectionShader *this, llvm::Value *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  unsigned int i;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  AGCLLVMUserIntersectionShader *v16;
  _BYTE v17[32];
  __int16 v18;
  unsigned int v19;

  v6 = llvm::ConstantInt::get();
  v7 = llvm::ConstantInt::get();
  result = llvm::ConstantFP::get();
  v9 = result;
  if (*(_BYTE *)(*(_QWORD *)a3 + 8) == 16)
  {
    v16 = this;
    v10 = *(_DWORD *)(*((_QWORD *)a2 + 9) + 8);
    v19 = 0;
    if (v10)
    {
      for (i = 0; i < v10; v19 = i)
      {
        v12 = *(_QWORD *)(*((_QWORD *)a2 + 9) - 8 * *(unsigned int *)(*((_QWORD *)a2 + 9) + 8) + 8 * i);
        if (isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8)), "air.accept_intersection"))
        {
          v13 = (char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 40;
          v18 = 257;
          result = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v13, a3, (uint64_t)&v19, 1, (uint64_t)v17);
          v7 = result;
        }
        else if (isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8)), "air.continue_search"))
        {
          v14 = (char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 40;
          v18 = 257;
          result = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v14, a3, (uint64_t)&v19, 1, (uint64_t)v17);
          v6 = result;
        }
        else
        {
          result = isStringMDNode(*(llvm::MDString **)(v12 - 8 * *(unsigned int *)(v12 + 8)), "air.distance");
          if ((_DWORD)result)
          {
            v15 = (char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 40;
            v18 = 257;
            result = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v15, a3, (uint64_t)&v19, 1, (uint64_t)v17);
            v9 = result;
          }
        }
        i = v19 + 1;
      }
    }
    a3 = v7;
    this = v16;
  }
  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v9;
  return result;
}

void AGCLLVMUserIntersectionShaderPass::~AGCLLVMUserIntersectionShaderPass(AGCLLVMUserIntersectionShaderPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMUserIntersectionShaderPass::getPassName(AGCLLVMUserIntersectionShaderPass *this)
{
  return "User Intersection Shader";
}

uint64_t llvm::Pass::doInitialization()
{
  return 0;
}

uint64_t llvm::Pass::doFinalization()
{
  return 0;
}

uint64_t AGCLLVMUserIntersectionShaderPass::getAnalysisUsage(AGCLLVMUserIntersectionShaderPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::addRequiredID(a2, AGCLLVMUserIntersectionShaderLoopShaderPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, MEMORY[0x1E0DE1110]);
  return llvm::AnalysisUsage::addRequiredID(a2, MEMORY[0x1E0DE12B8]);
}

uint64_t AGCLLVMUserIntersectionShaderPass::runOnFunction(AGCLLVMUserIntersectionShaderPass *this, llvm::Function *a2)
{
  llvm::Module *v4;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  unsigned __int8 *v7;
  llvm::Function *v8;
  llvm::Type *Context;
  llvm::LLVMContext *v12;
  llvm::LLVMContext *v13;
  uint64_t Int8Ty;
  llvm::LLVMContext *v15;
  llvm::LLVMContext *v16;
  char **v17;
  char **v18;
  char *v19;
  uint64_t v20;
  llvm::Instruction *v21;
  llvm::Value *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  int v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *Name;
  unint64_t v49;
  char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  llvm::BasicBlock *NearestCommonDominator;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  _QWORD *v71;
  const llvm::Instruction *v72;
  _QWORD *v73;
  const llvm::Instruction *v74;
  llvm::Instruction **v75;
  uint64_t v76;
  llvm::Instruction *v77;
  uint64_t v78;
  llvm::BasicBlock *v79;
  llvm::BasicBlock *v80;
  uint64_t v81;
  llvm::BasicBlock *v82;
  _QWORD *v83;
  _QWORD *v84;
  llvm::BasicBlock *v85;
  uint64_t v86;
  _QWORD *v87;
  llvm::BasicBlock *v88;
  llvm::Instruction *v89;
  _QWORD *v90;
  llvm::Instruction *v91;
  llvm::BasicBlock *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  llvm::Value *v96;
  _QWORD *v97;
  llvm::Instruction *v98;
  _QWORD *v99;
  llvm::Instruction *v100;
  uint64_t v101;
  uint64_t v102;
  llvm::Value *v103;
  _QWORD *v104;
  llvm::Instruction *v105;
  _QWORD *v106;
  llvm::Instruction *v107;
  uint64_t v108;
  uint64_t v109;
  llvm::Value *v110;
  llvm::Type *v111;
  llvm::User *v112;
  llvm::Type *v113;
  llvm::Value *NullValue;
  uint64_t v115;
  llvm::Instruction *v116;
  uint64_t v117;
  llvm::Instruction *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  llvm::User *PHI;
  llvm::Value *v124;
  llvm::User *v125;
  uint64_t v126;
  uint64_t v127;
  llvm::Value *v128;
  uint64_t Value;
  uint64_t Cast;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  llvm::BasicBlock *v134;
  llvm::BasicBlock *v135;
  _QWORD *v136;
  llvm::BasicBlock *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  llvm::Instruction *v141;
  _QWORD *v142;
  llvm::Instruction *v143;
  _QWORD *v144;
  llvm::Instruction *v145;
  _QWORD *v146;
  llvm::Instruction *v147;
  _QWORD *v148;
  llvm::Instruction *v149;
  _QWORD *v150;
  llvm::Instruction *v151;
  uint64_t v152;
  llvm::Instruction *v153;
  uint64_t v154;
  llvm::Instruction *v155;
  _QWORD *v156;
  llvm::Instruction *v157;
  _QWORD *v158;
  llvm::Instruction *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  llvm::Value *v163;
  llvm::User *v164;
  _QWORD *v165;
  llvm::Instruction *v166;
  _QWORD *v167;
  llvm::Instruction *v168;
  uint64_t v169;
  uint64_t v170;
  llvm::Value *v171;
  uint64_t v172;
  uint64_t v173;
  llvm::Value *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  llvm::Value *v178;
  llvm::User *v179;
  llvm::Value *v180;
  uint64_t v181;
  uint64_t v182;
  llvm::Value *v183;
  llvm::Value *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  llvm::Value *v189;
  llvm::PHINode *v190;
  uint64_t v191;
  llvm::BasicBlock *v192;
  llvm::Type *Int16Ty;
  llvm::Constant **v194;
  llvm::BasicBlock *v195;
  uint64_t v196;
  uint64_t Int1Ty;
  int v198;
  _QWORD v199[4];
  __int16 v200;
  _QWORD v201[4];
  __int16 v202;
  void *v203;
  uint64_t v204;
  _BYTE v205[64];
  void *v206[2];
  _WORD v207[16];
  llvm::BasicBlock *v208;
  _QWORD *v209;
  llvm::Type *v210;
  uint64_t *v211;
  _QWORD *v212;
  uint64_t v213;
  int v214;
  __int16 v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD v220[3];

  v220[1] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::Module *)*((_QWORD *)a2 + 5);
  v206[0] = "air.intersection";
  v207[8] = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v4, (const llvm::Twine *)v206);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v7 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8));
  if (!v7 || *v7 - 1 > 1)
    return 0;
  v8 = (llvm::Function *)*((_QWORD *)v7 + 16);
  if (v8 != a2 || *((_BYTE *)v8 + 16) != 0)
    return 0;
  Context = (llvm::Type *)llvm::Function::getContext(a2);
  Int1Ty = llvm::Type::getInt1Ty(Context, v12);
  Int8Ty = llvm::Type::getInt8Ty(Context, v13);
  Int16Ty = (llvm::Type *)llvm::Type::getInt16Ty(Context, v15);
  llvm::Type::getVoidTy(Context, v16);
  v206[0] = v207;
  v206[1] = (void *)0x200000000;
  v210 = Context;
  v211 = &v219;
  v212 = v220;
  v213 = 0;
  v214 = 0;
  v215 = 512;
  v216 = 7;
  v208 = 0;
  v209 = 0;
  v217 = 0;
  v218 = 0;
  v219 = MEMORY[0x1E0DE2A90] + 16;
  v220[0] = MEMORY[0x1E0DE2AC0] + 16;
  v17 = (char **)**((_QWORD **)this + 1);
  if (*v17 != AGCLLVMUserIntersectionShaderLoopShaderPass::ID)
  {
    v18 = v17 + 2;
    do
    {
      v19 = *v18;
      v18 += 2;
    }
    while (v19 != AGCLLVMUserIntersectionShaderLoopShaderPass::ID);
    v17 = v18 - 2;
  }
  v20 = (*(uint64_t (**)(char *, char *))(*(_QWORD *)v17[1] + 96))(v17[1], AGCLLVMUserIntersectionShaderLoopShaderPass::ID);
  v22 = *(llvm::Value **)(v20 + 40);
  v21 = *(llvm::Instruction **)(v20 + 48);
  v195 = (llvm::BasicBlock *)*((_QWORD *)v21 + 5);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v206, v21);
  v194 = (llvm::Constant **)v22;
  llvm::IRBuilderBase::CreateRet((llvm::IRBuilderBase *)v206, v22);
  llvm::Instruction::eraseFromParent(v21);
  v23 = (uint64_t *)**((_QWORD **)this + 1);
  v192 = (llvm::BasicBlock *)Int8Ty;
  if (*v23 != MEMORY[0x1E0DE1110])
  {
    v24 = v23 + 2;
    do
    {
      v25 = *v24;
      v24 += 2;
    }
    while (v25 != MEMORY[0x1E0DE1110]);
    v23 = v24 - 2;
  }
  v26 = *(_QWORD *)((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v23[1] + 96))(v23[1], MEMORY[0x1E0DE1110])
                  + 32);
  v203 = v205;
  v204 = 0x800000000;
  v27 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (v27 == (_QWORD *)((char *)a2 + 72))
  {
    v40 = v205;
    goto LABEL_89;
  }
  do
  {
    if (v27)
      v28 = v27 - 3;
    else
      v28 = 0;
    v29 = *(_QWORD *)(v26 + 48);
    v30 = *(unsigned int *)(v26 + 64);
    if (!(_DWORD)v30)
      goto LABEL_26;
    LODWORD(v31) = ((v28 >> 4) ^ (v28 >> 9)) & (v30 - 1);
    v32 = (_QWORD *)(v29 + 16 * v31);
    v33 = (_QWORD *)*v32;
    if (v28 != (_QWORD *)*v32)
    {
      v34 = 1;
      while (v33 != (_QWORD *)-4096)
      {
        v35 = v31 + v34++;
        v31 = v35 & (v30 - 1);
        v33 = *(_QWORD **)(v29 + 16 * v31);
        if (v28 == v33)
        {
          v32 = (_QWORD *)(v29 + 16 * v31);
          goto LABEL_27;
        }
      }
LABEL_26:
      v32 = (_QWORD *)(v29 + 16 * v30);
    }
LABEL_27:
    if ((_QWORD *)(v29 + 16 * v30) != v32)
    {
      v36 = v32[1];
      if (v36)
      {
        for (i = *(_QWORD *)(v36 + 8); i != v36; i = *(_QWORD *)(i + 8))
        {
          v38 = i - 32;
          if (!i)
            v38 = 0;
          v39 = *(unsigned __int8 *)(v38 + 16);
          if (i && v39 == 25)
          {
            if (*(_QWORD *)(v26 + 96) != *(_QWORD *)(v38 - 32))
              goto LABEL_39;
          }
          else if (i && v39 == 26)
          {
LABEL_39:
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v203, *(_QWORD *)(v38 + 72));
            continue;
          }
        }
      }
    }
    v27 = (_QWORD *)v27[1];
  }
  while (v27 != (_QWORD *)((char *)a2 + 72));
  v40 = (char *)v203;
  v41 = (char *)v203 + 8 * v204;
  if ((_DWORD)v204)
  {
    v42 = 8 * v204;
    do
    {
      v43 = *(_QWORD *)v40;
      v44 = *(unsigned __int8 *)(*(_QWORD *)v40 + 16);
      if (*(_QWORD *)v40 && v44 == 60 || v43 && v44 == 61)
      {
        v45 = **(_QWORD **)(v43 - 32);
        v46 = *(_DWORD *)(v45 + 8);
        if ((v46 & 0xFE) == 0x12)
          v46 = *(_DWORD *)(**(_QWORD **)(v45 + 16) + 8);
        if (v46 < 0x100)
          goto LABEL_64;
      }
      else if (v43)
      {
        if (v44 == 84)
        {
          v47 = *(_QWORD *)(v43 - 32);
          if (v47)
          {
            if (!*(_BYTE *)(v47 + 16) && *(_QWORD *)(v47 + 24) == *(_QWORD *)(v43 + 72))
            {
              Name = (_QWORD *)llvm::Value::getName((llvm::Value *)v47);
              if (v49 >= 0xE && *Name == 0x66696C2E6D766C6CLL && *(_QWORD *)((char *)Name + 6) == 0x2E656D6974656669)
                goto LABEL_64;
            }
          }
        }
      }
      v40 += 8;
      v42 -= 8;
    }
    while (v42);
    v40 = v41;
    goto LABEL_89;
  }
LABEL_64:
  if (v40 != v41)
  {
    v51 = v40 + 8;
    if (v40 + 8 != v41)
    {
      while (2)
      {
        v52 = *(_QWORD *)v51;
        v53 = *(unsigned __int8 *)(*(_QWORD *)v51 + 16);
        if (*(_QWORD *)v51 && v53 == 60 || v52 && v53 == 61)
        {
          v54 = **(_QWORD **)(v52 - 32);
          v55 = *(_DWORD *)(v54 + 8);
          if ((v55 & 0xFE) == 0x12)
            v55 = *(_DWORD *)(**(_QWORD **)(v54 + 16) + 8);
          if (v55 >= 0x100)
          {
LABEL_73:
            *(_QWORD *)v40 = *(_QWORD *)v51;
            v40 += 8;
          }
        }
        else
        {
          if (!v52)
            goto LABEL_73;
          if (v53 != 84)
            goto LABEL_73;
          v56 = *(_QWORD *)(v52 - 32);
          if (!v56)
            goto LABEL_73;
          if (*(_BYTE *)(v56 + 16))
            goto LABEL_73;
          if (*(_QWORD *)(v56 + 24) != *(_QWORD *)(v52 + 72))
            goto LABEL_73;
          v57 = (_QWORD *)llvm::Value::getName((llvm::Value *)v56);
          if (v58 < 0xE)
            goto LABEL_73;
          if (*v57 != 0x66696C2E6D766C6CLL || *(_QWORD *)((char *)v57 + 6) != 0x2E656D6974656669)
            goto LABEL_73;
        }
        v51 += 8;
        if (v51 == v41)
          break;
        continue;
      }
    }
  }
LABEL_89:
  LODWORD(v204) = (unint64_t)(v40 - (_BYTE *)v203) >> 3;
  v60 = (uint64_t *)**((_QWORD **)this + 1);
  if (*v60 != MEMORY[0x1E0DE12B8])
  {
    v61 = v60 + 2;
    do
    {
      v62 = *v61;
      v61 += 2;
    }
    while (v62 != MEMORY[0x1E0DE12B8]);
    v60 = v61 - 2;
  }
  v63 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v60[1] + 96))(v60[1], MEMORY[0x1E0DE12B8]);
  if ((_DWORD)v204)
  {
    v64 = v63;
    v65 = (char *)v203;
    v66 = 8 * v204;
    NearestCommonDominator = v195;
    do
    {
      v68 = *(_QWORD *)(v64 + 56);
      v69 = *(unsigned int *)(v64 + 72);
      v70 = llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::find(v68, *(_DWORD *)(v64 + 72), *(_QWORD *)(*(_QWORD *)v65 + 40));
      if ((uint64_t *)(v68 + 16 * v69) != v70 && v70[1])
        NearestCommonDominator = (llvm::BasicBlock *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator();
      v65 += 8;
      v66 -= 8;
    }
    while (v66);
  }
  else
  {
    NearestCommonDominator = v195;
  }
  v71 = (_QWORD *)*((_QWORD *)NearestCommonDominator + 5);
  if (v71 == (_QWORD *)((char *)NearestCommonDominator + 40))
  {
    v74 = 0;
  }
  else
  {
    v72 = (const llvm::Instruction *)(v71 - 3);
    if (v71)
      v73 = v71 - 3;
    else
      v73 = 0;
    if (*((unsigned __int8 *)v73 + 16) - 29 >= 0xB)
      v74 = 0;
    else
      v74 = v72;
  }
  if ((_DWORD)v204)
  {
    v75 = (llvm::Instruction **)v203;
    v76 = 8 * v204;
    do
    {
      v77 = *v75;
      if (*((llvm::BasicBlock **)*v75 + 5) == NearestCommonDominator
        && llvm::Instruction::comesBefore(*v75, v74))
      {
        v74 = v77;
      }
      ++v75;
      v76 -= 8;
    }
    while (v76);
  }
  v201[0] = "loop_start";
  v202 = 259;
  v78 = llvm::BasicBlock::splitBasicBlock();
  v79 = (llvm::BasicBlock *)v78;
  if (v195 == NearestCommonDominator)
    v80 = (llvm::BasicBlock *)v78;
  else
    v80 = v195;
  v81 = *((_QWORD *)a2 + 10);
  if (v81)
    v82 = (llvm::BasicBlock *)(v81 - 24);
  else
    v82 = 0;
  v83 = (_QWORD *)((char *)v82 + 40);
  v201[0] = "user_start";
  v202 = 259;
  v196 = llvm::BasicBlock::splitBasicBlock();
  if ((_DWORD)v204 && !*((_BYTE *)this + 30))
  {
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v206, v196, *(_QWORD *)(v196 + 48));
    v202 = 257;
    PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v206, Int16Ty, 2, (const llvm::Twine *)v201);
    v124 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::PHINode::addIncoming(PHI, v124, v82);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v206, (uint64_t)v79, *((_QWORD *)v79 + 6));
    v202 = 257;
    v125 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v206, Int16Ty, 2, (const llvm::Twine *)v201);
    llvm::PHINode::addIncoming(v125, PHI, NearestCommonDominator);
    v201[0] = v192;
    v201[1] = v192;
    llvm::StructType::get();
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v127 = v126;
    v189 = v125;
    v190 = PHI;
    if (v126)
      v126 = *(_QWORD *)(v126 + 24);
    v202 = 257;
    v128 = llvm::IRBuilderBase::CreateCall((uint64_t)v206, v126, v127, 0, 0, (uint64_t)v201);
    v198 = 0;
    v202 = 257;
    Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v206, (uint64_t)v128, (uint64_t)&v198, 1, (uint64_t)v201);
    v200 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v206, 38, Value, Int1Ty, (uint64_t)v199);
    v198 = 1;
    v202 = 257;
    v131 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v206, (uint64_t)v128, (uint64_t)&v198, 1, (uint64_t)v201);
    v200 = 257;
    v132 = llvm::IRBuilderBase::CreateCast((uint64_t)v206, 38, v131, Int1Ty, (uint64_t)v199);
    v201[0] = "loop_body";
    v202 = 259;
    v133 = llvm::BasicBlock::splitBasicBlock();
    if (v80 == v79)
      v134 = (llvm::BasicBlock *)v133;
    else
      v134 = v80;
    v184 = (llvm::Value *)v132;
    v185 = v133;
    v186 = (_QWORD *)((char *)v134 + 40);
    v201[0] = "loop_end";
    v202 = 259;
    v135 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    v136 = (_QWORD *)((char *)v135 + 40);
    v187 = Cast;
    v201[0] = "outer_loop_end";
    v202 = 259;
    v137 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    v138 = (_QWORD *)((char *)v137 + 40);
    v201[0] = "return";
    v202 = 259;
    v139 = llvm::BasicBlock::splitBasicBlock();
    v140 = (_QWORD *)*((_QWORD *)v79 + 5);
    if (v140 == (_QWORD *)((char *)v79 + 40))
    {
      v143 = 0;
    }
    else
    {
      v141 = (llvm::Instruction *)(v140 - 3);
      if (v140)
        v142 = v140 - 3;
      else
        v142 = 0;
      if (*((unsigned __int8 *)v142 + 16) - 29 >= 0xB)
        v143 = 0;
      else
        v143 = v141;
    }
    llvm::Instruction::eraseFromParent(v143);
    v144 = (_QWORD *)*v136;
    if ((_QWORD *)*v136 == v136)
    {
      v147 = 0;
    }
    else
    {
      v145 = (llvm::Instruction *)(v144 - 3);
      if (v144)
        v146 = v144 - 3;
      else
        v146 = 0;
      if (*((unsigned __int8 *)v146 + 16) - 29 >= 0xB)
        v147 = 0;
      else
        v147 = v145;
    }
    llvm::Instruction::eraseFromParent(v147);
    v148 = (_QWORD *)*v138;
    if ((_QWORD *)*v138 == v138)
    {
      v151 = 0;
    }
    else
    {
      v149 = (llvm::Instruction *)(v148 - 3);
      if (v148)
        v150 = v148 - 3;
      else
        v150 = 0;
      if (*((unsigned __int8 *)v150 + 16) - 29 >= 0xB)
        v151 = 0;
      else
        v151 = v149;
    }
    llvm::Instruction::eraseFromParent(v151);
    v152 = *(_QWORD *)(v139 + 40);
    v188 = v139 + 40;
    if (v152 == v139 + 40)
    {
      v155 = 0;
    }
    else
    {
      v153 = (llvm::Instruction *)(v152 - 24);
      if (v152)
        v154 = v152 - 24;
      else
        v154 = 0;
      if (*(unsigned __int8 *)(v154 + 16) - 29 >= 0xB)
        v155 = 0;
      else
        v155 = v153;
    }
    llvm::Instruction::eraseFromParent(v155);
    v156 = (_QWORD *)*v83;
    if ((_QWORD *)*v83 == v83)
    {
      v159 = 0;
    }
    else
    {
      v157 = (llvm::Instruction *)(v156 - 3);
      if (v156)
        v158 = v156 - 3;
      else
        v158 = 0;
      if (*((unsigned __int8 *)v158 + 16) - 29 >= 0xB)
        v159 = 0;
      else
        v159 = v157;
    }
    llvm::Instruction::eraseFromParent(v159);
    v208 = v82;
    v209 = (_QWORD *)((char *)v82 + 40);
    v201[0] = Int1Ty;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v161 = v160;
    v191 = v139;
    if (v160)
      v162 = *(_QWORD *)(v160 + 24);
    else
      v162 = 0;
    v199[0] = llvm::ConstantInt::get();
    v202 = 257;
    v163 = llvm::IRBuilderBase::CreateCall((uint64_t)v206, v162, v161, (uint64_t)v199, 1, (uint64_t)v201);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v206, (uint64_t)v163, v196, v191);
    v208 = v79;
    v209 = (_QWORD *)((char *)v79 + 40);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v206, v187, v185, (uint64_t)v135);
    v208 = v135;
    v209 = (_QWORD *)((char *)v135 + 40);
    v202 = 257;
    v164 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v206, Int16Ty, 2, (const llvm::Twine *)v201);
    llvm::PHINode::addIncoming(v164, v189, v79);
    llvm::PHINode::addIncoming(v189, v164, v135);
    llvm::PHINode::addIncoming(v190, v164, v137);
    v165 = (_QWORD *)*v186;
    if ((_QWORD *)*v186 == v186)
    {
      v168 = 0;
    }
    else
    {
      v166 = (llvm::Instruction *)(v165 - 3);
      if (v165)
        v167 = v165 - 3;
      else
        v167 = 0;
      if (*((unsigned __int8 *)v167 + 16) - 29 >= 0xB)
        v168 = 0;
      else
        v168 = v166;
    }
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v206, v168);
    v201[0] = *v194;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v170 = v169;
    if (v169)
      v169 = *(_QWORD *)(v169 + 24);
    v199[0] = v194;
    v202 = 257;
    v171 = llvm::IRBuilderBase::CreateCall((uint64_t)v206, v169, v170, (uint64_t)v199, 1, (uint64_t)v201);
    llvm::PHINode::addIncoming(v164, v171, v134);
    v208 = v135;
    v209 = (_QWORD *)((char *)v135 + 40);
    v201[0] = Int16Ty;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v173 = v172;
    if (v172)
      v172 = *(_QWORD *)(v172 + 24);
    v199[0] = v164;
    v202 = 257;
    v174 = llvm::IRBuilderBase::CreateCall((uint64_t)v206, v172, v173, (uint64_t)v199, 1, (uint64_t)v201);
    v202 = 257;
    v175 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v206, v184, v174, (const llvm::Twine *)v201);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v206, v175, (uint64_t)v137, (uint64_t)v79);
    v208 = v137;
    v209 = (_QWORD *)((char *)v137 + 40);
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v177 = v176;
    if (v176)
      v176 = *(_QWORD *)(v176 + 24);
    v202 = 257;
    v178 = llvm::IRBuilderBase::CreateCall((uint64_t)v206, v176, v177, 0, 0, (uint64_t)v201);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v206, (uint64_t)v178, v196, v191);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v206, v191, *(_QWORD *)(v191 + 48));
    v202 = 257;
    v179 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v206, Int16Ty, 2, (const llvm::Twine *)v201);
    llvm::PHINode::addIncoming(v179, v164, v137);
    v180 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::PHINode::addIncoming(v179, v180, v82);
    v208 = (llvm::BasicBlock *)v191;
    v209 = (_QWORD *)v188;
    v201[0] = Int16Ty;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v182 = v181;
    if (v181)
      v181 = *(_QWORD *)(v181 + 24);
    v199[0] = v179;
    v202 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v206, v181, v182, (uint64_t)v199, 1, (uint64_t)v201);
    v183 = (llvm::Value *)llvm::UndefValue::get();
    llvm::IRBuilderBase::CreateRet((llvm::IRBuilderBase *)v206, v183);
  }
  else
  {
    v84 = (_QWORD *)((char *)v80 + 40);
    v85 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    v202 = 257;
    v86 = llvm::BasicBlock::splitBasicBlock();
    v87 = (_QWORD *)*v83;
    v88 = v82;
    if ((_QWORD *)*v83 == v83)
    {
      v91 = 0;
    }
    else
    {
      v89 = (llvm::Instruction *)(v87 - 3);
      if (v87)
        v90 = v87 - 3;
      else
        v90 = 0;
      if (*((unsigned __int8 *)v90 + 16) - 29 >= 0xB)
        v91 = 0;
      else
        v91 = v89;
    }
    v92 = v80;
    llvm::Instruction::eraseFromParent(v91);
    v208 = v88;
    v209 = v83;
    v201[0] = Int1Ty;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v94 = v93;
    if (v93)
      v95 = *(_QWORD *)(v93 + 24);
    else
      v95 = 0;
    v199[0] = llvm::ConstantInt::get();
    v202 = 257;
    v96 = llvm::IRBuilderBase::CreateCall((uint64_t)v206, v95, v94, (uint64_t)v199, 1, (uint64_t)v201);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v206, (uint64_t)v96, v196, v86);
    v97 = (_QWORD *)*v84;
    if ((_QWORD *)*v84 == v84)
    {
      v100 = 0;
    }
    else
    {
      v98 = (llvm::Instruction *)(v97 - 3);
      if (v97)
        v99 = v97 - 3;
      else
        v99 = 0;
      if (*((unsigned __int8 *)v99 + 16) - 29 >= 0xB)
        v100 = 0;
      else
        v100 = v98;
    }
    llvm::Instruction::eraseFromParent(v100);
    v208 = v92;
    v209 = v84;
    v201[0] = *v194;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v102 = v101;
    if (v101)
      v101 = *(_QWORD *)(v101 + 24);
    v199[0] = v194;
    v202 = 257;
    v103 = llvm::IRBuilderBase::CreateCall((uint64_t)v206, v101, v102, (uint64_t)v199, 1, (uint64_t)v201);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v206, (uint64_t)v103, v86, (uint64_t)v85);
    v104 = (_QWORD *)*((_QWORD *)v85 + 5);
    if (v104 == (_QWORD *)((char *)v85 + 40))
    {
      v107 = 0;
    }
    else
    {
      v105 = (llvm::Instruction *)(v104 - 3);
      if (v104)
        v106 = v104 - 3;
      else
        v106 = 0;
      if (*((unsigned __int8 *)v106 + 16) - 29 >= 0xB)
        v107 = 0;
      else
        v107 = v105;
    }
    llvm::Instruction::eraseFromParent(v107);
    v208 = v85;
    v209 = (_QWORD *)((char *)v85 + 40);
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v109 = v108;
    if (v108)
      v108 = *(_QWORD *)(v108 + 24);
    v202 = 257;
    v110 = llvm::IRBuilderBase::CreateCall((uint64_t)v206, v108, v109, 0, 0, (uint64_t)v201);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v206, (uint64_t)v110, v196, v86);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v206, v86, *(_QWORD *)(v86 + 48));
    v111 = *v194;
    v202 = 257;
    v112 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)v206, v111, 3, (const llvm::Twine *)v201);
    NullValue = (llvm::Value *)llvm::Constant::getNullValue(*v194, v113);
    llvm::PHINode::addIncoming(v112, NullValue, v88);
    llvm::PHINode::addIncoming(v112, (llvm::Value *)v194, v92);
    llvm::PHINode::addIncoming(v112, (llvm::Value *)v194, v85);
    v115 = *(_QWORD *)(v86 + 40);
    if (v115 == v86 + 40)
    {
      v118 = 0;
    }
    else
    {
      v116 = (llvm::Instruction *)(v115 - 24);
      if (v115)
        v117 = v115 - 24;
      else
        v117 = 0;
      if (*(unsigned __int8 *)(v117 + 16) - 29 >= 0xB)
        v118 = 0;
      else
        v118 = v116;
    }
    llvm::Instruction::eraseFromParent(v118);
    v208 = (llvm::BasicBlock *)v86;
    v209 = (_QWORD *)(v86 + 40);
    v201[0] = *(_QWORD *)v112;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v120 = v119;
    if (v119)
      v119 = *(_QWORD *)(v119 + 24);
    v199[0] = v112;
    v202 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v206, v119, v120, (uint64_t)v199, 1, (uint64_t)v201);
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v122 = v121;
    if (v121)
      v121 = *(_QWORD *)(v121 + 24);
    v202 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v206, v121, v122, 0, 0, (uint64_t)v201);
    llvm::IRBuilderBase::CreateRet((llvm::IRBuilderBase *)v206, v112);
  }
  if (v203 != v205)
    free(v203);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v220);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v219);
  if (v206[0] != v207)
    free(v206[0]);
  return 1;
}

void AGCLLVMUserIntersectionShaderLoopShaderPass::~AGCLLVMUserIntersectionShaderLoopShaderPass(AGCLLVMUserIntersectionShaderLoopShaderPass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMUserIntersectionShaderLoopShaderPass::getPassName(AGCLLVMUserIntersectionShaderLoopShaderPass *this)
{
  return "User Intersection Shader Loop";
}

uint64_t AGCLLVMUserIntersectionShaderLoopShaderPass::getAnalysisUsage(AGCLLVMUserIntersectionShaderLoopShaderPass *this, llvm::AnalysisUsage *a2)
{
  return llvm::AnalysisUsage::addRequiredID(a2, MEMORY[0x1E0DE1548]);
}

uint64_t AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(AGCLLVMUserIntersectionShaderLoopShaderPass *this, llvm::Function *a2)
{
  llvm::Module *v4;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  unsigned __int8 *v7;
  llvm::Function *v8;
  llvm::Type *Context;
  llvm::LLVMContext *v12;
  char *v13;
  uint64_t v14;
  llvm::BasicBlock *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  llvm::Instruction *v25;
  uint64_t v26;
  llvm::Instruction *v27;
  _QWORD *i;
  _QWORD *v29;
  int v30;
  void *Int32Ty;
  llvm::BasicBlock *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  llvm::MDString *v41;
  size_t v42;
  uint64_t String;
  void *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint8x8_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  unint64_t v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type size;
  std::string *v62;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  llvm::BasicBlock *v68;
  llvm::Instruction *FirstNonPHI;
  uint64_t v70;
  uint64_t v71;
  llvm::BasicBlock *v72;
  AGCLLVMUserIntersectionShaderLoopShaderPass *v73;
  void *v74;
  llvm::BasicBlock *v75;
  std::string v76;
  std::string v77;
  std::string v78;
  void *__p[2];
  std::string::size_type v80;
  int v81;
  uint64_t v82[3];
  int v83;
  uint64_t v84[3];
  int v85;
  uint64_t v86[3];
  int v87;
  uint64_t v88[3];
  int v89;
  uint64_t v90[3];
  int v91;
  uint64_t v92[3];
  int v93;
  uint64_t v94[3];
  int v95;
  uint64_t v96[3];
  int v97;
  uint64_t v98[3];
  int v99;
  uint64_t v100[3];
  int v101;
  uint64_t v102[3];
  int v103;
  uint64_t v104[3];
  int v105;
  uint64_t v106[3];
  int v107;
  uint64_t v108[3];
  int v109;
  uint64_t v110[3];
  int v111;
  uint64_t v112[3];
  int v113;
  uint64_t v114[3];
  int v115;
  uint64_t v116[3];
  int v117;
  uint64_t v118[3];
  int v119;
  uint64_t v120[3];
  int v121;
  uint64_t v122[3];
  int v123;
  uint64_t v124[3];
  int v125;
  uint64_t v126[3];
  int v127;
  uint64_t v128[3];
  int v129;
  uint64_t v130[3];
  int v131;
  uint64_t v132[3];
  int v133;
  uint64_t v134[3];
  int v135;
  void *v136[2];
  _QWORD v137[10];
  int v138;
  __int16 v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[3];

  v144[1] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::Module *)*((_QWORD *)a2 + 5);
  __p[0] = "air.intersection";
  LOWORD(v82[0]) = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v4, (const llvm::Twine *)__p);
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v7 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8));
  if (!v7 || *v7 - 1 > 1)
    return 0;
  v8 = (llvm::Function *)*((_QWORD *)v7 + 16);
  if (v8 != a2 || *((_BYTE *)v8 + 16) != 0)
    return 0;
  Context = (llvm::Type *)llvm::Function::getContext(a2);
  v136[0] = v137;
  v136[1] = (void *)0x200000000;
  v137[6] = Context;
  v137[7] = &v143;
  v137[8] = v144;
  v137[9] = 0;
  v138 = 0;
  v139 = 512;
  v140 = 7;
  v137[4] = 0;
  v137[5] = 0;
  v143 = MEMORY[0x1E0DE2A90] + 16;
  v144[0] = MEMORY[0x1E0DE2AC0] + 16;
  v13 = (char *)a2 + 72;
  v14 = *((_QWORD *)a2 + 10);
  v15 = (llvm::BasicBlock *)(v14 - 24);
  if (!v14)
    v15 = 0;
  v75 = v15;
  v141 = 0;
  v142 = 0;
  if ((char *)v14 == v13)
  {
    v16 = 0;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = v14 - 24;
      if (!v14)
        v17 = 0;
      v18 = *(_QWORD *)(v17 + 40);
      v19 = v18 - 24;
      if (v18)
        v20 = v18 - 24;
      else
        v20 = 0;
      if (*(unsigned __int8 *)(v20 + 16) - 29 >= 0xB)
        v21 = 0;
      else
        v21 = v19;
      v22 = *(unsigned __int8 *)(v21 + 16);
      if (v16)
        v23 = 0;
      else
        v23 = v22 == 29;
      if (v23)
        v16 = v17;
      v14 = *(_QWORD *)(v14 + 8);
    }
    while ((char *)v14 != v13);
  }
  v24 = *(_QWORD *)(v16 + 40);
  if (v24 == v16 + 40)
  {
    v27 = 0;
  }
  else
  {
    v25 = (llvm::Instruction *)(v24 - 24);
    if (v24)
      v26 = v24 - 24;
    else
      v26 = 0;
    if (*(unsigned __int8 *)(v26 + 16) - 29 >= 0xB)
      v27 = 0;
    else
      v27 = v25;
  }
  v73 = this;
  for (i = (_QWORD *)*((_QWORD *)v75 + 6); i != (_QWORD *)((char *)v75 + 40); i = (_QWORD *)i[1])
  {
    if (i)
      v29 = i - 3;
    else
      v29 = 0;
    v30 = *((unsigned __int8 *)v29 + 16);
    if (v30 != 83 && v30 != 59)
      break;
  }
  Int32Ty = (void *)llvm::Type::getInt32Ty(Context, v12);
  LOWORD(v82[0]) = 257;
  v32 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v33 = *((_DWORD *)v27 + 5) & 0x7FFFFFF;
  if ((_DWORD)v33)
    v34 = *((_QWORD *)v27 - 4 * v33);
  else
    v34 = 0;
  *((_QWORD *)this + 5) = v34;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v136, v27);
  v72 = v32;
  *((_QWORD *)this + 6) = llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)v136, v32);
  llvm::Instruction::eraseFromParent(v27);
  v35 = llvm::Function::args(a2);
  if (v35 == v36)
    goto LABEL_119;
  v37 = v35;
  v38 = v36;
  v74 = Int32Ty;
  do
  {
    if (!*(_QWORD *)(v37 + 8))
      goto LABEL_110;
    v39 = *(_QWORD *)(**((_QWORD **)this + 4) + 8 * *(unsigned int *)(v37 + 32));
    if ((v40 & 1) == 0
    {
      std::string::basic_string[abi:nn180100]<0>(__p, "air.origin");
      v81 = 0;
      std::string::basic_string[abi:nn180100]<0>(v82, "air.direction");
      v83 = 1;
      std::string::basic_string[abi:nn180100]<0>(v84, "air.min_distance");
      v85 = 2;
      std::string::basic_string[abi:nn180100]<0>(v86, "air.max_distance");
      v87 = 3;
      std::string::basic_string[abi:nn180100]<0>(v88, "air.geometry_id");
      v89 = 4;
      std::string::basic_string[abi:nn180100]<0>(v90, "air.primitive_id");
      v91 = 5;
      std::string::basic_string[abi:nn180100]<0>(v92, "air.instance_id");
      v93 = 7;
      std::string::basic_string[abi:nn180100]<0>(v94, "air.instance_id_count");
      v95 = 6;
      std::string::basic_string[abi:nn180100]<0>(v96, "air.user_instance_id");
      v97 = 8;
      std::string::basic_string[abi:nn180100]<0>(v98, "air.user_instance_id_count");
      v99 = 6;
      std::string::basic_string[abi:nn180100]<0>(v100, "air.world_space_origin");
      v101 = 9;
      std::string::basic_string[abi:nn180100]<0>(v102, "air.world_space_direction");
      v103 = 10;
      std::string::basic_string[abi:nn180100]<0>(v104, "air.barycentric_coord");
      v105 = 11;
      std::string::basic_string[abi:nn180100]<0>(v106, "air.front_facing");
      v107 = 12;
      std::string::basic_string[abi:nn180100]<0>(v108, "air.distance");
      v109 = 13;
      std::string::basic_string[abi:nn180100]<0>(v110, "air.curve_parameter");
      v111 = 14;
      std::string::basic_string[abi:nn180100]<0>(v112, "air.opaque_primitive");
      v113 = 15;
      std::string::basic_string[abi:nn180100]<0>(v114, "air.instance_intersection_function_table_offset");
      v115 = 16;
      std::string::basic_string[abi:nn180100]<0>(v116, "air.geometry_intersection_function_table_offset");
      v117 = 17;
      std::string::basic_string[abi:nn180100]<0>(v118, "air.object_to_world_transform");
      v119 = 20;
      std::string::basic_string[abi:nn180100]<0>(v120, "air.world_to_object_transform");
      v121 = 19;
      std::string::basic_string[abi:nn180100]<0>(v122, "air.time");
      v123 = 21;
      std::string::basic_string[abi:nn180100]<0>(v124, "air.key_frame_count");
      v125 = 22;
      std::string::basic_string[abi:nn180100]<0>(v126, "air.motion_start_time");
      v127 = 23;
      std::string::basic_string[abi:nn180100]<0>(v128, "air.motion_end_time");
      v129 = 24;
      std::string::basic_string[abi:nn180100]<0>(v130, "air.primitive_data");
      v131 = 25;
      std::string::basic_string[abi:nn180100]<0>(v132, "air.user_data_buffer");
      v133 = 26;
      std::string::basic_string[abi:nn180100]<0>(v134, "air.function_id");
      v71 = 0;
      v135 = 27;
      AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments = 0u;
      *(_OWORD *)&qword_1EF8E9770 = 0u;
      dword_1EF8E9780 = 1065353216;
      do
      {
        std::__hash_table<std::__hash_value_type<std::string,IntersectionShaderArgument>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,IntersectionShaderArgument>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,IntersectionShaderArgument>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,IntersectionShaderArgument>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,IntersectionShaderArgument> const&>((uint64_t)&__p[v71], (uint64_t)&__p[v71]);
        v71 += 4;
      }
      while (v71 != 112);
      do
      {
        if (SHIBYTE(v78.__r_.__value_.__r.__words[v71 + 2]) < 0)
          operator delete(*(void **)((char *)&v78.__r_.__value_.__l.__data_ + v71 * 8));
        v71 -= 4;
      }
      while (v71 * 8);
      __cxa_atexit((void (*)(void *))std::unordered_map<std::string,IntersectionShaderArgument>::~unordered_map[abi:nn180100], &AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments, &dword_1C3C54000);
      this = v73;
      Int32Ty = v74;
    }
    v41 = *(llvm::MDString **)(v39 - 8 * *(unsigned int *)(v39 + 8) + 8);
    if (*(_BYTE *)v41)
      goto LABEL_110;
    String = llvm::MDString::getString(v41);
    if (String)
    {
      std::string::basic_string[abi:nn180100](__p, (void *)String, v42);
      String = HIBYTE(v80);
      v45 = (uint64_t *)__p[0];
      v44 = __p[1];
    }
    else
    {
      v44 = 0;
      v45 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v80 = 0;
    }
    v46 = (char)String;
    if ((String & 0x80u) == 0)
      v47 = (uint64_t *)__p;
    else
      v47 = v45;
    if ((String & 0x80u) == 0)
      v48 = String;
    else
      v48 = (unint64_t)v44;
    v49 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v47, v48);
    v50 = *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
    if (!*((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1))
    {
      v55 = 0;
      if (v46 < 0)
        goto LABEL_83;
      goto LABEL_84;
    }
    v51 = v49;
    v52 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                         + 8));
    v52.i16[0] = vaddlv_u8(v52);
    v53 = v52.u32[0];
    if (v52.u32[0] > 1uLL)
    {
      v54 = v49;
      if (v49 >= *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                  + 1))
        v54 = v49
            % *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
    }
    else
    {
      v54 = (*((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1)
           - 1) & v49;
    }
    v56 = *(uint64_t ***)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                       + 8 * v54);
    if (!v56)
    {
      v55 = 0;
      goto LABEL_82;
    }
    v55 = *v56;
    if (!*v56)
      goto LABEL_82;
    while (1)
    {
      v57 = v55[1];
      if (v51 == v57)
      {
        if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v55 + 16, (unsigned __int8 *)__p))
          goto LABEL_81;
        goto LABEL_77;
      }
      if (v53 > 1)
      {
        if (v57 >= v50)
          v57 %= v50;
      }
      else
      {
        v57 &= v50 - 1;
      }
      if (v57 != v54)
        break;
LABEL_77:
      v55 = (uint64_t *)*v55;
      if (!v55)
        goto LABEL_81;
    }
    v55 = 0;
LABEL_81:
    this = v73;
LABEL_82:
    Int32Ty = v74;
    if (v46 < 0)
LABEL_83:
      operator delete(v45);
LABEL_84:
    if (v55)
    {
      __p[0] = Int32Ty;
      llvm::FunctionType::get();
      std::string::basic_string[abi:nn180100]<0>(&v77, "agx.rt.argument");
      v58 = std::string::append(&v77, ".");
      v59 = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v76, *(_DWORD *)(v37 + 32));
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &v76;
      else
        v60 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
      else
        size = v76.__r_.__value_.__l.__size_;
      v62 = std::string::append(&v78, (const std::string::value_type *)v60, size);
      v63 = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v80 = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      llvm::Module::getOrInsertFunction();
      v65 = v64;
      if (SHIBYTE(v80) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      v66 = *((_DWORD *)v55 + 10);
      if (v66 > 0x1B)
      {
LABEL_102:
        v68 = v75;
      }
      else
      {
        v67 = 1 << v66;
        if ((v67 & 0xDFB87D7) != 0)
        {
          llvm::Function::addFnAttr();
          llvm::Function::addFnAttr();
          goto LABEL_102;
        }
        if ((v67 & 0x2007820) != 0)
          llvm::Function::addFnAttr();
        v68 = v72;
      }
      FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v68);
      llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v136, FirstNonPHI);
      if (v65)
        v70 = *(_QWORD *)(v65 + 24);
      else
        v70 = 0;
      v78.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
      LOWORD(v82[0]) = 257;
      llvm::IRBuilderBase::CreateCall((uint64_t)v136, v70, v65, (uint64_t)&v78, 1, (uint64_t)__p);
      llvm::Value::replaceAllUsesWith();
    }
LABEL_110:
    v37 += 40;
  }
  while (v37 != v38);
LABEL_119:
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v144);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v143);
  if (v136[0] != v137)
    free(v136[0]);
  return 1;
}

void std::__hash_table<std::__hash_value_type<std::string,IntersectionShaderArgument>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,IntersectionShaderArgument>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,IntersectionShaderArgument>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,IntersectionShaderArgument>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,IntersectionShaderArgument> const&>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  std::string *v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD **v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *j;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;

  v4 = (unsigned __int8 *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v6 = v5;
  }
  v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v6);
  v8 = v7;
  v9 = *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
  if (*((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1))
  {
    v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                         + 8));
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1))
        v2 = v7
           % *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
    }
    else
    {
      v2 = (*((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1)
          - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                               + 8 * v2);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, v4))
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v2)
            break;
        }
      }
    }
  }
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v8;
  v16 = (std::string *)(v15 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v15 + 10) = *(_DWORD *)(a2 + 24);
  v17 = (float)(unint64_t)(qword_1EF8E9778 + 1);
  if (!v9 || (float)(*(float *)&dword_1EF8E9780 * (float)v9) < v17)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v17 / *(float *)&dword_1EF8E9780);
    if (v19 <= v20)
      prime = (int8x8_t)v20;
    else
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
    if (*(_QWORD *)&prime > *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                             + 1))
      goto LABEL_36;
    if (*(_QWORD *)&prime < *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                             + 1))
    {
      v28 = vcvtps_u32_f32((float)(unint64_t)qword_1EF8E9778 / *(float *)&dword_1EF8E9780);
      if (*((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1) < 3uLL
        || (v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                                 + 8)),
            v29.i16[0] = vaddlv_u8(v29),
            v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (*(_QWORD *)&prime <= v28)
        prime = (int8x8_t)v28;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v22 = operator new(8 * *(_QWORD *)&prime);
          v23 = (void *)AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments;
          *(_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments = v22;
          if (v23)
            operator delete(v23);
          v24 = 0;
          *((int8x8_t *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1) = prime;
          do
            *(_QWORD *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                      + 8 * v24++) = 0;
          while (*(_QWORD *)&prime != v24);
          v25 = (_QWORD **)qword_1EF8E9770;
          if (qword_1EF8E9770)
          {
            v26 = *(_QWORD *)(qword_1EF8E9770 + 8);
            v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(_QWORD *)&prime)
                v26 %= *(_QWORD *)&prime;
            }
            else
            {
              v26 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 8 * v26) = &qword_1EF8E9770;
            for (j = *v25; j; v26 = v32)
            {
              v32 = j[1];
              if (v27.u32[0] > 1uLL)
              {
                if (v32 >= *(_QWORD *)&prime)
                  v32 %= *(_QWORD *)&prime;
              }
              else
              {
                v32 &= *(_QWORD *)&prime - 1;
              }
              if (v32 != v26)
              {
                if (!*(_QWORD *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                + 8 * v32))
                {
                  *(_QWORD *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                            + 8 * v32) = v25;
                  goto LABEL_61;
                }
                *v25 = (_QWORD *)*j;
                *j = **(_QWORD **)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                                 + 8 * v32);
                **(_QWORD **)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments
                            + 8 * v32) = j;
                j = v25;
              }
              v32 = v26;
LABEL_61:
              v25 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_65;
        }
        v37 = (void *)AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments;
        *(_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments = 0;
        if (v37)
          operator delete(v37);
        v9 = 0;
        *((_QWORD *)&AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 1) = 0;
      }
    }
LABEL_65:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v2 = v8 % v9;
      else
        v2 = v8;
    }
    else
    {
      v2 = (v9 - 1) & v8;
    }
  }
  v33 = AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments;
  v34 = *(_QWORD **)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 8 * v2);
  if (v34)
  {
    *(_QWORD *)v15 = *v34;
LABEL_78:
    *v34 = v15;
    goto LABEL_79;
  }
  v35 = qword_1EF8E9770;
  *(_QWORD *)v15 = qword_1EF8E9770;
  qword_1EF8E9770 = (uint64_t)v15;
  *(_QWORD *)(v33 + 8 * v2) = &qword_1EF8E9770;
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9)
        v36 %= v9;
    }
    else
    {
      v36 &= v9 - 1;
    }
    v34 = (_QWORD *)(AGCLLVMUserIntersectionShaderLoopShaderPass::runOnFunction(llvm::Function &)::arguments + 8 * v36);
    goto LABEL_78;
  }
LABEL_79:
  ++qword_1EF8E9778;
}

uint64_t std::unordered_map<std::string,IntersectionShaderArgument>::~unordered_map[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t AGCLLVMDriverIntersectionShader::AGCLLVMDriverIntersectionShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3, _DWORD *a4)
{
  uint64_t *v6;
  llvm::Function *inserted;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t GlobalBufferBinding;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Type *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  _OWORD v57[3];
  _OWORD v58[3];
  _OWORD v59[3];
  __int128 v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 88), a2, a3);
  v6 = AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t *)a1, (uint64_t *)off_1E7EB5358);
  *(_QWORD *)a1 = off_1E7EB50F0;
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)(a1 + 88) = &unk_1E7EB5258;
  *(_QWORD *)(a1 + 120) = &unk_1E7EB5348;
  *(_QWORD *)(a1 + 72) = &unk_1E7EB5158;
  *(_BYTE *)(*(_QWORD *)(a1 + 488) + 1810) = (*a4 & 0x8000) != 0;
  AGCLLVMDriverIntersectionShader::wrapperName((AGCLLVMDriverIntersectionShader *)v6, &v64);
  inserted = (llvm::Function *)AGCLLVMBuilder::getOrInsertFunction<>();
  if (SBYTE7(v65) < 0)
    operator delete((void *)v64);
  *((_WORD *)inserted + 9) = *((_WORD *)inserted + 9) & 0xC00F | 0x6A0;
  *(_QWORD *)&v64 = "entry";
  LOWORD(v66) = 259;
  operator new();
  v8 = llvm::BasicBlock::BasicBlock();
  v9 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  *(_QWORD *)(v9 + 88) = v8;
  *(_QWORD *)(v9 + 96) = v8 + 40;
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 1352))(v10, **(_DWORD **)(a1 + 80) & 0xF, (**(_DWORD **)(a1 + 80) >> 4) & 3);
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 824);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 760))(v12) & 0xFFFFF | 0x900000;
  v14 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v15 = *(_QWORD *)(v14 + 280);
  *(_QWORD *)&v64 = "agc.global_ray_stride";
  LOWORD(v66) = 259;
  GlobalBufferBinding = AGCLLVMObject::createGlobalBufferBinding(v14, v15, (uint64_t)&v64, v13, 0);
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                        + a1
                                                                                        + 400)
                                                                          + 1288))(&v64, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 368), GlobalBufferBinding);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 824);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 712))(v17);
  v19 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v20 = llvm::PointerType::get();
  *(_QWORD *)&v60 = "agc.bvh_state_words_heap";
  v63 = 259;
  v21 = AGCLLVMObject::createGlobalBufferBinding(v19, v20, (uint64_t)&v60, v18, 0);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 824);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 848))(v22) & 0xFFFFF | 0x900000;
  v24 = llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 232), (llvm::Type *)2);
  v25 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  *(_QWORD *)&v60 = "agc.ria.ray_data_driver_start";
  v63 = 259;
  v26 = AGCLLVMObject::createGlobalBufferBinding(v25, v24, (uint64_t)&v60, v23, 0);
  llvm::GlobalValue::setLinkage(v26, 10);
  *(_BYTE *)(v26 + 80) &= ~1u;
  llvm::Constant::getNullValue(*(llvm::Constant **)(v26 + 24), v27);
  llvm::GlobalVariable::setInitializer();
  switch(v11)
  {
    case 0:
      v59[0] = v64;
      v59[1] = v65;
      v59[2] = v66;
      v30 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v31 = *(_QWORD *)(v30 + 400);
      v60 = *(_OWORD *)(v30 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v30 + 40));
      v62 = *(_DWORD *)(v30 + 136);
      (*(void (**)(uint64_t, __int128 *, _OWORD *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v31 + 1248))(v31, &v60, v59, v21, **(_DWORD **)(a1 + 80) & 0xF, (**(_DWORD **)(a1 + 80) >> 6) & 7, (**(_DWORD **)(a1 + 80) >> 4) & 3);
      goto LABEL_7;
    case 1:
      v58[0] = v64;
      v58[1] = v65;
      v58[2] = v66;
      v32 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v33 = *(_QWORD *)(v32 + 400);
      v60 = *(_OWORD *)(v32 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v32 + 40));
      v62 = *(_DWORD *)(v32 + 136);
      (*(void (**)(uint64_t, __int128 *, _OWORD *, _QWORD, _QWORD))(*(_QWORD *)v33 + 1256))(v33, &v60, v58, (**(_DWORD **)(a1 + 80) >> 6) & 7, (**(_DWORD **)(a1 + 80) >> 4) & 3);
      goto LABEL_7;
    case 2:
    case 3:
      v57[0] = v64;
      v57[1] = v65;
      v57[2] = v66;
      v28 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v29 = *(_QWORD *)(v28 + 400);
      v60 = *(_OWORD *)(v28 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v28 + 40));
      v62 = *(_DWORD *)(v28 + 136);
      (*(void (**)(uint64_t, __int128 *, _OWORD *, _QWORD, _QWORD))(*(_QWORD *)v29 + 1264))(v29, &v60, v57, (**(_DWORD **)(a1 + 80) >> 6) & 7, (**(_DWORD **)(a1 + 80) >> 4) & 3);
LABEL_7:
      if (v61)
        goto LABEL_8;
      break;
    case 4:
      v37 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v38 = *(_QWORD *)(v37 + 400);
      v54 = *(_OWORD *)(v37 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v37 + 40));
      v56 = *(_DWORD *)(v37 + 136);
      (*(void (**)(uint64_t, __int128 *, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v38 + 1152))(v38, &v54, &v64, **(_DWORD **)(a1 + 80) & 0xF, (**(_DWORD **)(a1 + 80) >> 4) & 3, (**(_DWORD **)(a1 + 80) >> 6) & 7, (**(_DWORD **)(a1 + 80) >> 9) & 7);
      if (!v55)
        break;
      goto LABEL_8;
    case 5:
      v39 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v40 = *(_QWORD *)(v39 + 400);
      v51 = *(_OWORD *)(v39 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v39 + 40));
      v53 = *(_DWORD *)(v39 + 136);
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v40 + 1160))(v40, &v51, &v64);
      if (!v52)
        break;
      goto LABEL_8;
    case 6:
      v41 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v42 = *(_QWORD *)(v41 + 400);
      v48 = *(_OWORD *)(v41 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v41 + 40));
      v50 = *(_DWORD *)(v41 + 136);
      (*(void (**)(uint64_t, __int128 *, __int128 *, _QWORD))(*(_QWORD *)v42 + 1168))(v42, &v48, &v64, (**(_DWORD **)(a1 + 80) >> 6) & 7);
      if (!v49)
        break;
      goto LABEL_8;
    case 7:
      v43 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v44 = *(_QWORD *)(v43 + 400);
      v45 = *(_OWORD *)(v43 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v43 + 40));
      v47 = *(_DWORD *)(v43 + 136);
      (*(void (**)(uint64_t, __int128 *, __int128 *))(*(_QWORD *)v44 + 1176))(v44, &v45, &v64);
      if (!v46)
        break;
LABEL_8:
      llvm::MetadataTracking::untrack();
      break;
    default:
      break;
  }
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40));
  AGCLLVMDriverShader::linkDriverRuntime((AGCLLVMDriverShader *)a1, 4, inserted);
  v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
  (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v34 + 1376))(v34, &v64, v21, (**(_DWORD **)(a1 + 80) >> 6) & 7);
  v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 1360))(v35, v21, 1);
  *(_BYTE *)(a1 + 8) = 1;
  return a1;
}

uint64_t AGCLLVMUserIntersectionShader::AGCLLVMUserIntersectionShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, int a5)
{
  llvm::Module *v9;
  uint64_t NamedMetadata;
  llvm::NamedMDNode *v11;
  unsigned int i;
  uint64_t Operand;
  uint64_t v14;
  _BOOL4 v15;
  const char *v17;
  __int16 v18;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 4408), a2, *a3);
  AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, (uint64_t *)off_1E7EB57D8, (uint64_t)a3, "air.intersection", (uint64_t)&default_cs, 0, 0);
  *(_QWORD *)a1 = &off_1E7EB53B8;
  *(_QWORD *)(a1 + 4408) = &unk_1E7EB56D8;
  *(_QWORD *)(a1 + 4440) = &unk_1E7EB57C8;
  *(_QWORD *)(a1 + 4320) = &unk_1E7EB55D8;
  *(_DWORD *)(a1 + 4328) = *(_DWORD *)a4;
  *(_DWORD *)(a1 + 4332) = a5;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(_DWORD *)(a1 + 4376) = 0;
  *(_OWORD *)(a1 + 4384) = xmmword_1C3E37DF0;
  *(_WORD *)(a1 + 4400) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 4808) + 1810) = (*(_DWORD *)a4 & 0x20000) != 0;
  *(_BYTE *)(a1 + 3712) = (*(_DWORD *)(a1 + 4328) & 0x8000) != 0;
  if ((*(_BYTE *)(a4 + 2) & 4) != 0)
  {
    v9 = *(llvm::Module **)(a1 + 4776);
    v17 = "llvm.module.flags";
    v18 = 259;
    NamedMetadata = llvm::Module::getNamedMetadata(v9, (const llvm::Twine *)&v17);
    if (NamedMetadata)
    {
      v11 = (llvm::NamedMDNode *)NamedMetadata;
      for (i = 0; i < llvm::NamedMDNode::getNumOperands(v11); ++i)
      {
        Operand = llvm::NamedMDNode::getOperand(v11);
        v14 = 8 - 8 * *(unsigned int *)(Operand + 8);
        while (v14)
        {
          v15 = isStringMDNode(*(llvm::MDString **)(Operand + v14), "PIC Level");
          v14 += 8;
          if (v15)
          {
            llvm::ConstantInt::get();
            llvm::ValueAsMetadata::get();
            llvm::MDNode::replaceOperandWith();
            goto LABEL_11;
          }
        }
      }
    }
    llvm::Module::addModuleFlag();
LABEL_11:
    llvm::Module::getOrInsertNamedMetadata();
  }
  return a1;
}

uint64_t parseMDUint3(uint64_t a1, const char *a2, _DWORD *a3, _DWORD *a4)
{
  unsigned __int8 *v4;
  unint64_t v5;
  BOOL v6;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  v4 = *(unsigned __int8 **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a3);
  if (!v4)
    return 0;
  v5 = *v4;
  v6 = v5 > 0x22 || ((0x7FFFFFFF0uLL >> v5) & 1) == 0;
  if (v6 || *((_DWORD *)v4 + 2) != 4)
    return 0;
  result = isStringMDNode(*((llvm::MDString **)v4 - 4), a2);
  if ((_DWORD)result)
  {
    v10 = 1;
    result = parseMDInt(0, (uint64_t)v4, &v10, a4);
    if ((_DWORD)result)
    {
      v11 = 2;
      result = parseMDInt(0, (uint64_t)v4, &v11, a4 + 1);
      if ((_DWORD)result)
      {
        v12 = 3;
        result = parseMDInt(0, (uint64_t)v4, &v12, a4 + 2);
        if ((_DWORD)result)
        {
          ++*a3;
          return 1;
        }
      }
    }
  }
  return result;
}

void std::deque<llvm::MDNode const*>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v98 = 1;
            else
              v98 = (uint64_t)&v64[-*a1] >> 2;
            v99 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v98);
            v101 = &v99[8 * (v98 >> 2)];
            v102 = (uint64_t *)a1[1];
            v64 = v101;
            v103 = a1[2] - (_QWORD)v102;
            if (v103)
            {
              v64 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              v104 = 8 * (v103 >> 3);
              v105 = &v99[8 * (v98 >> 2)];
              do
              {
                v106 = *v102++;
                *(_QWORD *)v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v64;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v111 = v35;
    *(_QWORD *)&v35 = v34;
    *((_QWORD *)&v35 + 1) = &v31[8 * v32];
    v108 = v35;
    v36 = operator new(0x1000uLL);
    if (v24 == v33)
    {
      v37 = 8 * v24;
      if (v6 >= 1)
      {
        v38 = v37 >> 3;
        if (v38 >= -1)
          v39 = v38 + 1;
        else
          v39 = v38 + 2;
        v34 -= 8 * (v39 >> 1);
        *((_QWORD *)&v40 + 1) = *((_QWORD *)&v108 + 1);
        *(_QWORD *)&v41 = v111;
        *(_QWORD *)&v40 = v34;
        *((_QWORD *)&v41 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v37 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v41 = v76;
      *((_QWORD *)&v41 + 1) = v34;
      *(_QWORD *)&v40 = v34;
      *((_QWORD *)&v40 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v108 = v40;
      v111 = v41;
      operator delete(v31);
    }
    v40 = v108;
    v41 = v111;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v40 = v40 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) == (_QWORD)v41)
      {
        v81 = (_BYTE *)v40;
        if ((unint64_t)v40 >= *((_QWORD *)&v40 + 1))
        {
          if (*((_QWORD *)&v40 + 1) == *((_QWORD *)&v41 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v40 + 1) - *((_QWORD *)&v41 + 1)) >> 2;
          v87 = 2 * v86;
          v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v86);
          v80 = &v88[(v87 + 6) & 0xFFFFFFFFFFFFFFF8];
          v90 = v80;
          v91 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v90 = &v80[v91 & 0xFFFFFFFFFFFFFFF8];
            v92 = 8 * (v91 >> 3);
            v93 = v80;
            v94 = v79;
            do
            {
              v95 = *v94++;
              *(_QWORD *)v93 = v95;
              v93 += 8;
              v92 -= 8;
            }
            while (v92);
          }
          *(_QWORD *)&v41 = v88;
          *((_QWORD *)&v41 + 1) = v80;
          *(_QWORD *)&v40 = v90;
          *((_QWORD *)&v40 + 1) = &v88[8 * v89];
          if (v79)
          {
            v109 = v40;
            v113 = v41;
            operator delete(v79);
            v40 = v109;
            v41 = v113;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v40 + 1) - v40) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v40 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v40 - *((_QWORD *)&v41 + 1)));
          if ((_QWORD)v40 == *((_QWORD *)&v41 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v41 + 1);
          }
          else
          {
            v110 = *((_QWORD *)&v40 + 1);
            v112 = v41;
            memmove((void *)(v85 - (v40 - *((_QWORD *)&v41 + 1))), *((const void **)&v41 + 1), v40 - *((_QWORD *)&v41 + 1));
            *((_QWORD *)&v40 + 1) = v110;
            *(_QWORD *)&v41 = v112;
          }
          *((_QWORD *)&v41 + 1) = v80;
          *(_QWORD *)&v40 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v41 + 1);
      }
      v96 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v96;
      *((_QWORD *)&v41 + 1) -= 8;
    }
    v97 = (char *)*a1;
    *(_OWORD *)a1 = v41;
    *((_OWORD *)a1 + 1) = v40;
    if (v97)
      operator delete(v97);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

uint64_t AGCLLVMUserShader::initCompile(AGCLLVMUserShader *this)
{
  AGCLLVMUserObject::initCompile(this);
  return 1;
}

uint64_t AGCLLVMUserShader::buildTileThreadPositionInGrid(AGCLLVMUserShader *this, llvm::Type *a2, uint64_t a3)
{
  llvm::IRBuilderBase *v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Value *Mul;
  llvm::Value *v10;
  _WORD v12[20];
  _BYTE v13[32];
  __int16 v14;

  if ((_DWORD)a3 == 2)
    return llvm::ConstantInt::get();
  v6 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v7 = AGCLLVMUserShader::buildTileThreadsPerThreadgroup(this, a2, a3);
  v8 = (llvm::Value *)AGCLLVMUserShader::buildTileThreadgroupPositionInGrid(this, a2, a3);
  v14 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v6, v7, v8, (const llvm::Twine *)v13);
  v10 = (llvm::Value *)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup(this, a2, a3);
  v12[16] = 257;
  return llvm::IRBuilderBase::CreateAdd(v6, Mul, v10, (const llvm::Twine *)v12);
}

uint64_t AGCLLVMUserShader::buildTileQuadgroupIndexInThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *LShr;
  llvm::IRBuilderBase *v8;
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::IRBuilderBase *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *Add;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::IRBuilderBase *v19;
  llvm::Value *Mul;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[4];
  __int16 v25;

  v4 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v5 = (llvm::Value *)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup(this, a2, 0);
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v24[0] = "quad_x";
  v25 = 259;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v4, v5, v6, (const llvm::Twine *)v24);
  v8 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v9 = (llvm::Value *)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup(this, a2, 1);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24[0] = "quad_y";
  v25 = 259;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v8, v9, v10, (const llvm::Twine *)v24);
  v12 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v13 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, _QWORD))(*(_QWORD *)this + 464))(this, 0);
  v14 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v13, a2);
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v25 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v12, v14, v15, (const llvm::Twine *)v24);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v22[0] = "num_quads_x";
  v23 = 259;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v12, Add, v17, (const llvm::Twine *)v22);
  v19 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v25 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v19, v11, v18, (const llvm::Twine *)v24);
  v23 = 257;
  return llvm::IRBuilderBase::CreateAdd(v19, Mul, LShr, (const llvm::Twine *)v22);
}

uint64_t AGCLLVMUserShader::buildTileThreadPositionInThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  if ((_DWORD)a3 == 2)
    return llvm::ConstantInt::get();
  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Type *, uint64_t))(*(_QWORD *)v7 + 256))(v7, &v11, a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

llvm::Value *AGCLLVMUserShader::buildTileThreadsPerThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2, int a3)
{
  uint64_t (*v5)(void);
  uint64_t v6;
  llvm::Value *v7;

  if (a3 == 2)
  {
    v6 = llvm::ConstantInt::get();
  }
  else
  {
    if (a3 == 1)
    {
      v5 = *(uint64_t (**)(void))(*(_QWORD *)this + 464);
    }
    else
    {
      if (a3)
      {
        v7 = 0;
        return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v7, a2);
      }
      v5 = *(uint64_t (**)(void))(*(_QWORD *)this + 464);
    }
    v6 = v5();
  }
  v7 = (llvm::Value *)v6;
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v7, a2);
}

uint64_t AGCLLVMUserShader::buildTileThreadgroupPositionInGrid(AGCLLVMUserShader *this, llvm::Type *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;

  if (a3 == 2)
    return llvm::ConstantInt::get();
  v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v8 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
  v13 = *((_DWORD *)v8 + 34);
  v9 = AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v7, (uint64_t)&v11, (uint64_t)a2, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v9;
}

void std::__introsort<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  __int128 *v6;
  unint64_t v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  __int128 v16;
  void **v17;
  int v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  void **v28;
  const void *v29;
  size_t v30;
  __int128 *v31;
  int v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  const void **v40;
  int v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  BOOL v46;
  __int128 *v47;
  const void **v48;
  int v49;
  size_t v50;
  const void *v51;
  size_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  __int128 *v56;
  const void **v57;
  const void **v58;
  size_t v59;
  size_t v60;
  const void *v61;
  size_t v62;
  int v63;
  BOOL v64;
  const void **v65;
  const void **v66;
  size_t v67;
  size_t v68;
  const void *v69;
  size_t v70;
  int v71;
  _BOOL4 v72;
  __int128 *v73;
  __int128 v74;
  __int128 v75;
  void **v76;
  __int128 v77;
  BOOL v78;
  const void *v79;
  int v80;
  size_t v81;
  __int128 *v82;
  size_t v83;
  const void *v84;
  size_t v85;
  int v86;
  BOOL v87;
  const void **v88;
  int v89;
  size_t v90;
  const void *v91;
  size_t v92;
  int v93;
  BOOL v94;
  __int128 *v95;
  int v96;
  __int128 *v97;
  size_t v98;
  const void *v99;
  size_t v100;
  int v101;
  BOOL v102;
  char v103;
  BOOL v104;
  __int128 *v105;
  const void **v106;
  int v107;
  size_t v108;
  const void *v109;
  size_t v110;
  int v111;
  BOOL v112;
  const void **v113;
  const void **v114;
  size_t v115;
  size_t v116;
  const void *v117;
  size_t v118;
  int v119;
  _BOOL4 v120;
  const void **v121;
  const void **v122;
  size_t v123;
  size_t v124;
  const void *v125;
  size_t v126;
  int v127;
  BOOL v128;
  __int128 *v129;
  __int128 v130;
  __int128 v131;
  void **v132;
  __int128 v133;
  int v134;
  int v135;
  size_t v136;
  const void *v137;
  size_t v138;
  const void *v139;
  size_t v140;
  int v141;
  _BOOL4 v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 *v147;
  int v148;
  int v149;
  size_t v150;
  const void *v151;
  size_t v152;
  const void *v153;
  size_t v154;
  int v155;
  _BOOL4 v156;
  size_t v157;
  __int128 *v158;
  uint64_t v159;
  uint64_t v160;
  void **v161;
  uint64_t v162;
  int v163;
  size_t v164;
  const void *v165;
  size_t v166;
  int v167;
  BOOL v168;
  uint64_t v169;
  __int128 *v170;
  uint64_t v171;
  __int128 v172;
  int64_t v173;
  int64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  unint64_t v179;
  const void *v180;
  unint64_t v181;
  const void *v182;
  size_t v183;
  int v184;
  uint64_t v185;
  __int128 *v186;
  uint64_t v187;
  int v188;
  int v189;
  size_t v190;
  const void *v191;
  size_t v192;
  const void *v193;
  size_t v194;
  int v195;
  BOOL v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  void **v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  int v205;
  unint64_t v206;
  const void *v207;
  unint64_t v208;
  const void *v209;
  size_t v210;
  int v211;
  uint64_t v212;
  int v213;
  size_t v214;
  const void *v215;
  size_t v216;
  __int128 *v217;
  size_t v218;
  int v219;
  _BOOL4 v220;
  void **v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  unint64_t v232;
  const void *v233;
  unint64_t v234;
  const void *v235;
  size_t v236;
  int v237;
  uint64_t v238;
  __int128 v239;
  void **v240;
  __int128 v241;
  void **v242;
  __int128 *v243;
  __int128 *v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  int v250;
  int v251;
  size_t v252;
  const void *v253;
  size_t v254;
  const void *v255;
  size_t v256;
  int v257;
  _BOOL4 v258;
  __int128 v259;
  size_t v260;
  __int128 *v261;
  unint64_t v262;
  __int128 v263;
  void **v264;
  __int128 v265;
  int v266;
  size_t v267;
  const void *v268;
  size_t v269;
  int v270;
  BOOL v271;
  void **v272;
  __int128 v273;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  __int128 *v278;
  int v279;
  int v280;
  size_t v281;
  const void *v282;
  size_t v283;
  const void *v284;
  size_t v285;
  int v286;
  _BOOL4 v287;
  size_t v288;
  __int128 *v289;
  const void **v290;
  const void **v291;
  const void **v292;
  int v293;
  size_t v294;
  const void *v295;
  size_t v296;
  int v297;
  BOOL v298;
  void **v299;
  __int128 v300;
  __int128 *v301;
  uint64_t v303;
  uint64_t v304;
  int64_t v305;
  char v306;
  __int128 v308;
  __int128 v309;
  _BYTE v310[15];
  __int128 v311;
  __int128 v312;
  int v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  __int128 v328;
  const void *v329;
  __int128 v330;
  uint64_t v331;

  v331 = *MEMORY[0x1E0C80C00];
  v6 = &v330;
LABEL_2:
  v7 = a2;
  v301 = (__int128 *)(a2 - 64);
  v8 = (__int128 *)a1;
  while (2)
  {
    a1 = (uint64_t)v8;
    v9 = v7 - (_QWORD)v8;
    v10 = (uint64_t)(v7 - (_QWORD)v8) >> 6;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v134 = *(char *)(a1 + 47);
        v135 = *(char *)(a2 - 17);
        if (v135 >= 0)
          v136 = *(unsigned __int8 *)(a2 - 17);
        else
          v136 = *(_QWORD *)(a2 - 32);
        if (v135 >= 0)
          v137 = (const void *)(a2 - 40);
        else
          v137 = *(const void **)(a2 - 40);
        if (v134 >= 0)
          v138 = *(unsigned __int8 *)(a1 + 47);
        else
          v138 = *(_QWORD *)(a1 + 32);
        if (v134 >= 0)
          v139 = (const void *)(a1 + 24);
        else
          v139 = *(const void **)(a1 + 24);
        if (v138 >= v136)
          v140 = v136;
        else
          v140 = v138;
        v141 = memcmp(v137, v139, v140);
        v142 = v136 < v138;
        if (v141)
          v142 = v141 < 0;
        if (v142)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a1, v301);
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, (uint64_t)v301);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, a1 + 128, (uint64_t)v301);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,0>(a1, a1 + 64, a1 + 128, a1 + 192, (uint64_t)v301);
        return;
      default:
        if (v9 <= 1535)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != v7)
            {
              v143 = a1 + 64;
              if (a1 + 64 != a2)
              {
                v144 = 0;
                v145 = a1;
                do
                {
                  v146 = v143;
                  v147 = (__int128 *)(v145 + 88);
                  v148 = *(char *)(v145 + 47);
                  v149 = *(char *)(v145 + 111);
                  if (v149 >= 0)
                    v150 = *(unsigned __int8 *)(v145 + 111);
                  else
                    v150 = *(_QWORD *)(v145 + 96);
                  if (v149 >= 0)
                    v151 = (const void *)(v145 + 88);
                  else
                    v151 = *(const void **)(v145 + 88);
                  if (v148 >= 0)
                    v152 = *(unsigned __int8 *)(v145 + 47);
                  else
                    v152 = *(_QWORD *)(v145 + 32);
                  if (v148 >= 0)
                    v153 = (const void *)(v145 + 24);
                  else
                    v153 = *(const void **)(v145 + 24);
                  if (v152 >= v150)
                    v154 = v150;
                  else
                    v154 = v152;
                  v155 = memcmp(v151, v153, v154);
                  v156 = v150 < v152;
                  if (v155)
                    v156 = v155 < 0;
                  if (v156)
                  {
                    v324 = *(_DWORD *)(v146 + 16);
                    v317 = *(_OWORD *)v146;
                    v329 = *(const void **)(v145 + 104);
                    v328 = *v147;
                    *(_QWORD *)v147 = 0;
                    *(_QWORD *)(v145 + 96) = 0;
                    *(_QWORD *)(v145 + 104) = 0;
                    v330 = *(_OWORD *)(v145 + 112);
                    if (SHIBYTE(v329) >= 0)
                      v157 = HIBYTE(v329);
                    else
                      v157 = *((_QWORD *)&v328 + 1);
                    if (SHIBYTE(v329) >= 0)
                      v158 = &v328;
                    else
                      v158 = (__int128 *)v328;
                    v159 = v144;
                    while (1)
                    {
                      v160 = a1 + v159;
                      *(_OWORD *)(v160 + 64) = *(_OWORD *)(a1 + v159);
                      *(_DWORD *)(v160 + 80) = *(_DWORD *)(a1 + v159 + 16);
                      v161 = (void **)(a1 + v159 + 88);
                      if (*(char *)(a1 + v159 + 111) < 0)
                        operator delete(*v161);
                      *(_OWORD *)v161 = *(_OWORD *)(v160 + 24);
                      *(_QWORD *)(a1 + v159 + 104) = *(_QWORD *)(v160 + 40);
                      *(_BYTE *)(v160 + 47) = 0;
                      *(_BYTE *)(v160 + 24) = 0;
                      *(_OWORD *)(v160 + 112) = *(_OWORD *)(v160 + 48);
                      if (!v159)
                        break;
                      v162 = a1 + v159;
                      v163 = *(char *)(a1 + v159 - 17);
                      if (v163 >= 0)
                        v164 = *(unsigned __int8 *)(a1 + v159 - 17);
                      else
                        v164 = *(_QWORD *)(a1 + v159 - 32);
                      if (v163 >= 0)
                        v165 = (const void *)(a1 + v159 - 40);
                      else
                        v165 = *(const void **)(a1 + v159 - 40);
                      if (v164 >= v157)
                        v166 = v157;
                      else
                        v166 = v164;
                      v167 = memcmp(v158, v165, v166);
                      v168 = v157 < v164;
                      if (v167)
                        v168 = v167 < 0;
                      v159 -= 64;
                      if (!v168)
                      {
                        v169 = v162 + 24;
                        v170 = (__int128 *)(v162 + 48);
                        v171 = a1 + v159 + 64;
                        goto LABEL_284;
                      }
                    }
                    v169 = a1 + 24;
                    v170 = (__int128 *)(a1 + 48);
                    v171 = a1;
LABEL_284:
                    *(_DWORD *)(v171 + 16) = v324;
                    *(_OWORD *)v171 = v317;
                    if (*(char *)(v171 + 47) < 0)
                      operator delete(*(void **)v169);
                    v172 = v328;
                    *(_QWORD *)(v169 + 16) = v329;
                    *(_OWORD *)v169 = v172;
                    *v170 = v330;
                  }
                  v143 = v146 + 64;
                  v144 += 64;
                  v145 = v146;
                }
                while (v146 + 64 != a2);
              }
            }
          }
          else if (a1 != v7)
          {
            v275 = a1 + 64;
            if (a1 + 64 != a2)
            {
              v276 = a1 - 40;
              do
              {
                v277 = v275;
                v278 = (__int128 *)(a1 + 88);
                v279 = *(char *)(a1 + 47);
                v280 = *(char *)(a1 + 111);
                if (v280 >= 0)
                  v281 = *(unsigned __int8 *)(a1 + 111);
                else
                  v281 = *(_QWORD *)(a1 + 96);
                if (v280 >= 0)
                  v282 = (const void *)(a1 + 88);
                else
                  v282 = *(const void **)(a1 + 88);
                if (v279 >= 0)
                  v283 = *(unsigned __int8 *)(a1 + 47);
                else
                  v283 = *(_QWORD *)(a1 + 32);
                if (v279 >= 0)
                  v284 = (const void *)(a1 + 24);
                else
                  v284 = *(const void **)(a1 + 24);
                if (v283 >= v281)
                  v285 = v281;
                else
                  v285 = v283;
                v286 = memcmp(v282, v284, v285);
                v287 = v281 < v283;
                if (v286)
                  v287 = v286 < 0;
                if (v287)
                {
                  v327 = *(_DWORD *)(v277 + 16);
                  v320 = *(_OWORD *)v277;
                  v329 = *(const void **)(a1 + 104);
                  v328 = *v278;
                  *(_QWORD *)v278 = 0;
                  *(_QWORD *)(a1 + 96) = 0;
                  *(_QWORD *)(a1 + 104) = 0;
                  v330 = *(_OWORD *)(a1 + 112);
                  if (SHIBYTE(v329) >= 0)
                    v288 = HIBYTE(v329);
                  else
                    v288 = *((_QWORD *)&v328 + 1);
                  if (SHIBYTE(v329) >= 0)
                    v289 = &v328;
                  else
                    v289 = (__int128 *)v328;
                  v290 = (const void **)v276;
                  do
                  {
                    v291 = v290;
                    *(_OWORD *)(v290 + 13) = *(_OWORD *)(v290 + 5);
                    *((_DWORD *)v290 + 30) = *((_DWORD *)v290 + 14);
                    v292 = v290 + 16;
                    if (*((char *)v290 + 151) < 0)
                      operator delete((void *)*v292);
                    *(_OWORD *)v292 = *((_OWORD *)v291 + 4);
                    v292[2] = v291[10];
                    *((_BYTE *)v291 + 87) = 0;
                    *((_BYTE *)v291 + 64) = 0;
                    *(_OWORD *)(v291 + 19) = *(_OWORD *)(v291 + 11);
                    v293 = *((char *)v291 + 23);
                    if (v293 >= 0)
                      v294 = *((unsigned __int8 *)v291 + 23);
                    else
                      v294 = (size_t)v291[1];
                    if (v293 >= 0)
                      v295 = v291;
                    else
                      v295 = *v291;
                    if (v294 >= v288)
                      v296 = v288;
                    else
                      v296 = v294;
                    v297 = memcmp(v289, v295, v296);
                    v298 = v297 < 0;
                    if (!v297)
                      v298 = v288 < v294;
                    v290 = v291 - 8;
                  }
                  while (v298);
                  v299 = (void **)(v291 + 8);
                  *((_DWORD *)v291 + 14) = v327;
                  *(_OWORD *)(v291 + 5) = v320;
                  if (*((char *)v291 + 87) < 0)
                    operator delete(*v299);
                  v300 = v328;
                  v291[10] = v329;
                  *(_OWORD *)v299 = v300;
                  *(_OWORD *)(v291 + 11) = v330;
                }
                v275 = v277 + 64;
                v276 += 64;
                a1 = v277;
              }
              while (v277 + 64 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != v7)
          {
            v305 = (unint64_t)(v10 - 2) >> 1;
            v173 = v305;
            do
            {
              v174 = v173;
              if (v305 >= v173)
              {
                v175 = (2 * v173) | 1;
                v176 = a1 + (v175 << 6);
                if (2 * v173 + 2 < v10)
                {
                  v177 = *(char *)(v176 + 111);
                  v178 = *(char *)(v176 + 47);
                  v179 = v178 >= 0 ? *(unsigned __int8 *)(v176 + 47) : *(_QWORD *)(v176 + 32);
                  v180 = v178 >= 0 ? (const void *)(v176 + 24) : *(const void **)(v176 + 24);
                  v181 = v177 >= 0 ? *(unsigned __int8 *)(v176 + 111) : *(_QWORD *)(v176 + 96);
                  v182 = v177 >= 0 ? (const void *)(v176 + 88) : *(const void **)(v176 + 88);
                  v183 = v181 >= v179 ? v179 : v181;
                  v184 = memcmp(v180, v182, v183);
                  v185 = v184 ? v184 < 0 : v179 < v181;
                  v176 += v185 << 6;
                  if ((_DWORD)v185)
                    v175 = 2 * v174 + 2;
                }
                v303 = a1 + (v174 << 6);
                v186 = (__int128 *)(v303 + 24);
                v187 = v303;
                v188 = *(char *)(v303 + 47);
                v189 = *(char *)(v176 + 47);
                if (v189 >= 0)
                  v190 = *(unsigned __int8 *)(v176 + 47);
                else
                  v190 = *(_QWORD *)(v176 + 32);
                if (v189 >= 0)
                  v191 = (const void *)(v176 + 24);
                else
                  v191 = *(const void **)(v176 + 24);
                if (v188 >= 0)
                  v192 = *(unsigned __int8 *)(v303 + 47);
                else
                  v192 = *(_QWORD *)(v303 + 32);
                if (v188 >= 0)
                  v193 = (const void *)(v303 + 24);
                else
                  v193 = *(const void **)(v303 + 24);
                if (v192 >= v190)
                  v194 = v190;
                else
                  v194 = v192;
                v195 = memcmp(v191, v193, v194);
                v196 = v190 < v192;
                if (v195)
                  v196 = v195 < 0;
                if (!v196)
                {
                  v325 = *(_DWORD *)(v303 + 16);
                  v318 = *(_OWORD *)v303;
                  v197 = *v186;
                  v329 = *(const void **)(v303 + 40);
                  v328 = v197;
                  *(_QWORD *)(v303 + 32) = 0;
                  *(_QWORD *)(v303 + 40) = 0;
                  *(_QWORD *)v186 = 0;
                  v330 = *(_OWORD *)(v303 + 48);
                  do
                  {
                    v198 = v176;
                    v199 = *(_OWORD *)v176;
                    *(_DWORD *)(v187 + 16) = *(_DWORD *)(v176 + 16);
                    *(_OWORD *)v187 = v199;
                    v200 = (void **)(v187 + 24);
                    if (*(char *)(v187 + 47) < 0)
                      operator delete(*v200);
                    v201 = *(_OWORD *)(v176 + 24);
                    *(_QWORD *)(v187 + 40) = *(_QWORD *)(v176 + 40);
                    *(_OWORD *)v200 = v201;
                    *(_BYTE *)(v176 + 47) = 0;
                    *(_BYTE *)(v176 + 24) = 0;
                    *(_OWORD *)(v187 + 48) = *(_OWORD *)(v176 + 48);
                    if (v305 < v175)
                      break;
                    v202 = (2 * v175) | 1;
                    v176 = a1 + (v202 << 6);
                    v203 = 2 * v175 + 2;
                    if (v203 < v10)
                    {
                      v204 = *(char *)(v176 + 111);
                      v205 = *(char *)(v176 + 47);
                      v206 = v205 >= 0 ? *(unsigned __int8 *)(v176 + 47) : *(_QWORD *)(v176 + 32);
                      v207 = v205 >= 0 ? (const void *)(v176 + 24) : *(const void **)(v176 + 24);
                      v208 = v204 >= 0 ? *(unsigned __int8 *)(v176 + 111) : *(_QWORD *)(v176 + 96);
                      v209 = v204 >= 0 ? (const void *)(v176 + 88) : *(const void **)(v176 + 88);
                      v210 = v208 >= v206 ? v206 : v208;
                      v211 = memcmp(v207, v209, v210);
                      v212 = v211 ? v211 < 0 : v206 < v208;
                      v176 += v212 << 6;
                      if ((_DWORD)v212)
                        v202 = v203;
                    }
                    v213 = *(char *)(v176 + 47);
                    if (v213 >= 0)
                      v214 = *(unsigned __int8 *)(v176 + 47);
                    else
                      v214 = *(_QWORD *)(v176 + 32);
                    if (v213 >= 0)
                      v215 = (const void *)(v176 + 24);
                    else
                      v215 = *(const void **)(v176 + 24);
                    if (SHIBYTE(v329) >= 0)
                      v216 = HIBYTE(v329);
                    else
                      v216 = *((_QWORD *)&v328 + 1);
                    if (SHIBYTE(v329) >= 0)
                      v217 = &v328;
                    else
                      v217 = (__int128 *)v328;
                    if (v216 >= v214)
                      v218 = v214;
                    else
                      v218 = v216;
                    v219 = memcmp(v215, v217, v218);
                    v220 = v214 < v216;
                    if (v219)
                      v220 = v219 < 0;
                    v187 = v198;
                    v175 = v202;
                  }
                  while (!v220);
                  v221 = (void **)(v198 + 24);
                  *(_DWORD *)(v198 + 16) = v325;
                  *(_OWORD *)v198 = v318;
                  if (*(char *)(v198 + 47) < 0)
                    operator delete(*v221);
                  v222 = v328;
                  *(_QWORD *)(v198 + 40) = v329;
                  *(_OWORD *)v221 = v222;
                  *(_OWORD *)(v198 + 48) = v330;
                }
              }
              v173 = v174 - 1;
            }
            while (v174);
            v223 = (unint64_t)v9 >> 6;
            do
            {
              v224 = 0;
              v225 = a2;
              v313 = *(_DWORD *)(a1 + 16);
              v312 = *(_OWORD *)a1;
              v304 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)v310 = *(_QWORD *)(a1 + 32);
              *(_QWORD *)&v310[7] = *(_QWORD *)(a1 + 39);
              v306 = *(_BYTE *)(a1 + 47);
              *(_QWORD *)(a1 + 32) = 0;
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)(a1 + 24) = 0;
              v226 = a1;
              v309 = *(_OWORD *)(a1 + 48);
              do
              {
                v227 = v226 + ((v224 + 1) << 6);
                v228 = 2 * v224;
                v224 = (2 * v224) | 1;
                v229 = v228 + 2;
                if (v228 + 2 < v223)
                {
                  v230 = *(char *)(v227 + 111);
                  v231 = *(char *)(v227 + 47);
                  v232 = v231 >= 0 ? *(unsigned __int8 *)(v227 + 47) : *(_QWORD *)(v227 + 32);
                  v233 = v231 >= 0 ? (const void *)(v227 + 24) : *(const void **)(v227 + 24);
                  v234 = v230 >= 0 ? *(unsigned __int8 *)(v227 + 111) : *(_QWORD *)(v227 + 96);
                  v235 = v230 >= 0 ? (const void *)(v227 + 88) : *(const void **)(v227 + 88);
                  v236 = v234 >= v232 ? v232 : v234;
                  v237 = memcmp(v233, v235, v236);
                  v238 = v237 ? v237 < 0 : v232 < v234;
                  v227 += v238 << 6;
                  if ((_DWORD)v238)
                    v224 = v229;
                }
                v239 = *(_OWORD *)v227;
                *(_DWORD *)(v226 + 16) = *(_DWORD *)(v227 + 16);
                *(_OWORD *)v226 = v239;
                v240 = (void **)(v226 + 24);
                if (*(char *)(v226 + 47) < 0)
                  operator delete(*v240);
                v241 = *(_OWORD *)(v227 + 24);
                *(_QWORD *)(v226 + 40) = *(_QWORD *)(v227 + 40);
                *(_OWORD *)v240 = v241;
                *(_BYTE *)(v227 + 47) = 0;
                *(_BYTE *)(v227 + 24) = 0;
                *(_OWORD *)(v226 + 48) = *(_OWORD *)(v227 + 48);
                v226 = v227;
              }
              while (v224 <= (uint64_t)((unint64_t)(v223 - 2) >> 1));
              v242 = (void **)(v227 + 24);
              v243 = (__int128 *)(v227 + 48);
              v244 = (__int128 *)(a2 - 64);
              a2 -= 64;
              if (v227 == v225 - 64)
              {
                *(_DWORD *)(v227 + 16) = v313;
                *(_OWORD *)v227 = v312;
                if (*(char *)(v227 + 47) < 0)
                  operator delete(*v242);
                *(_QWORD *)(v227 + 24) = v304;
                *(_QWORD *)(v227 + 32) = *(_QWORD *)v310;
                *(_QWORD *)(v227 + 39) = *(_QWORD *)&v310[7];
                *(_BYTE *)(v227 + 47) = v306;
                *v243 = v309;
              }
              else
              {
                v245 = *v244;
                *(_DWORD *)(v227 + 16) = *(_DWORD *)(v225 - 48);
                *(_OWORD *)v227 = v245;
                if (*(char *)(v227 + 47) < 0)
                  operator delete(*v242);
                v246 = *(_OWORD *)(v225 - 40);
                *(_QWORD *)(v227 + 40) = *(_QWORD *)(v225 - 24);
                *(_OWORD *)v242 = v246;
                *(_BYTE *)(v225 - 17) = 0;
                *(_BYTE *)(v225 - 40) = 0;
                *v243 = *(_OWORD *)(v225 - 16);
                *(_DWORD *)(v225 - 48) = v313;
                *v244 = v312;
                if (*(char *)(v225 - 17) < 0)
                  operator delete(*(void **)(v225 - 40));
                *(_QWORD *)(v225 - 40) = v304;
                *(_QWORD *)(v225 - 25) = *(_QWORD *)&v310[7];
                *(_QWORD *)(v225 - 32) = *(_QWORD *)v310;
                *(_BYTE *)(v225 - 17) = v306;
                *(_OWORD *)(v225 - 16) = v309;
                v247 = v227 + 64 - a1;
                if (v247 >= 65)
                {
                  v248 = (((unint64_t)v247 >> 6) - 2) >> 1;
                  v249 = a1 + (v248 << 6);
                  v250 = *(char *)(v227 + 47);
                  v251 = *(char *)(v249 + 47);
                  if (v251 >= 0)
                    v252 = *(unsigned __int8 *)(v249 + 47);
                  else
                    v252 = *(_QWORD *)(v249 + 32);
                  if (v251 >= 0)
                    v253 = (const void *)(v249 + 24);
                  else
                    v253 = *(const void **)(v249 + 24);
                  if (v250 >= 0)
                    v254 = *(unsigned __int8 *)(v227 + 47);
                  else
                    v254 = *(_QWORD *)(v227 + 32);
                  if (v250 >= 0)
                    v255 = (const void *)(v227 + 24);
                  else
                    v255 = *(const void **)(v227 + 24);
                  if (v254 >= v252)
                    v256 = v252;
                  else
                    v256 = v254;
                  v257 = memcmp(v253, v255, v256);
                  v258 = v252 < v254;
                  if (v257)
                    v258 = v257 < 0;
                  if (v258)
                  {
                    v326 = *(_DWORD *)(v227 + 16);
                    v319 = *(_OWORD *)v227;
                    v259 = *(_OWORD *)v242;
                    v329 = *(const void **)(v227 + 40);
                    v328 = v259;
                    *(_QWORD *)(v227 + 32) = 0;
                    *(_QWORD *)(v227 + 40) = 0;
                    *v242 = 0;
                    v330 = *v243;
                    if (SHIBYTE(v329) >= 0)
                      v260 = HIBYTE(v329);
                    else
                      v260 = *((_QWORD *)&v328 + 1);
                    if (SHIBYTE(v329) >= 0)
                      v261 = &v328;
                    else
                      v261 = (__int128 *)v328;
                    do
                    {
                      v262 = v249;
                      v263 = *(_OWORD *)v249;
                      *(_DWORD *)(v227 + 16) = *(_DWORD *)(v249 + 16);
                      *(_OWORD *)v227 = v263;
                      v264 = (void **)(v227 + 24);
                      if (*(char *)(v227 + 47) < 0)
                        operator delete(*v264);
                      v265 = *(_OWORD *)(v249 + 24);
                      *(_QWORD *)(v227 + 40) = *(_QWORD *)(v249 + 40);
                      *(_OWORD *)v264 = v265;
                      *(_BYTE *)(v249 + 47) = 0;
                      *(_BYTE *)(v249 + 24) = 0;
                      *(_OWORD *)(v227 + 48) = *(_OWORD *)(v249 + 48);
                      if (!v248)
                        break;
                      v248 = (v248 - 1) >> 1;
                      v249 = a1 + (v248 << 6);
                      v266 = *(char *)(v249 + 47);
                      if (v266 >= 0)
                        v267 = *(unsigned __int8 *)(v249 + 47);
                      else
                        v267 = *(_QWORD *)(v249 + 32);
                      if (v266 >= 0)
                        v268 = (const void *)(v249 + 24);
                      else
                        v268 = *(const void **)(v249 + 24);
                      if (v260 >= v267)
                        v269 = v267;
                      else
                        v269 = v260;
                      v270 = memcmp(v268, v261, v269);
                      v271 = v267 < v260;
                      if (v270)
                        v271 = v270 < 0;
                      v227 = v262;
                    }
                    while (v271);
                    v272 = (void **)(v262 + 24);
                    *(_DWORD *)(v262 + 16) = v326;
                    *(_OWORD *)v262 = v319;
                    if (*(char *)(v262 + 47) < 0)
                      operator delete(*v272);
                    v273 = v328;
                    *(_QWORD *)(v262 + 40) = v329;
                    *(_OWORD *)v272 = v273;
                    *(_OWORD *)(v262 + 48) = v330;
                  }
                }
              }
            }
            while (v223-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = a1 + ((unint64_t)v10 >> 1 << 6);
        if ((unint64_t)v9 <= 0x2000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(v12, a1, (uint64_t)v301);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, v12, (uint64_t)v301);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1 + 64, v12 - 64, a2 - 128);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1 + 128, a1 + 64 + (v11 << 6), a2 - 192);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(v12 - 64, v12, a1 + 64 + (v11 << 6));
          v321 = *(_DWORD *)(a1 + 16);
          v314 = *(_OWORD *)a1;
          *(_QWORD *)((char *)&v308 + 7) = *(_QWORD *)(a1 + 39);
          v13 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)&v308 = *(_QWORD *)(a1 + 32);
          v14 = *(_BYTE *)(a1 + 47);
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          v311 = *(_OWORD *)(a1 + 48);
          v15 = *(_DWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_DWORD *)(a1 + 16) = v15;
          v16 = *(_OWORD *)(v12 + 24);
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(v12 + 40);
          *(_OWORD *)(a1 + 24) = v16;
          *(_BYTE *)(v12 + 47) = 0;
          *(_BYTE *)(v12 + 24) = 0;
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(v12 + 48);
          *(_DWORD *)(v12 + 16) = v321;
          *(_OWORD *)v12 = v314;
          *(_QWORD *)(v12 + 24) = v13;
          *(_QWORD *)(v12 + 32) = v308;
          *(_QWORD *)(v12 + 39) = *(_QWORD *)((char *)&v308 + 7);
          *(_BYTE *)(v12 + 47) = v14;
          *(_OWORD *)(v12 + 48) = v311;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = (void **)(a1 + 24);
          v18 = *(char *)(a1 + 47);
          v19 = *(char *)(a1 - 17);
          if (v19 >= 0)
            v20 = *(unsigned __int8 *)(a1 - 17);
          else
            v20 = *(_QWORD *)(a1 - 32);
          if (v19 >= 0)
            v21 = (const void *)(a1 - 40);
          else
            v21 = *(const void **)(a1 - 40);
          if (v18 >= 0)
            v22 = *(unsigned __int8 *)(a1 + 47);
          else
            v22 = *(_QWORD *)(a1 + 32);
          if (v18 >= 0)
            v23 = (const void *)(a1 + 24);
          else
            v23 = *(const void **)(a1 + 24);
          if (v22 >= v20)
            v24 = v20;
          else
            v24 = v22;
          v25 = memcmp(v21, v23, v24);
          v26 = v20 < v22;
          if (v25)
            v26 = v25 < 0;
          if (!v26)
          {
            v323 = *(_DWORD *)(a1 + 16);
            v316 = *(_OWORD *)a1;
            v79 = *(const void **)(a1 + 40);
            v328 = *(_OWORD *)v17;
            v329 = v79;
            *(_QWORD *)(a1 + 32) = 0;
            *(_QWORD *)(a1 + 40) = 0;
            *v17 = 0;
            v330 = *(_OWORD *)(a1 + 48);
            v80 = *(char *)(a2 - 17);
            if (SHIBYTE(v329) >= 0)
              v81 = HIBYTE(v329);
            else
              v81 = *((_QWORD *)&v328 + 1);
            if (SHIBYTE(v329) >= 0)
              v82 = &v328;
            else
              v82 = (__int128 *)v328;
            if (v80 >= 0)
              v83 = *(unsigned __int8 *)(a2 - 17);
            else
              v83 = *(_QWORD *)(a2 - 32);
            if (v80 >= 0)
              v84 = (const void *)(a2 - 40);
            else
              v84 = *(const void **)(a2 - 40);
            if (v83 >= v81)
              v85 = v81;
            else
              v85 = v83;
            v86 = memcmp(v82, v84, v85);
            v87 = v81 < v83;
            if (v86)
              v87 = v86 < 0;
            if (v87)
            {
              v88 = (const void **)(a1 + 88);
              do
              {
                v89 = *((char *)v88 + 23);
                if (v89 >= 0)
                  v90 = *((unsigned __int8 *)v88 + 23);
                else
                  v90 = (size_t)v88[1];
                if (v89 >= 0)
                  v91 = v88;
                else
                  v91 = *v88;
                if (v90 >= v81)
                  v92 = v81;
                else
                  v92 = v90;
                v93 = memcmp(v82, v91, v92);
                v94 = v81 < v90;
                if (v93)
                  v94 = v93 < 0;
                v88 += 8;
              }
              while (!v94);
              v8 = (__int128 *)(v88 - 11);
            }
            else
            {
              v95 = (__int128 *)(a1 + 64);
              do
              {
                v8 = v95;
                if ((unint64_t)v95 >= a2)
                  break;
                v96 = *((char *)v95 + 47);
                v97 = v6;
                if (v96 >= 0)
                  v98 = *((unsigned __int8 *)v95 + 47);
                else
                  v98 = *((_QWORD *)v95 + 4);
                if (v96 >= 0)
                  v99 = (char *)v95 + 24;
                else
                  v99 = (const void *)*((_QWORD *)v95 + 3);
                if (v98 >= v81)
                  v100 = v81;
                else
                  v100 = v98;
                v101 = memcmp(v82, v99, v100);
                v102 = v81 >= v98;
                v6 = v97;
                v103 = !v102;
                v104 = v101 < 0;
                if (!v101)
                  v104 = v103;
                v95 = v8 + 4;
              }
              while (!v104);
            }
            v105 = (__int128 *)a2;
            if ((unint64_t)v8 < a2)
            {
              v106 = (const void **)(a2 - 40);
              do
              {
                v107 = *((char *)v106 + 23);
                if (v107 >= 0)
                  v108 = *((unsigned __int8 *)v106 + 23);
                else
                  v108 = (size_t)v106[1];
                if (v107 >= 0)
                  v109 = v106;
                else
                  v109 = *v106;
                if (v108 >= v81)
                  v110 = v81;
                else
                  v110 = v108;
                v111 = memcmp(v82, v109, v110);
                v112 = v81 < v108;
                if (v111)
                  v112 = v111 < 0;
                v106 -= 8;
              }
              while (v112);
              v105 = (__int128 *)(v106 + 5);
            }
            while (v8 < v105)
            {
              std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>(v8, v105);
              v113 = (const void **)v8 + 11;
              do
              {
                v114 = v113;
                v115 = *((unsigned __int8 *)v113 + 23);
                if ((v115 & 0x80u) == 0)
                  v116 = v115;
                else
                  v116 = (size_t)v114[1];
                if ((v115 & 0x80u) == 0)
                  v117 = v114;
                else
                  v117 = *v114;
                if (v116 >= v81)
                  v118 = v81;
                else
                  v118 = v116;
                v119 = memcmp(v82, v117, v118);
                v120 = v119 < 0;
                if (!v119)
                  v120 = v81 < v116;
                v113 = v114 + 8;
              }
              while (!v120);
              v8 = (__int128 *)(v114 - 3);
              v121 = (const void **)v105 - 5;
              do
              {
                v122 = v121;
                v123 = *((unsigned __int8 *)v121 + 23);
                if ((v123 & 0x80u) == 0)
                  v124 = v123;
                else
                  v124 = (size_t)v122[1];
                if ((v123 & 0x80u) == 0)
                  v125 = v122;
                else
                  v125 = *v122;
                if (v124 >= v81)
                  v126 = v81;
                else
                  v126 = v124;
                v127 = memcmp(v82, v125, v126);
                v128 = v127 < 0;
                if (!v127)
                  v128 = v81 < v124;
                v121 = v122 - 8;
              }
              while (v128);
              v105 = (__int128 *)(v122 - 3);
            }
            v129 = v8 - 4;
            v7 = a2;
            v6 = &v330;
            if (v8 - 4 != (__int128 *)a1)
            {
              v130 = *v129;
              *(_DWORD *)(a1 + 16) = *((_DWORD *)v8 - 12);
              *(_OWORD *)a1 = v130;
              if (*(char *)(a1 + 47) < 0)
                operator delete(*v17);
              v131 = *(__int128 *)((char *)v8 - 40);
              *(_QWORD *)(a1 + 40) = *((_QWORD *)v8 - 3);
              *(_OWORD *)v17 = v131;
              *((_BYTE *)v8 - 17) = 0;
              *((_BYTE *)v8 - 40) = 0;
              *(_OWORD *)(a1 + 48) = *(v8 - 1);
            }
            *((_DWORD *)v8 - 12) = v323;
            *v129 = v316;
            v132 = (void **)v8 - 5;
            if (*((char *)v8 - 17) < 0)
              operator delete(*v132);
            a4 = 0;
            v133 = v328;
            *((_QWORD *)v8 - 3) = v329;
            *(_OWORD *)v132 = v133;
            *(v8 - 1) = v330;
            continue;
          }
        }
        v27 = 0;
        v322 = *(_DWORD *)(a1 + 16);
        v315 = *(_OWORD *)a1;
        v28 = (void **)(a1 + 24);
        v29 = *(const void **)(a1 + 40);
        v328 = *(_OWORD *)(a1 + 24);
        v329 = v29;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v330 = *(_OWORD *)(a1 + 48);
        if (SHIBYTE(v329) >= 0)
          v30 = HIBYTE(v329);
        else
          v30 = *((_QWORD *)&v328 + 1);
        if (SHIBYTE(v329) >= 0)
          v31 = &v328;
        else
          v31 = (__int128 *)v328;
        do
        {
          v32 = *(char *)(a1 + v27 + 111);
          if (v32 >= 0)
            v33 = *(unsigned __int8 *)(a1 + v27 + 111);
          else
            v33 = *(_QWORD *)(a1 + v27 + 96);
          if (v32 >= 0)
            v34 = (const void *)(a1 + v27 + 88);
          else
            v34 = *(const void **)(a1 + v27 + 88);
          if (v30 >= v33)
            v35 = v33;
          else
            v35 = v30;
          v36 = memcmp(v34, v31, v35);
          v37 = v33 < v30;
          if (v36)
            v37 = v36 < 0;
          v27 += 64;
        }
        while (v37);
        v38 = a1 + v27;
        v39 = a1 + v27 - 64;
        v40 = (const void **)(a2 - 40);
        if (v39 == a1)
        {
          v48 = (const void **)(a2 - 40);
          while (1)
          {
            v47 = (__int128 *)(v48 + 5);
            if (v38 >= (unint64_t)(v48 + 5))
              break;
            v49 = *((char *)v48 + 23);
            if (v49 >= 0)
              v50 = *((unsigned __int8 *)v48 + 23);
            else
              v50 = (size_t)v48[1];
            if (v49 >= 0)
              v51 = v48;
            else
              v51 = *v48;
            if (v30 >= v50)
              v52 = v50;
            else
              v52 = v30;
            v53 = memcmp(v51, v31, v52);
            v54 = v50 < v30;
            if (v53)
              v54 = v53 < 0;
            v48 -= 8;
            if (v54)
            {
              v47 = (__int128 *)(v48 + 5);
              break;
            }
          }
        }
        else
        {
          do
          {
            v41 = *((char *)v40 + 23);
            if (v41 >= 0)
              v42 = *((unsigned __int8 *)v40 + 23);
            else
              v42 = (size_t)v40[1];
            if (v41 >= 0)
              v43 = v40;
            else
              v43 = *v40;
            if (v30 >= v42)
              v44 = v42;
            else
              v44 = v30;
            v45 = memcmp(v43, v31, v44);
            v46 = v42 < v30;
            if (v45)
              v46 = v45 < 0;
            v40 -= 8;
          }
          while (!v46);
          v47 = (__int128 *)(v40 + 5);
        }
        v55 = a3;
        v8 = (__int128 *)v38;
        if (v38 < (unint64_t)v47)
        {
          v56 = v47;
          do
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>(v8, v56);
            v57 = (const void **)v8 + 11;
            do
            {
              v58 = v57;
              v59 = *((unsigned __int8 *)v57 + 23);
              if ((v59 & 0x80u) == 0)
                v60 = v59;
              else
                v60 = (size_t)v58[1];
              if ((v59 & 0x80u) == 0)
                v61 = v58;
              else
                v61 = *v58;
              if (v30 >= v60)
                v62 = v60;
              else
                v62 = v30;
              v63 = memcmp(v61, v31, v62);
              v64 = v63 < 0;
              if (!v63)
                v64 = v60 < v30;
              v57 = v58 + 8;
            }
            while (v64);
            v8 = (__int128 *)(v58 - 3);
            v65 = (const void **)v56 - 5;
            do
            {
              v66 = v65;
              v67 = *((unsigned __int8 *)v65 + 23);
              if ((v67 & 0x80u) == 0)
                v68 = v67;
              else
                v68 = (size_t)v66[1];
              if ((v67 & 0x80u) == 0)
                v69 = v66;
              else
                v69 = *v66;
              if (v30 >= v68)
                v70 = v68;
              else
                v70 = v30;
              v71 = memcmp(v69, v31, v70);
              v72 = v71 < 0;
              if (!v71)
                v72 = v68 < v30;
              v65 = v66 - 8;
            }
            while (!v72);
            v56 = (__int128 *)(v66 - 3);
          }
          while (v8 < v56);
        }
        v73 = v8 - 4;
        a3 = v55;
        v6 = &v330;
        if (v8 - 4 != (__int128 *)a1)
        {
          v74 = *v73;
          *(_DWORD *)(a1 + 16) = *((_DWORD *)v8 - 12);
          *(_OWORD *)a1 = v74;
          if (*(char *)(a1 + 47) < 0)
            operator delete(*v28);
          v75 = *(__int128 *)((char *)v8 - 40);
          *(_QWORD *)(a1 + 40) = *((_QWORD *)v8 - 3);
          *(_OWORD *)v28 = v75;
          *((_BYTE *)v8 - 17) = 0;
          *((_BYTE *)v8 - 40) = 0;
          *(_OWORD *)(a1 + 48) = *(v8 - 1);
        }
        *((_DWORD *)v8 - 12) = v322;
        *v73 = v315;
        v76 = (void **)v8 - 5;
        if (*((char *)v8 - 17) < 0)
          operator delete(*v76);
        v77 = v328;
        *((_QWORD *)v8 - 3) = v329;
        *(_OWORD *)v76 = v77;
        *(v8 - 1) = v330;
        v7 = a2;
        if (v38 < (unint64_t)v47)
        {
LABEL_113:
          std::__introsort<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,false>(a1, v8 - 4, v55, a4 & 1);
          a4 = 0;
          continue;
        }
        v78 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, (uint64_t)(v8 - 4));
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>((uint64_t)v8, a2))
        {
          if (v78)
            continue;
          goto LABEL_113;
        }
        a2 = (unint64_t)(v8 - 4);
        if (!v78)
          goto LABEL_2;
        return;
    }
  }
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;
  __n128 *v7;
  __n128 result;
  __n128 v9;
  _BYTE v10[15];
  __int128 v11;
  int v12;

  v11 = *a1;
  v12 = *((_DWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 3);
  *(_QWORD *)v10 = *((_QWORD *)a1 + 4);
  *(_QWORD *)&v10[7] = *(_QWORD *)((char *)a1 + 39);
  v4 = *((_BYTE *)a1 + 47);
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 3) = 0;
  v9 = (__n128)a1[3];
  v5 = *((_DWORD *)a2 + 4);
  *a1 = *a2;
  *((_DWORD *)a1 + 4) = v5;
  v6 = *((_QWORD *)a2 + 5);
  *(__int128 *)((char *)a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a1 + 5) = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (__n128 *)(a2 + 3);
  a1[3] = a2[3];
  *a2 = v11;
  *((_DWORD *)a2 + 4) = v12;
  if (*((char *)a2 + 47) < 0)
    operator delete(*((void **)a2 + 3));
  *((_QWORD *)a2 + 3) = v3;
  *((_QWORD *)a2 + 4) = *(_QWORD *)v10;
  *(_QWORD *)((char *)a2 + 39) = *(_QWORD *)&v10[7];
  *((_BYTE *)a2 + 47) = v4;
  result = v9;
  *v7 = v9;
  return result;
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  const void *v7;
  int v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  BOOL v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  double result;
  _BOOL4 v23;
  __int128 *v24;
  int v25;
  int v26;
  size_t v27;
  const void *v28;
  size_t v29;
  const void *v30;
  size_t v31;
  int v32;
  _BOOL4 v33;
  __int128 *v34;
  int v35;
  int v36;
  size_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  _BOOL4 v43;

  v6 = (const void *)(a2 + 24);
  v7 = (const void *)(a1 + 24);
  v8 = *(char *)(a1 + 47);
  v9 = *(char *)(a2 + 47);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 47);
  else
    v10 = *(_QWORD *)(a2 + 32);
  if (v9 >= 0)
    v11 = (const void *)(a2 + 24);
  else
    v11 = *(const void **)(a2 + 24);
  if (v8 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  if (v8 >= 0)
    v13 = (const void *)(a1 + 24);
  else
    v13 = *(const void **)(a1 + 24);
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  if (v15)
    v16 = v15 < 0;
  else
    v16 = v10 < v12;
  v17 = *(char *)(a3 + 47);
  if (v17 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 47);
  else
    v18 = *(_QWORD *)(a3 + 32);
  if (v17 >= 0)
    v19 = (const void *)(a3 + 24);
  else
    v19 = *(const void **)(a3 + 24);
  if (v10 >= v18)
    v20 = v18;
  else
    v20 = v10;
  v21 = memcmp(v19, v11, v20);
  v23 = v18 < v10;
  if (v21)
    v23 = v21 < 0;
  if (v16)
  {
    v24 = (__int128 *)a1;
    if (v23)
    {
LABEL_51:
      v34 = (__int128 *)a3;
LABEL_72:
      *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>(v24, v34).n128_u64[0];
      return result;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a1, (__int128 *)a2);
    v25 = *(char *)(a2 + 47);
    v26 = *(char *)(a3 + 47);
    if (v26 >= 0)
      v27 = *(unsigned __int8 *)(a3 + 47);
    else
      v27 = *(_QWORD *)(a3 + 32);
    if (v26 >= 0)
      v28 = (const void *)(a3 + 24);
    else
      v28 = *(const void **)(a3 + 24);
    if (v25 >= 0)
      v29 = *(unsigned __int8 *)(a2 + 47);
    else
      v29 = *(_QWORD *)(a2 + 32);
    if (v25 >= 0)
      v30 = v6;
    else
      v30 = *(const void **)(a2 + 24);
    if (v29 >= v27)
      v31 = v27;
    else
      v31 = v29;
    v32 = memcmp(v28, v30, v31);
    v33 = v27 < v29;
    if (v32)
      v33 = v32 < 0;
    if (v33)
    {
      v24 = (__int128 *)a2;
      goto LABEL_51;
    }
  }
  else if (v23)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a2, (__int128 *)a3);
    v35 = *(char *)(a1 + 47);
    v36 = *(char *)(a2 + 47);
    if (v36 >= 0)
      v37 = *(unsigned __int8 *)(a2 + 47);
    else
      v37 = *(_QWORD *)(a2 + 32);
    if (v36 >= 0)
      v38 = v6;
    else
      v38 = *(const void **)(a2 + 24);
    if (v35 >= 0)
      v39 = *(unsigned __int8 *)(a1 + 47);
    else
      v39 = *(_QWORD *)(a1 + 32);
    if (v35 >= 0)
      v40 = v7;
    else
      v40 = *(const void **)(a1 + 24);
    if (v39 >= v37)
      v41 = v37;
    else
      v41 = v39;
    v42 = memcmp(v38, v40, v41);
    v43 = v37 < v39;
    if (v42)
      v43 = v42 < 0;
    if (v43)
    {
      v24 = (__int128 *)a1;
      v34 = (__int128 *)a2;
      goto LABEL_72;
    }
  }
  return result;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  double result;
  _BOOL4 v17;
  int v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  int v27;
  int v28;
  size_t v29;
  const void *v30;
  size_t v31;
  const void *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a2, a3);
  v8 = *(char *)(a3 + 47);
  v9 = *(char *)(a4 + 47);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(a4 + 47);
  else
    v10 = *(_QWORD *)(a4 + 32);
  if (v9 >= 0)
    v11 = (const void *)(a4 + 24);
  else
    v11 = *(const void **)(a4 + 24);
  if (v8 >= 0)
    v12 = *(unsigned __int8 *)(a3 + 47);
  else
    v12 = *(_QWORD *)(a3 + 32);
  if (v8 >= 0)
    v13 = (const void *)(a3 + 24);
  else
    v13 = *(const void **)(a3 + 24);
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  v17 = v10 < v12;
  if (v15)
    v17 = v15 < 0;
  if (v17)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a3, (__int128 *)a4);
    v18 = *(char *)(a2 + 47);
    v19 = *(char *)(a3 + 47);
    if (v19 >= 0)
      v20 = *(unsigned __int8 *)(a3 + 47);
    else
      v20 = *(_QWORD *)(a3 + 32);
    if (v19 >= 0)
      v21 = (const void *)(a3 + 24);
    else
      v21 = *(const void **)(a3 + 24);
    if (v18 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 47);
    else
      v22 = *(_QWORD *)(a2 + 32);
    if (v18 >= 0)
      v23 = (const void *)(a2 + 24);
    else
      v23 = *(const void **)(a2 + 24);
    if (v22 >= v20)
      v24 = v20;
    else
      v24 = v22;
    v25 = memcmp(v21, v23, v24);
    v26 = v20 < v22;
    if (v25)
      v26 = v25 < 0;
    if (v26)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a2, (__int128 *)a3);
      v27 = *(char *)(a1 + 47);
      v28 = *(char *)(a2 + 47);
      if (v28 >= 0)
        v29 = *(unsigned __int8 *)(a2 + 47);
      else
        v29 = *(_QWORD *)(a2 + 32);
      if (v28 >= 0)
        v30 = (const void *)(a2 + 24);
      else
        v30 = *(const void **)(a2 + 24);
      if (v27 >= 0)
        v31 = *(unsigned __int8 *)(a1 + 47);
      else
        v31 = *(_QWORD *)(a1 + 32);
      if (v27 >= 0)
        v32 = (const void *)(a1 + 24);
      else
        v32 = *(const void **)(a1 + 24);
      if (v31 >= v29)
        v33 = v29;
      else
        v33 = v31;
      v34 = memcmp(v30, v32, v33);
      v35 = v29 < v31;
      if (v34)
        v35 = v34 < 0;
      if (v35)
        *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a1, (__int128 *)a2).n128_u64[0];
    }
  }
  return result;
}

double std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  double result;
  _BOOL4 v19;
  int v20;
  int v21;
  size_t v22;
  const void *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  size_t v31;
  const void *v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  _BOOL4 v37;
  int v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  const void *v43;
  size_t v44;
  int v45;
  _BOOL4 v46;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a2, a3, a4);
  v10 = *(char *)(a4 + 47);
  v11 = *(char *)(a5 + 47);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(a5 + 47);
  else
    v12 = *(_QWORD *)(a5 + 32);
  if (v11 >= 0)
    v13 = (const void *)(a5 + 24);
  else
    v13 = *(const void **)(a5 + 24);
  if (v10 >= 0)
    v14 = *(unsigned __int8 *)(a4 + 47);
  else
    v14 = *(_QWORD *)(a4 + 32);
  if (v10 >= 0)
    v15 = (const void *)(a4 + 24);
  else
    v15 = *(const void **)(a4 + 24);
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v19 = v12 < v14;
  if (v17)
    v19 = v17 < 0;
  if (v19)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a4, (__int128 *)a5);
    v20 = *(char *)(a3 + 47);
    v21 = *(char *)(a4 + 47);
    if (v21 >= 0)
      v22 = *(unsigned __int8 *)(a4 + 47);
    else
      v22 = *(_QWORD *)(a4 + 32);
    if (v21 >= 0)
      v23 = (const void *)(a4 + 24);
    else
      v23 = *(const void **)(a4 + 24);
    if (v20 >= 0)
      v24 = *(unsigned __int8 *)(a3 + 47);
    else
      v24 = *(_QWORD *)(a3 + 32);
    if (v20 >= 0)
      v25 = (const void *)(a3 + 24);
    else
      v25 = *(const void **)(a3 + 24);
    if (v24 >= v22)
      v26 = v22;
    else
      v26 = v24;
    v27 = memcmp(v23, v25, v26);
    v28 = v22 < v24;
    if (v27)
      v28 = v27 < 0;
    if (v28)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a3, (__int128 *)a4);
      v29 = *(char *)(a2 + 47);
      v30 = *(char *)(a3 + 47);
      if (v30 >= 0)
        v31 = *(unsigned __int8 *)(a3 + 47);
      else
        v31 = *(_QWORD *)(a3 + 32);
      if (v30 >= 0)
        v32 = (const void *)(a3 + 24);
      else
        v32 = *(const void **)(a3 + 24);
      if (v29 >= 0)
        v33 = *(unsigned __int8 *)(a2 + 47);
      else
        v33 = *(_QWORD *)(a2 + 32);
      if (v29 >= 0)
        v34 = (const void *)(a2 + 24);
      else
        v34 = *(const void **)(a2 + 24);
      if (v33 >= v31)
        v35 = v31;
      else
        v35 = v33;
      v36 = memcmp(v32, v34, v35);
      v37 = v31 < v33;
      if (v36)
        v37 = v36 < 0;
      if (v37)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a2, (__int128 *)a3);
        v38 = *(char *)(a1 + 47);
        v39 = *(char *)(a2 + 47);
        if (v39 >= 0)
          v40 = *(unsigned __int8 *)(a2 + 47);
        else
          v40 = *(_QWORD *)(a2 + 32);
        if (v39 >= 0)
          v41 = (const void *)(a2 + 24);
        else
          v41 = *(const void **)(a2 + 24);
        if (v38 >= 0)
          v42 = *(unsigned __int8 *)(a1 + 47);
        else
          v42 = *(_QWORD *)(a1 + 32);
        if (v38 >= 0)
          v43 = (const void *)(a1 + 24);
        else
          v43 = *(const void **)(a1 + 24);
        if (v42 >= v40)
          v44 = v40;
        else
          v44 = v42;
        v45 = memcmp(v41, v43, v44);
        v46 = v40 < v42;
        if (v45)
          v46 = v45 < 0;
        if (v46)
          *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a1, (__int128 *)a2).n128_u64[0];
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 *v19;
  const void *v20;
  uint64_t v21;
  const void *v22;
  int v23;
  int v24;
  size_t v25;
  const void *v26;
  size_t v27;
  const void *v28;
  size_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  int v36;
  size_t v37;
  __int128 *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  __int128 v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;

  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(char *)(a1 + 47);
      v7 = *(char *)(a2 - 17);
      if (v7 >= 0)
        v8 = *(unsigned __int8 *)(a2 - 17);
      else
        v8 = *(_QWORD *)(a2 - 32);
      if (v7 >= 0)
        v9 = (const void *)(a2 - 40);
      else
        v9 = *(const void **)(a2 - 40);
      if (v6 >= 0)
        v10 = *(unsigned __int8 *)(a1 + 47);
      else
        v10 = *(_QWORD *)(a1 + 32);
      if (v6 >= 0)
        v11 = (const void *)(a1 + 24);
      else
        v11 = *(const void **)(a1 + 24);
      if (v10 >= v8)
        v12 = v8;
      else
        v12 = v10;
      v13 = memcmp(v9, v11, v12);
      v14 = v8 < v10;
      if (v13)
        v14 = v13 < 0;
      if (v14)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<GenericVarying *&,GenericVarying *&>((__int128 *)a1, (__int128 *)(a2 - 64));
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, a2 - 64);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, a1 + 128, a2 - 64);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *,0>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 64);
      return 1;
    default:
      v15 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,GenericVaryingAllocator::getVaryingSignature(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *,flatbuffers::Offset<flatbuffers::Vector<unsigned char>> *)::$_0 &,GenericVarying *>(a1, a1 + 64, a1 + 128);
      v16 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v17 = 0;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = (__int128 *)(v16 + 24);
    v22 = *(const void **)(v15 + 24);
    v21 = v15 + 24;
    v20 = v22;
    v23 = *(char *)(v21 + 23);
    v24 = *(char *)(v16 + 47);
    if (v24 >= 0)
      v25 = *(unsigned __int8 *)(v16 + 47);
    else
      v25 = *(_QWORD *)(v16 + 32);
    if (v24 >= 0)
      v26 = (const void *)(v16 + 24);
    else
      v26 = *(const void **)(v16 + 24);
    if (v23 >= 0)
      v27 = *(unsigned __int8 *)(v21 + 23);
    else
      v27 = *(_QWORD *)(v21 + 8);
    if (v23 >= 0)
      v28 = (const void *)v21;
    else
      v28 = v20;
    if (v27 >= v25)
      v29 = v25;
    else
      v29 = v27;
    v30 = memcmp(v26, v28, v29);
    v31 = v25 < v27;
    if (v30)
      v31 = v30 < 0;
    if (v31)
    {
      v47 = *(_OWORD *)v16;
      v48 = *(_DWORD *)(v16 + 16);
      v49 = *v19;
      v50 = *(_QWORD *)(v16 + 40);
      *(_QWORD *)v19 = 0;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      v32 = v17;
      v51 = *(_OWORD *)(v16 + 48);
      while (1)
      {
        v33 = a1 + v32;
        *(_OWORD *)(v33 + 192) = *(_OWORD *)(a1 + v32 + 128);
        *(_DWORD *)(v33 + 208) = *(_DWORD *)(a1 + v32 + 144);
        v34 = (void **)(a1 + v32 + 216);
        if (*(char *)(a1 + v32 + 239) < 0)
          operator delete(*v34);
        *(_OWORD *)v34 = *(_OWORD *)(v33 + 152);
        *(_QWORD *)(a1 + v32 + 232) = *(_QWORD *)(v33 + 168);
        *(_BYTE *)(v33 + 175) = 0;
        *(_BYTE *)(v33 + 152) = 0;
        *(_OWORD *)(v33 + 240) = *(_OWORD *)(v33 + 176);
        if (v32 == -128)
          break;
        v35 = a1 + v32;
        v36 = *(char *)(a1 + v32 + 111);
        if (v50 >= 0)
          v37 = HIBYTE(v50);
        else
          v37 = *((_QWORD *)&v49 + 1);
        if (v50 >= 0)
          v38 = &v49;
        else
          v38 = (__int128 *)v49;
        if (v36 >= 0)
          v39 = *(unsigned __int8 *)(a1 + v32 + 111);
        else
          v39 = *(_QWORD *)(a1 + v32 + 96);
        if (v36 >= 0)
          v40 = (const void *)(a1 + v32 + 88);
        else
          v40 = *(const void **)(a1 + v32 + 88);
        if (v39 >= v37)
          v41 = v37;
        else
          v41 = v39;
        v42 = memcmp(v38, v40, v41);
        v43 = v37 < v39;
        if (v42)
          v43 = v42 < 0;
        v32 -= 64;
        if (!v43)
        {
          v44 = v35 + 152;
          v45 = a1 + v32 + 192;
          v46 = (_OWORD *)(v35 + 176);
          goto LABEL_65;
        }
      }
      v44 = a1 + 24;
      v46 = (_OWORD *)(a1 + 48);
      v45 = a1;
LABEL_65:
      *(_OWORD *)v45 = v47;
      *(_DWORD *)(v45 + 16) = v48;
      if (*(char *)(v45 + 47) < 0)
        operator delete(*(void **)v44);
      *(_OWORD *)v44 = v49;
      *(_QWORD *)(v44 + 16) = v50;
      *v46 = v51;
      if (++v18 == 8)
        return v16 + 64 == a2;
    }
    v15 = v16;
    v17 += 64;
    v16 += 64;
    if (v16 == a2)
      return 1;
  }
}

uint64_t std::istringstream::basic_istringstream[abi:nn180100](uint64_t a1, const std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v4 = MEMORY[0x1E0DE4FD8];
  v5 = MEMORY[0x1E0DE4FD8] + 64;
  *(_QWORD *)(a1 + 120) = MEMORY[0x1E0DE4FD8] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + *(_QWORD *)(v7 - 24)) = v6;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 16));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v4 + 24;
  *(_QWORD *)(a1 + 120) = v5;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  std::string::operator=((std::string *)(a1 + 80), a2);
  *(_QWORD *)(a1 + 104) = 0;
  v9 = *(_BYTE *)(a1 + 103);
  if (v9 < 0)
  {
    v10 = *(_QWORD *)(a1 + 80);
    v11 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    v10 = a1 + 80;
    v11 = *(unsigned __int8 *)(a1 + 103);
  }
  v12 = *(_DWORD *)(a1 + 112);
  if ((v12 & 8) != 0)
  {
    *(_QWORD *)(a1 + 104) = v10 + v11;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v10 + v11;
  }
  if ((v12 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 104) = v10 + v11;
    v13 = v9 < 0 ? (*(_QWORD *)(a1 + 96) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize((std::string *)(a1 + 80), v13, 0);
    v14 = *(char *)(a1 + 103) < 0 ? *(_QWORD *)(a1 + 88) : *(unsigned __int8 *)(a1 + 103);
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = v10 + v14;
    if ((*(_BYTE *)(a1 + 112) & 3) != 0)
    {
      if (v11 >> 31)
      {
        v15 = ((v11 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v16 = 0x7FFFFFFF * ((v15 + ((v11 - 0x80000000 - v15) >> 1)) >> 30);
        v10 += v16 + 0x7FFFFFFF;
        v11 = v11 - v16 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 64) = v10;
      }
      if (v11)
        *(_QWORD *)(a1 + 64) = v10 + v11;
    }
  }
  return a1;
}

uint64_t AGCLLVMUserShader::setupLIBMetadata(uint32x2_t *a1, unsigned int a2, _WORD *a3, uint64_t a4, uint64_t a5, llvm::StringMapImpl *a6, llvm::StringMapImpl *a7)
{
  char v10;
  unsigned int v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint32x2_t *v16;
  llvm::StringMapImpl *v17;
  unint64_t v18;
  std::string *v20;
  std::string::size_type v21;
  void **v22;
  std::string::size_type v23;
  uint32x2_t *v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  uint64_t v30;
  char v31;
  std::string v32;
  unsigned int __val;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;

  v10 = 0;
  v35 = 1;
  v36 = a2;
  v34 = 0;
  v11 = *(_DWORD *)(a4 + 8);
  if (v11 > a2)
  {
    v10 = 0;
    v26 = a1 + 46;
    while (1)
    {
      v13 = a2;
      if (isStringMDNode(*(llvm::MDString **)(a4 - 8 * v11 + 8 * a2), "implicit")
        || isStringMDNode(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8 * v13), "explicit"))
      {
        goto LABEL_5;
      }
      if ((parseMDInt("air.imageblock_data_size", a4, &v36, &v34) & 1) != 0)
      {
        a2 = v36;
        v11 = *(_DWORD *)(a4 + 8);
        v10 = 1;
        goto LABEL_8;
      }
      if ((parseMDInt("air.arg_type_align_size", a4, &v36, &v35) & 1) == 0)
        break;
LABEL_7:
      a2 = v36;
      v11 = *(_DWORD *)(a4 + 8);
LABEL_8:
      if (a2 >= v11)
        goto LABEL_25;
    }
    LODWORD(v13) = v36;
    if (isStringMDNode(*(llvm::MDString **)(a4 - 8 * *(unsigned int *)(a4 + 8) + 8 * v36), "air.alias_implicit_imageblock"))
    {
      *a3 = 0;
LABEL_5:
      v14 = v13 + 1;
    }
    else
    {
      __val = 0;
      if (parseMDInt("air.alias_implicit_imageblock_render_target", a4, &v36, &__val))
      {
        if (((*(unsigned __int8 *)(a5 + 32) >> __val) & 1) == 0)
        {
          std::to_string(&v32, __val);
          v20 = std::string::insert(&v32, 0, "Aliasing implicit image block at unset color attachment: ");
          v21 = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v29 = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          if (v29 >= 0)
            v22 = __p;
          else
            v22 = (void **)__p[0];
          if (v29 >= 0)
            v23 = HIBYTE(v29);
          else
            v23 = (std::string::size_type)__p[1];
          std::string::append((std::string *)((char *)&a1[1] + *(_QWORD *)(*(_QWORD *)a1 - 24)), (const std::string::value_type *)v22, v23);
          if (SHIBYTE(v29) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
          return 0;
        }
        *a3 = *(_DWORD *)(*(_QWORD *)((char *)&v26[4] + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 868)
            * (*(_DWORD *)(a5 + 4 * __val) >> 12);
        goto LABEL_7;
      }
      v32.__r_.__value_.__r.__words[0] = 0;
      if (parseMDType<llvm::MDNode>("air.struct_type_info", a4, &v36, &v32))
      {
        __p[0] = 0;
        __p[1] = 0;
        LODWORD(v29) = -1;
        v30 = 0;
        v31 = 0;
        v15 = v32.__r_.__value_.__r.__words[0];
        v16 = a1;
        v17 = a6;
        goto LABEL_21;
      }
      v27 = 0;
      if (parseMDType<llvm::MDNode>("air.imageblock_master", a4, &v36, &v27))
      {
        __p[0] = 0;
        __p[1] = 0;
        LODWORD(v29) = -1;
        v30 = 0;
        v31 = 0;
        v15 = v27;
        v16 = a1;
        v17 = a7;
LABEL_21:
        if ((AGCLLVMUserShader::setupLIBStruct(v16, v15, __p, v17) & 1) == 0)
          return 0;
        goto LABEL_7;
      }
      v14 = v36 + 1;
    }
    v36 = v14;
    goto LABEL_7;
  }
LABEL_25:
  v18 = ((unint64_t)(v35 + (unsigned __int16)*a3) - 1) / v35 * v35;
  *a3 = v18;
  if ((v10 & 1) != 0)
  {
    a1[539] = vmax_u32(a1[539], (uint32x2_t)vdup_n_s32(v34 + (unsigned __int16)v18));
    if ((*(_BYTE *)(a5 + 35) & 2) != 0)
    {
      std::string::append((std::string *)((char *)&a1[1] + *(_QWORD *)(*(_QWORD *)a1 - 24)), "Large MRT not supported with explicit image blocks");
      return 0;
    }
  }
  else
  {
    a1[539] = vmax_u32(a1[539], (uint32x2_t)vdup_n_s32(v34));
  }
  return 1;
}

uint64_t AGCLLVMUserShader::setupLIBStruct(_QWORD *a1, uint64_t a2, _DWORD *a3, llvm::StringMapImpl *a4)
{
  uint64_t v7;
  _BOOL4 v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  llvm::MDString *v14;
  int v15;
  void *String;
  size_t v17;
  unsigned int v18;
  _BYTE *v19;
  llvm::MDString *v20;
  int v21;
  void *v22;
  size_t v23;
  int v24;
  std::string::size_type size;
  std::string *p_s;
  int v27;
  std::string::size_type v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  std::string *v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  int data;
  BOOL v38;
  std::string::size_type v39;
  std::string *v40;
  std::string *v41;
  const std::string::value_type *p_dst;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  __int128 v49;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  std::string::size_type v54;
  std::string::size_type v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  void *__dst;
  std::string::size_type v61;
  uint64_t v62;
  std::string __s;
  __int128 v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  unsigned int v68;
  std::string v69;
  std::string v70;
  void *__p;
  char v72;
  uint64_t v73;
  std::string v74;
  unsigned int v75;
  char v76[9];

  v68 = 0;
  if (!*(_DWORD *)(a2 + 8))
    return 1;
  v54 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v55 = *MEMORY[0x1E0DE4F58];
  v57 = a1 + 25;
  v58 = a1 + 23;
  v51 = a1 + 19;
  v52 = a1 + 21;
  v56 = a1 + 24;
  v53 = MEMORY[0x1E0DE4FB8] + 16;
  LODWORD(v7) = 1;
  while (1)
  {
    v67 = 0;
    v8 = parseMDType<llvm::MDNode>("air.struct_type_info", a2, &v68, &v67);
    v64 = 0uLL;
    LODWORD(v65) = -1;
    *((_QWORD *)&v65 + 1) = 0;
    v66 = 0;
    v9 = v68;
    v10 = v68 + 1;
    LODWORD(v70.__r_.__value_.__l.__data_) = v68;
    v11 = parseMDInt(0, a2, (unsigned int *)&v70, &v64);
    LODWORD(v64) = v64 + *a3;
    v68 = v9 + 2;
    LODWORD(v70.__r_.__value_.__l.__data_) = v10;
    v12 = parseMDInt(0, a2, (unsigned int *)&v70, (_DWORD *)&v64 + 1);
    LODWORD(v70.__r_.__value_.__l.__data_) = v9 + 2;
    v13 = parseMDInt(0, a2, (unsigned int *)&v70, (_DWORD *)&v64 + 2);
    v14 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v9 + 3));
    if (v14 && *(_BYTE *)v14)
      v14 = 0;
    if (v14)
      v15 = v11 & v12 & v13;
    else
      v15 = 0;
    String = (void *)llvm::MDString::getString(v14);
    if (String)
      std::string::basic_string[abi:nn180100](&__s, String, v17);
    else
      memset(&__s, 0, sizeof(__s));
    v18 = v9 + 5;
    v68 = v9 + 5;
    v19 = *(_BYTE **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v9 + 4));
    if (v19)
    {
      if (*v19)
        v20 = 0;
      else
        v20 = *(llvm::MDString **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8 * (v9 + 4));
    }
    else
    {
      v20 = 0;
    }
    if (v20)
      v21 = v15;
    else
      v21 = 0;
    v22 = (void *)llvm::MDString::getString(v20);
    if (v22)
    {
      std::string::basic_string[abi:nn180100](&__dst, v22, v23);
    }
    else
    {
      __dst = 0;
      v61 = 0;
      v62 = 0;
    }
    if (v18 < *(_DWORD *)(a2 + 8))
    {
      if (parseMDInt("air.raster_order_group", a2, &v68, &v65))
      {
        v24 = v65;
        if (v65 >= 7)
          v24 = 7;
        LODWORD(v65) = v24;
      }
      if (a3[4] != -1)
        LODWORD(v65) = a3[4];
      if (v68 < *(_DWORD *)(a2 + 8) && parseMDInt("air.render_target", a2, &v68, (_DWORD *)&v64 + 3))
      {
        LOBYTE(size) = *((_BYTE *)&__s.__r_.__value_.__s + 23);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__s.__r_.__value_.__l.__size_)
          {
            v75 = 1;
            std::string::__init_copy_ctor_external(&v74, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
            LOBYTE(size) = *((_BYTE *)&__s.__r_.__value_.__s + 23);
            goto LABEL_37;
          }
        }
        else if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
        {
          v75 = 1;
          v74 = __s;
LABEL_37:
          size = size;
          p_s = &__s;
          if ((size & 0x80u) != 0)
          {
            size = __s.__r_.__value_.__l.__size_;
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          v27 = p_s->__r_.__value_.__s.__data_[size - 1];
          if ((v27 & 0x80000000) == 0
            && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v27 + 60) & 0x400) != 0)
          {
            std::string::basic_string(&v70, &__s, 0, size - 1, (std::allocator<char> *)&v69);
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v74.__r_.__value_.__l.__data_);
            v74 = v70;
            v28 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
            if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v28 = __s.__r_.__value_.__l.__size_;
            std::string::basic_string(&v69, &__s, v28 - 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v76);
            std::istringstream::basic_istringstream[abi:nn180100]((uint64_t)&v70, &v69);
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69.__r_.__value_.__l.__data_);
            MEMORY[0x1CAA2D548](&v70, &v75);
            v70.__r_.__value_.__r.__words[0] = v55;
            *(std::string::size_type *)((char *)v70.__r_.__value_.__r.__words + *(_QWORD *)(v55 - 24)) = v54;
            v70.__r_.__value_.__r.__words[2] = v53;
            if (v72 < 0)
              operator delete(__p);
            std::streambuf::~streambuf();
            std::istream::~istream();
            MEMORY[0x1CAA2D638](&v73);
          }
          v29 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
          if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            switch(*((_BYTE *)&v74.__r_.__value_.__s + 23))
            {
              case 3:
                v30 = LOWORD(v74.__r_.__value_.__l.__data_) == 28265 && v74.__r_.__value_.__s.__data_[2] == 116;
                goto LABEL_60;
              case 4:
                v32 = v57;
                if (LODWORD(v74.__r_.__value_.__l.__data_) == 1953393013)
                  goto LABEL_94;
                v33 = &v74;
                goto LABEL_77;
              case 5:
                v34 = LODWORD(v74.__r_.__value_.__l.__data_) == 1919903859 && v74.__r_.__value_.__s.__data_[4] == 116;
                v32 = v56;
                if (v34)
                  goto LABEL_94;
                v35 = LODWORD(v74.__r_.__value_.__l.__data_) == 1634692198 && v74.__r_.__value_.__s.__data_[4] == 116;
                goto LABEL_86;
              case 6:
                v36 = LODWORD(v74.__r_.__value_.__l.__data_) == 1869116277
                   && WORD2(v74.__r_.__value_.__r.__words[0]) == 29810;
                goto LABEL_92;
              default:
                goto LABEL_93;
            }
          }
          switch(v74.__r_.__value_.__l.__size_)
          {
            case 3uLL:
              v30 = *(_WORD *)v74.__r_.__value_.__l.__data_ == 28265
                 && *(_BYTE *)(v74.__r_.__value_.__r.__words[0] + 2) == 116;
LABEL_60:
              v32 = v57;
              if (!v30)
                goto LABEL_93;
              break;
            case 4uLL:
              v32 = v57;
              if (*(_DWORD *)v74.__r_.__value_.__l.__data_ != 1953393013)
              {
                v33 = (std::string *)v74.__r_.__value_.__r.__words[0];
LABEL_77:
                data = (int)v33->__r_.__value_.__l.__data_;
                v32 = v51;
                if (data != 1718378856)
                  goto LABEL_93;
              }
              break;
            case 5uLL:
              v38 = *(_DWORD *)v74.__r_.__value_.__l.__data_ == 1919903859
                 && *(_BYTE *)(v74.__r_.__value_.__r.__words[0] + 4) == 116;
              v32 = v56;
              if (!v38)
              {
                v35 = *(_DWORD *)v74.__r_.__value_.__l.__data_ == 1634692198
                   && *(_BYTE *)(v74.__r_.__value_.__r.__words[0] + 4) == 116;
LABEL_86:
                v32 = v52;
                if (!v35)
                  goto LABEL_93;
              }
              break;
            case 6uLL:
              v36 = *(_DWORD *)v74.__r_.__value_.__l.__data_ == 1869116277
                 && *(_WORD *)(v74.__r_.__value_.__r.__words[0] + 4) == 29810;
LABEL_92:
              v32 = v56;
              if (!v36)
                goto LABEL_93;
              break;
            default:
LABEL_93:
              v32 = v58;
              break;
          }
LABEL_94:
          v31 = *(_QWORD *)((char *)v32 + *(_QWORD *)(*a1 - 24) + 32);
          if (v75 >= 2)
            v31 = llvm::FixedVectorType::get();
          if (v29 < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
          goto LABEL_98;
        }
        v31 = 0;
LABEL_98:
        *((_QWORD *)&v65 + 1) = v31;
        v66 = 1;
      }
    }
    if (!v8)
    {
      if (a4)
      {
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v39 = __s.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:nn180100]((uint64_t)&v74, v39 + 1);
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v74;
        else
          v40 = (std::string *)v74.__r_.__value_.__r.__words[0];
        if (v39)
        {
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v41 = &__s;
          else
            v41 = (std::string *)__s.__r_.__value_.__r.__words[0];
          memmove(v40, v41, v39);
        }
        *(_WORD *)((char *)&v40->__r_.__value_.__l.__data_ + v39) = 64;
        if (v62 >= 0)
          p_dst = (const std::string::value_type *)&__dst;
        else
          p_dst = (const std::string::value_type *)__dst;
        if (v62 >= 0)
          v43 = HIBYTE(v62);
        else
          v43 = v61;
        v44 = std::string::append(&v74, p_dst, v43);
        v45 = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v70.__r_.__value_.__r.__words[2] = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = &v70;
        else
          v46 = (std::string *)v70.__r_.__value_.__r.__words[0];
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
        else
          v47 = v70.__r_.__value_.__l.__size_;
        v48 = *llvm::StringMap<LIBStructFieldInfo,llvm::MallocAllocator>::try_emplace<>(a4, v46, v47);
        v49 = v65;
        *(_OWORD *)(v48 + 8) = v64;
        *(_BYTE *)(v48 + 40) = v66;
        *(_OWORD *)(v48 + 24) = v49;
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
      }
      goto LABEL_130;
    }
    if ((AGCLLVMUserShader::setupLIBStruct(a1, v67, &v64, a4) & 1) == 0)
      break;
LABEL_130:
    if (SHIBYTE(v62) < 0)
      operator delete(__dst);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    v7 = v7 & v21;
    if (v68 >= *(_DWORD *)(a2 + 8))
      return v7;
  }
  if (SHIBYTE(v62) < 0)
    operator delete(__dst);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t AGCLLVMUserShader::markNoAliasForGL(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 24) + this + 368);
  v2 = v1 + 24;
  v3 = *(_QWORD *)(v1 + 32);
  if (v3 != v1 + 24)
  {
    while (1)
    {
      v4 = v3 ? v3 - 56 : 0;
      this = llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v4);
      if ((this & 1) == 0)
        break;
LABEL_6:
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        return this;
    }
    if ((*(_WORD *)(v4 + 18) & 1) != 0)
    {
      this = llvm::Function::BuildLazyArguments((llvm::Function *)v4);
      v5 = *(_QWORD *)(v4 + 88);
      if ((*(_WORD *)(v4 + 18) & 1) != 0)
      {
        this = llvm::Function::BuildLazyArguments((llvm::Function *)v4);
        v6 = *(_QWORD *)(v4 + 88);
LABEL_13:
        v7 = v6 + 40 * *(_QWORD *)(v4 + 96);
        while (v5 != v7)
        {
          v8 = *(_DWORD *)(*(_QWORD *)v5 + 8);
          if (v8 == 15)
          {
            if ((v8 & 0xFE) == 0x12)
              v8 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v5 + 16) + 8);
            if (v8 <= 0xFF)
              this = llvm::Function::addParamAttr();
          }
          v5 += 40;
        }
        goto LABEL_6;
      }
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 88);
    }
    v6 = v5;
    goto LABEL_13;
  }
  return this;
}

uint64_t AGCLLVMUserShader::parseMaxTotalThreadsPerThreadgroup(AGCLLVMUserShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *ValueAsString;
  size_t v8;
  unsigned int v9;
  llvm::Module *v10;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  std::string __p;
  __int16 v21;
  uint64_t FnAttribute;

  v2 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
  v3 = *(_QWORD *)((char *)this + v2 + 336);
  v4 = v3 + 24;
  v5 = *(_QWORD *)(v3 + 32);
  if (v5 != v3 + 24)
  {
    v6 = 0;
    do
    {
      if (llvm::Function::hasFnAttribute())
      {
        FnAttribute = llvm::Function::getFnAttribute();
        ValueAsString = (void *)llvm::Attribute::getValueAsString((llvm::Attribute *)&FnAttribute);
        if (ValueAsString)
          std::string::basic_string[abi:nn180100](&__p, ValueAsString, v8);
        else
          memset(&__p, 0, sizeof(__p));
        v9 = std::stoi(&__p, 0, 10);
        v6 = v6 <= v9 ? v9 : v6;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
    if ((_DWORD)v6)
      return v6;
    v2 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
  }
  v10 = *(llvm::Module **)((char *)this + v2 + 336);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"air.kernel";
  v21 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v10, (const llvm::Twine *)&__p);
  if (!NamedMetadata)
    return 0;
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  v6 = 0;
  v13 = *(unsigned int *)(Operand + 8);
  if (v13 >= 4)
  {
    v14 = Operand;
    v15 = 3;
    while (1)
    {
      v16 = *(unsigned __int8 **)(v14 - 8 * v13 + 8 * v15);
      v17 = *v16;
      if (v17 <= 0x22 && ((0x7FFFFFFF0uLL >> v17) & 1) != 0)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 0;
        if (*((_DWORD *)v16 + 2))
          break;
      }
LABEL_26:
      if (++v15 >= v13)
        return 0;
    }
    while (1)
    {
      LODWORD(FnAttribute) = 0;
      if ((parseMDInt("air.max_work_group_size", (uint64_t)v16, (unsigned int *)&__p, &FnAttribute) & 1) != 0)
        return FnAttribute;
      if (++LODWORD(__p.__r_.__value_.__l.__data_) >= *((_DWORD *)v16 + 2))
      {
        v13 = *(unsigned int *)(v14 + 8);
        goto LABEL_26;
      }
    }
  }
  return v6;
}

uint64_t AGCLLVMUserShader::buildStageInOriginCommon(AGCLLVMUserShader *this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::Value *AlignedLoad;
  llvm::Type **v6;
  llvm::Type *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v13;
  llvm::Type *v14;
  char *v15;
  llvm::Type *v16;
  llvm::Value *v17;
  llvm::Type **GEP;
  uint64_t *v19;
  llvm::Value *v20;
  llvm::Type *v21;
  _QWORD v23[4];
  __int16 v24;

  if (a3)
  {
    AlignedLoad = a3;
  }
  else
  {
    v6 = (llvm::Type **)*((_QWORD *)this + 532);
    if (!v6)
    {
      v7 = (llvm::Type *)llvm::PointerType::get();
      v8 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 400))(v8);
      v23[0] = "agc.stagein_buffer_pointer.";
      v23[2] = v9;
      v24 = 2051;
      v10 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 400))(v10);
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v7, (const llvm::Twine *)v23, v11, 24, 5, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserShader *)((char *)this + 4240), (uint64_t)GlobalBufferBinding);
      v6 = (llvm::Type **)*((_QWORD *)this + 532);
    }
    v13 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v24 = 257;
    v14 = AGCLLVMBuilder::tryDeducePointeeType(v6, a2);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v14, (uint64_t)v6, 0, (uint64_t)v23);
  }
  v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v16 = (llvm::Type *)*((_QWORD *)v15 + 29);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v15 + 40), v16, AlignedLoad, v17, (const llvm::Twine *)v23);
  v19 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v24 = 257;
  v21 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v20);
  return llvm::IRBuilderBase::CreateAlignedLoad(v19 + 5, v21, (uint64_t)GEP, 0, (uint64_t)v23);
}

uint64_t AGCLLVMUserShader::buildStageInSizeCommon(AGCLLVMUserShader *this, llvm::Type *a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::Value *AlignedLoad;
  llvm::Type **v6;
  llvm::Type *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v13;
  llvm::Type *v14;
  char *v15;
  llvm::Type *v16;
  llvm::Value *v17;
  llvm::Type **GEP;
  uint64_t *v19;
  llvm::Value *v20;
  llvm::Type *v21;
  _QWORD v23[4];
  __int16 v24;

  if (a3)
  {
    AlignedLoad = a3;
  }
  else
  {
    v6 = (llvm::Type **)*((_QWORD *)this + 532);
    if (!v6)
    {
      v7 = (llvm::Type *)llvm::PointerType::get();
      v8 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 400))(v8);
      v23[0] = "agc.stagein_buffer_pointer.";
      v23[2] = v9;
      v24 = 2051;
      v10 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 400))(v10);
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v7, (const llvm::Twine *)v23, v11, 24, 5, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserShader *)((char *)this + 4240), (uint64_t)GlobalBufferBinding);
      v6 = (llvm::Type **)*((_QWORD *)this + 532);
    }
    v13 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v24 = 257;
    v14 = AGCLLVMBuilder::tryDeducePointeeType(v6, a2);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v14, (uint64_t)v6, 0, (uint64_t)v23);
  }
  v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v16 = (llvm::Type *)*((_QWORD *)v15 + 29);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v15 + 40), v16, AlignedLoad, v17, (const llvm::Twine *)v23);
  v19 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v24 = 257;
  v21 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v20);
  return llvm::IRBuilderBase::CreateAlignedLoad(v19 + 5, v21, (uint64_t)GEP, 0, (uint64_t)v23);
}

uint64_t AGCLLVMUserShader::buildGlobalSizeCommon(AGCLLVMUserShader *this, llvm::Type *a2, unsigned int a3, llvm::Value *AlignedLoad, llvm::Value *a5)
{
  llvm::Value *v9;
  llvm::Type *v10;
  llvm::Type **v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v16;
  llvm::Type *v17;
  char *v18;
  llvm::Type *v19;
  llvm::Value *v20;
  uint64_t GEP;
  char *v22;
  llvm::Type *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *v26;
  llvm::Value *Cast;
  llvm::Type **v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  llvm::Value *v32;
  uint64_t *v33;
  llvm::Type *v34;
  char *v35;
  llvm::Type *v36;
  llvm::Value *v37;
  uint64_t v38;
  char *v39;
  llvm::Type *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Value *v43;
  llvm::IRBuilderBase *v44;
  _BYTE v46[32];
  __int16 v47;
  _QWORD v48[2];
  uint64_t v49;
  __int16 v50;

  v10 = (llvm::Type *)llvm::PointerType::get();
  if (!AlignedLoad)
  {
    v11 = (llvm::Type **)*((_QWORD *)this + 535);
    if (!v11)
    {
      v12 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v13 = 368;
      if (v12 == 1)
        v13 = 992;
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                        + 400)
                                                            + 824)
                                              + v13))(*(_QWORD *)(*(_QWORD *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                            + 400)
                                                                + 824));
      v48[0] = "agc.indirect_wg_size_buffer_pointer.";
      v49 = v14;
      v50 = 2051;
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v10, (const llvm::Twine *)v48, v14, 12, 5, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserShader *)((char *)this + 4264), (uint64_t)GlobalBufferBinding);
      v11 = (llvm::Type **)*((_QWORD *)this + 535);
    }
    v16 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v50 = 257;
    v17 = AGCLLVMBuilder::tryDeducePointeeType(v11, v9);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v16 + 5, v17, (uint64_t)v11, 0, (uint64_t)v48);
  }
  v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v19 = (llvm::Type *)*((_QWORD *)v18 + 29);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v50 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v18 + 40), v19, AlignedLoad, v20, (const llvm::Twine *)v48);
  v22 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v23 = (llvm::Type *)*((_QWORD *)v22 + 29);
  v24 = (uint64_t)(v22 + 40);
  v50 = 257;
  v25 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v22 + 5, v23, GEP, 0, (uint64_t)v48);
  v47 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v24, 38, v25, (uint64_t)a2, (uint64_t)v46);
  if (!a5)
  {
    v28 = (llvm::Type **)*((_QWORD *)this + 538);
    if (!v28)
    {
      v29 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v30 = 360;
      if (v29 == 1)
        v30 = 984;
      v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                        + 400)
                                                            + 824)
                                              + v30))(*(_QWORD *)(*(_QWORD *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                            + 400)
                                                                + 824));
      v48[0] = "agc.indirect_wg_count_buffer_pointer.";
      v49 = v31;
      v50 = 2051;
      v32 = AGCLLVMUserObject::createGlobalBufferBinding(this, v10, (const llvm::Twine *)v48, v31, 12, 5, 0);
      llvm::ValueHandleBase::operator=((AGCLLVMUserShader *)((char *)this + 4288), (uint64_t)v32);
      v28 = (llvm::Type **)*((_QWORD *)this + 538);
    }
    v33 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v50 = 257;
    v34 = AGCLLVMBuilder::tryDeducePointeeType(v28, v26);
    a5 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v33 + 5, v34, (uint64_t)v28, 0, (uint64_t)v48);
  }
  v35 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v36 = (llvm::Type *)*((_QWORD *)v35 + 29);
  v37 = (llvm::Value *)llvm::ConstantInt::get();
  v50 = 257;
  v38 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v35 + 40), v36, a5, v37, (const llvm::Twine *)v48);
  v39 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v40 = (llvm::Type *)*((_QWORD *)v39 + 29);
  v41 = (uint64_t)(v39 + 40);
  v50 = 257;
  v42 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v39 + 5, v40, v38, 0, (uint64_t)v48);
  v47 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v41, 38, v42, (uint64_t)a2, (uint64_t)v46);
  v44 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v50 = 257;
  return llvm::IRBuilderBase::CreateMul(v44, Cast, v43, (const llvm::Twine *)v48);
}

uint64_t AGCLLVMUserShader::buildTileThreadIndexInThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  llvm::Value *v7;
  llvm::IRBuilderBase *v8;
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::Value *Shl;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v16 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v18 = *((_DWORD *)v6 + 34);
  v7 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v16, (uint64_t)a2);
  if (v17)
    llvm::MetadataTracking::untrack();
  v8 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v9 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, llvm::Type *))(*(_QWORD *)this + 456))(this, a2);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v15 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v8, v9, v10, (const llvm::Twine *)v14);
  v13[16] = 257;
  return llvm::IRBuilderBase::CreateAdd(v8, Shl, v7, (const llvm::Twine *)v13);
}

llvm::Value *AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup(AGCLLVMUserShader *this, llvm::Type *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *Add;
  llvm::IRBuilderBase *v8;
  llvm::Value *v9;
  llvm::Value *Not;
  llvm::Value *v11;
  llvm::IRBuilderBase *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::IRBuilderBase *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *Mul;
  llvm::Value *v21;
  llvm::Value *LShr;
  _WORD v24[20];
  _BYTE v25[32];
  __int16 v26;
  _BYTE v27[32];
  __int16 v28;
  _BYTE v29[32];
  __int16 v30;
  _BYTE v31[32];
  __int16 v32;
  _BYTE v33[32];
  __int16 v34;
  _BYTE v35[32];
  __int16 v36;
  _BYTE v37[32];
  __int16 v38;

  v4 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v5 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, _QWORD))(*(_QWORD *)this + 464))(this, 0);
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v38 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v37);
  v8 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v36 = 257;
  Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v8, v9, (const llvm::Twine *)v35);
  v34 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, Add, Not, (const llvm::Twine *)v33);
  v12 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v13 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v32 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v12, v13, v14, (const llvm::Twine *)v31);
  v16 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v30 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateNot(v16, v17, (const llvm::Twine *)v29);
  v28 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v12, v15, v18, (const llvm::Twine *)v27);
  v26 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v4, v11, v19, (const llvm::Twine *)v25);
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  v24[16] = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v4, Mul, v21, (const llvm::Twine *)v24);
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), LShr, a2);
}

llvm::Value *AGCLLVMUserShader::buildTileThreadsPerGrid(AGCLLVMUserShader *this, llvm::Type *a2, int a3)
{
  llvm::IRBuilderBase *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t Mul;
  llvm::Value *v9;
  _BYTE v11[32];
  __int16 v12;

  if (a3 == 2)
  {
    Mul = llvm::ConstantInt::get();
  }
  else
  {
    if (a3 == 1)
    {
      v5 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(_QWORD *)this + 464))(this, 1);
      v7 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(_QWORD *)this + 464))(this, 3);
    }
    else
    {
      if (a3)
      {
        v9 = 0;
        return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v9, a2);
      }
      v5 = (AGCLLVMUserShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v6 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, _QWORD))(*(_QWORD *)this + 464))(this, 0);
      v7 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(_QWORD *)this + 464))(this, 2);
    }
    v12 = 257;
    Mul = llvm::IRBuilderBase::CreateMul(v5, v6, v7, (const llvm::Twine *)v11);
  }
  v9 = (llvm::Value *)Mul;
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v9, a2);
}

llvm::Value *AGCLLVMUserShader::buildTileThreadgroupsPerGrid(AGCLLVMUserShader *this, llvm::Type *a2, int a3)
{
  uint64_t (*v5)(void);
  uint64_t v6;
  llvm::Value *v7;

  if (a3 == 2)
  {
    v6 = llvm::ConstantInt::get();
  }
  else
  {
    if (a3 == 1)
    {
      v5 = *(uint64_t (**)(void))(*(_QWORD *)this + 464);
    }
    else
    {
      if (a3)
      {
        v7 = 0;
        return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v7, a2);
      }
      v5 = *(uint64_t (**)(void))(*(_QWORD *)this + 464);
    }
    v6 = v5();
  }
  v7 = (llvm::Value *)v6;
  return AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32), v7, a2);
}

void AGCLLVMUserTileShader::~AGCLLVMUserTileShader(AGCLLVMUserTileShader *this)
{
  AGCLLVMObject *v2;
  uint64_t i;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7EB6770;
  v2 = (AGCLLVMUserTileShader *)((char *)this + 4536);
  *((_QWORD *)this + 567) = &unk_1E7EB6AA0;
  *((_QWORD *)this + 571) = &unk_1E7EB6B90;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 561));
  for (i = 0; i != -144; i -= 24)
  {
    v4 = *(_QWORD *)((char *)this + i + 4456);
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserTileShader *)((char *)this + i + 4440));
  }
  AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7EB6BA0);
  AGCLLVMObject::~AGCLLVMObject(v2);
}

{
  AGCLLVMObject *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7EB6770;
  v2 = (AGCLLVMUserTileShader *)((char *)this + 4536);
  *((_QWORD *)this + 567) = &unk_1E7EB6AA0;
  *((_QWORD *)this + 571) = &unk_1E7EB6B90;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)this + 561));
  v3 = 0;
  while (1)
  {
    v4 = *(_QWORD *)((char *)this + v3 + 4456);
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
      llvm::ValueHandleBase::RemoveFromUseList((AGCLLVMUserTileShader *)((char *)this + v3 + 4440));
    v3 -= 24;
    if (v3 == -144)
    {
      AGCLLVMUserShader::~AGCLLVMUserShader(this, (uint64_t *)off_1E7EB6BA0);
      AGCLLVMObject::~AGCLLVMObject(v2);
      JUMPOUT(0x1CAA2D68CLL);
    }
  }
}

uint64_t AGCLLVMUserTileShader::getMaxTotalThreadsPerThreadgroup(AGCLLVMUserTileShader *this)
{
  return *((unsigned int *)this + 1129);
}

uint64_t AGCLLVMUserTileShader::initCompile(AGCLLVMUserTileShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!validateMaxTotalThreadsPerThreadgroup(*((_DWORD *)this + 1129), **((_DWORD **)this + 559), *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 864), (std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), (unsigned int *)this + 1129))return 0;
  AGCLLVMUserObject::initCompile(this);
  v2 = *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = *(_QWORD *)((char *)this + v2 + 368);
  v4 = v3 + 8;
  for (i = *(_QWORD *)(v3 + 16); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v4)
    {
      v10 = 1;
      goto LABEL_14;
    }
    v6 = (uint64_t *)(i - 56);
    if (!i)
      v6 = 0;
    v7 = *v6;
    if (*v6)
    {
      v8 = *(_DWORD *)(v7 + 8);
      if ((v8 & 0xFE) == 0x12)
        v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
      if ((v8 & 0xFFFFFF00) == 0x300 && v6[1])
        break;
    }
  }
  std::string::append((std::string *)((char *)this + v2 + 8), "Tile shaders do not support shader declared threadgroup variables");
  v10 = 0;
LABEL_14:
  v11 = *((_QWORD *)this + 558);
  if ((*(_BYTE *)(v11 + 33) & 0xE) != 0)
  {
    llvm::Module::getOrInsertNamedMetadata();
    llvm::ConstantInt::get();
    llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
    v11 = *((_QWORD *)this + 558);
  }
  AGCLLVMUserShader::initLIBAliasOffset((uint64_t *)this, v11);
  v12 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 680))(v12);
  v9 = v10 & AGCLLVMGen3TargetLowerer::setupFixedPRIDS(v13, 3);
  AGCLLVMUserShader::setUniformAtomicsMode(this);
  return v9;
}

llvm::Value *AGCLLVMUserTileShader::addWrapperPostfix(AGCLLVMUserTileShader *this)
{
  llvm::Value *result;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  _WORD v10[20];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  result = (llvm::Value *)AGCLLVMUserObject::detectTextureWrites(this);
  if ((_DWORD)result)
  {
    v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v4 = (uint64_t)(v3 + 32);
    v5 = *((_QWORD *)v3 + 50);
    v6 = *(_QWORD *)(v5 + 952);
    if (v6)
      v7 = strlen(*(const char **)(v5 + 952));
    else
      v7 = 0;
    v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v4, v6, v7, *(_QWORD *)(v4 + 144), *(_QWORD *)(v4 + 192), *(_QWORD *)(v4 + 192));
    v11[0] = llvm::ConstantInt::get();
    v11[1] = llvm::ConstantInt::get();
    v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v10[16] = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)v9, *(_QWORD *)(v8 + 24), v8, (uint64_t)v11, 2, (uint64_t)v10);
  }
  return result;
}

uint64_t AGCLLVMUserTileShader::wrapperFunctionType(AGCLLVMUserTileShader *this)
{
  return llvm::FunctionType::get();
}

uint64_t AGCLLVMUserTileShader::wrapperCallingConvention(AGCLLVMUserTileShader *this)
{
  return 108;
}

uint64_t AGCLLVMUserTileShader::setupShaderInputs(AGCLLVMUserTileShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Instruction *v12;
  char *v13;
  _BYTE *v14;
  llvm::Type *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Type *v20;
  _WORD *v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  __int16 v26;

  v2 = *((_QWORD *)this + 22);
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v6 = *((_QWORD *)this + 22);
    v5 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 22));
    v2 = v6;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 88);
  }
  v7 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  v8 = 1;
  if (v5 != v7)
  {
    v9 = (_WORD *)((char *)this + 3564);
    while (1)
    {
      v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * *(unsigned int *)(v5 + 32));
      if (v10)
      {
        v11 = *(_QWORD *)(v4 + 40);
        if (v11)
          v12 = (llvm::Instruction *)(v11 - 24);
        else
          v12 = 0;
        AGCLLVMBuilder::SetInsertPoint((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, v12, *((_QWORD *)this + 6));
        AGCLLVMUserShader::replaceInputArgument((uint64_t)this, (llvm::Type **)v5, *(_DWORD *)(v5 + 32), v10);
        if (isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.thread_index_in_quadgroup")|| isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.quadgroup_index_in_threadgroup"))
        {
          *((_BYTE *)this + 16) = 1;
        }
        else
        {
          if (isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.imageblock"))
          {
            if (!AGCLLVMUserShader::setupLIBMetadata((uint32x2_t *)this, 2u, v9, v10, *((_QWORD *)this + 558), 0, 0))return 0;
            llvm::UndefValue::get();
            goto LABEL_29;
          }
          if (isStringMDNode(*(llvm::MDString **)(v10 - 8 * *(unsigned int *)(v10 + 8) + 8), "air.render_target_array_index"))
          {
            v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v14 = (_BYTE *)*((_QWORD *)v13 + 50);
            if (v14[1747])
            {
              v22 = v9;
              v15 = *(llvm::Type **)v5;
              v16 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v14 + 680))(v14);
              v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
              v23 = *(_OWORD *)(v17 + 88);
              llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v17 + 40));
              v25 = *((_DWORD *)v17 + 34);
              AGCLLVMGen3TargetLowerer::buildLayerId(v16, (uint64_t)&v23, (uint64_t)v15);
              if (v24)
                llvm::MetadataTracking::untrack();
              v9 = v22;
            }
            else
            {
              v18 = (uint64_t)(v13 + 40);
              v19 = llvm::ConstantInt::get();
              v20 = *(llvm::Type **)v5;
              v26 = 257;
              llvm::IRBuilderBase::CreateCast(v18, 38, v19, (uint64_t)v20, (uint64_t)&v23);
            }
LABEL_29:
            llvm::Value::replaceAllUsesWith();
          }
        }
      }
      v5 += 40;
      if (v5 == v7)
        return 1;
    }
  }
  return v8;
}

uint64_t AGCLLVMUserTileShader::setupShaderOutputs(AGCLLVMUserTileShader *this)
{
  llvm::Function *Function;

  Function = (llvm::Function *)llvm::Module::getFunction();
  llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(*((_QWORD *)Function + 1) + 24));
  llvm::Function::eraseFromParent(Function);
  return 1;
}

uint64_t AGCLLVMUserTileShader::setupImageBlocks(AGCLLVMUserTileShader *this)
{
  _BYTE v3[952];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  AGCLLVMAirImageBlockGen3::AGCLLVMAirImageBlockGen3((AGCLLVMAirImageBlockGen3 *)v3, this, *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), *(AGCLLVMTargetLowerer **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), (AGCLLVMUserTileShader *)((char *)this + 232));
  AGCLLVMAirImageBlockGen3::replaceBulkMemWrites((AGCLLVMAirImageBlockGen3 *)v3);
  AGCLLVMAirImageBlockGen3::setupImageBlocks((llvm::Value *)v3, *((unsigned __int16 *)this + 2156), *((unsigned __int16 *)this + 1782), *((_QWORD *)this + 558));
  *((_BYTE *)this + 4504) = v3[944];
  AGCLLVMAirImageBlockGen3::~AGCLLVMAirImageBlockGen3((AGCLLVMAirImageBlockGen3 *)v3);
  return 1;
}

uint64_t AGCLLVMUserTileShader::replaceBuiltins(AGCLLVMUserTileShader *this)
{
  uint64_t result;
  llvm::LLVMContext **v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t Function;
  llvm::Function *v8;
  uint64_t *v9;
  uint64_t *v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  uint64_t *v14;
  void (**v15)(_QWORD *, _QWORD);
  uint64_t *v16;
  void (*v17)(_QWORD *, _QWORD);
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::Instruction *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t i;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  llvm::Value **v34;
  llvm::Instruction *v35;
  llvm::Value **v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Type *v39;
  uint64_t v40;
  int v41;
  llvm::Type *v42;
  uint64_t v43;
  llvm::Value **v44;
  llvm::Value *v45;
  char *v46;
  uint64_t (*v47)(_QWORD);
  _QWORD *v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  _QWORD *v51;
  uint64_t (*v52)(_QWORD);
  _QWORD *v53;
  uint64_t v54;
  unsigned int *v55;
  uint64_t (*v56)(_QWORD);
  _QWORD *v57;
  uint64_t (*v58)(_QWORD);
  _QWORD *v59;
  uint64_t (*v60)(_QWORD);
  _QWORD *v61;
  _OWORD *v62;
  void *v63;
  uint64_t v64;
  llvm::Value *FPTrunc;
  char *v66;
  uint64_t v67;
  llvm::Value *v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  llvm::Function *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t (**v77)(_QWORD);
  _BYTE *v78;
  _DWORD *v79;
  uint64_t v80;
  llvm::Value *v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  _QWORD v88[4];
  __int16 v89;
  uint64_t (**v90)(int, llvm::Value *);
  void *v91[2];
  _OWORD v92[5];
  int v93;
  uint64_t v94;
  _QWORD v95[29];
  AGCLLVMUserTileShader *v96;
  _OWORD v97[3];
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  result = AGCLLVMUserObject::replaceBuiltins(this);
  if (!(_DWORD)result)
    return result;
  v70 = result;
  v3 = *(llvm::LLVMContext ***)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  AGCLLVMBuilder::AGCLLVMBuilder((AGCLLVMBuilder *)&v90, *v3);
  v96 = this;
  v90 = &off_1E7EB7458;
  v95[25] = v3;
  if ((v4 & 1) == 0
  {
    AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[0] = (uint64_t)"air.get_global_size.i32";
    dword_1EF8E7758 = 1;
    qword_1EF8E7760 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerGrid;
    unk_1EF8E7768 = 0;
    dword_1EF8E7770 = 4;
    word_1EF8E7774 = 0;
    qword_1EF8E7778 = (uint64_t)"air.get_global_size.i16";
    dword_1EF8E7780 = 1;
    qword_1EF8E7788 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerGrid;
    unk_1EF8E7790 = 0;
    dword_1EF8E7798 = 4;
    word_1EF8E779C = 0;
    qword_1EF8E77A0 = (uint64_t)"air.get_global_id.i32";
    dword_1EF8E77A8 = 1;
    xmmword_1EF8E77B0 = xmmword_1C3E37E00;
    dword_1EF8E77C0 = 4;
    word_1EF8E77C4 = 0;
    qword_1EF8E77C8 = (uint64_t)"air.get_global_id.i16";
    dword_1EF8E77D0 = 1;
    unk_1EF8E77D8 = xmmword_1C3E37E00;
    dword_1EF8E77E8 = 4;
    word_1EF8E77EC = 0;
    qword_1EF8E77F0 = (uint64_t)"air.get_local_size.i32";
    dword_1EF8E77F8 = 1;
    qword_1EF8E7800 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    unk_1EF8E7808 = 0;
    dword_1EF8E7810 = 4;
    word_1EF8E7814 = 0;
    qword_1EF8E7818 = (uint64_t)"air.get_local_size.i16";
    dword_1EF8E7820 = 1;
    qword_1EF8E7828 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    unk_1EF8E7830 = 0;
    dword_1EF8E7838 = 4;
    word_1EF8E783C = 0;
    qword_1EF8E7840 = (uint64_t)"air.get_local_id.i32";
    dword_1EF8E7848 = 1;
    qword_1EF8E7850 = (uint64_t)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup;
    unk_1EF8E7858 = 0;
    dword_1EF8E7860 = 4;
    word_1EF8E7864 = 0;
    qword_1EF8E7868 = (uint64_t)"air.get_local_id.i16";
    dword_1EF8E7870 = 1;
    qword_1EF8E7878 = (uint64_t)AGCLLVMUserShader::buildTileThreadPositionInThreadgroup;
    unk_1EF8E7880 = 0;
    dword_1EF8E7888 = 4;
    word_1EF8E788C = 0;
    qword_1EF8E7890 = (uint64_t)"air.get_local_linear_id.i32";
    dword_1EF8E7898 = 1;
    qword_1EF8E78A0 = (uint64_t)AGCLLVMUserShader::buildTileThreadIndexInThreadgroup;
    unk_1EF8E78A8 = 0;
    dword_1EF8E78B0 = 2;
    word_1EF8E78B4 = 0;
    qword_1EF8E78B8 = (uint64_t)"air.get_local_linear_id.i16";
    dword_1EF8E78C0 = 1;
    qword_1EF8E78C8 = (uint64_t)AGCLLVMUserShader::buildTileThreadIndexInThreadgroup;
    unk_1EF8E78D0 = 0;
    dword_1EF8E78D8 = 2;
    word_1EF8E78DC = 0;
    qword_1EF8E78E0 = (uint64_t)"air.get_num_groups.i32";
    dword_1EF8E78E8 = 1;
    qword_1EF8E78F0 = (uint64_t)AGCLLVMUserShader::buildTileThreadgroupsPerGrid;
    unk_1EF8E78F8 = 0;
    dword_1EF8E7900 = 4;
    word_1EF8E7904 = 0;
    qword_1EF8E7908 = (uint64_t)"air.get_num_groups.i16";
    dword_1EF8E7910 = 1;
    qword_1EF8E7918 = (uint64_t)AGCLLVMUserShader::buildTileThreadgroupsPerGrid;
    unk_1EF8E7920 = 0;
    dword_1EF8E7928 = 4;
    word_1EF8E792C = 0;
    qword_1EF8E7930 = (uint64_t)"air.get_group_id.i32";
    dword_1EF8E7938 = 1;
    qword_1EF8E7940 = (uint64_t)AGCLLVMUserShader::buildTileThreadgroupPositionInGrid;
    unk_1EF8E7948 = 0;
    dword_1EF8E7950 = 4;
    word_1EF8E7954 = 0;
    qword_1EF8E7958 = (uint64_t)"air.get_group_id.i16";
    dword_1EF8E7960 = 1;
    qword_1EF8E7968 = (uint64_t)AGCLLVMUserShader::buildTileThreadgroupPositionInGrid;
    qword_1EF8E7970 = 0;
    dword_1EF8E7978 = 4;
    word_1EF8E797C = 0;
    qword_1EF8E7980 = (uint64_t)"air.get_dispatch_local_size.i32";
    dword_1EF8E7988 = 1;
    qword_1EF8E7990 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    qword_1EF8E7998 = 0;
    dword_1EF8E79A0 = 4;
    word_1EF8E79A4 = 0;
    qword_1EF8E79A8 = (uint64_t)"air.get_dispatch_local_size.i16";
    dword_1EF8E79B0 = 1;
    qword_1EF8E79B8 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    qword_1EF8E79C0 = 0;
    dword_1EF8E79C8 = 4;
    word_1EF8E79CC = 0;
    qword_1EF8E79D0 = (uint64_t)"air.get_quadgroups_per_threadgroup.i32";
    dword_1EF8E79D8 = 1;
    qword_1EF8E79E0 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup;
    qword_1EF8E79E8 = 0;
    dword_1EF8E79F0 = 2;
    word_1EF8E79F4 = 0;
    qword_1EF8E79F8 = (uint64_t)"air.get_quadgroups_per_threadgroup.i16";
    dword_1EF8E7A00 = 1;
    qword_1EF8E7A08 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup;
    qword_1EF8E7A10 = 0;
    dword_1EF8E7A18 = 2;
    word_1EF8E7A1C = 0;
    qword_1EF8E7A20 = (uint64_t)"air.get_dispatch_quadgroups_per_threadgroup.i32";
    dword_1EF8E7A28 = 1;
    qword_1EF8E7A30 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup;
    qword_1EF8E7A38 = 0;
    dword_1EF8E7A40 = 2;
    word_1EF8E7A44 = 0;
    qword_1EF8E7A48 = (uint64_t)"air.get_dispatch_quadgroups_per_threadgroup.i16";
    dword_1EF8E7A50 = 1;
    qword_1EF8E7A58 = (uint64_t)AGCLLVMUserShader::buildTileQuadgroupsPerThreadgroup;
    qword_1EF8E7A60 = 0;
    dword_1EF8E7A68 = 2;
    word_1EF8E7A6C = 0;
    qword_1EF8E7A70 = (uint64_t)"air.get_quad_group.i32";
    dword_1EF8E7A78 = 1;
    xmmword_1EF8E7A80 = xmmword_1C3E37E10;
    dword_1EF8E7A90 = 2;
    word_1EF8E7A94 = 0;
    qword_1EF8E7A98 = (uint64_t)"air.get_quad_group.i16";
    dword_1EF8E7AA0 = 1;
    xmmword_1EF8E7AA8 = xmmword_1C3E37E10;
    dword_1EF8E7AB8 = 2;
    word_1EF8E7ABC = 0;
    qword_1EF8E7AC0 = (uint64_t)"air.get_simdgroups_per_threadgroup.i32";
    dword_1EF8E7AC8 = 1;
    qword_1EF8E7AD0 = (uint64_t)AGCLLVMUserTileShader::buildSimdgroupsPerThreadgroup;
    qword_1EF8E7AD8 = 0;
    dword_1EF8E7AE0 = 2;
    word_1EF8E7AE4 = 0;
    qword_1EF8E7AE8 = (uint64_t)"air.get_simdgroups_per_threadgroup.i16";
    dword_1EF8E7AF0 = 1;
    qword_1EF8E7AF8 = (uint64_t)AGCLLVMUserTileShader::buildSimdgroupsPerThreadgroup;
    qword_1EF8E7B00 = 0;
    dword_1EF8E7B08 = 2;
    word_1EF8E7B0C = 0;
    qword_1EF8E7B10 = (uint64_t)"air.get_dispatch_simdgroups_per_threadgroup.i32";
    dword_1EF8E7B18 = 1;
    qword_1EF8E7B20 = (uint64_t)AGCLLVMUserTileShader::buildDispatchSimdgroupsPerThreadgroup;
    qword_1EF8E7B28 = 0;
    dword_1EF8E7B30 = 2;
    word_1EF8E7B34 = 0;
    qword_1EF8E7B38 = (uint64_t)"air.get_dispatch_simdgroups_per_threadgroup.i16";
    dword_1EF8E7B40 = 1;
    qword_1EF8E7B48 = (uint64_t)AGCLLVMUserTileShader::buildDispatchSimdgroupsPerThreadgroup;
    qword_1EF8E7B50 = 0;
    dword_1EF8E7B58 = 2;
    word_1EF8E7B5C = 0;
    qword_1EF8E7B60 = (uint64_t)"air.get_stage_in_grid_origin.i32";
    dword_1EF8E7B68 = 1;
    qword_1EF8E7B70 = (uint64_t)AGCLLVMUserTileShader::buildStageInOrigin;
    qword_1EF8E7B78 = 0;
    dword_1EF8E7B80 = 4;
    word_1EF8E7B84 = 0;
    qword_1EF8E7B88 = (uint64_t)"air.get_stage_in_grid_origin.i16";
    dword_1EF8E7B90 = 1;
    qword_1EF8E7B98 = (uint64_t)AGCLLVMUserTileShader::buildStageInOrigin;
    qword_1EF8E7BA0 = 0;
    dword_1EF8E7BA8 = 4;
    word_1EF8E7BAC = 0;
    qword_1EF8E7BB0 = (uint64_t)"air.get_stage_in_grid_size.i32";
    dword_1EF8E7BB8 = 1;
    qword_1EF8E7BC0 = (uint64_t)AGCLLVMUserTileShader::buildStageInSize;
    qword_1EF8E7BC8 = 0;
    dword_1EF8E7BD0 = 4;
    word_1EF8E7BD4 = 0;
    qword_1EF8E7BD8 = (uint64_t)"air.get_stage_in_grid_size.i16";
    dword_1EF8E7BE0 = 1;
    qword_1EF8E7BE8 = (uint64_t)AGCLLVMUserTileShader::buildStageInSize;
    qword_1EF8E7BF0 = 0;
    dword_1EF8E7BF8 = 4;
    word_1EF8E7BFC = 0;
    qword_1EF8E7C00 = (uint64_t)"air.get_quadgroup_index_in_threadgroup.i32";
    dword_1EF8E7C08 = 1;
    xmmword_1EF8E7C10 = xmmword_1C3E37E10;
    dword_1EF8E7C20 = 2;
    word_1EF8E7C24 = 0;
    qword_1EF8E7C28 = (uint64_t)"air.get_quadgroup_index_in_threadgroup.i16";
    dword_1EF8E7C30 = 1;
    xmmword_1EF8E7C38 = xmmword_1C3E37E10;
    dword_1EF8E7C48 = 2;
    word_1EF8E7C4C = 0;
    qword_1EF8E7C50 = (uint64_t)"air.get_thread_index_in_quadgroup.i32";
    dword_1EF8E7C58 = 1;
    qword_1EF8E7C60 = (uint64_t)AGCLLVMUserTileShader::buildQuadElement;
    qword_1EF8E7C68 = 0;
    dword_1EF8E7C70 = 2;
    word_1EF8E7C74 = 0;
    qword_1EF8E7C78 = (uint64_t)"air.get_thread_index_in_quadgroup.i16";
    dword_1EF8E7C80 = 1;
    qword_1EF8E7C88 = (uint64_t)AGCLLVMUserTileShader::buildQuadElement;
    qword_1EF8E7C90 = 0;
    dword_1EF8E7C98 = 2;
    word_1EF8E7C9C = 0;
    qword_1EF8E7CA0 = (uint64_t)"air.get_dispatch_threads_per_threadgroup.i32";
    dword_1EF8E7CA8 = 1;
    qword_1EF8E7CB0 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    qword_1EF8E7CB8 = 0;
    dword_1EF8E7CC0 = 4;
    word_1EF8E7CC4 = 0;
    qword_1EF8E7CC8 = (uint64_t)"air.get_dispatch_threads_per_threadgroup.i16";
    dword_1EF8E7CD0 = 1;
    qword_1EF8E7CD8 = (uint64_t)AGCLLVMUserShader::buildTileThreadsPerThreadgroup;
    qword_1EF8E7CE0 = 0;
    dword_1EF8E7CE8 = 4;
    word_1EF8E7CEC = 0;
  }
  v5 = 0;
  v6 = &v83;
  do
  {
    if (AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v5])
      strlen((const char *)AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v5]);
    Function = llvm::Module::getFunction();
    if (Function)
    {
      v8 = (llvm::Function *)Function;
      v9 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v5];
      v79 = v9 + 4;
      if (*((_DWORD *)v9 + 8) == 10)
      {
        v13 = *(_QWORD *)(Function + 8);
        if (v13)
        {
          v14 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v5];
          v15 = (void (**)(_QWORD *, _QWORD))(v14 + 2);
          v16 = v14 + 3;
          do
          {
            v17 = *v15;
            v18 = (_QWORD *)((char *)v96 + (*v16 >> 1));
            if ((*v16 & 1) != 0)
              v17 = *(void (**)(_QWORD *, _QWORD))(*v18 + v17);
            v19 = *(_QWORD *)(v13 + 8);
            v17(v18, *(_QWORD *)(v13 + 24));
            v13 = v19;
          }
          while (v19);
        }
        goto LABEL_106;
      }
      if (*((_DWORD *)v9 + 8) == 9)
      {
        v10 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v5];
        v11 = (_BYTE *)v10[2];
        if (v11)
        {
          v12 = strlen((const char *)v10[2]);
          *(_QWORD *)&v97[0] = (char *)&v97[1] + 8;
          *(_OWORD *)((char *)v97 + 8) = xmmword_1C3E37B50;
          llvm::SmallVectorImpl<char>::append<char const*,void>(v97, v11, &v11[v12]);
        }
        else
        {
          *(_QWORD *)&v97[1] = 64;
          v97[0] = (unint64_t)&v97[1] + 8;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(v97, ".", "");
        v69 = *((_QWORD *)&v97[0] + 1);
        if (*(_QWORD *)&v97[1] < *((_QWORD *)&v97[0] + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
          v69 = *((_QWORD *)&v97[0] + 1);
        }
        *((_QWORD *)&v97[0] + 1) = v69;
        llvm::Module::getOrInsertFunction();
        llvm::Value::replaceAllUsesWith();
        if (*(_OWORD **)&v97[0] != (_OWORD *)((char *)&v97[1] + 8))
          free(*(void **)&v97[0]);
        goto LABEL_106;
      }
      v20 = **(_QWORD **)(*(_QWORD *)(Function + 24) + 16);
      v21 = (*(_DWORD *)(v20 + 8) & 0xFE) != 0x12
         || BYTE5(AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v5 + 4]) == 0;
      v22 = !v21;
      v73 = v5;
      if (v21)
        v23 = 1;
      else
        v23 = *(unsigned int *)(v20 + 32);
      v80 = v23;
      v71 = v93;
      v72 = (llvm::Function *)Function;
      v24 = *(_QWORD *)(Function + 8);
      if (!v24)
      {
LABEL_100:
        v93 = v71;
        v8 = v72;
        v5 = v73;
LABEL_106:
        llvm::Function::eraseFromParent(v8);
        goto LABEL_107;
      }
      v74 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v5 + 1];
      v25 = &AGCLLVMUserTileShader::replaceWorkitemFunctions(void)::workitem_functions[5 * v5];
      v78 = (char *)v25 + 36;
      v76 = v25 + 3;
      v77 = (uint64_t (**)(_QWORD))(v25 + 2);
      while (1)
      {
        v26 = *(llvm::Instruction **)(v24 + 24);
        v27 = *(_QWORD *)(v24 + 8);
        if (*(_DWORD *)v74 == 1)
        {
          v28 = 0;
        }
        else
        {
          if (*(_DWORD *)v74 != 2)
            goto LABEL_33;
          v28 = 121;
        }
        v93 = v28;
LABEL_33:
        v75 = v27;
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)v91, v26);
        v29 = llvm::UndefValue::get();
        if (v80)
        {
          for (i = 0; i != v80; ++i)
          {
            v81 = (llvm::Value *)v29;
            v31 = v6;
            v98 = 0;
            memset(v97, 0, sizeof(v97));
            v32 = llvm::CallBase::arg_end(v26) - (_QWORD)v26 + 32 * (*((_DWORD *)v26 + 5) & 0x7FFFFFF);
            if ((v32 & 0x1FFFFFFFE0) != 0)
            {
              v33 = (v32 >> 5);
              v34 = (llvm::Value **)v97;
              v35 = v26;
              do
              {
                v36 = (llvm::Value **)((char *)v35 - 32 * (*((_DWORD *)v26 + 5) & 0x7FFFFFF));
                v37 = *v36;
                *v34 = *v36;
                if (v22 && (*(_DWORD *)(*(_QWORD *)v37 + 8) & 0xFE) == 0x12)
                {
                  v89 = 257;
                  v38 = (llvm::Value *)llvm::ConstantInt::get();
                  *v34 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)v91, v37, v38, (const llvm::Twine *)v88);
                }
                ++v34;
                v35 = (llvm::Instruction *)((char *)v35 + 32);
                --v33;
              }
              while (v33);
            }
            if (*v78)
            {
              v39 = **(llvm::Type ***)&v97[0];
              v6 = v31;
              if ((*(_DWORD *)(**(_QWORD **)&v97[0] + 8) & 0xFE) == 0x12)
                v39 = (llvm::Type *)**((_QWORD **)v39 + 2);
              v88[0] = llvm::Type::getPrimitiveSizeInBits(v39);
              v88[1] = v40;
              if (llvm::TypeSize::operator unsigned long long() == 32)
              {
                v41 = 0;
              }
              else
              {
                v42 = (llvm::Type *)v95[4];
                if ((*(_DWORD *)(**(_QWORD **)&v97[0] + 8) & 0xFE) == 0x12)
                  v42 = (llvm::Type *)llvm::FixedVectorType::get();
                if ((v32 & 0x1FFFFFFFE0) != 0)
                {
                  v43 = (v32 >> 5);
                  v44 = (llvm::Value **)v97;
                  do
                  {
                    v45 = *v44;
                    v89 = 257;
                    *v44++ = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)v91, v45, v42, (const llvm::Twine *)v88);
                    --v43;
                  }
                  while (v43);
                }
                v41 = 1;
              }
            }
            else
            {
              v41 = 0;
              v6 = v31;
            }
            v46 = (char *)v96 + *(_QWORD *)(*(_QWORD *)v96 - 24);
            v85 = v92[2];
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)v91);
            v87 = v93;
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v85, (uint64_t)(v46 + 40));
            if (v86)
              llvm::MetadataTracking::untrack();
            switch(*v79)
            {
              case 1:
                v47 = *v77;
                v48 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v47 = *(uint64_t (**)(_QWORD))(*v48 + v47);
                v49 = v47(v48);
                goto LABEL_85;
              case 2:
                v52 = *v77;
                v53 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v52 = *(uint64_t (**)(_QWORD))(*v53 + v52);
                v54 = *(_QWORD *)v26;
                goto LABEL_76;
              case 3:
                v52 = *v77;
                v53 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v52 = *(uint64_t (**)(_QWORD))(*v53 + v52);
                v54 = *(_QWORD *)&v97[0];
LABEL_76:
                v49 = ((uint64_t (*)(_QWORD *, uint64_t))v52)(v53, v54);
                goto LABEL_85;
              case 4:
                v55 = (unsigned int *)(*(_QWORD *)&v97[0] + 24);
                if (*(_DWORD *)(*(_QWORD *)&v97[0] + 32) >= 0x41u)
                  v55 = *(unsigned int **)v55;
                v56 = *v77;
                v57 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v56 = *(uint64_t (**)(_QWORD))(*v57 + v56);
                v49 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v56)(v57, *(_QWORD *)v26, *v55);
                goto LABEL_85;
              case 5:
                v50 = *v77;
                v51 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v50 = *(uint64_t (**)(_QWORD))(*v51 + v50);
                v49 = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v50)(v51, *(_QWORD *)&v97[0], *((_QWORD *)&v97[0] + 1));
                goto LABEL_85;
              case 6:
                v60 = *v77;
                v61 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v60 = *(uint64_t (**)(_QWORD))(*v61 + v60);
                v63 = (void *)*((_QWORD *)&v97[0] + 1);
                v62 = *(_OWORD **)&v97[0];
                v64 = *(_QWORD *)&v97[1];
                goto LABEL_84;
              case 7:
                v60 = *v77;
                v61 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v60 = *(uint64_t (**)(_QWORD))(*v61 + v60);
                v62 = v97;
                v63 = &unk_1C3E4D9BB;
                v64 = 0;
LABEL_84:
                v49 = ((uint64_t (*)(_QWORD *, _OWORD *, void *, uint64_t))v60)(v61, v62, v63, v64);
                goto LABEL_85;
              case 8:
                v58 = *v77;
                v59 = (_QWORD *)((char *)v96 + (*v76 >> 1));
                if ((*v76 & 1) != 0)
                  v58 = *(uint64_t (**)(_QWORD))(*v59 + v58);
                v49 = ((uint64_t (*)(_QWORD *, _QWORD, _OWORD *, void *, _QWORD))v58)(v59, *(_QWORD *)v26, v97, &unk_1C3E4D9BB, 0);
LABEL_85:
                FPTrunc = (llvm::Value *)v49;
                break;
              default:
                FPTrunc = 0;
                break;
            }
            v66 = (char *)v96 + *(_QWORD *)(*(_QWORD *)v96 - 24);
            v82 = *(_OWORD *)(v66 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v66 + 40));
            v84 = *((_DWORD *)v66 + 34);
            AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v82, (uint64_t)v91);
            if (v83)
              llvm::MetadataTracking::untrack();
            if (v41)
            {
              v67 = *(_QWORD *)v26;
              if (v22 && (*(_DWORD *)(v67 + 8) & 0xFE) == 0x12)
                v67 = **(_QWORD **)(v67 + 16);
              v89 = 257;
              FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)v91, FPTrunc, (llvm::Type *)v67, (const llvm::Twine *)v88);
              if (!v22)
                goto LABEL_96;
            }
            else if (!v22)
            {
              goto LABEL_96;
            }
            v89 = 257;
            v68 = (llvm::Value *)llvm::ConstantInt::get();
            FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v91, v81, FPTrunc, v68, (const llvm::Twine *)v88);
LABEL_96:
            v29 = (uint64_t)FPTrunc;
          }
        }
        if (*(_QWORD *)v26 != v95[1])
          llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v26);
        v24 = v75;
        if (!v75)
          goto LABEL_100;
      }
    }
LABEL_107:
    ++v5;
  }
  while (v5 != 36);
  llvm::IRBuilderDefaultInserter::~IRBuilderDefaultInserter((llvm::IRBuilderDefaultInserter *)v95);
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)&v94);
  if (v91[0] != v92)
    free(v91[0]);
  return v70;
}

uint64_t AGCLLVMUserTileShader::improveDMAPromotionOpportunity(AGCLLVMUserTileShader *this)
{
  AGCLLVMUserShader::improveDMAPromotionOpportunityAGP(this);
  return 1;
}

uint64_t AGCLLVMUserTileShader::getMaxSharedRegisters(AGCLLVMUserTileShader *this)
{
  return *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 848);
}

uint64_t AGCLLVMUserTileShader::supportsConstantSamplers(AGCLLVMUserTileShader *this)
{
  return 1;
}

uint64_t AGCLLVMUserTileShader::getPCFStateForUnit(AGCLLVMUserTileShader *this)
{
  return 0;
}

uint64_t AGCLLVMUserTileShader::needsPCFClamp(AGCLLVMUserTileShader *this)
{
  return 0;
}

uint64_t AGCLLVMUserTileShader::getDrawBufferState(AGCLLVMUserTileShader *this)
{
  return *((_QWORD *)this + 558);
}

uint64_t AGCLLVMUserTileShader::buildTileThreadPositionInGrid(AGCLLVMUserTileShader *this, llvm::Type *a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v3 = a3;
  if ((*(_BYTE *)(*((_QWORD *)this + 559) + 4) & 1) == 0)
    return AGCLLVMUserShader::buildTileThreadPositionInGrid(this, a2, a3);
  v7 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 680))(v7);
  v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *(_OWORD *)(v9 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 40));
  v13 = *((_DWORD *)v9 + 34);
  v10 = AGCLLVMGen3TargetLowerer::buildGlobalID(v8, (uint64_t)&v11, (uint64_t)a2, v3);
  if (v12)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t AGCLLVMUserTileShader::buildTileQuadgroupIndexInThreadgroup(AGCLLVMUserTileShader *this, llvm::Type *a2)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  if ((*(_BYTE *)(*((_QWORD *)this + 559) + 4) & 1) == 0)
    return AGCLLVMUserShader::buildTileQuadgroupIndexInThreadgroup(this, a2);
  v5 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 680))(v5);
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v7 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v7 + 40));
  v11 = *((_DWORD *)v7 + 34);
  v8 = AGCLLVMGen3TargetLowerer::buildQuadGroup(v6, (uint64_t)&v9, (uint64_t)a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMUserTileShader::getTileConstant(_QWORD *a1, llvm::Value *a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  llvm::Type **v9;
  uint64_t v10;
  llvm::ValueHandleBase *v11;
  char v12;
  llvm::GlobalVariable *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  llvm::Type *v19;
  char *v21;
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v2 = (int)a2;
  if (a2 <= 1 && (*(_DWORD *)(a1[559] + 4) & 1) != 0)
  {
    v4 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v23 = *(_OWORD *)(v6 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
    v25 = *((_DWORD *)v6 + 34);
    v7 = AGCLLVMGen3TargetLowerer::buildLocalSize(v5, (uint64_t)&v23, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 232), v2);
    if (v24)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v8 = &a1[3 * a2];
    v9 = (llvm::Type **)v8[542];
    if (!v9)
    {
      v10 = a2;
      v11 = (llvm::ValueHandleBase *)(v8 + 540);
      v12 = 1;
      v13 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v14 = (&AGCLLVMUserTileShader::getTileConstant(AGCLLVMUserShader::TileConstant)::tile_constant_info)[2 * v10];
      HIBYTE(v22) = 1;
      if (*v14)
      {
        v21 = v14;
        v12 = 3;
      }
      LOBYTE(v22) = v12;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v13 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v15 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v16 = *((_QWORD *)v15 + 47);
      v17 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v15 + 32), v13);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v16, v17);
      llvm::ValueHandleBase::operator=(v11, (uint64_t)v13);
      v9 = (llvm::Type **)*((_QWORD *)v11 + 2);
    }
    v18 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v22 = 257;
    v19 = AGCLLVMBuilder::tryDeducePointeeType(v9, a2);
    return llvm::IRBuilderBase::CreateAlignedLoad(v18 + 5, v19, (uint64_t)v9, 0, (uint64_t)&v21);
  }
  return v7;
}

const char *AGCLLVMUserTileShader::dumpType(AGCLLVMUserTileShader *this)
{
  return "tile";
}

uint64_t AGCLLVMUserTileShader::getShaderType(AGCLLVMUserTileShader *this)
{
  return 9;
}

uint64_t AGCLLVMUserTileShader::getTempRegistersLimit(AGCLLVMUserTileShader *this, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *a2 = *(_DWORD *)(v4[50] + 884);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 96))(v4);
  if ((_DWORD)result)
  {
    *a2 = result;
    result = (_DWORD)result != *(_DWORD *)(v4[50] + 884);
  }
  if (*((_DWORD *)this + 1129))
  {
    v6 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
    AGCLLVMGen3TargetLowerer::getTempRegistersLimitAcrossTileSizesForTileShader(v7, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464), *((_DWORD *)this + 1129));
    return 1;
  }
  return result;
}

uint64_t AGCLLVMUserTileShader::getBufferBoundsCheckMode(AGCLLVMUserTileShader *this)
{
  return *((unsigned int *)this + 1130);
}

uint64_t AGCLLVMUserTileShader::getForwardProgressMode(AGCLLVMUserTileShader *this)
{
  return *((unsigned int *)this + 1131);
}

BOOL AGCLLVMUserTileShader::enableSoftFaultOptimization(AGCLLVMUserTileShader *this)
{
  return *((_BYTE *)this + 4530) == 0;
}

uint64_t AGCLLVMUserTileShader::isDMAPromotionDisabled(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + 4528);
}

void AGCLLVMUserTileShader::getCompilationKeyDescription(AGCLLVMUserTileShader *this@<X0>, std::string *a2@<X8>)
{
  unsigned int *v4;
  uint64_t i;
  uint64_t v6;
  _QWORD *v7;
  std::string::size_type v8;
  uint64_t j;
  unint64_t k;
  int v11;
  std::string::size_type size;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string v18;
  std::string v19;
  std::string v20;
  void *v21[2];
  char v22;
  std::string v23;
  void *v24[2];
  char v25;
  std::string v26;
  void *v27[2];
  char v28;
  std::string v29;
  void *v30[2];
  char v31;
  std::string v32;
  void *v33[2];
  char v34;
  std::string v35;
  void *v36[2];
  char v37;
  std::string v38;
  void *v39[2];
  char v40;
  std::string v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *__p[2];
  char v57;
  void *v58[2];
  char v59;
  std::string v60;
  std::string v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74[4];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned int *)*((_QWORD *)this + 559);
  std::string::basic_string[abi:nn180100]<0>(&v60, "AGCTileState");
  std::string::basic_string[abi:nn180100]<0>(v58, "maxTotalThreadsPerThreadgroup");
  _agcFieldString<unsigned int>(&v67, (const void **)v58, *v4);
  std::string::basic_string[abi:nn180100]<0>(__p, "dispatchSizeMatchesTileSize");
  _agcFieldString<unsigned int>(&v68, (const void **)__p, v4[1] & 1);
  _agcGroupWithHeader(&v19, (uint64_t)&v60, (uint64_t)&v67, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v68.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v67 + i * 8 + 24));
  }
  if (v57 < 0)
    operator delete(__p[0]);
  if (v59 < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  v6 = *((_QWORD *)this + 558);
  std::string::basic_string[abi:nn180100]<0>(__p, "AGCDrawBufferState");
  std::string::basic_string[abi:nn180100]<0>(v54, "enabledBits");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v67);
  v7 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v67.__r_.__value_.__r.__words[2], (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v67.__r_.__value_.__r.__words[2] - 24) + 8) = *(_DWORD *)((_BYTE *)v7
                                                                                               + *(_QWORD *)(v67.__r_.__value_.__r.__words[2] - 24)
                                                                                               + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  _agcFieldString<std::string>(&v60, (const void **)v54, (uint64_t)v58);
  if (v59 < 0)
    operator delete(v58[0]);
  v67.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v67.__r_.__value_.__r.__words + *(_QWORD *)(v67.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v67.__r_.__value_.__r.__words[2] = v8;
  v68.__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v71.__r_.__value_.__s.__data_[15] < 0)
    operator delete((void *)v70.__r_.__value_.__r.__words[2]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1CAA2D638](&v72.__r_.__value_.__r.__words[1]);
  std::string::basic_string[abi:nn180100]<0>(v58, "sampleCount");
  _agcFieldString<unsigned int>(&v61, (const void **)v58, (*(_DWORD *)(v6 + 32) >> 8) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v52, "colorSampleCount");
  _agcFieldString<unsigned int>(&v62, (const void **)v52, (unsigned __int16)*(_DWORD *)(v6 + 32) >> 12);
  std::string::basic_string[abi:nn180100]<0>(v50, "outputPartitionSize");
  _agcFieldString<unsigned int>(&v63, (const void **)v50, *(_WORD *)(v6 + 34) & 0x1FF);
  std::string::basic_string[abi:nn180100]<0>(v48, "LIBSpilling");
  _agcFieldString<unsigned int>(&v64, (const void **)v48, (*(_DWORD *)(v6 + 32) >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(v46, "unused");
  _agcFieldString<unsigned int>(&v65, (const void **)v46, *(_DWORD *)(v6 + 32) >> 27);
  std::string::basic_string[abi:nn180100]<0>(v44, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(v42, "encoded[0]");
  _agcStringRepresentation(&v41, (_DWORD *)v6);
  _agcFieldString<std::string>(&v67, (const void **)v42, (uint64_t)&v41);
  std::string::basic_string[abi:nn180100]<0>(v39, "encoded[1]");
  _agcStringRepresentation(&v38, (_DWORD *)(v6 + 4));
  _agcFieldString<std::string>(&v68, (const void **)v39, (uint64_t)&v38);
  std::string::basic_string[abi:nn180100]<0>(v36, "encoded[2]");
  _agcStringRepresentation(&v35, (_DWORD *)(v6 + 8));
  _agcFieldString<std::string>(&v69, (const void **)v36, (uint64_t)&v35);
  std::string::basic_string[abi:nn180100]<0>(v33, "encoded[3]");
  _agcStringRepresentation(&v32, (_DWORD *)(v6 + 12));
  _agcFieldString<std::string>(&v70, (const void **)v33, (uint64_t)&v32);
  std::string::basic_string[abi:nn180100]<0>(v30, "encoded[4]");
  _agcStringRepresentation(&v29, (_DWORD *)(v6 + 16));
  _agcFieldString<std::string>(&v71, (const void **)v30, (uint64_t)&v29);
  std::string::basic_string[abi:nn180100]<0>(v27, "encoded[5]");
  _agcStringRepresentation(&v26, (_DWORD *)(v6 + 20));
  _agcFieldString<std::string>(&v72, (const void **)v27, (uint64_t)&v26);
  std::string::basic_string[abi:nn180100]<0>(v24, "encoded[6]");
  _agcStringRepresentation(&v23, (_DWORD *)(v6 + 24));
  _agcFieldString<std::string>(&v73, (const void **)v24, (uint64_t)&v23);
  std::string::basic_string[abi:nn180100]<0>(v21, "encoded[7]");
  _agcStringRepresentation(&v20, (_DWORD *)(v6 + 28));
  _agcFieldString<std::string>(v74, (const void **)v21, (uint64_t)&v20);
  _agcGroupWithHeader(&v66, (uint64_t)v44, (uint64_t)&v67, 8);
  _agcGroupWithHeader(&v18, (uint64_t)__p, (uint64_t)&v60, 7);
  for (j = 0; j != -21; j -= 3)
  {
    if (SHIBYTE(v66.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v66.__r_.__value_.__l.__data_ + j * 8));
  }
  for (k = 0; k != 0x1FFFFFFFFFFFFFE8; k -= 3)
  {
    if (SHIBYTE(v74[0].__r_.__value_.__r.__words[k + 2]) < 0)
      operator delete(v74[k / 3].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v31 < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v34 < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(v39[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  if (v47 < 0)
    operator delete(v46[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v51 < 0)
    operator delete(v50[0]);
  if (v53 < 0)
    operator delete(v52[0]);
  if (v59 < 0)
    operator delete(v58[0]);
  if (v55 < 0)
    operator delete(v54[0]);
  if (v57 < 0)
    operator delete(__p[0]);
  v11 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  v13 = &v67;
  std::string::basic_string[abi:nn180100]((uint64_t)&v67, size + 1);
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v67.__r_.__value_.__r.__words[0];
  if (size)
  {
    if (v11 >= 0)
      v14 = &v19;
    else
      v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
    memmove(v13, v14, size);
  }
  *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + size) = 10;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v18;
  else
    v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    v16 = v18.__r_.__value_.__l.__size_;
  v17 = std::string::append(&v67, (const std::string::value_type *)v15, v16);
  *a2 = *v17;
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_93:
    operator delete(v19.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
  if (v11 < 0)
    goto LABEL_93;
}

BOOL AGCLLVMUserTileShader::constructReply(AGCLLVMUserTileShader *this)
{
  _BOOL8 result;
  int v3;
  char *v4;
  flatbuffers::FlatBufferBuilder *v5;
  int v6;
  int v7;
  const char *v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  int v20;
  flatbuffers::FlatBufferBuilder *v21;
  int v22;
  const char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int *v28;
  unsigned int *v29;
  unsigned int *v30;

  result = AGCDeserializedReply::deserialize((AGCLLVMUserTileShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if ((_DWORD)result)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUserTileShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMUserObject::constructFlatReply(this);
    v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v5 = (flatbuffers::FlatBufferBuilder *)(v4 + 2472);
    v4[2542] = 1;
    v6 = *((_DWORD *)v4 + 626) - *((_DWORD *)v4 + 630) + *((_DWORD *)v4 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v4 + 2472, v3);
    v7 = flatbuffers::FlatBufferBuilder::EndTable(v5, v6);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMUserTileShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472), v7, v8);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserTileShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v10 = v9 + 2568;
    v11 = *((unsigned __int8 *)this + 4504);
    v12 = *((unsigned __int8 *)this + 16);
    v13 = *((_DWORD *)this + 1079);
    v14 = *((_DWORD *)this + 1129);
    v15 = *((unsigned __int8 *)this + 12);
    v9[2638] = 1;
    v16 = *((_DWORD *)v9 + 650) - *((_DWORD *)v9 + 654) + *((_DWORD *)v9 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v9 + 2568, 10, v14);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v10, 8, v13);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10, 12, v15, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10, 6, v12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10, 4, v11, 0);
    LODWORD(v10) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v10, v16);
    v17 = AGCLLVMUserShader::constructVisibleFunctionShaderInfo<AGCCodeTranslatorVisibleFunctionTypesG10,&(AGCCodeTranslatorG10::CreateShaderInfo(flatbuffers::FlatBufferBuilder &,flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslatorG10::VisibleFunction>>>))>(this);
    v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v19 = v18 + 2568;
    v18[2638] = 1;
    v20 = *((_DWORD *)v18 + 650) - *((_DWORD *)v18 + 654) + *((_DWORD *)v18 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(v18 + 2568, (int)v10);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v19, v17);
    v21 = (AGCLLVMUserTileShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
    v22 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v19, v20);
    flatbuffers::FlatBufferBuilder::Finish(v21, v22, v23);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUserTileShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
    v24 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    if (*((_QWORD *)v24 + 87))
    {
      v25 = v24 + 696;
      v26 = *((_QWORD *)v24 + 88);
      v27 = v24 + 1256;
      if (v26)
        v27 = v25;
    }
    else
    {
      v27 = v24 + 1256;
    }
    v28 = (int *)(*(_QWORD *)v27 + **(unsigned int **)v27);
    v29 = (unsigned int *)((char *)v28 + *(unsigned __int16 *)((char *)v28 - *v28 + 4));
    v30 = (unsigned int *)((char *)v29
                         + *v29
                         + *(unsigned __int16 *)((char *)v29 + *v29 - *(unsigned int *)((char *)v29 + *v29) + 8));
    return *(unsigned int *)((char *)v30 + *v30) < 0x21;
  }
  return result;
}

uint64_t AGCLLVMUserTileShader::needsThreadgroupMemoryOOBChecks(AGCLLVMUserTileShader *this)
{
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1766))
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(this);
  else
    return 0;
}

uint64_t AGCLLVMUserTileShader::getSupportExternalVisibleFunctions(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + 4529);
}

uint64_t AGCLLVMUserTileShader::getTextureWriteFPRoundingMode(AGCLLVMUserTileShader *this)
{
  return *((unsigned int *)this + 1127);
}

uint64_t AGCLLVMUserTileShader::enableImgWBlkPBECmp(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + 4512);
}

void `virtual thunk to'AGCLLVMUserTileShader::~AGCLLVMUserTileShader(AGCLLVMUserTileShader *this)
{
  char *v1;
  llvm::ValueHandleBase *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  *(_QWORD *)v1 = &off_1E7EB6770;
  *((_QWORD *)v1 + 567) = &unk_1E7EB6AA0;
  *((_QWORD *)v1 + 571) = &unk_1E7EB6B90;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)v1 + 561));
  v2 = (llvm::ValueHandleBase *)(v1 + 4440);
  v3 = -144;
  do
  {
    v4 = *((_QWORD *)v2 + 2);
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(v2);
    v2 = (llvm::ValueHandleBase *)((char *)v2 - 24);
    v3 += 24;
  }
  while (v3);
  AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7EB6BA0);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4536));
}

{
  char *v1;
  llvm::ValueHandleBase *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  *(_QWORD *)v1 = &off_1E7EB6770;
  *((_QWORD *)v1 + 567) = &unk_1E7EB6AA0;
  *((_QWORD *)v1 + 571) = &unk_1E7EB6B90;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*((_QWORD **)v1 + 561));
  v2 = (llvm::ValueHandleBase *)(v1 + 4440);
  v3 = -144;
  while (1)
  {
    v4 = *((_QWORD *)v2 + 2);
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(v2);
    v2 = (llvm::ValueHandleBase *)((char *)v2 - 24);
    v3 += 24;
    if (!v3)
    {
      AGCLLVMUserShader::~AGCLLVMUserShader((AGCLLVMUserShader *)v1, (uint64_t *)off_1E7EB6BA0);
      AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 4536));
      JUMPOUT(0x1CAA2D68CLL);
    }
  }
}

const char *`virtual thunk to'AGCLLVMUserTileShader::dumpType(AGCLLVMUserTileShader *this)
{
  return "tile";
}

uint64_t `virtual thunk to'AGCLLVMUserTileShader::getShaderType(AGCLLVMUserTileShader *this)
{
  return 9;
}

uint64_t `virtual thunk to'AGCLLVMUserTileShader::getSupportExternalVisibleFunctions(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 120) + 4529);
}

uint64_t `virtual thunk to'AGCLLVMUserTileShader::getForwardProgressMode(AGCLLVMUserTileShader *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 128) + 4524);
}

void `virtual thunk to'AGCLLVMUserTileShader::getCompilationKeyDescription(AGCLLVMUserTileShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMUserTileShader::getCompilationKeyDescription((AGCLLVMUserTileShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMUserTileShader::constructReply(AGCLLVMUserTileShader *this)
{
  return AGCLLVMUserTileShader::constructReply((AGCLLVMUserTileShader *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t `virtual thunk to'AGCLLVMUserTileShader::getTempRegistersLimit(AGCLLVMUserTileShader *this, unsigned int *a2)
{
  return AGCLLVMUserTileShader::getTempRegistersLimit((AGCLLVMUserTileShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 176)), a2);
}

uint64_t `virtual thunk to'AGCLLVMUserTileShader::getBufferBoundsCheckMode(AGCLLVMUserTileShader *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 4520);
}

BOOL `virtual thunk to'AGCLLVMUserTileShader::enableSoftFaultOptimization(AGCLLVMUserTileShader *this)
{
  return *((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 200) + 4530) == 0;
}

uint64_t `virtual thunk to'AGCLLVMUserTileShader::isDMAPromotionDisabled(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 208) + 4528);
}

uint64_t `virtual thunk to'AGCLLVMUserTileShader::needsThreadgroupMemoryOOBChecks(AGCLLVMUserTileShader *this)
{
  AGCLLVMUserObject *v1;

  v1 = (AGCLLVMUserTileShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 216));
  if (*(_BYTE *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 1766))
    return AGCLLVMUserObject::isThreadgroupMemoryUsed(v1);
  else
    return 0;
}

uint64_t `virtual thunk to'AGCLLVMUserTileShader::getTextureWriteFPRoundingMode(AGCLLVMUserTileShader *this)
{
  return *(unsigned int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224) + 4508);
}

uint64_t `virtual thunk to'AGCLLVMUserTileShader::enableImgWBlkPBECmp(AGCLLVMUserTileShader *this)
{
  return *((unsigned __int8 *)this + *(_QWORD *)(*(_QWORD *)this - 232) + 4512);
}

uint64_t AGCLLVMUserTileShader::buildStageInOrigin(AGCLLVMUserTileShader *this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4)
{
  return AGCLLVMUserShader::buildStageInOriginCommon(this, a3, 0, a4);
}

uint64_t AGCLLVMUserTileShader::buildStageInSize(AGCLLVMUserTileShader *this, llvm::Type *a2, llvm::Type *a3, llvm::Value *a4)
{
  return AGCLLVMUserShader::buildStageInSizeCommon(this, a3, 0, a4);
}

uint64_t AGCLLVMUserTileShader::buildQuadElement(AGCLLVMUserTileShader *this, llvm::Type *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;

  v4 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 680))(v4);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v9 = *(_OWORD *)(v6 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 40));
  v11 = *((_DWORD *)v6 + 34);
  v7 = AGCLLVMGen3TargetLowerer::buildQuadElement(v5, (uint64_t)&v9, (uint64_t)a2);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMUserTileShader::buildQuadgroupsPerThreadgroupCommon<5u>(AGCLLVMUserShader *a1, llvm::Type *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  llvm::IRBuilderBase *v13;
  llvm::Value *v14;
  llvm::Value *Add;
  llvm::Value *v16;
  _WORD v18[20];
  _BYTE v19[32];
  __int16 v20;

  v4 = (AGCLLVMUserShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v5 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, _QWORD))(*(_QWORD *)a1 + 464))(a1, 0);
  v6 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32), v5, a2);
  v7 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMUserShader *, uint64_t))(*(_QWORD *)a1 + 464))(a1, 1);
  v8 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32), v7, a2);
  v20 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v4, v6, v8, (const llvm::Twine *)v19);
  v10 = (AGCLLVMUserShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v11 = AGCLLVMUserShader::buildTileThreadsPerThreadgroup(a1, a2, 2);
  v20 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v10, Mul, v11, (const llvm::Twine *)v19);
  v13 = (AGCLLVMUserShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, v12, v14, (const llvm::Twine *)v19);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v18[16] = 257;
  return llvm::IRBuilderBase::CreateLShr(v13, Add, v16, (const llvm::Twine *)v18);
}

uint64_t AGCLLVMUserTileShader::AGCLLVMUserTileShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v11 = (_BYTE *)(a1 + 4504);
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 4536), a2, *a3);
  AGCLLVMUserShader::AGCLLVMUserShader((uint64_t *)a1, (uint64_t *)off_1E7EB6BA0, (uint64_t)a3, "air.kernel", (uint64_t)&default_cs, 0, 0);
  *(_QWORD *)a1 = &off_1E7EB6770;
  *(_QWORD *)(a1 + 4536) = &unk_1E7EB6AA0;
  *(_QWORD *)(a1 + 4568) = &unk_1E7EB6B90;
  v12 = 4320;
  do
  {
    v13 = (_QWORD *)(a1 + v12);
    v13[1] = 0;
    v13[2] = 0;
    *v13 = 4;
    v14 = a1 + v12 + 24;
    v12 += 24;
  }
  while (v14 != a1 + 4464);
  *(_QWORD *)(a1 + 4464) = a5;
  *(_QWORD *)(a1 + 4472) = a6;
  *(_QWORD *)(a1 + 4496) = 0;
  *(_QWORD *)(a1 + 4488) = 0;
  *(_QWORD *)(a1 + 4480) = a1 + 4488;
  *v11 = 0;
  AGCLLVMUserShader::enableStatistics(a1, *(_DWORD *)(*(_QWORD *)(a4 + 16) + 60) & 1, (*(_DWORD *)(*(_QWORD *)(a4 + 16) + 60) >> 1) & 1);
  v15 = *(_QWORD *)(a4 + 16);
  *(_BYTE *)(a1 + 18) = (*(_BYTE *)(v15 + 60) & 8) != 0;
  *(_BYTE *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 2760) = (*(_DWORD *)(v15 + 60) & 0x4000000) != 0;
  *(_QWORD *)(a1 + 3304) = *(_QWORD *)(v15 + 16);
  *(_DWORD *)(a1 + 4520) = (*(_DWORD *)(v15 + 60) >> 4) & 7;
  *(_DWORD *)(a1 + 4524) = *(_DWORD *)(v15 + 60) >> 31;
  v11[26] = (*(_DWORD *)(v15 + 60) & 0x40000000) != 0;
  *(_DWORD *)(a1 + 4516) = AGCLLVMUserShader::parseMaxTotalThreadsPerThreadgroup((AGCLLVMUserShader *)a1);
  v16 = *(_QWORD *)(a4 + 16);
  v11[24] = (*(_DWORD *)(v16 + 60) & 0x80) != 0;
  *(_DWORD *)(a1 + 4508) = (*(_DWORD *)(v16 + 64) >> 4) & 3;
  v11[8] = (**(uint64_t (***)(uint64_t))a4)(a4);
  v17 = *(_QWORD *)(a4 + 16);
  v11[25] = (*(_BYTE *)(v17 + 64) & 0x40) != 0;
  *(_BYTE *)(a1 + 3712) = *(_BYTE *)(v17 + 61) & 1;
  *(_BYTE *)(a1 + 3713) = (*(_DWORD *)(v17 + 60) & 0x200) != 0;
  return a1;
}

void AGCLLVMUserObject::simplifyGenericIR(AGCLLVMUserObject *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  SimplifyGenericIR(*(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 378), a3, a4, a5, a6, a7, a8, a9);
}

uint64_t AGCLLVMUserObject::replaceF16Builtins(AGCLLVMUserObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Value *v5;
  char *Name;
  size_t v7;
  uint64_t v8;
  int Key;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v14;
  uint64_t v15;
  char *v16[2];

  v1 = (*(uint64_t (**)(_QWORD, AGCLLVMUserObject *, _QWORD))(**(_QWORD **)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                                    + 400)
                                                                      + 816))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), this, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
  v2 = *(_QWORD *)(v1 + 336);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4)
        v5 = (llvm::Value *)(v4 - 56);
      else
        v5 = 0;
      v4 = *(_QWORD *)(v4 + 8);
      Name = (char *)llvm::Value::getName(v5);
      v16[0] = 0;
      v16[1] = 0;
      v14 = 0;
      v15 = 0;
      if (AGCLLVMBuilder::findPrefix(Name, v7, v16, &v14, "air.", 4uLL)
        && llvm::GlobalValue::isDeclaration(v5))
      {
        v8 = *(_QWORD *)(v1 + 760);
        Key = llvm::StringMapImpl::FindKey();
        if (Key == -1)
          v10 = *(unsigned int *)(v8 + 8);
        else
          v10 = Key;
        v11 = (_QWORD *)(*(_QWORD *)v8 + 8 * v10);
        if (v11 != (_QWORD *)(**(_QWORD **)(v1 + 760) + 8 * *(unsigned int *)(*(_QWORD *)(v1 + 760) + 8))
          && llvm::StringRef::find() != -1)
        {
          AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::doReplacement(v1 + 376, v5, *v11 + 8, v14, v15);
        }
      }
    }
    while (v4 != v3);
  }
  v12 = *(unsigned __int8 *)(v1 + 768);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return v12;
}

uint64_t *AGCLLVMUserObject::setupGlobalBufferPointer(AGCLLVMUserObject *this, llvm::PointerType ***a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, char a7, uint64_t a8)
{
  int v15;
  int v16;
  uint64_t *i;
  unsigned int v19;
  char v20;
  llvm::GlobalVariable *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::PointerType **v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *j;
  unsigned int v35;
  char v36;
  char v37;
  _QWORD **p_src;
  char v39;
  char v40;
  _QWORD **v41;
  uint64_t v42;
  char *v43;
  uint64_t Impl;
  char v45;
  llvm::GlobalVariable *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *PointerCast;
  llvm::Value *GlobalBufferBinding;
  llvm::Constant *v53;
  unsigned int v54;
  llvm::PointerType **v55;
  char *v56;
  char *v57;
  unint64_t v58;
  llvm::PointerType *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  const void **v69;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v82;
  char v83;
  unsigned int v84;
  llvm::PointerType ***v85;
  unsigned int v86;
  unsigned int v88;
  _QWORD v89[2];
  const char *v90;
  __int16 v91;
  unsigned int v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _WORD v97[64];
  _QWORD *__src;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v92 = a4;
  v15 = *(_DWORD *)(a3 + 8);
  if (v15 == 15)
  {
    if ((v15 & 0xFE) == 0x12)
      v15 = *(_DWORD *)(**(_QWORD **)(a3 + 16) + 8);
    if ((v15 & 0xFFFFFF00) == 0x300)
    {
      v16 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      if (v16 != 29 && v16 != 8)
      {
        v45 = a7;
        v46 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        v93 = "agc.local_buffer_pointers.";
        v95 = a4;
        v97[0] = 2051;
        v47 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v47 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        v48 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v49 = *((_QWORD *)v48 + 47);
        v50 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v48 + 32), v46);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v49, v50);
        llvm::PointerType::get();
        a7 = v45;
        PointerCast = (uint64_t *)llvm::ConstantExpr::getPointerCast();
        goto LABEL_119;
      }
      LODWORD(__src) = a4;
      for (i = (uint64_t *)*((_QWORD *)this + 110); i; i = (uint64_t *)*i)
      {
        v19 = *((_DWORD *)i + 8);
        if (v19 <= a4)
        {
          if (v19 >= a4)
          {
            std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 109, a4, &__src);
            llvm::PointerType::get();
            return (uint64_t *)llvm::ConstantExpr::getPointerCast();
          }
          ++i;
        }
      }
      v20 = a7;
      v21 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v93 = "agc.local_buffer_pointers.";
      v95 = a4;
      v97[0] = 2051;
      v22 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v22 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v24 = (uint64_t)(v23 + 3080);
      v25 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v23 + 32), v21);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
      std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 109, a4, &__src)[5] = (uint64_t *)v21;
      llvm::PointerType::get();
      PointerCast = (uint64_t *)llvm::ConstantExpr::getPointerCast();
      if ((_DWORD)a8 != -1)
      {
        v26 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
        (*(void (**)(uint64_t, llvm::GlobalVariable *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v26 + 176))(v26, v21, a8, 0, 0);
      }
      if ((v20 & 3) == 1)
      {
        llvm::Module::getOrInsertNamedMetadata();
        goto LABEL_123;
      }
      return PointerCast;
    }
  }
  v93 = &v95;
  v94 = 0x800000000;
  v27 = a2[1];
  if (!v27)
    goto LABEL_36;
  do
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v93, (uint64_t)v27[3]);
    v27 = (llvm::PointerType **)v27[1];
  }
  while (v27);
  v28 = v94;
  if (!(_DWORD)v94)
  {
LABEL_34:
    LOBYTE(v27) = 0;
    goto LABEL_36;
  }
  while (1)
  {
    v29 = *((_QWORD *)v93 + --v28);
    LODWORD(v94) = v28;
    v30 = *(unsigned __int8 *)(v29 + 16);
    if (v30 <= 0x1B)
      break;
    if (v30 != 60)
    {
      if (v30 != 77 && v30 != 62)
        goto LABEL_35;
      goto LABEL_30;
    }
LABEL_33:
    if (!v28)
      goto LABEL_34;
  }
  if (v30 == 5)
  {
    v31 = *(unsigned __int16 *)(v29 + 18);
    if (v31 == 34 || v31 == 49)
    {
LABEL_30:
      v32 = *(_QWORD *)(v29 + 8);
      if (v32)
      {
        do
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v93, *(_QWORD *)(v32 + 24));
          v32 = *(_QWORD *)(v32 + 8);
        }
        while (v32);
        v28 = v94;
      }
      goto LABEL_33;
    }
  }
LABEL_35:
  LOBYTE(v27) = 1;
LABEL_36:
  v85 = a2;
  v86 = a8;
  if (v93 != &v95)
    free(v93);
  v33 = a5;
  if ((v27 & 1) != 0 || AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(this))
  {
    for (j = (uint64_t *)*((_QWORD *)this + 107); j; j = (uint64_t *)*j)
    {
      v35 = *((_DWORD *)j + 8);
      if (v35 <= a4)
      {
        if (v35 >= a4)
        {
          PointerCast = std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 106, a4, &v92)[5];
          a8 = a8;
          goto LABEL_117;
        }
        ++j;
      }
    }
    if (a5 == -1)
    {
      LODWORD(__src) = a4;
      p_src = (_QWORD **)__src;
      v36 = 8;
      v37 = 1;
    }
    else
    {
      v89[0] = a5;
      v90 = ".";
      v91 = 776;
      __src = v89;
      v100 = a4;
      v36 = 2;
      v37 = 8;
      p_src = &__src;
    }
    LOBYTE(v102) = v36;
    BYTE1(v102) = v37;
    v93 = "agc.buffer_pointers.";
    v95 = (uint64_t)p_src;
    LOBYTE(v97[0]) = 3;
    HIBYTE(v97[0]) = v36;
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v88, a4, a5);
    PointerCast = (uint64_t *)AGCLLVMUserObject::createGlobalBufferBinding(this, (llvm::Type *)a3, (const llvm::Twine *)&v93, v88, a6, 139, 0);
    *((_BYTE *)PointerCast + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 106, a4, &v92)[5] = PointerCast;
    v42 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 344))(v42, 1);
    __src = (_QWORD *)llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    v99 = llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    v100 = llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    v101 = llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    v102 = llvm::ValueAsMetadata::get();
    v93 = &v95;
    v94 = 0x500000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v93, &__src, &v103);
    v43 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 3080;
    Impl = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, Impl);
    if (v93 != &v95)
      free(v93);
    a8 = a8;
    v33 = a5;
  }
  else
  {
    if (a5 == -1)
    {
      LODWORD(__src) = a4;
      v39 = 8;
      v40 = 1;
      v41 = (_QWORD **)__src;
    }
    else
    {
      v89[0] = a5;
      v90 = ".";
      v91 = 776;
      __src = v89;
      v100 = a4;
      v39 = 2;
      v40 = 8;
      v41 = &__src;
    }
    v83 = a7;
    LOBYTE(v102) = v39;
    BYTE1(v102) = v40;
    v93 = "agc.buffer_pointers.";
    v95 = (uint64_t)v41;
    v96 = v99;
    LOBYTE(v97[0]) = 3;
    HIBYTE(v97[0]) = v39;
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v88, a4, a5);
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, (llvm::Type *)a3, (const llvm::Twine *)&v93, v88, a6, 5, 0);
    *((_BYTE *)GlobalBufferBinding + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    v54 = *(_DWORD *)(*(_QWORD *)GlobalBufferBinding + 8);
    if ((v54 & 0xFE) == 0x12)
      v54 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)GlobalBufferBinding + 16) + 8);
    v82 = (uint64_t *)GlobalBufferBinding;
    v84 = v54 >> 8;
    AGCLLVMObject::replaceConstantChainWithInstrs((AGCLLVMObject *)a2, v53);
    v93 = v97;
    v94 = (uint64_t)v97;
    v95 = 16;
    LODWORD(v96) = 0;
    v55 = a2[1];
    if (v55)
    {
      v56 = 0;
      v57 = 0;
      v58 = 0;
      do
      {
        v59 = v55[3];
        if ((unint64_t)v57 >= v58)
        {
          v60 = (v57 - v56) >> 3;
          v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 61)
LABEL_126:
            abort();
          if ((uint64_t)(v58 - (_QWORD)v56) >> 2 > v61)
            v61 = (uint64_t)(v58 - (_QWORD)v56) >> 2;
          if (v58 - (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          if (v62)
            v62 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v62);
          else
            v63 = 0;
          v64 = (char *)(v62 + 8 * v60);
          *(_QWORD *)v64 = v59;
          v65 = v64 + 8;
          while (v57 != v56)
          {
            v66 = *((_QWORD *)v57 - 1);
            v57 -= 8;
            *((_QWORD *)v64 - 1) = v66;
            v64 -= 8;
          }
          v58 = v62 + 8 * v63;
          if (v56)
            operator delete(v56);
          v56 = v64;
          v57 = v65;
        }
        else
        {
          *(_QWORD *)v57 = v59;
          v57 += 8;
        }
        v55 = (llvm::PointerType **)v55[1];
      }
      while (v55);
      while (v56 != v57)
      {
        v68 = v57 - 8;
        v67 = *((_QWORD *)v57 - 1);
        if (v67)
        {
          v69 = llvm::SmallPtrSetImpl<llvm::BasicBlock *>::find((llvm::SmallPtrSetImplBase *)&v93, (const void *)v67);
          v70 = (void *)v94 == v93 ? (uint64_t *)((char *)&v95 + 4) : &v95;
          if ((const void **)(v94 + 8 * *(unsigned int *)v70) == v69)
            llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, (llvm::SmallPtrSetImplBase *)&v93, (void *)v67);
        }
        v71 = *(unsigned __int8 *)(v67 + 16);
        if (v71 != 60
          && *(_BYTE *)(*(_QWORD *)v67 + 8) == 15
          && (v71 == 77 || v71 == 62)
          && (*(_QWORD *)v67 = llvm::PointerType::getWithSamePointeeType(*(llvm::PointerType ***)v67, (llvm::PointerType *)v84), (v72 = *(_QWORD *)(v67 + 8)) != 0))
        {
          do
          {
            v73 = *(_QWORD *)(v72 + 24);
            if ((unint64_t)v68 >= v58)
            {
              v74 = (v68 - v56) >> 3;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 61)
                goto LABEL_126;
              if ((uint64_t)(v58 - (_QWORD)v56) >> 2 > v75)
                v75 = (uint64_t)(v58 - (_QWORD)v56) >> 2;
              if (v58 - (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v75;
              if (v76)
                v76 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v76);
              else
                v77 = 0;
              v78 = (char *)(v76 + 8 * v74);
              *(_QWORD *)v78 = v73;
              v57 = v78 + 8;
              while (v68 != v56)
              {
                v79 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *((_QWORD *)v78 - 1) = v79;
                v78 -= 8;
              }
              v58 = v76 + 8 * v77;
              if (v56)
                operator delete(v56);
              v56 = v78;
            }
            else
            {
              *(_QWORD *)v68 = v73;
              v57 = v68 + 8;
            }
            v72 = *(_QWORD *)(v72 + 8);
            v68 = v57;
          }
          while (v72);
        }
        else
        {
          v57 = v68;
        }
      }
    }
    else
    {
      v56 = 0;
    }
    *v85 = (llvm::PointerType **)llvm::PointerType::getWithSamePointeeType(*v85, (llvm::PointerType *)v84);
    if ((void *)v94 != v93)
      free((void *)v94);
    a7 = v83;
    a8 = v86;
    v33 = a5;
    if (v56)
      operator delete(v56);
    PointerCast = v82;
  }
LABEL_117:
  if (v33 == -1)
    ++*((_DWORD *)this + 828);
LABEL_119:
  if ((_DWORD)a8 != -1)
  {
    v80 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v80 + 176))(v80, PointerCast, a8, 0, 0);
  }
  if ((a7 & 3) == 1)
  {
    llvm::Module::getOrInsertNamedMetadata();
LABEL_123:
    v93 = (void *)llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  return PointerCast;
}

llvm::Value *AGCLLVMUserObject::replaceBuiltinFunction(_QWORD *a1, uint64_t a2)
{
  char *v3;
  _WORD v5[20];
  uint64_t v6;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v6 = llvm::ConstantInt::get();
  v5[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(v3 + 40), *(_QWORD *)(a2 + 24), a2, (uint64_t)&v6, 1, (uint64_t)v5);
}

BOOL AGCLLVMUserObject::isAllocaStoreForDebugger(char a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v5;
  unsigned int v6;

  result = 0;
  if (a3)
  {
    if (a1)
    {
      result = 0;
      if (a2)
      {
        if (*(_BYTE *)(a2 + 16) == 61)
        {
          v5 = **(_QWORD **)(a2 - 32);
          v6 = *(_DWORD *)(v5 + 8);
          if ((v6 & 0xFE) == 0x12)
            v6 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 8);
          return v6 <= 0xFF && *(_QWORD *)(a2 - 64) == a3;
        }
      }
    }
  }
  return result;
}

BOOL AGCLLVMUserObject::isVoidPointerUseInIntrinsic(AGCLLVMUserObject *a1, _QWORD *a2)
{
  uint64_t v2;
  llvm::Value *v4;
  int v5;
  _BOOL8 result;

  v2 = a2[1];
  if (**(_QWORD **)(*a2 + 16) != *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 216))
  {
    if (v2)
    {
      while (1)
      {
        v4 = *(llvm::Value **)(v2 + 24);
        if (*((_BYTE *)v4 + 16) != 77 || (AGCLLVMUserObject::isVoidPointerUseInIntrinsic(a1, v4) & 1) == 0)
          break;
        v2 = *(_QWORD *)(v2 + 8);
        if (!v2)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if (!v2)
    return 1;
  while (1)
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 24) + 16);
    result = v5 == 84;
    if (v5 != 84)
      break;
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 1;
  }
  return result;
}

uint64_t AGCLLVMUserObject::IsPhiInputsEquivalent(AGCLLVMUserObject *this, llvm::PHINode *a2)
{
  unsigned int v2;
  const llvm::Instruction *v3;
  _DWORD *v4;
  int v5;
  uint64_t v6;
  const void **v7;
  const void **v8;
  uint64_t v9;
  unsigned int v10;
  const void **imp;
  uint64_t *v12;
  const void **v13;
  BOOL v14;
  uint64_t v15;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  _BYTE v21[64];
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x800000000;
  v17 = v21;
  v18 = v21;
  v19 = 8;
  v20 = 0;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, (uint64_t)this);
  v2 = v23;
  if ((_DWORD)v23)
  {
    v3 = 0;
    do
    {
      v4 = (_DWORD *)*((_QWORD *)v22 + v2 - 1);
      LODWORD(v23) = v2 - 1;
      llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v17, v4);
      v5 = v4[5];
      if ((v5 & 0x40000000) != 0)
      {
        v7 = (const void **)*((_QWORD *)v4 - 1);
        v6 = v5 & 0x7FFFFFF;
        if (v6)
        {
LABEL_7:
          v8 = &v7[4 * v6];
          do
          {
            v9 = (uint64_t)*v7;
            v10 = *((unsigned __int8 *)*v7 + 16);
            if (*v7 && v10 == 83)
            {
              imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v17, *v7);
              if (v18 == v17)
                v12 = (uint64_t *)((char *)&v19 + 4);
              else
                v12 = &v19;
              v13 = (const void **)&v18[8 * *(unsigned int *)v12];
              if (v13 != imp)
              {
                while ((unint64_t)*imp >= 0xFFFFFFFFFFFFFFFELL)
                {
                  if (++imp == v13)
                    goto LABEL_26;
                }
              }
              if (v13 == imp)
LABEL_26:
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, v9);
            }
            else
            {
              if (v9)
                v14 = v10 >= 0x1C;
              else
                v14 = 0;
              if (v14)
              {
                if (v3)
                {
                  if (!llvm::Instruction::isIdenticalTo((llvm::Instruction *)*v7, v3))
                  {
                    v15 = 0;
                    goto LABEL_31;
                  }
                }
                else
                {
                  v3 = (const llvm::Instruction *)*v7;
                }
              }
            }
            v7 += 4;
          }
          while (v7 != v8);
        }
      }
      else
      {
        v6 = v5 & 0x7FFFFFF;
        v7 = (const void **)&v4[-8 * v6];
        if (v6)
          goto LABEL_7;
      }
      v2 = v23;
    }
    while ((_DWORD)v23);
  }
  v15 = 1;
LABEL_31:
  if (v18 != v17)
    free(v18);
  if (v22 != v24)
    free(v22);
  return v15;
}

uint64_t AGCLLVMUserObject::replaceArgumentBufferAccesses(AGCLLVMUserObject::IndirectArgumentBufferInfo const*)::$_0::operator()(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  AGCLLVMUserObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Instruction *v20;
  unsigned int *v21;
  uint64_t v22;
  float *v23;
  unint64_t v24;
  uint8x8_t v25;
  _QWORD *v26;
  unint64_t v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  int8x8_t prime;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  int v57;

  v7 = *(_QWORD **)(a1 + 8);
  v8 = a2;
  v9 = v7[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = a2;
      if (v9 <= a2)
        v11 = a2 % v9;
    }
    else
    {
      v11 = ((_DWORD)v9 - 1) & a2;
    }
    v12 = *(_QWORD **)(*v7 + 8 * v11);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == a2)
          {
            if (*((_DWORD *)v13 + 4) == a2)
              return v13[3];
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = *(AGCLLVMUserObject **)a1;
  v16 = *(_QWORD *)(**(_QWORD **)a1 - 24) + *(_QWORD *)a1;
  v55 = *(_OWORD *)(v16 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v16 + 40));
  v57 = *(_DWORD *)(v16 + 136);
  v17 = *(_QWORD *)(*((_QWORD *)v15 + 22) + 80);
  if (v17)
    v18 = v17 - 24;
  else
    v18 = 0;
  v19 = *(_QWORD *)(v18 + 40);
  if (v19)
    v20 = (llvm::Instruction *)(v19 - 24);
  else
    v20 = 0;
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24) + 40), v20);
  v21 = (unsigned int *)(a3 + 272);
  if (!*(_BYTE *)(a3 + 276))
    v21 = (unsigned int *)&RASTER_ORDER_GROUP_NONE;
  v22 = AGCLLVMUserObject::setupBufferArgumentData(v15, *(_QWORD *)(a3 + 264), a2, **(_DWORD **)(a1 + 16), *(_DWORD *)(a3 + 260), *(_BYTE *)(a3 + 256), *v21);
  v23 = *(float **)(a1 + 8);
  v24 = *((_QWORD *)v23 + 1);
  if (v24)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v24 <= v8)
        v3 = v8 % v24;
    }
    else
    {
      v3 = ((_DWORD)v24 - 1) & v8;
    }
    v26 = *(_QWORD **)(*(_QWORD *)v23 + 8 * v3);
    if (v26)
    {
      v13 = (_QWORD *)*v26;
      if (*v26)
      {
        do
        {
          v27 = v13[1];
          if (v27 == v8)
          {
            if (*((_DWORD *)v13 + 4) == a2)
              goto LABEL_98;
          }
          else
          {
            if (v25.u32[0] > 1uLL)
            {
              if (v27 >= v24)
                v27 %= v24;
            }
            else
            {
              v27 &= v24 - 1;
            }
            if (v27 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v8;
  *((_DWORD *)v13 + 4) = a2;
  v13[3] = v22;
  v28 = (float)(unint64_t)(*((_QWORD *)v23 + 3) + 1);
  v29 = v23[8];
  if (!v24 || (float)(v29 * (float)v24) < v28)
  {
    v30 = 1;
    if (v24 >= 3)
      v30 = (v24 & (v24 - 1)) != 0;
    v31 = v30 | (2 * v24);
    v32 = vcvtps_u32_f32(v28 / v29);
    if (v31 <= v32)
      prime = (int8x8_t)v32;
    else
      prime = (int8x8_t)v31;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v24 = *((_QWORD *)v23 + 1);
    }
    if (*(_QWORD *)&prime > v24)
      goto LABEL_54;
    if (*(_QWORD *)&prime < v24)
    {
      v40 = vcvtps_u32_f32((float)*((unint64_t *)v23 + 3) / v23[8]);
      if (v24 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v24), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (*(_QWORD *)&prime <= v40)
        prime = (int8x8_t)v40;
      if (*(_QWORD *)&prime >= v24)
      {
        v24 = *((_QWORD *)v23 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_54:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v34 = operator new(8 * *(_QWORD *)&prime);
          v35 = *(_QWORD **)v23;
          *(_QWORD *)v23 = v34;
          if (v35)
            operator delete(v35);
          v36 = 0;
          *((int8x8_t *)v23 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)v23 + 8 * v36++) = 0;
          while (*(_QWORD *)&prime != v36);
          v37 = (_QWORD *)*((_QWORD *)v23 + 2);
          if (v37)
          {
            v38 = v37[1];
            v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(_QWORD *)&prime)
                v38 %= *(_QWORD *)&prime;
            }
            else
            {
              v38 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)v23 + 8 * v38) = v23 + 4;
            v43 = (_QWORD *)*v37;
            if (*v37)
            {
              do
              {
                v44 = v43[1];
                if (v39.u32[0] > 1uLL)
                {
                  if (v44 >= *(_QWORD *)&prime)
                    v44 %= *(_QWORD *)&prime;
                }
                else
                {
                  v44 &= *(_QWORD *)&prime - 1;
                }
                if (v44 != v38)
                {
                  if (!*(_QWORD *)(*(_QWORD *)v23 + 8 * v44))
                  {
                    *(_QWORD *)(*(_QWORD *)v23 + 8 * v44) = v37;
                    goto LABEL_79;
                  }
                  *v37 = *v43;
                  *v43 = **(_QWORD **)(*(_QWORD *)v23 + 8 * v44);
                  **(_QWORD **)(*(_QWORD *)v23 + 8 * v44) = v43;
                  v43 = v37;
                }
                v44 = v38;
LABEL_79:
                v37 = v43;
                v43 = (_QWORD *)*v43;
                v38 = v44;
              }
              while (v43);
            }
          }
          v24 = (unint64_t)prime;
          goto LABEL_83;
        }
        v51 = *(_QWORD **)v23;
        *(_QWORD *)v23 = 0;
        if (v51)
          operator delete(v51);
        v24 = 0;
        *((_QWORD *)v23 + 1) = 0;
      }
    }
LABEL_83:
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v24 <= v8)
        v3 = v8 % v24;
      else
        v3 = v8;
    }
    else
    {
      v3 = ((_DWORD)v24 - 1) & v8;
    }
  }
  v45 = *(_QWORD **)v23;
  v46 = *(_QWORD **)(*(_QWORD *)v23 + 8 * v3);
  if (v46)
  {
    *v13 = *v46;
  }
  else
  {
    v47 = *((_QWORD *)v23 + 2);
    *v13 = v47;
    *((_QWORD *)v23 + 2) = v13;
    v45[v3] = v23 + 4;
    if (!v47)
      goto LABEL_97;
    v48 = *(_QWORD *)(v47 + 8);
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v48 >= v24)
        v48 %= v24;
    }
    else
    {
      v48 &= v24 - 1;
    }
    v46 = (_QWORD *)(*(_QWORD *)v23 + 8 * v48);
  }
  *v46 = v13;
LABEL_97:
  ++*((_QWORD *)v23 + 3);
LABEL_98:
  v49 = (uint64_t)v15 + *(_QWORD *)(*(_QWORD *)v15 - 24) + 32;
  v52 = v55;
  v53 = v56;
  if (v56)
    llvm::MetadataTracking::track();
  v54 = v57;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v52, v49 + 8);
  if (v53)
    llvm::MetadataTracking::untrack();
  if (v56)
    llvm::MetadataTracking::untrack();
  return v13[3];
}

llvm::Value *AGCLLVMUserObject::buildABResourceIntrinsic(AGCLLVMUserObject *this, unsigned __int8 **a2, llvm::Type *a3, llvm::Value *a4, AGCArgumentBuffer::Resource::Bounds *a5, unsigned int a6, llvm::Value *a7)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Function;
  uint64_t v15;
  llvm::Type **v16;
  _WORD v18[20];
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v11 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v12 = v11[35];
  v20 = v11[29];
  v21 = v12;
  v13 = *(_QWORD *)a7;
  v22 = v20;
  v23 = v13;
  Function = AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::getFunction(a2, v11[46], (unint64_t)a3);
  v15 = *(_QWORD *)(*(_QWORD *)this - 24);
  v19[0] = a4;
  v16 = (llvm::Type **)((char *)this + v15 + 40);
  v19[1] = AGCArgumentBuffer::Resource::Bounds::toConstantVector((uint64_t)a5, v16);
  v19[2] = llvm::ConstantInt::get();
  v19[3] = a7;
  v18[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v16, *(_QWORD *)(Function + 24), Function, (uint64_t)v19, 4, (uint64_t)v18);
}

llvm::Value *AGCLLVMUserObject::createGlobalBufferBinding(AGCLLVMUserObject *this, llvm::Type *a2, const llvm::Twine *a3, unsigned int a4, int a5, int a6, int a7)
{
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unsigned int *v24;
  char *v25;
  unsigned int v26;
  char *v27;
  int v28;
  _BOOL4 v29;
  llvm::Value *v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  _DWORD *v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  _BOOL4 v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t Impl;
  uint64_t v62;
  uint64_t v63;
  int v65;
  int v66;
  _BOOL4 v67;
  _QWORD __src[3];
  void *v69;
  uint64_t v70;
  uint64_t v71;
  llvm::Value *v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v12 = (_DWORD *)*((_QWORD *)this + 417);
  v13 = *((unsigned int *)this + 836);
  v14 = &v12[10 * v13];
  v15 = v12;
  if ((_DWORD)v13)
  {
    v16 = 0;
    while (1)
    {
      v15 = &v12[v16];
      if (!*(_QWORD *)&v12[v16 + 6])
        break;
      v16 += 10;
      if (10 * v13 == v16)
      {
        v15 = &v12[10 * v13];
        goto LABEL_14;
      }
    }
  }
  v17 = v15 + 10;
  if (v15 != v14 && v17 != v14)
  {
    do
    {
      if (*((_QWORD *)v17 + 3))
      {
        *v15 = *v17;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v15 + 2), (_QWORD *)v17 + 1);
        v15[8] = v17[8];
        v15 += 10;
      }
      v17 += 10;
    }
    while (v17 != v14);
    v12 = (_DWORD *)*((_QWORD *)this + 417);
    LODWORD(v13) = *((_DWORD *)this + 836);
  }
LABEL_14:
  llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>::destroy_range((uint64_t)v15, (uint64_t)&v12[10 * v13]);
  v19 = (char *)*((_QWORD *)this + 417);
  v20 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v15 - v19) >> 3);
  *((_DWORD *)this + 836) = v20;
  v21 = -858993459 * (((char *)v15 - v19) >> 3);
  v22 = &v19[40 * v21];
  if ((_DWORD)v20)
  {
    do
    {
      v23 = v21 >> 1;
      v24 = (unsigned int *)&v19[40 * (v21 >> 1)];
      v26 = *v24;
      v25 = (char *)(v24 + 10);
      v21 += ~(v21 >> 1);
      if (v26 < a4)
        v19 = v25;
      else
        v21 = v23;
    }
    while (v21);
    if (a6 == 139 && v19 != v22)
    {
      v27 = v19;
      while (*(_DWORD *)v27 == a4)
      {
        if (*((_DWORD *)v27 + 8) == 139)
          return (llvm::Value *)*((_QWORD *)v27 + 3);
        v27 += 40;
        if (v27 == v22)
          break;
      }
    }
    v28 = a6;
    v66 = a7;
    v29 = a6 == 139;
    if (v19 != v22)
      v22 = v19;
  }
  else
  {
    v66 = a7;
    v28 = a6;
    v29 = a6 == 139;
  }
  v30 = (llvm::Value *)llvm::User::operator new((llvm::User *)0x58);
  v67 = v29;
  v31 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v31 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  v32 = v66;
  if (AGCLLVMObject::isBufferBoundsChecksEnabled((AGCLLVMUserObject *)((char *)this
                                                                                    + *(_QWORD *)(*(_QWORD *)this - 24))))
  {
    v33 = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)this + 88))(this);
    v34 = 24;
    if (v33 == 106)
      v34 = 344;
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)((char *)this
                                                                     + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                     + 400)
                                                         + 824)
                                           + v34))(*(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824), 0);
    llvm::Value::getContext(v30);
    *((_QWORD *)v30 + 9) = llvm::AttributeSet::addAttribute();
  }
  LODWORD(v69) = a4;
  v70 = 4;
  v71 = 0;
  v72 = v30;
  if (v30 != (llvm::Value *)-8192 && v30 != (llvm::Value *)-4096 && v30)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v70);
  v73 = v28;
  v35 = *((_QWORD *)this + 417);
  if ((char *)(v35 + 40 * *((unsigned int *)this + 836)) == v22)
  {
    v53 = llvm::SmallVectorTemplateCommon<AGCLLVMUserObject::BufferBinding,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>>((uint64_t)this + 3336, (unint64_t)&v69);
    v54 = (_DWORD *)(*((_QWORD *)this + 417) + 40 * *((unsigned int *)this + 836));
    *v54 = *(_DWORD *)v53;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v54 + 2), 2u, (_QWORD *)(v53 + 8));
    v54[8] = *(_DWORD *)(v53 + 32);
    ++*((_DWORD *)this + 836);
  }
  else
  {
    v65 = a5;
    v36 = &v22[-v35];
    v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v22[-v35] >> 3);
    v38 = llvm::SmallVectorTemplateCommon<AGCLLVMUserObject::BufferBinding,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMUserObject::BufferBinding,false>>((uint64_t)this + 3336, (unint64_t)&v69);
    v39 = *((_QWORD *)this + 417);
    v40 = &v36[v39];
    v41 = (_DWORD *)(v39 + 40 * *((unsigned int *)this + 836));
    *v41 = *(v41 - 10);
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v41 + 2), 2u, (_QWORD *)v41 - 4);
    v41[8] = *(v41 - 2);
    v42 = *((_QWORD *)this + 417);
    v43 = *((_DWORD *)this + 836);
    v44 = (char *)(v42 + 40 * v43 - 40);
    if (v44 != v40)
    {
      v45 = v42 + 40 * v43 - 40;
      do
      {
        v46 = *(_DWORD *)(v45 - 40);
        v45 -= 40;
        *(_DWORD *)v44 = v46;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v44 + 8), (_QWORD *)v44 - 4);
        *((_DWORD *)v44 + 8) = *((_DWORD *)v44 - 2);
        v44 = (char *)v45;
      }
      while ((char *)v45 != v40);
      v43 = *((_DWORD *)this + 836);
      v42 = *((_QWORD *)this + 417);
      v32 = v66;
    }
    v47 = v43 + 1;
    *((_DWORD *)this + 836) = v47;
    v48 = v42 + 40 * v47;
    v50 = v38 >= (unint64_t)v40 && v38 < v48;
    v51 = v38 + 40 * v50;
    *(_DWORD *)v40 = *(_DWORD *)v51;
    v52 = v39 + 40 * v37;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v52 + 8), (_QWORD *)(v51 + 8));
    *(_DWORD *)(v52 + 32) = *(_DWORD *)(v51 + 32);
    a5 = v65;
  }
  if (v72 != (llvm::Value *)-8192 && v72 != (llvm::Value *)-4096 && v72)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v70);
  __src[0] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  __src[1] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  __src[2] = llvm::ValueAsMetadata::get();
  v69 = &v71;
  v70 = 0x400000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v69, __src, &v69);
  v55 = !v67;
  if (a5)
    v55 = 0;
  if (!v55)
  {
    llvm::ConstantInt::get();
    v56 = llvm::ValueAsMetadata::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v69, v56);
    if (v67)
    {
      v57 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v58 = 24;
      if (v57 == 7)
        v58 = 344;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                        + 400)
                                                            + 824)
                                              + v58))(*(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824), 1);
      llvm::ConstantInt::get();
      v59 = llvm::ValueAsMetadata::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v69, v59);
    }
  }
  v60 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 376);
  Impl = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v60, Impl);
  if (v32)
  {
    v62 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 384);
    v63 = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v62, v63);
  }
  if (v69 != &v71)
    free(v69);
  return v30;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::erase(int32x2_t *a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD v5[4];

  v5[1] = 0;
  v5[2] = -8192;
  v5[0] = 2;
  v5[3] = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a2 + 8), v5);
  *(_QWORD *)(a2 + 32) = 0;
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t AGCLLVMUserObject::replaceArgumentBufferStoreTextureOrSampler(AGCLLVMUserObject *a1, uint64_t a2, uint64_t a3)
{
  llvm::Type *v6;
  llvm::Value *v7;
  llvm::Type *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t AlignedLoad;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Type *v16;
  llvm::Value *v17;
  llvm::Type *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  llvm::Type **Value;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Type **v30;
  int v32;
  unsigned int v33;
  _BYTE v34[32];
  __int16 v35;

  v6 = (llvm::Type *)llvm::StructType::get();
  v7 = *(llvm::Value **)(a2 - 64);
  v8 = (llvm::Type *)llvm::PointerType::get();
  v9 = AGCLLVMUserObject::addrSpaceReconciliation(a1, v7, v8);
  v10 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v35 = 257;
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v10, v6, v9, 0, (uint64_t)v34);
  v12 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v12)
  {
    v13 = *(uint64_t **)a3;
    v14 = 8 * v12;
    do
    {
      *v13++ = llvm::PointerType::get();
      v14 -= 8;
    }
    while (v14);
  }
  v15 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a3, v15);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a3, *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 232));
  v16 = (llvm::Type *)llvm::StructType::get();
  v17 = *(llvm::Value **)(a2 - 32);
  v18 = (llvm::Type *)llvm::PointerType::get();
  v19 = AGCLLVMUserObject::addrSpaceReconciliation(a1, v17, v18);
  v20 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v35 = 257;
  v21 = llvm::IRBuilderBase::CreateAlignedLoad(v20, v16, v19, 0, (uint64_t)v34);
  v33 = 0;
  if (*(_DWORD *)(a3 + 8) == 2)
  {
    v22 = 0;
  }
  else
  {
    do
    {
      v23 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
      v35 = 257;
      Value = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(v23, AlignedLoad, (uint64_t)&v33, 1, (uint64_t)v34);
      v25 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
      v35 = 257;
      v26 = llvm::IRBuilderBase::CreateExtractValue(v25, v21, (uint64_t)&v33, 1, (uint64_t)v34);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), Value, v26, 0);
      v22 = ++v33;
    }
    while ((unint64_t)*(unsigned int *)(a3 + 8) - 2 > v33);
  }
  v27 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
  v32 = v22;
  v33 = v22 + 1;
  v35 = 257;
  v28 = llvm::IRBuilderBase::CreateExtractValue(v27, v21, (uint64_t)&v32, 1, (uint64_t)v34);
  v29 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
  v35 = 257;
  v30 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(v29, v21, (uint64_t)&v33, 1, (uint64_t)v34);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v30, v28, 0);
}

uint64_t AGCLLVMUserObject::addrSpaceReconciliation(AGCLLVMUserObject *this, llvm::Value *a2, llvm::Type *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t Cast;
  char *v8;
  _BYTE v10[32];
  __int16 v11;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = *((_QWORD *)v5 + 30);
  v11 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v5 + 40), 47, (uint64_t)a2, v6, (uint64_t)v10);
  v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  v11 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v8, 48, Cast, (uint64_t)a3, (uint64_t)v10);
}

uint64_t AGCLLVMUserObject::replaceArgumentBufferLoadTextureOrSampler(AGCLLVMUserObject *a1, llvm::Type **a2, uint64_t a3)
{
  llvm::Type *v6;
  llvm::Type **InsertValue;
  llvm::Value *AllocaInEntryBlock;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Type *v12;
  llvm::Value *v13;
  llvm::Type *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t AlignedLoad;
  uint64_t v18;
  uint64_t v19;
  uint64_t Value;
  uint64_t v21;
  uint64_t v22;
  llvm::Type *v23;
  uint64_t v24;
  _BYTE v26[32];
  __int16 v27;
  unsigned int v28;
  _BYTE v29[32];
  __int16 v30;

  v6 = (llvm::Type *)llvm::StructType::get();
  InsertValue = (llvm::Type **)llvm::UndefValue::get();
  AllocaInEntryBlock = (llvm::Value *)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMUserObject *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32), v6);
  v9 = *(uint64_t **)a3;
  v10 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *v9++ = llvm::PointerType::get();
      v11 -= 8;
    }
    while (v11);
  }
  v12 = (llvm::Type *)llvm::StructType::get();
  v13 = *(a2 - 4);
  v14 = (llvm::Type *)llvm::PointerType::get();
  v15 = AGCLLVMUserObject::addrSpaceReconciliation(a1, v13, v14);
  v16 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v30 = 257;
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v16, v12, v15, 0, (uint64_t)v29);
  v28 = 0;
  if (*(_DWORD *)(a3 + 8))
  {
    v18 = AlignedLoad;
    do
    {
      v19 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
      v30 = 257;
      Value = llvm::IRBuilderBase::CreateExtractValue(v19, v18, (uint64_t)&v28, 1, (uint64_t)v29);
      v21 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v22 = (uint64_t)a1 + v21 + 40;
      v23 = *(llvm::Type **)(*((_QWORD *)v6 + 2) + 8 * v28);
      v30 = 257;
      v24 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)((char *)a1 + v21 + 40), v23, Value, 0, (uint64_t)v29);
      v27 = 257;
      InsertValue = (llvm::Type **)llvm::IRBuilderBase::CreateInsertValue(v22, (uint64_t)InsertValue, v24, (uint64_t)&v28, 1, (uint64_t)v26);
      ++v28;
    }
    while (*(_DWORD *)(a3 + 8) > v28);
  }
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), InsertValue, (uint64_t)AllocaInEntryBlock, 0);
  return AGCLLVMUserObject::addrSpaceReconciliation(a1, AllocaInEntryBlock, *a2);
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    v10[1] = 0;
    v10[2] = -8192;
    v9 = &unk_1E7EB7D80;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int32x2_t *v8;
  _QWORD *v9;
  _BYTE v10[16];
  uint64_t v11;
  int32x2_t *v12;
  void *v13;
  _QWORD v14[2];
  uint64_t v15;
  int32x2_t *v16;
  void *v17;
  _QWORD v18[2];
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v10, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v12 = v4;
  v17 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v11, &v17))v5 = (uint64_t)v17;
  else
    v5 = *(_QWORD *)v4 + 48 * v4[2].u32[0];
  result = (uint64_t)v12;
  if (*(_QWORD *)v12 + 48 * v12[2].u32[0] != v5)
  {
    v7 = *(_QWORD *)(v5 + 40);
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::erase(v12, v5);
    v8 = v12;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v13, a2);
    v13 = &unk_1E7EB7D80;
    v16 = v8;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v18, (LODWORD(v14[0]) >> 1) & 3, v14);
    v17 = &unk_1E7EB7D80;
    v20 = v16;
    v21 = v7;
    v22 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v8, v8[2].i32[0], v19, &v22);
    if ((result & 1) == 0)
    {
      v9 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>((uint64_t)v8, (uint64_t)&v17, v22);
      result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v9 + 1), v18);
      v9[4] = v20;
      v9[5] = v21;
    }
    if (v19 != -8192 && v19 != -4096 && v19)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
    if (v15 != -8192 && v15 != -4096 && v15)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v14);
  }
  if (v11 != -8192 && v11 != -4096)
  {
    if (v11)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v10);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 48 * v8, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::initEmpty(a1);
  if ((_DWORD)v3)
  {
    v9 = (uint64_t *)((char *)v4 + 24);
    v10 = 48 * v3;
    do
    {
      v11 = *v9;
      if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v15);
        v12 = v15;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v15 + 8), v9 - 2);
        *(_QWORD *)(v12 + 32) = v9[1];
        *(_QWORD *)(v12 + 40) = v9[2];
        ++*(_DWORD *)(a1 + 8);
        v11 = *v9;
      }
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
      v9 += 6;
      v10 -= 48;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(48 * v3));
}

BOOL AGCLLVMUserObject::shouldUseGBTIndirectionForGlobalBindings(AGCLLVMUserObject *this)
{
  return AGCLLVMUserObject::mayBeCalledFromIntersectionFunction(this)
      || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 29
      || *((_BYTE *)this + 15) != 0;
}

uint64_t **std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t llvm::PointerType::getWithSamePointeeType(llvm::PointerType **this, llvm::PointerType *a2)
{
  if (this[3])
    return llvm::PointerType::get();
  else
    return llvm::PointerType::get(*this, a2);
}

BOOL AGCLLVMUserObject::mayBeCalledFromIntersectionFunction(AGCLLVMUserObject *this)
{
  uint64_t v1;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)this - 24);
  if (!*(_BYTE *)(*(_QWORD *)((char *)this + v1 + 400) + 1785)
    || *((_BYTE *)this + 3712)
    || (*(unsigned int (**)(void))(*(_QWORD *)((char *)this + v1) + 64))() == 29)
  {
    return 0;
  }
  if (*(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 3300))
  {
    v4 = *((_QWORD *)this + 294);
    if (*(_BYTE *)(v4 + 51) || *(_BYTE *)(v4 + 48))
      return 1;
  }
  return *((_BYTE *)this + 15) != 0;
}

uint64_t llvm::GlobalValue::setVisibility(uint64_t this)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 32);
  v3 = v2 & 0xFFFFFFCF | 0x10;
  *(_DWORD *)(this + 32) = v3;
  if ((v2 & 0xFu) - 7 >= 2)
  {
    this = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this);
    if ((this & 1) != 0)
      return this;
    v3 = *(_DWORD *)(v1 + 32);
  }
  *(_DWORD *)(v1 + 32) = v3 | 0x4000;
  return this;
}

void AGCLLVMUserObject::getCallOfCastedFunction(AGCLLVMUserObject *this, llvm::Value *a2)
{
  unsigned int v3;
  uint64_t i;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *__src;
  unsigned int v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = (char *)this + 16;
  *((_QWORD *)this + 1) = 0x400000000;
  if (a2)
  {
    v3 = *((unsigned __int8 *)a2 + 16);
    if (v3 == 84)
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this, (uint64_t)a2);
      return;
    }
  }
  else
  {
    v3 = MEMORY[0x10];
  }
  if (v3 <= 0x1B)
  {
    if (v3 != 5 || *((_WORD *)a2 + 9) != 49)
      return;
  }
  else if (v3 != 77)
  {
    return;
  }
  for (i = *((_QWORD *)a2 + 1); i; i = *(_QWORD *)(i + 8))
  {
    AGCLLVMUserObject::getCallOfCastedFunction((AGCLLVMUserObject *)&__src, *(llvm::Value **)(i + 24));
    v5 = __src;
    v6 = v9;
    v7 = *((unsigned int *)this + 2);
    if ((unint64_t)v9 + v7 > *((unsigned int *)this + 3))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      LODWORD(v7) = *((_DWORD *)this + 2);
    }
    if ((_DWORD)v6)
    {
      memcpy((void *)(*(_QWORD *)this + 8 * v7), v5, 8 * v6);
      LODWORD(v7) = *((_DWORD *)this + 2);
    }
    *((_DWORD *)this + 2) = v7 + v6;
    if (__src != v10)
      free(__src);
  }
}

llvm::Type *AGCLLVMUserObject::createVisibleFunctionTableHeapGlobal(AGCLLVMUserObject *this)
{
  llvm::Type *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  llvm::Value *GlobalBufferBinding;
  llvm::Type *v9;
  _QWORD v11[4];
  __int16 v12;

  if (*((_QWORD *)this + 335))
    return (llvm::Type *)*((_QWORD *)this + 336);
  v3 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v4 = 61;
  v5 = 31;
  if (v3 == 29)
    v5 = 92;
  if ((v3 - 7) >= 2 && v3 != 22)
    v4 = v5;
  v7 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824)
                            + 8 * v4))();
  v2 = (llvm::Type *)llvm::PointerType::get();
  v11[0] = "agc.visible_function_table_heap.";
  v11[2] = v7;
  v12 = 2051;
  GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v2, (const llvm::Twine *)v11, v7, 0, 5, 0);
  llvm::GlobalValue::setLinkage((uint64_t)GlobalBufferBinding, 10);
  *((_BYTE *)GlobalBufferBinding + 80) &= ~1u;
  llvm::Constant::getNullValue(*((llvm::Constant **)GlobalBufferBinding + 3), v9);
  llvm::GlobalVariable::setInitializer();
  llvm::Module::getOrInsertNamedMetadata();
  llvm::ConstantInt::get();
  v11[0] = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2664), (uint64_t)GlobalBufferBinding);
  *((_QWORD *)this + 336) = v2;
  return v2;
}

_QWORD *AGCLLVMUserObject::buildResourcePointerFromResourceIndexArgument(_QWORD *a1, llvm::Instruction *a2, unsigned int a3, llvm::Type *a4, uint64_t a5)
{
  uint64_t *v10;
  llvm::Value *v11;
  char *v12;
  uint64_t v13;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v15;
  llvm::Value *Mul;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  llvm::Type *v20;
  llvm::IRBuilderBase *v21;
  uint64_t AlignedLoad;
  llvm::Value *v23;
  uint64_t GEP;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;
  _DWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  char v42[32];
  __int16 v43;
  char v44[32];
  __int16 v45;
  _QWORD v46[4];
  __int16 v47;

  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), a2);
  v10 = (uint64_t *)*((_QWORD *)a2 + 4 * a3 + -4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v41 = *v10;
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  v12 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v13 = *((_QWORD *)v12 + 30);
  v46[0] = "resource_index";
  v47 = 259;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v12 + 40), 47, (uint64_t)v10, v13, (uint64_t)v46);
  v15 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v46[0] = "heap_offset";
  v47 = 259;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v15, Cast, v11, (const llvm::Twine *)v46);
  v17 = llvm::PointerType::get();
  v18 = llvm::PointerType::get();
  v19 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v20 = (llvm::Type *)*((_QWORD *)v19 + 27);
  v21 = (llvm::IRBuilderBase *)(v19 + 40);
  v47 = 257;
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v19 + 5, a4, a5, 0, (uint64_t)v46);
  v45 = 257;
  v23 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v21, 49, AlignedLoad, v17, (uint64_t)v44);
  v43 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP(v21, v20, v23, Mul, (const llvm::Twine *)v42);
  v25 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
  v47 = 257;
  v26 = llvm::IRBuilderBase::CreateCast(v25, 49, GEP, v18, (uint64_t)v46);
  v27 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v28 = (llvm::Type *)*((_QWORD *)v27 + 30);
  v47 = 257;
  v29 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v27 + 5, v28, v26, 0, (uint64_t)v46);
  v30 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
  v47 = 257;
  result = (_QWORD *)llvm::IRBuilderBase::CreateCast(v30, 48, v29, v41, (uint64_t)v46);
  v32 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v33 = &v32[8 * a3];
  v34 = v33;
  if (*v33)
  {
    v36 = (_QWORD *)v33[2];
    v35 = v33 + 2;
    *v36 = *(v35 - 1);
    v37 = *(v35 - 1);
    if (v37)
      *(_QWORD *)(v37 + 16) = *v35;
  }
  *v34 = result;
  if (result)
  {
    v39 = result[1];
    ++result;
    v38 = v39;
    v40 = &v32[8 * a3];
    *((_QWORD *)v40 + 1) = v39;
    if (v39)
      *(_QWORD *)(v38 + 16) = v40 + 2;
    *((_QWORD *)v40 + 2) = result;
    *result = v34;
  }
  return result;
}

llvm::Type *AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(AGCLLVMUserObject *this)
{
  llvm::Type *v2;
  unsigned __int8 v3;
  _BOOL8 v4;
  uint64_t v5;
  llvm::Value *GlobalBufferBinding;
  llvm::Type *v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;

  if (*((_QWORD *)this + 331))
    return (llvm::Type *)*((_QWORD *)this + 332);
  if ((v3 & 1) == 0
  {
    v9 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(void)::bind_indices[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 480))(v9);
    v10 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    dword_1EF8E97C4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 240))(v10);
  }
  v4 = (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 7
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 22
    && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 8;
  v5 = AGCLLVMUserObject::createIntersectionFunctionTableHeapGlobal(void)::bind_indices[v4];
  v2 = (llvm::Type *)llvm::PointerType::get();
  v11[0] = "agc.intersection_function_table_heap.";
  v11[2] = v5;
  v12 = 2051;
  GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v2, (const llvm::Twine *)v11, v5, 0, 5, 0);
  llvm::GlobalValue::setLinkage((uint64_t)GlobalBufferBinding, 10);
  *((_BYTE *)GlobalBufferBinding + 80) &= ~1u;
  llvm::Constant::getNullValue(*((llvm::Constant **)GlobalBufferBinding + 3), v7);
  llvm::GlobalVariable::setInitializer();
  llvm::Module::getOrInsertNamedMetadata();
  llvm::ConstantInt::get();
  v11[0] = llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2632), (uint64_t)GlobalBufferBinding);
  *((_QWORD *)this + 332) = v2;
  return v2;
}

uint64_t AGCLLVMUserObject::createIndirectCommandBufferHeapGlobal(AGCLLVMUserObject *this)
{
  uint64_t PerEncoderIndirectionTableGlobal;
  llvm::Type **v3;
  llvm::Type **v4;
  uint64_t v5;
  uint64_t *v6;
  llvm::Value *v7;
  llvm::Type *v8;
  uint64_t *AlignedLoad;
  uint64_t v10;
  llvm::Type **GEP;
  llvm::IRBuilderBase *v12;
  llvm::Type *v13;
  _BYTE v15[32];
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;
  uint64_t *v19[3];

  v19[2] = *(uint64_t **)MEMORY[0x1E0C80C00];
  PerEncoderIndirectionTableGlobal = AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
  v4 = v3;
  v5 = llvm::PointerType::get();
  v6 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v18 = 257;
  v8 = AGCLLVMBuilder::tryDeducePointeeType(v4, v7);
  v6 += 5;
  AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v6, v8, (uint64_t)v4, 0, (uint64_t)v17);
  v19[0] = (uint64_t *)llvm::ConstantInt::get();
  v10 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1024))(v10);
  v19[1] = (uint64_t *)llvm::ConstantInt::get();
  v16 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v6, PerEncoderIndirectionTableGlobal, AlignedLoad, v19, 2, (uint64_t)v15);
  v12 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v13 = (llvm::Type *)llvm::PointerType::get();
  v18 = 257;
  llvm::IRBuilderBase::CreatePointerCast(v12, GEP, v13, (const llvm::Twine *)v17);
  return v5;
}

uint64_t AGCLLVMUserObject::createPipelineStateHeapGlobal(AGCLLVMUserObject *this)
{
  uint64_t PerEncoderIndirectionTableGlobal;
  llvm::Type **v3;
  llvm::Type **v4;
  uint64_t v5;
  uint64_t *v6;
  llvm::Value *v7;
  llvm::Type *v8;
  uint64_t *AlignedLoad;
  uint64_t v10;
  llvm::Type **GEP;
  llvm::IRBuilderBase *v12;
  llvm::Type *v13;
  _BYTE v15[32];
  __int16 v16;
  _BYTE v17[32];
  __int16 v18;
  uint64_t *v19[3];

  v19[2] = *(uint64_t **)MEMORY[0x1E0C80C00];
  PerEncoderIndirectionTableGlobal = AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
  v4 = v3;
  v5 = llvm::PointerType::get();
  v6 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v18 = 257;
  v8 = AGCLLVMBuilder::tryDeducePointeeType(v4, v7);
  v6 += 5;
  AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v6, v8, (uint64_t)v4, 0, (uint64_t)v17);
  v19[0] = (uint64_t *)llvm::ConstantInt::get();
  v10 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 1032))(v10);
  v19[1] = (uint64_t *)llvm::ConstantInt::get();
  v16 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v6, PerEncoderIndirectionTableGlobal, AlignedLoad, v19, 2, (uint64_t)v15);
  v12 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v13 = (llvm::Type *)llvm::PointerType::get();
  v18 = 257;
  llvm::IRBuilderBase::CreatePointerCast(v12, GEP, v13, (const llvm::Twine *)v17);
  return v5;
}

uint64_t AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(AGCLLVMUserObject *this)
{
  char *v2;
  llvm::ArrayType *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  llvm::Type *v10;
  llvm::Value *GlobalBufferBinding;
  llvm::Type *v12;
  _QWORD v14[4];
  __int16 v15;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = (llvm::ArrayType *)*((_QWORD *)v2 + 30);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v2 + 50) + 824) + 1056))(*(_QWORD *)(*((_QWORD *)v2 + 50) + 824));
  v5 = llvm::ArrayType::get(v3, (llvm::Type *)v4);
  if (!*((_QWORD *)this + 327))
  {
    v6 = v5;
    v7 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    if (v7 <= 0x1D)
    {
      if (((1 << v7) & 0x400198) != 0)
      {
        v8 = 59;
LABEL_6:
        v9 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400)
                                                + 824)
                                  + 8 * v8))();
        v10 = (llvm::Type *)llvm::PointerType::get();
        v14[0] = "agc.per_encoder_indirection_table.";
        v14[2] = v9;
        v15 = 2051;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v10, (const llvm::Twine *)v14, v9, 0, 5, 0);
        llvm::GlobalValue::setLinkage((uint64_t)GlobalBufferBinding, 10);
        *((_BYTE *)GlobalBufferBinding + 80) &= ~1u;
        llvm::Constant::getNullValue(*((llvm::Constant **)GlobalBufferBinding + 3), v12);
        llvm::GlobalVariable::setInitializer();
        llvm::Module::getOrInsertNamedMetadata();
        llvm::ConstantInt::get();
        v14[0] = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
        llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2600), (uint64_t)GlobalBufferBinding);
        *((_QWORD *)this + 328) = v6;
        return v6;
      }
      if (v7 == 29)
      {
        v8 = 93;
        goto LABEL_6;
      }
    }
    v8 = 29;
    goto LABEL_6;
  }
  return *((_QWORD *)this + 328);
}

uint64_t AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(AGCLLVMUserObject *this, llvm::GlobalValue *a2, unsigned int a3, int a4, char a5, unsigned __int8 **a6, unsigned __int8 **a7)
{
  llvm::Type *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  unsigned int v24;
  int v25;

  AGCLLVMObject::replaceConstantChainWithInstrs(a2, a2);
  if ((a5 & 1) != 0)
  {
    v14 = **(llvm::Type ***)(*(_QWORD *)a2 + 16);
    result = AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(llvm::GlobalValue *,unsigned int,unsigned int,BOOL,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &)::$_2::operator()(this, *((_QWORD *)a2 + 1), a3, a4, 1, **(_QWORD **)(**((_QWORD **)v14 + 2) + 16), a6);
    if ((_DWORD)result)
    {
      v16 = *((_QWORD *)a2 + 1);
      if (v16)
      {
        do
        {
          v17 = *(_QWORD *)(v16 + 8);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), *(llvm::Instruction **)(v16 + 24));
          v24 = a3;
          v25 = a3 + a4 - 1;
          v18 = (llvm::Value *)llvm::ConstantInt::get();
          AGCLLVMUserObject::buildAPIResourceConstantPointerIntrinsic(this, a7, v14, v18, (AGCArgumentBuffer::Resource::Bounds *)&v24);
          result = llvm::User::replaceUsesOfWith();
          v16 = v17;
        }
        while (v17);
      }
    }
  }
  else
  {
    v19 = (llvm::Type *)*((_QWORD *)a2 + 3);
    if (*((_BYTE *)v19 + 8) == 16)
      v20 = *((_QWORD *)a2 + 3);
    else
      v20 = 0;
    result = AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(llvm::GlobalValue *,unsigned int,unsigned int,BOOL,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &)::$_2::operator()(this, *((_QWORD *)a2 + 1), a3, a4, 0, v20, a6);
    if ((_DWORD)result)
    {
      v21 = *((_QWORD *)a2 + 1);
      if (v21)
      {
        do
        {
          v22 = *(_QWORD *)(v21 + 8);
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), *(llvm::Instruction **)(v21 + 24));
          v24 = a3;
          v25 = a3;
          v23 = (llvm::Value *)llvm::ConstantInt::get();
          AGCLLVMUserObject::buildAPIResourceConstantPointerIntrinsic(this, a7, v19, v23, (AGCArgumentBuffer::Resource::Bounds *)&v24);
          result = llvm::User::replaceUsesOfWith();
          v21 = v22;
        }
        while (v22);
      }
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::replaceGlobalTextureOrSamplerUsage(llvm::GlobalValue *,unsigned int,unsigned int,BOOL,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions &)::$_2::operator()(AGCLLVMUserObject *a1, uint64_t a2, unsigned int a3, int a4, char a5, uint64_t a6, unsigned __int8 **a7)
{
  uint64_t v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  const void **imp;
  uint64_t *v16;
  int v17;
  uint64_t i;
  llvm::Instruction **v19;
  llvm::Instruction **v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v26;
  llvm::Type *v27;
  uint64_t v28;
  llvm::Type *v29;
  llvm::Value *IntCast;
  llvm::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  int v40;
  uint64_t *v41;
  BOOL v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v49;
  _BYTE v52[24];
  char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  _WORD v57[64];
  _BYTE v58[24];
  _BYTE *v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[128];
  _QWORD *v63;
  uint64_t v64;
  _QWORD v65[18];

  v65[16] = *MEMORY[0x1E0C80C00];
  v60 = v62;
  v61 = 0x1000000000;
  v63 = v65;
  v64 = 0x1000000000;
  v53 = (char *)v57;
  v54 = (char *)v57;
  v55 = 16;
  v56 = 0;
  if (!a2)
    goto LABEL_21;
  v11 = a2;
  do
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v63, *(_QWORD *)(v11 + 24));
    v11 = *(_QWORD *)(v11 + 8);
  }
  while (v11);
  v12 = v64;
  if ((_DWORD)v64)
  {
    v13 = 0;
    do
    {
      v14 = v63[v12 - 1];
      LODWORD(v64) = v12 - 1;
      imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v53, (const void *)v14);
      if (v54 == v53)
        v16 = (uint64_t *)((char *)&v55 + 4);
      else
        v16 = &v55;
      if (imp == (const void **)&v54[8 * *(unsigned int *)v16])
      {
        v17 = *(unsigned __int8 *)(v14 + 16);
        if (v17 == 60)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v60, v14);
        }
        else if (v17 == 77 || v17 == 62)
        {
          for (i = *(_QWORD *)(v14 + 8); i; i = *(_QWORD *)(i + 8))
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v63, *(_QWORD *)(i + 24));
        }
        else
        {
          v13 = 1;
        }
        llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v52, (llvm::SmallPtrSetImplBase *)&v53, (void *)v14);
      }
      v12 = v64;
    }
    while ((_DWORD)v64);
  }
  else
  {
LABEL_21:
    v13 = 0;
  }
  if (v54 != v53)
    free(v54);
  if (v63 != v65)
    free(v63);
  v19 = (llvm::Instruction **)v60;
  if ((_DWORD)v61)
  {
    v49 = v13;
    v20 = (llvm::Instruction **)((char *)v60 + 8 * v61);
    v21 = a3 + a4 - 1;
    while (1)
    {
      llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), *v19);
      v22 = *((_QWORD *)*v19 - 4);
      v63 = 0;
      if ((a5 & 1) == 0)
        break;
      v23 = *(unsigned __int8 *)(v22 + 16);
      if (v23 == 62 && v22 != 0)
      {
        v34 = *(_DWORD *)(v22 + 20) & 0x7FFFFFF;
        v35 = (uint64_t **)(v22 - 32 * v34);
        v26 = *v35;
        v36 = **v35;
        v37 = v34 - 1;
        if (v37)
          v38 = v36 == a6;
        else
          v38 = 1;
        if (!v38)
        {
          v39 = 0;
          while (1)
          {
            v40 = *(unsigned __int8 *)(v36 + 8);
            if (v40 != 15)
            {
              if (v40 == 17)
              {
                v41 = (uint64_t *)(v36 + 24);
                goto LABEL_56;
              }
              if (v40 != 16)
                goto LABEL_57;
            }
            v41 = *(uint64_t **)(v36 + 16);
LABEL_56:
            v36 = *v41;
LABEL_57:
            if (++v39 >= v37 || v36 == a6)
            {
              v26 = v35[4 * v39];
              break;
            }
          }
        }
        if (v26)
          v42 = *((_BYTE *)v26 + 16) == 16;
        else
          v42 = 0;
        if (v42)
        {
          v43 = v26 + 3;
          if (*((_DWORD *)v26 + 8) >= 0x41u)
            v43 = (_QWORD *)*v43;
          v44 = *(_DWORD *)v43 + a3;
          v26 = (uint64_t *)llvm::ConstantInt::get();
          v63 = (_QWORD *)(v44 | (v44 << 32));
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (v23 == 77 && v22 != 0)
        break;
      v26 = 0;
LABEL_42:
      v27 = **(llvm::Type ***)(a6 + 16);
      v28 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v29 = *(llvm::Type **)((char *)a1 + v28 + 232);
      v57[0] = 257;
      IntCast = llvm::IRBuilderBase::CreateIntCast((AGCLLVMUserObject *)((char *)a1 + v28 + 40), (llvm::Type **)v26, v29, 0, (const llvm::Twine *)&v53);
      v31 = AGCLLVMUserObject::buildAPIResourceIntrinsic(a1, a7, v27, IntCast, (AGCArgumentBuffer::Resource::Bounds *)&v63);
      if (*(_BYTE *)(*(_QWORD *)*v19 + 8) == 13)
      {
        v32 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v33 = *(_QWORD *)((char *)a1 + v32 + 240);
        v57[0] = 257;
        llvm::IRBuilderBase::CreateCast((uint64_t)a1 + v32 + 40, 47, (uint64_t)v31, v33, (uint64_t)&v53);
      }
      llvm::Value::replaceAllUsesWith();
      if (++v19 == v20)
      {
        v19 = (llvm::Instruction **)v60;
        v13 = v49;
        if (!(_DWORD)v61)
          goto LABEL_77;
        v45 = 8 * v61;
        while (1)
        {
          v59 = 0;
          llvm::RecursivelyDeleteTriviallyDeadInstructions();
          v46 = v59;
          if (v59 == v58)
            break;
          if (v59)
          {
            v47 = 5;
LABEL_74:
            (*(void (**)(void))(*v46 + 8 * v47))();
          }
          ++v19;
          v45 -= 8;
          if (!v45)
          {
            v19 = (llvm::Instruction **)v60;
            goto LABEL_77;
          }
        }
        v46 = v58;
        v47 = 4;
        goto LABEL_74;
      }
    }
    v26 = (uint64_t *)llvm::ConstantInt::get();
LABEL_41:
    v63 = (_QWORD *)__PAIR64__(v21, a3);
    goto LABEL_42;
  }
LABEL_77:
  if (v19 != (llvm::Instruction **)v62)
    free(v19);
  return v13 & 1;
}

llvm::Value *AGCLLVMUserObject::buildAPIResourceConstantPointerIntrinsic(AGCLLVMUserObject *this, unsigned __int8 **a2, llvm::Type *a3, llvm::Value *a4, AGCArgumentBuffer::Resource::Bounds *a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t Function;
  uint64_t v14;
  llvm::Type **v15;
  _WORD v17[20];
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v9 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v10 = v9[35];
  v19 = v9[29];
  v20 = v10;
  v11 = v9[26];
  v21 = v19;
  v22 = v11;
  v12 = llvm::PointerType::get();
  Function = AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::getFunction(a2, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), v12);
  v14 = *(_QWORD *)(*(_QWORD *)this - 24);
  v18[0] = a4;
  v15 = (llvm::Type **)((char *)this + v14 + 40);
  v18[1] = AGCArgumentBuffer::Resource::Bounds::toConstantVector((uint64_t)a5, v15);
  v18[2] = llvm::ConstantInt::get();
  v18[3] = llvm::ConstantInt::get();
  v17[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v15, *(_QWORD *)(Function + 24), Function, (uint64_t)v18, 4, (uint64_t)v17);
}

llvm::Value *AGCLLVMUserObject::buildAPIResourceIntrinsic(AGCLLVMUserObject *this, unsigned __int8 **a2, llvm::Type *a3, llvm::Value *a4, AGCArgumentBuffer::Resource::Bounds *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Function;
  uint64_t v12;
  llvm::Type **v13;
  _WORD v15[20];
  _QWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v9 = v8[35];
  v17 = v8[29];
  v18 = v9;
  v10 = v8[26];
  v19 = v17;
  v20 = v10;
  Function = AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::getFunction(a2, v8[46], (unint64_t)a3);
  v12 = *(_QWORD *)(*(_QWORD *)this - 24);
  v16[0] = a4;
  v13 = (llvm::Type **)((char *)this + v12 + 40);
  v16[1] = AGCArgumentBuffer::Resource::Bounds::toConstantVector((uint64_t)a5, v13);
  v16[2] = llvm::ConstantInt::get();
  v16[3] = llvm::ConstantInt::get();
  v15[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v13, *(_QWORD *)(Function + 24), Function, (uint64_t)v16, 4, (uint64_t)v15);
}

unint64_t llvm::SmallVectorTemplateCommon<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v7;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = *(_QWORD *)a1 + 8 * v3;
    if (*(_QWORD *)a1 <= a2 && v5 > a2)
    {
      v7 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>::grow(a1);
      return *(_QWORD *)a1 + v7;
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>::grow(a1);
    }
  }
  return v2;
}

uint64_t std::__hash_table<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::__unordered_map_hasher<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::hash<llvm::MDNode const*>,std::equal_to<llvm::MDNode const*>,true>,std::__unordered_map_equal<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::equal_to<llvm::MDNode const*>,std::hash<llvm::MDNode const*>,true>,std::allocator<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>>>::~__hash_table(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(void **)v2;
      *((_QWORD *)v2 + 3) = &off_1E7EB7F38;
      llvm::SmallVector<std::unique_ptr<AGCArgumentBuffer::Field>,4u>::~SmallVector((char **)v2 + 5);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void AGCLLVMUserObject::setupIndirectArgumentRogMetadata(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  void *v13;
  uint64_t v14;
  _BYTE v15[128];
  void *v16[2];
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  v16[0] = v17;
  v16[1] = (void *)0x800000000;
  v13 = v15;
  v14 = 0x800000000;
  v9 = *(_QWORD *)(a2 + 56);
  v4 = operator new(0x30uLL);
  *v4 = &off_1E7EB7F58;
  v4[1] = v16;
  v4[2] = a1;
  v4[3] = v11;
  v4[4] = &v9;
  v4[5] = &v13;
  v12 = v4;
  v5 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v16, v5);
  v10 = v9;
  if (!v12)
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(_BYTE *, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v10);
  if ((_DWORD)v14)
  {
    v6 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v6 + 184))(v6, *(_QWORD *)(a2 + 120), &v13);
  }
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_9:
  if (v13 != v15)
    free(v13);
  if (v16[0] != v17)
    free(v16[0]);
}

void std::__function::__func<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0,std::allocator<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0>,void ()(AGCArgumentBuffer::Field const*)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0,std::allocator<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0>,void ()(AGCArgumentBuffer::Field const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7EB7F58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0,std::allocator<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0>,void ()(AGCArgumentBuffer::Field const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7EB7F58;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0,std::allocator<AGCLLVMUserObject::setupIndirectArgumentRogMetadata(AGCLLVMUserObject::IndirectArgumentBufferInfo &)::$_0>,void ()(AGCArgumentBuffer::Field const*)>::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  char v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t IndexedOffsetInType;
  void **v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  __int128 v39;
  void *__p[2];
  int v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[64];
  void *v47;
  uint64_t v48;
  _QWORD v49[9];

  v49[8] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_DWORD *)(*a2 + 8);
  if (*a2)
    v5 = (v4 - 3) >= 0xFFFFFFFE;
  else
    v5 = 0;
  if (v5)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a1[1], 0);
    v22 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v22)
    {
      for (i = 0; i < v22; ++i)
      {
        if (*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * i))
        {
          *(_QWORD *)(*(_QWORD *)a1[1] + 8 * *(unsigned int *)(a1[1] + 8) - 8) = llvm::ConstantInt::get();
          v24 = a1[3];
          v42 = *(_BYTE **)(*(_QWORD *)(v3 + 16) + 8 * i);
          v25 = *(_QWORD *)(v24 + 24);
          if (!v25)
            goto LABEL_93;
          (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v25 + 48))(v25, &v42);
          v22 = *(unsigned int *)(v3 + 24);
        }
      }
    }
    goto LABEL_75;
  }
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v26 = a1[1];
    v27 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v26, v27);
    v28 = a1[3];
    v42 = *(_BYTE **)(v3 + 16);
    v29 = *(_QWORD *)(v28 + 24);
    if (!v29)
      goto LABEL_93;
    (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v29 + 48))(v29, &v42);
    goto LABEL_75;
  }
  if (v3)
    v7 = v4 == 3;
  else
    v7 = 0;
  if (v7)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a1[1], 0);
    if (*(_DWORD *)(v3 + 24))
    {
      v30 = 0;
      while (1)
      {
        *(_QWORD *)(*(_QWORD *)a1[1] + 8 * *(unsigned int *)(a1[1] + 8) - 8) = llvm::ConstantInt::get();
        v31 = a1[3];
        v42 = *(_BYTE **)(v3 + 16);
        v32 = *(_QWORD *)(v31 + 24);
        if (!v32)
          break;
        (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v32 + 48))(v32, &v42);
        if (++v30 >= (unint64_t)*(unsigned int *)(v3 + 24))
          goto LABEL_75;
      }
LABEL_93:
      std::__throw_bad_function_call[abi:nn180100]();
    }
LABEL_75:
    --*(_DWORD *)(a1[1] + 8);
    return;
  }
  if (!v3 || v4 != 4)
  {
    if (v3 && v4 == 5 && *(_BYTE *)(v3 + 252))
    {
      v33 = *(unsigned int *)(v3 + 248);
      IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType();
      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(a1[5], v33 | (IndexedOffsetInType << 32), 8);
    }
    return;
  }
  v8 = llvm::DataLayout::getIndexedOffsetInType() << 32;
  if (*(_BYTE *)(v3 + 276))
  {
    v8 |= *(unsigned int *)(v3 + 272);
    llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(a1[5], v8, 8);
  }
  v9 = *(_QWORD *)(v3 + 248);
  if (!v9)
  {
    v38 = 0;
    v39 = 0u;
    *(_OWORD *)__p = 0u;
    v41 = 1065353216;
    goto LABEL_91;
  }
  v47 = v49;
  v48 = 0x800000000;
  v42 = v46;
  v43 = v46;
  v44 = 8;
  v45 = 0;
  v39 = 0u;
  *(_OWORD *)__p = 0u;
  v41 = 1065353216;
LABEL_19:
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v47, v9);
  while ((_DWORD)v48)
  {
    v10 = *((_QWORD *)v47 + v48 - 1);
    LODWORD(v48) = v48 - 1;
    v11 = *(_DWORD *)(v10 + 8);
    if (v10)
      v12 = v11 == 2;
    else
      v12 = 0;
    if (!v12)
      goto LABEL_28;
    llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v42, (const void *)v10);
    if (v13)
    {
      v11 = *(_DWORD *)(v10 + 8);
LABEL_28:
      if (v10)
        v14 = (v11 - 3) >= 0xFFFFFFFE;
      else
        v14 = 0;
      if (v14)
      {
        v19 = *(unsigned int *)(v10 + 24);
        if ((_DWORD)v19)
        {
          v20 = *(uint64_t **)(v10 + 16);
          v21 = 8 * v19;
          do
          {
            if (*v20)
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v47, *v20);
            ++v20;
            v21 -= 8;
          }
          while (v21);
        }
      }
      else
      {
        if (v10)
          v15 = v11 == 0;
        else
          v15 = 0;
        if (v15 || (v10 ? (v16 = v11 == 3) : (v16 = 0), v16))
        {
          v9 = *(_QWORD *)(v10 + 16);
          goto LABEL_19;
        }
        if (v10)
          v17 = v11 == 4;
        else
          v17 = 0;
        if (v17)
        {
          if (*(_BYTE *)(v10 + 276))
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((float *)&v39, *(_DWORD *)(v10 + 272), *(_DWORD *)(v10 + 272));
          v9 = *(_QWORD *)(v10 + 248);
          if (v9)
            goto LABEL_19;
        }
        else
        {
          if (v10)
            v18 = v11 == 5;
          else
            v18 = 0;
          if (v18)
          {
            if (*(_BYTE *)(v10 + 252))
              std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((float *)&v39, *(_DWORD *)(v10 + 248), *(_DWORD *)(v10 + 248));
          }
        }
      }
    }
  }
  if (v43 != v42)
    free(v43);
  if (v47 != v49)
    free(v47);
  v35 = (void **)__p[0];
  if (__p[0])
  {
    do
    {
      v8 = v8 & 0xFFFFFFFF00000000 | *((unsigned int *)v35 + 4);
      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back(a1[5], v8, 0x100000008);
      v35 = (void **)*v35;
    }
    while (v35);
    v36 = __p[0];
    if (__p[0])
    {
      do
      {
        v37 = (_QWORD *)*v36;
        operator delete(v36);
        v36 = v37;
      }
      while (v37);
    }
  }
  v38 = (void *)v39;
LABEL_91:
  *(_QWORD *)&v39 = 0;
  if (v38)
    operator delete(v38);
}

void std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(float *a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v22)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v31)
  {
    *v12 = *v31;
LABEL_72:
    *v31 = v12;
    goto LABEL_73;
  }
  v32 = *((_QWORD *)a1 + 2);
  *v12 = v32;
  *((_QWORD *)a1 + 2) = v12;
  v30[v3] = a1 + 4;
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

void llvm::SmallVectorTemplateBase<std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>,false>::grow(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v3 = *(uint64_t **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = 8 * v4;
    v7 = (_QWORD *)v2;
    do
    {
      v8 = *v3;
      *v3++ = 0;
      *v7++ = v8;
      v6 -= 8;
    }
    while (v6);
    v9 = *(_QWORD *)a1 - 8;
    do
    {
      std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>::reset[abi:nn180100]((uint64_t *)(v9 + v5));
      v5 -= 8;
    }
    while (v5);
    v3 = *(uint64_t **)a1;
  }
  if (v3 != (uint64_t *)(a1 + 16))
    free(v3);
  *(_QWORD *)a1 = v2;
  *(_DWORD *)(a1 + 12) = 0;
}

uint64_t *std::unique_ptr<AGCLLVMUserObject::IndirectArgumentBufferInfo>::reset[abi:nn180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::__unordered_map_hasher<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::hash<llvm::MDNode const*>,std::equal_to<llvm::MDNode const*>,true>,std::__unordered_map_equal<llvm::MDNode const*,std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>,std::equal_to<llvm::MDNode const*>,std::hash<llvm::MDNode const*>,true>,std::allocator<std::__hash_value_type<llvm::MDNode const*,AGCArgumentBuffer::Root>>>::~__hash_table(v1 + 72);
    JUMPOUT(0x1CAA2D68CLL);
  }
  return result;
}

uint64_t llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 33));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMUserObject::setupDylibRequirements(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  const llvm::Function *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  AGCLLVMUserObject *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  unint64_t v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(*(_QWORD *)this - 24);
  if (*(_BYTE *)(*(_QWORD *)(v1 + this + 400) + 1784))
  {
    v2 = this;
    if (!*(_BYTE *)(this + 15))
    {
      this = (*(uint64_t (**)(void))(*(_QWORD *)(this + v1) + 72))();
      v4 = this;
      v5 = *(_QWORD *)(*(_QWORD *)v2 - 24) + 32;
      v6 = *(_QWORD *)(v2 + v5 + 336);
      v7 = v6 + 24;
      v8 = *(_QWORD *)(v6 + 32);
      if (v8 == v6 + 24)
      {
        v10 = 0;
      }
      else
      {
        do
        {
          if (v8)
            v9 = (AGCLLVMUserObject *)(v8 - 56);
          else
            v9 = 0;
          this = AGCLLVMUserObject::functionIsUserExternDeclaration(v9, v3);
          v10 = this;
          if ((this & 1) != 0)
            break;
          v8 = *(_QWORD *)(v8 + 8);
        }
        while (v8 != v7);
        v5 = *(_QWORD *)(*(_QWORD *)v2 - 24) + 32;
        v6 = *(_QWORD *)(v2 + v5 + 336);
        v8 = *(_QWORD *)(v6 + 32);
      }
      v11 = v2 + v5;
      v12 = v6 + 24;
      if (v8 != v6 + 24)
      {
        v13 = v8;
        do
        {
          if (v13)
            v14 = v13 - 56;
          else
            v14 = 0;
          v15 = v14 + 72;
          for (i = *(_QWORD *)(v14 + 80); i != v15; i = *(_QWORD *)(i + 8))
          {
            v17 = i - 24;
            if (!i)
              v17 = 0;
            v18 = v17 + 40;
            v19 = *(_QWORD *)(v17 + 48);
            if (v19 != v18)
            {
              while (i != v15)
              {
                v20 = v19 - 24;
                if (!v19)
                  v20 = 0;
                v21 = *(unsigned __int8 *)(v20 + 16);
                if (v21 != 84)
                  v20 = 0;
                if (v19)
                {
                  if (v21 == 84)
                  {
                    v22 = *(_QWORD *)(v20 - 32);
                    if (!v22 || *(_BYTE *)(v22 + 16) || *(_QWORD *)(v22 + 24) != *(_QWORD *)(v20 + 72))
                    {
                      v26 = 1;
                      goto LABEL_43;
                    }
                  }
                }
                v19 = *(_QWORD *)(v19 + 8);
                v23 = i - 24;
                if (!i)
                  v23 = 0;
                v24 = v23 + 40;
                while (v19 == v24)
                {
                  i = *(_QWORD *)(i + 8);
                  if (i == v15)
                    goto LABEL_40;
                  v25 = i - 24;
                  if (!i)
                    v25 = 0;
                  v24 = v25 + 40;
                  v19 = *(_QWORD *)(v25 + 48);
                }
              }
              break;
            }
          }
LABEL_40:
          v13 = *(_QWORD *)(v13 + 8);
        }
        while (v13 != v12);
      }
      v26 = 0;
LABEL_43:
      v27 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 368) + 1785);
      if (v27)
      {
        LOBYTE(v27) = 0;
        if (v8 != v12 && !*(_BYTE *)(v2 + 3712))
        {
          do
          {
            v28 = v8 - 56;
            if (!v8)
              v28 = 0;
            v29 = v28 + 72;
            for (j = *(_QWORD *)(v28 + 80); j != v29; j = *(_QWORD *)(j + 8))
            {
              v31 = j - 24;
              if (!j)
                v31 = 0;
              v32 = *(_QWORD *)(v31 + 48);
              if (v32 != v31 + 40)
              {
LABEL_86:
                while (j != v29)
                {
                  v33 = v32 - 24;
                  if (!v32)
                    v33 = 0;
                  v34 = *(unsigned __int8 *)(v33 + 16);
                  if (v34 != 84)
                    v33 = 0;
                  if (v32)
                  {
                    if (v34 == 84)
                    {
                      v35 = *(_QWORD *)(v33 - 32);
                      if (v35)
                      {
                        if (!*(_BYTE *)(v35 + 16) && *(_QWORD *)(v35 + 24) == *(_QWORD *)(v33 + 72))
                        {
                          if ((this = llvm::Value::getName((llvm::Value *)v35), v36 >= 0xD)
                            && (*(_QWORD *)this == 0x65746E692E726961
                              ? (v37 = *(_QWORD *)(this + 5) == 0x746365737265746ELL)
                              : (v37 = 0),
                                v37)
                            || (this = llvm::Value::getName((llvm::Value *)v35), v38 >= 0x1F)
                            && (*(_QWORD *)this == 0x6F6C6C612E726961
                              ? (v39 = *(_QWORD *)(this + 8) == 0x746E695F65746163)
                              : (v39 = 0),
                                v39 ? (v40 = *(_QWORD *)(this + 16) == 0x6F69746365737265) : (v40 = 0),
                                v40 ? (v41 = *(_QWORD *)(this + 23) == 0x79726575715F6E6FLL) : (v41 = 0),
                                v41))
                          {
                            LOBYTE(v27) = 1;
                            goto LABEL_89;
                          }
                        }
                      }
                    }
                  }
                  v32 = *(_QWORD *)(v32 + 8);
                  v42 = j - 24;
                  if (!j)
                    v42 = 0;
                  if (v32 == v42 + 40)
                  {
                    while (1)
                    {
                      j = *(_QWORD *)(j + 8);
                      if (j == v29)
                        goto LABEL_87;
                      v43 = j - 24;
                      if (!j)
                        v43 = 0;
                      v32 = *(_QWORD *)(v43 + 48);
                      if (v32 != v43 + 40)
                        goto LABEL_86;
                    }
                  }
                }
                break;
              }
            }
LABEL_87:
            v8 = *(_QWORD *)(v8 + 8);
          }
          while (v8 != v12);
          LOBYTE(v27) = 0;
        }
      }
LABEL_89:
      if (v4 == 1)
        LOBYTE(v27) = 1;
      if (((v10 | v26) & 1) != 0)
        LOBYTE(v27) = 1;
      *(_BYTE *)(v2 + 3656) = v27;
      *(_BYTE *)(v2 + 3657) = v10;
    }
  }
  return this;
}

uint64_t AGCLLVMUserObject::replaceSimdgroupAtomicWaitNotify(AGCLLVMUserObject *this)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::Function *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *Value;
  BOOL v28;
  _BOOL4 v29;
  int v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  llvm *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  const char *v49;
  const char *v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56[2];
  llvm *v57[2];
  unsigned int v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[5];

  v61[4] = *MEMORY[0x1E0C80C00];
  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (!*(_BYTE *)(*((_QWORD *)v1 + 50) + 1789))
    return 1;
  v59 = v61;
  v60 = 0x400000000;
  v57[0] = 0;
  v57[1] = 0;
  v58 = 0;
  v3 = *((_QWORD *)v1 + 46);
  v4 = *(_QWORD *)(v3 + 32);
  v52 = v3 + 24;
  if (v4 != v3 + 24)
  {
    v54 = (char *)this + 456;
    do
    {
      v53 = v4;
      if (v4)
        v5 = v4 - 56;
      else
        v5 = 0;
      for (i = *(_QWORD *)(v5 + 80); i != v5 + 72; i = *(_QWORD *)(i + 8))
      {
        v7 = i - 24;
        if (!i)
          v7 = 0;
        v8 = v7 + 40;
        for (j = *(_QWORD *)(v7 + 48); j != v8; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v10 = j - 24;
          else
            v10 = 0;
          v11 = *(unsigned __int8 *)(v10 + 16);
          if (v11 == 84)
            v12 = v10;
          else
            v12 = 0;
          if (j && v11 == 84)
          {
            v13 = *(_QWORD *)(v12 - 32);
            if (v13 && !*(_BYTE *)(v13 + 16) && *(_QWORD *)(v13 + 24) == *(_QWORD *)(v12 + 72))
            {
              v56[0] = llvm::Value::getName(*(llvm::Value **)(v12 - 32));
              v56[1] = v18;
              if (llvm::StringRef::find() != -1 && llvm::StringRef::find() == -1)
              {
                v55 = v5;
                llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)v57, &v55);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v22 + 56, v12);
                *((_BYTE *)this + 10) = 1;
              }
              else if (llvm::StringRef::find() == -1)
              {
                if (llvm::StringRef::find() == -1)
                {
                  if (AGCLLVMUserObject::functionIsUserExternDeclaration((AGCLLVMUserObject *)v13, v20))
                  {
                    v55 = v5;
                    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)v57, &v55);
                    v24 = v23 + 200;
                  }
                  else
                  {
                    v55 = v5;
                    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)v57, &v55);
                    v24 = v25 + 152;
                  }
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v12);
                }
                else
                {
                  v55 = v5;
                  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)v57, &v55);
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v21 + 8, v12);
                  v54[*(_QWORD *)(*(_QWORD *)this - 24)] = 1;
                }
              }
              else
              {
                v55 = v5;
                llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)v57, &v55);
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v19 + 104, v12);
                *((_BYTE *)this + 11) = 1;
              }
              if (llvm::StringRef::find() != -1)
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v59, v12);
            }
            else
            {
              v56[0] = v5;
              llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)v57, v56);
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v14 + 200, v12);
            }
          }
          else if (j && v11 == 29)
          {
            v56[0] = v5;
            llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::FindAndConstruct((uint64_t)v57, v56);
            v16 = v15;
            v17 = *(unsigned int *)(v15 + 256);
            if (v17 >= *(unsigned int *)(v15 + 260))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
              v17 = *(unsigned int *)(v16 + 256);
            }
            *(_QWORD *)(*(_QWORD *)(v16 + 248) + 8 * v17) = v10;
            ++*(_DWORD *)(v16 + 256);
          }
        }
      }
      v4 = *(_QWORD *)(v53 + 8);
    }
    while (v4 != v52);
  }
  if ((MGGetBoolAnswer() & 1) != 0
    && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_YIELD_FORCE_BARRIER", v26)) != 0
    && *Value != 48
    && atoi(Value))
  {
    AGCLLVMUserObject::replaceSimdgroupAtomicWaitNotify(void)::$_0::operator()(this);
    v28 = 0;
  }
  else
  {
    v28 = (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 7
       || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 1
       || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 2
       || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 3
       || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 4
       || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 9;
  }
  if (!*((_BYTE *)this + 10) || !*((_BYTE *)this + 11))
  {
    v29 = 0;
    if (!v28)
      goto LABEL_60;
LABEL_62:
    v30 = v29 & (AGCLLVMUserObject::needsDylibResources(this) ^ 1);
    v31 = AGCLLVMUserObject::needsDylibResources(this);
    *((_BYTE *)this + 13) = 0;
    if (v30 == 1)
    {
      if ((AGCLLVMUserObject::SimdgroupAtomicWaitNotify::foundBarrierDominatingAllSideEffectsAndExternalCalls(*((_QWORD *)this + 22), (uint64_t)v57) & 1) != 0)goto LABEL_68;
LABEL_64:
      AGCLLVMUserObject::replaceSimdgroupAtomicWaitNotify(void)::$_0::operator()(this);
      goto LABEL_68;
    }
    if (!v31
      || (AGCLLVMUserObject::SimdgroupAtomicWaitNotify::foundBarrierDominatingAllSideEffectsAndExternalCalls(*((_QWORD *)this + 22), (uint64_t)v57) & 1) != 0)
    {
      goto LABEL_68;
    }
    if (MGGetBoolAnswer()
      && (v50 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_YIELD_INSERT_BARRIER_FOR_DYLIB", v49)) != 0
      && *v50 != 48)
    {
      v51 = atoi(v50) != 0;
      if (v29)
        goto LABEL_64;
    }
    else
    {
      v51 = 0;
      if (v29)
        goto LABEL_64;
    }
    if (!v51)
      goto LABEL_68;
    goto LABEL_64;
  }
  v29 = *((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 456) != 0;
  if (v28)
    goto LABEL_62;
LABEL_60:
  *((_BYTE *)this + 13) = 0;
LABEL_68:
  if ((_DWORD)v60)
  {
    v33 = v59;
    v34 = 8 * v60;
    LOBYTE(v32) = 1;
    do
    {
      if ((v32 & 1) != 0)
      {
        v35 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
        v32 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v35 + 736))(v35, *v33);
      }
      else
      {
        v32 = 0;
      }
      ++v33;
      v34 -= 8;
    }
    while (v34);
  }
  else
  {
    v32 = 1;
  }
  v36 = v58;
  v37 = v57[0];
  if (v58)
  {
    v38 = 0;
    v39 = 296 * v58;
    do
    {
      if ((*(_QWORD *)((char *)v37 + v38) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v40 = (_QWORD *)((char *)v37 + v38);
        v41 = *(char **)((char *)v37 + v38 + 248);
        if ((char *)v37 + v38 + 264 != v41)
          free(v41);
        v42 = (_QWORD *)v40[25];
        if (v40 + 27 != v42)
          free(v42);
        v43 = (char *)v37 + v38;
        v44 = *(char **)((char *)v37 + v38 + 152);
        if ((char *)v37 + v38 + 168 != v44)
          free(v44);
        v45 = (char *)*((_QWORD *)v43 + 13);
        if (v43 + 120 != v45)
          free(v45);
        v46 = *(char **)((char *)v37 + v38 + 56);
        if ((char *)v37 + v38 + 72 != v46)
          free(v46);
        v47 = (char *)v40[1];
        if ((char *)v37 + v38 + 24 != v47)
          free(v47);
      }
      v38 += 296;
    }
    while (v39 != v38);
  }
  llvm::deallocate_buffer(v37, (void *)(296 * v36));
  if (v59 != v61)
    free(v59);
  return v32;
}

void AGCLLVMUserObject::setupThreadLocalStorage(AGCLLVMUserObject *this)
{
  uint64_t v1;
  int v3;
  llvm::IRBuilderBase *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Instruction *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64x2_t v15;
  llvm::Type ***v16;
  uint64_t inserted;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  void *Name;
  size_t v23;
  char *v24;
  __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  std::string::size_type v34;
  uint64_t v35;
  __int128 v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  unint64_t v41;
  uint64_t v42;
  int64x2_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  int64x2_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  __int128 v74;
  int64x2_t v75;
  uint64_t v76;
  llvm::Type *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t j;
  uint64_t v82;
  int v83;
  unsigned int v84;
  llvm::Type **GlobalBufferBinding;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  llvm::Instruction *v89;
  uint64_t v90;
  uint64_t v91;
  llvm::BasicBlock *v92;
  uint64_t v93;
  llvm::Instruction *v94;
  uint64_t v95;
  llvm::Instruction *v96;
  char *v97;
  uint64_t *v98;
  llvm::Value *v99;
  llvm::Type *v100;
  llvm::Value *AlignedLoad;
  char *v102;
  uint64_t *v103;
  uint64_t v104;
  llvm::CmpInst **Cast;
  uint64_t v106;
  uint64_t ICmp;
  char *v108;
  char *v109;
  uint64_t v110;
  llvm::BasicBlock *v111;
  char *v112;
  uint64_t FirstInsertionPt;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  llvm::Type *v119;
  llvm::Value *v120;
  llvm::Value *GEP;
  llvm::BasicBlock *v122;
  char *v123;
  llvm::IRBuilderBase *v124;
  llvm::User *PHI;
  char *v126;
  llvm::Type *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  char *v135;
  llvm::Type *v136;
  llvm::Value *v137;
  llvm::Value *v138;
  uint64_t *v139;
  llvm::Value *v140;
  llvm::Type *v141;
  uint64_t v142;
  uint64_t v143;
  llvm::CmpInst **v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  llvm::DataLayout *v150;
  uint64_t v151;
  int ABITypeAlignment;
  int64x2_t v153;
  void *v154;
  uint64_t v155;
  int64x2_t v156;
  char v157[32];
  __int16 v158;
  __int128 v159;
  uint64_t v160;
  int v161;
  __int128 v162;
  uint64_t v163;
  int v164;
  char *__dst;
  int64x2_t v166;
  uint64_t v167;
  char *v168;
  std::string v169;
  int v170;
  __int16 v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1784))
  {
    if (*((_QWORD *)this + 22)
      && (v3 = (*(uint64_t (**)(AGCLLVMUserObject *))(v1 + 416))(this), v1 = *(_QWORD *)this, v3))
    {
      v4 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(v1 - 24) + 40);
      v5 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
      if (v5)
        v6 = v5 - 24;
      else
        v6 = 0;
      v7 = *(_QWORD *)(v6 + 40);
      if (v7)
        v8 = (llvm::Instruction *)(v7 - 24);
      else
        v8 = 0;
      llvm::IRBuilderBase::SetInsertPoint(v4, v8);
      __dst = "init_trace_buffer_tls_end";
      LOWORD(v168) = 259;
      *((_QWORD *)this + 472) = llvm::BasicBlock::splitBasicBlock();
      v148 = 0;
      switch((*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24))
                                                      + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)))
      {
        case 0u:
          v10 = 0;
          v148 = 20;
          do
          {
            AGCLLVMUserObject::createTLSIntrinsic(this, off_1E7EB7CD0[v10], off_1E7EB7CD0[v10 + 1]);
            v10 += 2;
          }
          while (v10 != 8);
          break;
        case 6u:
        case 9u:
          AGCLLVMUserObject::createTLSIntrinsic(this, "agc.trace_buffer_render_target_array_index", "air.render_target_array_index");
          v9 = 8;
          goto LABEL_17;
        case 7u:
          v9 = 4;
LABEL_17:
          v148 = v9;
          break;
        default:
          break;
      }
      if (*((_QWORD *)this + 472))
        *((_QWORD *)this + 472) = 0;
      v1 = *(_QWORD *)this;
    }
    else
    {
      v148 = 0;
    }
    v11 = *(_QWORD *)((char *)this + *(_QWORD *)(v1 - 24) + 368);
    v12 = v11 + 8;
    v13 = *(_QWORD *)(v11 + 16);
    if (v13 == v11 + 8)
    {
      v40 = 0;
      v39 = 0;
      v151 = 0;
      v156 = 0u;
    }
    else
    {
      v14 = 0;
      v149 = v11 + 8;
      v150 = (AGCLLVMUserObject *)((char *)this + 232);
      v151 = 0;
      v15 = 0uLL;
      do
      {
        if (v13)
          v16 = (llvm::Type ***)(v13 - 56);
        else
          v16 = 0;
        if ((*((_BYTE *)v16 + 33) & 0x1C) != 0 && ((_BYTE)v16[10] & 2) == 0)
        {
          v153 = v15;
          if (!v151)
          {
            inserted = AGCLLVMBuilder::getOrInsertFunction<>();
            llvm::GlobalValue::setLinkage(inserted, 0);
            llvm::GlobalValue::setVisibility(inserted);
            __dst = "entry";
            LOWORD(v168) = 259;
            operator new();
            v151 = inserted;
            v18 = llvm::BasicBlock::BasicBlock();
            v19 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            *((_QWORD *)v19 + 11) = v18;
            *((_QWORD *)v19 + 12) = v18 + 40;
          }
          ABITypeAlignment = llvm::DataLayout::getABITypeAlignment(v150, *(llvm::Type **)(*v16)[2]);
          __dst = (char *)llvm::DataLayout::getTypeAllocSize(v150, *(llvm::Type **)(*v16)[2]);
          v166.i64[0] = v20;
          v21 = llvm::TypeSize::operator unsigned long long();
          if (!llvm::Value::getMetadata())
            llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), *(v16 - 4), (uint64_t)v16, 0);
          Name = (void *)llvm::Value::getName((llvm::Value *)v16);
          if (Name)
          {
            std::string::basic_string[abi:nn180100](&__dst, Name, v23);
            v24 = __dst;
            v25 = v166.i8[15];
          }
          else
          {
            v25 = 0;
            v24 = 0;
            __dst = 0;
            v166 = 0uLL;
          }
          v169.__r_.__value_.__r.__words[0] = v166.i64[0];
          *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7) = *(unint64_t *)((char *)v166.u64 + 7);
          v166 = 0uLL;
          __dst = 0;
          v15 = v153;
          v26 = v153.i64[1];
          if (v153.i64[1] >= (unint64_t)v14)
          {
            v29 = (v153.i64[1] - v153.i64[0]) >> 5;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 59)
              goto LABEL_146;
            if ((uint64_t)&v14[-v153.i64[0]] >> 4 > v30)
              v30 = (uint64_t)&v14[-v153.i64[0]] >> 4;
            if ((unint64_t)&v14[-v153.i64[0]] >= 0x7FFFFFFFFFFFFFE0)
              v31 = 0x7FFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
            {
              if (v31 >> 59)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v32 = (char *)operator new(32 * v31);
              v15 = v153;
            }
            else
            {
              v32 = 0;
            }
            v33 = &v32[32 * v29];
            v34 = v169.__r_.__value_.__r.__words[0];
            *(_QWORD *)v33 = v24;
            *((_QWORD *)v33 + 1) = v34;
            *(_QWORD *)(v33 + 15) = *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7);
            v33[23] = v25;
            v169.__r_.__value_.__r.__words[0] = 0;
            *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7) = 0;
            *((_DWORD *)v33 + 6) = v21;
            *((_DWORD *)v33 + 7) = ABITypeAlignment;
            if (v153.i64[1] == v153.i64[0])
            {
              v15 = vdupq_laneq_s64(v15, 1);
              v35 = (uint64_t)v33;
            }
            else
            {
              v35 = (uint64_t)v33;
              do
              {
                v36 = *(_OWORD *)(v26 - 32);
                *(_QWORD *)(v35 - 16) = *(_QWORD *)(v26 - 16);
                *(_OWORD *)(v35 - 32) = v36;
                *(_QWORD *)(v26 - 24) = 0;
                *(_QWORD *)(v26 - 16) = 0;
                *(_QWORD *)(v26 - 32) = 0;
                *(_DWORD *)(v35 - 8) = *(_DWORD *)(v26 - 8);
                *(_DWORD *)(v35 - 4) = *(_DWORD *)(v26 - 4);
                v35 -= 32;
                v26 -= 32;
              }
              while (v26 != v153.i64[0]);
            }
            v38 = v15.i64[1];
            v154 = (void *)v15.i64[0];
            for (i = v15.i64[0]; v38 != i; v38 -= 32)
            {
              if (*(char *)(v38 - 9) < 0)
                operator delete(*(void **)(v38 - 32));
            }
            v14 = &v32[32 * v31];
            v28 = (uint64_t)(v33 + 32);
            v15.i64[0] = v35;
            if (v154)
            {
              operator delete(v154);
              v15.i64[0] = v35;
            }
          }
          else
          {
            *(_QWORD *)v153.i64[1] = v24;
            v27 = *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7);
            *(_QWORD *)(v153.i64[1] + 8) = v169.__r_.__value_.__r.__words[0];
            *(_QWORD *)(v153.i64[1] + 15) = v27;
            *(_BYTE *)(v153.i64[1] + 23) = v25;
            *(_DWORD *)(v153.i64[1] + 24) = v21;
            *(_DWORD *)(v153.i64[1] + 28) = ABITypeAlignment;
            v28 = v153.i64[1] + 32;
          }
          v12 = v149;
          if (v166.i8[15] < 0)
          {
            v155 = v15.i64[0];
            operator delete(__dst);
            v15.i64[0] = v155;
          }
          v15.i64[1] = v28;
        }
        v13 = *(_QWORD *)(v13 + 8);
      }
      while (v13 != v12);
      v40 = (void **)v15.i64[1];
      v39 = v15.i64[0];
      v156 = v15;
    }
    v41 = 126 - 2 * __clz(((uint64_t)v40 - v39) >> 5);
    if (v40 == (void **)v39)
      v42 = 0;
    else
      v42 = v41;
    std::__introsort<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *,false>(v39, v40, v42, 1);
    v43 = (int64x2_t *)((char *)this + 3752);
    v44 = v156.i64[1];
    v45 = (v156.i64[1] - v156.i64[0]) >> 5;
    v46 = *((_QWORD *)this + 469);
    if (v45 > (*((_QWORD *)this + 471) - v46) >> 5)
    {
      if (v156.i64[1] - v156.i64[0] < 0)
LABEL_146:
        abort();
      v47 = *((_QWORD *)this + 470) - v46;
      v168 = (char *)this + 3768;
      v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,unsigned int>>>(v45);
      v50 = *((_QWORD *)this + 470);
      v51 = *((_QWORD *)this + 469);
      if (v50 == v51)
      {
        v54 = vdupq_n_s64(v50);
        v52 = &v48[v47];
      }
      else
      {
        v52 = &v48[v47];
        do
        {
          v53 = *(_OWORD *)(v50 - 32);
          *((_QWORD *)v52 - 2) = *(_QWORD *)(v50 - 16);
          *((_OWORD *)v52 - 2) = v53;
          *(_QWORD *)(v50 - 24) = 0;
          *(_QWORD *)(v50 - 16) = 0;
          *(_QWORD *)(v50 - 32) = 0;
          *((_DWORD *)v52 - 2) = *(_DWORD *)(v50 - 8);
          v52 -= 32;
          v50 -= 32;
        }
        while (v50 != v51);
        v54 = *v43;
      }
      *((_QWORD *)this + 469) = v52;
      *((_QWORD *)this + 470) = &v48[v47];
      v166 = v54;
      v55 = *((_QWORD *)this + 471);
      *((_QWORD *)this + 471) = &v48[32 * v49];
      v167 = v55;
      __dst = (char *)v54.i64[0];
      std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer((uint64_t)&__dst);
    }
    if (v156.i64[0] == v156.i64[1])
    {
      v56 = 0;
    }
    else
    {
      v56 = 0;
      v57 = v156.i64[0];
      do
      {
        v58 = *(_DWORD *)(v57 + 28);
        if (*(char *)(v57 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)v57, *(_QWORD *)(v57 + 8));
        }
        else
        {
          v59 = *(_OWORD *)v57;
          v169.__r_.__value_.__r.__words[2] = *(_QWORD *)(v57 + 16);
          *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v59;
        }
        v60 = (v56 + v58 - 1) & -v58;
        v170 = v60;
        v61 = *((_QWORD *)this + 470);
        v62 = *((_QWORD *)this + 471);
        if (v61 >= v62)
        {
          v64 = (uint64_t)(v61 - v43->i64[0]) >> 5;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 59)
            goto LABEL_146;
          v66 = v62 - v43->i64[0];
          if (v66 >> 4 > v65)
            v65 = v66 >> 4;
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0)
            v67 = 0x7FFFFFFFFFFFFFFLL;
          else
            v67 = v65;
          v168 = (char *)this + 3768;
          v68 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,unsigned int>>>(v67);
          v70 = &v68[32 * v64];
          *(std::string *)v70 = v169;
          memset(&v169, 0, sizeof(v169));
          *((_DWORD *)v70 + 6) = v60;
          v71 = *((_QWORD *)this + 470);
          v72 = *((_QWORD *)this + 469);
          if (v71 == v72)
          {
            v75 = vdupq_n_s64(v71);
            v73 = &v68[32 * v64];
          }
          else
          {
            v73 = &v68[32 * v64];
            do
            {
              v74 = *(_OWORD *)(v71 - 32);
              *((_QWORD *)v73 - 2) = *(_QWORD *)(v71 - 16);
              *((_OWORD *)v73 - 2) = v74;
              *(_QWORD *)(v71 - 24) = 0;
              *(_QWORD *)(v71 - 16) = 0;
              *(_QWORD *)(v71 - 32) = 0;
              *((_DWORD *)v73 - 2) = *(_DWORD *)(v71 - 8);
              v73 -= 32;
              v71 -= 32;
            }
            while (v71 != v72);
            v75 = *v43;
          }
          v63 = v70 + 32;
          *((_QWORD *)this + 469) = v73;
          *((_QWORD *)this + 470) = v70 + 32;
          v166 = v75;
          v76 = *((_QWORD *)this + 471);
          *((_QWORD *)this + 471) = &v68[32 * v69];
          v167 = v76;
          __dst = (char *)v75.i64[0];
          std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer((uint64_t)&__dst);
        }
        else
        {
          *(std::string *)v61 = v169;
          *(_DWORD *)(v61 + 24) = v60;
          v63 = (char *)(v61 + 32);
        }
        *((_QWORD *)this + 470) = v63;
        v56 = *(_DWORD *)(v57 + 24) + v60;
        v57 += 32;
      }
      while (v57 != v156.i64[1]);
      *((_DWORD *)this + 936) = *(_DWORD *)(v156.i64[0] + 28);
    }
    *((_DWORD *)this + 935) = v56;
    if (v151)
      llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40));
    if (v156.i64[0])
    {
      if (v156.i64[0] != v156.i64[1])
      {
        do
        {
          if (*(char *)(v44 - 9) < 0)
            operator delete(*(void **)(v44 - 32));
          v44 -= 32;
        }
        while (v44 != v156.i64[0]);
      }
      operator delete((void *)v156.i64[0]);
    }
    if (*((_QWORD *)this + 22))
    {
      if ((AGCLLVMUserObject::needsDylibResources(this) & 1) != 0)
      {
        if (v148)
        {
LABEL_108:
          v77 = (llvm::Type *)llvm::PointerType::get();
          if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24))
                                                      + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 7)
          {
            v78 = 71;
          }
          else
          {
            v83 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24))
                                                    + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
            v78 = 36;
            if (v83 == 22)
              v78 = 71;
          }
          v84 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                              + 400)
                                                   + 824)
                                     + 8 * v78))();
          __dst = "agc.global_constructors";
          LOWORD(v168) = 259;
          GlobalBufferBinding = (llvm::Type **)AGCLLVMUserObject::createGlobalBufferBinding(this, v77, (const llvm::Twine *)&__dst, v84, 0, 5, 0);
          v86 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
          if (v86)
            v87 = v86 - 24;
          else
            v87 = 0;
          v88 = *(_QWORD *)(v87 + 40);
          if (v88)
            v89 = (llvm::Instruction *)(v88 - 24);
          else
            v89 = 0;
          llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v89);
          v90 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
          __dst = "allocate_tls_end";
          LOWORD(v168) = 259;
          v91 = llvm::BasicBlock::splitBasicBlock();
          __dst = "allocate_tls";
          LOWORD(v168) = 259;
          v92 = (llvm::BasicBlock *)operator new();
          llvm::BasicBlock::BasicBlock();
          v93 = *(_QWORD *)(v90 + 40);
          if (v93 == v90 + 40)
          {
            v96 = 0;
          }
          else
          {
            v94 = (llvm::Instruction *)(v93 - 24);
            if (v93)
              v95 = v93 - 24;
            else
              v95 = 0;
            if (*(unsigned __int8 *)(v95 + 16) - 29 >= 0xB)
              v96 = 0;
            else
              v96 = v94;
          }
          llvm::Instruction::eraseFromParent(v96);
          v97 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v97 + 11) = v90;
          *((_QWORD *)v97 + 12) = v90 + 40;
          v98 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
          LOWORD(v168) = 257;
          v100 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v99);
          AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v98 + 5, v100, (uint64_t)GlobalBufferBinding, 0, (uint64_t)&__dst);
          v102 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v103 = (uint64_t *)(v102 + 40);
          v104 = *((_QWORD *)v102 + 30);
          LOWORD(v168) = 257;
          Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(v102 + 40), 47, (uint64_t)AlignedLoad, v104, (uint64_t)&__dst);
          v106 = llvm::ConstantInt::get();
          v171 = 257;
          ICmp = llvm::IRBuilderBase::CreateICmp(v103, 33, Cast, v106, (uint64_t)&v169);
          llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp, (uint64_t)v92, v91);
          v108 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v108 + 11) = v92;
          *((_QWORD *)v108 + 12) = (char *)v92 + 40;
          *((_DWORD *)this + 934) = ((_BYTE)v148 + 15) & 0x30;
          v109 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v162 = *(_OWORD *)(v109 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v109 + 40));
          v164 = *((_DWORD *)v109 + 34);
          v110 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
          if (v110)
            v111 = (llvm::BasicBlock *)(v110 - 24);
          else
            v111 = 0;
          v112 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
          FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v111);
          llvm::IRBuilderBase::SetInsertPoint((uint64_t)v112, (uint64_t)v111, FirstInsertionPt);
          v114 = llvm::ConstantInt::get();
          v115 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, (uint64_t)"llvm.agx.tls.alloc", 18, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 176), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
          v116 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v169.__r_.__value_.__r.__words[0] = v114;
          LOWORD(v168) = 257;
          llvm::IRBuilderBase::CreateCall((uint64_t)(v116 + 40), *(_QWORD *)(v115 + 24), v115, (uint64_t)&v169, 1, (uint64_t)&__dst);
          v117 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
          v159 = v162;
          v160 = v163;
          if (v163)
            llvm::MetadataTracking::track();
          v161 = v164;
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v159, (uint64_t)(v117 + 8));
          if (v160)
            llvm::MetadataTracking::untrack();
          v118 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v119 = (llvm::Type *)*((_QWORD *)v118 + 30);
          v120 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v168) = 257;
          GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v118 + 40), v119, AlignedLoad, v120, (const llvm::Twine *)&__dst);
          __dst = "loop_global_constructors";
          LOWORD(v168) = 259;
          v122 = (llvm::BasicBlock *)operator new();
          llvm::BasicBlock::BasicBlock();
          llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v122);
          v123 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v123 + 11) = v122;
          *((_QWORD *)v123 + 12) = (char *)v122 + 40;
          v124 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
          LOWORD(v168) = 257;
          PHI = llvm::IRBuilderBase::CreatePHI(v124, v77, 2, (const llvm::Twine *)&__dst);
          llvm::PHINode::addIncoming(PHI, GEP, v92);
          v126 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v127 = (llvm::Type *)*((_QWORD *)v126 + 30);
          LOWORD(v168) = 257;
          v128 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v126 + 5, v127, (uint64_t)PHI, 0, (uint64_t)&__dst);
          llvm::FunctionType::get();
          v129 = llvm::PointerType::get();
          v130 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
          v131 = llvm::PointerType::get();
          LOWORD(v168) = 257;
          v132 = llvm::IRBuilderBase::CreateCast((uint64_t)v130, 48, v128, v131, (uint64_t)&__dst);
          v133 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
          LOWORD(v168) = 257;
          v134 = llvm::IRBuilderBase::CreateCast((uint64_t)v133, 49, v132, v129, (uint64_t)&__dst);
          v171 = 257;
          llvm::IRBuilderBase::CreateCall((uint64_t)v133, **(_QWORD **)(*(_QWORD *)v134 + 16), v134, 0, 0, (uint64_t)&v169);
          __dst = (char *)llvm::MDString::get();
          llvm::MDTuple::getImpl();
          llvm::Instruction::setMetadata();
          v135 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v136 = (llvm::Type *)*((_QWORD *)v135 + 30);
          v137 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v168) = 257;
          v138 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v135 + 40), v136, PHI, v137, (const llvm::Twine *)&__dst);
          llvm::PHINode::addIncoming(PHI, v138, v122);
          v139 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
          LOWORD(v168) = 257;
          v141 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v138, v140);
          v142 = llvm::IRBuilderBase::CreateAlignedLoad(v139, v141, (uint64_t)v138, 0, (uint64_t)&__dst);
          v143 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 240);
          v171 = 257;
          v144 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v139, 47, v142, v143, (uint64_t)&v169);
          v145 = llvm::ConstantInt::get();
          v158 = 257;
          v146 = llvm::IRBuilderBase::CreateICmp(v139, 33, v144, v145, (uint64_t)v157);
          llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v146, (uint64_t)v122, v91);
          if (v163)
            llvm::MetadataTracking::untrack();
          v147 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v147 + 11) = v91;
          *((_QWORD *)v147 + 12) = v91 + 40;
        }
      }
      else
      {
        v79 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
        v80 = v79 + 8;
        for (j = *(_QWORD *)(v79 + 16); j != v80; j = *(_QWORD *)(j + 8))
        {
          v82 = j - 56;
          if (!j)
            v82 = 0;
          if ((*(_BYTE *)(v82 + 33) & 0x1C) != 0 && (*(_BYTE *)(v82 + 80) & 2) == 0)
          {
            if (v148)
              goto LABEL_108;
            return;
          }
        }
      }
    }
  }
}

void AGCLLVMUserObject::lowerGlobalBindings(AGCLLVMUserObject *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;
  AGCLLVMUserObject *v7;
  AGCLLVMUserObject *v8;
  AGCLLVMUserObject *v9;

  v2 = (char *)*((_QWORD *)this + 106);
  v3 = (char *)this + 856;
  if (v2 != (char *)this + 856)
  {
    do
    {
      AGCLLVMUserObject::lowerGlobalBindingVariable(this, *((llvm::GlobalVariable **)v2 + 5));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  v7 = (AGCLLVMUserObject *)*((_QWORD *)this + 109);
  if (v7 != (AGCLLVMUserObject *)((char *)this + 880))
  {
    do
    {
      AGCLLVMUserObject::lowerGlobalBindingVariable(this, *((llvm::GlobalVariable **)v7 + 5));
      v8 = (AGCLLVMUserObject *)*((_QWORD *)v7 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(AGCLLVMUserObject **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (AGCLLVMUserObject *)*((_QWORD *)v7 + 2);
          v6 = *(_QWORD *)v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v6);
      }
      v7 = v9;
    }
    while (v9 != (AGCLLVMUserObject *)((char *)this + 880));
  }
}

uint64_t AGCLLVMUserObject::cleanupShaderIR(AGCLLVMUserObject *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if (!*((_BYTE *)this + 15))
  {
    v2 = *(_QWORD **)(*((_QWORD *)this + 21) + 72);
    v3 = *(_QWORD **)(*((_QWORD *)this + 21) + 80);
    if (v2 != v3)
    {
      do
      {
        v4 = (_QWORD *)*v2;
        llvm::MergeBlockIntoPredecessor();
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  v5 = *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = *(_QWORD *)((char *)this + v5 + 464);
  if (!*(_BYTE *)(v6 + 378))
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(v6 + 352), *(llvm::Module **)((char *)this + v5 + 368));
  if (!*((_BYTE *)this + 15))
  {
    llvm::NamedMDNode::eraseFromParent(*((llvm::NamedMDNode **)this + 8));
    if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 80))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)))
    {
      llvm::Function::getSubprogram(*((llvm::Function **)this + 22));
      llvm::Function::setSubprogram();
    }
    llvm::Function::eraseFromParent(*((llvm::Function **)this + 22));
  }
  result = (*(uint64_t (**)(AGCLLVMUserObject *))(*(_QWORD *)this + 24))(this);
  if ((_DWORD)result)
  {
    llvm::Module::getOrInsertNamedMetadata();
    llvm::ConstantInt::get();
    llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    result = llvm::NamedMDNode::addOperand();
  }
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  return result;
}

void AGCLLVMUserObject::replaceFunctionGroups(AGCLLVMUserObject *this)
{
  AGCLLVMUserObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t MetadataImpl;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  unsigned __int8 *v26;
  _BYTE *v27;
  _BYTE *v28;
  unint64_t v29;
  unint64_t k;
  unsigned __int8 *v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t m;
  llvm::Value *v44;
  char *v45;
  int Key;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  llvm::Instruction **v50;
  uint64_t v51;
  llvm::Instruction *v52;
  char v53;
  char *v54;
  int v55;
  uint64_t v56;
  AGCLLVMUserObject *v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[32];
  void *v64;
  uint64_t v65;
  _BYTE v66[32];
  void *v67;
  uint64_t v68;
  _QWORD v69[10];

  v1 = this;
  v69[8] = *MEMORY[0x1E0C80C00];
  v67 = v69;
  v68 = 0x800000000;
  v64 = v66;
  v65 = 0x400000000;
  v8 = ((*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 104))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) & 1) != 0
    || *((_BYTE *)v1 + 3657)
    || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) + 64))((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24)) == 29;
  v58 = v8;
  v9 = *(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 368);
  v10 = v9 + 24;
  v11 = *(_QWORD *)(v9 + 32);
  if (v11 != v9 + 24)
  {
    v55 = 0;
    v54 = (char *)v1 + 336;
    v57 = v1;
    v56 = v9 + 24;
    while (1)
    {
      v12 = v11 - 56;
      v33 = v11 == 0;
      v11 = *(_QWORD *)(v11 + 8);
      v13 = v33 ? 0 : v12;
      v14 = v13 + 72;
      for (i = *(_QWORD *)(v13 + 80); ; i = *(_QWORD *)(i + 8))
      {
        if (i == v14)
          goto LABEL_109;
        v16 = i - 24;
        if (!i)
          v16 = 0;
        v17 = *(_QWORD *)(v16 + 48);
        if (v17 != v16 + 40)
          break;
      }
      if (i != v14)
        break;
LABEL_109:
      if (v11 == v10)
        goto LABEL_110;
    }
    v59 = v14;
    v60 = v11;
    while (1)
    {
      v18 = v17 - 24;
      if (!v17)
        v18 = 0;
      v19 = *(unsigned __int8 *)(v18 + 16);
      v20 = v19 == 84 ? v18 : 0;
      if (v17 && v19 == 84)
        break;
LABEL_79:
      v17 = *(_QWORD *)(v17 + 8);
      v39 = i - 24;
      if (!i)
        v39 = 0;
      if (v17 == v39 + 40)
      {
        do
        {
          i = *(_QWORD *)(i + 8);
          if (i == v14)
            goto LABEL_109;
          v40 = i - 24;
          if (!i)
            v40 = 0;
          v17 = *(_QWORD *)(v40 + 48);
        }
        while (v17 == v40 + 40);
      }
      if (i == v14)
        goto LABEL_109;
    }
    v21 = *(_QWORD *)(v20 - 32);
    if (v21 && !*(_BYTE *)(v21 + 16) && *(_QWORD *)(v21 + 24) == *(_QWORD *)(v20 + 72))
    {
      llvm::Instruction::setMetadata();
      goto LABEL_79;
    }
    v61 = v63;
    v62 = 0x400000000;
    if (*(_QWORD *)(v20 + 48) || (*(_BYTE *)(v20 + 23) & 0x20) != 0)
    {
      MetadataImpl = llvm::Instruction::getMetadataImpl();
      if (MetadataImpl)
      {
        v23 = MetadataImpl;
        v24 = *(unsigned int *)(MetadataImpl + 8);
        if ((_DWORD)v24)
        {
          for (j = 0; j != v24; ++j)
          {
            v26 = *(unsigned __int8 **)(v23 - 8 * *(unsigned int *)(v23 + 8) + 8 * j);
            if (((*v26 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v26)) == 0)
              v26 = 0;
            v27 = *(_BYTE **)&v26[-8 * *((unsigned int *)v26 + 2) + 16];
            if (((*v27 < 0x23uLL) & (0x7FFFFFFF0uLL >> *v27)) != 0)
              v28 = v27;
            else
              v28 = 0;
            v29 = *((unsigned int *)v28 + 2);
            if ((_DWORD)v29)
            {
              for (k = 0; k < v29; ++k)
              {
                v31 = *(unsigned __int8 **)&v28[8 * k + -8 * v29];
                if (v31 && *v31 - 1 <= 1)
                {
                  v32 = *((_QWORD *)v31 + 16);
                  v33 = v32 && *(_BYTE *)(v32 + 16) == 0;
                  if (v33 && areTypesIsomorphic(*(_QWORD *)(v32 + 24), *(_QWORD *)(v20 + 72)))
                  {
                    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v61, (uint64_t)v31);
                    v29 = *((unsigned int *)v28 + 2);
                  }
                }
              }
            }
          }
          v34 = 1;
          v10 = v56;
          v1 = v57;
LABEL_51:
          v14 = v59;
          v11 = v60;
          goto LABEL_73;
        }
        v34 = 1;
LABEL_73:
        v2 = v62;
        if ((_DWORD)v62)
        {
          llvm::MDTuple::getImpl();
          llvm::Instruction::setMetadata();
        }
        else if (v34)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v20);
        }
        goto LABEL_77;
      }
      v21 = *(_QWORD *)(v20 - 32);
    }
    if (v21 && !*(_BYTE *)(v21 + 16))
    {
      v33 = *(_QWORD *)(v21 + 24) == *(_QWORD *)(v20 + 72);
      v35 = v58;
      if (v33)
        v35 = 1;
      if ((v35 & 1) != 0)
        goto LABEL_56;
    }
    else if ((v58 & 1) != 0)
    {
LABEL_56:
      v34 = 0;
      goto LABEL_73;
    }
    if ((*(_QWORD *)(v20 + 48) || (*(_BYTE *)(v20 + 23) & 0x20) != 0) && llvm::Instruction::getMetadataImpl())
    {
LABEL_77:
      if (v61 != v63)
        free(v61);
      goto LABEL_79;
    }
    if (v55)
    {
LABEL_66:
      if ((_DWORD)v68)
      {
        v36 = (char *)v67;
        v37 = 8 * v68;
        v14 = v59;
        do
        {
          if (*(_QWORD *)v36
            && areTypesIsomorphic(*(_QWORD *)(*(_QWORD *)v36 + 24), *(_QWORD *)(v20 + 72)))
          {
            v38 = llvm::ValueAsMetadata::get();
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v61, v38);
          }
          v36 += 8;
          v37 -= 8;
        }
        while (v37);
        v34 = 1;
        v55 = 1;
        v11 = v60;
        goto LABEL_73;
      }
      v34 = 1;
      v55 = 1;
      goto LABEL_51;
    }
    v41 = *(_QWORD *)&v54[*(_QWORD *)(*(_QWORD *)v1 - 24) + 32];
    v42 = v41 + 24;
    for (m = *(_QWORD *)(v41 + 32); ; m = *(_QWORD *)(m + 8))
    {
      if (m == v42)
        goto LABEL_66;
      if (m)
        v44 = (llvm::Value *)(m - 56);
      else
        v44 = 0;
      v45 = (char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
      llvm::Value::getName(v44);
      Key = llvm::StringMapImpl::FindKey();
      if (Key == -1 || Key == (unint64_t)*((unsigned int *)v45 + 824))
      {
        v47 = *((_QWORD *)v44 + 1);
        if (!v47)
          continue;
        while (1)
        {
          v48 = *(_QWORD *)(v47 + 24);
          if (!v48 || *(_BYTE *)(v48 + 16) != 84)
            break;
          v49 = *(_QWORD *)(v48 - 32);
          if (!v49 || *(_BYTE *)(v49 + 16) || *(_QWORD *)(v49 + 24) != *(_QWORD *)(v48 + 72))
            v49 = 0;
          if ((llvm::Value *)v49 != v44)
            break;
          v47 = *(_QWORD *)(v47 + 8);
          if (!v47)
            goto LABEL_107;
        }
      }
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v67, (uint64_t)v44);
LABEL_107:
      ;
    }
  }
LABEL_110:
  v50 = (llvm::Instruction **)v64;
  if ((_DWORD)v65)
  {
    v51 = 8 * v65;
    do
    {
      v52 = *v50++;
      printMessage((char **)&AGCPrinter, "Removing unreachable function call", v2, v3, v4, v5, v6, v7, v53);
      std::string::append((std::string *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8), "Removing unreachable function call");
      llvm::UndefValue::get();
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent(v52);
      v51 -= 8;
    }
    while (v51);
    v50 = (llvm::Instruction **)v64;
  }
  if (v50 != (llvm::Instruction **)v66)
    free(v50);
  if (v67 != v69)
    free(v67);
}

uint64_t (***AGCLLVMUserObject::replaceSimdgroupAsyncCopy(AGCLLVMUserObject *this))()
{
  llvm::Module *v2;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  uint64_t v16;
  uint64_t v17;
  uint64_t k;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t m;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t (****v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t n;
  _BYTE *v33;
  uint64_t ii;
  uint64_t (***result)();
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  _QWORD v39[2];
  BOOL v40;
  _QWORD v41[4];
  __int16 v42;
  _BYTE v43[48];
  uint64_t (**v44)();
  __int128 v45;
  uint64_t (***v46)();
  uint64_t (**v47)();
  __int128 v48;
  uint64_t (***v49)();
  uint64_t (**v50)();
  __int128 v51;
  uint64_t (***v52)();
  uint64_t (**v53)();
  __int128 v54;
  uint64_t (***v55)();
  uint64_t (**v56)();
  __int128 v57;
  _QWORD v58[3];

  v58[1] = *MEMORY[0x1E0C80C00];
  v2 = *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v41[0] = "air.version";
  v42 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v2, (const llvm::Twine *)v41);
  if (NamedMetadata && (Operand = llvm::NamedMDNode::getOperand(NamedMetadata)) != 0)
  {
    v5 = Operand;
    LODWORD(v44) = 0;
    LODWORD(v39[0]) = 0;
    LODWORD(v41[0]) = 0;
    parseMDInt(0, Operand, (unsigned int *)v41, &v44);
    v6 = 1;
    LODWORD(v41[0]) = 1;
    parseMDInt(0, v5, (unsigned int *)v41, v39);
    if (v44 <= 2)
      v6 = (_DWORD)v44 == 2 && LODWORD(v39[0]) > 3;
  }
  else
  {
    v6 = 0;
  }
  v8 = 0;
  v45 = xmmword_1C3E37E20;
  v44 = &off_1E7EB7EF0;
  v46 = &v44;
  v47 = &off_1E7EB7EF0;
  v48 = xmmword_1C3E37E30;
  v49 = &v47;
  v50 = &off_1E7EB7EF0;
  v51 = xmmword_1C3E37E40;
  v52 = &v50;
  v53 = &off_1E7EB7EF0;
  v54 = xmmword_1C3E37E50;
  v55 = &v53;
  v56 = &off_1E7EB7EF0;
  v9.n128_u64[1] = 1;
  v57 = xmmword_1C3E37E60;
  v58[0] = &v56;
  v9.n128_u64[0] = 0x400000000;
  do
  {
    v10 = &v41[v8];
    *v10 = &v41[v8 + 2];
    v10[1] = 0x400000000;
    v8 += 6;
  }
  while (v8 != 30);
  v11 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v12 = *(_QWORD *)(v11 + 32);
  for (i = v11 + 24; v12 != i; v12 = *(_QWORD *)(v38 + 8))
  {
    v13 = v12 - 56;
    v38 = v12;
    if (!v12)
      v13 = 0;
    v14 = v13 + 72;
    for (j = *(_QWORD *)(v13 + 80); j != v14; j = *(_QWORD *)(j + 8))
    {
      v16 = j - 24;
      if (!j)
        v16 = 0;
      v17 = v16 + 40;
      for (k = *(_QWORD *)(v16 + 48); k != v17; k = *(_QWORD *)(k + 8))
      {
        v19 = k - 24;
        if (!k)
          v19 = 0;
        v20 = *(unsigned __int8 *)(v19 + 16);
        if (v20 == 84)
          v21 = v19;
        else
          v21 = 0;
        if (k && v20 == 84)
        {
          v22 = 0;
          while (1)
          {
            v23 = *(_QWORD *)(v21 - 32);
            if (v23)
            {
              if (!*(_BYTE *)(v23 + 16) && *(_QWORD *)(v23 + 24) == *(_QWORD *)(v21 + 72))
              {
                v39[0] = llvm::Value::getName((llvm::Value *)v23);
                v39[1] = v24;
                strlen(AGCLLVMUserObject::replaceSimdgroupAsyncCopy(void)::names[v22]);
                if (llvm::StringRef::find() != -1)
                  break;
              }
            }
            if (++v22 == 5)
              goto LABEL_35;
          }
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v41[6 * v22], v21);
        }
LABEL_35:
        ;
      }
    }
  }
  for (m = 0; m != 5; ++m)
  {
    v26 = &v41[6 * m];
    v27 = *((unsigned int *)v26 + 2);
    if ((_DWORD)v27)
    {
      v28 = (_QWORD *)*v26;
      v29 = &(&v46)[4 * m];
      v30 = 8 * v27;
      do
      {
        v31 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
        v39[0] = *v28;
        v40 = v6;
        if (!*v29)
          std::__throw_bad_function_call[abi:nn180100]();
        ((void (*)(uint64_t (***)(), uint64_t, _QWORD *, BOOL *, __n128))(**v29)[6])(*v29, v31, v39, &v40, v9);
        ++v28;
        v30 -= 8;
      }
      while (v30);
    }
  }
  for (n = 0; n != -240; n -= 48)
  {
    v33 = *(_BYTE **)&v43[n];
    if (&v43[n + 16] != v33)
      free(v33);
  }
  for (ii = 0; ii != -20; ii -= 4)
  {
    result = (uint64_t (***)())v58[ii];
    if (&(&v56)[ii] == result)
    {
      result = &(&v56)[ii];
      v36 = 4;
    }
    else
    {
      if (!result)
        continue;
      v36 = 5;
    }
    result = (uint64_t (***)())(*result)[v36]();
  }
  return result;
}

uint64_t AGCLLVMUserObject::replaceSimdgroupMatrices(AGCLLVMUserObject *this)
{
  char v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t i;
  _BYTE *v27;
  __int128 v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t j;
  uint64_t v47;
  int v48;
  uint64_t v49;
  size_t **k;
  size_t **v52;
  size_t *v53;
  uint64_t v54;
  const void *v55;
  size_t v56;
  size_t v57;
  const void *Name;
  size_t v59;
  size_t *v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t *m;
  uint64_t *v76;
  uint64_t v77;
  size_t v78;
  uint64_t v79;
  void **v80;
  BOOL v81;
  uint64_t *v82;
  uint64_t v83;
  const void *v84;
  uint64_t *v85;
  uint64_t v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t *n;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  llvm *v103;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  void *v120;
  unsigned int v121;
  int v122;
  int v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  _BYTE v127[24];
  _QWORD v128[105];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[28];
  __int128 v135;
  _QWORD v136[3];
  _QWORD *v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v1 = 1;
  if (!*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1809))
    return v1 & 1;
  v125 = "air.simdgroup_matrix_16x16_multiply_accumulate.";
  v126 = 47;
  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7EB7E18;
  *(_OWORD *)(v2 + 8) = xmmword_1C3E37E70;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v128[0] = v2;
  v128[1] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate.s.s.";
  v128[2] = 60;
  v3 = (char *)operator new(0x28uLL);
  *(_QWORD *)v3 = &off_1E7EB7E18;
  *(_OWORD *)(v3 + 8) = xmmword_1C3E37E70;
  *(_OWORD *)(v3 + 24) = xmmword_1C3E37E80;
  v128[6] = v3;
  v128[7] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate.s.u.";
  v128[8] = 60;
  v4 = (char *)operator new(0x28uLL);
  *(_QWORD *)v4 = &off_1E7EB7E18;
  *(_OWORD *)(v4 + 8) = xmmword_1C3E37E70;
  *(_OWORD *)(v4 + 24) = xmmword_1C3E37E90;
  v128[12] = v4;
  v128[13] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate.u.s.";
  v128[14] = 60;
  v5 = (char *)operator new(0x28uLL);
  *(_QWORD *)v5 = &off_1E7EB7E18;
  *(_OWORD *)(v5 + 8) = xmmword_1C3E37E70;
  *(_OWORD *)(v5 + 24) = xmmword_1C3E37EA0;
  v128[18] = v5;
  v128[19] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate.u.u.";
  v128[20] = 60;
  v6 = (char *)operator new(0x28uLL);
  *(_QWORD *)v6 = &off_1E7EB7E18;
  *(_OWORD *)(v6 + 8) = xmmword_1C3E37E70;
  *(_OWORD *)(v6 + 24) = xmmword_1C3E37EB0;
  v128[24] = v6;
  v128[25] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate.s.s.s.s.";
  v128[26] = 73;
  v7 = (char *)operator new(0x28uLL);
  *(_QWORD *)v7 = &off_1E7EB7E18;
  *(_OWORD *)(v7 + 8) = xmmword_1C3E37E70;
  *(_QWORD *)&v8 = 0x100000001;
  *((_QWORD *)&v8 + 1) = 0x100000001;
  *(_OWORD *)(v7 + 24) = v8;
  v128[30] = v7;
  v128[31] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate.s.s.u.s.";
  v128[32] = 73;
  v9 = (char *)operator new(0x28uLL);
  *(_QWORD *)v9 = &off_1E7EB7E18;
  *(_OWORD *)(v9 + 8) = xmmword_1C3E37E70;
  *(_OWORD *)(v9 + 24) = xmmword_1C3E37EC0;
  v128[36] = v9;
  v128[37] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate.s.u.s.s.";
  v128[38] = 73;
  v10 = (char *)operator new(0x28uLL);
  *(_QWORD *)v10 = &off_1E7EB7E18;
  *(_OWORD *)(v10 + 8) = xmmword_1C3E37E70;
  *(_OWORD *)(v10 + 24) = xmmword_1C3E37ED0;
  v128[42] = v10;
  v128[43] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate.s.u.u.s.";
  v128[44] = 73;
  v11 = (char *)operator new(0x28uLL);
  *(_QWORD *)v11 = &off_1E7EB7E18;
  *(_OWORD *)(v11 + 8) = xmmword_1C3E37E70;
  *(_OWORD *)(v11 + 24) = xmmword_1C3E37EE0;
  v128[48] = v11;
  v128[49] = "air.simdgroup_matrix_16x16_multiply_accumulate_transpose_operands.";
  v128[50] = 66;
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = &off_1E7EB7E18;
  *(_OWORD *)(v12 + 8) = xmmword_1C3E37EF0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = 0;
  v128[54] = v12;
  v128[55] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_transpose_operands.s.s.";
  v128[56] = 79;
  v13 = (char *)operator new(0x28uLL);
  *(_QWORD *)v13 = &off_1E7EB7E18;
  *(_OWORD *)(v13 + 8) = xmmword_1C3E37EF0;
  *(_OWORD *)(v13 + 24) = xmmword_1C3E37E80;
  v128[60] = v13;
  v128[61] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_transpose_operands.s.u.";
  v128[62] = 79;
  v14 = (char *)operator new(0x28uLL);
  *(_QWORD *)v14 = &off_1E7EB7E18;
  *(_OWORD *)(v14 + 8) = xmmword_1C3E37EF0;
  *(_OWORD *)(v14 + 24) = xmmword_1C3E37E90;
  v128[66] = v14;
  v128[67] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_transpose_operands.u.s.";
  v128[68] = 79;
  v15 = (char *)operator new(0x28uLL);
  *(_QWORD *)v15 = &off_1E7EB7E18;
  *(_OWORD *)(v15 + 8) = xmmword_1C3E37EF0;
  *(_OWORD *)(v15 + 24) = xmmword_1C3E37EA0;
  v128[72] = v15;
  v128[73] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_transpose_operands.u.u.";
  v128[74] = 79;
  v16 = (char *)operator new(0x28uLL);
  *(_QWORD *)v16 = &off_1E7EB7E18;
  *(_OWORD *)(v16 + 8) = xmmword_1C3E37EF0;
  *(_OWORD *)(v16 + 24) = xmmword_1C3E37EB0;
  v128[78] = v16;
  v128[79] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate_transpose_operands.s.s.s.s.";
  v128[80] = 92;
  v17 = (char *)operator new(0x28uLL);
  *(_QWORD *)v17 = &off_1E7EB7E18;
  *(_OWORD *)(v17 + 8) = xmmword_1C3E37EF0;
  *(_QWORD *)&v18 = 0x100000001;
  *((_QWORD *)&v18 + 1) = 0x100000001;
  *(_OWORD *)(v17 + 24) = v18;
  v128[84] = v17;
  v128[85] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate_transpose_operands.s.s.u.s.";
  v128[86] = 92;
  v19 = (char *)operator new(0x28uLL);
  *(_QWORD *)v19 = &off_1E7EB7E18;
  *(_OWORD *)(v19 + 8) = xmmword_1C3E37EF0;
  *(_OWORD *)(v19 + 24) = xmmword_1C3E37EC0;
  v128[90] = v19;
  v128[91] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate_transpose_operands.s.u.s.s.";
  v128[92] = 92;
  v20 = (char *)operator new(0x28uLL);
  *(_QWORD *)v20 = &off_1E7EB7E18;
  *(_OWORD *)(v20 + 8) = xmmword_1C3E37EF0;
  *(_OWORD *)(v20 + 24) = xmmword_1C3E37ED0;
  v128[96] = v20;
  v128[97] = "air.simdgroup_matrix_16x16_widening_multiply_accumulate_saturate_transpose_operands.s.u.u.s.";
  v128[98] = 92;
  v21 = (char *)operator new(0x28uLL);
  *(_QWORD *)v21 = &off_1E7EB7E18;
  *(_OWORD *)(v21 + 8) = xmmword_1C3E37EF0;
  *(_OWORD *)(v21 + 24) = xmmword_1C3E37EE0;
  v128[102] = v21;
  v128[103] = "air.simdgroup_matrix_16x16_load.";
  v128[104] = 32;
  v129[0] = &off_1E7EB7E60;
  v129[1] = 768;
  v129[2] = 1;
  v129[3] = v129;
  v129[4] = "air.simdgroup_matrix_16x16_store.";
  v129[5] = 33;
  v130[0] = &off_1E7EB7E60;
  v130[1] = 776;
  v130[2] = 1;
  v130[3] = v130;
  v130[4] = "air.simdgroup_matrix_8x8_load.s";
  v130[5] = 31;
  v131[0] = &off_1E7EB7E60;
  v131[1] = 768;
  v131[2] = 1;
  v131[3] = v131;
  v131[4] = "air.simdgroup_matrix_8x8_load.u";
  v131[5] = 31;
  v132[0] = &off_1E7EB7E60;
  v132[1] = 768;
  v132[2] = 1;
  v132[3] = v132;
  v132[4] = "air.simdgroup_matrix_8x8_store.s";
  v132[5] = 32;
  v133[0] = &off_1E7EB7E60;
  v133[1] = 776;
  v133[2] = 1;
  v133[3] = v133;
  v133[4] = "air.simdgroup_matrix_8x8_store.u";
  v133[5] = 32;
  v134[0] = &off_1E7EB7E60;
  v134[1] = 776;
  v134[2] = 1;
  v134[3] = v134;
  v134[4] = "air.simdgroup_matrix_16x16_init_diag.";
  v134[5] = 37;
  v22 = (char *)operator new(0x20uLL);
  *(_QWORD *)v22 = &off_1E7EB7EA8;
  *(_OWORD *)(v22 + 8) = xmmword_1C3E37F00;
  v22[24] = 1;
  v134[9] = v22;
  v134[10] = "air.simdgroup_matrix_16x16_init_filled.";
  v134[11] = 39;
  v23 = (char *)operator new(0x20uLL);
  *(_QWORD *)v23 = &off_1E7EB7EA8;
  *(_OWORD *)(v23 + 8) = xmmword_1C3E37F00;
  v23[24] = 0;
  v134[15] = v23;
  v134[16] = "air.simdgroup_matrix_8x8_init_diag";
  v134[17] = 34;
  v24 = (char *)operator new(0x20uLL);
  *(_QWORD *)v24 = &off_1E7EB7EA8;
  *(_OWORD *)(v24 + 8) = xmmword_1C3E37F00;
  v24[24] = 1;
  v134[21] = v24;
  v134[22] = "air.simdgroup_matrix_8x8_init_filled";
  v134[23] = 36;
  v25 = (char *)operator new(0x20uLL);
  *(_QWORD *)v25 = &off_1E7EB7EA8;
  *(_OWORD *)(v25 + 8) = xmmword_1C3E37F00;
  v25[24] = 0;
  v134[27] = v25;
  llvm::StringMapImpl::StringMapImpl((llvm::StringMapImpl *)&v120);
  for (i = 0; i != 1344; i += 48)
  {
    v135 = *(_OWORD *)((char *)&v125 + i);
    v27 = (_BYTE *)v128[i / 8];
    if (v27)
    {
      if (&v127[i] == v27)
      {
        v137 = v136;
        (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)v27 + 24))(v27, v136);
      }
      else
      {
        v137 = (_QWORD *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v27 + 16))(v27);
      }
    }
    else
    {
      v137 = 0;
    }
    v28 = v135;
    v29 = llvm::StringMapImpl::LookupBucketFor();
    v30 = v120;
    v31 = *((_QWORD *)v120 + v29);
    if (v31)
    {
      if (v31 != -8)
        goto LABEL_19;
      --v123;
    }
    v32 = MEMORY[0x1CAA2C6C0](*((_QWORD *)&v28 + 1) + 41, 8);
    v33 = (_QWORD *)v32;
    v34 = v32 + 40;
    if (*((_QWORD *)&v28 + 1))
      memcpy((void *)(v32 + 40), (const void *)v28, *((size_t *)&v28 + 1));
    *(_BYTE *)(v34 + *((_QWORD *)&v28 + 1)) = 0;
    *v33 = *((_QWORD *)&v28 + 1);
    if (v137)
    {
      if (v137 == v136)
      {
        v33[4] = v33 + 1;
        (*(void (**)(_QWORD *))(v136[0] + 24))(v136);
      }
      else
      {
        v33[4] = v137;
        v137 = 0;
      }
    }
    else
    {
      v33[4] = 0;
    }
    v30[v29] = v33;
    ++v122;
    llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v120);
LABEL_19:
    v35 = v137;
    if (v137 == v136)
    {
      v35 = v136;
      v36 = 4;
    }
    else
    {
      if (!v137)
        continue;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  do
  {
    v37 = *(_DWORD **)((char *)&v124 + i);
    if ((unsigned int *)((char *)&v121 + i) == v37)
    {
      v37 = (unsigned int *)((char *)&v121 + i);
      v38 = 4;
    }
    else
    {
      if (!v37)
        goto LABEL_30;
      v38 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_30:
    i -= 48;
  }
  while (i);
  v135 = 0uLL;
  v136[0] = 0x3800000000;
  v39 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v40 = *(_QWORD *)(v39 + 32);
  v115 = v39 + 24;
  if (v40 == v39 + 24)
  {
    v72 = 0;
    v73 = 0;
    m = 0;
  }
  else
  {
    do
    {
      v41 = v40 - 56;
      v117 = v40;
      if (!v40)
        v41 = 0;
      v42 = v41 + 72;
      v43 = *(_QWORD *)(v41 + 80);
      v118 = v41 + 72;
      if (v43 != v41 + 72)
      {
        do
        {
          v44 = v43 - 24;
          if (!v43)
            v44 = 0;
          v45 = v44 + 40;
          for (j = *(_QWORD *)(v44 + 48); j != v45; j = *(_QWORD *)(j + 8))
          {
            v47 = j - 24;
            if (!j)
              v47 = 0;
            v48 = *(unsigned __int8 *)(v47 + 16);
            if (v48 == 84)
              v49 = v47;
            else
              v49 = 0;
            if (j && v48 == 84)
            {
              if (v121)
              {
                for (k = (size_t **)v120; !*k || *k + 1 == 0; ++k)
                  ;
              }
              else
              {
                k = (size_t **)v120;
              }
              v52 = (size_t **)((char *)v120 + 8 * v121);
              if (k != v52)
              {
                v53 = *k;
                while (1)
                {
                  v54 = *(_QWORD *)(v49 - 32);
                  if (v54)
                  {
                    if (!*(_BYTE *)(v54 + 16) && *(_QWORD *)(v54 + 24) == *(_QWORD *)(v49 + 72))
                    {
                      v57 = *v53;
                      v55 = v53 + 5;
                      v56 = v57;
                      Name = (const void *)llvm::Value::getName((llvm::Value *)v54);
                      if (v59 >= v57 && (!v56 || !memcmp(Name, v55, v56)))
                        break;
                    }
                  }
                  do
                  {
                    v60 = k[1];
                    ++k;
                    v53 = v60;
                    if (v60)
                      v61 = v53 + 1 == 0;
                    else
                      v61 = 1;
                  }
                  while (v61);
                  if (k == v52)
                    goto LABEL_68;
                }
                v62 = llvm::StringMapImpl::LookupBucketFor();
                v63 = v135;
                v64 = v62;
                v65 = *(_QWORD *)(v135 + 8 * v62);
                if (v65 == -8)
                {
                  --LODWORD(v136[0]);
                }
                else if (v65)
                {
LABEL_82:
                  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v65 + 8, v49);
                  *((_BYTE *)this + 12) = 1;
                  continue;
                }
                v66 = MEMORY[0x1CAA2C6C0](v56 + 57, 8);
                v67 = (_QWORD *)v66;
                v68 = v66 + 56;
                if (v56)
                  memcpy((void *)(v66 + 56), v55, v56);
                *(_BYTE *)(v68 + v56) = 0;
                *v67 = v56;
                v67[1] = v67 + 3;
                v67[2] = 0x400000000;
                *(_QWORD *)(v63 + 8 * v64) = v67;
                ++HIDWORD(v135);
                v69 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v135);
                v70 = (uint64_t *)(v135 + 8 * v69);
                v42 = v118;
                while (1)
                {
                  v65 = *v70;
                  if (*v70 && v65 != -8)
                    break;
                  ++v70;
                }
                goto LABEL_82;
              }
            }
LABEL_68:
            ;
          }
          v43 = *(_QWORD *)(v43 + 8);
        }
        while (v43 != v42);
      }
      v40 = *(_QWORD *)(v117 + 8);
    }
    while (v40 != v115);
    v72 = v135;
    v73 = DWORD2(v135);
    if (DWORD2(v135))
    {
      for (m = (uint64_t *)v135; !*m || *m == -8; ++m)
        ;
    }
    else
    {
      v73 = 0;
      m = (uint64_t *)v135;
    }
  }
  v76 = (uint64_t *)(v72 + 8 * v73);
  if (m == v76)
  {
    v1 = 1;
    goto LABEL_133;
  }
  v77 = *m;
  v1 = 1;
  v116 = v76;
  while (2)
  {
    v78 = *(_QWORD *)v77;
    v125 = v127;
    v126 = 0x400000000;
    v79 = *(unsigned int *)(v77 + 16);
    v80 = (void **)(v77 + 8);
    if ((_DWORD)v79)
      v81 = &v125 == v80;
    else
      v81 = 1;
    if (v81)
      goto LABEL_126;
    v82 = (uint64_t *)v127;
    v83 = *(unsigned int *)(v77 + 16);
    if (v79 < 5
      || (LODWORD(v126) = 0,
          llvm::SmallVectorBase<unsigned int>::grow_pod(),
          v83 = *(unsigned int *)(v77 + 16),
          v82 = (uint64_t *)v125,
          (_DWORD)v83))
    {
      memcpy(v82, *v80, 8 * v83);
      v82 = (uint64_t *)v125;
    }
    v84 = (const void *)(v77 + 56);
    LODWORD(v126) = v79;
    v85 = &v82[v79];
    while (2)
    {
      if ((v1 & 1) != 0)
      {
        v86 = *v82;
        v87 = llvm::StringMapImpl::LookupBucketFor();
        v88 = v120;
        v89 = v87;
        v90 = *((_QWORD *)v120 + v87);
        if (v90 == -8)
        {
          --v123;
        }
        else if (v90)
        {
          goto LABEL_120;
        }
        v91 = MEMORY[0x1CAA2C6C0](v78 + 41, 8);
        v92 = (_QWORD *)v91;
        v93 = v91 + 40;
        if (v78)
          memcpy((void *)(v91 + 40), v84, v78);
        *(_BYTE *)(v93 + v78) = 0;
        *v92 = v78;
        v92[4] = 0;
        v88[v89] = v92;
        ++v122;
        v94 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v120);
        for (n = (uint64_t *)((char *)v120 + 8 * v94); ; ++n)
        {
          v90 = *n;
          if (*n && v90 != -8)
            break;
        }
LABEL_120:
        v97 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
        v124 = v86;
        v98 = *(_QWORD *)(v90 + 32);
        if (!v98)
          std::__throw_bad_function_call[abi:nn180100]();
        v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v98 + 48))(v98, v97, &v124);
      }
      else
      {
        v1 = 0;
      }
      if (++v82 != v85)
        continue;
      break;
    }
    if (v125 != v127)
      free(v125);
    v76 = v116;
    do
    {
LABEL_126:
      v99 = m[1];
      ++m;
      v77 = v99;
      if (v99)
        v100 = v77 == -8;
      else
        v100 = 1;
    }
    while (v100);
    if (m != v76)
      continue;
    break;
  }
LABEL_133:
  if (HIDWORD(v135) && DWORD2(v135))
  {
    v101 = 0;
    v102 = 8 * DWORD2(v135);
    do
    {
      v103 = *(llvm **)(v135 + v101);
      if (v103 != (llvm *)-8 && v103 != 0)
      {
        v106 = *(_QWORD *)v103;
        v105 = (_QWORD *)*((_QWORD *)v103 + 1);
        if (v105 != (_QWORD *)((char *)v103 + 24))
          free(v105);
        llvm::deallocate_buffer(v103, (void *)(v106 + 57));
      }
      v101 += 8;
    }
    while (v102 != v101);
  }
  free((void *)v135);
  if (v122 && v121)
  {
    v107 = 0;
    v108 = 8 * v121;
    while (2)
    {
      v109 = *(_QWORD **)((char *)v120 + v107);
      if (v109 == (_QWORD *)-8 || v109 == 0)
        goto LABEL_157;
      v111 = *v109;
      v112 = (_QWORD *)v109[4];
      if (v112 == v109 + 1)
      {
        v112 = v109 + 1;
        v113 = 4;
LABEL_155:
        (*(void (**)(void))(*v112 + 8 * v113))();
      }
      else if (v112)
      {
        v113 = 5;
        goto LABEL_155;
      }
      llvm::deallocate_buffer((llvm *)v109, (void *)(v111 + 41));
LABEL_157:
      v107 += 8;
      if (v108 == v107)
        break;
      continue;
    }
  }
  free(v120);
  return v1 & 1;
}

uint64_t AGCLLVMUserObject::replaceCommandBufferPrivateData(AGCLLVMUserObject *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  llvm::Type *v6;
  uint64_t PerEncoderIndirectionTableGlobal;
  llvm::Type **v8;
  uint64_t v9;
  uint64_t *v10;
  llvm::Type *v11;
  uint64_t *PHI;
  char *v13;
  uint64_t v14;
  llvm::CmpInst **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ICmp;
  llvm::BasicBlock *v20;
  llvm::BasicBlock *v21;
  llvm::BasicBlock *v22;
  char *v23;
  llvm::Type **v24;
  uint64_t v25;
  uint64_t *v26;
  llvm::Type *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *Cast;
  char *v35;
  uint64_t FirstInsertionPt;
  llvm::IRBuilderBase *v37;
  llvm::Type *v38;
  char *v39;
  uint64_t v40;
  llvm::Type **GEP;
  llvm::IRBuilderBase *v42;
  llvm::Type *v43;
  llvm::Value *PointerCast;
  llvm::Value *v45;
  llvm::Value *AlignedLoad;
  llvm::Type *v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  _QWORD v54[4];
  __int16 v55;
  uint64_t *v56[4];
  __int16 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  result = llvm::Module::getFunction();
  if (result)
  {
    v3 = result;
    llvm::Function::addFnAttr();
    *(_DWORD *)(v3 + 32) = *(_DWORD *)(v3 + 32) & 0xFFFFBFC0 | 0x4007;
    v54[0] = "entry";
    v55 = 259;
    operator new();
    v4 = llvm::BasicBlock::BasicBlock();
    v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v5 + 11) = v4;
    *((_QWORD *)v5 + 12) = v4 + 40;
    v6 = **(llvm::Type ***)(*(_QWORD *)(v3 + 24) + 16);
    if (AGCLLVMUserObject::mayBeCalledFromIntersectionFunction(this)
      && (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) != 29)
    {
      v47 = v6;
      v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v14 = *((_QWORD *)v13 + 50);
      v51 = *(_OWORD *)(v13 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v13 + 40));
      v53 = *((_DWORD *)v13 + 34);
      v15 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 968))(v14, &v51);
      if (v52)
        llvm::MetadataTracking::untrack();
      v16 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v16 + 50) + 688))(*((_QWORD *)v16 + 50));
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 1824))(v17, 29);
      v18 = llvm::ConstantInt::get();
      v55 = 257;
      ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)v16 + 5, 32, v15, v18, (uint64_t)v54);
      v54[0] = "get_private_data_phi_block";
      v55 = 259;
      v20 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v54[0] = "get_private_data_scs_block";
      v55 = 259;
      v21 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v54[0] = "get_private_data_uniform_block";
      v55 = 259;
      v22 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp, (uint64_t)v21, (uint64_t)v22);
      v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v23 + 11) = v22;
      *((_QWORD *)v23 + 12) = (char *)v22 + 40;
      PerEncoderIndirectionTableGlobal = AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
      v25 = (uint64_t)v24;
      v26 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v55 = 257;
      v27 = AGCLLVMBuilder::tryDeducePointeeType(v24, (llvm::Value *)v24);
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v26 + 5, v27, v25, 0, (uint64_t)v54);
      llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v20);
      v28 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v28 + 11) = v21;
      *((_QWORD *)v28 + 12) = (char *)v21 + 40;
      v29 = *((_QWORD *)this + 475);
      if (!v29)
      {
        v29 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)((char *)this
                                                                      + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                      + 400)
                                                        + 1296))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
        *((_QWORD *)this + 475) = v29;
      }
      v30 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v31 = *((_QWORD *)v30 + 50);
      v48 = *(_OWORD *)(v30 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v30 + 40));
      v50 = *((_DWORD *)v30 + 34);
      v32 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v31 + 984))(v31, &v48, v29);
      v33 = llvm::PointerType::get();
      v55 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v30 + 40), 48, v32, v33, (uint64_t)v54);
      if (v49)
        llvm::MetadataTracking::untrack();
      llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v20);
      v35 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v20);
      llvm::IRBuilderBase::SetInsertPoint((uint64_t)v35, (uint64_t)v20, FirstInsertionPt);
      v37 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v38 = *(llvm::Type **)AlignedLoad;
      v55 = 257;
      PHI = (uint64_t *)llvm::IRBuilderBase::CreatePHI(v37, v38, 2, (const llvm::Twine *)v54);
      llvm::PHINode::addIncoming(PHI, Cast, v21);
      llvm::PHINode::addIncoming(PHI, AlignedLoad, v22);
      v6 = v47;
    }
    else
    {
      PerEncoderIndirectionTableGlobal = AGCLLVMUserObject::createPerEncoderIndirectionTableGlobal(this);
      v9 = (uint64_t)v8;
      v10 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v55 = 257;
      v11 = AGCLLVMBuilder::tryDeducePointeeType(v8, (llvm::Value *)v8);
      PHI = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad(v10 + 5, v11, v9, 0, (uint64_t)v54);
    }
    v39 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v56[0] = (uint64_t *)llvm::ConstantInt::get();
    v40 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 1048))(v40);
    v56[1] = (uint64_t *)llvm::ConstantInt::get();
    v54[0] = "private_data_ptr_i64";
    v55 = 259;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v39 + 40), PerEncoderIndirectionTableGlobal, PHI, v56, 2, (uint64_t)v54);
    v42 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v43 = (llvm::Type *)llvm::PointerType::get();
    v54[0] = "private_data_ptr";
    v55 = 259;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast(v42, GEP, v43, (const llvm::Twine *)v54);
    v57 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v42, v6, (uint64_t)PointerCast, 0, (uint64_t)v56);
    return llvm::IRBuilderBase::CreateRet((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v45);
  }
  return result;
}

uint64_t AGCLLVMUserObject::createDylibBaseGetterFunc(AGCLLVMUserObject *this)
{
  uint64_t result;
  llvm::Type **v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  llvm::Type *v7;
  AGCLLVMUserObject *GlobalBufferBinding;
  llvm::Value *v9;
  AGCLLVMObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _BOOL4 mayBeCalledFromIntersectionFunction;
  int v16;
  llvm::Value *v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *Cast;
  char *v25;
  char *v26;
  uint64_t v27;
  llvm::CmpInst **v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ICmp;
  llvm::BasicBlock *v33;
  llvm::BasicBlock *v34;
  llvm::BasicBlock *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Value *v41;
  char *v42;
  uint64_t *v43;
  llvm::Value *v44;
  llvm::Type *v45;
  llvm::Value *AlignedLoad;
  char *v47;
  uint64_t FirstInsertionPt;
  llvm::IRBuilderBase *v49;
  char *v50;
  llvm::Type *v51;
  uint64_t *v52;
  llvm::Type *v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  _QWORD v57[4];
  __int16 v58;

  result = *((_QWORD *)this + 355);
  if (!result)
  {
    v3 = (llvm::Type **)*((_QWORD *)this + 306);
    if (!v3)
    {
      v4 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v5 = 35;
      if (v4 == 29)
        v5 = 90;
      if (v4 == 7)
        v5 = 70;
      v6 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400)
                                              + 824)
                                + 8 * v5))();
      v7 = (llvm::Type *)llvm::PointerType::get();
      v57[0] = "agc.dylib_base";
      v58 = 259;
      GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v7, (const llvm::Twine *)v57, v6, 0, 5, 0);
      AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v9);
      v10 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      (*(void (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v10 + 50) + 832) + 16))(*(_QWORD *)(*((_QWORD *)v10 + 50) + 832));
      AGCLLVMObject::addDylibBinding(v10, GlobalBufferBinding);
      llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2432), (uint64_t)GlobalBufferBinding);
      v3 = (llvm::Type **)*((_QWORD *)this + 306);
    }
    v11 = **((_QWORD **)*v3 + 2);
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    *((_QWORD *)this + 355) = v12;
    *(_DWORD *)(v12 + 32) = *(_DWORD *)(v12 + 32) & 0xFFFFBFC0 | 0x4008;
    v57[0] = "entry";
    v58 = 259;
    operator new();
    v13 = llvm::BasicBlock::BasicBlock();
    v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v14 + 11) = v13;
    *((_QWORD *)v14 + 12) = v13 + 40;
    llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40, 0);
    mayBeCalledFromIntersectionFunction = AGCLLVMUserObject::mayBeCalledFromIntersectionFunction(this);
    v16 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v18 = *(_QWORD *)this;
    if (v16 == 29)
    {
      if ((*(unsigned int (**)(AGCLLVMUserObject *))(v18 + 104))(this))
      {
        v20 = *((_QWORD *)this + 475);
        if (!v20)
        {
          v20 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                        + 400)
                                                          + 1296))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
          *((_QWORD *)this + 475) = v20;
        }
        v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v22 = *((_QWORD *)v21 + 50);
        v54 = *(_OWORD *)(v21 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v21 + 40));
        v56 = *((_DWORD *)v21 + 34);
        v23 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v22 + 992))(v22, &v54, v20);
        v58 = 257;
        Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v21 + 40), 48, v23, v11, (uint64_t)v57);
        if (v55)
          llvm::MetadataTracking::untrack();
        goto LABEL_23;
      }
      v50 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v58 = 257;
      v51 = AGCLLVMBuilder::tryDeducePointeeType(v3, v19);
      v52 = (uint64_t *)(v50 + 40);
    }
    else
    {
      v25 = (char *)this + *(_QWORD *)(v18 - 24) + 32;
      if (mayBeCalledFromIntersectionFunction)
      {
        v53 = (llvm::Type *)v11;
        llvm::FunctionType::get();
        llvm::Module::getOrInsertFunction();
        v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v58 = 257;
        v28 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall((uint64_t)(v26 + 40), **(_QWORD **)(*(_QWORD *)v27 + 16), v27, 0, 0, (uint64_t)v57);
        v29 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v29 + 50) + 688))(*((_QWORD *)v29 + 50));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 1824))(v30, 29);
        v31 = llvm::ConstantInt::get();
        v58 = 257;
        ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)v29 + 5, 32, v28, v31, (uint64_t)v57);
        v57[0] = "if_intersection_block";
        v58 = 259;
        v33 = (llvm::BasicBlock *)operator new();
        llvm::BasicBlock::BasicBlock();
        v57[0] = "else_not_intersection_block";
        v58 = 259;
        v34 = (llvm::BasicBlock *)operator new();
        llvm::BasicBlock::BasicBlock();
        v57[0] = "dylib_base_phi_block";
        v58 = 259;
        v35 = (llvm::BasicBlock *)operator new();
        llvm::BasicBlock::BasicBlock();
        llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp, (uint64_t)v33, (uint64_t)v34);
        v36 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        *((_QWORD *)v36 + 11) = v33;
        *((_QWORD *)v36 + 12) = (char *)v33 + 40;
        v37 = *((_QWORD *)this + 475);
        if (!v37)
        {
          v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                        + 400)
                                                          + 1296))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
          *((_QWORD *)this + 475) = v37;
        }
        v38 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v39 = *((_QWORD *)v38 + 50);
        v54 = *(_OWORD *)(v38 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v38 + 40));
        v56 = *((_DWORD *)v38 + 34);
        v40 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v39 + 992))(v39, &v54, v37);
        v58 = 257;
        v41 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v38 + 40), 48, v40, (uint64_t)v53, (uint64_t)v57);
        if (v55)
          llvm::MetadataTracking::untrack();
        llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v35);
        v42 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        *((_QWORD *)v42 + 11) = v34;
        *((_QWORD *)v42 + 12) = (char *)v34 + 40;
        v43 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
        v58 = 257;
        v45 = AGCLLVMBuilder::tryDeducePointeeType(v3, v44);
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v43 + 5, v45, (uint64_t)v3, 0, (uint64_t)v57);
        llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v35);
        v47 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
        FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v35);
        llvm::IRBuilderBase::SetInsertPoint((uint64_t)v47, (uint64_t)v35, FirstInsertionPt);
        v49 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v58 = 257;
        Cast = llvm::IRBuilderBase::CreatePHI(v49, v53, 2, (const llvm::Twine *)v57);
        llvm::PHINode::addIncoming(Cast, v41, v33);
        llvm::PHINode::addIncoming(Cast, AlignedLoad, v34);
        goto LABEL_23;
      }
      v58 = 257;
      v51 = AGCLLVMBuilder::tryDeducePointeeType(v3, v17);
      v52 = (uint64_t *)(v25 + 8);
    }
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v52, v51, (uint64_t)v3, 0, (uint64_t)v57);
LABEL_23:
    llvm::IRBuilderBase::CreateRet((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), Cast);
    return *((_QWORD *)this + 355);
  }
  return result;
}

uint64_t AGCLLVMUserObject::buildImageTextureBufferLength(AGCLLVMUserObject *this, llvm::Value *a2)
{
  uint64_t v4;
  uint64_t *v5;
  llvm::Type *v6;
  uint64_t v7;
  llvm::Value *AlignedLoad;
  char *v9;
  llvm::IRBuilderBase *v10;
  llvm::Value *v11;
  llvm::Type **v13;
  llvm::Value *v14;
  llvm::Value *UDiv;
  uint64_t v16;
  uint64_t v17;
  llvm::IRBuilderBase *v18;
  llvm::Value *v19;
  uint64_t *v20;
  llvm::Type *v21;
  llvm::Type *v22;
  llvm::Value *v23;
  llvm::Type **GEP;
  uint64_t *v25;
  llvm::Value *v26;
  llvm::Type *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  llvm::Type *v31;
  llvm::Value *GlobalBufferBinding;
  _WORD v33[20];
  _QWORD v34[4];
  __int16 v35;

  v4 = *(_QWORD *)(*(_QWORD *)this - 24);
  if (*(_BYTE *)(*(_QWORD *)((char *)this + v4 + 400) + 1755))
  {
    v5 = (uint64_t *)((char *)this + v4 + 32);
    v6 = (llvm::Type *)*((_QWORD *)this + 169);
    v7 = AGCLLVMUserObject::buildImageArgumentPointer(this, a2, 2u);
    v35 = 257;
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v5 + 1, v6, v7, 0, (uint64_t)v34);
    v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v35 = 257;
    v10 = (llvm::IRBuilderBase *)(v9 + 40);
    v11 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateExtractElement(v10, AlignedLoad, v11, (const llvm::Twine *)v34);
  }
  if (!*((_QWORD *)this + 303))
  {
    v28 = (*(uint64_t (**)(void))(*(_QWORD *)((char *)this + v4) + 64))();
    if (v28 > 0x1D)
      goto LABEL_16;
    if (((1 << v28) & 0x400198) != 0)
    {
      v29 = 56;
      goto LABEL_11;
    }
    if (v28 == 29)
      v29 = 91;
    else
LABEL_16:
      v29 = 26;
LABEL_11:
    v30 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400)
                                             + 824)
                               + 8 * v29))();
    v31 = (llvm::Type *)llvm::PointerType::get();
    v34[0] = "agc.texture_heap.texture_buffer_length";
    v35 = 259;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v31, (const llvm::Twine *)v34, v30, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2408), (uint64_t)GlobalBufferBinding);
    if (a2)
      goto LABEL_5;
    return 0;
  }
  if (!a2)
    return 0;
LABEL_5:
  v13 = (llvm::Type **)*((_QWORD *)this + 303);
  UDiv = (llvm::Value *)AGCLLVMUserObject::buildImageHeapIndex(this, a2);
  v16 = *(_QWORD *)(*(_QWORD *)this - 24);
  v17 = v16 + 32;
  if (!*(_DWORD *)(*(_QWORD *)((char *)this + v16 + 400) + 1780))
  {
    v18 = (AGCLLVMUserObject *)((char *)this + v16 + 40);
    v19 = (llvm::Value *)llvm::ConstantInt::get();
    v35 = 257;
    UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v18, UDiv, v19, (const llvm::Twine *)v34);
    v17 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
  }
  v20 = (uint64_t *)((char *)this + v17);
  v21 = *(llvm::Type **)((char *)this + v17 + 200);
  v35 = 257;
  v22 = AGCLLVMBuilder::tryDeducePointeeType(v13, v14);
  v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(++v20, v22, (uint64_t)v13, 0, (uint64_t)v34);
  v33[16] = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)v20, v21, v23, UDiv, (const llvm::Twine *)v33);
  v25 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v35 = 257;
  v27 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v26);
  return llvm::IRBuilderBase::CreateAlignedLoad(v25 + 5, v27, (uint64_t)GEP, 0, (uint64_t)v34);
}

_QWORD *AGCLLVMUserObject::createSCSUserDataBoundGlobal(_QWORD *this)
{
  AGCLLVMUserObject *v1;
  llvm::ValueHandleBase *v2;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  llvm::Type *v12;
  AGCLLVMUserObject *GlobalBufferBinding;
  llvm::Value *v14;
  _QWORD v15[4];
  __int16 v16;

  if (!this[321])
  {
    v1 = (AGCLLVMUserObject *)this;
    v2 = (llvm::ValueHandleBase *)(this + 319);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)((char *)this + *(_QWORD *)(*this - 24)) + 64))((uint64_t)this + *(_QWORD *)(*this - 24));
    if ((v3 - 7) < 2 || v3 == 22)
    {
      v5 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 880))(v5);
      v7 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824)
                               + 640);
    }
    else
    {
      if (v3 == 29)
      {
        v8 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 840))(v8) & 0xFFFFF | 0x900000;
LABEL_12:
        v12 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 232), (llvm::Type *)2);
        v15[0] = "agc.ria.ray_data_user_bound";
        v16 = 259;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(v1, v12, (const llvm::Twine *)v15, v9, 0, 0, 0);
        AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v14);
        return (_QWORD *)llvm::ValueHandleBase::operator=(v2, (uint64_t)GlobalBufferBinding);
      }
      v10 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 880))(v10);
      v7 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824)
                               + 312);
    }
    v11 = v7();
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)v15, v6, v11);
    v9 = v15[0];
    goto LABEL_12;
  }
  return this;
}

_QWORD *AGCLLVMUserObject::createSCSDriverDataStartGlobal(_QWORD *this)
{
  AGCLLVMUserObject *v1;
  llvm::ValueHandleBase *v2;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  llvm::Type *v12;
  AGCLLVMUserObject *GlobalBufferBinding;
  llvm::Value *v14;
  _QWORD v15[4];
  __int16 v16;

  if (!this[324])
  {
    v1 = (AGCLLVMUserObject *)this;
    v2 = (llvm::ValueHandleBase *)(this + 322);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)((char *)this + *(_QWORD *)(*this - 24)) + 64))((uint64_t)this + *(_QWORD *)(*this - 24));
    if ((v3 - 7) < 2 || v3 == 22)
    {
      v5 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 896))(v5);
      v7 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824)
                               + 640);
    }
    else
    {
      if (v3 == 29)
      {
        v8 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 848))(v8) & 0xFFFFF | 0x900000;
LABEL_12:
        v12 = (llvm::Type *)llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 232), (llvm::Type *)2);
        v15[0] = "agc.ria.ray_data_driver_start";
        v16 = 259;
        GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(v1, v12, (const llvm::Twine *)v15, v9, 0, 0, 0);
        AGCLLVMUserObject::setDylibLinkage(GlobalBufferBinding, v14);
        return (_QWORD *)llvm::ValueHandleBase::operator=(v2, (uint64_t)GlobalBufferBinding);
      }
      v10 = *(_QWORD *)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 896))(v10);
      v7 = *(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 400) + 824)
                               + 312);
    }
    v11 = v7();
    _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)v15, v6, v11);
    v9 = v15[0];
    goto LABEL_12;
  }
  return this;
}

uint64_t AGCLLVMUserObject::createGlobalBindingTableGlobal(AGCLLVMUserObject *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  llvm::Type *v5;
  llvm::Value *GlobalBufferBinding;
  int v7;
  const char *v8;
  __int16 v9;

  result = *((_QWORD *)this + 345);
  if (!result)
  {
    if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 7
      || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 22
      || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 8
      || (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 3)
    {
      v3 = 82;
    }
    else
    {
      v7 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v3 = 38;
      if (v7 == 4)
        v3 = 82;
    }
    v4 = (*(uint64_t (**)(void))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400)
                                            + 824)
                              + 8 * v3))();
    v5 = (llvm::Type *)llvm::PointerType::get();
    v8 = "agc.global_binding_base";
    v9 = 259;
    GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v5, (const llvm::Twine *)&v8, v4, 0, 5, 0);
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2744), (uint64_t)GlobalBufferBinding);
    return *((_QWORD *)this + 345);
  }
  return result;
}

AGCLLVMUserObject *AGCLLVMUserObject::setDylibLinkage(AGCLLVMUserObject *this, llvm::Value *a2)
{
  llvm::Type *v3;

  llvm::GlobalValue::setLinkage((uint64_t)this, 10);
  *((_BYTE *)this + 80) &= ~1u;
  llvm::Constant::getNullValue(*((llvm::Constant **)this + 3), v3);
  llvm::GlobalVariable::setInitializer();
  return this;
}

uint64_t AGCLLVMUserObject::buildImageHeapIndex(AGCLLVMUserObject *this, llvm::Value *a2)
{
  llvm::Type *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  const void **imp;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  llvm::IRBuilderBase *v12;
  uint64_t v13;
  llvm::Value *Cast;
  llvm::Value *v15;
  uint64_t LShr;
  uint64_t v17;
  _BYTE v18[32];
  __int16 v19;
  _BYTE v20[32];
  __int16 v21;
  _BYTE v22[32];
  __int16 v23;

  v4 = (llvm::Type *)*((_QWORD *)this + 217);
  if (*((_BYTE *)this + 3566))
    goto LABEL_2;
  result = AGCLLVMUserObject::buildBindlessIndex(this, a2);
  if (!result)
  {
    if (*((_BYTE *)this + 3566))
      goto LABEL_2;
    imp = llvm::SmallPtrSetImplBase::find_imp((AGCLLVMUserObject *)((char *)this + 1096), a2);
    v9 = *((_QWORD *)this + 138);
    v10 = 1112;
    if (v9 == *((_QWORD *)this + 137))
      v10 = 1116;
    if (imp == (const void **)(v9 + 8 * *(unsigned int *)((char *)this + v10)))
      goto LABEL_2;
    v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v12 = (llvm::IRBuilderBase *)(v11 + 40);
    v13 = *((_QWORD *)v11 + 30);
    v23 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v11 + 40), 47, (uint64_t)a2, v13, (uint64_t)v22);
    v15 = (llvm::Value *)llvm::ConstantInt::get();
    v21 = 257;
    LShr = llvm::IRBuilderBase::CreateLShr(v12, Cast, v15, (const llvm::Twine *)v20);
    v17 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
    v19 = 257;
    result = llvm::IRBuilderBase::CreateCast((uint64_t)v12, 38, LShr, v17, (uint64_t)v18);
    if (!result)
    {
LABEL_2:
      v5 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v6 = AGCLLVMUserObject::buildImageArgumentPointer((int)this, a2);
      v23 = 257;
      return llvm::IRBuilderBase::CreateAlignedLoad(v5 + 5, v4, v6, 0, (uint64_t)v22);
    }
  }
  return result;
}

uint64_t AGCLLVMUserObject::buildRecordRaytraceForGin1122(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  llvm::BasicBlock *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Instruction *v10;
  uint64_t v11;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::CmpInst **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ICmp;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  const char *v31;
  __int16 v32;
  __int128 v33;
  uint64_t v34;
  int v35;

  v4 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32;
  v33 = *a2;
  v34 = *((_QWORD *)a2 + 2);
  if (v34)
    llvm::MetadataTracking::track();
  v35 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v33, v4 + 8);
  if (v34)
    llvm::MetadataTracking::untrack();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 64))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24))
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 64))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)),
        (_DWORD)result == 8))
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1);
    if ((result & 1) == 0)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 64))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) == 8)
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 88);
        v7 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
        v31 = "record_ray_trace";
        v32 = 259;
        v8 = operator new();
        llvm::BasicBlock::BasicBlock();
        v9 = *(_QWORD *)(v6 + 40);
        if (v9 == v6 + 40)
        {
          v12 = 0;
        }
        else
        {
          v10 = (llvm::Instruction *)(v9 - 24);
          if (v9)
            v11 = v9 - 24;
          else
            v11 = 0;
          if (*(unsigned __int8 *)(v11 + 16) - 29 >= 0xB)
            v12 = 0;
          else
            v12 = v10;
        }
        llvm::Instruction::eraseFromParent(v12);
        v13 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        *(_QWORD *)(v13 + 88) = v6;
        *(_QWORD *)(v13 + 96) = v6 + 40;
        v14 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v15 = *(_QWORD *)(v14 + 400);
        v28 = *(_OWORD *)(v14 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v14 + 40));
        v30 = *(_DWORD *)(v14 + 136);
        v16 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 968))(v15, &v28);
        if (v29)
          llvm::MetadataTracking::untrack();
        v17 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 400) + 688))(*(_QWORD *)(v17 + 400));
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 1824))(v18, 0);
        v19 = llvm::ConstantInt::get();
        v32 = 257;
        ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(v17 + 40), 32, v16, v19, (uint64_t)&v31);
        llvm::IRBuilderBase::CreateCondBr((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), ICmp, v8, (uint64_t)v7);
        v21 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        *(_QWORD *)(v21 + 88) = v8;
        *(_QWORD *)(v21 + 96) = v8 + 40;
      }
      else
      {
        v7 = 0;
      }
      v22 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v23 = *(_QWORD *)(v22 + 400);
      v25 = *(_OWORD *)(v22 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v22 + 40));
      v27 = *(_DWORD *)(v22 + 136);
      (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v23 + 1336))(v23, &v25, a1 + 3784);
      if (v26)
        llvm::MetadataTracking::untrack();
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)) + 64))(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      if ((_DWORD)result == 8)
      {
        result = llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v7);
        v24 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        *(_QWORD *)(v24 + 88) = v7;
        *(_QWORD *)(v24 + 96) = (char *)v7 + 40;
      }
    }
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0,std::allocator<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0>,BOOL ()(llvm::Value const*)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0,std::allocator<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0>,BOOL ()(llvm::Value const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB9B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0,std::allocator<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0>,BOOL ()(llvm::Value const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9B30;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0,std::allocator<AGCLLVMUserObject::replaceRaytracingFunctions(void)::$_0>,BOOL ()(llvm::Value const*)>::operator()(uint64_t a1, const void **a2)
{
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *Name;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v3 = *a2;
  llvm::SmallPtrSetImplBase::insert_imp(*(llvm::SmallPtrSetImplBase **)(a1 + 8), *a2);
  if (!v4)
    return 1;
  v5 = v3[1];
  v6 = 1;
  if (!v5)
    return v6;
  while (1)
  {
    v7 = *(_QWORD *)(v5 + 24);
    v8 = *(unsigned __int8 *)(v7 + 16);
    if (!v7 || v8 != 92)
      break;
    if (**(_BYTE **)(a1 + 16))
    {
      if (!**(_DWORD **)(v7 + 64))
      {
        v9 = *(_QWORD *)(a1 + 24);
        v30 = *(_QWORD *)(v5 + 24);
        v10 = *(_QWORD *)(v9 + 24);
        if (!v10)
          goto LABEL_51;
        if (((*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 48))(v10, &v30) & 1) == 0)
          return 0;
      }
    }
    else if (*(_DWORD *)(v7 + 72) != 1 || **(_DWORD **)(v7 + 64))
    {
      return 0;
    }
LABEL_47:
    v5 = *(_QWORD *)(v5 + 8);
    if (!v5)
      return 1;
  }
  if (v7 && v8 == 84)
  {
    v11 = *(_QWORD *)(v7 - 32);
    if (!v11 || *(_BYTE *)(v11 + 16) || *(_QWORD *)(v11 + 24) != *(_QWORD *)(v7 + 72))
      return 0;
    Name = (_QWORD *)llvm::Value::getName((llvm::Value *)v11);
    if (v13 < 0x20
      || (*Name == 0x5F7465672E726961 ? (v14 = Name[1] == 0x746E695F65707974) : (v14 = 0),
          v14 ? (v15 = Name[2] == 0x6F69746365737265) : (v15 = 0),
          v15 ? (v16 = Name[3] == 0x746C757365725F6ELL) : (v16 = 0),
          !v16))
    {
      v17 = (_QWORD *)llvm::Value::getName((llvm::Value *)v11);
      if (v18 < 0x1F)
        return 0;
      v19 = *v17 == 0x656C65722E726961 && v17[1] == 0x65746E695F657361;
      v20 = v19 && v17[2] == 0x6E6F697463657372;
      if (!v20 || *(_QWORD *)((char *)v17 + 23) != 0x746C757365725F6ELL)
        return 0;
    }
    goto LABEL_47;
  }
  v22 = (((v8 - 75) >> 1) | (((_BYTE)v8 - 75) << 7));
  v23 = v22 > 5;
  v24 = (1 << v22) & 0x33;
  if (v23 || v24 == 0)
    return 0;
  v26 = *(_QWORD *)(a1 + 24);
  v30 = *(_QWORD *)(v5 + 24);
  v27 = *(_QWORD *)(v26 + 24);
  if (v27)
  {
    if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v27 + 48))(v27, &v30))
      return 0;
    goto LABEL_47;
  }
LABEL_51:
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::~StringMap(v29);
}

uint64_t llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 25));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(__int128 *a1, __int128 *a2, std::string *this)
{
  __int128 *v5;
  __int128 v6;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v6 = *v5;
        this->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      v5 = (__int128 *)((char *)v5 + 24);
      ++this;
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t *llvm::StringMap<AGCLLVMUserObject::RaytracingFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1ED839108) = qword_1ED839108 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 25, 8);
  v9 = v8;
  v10 = v8 + 24;
  if (a2)
    memcpy((void *)(v8 + 24), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *(_QWORD *)v9 = a2;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  *i = v9;
  ++dword_1ED839104;
  for (i = (uint64_t *)(AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserObject::getRaytracingFunctionMap(void)::raytracing_function_map));
        !*i || *i == -8;
  return i;
}

__n128 AGCLLVMUserObject::initializeRaytracingFunctionMap(void)::$_0::operator()(uint64_t a1, _DWORD **a2, std::string *this)
{
  int v6;
  const std::string::value_type *v7;
  __n128 result;

  if (**a2)
    std::string::append(this, ".intersection_function_buffer");
  v6 = *a2[1];
  if (v6 == 1)
  {
    v7 = ".instancing";
  }
  else
  {
    if (v6 != 2)
      goto LABEL_8;
    v7 = ".multi_level_instancing";
  }
  std::string::append(this, v7);
LABEL_8:
  if (*a2[2])
    std::string::append(this, ".triangle_data");
  if (*a2[3])
    std::string::append(this, ".curve_data");
  if (*a2[4])
    std::string::append(this, ".world_space_data");
  if (*a2[5])
    std::string::append(this, ".primitive_motion");
  if (*a2[6])
    std::string::append(this, ".instance_motion");
  if (*a2[7])
    std::string::append(this, ".extended_limits");
  result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a1 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB7EA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB7EA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,BOOL>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD *, _QWORD, _QWORD);
  uint64_t v4;
  _QWORD *v5;

  v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(a2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v5 + v3);
  return v3(v5, *a3, *(unsigned __int8 *)(a1 + 24));
}

void std::__function::__func<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),std::allocator<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *)>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),std::allocator<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *)>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB7E60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),std::allocator<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *)>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB7E60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *),std::allocator<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *)>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD *, _QWORD);
  uint64_t v4;
  _QWORD *v5;

  v3 = *(uint64_t (**)(_QWORD *, _QWORD))(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(a2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v3);
  return v3(v5, *a3);
}

void std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E7EB7E18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB7E18;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>,std::allocator<std::__bind<BOOL (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL,BOOL,BOOL,BOOL),std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op,AGCLLVMUserObject::replaceSimdgroupMatrices(void)::op>>,BOOL ()(AGCLLVMTargetLowerer&,llvm::CallInst *)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD *, _QWORD, BOOL, BOOL, BOOL, BOOL);
  uint64_t v4;
  _QWORD *v5;

  v3 = *(uint64_t (**)(_QWORD *, _QWORD, BOOL, BOOL, BOOL, BOOL))(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(a2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD, BOOL, BOOL, BOOL, BOOL))(*v5 + v3);
  return v3(v5, *a3, *(_DWORD *)(a1 + 24) != 0, *(_DWORD *)(a1 + 28) != 0, *(_DWORD *)(a1 + 32) != 0, *(_DWORD *)(a1 + 36) != 0);
}

void std::__function::__func<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::allocator<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL)>,void ()(AGCLLVMTargetLowerer&,llvm::CallInst *,BOOL)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::allocator<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL)>,void ()(AGCLLVMTargetLowerer&,llvm::CallInst *,BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB7EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::allocator<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL)>,void ()(AGCLLVMTargetLowerer&,llvm::CallInst *,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB7EF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL),std::allocator<void (AGCLLVMTargetLowerer::*)(llvm::CallInst *,BOOL)>,void ()(AGCLLVMTargetLowerer&,llvm::CallInst *,BOOL)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t (*v4)(_QWORD *, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (_QWORD *)(a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, *a3, *a4);
}

uint64_t areTypesIsomorphic(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t result;
  int v6;
  llvm::Type **v7;
  llvm::Type **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  llvm::Type **v13;
  llvm::Type **v14;
  uint64_t v15;
  llvm::Type *v16;
  llvm::Type *v17;
  llvm::Type *v18;
  BOOL v20;

  if (a1 == a2)
    return 1;
  while (1)
  {
    v2 = *(_DWORD *)(a1 + 8);
    v3 = *(_DWORD *)(a2 + 8);
    if (v3 != v2)
      return 0;
    v4 = *(_DWORD *)(a1 + 8);
    if (v4 != 17)
      break;
    if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
    a1 = **(_QWORD **)(a1 + 16);
    a2 = **(_QWORD **)(a2 + 16);
    if (a1 == a2)
      return 1;
  }
  switch(v4)
  {
    case 14:
      if (v2 > 0xFF != v3 > 0xFF)
        return 0;
      v6 = *(_DWORD *)(a1 + 12);
      if (v6 != *(_DWORD *)(a2 + 12))
        return 0;
      v7 = *(llvm::Type ***)(a1 + 16);
      v8 = *(llvm::Type ***)(a2 + 16);
      result = areTypesIsomorphic(*v7, *v8);
      if ((_DWORD)result)
      {
        v9 = 0;
        v10 = (v6 - 1);
        do
        {
          result = v10 == v9;
          if (v10 == v9)
            break;
          ++v9;
          v11 = areTypesIsomorphic(v7[v9], v8[v9]);
          result = 0;
        }
        while ((v11 & 1) != 0);
      }
      break;
    case 16:
      if (((*(_DWORD *)(a1 + 8) & 0x100) == 0) != ((*(_DWORD *)(a2 + 8) & 0x100) == 0))
        return 0;
      if (((v2 ^ v3) & 0x200) != 0)
        return 0;
      v12 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v12 != *(_DWORD *)(a2 + 12))
        return 0;
      if (!(_DWORD)v12)
        return 1;
      v13 = *(llvm::Type ***)(a1 + 16);
      v14 = *(llvm::Type ***)(a2 + 16);
      v15 = v12 - 1;
      do
      {
        v17 = *v13++;
        v16 = v17;
        v18 = *v14++;
        result = areTypesIsomorphic(v16, v18);
        v20 = v15-- != 0;
      }
      while ((_DWORD)result && v20);
      break;
    case 15:
      if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
        v2 = *(_DWORD *)(**(_QWORD **)(a1 + 16) + 8);
      if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
        v3 = *(_DWORD *)(**(_QWORD **)(a2 + 16) + 8);
      return (v3 ^ v2) < 0x100;
    default:
      return 0;
  }
  return result;
}

uint64_t AGCLLVMUserObject::getOrCreateConstantSamplerGlobal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t GlobalVariable;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  llvm::GlobalVariable *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  void *__p;
  char v30;
  __int128 v31;
  _QWORD v32[2];
  __int128 *v33;
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v31 = a2;
  *((_QWORD *)&v31 + 1) = a3;
  v32[0] = "agc.const_sampler_state_struct_ptr_";
  v33 = &v31;
  v34 = 3587;
  llvm::Twine::str((llvm::Twine *)v32);
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (!GlobalVariable)
  {
    v6 = *(_OWORD **)(a1 + 904);
    v7 = *(_QWORD *)(a1 + 896);
    v8 = ((uint64_t)v6 - v7) >> 4;
    v9 = *(_QWORD *)(a1 + 912);
    if ((unint64_t)v6 >= v9)
    {
      v11 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 60)
        abort();
      v12 = v9 - v7;
      if (v12 >> 3 > v11)
        v11 = v12 >> 3;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v13);
      else
        v14 = 0;
      v15 = (_OWORD *)(v13 + 16 * v8);
      v16 = v13 + 16 * v14;
      *v15 = v31;
      v10 = v15 + 1;
      v17 = *(char **)(a1 + 904);
      v18 = *(char **)(a1 + 896);
      if (v17 != v18)
      {
        do
        {
          *--v15 = *((_OWORD *)v17 - 1);
          v17 -= 16;
        }
        while (v17 != v18);
        v17 = *(char **)(a1 + 896);
      }
      *(_QWORD *)(a1 + 896) = v15;
      *(_QWORD *)(a1 + 904) = v10;
      *(_QWORD *)(a1 + 912) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v6 = v31;
      v10 = v6 + 1;
    }
    *(_QWORD *)(a1 + 904) = v10;
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
    v19 = *(unsigned __int8 *)(a1 + 15);
    v20 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v21 = "agc.const_sampler_state_words_";
    if (v19)
      v21 = "_agx_const_ss.";
    v32[0] = v21;
    v33 = &v31;
    v34 = 3587;
    v22 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v22 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    v23 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    v24 = *(_QWORD *)(v23 + 376);
    v25 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v23 + 32), v20);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
    v32[0] = llvm::PointerType::get();
    llvm::StructType::get();
    v32[0] = v20;
    llvm::ConstantStruct::get();
    GlobalVariable = llvm::User::operator new((llvm::User *)0x58);
    v34 = 260;
    v32[0] = &__p;
    v26 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v26 + 80) |= 1u;
    llvm::GlobalVariable::setInitializer();
    v27 = (uint64_t *)(a1 + 824);
    v32[0] = 4;
    v32[1] = 0;
    v33 = (__int128 *)GlobalVariable;
    v28 = GlobalVariable;
    if (GlobalVariable != -8192)
    {
      v28 = GlobalVariable;
      if (GlobalVariable != -4096)
      {
        v28 = GlobalVariable;
        if (GlobalVariable)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v32);
          v28 = (unint64_t)v33;
        }
      }
    }
    std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>(v27, v28, v32);
    if (v33 != (__int128 *)-8192 && v33 != (__int128 *)-4096 && v33)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v32);
  }
  if (v30 < 0)
    operator delete(__p);
  return GlobalVariable;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    v10[1] = 0;
    v10[2] = -8192;
    v9 = &unk_1E7EB7DA8;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t result;
  _QWORD *v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  _BYTE v14[16];
  uint64_t v15;
  int32x2_t *v16;
  void *v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v14, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v16 = v4;
  v21 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v15, &v21);
  if ((_DWORD)result)
    v6 = v21;
  else
    v6 = (_QWORD *)(*(_QWORD *)v4 + 48 * v4[2].u32[0]);
  v7 = v16;
  if ((_QWORD *)(*(_QWORD *)v16 + 48 * v16[2].u32[0]) == v6)
    goto LABEL_23;
  v8 = v6[5];
  v22[1] = 0;
  v23 = -8192;
  v21 = &unk_1E7EB7DA8;
  v22[0] = 2;
  v24 = 0;
  llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 1), v22);
  v9 = v23;
  v6[4] = v24;
  if (v9 != -8192 && v9 != -4096 && v9)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
  v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
  v10 = (uint64_t)v16;
  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v17, a2);
  v17 = &unk_1E7EB7DA8;
  v20 = v10;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v22, (LODWORD(v18[0]) >> 1) & 3, v18);
  v21 = &unk_1E7EB7DA8;
  v24 = v20;
  v25 = v8;
  v26 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v23, &v26);
  if ((result & 1) == 0)
  {
    v11 = *(_DWORD *)(v10 + 8);
    v12 = *(_DWORD *)(v10 + 16);
    if (4 * v11 + 4 >= 3 * v12)
    {
      v12 *= 2;
    }
    else if (v12 + ~v11 - *(_DWORD *)(v10 + 12) > v12 >> 3)
    {
LABEL_12:
      v13 = v26;
      ++*(_DWORD *)(v10 + 8);
      if (v13[3] != -4096)
        --*(_DWORD *)(v10 + 12);
      result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v13 + 1), v22);
      v13[4] = v24;
      v13[5] = v25;
      goto LABEL_15;
    }
    llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::grow(v10, v12);
    v26 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v23, &v26);
    goto LABEL_12;
  }
LABEL_15:
  if (v23 != -8192 && v23 != -4096 && v23)
    result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v22);
  if (v19 != -8192 && v19 != -4096 && v19)
    result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v18);
LABEL_23:
  if (v15 != -8192 && v15 != -4096)
  {
    if (v15)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v14);
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 48 * v8, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::initEmpty(a1);
  if ((_DWORD)v3)
  {
    v9 = (uint64_t *)((char *)v4 + 24);
    v10 = 48 * v3;
    do
    {
      v11 = *v9;
      if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v15);
        v12 = v15;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v15 + 8), v9 - 2);
        *(_QWORD *)(v12 + 32) = v9[1];
        *(_QWORD *)(v12 + 40) = v9[2];
        ++*(_DWORD *)(a1 + 8);
        v11 = *v9;
      }
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
      v9 += 6;
      v10 -= 48;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(48 * v3));
}

uint64_t AGCLLVMUserObject::buildEmulatedIsF16Format(_BYTE *a1, __int128 *a2, AGCLLVMUserObject *a3)
{
  uint64_t v6;
  AGCLLVMBuilder *v7;
  llvm::Type **v8;
  llvm::Value *Load;
  llvm::IRBuilderBase *v10;
  llvm::Value *v11;
  llvm::CmpInst **v12;
  uint64_t v13;
  _WORD v15[20];
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  v6 = (uint64_t)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
  v18 = *a2;
  v19 = *((_QWORD *)a2 + 2);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v18, v6 + 8);
  if (v19)
    llvm::MetadataTracking::untrack();
  v7 = (AGCLLVMBuilder *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
  v8 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(a1, a3, 4u);
  Load = (llvm::Value *)AGCLLVMBuilder::CreateLoad(v7, v8, "packedFormat");
  v10 = (llvm::IRBuilderBase *)&a1[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  v17 = 257;
  v12 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v10, Load, v11, (const llvm::Twine *)v16);
  v13 = llvm::ConstantInt::get();
  v15[16] = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)v10, 33, v12, v13, (uint64_t)v15);
}

uint64_t *std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>(uint64_t *result, unint64_t a2, _QWORD *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[6];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x38uLL);
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)(v9 + 4), 2u, a3);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v9 = *v6;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v9);
    ++v4[2];
  }
  return result;
}

uint64_t AGCLLVMUserObject::buildEmulatePCF(AGCLLVMUserObject *a1, uint64_t a2, _WORD *a3)
{
  AGCLLVMUserObject *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t Select;
  llvm::Value *v10;
  char *v11;
  uint64_t v12;
  AGCLLVMBuilder *v13;
  llvm::Value *v14;
  AGCLLVMBuilder *v15;
  llvm::Value *v16;
  uint64_t v17;
  int v19;
  uint64_t result;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  llvm::Value *v24;
  char *v25;
  llvm::Value *XComponent;
  char *v27;
  uint64_t v28;
  char *v29;
  AGCLLVMBuilder *v30;
  llvm::Value *Value;
  char *v32;
  llvm::IRBuilderBase *v33;
  AGCLLVMBuilder *v34;
  llvm::Value *v35;
  llvm::Value *v36;
  llvm::Type *v37;
  AGCLLVMUserObject *v38;
  int v39;
  uint64_t FPExt;
  char *v41;
  AGCLLVMBuilder *v42;
  llvm::Value *v43;
  char *v44;
  llvm::IRBuilderBase *v45;
  AGCLLVMBuilder *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Type *v49;
  unsigned int v50;
  llvm::Value *v51;
  char *v52;
  llvm::Value *v53;
  llvm::IRBuilderBase *v54;
  llvm::Value *v55;
  char *v56;
  llvm::Value *v57;
  llvm::IRBuilderBase *v58;
  llvm::Value *v59;
  uint64_t Element;
  uint64_t v61;
  char *v62;
  llvm::Type *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  __int16 v70;
  int v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  _BYTE v78[32];
  __int16 v79;
  uint64_t FPTrunc;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  uint64_t v85;

  v5 = a1;
  v85 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a2 == 5)
  {
    v6 = *(unsigned int *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    v7 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v8 = *((_QWORD *)v7 + 50);
    v67 = *(_OWORD *)(v7 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v7 + 40));
    v69 = *((_DWORD *)v7 + 34);
    Select = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v8 + 272))(v8, &v67, a2);
    if (v68)
      llvm::MetadataTracking::untrack();
    if ((*a3 & 0xF) != 0)
    {
      v10 = *(llvm::Value **)(a2 + 200);
      if ((*a3 & 0x10) != 0)
      {
        v11 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
        v12 = *((_QWORD *)v11 + 50);
        v82 = *(_OWORD *)(v11 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v11 + 40));
        v84 = *((_DWORD *)v11 + 34);
        v10 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, _QWORD))(*(_QWORD *)v12 + 40))(v12, &v82, v10, 0);
        if (v83)
          llvm::MetadataTracking::untrack();
      }
      AGCLLVMBuilder::splat((AGCLLVMUserObject *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 32), 4, v10);
      v13 = (AGCLLVMUserObject *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 32);
      v14 = (llvm::Value *)llvm::ConstantFP::get();
      AGCLLVMBuilder::splat(v13, 4, v14);
      v15 = (AGCLLVMUserObject *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 32);
      v16 = (llvm::Value *)llvm::ConstantFP::get();
      AGCLLVMBuilder::splat(v15, 4, v16);
      v79 = 257;
      llvm::IRBuilderBase::CreateFCmpHelper();
      v79 = 257;
      Select = llvm::IRBuilderBase::CreateSelect();
    }
    *(_DWORD *)(a2 + 8) = v6;
    return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 32))((uint64_t)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 32, Select, v6);
  }
  else
  {
    v17 = *(unsigned int *)(a2 + 8);
    if ((*a3 & 0xF) == 0 || (*a3 & 0x1C0) == 0)
    {
      *(_DWORD *)(a2 + 208) = 1;
      if ((*a3 & 0xF) != 0)
        *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      if ((*a3 & 0x40) != 0)
        v19 = 3;
      else
        v19 = 2;
      *(_DWORD *)(a2 + 208) = v19;
    }
    v21 = *(_QWORD *)(a2 + 200);
    v22 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v23 = *((_QWORD *)v22 + 50);
    v75 = *(_OWORD *)(v22 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v22 + 40));
    v77 = *((_DWORD *)v22 + 34);
    v24 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v23 + 272))(v23, &v75, a2);
    if (v76)
      llvm::MetadataTracking::untrack();
    switch(*a3 & 0xF)
    {
      case 0:
        v25 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
        XComponent = AGCLLVMUserObject::buildExtractXComponent(v5, v24);
        result = (**((uint64_t (***)(uint64_t, llvm::Value *, _QWORD))v25 + 4))((uint64_t)(v25 + 32), XComponent, *(unsigned int *)(a2 + 8));
        break;
      default:
        v65 = a2;
        if ((*a3 & 0x10) != 0)
        {
          v27 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
          v28 = *((_QWORD *)v27 + 50);
          v72 = *(_OWORD *)(v27 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v27 + 40));
          v74 = *((_DWORD *)v27 + 34);
          (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v28 + 40))(v28, &v72, v21, 0);
          if (v73)
            llvm::MetadataTracking::untrack();
        }
        if ((*a3 & 0x1C0) != 0)
        {
          *((_QWORD *)&v82 + 1) = 0;
          v81 = 0;
          v64 = llvm::ConstantFP::get();
          v29 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
          v30 = (AGCLLVMBuilder *)(v29 + 32);
          LODWORD(v67) = 0;
          v79 = 257;
          Value = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v29 + 40), (uint64_t)v24, (uint64_t)&v67, 1, (uint64_t)v78);
          *(_QWORD *)&v82 = AGCLLVMBuilder::bitCastElements(v30, Value, *(llvm::Type **)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 200));
          v32 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
          v33 = (llvm::IRBuilderBase *)(v32 + 40);
          v34 = (AGCLLVMBuilder *)(v32 + 32);
          v71 = 1;
          v79 = 257;
          v35 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v32 + 40), (uint64_t)v24, (uint64_t)&v71, 1, (uint64_t)v78);
          v36 = (llvm::Value *)AGCLLVMBuilder::bitCastElements(v34, v35, *(llvm::Type **)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 200));
          v37 = *(llvm::Type **)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 312);
          v70 = 257;
          FPTrunc = llvm::IRBuilderBase::CreateFPTrunc(v33, v36, v37, (const llvm::Twine *)&v67);
          if ((*a3 & 0x40) != 0)
          {
            v41 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
            v42 = (AGCLLVMBuilder *)(v41 + 32);
            LODWORD(v67) = 2;
            v79 = 257;
            v43 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v41 + 40), (uint64_t)v24, (uint64_t)&v67, 1, (uint64_t)v78);
            *((_QWORD *)&v82 + 1) = AGCLLVMBuilder::bitCastElements(v42, v43, *(llvm::Type **)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 200));
            v44 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
            v45 = (llvm::IRBuilderBase *)(v44 + 40);
            v46 = (AGCLLVMBuilder *)(v44 + 32);
            v71 = 3;
            v79 = 257;
            v47 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractValue((uint64_t)(v44 + 40), (uint64_t)v24, (uint64_t)&v71, 1, (uint64_t)v78);
            v48 = (llvm::Value *)AGCLLVMBuilder::bitCastElements(v46, v47, *(llvm::Type **)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 200));
            v38 = v5;
            v49 = *(llvm::Type **)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 312);
            v70 = 257;
            v81 = llvm::IRBuilderBase::CreateFPTrunc(v45, v48, v49, (const llvm::Twine *)&v67);
            v39 = 8;
          }
          else
          {
            v38 = v5;
            v39 = 4;
          }
          v50 = 0;
          v5 = v38;
          v51 = (llvm::Value *)v64;
          v66 = v39;
          do
          {
            v52 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
            v53 = (llvm::Value *)*((_QWORD *)&v82 + (v50 >> 2));
            v79 = 257;
            v54 = (llvm::IRBuilderBase *)(v52 + 40);
            v55 = (llvm::Value *)llvm::ConstantInt::get();
            llvm::IRBuilderBase::CreateExtractElement(v54, v53, v55, (const llvm::Twine *)v78);
            v56 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
            v57 = (llvm::Value *)*(&FPTrunc + (v50 >> 2));
            v79 = 257;
            v58 = (llvm::IRBuilderBase *)(v56 + 40);
            v59 = (llvm::Value *)llvm::ConstantInt::get();
            Element = llvm::IRBuilderBase::CreateExtractElement(v58, v57, v59, (const llvm::Twine *)v78);
            v79 = 257;
            llvm::IRBuilderBase::CreateFCmpHelper();
            v61 = (uint64_t)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 40;
            v79 = 257;
            llvm::IRBuilderBase::CreateFAdd(v61, (uint64_t)v51, Element, (uint64_t)v78);
            v79 = 257;
            v51 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
            ++v50;
          }
          while (v66 != v50);
          v62 = (char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
          v63 = (llvm::Type *)*((_QWORD *)v62 + 25);
          v79 = 257;
          FPExt = llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(v62 + 40), v51, v63, (const llvm::Twine *)v78);
          v17 = v17;
        }
        else
        {
          AGCLLVMUserObject::buildExtractXComponent(v5, v24);
          v79 = 257;
          llvm::IRBuilderBase::CreateFCmpHelper();
          llvm::ConstantFP::get();
          llvm::ConstantFP::get();
          v79 = 257;
          FPExt = llvm::IRBuilderBase::CreateSelect();
        }
        *(_DWORD *)(v65 + 8) = v17;
        result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))((char *)v5
                                                                        + *(_QWORD *)(*(_QWORD *)v5 - 24)
                                                                        + 32))((uint64_t)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 32, FPExt, v17);
        break;
    }
  }
  return result;
}

uint64_t AGCLLVMBuilder::CreateLoad(AGCLLVMBuilder *this, llvm::Type **a2, const char *a3)
{
  llvm::Type *v6;
  char v7;
  const char *v9;
  char v10;
  char v11;

  v6 = AGCLLVMBuilder::tryDeducePointeeType(a2, (llvm::Value *)a2);
  v7 = 1;
  v11 = 1;
  if (*a3)
  {
    v9 = a3;
    v7 = 3;
  }
  v10 = v7;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v6, (uint64_t)a2, 0, (uint64_t)&v9);
}

llvm::Value *AGCLLVMUserObject::buildExtractXComponent(AGCLLVMUserObject *this, llvm::Value *a2)
{
  llvm::Value *v2;
  char *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  _BYTE v7[32];
  __int16 v8;

  v2 = a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v8 = 257;
    v4 = (llvm::IRBuilderBase *)(v3 + 40);
    v5 = (llvm::Value *)llvm::ConstantInt::get();
    return (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v4, v2, v5, (const llvm::Twine *)v7);
  }
  return v2;
}

uint64_t llvm::StringSet<llvm::MallocAllocator>::~StringSet(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 9));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t AGCLLVMUserObject::buildConstantSamplerArgumentPointer(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t Cast;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Type **GEP;
  llvm::Value *v23;
  uint64_t v24;
  uint64_t *v25;
  llvm::Type *v26;
  _WORD v28[20];
  _BYTE v29[32];
  __int16 v30;
  uint64_t *v31[4];
  __int16 v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v5 = (unint64_t)&a1[8 * (unint64_t)a3 + 261];
  v6 = *(uint64_t **)(v5 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v5 + 48);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v9 = *((_QWORD *)v8 + 28);
    v30 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v8 + 40), 47, a2, v9, (uint64_t)v29);
    v11 = (uint64_t *)Cast;
    v12 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 32;
    if (!a3 && *(unsigned __int8 *)(Cast + 16) >= 0x15u)
    {
      v13 = llvm::PointerType::get();
      v14 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 32, (uint64_t)"llvm.agx.samplerState", 21, v13, v13, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240));
      v15 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v30 = 257;
      v33[0] = llvm::IRBuilderBase::CreateCast(v15, 49, (uint64_t)v6, v13, (uint64_t)v29);
      v16 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v17 = *((_QWORD *)v16 + 30);
      v32 = 257;
      v33[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(v16 + 40), 39, (uint64_t)v11, v17, (uint64_t)v31);
      v28[16] = 257;
      v18 = llvm::IRBuilderBase::CreateCall(v15, *(_QWORD *)(v14 + 24), v14, (uint64_t)v33, 2, (uint64_t)v28);
      v19 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v20 = llvm::PointerType::get();
      v30 = 257;
      return llvm::IRBuilderBase::CreateCast(v19, 49, (uint64_t)v18, v20, (uint64_t)v29);
    }
    v31[0] = (uint64_t *)llvm::ConstantInt::get();
    v31[1] = v11;
    v30 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v12 + 8, v7, v6, v31, 2, (uint64_t)v29);
  }
  else
  {
    llvm::PointerType::get();
    GEP = (llvm::Type **)llvm::UndefValue::get();
  }
  v24 = (uint64_t)GEP;
  if (a3 == 2)
  {
    v25 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
    v30 = 257;
    v26 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v23);
    return llvm::IRBuilderBase::CreateAlignedLoad(v25 + 5, v26, v24, 0, (uint64_t)v29);
  }
  return v24;
}

uint64_t AGCLLVMUserObject::buildNonConstantSamplerArgumentPointer(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Cast;
  llvm::CmpInst **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  llvm::Value *v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  AGCLLVMBuilder *v28;
  llvm::Value *v29;
  llvm::Value *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Type *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t Impl;
  void *GlobalBindingTablePtr;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  uint64_t *v48;
  llvm::Type **GEP;
  llvm::Value *v50;
  uint64_t v51;
  llvm::Type *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  llvm::Type **Select;
  llvm::Type **AllocaInEntryBlock;
  uint64_t v59;
  llvm::Type *v60;
  AGCLLVMBuilder *v62;
  llvm::Value *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *__src;
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[8];
  __int16 v70;
  void *__p;
  void *v72;
  char v73;
  __int16 v74;
  _QWORD v75[2];
  void *v76[2];
  _BYTE v77[16];
  __int16 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v5 = (unint64_t)&a1[8 * (unint64_t)a3 + 229];
  v6 = *(uint64_t **)(v5 + 16);
  if (v6)
  {
    v8 = *(_QWORD *)(v5 + 48);
    v9 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v10 = *(_QWORD *)(v9 + 224);
    v78 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(v9 + 40, 47, a2, v10, (uint64_t)v76);
    v12 = (llvm::CmpInst **)Cast;
    v13 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 32;
    if (!a3 && *(unsigned __int8 *)(Cast + 16) >= 0x15u)
    {
      v14 = llvm::PointerType::get();
      v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 32, (uint64_t)"llvm.agx.samplerState", 21, v14, v14, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240));
      v16 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v78 = 257;
      v75[0] = llvm::IRBuilderBase::CreateCast(v16, 49, (uint64_t)v6, v14, (uint64_t)v76);
      v17 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
      v18 = *(_QWORD *)(v17 + 240);
      v74 = 257;
      v75[1] = llvm::IRBuilderBase::CreateCast(v17 + 40, 39, (uint64_t)v12, v18, (uint64_t)&__p);
      v70 = 257;
      v19 = llvm::IRBuilderBase::CreateCall(v16, *(_QWORD *)(v15 + 24), v15, (uint64_t)v75, 2, (uint64_t)&__src);
      v20 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
      v21 = llvm::PointerType::get();
      v78 = 257;
      return llvm::IRBuilderBase::CreateCast(v20, 49, (uint64_t)v19, v21, (uint64_t)v76);
    }
    if (a3 == 2)
    {
      v25 = *(_BYTE **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
      if (!v25[1755])
      {
        if (!*((_BYTE *)a1 + 15))
        {
          v26 = AGCLLVMUserObject::needsDylibResources((AGCLLVMUserObject *)a1);
          v27 = *a1;
          if (!v26)
          {
            v62 = (AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(v27 - 24) + 32);
            v63 = (llvm::Value *)llvm::ConstantInt::get();
            v64 = AGCLLVMBuilder::buildICmpSel(v62, v12, v63, 36);
            v65 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
            __src = (uint64_t *)llvm::ConstantInt::get();
            v67 = v64;
            v48 = (uint64_t *)(v65 + 40);
            v78 = 257;
            GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v65 + 40, v8, v6, &__src, 2, (uint64_t)v76);
            v51 = (uint64_t)GEP;
            v74 = 257;
LABEL_18:
            v52 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v50);
            llvm::IRBuilderBase::CreateAlignedLoad(v48, v52, v51, 0, (uint64_t)&__p);
            v53 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
            v54 = *(_QWORD *)(v53 + 240);
            v78 = 257;
            llvm::IRBuilderBase::CreateCast(v53 + 40, 47, a2, v54, (uint64_t)v76);
            v55 = (uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
            v56 = llvm::ConstantInt::get();
            v78 = 257;
            llvm::IRBuilderBase::CreateICmp(v55, 36, v12, v56, (uint64_t)v76);
            v74 = 257;
            Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
            AllocaInEntryBlock = (llvm::Type **)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), *(llvm::Type **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240));
            llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40), Select, (uint64_t)AllocaInEntryBlock, 0);
LABEL_21:
            v59 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
            v78 = 257;
            v60 = AGCLLVMBuilder::tryDeducePointeeType(AllocaInEntryBlock, v24);
            return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v59 + 40), v60, (uint64_t)AllocaInEntryBlock, 0, (uint64_t)v76);
          }
          v25 = *(_BYTE **)((char *)a1 + *(_QWORD *)(v27 - 24) + 400);
        }
        (*(void (**)(_BYTE *))(*(_QWORD *)v25 + 480))(v25);
        v28 = (AGCLLVMBuilder *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32);
        v29 = (llvm::Value *)llvm::ConstantInt::get();
        v30 = (llvm::Value *)AGCLLVMBuilder::buildICmpSel(v28, v12, v29, 36);
        v31 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
        v32 = v31 + 32;
        v33 = *(llvm::Type **)(v31 + 240);
        v34 = (void **)a1[354];
        if (!v34)
        {
          std::string::basic_string[abi:nn180100]<0>(&__p, "agc.global_sampler_unique_id_table");
          v35 = llvm::User::operator new((llvm::User *)0x58);
          v78 = 260;
          v76[0] = &__p;
          llvm::GlobalVariable::GlobalVariable();
          llvm::GlobalObject::setSection();
          llvm::GlobalObject::setAlignment();
          __src = (uint64_t *)llvm::ValueAsMetadata::get();
          llvm::ConstantInt::get();
          v67 = llvm::ValueAsMetadata::get();
          llvm::ConstantInt::get();
          v68 = llvm::ValueAsMetadata::get();
          v76[0] = v77;
          v76[1] = (void *)0x300000000;
          llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v76, &__src, v69);
          v36 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 3080;
          Impl = llvm::MDTuple::getImpl();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v36, Impl);
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 352), v35);
          if (v76[0] != v77)
            free(v76[0]);
          if (v73 < 0)
            operator delete(__p);
          v34 = (void **)a1[354];
        }
        GlobalBindingTablePtr = (void *)AGCLLVMUserObject::getGlobalBindingTablePtr((AGCLLVMUserObject *)a1);
        v39 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
        v40 = *(_QWORD *)(v39 + 400);
        v41 = *(_QWORD *)(v39 + 368);
        v76[0] = *v34;
        v42 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v40 + 1344))(v40, v41, v76, 1);
        v43 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
        __p = GlobalBindingTablePtr;
        v72 = v34;
        v78 = 257;
        v44 = llvm::IRBuilderBase::CreateCall(v43 + 40, *(_QWORD *)(v42 + 24), v42, (uint64_t)&__p, 2, (uint64_t)v76);
        v45 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
        v46 = llvm::PointerType::get();
        v78 = 257;
        v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v45, 49, (uint64_t)v44, v46, (uint64_t)v76);
        v48 = (uint64_t *)(v32 + 8);
        v78 = 257;
        GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v32 + 8), v33, v47, v30, (const llvm::Twine *)v76);
        v51 = (uint64_t)GEP;
        v74 = 257;
        goto LABEL_18;
      }
    }
    __p = (void *)llvm::ConstantInt::get();
    v72 = v12;
    v78 = 257;
    v23 = llvm::IRBuilderBase::CreateGEP(v13 + 8, v8, v6, (uint64_t **)&__p, 2, (uint64_t)v76);
  }
  else
  {
    llvm::PointerType::get();
    v23 = llvm::UndefValue::get();
  }
  AllocaInEntryBlock = (llvm::Type **)v23;
  if (a3 == 2)
    goto LABEL_21;
  return (uint64_t)AllocaInEntryBlock;
}

uint64_t AGCLLVMUserObject::getGlobalBindingTablePtr(AGCLLVMUserObject *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::BasicBlock *v10;
  char *v11;
  uint64_t FirstInsertionPt;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *PHI;
  uint64_t *v27;
  llvm::Type **v28;
  llvm::Value *v29;
  llvm::Type *v30;
  char *v31;
  llvm::Value *v32;
  char *v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  llvm::CmpInst **v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  llvm::BasicBlock *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  llvm::Type **GlobalBindingTableGlobal;
  llvm::Value *v53;
  llvm::Type *v54;
  llvm::Value *AlignedLoad;
  char *v56;
  uint64_t v57;
  llvm::IRBuilderBase *v58;
  int v59;
  int v60;
  llvm::Value *Cast;
  llvm::BasicBlock *v62;
  llvm::BasicBlock *ICmp;
  llvm::BasicBlock *v64;
  llvm::Type *v65;
  __int128 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  __int16 v85;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v70 = *(_OWORD *)(v2 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v2 + 40));
  v72 = *((_DWORD *)v2 + 34);
  v3 = *(_QWORD *)(v70 + 56);
  v69 = v3;
  v4 = *((unsigned int *)this + 882);
  if ((_DWORD)v4)
  {
    v5 = *((_QWORD *)this + 439);
    LODWORD(v6) = ((v3 >> 4) ^ (v3 >> 9)) & (v4 - 1);
    v7 = (uint64_t *)(v5 + 16 * v6);
    v8 = *v7;
    if (v3 == *v7)
    {
LABEL_3:
      if (v7 != (uint64_t *)(v5 + 16 * v4))
        goto LABEL_30;
    }
    else
    {
      v59 = 1;
      while (v8 != -4096)
      {
        v60 = v6 + v59++;
        v6 = v60 & (v4 - 1);
        v8 = *(_QWORD *)(v5 + 16 * v6);
        if (v3 == v8)
        {
          v7 = (uint64_t *)(v5 + 16 * v6);
          goto LABEL_3;
        }
      }
    }
  }
  v9 = *(_QWORD *)(v3 + 80);
  if (v9)
    v10 = (llvm::BasicBlock *)(v9 - 24);
  else
    v10 = 0;
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v10);
  llvm::IRBuilderBase::SetInsertPoint((uint64_t)v11, (uint64_t)v10, FirstInsertionPt);
  v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
  v14 = *((_QWORD *)this + 348);
  if (!v14)
  {
    v15 = llvm::PointerType::get();
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v14 = v16;
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addFnAttr();
    llvm::Function::addRetAttr();
    *(_DWORD *)(v14 + 32) = *(_DWORD *)(v14 + 32) & 0xFFFFBFC0 | 0x4007;
    v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v76 = *(_OWORD *)(v17 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v17 + 40));
    v78 = *((_DWORD *)v17 + 34);
    *(_QWORD *)&v82 = "entry";
    v85 = 259;
    operator new();
    v18 = llvm::BasicBlock::BasicBlock();
    v19 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v19 + 11) = v18;
    *((_QWORD *)v19 + 12) = v18 + 40;
    llvm::IRBuilderBase::AddOrRemoveMetadataToCopy((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40, 0);
    v20 = *(_QWORD *)(*(_QWORD *)this - 24);
    if (*(_BYTE *)(*(_QWORD *)((char *)this + v20 + 400) + 1785))
    {
      if (!*((_BYTE *)this + 3712))
      {
        if (*((_BYTE *)this + 15) || (v21 = *((_QWORD *)this + 294), *(_BYTE *)(v21 + 48)) || *(_BYTE *)(v21 + 51))
        {
          if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + v20) + 64))((char *)this + v20) != 29)
          {
            if (!*((_QWORD *)this + 475))
              *((_QWORD *)this + 475) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)((char *)this
                                                                                                + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                                                + 400)
                                                                                  + 1296))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
            v65 = (llvm::Type *)v15;
            v36 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v37 = *((_QWORD *)v36 + 50);
            v73 = *(_OWORD *)(v36 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v36 + 40));
            v75 = *((_DWORD *)v36 + 34);
            v38 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v37 + 968))(v37, &v73);
            if (v74)
              llvm::MetadataTracking::untrack();
            v39 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v40 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v39 + 50) + 688))(*((_QWORD *)v39 + 50));
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 1824))(v40, 29);
            v41 = llvm::ConstantInt::get();
            v85 = 257;
            ICmp = (llvm::BasicBlock *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v39 + 5, 32, v38, v41, (uint64_t)&v82);
            *(_QWORD *)&v82 = "global_binding_table_phi_block";
            v85 = 259;
            v42 = (llvm::BasicBlock *)operator new();
            llvm::BasicBlock::BasicBlock();
            *(_QWORD *)&v82 = "global_binding_table_scs_block";
            v85 = 259;
            v43 = operator new();
            llvm::BasicBlock::BasicBlock();
            *(_QWORD *)&v82 = "global_binding_table_uniform_block";
            v85 = 259;
            v44 = operator new();
            llvm::BasicBlock::BasicBlock();
            v62 = (llvm::BasicBlock *)v44;
            llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (uint64_t)ICmp, v43, v44);
            v45 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v64 = (llvm::BasicBlock *)v43;
            *((_QWORD *)v45 + 11) = v43;
            *((_QWORD *)v45 + 12) = v43 + 40;
            v46 = *((_QWORD *)this + 475);
            v47 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            v48 = *((_QWORD *)v47 + 50);
            v79 = *(_OWORD *)(v47 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v47 + 40));
            v81 = *((_DWORD *)v47 + 34);
            v49 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v48 + 976))(v48, &v79, v46);
            v85 = 257;
            Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v47 + 40), 48, v49, (uint64_t)v65, (uint64_t)&v82);
            if (v80)
              llvm::MetadataTracking::untrack();
            llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v42);
            v50 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            *((_QWORD *)v50 + 11) = v62;
            *((_QWORD *)v50 + 12) = (char *)v62 + 40;
            v51 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
            GlobalBindingTableGlobal = (llvm::Type **)AGCLLVMUserObject::createGlobalBindingTableGlobal(this);
            v85 = 257;
            v54 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBindingTableGlobal, v53);
            AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v51 + 5, v54, (uint64_t)GlobalBindingTableGlobal, 0, (uint64_t)&v82);
            llvm::IRBuilderBase::CreateBr((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v42);
            v56 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
            v57 = llvm::BasicBlock::getFirstInsertionPt(v42);
            llvm::IRBuilderBase::SetInsertPoint((uint64_t)v56, (uint64_t)v42, v57);
            v58 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
            v85 = 257;
            PHI = llvm::IRBuilderBase::CreatePHI(v58, v65, 2, (const llvm::Twine *)&v82);
            llvm::PHINode::addIncoming(PHI, Cast, v64);
            llvm::PHINode::addIncoming(PHI, AlignedLoad, v62);
            goto LABEL_20;
          }
          v20 = *(_QWORD *)(*(_QWORD *)this - 24);
        }
      }
    }
    if ((*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + v20) + 64))((char *)this + v20) == 29)
    {
      v22 = *((_QWORD *)this + 475);
      v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v24 = *((_QWORD *)v23 + 50);
      v79 = *(_OWORD *)(v23 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v23 + 40));
      v81 = *((_DWORD *)v23 + 34);
      v25 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v24 + 976))(v24, &v79, v22);
      v85 = 257;
      PHI = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v23 + 40), 48, v25, v15, (uint64_t)&v82);
      if (v80)
        llvm::MetadataTracking::untrack();
    }
    else
    {
      v27 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v28 = (llvm::Type **)AGCLLVMUserObject::createGlobalBindingTableGlobal(this);
      v85 = 257;
      v30 = AGCLLVMBuilder::tryDeducePointeeType(v28, v29);
      PHI = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v27 + 5, v30, (uint64_t)v28, 0, (uint64_t)&v82);
    }
LABEL_20:
    llvm::IRBuilderBase::CreateRet((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), PHI);
    v31 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v82 = v76;
    v83 = v77;
    if (v77)
      llvm::MetadataTracking::track();
    v84 = v78;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v82, (uint64_t)(v31 + 8));
    if (v83)
      llvm::MetadataTracking::untrack();
    llvm::ValueHandleBase::operator=((AGCLLVMUserObject *)((char *)this + 2768), v14);
    if (v77)
      llvm::MetadataTracking::untrack();
  }
  v85 = 257;
  v32 = llvm::IRBuilderBase::CreateCall((uint64_t)(v13 + 8), *(_QWORD *)(v14 + 24), v14, 0, 0, (uint64_t)&v82);
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>,llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::FindAndConstruct((uint64_t)this + 3512, &v69)[1] = (uint64_t)v32;
  v33 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
  v66 = v70;
  v67 = v71;
  if (v71)
    llvm::MetadataTracking::track();
  v68 = v72;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v66, (uint64_t)(v33 + 8));
  if (v67)
    llvm::MetadataTracking::untrack();
LABEL_30:
  v34 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>,llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::FindAndConstruct((uint64_t)this + 3512, &v69)[1];
  if (v71)
    llvm::MetadataTracking::untrack();
  return v34;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>,llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x1CAA2C6C0](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = 16 * v3;
      v14 = (uint64_t *)v4;
      do
      {
        v15 = *v14;
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          v16 = v19;
          *v19 = *v14;
          v16[1] = v14[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      do
      {
        *result = -4096;
        result += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm *v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(llvm **)(*(_QWORD *)a1 + v3);
        if (v5 != (llvm *)-8 && v5 != 0)
          llvm::deallocate_buffer(v5, (void *)(*(_QWORD *)v5 + 25));
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t *std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Sampler,std::__tree_node<AGCLLVMUserObject::Sampler,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (unsigned int *)(v4 + 4);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_9;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v7;
      if (*((_DWORD *)v9 + 8) < *v7)
      {
LABEL_9:
        if (v8)
          v14 = (uint64_t **)v9;
        else
          v14 = (uint64_t **)v6;
        if (v8)
          v15 = (uint64_t **)(v9 + 1);
        else
          v15 = (uint64_t **)v6;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v15 = (uint64_t **)v6;
        if (v8)
        {
          v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v8;
              v20 = *((_DWORD *)v8 + 8);
              if (v13 >= v20)
                break;
              v8 = *v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v20 >= v13)
              break;
            v15 = v14 + 1;
            v8 = v14[1];
            if (!v8)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = (uint64_t *)operator new(0x40uLL);
        v17 = *((_OWORD *)v4 + 3);
        *((_OWORD *)v16 + 2) = *(_OWORD *)v7;
        *((_OWORD *)v16 + 3) = v17;
        result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v14, v15, v16);
      }
      v18 = (_QWORD *)v4[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v4[2];
          v12 = *v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v12);
      }
      v4 = v19;
    }
    while (v19 != a3);
  }
  return result;
}

uint64_t AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject *a1, char a2)
{
  const char *v3;
  const char *Value;
  BOOL v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD **v10;
  uint64_t *BindlessHeapIndexForRange;
  _QWORD *v12;
  _QWORD **v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  char *v24;
  uint64_t **v25;
  _QWORD *v26;
  AGCLLVMUserObject *v27;
  BOOL *v28;
  char *v29;
  char v30;
  uint64_t *v31;
  _QWORD *v32[2];
  _QWORD v33[2];
  _QWORD **v34;
  _QWORD *v35[2];
  BOOL v36;
  unsigned __int8 v37;
  char v38;
  void *v39[2];
  _BYTE v40[24];
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v38 = a2;
  v37 = 1;
  v5 = (!MGGetBoolAnswer()
     || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_CS_SAMPLERS", v3)) == 0
     || *Value == 48
     || !atoi(Value))
    && *(_DWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 1780) == 0;
  v36 = v5;
  v35[0] = 0;
  v35[1] = 0;
  v33[1] = &v34;
  v34 = v35;
  v33[0] = &v38;
  v47[0] = &off_1E7EB86F0;
  v47[1] = v33;
  v48 = v47;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)a1 + 371), (uint64_t)v47);
  v6 = v48;
  if (v48 == v47)
  {
    v7 = 4;
    v6 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_12;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
  v45[0] = &off_1E7EB8780;
  v45[1] = v33;
  v46 = v45;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)a1 + 395), (uint64_t)v45);
  v8 = v46;
  if (v46 == v45)
  {
    v9 = 4;
    v8 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_17;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
  v32[0] = 0;
  v32[1] = 0;
  v31 = (uint64_t *)v32;
  v10 = v34;
  if (v34 != v35)
  {
    do
    {
      v24 = *(char **)((char *)v10 + 28);
      LODWORD(v25) = *((_DWORD *)v10 + 9);
      BindlessHeapIndexForRange = (uint64_t *)AGCLLVMUserObject::allocateBindlessHeapIndexForRange(a1, (unsigned int *)&v24 + 1, (uint64_t)a1 + 4176);
      std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v31, v24, &v24)[5] = BindlessHeapIndexForRange;
      v12 = v10[1];
      if (v12)
      {
        do
        {
          v13 = (_QWORD **)v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD **)v10[2];
          v14 = *v13 == v10;
          v10 = v13;
        }
        while (!v14);
      }
      v10 = v13;
    }
    while (v13 != v35);
  }
  v30 = 0;
  v24 = &v38;
  v25 = &v31;
  v26 = &v34;
  v27 = a1;
  v28 = &v36;
  v29 = &v30;
  v43[0] = &off_1E7EB87C8;
  v43[1] = &v37;
  v43[2] = &v24;
  v44 = v43;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)a1 + 371), (uint64_t)v43);
  v15 = v44;
  if (v44 == v43)
  {
    v16 = 4;
    v15 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_29;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_29:
  v30 = 1;
  v41[0] = &off_1E7EB8858;
  v41[1] = &v37;
  v41[2] = &v24;
  v42 = v41;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)a1 + 395), (uint64_t)v41);
  v17 = v42;
  if (v42 == v41)
  {
    v18 = 4;
    v17 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_34;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_34:
  if (v36)
  {
    v39[0] = v40;
    v39[1] = (void *)0x100000000;
    AGCLLVMUserObject::createSamplerArrays((uint64_t)a1, (uint64_t)v39);
    if (v39[0] != v40)
      free(v39[0]);
  }
  else
  {
    v19 = v31;
    if (v31 != (uint64_t *)v32)
    {
      do
      {
        AGCLLVMUserObject::lowerGlobalBindingVariable(a1, (llvm::GlobalVariable *)v19[5]);
        v20 = (uint64_t *)v19[1];
        if (v20)
        {
          do
          {
            v21 = v20;
            v20 = (uint64_t *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            v21 = (uint64_t *)v19[2];
            v14 = *v21 == (_QWORD)v19;
            v19 = v21;
          }
          while (!v14);
        }
        v19 = v21;
      }
      while (v21 != (uint64_t *)v32);
    }
  }
  v22 = v37;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v32[0]);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v35[0]);
  return v22;
}

uint64_t AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v3 = (_QWORD *)result;
    while (1)
    {
      v5 = v3[5];
      v4 = *(_QWORD *)(a2 + 24);
      if (!v4)
        break;
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v5);
      v3 = (_QWORD *)*v3;
      if (!v3)
        return result;
    }
    std::__throw_bad_function_call[abi:nn180100]();
    return AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>();
  }
  return result;
}

BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD v18[2];
  _QWORD *v19[2];
  _BYTE v20[24];
  _QWORD *v21;
  _BYTE v22[24];
  _QWORD *v23;
  _QWORD v24[3];
  _QWORD *v25;
  _QWORD v26[3];
  _QWORD *v27;
  void *v28[2];
  _QWORD v29[13];

  v29[12] = *MEMORY[0x1E0C80C00];
  v19[0] = 0;
  v19[1] = 0;
  v18[0] = &off_1E7EB7E00;
  v18[1] = v19;
  v28[1] = (void *)0x400000000;
  v26[0] = &off_1E7EB8930;
  v26[1] = v18;
  v27 = v26;
  v28[0] = v29;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a2 + 24), (uint64_t)v26);
  v8 = v27;
  if (v27 == v26)
  {
    v9 = 4;
    v8 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v24[0] = &off_1E7EB89C0;
  v24[1] = v18;
  v25 = v24;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a3 + 24), (uint64_t)v24);
  v10 = v25;
  if (v25 == v24)
  {
    v11 = 4;
    v10 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator>((uint64_t)v18, (uint64_t)v28, a4);
  AGCLLVMUserObject::createSamplerArrays(a1, (uint64_t)v28);
  v17 = a1;
  v16 = 1;
  v12 = operator new(0x20uLL);
  *v12 = &off_1E7EB8A50;
  v12[1] = &v16;
  v12[2] = v18;
  v12[3] = &v17;
  v23 = v12;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a2 + 24), (uint64_t)v22);
  (*(void (**)(_QWORD *))(*v12 + 40))(v12);
  v13 = operator new(0x20uLL);
  *v13 = &off_1E7EB8AE0;
  v13[1] = &v16;
  v13[2] = v18;
  v13[3] = &v17;
  v21 = v13;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a3 + 24), (uint64_t)v20);
  (*(void (**)(_QWORD *))(*v13 + 40))(v13);
  v14 = v16;
  if (v28[0] != v29)
    free(v28[0]);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v19[0]);
  return v14 != 0;
}

void AGCLLVMUserObject::createSamplerArrays(uint64_t a1, uint64_t a2)
{
  const char *v4;
  const char *Value;
  llvm::Constant *v6;
  llvm::Type *v7;
  uint64_t NullValue;
  uint64_t *v9;
  unint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  AGCLLVMUserObject *v15;
  llvm::Value *v16;
  llvm::Constant *v17;
  llvm::Type *v18;
  uint64_t v19;

  if (*(_DWORD *)(a2 + 8))
  {
    if (MGGetBoolAnswer()
      && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_FORCE_CS_SAMPLERS", v4)) != 0
      && *Value != 48
      && atoi(Value)
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1755)
      || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1780)
      || *(_BYTE *)(a1 + 15))
    {
      v6 = (llvm::Constant *)llvm::PointerType::get();
      NullValue = llvm::Constant::getNullValue(v6, v7);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 1832), NullValue);
    }
    else
    {
      v15 = (AGCLLVMUserObject *)AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>((_QWORD *)a1, (uint64_t *)a2, a1 + 1832);
      if (*(_BYTE *)(a1 + 3656))
        AGCLLVMUserObject::setDylibLinkage(v15, v16);
    }
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>((_QWORD *)a1, (uint64_t *)a2, a1 + 1896);
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>((_QWORD *)a1, (uint64_t *)a2, a1 + 1960);
    v9 = (uint64_t *)(a1 + 664);
    llvm::SmallVectorImpl<unsigned int>::resizeImpl<false>((uint64_t)v9, *(unsigned int *)(a2 + 8));
    if (*(_DWORD *)(a2 + 8))
    {
      v10 = 0;
      v11 = *(int **)a2;
      v12 = *v9;
      do
      {
        v13 = *v11;
        v11 += 6;
        *(_DWORD *)(v12 + 4 * v10++) = v13;
      }
      while (v10 < *(unsigned int *)(a2 + 8));
    }
  }
  else
  {
    v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
    if (!*(_BYTE *)(v14 + 1755) && !*(_DWORD *)(v14 + 1780))
    {
      v17 = (llvm::Constant *)llvm::PointerType::get();
      v19 = llvm::Constant::getNullValue(v17, v18);
      llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 1832), v19);
      *(_QWORD *)(a1 + 1880) = *(_QWORD *)(a1 + 1864);
      AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Sampler::AllocationInfo>((_QWORD *)a1, (uint64_t *)a2, a1 + 1960);
    }
  }
}

uint64_t *std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>::insert[abi:nn180100]<std::__tree_const_iterator<AGCLLVMUserObject::Texture,std::__tree_node<AGCLLVMUserObject::Texture,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  __int128 v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (unsigned int *)(v4 + 4);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_9;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      v13 = *v7;
      if (*((_DWORD *)v9 + 8) < *v7)
      {
LABEL_9:
        if (v8)
          v14 = (uint64_t **)v9;
        else
          v14 = (uint64_t **)v6;
        if (v8)
          v15 = (uint64_t **)(v9 + 1);
        else
          v15 = (uint64_t **)v6;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v15 = (uint64_t **)v6;
        if (v8)
        {
          v15 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              v14 = (uint64_t **)v8;
              v21 = *((_DWORD *)v8 + 8);
              if (v13 >= v21)
                break;
              v8 = *v14;
              v15 = v14;
              if (!*v14)
                goto LABEL_16;
            }
            if (v21 >= v13)
              break;
            v15 = v14 + 1;
            v8 = v14[1];
            if (!v8)
              goto LABEL_16;
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        v16 = (uint64_t *)operator new(0x50uLL);
        v18 = *((_OWORD *)v4 + 3);
        v17 = *((_OWORD *)v4 + 4);
        *((_OWORD *)v16 + 2) = *(_OWORD *)v7;
        *((_OWORD *)v16 + 3) = v18;
        *((_OWORD *)v16 + 4) = v17;
        result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v14, v15, v16);
      }
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v12 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v12);
      }
      v4 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t Int8PtrTy;
  uint64_t v25;
  unsigned int v26;
  char v27;
  llvm::GlobalVariable *v28;
  char v29;
  char v30;
  _QWORD **v31;
  uint64_t v32;
  char v33;
  char v34;
  _QWORD **v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::GlobalVariable *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::GlobalVariable *v46;
  char v47;
  char v48;
  _QWORD **v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  llvm::GlobalVariable *v53;
  char v54;
  char v55;
  _QWORD **v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  llvm::GlobalVariable *v60;
  char v61;
  char v62;
  _QWORD **v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  llvm::GlobalVariable *v67;
  char v68;
  char v69;
  _QWORD **v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  llvm::GlobalVariable *v74;
  char v75;
  char v76;
  _QWORD **v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  llvm::GlobalVariable *v81;
  char v82;
  char v83;
  _QWORD **v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  llvm::GlobalVariable *v88;
  char v89;
  char v90;
  _QWORD **v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  llvm::GlobalVariable *v95;
  char v96;
  char v97;
  _QWORD **v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t NullValue;
  llvm::Constant *v103;
  llvm::Type *v104;
  uint64_t v105;
  llvm::Constant *v106;
  llvm::Type *v107;
  uint64_t v108;
  char v109;
  char v110;
  _QWORD **v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD **v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _BOOL8 v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v127;
  _QWORD *v128;
  llvm::GlobalVariable *v129;
  llvm::GlobalVariable *v130;
  llvm::GlobalVariable *v131;
  llvm::GlobalVariable *v132;
  _DWORD *v133;
  unint64_t v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  char v138;
  uint64_t v139;
  _OWORD v140[2];
  int v141;
  uint64_t (**v142)();
  _QWORD **v143;
  _QWORD *v144[2];
  _QWORD v145[2];
  const char *v146;
  __int16 v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  _QWORD v153[3];
  _QWORD *v154;
  _QWORD v155[3];
  _QWORD *v156;
  _QWORD v157[3];
  _QWORD *v158;
  _QWORD v159[3];
  _QWORD *v160;
  void *v161;
  uint64_t v162;
  _BYTE v163[128];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v162 = 0x400000000;
  v142 = &off_1E7EB7E00;
  v143 = v144;
  v144[0] = 0;
  v144[1] = 0;
  v159[0] = &off_1E7EB90C8;
  v159[1] = &v142;
  v160 = v159;
  v161 = v163;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a2 + 24), (uint64_t)v159);
  v7 = v160;
  if (v160 == v159)
  {
    v8 = 4;
    v7 = v159;
  }
  else
  {
    if (!v160)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v157[0] = &off_1E7EB9158;
  v157[1] = &v142;
  v158 = v157;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a3 + 24), (uint64_t)v157);
  v9 = v158;
  if (v158 == v157)
  {
    v10 = 4;
    v9 = v157;
  }
  else
  {
    if (!v158)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v127 = a3;
  memset(v140, 0, sizeof(v140));
  v141 = 1065353216;
  v11 = v143;
  if (v143 != v144)
  {
    v12 = (_QWORD *)(a4 + 8);
    v13 = a1 + 46;
    v128 = (_QWORD *)(a4 + 8);
    do
    {
      v14 = *v12;
      if (!*v12)
        goto LABEL_89;
      v15 = (_DWORD *)v11 + 7;
      v16 = *((_DWORD *)v11 + 9);
      v17 = v12;
      do
      {
        v18 = *(_DWORD *)(v14 + 36) + *(_DWORD *)(v14 + 32);
        v19 = v18 > v16;
        if (v18 <= v16)
          v20 = (uint64_t *)(v14 + 8);
        else
          v20 = (uint64_t *)v14;
        if (v19)
          v17 = (_QWORD *)v14;
        v14 = *v20;
      }
      while (*v20);
      if (v17 == v12
        || (v22 = *((_DWORD *)v17 + 8), v21 = (uint64_t)(v17 + 4), v16 < v22)
        || (v23 = *((_DWORD *)v11 + 7), *((_DWORD *)v11 + 8) != v23))
      {
LABEL_89:
        v120 = 0;
        goto LABEL_98;
      }
      AGCLLVMUserObject::Texture::getAllocationInfo((uint64_t)&v136, v21, v23);
      Int8PtrTy = llvm::Type::getInt8PtrTy(*(llvm::Type **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 392), (llvm::LLVMContext *)2);
      v25 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 232);
      *(_QWORD *)&v164 = Int8PtrTy;
      *((_QWORD *)&v164 + 1) = v25;
      *(_QWORD *)&v165 = v25;
      llvm::StructType::get();
      if ((*(_BYTE *)(v139 + 9) & 1) == 0)
      {
        v167 = 0u;
        v168 = 0u;
        v165 = 0u;
        v166 = 0u;
        v164 = 0u;
        *(_QWORD *)&v164 = llvm::PointerType::get();
        *((_QWORD *)&v164 + 1) = llvm::PointerType::get();
        llvm::FixedVectorType::get();
        *(_QWORD *)&v165 = llvm::PointerType::get();
        *((_QWORD *)&v165 + 1) = llvm::PointerType::get();
        *(_QWORD *)&v166 = llvm::PointerType::get();
        *((_QWORD *)&v166 + 1) = llvm::PointerType::get();
        *(_QWORD *)&v167 = llvm::PointerType::get();
        *((_QWORD *)&v167 + 1) = llvm::PointerType::get();
        *(_QWORD *)&v168 = llvm::PointerType::get();
        *((_QWORD *)&v168 + 1) = llvm::PointerType::get();
        llvm::StructType::setBody();
      }
      v26 = v136;
      v134 = ((unint64_t)v136 >> 20) & 0x7FF;
      v135 = v136 & 0xFFFFFLL;
      v27 = v138;
      if ((v138 & 1) != 0)
      {
        v32 = llvm::User::operator new((llvm::User *)0x58);
        if ((v26 & 0x80000000) != 0)
        {
          v145[0] = v134;
          v146 = ".";
          v147 = 776;
          v33 = 2;
          v34 = 8;
          v35 = &v148;
          v148 = v145;
          v150 = v135;
        }
        else
        {
          LODWORD(v148) = v135;
          v33 = 8;
          v34 = 1;
          v35 = (_QWORD **)v148;
        }
        v151 = v33;
        v152 = v34;
        *(_QWORD *)&v164 = "agc.read_image_words";
        *(_QWORD *)&v165 = v35;
        *((_QWORD *)&v165 + 1) = v149;
        LOBYTE(v166) = 3;
        BYTE1(v166) = v33;
        v40 = (llvm::GlobalVariable *)v32;
        v41 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v41 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        v42 = (char *)a1 + *(_QWORD *)(*a1 - 24);
        v43 = *((_QWORD *)v42 + 47);
        v44 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v42 + 32), v40);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v43, v44);
        v132 = v40;
        if (v137 != -1)
        {
          v45 = *(_QWORD *)((char *)v13 + *(_QWORD *)(*a1 - 24) + 32);
          (*(void (**)(uint64_t, llvm::GlobalVariable *))(*(_QWORD *)v45 + 176))(v45, v40);
        }
        v15 = (_DWORD *)v11 + 7;
        if ((v27 & 2) != 0)
        {
LABEL_28:
          v28 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
          if ((v26 & 0x80000000) != 0)
          {
            v145[0] = v134;
            v146 = ".";
            v147 = 776;
            v148 = v145;
            v150 = v135;
            v29 = 2;
            v30 = 8;
            v31 = &v148;
          }
          else
          {
            LODWORD(v148) = v135;
            v29 = 8;
            v30 = 1;
            v31 = (_QWORD **)v148;
          }
          v151 = v29;
          v152 = v30;
          *(_QWORD *)&v164 = "agc.write_image_words";
          *(_QWORD *)&v165 = v31;
          *((_QWORD *)&v165 + 1) = v149;
          LOBYTE(v166) = 3;
          BYTE1(v166) = v29;
          llvm::GlobalVariable::GlobalVariable();
          *((_BYTE *)v28 + 80) |= 1u;
          llvm::GlobalObject::setSection();
          llvm::GlobalObject::setAlignment();
          v36 = (char *)a1 + *(_QWORD *)(*a1 - 24);
          v37 = *((_QWORD *)v36 + 47);
          v38 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v36 + 32), v28);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v37, v38);
          v131 = v28;
          if (v137 != -1)
          {
            v39 = *(_QWORD *)((char *)v13 + *(_QWORD *)(*a1 - 24) + 32);
            (*(void (**)(uint64_t, llvm::GlobalVariable *))(*(_QWORD *)v39 + 176))(v39, v28);
          }
          goto LABEL_41;
        }
      }
      else
      {
        v132 = 0;
        if ((v138 & 2) != 0)
          goto LABEL_28;
      }
      v131 = 0;
LABEL_41:
      v46 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::FixedVectorType::get();
      if ((v26 & 0x80000000) != 0)
      {
        v145[0] = v134;
        v146 = ".";
        v147 = 776;
        v148 = v145;
        v150 = v135;
        v47 = 2;
        v48 = 8;
        v49 = &v148;
      }
      else
      {
        LODWORD(v148) = v135;
        v47 = 8;
        v48 = 1;
        v49 = (_QWORD **)v148;
      }
      v151 = v47;
      v152 = v48;
      *(_QWORD *)&v164 = "agc.image_dim";
      *(_QWORD *)&v165 = v49;
      *((_QWORD *)&v165 + 1) = v149;
      LOBYTE(v166) = 3;
      BYTE1(v166) = v47;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v46 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v50 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v51 = *((_QWORD *)v50 + 47);
      v52 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v50 + 32), v46);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v51, v52);
      v53 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v130 = v46;
      if ((v26 & 0x80000000) != 0)
      {
        v145[0] = v134;
        v146 = ".";
        v147 = 776;
        v148 = v145;
        v150 = v135;
        v54 = 2;
        v55 = 8;
        v56 = &v148;
      }
      else
      {
        LODWORD(v148) = v135;
        v54 = 8;
        v55 = 1;
        v56 = (_QWORD **)v148;
      }
      v151 = v54;
      v152 = v55;
      *(_QWORD *)&v164 = "agc.image_array_info";
      *(_QWORD *)&v165 = v56;
      *((_QWORD *)&v165 + 1) = v149;
      LOBYTE(v166) = 3;
      BYTE1(v166) = v54;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v53 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v57 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v58 = *((_QWORD *)v57 + 47);
      v59 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v57 + 32), v53);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v58, v59);
      v60 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v129 = v53;
      if ((v26 & 0x80000000) != 0)
      {
        v145[0] = v134;
        v146 = ".";
        v147 = 776;
        v148 = v145;
        v150 = v135;
        v61 = 2;
        v62 = 8;
        v63 = &v148;
      }
      else
      {
        LODWORD(v148) = v135;
        v61 = 8;
        v62 = 1;
        v63 = (_QWORD **)v148;
      }
      v151 = v61;
      v152 = v62;
      *(_QWORD *)&v164 = "agc.image_pack_format";
      *(_QWORD *)&v165 = v63;
      *((_QWORD *)&v165 + 1) = v149;
      LOBYTE(v166) = 3;
      BYTE1(v166) = v61;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v60 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v64 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v65 = *((_QWORD *)v64 + 47);
      v66 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v64 + 32), v60);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v65, v66);
      v67 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      if ((v26 & 0x80000000) != 0)
      {
        v145[0] = v134;
        v146 = ".";
        v147 = 776;
        v148 = v145;
        v150 = v135;
        v68 = 2;
        v69 = 8;
        v70 = &v148;
      }
      else
      {
        LODWORD(v148) = v135;
        v68 = 8;
        v69 = 1;
        v70 = (_QWORD **)v148;
      }
      v151 = v68;
      v152 = v69;
      *(_QWORD *)&v164 = "agc.image_mipmap_count";
      *(_QWORD *)&v165 = v70;
      *((_QWORD *)&v165 + 1) = v149;
      LOBYTE(v166) = 3;
      BYTE1(v166) = v68;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v67 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v71 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v72 = *((_QWORD *)v71 + 47);
      v73 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v71 + 32), v67);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v72, v73);
      v74 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v133 = v15;
      if ((v26 & 0x80000000) != 0)
      {
        v145[0] = v134;
        v146 = ".";
        v147 = 776;
        v148 = v145;
        v150 = v135;
        v75 = 2;
        v76 = 8;
        v77 = &v148;
      }
      else
      {
        LODWORD(v148) = v135;
        v75 = 8;
        v76 = 1;
        v77 = (_QWORD **)v148;
      }
      v151 = v75;
      v152 = v76;
      *(_QWORD *)&v164 = "agc.image_sample_count";
      *(_QWORD *)&v165 = v77;
      *((_QWORD *)&v165 + 1) = v149;
      LOBYTE(v166) = 3;
      BYTE1(v166) = v75;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v74 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v78 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v79 = *((_QWORD *)v78 + 47);
      v80 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v78 + 32), v74);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v79, v80);
      v81 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      if ((v26 & 0x80000000) != 0)
      {
        v145[0] = v134;
        v146 = ".";
        v147 = 776;
        v148 = v145;
        v150 = v135;
        v82 = 2;
        v83 = 8;
        v84 = &v148;
      }
      else
      {
        LODWORD(v148) = v135;
        v82 = 8;
        v83 = 1;
        v84 = (_QWORD **)v148;
      }
      v151 = v82;
      v152 = v83;
      *(_QWORD *)&v164 = "agc.image_base_level";
      *(_QWORD *)&v165 = v84;
      *((_QWORD *)&v165 + 1) = v149;
      LOBYTE(v166) = 3;
      BYTE1(v166) = v82;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v81 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v85 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v86 = *((_QWORD *)v85 + 47);
      v87 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v85 + 32), v81);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v86, v87);
      v88 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      if ((v26 & 0x80000000) != 0)
      {
        v145[0] = v134;
        v146 = ".";
        v147 = 776;
        v148 = v145;
        v150 = v135;
        v89 = 2;
        v90 = 8;
        v91 = &v148;
      }
      else
      {
        LODWORD(v148) = v135;
        v89 = 8;
        v90 = 1;
        v91 = (_QWORD **)v148;
      }
      v151 = v89;
      v152 = v90;
      *(_QWORD *)&v164 = "agc.image_heap_index";
      *(_QWORD *)&v165 = v91;
      *((_QWORD *)&v165 + 1) = v149;
      LOBYTE(v166) = 3;
      BYTE1(v166) = v89;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v88 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v92 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v93 = *((_QWORD *)v92 + 47);
      v94 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v92 + 32), v88);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v93, v94);
      v95 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      if ((v26 & 0x80000000) != 0)
      {
        v145[0] = v134;
        v146 = ".";
        v147 = 776;
        v148 = v145;
        v150 = v135;
        v96 = 2;
        v97 = 8;
        v98 = &v148;
      }
      else
      {
        LODWORD(v148) = v135;
        v96 = 8;
        v97 = 1;
        v98 = (_QWORD **)v148;
      }
      v151 = v96;
      v152 = v97;
      *(_QWORD *)&v164 = "agc.image_unique_id";
      *(_QWORD *)&v165 = v98;
      *((_QWORD *)&v165 + 1) = v149;
      LOBYTE(v166) = 3;
      BYTE1(v166) = v96;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v95 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v99 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v100 = *((_QWORD *)v99 + 47);
      v101 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v99 + 32), v95);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v100, v101);
      NullValue = (uint64_t)v132;
      if (!v132)
      {
        v103 = (llvm::Constant *)llvm::PointerType::get();
        NullValue = llvm::Constant::getNullValue(v103, v104);
      }
      *(_QWORD *)&v164 = NullValue;
      v105 = (uint64_t)v131;
      if (!v131)
      {
        v106 = (llvm::Constant *)llvm::PointerType::get();
        v105 = llvm::Constant::getNullValue(v106, v107);
      }
      *((_QWORD *)&v164 + 1) = v105;
      *(_QWORD *)&v165 = v130;
      *((_QWORD *)&v165 + 1) = v129;
      *(_QWORD *)&v166 = v60;
      *((_QWORD *)&v166 + 1) = v67;
      *(_QWORD *)&v167 = v74;
      *((_QWORD *)&v167 + 1) = v81;
      *(_QWORD *)&v168 = v88;
      *((_QWORD *)&v168 + 1) = v95;
      llvm::ConstantStruct::get();
      v108 = llvm::User::operator new((llvm::User *)0x58);
      if ((v26 & 0x80000000) != 0)
      {
        v145[0] = v134;
        v146 = ".";
        v147 = 776;
        v148 = v145;
        v150 = v135;
        v109 = 2;
        v110 = 8;
        v111 = &v148;
      }
      else
      {
        LODWORD(v148) = v135;
        v109 = 8;
        v110 = 1;
        v111 = (_QWORD **)v148;
      }
      v12 = v128;
      v13 = a1 + 46;
      v151 = v109;
      v152 = v110;
      *(_QWORD *)&v164 = "agc.image_state_struct_ptr";
      *(_QWORD *)&v165 = v111;
      *((_QWORD *)&v165 + 1) = v149;
      LOBYTE(v166) = 3;
      BYTE1(v166) = v109;
      llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v108 + 80) |= 1u;
      llvm::GlobalVariable::setInitializer();
      v164 = 4uLL;
      v112 = v108;
      *(_QWORD *)&v165 = v108;
      if (v108 != -8192)
      {
        v112 = v108;
        if (v108 != -4096)
        {
          v112 = v108;
          if (v108)
          {
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v164);
            v112 = v165;
          }
        }
      }
      std::__tree<llvm::WeakVH>::__emplace_unique_key_args<llvm::WeakVH,llvm::WeakVH>(a1 + 103, v112, &v164);
      if ((_QWORD)v165 != -8192 && (_QWORD)v165 != -4096 && (_QWORD)v165)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v164);
      std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)v140, *((_DWORD *)v11 + 7), v133)[3] = v108;
      v113 = v11[1];
      if (v113)
      {
        do
        {
          v114 = (_QWORD **)v113;
          v113 = (_QWORD *)*v113;
        }
        while (v113);
      }
      else
      {
        do
        {
          v114 = (_QWORD **)v11[2];
          v115 = *v114 == v11;
          v11 = v114;
        }
        while (!v115);
      }
      v11 = v114;
    }
    while (v114 != v144);
  }
  *(_QWORD *)&v164 = v140;
  LOBYTE(v148) = 1;
  v155[0] = &off_1E7EB91E8;
  v155[1] = &v148;
  v155[2] = &v164;
  v156 = v155;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a2 + 24), (uint64_t)v155);
  v118 = v156;
  if (v156 == v155)
  {
    v119 = 4;
    v118 = v155;
  }
  else
  {
    if (!v156)
      goto LABEL_92;
    v119 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v118 + 8 * v119))(v118, v116, v117);
LABEL_92:
  v153[0] = &off_1E7EB9278;
  v153[1] = &v148;
  v153[2] = &v164;
  v154 = v153;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(v127 + 24), (uint64_t)v153);
  v123 = v154;
  if (v154 == v153)
  {
    v124 = 4;
    v123 = v153;
    goto LABEL_96;
  }
  if (v154)
  {
    v124 = 5;
LABEL_96:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v123 + 8 * v124))(v123, v121, v122);
  }
  v120 = (_BYTE)v148 != 0;
LABEL_98:
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)v140);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v144[0]);
  if (v161 != v163)
    free(v161);
  return v120;
}

void AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(AGCLLVMUserObject *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t *BindlessHeapIndexForRange;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t **v19;
  _QWORD *v20;
  AGCLLVMUserObject *v21;
  char *v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25[2];
  _QWORD v26[2];
  _QWORD **v27;
  _QWORD *v28[2];
  char v29;
  char v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v29 = 1;
  v28[0] = 0;
  v28[1] = 0;
  v26[1] = &v27;
  v27 = v28;
  v26[0] = &v30;
  v37[0] = &off_1E7EB92C0;
  v37[1] = v26;
  v38 = v37;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)a1 + 365), (uint64_t)v37);
  v2 = v38;
  if (v38 == v37)
  {
    v3 = 4;
    v2 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v35[0] = &off_1E7EB9350;
  v35[1] = v26;
  v36 = v35;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)a1 + 389), (uint64_t)v35);
  v4 = v36;
  if (v36 == v35)
  {
    v5 = 4;
    v4 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v25[0] = 0;
  v25[1] = 0;
  v24 = (uint64_t *)v25;
  v6 = v27;
  if (v27 != v28)
  {
    do
    {
      v18 = *(char **)((char *)v6 + 28);
      LODWORD(v19) = *((_DWORD *)v6 + 9);
      BindlessHeapIndexForRange = (uint64_t *)AGCLLVMUserObject::allocateBindlessHeapIndexForRange(a1, (unsigned int *)&v18 + 1, (uint64_t)a1 + 4144);
      std::__tree<std::__value_type<unsigned int,llvm::GlobalVariable *>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,llvm::GlobalVariable *>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v24, v18, &v18)[5] = BindlessHeapIndexForRange;
      v8 = v6[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v6[2];
          v10 = *v9 == v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v28);
  }
  v23 = 0;
  v18 = &v30;
  v19 = &v24;
  v20 = &v27;
  v21 = a1;
  v22 = &v23;
  v33[0] = &off_1E7EB9398;
  v33[1] = &v29;
  v33[2] = &v18;
  v34 = v33;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)a1 + 365), (uint64_t)v33);
  v11 = v34;
  if (v34 == v33)
  {
    v12 = 4;
    v11 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_23;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_23:
  v23 = 1;
  v31[0] = &off_1E7EB9428;
  v31[1] = &v29;
  v31[2] = &v18;
  v32 = v31;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)a1 + 389), (uint64_t)v31);
  v13 = v32;
  if (v32 == v31)
  {
    v14 = 4;
    v13 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_28;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_28:
  v15 = v24;
  if (v24 != (uint64_t *)v25)
  {
    do
    {
      AGCLLVMUserObject::lowerGlobalBindingVariable(a1, (llvm::GlobalVariable *)v15[5]);
      v16 = (uint64_t *)v15[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v15[2];
          v10 = *v17 == (_QWORD)v15;
          v15 = v17;
        }
        while (!v10);
      }
      v15 = v17;
    }
    while (v17 != (uint64_t *)v25);
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v25[0]);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v28[0]);
}

uint64_t AGCLLVMUserObject::allTextureUsesAreDirect(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 1;
  v6[0] = &off_1E7EB8468;
  v6[1] = &v5;
  v6[2] = a1;
  v7 = v6;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(a2, (uint64_t)v6);
  v2 = v7;
  if (v7 == v6)
  {
    v3 = 4;
    v2 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v5;
}

unint64_t addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex16x2,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>(unint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  _BYTE v26[32];

  v3 = *(_QWORD **)(result + 8);
  v4 = (_QWORD *)(result + 16);
  if (v3 != (_QWORD *)(result + 16))
  {
    v6 = (_QWORD *)(a3 + 8);
    do
    {
      v7 = *v6;
      if (!*v6)
        goto LABEL_13;
      v8 = *((_DWORD *)v3 + 9);
      v9 = v6;
      do
      {
        v10 = *(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32);
        v11 = v10 > v8;
        if (v10 <= v8)
          v12 = (uint64_t *)(v7 + 8);
        else
          v12 = (uint64_t *)v7;
        if (v11)
          v9 = (_QWORD *)v7;
        v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || v8 < *((_DWORD *)v9 + 8))
LABEL_13:
        v9 = v6;
      v13 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = 32 * v13;
        v16 = (unsigned __int8 *)(*(_QWORD *)a2 + 8);
        do
        {
          v17 = *v16;
          v16 += 32;
          v14 += (v17 >> 1) & 1;
          v15 -= 32;
        }
        while (v15);
        v18 = v14 << 16;
      }
      else
      {
        v18 = 0;
      }
      *((_DWORD *)v3 + 9) = v18 | v13;
      v19 = *((_DWORD *)v3 + 7);
      if (v19 <= *((_DWORD *)v3 + 8))
      {
        v20 = (uint64_t)(v9 + 4);
        do
        {
          AGCLLVMUserObject::Texture::getAllocationInfo((uint64_t)v26, v20, v19);
          result = llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>(a2, (unint64_t)v26);
          v21 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 8));
          v22 = *(_OWORD *)(result + 16);
          *v21 = *(_OWORD *)result;
          v21[1] = v22;
          ++*(_DWORD *)(a2 + 8);
          ++v19;
        }
        while (v19 <= *((_DWORD *)v3 + 8));
      }
      v23 = (_QWORD *)v3[1];
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = (_QWORD *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v3[2];
          v25 = *v24 == (_QWORD)v3;
          v3 = v24;
        }
        while (!v25);
      }
      v3 = v24;
    }
    while (v24 != v4);
  }
  return result;
}

_QWORD *std::vector<llvm::Value *>::vector<llvm::SmallPtrSetIterator<llvm::Value *>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 == a4)
    return a1;
  v7 = a2;
  v8 = 0;
  v9 = v7;
  do
  {
    do
    {
      if (++v9 == a3)
      {
        v9 = a3;
        break;
      }
    }
    while ((unint64_t)*v9 >= 0xFFFFFFFFFFFFFFFELL);
    ++v8;
  }
  while (v9 != a4);
  std::vector<llvm::Value *>::__vallocate[abi:nn180100](a1, v8);
  v10 = (_QWORD *)a1[1];
  do
  {
    v11 = *v7++;
    *v10 = v11;
    while (v7 != a3)
    {
      if ((unint64_t)*v7 < 0xFFFFFFFFFFFFFFFELL)
        goto LABEL_14;
      ++v7;
    }
    v7 = a3;
LABEL_14:
    ++v10;
  }
  while (v7 != a4);
  a1[1] = v10;
  return a1;
}

void AGCLLVMUserObject::allocateBindlessTextures(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  char *v19;
  llvm::SmallPtrSetImplBase *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  llvm::Function *v24;
  BOOL v25;
  BOOL v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Function *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  const char *v40;
  const char *Value;
  unsigned int v42;
  const char *v43;
  const char *v44;
  const char *v45;
  _DWORD *v46;
  int v47;
  size_t v48;
  char *v49;
  size_t v50;
  char *v51;
  _QWORD **v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  char *v57;
  _QWORD *v58;
  _QWORD **v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  BOOL v64;
  unsigned int v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  int v74;
  _QWORD **v75;
  uint64_t *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t *v79;
  unsigned int v80;
  BOOL v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  _OWORD *v90;
  _OWORD *v91;
  __int128 v92;
  _QWORD *v93;
  _QWORD **v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  char *v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  void **v104;
  void *v105;
  uint64_t (***v106)();
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  char v123;
  char *v124;
  int v125;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *v126;
  char *v130;
  _QWORD *v131;
  unsigned int v132;
  _QWORD v133[3];
  _QWORD *v134;
  _QWORD v135[3];
  _QWORD *v136;
  _QWORD v137[3];
  _QWORD *v138;
  _QWORD v139[3];
  _QWORD *v140;
  _QWORD v141[3];
  _QWORD *v142;
  _QWORD v143[3];
  _QWORD *v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _BYTE v149[240];
  _QWORD v150[3];
  _QWORD *v151;
  _QWORD v152[3];
  _QWORD *v153;
  _QWORD v154[3];
  _QWORD *v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE v160[48];
  uint64_t (**v161)(IntervalEqClasses *__hidden, unsigned int, unsigned int);
  _QWORD **v162;
  _QWORD *v163[2];
  void *v164[2];
  _BYTE v165[32];
  unsigned int v166;
  uint64_t (**__src)();
  uint64_t (***v168)(IntervalEqClasses *__hidden, unsigned int, unsigned int);
  _QWORD *v169;
  uint64_t (***p_src)();
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v7 = (unint64_t)(a2[1] - *a2) >> 3;
  v132 = v7;
  v125 = v7;
  v163[0] = 0;
  v163[1] = 0;
  v161 = &off_1E7EB7DE8;
  v162 = v163;
  v164[0] = v165;
  v164[1] = (void *)0x800000000;
  v166 = 0;
  llvm::IntEqClasses::grow((llvm::IntEqClasses *)v164);
  v9 = *a2;
  v8 = a2[1];
  v10 = v8 - *a2;
  v126 = (AGCLLVMUserObject::TextureSamplerPlaceholderFunctions *)a5;
  if (v8 == *a2)
  {
    v124 = 0;
    v12 = 0;
    goto LABEL_52;
  }
  if ((unint64_t)v10 >= 0x1FFFFFFFFFFFFFF9)
    abort();
  v11 = v10 >> 3;
  v12 = (char *)operator new(8 * v10);
  v124 = &v12[64 * v11];
  v13 = v11 << 6;
  v14 = v12 + 32;
  do
  {
    *((_QWORD *)v14 - 4) = v14;
    *((_QWORD *)v14 - 3) = v14;
    *((_QWORD *)v14 - 2) = 4;
    *((_DWORD *)v14 - 2) = 0;
    v14 += 64;
    v13 -= 64;
  }
  while (v13);
  if (v8 != v9)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      v145 = v149;
      v146 = (uint64_t)v149;
      v147 = 8;
      v148 = 0;
      __src = *(uint64_t (***)())(v9 + 8 * v15);
      v156 = &v158;
      v157 = (void *)0x800000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v156, &__src, &v168);
      v17 = v157;
      if (!(_DWORD)v157)
        goto LABEL_45;
      v18 = 0;
      v19 = v12;
      v20 = (llvm::SmallPtrSetImplBase *)&v12[64 * v15];
      do
      {
        v21 = *((_QWORD *)v156 + v17 - 1);
        LODWORD(v157) = v17 - 1;
        llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, (llvm::SmallPtrSetImplBase *)&v145, (void *)v21);
        if (!(_BYTE)v169)
          goto LABEL_37;
        v22 = *(unsigned __int8 *)(v21 + 16);
        if (v21 && v22 == 84)
        {
          v23 = *(_QWORD *)(v21 - 32);
          if (v23)
          {
            if (!*(_BYTE *)(v23 + 16) && *(_QWORD *)(v23 + 24) == *(_QWORD *)(v21 + 72))
            {
              v24 = (llvm::Function *)llvm::Value::stripPointerCasts((llvm::Value *)v23);
              if (!*((_BYTE *)v24 + 16))
              {
                v33 = v24;
                if (AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains((const char **)a3, v24)
                  || AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains((const char **)a4, v33)
                  || AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains((const char **)a5, v33))
                {
                  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v131, *(llvm::Constant **)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF) + 32));
                  IntervalMap<unsigned int>::insert((uint64_t)&v161, (unint64_t)v131, v16);
                  llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, v20, (void *)v21);
                  goto LABEL_37;
                }
              }
            }
          }
          v22 = *(unsigned __int8 *)(v21 + 16);
        }
        if (v21 && v22 == 85)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v156, *(_QWORD *)(v21 - 64));
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v156, *(_QWORD *)(v21 - 32));
        }
        else
        {
          if (v21)
            v25 = (v22 - 21) >= 7;
          else
            v25 = 0;
          if (v25)
          {
            v26 = v22 == 60 || v22 == 84;
            v27 = v26;
            v28 = *(_DWORD *)(v21 + 20);
            if ((v28 & 0x40000000) != 0)
            {
              v30 = *(uint64_t **)(v21 - 8);
              v29 = v28 & 0x7FFFFFF;
            }
            else
            {
              v29 = v28 & 0x7FFFFFF;
              v30 = (uint64_t *)(v21 - 32 * v29);
            }
            v18 |= v27;
            if (v29)
            {
              v31 = 32 * v29;
              do
              {
                v32 = *v30;
                v30 += 4;
                llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v156, v32);
                v31 -= 32;
              }
              while (v31);
            }
          }
          else
          {
            v18 |= v22 == 21;
          }
        }
LABEL_37:
        v17 = v157;
      }
      while ((_DWORD)v157);
      v12 = v19;
      if ((v18 & 1) != 0)
        llvm::IntEqClasses::join((llvm::IntEqClasses *)v164);
LABEL_45:
      if (v156 != &v158)
        free(v156);
      if ((void *)v146 != v145)
        free((void *)v146);
      v15 = (v16 + 1);
      v9 = *a2;
      v16 = v15;
    }
    while (v15 < (a2[1] - *a2) >> 3);
  }
LABEL_52:
  v145 = &v161;
  v146 = (uint64_t)&v132;
  v154[0] = &off_1E7EB7FA0;
  v154[1] = &v145;
  v155 = v154;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a3 + 24), (uint64_t)v154);
  v34 = v155;
  if (v155 == v154)
  {
    v35 = 4;
    v34 = v154;
  }
  else
  {
    if (!v155)
      goto LABEL_57;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_57:
  v152[0] = &off_1E7EB8030;
  v152[1] = &v145;
  v153 = v152;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a4 + 24), (uint64_t)v152);
  v36 = v153;
  if (v153 == v152)
  {
    v37 = 4;
    v36 = v152;
  }
  else
  {
    if (!v153)
      goto LABEL_62;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_62:
  v150[0] = &off_1E7EB8078;
  v150[1] = &v145;
  v151 = v150;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(a5[3], (uint64_t)v150);
  v38 = v151;
  if (v151 == v150)
  {
    v39 = 4;
    v38 = v150;
  }
  else
  {
    if (!v151)
      goto LABEL_67;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_67:
  llvm::IntEqClasses::compress((llvm::IntEqClasses *)v164);
  if ((MGGetBoolAnswer() & 1) != 0)
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_FORCE_BINDLESS", v40);
    if (Value)
    {
      if (*Value != 48 && atoi(Value))
        goto LABEL_72;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 1780))
    goto LABEL_72;
  if (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_MAX_TEXTURE_REGISTERS", v43))
  {
    if (!MGGetBoolAnswer()
      || (v45 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_MAX_TEXTURE_REGISTERS", v44)) == 0
      || *v45 == 48)
    {
LABEL_72:
      v42 = 0;
      goto LABEL_80;
    }
    v42 = atoi(v45);
  }
  else
  {
    v42 = 48;
  }
LABEL_80:
  v46 = v164[0];
  v47 = *((_DWORD *)v164[0] + v132);
  if (v166)
  {
    v48 = 12 * v166;
    v49 = (char *)operator new(v48);
    v50 = 12 * ((v48 - 12) / 0xC) + 12;
    bzero(v49, v50);
    v51 = &v49[v50];
  }
  else
  {
    v49 = 0;
    v51 = 0;
  }
  v52 = v162;
  if (v162 != v163)
  {
    do
    {
      v53 = *((_DWORD *)v52 + 7);
      v54 = *((_DWORD *)v52 + 8);
      v55 = *((unsigned int *)v52 + 9);
      v56 = v46[v55];
      v57 = &v49[12 * v56];
      if (!v57[4])
        v57[4] = 1;
      *(_DWORD *)v57 = v55;
      *(_DWORD *)&v49[12 * v56 + 8] += v54 - v53 + 1;
      v58 = v52[1];
      if (v58)
      {
        do
        {
          v59 = (_QWORD **)v58;
          v58 = (_QWORD *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          v59 = (_QWORD **)v52[2];
          v26 = *v59 == v52;
          v52 = v59;
        }
        while (!v26);
      }
      v52 = v59;
    }
    while (v59 != v163);
  }
  v130 = v12;
  llvm::IntEqClasses::uncompress((llvm::IntEqClasses *)v164);
  if (v51 != v49)
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0xAAAAAAAAAAAAAAABLL * ((v51 - v49) >> 2);
    do
    {
      if (v49[12 * v60 + 4])
        v64 = v47 == v62;
      else
        v64 = 1;
      if (!v64)
      {
        v65 = *(_DWORD *)&v49[12 * v60 + 8] + v61;
        if (v65 <= v42)
          v61 = v65;
        llvm::IntEqClasses::join((llvm::IntEqClasses *)v164);
      }
      v60 = ++v62;
    }
    while (v63 > v62);
  }
  llvm::IntEqClasses::compress((llvm::IntEqClasses *)v164);
  if ((MGGetBoolAnswer() & 1) != 0)
  {
    v73 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DEBUG_LLVM_IR", v66);
    if (v73 && *v73 != 48 && atoi(v73))
    {
      printMessage((char **)&AGCPrinter, "----- Texture allocations ------\n", v67, v68, v69, v70, v71, v72, v123);
      v74 = 1;
    }
    else
    {
      v74 = 0;
    }
  }
  else
  {
    v74 = 0;
  }
  v145 = &v147;
  v146 = 0x800000000;
  v75 = v162;
  if (v162 != v163)
  {
    v76 = a1 + 120;
    do
    {
      if (*((_DWORD *)v164[0] + *((unsigned int *)v75 + 9)) == *((_DWORD *)v164[0] + (v125 + 1)))
      {
        v77 = *v76;
        if (!*v76)
          goto LABEL_122;
        v78 = *((_DWORD *)v75 + 7);
        v79 = a1 + 120;
        do
        {
          v80 = *(_DWORD *)(v77 + 36) + *(_DWORD *)(v77 + 32);
          v81 = v80 > v78;
          if (v80 <= v78)
            v82 = (uint64_t *)(v77 + 8);
          else
            v82 = (uint64_t *)v77;
          if (v81)
            v79 = (uint64_t *)v77;
          v77 = *v82;
        }
        while (*v82);
        if (v79 == v76 || v78 < *((_DWORD *)v79 + 8))
LABEL_122:
          v79 = a1 + 120;
        if ((_DWORD)v146)
        {
          v83 = 0;
          v84 = 32 * v146;
          v85 = (unsigned __int8 *)v145 + 8;
          do
          {
            v86 = *v85;
            v85 += 32;
            v83 += (v86 >> 1) & 1;
            v84 -= 32;
          }
          while (v84);
          v87 = v83 << 16;
        }
        else
        {
          v87 = 0;
        }
        *((_DWORD *)v75 + 9) = v87 | v146;
        v88 = *((_DWORD *)v75 + 7);
        if (v88 <= *((_DWORD *)v75 + 8))
        {
          v89 = (uint64_t)(v79 + 4);
          do
          {
            AGCLLVMUserObject::Texture::getAllocationInfo((uint64_t)&v156, v89, v88);
            v90 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>((uint64_t)&v145, (unint64_t)&v156);
            v91 = (char *)v145 + 32 * v146;
            v92 = v90[1];
            *v91 = *v90;
            v91[1] = v92;
            LODWORD(v146) = v146 + 1;
            ++v88;
          }
          while (v88 <= *((_DWORD *)v75 + 8));
        }
        if ((v74 & 1) != 0)
          printMessage((char **)&AGCPrinter, "[%08x - %08x] TS%d - TS%d", v67, v68, v69, v70, v71, v72, *((_DWORD *)v75 + 7));
      }
      else if (v74)
      {
        printMessage((char **)&AGCPrinter, "[%08x - %08x] bindless", v67, v68, v69, v70, v71, v72, *((_DWORD *)v75 + 7));
      }
      v93 = v75[1];
      if (v93)
      {
        do
        {
          v94 = (_QWORD **)v93;
          v93 = (_QWORD *)*v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          v94 = (_QWORD **)v75[2];
          v26 = *v94 == v75;
          v75 = v94;
        }
        while (!v26);
      }
      v75 = v94;
    }
    while (v94 != v163);
  }
  AGCLLVMUserObject::createTextureArrays(a1, (uint64_t)&v145);
  v156 = v160;
  v157 = v160;
  v158 = 4;
  LODWORD(v159) = 0;
  v95 = *a2;
  if (a2[1] != *a2)
  {
    v96 = 0;
    v97 = 0;
    do
    {
      if (*((_DWORD *)v164[0] + v96) == *((_DWORD *)v164[0] + v132))
      {
        llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, (llvm::SmallPtrSetImplBase *)(a1 + 125), *(void **)(v95 + 8 * v96));
      }
      else
      {
        v98 = &v130[64 * v96];
        v99 = (void **)*((_QWORD *)v98 + 1);
        if (v99 == *(void ***)v98)
          v100 = 20;
        else
          v100 = 16;
        v101 = *(unsigned int *)&v98[v100];
        if ((_DWORD)v101)
        {
          v102 = 8 * v101;
          v103 = v99;
          while ((unint64_t)*v103 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v103;
            v102 -= 8;
            if (!v102)
              goto LABEL_160;
          }
        }
        else
        {
          v103 = v99;
        }
        v104 = &v99[v101];
        if (v103 != v104)
        {
          v105 = *v103;
LABEL_156:
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)&__src, (llvm::SmallPtrSetImplBase *)&v156, v105);
          while (++v103 != v104)
          {
            v105 = *v103;
            if ((unint64_t)*v103 < 0xFFFFFFFFFFFFFFFELL)
            {
              if (v103 != v104)
                goto LABEL_156;
              break;
            }
          }
        }
      }
LABEL_160:
      v95 = *a2;
      v96 = ++v97;
    }
    while (v97 < (unint64_t)((a2[1] - *a2) >> 3));
  }
  v143[0] = &off_1E7EB8108;
  v143[1] = a3;
  v143[2] = a1;
  v144 = v143;
  __src = &off_1E7EB80C0;
  v168 = &v161;
  v169 = v143;
  p_src = &__src;
  iterateResourceUsers(&v156, (uint64_t)&__src);
  v106 = p_src;
  if (p_src == &__src)
  {
    v108 = 4;
    v106 = &__src;
    v107 = v124;
  }
  else
  {
    v107 = v124;
    if (!p_src)
      goto LABEL_166;
    v108 = 5;
  }
  (*v106)[v108]();
LABEL_166:
  v109 = v144;
  if (v144 == v143)
  {
    v110 = 4;
    v109 = v143;
  }
  else
  {
    if (!v144)
      goto LABEL_171;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_171:
  if (v157 != v156)
    free(v157);
  v159 = 0;
  v158 = 0;
  v157 = &v158;
  v156 = &off_1E7EB7E00;
  v141[0] = &off_1E7EB8150;
  v141[1] = &v156;
  v142 = v141;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a4 + 24), (uint64_t)v141);
  v111 = v142;
  if (v142 == v141)
  {
    v112 = 4;
    v111 = v141;
  }
  else
  {
    if (!v142)
      goto LABEL_178;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_178:
  v139[0] = &off_1E7EB81E0;
  v139[1] = &v156;
  v140 = v139;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v126 + 3), (uint64_t)v139);
  v113 = v140;
  if (v140 == v139)
  {
    v114 = 4;
    v113 = v139;
  }
  else
  {
    if (!v140)
      goto LABEL_183;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_183:
  addAllocationInfoForRanges<AGCLLVMUserObject::ResourceArrayIndex32,AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator>((unint64_t)&v156, (uint64_t)&v145, (uint64_t)(a1 + 119));
  AGCLLVMUserObject::createTextureHeapIndexArray((uint64_t)a1, (uint64_t)&v145);
  if (*((_QWORD *)v126 + 4))
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)&v145, (uint64_t)(a1 + 221));
  __src = (uint64_t (**)())a1;
  v131 = a1;
  v137[0] = &off_1E7EB8270;
  v137[1] = &v156;
  v137[2] = &__src;
  v138 = v137;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a4 + 24), (uint64_t)v137);
  v115 = v138;
  if (v138 == v137)
  {
    v116 = 4;
    v115 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_190;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_190:
  v135[0] = &off_1E7EB8348;
  v135[1] = &v156;
  v135[2] = &v131;
  v136 = v135;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*((_QWORD *)v126 + 3), (uint64_t)v135);
  v117 = v136;
  if (v136 == v135)
  {
    v118 = 4;
    v117 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_195;
    v118 = 5;
  }
  (*(void (**)(void))(*v117 + 8 * v118))();
LABEL_195:
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy((_QWORD *)v158);
  v156 = a1;
  v133[0] = &off_1E7EB83D8;
  v133[1] = &v156;
  v134 = v133;
  AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::iterateFunctions(*(_QWORD *)(a3 + 24), (uint64_t)v133);
  v119 = v134;
  if (v134 == v133)
  {
    v120 = 4;
    v119 = v133;
  }
  else
  {
    if (!v134)
      goto LABEL_200;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_200:
  if (v145 != &v147)
    free(v145);
  if (v49)
    operator delete(v49);
  if (v130)
  {
    while (v107 != v130)
    {
      v122 = (void *)*((_QWORD *)v107 - 8);
      v121 = (void *)*((_QWORD *)v107 - 7);
      v107 -= 64;
      if (v121 != v122)
        free(v121);
    }
    operator delete(v130);
  }
  v161 = &off_1E7EB7DE8;
  if (v164[0] != v165)
    free(v164[0]);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v163[0]);
}

BOOL AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains(const char **this, llvm::Function *a2)
{
  uint64_t Name;
  size_t v4;
  const char *v5;
  const void *v6;
  size_t v7;
  size_t v8;

  Name = llvm::Value::getName(a2);
  v5 = *this;
  if (!v5)
    return 1;
  v6 = (const void *)Name;
  v7 = v4;
  v8 = strlen(v5);
  if (v7 < v8)
    return 0;
  return !v8 || memcmp(v6, v5, v8) == 0;
}

void AGCLLVMUserObject::createTextureArrays(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = 0x400000000;
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)a2;
    v6 = 32 * v4;
    do
    {
      if ((*(_BYTE *)(v5 + 8) & 2) != 0)
      {
        v7 = (_OWORD *)llvm::SmallVectorTemplateCommon<AGCLLVMAGPVertexShader::VertexAttribInputInfo,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<AGCLLVMAGPVertexShader::VertexAttribInputInfo,true>>((uint64_t)&v12, v5);
        v8 = (char *)v12 + 32 * v13;
        v9 = v7[1];
        *v8 = *v7;
        v8[1] = v9;
        LODWORD(v13) = v13 + 1;
      }
      v5 += 32;
      v6 -= 32;
    }
    while (v6);
  }
  v10 = AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 149));
  AGCLLVMUserObject::setupTextureArrayRasterOrderGroup((uint64_t)a1, a2, v10);
  v11 = AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)&v12, (uint64_t)(a1 + 157));
  AGCLLVMUserObject::setupTextureArrayRasterOrderGroup((uint64_t)a1, (uint64_t)&v12, v11);
  if (*(_BYTE *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 1755))
  {
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 165));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 173));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 189));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 197));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 181));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 205));
    AGCLLVMUserObject::createIndirectResourceArray<AGCLLVMUserObject::Texture::AllocationInfo>(a1, (uint64_t *)a2, (uint64_t)(a1 + 221));
  }
  if (v12 != v14)
    free(v12);
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB83D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB83D8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_12>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  v6[0] = &off_1E7EB8420;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8420;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8420;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_11>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  llvm::Instruction *v7;
  uint64_t *v8;
  llvm::Value *v9;
  llvm::Type *v10;
  void *AlignedLoad;
  llvm::SmallPtrSetImplBase *v12;
  _BYTE v14[32];
  __int16 v15;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((_QWORD *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  v5 = *(_QWORD *)(v4 + 32);
  if (v5)
    v6 = v5 == *(_QWORD *)(v4 + 40) + 40;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (llvm::Instruction *)(v5 - 24);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), v7);
  v8 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v15 = 257;
  v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  AlignedLoad = (void *)llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v14);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  v12 = (llvm::SmallPtrSetImplBase *)(v3 + 125);
  if (llvm::SmallPtrSetImplBase::erase_imp(v12, v2))
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v14, v12, AlignedLoad);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB8348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8348;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_10>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 16);
  v7[0] = &off_1E7EB8390;
  v7[1] = v4;
  v8 = v7;
  replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(v2, v3, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

uint64_t replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Constant *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E7EB82B8;
  v7[1] = a2;
  v7[2] = a3;
  v8 = v7;
  v3 = iterateResourceUsers(a1, v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB82B8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8390;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8390;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t Add;
  uint64_t v8;
  char *v9;
  llvm::Type **v10;
  uint64_t **v11;
  uint64_t v12;
  llvm::Value *v13;
  llvm::Type *v14;
  uint64_t GEP;
  uint64_t v16;
  uint64_t v17;
  void *Cast;
  _BYTE v20[32];
  __int16 v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), *a2);
  v4 = (llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40);
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v20);
  v8 = llvm::ConstantInt::get();
  v22 = v24;
  v23 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v22, 1uLL, v8);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, Add);
  v9 = (char *)v3 + *(_QWORD *)(*v3 - 24);
  v10 = (llvm::Type **)v3[223];
  v11 = (uint64_t **)v22;
  v12 = v23;
  v21 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(v10, v13);
  GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)(v9 + 40), (uint64_t)v14, (uint64_t *)v10, v11, v12, (uint64_t)v20);
  v16 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 40;
  v17 = *(_QWORD *)v2;
  v21 = 257;
  Cast = (void *)llvm::IRBuilderBase::CreateCast(v16, 49, GEP, v17, (uint64_t)v20);
  if (llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v3 + 125), v2))
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v20, (llvm::SmallPtrSetImplBase *)(v3 + 125), Cast);
  if (v22 != v24)
    free(v22);
  return Cast;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB8270;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8270;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_9>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 16);
  v7[0] = &off_1E7EB8300;
  v7[1] = v4;
  v8 = v7;
  replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(v2, v3, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8300;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8300;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_7>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  AGCLLVMUserObject *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t Add;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *Cast;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  llvm::SmallPtrSetImplBase *v15;
  _BYTE v17[32];
  __int16 v18;

  v2 = *a2;
  v3 = *(AGCLLVMUserObject **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40), *a2);
  v4 = (AGCLLVMUserObject *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40);
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v18 = 257;
  Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v17);
  v8 = (uint64_t)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40;
  v9 = *(_QWORD *)v2;
  v18 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v17);
  v11 = AGCLLVMUserObject::buildImageHeapIndex(v3, Cast);
  v12 = (uint64_t)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40;
  v13 = *(_QWORD *)v2;
  v18 = 257;
  v14 = (void *)llvm::IRBuilderBase::CreateCast(v12, 48, v11, v13, (uint64_t)v17);
  v15 = (AGCLLVMUserObject *)((char *)v3 + 1000);
  if (llvm::SmallPtrSetImplBase::erase_imp(v15, v2))
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v17, v15, v14);
  return v14;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB81E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB81E0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB8228;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8228;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8228;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8150;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8150;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB8198;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8198;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8198;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_5::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB80C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB80C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::SmallPtrSet<llvm::CallInst *,4u>>(llvm::SmallPtrSet<llvm::CallInst *,4u> &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v16;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  v7 = *(_QWORD *)(v4 + 16);
  v6 = v4 + 16;
  v5 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v6;
  do
  {
    v9 = *(_DWORD *)(v5 + 32);
    v10 = v9 >= v16;
    if (v9 >= v16)
      v11 = (uint64_t *)v5;
    else
      v11 = (uint64_t *)(v5 + 8);
    if (v10)
      v8 = v5;
    v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16)
LABEL_12:
    v8 = v6;
  v12 = *(_QWORD *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    v13 = ((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    v14 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)v3, (*(_DWORD *)(v8 + 36) + ((*(_DWORD *)v14 - *(_DWORD *)(v8 + 28)) << 16)) & 0xFFFF0000 | (unsigned __int16)(*(_WORD *)v14 - *(_WORD *)(v8 + 28) + *(_DWORD *)(v8 + 36)));
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB8108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8108;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  llvm::Function *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  llvm::Instruction *v10;
  uint64_t *v11;
  llvm::Value *v12;
  llvm::Type *v13;
  uint64_t AlignedLoad;
  uint64_t v15;
  llvm::Value *Cast;
  uint64_t v17;
  AGCLLVMUserObject *v18;
  llvm::Value *v19;
  uint64_t AddOffset;
  uint64_t v21;
  llvm::Value *v22;
  llvm::IRBuilderBase *v23;
  llvm::Value *v24;
  llvm::Value *Shl;
  uint64_t Add;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  AGCLLVMUserObject *v30;
  llvm::Value *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[32];
  __int16 v37;
  _BYTE v38[32];
  __int16 v39;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 16);
  if (*a2
    && (v5 = *(_QWORD *)(v2 - 32)) != 0
    && !*(_BYTE *)(v5 + 16)
    && *(_QWORD *)(v5 + 24) == *(_QWORD *)(v2 + 72)
    && (v6 = (llvm::Function *)llvm::Value::stripPointerCasts((llvm::Value *)v5), !*((_BYTE *)v6 + 16))
    && AGCLLVMUserObject::TextureSamplerPlaceholderFunctions::contains(*(const char ***)(a1 + 8), v6))
  {
    v7 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 96);
    v8 = *(_QWORD *)(v7 + 32);
    if (v8)
      v9 = v8 == *(_QWORD *)(v7 + 40) + 40;
    else
      v9 = 1;
    if (v9)
      v10 = 0;
    else
      v10 = (llvm::Instruction *)(v8 - 24);
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v3 - 24) + v3 + 40), v10);
    v11 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v3 - 24) + v3 + 40);
    v39 = 257;
    v13 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v7, v12);
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v11, v13, v7, 0, (uint64_t)v38);
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 - 24) + v3 + 240);
    v37 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v11, 47, AlignedLoad, v15, (uint64_t)v36);
    v17 = *(_QWORD *)(*(_QWORD *)v3 - 24) + v3 + 40;
    v18 = (AGCLLVMUserObject *)llvm::ConstantInt::get();
    AddOffset = AGCLLVMUserObject::ResourceArrayIndex16x2::createAddOffset((AGCLLVMUserObject::ResourceArrayIndex16x2 *)v3, v18, *(llvm::Value **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)), v19);
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 - 24) + v3 + 240);
    v39 = 257;
    v22 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v17, 39, AddOffset, v21, (uint64_t)v38);
    v23 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v3 - 24) + v3 + 40);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v39 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v23, Cast, v24, (const llvm::Twine *)v38);
    v37 = 257;
    Add = llvm::IRBuilderBase::CreateAdd(v23, Shl, v22, (const llvm::Twine *)v36);
    v27 = *(_QWORD *)(*(_QWORD *)v3 - 24) + v3 + 40;
    v28 = *(_QWORD *)v2;
    v39 = 257;
    v29 = (void *)llvm::IRBuilderBase::CreateCast(v27, 48, Add, v28, (uint64_t)v38);
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v38, (llvm::SmallPtrSetImplBase *)(v3 + 1096), v29);
  }
  else
  {
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v3 - 24) + v3 + 40), (llvm::Instruction *)v2);
    v30 = (AGCLLVMUserObject *)llvm::ConstantInt::get();
    v32 = AGCLLVMUserObject::ResourceArrayIndex16x2::createAddOffset((AGCLLVMUserObject::ResourceArrayIndex16x2 *)v3, v30, *(llvm::Value **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF)), v31);
    v33 = *(_QWORD *)(*(_QWORD *)v3 - 24) + v3 + 40;
    v34 = *(_QWORD *)v2;
    v39 = 257;
    return llvm::IRBuilderBase::CreateCast(v33, 48, v32, v34, (uint64_t)v38);
  }
  return (uint64_t)v29;
}

uint64_t AGCLLVMUserObject::ResourceArrayIndex16x2::createAddOffset(AGCLLVMUserObject::ResourceArrayIndex16x2 *this, AGCLLVMUserObject *a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::IRBuilderBase *v7;
  llvm::Value *v8;
  llvm::Value *v9;
  llvm::IRBuilderBase *v10;
  llvm::Value *v11;
  llvm::Value *LShr;
  llvm::IRBuilderBase *v13;
  llvm::Value *Add;
  llvm::IRBuilderBase *v15;
  llvm::Value *v16;
  llvm::IRBuilderBase *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::IRBuilderBase *v20;
  llvm::Value *v21;
  llvm::Value *Shl;
  llvm::IRBuilderBase *v23;
  _BYTE v25[32];
  __int16 v26;

  v7 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  v9 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v7, a2, v8, (const llvm::Twine *)v25);
  v10 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v10, a2, v11, (const llvm::Twine *)v25);
  v13 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v26 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v13, v9, a3, (const llvm::Twine *)v25);
  v15 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v26 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v15, LShr, a3, (const llvm::Twine *)v25);
  v17 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v17, Add, v18, (const llvm::Twine *)v25);
  v20 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v20, v16, v21, (const llvm::Twine *)v25);
  v23 = (AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v26 = 257;
  return llvm::IRBuilderBase::CreateOr(v23, Shl, v19, (const llvm::Twine *)v25);
}

uint64_t AGCLLVMUserObject::setupTextureArrayRasterOrderGroup(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v6 = (_QWORD *)result;
    v7 = 0;
    v8 = result + 368;
    v9 = 4;
    do
    {
      v10 = *(unsigned int *)(*(_QWORD *)a2 + v9);
      if ((_DWORD)v10 != -1)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(*v6 - 24) + v8 + 32);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 176))(v11, a3, v10, 1, v7);
      }
      ++v7;
      v9 += 32;
    }
    while (v3 != v7);
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8078;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8078;
  a2[1] = v2;
  return result;
}

uint64_t (***std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_3>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2))()
{
  llvm::Constant *v2;
  __int128 *v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v6 = &off_1E7EB7FE8;
  v7 = *v3;
  v8 = &v6;
  iterateResourceUsers(v2, &v6);
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB7FE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB7FE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  AGCLLVMUserObject *v5;
  AGCLLVMUserObject *v6;
  AGCLLVMUserObject *v7;
  AGCLLVMUserObject *v8;
  unsigned int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int Key;
  int v14;
  int v15;
  int v16;
  unint64_t v18[2];
  char v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[64];
  void *v25;
  uint64_t v26;
  _QWORD v27[10];

  v27[8] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v20 = v24;
  v21 = v24;
  v22 = 8;
  v23 = 0;
  v4 = *(_QWORD *)(v3 + 8);
  v25 = v27;
  v26 = 0x800000000;
  v5 = (AGCLLVMUserObject *)llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v25, v4);
  AGCLLVMUserObject::getSampleFunctionMap(v5);
  AGCLLVMUserObject::getDimensionFunctionMap(v6);
  AGCLLVMUserObject::getTextureFenceFunctionSet(v7);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v8);
  for (i = v26; (_DWORD)v26; i = v26)
  {
    v10 = *((_QWORD *)v25 + i - 1);
    LODWORD(v26) = i - 1;
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v18, (llvm::SmallPtrSetImplBase *)&v20, (void *)v10);
    if (v19)
    {
      llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>((uint64_t)&v25, *(_QWORD *)(v10 + 8));
      if (v10)
      {
        if (*(_BYTE *)(v10 + 16) == 84)
        {
          if ((v11 = *(_QWORD *)(v10 - 32)) == 0
            || *(_BYTE *)(v11 + 16)
            || *(_QWORD *)(v11 + 24) != *(_QWORD *)(v10 + 72)
            || ((llvm::Value::getName((llvm::Value *)v11), Key = llvm::StringMapImpl::FindKey(), Key == -1)
             || Key == (unint64_t)dword_1ED839C70)
            && ((v14 = llvm::StringMapImpl::FindKey(), v14 == -1)
             || v14 == (unint64_t)dword_1ED839B98)
            && ((v15 = llvm::StringMapImpl::FindKey(), v15 == -1)
             || v15 == (unint64_t)dword_1ED839BB8)
            && ((v16 = llvm::StringMapImpl::FindKey(), v16 == -1)
             || v16 == (unint64_t)dword_1ED839BD8))
          {
            v12 = *(_QWORD *)(a1 + 8);
            AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)v18, *(llvm::Constant **)(v3 + 32 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF)));
            IntervalMap<unsigned int>::insert(v12, v18[0], **(unsigned int **)(a1 + 16));
          }
        }
      }
    }
  }
  if (v25 != v27)
    free(v25);
  if (v21 != v20)
    free(v21);
  return 1;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::append<llvm::Value::user_iterator_impl<llvm::User>,void>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = a2;
  v3 = result;
  v4 = 0;
  if (a2)
  {
    v5 = a2;
    do
    {
      ++v4;
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5);
  }
  v6 = *(unsigned int *)(result + 8);
  if (v4 + v6 > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v6 = *(unsigned int *)(v3 + 8);
  }
  if (v2)
  {
    v7 = (_QWORD *)(*(_QWORD *)v3 + 8 * v6);
    do
    {
      *v7++ = *(_QWORD *)(v2 + 24);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  *(_DWORD *)(v3 + 8) = v6 + v4;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8030;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8030;
  a2[1] = v2;
  return result;
}

uint64_t (***std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_2>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2))()
{
  llvm::Constant *v2;
  __int128 *v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v6 = &off_1E7EB7FE8;
  v7 = *v3;
  v8 = &v6;
  iterateResourceUsers(v2, &v6);
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

void std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB7FA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB7FA0;
  a2[1] = v2;
  return result;
}

uint64_t (***std::__function::__func<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1,std::allocator<AGCLLVMUserObject::allocateBindlessTextures(std::vector<llvm::Value *> const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_1>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2))()
{
  llvm::Constant *v2;
  __int128 *v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v6 = &off_1E7EB7FE8;
  v7 = *v3;
  v8 = &v6;
  iterateResourceUsers(v2, &v6);
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

uint64_t IntervalEqClasses::join(IntervalEqClasses *this)
{
  return llvm::IntEqClasses::join((IntervalEqClasses *)((char *)this + 32));
}

char *std::vector<llvm::Value *>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9AA0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_31>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9AA0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9AE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9AE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_30>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  llvm::Instruction *v7;
  uint64_t *v8;
  llvm::Value *v9;
  llvm::Type *v10;
  void *AlignedLoad;
  llvm::SmallPtrSetImplBase *v12;
  _BYTE v14[32];
  __int16 v15;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((_QWORD *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  v5 = *(_QWORD *)(v4 + 32);
  if (v5)
    v6 = v5 == *(_QWORD *)(v4 + 40) + 40;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (llvm::Instruction *)(v5 - 24);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), v7);
  v8 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v15 = 257;
  v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  AlignedLoad = (void *)llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v14);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  v12 = (llvm::SmallPtrSetImplBase *)(v3 + 125);
  if (llvm::SmallPtrSetImplBase::erase_imp(v12, v2))
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v14, v12, AlignedLoad);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB9A10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_29>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9A10;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Constant *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E7EB9668;
  v7[1] = a2;
  v7[2] = a3;
  v8 = v7;
  v3 = iterateResourceUsers(a1, v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = 4;
    v4 = v7;
    goto LABEL_5;
  }
  if (v8)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3;
}

void std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB9668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(llvm::Function * &,IntervalMap<unsigned int> const&,std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v16;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v16, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  v7 = *(_QWORD *)(v4 + 16);
  v6 = v4 + 16;
  v5 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v6;
  do
  {
    v9 = *(_DWORD *)(v5 + 32);
    v10 = v9 >= v16;
    if (v9 >= v16)
      v11 = (uint64_t *)v5;
    else
      v11 = (uint64_t *)(v5 + 8);
    if (v10)
      v8 = v5;
    v5 = *v11;
  }
  while (*v11);
  if (v8 == v6 || *(_DWORD *)(v8 + 28) > v16)
LABEL_12:
    v8 = v6;
  v12 = *(_QWORD *)(a1 + 8) + 16;
  if (v12 != v8)
  {
    v13 = ((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))[8];
    v14 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    std::function<llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)v3, (*(_DWORD *)(v8 + 36) + ((*(_DWORD *)v14 - *(_DWORD *)(v8 + 28)) << 16)) & 0xFFFF0000 | (unsigned __int16)(*(_WORD *)v14 - *(_WORD *)(v8 + 28) + *(_DWORD *)(v8 + 36)));
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return v12 != v8;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9A58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9A58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_28>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t Add;
  uint64_t v8;
  char *v9;
  llvm::Type **v10;
  uint64_t **v11;
  uint64_t v12;
  llvm::Value *v13;
  llvm::Type *v14;
  uint64_t GEP;
  uint64_t v16;
  uint64_t v17;
  void *Cast;
  _BYTE v20[32];
  __int16 v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), *a2);
  v4 = (llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40);
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v20);
  v8 = llvm::ConstantInt::get();
  v22 = v24;
  v23 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v22, 1uLL, v8);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, Add);
  v9 = (char *)v3 + *(_QWORD *)(*v3 - 24);
  v10 = (llvm::Type **)v3[223];
  v11 = (uint64_t **)v22;
  v12 = v23;
  v21 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(v10, v13);
  GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)(v9 + 40), (uint64_t)v14, (uint64_t *)v10, v11, v12, (uint64_t)v20);
  v16 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 40;
  v17 = *(_QWORD *)v2;
  v21 = 257;
  Cast = (void *)llvm::IRBuilderBase::CreateCast(v16, 49, GEP, v17, (uint64_t)v20);
  if (llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v3 + 125), v2))
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v20, (llvm::SmallPtrSetImplBase *)(v3 + 125), Cast);
  if (v22 != v24)
    free(v22);
  return Cast;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB9980;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9980;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_27>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 16);
  v7[0] = &off_1E7EB99C8;
  v7[1] = v4;
  v8 = v7;
  replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(v2, v3, (uint64_t)v7);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB99C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB99C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_26>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  AGCLLVMUserObject *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t Add;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *Cast;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  llvm::SmallPtrSetImplBase *v15;
  _BYTE v17[32];
  __int16 v18;

  v2 = *a2;
  v3 = *(AGCLLVMUserObject **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40), *a2);
  v4 = (AGCLLVMUserObject *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40);
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v18 = 257;
  Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v17);
  v8 = (uint64_t)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40;
  v9 = *(_QWORD *)v2;
  v18 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v17);
  v11 = AGCLLVMUserObject::buildImageHeapIndex(v3, Cast);
  v12 = (uint64_t)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40;
  v13 = *(_QWORD *)v2;
  v18 = 257;
  v14 = (void *)llvm::IRBuilderBase::CreateCast(v12, 48, v11, v13, (uint64_t)v17);
  v15 = (AGCLLVMUserObject *)((char *)v3 + 1000);
  if (llvm::SmallPtrSetImplBase::erase_imp(v15, v2))
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v17, v15, v14);
  return v14;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB98F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB98F0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB9938;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9938;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9938;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_25::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9860;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9860;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB98A8;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB98A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB98A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_24::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB97D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB97D0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_23>,void ()(llvm::Function *)>::operator()(uint64_t (***result)(), llvm::Constant **a2))()
{
  uint64_t (**v2)();
  uint64_t (***v3)();
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t (**v8)();
  __int128 v9;
  uint64_t (***v10)();
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = result[1];
  if (*(_BYTE *)v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = (uint64_t)v3[2];
    v6 = v3[3];
    v8 = &off_1E7EB9818;
    v9 = *(_OWORD *)v6;
    v10 = &v8;
    *(_BYTE *)v3[1] = replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(v4, v5, (uint64_t)&v8);
    result = v10;
    if (v10 == &v8)
    {
      v7 = 4;
      result = &v8;
    }
    else
    {
      if (!v10)
        return result;
      v7 = 5;
    }
    return (uint64_t (***)())(*result)[v7]();
  }
  else
  {
    *(_BYTE *)v2 = 0;
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB9818;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9818;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_22>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *Add;
  uint64_t v8;
  llvm::IRBuilderBase *v9;
  llvm::Value *v10;
  uint64_t v11;
  void *Cast;
  _BYTE v14[32];
  __int16 v15;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), *a2);
  v4 = (llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40);
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v15 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v14);
  v8 = *(_QWORD *)(*v3 - 24);
  if (!*(_DWORD *)(*(_QWORD *)((char *)v3 + v8 + 400) + 1780))
  {
    v9 = (llvm::IRBuilderBase *)((char *)v3 + v8 + 40);
    v10 = (llvm::Value *)llvm::ConstantInt::get();
    v15 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v9, Add, v10, (const llvm::Twine *)v14);
    v8 = *(_QWORD *)(*v3 - 24);
  }
  v11 = *(_QWORD *)v2;
  v15 = 257;
  Cast = (void *)llvm::IRBuilderBase::CreateCast((uint64_t)v3 + v8 + 40, 48, (uint64_t)Add, v11, (uint64_t)v14);
  if (llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)(v3 + 125), v2))
    llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v14, (llvm::SmallPtrSetImplBase *)(v3 + 125), Cast);
  return Cast;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9740;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9740;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB9788;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9788;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9788;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_21::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB96F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB96F8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_1E7EB96B0;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB96B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB96B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  AGCLLVMUserObject::ResourceArrayIndex16x2 *v3;
  AGCLLVMUserObject *v4;
  llvm::Value *v5;
  uint64_t AddOffset;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v2 = *a2;
  v3 = *(AGCLLVMUserObject::ResourceArrayIndex16x2 **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject::ResourceArrayIndex16x2 *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40), *a2);
  v4 = (AGCLLVMUserObject *)llvm::ConstantInt::get();
  AddOffset = AGCLLVMUserObject::ResourceArrayIndex16x2::createAddOffset(v3, v4, *((llvm::Value **)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF)), v5);
  v7 = (uint64_t)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24) + 40;
  v8 = *(_QWORD *)v2;
  v11 = 257;
  return llvm::IRBuilderBase::CreateCast(v7, 48, AddOffset, v8, (uint64_t)v10);
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB9620;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9620;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_1E7EB96B0;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex16x2,llvm::Function *>(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9590;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9590;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB95D8;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB95D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB95D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9500;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9500;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB9548;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9548;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9548;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB8468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0,std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v7[0] = &off_1E7EB84B0;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB84B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB84B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allTextureUsesAreDirect(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&)::$_0::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  AGCLLVMUserObject *v3;
  AGCLLVMUserObject *v4;
  AGCLLVMUserObject *v5;
  AGCLLVMUserObject *v6;
  AGCLLVMUserObject *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int Key;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  _DWORD v22[2];
  void *v23;
  uint64_t v24;
  _QWORD v25[34];

  v25[32] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)v22, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  if (v22[1] != v22[0])
    return 0;
  AGCLLVMUserObject::getSampleFunctionMap(v3);
  AGCLLVMUserObject::getUniqueIDFunctionSet(v4);
  AGCLLVMUserObject::getTextureFenceFunctionSet(v5);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v6);
  AGCLLVMUserObject::getDimensionFunctionMap(v7);
  v23 = v25;
  v24 = 0x2000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v23, v2);
  v8 = v24;
  if ((_DWORD)v24)
  {
    while (1)
    {
      v9 = *((_QWORD *)v23 + --v8);
      LODWORD(v24) = v8;
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        break;
LABEL_30:
      if (!v8)
        goto LABEL_31;
    }
    while (1)
    {
      v11 = *(_QWORD *)(v10 + 24);
      v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 <= 0x1B)
        break;
      if (v12 != 84)
      {
        if (v12 != 77)
          goto LABEL_33;
LABEL_10:
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v23, v11);
        goto LABEL_11;
      }
      v13 = *(_QWORD *)(v11 - 32);
      if (!v13
        || *(_BYTE *)(v13 + 16)
        || *(_QWORD *)(v13 + 24) != *(_QWORD *)(v11 + 72)
        || ((llvm::Value::getName((llvm::Value *)v13), Key = llvm::StringMapImpl::FindKey(), Key == -1)
         || Key == (unint64_t)dword_1ED839C70)
        && ((v15 = llvm::StringMapImpl::FindKey(), v15 == -1) || v15 == (unint64_t)dword_1ED839B78)
        && ((v16 = llvm::StringMapImpl::FindKey(), v16 == -1) || v16 == (unint64_t)dword_1ED839BB8)
        && ((v17 = llvm::StringMapImpl::FindKey(), v17 == -1) || v17 == (unint64_t)dword_1ED839BD8)
        && ((v18 = llvm::StringMapImpl::FindKey(), v18 != (unint64_t)dword_1ED839B98)
          ? (v19 = v18 == -1)
          : (v19 = 1),
            v19))
      {
LABEL_33:
        v20 = 0;
        goto LABEL_34;
      }
LABEL_11:
      v10 = *(_QWORD *)(v10 + 8);
      if (!v10)
      {
        v8 = v24;
        goto LABEL_30;
      }
    }
    if (v12 != 5 || *(_WORD *)(v11 + 18) != 49)
      goto LABEL_33;
    goto LABEL_10;
  }
LABEL_31:
  v20 = 1;
LABEL_34:
  if (v23 != v25)
    free(v23);
  return v20;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9470;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9470;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_20>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  v6[0] = &off_1E7EB94B8;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB94B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB94B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_19>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  llvm::Instruction *v7;
  uint64_t *v8;
  llvm::Value *v9;
  llvm::Type *v10;
  void *AlignedLoad;
  _BYTE v13[32];
  __int16 v14;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((_QWORD *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  v5 = *(_QWORD *)(v4 + 32);
  if (v5)
    v6 = v5 == *(_QWORD *)(v4 + 40) + 40;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (llvm::Instruction *)(v5 - 24);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), v7);
  v8 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v14 = 257;
  v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  AlignedLoad = (void *)llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v13);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v13, (llvm::SmallPtrSetImplBase *)(v3 + 125), AlignedLoad);
  return 1;
}

uint64_t AGCLLVMUserObject::allocateBindlessHeapIndexForRange(_QWORD *a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t Impl;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  __int16 v20;
  void *p_src;
  uint64_t v22;
  _QWORD v23[2];
  __int16 v24;
  _QWORD *__src;
  uint64_t v26;
  const char *v27;
  _BYTE v28[8];
  __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v6 = a2[1] - *a2 + 1;
  if (v6 >= 2)
    llvm::ArrayType::get(*(llvm::ArrayType **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 240), (llvm::Type *)(a2[1] - *a2 + 1));
  v7 = llvm::User::operator new((llvm::User *)0x58);
  v19[0] = "agc.global_";
  v19[2] = a3;
  v20 = 1027;
  __src = v19;
  v27 = ".";
  v29 = 770;
  v8 = *a2;
  p_src = &__src;
  v23[0] = v8;
  v24 = 2050;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  if (v6 <= 1)
  {
    __src = (_QWORD *)llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    v26 = llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    v27 = (const char *)llvm::ValueAsMetadata::get();
    p_src = v23;
    v22 = 0x500000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&p_src, &__src, v28);
    v13 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 3080;
    Impl = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v13, Impl);
    v15 = p_src;
    if (p_src == v23)
      return v7;
    goto LABEL_10;
  }
  p_src = v23;
  v22 = 0x2000000000;
  v9 = llvm::ValueAsMetadata::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&p_src, v9);
  llvm::ConstantInt::get();
  v10 = llvm::ValueAsMetadata::get();
  for (i = 0; i < a2[1] - *a2 + 1; ++i)
  {
    __src = (_QWORD *)v10;
    v26 = 0;
    llvm::ConstantInt::get();
    v26 = llvm::ValueAsMetadata::get();
    v12 = llvm::MDTuple::getImpl();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&p_src, v12);
  }
  v16 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 3080;
  v17 = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v16, v17);
  v15 = p_src;
  if (p_src != v23)
LABEL_10:
    free(v15);
  return v7;
}

void AGCLLVMUserObject::lowerGlobalBindingVariable(AGCLLVMUserObject *this, llvm::GlobalVariable *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  llvm::IRBuilderBase *v13;
  llvm::Instruction *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Instruction *v17;
  uint64_t v18;
  uint64_t GlobalBindingTablePtr;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  llvm::Value *v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  AGCLLVMObject::replaceConstantChainWithInstrs(a2, a2);
  v4 = *((_QWORD *)a2 + 1);
  while (v4)
  {
    v5 = *(_QWORD *)(v4 + 24);
    v4 = *(_QWORD *)(v4 + 8);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v5)
      v7 = v6 >= 0x1C;
    else
      v7 = 0;
    if (v7)
    {
      if (v6 != 83)
      {
        v13 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
        v14 = (llvm::Instruction *)v5;
        goto LABEL_27;
      }
      v8 = *(_DWORD *)(v5 + 20);
      v9 = v8 & 0x7FFFFFF;
      if ((v8 & 0x7FFFFFF) != 0)
      {
        v10 = 0;
        v11 = 0;
        v12 = v5 - 32 * v9;
        do
        {
          if ((v8 & 0x40000000) != 0)
          {
            if (*(llvm::GlobalVariable **)(*(_QWORD *)(v5 - 8) + v10) == a2)
            {
              v12 = *(_QWORD *)(v5 - 8);
LABEL_18:
              v15 = *(_QWORD *)(v12 + 32 * *(unsigned int *)(v5 + 60) + 8 * v11);
              v16 = *(_QWORD *)(v15 + 40);
              if (v16 == v15 + 40)
              {
                v14 = 0;
              }
              else
              {
                v17 = (llvm::Instruction *)(v16 - 24);
                if (v16)
                  v18 = v16 - 24;
                else
                  v18 = 0;
                if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB)
                  v14 = 0;
                else
                  v14 = v17;
              }
              v13 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
LABEL_27:
              llvm::IRBuilderBase::SetInsertPoint(v13, v14);
              break;
            }
          }
          else if (*(llvm::GlobalVariable **)(v12 + v10) == a2)
          {
            goto LABEL_18;
          }
          ++v11;
          v10 += 32;
        }
        while (v9 != v11);
      }
      GlobalBindingTablePtr = AGCLLVMUserObject::getGlobalBindingTablePtr(this);
      v20 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v21 = *((_QWORD *)v20 + 50);
      v22 = *((_QWORD *)v20 + 46);
      v28[0] = *(_QWORD *)a2;
      v23 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v21 + 1344))(v21, v22, v28, 1);
      v24 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8;
      v30[0] = GlobalBindingTablePtr;
      v30[1] = a2;
      v29 = 257;
      v25 = llvm::IRBuilderBase::CreateCall((uint64_t)(v24 + 32), *(_QWORD *)(v23 + 24), v23, (uint64_t)v30, 2, (uint64_t)v28);
      v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
      v27 = *(_QWORD *)a2;
      v29 = 257;
      llvm::IRBuilderBase::CreateCast((uint64_t)v26, 49, (uint64_t)v25, v27, (uint64_t)v28);
      llvm::User::replaceUsesOfWith();
    }
  }
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB9428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9428;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  __int128 *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = (__int128 *)result[2];
    v8 = *v5;
    v9 = v5[1];
    v10 = *((_QWORD *)v5 + 4);
    v6 = (char *)operator new(0x30uLL);
    *(_QWORD *)v6 = &off_1E7EB93E0;
    *(_OWORD *)(v6 + 8) = v8;
    *(_OWORD *)(v6 + 24) = v9;
    *((_QWORD *)v6 + 5) = v10;
    v12 = v6;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v11);
    result = v12;
    if (v12 == v11)
    {
      v7 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E7EB93E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7EB93E0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v21;
  uint64_t **v22;
  unsigned int v23;
  llvm::Type **GEP;
  uint64_t *v25;
  char *v26;
  llvm::Value *v27;
  llvm::Type *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  llvm::Type *v33;
  uint64_t *v34;
  uint64_t Cast;
  uint64_t AlignedLoad;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  int v40[8];
  __int16 v41;
  uint64_t *v42[4];
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 32);
  if (**(_BYTE **)(a1 + 8))
    goto LABEL_5;
  v5 = ((_QWORD *)v3 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  v6 = (_QWORD *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v6 = (_QWORD *)*v6;
  if (*v6)
  {
LABEL_5:
    v7 = *(_QWORD *)(a1 + 16);
    v8 = ((_QWORD *)v3 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[8];
    v9 = (unsigned int *)(v8 + 24);
    v10 = *(_DWORD *)(v8 + 32);
    v11 = v9;
    if (v10 >= 0x41)
      v11 = *(unsigned int **)v9;
    v14 = *(_QWORD *)(v7 + 8);
    v12 = v7 + 8;
    v13 = v14;
    if (!v14)
      return 0;
    v15 = *v11;
    v16 = v12;
    do
    {
      v17 = *(_DWORD *)(v13 + 32);
      v18 = v17 >= v15;
      if (v17 >= v15)
        v19 = (uint64_t *)v13;
      else
        v19 = (uint64_t *)(v13 + 8);
      if (v18)
        v16 = v13;
      v13 = *v19;
    }
    while (*v19);
    if (v16 == v12 || *(_DWORD *)(v16 + 32) > v15)
      return 0;
    v21 = *(uint64_t ***)(a1 + 24);
    if (v10 >= 0x41)
      v9 = *(unsigned int **)v9;
    v40[0] = *v9;
    v22 = std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v21, v40[0], v40);
    v23 = *((_DWORD *)v22 + 9) - *((_DWORD *)v22 + 8) + 1;
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 40), v3);
    GEP = *(llvm::Type ***)(v16 + 40);
    if (v23 >= 2)
    {
      v25 = (uint64_t *)*((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
      v26 = (char *)v4 + *(_QWORD *)(*v4 - 24);
      v42[0] = (uint64_t *)llvm::ConstantInt::get();
      v42[1] = v25;
      v41 = 257;
      v28 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v27);
      GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v26 + 40), (uint64_t)v28, (uint64_t *)GEP, v42, 2, (uint64_t)v40);
    }
    v29 = *(_QWORD *)(*v4 - 24);
    if (**(_BYTE **)(a1 + 40))
    {
      v30 = *(_QWORD *)v3;
      v41 = 257;
      llvm::IRBuilderBase::CreateCast((uint64_t)v4 + v29 + 40, 49, (uint64_t)GEP, v30, (uint64_t)v40);
    }
    else
    {
      v31 = llvm::PointerType::get();
      v32 = (char *)v4 + *(_QWORD *)(*v4 - 24);
      v33 = (llvm::Type *)*((_QWORD *)v32 + 29);
      v34 = (uint64_t *)(v32 + 40);
      v41 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v32 + 40), 49, (uint64_t)GEP, v31, (uint64_t)v40);
      v43 = 257;
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v34, v33, Cast, 0, (uint64_t)v42);
      v37 = (uint64_t)v4 + *(_QWORD *)(*v4 - 24) + 40;
      v38 = *(_QWORD *)v3;
      v41 = 257;
      v39 = (void *)llvm::IRBuilderBase::CreateCast(v37, 48, AlignedLoad, v38, (uint64_t)v40);
      llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)v40, (llvm::SmallPtrSetImplBase *)(v4 + 125), v39);
    }
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v3);
  }
  return 1;
}

uint64_t **std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t **a1, unsigned int a2, int *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    v10 = *a3;
    v7[4] = 0;
    *((_DWORD *)v7 + 7) = v10;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB9398;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9398;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  __int128 *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = (__int128 *)result[2];
    v8 = *v5;
    v9 = v5[1];
    v10 = *((_QWORD *)v5 + 4);
    v6 = (char *)operator new(0x30uLL);
    *(_QWORD *)v6 = &off_1E7EB93E0;
    *(_OWORD *)(v6 + 8) = v8;
    *(_OWORD *)(v6 + 24) = v9;
    *((_QWORD *)v6 + 5) = v10;
    v12 = v6;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v11);
    result = v12;
    if (v12 == v11)
    {
      v7 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9350;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9350;
  a2[1] = v2;
  return result;
}

uint64_t (***std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2))()
{
  llvm::Constant *v2;
  __int128 *v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v6 = &off_1E7EB9308;
  v7 = *v3;
  v8 = &v6;
  iterateResourceUsers(v2, &v6);
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB9308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9308;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v25;

  v3 = *a2;
  if (**(_BYTE **)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 96);
  v5 = (_QWORD *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = (_QWORD *)*v5;
  if (*v5)
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v3 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v9 = (_QWORD *)*v9;
    v12 = *(_QWORD *)(v6 + 8);
    v10 = (_DWORD *)(v6 + 8);
    v11 = v12;
    if (!v12)
      goto LABEL_18;
    v13 = *(_DWORD *)v9;
    v14 = v10;
    do
    {
      v15 = *(_DWORD *)(v11 + 28);
      v16 = v15 >= v13;
      if (v15 >= v13)
        v17 = (uint64_t *)v11;
      else
        v17 = (uint64_t *)(v11 + 8);
      if (v16)
        v14 = (_DWORD *)v11;
      v11 = *v17;
    }
    while (*v17);
    if (v14 != v10 && v14[7] <= v13)
    {
      AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v25, *(llvm::Constant **)(v7 + 32));
      v22 = v14[8];
      v23 = v14[9];
      if (v25 < v22)
        v22 = v25;
      if (v23 <= HIDWORD(v25))
        v23 = HIDWORD(v25);
      v14[8] = v22;
      v14[9] = v23;
    }
    else
    {
LABEL_18:
      AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v25, *(llvm::Constant **)(v7 + 32));
      v18 = v25;
      v19 = *(uint64_t ***)(a1 + 16);
      v20 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 64);
      v21 = (_QWORD *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u)
        v21 = (_QWORD *)*v21;
      LODWORD(v25) = *(_DWORD *)v21;
      std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v19, v25, (int *)&v25)[4] = v18;
    }
  }
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB92C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB92C0;
  a2[1] = v2;
  return result;
}

uint64_t (***std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Texture>(std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2))()
{
  llvm::Constant *v2;
  __int128 *v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v6 = &off_1E7EB9308;
  v7 = *v3;
  v8 = &v6;
  iterateResourceUsers(v2, &v6);
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  int8x8_t prime;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v12 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      prime = (int8x8_t)v16;
    else
      prime = (int8x8_t)v15;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        v24 = std::__next_prime(v24);
      }
      else
      {
        v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2)
          v24 = v26;
      }
      if (*(_QWORD *)&prime <= v24)
        prime = (int8x8_t)v24;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v18 = operator new(8 * *(_QWORD *)&prime);
          v19 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v18;
          if (v19)
            operator delete(v19);
          v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v20++) = 0;
          while (*(_QWORD *)&prime != v20);
          v21 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v21)
          {
            v22 = v21[1];
            v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(_QWORD *)&prime)
                v22 %= *(_QWORD *)&prime;
            }
            else
            {
              v22 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = a1 + 4;
            v27 = (_QWORD *)*v21;
            if (*v21)
            {
              do
              {
                v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(_QWORD *)&prime)
                    v28 %= *(_QWORD *)&prime;
                }
                else
                {
                  v28 &= *(_QWORD *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v28))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  *v21 = *v27;
                  *v27 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v28);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v28) = v27;
                  v27 = v21;
                }
                v28 = v22;
LABEL_55:
                v21 = v27;
                v27 = (_QWORD *)*v27;
                v22 = v28;
              }
              while (v27);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v29 = *(_QWORD **)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v30)
  {
    *v10 = *v30;
LABEL_72:
    *v30 = v10;
    goto LABEL_73;
  }
  *v10 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    v31 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7)
        v31 %= v7;
    }
    else
    {
      v31 &= v7 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v10;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB9278;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9278;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_1E7EB9230;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9230;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9230;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t *v4;
  unsigned int v6;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v6, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::find<unsigned int>(v3, v6);
  if (v4)
  {
    llvm::ConstantExpr::getPointerCast();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v2);
  }
  return v4 != 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB91E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB91E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_1E7EB9230;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9158;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9158;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB91A0;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB91A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB91A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB90C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB90C8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB9110;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9110;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9110;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Texture>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Texture,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Texture>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB9038;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB9038;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_18>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_1E7EB9080;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB9080;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB9080;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_17>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  llvm::Instruction *v7;
  uint64_t *v8;
  llvm::Value *v9;
  llvm::Type *v10;
  char v12[32];
  __int16 v13;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((_QWORD *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  v5 = *(_QWORD *)(v4 + 32);
  if (v5)
    v6 = v5 == *(_QWORD *)(v4 + 40) + 40;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (llvm::Instruction *)(v5 - 24);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), v7);
  v8 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v13 = 257;
  v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v12);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB8FA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8FA8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_16>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_1E7EB8FF0;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8FF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8FF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_15>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t *Add;
  uint64_t *v8;
  llvm::Type **v9;
  llvm::Value *v10;
  llvm::Type *v11;
  llvm::Type **GEP;
  llvm::Value *v13;
  llvm::Type *v14;
  uint64_t AlignedLoad;
  uint64_t v16;
  uint64_t v17;
  char v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  uint64_t *v23[3];

  v23[2] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), *a2);
  v4 = (llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40);
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  Add = (uint64_t *)llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v21);
  v8 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v9 = (llvm::Type **)v3[247];
  v23[0] = (uint64_t *)llvm::ConstantInt::get();
  v23[1] = Add;
  v22 = 257;
  v11 = AGCLLVMBuilder::tryDeducePointeeType(v9, v10);
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)(v8 + 5), (uint64_t)v11, (uint64_t *)v9, v23, 2, (uint64_t)v21);
  v20 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v13);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v14, (uint64_t)GEP, 0, (uint64_t)v19);
  v16 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 40;
  v17 = *(_QWORD *)v2;
  v22 = 257;
  return llvm::IRBuilderBase::CreateCast(v16, 48, AlignedLoad, v17, (uint64_t)v21);
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8F18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8F18;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB8F60;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8F60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8F60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_14::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB8E88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8E88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_13>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_1E7EB8ED0;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8ED0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8ED0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_12>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  llvm::Instruction *v7;
  uint64_t *v8;
  llvm::Value *v9;
  llvm::Type *v10;
  char v12[32];
  __int16 v13;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((_QWORD *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  v5 = *(_QWORD *)(v4 + 32);
  if (v5)
    v6 = v5 == *(_QWORD *)(v4 + 40) + 40;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (llvm::Instruction *)(v5 - 24);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), v7);
  v8 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v13 = 257;
  v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v12);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB8DF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8DF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_11>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_1E7EB8E40;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8E40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8E40;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_10>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t Add;
  uint64_t v8;
  char *v9;
  llvm::Type **v10;
  uint64_t **v11;
  uint64_t v12;
  llvm::Value *v13;
  llvm::Type *v14;
  uint64_t GEP;
  uint64_t v16;
  uint64_t v17;
  uint64_t Cast;
  _BYTE v20[32];
  __int16 v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), *a2);
  v4 = (llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40);
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v20);
  v8 = llvm::ConstantInt::get();
  v22 = v24;
  v23 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Value *>::assign((uint64_t)&v22, 1uLL, v8);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v22, Add);
  v9 = (char *)v3 + *(_QWORD *)(*v3 - 24);
  v10 = (llvm::Type **)v3[167];
  v11 = (uint64_t **)v22;
  v12 = v23;
  v21 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(v10, v13);
  GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)(v9 + 40), (uint64_t)v14, (uint64_t *)v10, v11, v12, (uint64_t)v20);
  v16 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 40;
  v17 = *(_QWORD *)v2;
  v21 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v16, 49, GEP, v17, (uint64_t)v20);
  if (v22 != v24)
    free(v22);
  return Cast;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB8D68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8D68;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_9>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_1E7EB8DB0;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8DB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8DB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_8>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  uint64_t *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t Add;
  uint64_t v8;
  uint64_t v9;
  uint64_t Cast;
  uint64_t *v11;
  llvm::Type **v12;
  llvm::Value *v13;
  llvm::Type *v14;
  uint64_t AlignedLoad;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[32];
  __int16 v20;

  v2 = *a2;
  v3 = *(uint64_t **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), *a2);
  v4 = (llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40);
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v19);
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 40;
  v9 = *(_QWORD *)v2;
  v20 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v19);
  v11 = (uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v12 = (llvm::Type **)AGCLLVMUserObject::buildSamplerArgumentPointer(v3, Cast, 3u);
  v20 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(v12, v13);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v11 + 5, v14, (uint64_t)v12, 0, (uint64_t)v19);
  v16 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 40;
  v17 = *(_QWORD *)v2;
  v20 = 257;
  return llvm::IRBuilderBase::CreateCast(v16, 48, AlignedLoad, v17, (uint64_t)v19);
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8CD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8CD8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB8D20;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8D20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8D20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_7::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8C48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8C48;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB8C90;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8C90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8C90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_6::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB8BB8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8BB8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_5>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_1E7EB8C00;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8C00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8C00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_4>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t Add;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), *a2);
  v4 = (llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40);
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v12 = 257;
  Add = llvm::IRBuilderBase::CreateAdd(v4, v5, v6, (const llvm::Twine *)v11);
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 40;
  v9 = *(_QWORD *)v2;
  v12 = 257;
  return llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v11);
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8B28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8B28;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB8B70;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8B70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8B70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_3::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB8AE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8AE0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_1E7EB8A98;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8A98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8A98;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic,unsigned int)#1}>,llvm::Value * ()(ResourceIntrinsic,unsigned int)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  llvm::Value *v4;
  llvm::Value *v5;
  llvm::IRBuilderBase *v6;
  uint64_t Add;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), *a2);
  v4 = (llvm::Value *)llvm::ConstantInt::get();
  v5 = (llvm::Value *)*((_QWORD *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
  v6 = (llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40);
  v12 = 257;
  Add = llvm::IRBuilderBase::CreateAdd(v6, v4, v5, (const llvm::Twine *)v11);
  v8 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 40;
  v9 = *(_QWORD *)v2;
  v12 = 257;
  return llvm::IRBuilderBase::CreateCast(v8, 48, Add, v9, (uint64_t)v11);
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7EB8A50;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8A50;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = v3[2];
    v6 = *(_QWORD *)v3[3];
    v8[0] = &off_1E7EB8A98;
    v8[1] = v6;
    v9 = v8;
    *(_BYTE *)v3[1] = replaceArrayResources<AGCLLVMUserObject::ResourceArrayIndex32,llvm::Function *>(v4, v5, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB89C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB89C0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB8A08;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8A08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8A08;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8930;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8930;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB8978;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8978;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8978;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateResourceRegisterArray<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB88A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB88A0;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_2>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  v6[0] = &off_1E7EB88E8;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB88E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB88E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1,std::allocator<AGCLLVMUserObject::allocateTexturesAndSamplers(void)::$_1>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  llvm::Instruction *v7;
  uint64_t *v8;
  llvm::Value *v9;
  llvm::Type *v10;
  char v12[32];
  __int16 v13;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = ((_QWORD *)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
  v5 = *(_QWORD *)(v4 + 32);
  if (v5)
    v6 = v5 == *(_QWORD *)(v4 + 40) + 40;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (llvm::Instruction *)(v5 - 24);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 40), v7);
  v8 = (_QWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24));
  v13 = 257;
  v10 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v4, v9);
  llvm::IRBuilderBase::CreateAlignedLoad(v8 + 5, v10, v4, 0, (uint64_t)v12);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v2);
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB8858;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8858;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  __int128 *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = (__int128 *)result[2];
    v8 = *v5;
    v9 = v5[1];
    v10 = v5[2];
    v6 = (char *)operator new(0x38uLL);
    *(_QWORD *)v6 = &off_1E7EB8810;
    *(_OWORD *)(v6 + 8) = v8;
    *(_OWORD *)(v6 + 24) = v9;
    *(_OWORD *)(v6 + 40) = v10;
    v12 = v6;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v11);
    result = v12;
    if (v12 == v11)
    {
      v7 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E7EB8810;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E7EB8810;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#2}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v21;
  uint64_t **v22;
  unsigned int v23;
  llvm::Constant *v24;
  llvm::Type *v25;
  uint64_t NullValue;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  uint64_t v34;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v36;
  llvm::Value *v37;
  uint64_t v38;
  char *v39;
  llvm::Type **v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value *v48;
  char *v49;
  llvm::Value *v50;
  llvm::Type *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t GEP;
  uint64_t v56;
  char *v57;
  llvm::Type *v58;
  uint64_t *v59;
  uint64_t v60;
  llvm::Value *v61;
  llvm::Type *v62;
  void *__p;
  llvm::Value *v64;
  char v65;
  __int16 v66;
  _QWORD v67[2];
  void *v68[2];
  _BYTE v69[16];
  __int16 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(_QWORD **)(a1 + 32);
  if (!**(_BYTE **)(a1 + 8))
  {
    v5 = ((_QWORD *)v3 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[12];
    v6 = (_QWORD *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u)
      v6 = (_QWORD *)*v6;
    if (!*v6)
      return 1;
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = ((_QWORD *)v3 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[8];
  v9 = (unsigned int *)(v8 + 24);
  v10 = *(_DWORD *)(v8 + 32);
  v11 = v9;
  if (v10 >= 0x41)
    v11 = *(unsigned int **)v9;
  v14 = *(_QWORD *)(v7 + 8);
  v12 = v7 + 8;
  v13 = v14;
  if (!v14)
    return 0;
  v15 = *v11;
  v16 = v12;
  do
  {
    v17 = *(_DWORD *)(v13 + 32);
    v18 = v17 >= v15;
    if (v17 >= v15)
      v19 = (uint64_t *)v13;
    else
      v19 = (uint64_t *)(v13 + 8);
    if (v18)
      v16 = v13;
    v13 = *v19;
  }
  while (*v19);
  if (v16 == v12 || *(_DWORD *)(v16 + 32) > v15)
    return 0;
  v21 = *(uint64_t ***)(a1 + 24);
  if (v10 >= 0x41)
    v9 = *(unsigned int **)v9;
  LODWORD(v68[0]) = *v9;
  v22 = std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v21, v68[0], (int *)v68);
  v23 = *((_DWORD *)v22 + 9) - *((_DWORD *)v22 + 8) + 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 40), v3);
  if (**(_BYTE **)(a1 + 40))
  {
    v24 = (llvm::Constant *)llvm::PointerType::get();
    NullValue = llvm::Constant::getNullValue(v24, v25);
    v27 = (char *)v4 + *(_QWORD *)(*v4 - 24);
    v28 = *((_QWORD *)v27 + 50);
    v29 = *((_QWORD *)v27 + 46);
    v68[0] = **(void ***)(v16 + 40);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v28 + 1344))(v28, v29, v68, 1);
    v31 = (uint64_t)v4 + *(_QWORD *)(*v4 - 24) + 40;
    v32 = *(_QWORD *)(v16 + 40);
    v67[0] = NullValue;
    v67[1] = v32;
    v70 = 257;
    v33 = llvm::IRBuilderBase::CreateCall(v31, *(_QWORD *)(v30 + 24), v30, (uint64_t)v67, 2, (uint64_t)v68);
    v34 = *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 232);
    v66 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v31, 47, (uint64_t)v33, v34, (uint64_t)&__p);
    if (v23 >= 2)
    {
      v36 = (llvm::IRBuilderBase *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 40);
      v37 = (llvm::Value *)*((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
      v70 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v36, Cast, v37, (const llvm::Twine *)v68);
    }
    v38 = *(_QWORD *)(*v4 - 24);
    if (**(_BYTE **)(a1 + 48))
    {
      v39 = (char *)v4 + v38 + 32;
      v40 = (llvm::Type **)v4[351];
      if (!v40)
      {
        std::string::basic_string[abi:nn180100]<0>(&__p, "agc.global_sampler_api_reference_array");
        v41 = *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 400);
        v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 480))(v41);
        v43 = v42;
        llvm::ArrayType::get(*(llvm::ArrayType **)((char *)v4 + *(_QWORD *)(*v4 - 24) + 240), (llvm::Type *)v42);
        v44 = llvm::User::operator new((llvm::User *)0x58);
        v70 = 260;
        v68[0] = &__p;
        v45 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v45 + 80) |= 1u;
        v68[0] = v69;
        v68[1] = (void *)0x1C00000000;
        if (v42)
        {
          v46 = 0;
          do
          {
            v47 = llvm::ConstantInt::get();
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v68, v47);
            ++v46;
          }
          while (v43 != v46);
        }
        llvm::ConstantArray::get();
        llvm::GlobalVariable::setInitializer();
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 349), v44);
        if (v68[0] != v69)
          free(v68[0]);
        if (v65 < 0)
          operator delete(__p);
        v40 = (llvm::Type **)v4[351];
      }
      __p = (void *)llvm::ConstantInt::get();
      v64 = Cast;
      v70 = 257;
      v62 = AGCLLVMBuilder::tryDeducePointeeType(v40, v61);
      GEP = llvm::IRBuilderBase::CreateGEP((uint64_t)(v39 + 8), (uint64_t)v62, (uint64_t *)v40, (uint64_t **)&__p, 2, (uint64_t)v68);
      v52 = (uint64_t)v4 + *(_QWORD *)(*v4 - 24) + 40;
      v53 = *(_QWORD *)v3;
      v70 = 257;
      v54 = 49;
      goto LABEL_43;
    }
    v52 = (uint64_t)v4 + v38 + 40;
    v53 = *(_QWORD *)v3;
    v70 = 257;
    v54 = 48;
  }
  else
  {
    Cast = *(llvm::Value **)(v16 + 40);
    if (v23 >= 2)
    {
      v48 = (llvm::Value *)*((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
      v49 = (char *)v4 + *(_QWORD *)(*v4 - 24);
      __p = (void *)llvm::ConstantInt::get();
      v64 = v48;
      v70 = 257;
      v51 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)Cast, v50);
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((uint64_t)(v49 + 40), (uint64_t)v51, (uint64_t *)Cast, (uint64_t **)&__p, 2, (uint64_t)v68);
    }
    if (!**(_BYTE **)(a1 + 48))
    {
      v56 = llvm::PointerType::get();
      v57 = (char *)v4 + *(_QWORD *)(*v4 - 24);
      v58 = (llvm::Type *)*((_QWORD *)v57 + 29);
      v59 = (uint64_t *)(v57 + 40);
      v70 = 257;
      v60 = llvm::IRBuilderBase::CreateCast((uint64_t)(v57 + 40), 49, (uint64_t)Cast, v56, (uint64_t)v68);
      v66 = 257;
      GEP = llvm::IRBuilderBase::CreateAlignedLoad(v59, v58, v60, 0, (uint64_t)&__p);
      v52 = (uint64_t)v4 + *(_QWORD *)(*v4 - 24) + 40;
      v53 = *(_QWORD *)v3;
      v70 = 257;
      v54 = 48;
      goto LABEL_43;
    }
    v52 = (uint64_t)v4 + *(_QWORD *)(*v4 - 24) + 40;
    v53 = *(_QWORD *)v3;
    v70 = 257;
    v54 = 49;
  }
  GEP = (uint64_t)Cast;
LABEL_43:
  llvm::IRBuilderBase::CreateCast(v52, v54, GEP, v53, (uint64_t)v68);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(v3);
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB87C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB87C8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  __int128 *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = (__int128 *)result[2];
    v8 = *v5;
    v9 = v5[1];
    v10 = v5[2];
    v6 = (char *)operator new(0x38uLL);
    *(_QWORD *)v6 = &off_1E7EB8810;
    *(_OWORD *)(v6 + 8) = v8;
    *(_OWORD *)(v6 + 24) = v9;
    *(_OWORD *)(v6 + 40) = v10;
    v12 = v6;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v11);
    result = v12;
    if (v12 == v11)
    {
      v7 = 4;
      result = v11;
    }
    else
    {
      if (!v12)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8780;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8780;
  a2[1] = v2;
  return result;
}

uint64_t (***std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2))()
{
  llvm::Constant *v2;
  __int128 *v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v6 = &off_1E7EB8738;
  v7 = *v3;
  v8 = &v6;
  iterateResourceUsers(v2, &v6);
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB8738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8738;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v25;

  v3 = *a2;
  if (**(_BYTE **)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 96);
  v5 = (_QWORD *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = (_QWORD *)*v5;
  if (*v5)
  {
LABEL_5:
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v3 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v9 = (_QWORD *)*v9;
    v12 = *(_QWORD *)(v6 + 8);
    v10 = (_DWORD *)(v6 + 8);
    v11 = v12;
    if (!v12)
      goto LABEL_18;
    v13 = *(_DWORD *)v9;
    v14 = v10;
    do
    {
      v15 = *(_DWORD *)(v11 + 28);
      v16 = v15 >= v13;
      if (v15 >= v13)
        v17 = (uint64_t *)v11;
      else
        v17 = (uint64_t *)(v11 + 8);
      if (v16)
        v14 = (_DWORD *)v11;
      v11 = *v17;
    }
    while (*v17);
    if (v14 != v10 && v14[7] <= v13)
    {
      AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v25, *(llvm::Constant **)(v7 + 32));
      v22 = v14[8];
      v23 = v14[9];
      if (v25 < v22)
        v22 = v25;
      if (v23 <= HIDWORD(v25))
        v23 = HIDWORD(v25);
      v14[8] = v22;
      v14[9] = v23;
    }
    else
    {
LABEL_18:
      AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v25, *(llvm::Constant **)(v7 + 32));
      v18 = v25;
      v19 = *(uint64_t ***)(a1 + 16);
      v20 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF) + 64);
      v21 = (_QWORD *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u)
        v21 = (_QWORD *)*v21;
      LODWORD(v25) = *(_DWORD *)v21;
      std::__tree<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,AGCArgumentBuffer::Resource::Bounds>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v19, v25, (int *)&v25)[4] = v18;
    }
  }
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB86F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB86F0;
  a2[1] = v2;
  return result;
}

uint64_t (***std::__function::__func<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateGBTIndirectedTextureAndSamplers<AGCLLVMUserObject::Sampler>(std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>> &,BOOL)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2))()
{
  llvm::Constant *v2;
  __int128 *v3;
  uint64_t (***result)();
  uint64_t v5;
  uint64_t (**v6)();
  __int128 v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(__int128 **)(a1 + 8);
  v6 = &off_1E7EB8738;
  v7 = *v3;
  v8 = &v6;
  iterateResourceUsers(v2, &v6);
  result = v8;
  if (v8 == &v6)
  {
    v5 = 4;
    result = &v6;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (uint64_t (***)())(*result)[v5]();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB86A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB86A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#4}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_1E7EB8660;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8660;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8660;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, llvm::Instruction **a2)
{
  llvm::Instruction *v2;
  _QWORD *v3;
  uint64_t *v4;
  unsigned int v6;

  v2 = *a2;
  v3 = *(_QWORD **)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v6, ((llvm::Constant **)*a2 - 4 * (*((_DWORD *)*a2 + 5) & 0x7FFFFFF))[4]);
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::find<unsigned int>(v3, v6);
  if (v4)
  {
    llvm::ConstantExpr::getPointerCast();
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent(v2);
  }
  return v4 != 0;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7EB8618;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7EB8618;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#3}>,void ()(llvm::Function *)>::operator()(_QWORD *result, llvm::Constant **a2)
{
  _BYTE *v2;
  _QWORD *v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (_BYTE *)result[1];
  if (*v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = *(_QWORD *)v3[2];
    v7[0] = &off_1E7EB8660;
    v7[1] = v5;
    v8 = v7;
    *(_BYTE *)v3[1] = iterateResourceUsers(v4, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  else
  {
    *v2 = 0;
  }
  return result;
}

uint64_t llvm::ValueMap<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  char v3;
  uint64_t v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  v7 = &unk_1E7ECE6B0;
  v10 = a1;
  v11 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 8), v8);
    *(_QWORD *)(v4 + 32) = v10;
    *(_DWORD *)(v4 + 40) = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 40;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 48 * v8, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty(a1);
  if ((_DWORD)v3)
  {
    v9 = (char *)v4 + 24;
    v10 = 48 * v3;
    do
    {
      v11 = *(_QWORD *)v9;
      if ((*(_QWORD *)v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v15);
        v12 = v15;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v15 + 8), (_QWORD *)v9 - 2);
        v11 = *(_QWORD *)v9;
        *(_QWORD *)(v12 + 32) = *((_QWORD *)v9 + 1);
        *(_DWORD *)(v12 + 40) = *((_DWORD *)v9 + 4);
        ++*(_DWORD *)(a1 + 8);
      }
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 16));
      v9 += 48;
      v10 -= 48;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(48 * v3));
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    v10[1] = 0;
    v10[2] = -8192;
    v9 = &unk_1E7ECE6B0;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t result;
  uint64_t v6;
  int32x2_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[16];
  uint64_t v13;
  int32x2_t *v14;
  void *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v14 = v4;
  v19 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if ((_DWORD)result)
    v6 = (uint64_t)v19;
  else
    v6 = *(_QWORD *)v4 + 48 * v4[2].u32[0];
  v7 = v14;
  if (*(_QWORD *)v14 + 48 * v14[2].u32[0] != v6)
  {
    v8 = *(_DWORD *)(v6 + 40);
    v20[1] = 0;
    v21 = -8192;
    v19 = &unk_1E7ECE6B0;
    v20[0] = 2;
    v22 = 0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 8), v20);
    v9 = v21;
    *(_QWORD *)(v6 + 32) = v22;
    if (v9 != -8192 && v9 != -4096 && v9)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    v10 = (uint64_t)v14;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v15, a2);
    v15 = &unk_1E7ECE6B0;
    v18 = v10;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    v19 = &unk_1E7ECE6B0;
    v22 = v18;
    v23 = v8;
    v24 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(v10, (uint64_t)&v19, v24);
      result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 8), v20);
      *(_QWORD *)(v11 + 32) = v22;
      *(_DWORD *)(v11 + 40) = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    if (v17 != -8192 && v17 != -4096 && v17)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
  }
  return result;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8588;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8588;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB85D0;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB85D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB85D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#2}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB84F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB84F8;
  a2[1] = v2;
  return result;
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}>,void ()(llvm::Function *)>::operator()(uint64_t a1, llvm::Constant **a2)
{
  llvm::Constant *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  v6[0] = &off_1E7EB8540;
  v6[1] = v3;
  v7 = v6;
  iterateResourceUsers(v2, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EB8540;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EB8540;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1},std::allocator<BOOL AGCLLVMUserObject::allocateDirectRegisters<AGCLLVMUserObject::Sampler>(AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,AGCLLVMUserObject::TextureSamplerPlaceholderFunctions const&,std::set<AGCLLVMUserObject::Sampler,AGCLLVMUserObject::ResourceComparator,std::allocator<AGCLLVMUserObject::Sampler>>)::{lambda(llvm::Function *)#1}::operator() const(llvm::Function *)::{lambda(ResourceIntrinsic)#1}>,BOOL ()(ResourceIntrinsic)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v7;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  AGCArgumentBuffer::Resource::Bounds::Bounds((AGCArgumentBuffer::Resource::Bounds *)&v7, *(llvm::Constant **)(*a2 - 32 * (*(_DWORD *)(*a2 + 20) & 0x7FFFFFF) + 32));
  v4 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  IntervalMap<unsigned int>::insert(v3, v7, *v5);
  return 1;
}

_QWORD *llvm::DenseMap<llvm::Type *,std::pair<BOOL,BOOL>,llvm::DenseMapInfo<llvm::Type *,void>,llvm::detail::DenseMapPair<llvm::Type *,std::pair<BOOL,BOOL>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  llvm *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x1CAA2C6C0](16 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    v12 = (void *)(16 * v3);
    if ((_DWORD)v3)
    {
      v13 = 16 * v3;
      v14 = v4;
      do
      {
        v15 = *(_QWORD *)v14;
        if ((*(_QWORD *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v19);
          v16 = v19;
          *v19 = *(_QWORD *)v14;
          *((_WORD *)v16 + 4) = *((_WORD *)v14 + 4);
          ++*(_DWORD *)(a1 + 8);
        }
        v14 = (llvm *)((char *)v14 + 16);
        v13 -= 16;
      }
      while (v13);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v17 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v17)
    {
      v18 = 16 * v17;
      do
      {
        *result = -4096;
        result += 2;
        v18 -= 16;
      }
      while (v18);
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *,false>(uint64_t a1, void **a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  __int128 v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  __int128 v48;
  int v49;
  int v50;
  __int128 *v51;
  __int128 *v52;
  __int128 *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  __int128 v65;
  unsigned int v66;
  int v67;
  void **v68;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  unsigned int v74;
  void *v75;
  char v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int64_t v81;
  int64_t v82;
  int64_t v83;
  uint64_t v84;
  __n128 *v85;
  unsigned __int32 v86;
  unsigned __int32 v87;
  __n128 *v88;
  unsigned __int32 v89;
  unsigned __int32 v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int32 v93;
  unsigned __int32 v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void **v98;
  char v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  __n128 *v110;
  unsigned __int32 v111;
  void *v112;
  char v113;
  int v114;
  uint64_t v115;
  void **v117;
  unsigned int v118;
  void *v119;
  char v120;
  int v121;
  uint64_t v122;
  __int128 *v123;
  __int128 *v124;
  uint64_t v125;
  unsigned __int8 v127;
  unint64_t v128;
  unint64_t v129;
  _BYTE v130[15];
  _BYTE v131[15];
  _BYTE v132[15];
  __int128 v133;
  __n128 v134;
  __int128 v135;
  __int128 v136;
  _BYTE v137[15];
  _BYTE v138[15];
  _BYTE v139[15];
  _BYTE v140[15];
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

LABEL_1:
  v124 = (__int128 *)(a2 - 8);
  v125 = (uint64_t)(a2 - 4);
  v123 = (__int128 *)(a2 - 12);
  v7 = a1;
  v128 = (unint64_t)a2;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = (uint64_t)((uint64_t)a2 - v7) >> 5;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((_DWORD *)a2 - 1) > *(_DWORD *)(a1 + 28))
        {
          v143 = *(_QWORD *)(a1 + 16);
          v135 = *(_OWORD *)a1;
          v48 = *(_OWORD *)v125;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v125 + 16);
          *(_OWORD *)a1 = v48;
          *(_QWORD *)(v125 + 16) = v143;
          *(_OWORD *)v125 = v135;
          v49 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v49;
          v50 = *(_DWORD *)(a1 + 28);
          *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v50;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)v125);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, a1 + 32, a1 + 64, v125);
        return;
      case 5:
        v51 = (__int128 *)(a1 + 32);
        v52 = (__int128 *)(a1 + 64);
        v53 = (__int128 *)(a1 + 96);
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, a1 + 32, a1 + 64, a1 + 96);
        if (*((_DWORD *)a2 - 1) > *(_DWORD *)(a1 + 124))
        {
          v54 = *v53;
          v55 = *(_QWORD *)(a1 + 112);
          v56 = *(_QWORD *)(v125 + 16);
          *v53 = *(_OWORD *)v125;
          *(_QWORD *)(a1 + 112) = v56;
          *(_QWORD *)(v125 + 16) = v55;
          *(_OWORD *)v125 = v54;
          LODWORD(v55) = *(_DWORD *)(a1 + 120);
          *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v55;
          LODWORD(v55) = *(_DWORD *)(a1 + 124);
          *(_DWORD *)(a1 + 124) = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v55;
          v57 = *(_DWORD *)(a1 + 124);
          v58 = *(_DWORD *)(a1 + 92);
          if (v57 > v58)
          {
            v59 = *(_QWORD *)(a1 + 80);
            v60 = *v52;
            *v52 = *v53;
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 112);
            *v53 = v60;
            *(_QWORD *)(a1 + 112) = v59;
            v61 = *(_DWORD *)(a1 + 88);
            v62 = *(_DWORD *)(a1 + 120);
            *(_DWORD *)(a1 + 88) = v62;
            *(_DWORD *)(a1 + 92) = v57;
            *(_DWORD *)(a1 + 120) = v61;
            *(_DWORD *)(a1 + 124) = v58;
            v63 = *(_DWORD *)(a1 + 60);
            if (v57 > v63)
            {
              v64 = *(_QWORD *)(a1 + 48);
              v65 = *v51;
              *v51 = *v52;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 80);
              *v52 = v65;
              *(_QWORD *)(a1 + 80) = v64;
              LODWORD(v64) = *(_DWORD *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v62;
              *(_DWORD *)(a1 + 60) = v57;
              *(_DWORD *)(a1 + 88) = v64;
              *(_DWORD *)(a1 + 92) = v63;
              v66 = *(_DWORD *)(a1 + 28);
              if (v57 > v66)
              {
                v144 = *(_QWORD *)(a1 + 16);
                v136 = *(_OWORD *)a1;
                *(_OWORD *)a1 = *v51;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 48);
                *v51 = v136;
                *(_QWORD *)(a1 + 48) = v144;
                v67 = *(_DWORD *)(a1 + 24);
                *(_DWORD *)(a1 + 24) = v62;
                *(_DWORD *)(a1 + 28) = v57;
                *(_DWORD *)(a1 + 56) = v67;
                *(_DWORD *)(a1 + 60) = v66;
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 767)
        {
          v68 = (void **)(a1 + 32);
          v70 = (void **)a1 == a2 || v68 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v70)
            {
              v71 = 0;
              v72 = a1;
              do
              {
                v73 = v68;
                v74 = *(_DWORD *)(v72 + 60);
                if (v74 > *(_DWORD *)(v72 + 28))
                {
                  v75 = *v68;
                  *(_QWORD *)v137 = *(_QWORD *)(v72 + 40);
                  *(_QWORD *)&v137[7] = *(_QWORD *)(v72 + 47);
                  v76 = *(_BYTE *)(v72 + 55);
                  v68[1] = 0;
                  v68[2] = 0;
                  *v68 = 0;
                  v77 = *(_DWORD *)(v72 + 56);
                  v78 = v71;
                  while (1)
                  {
                    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + v78 + 32, (__n128 *)(a1 + v78));
                    if (!v78)
                      break;
                    v79 = *(_DWORD *)(a1 + v78 - 4);
                    v78 -= 32;
                    if (v74 <= v79)
                    {
                      v80 = a1 + v78 + 32;
                      goto LABEL_85;
                    }
                  }
                  v80 = a1;
LABEL_85:
                  if (*(char *)(v80 + 23) < 0)
                    operator delete(*(void **)v80);
                  *(_QWORD *)v80 = v75;
                  *(_QWORD *)(v80 + 8) = *(_QWORD *)v137;
                  *(_QWORD *)(v80 + 15) = *(_QWORD *)&v137[7];
                  *(_BYTE *)(v80 + 23) = v76;
                  *(_DWORD *)(v80 + 24) = v77;
                  *(_DWORD *)(v80 + 28) = v74;
                }
                v68 = v73 + 4;
                v71 += 32;
                v72 = (uint64_t)v73;
              }
              while (v73 + 4 != a2);
            }
          }
          else if (!v70)
          {
            do
            {
              v117 = v68;
              v118 = *(_DWORD *)(a1 + 60);
              if (v118 > *(_DWORD *)(a1 + 28))
              {
                v119 = *v68;
                *(_QWORD *)v140 = *(_QWORD *)(a1 + 40);
                *(_QWORD *)&v140[7] = *(_QWORD *)(a1 + 47);
                v120 = *(_BYTE *)(a1 + 55);
                v68[1] = 0;
                v68[2] = 0;
                *v68 = 0;
                v121 = *(_DWORD *)(a1 + 56);
                do
                {
                  v122 = a1;
                  std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + 32, (__n128 *)a1);
                  a1 -= 32;
                }
                while (v118 > *(_DWORD *)(v122 - 4));
                if (*(char *)(v122 + 23) < 0)
                  operator delete(*(void **)v122);
                *(_QWORD *)v122 = v119;
                *(_QWORD *)(v122 + 15) = *(_QWORD *)&v140[7];
                *(_QWORD *)(v122 + 8) = *(_QWORD *)v140;
                *(_BYTE *)(v122 + 23) = v120;
                *(_DWORD *)(v122 + 24) = v121;
                *(_DWORD *)(v122 + 28) = v118;
              }
              v68 = v117 + 4;
              a1 = (uint64_t)v117;
            }
            while (v117 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((void **)a1 != a2)
          {
            v81 = (unint64_t)(v9 - 2) >> 1;
            v82 = v81;
            do
            {
              v83 = v82;
              if (v81 >= v82)
              {
                v84 = (2 * v82) | 1;
                v85 = (__n128 *)(a1 + 32 * v84);
                if (2 * v83 + 2 < v9)
                {
                  v86 = v85[1].n128_u32[3];
                  v87 = v85[3].n128_u32[3];
                  v85 += 2 * (v86 > v87);
                  if (v86 > v87)
                    v84 = 2 * v83 + 2;
                }
                v88 = (__n128 *)(a1 + 32 * v83);
                v89 = v88[1].n128_u32[3];
                if (v85[1].n128_u32[3] <= v89)
                {
                  v129 = v88->n128_u64[0];
                  *(_QWORD *)&v138[7] = *(unint64_t *)((char *)&v88->n128_u64[1] + 7);
                  *(_QWORD *)v138 = v88->n128_u64[1];
                  v127 = v88[1].n128_u8[7];
                  v88->n128_u64[0] = 0;
                  v88->n128_u64[1] = 0;
                  v88[1].n128_u64[0] = 0;
                  v90 = v88[1].n128_u32[2];
                  do
                  {
                    v91 = (uint64_t)v88;
                    v88 = v85;
                    std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v91, v85);
                    if (v81 < v84)
                      break;
                    v92 = (2 * v84) | 1;
                    v85 = (__n128 *)(a1 + 32 * v92);
                    if (2 * v84 + 2 < v9)
                    {
                      v93 = v85[1].n128_u32[3];
                      v94 = v85[3].n128_u32[3];
                      v85 += 2 * (v93 > v94);
                      if (v93 > v94)
                        v92 = 2 * v84 + 2;
                    }
                    v84 = v92;
                  }
                  while (v85[1].n128_u32[3] <= v89);
                  if (v88[1].n128_i8[7] < 0)
                    operator delete((void *)v88->n128_u64[0]);
                  v88->n128_u64[0] = v129;
                  v88->n128_u64[1] = *(_QWORD *)v138;
                  *(unint64_t *)((char *)&v88->n128_u64[1] + 7) = *(_QWORD *)&v138[7];
                  v88[1].n128_u8[7] = v127;
                  v88[1].n128_u32[2] = v90;
                  v88[1].n128_u32[3] = v89;
                }
              }
              v82 = v83 - 1;
            }
            while (v83);
            v95 = (unint64_t)v8 >> 5;
            do
            {
              v96 = 0;
              v97 = *(void **)a1;
              v98 = a2;
              *(_QWORD *)v132 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v132[7] = *(_QWORD *)(a1 + 15);
              v99 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v100 = a1;
              v102 = *(_DWORD *)(a1 + 24);
              v101 = *(_DWORD *)(a1 + 28);
              do
              {
                v103 = v100 + 32 * v96 + 32;
                v104 = (2 * v96) | 1;
                v105 = 2 * v96 + 2;
                if (v105 < v95)
                {
                  v106 = *(_DWORD *)(v103 + 28);
                  v107 = *(_DWORD *)(v103 + 60);
                  v103 += 32 * (v106 > v107);
                  if (v106 > v107)
                    v104 = v105;
                }
                std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v100, (__n128 *)v103);
                v100 = v103;
                v96 = v104;
              }
              while (v104 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
              a2 -= 4;
              if ((void **)v103 == v98 - 4)
              {
                if (*(char *)(v103 + 23) < 0)
                  operator delete(*(void **)v103);
                *(_QWORD *)v103 = v97;
                *(_QWORD *)(v103 + 8) = *(_QWORD *)v132;
                *(_QWORD *)(v103 + 15) = *(_QWORD *)&v132[7];
                *(_BYTE *)(v103 + 23) = v99;
                *(_DWORD *)(v103 + 24) = v102;
                *(_DWORD *)(v103 + 28) = v101;
              }
              else
              {
                std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v103, (__n128 *)v98 - 2);
                if (*((char *)v98 - 9) < 0)
                  operator delete(*a2);
                *(v98 - 4) = v97;
                *(void **)((char *)v98 - 17) = *(void **)&v132[7];
                *(v98 - 3) = *(void **)v132;
                *((_BYTE *)v98 - 9) = v99;
                *((_DWORD *)v98 - 2) = v102;
                *((_DWORD *)v98 - 1) = v101;
                v108 = v103 + 32 - a1;
                if (v108 >= 33)
                {
                  v109 = (((unint64_t)v108 >> 5) - 2) >> 1;
                  v110 = (__n128 *)(a1 + 32 * v109);
                  v111 = *(_DWORD *)(v103 + 28);
                  if (v110[1].n128_u32[3] > v111)
                  {
                    v112 = *(void **)v103;
                    *(_QWORD *)v139 = *(_QWORD *)(v103 + 8);
                    *(_QWORD *)&v139[7] = *(_QWORD *)(v103 + 15);
                    v113 = *(_BYTE *)(v103 + 23);
                    *(_QWORD *)(v103 + 8) = 0;
                    *(_QWORD *)(v103 + 16) = 0;
                    *(_QWORD *)v103 = 0;
                    v114 = *(_DWORD *)(v103 + 24);
                    do
                    {
                      v115 = v103;
                      v103 = (uint64_t)v110;
                      std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(v115, v110);
                      if (!v109)
                        break;
                      v109 = (v109 - 1) >> 1;
                      v110 = (__n128 *)(a1 + 32 * v109);
                    }
                    while (v110[1].n128_u32[3] > v111);
                    if (*(char *)(v103 + 23) < 0)
                      operator delete(*(void **)v103);
                    *(_QWORD *)v103 = v112;
                    *(_QWORD *)(v103 + 8) = *(_QWORD *)v139;
                    *(_QWORD *)(v103 + 15) = *(_QWORD *)&v139[7];
                    *(_BYTE *)(v103 + 23) = v113;
                    *(_DWORD *)(v103 + 24) = v114;
                    *(_DWORD *)(v103 + 28) = v111;
                  }
                }
              }
            }
            while (v95-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = a1 + 32 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 <= 0x1000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((__int128 *)v11, (__int128 *)a1, (__int128 *)v125);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((__int128 *)a1, (__int128 *)v11, (__int128 *)v125);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((__int128 *)(a1 + 32), (__int128 *)(v11 - 32), v124);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((__int128 *)(a1 + 64), (__int128 *)(a1 + 32 + 32 * v10), v123);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((__int128 *)(v11 - 32), (__int128 *)v11, (__int128 *)(a1 + 32 + 32 * v10));
          v141 = *(_QWORD *)(a1 + 16);
          v133 = *(_OWORD *)a1;
          v12 = *(_QWORD *)(v11 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v11;
          *(_QWORD *)(a1 + 16) = v12;
          v13.n128_u64[1] = *((_QWORD *)&v133 + 1);
          *(_QWORD *)(v11 + 16) = v141;
          *(_OWORD *)v11 = v133;
          v13.n128_u64[0] = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v11 + 24);
          *(_QWORD *)(v11 + 24) = v13.n128_u64[0];
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(a1 + 28);
          if (*(_DWORD *)(a1 - 4) > v15)
          {
            v14 = a3;
            goto LABEL_12;
          }
          v33 = *(_QWORD *)a1;
          *(_QWORD *)v131 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v131[7] = *(_QWORD *)(a1 + 15);
          v34 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          a2 = (void **)v128;
          if (v15 <= *(_DWORD *)(v128 - 4))
          {
            v37 = a1 + 32;
            do
            {
              v7 = v37;
              if (v37 >= v128)
                break;
              v38 = *(_DWORD *)(v37 + 28);
              v37 += 32;
            }
            while (v15 <= v38);
          }
          else
          {
            v35 = a1;
            do
            {
              v7 = v35 + 32;
              v36 = *(_DWORD *)(v35 + 60);
              v35 += 32;
            }
            while (v15 <= v36);
          }
          v39 = v128;
          if (v7 < v128)
          {
            v40 = v128;
            do
            {
              v39 = v40 - 32;
              v41 = *(_DWORD *)(v40 - 4);
              v40 -= 32;
            }
            while (v15 > v41);
          }
          v42 = *(_DWORD *)(a1 + 24);
          while (v7 < v39)
          {
            v142 = *(_QWORD *)(v7 + 16);
            v134 = *(__n128 *)v7;
            v43 = *(_OWORD *)v39;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v39 + 16);
            *(_OWORD *)v7 = v43;
            *(_QWORD *)(v39 + 16) = v142;
            *(__n128 *)v39 = v134;
            v44 = *(_DWORD *)(v7 + 24);
            *(_DWORD *)(v7 + 24) = *(_DWORD *)(v39 + 24);
            *(_DWORD *)(v39 + 24) = v44;
            v45 = *(_DWORD *)(v7 + 28);
            *(_DWORD *)(v7 + 28) = *(_DWORD *)(v39 + 28);
            *(_DWORD *)(v39 + 28) = v45;
            do
            {
              v46 = *(_DWORD *)(v7 + 60);
              v7 += 32;
            }
            while (v15 <= v46);
            do
            {
              v47 = *(_DWORD *)(v39 - 4);
              v39 -= 32;
            }
            while (v15 > v47);
          }
          if (v7 - 32 != a1)
            std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1, (__n128 *)(v7 - 32));
          if (*(char *)(v7 - 9) < 0)
            operator delete(*(void **)(v7 - 32));
          a4 = 0;
          *(_QWORD *)(v7 - 32) = v33;
          *(_QWORD *)(v7 - 17) = *(_QWORD *)&v131[7];
          *(_QWORD *)(v7 - 24) = *(_QWORD *)v131;
          *(_BYTE *)(v7 - 9) = v34;
          *(_DWORD *)(v7 - 8) = v42;
          *(_DWORD *)(v7 - 4) = v15;
          continue;
        }
        v14 = a3;
        v15 = *(_DWORD *)(a1 + 28);
LABEL_12:
        v16 = *(_QWORD *)a1;
        *(_QWORD *)v130 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v130[7] = *(_QWORD *)(a1 + 15);
        v17 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v18 = *(_DWORD *)(a1 + 24);
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 32;
        }
        while (*(_DWORD *)(v20 + 60) > v15);
        v21 = v128;
        if (v20 == a1)
        {
          v24 = v128;
          while (v19 < v24)
          {
            v22 = v24 - 32;
            v25 = *(_DWORD *)(v24 - 4);
            v24 -= 32;
            if (v25 > v15)
              goto LABEL_22;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = v21 - 32;
            v23 = *(_DWORD *)(v21 - 4);
            v21 -= 32;
          }
          while (v23 <= v15);
        }
LABEL_22:
        v7 = v19;
        if (v19 < v22)
        {
          v26 = v22;
          do
          {
            v13 = *(__n128 *)v7;
            v27 = *(_QWORD *)(v7 + 16);
            v28 = *(_QWORD *)(v26 + 16);
            *(_OWORD *)v7 = *(_OWORD *)v26;
            *(_QWORD *)(v7 + 16) = v28;
            *(_QWORD *)(v26 + 16) = v27;
            *(__n128 *)v26 = v13;
            LODWORD(v27) = *(_DWORD *)(v7 + 24);
            *(_DWORD *)(v7 + 24) = *(_DWORD *)(v26 + 24);
            *(_DWORD *)(v26 + 24) = v27;
            LODWORD(v27) = *(_DWORD *)(v7 + 28);
            *(_DWORD *)(v7 + 28) = *(_DWORD *)(v26 + 28);
            *(_DWORD *)(v26 + 28) = v27;
            do
            {
              v29 = *(_DWORD *)(v7 + 60);
              v7 += 32;
            }
            while (v29 > v15);
            do
            {
              v30 = *(_DWORD *)(v26 - 4);
              v26 -= 32;
            }
            while (v30 <= v15);
          }
          while (v7 < v26);
        }
        if (v7 - 32 != a1)
          v13 = std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1, (__n128 *)(v7 - 32));
        if (*(char *)(v7 - 9) < 0)
          operator delete(*(void **)(v7 - 32));
        *(_QWORD *)(v7 - 32) = v16;
        *(_QWORD *)(v7 - 17) = *(_QWORD *)&v130[7];
        *(_QWORD *)(v7 - 24) = *(_QWORD *)v130;
        *(_BYTE *)(v7 - 9) = v17;
        *(_DWORD *)(v7 - 8) = v18;
        *(_DWORD *)(v7 - 4) = v15;
        v31 = v19 >= v22;
        a3 = v14;
        a2 = (void **)v128;
        if (!v31)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *,false>(a1, v7 - 32, a3, a4 & 1, v13);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, v7 - 32);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(v7, v128))
        {
          if (v32)
            continue;
          goto LABEL_36;
        }
        a2 = (void **)(v7 - 32);
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,unsigned int>>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a1);
}

uint64_t std::__split_buffer<std::pair<std::string,unsigned int>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__int128 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(__int128 *result, __int128 *a2, __int128 *a3)
{
  int *v3;
  unsigned int v4;
  int *v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  int v26;

  v3 = (int *)a2 + 7;
  v4 = *((_DWORD *)a2 + 7);
  v5 = (int *)result + 7;
  v6 = *((_DWORD *)a3 + 7);
  if (v4 > *((_DWORD *)result + 7))
  {
    if (v6 <= v4)
    {
      v18 = *((_QWORD *)result + 2);
      v19 = *result;
      v20 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v20;
      *a2 = v19;
      *((_QWORD *)a2 + 2) = v18;
      v7 = (int *)a2 + 6;
      v21 = *((_DWORD *)result + 6);
      *((_DWORD *)result + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v21;
      LODWORD(v18) = *((_DWORD *)result + 7);
      *((_DWORD *)result + 7) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = v18;
      if (*((_DWORD *)a3 + 7) <= v18)
        return result;
      v22 = *((_QWORD *)a2 + 2);
      v23 = *a2;
      v24 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v24;
      *a3 = v23;
      *((_QWORD *)a3 + 2) = v22;
      v11 = (int *)a3 + 6;
      v5 = (int *)a2 + 7;
    }
    else
    {
      v7 = (int *)result + 6;
      v8 = *((_QWORD *)result + 2);
      v9 = *result;
      v10 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v10;
      *a3 = v9;
      *((_QWORD *)a3 + 2) = v8;
      v11 = (int *)a3 + 6;
    }
    v3 = (int *)a3 + 7;
    goto LABEL_10;
  }
  if (v6 > v4)
  {
    v12 = *((_QWORD *)a2 + 2);
    v13 = *a2;
    v14 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v14;
    *a3 = v13;
    *((_QWORD *)a3 + 2) = v12;
    v11 = (int *)a2 + 6;
    LODWORD(v12) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = v12;
    LODWORD(v12) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 7) = v12;
    if (*((_DWORD *)a2 + 7) > *v5)
    {
      v15 = *((_QWORD *)result + 2);
      v16 = *result;
      v17 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v17;
      *a2 = v16;
      *((_QWORD *)a2 + 2) = v15;
      v7 = (int *)result + 6;
LABEL_10:
      v25 = *v7;
      *v7 = *v11;
      *v11 = v25;
      v26 = *v5;
      *v5 = *v3;
      *v3 = v26;
    }
  }
  return result;
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_DWORD *)(a4 + 28) > *(_DWORD *)(a3 + 28))
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 24);
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(a4 + 24);
    *(_DWORD *)(a4 + 24) = v9;
    LODWORD(v9) = *(_DWORD *)(a3 + 28);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(a4 + 28);
    *(_DWORD *)(a4 + 28) = v9;
    if (*(_DWORD *)(a3 + 28) > *(_DWORD *)(a2 + 28))
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = *(_DWORD *)(a3 + 24);
      *(_DWORD *)(a3 + 24) = v11;
      LODWORD(v11) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(a3 + 28);
      *(_DWORD *)(a3 + 28) = v11;
      if (*(_DWORD *)(a2 + 28) > *(_DWORD *)(a1 + 28))
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
        *(_DWORD *)(a2 + 24) = v13;
        LODWORD(v13) = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
        *(_DWORD *)(a2 + 28) = v13;
      }
    }
  }
  return result;
}

__n128 std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  result = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  *(__n128 *)a1 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  *(_DWORD *)(a1 + 24) = a2[1].n128_u32[2];
  *(_DWORD *)(a1 + 28) = a2[1].n128_u32[3];
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  char v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  __int128 v33;
  unsigned int v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[15];

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 4) > *(_DWORD *)(a1 + 28))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(_QWORD *)(a2 - 16) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v6;
        LODWORD(v6) = *(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      v19 = (__int128 *)(a1 + 32);
      v20 = (__int128 *)(a1 + 64);
      v21 = (__int128 *)(a1 + 96);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>(a1, a1 + 32, a1 + 64, a1 + 96);
      if (*(_DWORD *)(a2 - 4) <= *(_DWORD *)(a1 + 124))
        return 1;
      v22 = *(_QWORD *)(a1 + 112);
      v23 = *v21;
      v24 = *(_QWORD *)(a2 - 16);
      *v21 = *(_OWORD *)(a2 - 32);
      *(_QWORD *)(a1 + 112) = v24;
      *(_OWORD *)(a2 - 32) = v23;
      *(_QWORD *)(a2 - 16) = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + 120);
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 8) = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + 124);
      *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 4) = v22;
      v25 = *(_DWORD *)(a1 + 124);
      v26 = *(_DWORD *)(a1 + 92);
      if (v25 <= v26)
        return 1;
      v27 = *(_QWORD *)(a1 + 80);
      v28 = *v20;
      *v20 = *v21;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 112);
      *v21 = v28;
      *(_QWORD *)(a1 + 112) = v27;
      v29 = *(_DWORD *)(a1 + 88);
      v30 = *(_DWORD *)(a1 + 120);
      *(_DWORD *)(a1 + 88) = v30;
      *(_DWORD *)(a1 + 92) = v25;
      *(_DWORD *)(a1 + 120) = v29;
      *(_DWORD *)(a1 + 124) = v26;
      v31 = *(_DWORD *)(a1 + 60);
      if (v25 <= v31)
        return 1;
      v32 = *(_QWORD *)(a1 + 48);
      v33 = *v19;
      *v19 = *v20;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 80);
      *v20 = v33;
      *(_QWORD *)(a1 + 80) = v32;
      LODWORD(v32) = *(_DWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 56) = v30;
      *(_DWORD *)(a1 + 60) = v25;
      *(_DWORD *)(a1 + 88) = v32;
      *(_DWORD *)(a1 + 92) = v31;
      v34 = *(_DWORD *)(a1 + 28);
      if (v25 <= v34)
        return 1;
      v35 = *(_QWORD *)(a1 + 16);
      v36 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *v19;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 48);
      *v19 = v36;
      *(_QWORD *)(a1 + 48) = v35;
      LODWORD(v35) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = v30;
      *(_DWORD *)(a1 + 28) = v25;
      result = 1;
      *(_DWORD *)(a1 + 56) = v35;
      *(_DWORD *)(a1 + 60) = v34;
      return result;
    default:
      v9 = a1 + 64;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,AGCLLVMUserObject::createTlsGlobalsConstructor(void)::$_0 &,std::tuple<std::string,unsigned int,unsigned int> *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v10 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v10 + 28);
    if (v13 > *(_DWORD *)(v9 + 28))
    {
      v37 = *(_QWORD *)v10;
      *(_QWORD *)v38 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)&v38[7] = *(_QWORD *)(v10 + 15);
      v14 = *(_BYTE *)(v10 + 23);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = 0;
      v15 = *(_DWORD *)(v10 + 24);
      v16 = v11;
      while (1)
      {
        std::__memberwise_forward_assign[abi:nn180100]<std::tuple<std::string,unsigned int,unsigned int>,std::tuple<std::string,unsigned int,unsigned int>,std::string,unsigned int,unsigned int,0ul,1ul,2ul>(a1 + v16 + 96, (__n128 *)(a1 + v16 + 64));
        if (v16 == -64)
          break;
        v17 = *(_DWORD *)(a1 + v16 + 60);
        v16 -= 32;
        if (v13 <= v17)
        {
          v18 = a1 + v16 + 96;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      if (*(char *)(v18 + 23) < 0)
        operator delete(*(void **)v18);
      *(_QWORD *)v18 = v37;
      *(_QWORD *)(v18 + 8) = *(_QWORD *)v38;
      *(_QWORD *)(v18 + 15) = *(_QWORD *)&v38[7];
      *(_BYTE *)(v18 + 23) = v14;
      *(_DWORD *)(v18 + 24) = v15;
      *(_DWORD *)(v18 + 28) = v13;
      if (++v12 == 8)
        return v10 + 32 == a2;
    }
    v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2)
      return 1;
  }
}

void AGCLLVMUserObject::createTLSIntrinsic(AGCLLVMUserObject *this, const char *a2, const char *a3)
{
  llvm::Constant *v6;
  char v7;
  uint64_t v8;
  llvm::Type *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int Key;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const std::string::value_type *v27;
  std::string *v28;
  uint64_t inserted;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Instruction *v33;
  char *v34;
  llvm::Type **v35;
  std::string __p;
  std::string __dst;
  __int16 v38;

  v6 = *(llvm::Constant **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
  v7 = 1;
  v8 = llvm::User::operator new((llvm::User *)0x58);
  llvm::Constant::getNullValue(v6, v9);
  HIBYTE(v38) = 1;
  if (*a2)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v7 = 3;
  }
  LOBYTE(v38) = v7;
  v10 = llvm::GlobalVariable::GlobalVariable();
  *(_DWORD *)(v8 + 32) = *(_DWORD *)(v8 + 32) & 0xFFFFE3FF | 0x400;
  if ((v11 & 1) == 0)
  {
    if ((_DWORD)v10)
    {
      AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map = 0;
      *(_QWORD *)&dword_1EF8E97A0 = 0;
      qword_1EF8E97A8 = 0x2000000000;
      __cxa_atexit((void (*)(void *))llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::~StringMap, &AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, &dword_1C3C54000);
    }
  }
  if (dword_1EF8E97A4)
  {
    if (!a3)
      goto LABEL_25;
    goto LABEL_6;
  }
  AGCLLVMUserObject::getBuiltinArgMap((AGCLLVMUserObject *)v10);
  if (dword_1ED839B58)
  {
    for (i = (uint64_t *)AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = (uint64_t *)AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map;
  }
  v14 = AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map + 8 * dword_1ED839B58;
  if (i != (uint64_t *)v14)
  {
    v15 = *i;
    do
    {
      v16 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, (const void *)(v15 + 32), *(_QWORD *)v15);
      v17 = *(_BYTE *)(v15 + 24);
      *(_OWORD *)(v16 + 8) = *(_OWORD *)(v15 + 8);
      *(_BYTE *)(v16 + 24) = v17;
      do
      {
        v18 = i[1];
        ++i;
        v15 = v18;
        if (v18)
          v19 = v15 == -8;
        else
          v19 = 1;
      }
      while (v19);
    }
    while (i != (uint64_t *)v14);
  }
  v20 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, "air.patch_id", 0xCuLL);
  *(_QWORD *)(v20 + 8) = "air.get_patch_id";
  *(_QWORD *)(v20 + 16) = 16;
  *(_BYTE *)(v20 + 24) = 1;
  v21 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, "air.amplification_id", 0x14uLL);
  *(_QWORD *)(v21 + 8) = "air.get_amplification_id";
  *(_QWORD *)(v21 + 16) = 24;
  *(_BYTE *)(v21 + 24) = 1;
  v22 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map, "air.render_target_array_index", 0x1DuLL);
  *(_QWORD *)(v22 + 8) = "air.get_render_target_array_index";
  *(_QWORD *)(v22 + 16) = 33;
  *(_BYTE *)(v22 + 24) = 1;
  if (a3)
LABEL_6:
    strlen(a3);
LABEL_25:
  Key = llvm::StringMapImpl::FindKey();
  v24 = Key;
  if (Key == -1)
    v24 = dword_1EF8E97A0;
  v25 = *(_QWORD *)(AGCLLVMUserObject::getShaderDebuggerTLSBuiltinArgMaps(void)::shader_debugger_builtin_arg_map
                  + 8 * v24);
  v26 = *(void **)(v25 + 8);
  if (v26)
    std::string::basic_string[abi:nn180100](&__dst, v26, *(_QWORD *)(v25 + 16));
  else
    memset(&__dst, 0, sizeof(__dst));
  if (v6 == *(llvm::Constant **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232))
    v27 = ".i32";
  else
    v27 = ".i16";
  v28 = std::string::append(&__dst, v27);
  __p = *v28;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v30 = *((_QWORD *)this + 472);
  if (!v30)
  {
    v31 = *(_QWORD *)(*((_QWORD *)this + 22) + 80);
    if (v31)
      v30 = v31 - 24;
    else
      v30 = 0;
  }
  v32 = *(_QWORD *)(v30 + 40);
  if (v32)
    v33 = (llvm::Instruction *)(v32 - 24);
  else
    v33 = 0;
  llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v33);
  v34 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v38 = 257;
  v35 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t)(v34 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)&__dst);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v35, v8, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::LookupBucketFor());
  v7 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v7)
  {
    while (!v7 || v7 == -8)
    {
      v8 = i[1];
      ++i;
      v7 = v8;
    }
    return i;
  }
  v10 = MEMORY[0x1CAA2C6C0](a3 + 33, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 32;
  if (a3)
    memcpy((void *)(v10 + 32), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  v11[1] = 0;
  v11[2] = 0;
  *v11 = a3;
  *i = (uint64_t)v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1)); !*i || *i == -8; ++i)
    ;
  return i;
}

llvm::Value *AGCLLVMUserObject::replaceSimdgroupAtomicWaitNotify(void)::$_0::operator()(_QWORD *a1)
{
  llvm::IRBuilderBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Instruction *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  _WORD v14[20];
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v3 = *(_QWORD *)(a1[22] + 80);
  if (v3)
    v4 = v3 - 24;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 48);
  if (v5)
    v6 = (llvm::Instruction *)(v5 - 24);
  else
    v6 = 0;
  llvm::IRBuilderBase::SetInsertPoint(v2, v6);
  v7 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v8 = (uint64_t)(v7 + 32);
  v9 = *((_QWORD *)v7 + 50);
  v10 = *(_QWORD *)(v9 + 936);
  if (v10)
    v11 = strlen(*(const char **)(v9 + 936));
  else
    v11 = 0;
  v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v8, v10, v11, *(_QWORD *)(v8 + 144), *(_QWORD *)(v8 + 192), *(_QWORD *)(v8 + 192));
  v15[0] = llvm::ConstantInt::get();
  v15[1] = llvm::ConstantInt::get();
  v14[16] = 257;
  return llvm::IRBuilderBase::CreateCall(v8 + 8, *(_QWORD *)(v12 + 24), v12, (uint64_t)v15, 2, (uint64_t)v14);
}

uint64_t AGCLLVMUserObject::SimdgroupAtomicWaitNotify::foundBarrierDominatingAllSideEffectsAndExternalCalls(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm *v33;
  llvm **v34;
  uint64_t v35;
  llvm **v36;
  llvm *v37;
  uint64_t v38;
  llvm *v39;
  uint64_t v40;
  unsigned int v42;
  llvm *v43;
  char *v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  char *v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  llvm *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  llvm *v67;
  int v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  int v81;
  char *v82;
  uint64_t i;
  uint64_t v84;
  int v85;
  uint64_t v86;
  void **v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  int v95;
  char *v96;
  char *v97;
  int v98;
  char *v99;
  char *v100;
  char v101;
  char v102;
  llvm *v103;
  uint64_t v104;
  llvm *v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  char *v109;
  _QWORD *v110;
  llvm *v113;
  uint64_t v114;
  unsigned int v115;
  llvm *v116;
  uint64_t v117;
  unsigned int v118;
  llvm *v119[2];
  unsigned int v120;
  llvm *v121;
  uint64_t v122;
  unsigned int v123;
  llvm *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  _BYTE v130[32];
  void *v131;
  uint64_t v132;
  void *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  void *v137;
  unsigned int v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  _BYTE v144[32];
  void *v145;
  uint64_t v146;
  _BYTE v147[32];
  void *v148;
  uint64_t v149;
  uint64_t v150;
  llvm *v151[2];
  unsigned int v152;
  void *v153;
  uint64_t v154;
  _BYTE v155[4];
  int v156;
  void *v157;
  _BYTE v158[32];
  void *v159;
  unsigned int v160;
  _BYTE v161[32];
  void *v162;
  _BYTE v163[32];
  void *v164;
  unsigned int v165;
  _QWORD v166[6];

  v166[4] = *MEMORY[0x1E0C80C00];
  v127 = a1;
  v124 = 0;
  v125 = 0;
  v126 = 0;
  v121 = 0;
  v122 = 0;
  v123 = 0;
  v119[0] = 0;
  v119[1] = 0;
  v120 = 0;
  if (!*(_DWORD *)(a2 + 8))
    goto LABEL_46;
  v2 = *(_DWORD *)(a2 + 16);
  if (v2)
  {
    v3 = 296 * v2;
    v4 = *(_QWORD *)a2;
    while ((*(_QWORD *)v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v4 += 296;
      v3 -= 296;
      if (!v3)
        goto LABEL_46;
    }
  }
  else
  {
    v4 = *(_QWORD *)a2;
  }
  v5 = *(_QWORD *)a2 + 296 * v2;
  if (v4 == v5)
    goto LABEL_46;
  v6 = *(_QWORD *)v4;
LABEL_10:
  v148 = &v150;
  v149 = 0x100000000;
  v151[0] = 0;
  v151[1] = 0;
  v152 = 0;
  v156 = 0;
  v155[0] = 0;
  v153 = 0;
  v154 = v6;
  llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>();
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct((uint64_t)v119, (uint64_t *)v4);
  llvm::DominatorTreeBase<llvm::BasicBlock,false>::operator=();
  llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll((uint64_t)v151);
  llvm::deallocate_buffer(v151[0], (void *)(16 * v152));
  if (v148 != &v150)
    free(v148);
  v7 = *(unsigned int *)(v4 + 16);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)(v4 + 8);
    v9 = &v8[v7];
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct((uint64_t)v119, (uint64_t *)v4);
      v10 = *(unsigned int *)(v4 + 64);
      if (!(_DWORD)v10)
        goto LABEL_23;
      v11 = *(_QWORD *)(v4 + 56);
      v12 = v11 + 8 * v10;
      v13 = v11 + 8;
      do
      {
        v14 = llvm::DominatorTree::dominates();
        if (v13 >= v12)
          break;
        v13 += 8;
      }
      while ((v14 & 1) != 0);
      if (v14)
      {
LABEL_23:
        llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct((uint64_t)v119, (uint64_t *)v4);
        v15 = *(unsigned int *)(v4 + 208);
        if (!(_DWORD)v15)
          goto LABEL_24;
        v16 = *(_QWORD *)(v4 + 200);
        v17 = v16 + 8 * v15;
        v18 = v16 + 8;
        do
        {
          v19 = llvm::DominatorTree::dominates();
          if (v18 >= v17)
            break;
          v18 += 8;
        }
        while ((v19 & 1) != 0);
        if (v19)
        {
LABEL_24:
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::FindAndConstruct((uint64_t)&v124, (uint64_t *)v4);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v20 + 8, *v8);
        }
      }
      ++v8;
    }
    while (v8 != v9);
    goto LABEL_29;
  }
  if (*(_DWORD *)(v4 + 64) || *(_DWORD *)(v4 + 208))
  {
LABEL_29:
    v21 = *(_QWORD *)v4;
    v148 = 0;
    v22 = (uint64_t)v124;
    v23 = v126;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>((uint64_t)v124, v126, v21, &v148)&& v148 != (void *)(v22 + 56 * v23))
    {
      goto LABEL_34;
    }
    v148 = &v150;
    v149 = 0x400000000;
    v24 = (uint64_t *)&v121;
    goto LABEL_32;
  }
  v148 = &v150;
  v149 = 0x400000000;
  v24 = (uint64_t *)&v124;
LABEL_32:
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::FindAndConstruct((uint64_t)v24, (uint64_t *)v4);
  llvm::SmallVectorImpl<llvm::Value *>::operator=(v25 + 8, (uint64_t)&v148);
  if (v148 != &v150)
    free(v148);
LABEL_34:
  while (1)
  {
    v4 += 296;
    if (v4 == v5)
      break;
    v6 = *(_QWORD *)v4;
    if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (v4 != v5)
        goto LABEL_10;
      break;
    }
  }
  if (!(_DWORD)v122)
  {
LABEL_46:
    v31 = 1;
    goto LABEL_47;
  }
  v116 = 0;
  v117 = 0;
  v118 = 0;
  v26 = v125;
  if (!(_DWORD)v125)
  {
    v42 = 0;
    v43 = 0;
    v27 = a1;
    goto LABEL_104;
  }
  v27 = a1;
  if (v126)
  {
    v28 = 56 * v126;
    v29 = (uint64_t)v124;
    v30 = a2;
    while ((*(_QWORD *)v29 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v29 += 56;
      v28 -= 56;
      if (!v28)
        goto LABEL_100;
    }
  }
  else
  {
    v29 = (uint64_t)v124;
    v30 = a2;
  }
  v44 = (char *)v124 + 56 * v126;
  if ((char *)v29 != v44)
  {
    v108 = v125;
    v45 = (uint64_t)v121;
    v46 = v123;
    v47 = (char *)v121 + 56 * v123;
    v48 = *(_QWORD *)v29;
    v109 = v47;
LABEL_58:
    v128 = v130;
    v129 = 0x400000000;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::lookup((uint64_t)&v148, *(_QWORD *)v30, *(_DWORD *)(v30 + 16), v48);
    if (v160)
    {
      v49 = (uint64_t *)v159;
      v50 = 8 * v160;
      do
      {
        v51 = *(_QWORD *)(*v49 - 32);
        if (!v51 || *(_BYTE *)(v51 + 16) || *(_QWORD *)(v51 + 24) != *(_QWORD *)(*v49 + 72))
          v51 = 0;
        v145 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(v45, v46, v51, &v145)&& v145 != v47)
        {
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v128, *v49);
        }
        ++v49;
        v50 -= 8;
      }
      while (v50);
    }
    v52 = *(unsigned int *)(v29 + 16);
    if ((_DWORD)v129)
    {
      if (!(_DWORD)v52)
        goto LABEL_80;
    }
    else if (!(_DWORD)v52)
    {
      v145 = v147;
      v146 = 0x400000000;
      llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::FindAndConstruct((uint64_t)&v116, (uint64_t *)v29);
      llvm::SmallVectorImpl<llvm::Value *>::operator=(v59 + 8, (uint64_t)&v145);
      if (v145 != v147)
        free(v145);
LABEL_80:
      if (v164 != v166)
        free(v164);
      if (v162 != v163)
        free(v162);
      if (v159 != v161)
        free(v159);
      v30 = a2;
      v27 = a1;
      v47 = v109;
      if (v157 != v158)
        free(v157);
      if (v153 != v155)
        free(v153);
      if (v148 != &v150)
        free(v148);
      if (v128 != v130)
        free(v128);
      while (1)
      {
        v29 += 56;
        if ((char *)v29 == v44)
          break;
        v48 = *(_QWORD *)v29;
        if ((*(_QWORD *)v29 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if ((char *)v29 != v44)
            goto LABEL_58;
          break;
        }
      }
      v60 = v117;
      v43 = v116;
      v26 = v108;
      goto LABEL_102;
    }
    v53 = *(uint64_t **)(v29 + 8);
    v54 = &v53[v52];
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct((uint64_t)v119, (uint64_t *)v29);
      if (!(_DWORD)v129)
        goto LABEL_78;
      v55 = (char *)v128 + 8 * v129;
      v56 = (char *)v128 + 8;
      do
      {
        v57 = llvm::DominatorTree::dominates();
        if (v56 >= v55)
          break;
        v56 += 8;
      }
      while ((v57 & 1) != 0);
      if (v57)
      {
LABEL_78:
        llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::FindAndConstruct((uint64_t)&v116, (uint64_t *)v29);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v58 + 8, *v53);
      }
      ++v53;
    }
    while (v53 != v54);
    goto LABEL_80;
  }
LABEL_100:
  v43 = 0;
  v60 = 0;
LABEL_102:
  if (v60 != v26)
  {
    v31 = 0;
    v61 = v118;
    v42 = v118;
    goto LABEL_223;
  }
  v42 = v118;
LABEL_104:
  v148 = 0;
  v61 = v42;
  v62 = (char *)v43 + 56 * v42;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>((uint64_t)v43, v42, v27, &v148)|| v148 == v62)
  {
    v113 = 0;
    v114 = 0;
    v115 = 0;
    if (!(_DWORD)v117)
      goto LABEL_221;
    v63 = v43;
    if (v42)
    {
      v64 = 56 * v42;
      v63 = v43;
      while ((*(_QWORD *)v63 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v63 = (llvm *)((char *)v63 + 56);
        v64 -= 56;
        if (!v64)
          goto LABEL_221;
      }
    }
    if (v63 == (llvm *)v62)
      goto LABEL_221;
    v65 = v166;
    v66 = *(_QWORD *)v63;
    v107 = v42;
    v106 = v42;
LABEL_116:
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::lookup((uint64_t)&v148, *(_QWORD *)a2, *(_DWORD *)(a2 + 16), v66);
    if (v165)
    {
      v110 = v65;
      v67 = v43;
      v68 = 0;
      v69 = (char *)v164;
      v70 = (char *)v164 + 8 * v165;
      do
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct((uint64_t)v119, (uint64_t *)v63);
        v71 = *((unsigned int *)v63 + 4);
        if ((_DWORD)v71)
        {
          v72 = *((_QWORD *)v63 + 1);
          v73 = 8 * v71;
          while (!llvm::DominatorTree::dominates())
          {
            v72 += 8;
            v73 -= 8;
            if (!v73)
              goto LABEL_124;
          }
          ++v68;
        }
LABEL_124:
        v69 += 8;
      }
      while (v69 != v70);
      v74 = v165;
      v43 = v67;
      v42 = v107;
      v61 = v106;
      v65 = v110;
    }
    else
    {
      v74 = 0;
      v68 = 0;
    }
    if (v74 == v68)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::FindAndConstruct((uint64_t)&v113, (uint64_t *)v63);
      llvm::SmallVectorImpl<llvm::Value *>::operator=(v75 + 8, (uint64_t)v63 + 8);
    }
    if (v164 != v65)
      free(v164);
    if (v162 != v163)
      free(v162);
    if (v159 != v161)
      free(v159);
    if (v157 != v158)
      free(v157);
    if (v153 != v155)
      free(v153);
    if (v148 != &v150)
      free(v148);
    while (1)
    {
      v63 = (llvm *)((char *)v63 + 56);
      if (v63 == (llvm *)v62)
        break;
      v66 = *(_QWORD *)v63;
      if ((*(_QWORD *)v63 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (v63 != (llvm *)v62)
          goto LABEL_116;
        break;
      }
    }
    if ((_DWORD)v114)
    {
      v105 = v43;
      v145 = v147;
      v146 = 0x400000000;
      v142 = v144;
      v143 = 0x400000000;
      llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::lookup((uint64_t)&v148, *(_QWORD *)a2, *(_DWORD *)(a2 + 16), a1);
      if (v160)
      {
        v76 = (uint64_t *)v159;
        v77 = (uint64_t)v121;
        v78 = v123;
        v79 = (char *)v121 + 56 * v123;
        v80 = (uint64_t)v113;
        v81 = v115;
        v82 = (char *)v113 + 56 * v115;
        for (i = 8 * v160; i; i -= 8)
        {
          v84 = *(_QWORD *)(*v76 - 32);
          if (!v84 || *(_BYTE *)(v84 + 16) || *(_QWORD *)(v84 + 24) != *(_QWORD *)(*v76 + 72))
            v84 = 0;
          v128 = 0;
          v85 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(v77, v78, v84, &v128);
          v86 = *v76;
          if (!v85 || v128 == v79)
          {
            v88 = *(_QWORD *)(v86 - 32);
            if (!v88 || *(_BYTE *)(v88 + 16) || *(_QWORD *)(v88 + 24) != *(_QWORD *)(v86 + 72))
              v88 = 0;
            v128 = 0;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(v80, v81, v88, &v128)|| v128 == v82)
            {
              goto LABEL_162;
            }
            v86 = *v76;
            v87 = &v142;
          }
          else
          {
            v87 = &v145;
          }
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v87, v86);
LABEL_162:
          ++v76;
        }
      }
      if (v164 != v166)
        free(v164);
      if (v162 != v163)
        free(v162);
      if (v159 != v161)
        free(v159);
      v89 = a2;
      v90 = a1;
      v43 = v105;
      v61 = v106;
      v42 = v107;
      if (v157 != v158)
        free(v157);
      if (v153 != v155)
        free(v153);
      if (v148 != &v150)
        free(v148);
      v91 = (char *)v142;
      if ((_DWORD)v143)
      {
        v92 = (char *)v142 + 8 * v143;
        while (1)
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct((uint64_t)v119, &v127);
          if (!(_DWORD)v146)
            goto LABEL_218;
          v93 = (char *)v145 + 8 * v146;
          v94 = (char *)v145 + 8;
          do
          {
            v95 = llvm::DominatorTree::dominates();
            if (v94 >= v93)
              break;
            v94 += 8;
          }
          while ((v95 & 1) != 0);
          if (v95)
          {
            llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct((uint64_t)v119, &v127);
            llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::lookup((uint64_t)&v148, *(_QWORD *)v89, *(_DWORD *)(v89 + 16), v90);
            if (!(_DWORD)v154)
              goto LABEL_187;
LABEL_218:
            v96 = (char *)v153 + 8 * v154;
            v97 = (char *)v153 + 8;
            do
            {
              v98 = llvm::DominatorTree::dominates();
              if (v97 >= v96)
                break;
              v97 += 8;
            }
            while ((v98 & 1) != 0);
            if (!v98)
            {
              v102 = 0;
            }
            else
            {
LABEL_187:
              llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct((uint64_t)v119, &v127);
              llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::lookup((uint64_t)&v128, *(_QWORD *)v89, *(_DWORD *)(v89 + 16), v90);
              if (v138)
              {
                v99 = (char *)v137 + 8 * v138;
                v100 = (char *)v137 + 8;
                do
                {
                  v101 = llvm::DominatorTree::dominates();
                  v102 = v101;
                  if (v100 >= v99)
                    break;
                  v100 += 8;
                }
                while ((v101 & 1) != 0);
              }
              else
              {
                v102 = 1;
              }
              if (v140 != &v141)
                free(v140);
              v89 = a2;
              v90 = a1;
              if (v137 != &v139)
                free(v137);
              if (v135 != &v136)
                free(v135);
              if (v133 != &v134)
                free(v133);
              if (v131 != &v132)
                free(v131);
              if (v128 != v130)
                free(v128);
            }
            if (v164 != v166)
              free(v164);
            if (v162 != v163)
              free(v162);
            if (v159 != v161)
              free(v159);
            if (v157 != v158)
              free(v157);
            if (v153 != v155)
              free(v153);
            if (v148 != &v150)
              free(v148);
            if ((v102 & 1) != 0)
              break;
          }
          v91 += 8;
          if (v91 == v92)
          {
            v31 = 0;
            goto LABEL_226;
          }
        }
        v31 = 1;
LABEL_226:
        v91 = (char *)v142;
        v42 = v107;
        v61 = v106;
      }
      else
      {
        v31 = 0;
      }
      if (v91 != v144)
        free(v91);
      if (v145 != v147)
        free(v145);
    }
    else
    {
LABEL_221:
      v31 = 0;
    }
    v103 = v113;
    v104 = v115;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::destroyAll((uint64_t)v113, v115);
    llvm::deallocate_buffer(v103, (void *)(56 * v104));
    goto LABEL_223;
  }
  v31 = 1;
LABEL_223:
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::destroyAll((uint64_t)v43, v42);
  llvm::deallocate_buffer(v43, (void *)(56 * v61));
LABEL_47:
  v32 = v120;
  v33 = v119[0];
  if (v120)
  {
    v34 = (llvm **)((char *)v119[0] + 24);
    v35 = 80 * v120;
    do
    {
      if (((unint64_t)*(v34 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll((uint64_t)(v34 + 1));
        llvm::deallocate_buffer(v34[1], (void *)(16 * *((unsigned int *)v34 + 6)));
        v36 = (llvm **)*(v34 - 2);
        if (v34 != v36)
          free(v36);
      }
      v34 += 10;
      v35 -= 80;
    }
    while (v35);
  }
  llvm::deallocate_buffer(v33, (void *)(80 * v32));
  v37 = v121;
  v38 = v123;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::destroyAll((uint64_t)v121, v123);
  llvm::deallocate_buffer(v37, (void *)(56 * v38));
  v39 = v124;
  v40 = v126;
  llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::destroyAll((uint64_t)v124, v126);
  llvm::deallocate_buffer(v39, (void *)(56 * v40));
  return v31;
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::LookupBucketFor<llvm::Function const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  v6 = v10;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::grow(a1, v8);
    v10 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::LookupBucketFor<llvm::Function const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    v6 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  v9 = *a2;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)v6 = v9;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(v6 + 16) = 0x100000000;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_BYTE *)(v6 + 72) = 0;
  return result;
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;

  v9 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::grow(a1, v8);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v6 = *a2;
  v6[1] = (uint64_t)(v6 + 3);
  *(_QWORD *)&result = 0x400000000;
  v6[2] = 0x400000000;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 56 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::lookup(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  void **v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>,llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,AGCLLVMUserObject::SimdgroupAtomicWaitNotify::callsites_lists_t>>::LookupBucketFor<llvm::Function const*>(a2, a3, a4, &v10);
  if (!(_DWORD)result)
  {
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 0x400000000;
    *(_QWORD *)(a1 + 48) = a1 + 64;
    *(_DWORD *)(a1 + 60) = 4;
    *(_QWORD *)(a1 + 96) = a1 + 112;
    *(_DWORD *)(a1 + 108) = 4;
    *(_QWORD *)(a1 + 144) = a1 + 160;
    *(_DWORD *)(a1 + 156) = 4;
    *(_QWORD *)(a1 + 192) = a1 + 208;
    *(_DWORD *)(a1 + 204) = 4;
    *(_QWORD *)(a1 + 240) = a1 + 256;
    *(_DWORD *)(a1 + 252) = 4;
    return result;
  }
  v6 = v10;
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x400000000;
  if (*(_DWORD *)(v6 + 16))
    llvm::SmallVectorImpl<llvm::Value *>::operator=(a1, v6 + 8);
  *(_QWORD *)(a1 + 48) = a1 + 64;
  *(_QWORD *)(a1 + 56) = 0x400000000;
  if (*(_DWORD *)(v6 + 64))
    llvm::SmallVectorImpl<llvm::Value *>::operator=(a1 + 48, v6 + 56);
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x400000000;
  if (*(_DWORD *)(v6 + 112))
    llvm::SmallVectorImpl<llvm::Value *>::operator=(a1 + 96, v6 + 104);
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0x400000000;
  if (*(_DWORD *)(v6 + 160))
    llvm::SmallVectorImpl<llvm::Value *>::operator=(a1 + 144, v6 + 152);
  *(_QWORD *)(a1 + 192) = a1 + 208;
  result = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0x400000000;
  if (*(_DWORD *)(v6 + 208))
    result = llvm::SmallVectorImpl<llvm::Value *>::operator=(result, v6 + 200);
  *(_QWORD *)(a1 + 240) = a1 + 256;
  v7 = (void **)(a1 + 240);
  *(_QWORD *)(a1 + 248) = 0x400000000;
  v8 = *(_DWORD *)(v6 + 256);
  if (v8 && v7 != (void **)(v6 + 248))
  {
    if (v8 < 5)
    {
      v9 = *(unsigned int *)(v6 + 256);
    }
    else
    {
      *(_DWORD *)(a1 + 248) = 0;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = *(unsigned int *)(v6 + 256);
      if (!(_DWORD)v9)
        goto LABEL_20;
    }
    result = (uint64_t)memcpy(*v7, *(const void **)(v6 + 248), 8 * v9);
LABEL_20:
    *(_DWORD *)(a1 + 248) = v8;
  }
  return result;
}

