void llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::destroyAll(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a2)
  {
    v2 = 56 * a2;
    v3 = (_QWORD *)(a1 + 24);
    do
    {
      if ((*(v3 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = (_QWORD *)*(v3 - 2);
        if (v3 != v4)
          free(v4);
      }
      v3 += 7;
      v2 -= 56;
    }
    while (v2);
  }
}

_QWORD *llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 56 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (char *)v4 + 24;
      v13 = 56 * v3;
      do
      {
        v14 = *((_QWORD *)v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>,llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::SmallVector<llvm::CallInst const*,4u>>>::LookupBucketFor<llvm::Function const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          v15 = v20;
          *v20 = *((_QWORD *)v12 - 3);
          v15[2] = 0x400000000;
          v15[1] = v15 + 3;
          v16 = (uint64_t)(v15 + 1);
          if (*((_DWORD *)v12 - 2))
            llvm::SmallVectorImpl<llvm::Value *>::operator=(v16, (uint64_t)(v12 - 16));
          ++*(_DWORD *)(a1 + 8);
          v17 = (char *)*((_QWORD *)v12 - 2);
          if (v12 != v17)
            free(v17);
        }
        v12 += 56;
        v13 -= 56;
      }
      while (v13);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(56 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18)
    {
      v19 = 56 * v18;
      do
      {
        *result = -4096;
        result += 7;
        v19 -= 56;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::LookupBucketFor<llvm::Function const*>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 80 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 80 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 80 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 80 * v10;
      do
      {
        *result = -4096;
        result += 10;
        v11 -= 80;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (char *)v4 + 24;
      v13 = 80 * v3;
      do
      {
        v14 = *((_QWORD *)v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>,llvm::Function const*,llvm::DominatorTree,llvm::DenseMapInfo<llvm::Function const*,void>,llvm::detail::DenseMapPair<llvm::Function const*,llvm::DominatorTree>>::LookupBucketFor<llvm::Function const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          *v18 = *((_QWORD *)v12 - 3);
          llvm::DominatorTreeBase<llvm::BasicBlock,false>::DominatorTreeBase();
          ++*(_DWORD *)(a1 + 8);
          llvm::DenseMapBase<llvm::DenseMap<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>,llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>,llvm::DenseMapInfo<llvm::BasicBlock *,void>,llvm::detail::DenseMapPair<llvm::BasicBlock *,std::unique_ptr<llvm::DomTreeNodeBase<llvm::BasicBlock>>>>::destroyAll((uint64_t)(v12 + 8));
          llvm::deallocate_buffer(*((llvm **)v12 + 1), (void *)(16 * *((unsigned int *)v12 + 6)));
          v15 = (char *)*((_QWORD *)v12 - 2);
          if (v12 != v15)
            free(v15);
        }
        v12 += 80;
        v13 -= 80;
      }
      while (v13);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, (void *)(80 * v3));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v16 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v16)
    {
      v17 = 80 * v16;
      do
      {
        *result = -4096;
        result += 10;
        v17 -= 80;
      }
      while (v17);
    }
  }
  return result;
}

uint64_t *llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1ED839C78) = qword_1ED839C78 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 65, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 64;
  if (a2)
    memcpy((void *)(v8 + 64), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *v9 = a2;
  *i = (uint64_t)v9;
  ++dword_1ED839C74;
  for (i = (uint64_t *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map));
        !*i || *i == -8;
  return i;
}

uint64_t *llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::try_emplace<>(const void *a1, size_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  i = (uint64_t *)(AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map
                + 8 * llvm::StringMapImpl::LookupBucketFor());
  v5 = *i;
  if (*i == -8)
  {
    LODWORD(qword_1ED839BA0) = qword_1ED839BA0 - 1;
  }
  else if (v5)
  {
    while (!v5 || v5 == -8)
    {
      v6 = i[1];
      ++i;
      v5 = v6;
    }
    return i;
  }
  v8 = MEMORY[0x1CAA2C6C0](a2 + 25, 8);
  v9 = (_QWORD *)v8;
  v10 = v8 + 24;
  if (a2)
    memcpy((void *)(v8 + 24), a1, a2);
  *(_BYTE *)(v10 + a2) = 0;
  *v9 = a2;
  *i = (uint64_t)v9;
  ++dword_1ED839B9C;
  for (i = (uint64_t *)(AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map
                      + 8
                      * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&AGCLLVMUserObject::getDimensionFunctionMap(void)::dimension_function_map));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, const void *a2, size_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  result = llvm::StringMapImpl::LookupBucketFor();
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 8 * result);
  if (v8)
  {
    if (v8 != -8)
      return result;
    --*((_DWORD *)a1 + 4);
  }
  v9 = result;
  v10 = MEMORY[0x1CAA2C6C0](a3 + 9, 8);
  v11 = (_QWORD *)v10;
  v12 = v10 + 8;
  if (a3)
    memcpy((void *)(v10 + 8), a2, a3);
  *(_BYTE *)(v12 + a3) = 0;
  *(_QWORD *)(v7 + 8 * v9) = v11;
  *v11 = a3;
  ++*((_DWORD *)a1 + 3);
  return llvm::StringMapImpl::RehashTable(a1);
}

uint64_t AGCLLVMUserObject::collectResourceCopyValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, unsigned int a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  _BYTE *v22;
  unsigned int v24;
  BOOL v25;
  int v26;
  __int16 v28;
  uint64_t v31;

  v13 = *(_QWORD **)a4;
  v14 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = *(_QWORD **)a4;
    while (*v16 != a3)
    {
      ++v16;
      v15 -= 8;
      if (!v15)
      {
        v16 = &v13[v14];
        break;
      }
    }
  }
  else
  {
    v16 = *(_QWORD **)a4;
  }
  if (v14 != v16 - v13)
    return 0;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a4, a3);
  v17 = *(_QWORD *)(a3 + 8);
  if (!v17)
  {
    LOBYTE(v18) = 0;
    v19 = 0;
    goto LABEL_43;
  }
  v18 = 0;
  v19 = 0;
  v31 = a1 + 3240;
  do
  {
    v20 = *(unsigned __int8 **)(v17 + 24);
    v21 = v20[16];
    if (v20 && v21 == 61)
    {
      v22 = (_BYTE *)*((_QWORD *)v20 - 8);
      if (*(_BYTE *)(*(_QWORD *)v22 + 8) != 15 && (a5 & 1) == 0 && v22[16] != 75)
      {
        LOBYTE(v21) = 61;
        goto LABEL_28;
      }
      if (((a5 | a7) & 1) == 0)
        *llvm::ValueMap<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](v31, *(llvm::Value **)(v17 + 24)) = a2;
      v18 = 1;
      v19 = a5 ^ 1;
    }
    else
    {
      if (!v20 || v21 != 60)
        goto LABEL_28;
      if (*(_BYTE *)(*(_QWORD *)v20 + 8) != 15 && (_DWORD)a5 == 0)
      {
        LOBYTE(v21) = 60;
        goto LABEL_28;
      }
      if ((AGCLLVMUserObject::collectResourceCopyValues(a1, a2, *(_QWORD *)(v17 + 24), a4, a5, a6, 1) & 1) == 0)
      {
        LOBYTE(v21) = v20[16];
LABEL_28:
        v24 = (((v21 - 75) >> 1) | (((_BYTE)v21 - 75) << 7));
        v25 = v24 > 5;
        v26 = (1 << v24) & 0x33;
        if (v25 || v26 == 0)
        {
          *a6 |= a5 ^ 1;
        }
        else
        {
          v28 = AGCLLVMUserObject::collectResourceCopyValues(a1, a2, v20, a4, a5, a6, a7);
          v18 = v28;
          v19 = HIBYTE(v28);
        }
        goto LABEL_37;
      }
      if (((a5 | a7) & 1) == 0)
        *llvm::ValueMap<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](v31, (llvm::Value *)v20) = a2;
      v18 = 1;
    }
LABEL_37:
    v17 = *(_QWORD *)(v17 + 8);
  }
  while (v17);
  if (v18 && *(_BYTE *)(a3 + 16) == 62)
    *llvm::ValueMap<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](v31, (llvm::Value *)a3) = a2;
LABEL_43:
  --*(_DWORD *)(a4 + 8);
  return v18 | (v19 << 8);
}

_QWORD *llvm::ValueMap<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  char v3;
  _QWORD *v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  v7 = &unk_1E7EB7D80;
  v10 = a1;
  v11 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>,llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,AGCArgumentBuffer::Resource const*>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::Value *,AGCArgumentBuffer::Resource const*,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 5;
}

_QWORD *AGCLLVMUserObject::replacePointerLoadsFromBitcast(_QWORD *result, llvm::Instruction *this)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Cast;
  llvm::Type **v7;
  llvm::Instruction *v8;
  uint64_t v9;
  llvm::Type *v10;
  uint64_t AlignedLoad;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[32];
  __int16 v15;

  v3 = result;
  v4 = **(_QWORD **)(*(_QWORD *)this + 16);
  if (*(_BYTE *)(v4 + 8) == 15
    || (result = (_QWORD *)llvm::Type::isIntegerTy(**(llvm::Type ***)(*(_QWORD *)this + 16)), (_DWORD)result))
  {
    v5 = *((_QWORD *)this + 1);
    if (!v5)
      return (_QWORD *)llvm::Instruction::eraseFromParent(this);
    Cast = 0;
    v7 = (llvm::Type **)*((_QWORD *)this - 4);
    do
    {
      v8 = *(llvm::Instruction **)(v5 + 24);
      v5 = *(_QWORD *)(v5 + 8);
      if (v8 && *((_BYTE *)v8 + 16) == 60)
      {
        if (!Cast)
        {
          v9 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 8;
          v15 = 257;
          v10 = AGCLLVMBuilder::tryDeducePointeeType(v7, this);
          AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v9 + 32), v10, (uint64_t)v7, 0, (uint64_t)v14);
          v12 = (uint64_t)v3 + *(_QWORD *)(*v3 - 24) + 40;
          if (*(_BYTE *)(v4 + 8) == 15)
          {
            v15 = 257;
            v13 = 49;
          }
          else
          {
            v15 = 257;
            v13 = 47;
          }
          Cast = llvm::IRBuilderBase::CreateCast(v12, v13, AlignedLoad, v4, (uint64_t)v14);
        }
        llvm::Value::replaceAllUsesWith();
        result = (_QWORD *)llvm::Instruction::eraseFromParent(v8);
      }
    }
    while (v5);
    if (!*((_QWORD *)this + 1))
      return (_QWORD *)llvm::Instruction::eraseFromParent(this);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::append<std::move_iterator<llvm::Value **>,void>(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = *(unsigned int *)(result + 8);
  if (v7 + ((a3 - a2) >> 3) > (unint64_t)*(unsigned int *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v7 = *(unsigned int *)(v5 + 8);
  }
  if (v4 != a3)
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v9 = *(_QWORD *)v4;
      v4 += 8;
      *v8++ = v9;
    }
    while (v4 != a3);
  }
  *(_DWORD *)(v5 + 8) = v7 + (v6 >> 3);
  return result;
}

void AGCLLVMUserObject::handleGLIndirectSamplerFunction(AGCLLVMUserObject *this, llvm::Function *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  char *v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::BasicBlock *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  unsigned int v30;
  BOOL v31;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  BOOL v38;
  int v40;
  llvm::Instruction **v41;
  llvm::Instruction *v42;
  _BYTE *v43;
  unsigned int v44;
  llvm::Instruction *v45;
  _QWORD *v46;
  _BYTE *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  llvm::BasicBlock *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v64;
  llvm::BasicBlock *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  llvm::Instruction *v70;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  BOOL v78;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  llvm::IRBuilderBase *v94;
  llvm::Instruction *FirstNonPHI;
  llvm::IRBuilderBase *v96;
  llvm::Type *v97;
  int v98;
  llvm::User *PHI;
  unint64_t v100;
  uint64_t i;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  llvm::BasicBlock **v108;
  uint64_t v109;
  llvm::BasicBlock *v110;
  llvm::BasicBlock *v111;
  llvm::Instruction *v112;
  uint64_t v113;
  llvm::Instruction *v114;
  uint64_t IncomingValueForBlock;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  llvm::Value *v119;
  void **v120;
  void **v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v128;
  uint64_t v130;
  _QWORD v131[4];
  __int16 v132;
  _BYTE *v133;
  _BYTE *v134;
  uint64_t v135;
  int v136;
  _BYTE v137[32];
  void *__p[2];
  __int128 v139;
  __int128 v140;
  uint8_t buf[8];
  uint64_t v142;
  _BYTE v143[16];
  __int16 v144;
  char *v145;
  uint64_t v146;
  _QWORD v147[18];

  v147[16] = *MEMORY[0x1E0C80C00];
  v145 = (char *)v147;
  v146 = 0x1000000000;
  v4 = *((_QWORD *)a2 + 1);
  if (!v4)
    return;
  do
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v145, *(_QWORD *)(v4 + 24));
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4);
  v7 = v145;
  if (!(_DWORD)v146)
    goto LABEL_237;
  v8 = &v145[8 * v146];
  v128 = a3;
  v130 = 32 * a3;
  v9 = a4;
  v126 = v8;
  do
  {
    v10 = *(_QWORD *)v7;
    v11 = *(_QWORD *)v7 - 32 * (*(_DWORD *)(*(_QWORD *)v7 + 20) & 0x7FFFFFF);
    if (v9)
      v12 = *(_QWORD *)(v11 + 32 * a4);
    else
      v12 = 0;
    v13 = *(_QWORD *)(v11 + v130);
    if (*(_BYTE *)(v13 + 16) != 83)
      goto LABEL_63;
    v14 = *(llvm::BasicBlock **)(v10 + 40);
    v15 = *((_QWORD *)v14 + 1);
    if (v15)
    {
      v16 = *((_QWORD *)v14 + 1);
      while (1)
      {
        v17 = *(_QWORD *)(v16 + 24);
        v18 = *(unsigned __int8 *)(v17 + 16);
        v19 = v17 && v18 >= 0x1C;
        if (v19 && v18 - 29 <= 0xA)
          break;
        v16 = *(_QWORD *)(v16 + 8);
        if (!v16)
        {
LABEL_52:
          while (1)
          {
            v36 = *(_QWORD *)(v15 + 24);
            v37 = *(unsigned __int8 *)(v36 + 16);
            v38 = v36 && v37 >= 0x1C;
            if (v38 && v37 - 29 < 0xB)
              break;
            v15 = *(_QWORD *)(v15 + 8);
            if (!v15)
              goto LABEL_61;
          }
          if ((*(_DWORD *)(v13 + 20) & 0x7FFFFFF) != 1)
          {
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "All predecessors of the indirect sampler call have an unconditional branch, may need more code changes to handle this", buf, 2u);
            }
            abort();
          }
          llvm::Value::replaceAllUsesWith();
          llvm::Instruction::eraseFromParent((llvm::Instruction *)v13);
          if (v12)
          {
            if (*(_BYTE *)(v12 + 16) == 83)
              v10 = v12;
            else
              v10 = 0;
            goto LABEL_62;
          }
          goto LABEL_63;
        }
      }
      v21 = 0;
LABEL_21:
      v22 = *(_QWORD *)(v17 + 40);
      v23 = *(_QWORD *)(v22 + 40);
      if (v23 == v22 + 40
        || ((v24 = v23 - 24, v23) ? (v25 = v23 - 24) : (v25 = 0),
            (v26 = *(unsigned __int8 *)(v25 + 16) - 40, v27 = __CFADD__(v26, 11), v26 >= 0xFFFFFFF5)
          ? (v28 = v24)
          : (v28 = 0),
            v27 ? (v29 = *(_BYTE *)(v28 + 16) == 30) : (v29 = 0),
            !v29 || (*(_DWORD *)(v28 + 20) & 0x7FFFFFF) != 1))
      {
        v21 = v22;
      }
      while (1)
      {
        v16 = *(_QWORD *)(v16 + 8);
        if (!v16)
          break;
        v17 = *(_QWORD *)(v16 + 24);
        v30 = *(unsigned __int8 *)(v17 + 16);
        if (v17)
          v31 = v30 >= 0x1C;
        else
          v31 = 0;
        if (v31 && v30 - 29 < 0xB)
          goto LABEL_21;
      }
      if (!v21)
        goto LABEL_52;
      v33 = *(_QWORD **)(v21 + 40);
      if (v33 == (_QWORD *)(v21 + 40))
      {
        v34 = 0;
      }
      else
      {
        v34 = v33 - 3;
        if (v33)
          v35 = v33 - 3;
        else
          v35 = 0;
        if (*((unsigned __int8 *)v35 + 16) - 29 >= 0xB)
          v34 = 0;
      }
      v40 = *((_DWORD *)v34 + 5);
      if ((v40 & 0x7FFFFFF) != 0)
      {
        v41 = (v40 & 0x40000000) != 0
            ? (llvm::Instruction **)*(v34 - 1)
            : (llvm::Instruction **)&v34[-4 * (v40 & 0x7FFFFFF)];
        v42 = *v41;
        if (*((_BYTE *)*v41 + 16) == 60)
        {
          v43 = (_BYTE *)*((_QWORD *)v42 - 4);
          v44 = *(_DWORD *)(*(_QWORD *)v43 + 8);
          if ((v44 & 0xFE) == 0x12)
            v44 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v43 + 16) + 8);
          if (v44 <= 0xFF && v43[16] == 59)
          {
            while (1)
            {
              v45 = (llvm::Instruction *)(v33 - 3);
              if (!v33)
                v45 = 0;
              if (v45 == v42)
                break;
              v33 = (_QWORD *)*v33;
            }
            while (v33 != (_QWORD *)(v21 + 40))
            {
              if (v33)
                v46 = v33 - 3;
              else
                v46 = 0;
              if (v33 && *((_BYTE *)v46 + 16) == 61)
              {
                v47 = (_BYTE *)*(v46 - 4);
                if (v47 == v43)
                {
                  llvm::Value::replaceAllUsesWith();
                  llvm::Instruction::eraseFromParent(v42);
                  llvm::ConstantFoldTerminator();
                  v15 = *((_QWORD *)v14 + 1);
                  break;
                }
                v48 = *(_DWORD *)(*(_QWORD *)v47 + 8);
                if ((v48 & 0xFE) == 0x12)
                  v48 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v47 + 16) + 8);
                if (v48 <= 0xFF && v47[16] != 59)
                  break;
              }
              v33 = (_QWORD *)*v33;
            }
          }
        }
      }
      if (v15)
      {
        while (1)
        {
          v49 = *(_QWORD *)(v15 + 24);
          v50 = *(unsigned __int8 *)(v49 + 16);
          v51 = v49 && v50 >= 0x1C;
          if (v51 && v50 - 29 <= 0xA)
            break;
          v15 = *(_QWORD *)(v15 + 8);
          if (!v15)
            goto LABEL_135;
        }
        do
        {
          v53 = v15;
          do
          {
            v15 = *(_QWORD *)(v15 + 8);
            if (!v15)
              break;
            v54 = *(_QWORD *)(v15 + 24);
            v55 = *(unsigned __int8 *)(v54 + 16);
            v56 = v54 && v55 >= 0x1C;
          }
          while (!v56 || v55 - 29 >= 0xB);
          v58 = *(llvm::BasicBlock **)(*(_QWORD *)(v53 + 24) + 40);
          v59 = *((_QWORD *)v58 + 1);
          if (v59)
          {
            while (1)
            {
              v60 = *(_QWORD *)(v59 + 24);
              v61 = *(unsigned __int8 *)(v60 + 16);
              v62 = v60 && v61 >= 0x1C;
              if (v62 && v61 - 29 < 0xB)
                break;
              v59 = *(_QWORD *)(v59 + 8);
              if (!v59)
                goto LABEL_128;
            }
          }
          else
          {
LABEL_128:
            v64 = *(_QWORD *)(*((_QWORD *)v58 + 7) + 80);
            if (v64)
              v65 = (llvm::BasicBlock *)(v64 - 24);
            else
              v65 = 0;
            if (v58 != v65)
            {
              llvm::BasicBlock::removePredecessor(v14, v58);
              if (!*((_QWORD *)v58 + 1))
                llvm::BasicBlock::eraseFromParent(v58);
            }
          }
        }
        while (v15);
      }
LABEL_135:
      v66 = v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF);
      v67 = *(_QWORD *)(v66 + v130);
      if (v9)
      {
        if (*(_BYTE *)(v67 + 16) != 83 || v67 == 0)
          goto LABEL_63;
        v69 = *(_QWORD *)(v66 + 32 * a4);
        if (v69)
        {
          if (*(_BYTE *)(v69 + 16) == 83)
            v70 = *(llvm::Instruction **)(v66 + 32 * a4);
          else
            v70 = 0;
          goto LABEL_150;
        }
      }
      else
      {
        if (*(_BYTE *)(v67 + 16) != 83 || v67 == 0)
          goto LABEL_63;
        v69 = 0;
      }
      v70 = 0;
LABEL_150:
      v72 = 0;
      v139 = 0u;
      v140 = 0u;
      *(_OWORD *)__p = 0u;
      v133 = v137;
      v134 = v137;
      v135 = 4;
      v73 = v10;
      v136 = 0;
      while (1)
      {
        v74 = llvm::CallBase::arg_end((llvm::CallBase *)v10);
        v75 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
        if (v72 >= ((v74 - (v10 + 32 * (unint64_t)-(int)v75)) >> 5))
          break;
        v76 = *(_QWORD *)(v73 - 32 * v75);
        if (*(unsigned __int8 *)(v76 + 16) <= 0x1Bu)
          v77 = 0;
        else
          v77 = (_QWORD *)v76;
        v131[0] = v77;
        if (v77)
          v78 = v77 == (_QWORD *)v67;
        else
          v78 = 1;
        if (!v78 && v77 != (_QWORD *)v69 && (llvm::BasicBlock *)v77[5] == v14)
        {
          llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)buf, (llvm::SmallPtrSetImplBase *)&v133, v77);
          if (v143[0])
            std::deque<llvm::MDNode const*>::push_back(__p, v131);
        }
        ++v72;
        v73 += 32;
      }
      v80 = *((_QWORD *)&v140 + 1);
      if (*((_QWORD *)&v140 + 1))
      {
        v81 = v140;
        do
        {
          v82 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + ((v81 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v81 & 0x1FF));
          v83 = *(_DWORD *)(v82 + 20) & 0x7FFFFFF;
          if ((_DWORD)v83)
          {
            v84 = 0;
            v85 = 32 * v83;
            do
            {
              v86 = *(_DWORD *)(v82 + 20);
              if ((v86 & 0x40000000) != 0)
                v87 = *(_QWORD *)(v82 - 8);
              else
                v87 = v82 - 32 * (v86 & 0x7FFFFFF);
              v88 = *(_QWORD *)(v87 + v84);
              if (*(unsigned __int8 *)(v88 + 16) <= 0x1Bu)
                v89 = 0;
              else
                v89 = (_QWORD *)v88;
              v131[0] = v89;
              if (v89)
              {
                if ((llvm::BasicBlock *)v89[5] == v14)
                {
                  llvm::SmallPtrSetImpl<llvm::Function *>::insert((uint64_t)buf, (llvm::SmallPtrSetImplBase *)&v133, v89);
                  if (v143[0])
                    std::deque<llvm::MDNode const*>::push_back(__p, v131);
                }
              }
              v84 += 32;
            }
            while (v85 != v84);
            v80 = *((_QWORD *)&v140 + 1);
            v81 = v140;
          }
          --v80;
          *(_QWORD *)&v140 = ++v81;
          *((_QWORD *)&v140 + 1) = v80;
          if (v81 >= 0x400)
          {
            operator delete(*(void **)__p[1]);
            v81 = v140 - 512;
            __p[1] = (char *)__p[1] + 8;
            *(_QWORD *)&v140 = v140 - 512;
            v80 = *((_QWORD *)&v140 + 1);
          }
        }
        while (v80);
      }
      v90 = (_QWORD *)((char *)v14 + 40);
      v91 = (_QWORD *)*((_QWORD *)v14 + 6);
      if (v91 != (_QWORD *)((char *)v14 + 40))
      {
        do
        {
          if (HIDWORD(v135) == v136)
            break;
          v92 = (_QWORD *)v91[1];
          if (v91)
            v93 = v91 - 3;
          else
            v93 = 0;
          if (llvm::SmallPtrSetImplBase::erase_imp((llvm::SmallPtrSetImplBase *)&v133, v93))
            llvm::Instruction::moveBefore();
          v91 = v92;
        }
        while (v92 != v90);
      }
      v94 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(*(llvm::BasicBlock **)(v10 + 40));
      llvm::IRBuilderBase::SetInsertPoint(v94, FirstNonPHI);
      v96 = (AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
      v97 = *(llvm::Type **)v10;
      v98 = *(_DWORD *)(v67 + 20) & 0x7FFFFFF;
      v144 = 257;
      PHI = llvm::IRBuilderBase::CreatePHI(v96, v97, v98, (const llvm::Twine *)buf);
      v100 = 0;
      *(_QWORD *)buf = v143;
      v142 = 0x1000000000;
      for (i = v10; ; i += 32)
      {
        v102 = llvm::CallBase::arg_end((llvm::CallBase *)v10);
        v103 = *(_DWORD *)(v10 + 20) & 0x7FFFFFF;
        if (v100 >= ((v102 - (v10 + 32 * (unint64_t)-(int)v103)) >> 5))
          break;
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)buf, *(_QWORD *)(i - 32 * v103));
        ++v100;
      }
      v104 = *(_DWORD *)(v67 + 20);
      if ((v104 & 0x40000000) != 0)
      {
        v106 = *(_QWORD *)(v67 - 8);
        v107 = *(unsigned int *)(v67 + 60);
        v108 = (llvm::BasicBlock **)(v106 + 32 * v107);
        v105 = v104 & 0x7FFFFFF;
      }
      else
      {
        v105 = v104 & 0x7FFFFFF;
        v106 = v67 - 32 * v105;
        v107 = *(unsigned int *)(v67 + 60);
        v108 = (llvm::BasicBlock **)(v106 + 32 * v107);
      }
      v109 = v106 + 32 * v107 + 8 * v105;
      while (v108 != (llvm::BasicBlock **)v109)
      {
        v110 = *v108;
        v111 = (llvm::BasicBlock *)*((_QWORD *)*v108 + 5);
        if (v111 == (llvm::BasicBlock *)((char *)*v108 + 40))
        {
          v114 = 0;
        }
        else
        {
          v112 = (llvm::BasicBlock *)((char *)v111 - 24);
          if (v111)
            v113 = (uint64_t)v111 - 24;
          else
            v113 = 0;
          if (*(unsigned __int8 *)(v113 + 16) - 29 >= 0xB)
            v114 = 0;
          else
            v114 = v112;
        }
        llvm::IRBuilderBase::SetInsertPoint((AGCLLVMUserObject *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v114);
        IncomingValueForBlock = llvm::PHINode::getIncomingValueForBlock(v67, (uint64_t)v110);
        v116 = IncomingValueForBlock;
        if (v70)
        {
          v117 = llvm::PHINode::getIncomingValueForBlock((uint64_t)v70, (uint64_t)v110);
          *(_QWORD *)(*(_QWORD *)buf + 8 * v128) = v116;
          if (v117)
            *(_QWORD *)(*(_QWORD *)buf + 8 * a4) = v117;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)buf + 8 * v128) = IncomingValueForBlock;
        }
        v118 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
        v132 = 257;
        v119 = llvm::IRBuilderBase::CreateCall((uint64_t)v118, *((_QWORD *)a2 + 3), (uint64_t)a2, *(uint64_t *)buf, v142, (uint64_t)v131);
        llvm::PHINode::addIncoming(PHI, v119, v110);
        ++v108;
      }
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v10);
      if (!*(_QWORD *)(v67 + 8))
        llvm::Instruction::eraseFromParent((llvm::Instruction *)v67);
      if (v70 && !*((_QWORD *)v70 + 1))
        llvm::Instruction::eraseFromParent(v70);
      if (*(_BYTE **)buf != v143)
        free(*(void **)buf);
      if (v134 != v133)
        free(v134);
      v120 = (void **)__p[1];
      v121 = (void **)v139;
      *((_QWORD *)&v140 + 1) = 0;
      v122 = v139 - (unint64_t)__p[1];
      if ((unint64_t)v139 - (unint64_t)__p[1] >= 0x11)
      {
        do
        {
          operator delete(*v120);
          v121 = (void **)v139;
          v120 = (void **)((char *)__p[1] + 8);
          __p[1] = v120;
          v122 = v139 - (_QWORD)v120;
        }
        while ((_QWORD)v139 - (_QWORD)v120 > 0x10uLL);
      }
      v123 = v122 >> 3;
      if (v123 == 1)
      {
        v124 = 256;
      }
      else
      {
        if (v123 != 2)
          goto LABEL_230;
        v124 = 512;
      }
      *(_QWORD *)&v140 = v124;
LABEL_230:
      if (v120 != v121)
      {
        do
        {
          v125 = *v120++;
          operator delete(v125);
        }
        while (v120 != v121);
        if ((void *)v139 != __p[1])
          *(_QWORD *)&v139 = v139 + (((unint64_t)__p[1] - v139 + 7) & 0xFFFFFFFFFFFFFFF8);
      }
      if (__p[0])
        operator delete(__p[0]);
      v9 = a4;
      v8 = v126;
      goto LABEL_63;
    }
LABEL_61:
    llvm::UndefValue::get();
LABEL_62:
    llvm::Value::replaceAllUsesWith();
    llvm::Instruction::eraseFromParent((llvm::Instruction *)v10);
LABEL_63:
    v7 += 8;
  }
  while (v7 != v8);
  v7 = v145;
LABEL_237:
  if (v7 != (char *)v147)
    free(v7);
}

uint64_t llvm::PHINode::getIncomingValueForBlock(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 20);
  v3 = v2 & 0x7FFFFFF;
  if ((v2 & 0x7FFFFFF) != 0)
  {
    v4 = 0;
    while (1)
    {
      v5 = a1 - 32 * v3;
      if ((v2 & 0x40000000) != 0)
        v5 = *(_QWORD *)(a1 - 8);
      if (*(_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 60) + 8 * v4) == a2)
        break;
      if (v3 == ++v4)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    LODWORD(v4) = -1;
  }
  if ((v2 & 0x40000000) != 0)
    v6 = *(_QWORD *)(a1 - 8);
  else
    v6 = a1 - 32 * v3;
  return *(_QWORD *)(v6 + 32 * v4);
}

void AGCLLVMUserObject::setupIndirectSamplersGL(AGCLLVMUserObject *this)
{
  AGCLLVMUserObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::Value *v6;
  llvm::Value *v7;
  int Key;
  BOOL v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  AGCLLVMUserObject *v14;
  llvm::Function *v15;

  AGCLLVMUserObject::getSampleFunctionMap(this);
  AGCLLVMUserObject::getDimensionFunctionMap(v2);
  v3 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v4 = v3 + 24;
  v5 = *(_QWORD *)(v3 + 32);
  if (v5 != v3 + 24)
  {
    do
    {
      v6 = (llvm::Value *)(v5 - 56);
      v9 = v5 == 0;
      v5 = *(_QWORD *)(v5 + 8);
      if (v9)
        v7 = 0;
      else
        v7 = v6;
      llvm::Value::getName(v7);
      Key = llvm::StringMapImpl::FindKey();
      v9 = Key == -1 || Key == (unint64_t)dword_1ED839C70;
      if (v9)
      {
        llvm::Value::getName(v7);
        v10 = llvm::StringMapImpl::FindKey();
        if (v10 == -1 || v10 == (unint64_t)dword_1ED839B98)
          continue;
        v14 = this;
        v15 = v7;
        v12 = 0;
        v13 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * Key);
        v12 = *(unsigned __int8 *)(v11 + 38);
        v13 = *(unsigned __int8 *)(v11 + 39);
        v14 = this;
        v15 = v7;
      }
      AGCLLVMUserObject::handleGLIndirectSamplerFunction(v14, v15, v12, v13);
    }
    while (v5 != v4);
  }
}

uint64_t *std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100](uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v6 = *(_QWORD **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v6 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
    v13 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v10;
    if (v13)
    {
      v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v13);
      v8 = *(_QWORD **)v4;
      v6 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v14 = 0;
    }
    v15 = (_QWORD *)(v13 + 8 * v9);
    v16 = v13 + 8 * v14;
    *v15 = *a2;
    v7 = v15 + 1;
    while (v6 != v8)
    {
      v17 = *--v6;
      *--v15 = v17;
    }
    *(_QWORD *)v4 = v15;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

void AGCLLVMUserObject::remapDriverBindpoint(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Instruction *v12;
  uint64_t v13;
  unsigned int i;
  _BOOL4 v15;
  llvm::MDString *v16;
  size_t v17;
  void *String;
  int Key;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  void **v23;
  std::string::size_type v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Instruction *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t j;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  std::string::size_type size;
  std::string::size_type *p_size;
  std::string::size_type *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  std::string::__raw *v48;
  std::string::size_type v49;
  int v50;
  uint64_t v51;
  std::string::size_type v52;
  uint64_t v53;
  _QWORD **v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  std::string *v60;
  size_t v61;
  void **p_p;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  char v66;
  llvm::GlobalVariable *v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::Value *v73;
  llvm::Type *v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Instruction *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  std::string v83;
  __int16 v84;
  void *__p;
  std::string::size_type v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;

  v3 = (_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 176);
  if ((*(_WORD *)(v4 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 176));
    v6 = v3[22];
    v5 = *(_QWORD *)(v4 + 88);
    if ((*(_WORD *)(v6 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v3[22]);
    v4 = v6;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 88);
  }
  v80 = *(_QWORD *)(v4 + 88) + 40 * *(_QWORD *)(v4 + 96);
  if (v5 == v80)
    return;
  v78 = v3 + 1;
  v79 = a2;
  v81 = v3;
  do
  {
    v7 = *(_QWORD *)(v3[11] + 8 * *(unsigned int *)(v5 + 32));
    v82 = v5;
    if (*(_QWORD *)(v5 + 8))
      v8 = v7 == 0;
    else
      v8 = 1;
    if (v8)
      goto LABEL_116;
    v9 = *(_QWORD *)(v81[22] + 80);
    v10 = v9 ? v9 - 24 : 0;
    v11 = *(_QWORD *)(v10 + 40);
    v12 = v11 ? (llvm::Instruction *)(v11 - 24) : 0;
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)((char *)v81 + *(_QWORD *)(*v81 - 24) + 40), v12);
    if (!isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.buffer")
      && !isStringMDNode(*(llvm::MDString **)(v7 - 8 * *(unsigned int *)(v7 + 8) + 8), "air.indirect_buffer"))
    {
      goto LABEL_116;
    }
    LODWORD(v13) = *(_DWORD *)(v7 + 8);
    if (v13 >= 3)
    {
      for (i = 2; i < v13; ++i)
      {
        v15 = isStringMDNode(*(llvm::MDString **)(v7 - 8 * v13 + 8 * i), "air.arg_name");
        v13 = *(unsigned int *)(v7 + 8);
        if (v15)
        {
          v16 = *(llvm::MDString **)(v7 - 8 * v13 + 8 * (i + 1));
          if (v16 && !*(_BYTE *)v16)
          {
            String = (void *)llvm::MDString::getString(v16);
            v17 = v61;
            goto LABEL_28;
          }
          i += 2;
        }
      }
    }
    v17 = 0;
    String = 0;
LABEL_28:
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1)
      v20 = *(unsigned int *)(a2 + 8);
    else
      v20 = Key;
    v21 = *(_QWORD *)(*(_QWORD *)a2 + 8 * v20);
    switch(*(_DWORD *)(v21 + 12))
    {
      case 0:
        AGCLLVMUserObject::replaceBufferInputArgument((uint64_t)v81, (uint64_t *)v82, *(_DWORD *)(v82 + 32), v7, *(_DWORD *)(v21 + 16));
        goto LABEL_116;
      case 1:
        std::string::basic_string[abi:nn180100]<0>(&v83, "agc.");
        if (String)
        {
          std::string::basic_string[abi:nn180100](&__p, String, v17);
          v22 = HIBYTE(v87);
          v23 = (void **)__p;
          v24 = v86;
        }
        else
        {
          v24 = 0;
          v23 = 0;
          v22 = 0;
          __p = 0;
          v86 = 0;
          v87 = 0;
        }
        if ((v22 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = v23;
        if ((v22 & 0x80u) == 0)
          v63 = v22;
        else
          v63 = v24;
        v64 = std::string::append(&v83, (const std::string::value_type *)p_p, v63);
        v65 = v64->__r_.__value_.__r.__words[2];
        v88 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
        v89 = v65;
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v87) < 0)
          operator delete(__p);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v83.__r_.__value_.__l.__data_);
        v66 = 1;
        v67 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        v68 = &v88;
        if (v89 < 0)
          v68 = (__int128 *)v88;
        v84 = 257;
        if (*(_BYTE *)v68)
        {
          v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
          v66 = 3;
        }
        LOBYTE(v84) = v66;
        llvm::GlobalVariable::GlobalVariable();
        *((_BYTE *)v67 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        v69 = (char *)v81 + *(_QWORD *)(*v81 - 24);
        v70 = *((_QWORD *)v69 + 47);
        v71 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v69 + 32), v67);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v70, v71);
        v72 = (uint64_t)v78 + *(_QWORD *)(*v81 - 24);
        v84 = 257;
        v74 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v67, v73);
        llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v72 + 32), v74, (uint64_t)v67, 0, (uint64_t)&v83);
        v75 = *(_QWORD *)(v82 + 8);
        if (v75)
        {
          do
          {
            v76 = *(_QWORD *)(v75 + 8);
            v77 = *(llvm::Instruction **)(v75 + 24);
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v77);
            v75 = v76;
          }
          while (v76);
        }
        a2 = v79;
        if (SHIBYTE(v89) < 0)
          operator delete((void *)v88);
        goto LABEL_116;
      case 2:
        llvm::ConstantInt::get();
        v25 = *(_QWORD *)(v82 + 8);
        if (v25)
        {
          do
          {
            v26 = *(_QWORD *)(v25 + 8);
            v27 = *(llvm::Instruction **)(v25 + 24);
            llvm::Value::replaceAllUsesWith();
            llvm::Instruction::eraseFromParent(v27);
            v25 = v26;
          }
          while (v26);
        }
        goto LABEL_116;
      case 3:
        *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = 0uLL;
        v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83.__r_.__value_.__l.__size_;
        v28 = (char *)operator new(8uLL);
        *(_QWORD *)v28 = v82;
        v29 = v28 + 8;
        v30 = v28 + 8;
        break;
      default:
        goto LABEL_116;
    }
    do
    {
      v31 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      for (j = *(_QWORD *)(v31 + 8); j; j = *(_QWORD *)(j + 8))
      {
        v33 = *(_QWORD *)(j + 24);
        if (v30 >= v29)
        {
          v34 = (v30 - v28) >> 3;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61)
            abort();
          if ((v29 - v28) >> 2 > v35)
            v35 = (v29 - v28) >> 2;
          if ((unint64_t)(v29 - v28) >= 0x7FFFFFFFFFFFFFF8)
            v36 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v36 = v35;
          if (v36)
            v36 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v36);
          else
            v37 = 0;
          v38 = (char *)(v36 + 8 * v34);
          *(_QWORD *)v38 = v33;
          v39 = v38 + 8;
          while (v30 != v28)
          {
            v40 = *((_QWORD *)v30 - 1);
            v30 -= 8;
            *((_QWORD *)v38 - 1) = v40;
            v38 -= 8;
          }
          v29 = (char *)(v36 + 8 * v37);
          if (v28)
            operator delete(v28);
          v28 = v38;
          v30 = v39;
        }
        else
        {
          *(_QWORD *)v30 = v33;
          v30 += 8;
        }
        v41 = *(_QWORD *)(j + 24);
        size = v83.__r_.__value_.__l.__size_;
        p_size = &v83.__r_.__value_.__l.__size_;
        v44 = &v83.__r_.__value_.__l.__size_;
        if (v83.__r_.__value_.__l.__size_)
        {
          while (1)
          {
            while (1)
            {
              v44 = (std::string::size_type *)size;
              v45 = *(_QWORD *)(size + 32);
              if (v41 >= v45)
                break;
              size = *v44;
              p_size = v44;
              if (!*v44)
                goto LABEL_64;
            }
            if (v45 >= v41)
              break;
            size = v44[1];
            if (!size)
            {
              p_size = v44 + 1;
              goto LABEL_64;
            }
          }
        }
        else
        {
LABEL_64:
          v46 = (uint64_t *)operator new(0x28uLL);
          v46[4] = v41;
          *v46 = 0;
          v46[1] = 0;
          v46[2] = (uint64_t)v44;
          *p_size = (std::string::size_type)v46;
          if (*(_QWORD *)v83.__r_.__value_.__l.__data_)
          {
            v83.__r_.__value_.__r.__words[0] = *(_QWORD *)v83.__r_.__value_.__l.__data_;
            v47 = (uint64_t *)*p_size;
          }
          else
          {
            v47 = v46;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v83.__r_.__value_.__l.__size_, v47);
          ++v83.__r_.__value_.__r.__words[2];
        }
      }
    }
    while (v28 != v30);
    v48 = (std::string::__raw *)v83.__r_.__value_.__r.__words[0];
    a2 = v79;
    if ((std::string::size_type *)v83.__r_.__value_.__l.__data_ == &v83.__r_.__value_.__r.__words[1])
      goto LABEL_93;
    do
    {
      v49 = v48[1].__words[1];
      v50 = *(_DWORD *)(v49 + 20);
      if ((v50 & 0x40000000) != 0)
      {
        v52 = *(_QWORD *)(v49 - 8);
        v51 = v50 & 0x7FFFFFF;
        if (!v51)
          goto LABEL_80;
      }
      else
      {
        v51 = v50 & 0x7FFFFFF;
        v52 = v49 - 32 * v51;
        if (!v51)
          goto LABEL_80;
      }
      v53 = 32 * v51;
      v54 = (_QWORD **)(v52 + 16);
      do
      {
        if (*(v54 - 2))
        {
          **v54 = *(v54 - 1);
          v55 = (uint64_t)*(v54 - 1);
          if (v55)
            *(_QWORD *)(v55 + 16) = *v54;
        }
        *(v54 - 2) = 0;
        v54 += 4;
        v53 -= 32;
      }
      while (v53);
LABEL_80:
      v56 = (std::string *)v48->__words[1];
      if (v56)
      {
        do
        {
          v57 = v56;
          v56 = (std::string *)v56->__r_.__value_.__r.__words[0];
        }
        while (v56);
      }
      else
      {
        do
        {
          v57 = (std::string *)v48->__words[2];
          v8 = v57->__r_.__value_.__r.__words[0] == (_QWORD)v48;
          v48 = (std::string::__raw *)v57;
        }
        while (!v8);
      }
      v48 = (std::string::__raw *)v57;
    }
    while (v57 != (std::string *)&v83.__r_.__value_.__r.__words[1]);
    v58 = v83.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v83.__r_.__value_.__l.__data_ != &v83.__r_.__value_.__r.__words[1])
    {
      do
      {
        llvm::Instruction::eraseFromParent(*(llvm::Instruction **)(v58 + 32));
        v59 = *(std::string **)(v58 + 8);
        if (v59)
        {
          do
          {
            v60 = v59;
            v59 = (std::string *)v59->__r_.__value_.__r.__words[0];
          }
          while (v59);
        }
        else
        {
          do
          {
            v60 = *(std::string **)(v58 + 16);
            v8 = v60->__r_.__value_.__r.__words[0] == v58;
            v58 = (std::string::size_type)v60;
          }
          while (!v8);
        }
        v58 = (std::string::size_type)v60;
      }
      while (v60 != (std::string *)&v83.__r_.__value_.__r.__words[1]);
    }
LABEL_93:
    if (v28)
      operator delete(v28);
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy((_QWORD *)v83.__r_.__value_.__l.__size_);
LABEL_116:
    v3 = v81;
    v5 = v82 + 40;
  }
  while (v82 + 40 != v80);
}

uint64_t AGCLLVMUserObject::detectTextureWrites(AGCLLVMUserObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::Value *v5;
  int Key;
  BOOL v7;

  AGCLLVMUserObject::getSampleFunctionMap(this);
  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v3 = v2 + 24;
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 == v2 + 24)
    return 0;
  while (1)
  {
    v5 = v4 ? (llvm::Value *)(v4 - 56) : 0;
    v4 = *(_QWORD *)(v4 + 8);
    llvm::Value::getName(v5);
    Key = llvm::StringMapImpl::FindKey();
    v7 = Key == -1 || Key == (unint64_t)dword_1ED839C70;
    if (!v7
      && *(_DWORD *)(*(_QWORD *)(AGCLLVMUserObject::getSampleFunctionMap(void)::sample_function_map + 8 * Key) + 8) == 3
      && *((_QWORD *)v5 + 1))
    {
      break;
    }
    if (v4 == v3)
      return 0;
  }
  return 1;
}

uint64_t AGCLLVMUserObject::isThreadgroupMemoryUsed(AGCLLVMUserObject *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v2 = v1 + 8;
  for (i = *(_QWORD *)(v1 + 16); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v2)
      return 0;
    v4 = (uint64_t *)(i - 56);
    if (!i)
      v4 = 0;
    v5 = *v4;
    if (*v4)
    {
      v6 = *(_DWORD *)(v5 + 8);
      if ((v6 & 0xFE) == 0x12)
        v6 = *(_DWORD *)(**(_QWORD **)(v5 + 16) + 8);
      if ((v6 & 0xFFFFFF00) == 0x300 && v4[1])
        break;
    }
  }
  return 1;
}

uint64_t AGCLLVMUserObject::getFragmentBuiltinEncoderStateType(AGCLLVMUserObject *this)
{
  llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 200), (llvm::Type *)0x10);
  return llvm::StructType::get();
}

uint64_t AGCLLVMUserVertexShader::buildGin1122WA(AGCLLVMUserVertexShader *this, char a2, int a3)
{
  uint64_t Function;
  uint64_t v7;
  llvm::Type *v8;
  llvm::BasicBlock *v9;
  uint64_t v10;
  char *v11;
  llvm::IRBuilderBase *v12;
  llvm::Instruction *FirstNonPHI;
  uint64_t v14;
  uint64_t v15;
  llvm::BasicBlock *v16;
  uint64_t v17;
  llvm::Instruction *v18;
  uint64_t v19;
  llvm::Instruction *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t GlobalRayStridesGlobal;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  llvm::Type *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t AlignedLoad;
  llvm::CmpInst **v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t ICmp;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  llvm::Value *IsFirstActiveThread;
  char *v45;
  uint64_t v46;
  llvm::CmpInst **v47;
  uint64_t *v48;
  uint64_t v49;
  llvm::Value *v50;
  llvm::IRBuilderBase *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t inserted;
  char *v56;
  llvm::Value *v57;
  llvm::Type *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  llvm::Value *GlobalBufferBinding;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t Int8PtrTy;
  char *v70;
  char *v71;
  int8x16_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  llvm::ConstantPointerNull *v76;
  llvm::PointerType *v77;
  char *v78;
  _BYTE v80[32];
  __int16 v81;
  uint64_t v82;
  unsigned int v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  _QWORD v90[4];
  uint64_t v91;
  llvm::Value *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  int8x16_t v106;
  int64x2_t v107;
  int64x2_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  Function = llvm::Module::getFunction();
  if (!Function)
    return 0;
  v7 = Function;
  v8 = (llvm::Type *)llvm::PointerType::get();
  llvm::Function::addFnAttr();
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v7 + 32) & 0xFFFFBFC0 | 0x4007;
  *(_QWORD *)&v102 = "entry";
  LOWORD(v104) = 259;
  v9 = (llvm::BasicBlock *)operator new();
  v10 = llvm::BasicBlock::BasicBlock();
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v11 + 11) = v10;
  *((_QWORD *)v11 + 12) = v10 + 40;
  llvm::IRBuilderBase::CreateRetVoid((AGCLLVMUserVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40));
  v12 = (AGCLLVMUserVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v9);
  llvm::IRBuilderBase::SetInsertPoint(v12, FirstNonPHI);
  if ((a2 & 1) == 0 && !a3)
    return 0;
  v15 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
  *(_QWORD *)&v102 = "gin1122swwa_ray_trace_exit";
  LOWORD(v104) = 259;
  v16 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v17 = *(_QWORD *)(v15 + 40);
  if (v17 == v15 + 40)
  {
    v20 = 0;
  }
  else
  {
    v18 = (llvm::Instruction *)(v17 - 24);
    if (v17)
      v19 = v17 - 24;
    else
      v19 = 0;
    if (*(unsigned __int8 *)(v19 + 16) - 29 >= 0xB)
      v20 = 0;
    else
      v20 = v18;
  }
  llvm::Instruction::eraseFromParent(v20);
  v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v21 + 11) = v15;
  *((_QWORD *)v21 + 12) = v15 + 40;
  v22 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v23 = *((_QWORD *)v22 + 50);
  v24 = *((_QWORD *)v22 + 46);
  GlobalRayStridesGlobal = AGCLLVMUserObject::createGlobalRayStridesGlobal(this);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 1288))(&v102, v23, v24, GlobalRayStridesGlobal);
  v26 = v103;
  *(_OWORD *)((char *)this + 3784) = v102;
  *(_OWORD *)((char *)this + 3800) = v26;
  *(_OWORD *)((char *)this + 3816) = v104;
  v27 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 88);
  *(_QWORD *)&v102 = "gin1122swwa_ray_trace";
  LOWORD(v104) = 259;
  v28 = operator new();
  llvm::BasicBlock::BasicBlock();
  v29 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v29 + 11) = v27;
  *((_QWORD *)v29 + 12) = v27 + 40;
  if (a3 && (a2 & 1) == 0)
  {
    v30 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v31 = (llvm::Type *)*((_QWORD *)v30 + 29);
    v32 = *((_QWORD *)this + 315);
    v33 = (uint64_t *)(v30 + 40);
    LOWORD(v104) = 257;
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v30 + 5, v8, v32, 0, (uint64_t)&v102);
    LOWORD(v91) = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad(v33, v31, AlignedLoad, 0, (uint64_t)v90);
    v36 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v37 = llvm::ConstantInt::get();
    *(_QWORD *)&v102 = "scs.has_vertex_rt";
    LOWORD(v104) = 259;
    ICmp = llvm::IRBuilderBase::CreateICmp(v36, 33, v35, v37, (uint64_t)&v102);
    *(_QWORD *)&v102 = "check_any_intersect";
    LOWORD(v104) = 259;
    v39 = operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp, v39, (uint64_t)v16);
    v40 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v40 + 11) = v39;
    *((_QWORD *)v40 + 12) = v39 + 40;
  }
  v41 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 688))(v41);
  v43 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v87 = *(_OWORD *)(v43 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v43 + 40));
  v89 = *((_DWORD *)v43 + 34);
  IsFirstActiveThread = (llvm::Value *)AGCLLVMGen5TargetLowerer::buildIsFirstActiveThread(v42, &v87, 0);
  if (v88)
    llvm::MetadataTracking::untrack();
  v45 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v46 = *((_QWORD *)v45 + 50);
  v84 = *(_OWORD *)(v45 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v45 + 40));
  v86 = *((_DWORD *)v45 + 34);
  v47 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t, __int128 *, char *))(*(_QWORD *)v46 + 1328))(v46, &v84, (char *)this + 3784);
  if (v85)
    llvm::MetadataTracking::untrack();
  v48 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v49 = llvm::ConstantInt::get();
  LOWORD(v104) = 257;
  v50 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v48, 32, v47, v49, (uint64_t)&v102);
  v51 = (AGCLLVMUserVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  LOWORD(v104) = 257;
  v52 = llvm::IRBuilderBase::CreateAnd(v51, v50, IsFirstActiveThread, (const llvm::Twine *)&v102);
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)v51, v52, v28, (uint64_t)v16);
  v53 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v53 + 11) = v28;
  *((_QWORD *)v53 + 12) = v28 + 40;
  if (!llvm::StructType::getTypeByName())
    llvm::StructType::create();
  v54 = llvm::PointerType::get();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v56 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  LOWORD(v104) = 257;
  v57 = llvm::IRBuilderBase::CreateCall((uint64_t)v56, *(_QWORD *)(inserted + 24), inserted, 0, 0, (uint64_t)&v102);
  if (!llvm::StructType::getTypeByName())
    llvm::StructType::create();
  v14 = 1;
  v58 = (llvm::Type *)llvm::PointerType::get();
  v59 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 904))(v59);
  v61 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
  v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 312))(v61);
  _AGCBindingInfo::_AGCBindingInfo((_AGCBindingInfo *)&v83, v60, v62);
  *(_QWORD *)&v102 = "agc.gin1122_swwa_bvh";
  LOWORD(v104) = 259;
  GlobalBufferBinding = AGCLLVMUserObject::createGlobalBufferBinding(this, v58, (const llvm::Twine *)&v102, v83, 0, 0, 0);
  v64 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  LOWORD(v104) = 257;
  v65 = llvm::IRBuilderBase::CreateAlignedLoad(v64, v58, (uint64_t)GlobalBufferBinding, 0, (uint64_t)&v102);
  v66 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v67 = *((_QWORD *)v66 + 29);
  v68 = *((_QWORD *)v66 + 25);
  Int8PtrTy = llvm::Type::getInt8PtrTy(*((llvm::Type **)v66 + 49), (llvm::LLVMContext *)1);
  *(_QWORD *)&v102 = v67;
  *((_QWORD *)&v102 + 1) = v68;
  *(_QWORD *)&v103 = v67;
  *((_QWORD *)&v103 + 1) = v67;
  *(_QWORD *)&v104 = Int8PtrTy;
  llvm::StructType::get();
  v70 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)&v102 = *((_QWORD *)v70 + 37);
  *((_QWORD *)&v102 + 1) = v102;
  *(_QWORD *)&v103 = *((_QWORD *)v70 + 25);
  *((_QWORD *)&v103 + 1) = v103;
  *(_QWORD *)&v104 = v58;
  *((_QWORD *)&v104 + 1) = v54;
  v105 = llvm::Type::getInt8PtrTy(*((llvm::Type **)v70 + 49), 0);
  v71 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v72 = *(int8x16_t *)(v71 + 232);
  v106 = vextq_s8(v72, v72, 8uLL);
  v107 = vdupq_lane_s64(v72.i64[0], 0);
  v108 = v107;
  v109 = v72.i64[0];
  v110 = *((_QWORD *)v71 + 26);
  llvm::FunctionType::get();
  llvm::AttributeList::addAttributeAtIndex();
  v82 = llvm::AttributeList::addAttributeAtIndex();
  llvm::Module::getOrInsertFunction();
  v74 = v73;
  v75 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v90[0] = llvm::ConstantAggregateZero::get();
  v90[1] = llvm::ConstantFP::get();
  v90[2] = llvm::ConstantFP::get();
  v90[3] = llvm::ConstantFP::get();
  v91 = v65;
  v92 = v57;
  v76 = (llvm::ConstantPointerNull *)llvm::Type::getInt8PtrTy(*(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 392), 0);
  v93 = llvm::ConstantPointerNull::get(v76, v77);
  v94 = llvm::ConstantInt::get();
  v95 = llvm::ConstantInt::get();
  v96 = llvm::ConstantInt::get();
  v97 = llvm::ConstantInt::get();
  v98 = llvm::ConstantInt::get();
  v99 = llvm::ConstantInt::get();
  v100 = llvm::ConstantInt::get();
  v101 = llvm::ConstantInt::get();
  v81 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)(v75 + 40), *(_QWORD *)(v74 + 24), v74, (uint64_t)v90, 15, (uint64_t)v80);
  llvm::IRBuilderBase::CreateBr((AGCLLVMUserVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v16);
  v78 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v78 + 11) = v16;
  *((_QWORD *)v78 + 12) = (char *)v16 + 40;
  return v14;
}

llvm::Value *AGCLLVMUserVertexShader::getVertexAmpId(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD v10[20];
  uint64_t DriverGlobalConstant;

  v3 = 1496;
  if (a2)
  {
    v4 = 85;
  }
  else
  {
    v3 = 1488;
    v4 = 84;
  }
  v5 = *(const char **)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + v3);
  DriverGlobalConstant = AGCLLVMUserVertexShader::getDriverGlobalConstant(a1, (llvm::Value *)v4);
  if (v5)
    v6 = strlen(v5);
  else
    v6 = 0;
  v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 32, (uint64_t)v5, v6, *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 232), *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 232));
  v8 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateCall(v8, *(_QWORD *)(v7 + 24), v7, (uint64_t)&DriverGlobalConstant, 1, (uint64_t)v10);
}

uint64_t AGCLLVMUserVertexShader::getDriverGlobalConstant(_QWORD *a1, llvm::Value *a2)
{
  _QWORD *v3;
  llvm::Type **v4;
  uint64_t v5;
  llvm::ValueHandleBase *v6;
  llvm::GlobalVariable *v7;
  char *v8;
  __int16 v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  llvm::Type *v14;
  _QWORD v16[4];
  __int16 v17;

  v3 = &a1[3 * a2];
  v4 = (llvm::Type **)v3[760];
  if (!v4)
  {
    v5 = a2;
    v6 = (llvm::ValueHandleBase *)(v3 + 758);
    v7 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v8 = AGCShared::EnumNamesConstantType(void)::names[v5];
    if (*v8)
    {
      v16[0] = "agc.driver_constants.";
      v16[2] = v8;
      v9 = 771;
    }
    else
    {
      v16[0] = "agc.driver_constants.";
      v9 = 259;
    }
    v17 = v9;
    llvm::GlobalVariable::GlobalVariable();
    *((_BYTE *)v7 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v11 = *((_QWORD *)v10 + 47);
    v12 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v10 + 32), v7);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v11, v12);
    llvm::ValueHandleBase::operator=(v6, (uint64_t)v7);
    v4 = (llvm::Type **)*((_QWORD *)v6 + 2);
  }
  v13 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v17 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(v4, a2);
  return llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v14, (uint64_t)v4, 0, (uint64_t)v16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::initEmpty(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  llvm::ValueHandleBase *v3;
  char *v4;
  _QWORD v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(result + 8) = 0;
  v6[1] = 0;
  v7 = -4096;
  v6[0] = 2;
  v8 = 0;
  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)result + 48 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      v3 = llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)result, (LODWORD(v6[0]) >> 1) & 3, v6);
      *((_QWORD *)v3 - 1) = &unk_1E7EB9FE0;
      *((_QWORD *)v3 + 3) = v8;
      v4 = (char *)v3 + 40;
      result = (uint64_t)v3 + 48;
    }
    while (v4 != (char *)v2);
    if (v7 != -8192 && v7 != -4096 && v7 != 0)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  }
  return result;
}

_QWORD *llvm::ValueMap<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::operator[](uint64_t a1, llvm::Value *a2)
{
  char v3;
  _QWORD *v4;
  void *v7;
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v7, a2);
  v7 = &unk_1E7EB9FE0;
  v10 = a1;
  v11 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v11);
  v4 = v11;
  if ((v3 & 1) == 0)
  {
    v4 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>>(a1, (uint64_t)&v7, (uint64_t)v11);
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v8);
    v4[4] = v10;
    v4[5] = 0;
  }
  if (v9 != -8192 && v9 != -4096 && v9 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v8);
  return v4 + 5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a3 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = MEMORY[0x1CAA2C6C0]((_QWORD *)v8, 48 * v8, 8);
  if (!v4)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::initEmpty(a1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::initEmpty(a1);
  if ((_DWORD)v3)
  {
    v9 = (uint64_t *)((char *)v4 + 24);
    v10 = 48 * v3;
    do
    {
      v11 = *v9;
      if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v15 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v15);
        v12 = v15;
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v15 + 8), v9 - 2);
        *(_QWORD *)(v12 + 32) = v9[1];
        *(_QWORD *)(v12 + 40) = v9[2];
        ++*(_DWORD *)(a1 + 8);
        v11 = *v9;
      }
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)(v9 - 2));
      v9 += 6;
      v10 -= 48;
    }
    while (v10);
  }
  return llvm::deallocate_buffer(v4, (void *)(48 * v3));
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::deleted(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _BYTE v6[16];
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[4];

  v1 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v6, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(v1 + 24);
  v8 = v2;
  v9 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v2, *(_DWORD *)(v2 + 16), v7, &v9);
  if ((_DWORD)result)
  {
    v4 = v9;
    v10[1] = 0;
    v10[2] = -8192;
    v9 = &unk_1E7EB9FE0;
    v10[0] = 2;
    v10[3] = 0;
    result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v4 + 1), v10);
    v4[4] = 0;
    *(int32x2_t *)(v2 + 8) = vadd_s32(*(int32x2_t *)(v2 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v7 != -8192 && v7 != -4096 && v7 != 0)
    return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v6);
  return result;
}

uint64_t llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>::allUsesReplacedWith(uint64_t a1, llvm::Value *a2)
{
  uint64_t v3;
  int32x2_t *v4;
  uint64_t result;
  _QWORD *v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE v12[16];
  uint64_t v13;
  int32x2_t *v14;
  void *v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = a1 + 8;
  llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v12, (*(_DWORD *)(a1 + 8) >> 1) & 3, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(v3 + 24);
  v14 = v4;
  v19 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)*v4, v4[2].i32[0], v13, &v19);
  if ((_DWORD)result)
    v6 = v19;
  else
    v6 = (_QWORD *)(*(_QWORD *)v4 + 48 * v4[2].u32[0]);
  v7 = v14;
  if ((_QWORD *)(*(_QWORD *)v14 + 48 * v14[2].u32[0]) != v6)
  {
    v8 = v6[5];
    v20[1] = 0;
    v21 = -8192;
    v19 = &unk_1E7EB9FE0;
    v20[0] = 2;
    v22 = 0;
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v6 + 1), v20);
    v9 = v21;
    v6[4] = v22;
    if (v9 != -8192 && v9 != -4096 && v9)
      llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    v7[1] = vadd_s32(v7[1], (int32x2_t)0x1FFFFFFFFLL);
    v10 = (uint64_t)v14;
    llvm::CallbackVH::CallbackVH((llvm::CallbackVH *)&v15, a2);
    v15 = &unk_1E7EB9FE0;
    v18 = v10;
    llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v20, (LODWORD(v16[0]) >> 1) & 3, v16);
    v19 = &unk_1E7EB9FE0;
    v22 = v18;
    v23 = v8;
    v24 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), v21, &v24);
    if ((result & 1) == 0)
    {
      v11 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>,llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>,llvm::Value *>>::InsertIntoBucketImpl<llvm::ValueMapCallbackVH<llvm::BasicBlock *,llvm::Value *,llvm::ValueMapConfig<llvm::BasicBlock *,llvm::sys::SmartMutex<false>>>>(v10, (uint64_t)&v19, v24);
      result = (uint64_t)llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(v11 + 1), v20);
      v11[4] = v22;
      v11[5] = v23;
    }
    if (v21 != -8192 && v21 != -4096 && v21)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v20);
    if (v17 != -8192 && v17 != -4096 && v17)
      result = llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v16);
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13)
      return llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v12);
  }
  return result;
}

unsigned int *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;

  v3 = *a2;
  v4 = *result;
  if (*a2 >= *result && (v4 < v3 || *((_QWORD *)a2 + 1) >= *((_QWORD *)result + 1)))
  {
    v8 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v8)
        return result;
      v10 = *((_QWORD *)a3 + 1);
      v9 = *((_QWORD *)a2 + 1);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a3 + 1);
    }
    *a2 = v8;
    *a3 = v3;
    *((_QWORD *)a2 + 1) = v10;
    *((_QWORD *)a3 + 1) = v9;
    v11 = *a2;
    v12 = *result;
    if (*a2 >= *result)
    {
      if (v12 < v11)
        return result;
      v14 = *((_QWORD *)a2 + 1);
      v13 = *((_QWORD *)result + 1);
      if (v14 >= v13)
        return result;
    }
    else
    {
      v13 = *((_QWORD *)result + 1);
      v14 = *((_QWORD *)a2 + 1);
    }
    *result = v11;
    *a2 = v12;
    *((_QWORD *)result + 1) = v14;
    *((_QWORD *)a2 + 1) = v13;
    return result;
  }
  v5 = *a3;
  if (*a3 < v3)
  {
    v6 = *((_QWORD *)a3 + 1);
LABEL_6:
    *result = v5;
    *a3 = v4;
    v7 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = v6;
    *((_QWORD *)a3 + 1) = v7;
    return result;
  }
  if (v3 >= v5)
  {
    v6 = *((_QWORD *)a3 + 1);
    v15 = *((_QWORD *)a2 + 1);
    if (v6 < v15)
      goto LABEL_6;
  }
  else
  {
    v15 = *((_QWORD *)a2 + 1);
  }
  *result = v3;
  *a2 = v4;
  v16 = *((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = v15;
  *((_QWORD *)a2 + 1) = v16;
  v17 = *a3;
  if (*a3 < v4)
  {
    v18 = *((_QWORD *)a3 + 1);
LABEL_24:
    *a2 = v17;
    *a3 = v4;
    *((_QWORD *)a2 + 1) = v18;
    *((_QWORD *)a3 + 1) = v16;
    return result;
  }
  if (v4 >= v17)
  {
    v18 = *((_QWORD *)a3 + 1);
    if (v18 < v16)
      goto LABEL_24;
  }
  return result;
}

unsigned int *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *result;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  v9 = *(_DWORD *)a4;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v10 < v9)
      return result;
    v12 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a3 + 8);
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a4 + 8);
  }
  *(_DWORD *)a3 = v9;
  *(_DWORD *)a4 = v10;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a4 + 8) = v11;
  v13 = *(_DWORD *)a3;
  v14 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v14 < v13)
      return result;
    v16 = *(_QWORD *)(a3 + 8);
    v15 = *(_QWORD *)(a2 + 8);
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a3 + 8);
  }
  *(_DWORD *)a2 = v13;
  *(_DWORD *)a3 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a3 + 8) = v15;
  v17 = *(_DWORD *)a2;
  v18 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a2 + 8);
LABEL_15:
    *(_DWORD *)a1 = v17;
    *(_DWORD *)a2 = v18;
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *(_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a1 + 8);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

unsigned int *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unsigned int *result;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v12 < v11)
      return result;
    v14 = *((_QWORD *)a5 + 1);
    v13 = *(_QWORD *)(a4 + 8);
    if (v14 >= v13)
      return result;
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 8);
    v14 = *((_QWORD *)a5 + 1);
  }
  *(_DWORD *)a4 = v11;
  *a5 = v12;
  *(_QWORD *)(a4 + 8) = v14;
  *((_QWORD *)a5 + 1) = v13;
  v15 = *(_DWORD *)a4;
  v16 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v16 < v15)
      return result;
    v18 = *(_QWORD *)(a4 + 8);
    v17 = *(_QWORD *)(a3 + 8);
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = *(_QWORD *)(a4 + 8);
  }
  *(_DWORD *)a3 = v15;
  *(_DWORD *)a4 = v16;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a4 + 8) = v17;
  v19 = *(_DWORD *)a3;
  v20 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v20 < v19)
      return result;
    v22 = *(_QWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a2 + 8);
    if (v22 >= v21)
      return result;
  }
  else
  {
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a3 + 8);
  }
  *(_DWORD *)a2 = v19;
  *(_DWORD *)a3 = v20;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a3 + 8) = v21;
  v23 = *(_DWORD *)a2;
  v24 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(a2 + 8);
LABEL_9:
    *(_DWORD *)a1 = v23;
    *(_DWORD *)a2 = v24;
    *(_QWORD *)(a1 + 8) = v26;
    *(_QWORD *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = *(_QWORD *)(a2 + 8);
    v25 = *(_QWORD *)(a1 + 8);
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 16);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a2 - 8);
LABEL_30:
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(_QWORD *)(a2 - 8);
        v8 = *(_QWORD *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>(a1, a1 + 16, a1 + 32, a1 + 48, (unsigned int *)(a2 - 16));
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,llvm::Value *> *>((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(_DWORD *)v11;
  v15 = *(_DWORD *)v10;
  if (*(_DWORD *)v11 >= *(_DWORD *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(v10 + 8);
  }
  *(_DWORD *)v11 = v15;
  *(_QWORD *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(_DWORD *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(_QWORD *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = a1 + v19 + 32;
LABEL_20:
        *(_DWORD *)v18 = v14;
        *(_QWORD *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 24);
    }
    v10 -= 16;
    *(_DWORD *)(v20 + 32) = v21;
    *(_QWORD *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

llvm::Value *AGCLLVMUserVertexShader::createVIRead(AGCLLVMUserVertexShader *this)
{
  uint64_t v2;
  char *v3;
  _WORD v5[20];
  uint64_t v6;

  v2 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, (uint64_t)"agc.read_vi.f32", 15, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 200), *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232));
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v6 = llvm::ConstantInt::get();
  v5[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(v3 + 40), *(_QWORD *)(v2 + 24), v2, (uint64_t)&v6, 1, (uint64_t)v5);
}

uint64_t AGCLLVMBuilder::bitCastElements(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Type *a3)
{
  _BYTE v7[32];
  __int16 v8;

  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    a3 = (llvm::Type *)llvm::FixedVectorType::get();
  v8 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a2, (uint64_t)a3, (uint64_t)v7);
}

uint64_t AGCLLVMBuilder::concatenateVectors(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::Value *v6;
  _WORD v8[20];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = llvm::ConstantInt::get();
  v10 = llvm::ConstantInt::get();
  v11 = llvm::ConstantInt::get();
  v12 = llvm::ConstantInt::get();
  v6 = (llvm::Value *)llvm::ConstantVector::get();
  v8[16] = 257;
  return llvm::IRBuilderBase::CreateShuffleVector((AGCLLVMBuilder *)((char *)this + 8), a2, a3, v6, (const llvm::Twine *)v8);
}

uint64_t AGCLLVMBuilder::CreateInsertElement(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3, unsigned int a4, const llvm::Twine *a5)
{
  llvm::IRBuilderBase *v8;
  llvm::Value *v9;

  v8 = (AGCLLVMBuilder *)((char *)this + 8);
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement(v8, a2, a3, v9, a5);
}

llvm::Value *AGCLLVMBuilder::i32Extend(AGCLLVMBuilder *this, llvm::Type **a2, int a3)
{
  llvm::Value *v4;
  llvm::Type *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v4 = (llvm::Value *)a2;
  v6 = *a2;
  if (llvm::Type::getScalarSizeInBits(*a2) != 32)
  {
    v7 = *((_QWORD *)this + 25);
    if ((*((_DWORD *)v6 + 2) & 0xFE) == 0x12)
      v7 = llvm::FixedVectorType::get();
    v11 = 257;
    if (a3)
      v8 = 40;
    else
      v8 = 39;
    return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, v8, (uint64_t)v4, v7, (uint64_t)v10);
  }
  return v4;
}

llvm::Instruction *AGCLLVMBuilder::buildFma(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8;
  int v9;
  std::string *v10;
  std::string::size_type v11;
  void **v12;
  std::string::size_type v13;
  int v14;
  uint64_t v15;
  const std::string::value_type *v16;
  std::string *v17;
  std::string::size_type size;
  uint64_t v19;
  llvm::Instruction *v20;
  void *__p[2];
  uint64_t v23;
  __int16 v24;
  std::string v25;
  std::string v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a2;
  std::string::basic_string[abi:nn180100]<0>(&v25, "llvm.fma.");
  v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
  {
    std::to_string(&v26, *(_DWORD *)(v8 + 32));
    v10 = std::string::insert(&v26, 0, "v");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v23 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v23 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if (v23 >= 0)
      v13 = HIBYTE(v23);
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(&v25, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    v9 = *(_DWORD *)(v8 + 8);
  }
  v14 = v9 & 0xFE;
  v15 = v8;
  if (v14 == 18)
    v15 = **(_QWORD **)(v8 + 16);
  if (v15 == *((_QWORD *)this + 21))
    v16 = "f32";
  else
    v16 = "f16";
  std::string::append(&v25, v16);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v25;
  else
    v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    size = v25.__r_.__value_.__l.__size_;
  v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v17, size, v8, v8, v8, v8);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v26.__r_.__value_.__l.__size_ = (std::string::size_type)a3;
  v26.__r_.__value_.__r.__words[2] = (std::string::size_type)a4;
  v24 = 257;
  v20 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v19 + 24), v19, (uint64_t)&v26, 3, (uint64_t)__p);
  llvm::Instruction::setHasAllowReassoc(v20);
  llvm::Instruction::setHasApproxFunc(v20);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v20;
}

llvm::Value *AGCLLVMBuilder::buildDotProduct(AGCLLVMBuilder *this, llvm::Value *a2, llvm::Value *a3)
{
  llvm::IRBuilderBase *v6;
  llvm::Value *v7;
  uint64_t Element;
  llvm::Value *v9;
  uint64_t v10;
  llvm::Value *FMul;
  uint64_t v12;
  uint64_t i;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  _BYTE v19[32];
  __int16 v20;

  v6 = (AGCLLVMBuilder *)((char *)this + 8);
  v20 = 257;
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  Element = llvm::IRBuilderBase::CreateExtractElement(v6, a2, v7, (const llvm::Twine *)v19);
  v20 = 257;
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v10 = llvm::IRBuilderBase::CreateExtractElement(v6, a3, v9, (const llvm::Twine *)v19);
  v20 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v6, Element, v10, (uint64_t)v19);
  v12 = *(unsigned int *)(*(_QWORD *)a2 + 32);
  if (v12 >= 2)
  {
    for (i = 1; i != v12; ++i)
    {
      v20 = 257;
      v14 = (llvm::Value *)llvm::ConstantInt::get();
      v15 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v6, a2, v14, (const llvm::Twine *)v19);
      v20 = 257;
      v16 = (llvm::Value *)llvm::ConstantInt::get();
      v17 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v6, a3, v16, (const llvm::Twine *)v19);
      FMul = AGCLLVMBuilder::buildFma(this, v15, v17, FMul);
    }
  }
  return FMul;
}

uint64_t AGCLLVMBuilder::buildICmpSel(AGCLLVMBuilder *this, llvm::CmpInst **a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Value *v5;
  _BYTE v9[32];
  __int16 v10;

  v5 = a3;
  if (*a2 != *(llvm::CmpInst **)a3)
    v5 = AGCLLVMBuilder::splat(this, *((_DWORD *)*a2 + 8), a3);
  v10 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 1, a4, a2, (uint64_t)v5, (uint64_t)v9);
  v10 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t AGCLLVMBuilder::clampToWidth(AGCLLVMBuilder *this, llvm::CmpInst **a2, unsigned int a3, int a4)
{
  llvm::Value *v6;
  uint64_t v7;
  llvm::Value *v8;
  AGCLLVMBuilder *v9;
  llvm::CmpInst **v10;
  uint64_t v11;

  if (a4)
  {
    v6 = (llvm::Value *)llvm::ConstantInt::get();
    v7 = AGCLLVMBuilder::buildICmpSel(this, a2, v6, 40);
    v8 = (llvm::Value *)llvm::ConstantInt::get();
    v9 = this;
    v10 = (llvm::CmpInst **)v7;
    v11 = 38;
  }
  else
  {
    v8 = (llvm::Value *)llvm::ConstantInt::get();
    v9 = this;
    v10 = a2;
    v11 = 36;
  }
  return AGCLLVMBuilder::buildICmpSel(v9, v10, v8, v11);
}

uint64_t AGCLLVMBuilder::getGlobalVarValue(AGCLLVMBuilder *this, llvm::Value *a2)
{
  uint64_t result;

  result = 0;
  if (this && *((_BYTE *)this + 16) == 3)
  {
    if ((*((_BYTE *)this + 80) & 1) != 0 && (llvm::GlobalValue::isDeclaration(this) & 1) == 0)
      return *((_QWORD *)this - 4);
    else
      return 0;
  }
  return result;
}

uint64_t AGCLLVMBuilder::buildGlobalMetadata(AGCLLVMBuilder *this, llvm::GlobalVariable *a2)
{
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  return llvm::MDTuple::getImpl();
}

uint64_t AGCLLVMBuilder::setupGlobalMetadata(AGCLLVMBuilder *this, llvm::GlobalVariable *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 43);
  v3 = AGCLLVMBuilder::buildGlobalMetadata(this, a2);
  return llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v2, v3);
}

void AGCLLVMBuiltInFileReaderImpl::~AGCLLVMBuiltInFileReaderImpl(AGCLLVMBuiltInFileReaderImpl *this)
{
  AGCLLVMBuiltInFileReaderImpl::~AGCLLVMBuiltInFileReaderImpl(this);
  JUMPOUT(0x1CAA2D68CLL);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7EBA020;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  free(*((void **)this + 2));
  free(*((void **)this + 4));
}

uint64_t AGCLLVMBuiltInFileReaderImpl::getBuiltinsModule(AGCLLVMBuiltInFileReaderImpl *this, llvm::LLVMContext *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  const char *v8;
  uint64_t BuiltinModuleByName;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  llvm::Value *v19;
  void *Name;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *i;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  llvm::GlobalValue *v38;
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v4 = a3[1];
  if (*a3 == v4)
    return 0;
  v7 = 0;
  do
  {
    v8 = (const char *)v3;
    if (*(char *)(v3 + 23) < 0)
      v8 = *(const char **)v3;
    BuiltinModuleByName = AGCLLVMBuiltInFileReaderImpl::getBuiltinModuleByName(this, a2, v8);
    if (!BuiltinModuleByName)
      goto LABEL_16;
    if (!v7)
    {
      v7 = BuiltinModuleByName;
      goto LABEL_16;
    }
    v43 = BuiltinModuleByName;
    v47 = 0;
    v10 = llvm::Linker::linkModules();
    v11 = v47;
    if (v47 == v46)
    {
      v11 = v46;
      v12 = 4;
      goto LABEL_12;
    }
    if (v47)
    {
      v12 = 5;
LABEL_12:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
    v43 = 0;
    v13 = MEMORY[0x1CAA2CC9C]();
    MEMORY[0x1CAA2D68C](v13, 0x10B2C407FF26C1CLL);
    if (v10)
LABEL_76:
      abort();
LABEL_16:
    v3 += 24;
  }
  while (v3 != v4);
  if (v7)
  {
    v14 = v7 + 8;
    v15 = *(_QWORD *)(v7 + 16);
    if (v15 == v7 + 8)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      do
      {
        if (v15)
          v19 = (llvm::Value *)(v15 - 56);
        else
          v19 = 0;
        if ((*((_BYTE *)v19 + 32) & 0xF) == 0)
        {
          Name = (void *)llvm::Value::getName(v19);
          if (Name)
          {
            std::string::basic_string[abi:nn180100](__p, Name, v21);
            if (v42 >= 0)
              v22 = __p;
            else
              v22 = (void **)__p[0];
          }
          else
          {
            __p[0] = 0;
            __p[1] = 0;
            v22 = __p;
            v42 = 0;
          }
          v23 = AGCLLVMBuiltInFileReaderImpl::getBuiltinModuleByName(this, a2, (const char *)v22);
          if (v23)
          {
            v24 = v23;
            if (v17 >= v18)
            {
              v25 = v17 - v16;
              v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61)
                goto LABEL_76;
              if (((char *)v18 - (char *)v16) >> 2 > v26)
                v26 = ((char *)v18 - (char *)v16) >> 2;
              if ((unint64_t)((char *)v18 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8)
                v27 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v27 = v26;
              if (v27)
              {
                if (v27 >> 61)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v28 = (char *)operator new(8 * v27);
              }
              else
              {
                v28 = 0;
              }
              v29 = (uint64_t *)&v28[8 * v25];
              *v29 = v24;
              v30 = v29 + 1;
              while (v17 != v16)
              {
                v31 = *--v17;
                *--v29 = v31;
              }
              v18 = (uint64_t *)&v28[8 * v27];
              if (v16)
                operator delete(v16);
              v16 = v29;
              v17 = v30;
              v14 = v7 + 8;
            }
            else
            {
              *v17++ = v23;
            }
          }
          if (SHIBYTE(v42) < 0)
            operator delete(__p[0]);
        }
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15 != v14);
      if (v16 != v17)
      {
        for (i = v16; i != v17; ++i)
        {
          v40 = *i;
          v45 = 0;
          v33 = llvm::Linker::linkModules();
          v34 = v45;
          if (v45 == v44)
          {
            v34 = v44;
            v35 = 4;
          }
          else
          {
            if (!v45)
              goto LABEL_58;
            v35 = 5;
          }
          (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_58:
          if (v40)
          {
            v36 = MEMORY[0x1CAA2CC9C]();
            MEMORY[0x1CAA2D68C](v36, 0x10B2C407FF26C1CLL);
          }
          if (v33)
            goto LABEL_76;
        }
      }
    }
    for (j = *(_QWORD *)(v7 + 16); j != v14; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v38 = (llvm::GlobalValue *)(j - 56);
      else
        v38 = 0;
      if (llvm::GlobalValue::isDeclaration(v38))
        llvm::GlobalValue::setLinkage((uint64_t)v38, 0);
      else
        *((_DWORD *)v38 + 8) = *((_DWORD *)v38 + 8) & 0xFFFFBFC0 | 0x4007;
    }
    if (v16)
      operator delete(v16);
  }
  return v7;
}

uint64_t AGCLLVMBuiltInFileReaderImpl::getBuiltinsModuleForSourceModule(AGCLLVMBuiltInFileReaderImpl *this, llvm::Module *a2)
{
  char *v3;
  char *v4;
  llvm::Value *v5;
  void *Name;
  size_t v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  int64x2_t v19;
  unint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;

  v25 = *(_QWORD *)a2;
  v28 = 0uLL;
  v29 = 0;
  v3 = (char *)a2 + 24;
  v4 = (char *)*((_QWORD *)a2 + 4);
  if (v4 != (char *)a2 + 24)
  {
    do
    {
      if (v4)
        v5 = (llvm::Value *)(v4 - 56);
      else
        v5 = 0;
      if (llvm::GlobalValue::isDeclaration(v5))
      {
        Name = (void *)llvm::Value::getName(v5);
        if (Name)
        {
          std::string::basic_string[abi:nn180100](__p, Name, v7);
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          v27 = 0;
        }
        v8 = (_OWORD *)v28.i64[1];
        if (v28.i64[1] >= v29)
        {
          v10 = (_OWORD *)v28.i64[0];
          v11 = 0xAAAAAAAAAAAAAAABLL * ((v28.i64[1] - v28.i64[0]) >> 3);
          v12 = v11 + 1;
          if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((uint64_t)(v29 - v28.i64[0]) >> 3) > v12)
            v12 = 0x5555555555555556 * ((uint64_t)(v29 - v28.i64[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v28.i64[0]) >> 3) >= 0x555555555555555)
            v13 = 0xAAAAAAAAAAAAAAALL;
          else
            v13 = v12;
          if (v13)
            v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v13);
          else
            v14 = 0;
          v15 = *(_OWORD *)__p;
          v16 = v13 + 24 * v11;
          *(_QWORD *)(v16 + 16) = v27;
          *(_OWORD *)v16 = v15;
          __p[1] = 0;
          v27 = 0;
          __p[0] = 0;
          if (v8 == v10)
          {
            v19 = vdupq_n_s64((unint64_t)v8);
            v17 = v13 + 24 * v11;
          }
          else
          {
            v17 = v13 + 24 * v11;
            do
            {
              v18 = *(_OWORD *)((char *)v8 - 24);
              *(_QWORD *)(v17 - 8) = *((_QWORD *)v8 - 1);
              *(_OWORD *)(v17 - 24) = v18;
              v17 -= 24;
              *((_QWORD *)v8 - 2) = 0;
              *((_QWORD *)v8 - 1) = 0;
              *((_QWORD *)v8 - 3) = 0;
              v8 = (_OWORD *)((char *)v8 - 24);
            }
            while (v8 != v10);
            v19 = v28;
          }
          v20 = v16 + 24;
          v28.i64[0] = v17;
          v28.i64[1] = v16 + 24;
          v29 = v13 + 24 * v14;
          v21 = (void **)v19.i64[1];
          v22 = (void **)v19.i64[0];
          while (v21 != v22)
          {
            if (*((char *)v21 - 1) < 0)
              operator delete(*(v21 - 3));
            v21 -= 3;
          }
          if (v22)
            operator delete(v22);
          v28.i64[1] = v20;
          if (SHIBYTE(v27) < 0)
            operator delete(__p[0]);
        }
        else
        {
          v9 = *(_OWORD *)__p;
          *(_QWORD *)(v28.i64[1] + 16) = v27;
          *v8 = v9;
          v28.i64[1] = (uint64_t)v8 + 24;
        }
      }
      v4 = (char *)*((_QWORD *)v4 + 1);
    }
    while (v4 != v3);
  }
  v23 = (*(uint64_t (**)(AGCLLVMBuiltInFileReaderImpl *, uint64_t, int64x2_t *))(*(_QWORD *)this + 16))(this, v25, &v28);
  __p[0] = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  return v23;
}

uint64_t AGCLLVMBuiltInFileReaderImpl::getBuiltinModuleByName(AGCLLVMBuiltInFileReaderImpl *this, llvm::LLVMContext *a2, const char *__s2)
{
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v16;
  llvm::MemoryBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  LOBYTE(v5) = *__s2;
  if (*__s2)
  {
    v6 = 0;
    v7 = 1;
    v8 = 1;
    do
    {
      v6 += v8 * (char)v5;
      v8 *= 2;
      v5 = __s2[v7++];
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v9 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * (v6 % *((_DWORD *)this + 2)));
  if ((_DWORD)v9 == -1)
    return 0;
  v10 = *((_QWORD *)this + 4);
  while (1)
  {
    v11 = v10 + 16 * v9;
    if (!strcmp(*(const char **)(v11 + 8), __s2))
      break;
    v9 = *(unsigned int *)(v10 + 16 * v9);
    if ((_DWORD)v9 == -1)
      return 0;
  }
  v12 = *(unsigned int *)(v11 + 4);
  if ((_DWORD)v12 == -1)
    return 0;
  v13 = *((_QWORD *)this + 8);
  if (v12 + 4 > v13 || v13 < (*(_DWORD *)(*((_QWORD *)this + 6) + v12) + v12 + 4))
    return 0;
  llvm::MemoryBuffer::getMemBuffer();
  llvm::MemoryBuffer::getMemBufferRef(v17);
  llvm::parseBitcodeFile();
  v16 = v20;
  if ((v20 & 1) != 0)
  {
    v18 = v19;
    v19 = 0;
    v14 = llvm::errorToErrorCodeAndEmitErrors();
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    v14 = v19;
    v19 = 0;
  }
  llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(&v19);
  if ((v16 & 1) != 0)
    v14 = 0;
  if (v17)
    (*(void (**)())(*(_QWORD *)v17 + 8))();
  return v14;
}

void llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

{
  *a1 = 0;
  a1[24] = 0;
}

{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t *llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(uint64_t *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_BYTE *)a1 + 8);
  v3 = *a1;
  *a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (v3)
  {
    v4 = MEMORY[0x1CAA2CC9C]();
    MEMORY[0x1CAA2D68C](v4, 0x10B2C407FF26C1CLL);
  }
  return a1;
}

uint64_t AGCLLVMComputePrograms::compile(AGCLLVMComputePrograms *this)
{
  uint64_t GlobalVariable;
  llvm::GlobalVariable *v3;
  uint64_t v4;
  uint64_t v5;
  llvm::GlobalVariable *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::GlobalVariable *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Module *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  llvm::GlobalValue *v20;
  _QWORD v21[4];
  __int16 v22;

  if (*((_DWORD *)this + 830) == 39)
  {
    GlobalVariable = llvm::Module::getGlobalVariable();
    if (GlobalVariable)
    {
      v3 = (llvm::GlobalVariable *)GlobalVariable;
      llvm::GlobalObject::setSection();
      v4 = *((_QWORD *)this + 47);
      v5 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMComputePrograms *)((char *)this + 32), v3);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4, v5);
    }
    v6 = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
    if (v6)
    {
      v7 = *((_QWORD *)this + 47);
      v8 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMComputePrograms *)((char *)this + 32), v6);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v7, v8);
    }
    v9 = (llvm::GlobalVariable *)llvm::Module::getGlobalVariable();
    if (v9)
    {
      v10 = *((_QWORD *)this + 47);
      v11 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMComputePrograms *)((char *)this + 32), v9);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v10, v11);
    }
  }
  v12 = (llvm::Module *)*((_QWORD *)this + 46);
  v21[0] = "agx.compute_driver_bindings";
  v22 = 259;
  if (!llvm::Module::getNamedMetadata(v12, (const llvm::Twine *)v21))
  {
    v17 = *((_QWORD *)this + 46);
    v18 = v17 + 24;
    for (i = *(_QWORD *)(v17 + 32); i != v18; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v20 = (llvm::GlobalValue *)(i - 56);
      else
        v20 = 0;
      if ((llvm::GlobalValue::isDeclaration(v20) & 1) == 0)
      {
        (*(void (**)(AGCLLVMComputePrograms *, llvm::GlobalValue *))(*(_QWORD *)this + 168))(this, v20);
        break;
      }
    }
  }
  v13 = *((_QWORD *)this + 58);
  v14 = *((_QWORD *)this + 46);
  v21[0] = 0x10000;
  v15 = AGCLLVMCtx::compile(v13, (uint64_t)this, v14, 1, 3, v21, 0);
  result = 0;
  if (v15)
    return (*(uint64_t (**)(AGCLLVMComputePrograms *))(*(_QWORD *)this + 136))(this);
  return result;
}

void AGCLLVMComputePrograms::~AGCLLVMComputePrograms(AGCLLVMComputePrograms *this)
{
  AGCLLVMObject::~AGCLLVMObject(this);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMComputePrograms::dumpType(AGCLLVMComputePrograms *this)
{
  return "compute_program";
}

uint64_t AGCLLVMComputePrograms::getShaderType(AGCLLVMComputePrograms *this)
{
  return 22;
}

void AGCLLVMComputePrograms::getCompilationKeyDescription(AGCLLVMComputePrograms *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *v5;
  void **v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  std::string::value_type *v10;
  std::string::size_type v11;
  int v12;
  const std::string::value_type *p_p;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  void *v23[2];
  unsigned __int8 v24;
  _DWORD v25[2];
  std::string v26;
  std::string v27;
  void *v28[2];
  char v29;
  void *__p;
  std::string::size_type v31;
  unsigned __int8 v32;
  std::string v33;
  std::string v34;
  std::string v35;

  std::string::basic_string[abi:nn180100]<0>(&v26, (char *)&unk_1C3E4D9BB);
  std::string::basic_string[abi:nn180100]<0>(v23, "token");
  std::to_string(&v34, *((_DWORD *)this + 830));
  if ((v24 & 0x80u) == 0)
    v4 = v24;
  else
    v4 = (size_t)v23[1];
  v5 = &v35;
  std::string::basic_string[abi:nn180100]((uint64_t)&v35, v4 + 3);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if ((v24 & 0x80u) == 0)
      v6 = v23;
    else
      v6 = (void **)v23[0];
    memmove(v5, v6, v4);
  }
  *(_DWORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 2112032;
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v34;
  else
    v7 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    size = v34.__r_.__value_.__l.__size_;
  v9 = std::string::append(&v35, (const std::string::value_type *)v7, size);
  v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  v11 = v9->__r_.__value_.__l.__size_;
  v25[0] = v9->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v25 + 3) = *(_DWORD *)((char *)&v9->__r_.__value_.__r.__words[2] + 3);
  v12 = SHIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v33, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    v33 = v26;
  _agcIndentedLine((void **)&v34.__r_.__value_.__l.__data_, (std::string::value_type *)&v33, 0);
  std::string::basic_string[abi:nn180100]<0>(v28, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v28, 0);
  if ((v32 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v32 & 0x80u) == 0)
    v14 = v32;
  else
    v14 = v31;
  v15 = std::string::append(&v34, p_p, v14);
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((char)v32 < 0)
    operator delete(__p);
  if (v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_38;
  }
  else if ((v12 & 0x80000000) == 0)
  {
LABEL_38:
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v34.__r_.__value_.__l.__size_ = v11;
    LODWORD(v34.__r_.__value_.__r.__words[2]) = v25[0];
    *(_DWORD *)((char *)&v34.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v25 + 3);
    *((_BYTE *)&v34.__r_.__value_.__s + 23) = v12;
    v17 = v12;
LABEL_41:
    v27 = v34;
    goto LABEL_42;
  }
  std::string::__init_copy_ctor_external(&v34, v10, v11);
  v17 = SHIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_41;
  std::string::__init_copy_ctor_external(&v27, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
LABEL_42:
  _agcIndentedLine(&__p, (std::string::value_type *)&v27, 1);
  if ((v32 & 0x80u) == 0)
    v18 = (const std::string::value_type *)&__p;
  else
    v18 = (const std::string::value_type *)__p;
  if ((v32 & 0x80u) == 0)
    v19 = v32;
  else
    v19 = v31;
  std::string::append(&v35, v18, v19);
  if ((char)v32 < 0)
    operator delete(__p);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_53;
    goto LABEL_52;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  if (v17 < 0)
LABEL_52:
    operator delete(v34.__r_.__value_.__l.__data_);
LABEL_53:
  std::string::basic_string[abi:nn180100]<0>(&__p, "}");
  _agcIndentedLine((void **)&v34.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v35;
  else
    v20 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    v21 = v35.__r_.__value_.__l.__size_;
  v22 = std::string::insert(&v34, 0, (const std::string::value_type *)v20, v21);
  *a2 = *v22;
  v22->__r_.__value_.__r.__words[0] = 0;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if ((char)v32 < 0)
    operator delete(__p);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v12 & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_65;
  }
  operator delete(v35.__r_.__value_.__l.__data_);
  if (v12 < 0)
LABEL_65:
    operator delete(v10);
LABEL_66:
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

BOOL AGCLLVMComputePrograms::constructReply(AGCLLVMComputePrograms *this)
{
  _BOOL8 v2;
  flatbuffers::FlatBufferBuilder *v3;
  __int16 v4;
  int v5;
  int v6;
  int v7;
  const char *v8;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMComputePrograms *)((char *)this + 472), *(_DWORD **)(*((_QWORD *)this + 58) + 152), *(_QWORD *)(*((_QWORD *)this + 58) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply(this);
    v3 = AGCLLVMObject::constructFlatReply(this);
    v5 = flatbuffers::FlatBufferBuilder::EndTable(v3, v4);
    *((_BYTE *)this + 2542) = 1;
    v6 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((char *)this + 2472, v5);
    v7 = flatbuffers::FlatBufferBuilder::EndTable((AGCLLVMComputePrograms *)((char *)this + 2472), v6);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMComputePrograms *)((char *)this + 2472), v7, v8);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this, (_DWORD *)this + 618);
  }
  return v2;
}

uint64_t AGCLLVMContextSwitchProgram::compile(AGCLLVMContextSwitchProgram *this)
{
  AGCLLVMBuilder *v2;
  uint64_t Function;
  llvm::Function *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Function *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Instruction *v12;
  uint64_t v13;
  llvm::Instruction *v14;
  uint64_t v15;
  uint64_t inserted;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *Cast;
  llvm::Value *v28;
  llvm::Value *Shl;
  uint64_t v30;
  uint64_t v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Value *v35;
  llvm::Type *v36;
  llvm::Value *v37;
  llvm::Type **GEP;
  llvm::Value *v39;
  llvm::Type *v40;
  llvm::CmpInst **AlignedLoad;
  uint64_t v42;
  llvm::Type *v43;
  llvm::Value *v44;
  llvm::Type *v45;
  llvm::Value *v46;
  uint64_t Select;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::Value *v51;
  llvm::Value *v52;
  uint64_t LShr;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  uint64_t v61;
  uint64_t v62;
  llvm::Value *v63;
  uint64_t v64;
  uint64_t v65;
  llvm::Value *v66;
  llvm::Type *v67;
  llvm::Value *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::Value *v73;
  llvm::Value *v74;
  llvm::Value *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  uint64_t v79;
  llvm::BasicBlock *v80;
  uint64_t GlobalVariable;
  llvm::GlobalVariable *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  AGCLLVMBuilder *v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  _BYTE v96[32];
  __int16 v97;
  _BYTE v98[32];
  __int16 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t Element;
  uint64_t v103;
  void *v104[2];
  _BYTE v105[16];
  __int16 v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v2 = (AGCLLVMContextSwitchProgram *)((char *)this + 32);
  Function = llvm::Module::getFunction();
  *(_QWORD *)(Function + 112) = 0;
  *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | 0x6A0;
  if (*((_BYTE *)this + 3320))
  {
    v4 = (llvm::Function *)llvm::Module::getFunction();
    v5 = *((_QWORD *)this + 50);
    if (*(_QWORD *)(v5 + 1648))
      strlen(*(const char **)(v5 + 1648));
    AGCLLVMBuilder::getOrInsertFunction<>();
    llvm::Value::replaceAllUsesWith();
    llvm::Function::eraseFromParent(v4);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 50) + 376))(*((_QWORD *)this + 50), Function);
  }
  v6 = llvm::Module::getFunction();
  if (v6)
  {
    v7 = (llvm::Function *)v6;
    v8 = *((_QWORD *)this + 50);
    if (*(_QWORD *)(v8 + 1656))
      strlen(*(const char **)(v8 + 1656));
    llvm::Module::getOrInsertFunction();
    llvm::Value::replaceAllUsesWith();
    llvm::Function::eraseFromParent(v7);
  }
  if (*((_BYTE *)this + 3320) && *(_BYTE *)(*((_QWORD *)this + 50) + 1733))
  {
    v9 = *(_QWORD *)(Function + 80);
    v10 = v9 - 24;
    if (!v9)
      v10 = 0;
    v11 = *(_QWORD *)(v10 + 40);
    if (v11 == v10 + 40)
    {
      v14 = 0;
    }
    else
    {
      v12 = (llvm::Instruction *)(v11 - 24);
      if (v11)
        v13 = v11 - 24;
      else
        v13 = 0;
      if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB)
        v14 = 0;
      else
        v14 = v12;
    }
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMContextSwitchProgram *)((char *)this + 40), v14);
    v15 = *((_QWORD *)this + 50);
    if (*(_QWORD *)(v15 + 928))
      strlen(*(const char **)(v15 + 928));
    inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    v106 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)this + 40, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v104);
  }
  llvm::Module::getOrInsertNamedMetadata();
  if (*((_BYTE *)this + 3321))
  {
    v17 = operator new(0x20uLL);
    v18 = *((_QWORD *)this + 29);
    *v17 = v18;
    v17[1] = v18;
    v17[2] = v18;
    v17[3] = v18;
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v20 = v19;
    *(_WORD *)(v19 + 18) = *(_WORD *)(v19 + 18) & 0xC00F | 0x6A0;
    v104[0] = "prefix";
    v106 = 259;
    operator new();
    v21 = llvm::BasicBlock::BasicBlock();
    *((_QWORD *)this + 11) = v21;
    *((_QWORD *)this + 12) = v21 + 40;
    v104[0] = v105;
    v104[1] = (void *)0x400000000;
    if ((*(_BYTE *)(v20 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v20);
      v22 = *(_QWORD *)(v20 + 88);
      if ((*(_WORD *)(v20 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v20);
        v23 = *(_QWORD *)(v20 + 88);
        goto LABEL_30;
      }
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 88);
    }
    v23 = v22;
LABEL_30:
    v89 = v2;
    v24 = v23 + 40 * *(_QWORD *)(v20 + 96);
    while (v22 != v24)
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v104, v22);
      v22 += 40;
    }
    v25 = *(_QWORD *)v104[0];
    v26 = *((_QWORD *)this + 30);
    v99 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 39, v25, v26, (uint64_t)v98);
    v97 = 257;
    v28 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((AGCLLVMContextSwitchProgram *)((char *)this + 40), Cast, v28, (const llvm::Twine *)v96);
    v30 = *((_QWORD *)v104[0] + 1);
    v31 = *((_QWORD *)this + 30);
    v95 = 257;
    v32 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 39, v30, v31, (uint64_t)v94);
    v93 = 257;
    v33 = llvm::IRBuilderBase::CreateOr((AGCLLVMContextSwitchProgram *)((char *)this + 40), Shl, v32, (const llvm::Twine *)v92);
    v34 = llvm::PointerType::get();
    v91 = 257;
    v35 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 48, v33, v34, (uint64_t)v90);
    v36 = (llvm::Type *)*((_QWORD *)this + 29);
    v37 = (llvm::Value *)llvm::ConstantInt::get();
    v99 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((AGCLLVMContextSwitchProgram *)((char *)this + 40), v36, v35, v37, (const llvm::Twine *)v98);
    v99 = 257;
    v40 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v39);
    AlignedLoad = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 5, v40, (uint64_t)GEP, 0, (uint64_t)v98);
    v42 = llvm::ConstantInt::get();
    v99 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)this + 5, 33, AlignedLoad, v42, (uint64_t)v98);
    v43 = (llvm::Type *)*((_QWORD *)this + 29);
    v44 = (llvm::Value *)llvm::ConstantInt::get();
    v99 = 257;
    llvm::IRBuilderBase::CreateGEP((AGCLLVMContextSwitchProgram *)((char *)this + 40), v43, v35, v44, (const llvm::Twine *)v98);
    v45 = (llvm::Type *)*((_QWORD *)this + 29);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v99 = 257;
    llvm::IRBuilderBase::CreateGEP((AGCLLVMContextSwitchProgram *)((char *)this + 40), v45, v35, v46, (const llvm::Twine *)v98);
    v99 = 257;
    Select = llvm::IRBuilderBase::CreateSelect();
    v48 = *((_QWORD *)this + 30);
    v99 = 257;
    v49 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 47, Select, v48, (uint64_t)v98);
    v50 = *((_QWORD *)this + 30);
    v99 = 257;
    v51 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 39, v49, v50, (uint64_t)v98);
    v99 = 257;
    v52 = (llvm::Value *)llvm::ConstantInt::get();
    LShr = llvm::IRBuilderBase::CreateLShr((AGCLLVMContextSwitchProgram *)((char *)this + 40), v51, v52, (const llvm::Twine *)v98);
    v54 = *((_QWORD *)this + 29);
    v99 = 257;
    v100 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 38, LShr, v54, (uint64_t)v98);
    v55 = *((_QWORD *)this + 29);
    v99 = 257;
    v101 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 38, v49, v55, (uint64_t)v98);
    v56 = *((_QWORD *)v104[0] + 2);
    v57 = *((_QWORD *)this + 30);
    v99 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 39, v56, v57, (uint64_t)v98);
    v97 = 257;
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((AGCLLVMContextSwitchProgram *)((char *)this + 40), v58, v59, (const llvm::Twine *)v96);
    v61 = *((_QWORD *)v104[0] + 3);
    v62 = *((_QWORD *)this + 30);
    v95 = 257;
    v63 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 39, v61, v62, (uint64_t)v94);
    v93 = 257;
    v64 = llvm::IRBuilderBase::CreateOr((AGCLLVMContextSwitchProgram *)((char *)this + 40), v60, v63, (const llvm::Twine *)v92);
    v65 = llvm::PointerType::get();
    v91 = 257;
    v66 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 48, v64, v65, (uint64_t)v90);
    v67 = (llvm::Type *)*((_QWORD *)this + 27);
    v68 = (llvm::Value *)llvm::ConstantInt::get();
    v99 = 257;
    llvm::IRBuilderBase::CreateGEP((AGCLLVMContextSwitchProgram *)((char *)this + 40), v67, v66, v68, (const llvm::Twine *)v98);
    v99 = 257;
    v69 = llvm::IRBuilderBase::CreateSelect();
    v70 = *((_QWORD *)this + 30);
    v99 = 257;
    v71 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 47, v69, v70, (uint64_t)v98);
    v72 = *((_QWORD *)this + 35);
    v99 = 257;
    v73 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 49, v71, v72, (uint64_t)v98);
    v99 = 257;
    v74 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMContextSwitchProgram *)((char *)this + 40), v73, v74, (const llvm::Twine *)v98);
    v99 = 257;
    v75 = (llvm::Value *)llvm::ConstantInt::get();
    v103 = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMContextSwitchProgram *)((char *)this + 40), v73, v75, (const llvm::Twine *)v98);
    if ((*(_WORD *)(Function + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)Function);
      v76 = *(_QWORD *)(Function + 88);
      if ((*(_WORD *)(Function + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        v77 = *(_QWORD *)(Function + 88);
        goto LABEL_38;
      }
    }
    else
    {
      v76 = *(_QWORD *)(Function + 88);
    }
    v77 = v76;
LABEL_38:
    v2 = v89;
    for (i = v77 + 40 * *(_QWORD *)(Function + 96); v76 != i; v76 += 40)
      llvm::Value::replaceAllUsesWith();
    v79 = *(_QWORD *)(Function + 80);
    if (v79)
      v80 = (llvm::BasicBlock *)(v79 - 24);
    else
      v80 = 0;
    llvm::IRBuilderBase::CreateBr((AGCLLVMContextSwitchProgram *)((char *)this + 40), v80);
    if (*(_QWORD *)(Function + 72) != Function + 72)
      llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(v20 + 72, (uint64_t *)(v20 + 72), Function + 72, *(uint64_t **)(Function + 80), (uint64_t *)(Function + 72));
    if (v104[0] != v105)
      free(v104[0]);
    operator delete(v17);
  }
  v104[0] = "agc.main";
  v106 = 259;
  llvm::Value::setName();
  GlobalVariable = llvm::Module::getGlobalVariable();
  if (GlobalVariable)
  {
    v82 = (llvm::GlobalVariable *)GlobalVariable;
    llvm::GlobalObject::setSection();
    v83 = *((_QWORD *)this + 47);
    v84 = AGCLLVMBuilder::buildGlobalMetadata(v2, v82);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v83, v84);
  }
  v85 = llvm::Module::getFunction();
  (*(void (**)(AGCLLVMContextSwitchProgram *, uint64_t))(*(_QWORD *)this + 168))(this, v85);
  v86 = *((_QWORD *)this + 58);
  v87 = *((_QWORD *)this + 46);
  v104[0] = (void *)0x10000;
  if (AGCLLVMCtx::compile(v86, (uint64_t)this, v87, 1, 3, v104, 0))
    return (*(uint64_t (**)(AGCLLVMContextSwitchProgram *))(*(_QWORD *)this + 136))(this);
  else
    return 0;
}

void AGCLLVMContextSwitchProgram::~AGCLLVMContextSwitchProgram(AGCLLVMContextSwitchProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject(this);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMContextSwitchProgram::dumpType(AGCLLVMContextSwitchProgram *this)
{
  const char *v1;
  const char *v2;

  if (*((_BYTE *)this + 3321))
    v1 = "context_save_toggle";
  else
    v1 = "context_save";
  v2 = "context_restore_toggle";
  if (!*((_BYTE *)this + 3321))
    v2 = "context_restore";
  if (*((_BYTE *)this + 3320))
    return v1;
  else
    return v2;
}

uint64_t AGCLLVMContextSwitchProgram::getShaderType(AGCLLVMContextSwitchProgram *this)
{
  if (*((_BYTE *)this + 3320))
    return 10;
  else
    return 11;
}

void AGCLLVMContextSwitchProgram::getCompilationKeyDescription(AGCLLVMContextSwitchProgram *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  char *v5;
  const std::string::value_type *p_p;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  char v10;
  uint64_t v11;
  char v12;
  std::string *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  uint64_t i;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;
  std::string v26;
  void *v27[2];
  char v28;
  void *__p;
  std::string::size_type v30;
  unsigned __int8 v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&v25, (char *)&unk_1C3E4D9BB);
  std::string::basic_string[abi:nn180100]<0>(v23, "save");
  if (*((_BYTE *)this + 3320))
    v4 = "true";
  else
    v4 = "false";
  _agcFieldString<char const*>(&v35, (const void **)v23, v4);
  std::string::basic_string[abi:nn180100]<0>(v21, "toggle");
  if (*((_BYTE *)this + 3321))
    v5 = "true";
  else
    v5 = "false";
  _agcFieldString<char const*>(&v36, (const void **)v21, v5);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v32, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v32 = v25;
  _agcIndentedLine((void **)&v33.__r_.__value_.__l.__data_, (std::string::value_type *)&v32, 0);
  std::string::basic_string[abi:nn180100]<0>(v27, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v27, 0);
  if ((v31 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v31 & 0x80u) == 0)
    v7 = v31;
  else
    v7 = v30;
  v8 = std::string::append(&v33, p_p, v7);
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v31 < 0)
    operator delete(__p);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  v10 = 0;
  v11 = 0;
  do
  {
    v12 = v10;
    v13 = &v35 + v11;
    if (SHIBYTE(v13->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v33, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
    else
      v33 = *v13;
    v14 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v26, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      v26 = v33;
    _agcIndentedLine(&__p, (std::string::value_type *)&v26, 1);
    if ((v31 & 0x80u) == 0)
      v15 = (const std::string::value_type *)&__p;
    else
      v15 = (const std::string::value_type *)__p;
    if ((v31 & 0x80u) == 0)
      v16 = v31;
    else
      v16 = v30;
    std::string::append(&v34, v15, v16);
    if ((char)v31 < 0)
      operator delete(__p);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v26.__r_.__value_.__l.__data_);
      if ((v14 & 0x80000000) == 0)
        goto LABEL_41;
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_41;
    }
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_41:
    v10 = 1;
    v11 = 1;
  }
  while ((v12 & 1) == 0);
  std::string::basic_string[abi:nn180100]<0>(&__p, "}");
  _agcIndentedLine((void **)&v33.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v34;
  else
    v17 = (std::string *)v34.__r_.__value_.__r.__words[0];
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    size = v34.__r_.__value_.__l.__size_;
  v19 = std::string::insert(&v33, 0, (const std::string::value_type *)v17, size);
  *a2 = *v19;
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if ((char)v31 < 0)
    operator delete(__p);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v36.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v35 + i * 8 + 24));
  }
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

BOOL AGCLLVMContextSwitchProgram::constructReply(AGCLLVMContextSwitchProgram *this)
{
  _BOOL8 v2;
  _BOOL8 v3;
  flatbuffers::FlatBufferBuilder *v4;
  __int16 v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t i;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  const char *v26;
  int v28;
  _BOOL4 v29;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMContextSwitchProgram *)((char *)this + 472), *(_DWORD **)(*((_QWORD *)this + 58) + 152), *(_QWORD *)(*((_QWORD *)this + 58) + 160));
  v3 = v2;
  if (v2)
  {
    v29 = v2;
    AGCLLVMObject::validateBackendReply(this);
    v4 = AGCLLVMObject::constructFlatReply(this);
    v28 = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    for (i = 0; i != 4; ++i)
    {
      *((_BYTE *)this + 2542) = 1;
      v10 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)this + 2472, 4, i);
      flatbuffers::FlatBufferBuilder::AddElement<signed char>((char *)this + 2472, 6, AGCLLVMContextSwitchProgram::constructReply(void)::vi_inputs[4 * i]);
      v11 = flatbuffers::FlatBufferBuilder::EndTable((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v10);
      v12 = v11;
      if ((unint64_t)v7 >= v8)
      {
        v13 = (v7 - v6) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          abort();
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v14)
          v14 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v15);
        else
          v16 = 0;
        v17 = (char *)(v15 + 4 * v13);
        *(_DWORD *)v17 = v12;
        v18 = v17 + 4;
        while (v7 != v6)
        {
          v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v17 - 1) = v19;
          v17 -= 4;
        }
        v8 = v15 + 4 * v16;
        if (v6)
          operator delete(v6);
        v6 = v17;
        v7 = v18;
      }
      else
      {
        *(_DWORD *)v7 = v11;
        v7 += 4;
      }
    }
    if (v7 == v6)
      v20 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>> const&)::t;
    else
      v20 = v6;
    v21 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + 2472, (uint64_t)v20, (v7 - v6) >> 2);
    *((_BYTE *)this + 2542) = 1;
    v22 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((char *)this + 2472, v21);
    v23 = flatbuffers::FlatBufferBuilder::EndTable((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v22);
    *((_BYTE *)this + 2542) = 1;
    v24 = *((_DWORD *)this + 626) - *((_DWORD *)this + 630) + *((_DWORD *)this + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((char *)this + 2472, v28);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>((char *)this + 2472, v23);
    v25 = flatbuffers::FlatBufferBuilder::EndTable((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v24);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMContextSwitchProgram *)((char *)this + 2472), v25, v26);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this, (_DWORD *)this + 618);
    v3 = v29;
    if (v6)
      operator delete(v6);
  }
  return v3;
}

uint64_t AGCLLVMContextSwitchProgram::create(AGCLLVMContextSwitchProgram *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, char a4)
{
  char v4;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  flatbuffers::FlatBufferBuilder *v13;
  int v14;
  const char *v15;
  unint64_t v16;
  int String;
  int v18;
  int v19;
  int v20;
  int v21;
  const char *v22;
  int v23;
  const char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  void *v34;
  flatbuffers::FlatBufferBuilder *v35;
  __int16 v36;
  int v37;
  int v38;
  int v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  size_t v57;
  uint64_t v58;
  size_t __n;
  size_t v60;
  size_t v61;
  void *__src;
  llvm::MemoryBuffer *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  v4 = (char)a3;
  v66 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(*((_QWORD *)this + 4) + 28);
  v8 = v7 > 0x1B;
  v9 = (1 << v7) & 0xE7F4000;
  if (v8 || v9 == 0)
  {
    v11 = operator new();
    AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)v11, this, a2);
    *(_QWORD *)v53 = &off_1E7EBA178;
    *(_QWORD *)(v53 + 32) = &unk_1E7EBA268;
    *(_BYTE *)(v53 + 3320) = v4;
    *(_BYTE *)(v53 + 3321) = a4;
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBuffer::getMemBufferRef(v63);
    llvm::parseBitcodeFile();
    v54 = v64;
    if ((v65 & 1) != 0 && (v64 = 0, v54))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
      v54 = *(_QWORD *)(v11 + 368);
    }
    else
    {
      v64 = 0;
      *(_QWORD *)(v11 + 368) = v54;
    }
    v55 = *(_QWORD *)(*(_QWORD *)(v11 + 464) + 32);
    v56 = *(void **)(v55 + 8);
    if (v56)
      v57 = strlen(*(const char **)(v55 + 8));
    else
      v57 = 0;
    llvm::Module::setTargetTriple(v54, v56, v57);
    v58 = *(_QWORD *)(*(_QWORD *)(v11 + 464) + 32);
    if (*(_QWORD *)(v58 + 16))
      strlen(*(const char **)(v58 + 16));
    llvm::Module::setDataLayout();
    AGCLLVMObject::disableConstantHoisting((AGCLLVMObject *)v11);
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(&v64);
    if (v63)
      (*(void (**)())(*(_QWORD *)v63 + 8))();
  }
  else
  {
    v11 = operator new();
    AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)v11, this, a2);
    *(_QWORD *)v12 = &off_1E7EBA280;
    *(_QWORD *)(v12 + 32) = &unk_1E7EBA370;
    *(_BYTE *)(v12 + 3320) = v4;
    v13 = (flatbuffers::FlatBufferBuilder *)(v12 + 3328);
    *(_QWORD *)(v12 + 3328) = 0;
    *(_BYTE *)(v12 + 3336) = 0;
    *(_OWORD *)(v12 + 3344) = xmmword_1C3E37B60;
    *(_QWORD *)(v12 + 3392) = 0;
    *(_OWORD *)(v12 + 3360) = 0u;
    *(_OWORD *)(v12 + 3376) = 0u;
    *(_QWORD *)(v12 + 3400) = 1;
    *(_WORD *)(v12 + 3408) = 256;
    *(_QWORD *)(v12 + 3416) = 0;
    *(_QWORD *)(v12 + 3432) = 0;
    *(_QWORD *)(v12 + 3424) = 0;
    *(_BYTE *)(v12 + 3398) = 1;
    v14 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v12 + 3328), 0);
    if (*(_BYTE *)(v11 + 3320))
      v15 = "save";
    else
      v15 = "restore";
    if (*(_BYTE *)(v11 + 3320))
      v16 = 4;
    else
      v16 = 7;
    String = flatbuffers::FlatBufferBuilder::CreateString(v13, v15, v16);
    *(_BYTE *)(v11 + 3398) = 1;
    v18 = *(_DWORD *)(v11 + 3360) - *(_DWORD *)(v11 + 3376) + *(_DWORD *)(v11 + 3368);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>((char *)v13, 6, String);
    v19 = flatbuffers::FlatBufferBuilder::EndTable(v13, v18);
    *(_BYTE *)(v11 + 3398) = 1;
    v20 = *(_DWORD *)(v11 + 3360) - *(_DWORD *)(v11 + 3376) + *(_DWORD *)(v11 + 3368);
    if (v14)
    {
      flatbuffers::FlatBufferBuilder::Align(v13, 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v13, 4, *(_DWORD *)(v11 + 3360) - *(_DWORD *)(v11 + 3376) + *(_DWORD *)(v11 + 3368) - v14 + 4);
    }
    if (v19)
    {
      flatbuffers::FlatBufferBuilder::Align(v13, 4uLL);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>((char *)v13, 10, *(_DWORD *)(v11 + 3360) - *(_DWORD *)(v11 + 3376) + *(_DWORD *)(v11 + 3368) - v19 + 4);
    }
    v21 = flatbuffers::FlatBufferBuilder::EndTable(v13, v20);
    flatbuffers::FlatBufferBuilder::Finish(v13, v21, v22);
    v23 = *(unsigned __int8 *)(v11 + 3320);
    v24 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
    if (dumpShaderToFile(v24))
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 56))(v11);
      printMessage((char **)&AGCPrinter, "Generating %s program from hand written asm", v26, v27, v28, v29, v30, v31, v25);
    }
    v32 = v23 == 0;
    if (v23)
      v33 = 1256;
    else
      v33 = 1318;
    __n = v33;
    v34 = &G13::preemptionSaveUSCProgram;
    if (v32)
      v34 = &G13::preemptionRestoreUSCProgram;
    __src = v34;
    v35 = AGCLLVMObject::constructFlatReply((AGCLLVMObject *)v11);
    v37 = flatbuffers::FlatBufferBuilder::EndTable(v35, v36);
    *(_BYTE *)(v11 + 2542) = 1;
    v38 = *(_DWORD *)(v11 + 2504) - *(_DWORD *)(v11 + 2520) + *(_DWORD *)(v11 + 2512);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>((char *)(v11 + 2472), v37);
    v39 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)(v11 + 2472), v38);
    flatbuffers::FlatBufferBuilder::Finish((flatbuffers::FlatBufferBuilder *)(v11 + 2472), v39, v40);
    v60 = (*(_DWORD *)(v11 + 3360) - *(_DWORD *)(v11 + 3376) + *(_DWORD *)(v11 + 3368));
    v61 = (*(_DWORD *)(v11 + 2504) - *(_DWORD *)(v11 + 2520) + *(_DWORD *)(v11 + 2512));
    v41 = ((_DWORD)v33 + 7) & 0xFFFFFFF8;
    v42 = (v60 + 7) & 0x1FFFFFFF8;
    v43 = (v61 + 7) & 0x1FFFFFFF8;
    v44 = v42 + v41 + 368;
    v45 = v43 + v44 + 40;
    v46 = (char *)malloc_type_calloc(1uLL, v45, 0x7843BC0uLL);
    *(_QWORD *)(v11 + 3424) = v46;
    *(_DWORD *)v46 = -17958193;
    *((_DWORD *)v46 + 4) = 2;
    *((_QWORD *)v46 + 4) = 0x13800000019;
    v47 = v42 + v41 + v43;
    *((_QWORD *)v46 + 8) = v47;
    *((_QWORD *)v46 + 9) = 368;
    *((_QWORD *)v46 + 10) = v47;
    *((_DWORD *)v46 + 24) = 3;
    *(_OWORD *)(v46 + 120) = *(_OWORD *)"__TEXT";
    *((_DWORD *)v46 + 38) = 368;
    *((_QWORD *)v46 + 18) = v41;
    memcpy((void *)(*(_QWORD *)(v11 + 3424) + 368), __src, __n);
    *(_OWORD *)(v46 + 200) = *(_OWORD *)"__GPU_METADATA";
    *((_DWORD *)v46 + 58) = v41 + 368;
    *((_QWORD *)v46 + 28) = v42;
    memcpy((void *)(*(_QWORD *)(v11 + 3424) + v41 + 368), *(const void **)(v11 + 3376), v60);
    *(_OWORD *)(v46 + 280) = *(_OWORD *)"__GPU_LD_MD";
    *((_DWORD *)v46 + 78) = v44;
    *((_QWORD *)v46 + 38) = v43;
    memcpy((void *)(*(_QWORD *)(v11 + 3424) + (v44 & 0xFFFFFFF8)), *(const void **)(v11 + 2520), v61);
    v48 = (uint64_t)&v46[*((unsigned int *)v46 + 9) + 32];
    *(_QWORD *)v48 = 0x1800000002;
    *(_DWORD *)(v48 + 8) = v43 + v44;
    *(_DWORD *)(v48 + 12) = 1;
    v49 = (v43 + v44 + 16);
    *(_DWORD *)(v48 + 16) = v49;
    *(_DWORD *)(v48 + 20) = 20;
    strcpy((char *)(*(_QWORD *)(v11 + 3424) + v49), "__agc.ctx_switch");
    v50 = *(_QWORD *)(v11 + 3424) + *(unsigned int *)(v48 + 8);
    *(_DWORD *)v50 = 1;
    *(_WORD *)(v50 + 4) = 270;
    *(_QWORD *)(v11 + 3432) = v45;
    *(_QWORD *)(v11 + 472) = *(_QWORD *)(v11 + 3424);
    *(_QWORD *)(v11 + 480) = v45;
  }
  return v11;
}

uint64_t AGCContextSwitchProgramG13::compile(AGCContextSwitchProgramG13 *this)
{
  return 1;
}

void AGCContextSwitchProgramG13::~AGCContextSwitchProgramG13(AGCContextSwitchProgramG13 *this)
{
  *(_QWORD *)this = &off_1E7EBA280;
  *((_QWORD *)this + 4) = &unk_1E7EBA370;
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCContextSwitchProgramG13 *)((char *)this + 3328));
  AGCLLVMObject::~AGCLLVMObject(this);
}

{
  *(_QWORD *)this = &off_1E7EBA280;
  *((_QWORD *)this + 4) = &unk_1E7EBA370;
  flatbuffers::FlatBufferBuilder::~FlatBufferBuilder((AGCContextSwitchProgramG13 *)((char *)this + 3328));
  AGCLLVMObject::~AGCLLVMObject(this);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCContextSwitchProgramG13::dumpType(AGCContextSwitchProgramG13 *this)
{
  if (*((_BYTE *)this + 3320))
    return "context_save";
  else
    return "context_restore";
}

uint64_t AGCContextSwitchProgramG13::getShaderType(AGCContextSwitchProgramG13 *this)
{
  if (*((_BYTE *)this + 3320))
    return 10;
  else
    return 11;
}

void AGCContextSwitchProgramG13::getCompilationKeyDescription(AGCContextSwitchProgramG13 *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  size_t v5;
  std::string *v6;
  void **v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  const std::string::value_type *p_p;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  void *v24[2];
  unsigned __int8 v25;
  _DWORD v26[2];
  std::string v27;
  std::string v28;
  void *v29[2];
  char v30;
  void *__p;
  std::string::size_type v32;
  unsigned __int8 v33;
  std::string v34;
  std::string v35;
  std::string v36;

  std::string::basic_string[abi:nn180100]<0>(&v27, (char *)&unk_1C3E4D9BB);
  std::string::basic_string[abi:nn180100]<0>(v24, "save");
  if (*((_BYTE *)this + 3320))
    v4 = "true";
  else
    v4 = "false";
  std::string::basic_string[abi:nn180100]<0>(&v35, v4);
  if ((v25 & 0x80u) == 0)
    v5 = v25;
  else
    v5 = (size_t)v24[1];
  v6 = &v36;
  std::string::basic_string[abi:nn180100]((uint64_t)&v36, v5 + 3);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if (v5)
  {
    if ((v25 & 0x80u) == 0)
      v7 = v24;
    else
      v7 = (void **)v24[0];
    memmove(v6, v7, v5);
  }
  *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 2112032;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v35;
  else
    v8 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  else
    size = v35.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v36, (const std::string::value_type *)v8, size);
  v11 = (std::string::value_type *)v10->__r_.__value_.__r.__words[0];
  v12 = v10->__r_.__value_.__l.__size_;
  v26[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  else
    v34 = v27;
  _agcIndentedLine((void **)&v35.__r_.__value_.__l.__data_, (std::string::value_type *)&v34, 0);
  std::string::basic_string[abi:nn180100]<0>(v29, "{");
  _agcIndentedLine(&__p, (std::string::value_type *)v29, 0);
  if ((v33 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v33 & 0x80u) == 0)
    v15 = v33;
  else
    v15 = v32;
  v16 = std::string::append(&v35, p_p, v15);
  v17 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((char)v33 < 0)
    operator delete(__p);
  if (v30 < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_41;
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_41:
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    v35.__r_.__value_.__l.__size_ = v12;
    LODWORD(v35.__r_.__value_.__r.__words[2]) = v26[0];
    *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v26 + 3);
    *((_BYTE *)&v35.__r_.__value_.__s + 23) = v13;
    v18 = v13;
LABEL_44:
    v28 = v35;
    goto LABEL_45;
  }
  std::string::__init_copy_ctor_external(&v35, v11, v12);
  v18 = SHIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_44;
  std::string::__init_copy_ctor_external(&v28, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_45:
  _agcIndentedLine(&__p, (std::string::value_type *)&v28, 1);
  if ((v33 & 0x80u) == 0)
    v19 = (const std::string::value_type *)&__p;
  else
    v19 = (const std::string::value_type *)__p;
  if ((v33 & 0x80u) == 0)
    v20 = v33;
  else
    v20 = v32;
  std::string::append(&v36, v19, v20);
  if ((char)v33 < 0)
    operator delete(__p);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v18 & 0x80000000) == 0)
      goto LABEL_56;
    goto LABEL_55;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (v18 < 0)
LABEL_55:
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_56:
  std::string::basic_string[abi:nn180100]<0>(&__p, "}");
  _agcIndentedLine((void **)&v35.__r_.__value_.__l.__data_, (std::string::value_type *)&__p, 0);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v36;
  else
    v21 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  else
    v22 = v36.__r_.__value_.__l.__size_;
  v23 = std::string::insert(&v35, 0, (const std::string::value_type *)v21, v22);
  *a2 = *v23;
  v23->__r_.__value_.__r.__words[0] = 0;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if ((char)v33 < 0)
    operator delete(__p);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_69;
    goto LABEL_68;
  }
  operator delete(v36.__r_.__value_.__l.__data_);
  if (v13 < 0)
LABEL_68:
    operator delete(v11);
LABEL_69:
  if ((char)v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

uint64_t AGCContextSwitchProgramG13::constructReply(AGCContextSwitchProgramG13 *this)
{
  return 1;
}

uint64_t AGCLLVMDriverShader::compile(AGCLLVMDriverShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  llvm::GlobalValue *v5;
  const char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  int v33;
  void *__p[2];
  char v35;

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v3 = v2 + 24;
  for (i = *(_QWORD *)(v2 + 32); i != v3; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v5 = (llvm::GlobalValue *)(i - 56);
    else
      v5 = 0;
    if ((llvm::GlobalValue::isDeclaration(v5) & 1) == 0)
    {
      (*(void (**)(char *, llvm::GlobalValue *))(*(_QWORD *)((char *)this
                                                                      + *(_QWORD *)(*(_QWORD *)this - 24))
                                                          + 168))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24), v5);
      break;
    }
  }
  AGCLLVMObject::enableTempRegistersLimit((AGCLLVMDriverShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  v6 = (const char *)(*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24))
                                                       + 56))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  if (dumpShaderToFile(v6))
  {
    v7 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 56))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    printMessage((char **)&AGCPrinter, "------ Start compilation key description for %s shader %u  ------", v8, v9, v10, v11, v12, v13, v7);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 120))(__p);
    if (v35 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    printMessage((char **)&AGCPrinter, "%s", v14, v15, v16, v17, v18, v19, (char)v20);
    if (v35 < 0)
      operator delete(__p[0]);
    v21 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 56))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    printMessage((char **)&AGCPrinter, "------ End compilation key description for %s shader %u  ------", v22, v23, v24, v25, v26, v27, v21);
  }
  v28 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v29 = *((_QWORD *)v28 + 58);
  v30 = *((_QWORD *)v28 + 46);
  if (*((_BYTE *)this + 8))
  {
    __p[0] = (void *)0x10000;
    v31 = AGCLLVMCtx::compile(v29, (uint64_t)v28, v30, 1, 2, __p, 0);
    result = 0;
    if ((v31 & 1) == 0)
      return result;
  }
  else
  {
    __p[0] = (void *)0x10000;
    v33 = AGCLLVMCtx::compile(v29, (uint64_t)v28, v30, 1, 3, __p, 0);
    result = 0;
    if (!v33)
      return result;
  }
  return (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 136))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
}

void AGCLLVMPassthroughVertexShader::~AGCLLVMPassthroughVertexShader(AGCLLVMPassthroughVertexShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShader *)((char *)this + 88));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShader *)((char *)this + 88));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL AGCLLVMPassthroughVertexShader::constructReply(AGCLLVMPassthroughVertexShader *this)
{
  _BOOL8 v2;
  _BOOL8 v3;
  flatbuffers::FlatBufferBuilder *v4;
  __int16 v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int i;
  char *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  char *v29;
  char *v30;
  int v31;
  unsigned int v32;
  int v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  int v40;
  unsigned int v41;
  int v42;
  char *v43;
  char *v44;
  flatbuffers::FlatBufferBuilder *v45;
  int v46;
  const char *v47;
  int v49;
  _BOOL4 v50;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMPassthroughVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  v3 = v2;
  if (v2)
  {
    v50 = v2;
    AGCLLVMObject::validateBackendReply((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 24)));
    v4 = AGCLLVMObject::constructFlatReply((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)));
    v49 = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    for (i = 0; i != 22; ++i)
    {
      v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v11 = v10 + 2472;
      v10[2542] = 1;
      v12 = *((_DWORD *)v10 + 626);
      v13 = *((_DWORD *)v10 + 630);
      v14 = *((_DWORD *)v10 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10 + 2472, 4, 0, 0);
      if (i == 6)
      {
        v15 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v11, 2);
        flatbuffers::FlatBufferBuilder::TrackField(v11, 6, v15);
        v16 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v11, 2);
        flatbuffers::FlatBufferBuilder::TrackField(v11, 8, v16);
        v17 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v11, 2);
        flatbuffers::FlatBufferBuilder::TrackField(v11, 10, v17);
      }
      else
      {
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, 0);
        flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, 0);
        flatbuffers::FlatBufferBuilder::AddElement<signed char>(v11, 10, 0);
      }
      v18 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, (unsigned __int16)v12 - (unsigned __int16)v13 + v14);
      v19 = v18;
      if ((unint64_t)v7 >= v8)
      {
        v20 = (v7 - v6) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          abort();
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v21)
          v21 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v22);
        else
          v23 = 0;
        v24 = (char *)(v22 + 4 * v20);
        *(_DWORD *)v24 = v19;
        v25 = v24 + 4;
        while (v7 != v6)
        {
          v26 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v24 - 1) = v26;
          v24 -= 4;
        }
        v8 = v22 + 4 * v23;
        if (v6)
          operator delete(v6);
        v6 = v24;
        v7 = v25;
      }
      else
      {
        *(_DWORD *)v7 = v18;
        v7 += 4;
      }
    }
    if (v7 == v6)
      v27 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
    else
      v27 = v6;
    v28 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v27, (v7 - v6) >> 2);
    v29 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v30 = v29 + 2472;
    v29[2542] = 1;
    v31 = *((_DWORD *)v29 + 626) - *((_DWORD *)v29 + 630) + *((_DWORD *)v29 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v29 + 2472, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 12, 0);
    v32 = *((_DWORD *)this + 18);
    if (v32 <= 4)
      v32 = 4;
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 14, v32 - 4);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v30, 18, 0);
    v33 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v30, v31);
    v34 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v35 = v34 + 2472;
    v34[2542] = 1;
    v36 = *((_DWORD *)v34 + 626) - *((_DWORD *)v34 + 630) + *((_DWORD *)v34 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v34 + 2472, 18, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35, 4, 0);
    v37 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v35, v36);
    v38 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v39 = v38 + 2472;
    v38[2542] = 1;
    v40 = *((_DWORD *)v38 + 626) - *((_DWORD *)v38 + 630) + *((_DWORD *)v38 + 628);
    v41 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)(v38 + 2472), 1);
    flatbuffers::FlatBufferBuilder::TrackField(v39, 6, v41);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v39, 8, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v39, 10, *((_DWORD *)this + 18));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v39, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v39, 14, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v39, 16, v33);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v39, 18, v37);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v39, 20, 0, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v39, 22, v28);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v39, 26, 0);
    v42 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v39, v40);
    v43 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v44 = v43 + 2472;
    v43[2542] = 1;
    LODWORD(v39) = *((_DWORD *)v43 + 626) - *((_DWORD *)v43 + 630) + *((_DWORD *)v43 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v43 + 2472, v49);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v44, v42);
    v45 = (AGCLLVMPassthroughVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v46 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v44, (__int16)v39);
    flatbuffers::FlatBufferBuilder::Finish(v45, v46, v47);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMPassthroughVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    v3 = v50;
    if (v6)
      operator delete(v6);
  }
  return v3;
}

const char *AGCLLVMPassthroughVertexShader::dumpType(AGCLLVMPassthroughVertexShader *this)
{
  return "passthrough";
}

uint64_t AGCLLVMPassthroughVertexShader::getShaderType(AGCLLVMPassthroughVertexShader *this)
{
  return 12;
}

void AGCLLVMPassthroughVertexShader::getCompilationKeyDescription(AGCLLVMPassthroughVertexShader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  std::string v11;
  std::string v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v9, (char *)&unk_1C3E4D9BB);
  std::string::basic_string[abi:nn180100]<0>(v7, "passthrough_size");
  _agcFieldString<unsigned int>(&v11, (const void **)v7, *((_DWORD *)this + 19));
  std::string::basic_string[abi:nn180100]<0>(__p, "pad_size");
  _agcFieldString<unsigned int>(&v12, (const void **)__p, *((_DWORD *)this + 20));
  _agcGroupWithHeader(a2, (uint64_t)v9, (uint64_t)&v11, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v11 + i * 8 + 24));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

_QWORD *AGCLLVMPassthroughVertexShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.passthrough_vertex");
}

uint64_t `virtual thunk to'AGCLLVMDriverShader::compile(AGCLLVMDriverShader *this)
{
  return AGCLLVMDriverShader::compile((AGCLLVMDriverShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void `virtual thunk to'AGCLLVMPassthroughVertexShader::~AGCLLVMPassthroughVertexShader(AGCLLVMPassthroughVertexShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                 + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                 + 88));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                 + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                 + 88));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMPassthroughVertexShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.passthrough_vertex");
}

const char *`virtual thunk to'AGCLLVMPassthroughVertexShader::dumpType(AGCLLVMPassthroughVertexShader *this)
{
  return "passthrough";
}

uint64_t `virtual thunk to'AGCLLVMPassthroughVertexShader::getShaderType(AGCLLVMPassthroughVertexShader *this)
{
  return 12;
}

void `virtual thunk to'AGCLLVMPassthroughVertexShader::getCompilationKeyDescription(AGCLLVMPassthroughVertexShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMPassthroughVertexShader::getCompilationKeyDescription((AGCLLVMPassthroughVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMPassthroughVertexShader::constructReply(AGCLLVMPassthroughVertexShader *this)
{
  return AGCLLVMPassthroughVertexShader::constructReply((AGCLLVMPassthroughVertexShader *)((char *)this
                                                                                         + *(_QWORD *)(*(_QWORD *)this - 152)));
}

void AGCLLVMPassthroughVertexShaderWithVertexFetch::~AGCLLVMPassthroughVertexShaderWithVertexFetch(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShaderWithVertexFetch *)((char *)this + 96));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShaderWithVertexFetch *)((char *)this + 96));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL AGCLLVMDriverVertexFetchShader::constructReply(AGCLLVMDriverVertexFetchShader *this)
{
  _BOOL8 v2;
  _BOOL8 v3;
  flatbuffers::FlatBufferBuilder *v4;
  __int16 v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int i;
  char *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  char *v27;
  char *v28;
  int v29;
  _DWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  int v53;
  int v54;
  char *v55;
  int v56;
  unsigned int v57;
  int v58;
  char *v59;
  char *v60;
  int v61;
  int v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  char *v67;
  int v68;
  int v69;
  char *v70;
  char *v71;
  int v72;
  int v73;
  char *v74;
  char *v75;
  flatbuffers::FlatBufferBuilder *v76;
  int v77;
  const char *v78;
  void *__p;
  int v81;
  int v82;
  _BOOL4 v83;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMDriverVertexFetchShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  v3 = v2;
  if (v2)
  {
    v83 = v2;
    AGCLLVMObject::validateBackendReply((AGCLLVMDriverVertexFetchShader *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 24)));
    v4 = AGCLLVMObject::constructFlatReply((AGCLLVMDriverVertexFetchShader *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)));
    v82 = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    for (i = 0; i != 22; ++i)
    {
      v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v11 = v10 + 2472;
      v10[2542] = 1;
      v12 = *((_DWORD *)v10 + 626);
      v13 = *((_DWORD *)v10 + 630);
      v14 = *((_DWORD *)v10 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10 + 2472, 4, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, 0);
      if (i == 6)
      {
        v15 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v11, 2);
        flatbuffers::FlatBufferBuilder::TrackField(v11, 10, v15);
      }
      else
      {
        flatbuffers::FlatBufferBuilder::AddElement<signed char>(v11, 10, 0);
      }
      v16 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, (unsigned __int16)v12 - (unsigned __int16)v13 + v14);
      v17 = v16;
      if ((unint64_t)v7 >= v8)
      {
        v18 = (v7 - v6) >> 2;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62)
          goto LABEL_58;
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v19)
          v19 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v20 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v20);
        else
          v21 = 0;
        v22 = (char *)(v20 + 4 * v18);
        *(_DWORD *)v22 = v17;
        v23 = v22 + 4;
        while (v7 != v6)
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v22 - 1) = v24;
          v22 -= 4;
        }
        v8 = v20 + 4 * v21;
        if (v6)
          operator delete(v6);
        v6 = v22;
        v7 = v23;
      }
      else
      {
        *(_DWORD *)v7 = v16;
        v7 += 4;
      }
    }
    if (v7 == v6)
      v25 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
    else
      v25 = v6;
    v26 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v25, (v7 - v6) >> 2);
    v27 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v28 = v27 + 2472;
    v27[2542] = 1;
    v29 = *((_DWORD *)v27 + 626) - *((_DWORD *)v27 + 630) + *((_DWORD *)v27 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v27 + 2472, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v28, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v28, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v28, 10, 0);
    LODWORD(v28) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v28, v29);
    v30 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(1uLL);
    *v30 = (_DWORD)v28;
    v31 = *(_QWORD *)this;
    if (*((_DWORD *)this + 19) == -1)
    {
      v37 = 0;
      v40 = 0;
      v39 = 0;
    }
    else
    {
      v32 = (char *)this + *(_QWORD *)(v31 - 24);
      v33 = v32 + 2472;
      v32[2542] = 1;
      v34 = *((_DWORD *)v32 + 626) - *((_DWORD *)v32 + 630) + *((_DWORD *)v32 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v32 + 2472, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v33, 6, 0);
      v35 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v33, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v33, 8, v35);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v33, 12, *((_DWORD *)this + 19));
      v36 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v33, 4);
      flatbuffers::FlatBufferBuilder::TrackField(v33, 10, v36);
      LODWORD(v33) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v33, v34);
      v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(1uLL);
      v39 = &v37[4 * v38];
      *(_DWORD *)v37 = (_DWORD)v33;
      v40 = v37 + 4;
      v31 = *(_QWORD *)this;
    }
    v81 = v26;
    if (*((_DWORD *)this + 20) != -1)
    {
      v41 = (char *)this + *(_QWORD *)(v31 - 24);
      v42 = v41 + 2472;
      v41[2542] = 1;
      v43 = *((_DWORD *)v41 + 626) - *((_DWORD *)v41 + 630) + *((_DWORD *)v41 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v41 + 2472, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 6, 0);
      v44 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v42, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v42, 8, v44);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 12, *((_DWORD *)this + 20));
      v45 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v42, 2);
      flatbuffers::FlatBufferBuilder::TrackField(v42, 10, v45);
      v46 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v42, v43);
      v47 = v46;
      if (v40 >= v39)
      {
        v49 = (v40 - v37) >> 2;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62)
LABEL_58:
          abort();
        if ((v39 - v37) >> 1 > v50)
          v50 = (v39 - v37) >> 1;
        if ((unint64_t)(v39 - v37) >= 0x7FFFFFFFFFFFFFFCLL)
          v51 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v51 = v50;
        if (v51)
          v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v51);
        v52 = (char *)(v51 + 4 * v49);
        *(_DWORD *)v52 = v47;
        v48 = v52 + 4;
        while (v40 != v37)
        {
          v53 = *((_DWORD *)v40 - 1);
          v40 -= 4;
          *((_DWORD *)v52 - 1) = v53;
          v52 -= 4;
        }
        if (v37)
          operator delete(v37);
        v37 = v52;
      }
      else
      {
        *(_DWORD *)v40 = v46;
        v48 = v40 + 4;
      }
      v31 = *(_QWORD *)this;
      v40 = v48;
    }
    __p = v30;
    v54 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(v31 - 24) + 2472, (uint64_t)v30, 1);
    if (v40 == v37)
      v55 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t;
    else
      v55 = v37;
    v56 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v55, (v40 - v37) >> 2);
    v57 = *((_DWORD *)this + 18) - *((unsigned __int8 *)this + 84);
    if (v57 <= 4)
      v57 = 4;
    v58 = v57 - 4;
    v59 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v60 = v59 + 2472;
    v59[2542] = 1;
    v61 = *((_DWORD *)v59 + 626) - *((_DWORD *)v59 + 630) + *((_DWORD *)v59 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v59 + 2472, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 14, v58);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v60, 18, 0);
    v62 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v60, v61);
    v63 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v64 = v63 + 2472;
    v63[2542] = 1;
    v65 = *((_DWORD *)v63 + 626) - *((_DWORD *)v63 + 630) + *((_DWORD *)v63 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v63 + 2472, 18, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v64, 4, 0);
    LODWORD(v64) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v64, v65);
    v66 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v67 = v66 + 2472;
    v66[2542] = 1;
    v68 = *((_DWORD *)v66 + 626) - *((_DWORD *)v66 + 630) + *((_DWORD *)v66 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v66 + 2472, v54);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v67, v56);
    v69 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v67, v68);
    v70 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v71 = v70 + 2472;
    v70[2542] = 1;
    v72 = *((_DWORD *)v70 + 626) - *((_DWORD *)v70 + 630) + *((_DWORD *)v70 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v70 + 2472, v69);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v71, 6, *((_BYTE *)this + 85) != 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v71, 8, *((_BYTE *)this + 84) != 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v71, 10, *((_DWORD *)this + 18));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v71, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v71, 14, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v71, 16, v62);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v71, 18, (int)v64);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v71, 20, 0, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v71, 22, v81);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v71, 26, 0);
    v73 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v71, v72);
    v74 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v75 = v74 + 2472;
    v74[2542] = 1;
    LODWORD(v67) = *((_DWORD *)v74 + 626) - *((_DWORD *)v74 + 630) + *((_DWORD *)v74 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v74 + 2472, v82);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v75, v73);
    v76 = (AGCLLVMDriverVertexFetchShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v77 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v75, (__int16)v67);
    flatbuffers::FlatBufferBuilder::Finish(v76, v77, v78);
    if (v37)
      operator delete(v37);
    operator delete(__p);
    v3 = v83;
    if (v6)
      operator delete(v6);
  }
  return v3;
}

const char *AGCLLVMPassthroughVertexShaderWithVertexFetch::dumpType(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  return "passthrough_vertexfetch";
}

uint64_t AGCLLVMPassthroughVertexShaderWithVertexFetch::getShaderType(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  return 13;
}

void AGCLLVMPassthroughVertexShaderWithVertexFetch::getCompilationKeyDescription(AGCLLVMPassthroughVertexShaderWithVertexFetch *this@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  std::string v11;
  std::string v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v9, (char *)&unk_1C3E4D9BB);
  std::string::basic_string[abi:nn180100]<0>(v7, "passthrough_size");
  _agcFieldString<unsigned int>(&v11, (const void **)v7, *((_DWORD *)this + 22));
  std::string::basic_string[abi:nn180100]<0>(__p, "pad_size");
  _agcFieldString<unsigned int>(&v12, (const void **)__p, *((_DWORD *)this + 23));
  _agcGroupWithHeader(a2, (uint64_t)v9, (uint64_t)&v11, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v12.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v11 + i * 8 + 24));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
}

void `virtual thunk to'AGCLLVMPassthroughVertexShaderWithVertexFetch::~AGCLLVMPassthroughVertexShaderWithVertexFetch(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShaderWithVertexFetch *)((char *)this
                                                                                + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                                + 96));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMPassthroughVertexShaderWithVertexFetch *)((char *)this
                                                                                + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                                + 96));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *`virtual thunk to'AGCLLVMPassthroughVertexShaderWithVertexFetch::dumpType(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  return "passthrough_vertexfetch";
}

uint64_t `virtual thunk to'AGCLLVMPassthroughVertexShaderWithVertexFetch::getShaderType(AGCLLVMPassthroughVertexShaderWithVertexFetch *this)
{
  return 13;
}

void `virtual thunk to'AGCLLVMPassthroughVertexShaderWithVertexFetch::getCompilationKeyDescription(AGCLLVMPassthroughVertexShaderWithVertexFetch *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMPassthroughVertexShaderWithVertexFetch::getCompilationKeyDescription((AGCLLVMPassthroughVertexShaderWithVertexFetch *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMDriverVertexFetchShader::constructReply(AGCLLVMDriverVertexFetchShader *this)
{
  return AGCLLVMDriverVertexFetchShader::constructReply((AGCLLVMDriverVertexFetchShader *)((char *)this
                                                                                         + *(_QWORD *)(*(_QWORD *)this - 152)));
}

void AGCLLVMTileDispatchVertexShaderPoint::~AGCLLVMTileDispatchVertexShaderPoint(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderPoint *)((char *)this + 88));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderPoint *)((char *)this + 88));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMTileDispatchVertexShaderPoint::dumpType(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  return "tile_dispatch_vertex_point";
}

uint64_t AGCLLVMTileDispatchVertexShaderPoint::getShaderType(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  return 14;
}

_QWORD *AGCLLVMTileDispatchVertexShaderPoint::getCompilationKeyDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

_QWORD *AGCLLVMTileDispatchVertexShaderPoint::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.tile_dispatch_vertex_point");
}

void `virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::~AGCLLVMTileDispatchVertexShaderPoint(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderPoint *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                       + 88));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderPoint *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                       + 88));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.tile_dispatch_vertex_point");
}

const char *`virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::dumpType(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  return "tile_dispatch_vertex_point";
}

uint64_t `virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::getShaderType(AGCLLVMTileDispatchVertexShaderPoint *this)
{
  return 14;
}

_QWORD *`virtual thunk to'AGCLLVMTileDispatchVertexShaderPoint::getCompilationKeyDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

void AGCLLVMTileDispatchVertexShaderRect::~AGCLLVMTileDispatchVertexShaderRect(AGCLLVMTileDispatchVertexShaderRect *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderRect *)((char *)this + 96));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderRect *)((char *)this + 96));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL AGCLLVMTileDispatchVertexShaderRect::constructReply(AGCLLVMTileDispatchVertexShaderRect *this)
{
  _BOOL8 v2;
  char *v3;
  char *v4;
  int v5;
  unsigned int v6;
  int v7;
  char *v8;
  flatbuffers::FlatBufferBuilder *v9;
  int v10;
  int v11;
  const char *v12;

  v2 = AGCLLVMDriverVertexFetchShader::constructReply(this);
  if (v2)
  {
    v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v4 = v3 + 2568;
    v3[2638] = 1;
    v5 = *((_DWORD *)v3 + 650) - *((_DWORD *)v3 + 654) + *((_DWORD *)v3 + 652);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v3 + 2568, 14, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 12, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 10, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 8, 0, 0);
    v6 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v4, 1);
    flatbuffers::FlatBufferBuilder::TrackField(v4, 6, v6);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v4, 4, 0, 0);
    v7 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v4, v5);
    v8 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v9 = (flatbuffers::FlatBufferBuilder *)(v8 + 2568);
    v8[2638] = 1;
    v10 = *((_DWORD *)v8 + 650) - *((_DWORD *)v8 + 654) + *((_DWORD *)v8 + 652);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v8 + 2568, v7);
    v11 = flatbuffers::FlatBufferBuilder::EndTable(v9, v10);
    flatbuffers::FlatBufferBuilder::Finish((AGCLLVMTileDispatchVertexShaderRect *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568), v11, v12);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG11::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMTileDispatchVertexShaderRect *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
  }
  return v2;
}

char *AGCLLVMTileDispatchVertexShaderRect::dumpType(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return AGCLLVMTileDispatchVertexShaderRect::dumpType(void)const::types[*((unsigned int *)this + 22)];
}

uint64_t AGCLLVMTileDispatchVertexShaderRect::getShaderType(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return 14;
}

_QWORD *AGCLLVMTileDispatchVertexShaderRect::getCompilationKeyDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

_QWORD *AGCLLVMTileDispatchVertexShaderRect::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.tile_dispatch_vertex_rect");
}

void `virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::~AGCLLVMTileDispatchVertexShaderRect(AGCLLVMTileDispatchVertexShaderRect *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderRect *)((char *)this
                                                                      + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                      + 96));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTileDispatchVertexShaderRect *)((char *)this
                                                                      + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                      + 96));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.tile_dispatch_vertex_rect");
}

char *`virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::dumpType(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return AGCLLVMTileDispatchVertexShaderRect::dumpType(void)const::types[*(unsigned int *)((char *)this
                                                                                         + *(_QWORD *)(*(_QWORD *)this - 72)
                                                                                         + 88)];
}

uint64_t `virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::getShaderType(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return 14;
}

_QWORD *`virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::getCompilationKeyDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

BOOL `virtual thunk to'AGCLLVMTileDispatchVertexShaderRect::constructReply(AGCLLVMTileDispatchVertexShaderRect *this)
{
  return AGCLLVMTileDispatchVertexShaderRect::constructReply((AGCLLVMTileDispatchVertexShaderRect *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 152)));
}

void AGCLLVMClearVertexDataShader::~AGCLLVMClearVertexDataShader(AGCLLVMClearVertexDataShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + 80));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + 80));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL AGCLLVMClearVertexDataShader::constructReply(AGCLLVMClearVertexDataShader *this)
{
  _BOOL8 v2;
  _BOOL8 v3;
  flatbuffers::FlatBufferBuilder *v4;
  __int16 v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int i;
  char *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  char *v37;
  int v38;
  unsigned int v39;
  int v40;
  char *v41;
  char *v42;
  int v43;
  int v44;
  char *v45;
  flatbuffers::FlatBufferBuilder *v46;
  int v47;
  int v48;
  char *v49;
  char *v50;
  unsigned int v51;
  int v52;
  char *v53;
  char *v54;
  flatbuffers::FlatBufferBuilder *v55;
  int v56;
  const char *v57;
  int v59;
  _BOOL4 v60;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMClearVertexDataShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  v3 = v2;
  if (v2)
  {
    v60 = v2;
    AGCLLVMObject::validateBackendReply((AGCLLVMClearVertexDataShader *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
    v4 = AGCLLVMObject::constructFlatReply((AGCLLVMClearVertexDataShader *)((char *)this
                                                                          + *(_QWORD *)(*(_QWORD *)this - 24)));
    v59 = flatbuffers::FlatBufferBuilder::EndTable(v4, v5);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    for (i = 0; i != 22; ++i)
    {
      v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v11 = v10 + 2472;
      v10[2542] = 1;
      v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10 + 2472, 4, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, 0);
      flatbuffers::FlatBufferBuilder::AddElement<signed char>(v11, 10, 0);
      v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, v12);
      v14 = v13;
      if ((unint64_t)v7 >= v8)
      {
        v15 = (v7 - v6) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          abort();
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v16)
          v16 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v17);
        else
          v18 = 0;
        v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)v19 = v14;
        v20 = v19 + 4;
        while (v7 != v6)
        {
          v21 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        v8 = v17 + 4 * v18;
        if (v6)
          operator delete(v6);
        v6 = v19;
        v7 = v20;
      }
      else
      {
        *(_DWORD *)v7 = v13;
        v7 += 4;
      }
    }
    if (v7 == v6)
      v22 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
    else
      v22 = v6;
    v23 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v22, (v7 - v6) >> 2);
    v24 = *(_QWORD *)this;
    if (*((_DWORD *)this + 19) == -1)
    {
      v31 = 0;
      v32 = 0;
    }
    else
    {
      v25 = (char *)this + *(_QWORD *)(v24 - 24);
      v26 = v25 + 2472;
      v25[2542] = 1;
      v27 = *((_DWORD *)v25 + 626) - *((_DWORD *)v25 + 630) + *((_DWORD *)v25 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v25 + 2472, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v26, 6, 0);
      v28 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v26, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v26, 8, v28);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v26, 12, *((_DWORD *)this + 19));
      v29 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v26, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v26, 10, v29);
      v30 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v26, v27);
      v31 = (char *)operator new(4uLL);
      *(_DWORD *)v31 = v30;
      v32 = v31 + 4;
      v24 = *(_QWORD *)this;
    }
    v33 = v32 - v31;
    if (v33)
      v34 = v31;
    else
      v34 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t;
    v35 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(v24 - 24) + 2472, (uint64_t)v34, v33 >> 2);
    v36 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v37 = v36 + 2472;
    v36[2542] = 1;
    v38 = *((_DWORD *)v36 + 626) - *((_DWORD *)v36 + 630) + *((_DWORD *)v36 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36 + 2472, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 12, 0);
    v39 = *((_DWORD *)this + 18);
    if (v39 <= 4)
      v39 = 4;
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 14, v39 - 4);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v37, 18, 0);
    v40 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v37, v38);
    v41 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v42 = v41 + 2472;
    v41[2542] = 1;
    v43 = *((_DWORD *)v41 + 626) - *((_DWORD *)v41 + 630) + *((_DWORD *)v41 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v41 + 2472, 18, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v42, 4, 0);
    v44 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v42, v43);
    v45 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v46 = (flatbuffers::FlatBufferBuilder *)(v45 + 2472);
    v45[2542] = 1;
    v47 = *((_DWORD *)v45 + 626) - *((_DWORD *)v45 + 630) + *((_DWORD *)v45 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v45 + 2472, v35);
    v48 = flatbuffers::FlatBufferBuilder::EndTable(v46, v47);
    v49 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v50 = v49 + 2472;
    v49[2542] = 1;
    LODWORD(v46) = *((_DWORD *)v49 + 626) - *((_DWORD *)v49 + 630) + *((_DWORD *)v49 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v49 + 2472, v48);
    v51 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v50, 1);
    flatbuffers::FlatBufferBuilder::TrackField(v50, 6, v51);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v50, 8, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v50, 10, *((_DWORD *)this + 18));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v50, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v50, 14, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v50, 16, v40);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v50, 18, v44);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v50, 20, 0, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v50, 22, v23);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v50, 26, 0);
    v52 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v50, (__int16)v46);
    v53 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v54 = v53 + 2472;
    v53[2542] = 1;
    LODWORD(v50) = *((_DWORD *)v53 + 626) - *((_DWORD *)v53 + 630) + *((_DWORD *)v53 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v53 + 2472, v59);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v54, v52);
    v55 = (AGCLLVMClearVertexDataShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v56 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v54, (__int16)v50);
    flatbuffers::FlatBufferBuilder::Finish(v55, v56, v57);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMClearVertexDataShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    if (v31)
      operator delete(v31);
    v3 = v60;
    if (v6)
      operator delete(v6);
  }
  return v3;
}

const char *AGCLLVMClearVertexDataShader::dumpType(AGCLLVMClearVertexDataShader *this)
{
  return "clearvertex";
}

uint64_t AGCLLVMClearVertexDataShader::getShaderType(AGCLLVMClearVertexDataShader *this)
{
  return 15;
}

void AGCLLVMClearVertexDataShader::getCompilationKeyDescription(AGCLLVMClearVertexDataShader *this@<X0>, std::string *a2@<X8>)
{
  void *v4[2];
  char v5;
  void *v6[2];
  char v7;
  std::string __p;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v6, (char *)&unk_1C3E4D9BB);
  std::string::basic_string[abi:nn180100]<0>(v4, "vertex_stride");
  _agcFieldString<unsigned int>(&__p, (const void **)v4, *((_DWORD *)this + 18));
  _agcGroupWithHeader(a2, (uint64_t)v6, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

_QWORD *AGCLLVMClearVertexDataShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.clearvertex");
}

void `virtual thunk to'AGCLLVMClearVertexDataShader::~AGCLLVMClearVertexDataShader(AGCLLVMClearVertexDataShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 80));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 80));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMClearVertexDataShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.clearvertex");
}

const char *`virtual thunk to'AGCLLVMClearVertexDataShader::dumpType(AGCLLVMClearVertexDataShader *this)
{
  return "clearvertex";
}

uint64_t `virtual thunk to'AGCLLVMClearVertexDataShader::getShaderType(AGCLLVMClearVertexDataShader *this)
{
  return 15;
}

void `virtual thunk to'AGCLLVMClearVertexDataShader::getCompilationKeyDescription(AGCLLVMClearVertexDataShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMClearVertexDataShader::getCompilationKeyDescription((AGCLLVMClearVertexDataShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMClearVertexDataShader::constructReply(AGCLLVMClearVertexDataShader *this)
{
  return AGCLLVMClearVertexDataShader::constructReply((AGCLLVMClearVertexDataShader *)((char *)this
                                                                                     + *(_QWORD *)(*(_QWORD *)this
                                                                                                 - 152)));
}

void AGCLLVMTABlitVertexShader::~AGCLLVMTABlitVertexShader(AGCLLVMTABlitVertexShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTABlitVertexShader *)((char *)this + 104));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTABlitVertexShader *)((char *)this + 104));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMTABlitVertexShader::constructReply(AGCLLVMTABlitVertexShader *this)
{
  uint64_t result;
  char *v3;
  char *v4;
  __int16 v5;
  char *v6;
  char *v7;
  unint64_t v8;
  int i;
  char *v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  int v47;
  int v48;
  char *v49;
  int v50;
  char *v51;
  char *v52;
  int v53;
  char *v54;
  char *v55;
  int v56;
  char *v57;
  char *v58;
  int v59;
  int v60;
  char *v61;
  char *v62;
  int v63;
  char *v64;
  char *v65;
  flatbuffers::FlatBufferBuilder *v66;
  int v67;
  const char *v68;
  int v69;
  int v70;
  unsigned int v71;
  char *v72[2];

  result = AGCDeserializedReply::deserialize((AGCLLVMTABlitVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if ((_DWORD)result)
  {
    v71 = result;
    AGCLLVMObject::validateBackendReply((AGCLLVMTABlitVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = (char *)AGCLLVMObject::constructFlatReply((AGCLLVMTABlitVertexShader *)((char *)this
                                                                               + *(_QWORD *)(*(_QWORD *)this - 24)));
    v5 = (__int16)v4;
    v72[0] = v3;
    v72[1] = v4;
    AGCLLVMDriverShader::setGatherMasks((char *)this, v72);
    v70 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v3, v5);
    v6 = 0;
    v7 = 0;
    v8 = 0;
    for (i = 0; i != 22; ++i)
    {
      v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v11 = v10 + 2472;
      v10[2542] = 1;
      v12 = *((_DWORD *)v10 + 626) - *((_DWORD *)v10 + 630) + *((_DWORD *)v10 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v10 + 2472, 4, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 6, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v11, 8, 0);
      flatbuffers::FlatBufferBuilder::AddElement<signed char>(v11, 10, 0);
      v13 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v11, v12);
      v14 = v13;
      if ((unint64_t)v7 >= v8)
      {
        v15 = (v7 - v6) >> 2;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          goto LABEL_54;
        if ((uint64_t)(v8 - (_QWORD)v6) >> 1 > v16)
          v16 = (uint64_t)(v8 - (_QWORD)v6) >> 1;
        if (v8 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v17);
        else
          v18 = 0;
        v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)v19 = v14;
        v20 = v19 + 4;
        while (v7 != v6)
        {
          v21 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        v8 = v17 + 4 * v18;
        if (v6)
          operator delete(v6);
        v6 = v19;
        v7 = v20;
      }
      else
      {
        *(_DWORD *)v7 = v13;
        v7 += 4;
      }
    }
    if (v7 == v6)
      v22 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexShaderOutIterator>> const&)::t;
    else
      v22 = v6;
    v23 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v22, (v7 - v6) >> 2);
    v24 = *(_QWORD *)this;
    if (*((_DWORD *)this + 22) == -1)
    {
      v31 = 0;
      v34 = 0;
      v33 = 0;
    }
    else
    {
      v25 = (char *)this + *(_QWORD *)(v24 - 24);
      v26 = v25 + 2472;
      v25[2542] = 1;
      v27 = *((_DWORD *)v25 + 626) - *((_DWORD *)v25 + 630) + *((_DWORD *)v25 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v25 + 2472, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v26, 6, 0);
      v28 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v26, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v26, 8, v28);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v26, 12, *((_DWORD *)this + 22));
      v29 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v26, 4);
      flatbuffers::FlatBufferBuilder::TrackField(v26, 10, v29);
      v30 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v26, v27);
      v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(1uLL);
      v33 = &v31[4 * v32];
      *(_DWORD *)v31 = v30;
      v34 = v31 + 4;
      v24 = *(_QWORD *)this;
    }
    v69 = v23;
    if (*((_DWORD *)this + 23) != -1)
    {
      v35 = (char *)this + *(_QWORD *)(v24 - 24);
      v36 = v35 + 2472;
      v35[2542] = 1;
      v37 = *((_DWORD *)v35 + 626) - *((_DWORD *)v35 + 630) + *((_DWORD *)v35 + 628);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v35 + 2472, 4, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 6, 0);
      v38 = flatbuffers::FlatBufferBuilder::PushElement<unsigned int>((uint64_t)v36, 3);
      flatbuffers::FlatBufferBuilder::TrackField(v36, 8, v38);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v36, 12, *((_DWORD *)this + 23));
      v39 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v36, 2);
      flatbuffers::FlatBufferBuilder::TrackField(v36, 10, v39);
      v40 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v36, v37);
      v41 = v40;
      if (v34 >= v33)
      {
        v43 = (v34 - v31) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
LABEL_54:
          abort();
        if ((v33 - v31) >> 1 > v44)
          v44 = (v33 - v31) >> 1;
        if ((unint64_t)(v33 - v31) >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        if (v45)
          v45 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v45);
        v46 = (char *)(v45 + 4 * v43);
        *(_DWORD *)v46 = v41;
        v42 = v46 + 4;
        while (v34 != v31)
        {
          v47 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *((_DWORD *)v46 - 1) = v47;
          v46 -= 4;
        }
        if (v31)
          operator delete(v31);
        v31 = v46;
      }
      else
      {
        *(_DWORD *)v34 = v40;
        v42 = v34 + 4;
      }
      v24 = *(_QWORD *)this;
      v34 = v42;
    }
    v48 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(v24 - 24) + 2472, (uint64_t)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexAttribData>> const&)::t, 0);
    if (v34 == v31)
      v49 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>> const&)::t;
    else
      v49 = v31;
    v50 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v49, (v34 - v31) >> 2);
    v51 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v52 = v51 + 2472;
    v51[2542] = 1;
    v53 = *((_DWORD *)v51 + 626) - *((_DWORD *)v51 + 630) + *((_DWORD *)v51 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v51 + 2472, 4, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v52, 18, 0);
    LODWORD(v52) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v52, v53);
    v54 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v55 = v54 + 2472;
    v54[2542] = 1;
    v56 = *((_DWORD *)v54 + 626) - *((_DWORD *)v54 + 630) + *((_DWORD *)v54 + 628);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v54 + 2472, 18, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 16, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 14, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 10, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 8, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 6, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v55, 4, 0);
    LODWORD(v55) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v55, v56);
    v57 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v58 = v57 + 2472;
    v57[2542] = 1;
    v59 = *((_DWORD *)v57 + 626) - *((_DWORD *)v57 + 630) + *((_DWORD *)v57 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v57 + 2472, v48);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v58, v50);
    v60 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v58, v59);
    v61 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v62 = v61 + 2472;
    v61[2542] = 1;
    v63 = *((_DWORD *)v61 + 626) - *((_DWORD *)v61 + 630) + *((_DWORD *)v61 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v61 + 2472, v60);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v62, 6, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v62, 8, *((_BYTE *)this + 100) != 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v62, 10, *((_DWORD *)this + 24));
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v62, 12, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v62, 14, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v62, 16, (int)v52);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v62, 18, (int)v55);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v62, 20, 0, 0);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<unsigned char>>(v62, 22, v69);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v62, 26, 0);
    LODWORD(v58) = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v62, v63);
    v64 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v65 = v64 + 2472;
    v64[2542] = 1;
    LODWORD(v62) = *((_DWORD *)v64 + 626) - *((_DWORD *)v64 + 630) + *((_DWORD *)v64 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v64 + 2472, v70);
    flatbuffers::FlatBufferBuilder::AddOffset<flatbuffers::Vector<flatbuffers::Offset<AGCCodeTranslator::VertexBuiltinData>>>(v65, (int)v58);
    v66 = (AGCLLVMTABlitVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v67 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v65, (__int16)v62);
    flatbuffers::FlatBufferBuilder::Finish(v66, v67, v68);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMTABlitVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    if (v31)
      operator delete(v31);
    if (v6)
      operator delete(v6);
    return v71;
  }
  return result;
}

const char *AGCLLVMTABlitVertexShader::dumpType(AGCLLVMTABlitVertexShader *this)
{
  return "blitTA";
}

uint64_t AGCLLVMTABlitVertexShader::getShaderType(AGCLLVMTABlitVertexShader *this)
{
  return 16;
}

void AGCLLVMTABlitVertexShader::getCompilationKeyDescription(AGCLLVMTABlitVertexShader *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (_DWORD *)*((_QWORD *)this + 10);
  std::string::basic_string[abi:nn180100]<0>(v21, "AGCTABlitState");
  std::string::basic_string[abi:nn180100]<0>(v19, "blitType");
  _agcFieldString<char const*>(&v23, (const void **)v19, _AGCTABlitTypeStrings[*v3 & 7]);
  std::string::basic_string[abi:nn180100]<0>(v17, "primitiveSizePOT");
  _agcFieldString<unsigned int>(&v24, (const void **)v17, (*v3 >> 8) & 7);
  std::string::basic_string[abi:nn180100]<0>(v15, "primitiveCount");
  _agcFieldString<unsigned int>(&v25, (const void **)v15, (*v3 >> 11));
  std::string::basic_string[abi:nn180100]<0>(v13, "loopCount");
  _agcFieldString<unsigned int>(&v26, (const void **)v13, (*v3 >> 19) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v11, "sampleCountPOT");
  _agcFieldString<unsigned int>(&v27, (const void **)v11, (*v3 >> 23) & 3);
  std::string::basic_string[abi:nn180100]<0>(v9, "regionOffset");
  _agcFieldString<unsigned int>(&v28, (const void **)v9, (*v3 >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "blitTextureFormat");
  _agcFieldString<unsigned int>(&v29, (const void **)v7, *v3 >> 3);
  std::string::basic_string[abi:nn180100]<0>(__p, "unused");
  _agcFieldString<unsigned int>(&v30, (const void **)__p, *v3 >> 28);
  _agcGroupWithHeader(a2, (uint64_t)v21, (uint64_t)&v23, 8);
  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v30.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v22 < 0)
    operator delete(v21[0]);
}

_QWORD *AGCLLVMTABlitVertexShader::wrapperName@<X0>(AGCLLVMTABlitVertexShader *this@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, AGCLLVMTABlitVertexShader::wrapperName(void)const::names[**((_DWORD **)this + 10) & 7]);
}

void `virtual thunk to'AGCLLVMTABlitVertexShader::~AGCLLVMTABlitVertexShader(AGCLLVMTABlitVertexShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTABlitVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 104));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTABlitVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 104));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMTABlitVertexShader::wrapperName@<X0>(AGCLLVMTABlitVertexShader *this@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, AGCLLVMTABlitVertexShader::wrapperName(void)const::names[**(_DWORD **)((char *)this+ *(_QWORD *)(*(_QWORD *)this - 64)+ 80) & 7]);
}

const char *`virtual thunk to'AGCLLVMTABlitVertexShader::dumpType(AGCLLVMTABlitVertexShader *this)
{
  return "blitTA";
}

uint64_t `virtual thunk to'AGCLLVMTABlitVertexShader::getShaderType(AGCLLVMTABlitVertexShader *this)
{
  return 16;
}

void `virtual thunk to'AGCLLVMTABlitVertexShader::getCompilationKeyDescription(AGCLLVMTABlitVertexShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMTABlitVertexShader::getCompilationKeyDescription((AGCLLVMTABlitVertexShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

uint64_t `virtual thunk to'AGCLLVMTABlitVertexShader::constructReply(AGCLLVMTABlitVertexShader *this)
{
  return AGCLLVMTABlitVertexShader::constructReply((AGCLLVMTABlitVertexShader *)((char *)this
                                                                               + *(_QWORD *)(*(_QWORD *)this - 152)));
}

char *AGCLLVMDriverShader::setGatherMasks(char *result, char **a2)
{
  char *v3;

  if (*(_DWORD *)(*(_QWORD *)&result[*(_QWORD *)(*(_QWORD *)result - 24) + 400] + 1780))
  {
    v3 = result;
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(*a2, 22, *((_QWORD *)result + 6), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(*a2, 24, 0, 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(*a2, 26, *((_QWORD *)v3 + 7), 0);
    flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(*a2, 28, 0, 0);
    return flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(*a2, 30, *((_QWORD *)v3 + 8), 0);
  }
  return result;
}

void AGCLLVMClearFragmentShader::~AGCLLVMClearFragmentShader(AGCLLVMClearFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + 696));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + 696));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL AGCLLVMDriverFragmentShader::constructReply(AGCLLVMDriverFragmentShader *this)
{
  _BOOL8 v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  int v6;
  char *v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  flatbuffers::FlatBufferBuilder *v11;
  __int16 v12;
  int v13;
  char *v14;
  char *v15;
  int v16;
  flatbuffers::FlatBufferBuilder *v17;
  int v18;
  const char *v19;
  char *v21;
  uint64_t v22;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMDriverFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMDriverFragmentShader *)((char *)this
                                                                      + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = *(_QWORD *)(*(_QWORD *)this - 24);
    if (*(_BYTE *)(*(_QWORD *)((char *)this + v3 + 400) + 1749))
    {
      v21 = (char *)0x8000000000008000;
      v22 = 0;
      v4 = AIRConstSampler::constructFlatReply((AIRConstSampler *)&v21, (AGCLLVMDriverFragmentShader *)((char *)this + v3 + 2472));
      v5 = operator new(4uLL);
      *v5 = v4;
      v6 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v5, 1);
      operator delete(v5);
      v3 = *(_QWORD *)(*(_QWORD *)this - 24);
    }
    else
    {
      v6 = 0;
    }
    v7 = (char *)AGCLLVMObject::constructFlatReply((AGCLLVMDriverFragmentShader *)((char *)this + v3));
    v9 = v8;
    v21 = v7;
    v22 = v8;
    AGCLLVMDriverShader::setGatherMasks((char *)this, &v21);
    if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1749))
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v7, v6);
    v10 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v7, v9);
    v11 = (flatbuffers::FlatBufferBuilder *)(*(uint64_t (**)(AGCLLVMDriverFragmentShader *))(*(_QWORD *)this + 48))(this);
    v13 = flatbuffers::FlatBufferBuilder::EndTable(v11, v12);
    v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v15 = v14 + 2472;
    v14[2542] = 1;
    v16 = *((_DWORD *)v14 + 626) - *((_DWORD *)v14 + 630) + *((_DWORD *)v14 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v14 + 2472, v10);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(v15, v13);
    v17 = (AGCLLVMDriverFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v18 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v15, v16);
    flatbuffers::FlatBufferBuilder::Finish(v17, v18, v19);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMDriverFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  }
  return v2;
}

char *AGCLLVMDriverFragmentShader::constructFlatReply(AGCLLVMDriverFragmentShader *this)
{
  return AGCLLVMFragmentShader::constructFlatReply((AGCLLVMDriverFragmentShader *)((char *)this + 72));
}

const char *AGCLLVMClearFragmentShader::dumpType(AGCLLVMClearFragmentShader *this)
{
  return "clear";
}

uint64_t AGCLLVMClearFragmentShader::getShaderType(AGCLLVMClearFragmentShader *this)
{
  return 17;
}

void AGCLLVMClearFragmentShader::getCompilationKeyDescription(AGCLLVMClearFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  std::string v4;
  std::string v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  agcStringRepresentation<_AGCDrawBufferState>(&v5, *((_QWORD *)this + 83));
  std::string::basic_string[abi:nn180100]<0>(v14, "AGCColorMaskState");
  std::string::basic_string[abi:nn180100]<0>(v12, "redEnableBits");
  _agcFieldStringHex(&v16, (const void **)v12);
  std::string::basic_string[abi:nn180100]<0>(v10, "greenEnableBits");
  _agcFieldStringHex(&v17, (const void **)v10);
  std::string::basic_string[abi:nn180100]<0>(v8, "blueEnableBits");
  _agcFieldStringHex(&v18, (const void **)v8);
  std::string::basic_string[abi:nn180100]<0>(__p, "alphaEnableBits");
  _agcFieldStringHex(&v19, (const void **)__p);
  _agcGroupWithHeader(&v4, (uint64_t)v14, (uint64_t)&v16, 4);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v19.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v19.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&v5.__r_.__value_.__l.__data_, (const void **)&v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

_QWORD *AGCLLVMClearFragmentShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.clear");
}

void `non-virtual thunk to'AGCLLVMClearFragmentShader::~AGCLLVMClearFragmentShader(AGCLLVMClearFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + 624));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + 624));
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMClearFragmentShader::~AGCLLVMClearFragmentShader(AGCLLVMClearFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 696));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMClearFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 696));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMClearFragmentShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.clear");
}

const char *`virtual thunk to'AGCLLVMClearFragmentShader::dumpType(AGCLLVMClearFragmentShader *this)
{
  return "clear";
}

uint64_t `virtual thunk to'AGCLLVMClearFragmentShader::getShaderType(AGCLLVMClearFragmentShader *this)
{
  return 17;
}

void `virtual thunk to'AGCLLVMClearFragmentShader::getCompilationKeyDescription(AGCLLVMClearFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
  AGCLLVMClearFragmentShader::getCompilationKeyDescription((AGCLLVMClearFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMDriverFragmentShader::constructReply(AGCLLVMDriverFragmentShader *this)
{
  return AGCLLVMDriverFragmentShader::constructReply((AGCLLVMDriverFragmentShader *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 152)));
}

void agcStringRepresentation<_AGCDrawBufferState>(std::string *a1, uint64_t a2)
{
  uint64_t i;
  uint64_t j;
  std::string __p;
  void *v7[2];
  char v8;
  std::string v9;
  void *v10[2];
  char v11;
  std::string v12;
  void *v13[2];
  char v14;
  std::string v15;
  void *v16[2];
  char v17;
  std::string v18;
  void *v19[2];
  char v20;
  std::string v21;
  void *v22[2];
  char v23;
  std::string v24;
  void *v25[2];
  char v26;
  std::string v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  std::string v59;
  std::string v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v44, "AGCDrawBufferState");
  std::string::basic_string[abi:nn180100]<0>(v42, "enabledBits");
  _agcFieldStringHex(&v54, (const void **)v42);
  std::string::basic_string[abi:nn180100]<0>(v40, "sampleCount");
  _agcFieldString<unsigned int>(&v55, (const void **)v40, (*(_DWORD *)(a2 + 32) >> 8) & 0xF);
  std::string::basic_string[abi:nn180100]<0>(v38, "colorSampleCount");
  _agcFieldString<unsigned int>(&v56, (const void **)v38, (unsigned __int16)*(_DWORD *)(a2 + 32) >> 12);
  std::string::basic_string[abi:nn180100]<0>(v36, "outputPartitionSize");
  _agcFieldString<unsigned int>(&v57, (const void **)v36, *(_WORD *)(a2 + 34) & 0x1FF);
  std::string::basic_string[abi:nn180100]<0>(v34, "LIBSpilling");
  _agcFieldString<unsigned int>(&v58, (const void **)v34, (*(_DWORD *)(a2 + 32) >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(v32, "unused");
  _agcFieldString<unsigned int>(&v59, (const void **)v32, *(_DWORD *)(a2 + 32) >> 27);
  std::string::basic_string[abi:nn180100]<0>(v30, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(v28, "encoded[0]");
  _agcStringRepresentation(&v27, (_DWORD *)a2);
  _agcFieldString<std::string>(&v46, (const void **)v28, (uint64_t)&v27);
  std::string::basic_string[abi:nn180100]<0>(v25, "encoded[1]");
  _agcStringRepresentation(&v24, (_DWORD *)(a2 + 4));
  _agcFieldString<std::string>(&v47, (const void **)v25, (uint64_t)&v24);
  std::string::basic_string[abi:nn180100]<0>(v22, "encoded[2]");
  _agcStringRepresentation(&v21, (_DWORD *)(a2 + 8));
  _agcFieldString<std::string>(&v48, (const void **)v22, (uint64_t)&v21);
  std::string::basic_string[abi:nn180100]<0>(v19, "encoded[3]");
  _agcStringRepresentation(&v18, (_DWORD *)(a2 + 12));
  _agcFieldString<std::string>(&v49, (const void **)v19, (uint64_t)&v18);
  std::string::basic_string[abi:nn180100]<0>(v16, "encoded[4]");
  _agcStringRepresentation(&v15, (_DWORD *)(a2 + 16));
  _agcFieldString<std::string>(&v50, (const void **)v16, (uint64_t)&v15);
  std::string::basic_string[abi:nn180100]<0>(v13, "encoded[5]");
  _agcStringRepresentation(&v12, (_DWORD *)(a2 + 20));
  _agcFieldString<std::string>(&v51, (const void **)v13, (uint64_t)&v12);
  std::string::basic_string[abi:nn180100]<0>(v10, "encoded[6]");
  _agcStringRepresentation(&v9, (_DWORD *)(a2 + 24));
  _agcFieldString<std::string>(&v52, (const void **)v10, (uint64_t)&v9);
  std::string::basic_string[abi:nn180100]<0>(v7, "encoded[7]");
  _agcStringRepresentation(&__p, (_DWORD *)(a2 + 28));
  _agcFieldString<std::string>(&v53, (const void **)v7, (uint64_t)&__p);
  _agcGroupWithHeader(&v60, (uint64_t)v30, (uint64_t)&v46, 8);
  _agcGroupWithHeader(a1, (uint64_t)v44, (uint64_t)&v54, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v60.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v60.__r_.__value_.__l.__data_ + i * 8));
  }
  for (j = 0; j != -24; j -= 3)
  {
    if (SHIBYTE(v53.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v53.__r_.__value_.__l.__data_ + j * 8));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  if (v41 < 0)
    operator delete(v40[0]);
  if (v43 < 0)
    operator delete(v42[0]);
  if (v45 < 0)
    operator delete(v44[0]);
}

void AGCLLVMBackgroundObjectFragmentShader::~AGCLLVMBackgroundObjectFragmentShader(AGCLLVMBackgroundObjectFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 696));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 696));
  JUMPOUT(0x1CAA2D68CLL);
}

char *AGCLLVMBackgroundObjectFragmentShader::constructFlatReply(AGCLLVMBackgroundObjectFragmentShader *this)
{
  char *v1;
  char *v2;
  unsigned int v3;

  if (((**((unsigned int **)this + 86) | ((unint64_t)*(unsigned __int16 *)(*((_QWORD *)this + 86) + 4) << 32)) & 0x10000000000) == 0)
    return AGCLLVMFragmentShader::constructFlatReply((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 72));
  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v1 = v2 + 2472;
  v2[2542] = 1;
  v3 = flatbuffers::FlatBufferBuilder::PushElement<unsigned long long>((uint64_t)(v2 + 2472), 0xFFFFFFFFLL);
  flatbuffers::FlatBufferBuilder::TrackField(v1, 8, v3);
  flatbuffers::FlatBufferBuilder::AddElement<unsigned long long>(v1, 6, 0, 0);
  return v1;
}

const char *AGCLLVMBackgroundObjectFragmentShader::dumpType(AGCLLVMBackgroundObjectFragmentShader *this)
{
  if (((**((unsigned int **)this + 86) | ((unint64_t)*(unsigned __int16 *)(*((_QWORD *)this + 86) + 4) << 32)) & 0x10000000000) != 0)
    return "bgo_uber";
  else
    return "bgo";
}

uint64_t AGCLLVMBackgroundObjectFragmentShader::getShaderType(AGCLLVMBackgroundObjectFragmentShader *this)
{
  return 18;
}

void AGCLLVMBackgroundObjectFragmentShader::getCompilationKeyDescription(AGCLLVMBackgroundObjectFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t i;
  std::string v6;
  std::string v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  agcStringRepresentation<_AGCDrawBufferState>(&v7, *((_QWORD *)this + 83));
  v4 = (unsigned __int8 *)*((_QWORD *)this + 86);
  std::string::basic_string[abi:nn180100]<0>(v16, "AGCBackgroundObjectState");
  std::string::basic_string[abi:nn180100]<0>(v14, "dimensionBits");
  std::to_string(&v18, *(unsigned __int16 *)v4);
  _agcFieldString<std::string>(&v19, (const void **)v14, (uint64_t)&v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:nn180100]<0>(&v18, "arrayBits");
  _agcFieldString<unsigned char>(&v20, (const void **)&v18.__r_.__value_.__l.__data_, v4[2]);
  std::string::basic_string[abi:nn180100]<0>(v12, "clearedBits");
  _agcFieldString<unsigned char>(&v21, (const void **)v12, v4[3]);
  std::string::basic_string[abi:nn180100]<0>(v10, "loadedBits");
  _agcFieldString<unsigned char>(&v22, (const void **)v10, v4[4]);
  std::string::basic_string[abi:nn180100]<0>(__p, "uberVariant");
  _agcFieldString<unsigned char>(&v23, (const void **)__p, v4[5] & 1);
  _agcGroupWithHeader(&v6, (uint64_t)v16, (uint64_t)&v19, 5);
  for (i = 0; i != -15; i -= 3)
  {
    if (SHIBYTE(v23.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v23.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)&v7.__r_.__value_.__l.__data_, (const void **)&v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

_QWORD *AGCLLVMBackgroundObjectFragmentShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.background");
}

void `non-virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::~AGCLLVMBackgroundObjectFragmentShader(AGCLLVMBackgroundObjectFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 624));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + 624));
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::~AGCLLVMBackgroundObjectFragmentShader(AGCLLVMBackgroundObjectFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                        + 696));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMBackgroundObjectFragmentShader *)((char *)this
                                                                        + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                        + 696));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.background");
}

const char *`virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::dumpType(AGCLLVMBackgroundObjectFragmentShader *this)
{
  unsigned int *v1;

  v1 = *(unsigned int **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72) + 688);
  if (((*v1 | ((unint64_t)*((unsigned __int16 *)v1 + 2) << 32)) & 0x10000000000) != 0)
    return "bgo_uber";
  else
    return "bgo";
}

uint64_t `virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::getShaderType(AGCLLVMBackgroundObjectFragmentShader *this)
{
  return 18;
}

void `virtual thunk to'AGCLLVMBackgroundObjectFragmentShader::getCompilationKeyDescription(AGCLLVMBackgroundObjectFragmentShader *this@<X0>, uint64_t a2@<X8>)
{
  AGCLLVMBackgroundObjectFragmentShader::getCompilationKeyDescription((AGCLLVMBackgroundObjectFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

void _agcFieldString<unsigned char>(std::string *a1, const void **a2, unsigned __int8 a3)
{
  std::string v5;

  std::to_string(&v5, a3);
  _agcFieldString<std::string>(a1, a2, (uint64_t)&v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void AGCLLVMEndOfTileProgram::~AGCLLVMEndOfTileProgram(AGCLLVMEndOfTileProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMEndOfTileProgram *)((char *)this + 96));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMEndOfTileProgram *)((char *)this + 96));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL AGCLLVMEndOfTileProgram::constructReply(AGCLLVMEndOfTileProgram *this)
{
  _BOOL8 v2;
  char *v3;
  char *v4;
  __int16 v5;
  int v6;
  char *v7;
  flatbuffers::FlatBufferBuilder *v8;
  int v9;
  flatbuffers::FlatBufferBuilder *v10;
  int v11;
  const char *v12;
  char *v13;
  char *v14;
  int v15;
  unsigned int v16;
  int v17;
  char *v18;
  flatbuffers::FlatBufferBuilder *v19;
  int v20;
  flatbuffers::FlatBufferBuilder *v21;
  int v22;
  const char *v23;
  char *v25[2];

  v2 = AGCDeserializedReply::deserialize((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = (char *)AGCLLVMObject::constructFlatReply((AGCLLVMEndOfTileProgram *)((char *)this
                                                                             + *(_QWORD *)(*(_QWORD *)this - 24)));
    v5 = (__int16)v4;
    v25[0] = v3;
    v25[1] = v4;
    AGCLLVMDriverShader::setGatherMasks((char *)this, v25);
    v6 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v3, v5);
    v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v8 = (flatbuffers::FlatBufferBuilder *)(v7 + 2472);
    v7[2542] = 1;
    v9 = *((_DWORD *)v7 + 626) - *((_DWORD *)v7 + 630) + *((_DWORD *)v7 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v7 + 2472, v6);
    v10 = (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v11 = flatbuffers::FlatBufferBuilder::EndTable(v8, v9);
    flatbuffers::FlatBufferBuilder::Finish(v10, v11, v12);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    if (*((_BYTE *)this + 81))
    {
      v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v14 = v13 + 2568;
      v13[2638] = 1;
      v15 = *((_DWORD *)v13 + 650) - *((_DWORD *)v13 + 654) + *((_DWORD *)v13 + 652);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v13 + 2568, 10, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v14, 8, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 12, 0, 0);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v14, 6, 0, 0);
      v16 = flatbuffers::FlatBufferBuilder::PushElement<unsigned char>((uint64_t)v14, 1);
      flatbuffers::FlatBufferBuilder::TrackField(v14, 4, v16);
      v17 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v14, v15);
      v18 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v19 = (flatbuffers::FlatBufferBuilder *)(v18 + 2568);
      v18[2638] = 1;
      v20 = *((_DWORD *)v18 + 650) - *((_DWORD *)v18 + 654) + *((_DWORD *)v18 + 652);
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::FragmentShaderInfo>(v18 + 2568, v17);
      v21 = (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
      v22 = flatbuffers::FlatBufferBuilder::EndTable(v19, v20);
      flatbuffers::FlatBufferBuilder::Finish(v21, v22, v23);
      AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
    }
  }
  return v2;
}

const char *AGCLLVMEndOfTileProgram::dumpType(AGCLLVMEndOfTileProgram *this)
{
  unint64_t v1;
  uint64_t v2;
  const char *v4;
  const char *v5;

  v1 = *(_QWORD *)(*((_QWORD *)this + 9) + 72);
  v2 = (v1 >> 55) & 3;
  if ((v1 & 0x200000000000000) != 0)
  {
    if ((_DWORD)v2 == 1)
      return "sw_eot_uber";
    v4 = "eot_uber";
    v5 = "eotfc_uber";
  }
  else
  {
    if ((_DWORD)v2 == 1)
      return "sw_eot";
    v4 = "eot";
    v5 = "eotfc";
  }
  if ((_DWORD)v2 == 2)
    return v5;
  else
    return v4;
}

uint64_t AGCLLVMEndOfTileProgram::getShaderType(AGCLLVMEndOfTileProgram *this)
{
  return 21;
}

void AGCLLVMEndOfTileProgram::getCompilationKeyDescription(AGCLLVMEndOfTileProgram *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  std::string __p;
  void *v7[2];
  char v8;
  std::string v9;
  void *v10[2];
  char v11;
  std::string v12;
  void *v13[2];
  char v14;
  std::string v15;
  void *v16[2];
  char v17;
  std::string v18;
  void *v19[2];
  char v20;
  std::string v21;
  void *v22[2];
  char v23;
  std::string v24;
  void *v25[2];
  char v26;
  std::string v27;
  void *v28[2];
  char v29;
  std::string v30;
  void *v31[2];
  char v32;
  std::string v33;
  void *v34[2];
  char v35;
  std::string v36;
  void *v37[2];
  char v38;
  std::string v39;
  void *v40[2];
  char v41;
  std::string v42;
  void *v43[2];
  char v44;
  std::string v45;
  void *v46[2];
  char v47;
  std::string v48;
  void *v49[2];
  char v50;
  std::string v51;
  void *v52[2];
  char v53;
  std::string v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 9);
  std::string::basic_string[abi:nn180100]<0>(v73, "AGCEndOfTileState");
  std::string::basic_string[abi:nn180100]<0>(v71, "emitMask");
  _agcFieldStringHex(&v92, (const void **)v71);
  std::string::basic_string[abi:nn180100]<0>(v69, "conditionalMask");
  _agcFieldStringHex(&v93, (const void **)v69);
  std::string::basic_string[abi:nn180100]<0>(v67, "sampleCount");
  _agcFieldString<unsigned long long>(&v94, (const void **)v67, *(_DWORD *)(v3 + 76) & 0xFLL);
  std::string::basic_string[abi:nn180100]<0>(v65, "outputPartitionSize");
  _agcFieldString<unsigned long long>(&v95, (const void **)v65, (*(_QWORD *)(v3 + 72) >> 36) & 0x1FFLL);
  std::string::basic_string[abi:nn180100]<0>(v63, "numEmits");
  _agcFieldString<unsigned long long>(&v96, (const void **)v63, (*(_QWORD *)(v3 + 72) >> 45) & 0x1FLL);
  std::string::basic_string[abi:nn180100]<0>(v61, "dummyEmitIndex");
  _agcFieldString<unsigned long long>(&v97, (const void **)v61, (*(_QWORD *)(v3 + 72) >> 50) & 0x1FLL);
  std::string::basic_string[abi:nn180100]<0>(v59, "unused");
  _agcFieldString<unsigned long long>(&v98, (const void **)v59, *(_QWORD *)(v3 + 72) >> 58);
  std::string::basic_string[abi:nn180100]<0>(v57, "encoded : ");
  std::string::basic_string[abi:nn180100]<0>(v55, "encoded[0]");
  _agcStringRepresentation(&v54, (unsigned __int8 *)v3);
  _agcFieldString<std::string>(&v75, (const void **)v55, (uint64_t)&v54);
  std::string::basic_string[abi:nn180100]<0>(v52, "encoded[1]");
  _agcStringRepresentation(&v51, (unsigned __int8 *)(v3 + 4));
  _agcFieldString<std::string>(&v76, (const void **)v52, (uint64_t)&v51);
  std::string::basic_string[abi:nn180100]<0>(v49, "encoded[2]");
  _agcStringRepresentation(&v48, (unsigned __int8 *)(v3 + 8));
  _agcFieldString<std::string>(&v77, (const void **)v49, (uint64_t)&v48);
  std::string::basic_string[abi:nn180100]<0>(v46, "encoded[3]");
  _agcStringRepresentation(&v45, (unsigned __int8 *)(v3 + 12));
  _agcFieldString<std::string>(&v78, (const void **)v46, (uint64_t)&v45);
  std::string::basic_string[abi:nn180100]<0>(v43, "encoded[4]");
  _agcStringRepresentation(&v42, (unsigned __int8 *)(v3 + 16));
  _agcFieldString<std::string>(&v79, (const void **)v43, (uint64_t)&v42);
  std::string::basic_string[abi:nn180100]<0>(v40, "encoded[5]");
  _agcStringRepresentation(&v39, (unsigned __int8 *)(v3 + 20));
  _agcFieldString<std::string>(&v80, (const void **)v40, (uint64_t)&v39);
  std::string::basic_string[abi:nn180100]<0>(v37, "encoded[6]");
  _agcStringRepresentation(&v36, (unsigned __int8 *)(v3 + 24));
  _agcFieldString<std::string>(&v81, (const void **)v37, (uint64_t)&v36);
  std::string::basic_string[abi:nn180100]<0>(v34, "encoded[7]");
  _agcStringRepresentation(&v33, (unsigned __int8 *)(v3 + 28));
  _agcFieldString<std::string>(&v82, (const void **)v34, (uint64_t)&v33);
  std::string::basic_string[abi:nn180100]<0>(v31, "encoded[8]");
  _agcStringRepresentation(&v30, (unsigned __int8 *)(v3 + 32));
  _agcFieldString<std::string>(&v83, (const void **)v31, (uint64_t)&v30);
  std::string::basic_string[abi:nn180100]<0>(v28, "encoded[9]");
  _agcStringRepresentation(&v27, (unsigned __int8 *)(v3 + 36));
  _agcFieldString<std::string>(&v84, (const void **)v28, (uint64_t)&v27);
  std::string::basic_string[abi:nn180100]<0>(v25, "encoded[10]");
  _agcStringRepresentation(&v24, (unsigned __int8 *)(v3 + 40));
  _agcFieldString<std::string>(&v85, (const void **)v25, (uint64_t)&v24);
  std::string::basic_string[abi:nn180100]<0>(v22, "encoded[11]");
  _agcStringRepresentation(&v21, (unsigned __int8 *)(v3 + 44));
  _agcFieldString<std::string>(&v86, (const void **)v22, (uint64_t)&v21);
  std::string::basic_string[abi:nn180100]<0>(v19, "encoded[12]");
  _agcStringRepresentation(&v18, (unsigned __int8 *)(v3 + 48));
  _agcFieldString<std::string>(&v87, (const void **)v19, (uint64_t)&v18);
  std::string::basic_string[abi:nn180100]<0>(v16, "encoded[13]");
  _agcStringRepresentation(&v15, (unsigned __int8 *)(v3 + 52));
  _agcFieldString<std::string>(&v88, (const void **)v16, (uint64_t)&v15);
  std::string::basic_string[abi:nn180100]<0>(v13, "encoded[14]");
  _agcStringRepresentation(&v12, (unsigned __int8 *)(v3 + 56));
  _agcFieldString<std::string>(&v89, (const void **)v13, (uint64_t)&v12);
  std::string::basic_string[abi:nn180100]<0>(v10, "encoded[15]");
  _agcStringRepresentation(&v9, (unsigned __int8 *)(v3 + 60));
  _agcFieldString<std::string>(&v90, (const void **)v10, (uint64_t)&v9);
  std::string::basic_string[abi:nn180100]<0>(v7, "encoded[16]");
  _agcStringRepresentation(&__p, (unsigned __int8 *)(v3 + 64));
  _agcFieldString<std::string>(&v91, (const void **)v7, (uint64_t)&__p);
  _agcGroupWithHeader(&v99, (uint64_t)v57, (uint64_t)&v75, 17);
  _agcGroupWithHeader(a2, (uint64_t)v73, (uint64_t)&v92, 8);
  for (i = 0; i != -24; i -= 3)
  {
    if (SHIBYTE(v99.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v99.__r_.__value_.__l.__data_ + i * 8));
  }
  v5 = 51;
  do
  {
    if (v75.__r_.__value_.__s.__data_[v5 * 8 - 1] < 0)
      operator delete(v73[v5]);
    v5 -= 3;
  }
  while (v5 * 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v26 < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (v29 < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (v38 < 0)
    operator delete(v37[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (v41 < 0)
    operator delete(v40[0]);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v44 < 0)
    operator delete(v43[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v47 < 0)
    operator delete(v46[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(v49[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (v53 < 0)
    operator delete(v52[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v56 < 0)
    operator delete(v55[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  if (v68 < 0)
    operator delete(v67[0]);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  if (v74 < 0)
    operator delete(v73[0]);
}

_QWORD *AGCLLVMEndOfTileProgram::wrapperName@<X0>(AGCLLVMEndOfTileProgram *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (*((_BYTE *)this + 81))
  {
    v2 = "agc.sw_eot";
  }
  else if (*((_BYTE *)this + 82))
  {
    v2 = "agc.eotfc";
  }
  else
  {
    v2 = "agc.eot";
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v2);
}

void `virtual thunk to'AGCLLVMEndOfTileProgram::~AGCLLVMEndOfTileProgram(AGCLLVMEndOfTileProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 96));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 96));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMEndOfTileProgram::wrapperName@<X0>(AGCLLVMEndOfTileProgram *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 64);
  if (v4[81])
  {
    v5 = "agc.sw_eot";
  }
  else if (v4[82])
  {
    v5 = "agc.eotfc";
  }
  else
  {
    v5 = "agc.eot";
  }
  return std::string::basic_string[abi:nn180100]<0>(a2, v5);
}

const char *`virtual thunk to'AGCLLVMEndOfTileProgram::dumpType(AGCLLVMEndOfTileProgram *this)
{
  unint64_t v1;
  uint64_t v2;
  const char *v4;
  const char *v5;

  v1 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72) + 72) + 72);
  v2 = (v1 >> 55) & 3;
  if ((v1 & 0x200000000000000) != 0)
  {
    if ((_DWORD)v2 == 1)
      return "sw_eot_uber";
    v4 = "eot_uber";
    v5 = "eotfc_uber";
  }
  else
  {
    if ((_DWORD)v2 == 1)
      return "sw_eot";
    v4 = "eot";
    v5 = "eotfc";
  }
  if ((_DWORD)v2 == 2)
    return v5;
  else
    return v4;
}

uint64_t `virtual thunk to'AGCLLVMEndOfTileProgram::getShaderType(AGCLLVMEndOfTileProgram *this)
{
  return 21;
}

void `virtual thunk to'AGCLLVMEndOfTileProgram::getCompilationKeyDescription(AGCLLVMEndOfTileProgram *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMEndOfTileProgram::getCompilationKeyDescription((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

BOOL `virtual thunk to'AGCLLVMEndOfTileProgram::constructReply(AGCLLVMEndOfTileProgram *this)
{
  return AGCLLVMEndOfTileProgram::constructReply((AGCLLVMEndOfTileProgram *)((char *)this
                                                                           + *(_QWORD *)(*(_QWORD *)this - 152)));
}

void _agcStringRepresentation(std::string *a1, unsigned __int8 *a2)
{
  uint64_t i;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(v19, "AGCEmitState");
  std::string::basic_string[abi:nn180100]<0>(v17, "slotIndex");
  _agcFieldString<unsigned int>(&v21, (const void **)v17, *a2);
  std::string::basic_string[abi:nn180100]<0>(v15, "channelFormat");
  _agcFieldString<unsigned int>(&v22, (const void **)v15, a2[1]);
  std::string::basic_string[abi:nn180100]<0>(v13, "dimension");
  _agcFieldString<unsigned int>(&v23, (const void **)v13, a2[2]);
  std::string::basic_string[abi:nn180100]<0>(v11, "gammaCorrection");
  _agcFieldString<unsigned int>(&v24, (const void **)v11, HIBYTE(*(_DWORD *)a2) & 1);
  std::string::basic_string[abi:nn180100]<0>(v9, "sparse");
  _agcFieldString<unsigned int>(&v25, (const void **)v9, (*(_DWORD *)a2 >> 25) & 1);
  std::string::basic_string[abi:nn180100]<0>(v7, "numWrittenComponents");
  _agcFieldString<unsigned int>(&v26, (const void **)v7, (*(_DWORD *)a2 >> 26) & 7);
  std::string::basic_string[abi:nn180100]<0>(__p, "manualResolve");
  _agcFieldString<unsigned int>(&v27, (const void **)__p, (*(_DWORD *)a2 >> 29) & 1);
  _agcGroupWithHeader(a1, (uint64_t)v19, (uint64_t)&v21, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v27.__r_.__value_.__l.__data_ + i * 8));
  }
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
}

uint64_t AGCLLVMUtilityProgram::compile(AGCLLVMUtilityProgram *this)
{
  const char *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t result;
  void *__p[2];
  char v30;

  v2 = (const char *)(*(uint64_t (**)(AGCLLVMUtilityProgram *))(*(_QWORD *)this + 16))(this);
  if (dumpShaderToFile(v2))
  {
    v3 = (*(uint64_t (**)(AGCLLVMUtilityProgram *))(*(_QWORD *)this + 16))(this);
    printMessage((char **)&AGCPrinter, "------ Start compilation key description for %s shader %u  ------", v4, v5, v6, v7, v8, v9, v3);
    (*(void (**)(void **__return_ptr, AGCLLVMUtilityProgram *))(*(_QWORD *)this + 40))(__p, this);
    if (v30 >= 0)
      v16 = __p;
    else
      LOBYTE(v16) = __p[0];
    printMessage((char **)&AGCPrinter, "%s", v10, v11, v12, v13, v14, v15, (char)v16);
    if (v30 < 0)
      operator delete(__p[0]);
    v17 = (*(uint64_t (**)(AGCLLVMUtilityProgram *))(*(_QWORD *)this + 16))(this);
    printMessage((char **)&AGCPrinter, "------ End compilation key description for %s shader %u  ------", v18, v19, v20, v21, v22, v23, v17);
  }
  v24 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v25 = *((_QWORD *)v24 + 58);
  v26 = *((_QWORD *)v24 + 46);
  __p[0] = (void *)0x10000;
  v27 = AGCLLVMCtx::compile(v25, (uint64_t)v24, v26, 1, 2, __p, 0);
  result = 0;
  if (v27)
    return (*(uint64_t (**)(AGCLLVMUtilityProgram *))(*(_QWORD *)this + 8))(this);
  return result;
}

BOOL AGCLLVMUtilityProgram::constructReply(AGCLLVMUtilityProgram *this)
{
  _BOOL8 v2;
  flatbuffers::FlatBufferBuilder *v3;
  __int16 v4;
  int v5;
  char *v6;
  flatbuffers::FlatBufferBuilder *v7;
  int v8;
  flatbuffers::FlatBufferBuilder *v9;
  int v10;
  const char *v11;

  v2 = AGCDeserializedReply::deserialize((AGCLLVMUtilityProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMUtilityProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = AGCLLVMObject::constructFlatReply((AGCLLVMUtilityProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v5 = flatbuffers::FlatBufferBuilder::EndTable(v3, v4);
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v7 = (flatbuffers::FlatBufferBuilder *)(v6 + 2472);
    v6[2542] = 1;
    v8 = *((_DWORD *)v6 + 626) - *((_DWORD *)v6 + 630) + *((_DWORD *)v6 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v6 + 2472, v5);
    v9 = (AGCLLVMUtilityProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v10 = flatbuffers::FlatBufferBuilder::EndTable(v7, v8);
    flatbuffers::FlatBufferBuilder::Finish(v9, v10, v11);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMUtilityProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
  }
  return v2;
}

const char *AGCLLVMUtilityProgram::dumpType(AGCLLVMUtilityProgram *this)
{
  return "utility";
}

uint64_t AGCLLVMUtilityProgram::getShaderType(AGCLLVMUtilityProgram *this)
{
  return 20;
}

uint64_t AGCLLVMUtilityProgram::getTempRegistersLimit(AGCLLVMUtilityProgram *this, unsigned int *a2)
{
  *a2 = 16;
  return 0;
}

_QWORD *AGCLLVMUtilityProgram::getCompilationKeyDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

_QWORD *AGCLLVMUtilityProgram::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "utility_main");
}

void AGCLLVMUtilityProgram::~AGCLLVMUtilityProgram(AGCLLVMUtilityProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + 8));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + 8));
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t `virtual thunk to'AGCLLVMUtilityProgram::compile(AGCLLVMUtilityProgram *this)
{
  return AGCLLVMUtilityProgram::compile((AGCLLVMUtilityProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void `virtual thunk to'AGCLLVMUtilityProgram::~AGCLLVMUtilityProgram(AGCLLVMUtilityProgram *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 8));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48) + 8));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMUtilityProgram::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "utility_main");
}

const char *`virtual thunk to'AGCLLVMUtilityProgram::dumpType(AGCLLVMUtilityProgram *this)
{
  return "utility";
}

uint64_t `virtual thunk to'AGCLLVMUtilityProgram::getShaderType(AGCLLVMUtilityProgram *this)
{
  return 20;
}

_QWORD *`virtual thunk to'AGCLLVMUtilityProgram::getCompilationKeyDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

BOOL `virtual thunk to'AGCLLVMUtilityProgram::constructReply(AGCLLVMUtilityProgram *this)
{
  return AGCLLVMUtilityProgram::constructReply((AGCLLVMUtilityProgram *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 152)));
}

uint64_t `virtual thunk to'AGCLLVMUtilityProgram::getTempRegistersLimit(AGCLLVMUtilityProgram *this, unsigned int *a2)
{
  *a2 = 16;
  return 0;
}

void AGCLLVMDummyFeedbackFragmentShader::~AGCLLVMDummyFeedbackFragmentShader(AGCLLVMDummyFeedbackFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this + 688));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this + 688));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMDummyFeedbackFragmentShader::dumpType(AGCLLVMDummyFeedbackFragmentShader *this)
{
  return "dummy-feedback";
}

void AGCLLVMDummyFeedbackFragmentShader::getCompilationKeyDescription(AGCLLVMDummyFeedbackFragmentShader *this@<X0>, std::string *a2@<X8>)
{
  agcStringRepresentation<_AGCDrawBufferState>(a2, *((_QWORD *)this + 83));
}

uint64_t AGCLLVMDummyFeedbackFragmentShader::getShaderType(AGCLLVMDummyFeedbackFragmentShader *this)
{
  return 19;
}

_QWORD *AGCLLVMDummyFeedbackFragmentShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.dummy_feedback");
}

void `non-virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::~AGCLLVMDummyFeedbackFragmentShader(AGCLLVMDummyFeedbackFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this + 616));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this + 616));
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::~AGCLLVMDummyFeedbackFragmentShader(AGCLLVMDummyFeedbackFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this
                                                                     + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                     + 688));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMDummyFeedbackFragmentShader *)((char *)this
                                                                     + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                     + 688));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.dummy_feedback");
}

const char *`virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::dumpType(AGCLLVMDummyFeedbackFragmentShader *this)
{
  return "dummy-feedback";
}

uint64_t `virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::getShaderType(AGCLLVMDummyFeedbackFragmentShader *this)
{
  return 19;
}

void `virtual thunk to'AGCLLVMDummyFeedbackFragmentShader::getCompilationKeyDescription(AGCLLVMDummyFeedbackFragmentShader *this@<X0>, std::string *a2@<X8>)
{
  agcStringRepresentation<_AGCDrawBufferState>(a2, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136) + 664));
}

void AGCLLVMTextureFetchFragmentShader::~AGCLLVMTextureFetchFragmentShader(AGCLLVMTextureFetchFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this + 704));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this + 704));
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMTextureFetchFragmentShader::dumpType(AGCLLVMTextureFetchFragmentShader *this)
{
  int v1;
  const char *v2;

  v1 = *((_DWORD *)this + 174);
  v2 = "texture_fetch";
  if (v1 == 14)
    v2 = "blit3D";
  if (v1 == 12)
    return "resolve_gl";
  else
    return v2;
}

void AGCLLVMTextureFetchFragmentShader::getCompilationKeyDescription(AGCLLVMTextureFetchFragmentShader *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v4;
  uint64_t i;
  std::string *v6;
  std::string::size_type v7;
  unsigned int v8;
  unsigned __int8 v9;
  const std::string::value_type *v10;
  std::string *v11;
  std::string v12;
  std::string v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  agcStringRepresentation<_AGCDrawBufferState>(&v13, *((_QWORD *)this + 83));
  v4 = (_DWORD *)*((_QWORD *)this + 86);
  if (v4)
  {
    std::string::basic_string[abi:nn180100]<0>(&v30, "AGC3DBlitState");
    std::string::basic_string[abi:nn180100]<0>(v28, "blitType");
    _agcFieldString<char const*>(&v31, (const void **)v28, _AGC3DBlitTypeStrings[*v4 & 0xF]);
    std::string::basic_string[abi:nn180100]<0>(v26, "readBufferSampleCount");
    _agcFieldString<unsigned int>(&v32, (const void **)v26, *v4 >> 4);
    std::string::basic_string[abi:nn180100]<0>(v24, "sample3D");
    _agcFieldString<unsigned int>(&v33, (const void **)v24, (*v4 >> 8) & 1);
    std::string::basic_string[abi:nn180100]<0>(v22, "regionOffset");
    _agcFieldString<unsigned int>(&v34, (const void **)v22, (*v4 >> 9) & 1);
    std::string::basic_string[abi:nn180100]<0>(v20, "remapAddress");
    _agcFieldString<unsigned int>(&v35, (const void **)v20, (*v4 >> 10) & 1);
    std::string::basic_string[abi:nn180100]<0>(v18, "remapAddressPOT");
    _agcFieldString<unsigned int>(&v36, (const void **)v18, (*v4 >> 11) & 1);
    std::string::basic_string[abi:nn180100]<0>(v16, "strideDiscard");
    _agcFieldString<unsigned int>(&v37, (const void **)v16, (*v4 >> 12) & 1);
    std::string::basic_string[abi:nn180100]<0>(__p, "blitTextureFormat");
    _agcFieldString<unsigned int>(&v38, (const void **)__p, (*v4 >> 13) & 0x1F);
    _agcGroupWithHeader(&v12, (uint64_t)&v30, (uint64_t)&v31, 8);
    for (i = 0; i != -24; i -= 3)
    {
      if (SHIBYTE(v38.__r_.__value_.__r.__words[i + 2]) < 0)
        operator delete(*(void **)((char *)&v38.__r_.__value_.__l.__data_ + i * 8));
    }
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    if (v21 < 0)
      operator delete(v20[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    if (v25 < 0)
      operator delete(v24[0]);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v29 < 0)
      operator delete(v28[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v12, (char *)&unk_1C3E4D9BB);
  }
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v30, (const void **)&v13.__r_.__value_.__l.__data_, (const void **)&v12.__r_.__value_.__l.__data_);
  v6 = std::string::append(&v30, "\ntoken type : ");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *((_DWORD *)this + 174);
  {
    std::string::basic_string[abi:nn180100]<0>(agcStreamToken2String::mapToken2String, "AGCStreamTokenUnknownShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[3], "AGCStreamTokenGLSLVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[6], "AGCStreamTokenGLSLFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[9], "AGCStreamTokenMetalVertexProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[12], "AGCStreamTokenMetalFragmentProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[15], "AGCStreamTokenMetalTileProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[18], "AGCStreamTokenMetalComputeProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[21], "AGCStreamTokenMetalUserIntersectionProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[24], "AGCStreamTokenMetalDynamicLibrary");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[27], "AGCStreamTokenMetalObjectProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[30], "AGCStreamTokenMetalMeshProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[33], "AGCStreamTokenClearFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[36], "AGCStreamTokenResolveFragmentShaderGL");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[39], "AGCStreamTokenBackgroundObjectFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[42], "AGCStreamToken3DBlitFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[45], "AGCStreamTokenTABlitVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[48], "AGCStreamTokenBlitComputeShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[51], "AGCStreamTokenBlitSparseShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[54], "AGCStreamTokenBlitFastClearShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[57], "AGCStreamTokenEndOfTileProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[60], "AGCStreamTokenExecuteIndirectESLGenerationVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[63], "AGCStreamTokenExecuteIndirectRangeExecutionVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[66], "AGCStreamTokenExecuteIndirectRangeExecutionComputeShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[69], "AGCStreamTokenExecuteIndirectCDMPatchUpShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[72], "AGCStreamTokenBVHBuilderShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[75], "AGCStreamTokenTileDispatchVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[78], "AGCStreamTokenPassthroughObjectProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[81], "AGCStreamTokenDCMPDebugComputeProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[84], "AGCStreamTokenVisibilityVertexClearShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[87], "AGCStreamTokenClearVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[90], "AGCStreamTokenResolveVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[93], "AGCStreamTokenBlitVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[96], "AGCStreamTokenVDMStateSyncProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[99], "AGCStreamTokenContextSaveProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[102], "AGCStreamTokenContextRestoreProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[105], "AGCStreamTokenToggledContextSaveProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[108], "AGCStreamTokenToggledContextRestoreProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[111], "AGCStreamTokenComputeFlushProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[114], "AGCStreamTokenComputeFlushProgramWithFWInterrupt");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[117], "AGCStreamTokenComputeFenceProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[120], "AGCStreamTokenComputeTGSizeOptimizationProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[123], "AGCStreamTokenComputeProgressMarkerProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[126], "AGCStreamTokenComputeControlFlowPredicateProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[129], "AGCStreamTokenSwTessellationNonBucketedEmitDrawCommandsVSProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[132], "AGCStreamTokenSwTessellationBucketedComputeInstanceCountsVSProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[135], "AGCStreamTokenSwTessellationBucketedSumInstanceCountsVSProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[138], "AGCStreamTokenSwTessellationBucketedEmitDrawCommandsVSProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[141], "AGCStreamTokenVDMNOPDBGProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[144], "AGCStreamTokenSwTessellationBucketedClearInstanceCountsProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[147], "AGCStreamTokenUtilityProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[150], "AGCStreamTokenDummyFeedbackFragmentShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[153], "AGCStreamTokenNumGfxShaders");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[156], "AGCStreamTokenMetalDriverIntersectionProgram");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[159], "AGCStreamTokenGeometryPipelineEmulationUMDAllocationShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[162], "AGCStreamTokenGeometryPipelineEmulationFWAllocationSetupShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[165], "AGCStreamTokenGeometryPipelineEmulationFWAllocationPostObjectShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[168], "AGCStreamTokenGeometryPipelineEmulationFWAllocationPreMeshShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[171], "AGCStreamTokenBitCodeGLIR");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[174], "AGCStreamTokenVertexContextStateGL");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[177], "AGCStreamTokenFragmentContextStateGL");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[180], "AGCStreamTokenVertexContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[183], "AGCStreamTokenObjectContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[186], "AGCStreamTokenMeshContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[189], "AGCStreamTokenFragmentContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[192], "AGCStreamTokenSamplerRemapState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[195], "AGCStreamTokenSamplerPCFState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[198], "AGCStreamTokenDrawBufferState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[201], "AGCStreamTokenTileState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[204], "AGCStreamTokenBackgroundObjectState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[207], "AGCStreamTokenEndOfTileState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[210], "AGCStreamToken3DBlitState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[213], "AGCStreamTokenTABlitState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[216], "AGCStreamTokenCDMBlitState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[219], "AGCStreamTokenBlitSparseState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[222], "AGCStreamTokenBlitFastClearState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[225], "AGCStreamTokenVaryingSemantics");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[228], "AGCStreamTokenVaryingTypes");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[231], "AGCStreamTokenClearFragmentColorMaskState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[234], "AGCStreamTokenComputeContextStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[237], "AGCStreamTokenDynamicLibraryStateAGP");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[240], "AGCStreamTokenTexUnitBiasState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[243], "AGCStreamTokenTessellationDriverState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[246], "AGCStreamTokenExecuteIndirectDriverState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[249], "AGCStreamTokenDriverIntersectionState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[252], "AGCStreamTokenUserIntersectionState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[255], "AGCStreamTokenBVHBuilderState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[258], "AGCStreamTokenComputeControlFlowPredicateState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[261], "AGCStreamTokenTileDispatchVertexState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[264], "AGCStreamTokenPassthroughObjectProgramState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[267], "AGCStreamTokenDCMPDebugComputeProgramState");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[270], "AGCStreamTokenGPUGatherVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[273], "AGCStreamTokenGPUGatherComputeShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[276], "AGCStreamTokenPDSPatchUpVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[279], "AGCStreamTokenPDSPatchUpComputeShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[282], "AGCStreamTokenVRRPatchVertexShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[285], "AGCStreamTokenBlitVertexFastClearShader");
    std::string::basic_string[abi:nn180100]<0>(&agcStreamToken2String::mapToken2String[288], "AGCStreamTokenEnd");
    qword_1EF8EA100 = 0;
    xmmword_1EF8EA0F0 = 0u;
    __cxa_atexit((void (*)(void *))std::array<std::string,98ul>::~array, agcStreamToken2String::mapToken2String, &dword_1C3C54000);
  }
  v10 = (const std::string::value_type *)&agcStreamToken2String::mapToken2String[3 * v8];
  if (v10[23] < 0)
    v10 = *(const std::string::value_type **)v10;
  v11 = std::string::append(&v31, v10);
  *a2 = *v11;
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMTextureFetchFragmentShader::getShaderType(AGCLLVMTextureFetchFragmentShader *this)
{
  return 19;
}

_QWORD *AGCLLVMTextureFetchFragmentShader::wrapperName@<X0>(AGCLLVMTextureFetchFragmentShader *this@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, AGCLLVMTextureFetchFragmentShader::wrapperName(void)const::names[**((_DWORD **)this + 86) & 0xF]);
}

void `non-virtual thunk to'AGCLLVMTextureFetchFragmentShader::~AGCLLVMTextureFetchFragmentShader(AGCLLVMTextureFetchFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this + 632));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this + 632));
  JUMPOUT(0x1CAA2D68CLL);
}

void `virtual thunk to'AGCLLVMTextureFetchFragmentShader::~AGCLLVMTextureFetchFragmentShader(AGCLLVMTextureFetchFragmentShader *this)
{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this
                                                                    + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                    + 704));
}

{
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMTextureFetchFragmentShader *)((char *)this
                                                                    + *(_QWORD *)(*(_QWORD *)this - 48)
                                                                    + 704));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMTextureFetchFragmentShader::wrapperName@<X0>(AGCLLVMTextureFetchFragmentShader *this@<X0>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, AGCLLVMTextureFetchFragmentShader::wrapperName(void)const::names[**(_DWORD **)((char *)this+ *(_QWORD *)(*(_QWORD *)this - 64)+ 688) & 0xF]);
}

const char *`virtual thunk to'AGCLLVMTextureFetchFragmentShader::dumpType(AGCLLVMTextureFetchFragmentShader *this)
{
  int v1;
  const char *v2;

  v1 = *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 72) + 696);
  v2 = "texture_fetch";
  if (v1 == 14)
    v2 = "blit3D";
  if (v1 == 12)
    return "resolve_gl";
  else
    return v2;
}

uint64_t `virtual thunk to'AGCLLVMTextureFetchFragmentShader::getShaderType(AGCLLVMTextureFetchFragmentShader *this)
{
  return 19;
}

void `virtual thunk to'AGCLLVMTextureFetchFragmentShader::getCompilationKeyDescription(AGCLLVMTextureFetchFragmentShader *this@<X0>, std::string *a2@<X8>)
{
  AGCLLVMTextureFetchFragmentShader::getCompilationKeyDescription((AGCLLVMTextureFetchFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 136)), a2);
}

uint64_t std::array<std::string,98ul>::~array(uint64_t a1)
{
  uint64_t v2;

  v2 = 2352;
  do
  {
    if (*(char *)(a1 + v2 - 1) < 0)
      operator delete(*(void **)(a1 + v2 - 24));
    v2 -= 24;
  }
  while (v2);
  return a1;
}

uint64_t AGCLLVMDriverCDMBlitShader::compile(AGCLLVMDriverCDMBlitShader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  llvm::GlobalValue *v5;
  const char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t result;
  void *__p[2];
  char v34;

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v3 = v2 + 24;
  for (i = *(_QWORD *)(v2 + 32); i != v3; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v5 = (llvm::GlobalValue *)(i - 56);
    else
      v5 = 0;
    if ((llvm::GlobalValue::isDeclaration(v5) & 1) == 0)
    {
      (*(void (**)(char *, llvm::GlobalValue *))(*(_QWORD *)((char *)this
                                                                      + *(_QWORD *)(*(_QWORD *)this - 24))
                                                          + 168))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24), v5);
      break;
    }
  }
  AGCLLVMObject::enableTempRegistersLimit((AGCLLVMDriverCDMBlitShader *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)));
  v6 = (const char *)(*(uint64_t (**)(AGCLLVMDriverCDMBlitShader *))(*(_QWORD *)this + 48))(this);
  if (dumpShaderToFile(v6))
  {
    v7 = (*(uint64_t (**)(AGCLLVMDriverCDMBlitShader *))(*(_QWORD *)this + 48))(this);
    printMessage((char **)&AGCPrinter, "------ Start compilation key description for %s shader %u  ------", v8, v9, v10, v11, v12, v13, v7);
    (*(void (**)(void **__return_ptr, AGCLLVMDriverCDMBlitShader *))(*(_QWORD *)this + 64))(__p, this);
    if (v34 >= 0)
      v20 = __p;
    else
      LOBYTE(v20) = __p[0];
    printMessage((char **)&AGCPrinter, "%s", v14, v15, v16, v17, v18, v19, (char)v20);
    if (v34 < 0)
      operator delete(__p[0]);
    v21 = (*(uint64_t (**)(AGCLLVMDriverCDMBlitShader *))(*(_QWORD *)this + 48))(this);
    printMessage((char **)&AGCPrinter, "------ End compilation key description for %s shader %u  ------", v22, v23, v24, v25, v26, v27, v21);
  }
  v28 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v29 = *((_QWORD *)v28 + 58);
  v30 = *((_QWORD *)v28 + 46);
  __p[0] = (void *)0x10000;
  v31 = AGCLLVMCtx::compile(v29, (uint64_t)v28, v30, 1, 3, __p, 0);
  result = 0;
  if (v31)
    return (*(uint64_t (**)(AGCLLVMDriverCDMBlitShader *))(*(_QWORD *)this + 40))(this);
  return result;
}

void AGCLLVMDriverCDMBlitShader::~AGCLLVMDriverCDMBlitShader(AGCLLVMDriverCDMBlitShader *this)
{
  uint64_t v1;

  AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 128));
}

{
  uint64_t v1;

  AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader(this);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 128));
  JUMPOUT(0x1CAA2D68CLL);
}

BOOL AGCLLVMDriverCDMShader::constructReply(AGCLLVMDriverCDMShader *this)
{
  _BOOL8 v2;
  char *v3;
  char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  char *v27;
  flatbuffers::FlatBufferBuilder *v28;
  int v29;
  int v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  flatbuffers::FlatBufferBuilder *v35;
  int v36;
  const char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  flatbuffers::FlatBufferBuilder *v45;
  int v46;
  flatbuffers::FlatBufferBuilder *v47;
  int v48;
  const char *v49;
  int v51;
  char *v52[2];

  v2 = AGCDeserializedReply::deserialize((AGCLLVMDriverCDMShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 472), *(_DWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 152), *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 160));
  if (v2)
  {
    AGCLLVMObject::validateBackendReply((AGCLLVMDriverCDMShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
    v3 = (char *)AGCLLVMObject::constructFlatReply((AGCLLVMDriverCDMShader *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)));
    v5 = (__int16)v4;
    v52[0] = v3;
    v52[1] = v4;
    AGCLLVMDriverShader::setGatherMasks((char *)this, v52);
    v6 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v3, v5);
    v7 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 680))(v7))
    {
      v8 = 0;
    }
    else
    {
      v51 = v6;
      v9 = 0;
      if (*(_DWORD *)(*((_QWORD *)this + 9) + 8))
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        do
        {
          v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v14 = v13 + 2472;
          v13[2542] = 1;
          v15 = *((_DWORD *)v13 + 626) - *((_DWORD *)v13 + 630) + *((_DWORD *)v13 + 628);
          flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v13 + 2472, 4, v12);
          flatbuffers::FlatBufferBuilder::AddElement<signed char>(v14, 6, *(char *)(**((_QWORD **)this + 9) + 4 * v12));
          v16 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v14, v15);
          v17 = v16;
          if ((unint64_t)v10 >= v11)
          {
            v19 = (v10 - v9) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              abort();
            if ((uint64_t)(v11 - (_QWORD)v9) >> 1 > v20)
              v20 = (uint64_t)(v11 - (_QWORD)v9) >> 1;
            if (v11 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v20;
            if (v21)
              v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v21);
            else
              v22 = 0;
            v23 = (char *)(v21 + 4 * v19);
            *(_DWORD *)v23 = v17;
            v18 = v23 + 4;
            while (v10 != v9)
            {
              v24 = *((_DWORD *)v10 - 1);
              v10 -= 4;
              *((_DWORD *)v23 - 1) = v24;
              v23 -= 4;
            }
            v11 = v21 + 4 * v22;
            if (v9)
              operator delete(v9);
            v9 = v23;
          }
          else
          {
            *(_DWORD *)v10 = v16;
            v18 = v10 + 4;
          }
          ++v12;
          v10 = v18;
        }
        while (v12 < *(unsigned int *)(*((_QWORD *)this + 9) + 8));
      }
      else
      {
        v18 = 0;
      }
      if (v18 == v9)
        v25 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>,std::allocator<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>>>(std::vector<flatbuffers::Offset<AGCCodeTranslator::ComputeVIInput>> const&)::t;
      else
        v25 = v9;
      v26 = flatbuffers::FlatBufferBuilder::CreateVector<AGCCodeTranslator::VertexShaderOutIterator>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472, (uint64_t)v25, (v18 - v9) >> 2);
      v27 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v28 = (flatbuffers::FlatBufferBuilder *)(v27 + 2472);
      v27[2542] = 1;
      v29 = *((_DWORD *)v27 + 626) - *((_DWORD *)v27 + 630) + *((_DWORD *)v27 + 628);
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v27 + 2472, v26);
      v30 = flatbuffers::FlatBufferBuilder::EndTable(v28, v29);
      if (v9)
        operator delete(v9);
      v8 = v30;
      v6 = v51;
    }
    v31 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v32 = v31 + 2472;
    v31[2542] = 1;
    v33 = *((_DWORD *)v31 + 626) - *((_DWORD *)v31 + 630) + *((_DWORD *)v31 + 628);
    flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v31 + 2472, v6);
    v34 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 680))(v34))
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslatorG10::ShaderInfo>(v32, v8);
    v35 = (AGCLLVMDriverCDMShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472);
    v36 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v32, v33);
    flatbuffers::FlatBufferBuilder::Finish(v35, v36, v37);
    AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslator::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMDriverCDMShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2472));
    v38 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 680))(v38))
    {
      v39 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v40 = v39 + 2568;
      v41 = *((_DWORD *)this + 20);
      v39[2638] = 1;
      v42 = *((_DWORD *)v39 + 650) - *((_DWORD *)v39 + 654) + *((_DWORD *)v39 + 652);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned int>(v39 + 2568, 4, v41);
      flatbuffers::FlatBufferBuilder::AddElement<unsigned char>(v40, 6, 0, 0);
      v43 = flatbuffers::FlatBufferBuilder::EndTable((flatbuffers::FlatBufferBuilder *)v40, v42);
      v44 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v45 = (flatbuffers::FlatBufferBuilder *)(v44 + 2568);
      v44[2638] = 1;
      v46 = *((_DWORD *)v44 + 650) - *((_DWORD *)v44 + 654) + *((_DWORD *)v44 + 652);
      flatbuffers::FlatBufferBuilder::AddOffset<AGCCodeTranslator::ShaderInfo>(v44 + 2568, v43);
      v47 = (AGCLLVMDriverCDMShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568);
      v48 = flatbuffers::FlatBufferBuilder::EndTable(v45, v46);
      flatbuffers::FlatBufferBuilder::Finish(v47, v48, v49);
      AGCLLVMObject::dumpTranslatorMetadata<AGCCodeTranslatorG10::CompileReplyBinarySchema>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (AGCLLVMDriverCDMShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 2568));
    }
  }
  return v2;
}

const char *AGCLLVMDriverCDMBlitShader::dumpType(AGCLLVMDriverCDMBlitShader *this)
{
  return "cdm-blit-driver";
}

uint64_t AGCLLVMDriverCDMBlitShader::getShaderType(AGCLLVMDriverCDMBlitShader *this)
{
  return 22;
}

_QWORD *AGCLLVMDriverCDMBlitShader::getCompilationKeyDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

_QWORD *AGCLLVMDriverCDMBlitShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.cdm_blit");
}

uint64_t `virtual thunk to'AGCLLVMDriverCDMBlitShader::compile(AGCLLVMDriverCDMBlitShader *this)
{
  return AGCLLVMDriverCDMBlitShader::compile((AGCLLVMDriverCDMBlitShader *)((char *)this
                                                                          + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void `virtual thunk to'AGCLLVMDriverCDMBlitShader::~AGCLLVMDriverCDMBlitShader(AGCLLVMDriverCDMBlitShader *this)
{
  uint64_t v1;

  AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader((AGCLLVMDriverCDMBlitShader *)((char *)this
                                                                               + *(_QWORD *)(*(_QWORD *)this - 48)));
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 128));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 48);
  AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader((AGCLLVMDriverCDMShader *)v1);
  AGCLLVMObject::~AGCLLVMObject((AGCLLVMObject *)(v1 + 128));
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *`virtual thunk to'AGCLLVMDriverCDMBlitShader::wrapperName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "agc.cdm_blit");
}

const char *`virtual thunk to'AGCLLVMDriverCDMBlitShader::dumpType(AGCLLVMDriverCDMBlitShader *this)
{
  return "cdm-blit-driver";
}

uint64_t `virtual thunk to'AGCLLVMDriverCDMBlitShader::getShaderType(AGCLLVMDriverCDMBlitShader *this)
{
  return 22;
}

_QWORD *`virtual thunk to'AGCLLVMDriverCDMBlitShader::getCompilationKeyDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "{ /* No compilation key */ }");
}

BOOL `virtual thunk to'AGCLLVMDriverCDMShader::constructReply(AGCLLVMDriverCDMShader *this)
{
  return AGCLLVMDriverCDMShader::constructReply((AGCLLVMDriverCDMShader *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 152)));
}

void AGCLLVMDriverCDMShader::~AGCLLVMDriverCDMShader(AGCLLVMDriverCDMShader *this)
{
  void **v1;
  uint64_t i;
  void *v3;
  uint64_t j;
  void *v6;
  uint64_t k;
  void *v9;

  *(_QWORD *)this = off_1E7EBFE98;
  *((_QWORD *)this + 16) = &off_1E7EBFFB8;
  *((_QWORD *)this + 20) = &off_1E7EC00A8;
  v1 = (void **)*((_QWORD *)this + 9);
  if (v1)
  {
    for (i = 0; i != -9; i -= 3)
    {
      v3 = v1[i + 31];
      if (v3 != (void *)-8192 && v3 != (void *)-4096 && v3 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v1[i + 29]);
    }
    for (j = 0; j != -9; j -= 3)
    {
      v6 = v1[j + 22];
      if (v6 != (void *)-8192 && v6 != (void *)-4096 && v6 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v1[j + 20]);
    }
    for (k = 0; k != -9; k -= 3)
    {
      v9 = v1[k + 13];
      if (v9 != (void *)-8192 && v9 != (void *)-4096 && v9 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)&v1[k + 11]);
    }
    if (*v1 != v1 + 2)
      free(*v1);
    MEMORY[0x1CAA2D68C](v1, 0x10A0C40A3700DFBLL);
  }
}

uint64_t *AGCLLVMDriverShader::AGCLLVMDriverShader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v3 - 24)) = a2[1];
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) = a2[2];
  *((_BYTE *)a1 + 8) = 0;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  a1[8] = 0;
  v4 = operator new();
  v5 = MEMORY[0x1CAA2CC90](v4, &unk_1C3E4D9BB, 0, *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 392));
  v6 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 368) = v5;
  v7 = (uint64_t)a1 + *(_QWORD *)(v6 - 24);
  v8 = *(_QWORD *)(v7 + 368);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 464) + 32);
  v10 = *(void **)(v9 + 8);
  if (v10)
    v11 = strlen(*(const char **)(v9 + 8));
  else
    v11 = 0;
  llvm::Module::setTargetTriple(v8, v10, v11);
  v12 = *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 464) + 32);
  if (*(_QWORD *)(v12 + 16))
    strlen(*(const char **)(v12 + 16));
  llvm::Module::setDataLayout();
  v13 = *a1;
  *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 336) = *(uint64_t *)((char *)a1
                                                                                         + *(_QWORD *)(*a1 - 24)
                                                                                         + 368);
  *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v13 - 24) + 400) + 344) = (char *)a1 + *(_QWORD *)(v13 - 24) + 2776;
  *(_QWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v13 - 24) + 400) + 352) = (char *)a1 + *(_QWORD *)(v13 - 24) + 2856;
  AGCLLVMObject::disableConstantHoisting((AGCLLVMObject *)((char *)a1 + *(_QWORD *)(v13 - 24)));
  v14 = *a1;
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 136) = -1;
  *(_DWORD *)(*(uint64_t *)((char *)a1 + *(_QWORD *)(v14 - 24) + 400) + 104) = -1;
  return a1;
}

uint64_t AGCLLVMDriverShader::buildRegionOffsets(AGCLLVMDriverShader *this, const char *a2)
{
  llvm::Value *v3;
  char *v4;
  llvm::Value *v5;
  llvm::IRBuilderBase *v6;
  llvm::Value *v7;
  llvm::Value *InsertElement;
  char *v9;
  llvm::Value *v10;
  llvm::IRBuilderBase *v11;
  llvm::Value *v12;
  _BYTE v14[32];
  __int16 v15;
  llvm::Value *v16;
  llvm::Value *v17;

  v16 = 0;
  v17 = 0;
  AGCLLVMDriverShader::buildRegionOffsets(this, &v17, &v16, a2);
  v3 = (llvm::Value *)llvm::UndefValue::get();
  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v5 = v17;
  v15 = 257;
  v6 = (llvm::IRBuilderBase *)(v4 + 40);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v6, v3, v5, v7, (const llvm::Twine *)v14);
  v9 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v10 = v16;
  v15 = 257;
  v11 = (llvm::IRBuilderBase *)(v9 + 40);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement(v11, InsertElement, v10, v12, (const llvm::Twine *)v14);
}

llvm::Value *AGCLLVMDriverShader::buildRegionOffsets(AGCLLVMDriverShader *this, llvm::Value **a2, llvm::Value **a3, const char *a4)
{
  char v8;
  llvm::GlobalVariable *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  llvm::Value *v14;
  llvm::Type *v15;
  llvm::Value *AlignedLoad;
  llvm::IRBuilderBase *v17;
  llvm::Value *v18;
  llvm::IRBuilderBase *v19;
  llvm::Value *v20;
  llvm::Value *result;
  _QWORD v22[4];
  __int16 v23;

  v8 = 1;
  v9 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  HIBYTE(v23) = 1;
  if (*a4)
  {
    v22[0] = a4;
    v8 = 3;
  }
  LOBYTE(v23) = v8;
  llvm::GlobalVariable::GlobalVariable();
  *((_BYTE *)v9 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v10 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v11 = *((_QWORD *)v10 + 47);
  v12 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v10 + 32), v9);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v11, v12);
  v13 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v23 = 257;
  v15 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v9, v14);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v13 + 5, v15, (uint64_t)v9, 0, (uint64_t)v22);
  v17 = (AGCLLVMDriverShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v23 = 257;
  *a2 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v17, AlignedLoad, v18, (const llvm::Twine *)v22);
  v19 = (AGCLLVMDriverShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v23 = 257;
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  result = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v19, AlignedLoad, v20, (const llvm::Twine *)v22);
  *a3 = result;
  return result;
}

llvm::Value *AGCLLVMDriverShader::buildPack(_QWORD *a1, int a2, llvm::Value *a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  llvm::Value *InsertElement;
  llvm::IRBuilderBase *v11;
  llvm::Value *v12;
  llvm::Type **v13;
  const llvm::Twine *v14;
  llvm::IRBuilderBase *v15;
  llvm::IRBuilderBase *v16;
  llvm::Value *v17;
  uint64_t ShuffleVector;
  char *v19;
  uint64_t v20;
  llvm::IRBuilderBase *v21;
  llvm::Value *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  llvm::IRBuilderBase *v26;
  llvm::Value *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  llvm::IRBuilderBase *v31;
  llvm::Value *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  llvm::IRBuilderBase *v36;
  llvm::Value *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  llvm::IRBuilderBase *v46;
  llvm::Value *v47;
  uint64_t Element;
  char *v49;
  llvm::IRBuilderBase *v50;
  uint64_t v51;
  uint64_t Cast;
  llvm::Value *FMul;
  llvm::Type *v54;
  llvm::IRBuilderBase *v56;
  llvm::Value *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  llvm::IRBuilderBase *v64;
  llvm::Value *v65;
  llvm::Type **v66;
  llvm::Type *v67;
  llvm::Value *IntCast;
  llvm::Value *v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  _BYTE v73[32];
  __int16 v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  uint64_t v94;
  int v95;
  __int128 v96;
  uint64_t v97;
  int v98;
  _BYTE v99[32];
  __int16 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;

  v4 = a4;
  v106 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
    v7 = *(_DWORD *)(a4 + 32);
  else
    v7 = 1;
  switch(a2)
  {
    case 16:
      v8 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v9 = *((_QWORD *)v8 + 50);
      v81 = *(_OWORD *)(v8 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 40));
      v83 = *((_DWORD *)v8 + 34);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, _QWORD, _QWORD))(*(_QWORD *)v9 + 104))(v9, &v81, 6, v4, a3, 0, 0);
      if (v82)
        goto LABEL_28;
      return InsertElement;
    case 17:
      v101 = llvm::ConstantInt::get();
      v102 = llvm::ConstantInt::get();
      v103 = llvm::ConstantInt::get();
      v16 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v17 = (llvm::Value *)llvm::ConstantVector::get();
      v100 = 257;
      ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector(v16, a3, a3, v17, (const llvm::Twine *)v99);
      v19 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v20 = *((_QWORD *)v19 + 50);
      v96 = *(_OWORD *)(v19 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v19 + 40));
      v98 = *((_DWORD *)v19 + 34);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 104))(v20, &v96, 0, v4, ShuffleVector, 1, 0);
      if (v97)
        goto LABEL_28;
      return InsertElement;
    case 18:
      v101 = llvm::ConstantInt::get();
      v102 = llvm::ConstantInt::get();
      v103 = llvm::ConstantInt::get();
      v104 = llvm::ConstantInt::get();
      v21 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v22 = (llvm::Value *)llvm::ConstantVector::get();
      v100 = 257;
      v23 = llvm::IRBuilderBase::CreateShuffleVector(v21, a3, a3, v22, (const llvm::Twine *)v99);
      v24 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v25 = *((_QWORD *)v24 + 50);
      v93 = *(_OWORD *)(v24 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v24 + 40));
      v95 = *((_DWORD *)v24 + 34);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 104))(v25, &v93, 1, v4, v23, 1, 0);
      if (v94)
        goto LABEL_28;
      return InsertElement;
    case 19:
      v101 = llvm::ConstantInt::get();
      v102 = llvm::ConstantInt::get();
      v103 = llvm::ConstantInt::get();
      v104 = llvm::ConstantInt::get();
      v26 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v27 = (llvm::Value *)llvm::ConstantVector::get();
      v100 = 257;
      v28 = llvm::IRBuilderBase::CreateShuffleVector(v26, a3, a3, v27, (const llvm::Twine *)v99);
      v29 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v30 = *((_QWORD *)v29 + 50);
      v90 = *(_OWORD *)(v29 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v29 + 40));
      v92 = *((_DWORD *)v29 + 34);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 104))(v30, &v90, 1, v4, v28, 1, 0);
      if (v91)
        goto LABEL_28;
      return InsertElement;
    case 20:
      v101 = llvm::ConstantInt::get();
      v102 = llvm::ConstantInt::get();
      v103 = llvm::ConstantInt::get();
      v104 = llvm::ConstantInt::get();
      v31 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v32 = (llvm::Value *)llvm::ConstantVector::get();
      v100 = 257;
      v33 = llvm::IRBuilderBase::CreateShuffleVector(v31, a3, a3, v32, (const llvm::Twine *)v99);
      v34 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v35 = *((_QWORD *)v34 + 50);
      v87 = *(_OWORD *)(v34 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v34 + 40));
      v89 = *((_DWORD *)v34 + 34);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v35 + 104))(v35, &v87, 2, v4, v33, 1, 0);
      if (v88)
        goto LABEL_28;
      return InsertElement;
    case 21:
      v101 = llvm::ConstantInt::get();
      v102 = llvm::ConstantInt::get();
      v103 = llvm::ConstantInt::get();
      v104 = llvm::ConstantInt::get();
      v36 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v37 = (llvm::Value *)llvm::ConstantVector::get();
      v100 = 257;
      v38 = llvm::IRBuilderBase::CreateShuffleVector(v36, a3, a3, v37, (const llvm::Twine *)v99);
      v39 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v40 = *((_QWORD *)v39 + 50);
      v84 = *(_OWORD *)(v39 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v39 + 40));
      v86 = *((_DWORD *)v39 + 34);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v40 + 104))(v40, &v84, 3, v4, v38, 1, 0);
      if (v85)
        goto LABEL_28;
      return InsertElement;
    case 22:
      v41 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v42 = *((_QWORD *)v41 + 50);
      v78 = *(_OWORD *)(v41 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v41 + 40));
      v80 = *((_DWORD *)v41 + 34);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, _QWORD, _QWORD))(*(_QWORD *)v42 + 104))(v42, &v78, 7, v4, a3, 0, 0);
      if (v79)
        goto LABEL_28;
      return InsertElement;
    case 23:
      v43 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v44 = *((_QWORD *)v43 + 50);
      v75 = *(_OWORD *)(v43 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v43 + 40));
      v77 = *((_DWORD *)v43 + 34);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, _QWORD, _QWORD))(*(_QWORD *)v44 + 104))(v44, &v75, 8, v4, a3, 0, 0);
      if (v76)
        goto LABEL_28;
      return InsertElement;
    case 24:
      v45 = llvm::ConstantFP::get();
      v46 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v100 = 257;
      v47 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement(v46, a3, v47, (const llvm::Twine *)v99);
      v49 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v50 = (llvm::IRBuilderBase *)(v49 + 40);
      v51 = *((_QWORD *)v49 + 25);
      v100 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v49 + 40), 49, Element, v51, (uint64_t)v99);
      v105 = 257;
      FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v50, Cast, v45, (uint64_t)&v101);
      v54 = *(llvm::Type **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 232);
      v74 = 257;
      return (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v50, FMul, v54, (const llvm::Twine *)v73);
    case 25:
      v101 = llvm::ConstantInt::get();
      v102 = llvm::ConstantInt::get();
      v103 = llvm::ConstantInt::get();
      v104 = llvm::ConstantInt::get();
      v56 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v57 = (llvm::Value *)llvm::ConstantVector::get();
      v100 = 257;
      v58 = llvm::IRBuilderBase::CreateShuffleVector(v56, a3, a3, v57, (const llvm::Twine *)v99);
      v59 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v60 = *((_QWORD *)v59 + 50);
      v70 = *(_OWORD *)(v59 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v59 + 40));
      v72 = *((_DWORD *)v59 + 34);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v60 + 128))(v60, &v70, v58);
      if (v71)
LABEL_28:
        llvm::MetadataTracking::untrack();
      return InsertElement;
    default:
      if (v7 == 4)
      {
        v15 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
        v100 = 257;
        v14 = (const llvm::Twine *)v99;
        v13 = (llvm::Type **)a3;
      }
      else
      {
        if (v7 != 1)
        {
          InsertElement = (llvm::Value *)llvm::UndefValue::get();
          if (v7)
          {
            v62 = 0;
            v63 = v7;
            do
            {
              v64 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
              v100 = 257;
              v65 = (llvm::Value *)llvm::ConstantInt::get();
              v66 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement(v64, a3, v65, (const llvm::Twine *)v99);
              v67 = (llvm::Type *)v4;
              if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
                v67 = **(llvm::Type ***)(v4 + 16);
              v105 = 257;
              IntCast = llvm::IRBuilderBase::CreateIntCast(v64, v66, v67, 0, (const llvm::Twine *)&v101);
              v74 = 257;
              v69 = (llvm::Value *)llvm::ConstantInt::get();
              InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v64, InsertElement, IntCast, v69, (const llvm::Twine *)v73);
              ++v62;
            }
            while (v63 != v62);
          }
          return InsertElement;
        }
        v11 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
        v100 = 257;
        v12 = (llvm::Value *)llvm::ConstantInt::get();
        v13 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement(v11, a3, v12, (const llvm::Twine *)v99);
        if ((*(_DWORD *)(v4 + 8) & 0xFE) == 0x12)
          v4 = **(_QWORD **)(v4 + 16);
        v105 = 257;
        v14 = (const llvm::Twine *)&v101;
        v15 = v11;
      }
      return llvm::IRBuilderBase::CreateIntCast(v15, v13, (llvm::Type *)v4, 0, v14);
  }
}

uint64_t AGCLLVMDriverShader::getFormatInfo(uint64_t result, _QWORD *a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  char *v8;

  switch(a3)
  {
    case 1:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 216);
      goto LABEL_17;
    case 2:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 224);
      goto LABEL_17;
    case 3:
    case 24:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 232);
      goto LABEL_22;
    case 4:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 184);
      goto LABEL_19;
    case 5:
      v7 = 0;
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 200);
      goto LABEL_23;
    case 6:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 264);
      goto LABEL_17;
    case 7:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 272);
      goto LABEL_17;
    case 8:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 280);
      goto LABEL_22;
    case 9:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 248);
      goto LABEL_19;
    case 10:
      v7 = 0;
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 256);
      goto LABEL_23;
    case 11:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 328);
      goto LABEL_17;
    case 12:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 336);
LABEL_17:
      v7 = 8;
      goto LABEL_23;
    case 13:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 312);
LABEL_19:
      v7 = 1;
      goto LABEL_23;
    case 14:
      v7 = 0;
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 320);
      goto LABEL_23;
    case 15:
      v4 = *(_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 344);
LABEL_22:
      v7 = 7;
LABEL_23:
      v6 = v4;
      break;
    case 16:
      v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      v4 = *((_QWORD *)v8 + 29);
      v6 = *((_QWORD *)v8 + 42);
      v7 = 8;
      break;
    case 17:
      v5 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
      v4 = v5[28];
      goto LABEL_26;
    case 18:
    case 19:
    case 20:
    case 21:
      v3 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
      v4 = v3[28];
      goto LABEL_28;
    case 22:
    case 23:
      v5 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
      v4 = v5[29];
LABEL_26:
      v6 = v5[36];
      goto LABEL_29;
    case 25:
      v3 = (_QWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24));
      v4 = v3[42];
LABEL_28:
      v6 = v3[39];
LABEL_29:
      v7 = 1;
      break;
    default:
      v4 = 0;
      v6 = 0;
      v7 = 10;
      break;
  }
  *(_QWORD *)result = v6;
  *(_QWORD *)(result + 8) = v4;
  *(_DWORD *)(result + 16) = v7;
  return result;
}

llvm::Value *AGCLLVMDriverShader::buildUnpack(_QWORD *a1, int a2, llvm::Value *a3, uint64_t a4)
{
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  llvm::Value *v11;
  llvm::IRBuilderBase *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t v27;
  llvm::IRBuilderBase *v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::IRBuilderBase *v31;
  uint64_t Add;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  llvm::Type *v36;
  uint64_t UIToFP;
  uint64_t *v38;
  uint64_t Select;
  char *v40;
  uint64_t v41;
  uint64_t Cast;
  char *v43;
  uint64_t v44;
  llvm::Value *v45;
  __int128 v47;
  uint64_t v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  _BYTE v71[32];
  __int16 v72;
  __int128 v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 16:
      v7 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v8 = *((_QWORD *)v7 + 50);
      v56 = *(_OWORD *)(v7 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v7 + 40));
      v58 = *((_DWORD *)v7 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      a3 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, _QWORD, _QWORD))(*(_QWORD *)v8 + 112))(v8, &v56, 6, a4, a3, 0, 0);
      if (v57)
        goto LABEL_35;
      return a3;
    case 17:
      v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v10 = *((_QWORD *)v9 + 50);
      v73 = *(_OWORD *)(v9 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v9 + 40));
      v75 = *((_DWORD *)v9 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v10 + 112))(v10, &v73, 0, a4, a3, 1, 0);
      if (v74)
        llvm::MetadataTracking::untrack();
      v76 = llvm::ConstantInt::get();
      v77 = llvm::ConstantInt::get();
      v78 = llvm::ConstantInt::get();
      v12 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      goto LABEL_41;
    case 18:
      v13 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v14 = *((_QWORD *)v13 + 50);
      v68 = *(_OWORD *)(v13 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v13 + 40));
      v70 = *((_DWORD *)v13 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v14 + 112))(v14, &v68, 1, a4, a3, 1, 0);
      if (v69)
        goto LABEL_14;
      goto LABEL_15;
    case 19:
      v15 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v16 = *((_QWORD *)v15 + 50);
      v65 = *(_OWORD *)(v15 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v15 + 40));
      v67 = *((_DWORD *)v15 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v16 + 112))(v16, &v65, 1, a4, a3, 1, 0);
      if (!v66)
        goto LABEL_39;
      goto LABEL_38;
    case 20:
      v17 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v18 = *((_QWORD *)v17 + 50);
      v62 = *(_OWORD *)(v17 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v17 + 40));
      v64 = *((_DWORD *)v17 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v18 + 112))(v18, &v62, 2, a4, a3, 1, 0);
      if (!v63)
        goto LABEL_15;
LABEL_14:
      llvm::MetadataTracking::untrack();
LABEL_15:
      v76 = llvm::ConstantInt::get();
      v77 = llvm::ConstantInt::get();
      v78 = llvm::ConstantInt::get();
      goto LABEL_40;
    case 21:
      v19 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v20 = *((_QWORD *)v19 + 50);
      v59 = *(_OWORD *)(v19 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v19 + 40));
      v61 = *((_DWORD *)v19 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, uint64_t, _QWORD))(*(_QWORD *)v20 + 112))(v20, &v59, 3, a4, a3, 1, 0);
      if (v60)
        goto LABEL_38;
      goto LABEL_39;
    case 22:
      v21 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v22 = *((_QWORD *)v21 + 50);
      v53 = *(_OWORD *)(v21 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v21 + 40));
      v55 = *((_DWORD *)v21 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      a3 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, _QWORD, _QWORD))(*(_QWORD *)v22 + 112))(v22, &v53, 7, a4, a3, 0, 0);
      if (!v54)
        return a3;
      goto LABEL_35;
    case 23:
      v23 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v24 = *((_QWORD *)v23 + 50);
      v50 = *(_OWORD *)(v23 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v23 + 40));
      v52 = *((_DWORD *)v23 + 34);
      if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
        a4 = **(_QWORD **)(a4 + 16);
      a3 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, llvm::Value *, _QWORD, _QWORD))(*(_QWORD *)v24 + 112))(v24, &v50, 8, a4, a3, 0, 0);
      if (v51)
LABEL_35:
        llvm::MetadataTracking::untrack();
      return a3;
    case 24:
      v25 = llvm::ConstantFP::get();
      v26 = (llvm::Value *)llvm::ConstantInt::get();
      v27 = llvm::ConstantInt::get();
      v28 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v29 = (llvm::Value *)llvm::ConstantInt::get();
      v72 = 257;
      v30 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v28, a3, v29, (const llvm::Twine *)v71);
      v31 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v72 = 257;
      Add = llvm::IRBuilderBase::CreateAdd(v31, v30, v26, (const llvm::Twine *)v71);
      v33 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 200);
      v80 = 257;
      llvm::IRBuilderBase::CreateCast((uint64_t)v31, 49, Add, v33, (uint64_t)&v76);
      v34 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v35 = (uint64_t)(v34 + 40);
      v36 = (llvm::Type *)*((_QWORD *)v34 + 25);
      v72 = 257;
      UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(v34 + 40), v30, v36, (const llvm::Twine *)v71);
      v80 = 257;
      llvm::IRBuilderBase::CreateFDiv(v35, UIToFP, v25, (uint64_t)&v76);
      v38 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
      v72 = 257;
      llvm::IRBuilderBase::CreateICmp(v38, 34, (llvm::CmpInst **)v30, v27, (uint64_t)v71);
      v72 = 257;
      Select = llvm::IRBuilderBase::CreateSelect();
      v40 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v41 = *((_QWORD *)v40 + 29);
      v72 = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(v40 + 40), 49, Select, v41, (uint64_t)v71);
      goto LABEL_42;
    case 25:
      v43 = (char *)a1 + *(_QWORD *)(*a1 - 24);
      v44 = *((_QWORD *)v43 + 50);
      v47 = *(_OWORD *)(v43 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v43 + 40));
      v49 = *((_DWORD *)v43 + 34);
      v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *))(*(_QWORD *)v44 + 120))(v44, &v47, a3);
      if (v48)
LABEL_38:
        llvm::MetadataTracking::untrack();
LABEL_39:
      v76 = llvm::ConstantInt::get();
      v77 = llvm::ConstantInt::get();
      v78 = llvm::ConstantInt::get();
LABEL_40:
      v79 = llvm::ConstantInt::get();
      v12 = (llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
LABEL_41:
      v45 = (llvm::Value *)llvm::ConstantVector::get();
      v72 = 257;
      Cast = llvm::IRBuilderBase::CreateShuffleVector(v12, v11, v11, v45, (const llvm::Twine *)v71);
LABEL_42:
      a3 = (llvm::Value *)Cast;
      break;
    default:
      return a3;
  }
  return a3;
}

uint64_t AGCLLVMDriverShader::linkDriverRuntime(AGCLLVMDriverShader *a1, int a2, llvm::Function *a3)
{
  llvm::Module *MetalRuntime;
  uint64_t v6;

  MetalRuntime = AGCLLVMCtx::loadMetalRuntime(*(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 464), *(llvm::Module **)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 368), a2);
  v6 = *(_QWORD *)a1;
  if (!MetalRuntime)
  {
    std::string::append((std::string *)((char *)a1 + *(_QWORD *)(v6 - 24) + 8), "unable to load helper runtime files");
    v6 = *(_QWORD *)a1;
  }
  if ((AGCLLVMObject::linkCommon((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(v6 - 24)), MetalRuntime, *(unsigned __int8 *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 400) + 1751), a3) & 1) == 0)std::string::append((std::string *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 8), "unable to link helper runtime");
  return AGCLLVMDriverShader::finalizeDriverRuntimeLinking(a1, a3, 1);
}

uint64_t AGCLLVMDriverShader::finalizeDriverRuntimeLinking(AGCLLVMDriverShader *this, llvm::Function *a2, int a3)
{
  llvm::Module *MetalRuntime;
  uint64_t v7;
  uint64_t v8;
  llvm::Module *v9;
  _QWORD *v10;
  _QWORD *v11;
  llvm::GlobalValue *v12;
  BOOL v13;
  llvm::GlobalValue *v14;
  char isDeclaration;
  AGCLLVMAirBuiltins *v16;
  uint64_t result;

  MetalRuntime = AGCLLVMCtx::loadMetalRuntime(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464), *(llvm::Module **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368), 0);
  v7 = *(_QWORD *)this;
  if (!MetalRuntime)
  {
    std::string::append((std::string *)((char *)this + *(_QWORD *)(v7 - 24) + 8), "unable to load math metal runtime files");
    v7 = *(_QWORD *)this;
  }
  if ((AGCLLVMObject::linkCommon((AGCLLVMDriverShader *)((char *)this + *(_QWORD *)(v7 - 24)), MetalRuntime, *(unsigned __int8 *)(*(_QWORD *)((char *)this + *(_QWORD *)(v7 - 24) + 400) + 1751), a2) & 1) == 0)std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), "unable to link metal runtime");
  if (a3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)this - 24);
    v9 = *(llvm::Module **)((char *)this + v8 + 368);
    v10 = (_QWORD *)((char *)v9 + 24);
    v11 = (_QWORD *)*((_QWORD *)v9 + 4);
    if (v11 != (_QWORD *)((char *)v9 + 24))
    {
      do
      {
        v12 = (llvm::GlobalValue *)(v11 - 7);
        v13 = v11 == 0;
        v11 = (_QWORD *)v11[1];
        if (v13)
          v14 = 0;
        else
          v14 = v12;
        isDeclaration = llvm::GlobalValue::isDeclaration(v14);
        if (v14 != a2 && (isDeclaration & 1) == 0)
        {
          llvm::Function::addFnAttr();
          *((_DWORD *)v14 + 8) = *((_DWORD *)v14 + 8) & 0xFFFFBFC0 | 0x4007;
        }
      }
      while (v11 != v10);
      v8 = *(_QWORD *)(*(_QWORD *)this - 24);
      v9 = *(llvm::Module **)((char *)this + v8 + 368);
    }
    llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*(_QWORD *)((char *)this + v8 + 464) + 344), v9);
  }
  v16 = (AGCLLVMAirBuiltins *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)((char *)this
                                                                                              + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                                              + 400)
                                                                                + 816))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), 0, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368));
  result = AGCLLVMAirBuiltins::replaceBuiltins(v16);
  if ((result & 1) == 0)
    result = (uint64_t)std::string::append((std::string *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 8), "failed to replace builtins");
  if (v16)
    return (*(uint64_t (**)(AGCLLVMAirBuiltins *))(*(_QWORD *)v16 + 16))(v16);
  return result;
}

void AGCLLVMDriverShader::mutateAllConstantArgsToSharedRegister(AGCLLVMDriverShader *this, llvm::Function *a2)
{
  AGCLLVMDriverShader *v2;
  unint64_t v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  int v21;
  uint64_t i;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t *v31;
  unsigned int v32;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = 0;
    do
    {
      if ((*((_WORD *)v2 + 9) & 1) != 0)
        llvm::Function::BuildLazyArguments(v2);
      v4 = (_QWORD *)(*((_QWORD *)v2 + 11) + 40 * v3);
      v32 = *(_DWORD *)(*v4 + 8);
      if (*v4)
        v5 = *(_DWORD *)(*v4 + 8) == 15;
      else
        v5 = 0;
      if (v5)
      {
        v31 = (uint64_t *)(*((_QWORD *)v2 + 11) + 40 * v3);
        v6 = v4[1];
        if (v6)
        {
          v7 = 0;
          v8 = 0;
          v9 = 0;
          do
          {
            v10 = *(_QWORD *)(v6 + 24);
            if ((unint64_t)v8 >= v9)
            {
              v11 = (v8 - v7) >> 3;
              v12 = v11 + 1;
              if ((unint64_t)(v11 + 1) >> 61)
LABEL_62:
                abort();
              if ((uint64_t)(v9 - (_QWORD)v7) >> 2 > v12)
                v12 = (uint64_t)(v9 - (_QWORD)v7) >> 2;
              if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
                v13 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v13 = v12;
              if (v13)
                v13 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v13);
              else
                v14 = 0;
              v15 = (char *)(v13 + 8 * v11);
              *(_QWORD *)v15 = v10;
              v16 = v15 + 8;
              while (v8 != v7)
              {
                v17 = *((_QWORD *)v8 - 1);
                v8 -= 8;
                *((_QWORD *)v15 - 1) = v17;
                v15 -= 8;
              }
              v9 = v13 + 8 * v14;
              if (v7)
                operator delete(v7);
              v7 = v15;
              v8 = v16;
            }
            else
            {
              *(_QWORD *)v8 = v10;
              v8 += 8;
            }
            v6 = *(_QWORD *)(v6 + 8);
          }
          while (v6);
          while (v7 != v8)
          {
            v19 = (uint64_t *)*((_QWORD *)v8 - 1);
            v8 -= 8;
            v18 = v19;
            v20 = v8;
            if (v19)
            {
              v21 = *(_DWORD *)(*v18 + 8);
              if (v21 == 15)
              {
                if ((v21 & 0xFE) == 0x12)
                  v21 = *(_DWORD *)(**(_QWORD **)(*v18 + 16) + 8);
                if ((v21 ^ v32) <= 0xFF)
                {
                  *v18 = llvm::PointerType::get();
                  for (i = v18[1]; i; v20 = v8)
                  {
                    v23 = *(_QWORD *)(i + 24);
                    if ((unint64_t)v20 >= v9)
                    {
                      v24 = (v20 - v7) >> 3;
                      v25 = v24 + 1;
                      if ((unint64_t)(v24 + 1) >> 61)
                        goto LABEL_62;
                      if ((uint64_t)(v9 - (_QWORD)v7) >> 2 > v25)
                        v25 = (uint64_t)(v9 - (_QWORD)v7) >> 2;
                      if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
                        v26 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v26 = v25;
                      if (v26)
                        v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v26);
                      else
                        v27 = 0;
                      v28 = (char *)(v26 + 8 * v24);
                      *(_QWORD *)v28 = v23;
                      v8 = v28 + 8;
                      while (v20 != v7)
                      {
                        v29 = *((_QWORD *)v20 - 1);
                        v20 -= 8;
                        *((_QWORD *)v28 - 1) = v29;
                        v28 -= 8;
                      }
                      v9 = v26 + 8 * v27;
                      if (v7)
                        operator delete(v7);
                      v7 = v28;
                    }
                    else
                    {
                      *(_QWORD *)v20 = v23;
                      v8 = v20 + 8;
                    }
                    i = *(_QWORD *)(i + 8);
                  }
                }
              }
            }
          }
        }
        else
        {
          v7 = 0;
        }
        *v31 = llvm::PointerType::get();
        v2 = this;
        if (v7)
          operator delete(v7);
      }
      ++v3;
    }
    while (*((_QWORD *)v2 + 12) > v3);
  }
}

uint64_t llvm::IRBuilderBase::CreateURem(llvm::IRBuilderBase *this, llvm::Value *a2, llvm::Value *a3, const llvm::Twine *a4)
{
  uint64_t v6;

  v6 = llvm::IRBuilderBase::foldConstant((uint64_t)this, 22, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  if (!v6)
  {
    v6 = llvm::BinaryOperator::Create();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, v6, (uint64_t)a4);
  }
  return v6;
}

void AGCLLVMClearVertexDataShader::AGCLLVMClearVertexDataShader(AGCLLVMClearVertexDataShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  llvm::Value *v18;
  int v19;
  llvm::Type *Int32PtrTy;
  llvm::GlobalVariable *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::IRBuilderBase *v26;
  llvm::Value *v27;
  llvm::Value *Add;
  llvm::Type **v29;
  char *v30;
  llvm::Type *v31;
  llvm::IRBuilderBase *v32;
  llvm::Value *AlignedLoad;
  uint64_t GEP;
  char *v35;
  llvm::Type *v36;
  llvm::IRBuilderBase *v37;
  llvm::Value *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  void *__p;
  char v53;
  __int16 v54;
  unsigned int v55;
  _QWORD v56[2];
  _QWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[4];
  __int16 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMClearVertexDataShader *)((char *)this + 80), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t *)this, (uint64_t *)off_1E7EBB010);
  *(_QWORD *)this = off_1E7EBADD0;
  *((_QWORD *)this + 10) = &unk_1E7EBAF10;
  *((_QWORD *)this + 14) = &unk_1E7EBB000;
  *((_QWORD *)this + 9) = 0xFFFFFFFF00000001;
  v55 = 0;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 60) + 464))(*((_QWORD *)this + 60));
  v5 = *(_QWORD *)this;
  if (v4 == 2
    || (*((_DWORD *)this + 19) = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400)
                                                                                            + 440))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400), &v55, 3), v6 = v55, v5 = *(_QWORD *)this, !v55))
  {
    v9 = 0;
  }
  else
  {
    v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v8 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v55);
    v9 = v8;
    v10 = 0;
    do
    {
      *(_QWORD *)&v8[v10] = *((_QWORD *)v7 + 25);
      v10 += 8;
    }
    while (8 * v6 != v10);
    v5 = *(_QWORD *)this;
  }
  (*(void (**)(void **__return_ptr, AGCLLVMClearVertexDataShader *))(v5 + 72))(&__p, this);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v12 = v11;
  if (v53 < 0)
    operator delete(__p);
  *(_WORD *)(v12 + 18) = *(_WORD *)(v12 + 18) & 0xC00F | 0x660;
  __p = "entry";
  v54 = 259;
  operator new();
  v13 = llvm::BasicBlock::BasicBlock();
  v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v14 + 11) = v13;
  *((_QWORD *)v14 + 12) = v13 + 40;
  v15 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 464))(v15) == 2)
  {
    v16 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v17 = *((_QWORD *)v16 + 50);
    v49 = *(_OWORD *)(v16 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v16 + 40));
    v51 = *((_DWORD *)v16 + 34);
    v18 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned int *, uint64_t))(*(_QWORD *)v17 + 456))(v17, &v49, &v55, 3);
    if (v50)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    if ((*(_WORD *)(v12 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v12);
    v19 = *((_DWORD *)this + 19);
    if (v19)
      v18 = (llvm::Value *)(*(_QWORD *)(v12 + 88) + 40 * (v19 - 1) + 40);
    else
      v18 = *(llvm::Value **)(v12 + 88);
  }
  Int32PtrTy = (llvm::Type *)llvm::Type::getInt32PtrTy(*(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 392), (llvm::LLVMContext *)1);
  v21 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  __p = "agc.bufferaddress";
  v54 = 259;
  v22 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v22 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v23 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v24 = *((_QWORD *)v23 + 47);
  v25 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v23 + 32), v21);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
  v26 = (AGCLLVMClearVertexDataShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v54 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v26, v18, v27, (const llvm::Twine *)&__p);
  v29 = (llvm::Type **)llvm::ConstantInt::get();
  v30 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v31 = (llvm::Type *)*((_QWORD *)v30 + 29);
  v32 = (llvm::IRBuilderBase *)(v30 + 40);
  v54 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v30 + 5, Int32PtrTy, (uint64_t)v21, 0, (uint64_t)&__p);
  v60 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP(v32, v31, AlignedLoad, v18, (const llvm::Twine *)v59);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v29, GEP, 0);
  v35 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v36 = (llvm::Type *)*((_QWORD *)v35 + 29);
  v37 = (llvm::IRBuilderBase *)(v35 + 40);
  v54 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v35 + 5, Int32PtrTy, (uint64_t)v21, 0, (uint64_t)&__p);
  v60 = 257;
  v39 = llvm::IRBuilderBase::CreateGEP(v37, v36, v38, Add, (const llvm::Twine *)v59);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v29, v39, 0);
  v40 = *(_QWORD *)(*(_QWORD *)this - 24);
  v41 = *(_QWORD *)((char *)this + v40 + 400);
  if (*(_BYTE *)(v41 + 1729))
  {
    v42 = *(_QWORD *)(v41 + 1392);
    if (v42)
      v43 = strlen(*(const char **)(v41 + 1392));
    else
      v43 = 0;
    v44 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this + v40 + 32, v42, v43, *(_QWORD *)((char *)this + v40 + 176), *(_QWORD *)((char *)this + v40 + 2768), *(_QWORD *)((char *)this + v40 + 200));
    v59[0] = llvm::ConstantInt::get();
    v59[1] = llvm::ConstantFP::get();
    v45 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v54 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v45, *(_QWORD *)(v44 + 24), v44, (uint64_t)v59, 2, (uint64_t)&__p);
    v58[0] = llvm::ConstantInt::get();
    v58[1] = llvm::ConstantFP::get();
    v46 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v54 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v46, *(_QWORD *)(v44 + 24), v44, (uint64_t)v58, 2, (uint64_t)&__p);
    v57[0] = llvm::ConstantInt::get();
    v57[1] = llvm::ConstantFP::get();
    v47 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v54 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v47, *(_QWORD *)(v44 + 24), v44, (uint64_t)v57, 2, (uint64_t)&__p);
    v56[0] = llvm::ConstantInt::get();
    v56[1] = llvm::ConstantFP::get();
    v48 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
    v54 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v48, *(_QWORD *)(v44 + 24), v44, (uint64_t)v56, 2, (uint64_t)&__p);
    v40 = *(_QWORD *)(*(_QWORD *)this - 24);
  }
  llvm::IRBuilderBase::CreateRetVoid((AGCLLVMClearVertexDataShader *)((char *)this + v40 + 40));
  if (v9)
    operator delete(v9);
}

llvm::GlobalVariable *AGCLLVMDriverShader::getImageStateGlobal(AGCLLVMDriverShader *this)
{
  llvm::GlobalVariable *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1780))
    return 0;
  v1 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v4 = *((_QWORD *)v3 + 47);
  v5 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v3 + 32), v1);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4, v5);
  return v1;
}

uint64_t AGCLLVMDriverShader::getTextureHeapGlobal(AGCLLVMDriverShader *this, unsigned int a2)
{
  unsigned __int8 v4;
  _BOOL8 v5;
  char *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;

  if (!*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1780))
    return 0;
  if ((v4 & 1) == 0
  {
    v13 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    AGCLLVMDriverShader::getTextureHeapGlobal(BOOL)::buffer_indices[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 200))(v13);
    v14 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    dword_1EF8E8044 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 440))(v14);
    v15 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    dword_1EF8E8048 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 192))(v15);
    v16 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
    dword_1EF8E804C = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 432))(v16);
  }
  v5 = (*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) == 22;
  v6 = (char *)this + 16 * a2 + 8 * v5;
  v9 = *((_QWORD *)v6 + 2);
  v8 = v6 + 16;
  result = v9;
  if (!v9)
  {
    v10 = AGCLLVMDriverShader::getTextureHeapGlobal(BOOL)::buffer_indices[2 * a2 + v5];
    v11 = llvm::PointerType::get();
    v12 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v17[0] = "agc.texture_heap.";
    v17[2] = v10;
    v18 = 2051;
    result = AGCLLVMObject::createGlobalBufferBinding((uint64_t)v12, v11, (uint64_t)v17, v10, 0);
    *v8 = result;
  }
  return result;
}

llvm::GlobalVariable *AGCLLVMDriverShader::getSamplerStateGlobal(AGCLLVMDriverShader *this)
{
  char *v2;
  llvm::Module *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t GlobalBufferBinding;
  llvm::Type *v9;
  int v10;
  uint64_t v11;
  llvm::GlobalVariable *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (*(_DWORD *)(*((_QWORD *)v2 + 50) + 1780))
  {
    v3 = (llvm::Module *)*((_QWORD *)v2 + 46);
    v19[0] = "agx.samplerHeapBufferIndex";
    v20 = 259;
    if (!llvm::Module::getNamedMetadata(v3, (const llvm::Twine *)v19))
    {
      if (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1780))
      {
        if ((v4 & 1) == 0
        {
          v17 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
          AGCLLVMDriverShader::createGlobalSamplerHeap(void)::bind_indices[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 464))(v17);
          v18 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 824);
          dword_1EF8E8054 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 224))(v18);
        }
        v5 = AGCLLVMDriverShader::createGlobalSamplerHeap(void)::bind_indices[(*(unsigned int (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this+ *(_QWORD *)(*(_QWORD *)this - 24)) != 22];
        v6 = llvm::PointerType::get();
        v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v19[0] = "agc.sampler_heap.";
        v19[2] = v5;
        v20 = 2051;
        GlobalBufferBinding = AGCLLVMObject::createGlobalBufferBinding((uint64_t)v7, v6, (uint64_t)v19, v5, 0);
        llvm::GlobalValue::setLinkage(GlobalBufferBinding, 10);
        *(_BYTE *)(GlobalBufferBinding + 80) &= ~1u;
        llvm::Constant::getNullValue(*(llvm::Constant **)(GlobalBufferBinding + 24), v9);
        llvm::GlobalVariable::setInitializer();
      }
      llvm::Module::getOrInsertNamedMetadata();
      v10 = (*(uint64_t (**)(char *))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)) + 64))((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v11 = 224;
      if (v10 == 22)
        v11 = 464;
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                              + 400)
                                                   + 824)
                                     + v11))(*(_QWORD *)(*(_QWORD *)((char *)this
                                                                   + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                   + 400)
                                                       + 824));
      llvm::ConstantInt::get();
      v19[0] = llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
    return 0;
  }
  else
  {
    v12 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v19[0] = "agc.sampler_words";
    v20 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v14 = *((_QWORD *)v13 + 47);
    v15 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v13 + 32), v12);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v14, v15);
  }
  return v12;
}

_QWORD *AGCLLVMDriverShader::setSampleArgs(_QWORD *a1, _QWORD *a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  if (*(_DWORD *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400) + 1780))
  {
    a1[6] |= 1 << a3;
    v11 = llvm::ConstantInt::get();
  }
  else
  {
    v11 = 0;
  }
  return AGCLLVMDriverShader::setSampleArgsStateless(a1, a2, v11, a4, a5, a6);
}

_QWORD *AGCLLVMDriverShader::setSampleArgsStateless(_QWORD *result, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[32];
  __int16 v18;

  if (*(_DWORD *)(*(_QWORD *)((char *)result + *(_QWORD *)(*result - 24) + 400) + 1780))
  {
    v9 = result;
    v10 = llvm::ConstantInt::get();
    v11 = (uint64_t)v9 + *(_QWORD *)(*v9 - 24) + 40;
    v12 = llvm::PointerType::get();
    v18 = 257;
    a2[5] = llvm::IRBuilderBase::CreateCast(v11, 48, v10, v12, (uint64_t)v17);
    v9[8] |= 1uLL;
    v13 = (uint64_t)v9 + *(_QWORD *)(*v9 - 24) + 40;
    v14 = llvm::PointerType::get();
    v18 = 257;
    a2[4] = llvm::IRBuilderBase::CreateCast(v13, 48, a3, v14, (uint64_t)v17);
    v15 = (uint64_t)v9 + *(_QWORD *)(*v9 - 24) + 40;
    v16 = llvm::PointerType::get();
    v18 = 257;
    result = (_QWORD *)llvm::IRBuilderBase::CreateCast(v15, 49, a6, v16, (uint64_t)v17);
    a4 = result;
  }
  else
  {
    a2[11] = a5;
  }
  a2[6] = a4;
  return result;
}

uint64_t *AGCLLVMTABlitVertexShader::AGCLLVMTABlitVertexShader(uint64_t *a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3, _DWORD *a4)
{
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  llvm::Value *v40;
  char *v41;
  uint64_t v42;
  llvm::Value *v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  llvm::Type **v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  llvm::Type *v59;
  llvm::GlobalVariable *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  llvm::Value *v65;
  llvm::Type *v66;
  llvm::GlobalVariable *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  llvm::Value *v73;
  llvm::Type *v74;
  llvm::Value *v75;
  llvm::IRBuilderBase *v76;
  llvm::Value *v77;
  llvm::IRBuilderBase *v78;
  llvm::Value *v79;
  llvm::Value *Shl;
  llvm::Value *v81;
  char *v82;
  llvm::IRBuilderBase *v83;
  llvm::Value *v84;
  llvm::Value *InsertElement;
  char *v86;
  llvm::IRBuilderBase *v87;
  llvm::Value *v88;
  llvm::Value *v89;
  unsigned int v90;
  llvm::Value *v91;
  llvm::IRBuilderBase *v92;
  int v93;
  llvm::GlobalVariable *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  llvm::Value *v100;
  llvm::Type *v101;
  llvm::Value *v102;
  llvm::Value *v103;
  char *v104;
  llvm::IRBuilderBase *v105;
  llvm::Value *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  llvm::Value *v113;
  llvm::Type **v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  llvm::IRBuilderBase *v118;
  llvm::Value *v119;
  uint64_t *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  llvm::Value *v133;
  uint64_t v134;
  int v135;
  llvm::GlobalVariable *v136;
  uint64_t *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  llvm::Value *v143;
  llvm::Type *v144;
  llvm::Value *v145;
  llvm::GlobalVariable *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  llvm::Value *v151;
  llvm::Type *v152;
  uint64_t v153;
  llvm::IRBuilderBase *v154;
  uint64_t v155;
  int v156;
  const char *v157;
  const char *v158;
  const char *v159;
  size_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 *v169;
  uint64_t v170;
  llvm::Type *v171;
  llvm::Type *v172;
  llvm::GlobalVariable *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t AlignedLoad;
  llvm::GlobalVariable *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  llvm::Value *v186;
  llvm::IRBuilderBase *v187;
  llvm::Value *v188;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v190;
  llvm::IRBuilderBase *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  void **p_src;
  llvm::Type *v197;
  uint64_t v198;
  llvm::IRBuilderBase *v199;
  llvm::Value *v200;
  llvm::Value *v201;
  llvm::IRBuilderBase *v202;
  llvm::Type **v203;
  llvm::Value *v204;
  unint64_t v205;
  int v206;
  uint64_t v207;
  void *v208;
  unint64_t v209;
  void *v210;
  size_t v211;
  unint64_t v212;
  llvm::Value *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  llvm::IRBuilderBase *v217;
  uint64_t v218;
  uint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  llvm::Type **v222;
  uint64_t *v223;
  llvm::Value *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  llvm::GlobalVariable *v237;
  uint64_t *v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  llvm::Value *v244;
  llvm::Type *v245;
  llvm::GlobalVariable *v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  llvm::Value *v252;
  llvm::Type *v253;
  llvm::Value *v254;
  llvm::GlobalVariable *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  llvm::Value *v260;
  llvm::Type *v261;
  llvm::GlobalVariable *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  llvm::Value *v267;
  llvm::Type *v268;
  llvm::IRBuilderBase *v269;
  uint64_t v270;
  llvm::IRBuilderBase *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  size_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  size_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v297;
  uint64_t *v298;
  void *v299;
  int v300;
  unint64_t v301;
  int v302;
  llvm::Value *v303;
  llvm::Value *v304;
  llvm::GlobalVariable *SamplerStateGlobal;
  int v306;
  uint64_t TextureHeapGlobal;
  llvm::GlobalVariable *ImageStateGlobal;
  llvm::Value *GEP;
  llvm::Type *v310;
  llvm::Value *v311;
  llvm::Value *v312;
  int v313;
  llvm::Type *v314;
  llvm::Type *v315;
  int v316[2];
  uint64_t v317;
  llvm::Value *Add;
  llvm::Value *v319;
  llvm::Value *v320;
  _DWORD *v321;
  unsigned int v322;
  void *__p;
  uint64_t v324;
  _DWORD v325[4];
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int16 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  int v335;
  __int128 v336;
  _BYTE v337[28];
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char v341;
  __int16 v342;
  char v343;
  char v344;
  uint64_t v345;
  char v346;
  __int128 v347;
  uint64_t v348;
  int v349;
  __int16 v350;
  __int128 __src;
  uint64_t v352;
  uint64_t v353;
  __int16 v354[8];
  __int128 v355;
  uint64_t v356;
  int v357;
  __int128 v358;
  uint64_t v359;
  int v360;
  uint64_t v361;

  v5 = a1;
  v361 = *MEMORY[0x1E0C80C00];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 13), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader(v5, (uint64_t *)off_1E7EBB290);
  *v5 = (uint64_t)off_1E7EBB050;
  v5[13] = (uint64_t)&unk_1E7EBB190;
  v5[17] = (uint64_t)&unk_1E7EBB280;
  v5[11] = -1;
  *((_DWORD *)v5 + 24) = 0;
  *((_BYTE *)v5 + 100) = 0;
  v5[10] = (uint64_t)a4;
  *(_QWORD *)v316 = v5;
  v321 = a4;
  switch(*a4 & 7)
  {
    case 0:
    case 1:
      LODWORD(v358) = 0;
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5[63] + 464))(v5[63]);
      v7 = *v5;
      if (v6 == 2
        || (v8 = *(uint64_t *)((char *)v5 + *(_QWORD *)(v7 - 24) + 400),
            *((_DWORD *)v5 + 22) = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v8 + 440))(v8, &v358, 4), v9 = v358, v7 = *v5, !(_DWORD)v358))
      {
        v12 = 0;
      }
      else
      {
        v10 = (uint64_t)v5 + *(_QWORD *)(v7 - 24) + 32;
        v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v358);
        v12 = v11;
        v13 = 0;
        do
        {
          *(_QWORD *)&v11[v13] = *(_QWORD *)(v10 + 200);
          v13 += 8;
        }
        while (8 * v9 != v13);
        v7 = *v5;
      }
      (*(void (**)(void **__return_ptr, uint64_t *))(v7 + 72))(&__p, v5);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v26 = v25;
      v5[9] = v25;
      if (SHIBYTE(v325[1]) < 0)
      {
        operator delete(__p);
        v26 = v5[9];
      }
      *(_WORD *)(v26 + 18) = *(_WORD *)(v26 + 18) & 0xC00F | 0x660;
      __p = "entry";
      LOWORD(v326) = 259;
      operator new();
      v27 = llvm::BasicBlock::BasicBlock();
      v28 = (char *)v5 + *(_QWORD *)(*v5 - 24);
      *((_QWORD *)v28 + 11) = v27;
      *((_QWORD *)v28 + 12) = v27 + 40;
      v29 = *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 464))(v29) == 2)
      {
        v30 = (char *)v5 + *(_QWORD *)(*v5 - 24);
        v31 = *((_QWORD *)v30 + 50);
        v347 = *(_OWORD *)(v30 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v30 + 40));
        v349 = *((_DWORD *)v30 + 34);
        v32 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)v31 + 456))(v31, &v347, &v358, 4);
        if (v348)
          llvm::MetadataTracking::untrack();
        v5 = *(uint64_t **)v316;
      }
      else
      {
        v49 = v5[9];
        if ((*(_WORD *)(v49 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v5[9]);
        v32 = *(llvm::Value **)(v49 + 88);
        v50 = *((_DWORD *)v5 + 22);
        if (v50)
          v32 = (llvm::Value *)((char *)v32 + 40 * (v50 - 1) + 40);
      }
      v299 = v12;
      v301 = ((unint64_t)*a4 >> 8) & 7;
      switch((*a4 >> 8) & 7)
      {
        case 0:
          v51 = (llvm::Type **)((char *)v5 + *(_QWORD *)(*v5 - 24) + 216);
          goto LABEL_94;
        case 1:
          v51 = (llvm::Type **)((char *)v5 + *(_QWORD *)(*v5 - 24) + 224);
          goto LABEL_94;
        case 2:
          v51 = (llvm::Type **)((char *)v5 + *(_QWORD *)(*v5 - 24) + 232);
          goto LABEL_94;
        case 3:
          v51 = (llvm::Type **)((char *)v5 + *(_QWORD *)(*v5 - 24) + 280);
          goto LABEL_94;
        case 4:
          v51 = (llvm::Type **)((char *)v5 + *(_QWORD *)(*v5 - 24) + 344);
LABEL_94:
          v171 = *v51;
          break;
        default:
          v171 = 0;
          break;
      }
      v314 = v171;
      v172 = (llvm::Type *)llvm::PointerType::get();
      v173 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p = "agc.buffer_src";
      LOWORD(v326) = 259;
      v174 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v174 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v175 = (char *)v5 + *(_QWORD *)(*v5 - 24);
      v176 = *((_QWORD *)v175 + 47);
      v177 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v175 + 32), v173);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v176, v177);
      v178 = (uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
      LOWORD(v326) = 257;
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v178, v172, (uint64_t)v173, 0, (uint64_t)&__p);
      v180 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p = "agc.buffer_dst";
      LOWORD(v326) = 259;
      v181 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v181 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v182 = (char *)v5 + *(_QWORD *)(*v5 - 24);
      v183 = *((_QWORD *)v182 + 47);
      v184 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v182 + 32), v180);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v183, v184);
      v185 = (uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
      LOWORD(v326) = 257;
      v186 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v185, v172, (uint64_t)v180, 0, (uint64_t)&__p);
      v187 = (llvm::IRBuilderBase *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
      v188 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v326) = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v187, v188, v32, (const llvm::Twine *)&__p);
      v190 = (llvm::IRBuilderBase *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
      LOWORD(v326) = 257;
      GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v190, v314, (llvm::Value *)AlignedLoad, Mul, (const llvm::Twine *)&__p);
      v191 = (llvm::IRBuilderBase *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
      LOWORD(v326) = 257;
      v192 = llvm::IRBuilderBase::CreateGEP(v191, v314, v186, Mul, (const llvm::Twine *)&__p);
      v193 = 0;
      if ((*a4 & 7) == 1)
      {
        v194 = *(_QWORD *)(*v5 - 24);
        if ((*a4 & 0x4000000) != 0)
        {
          v199 = (llvm::IRBuilderBase *)((char *)v5 + v194 + 40);
          v200 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v326) = 257;
          v201 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v199, v32, v200, (const llvm::Twine *)&__p);
          v202 = (llvm::IRBuilderBase *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
          LOWORD(v326) = 257;
          v203 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v202, v314, (llvm::Value *)AlignedLoad, v201, (const llvm::Twine *)&__p);
          v354[0] = 257;
          v197 = AGCLLVMBuilder::tryDeducePointeeType(v203, v204);
          p_src = (void **)&__src;
          v195 = (uint64_t *)v202;
          v198 = (uint64_t)v203;
        }
        else
        {
          v195 = (uint64_t *)((char *)v5 + v194 + 40);
          LOWORD(v326) = 257;
          p_src = &__p;
          v197 = v314;
          v198 = AlignedLoad;
        }
        v193 = llvm::IRBuilderBase::CreateAlignedLoad(v195, v197, v198, 0, (uint64_t)p_src);
      }
      v319 = (llvm::Value *)v192;
      v205 = *a4;
      if ((v205 & 0x780000) == 0)
        goto LABEL_120;
      v206 = 0;
      v311 = (llvm::Value *)(v5 + 1);
      v304 = (llvm::Value *)v193;
      break;
    case 2:
    case 3:
      v322 = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5[63] + 464))(v5[63]);
      v15 = *v5;
      if (v14 == 2
        || (*((_DWORD *)v5 + 22) = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400)
                                                                                              + 440))(*(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400), &v322, 4), v16 = *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400), *((_DWORD *)v5 + 23) = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v16 + 440))(v16, &v322, 2), v17 = v322, v15 = *v5, !v322))
      {
        v20 = 0;
      }
      else
      {
        v18 = (char *)v5 + *(_QWORD *)(*v5 - 24) + 32;
        v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v322);
        v20 = v19;
        v21 = 0;
        do
        {
          *(_QWORD *)&v19[v21] = *((_QWORD *)v18 + 25);
          v21 += 8;
        }
        while (8 * v17 != v21);
        v15 = *v5;
      }
      (*(void (**)(void **__return_ptr, uint64_t *))(v15 + 72))(&__p, v5);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v34 = v33;
      v5[9] = v33;
      if (SHIBYTE(v325[1]) < 0)
      {
        operator delete(__p);
        v34 = v5[9];
      }
      *(_WORD *)(v34 + 18) = *(_WORD *)(v34 + 18) & 0xC00F | 0x660;
      __p = "entry";
      LOWORD(v326) = 259;
      operator new();
      v35 = llvm::BasicBlock::BasicBlock();
      v36 = (char *)v5 + *(_QWORD *)(*v5 - 24);
      *((_QWORD *)v36 + 11) = v35;
      *((_QWORD *)v36 + 12) = v35 + 40;
      v37 = *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400);
      v297 = v20;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 464))(v37) == 2)
      {
        v38 = (char *)v5 + *(_QWORD *)(*v5 - 24);
        v39 = *((_QWORD *)v38 + 50);
        v358 = *(_OWORD *)(v38 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v38 + 40));
        v360 = *((_DWORD *)v38 + 34);
        v40 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned int *, uint64_t))(*(_QWORD *)v39 + 456))(v39, &v358, &v322, 4);
        if (v359)
          llvm::MetadataTracking::untrack();
        v41 = (char *)v5 + *(_QWORD *)(*v5 - 24);
        v42 = *((_QWORD *)v41 + 50);
        v355 = *(_OWORD *)(v41 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v41 + 40));
        v357 = *((_DWORD *)v41 + 34);
        v43 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned int *, uint64_t))(*(_QWORD *)v42 + 456))(v42, &v355, &v322, 2);
        if (v356)
          llvm::MetadataTracking::untrack();
      }
      else
      {
        v52 = v5[9];
        if ((*(_WORD *)(v52 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v5[9]);
        v54 = *((_DWORD *)v5 + 22);
        v55 = *((_DWORD *)v5 + 23);
        v56 = 40 * (v54 - 1) + 40;
        if (!v54)
          v56 = 0;
        v53 = *(_QWORD *)(v52 + 88);
        v40 = (llvm::Value *)(v53 + v56);
        if (v54 >= v55)
          v43 = (llvm::Value *)(v53 + v56);
        else
          v43 = (llvm::Value *)((char *)v40 + 40 * v55 + 40 * ~v54 + 40);
      }
      AGCLLVMDriverShader::getFormatInfo((uint64_t)&__p, v5, *a4 >> 3);
      v313 = v325[0];
      v59 = (llvm::Type *)v324;
      ImageStateGlobal = AGCLLVMDriverShader::getImageStateGlobal((AGCLLVMDriverShader *)v5);
      TextureHeapGlobal = AGCLLVMDriverShader::getTextureHeapGlobal((AGCLLVMDriverShader *)v5, 1u);
      SamplerStateGlobal = AGCLLVMDriverShader::getSamplerStateGlobal((AGCLLVMDriverShader *)v5);
      v60 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v310 = v59;
      llvm::PointerType::get();
      __p = "agc.buffer_address";
      LOWORD(v326) = 259;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v60 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v61 = (char *)v5 + *(_QWORD *)(*v5 - 24);
      v62 = *((_QWORD *)v61 + 47);
      v63 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v61 + 32), v60);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v62, v63);
      v64 = (uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24));
      LOWORD(v326) = 257;
      v66 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v60, v65);
      v303 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v64 + 5, v66, (uint64_t)v60, 0, (uint64_t)&__p);
      v67 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p = "agc.buffer_stride";
      LOWORD(v326) = 259;
      v68 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v68 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v69 = (char *)v5 + *(_QWORD *)(*v5 - 24);
      v70 = *((_QWORD *)v69 + 47);
      v71 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v69 + 32), v67);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v70, v71);
      v72 = (uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24));
      LOWORD(v326) = 257;
      v74 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v67, v73);
      v75 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v72 + 5, v74, (uint64_t)v67, 0, (uint64_t)&__p);
      v76 = (llvm::IRBuilderBase *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
      LOWORD(v326) = 257;
      v77 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v76, v43, v75, (const llvm::Twine *)&__p);
      v78 = (llvm::IRBuilderBase *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
      v79 = (llvm::Value *)llvm::ConstantInt::get();
      v354[0] = 257;
      Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v78, v40, v79, (const llvm::Twine *)&__src);
      v350 = 257;
      Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v76, v77, Shl, (const llvm::Twine *)&v347);
      v81 = (llvm::Value *)llvm::UndefValue::get();
      v82 = (char *)v5 + *(_QWORD *)(*v5 - 24);
      LOWORD(v326) = 257;
      v83 = (llvm::IRBuilderBase *)(v82 + 40);
      v84 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v83, v81, v40, v84, (const llvm::Twine *)&__p);
      v86 = (char *)v5 + *(_QWORD *)(*v5 - 24);
      LOWORD(v326) = 257;
      v87 = (llvm::IRBuilderBase *)(v86 + 40);
      v88 = (llvm::Value *)llvm::ConstantInt::get();
      v89 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v87, InsertElement, v43, v88, (const llvm::Twine *)&__p);
      v90 = *a4;
      if ((*a4 & 0x2000000) != 0)
      {
        v91 = (llvm::Value *)AGCLLVMDriverShader::buildRegionOffsets((AGCLLVMDriverShader *)v5, "agc.region_offsets");
        v92 = (llvm::IRBuilderBase *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
        LOWORD(v326) = 257;
        v89 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v92, v89, v91, (const llvm::Twine *)&__p);
        v90 = *a4;
      }
      if ((v90 & 7) == 3)
        v93 = 3;
      else
        v93 = 1;
      v302 = v93;
      if ((v90 & 7) == 3)
      {
        v94 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        __p = "agc.texture_slice";
        LOWORD(v326) = 259;
        v95 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v95 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        v96 = (char *)v5 + *(_QWORD *)(*v5 - 24);
        v97 = *((_QWORD *)v96 + 47);
        v98 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v96 + 32), v94);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v97, v98);
        v99 = (uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24));
        LOWORD(v326) = 257;
        v101 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v94, v100);
        v102 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v99 + 5, v101, (uint64_t)v94, 0, (uint64_t)&__p);
        v103 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 32), v89, 4);
        v104 = (char *)v5 + *(_QWORD *)(*v5 - 24);
        LOWORD(v326) = 257;
        v105 = (llvm::IRBuilderBase *)(v104 + 40);
        v106 = (llvm::Value *)llvm::ConstantInt::get();
        v89 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v105, v103, v102, v106, (const llvm::Twine *)&__p);
        v90 = *a4;
      }
      v107 = 0;
      v108 = (v90 >> 23) & 3;
      v298 = v5 + 1;
      v300 = v108;
      do
      {
        LODWORD(__p) = 2;
        HIDWORD(__p) = v302;
        memset(v325, 0, 11);
        v326 = 0u;
        v327 = 0u;
        v328 = 0u;
        v329 = 0u;
        v330 = 0;
        v331 = 0u;
        v332 = 0u;
        v333 = 0u;
        v334 = 0;
        v342 = 0;
        v343 = 0;
        v336 = 0u;
        memset(v337, 0, sizeof(v337));
        v338 = 0;
        v339 = 0;
        v341 = 0;
        v340 = 0;
        v344 = 1;
        v345 = 0;
        v346 = 0;
        v335 = 4;
        LODWORD(v324) = v313;
        AGCLLVMDriverShader::setSampleArgs(v5, &__p, 0, ImageStateGlobal, (uint64_t)SamplerStateGlobal, TextureHeapGlobal);
        *(_QWORD *)&v333 = v89;
        if (v108)
        {
          v109 = llvm::ConstantInt::get();
          v110 = 0;
          v338 = v109;
          v335 = 3;
        }
        else
        {
          v338 = 0;
          v335 = 1;
          v110 = llvm::ConstantInt::get();
        }
        *(_QWORD *)&v336 = v110;
        BYTE2(v325[1]) = 1;
        v111 = (char *)v5 + *(_QWORD *)(*v5 - 24);
        v112 = *((_QWORD *)v111 + 50);
        v347 = *(_OWORD *)(v111 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v111 + 40));
        v349 = *((_DWORD *)v111 + 34);
        v113 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v112 + 272))(v112, &v347, &__p);
        if (v348)
          llvm::MetadataTracking::untrack();
        v5 = *(uint64_t **)v316;
        v114 = (llvm::Type **)AGCLLVMDriverShader::buildPack(*(_QWORD **)v316, *v321 >> 3, v113, (uint64_t)v310);
        v115 = *(_QWORD *)(**(_QWORD **)v316 - 24);
        v116 = (uint64_t *)(v115 + *(_QWORD *)v316 + 40);
        v354[0] = 257;
        v117 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)((char *)v298 + v115 + 32), v310, v303, Add, (const llvm::Twine *)&__src);
        llvm::IRBuilderBase::CreateAlignedStore(v116, v114, v117, 0);
        v118 = (llvm::IRBuilderBase *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 40);
        v119 = (llvm::Value *)llvm::ConstantInt::get();
        v354[0] = 257;
        Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v118, Add, v119, (const llvm::Twine *)&__src);
        ++v107;
        v108 = v300;
      }
      while (!(v107 >> v300));
      if (v297)
        operator delete(v297);
      v5 = *(uint64_t **)v316;
      goto LABEL_138;
    case 4:
      LODWORD(v358) = 0;
      v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5[63] + 464))(v5[63]);
      v58 = *v5;
      if (v57 == 2)
      {
        v24 = 0;
      }
      else
      {
        *((_DWORD *)v5 + 22) = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400)
                                                                                      + 440))(*(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400), &v358, 4);
        v120 = v5;
        v121 = v358;
        v58 = *v120;
        if ((_DWORD)v358)
        {
          v122 = (char *)v120 + *(_QWORD *)(*v120 - 24) + 32;
          v123 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v358);
          v24 = v123;
          v124 = 0;
          do
          {
            *(_QWORD *)&v123[v124] = *((_QWORD *)v122 + 25);
            v124 += 8;
          }
          while (8 * v121 != v124);
          v5 = *(uint64_t **)v316;
          v58 = **(_QWORD **)v316;
        }
        else
        {
          v24 = 0;
          v5 = v120;
        }
      }
      (*(void (**)(void **__return_ptr, uint64_t *))(v58 + 72))(&__p, v5);
      v227 = v5;
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v229 = v228;
      v227[9] = v228;
      if (SHIBYTE(v325[1]) < 0)
      {
        operator delete(__p);
        v229 = v227[9];
      }
      *(_WORD *)(v229 + 18) = *(_WORD *)(v229 + 18) & 0xC00F | 0x660;
      __p = "entry";
      LOWORD(v326) = 259;
      operator new();
      v230 = llvm::BasicBlock::BasicBlock();
      v231 = (uint64_t)v227 + *(_QWORD *)(*v227 - 24);
      *(_QWORD *)(v231 + 88) = v230;
      *(_QWORD *)(v231 + 96) = v230 + 40;
      v232 = *(uint64_t *)((char *)v227 + *(_QWORD *)(*v227 - 24) + 400);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v232 + 464))(v232) == 2)
      {
        v233 = (uint64_t)v227 + *(_QWORD *)(*v227 - 24);
        v234 = *(_QWORD *)(v233 + 400);
        v347 = *(_OWORD *)(v233 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v233 + 40));
        v349 = *(_DWORD *)(v233 + 136);
        v312 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)v234
                                                                                                  + 456))(v234, &v347, &v358, 4);
        if (v348)
          llvm::MetadataTracking::untrack();
      }
      else
      {
        v235 = v227[9];
        if ((*(_WORD *)(v235 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v227[9]);
        v236 = *(_DWORD *)(*(_QWORD *)v316 + 88);
        if (v236)
          v312 = (llvm::Value *)(*(_QWORD *)(v235 + 88) + 40 * (v236 - 1) + 40);
        else
          v312 = *(llvm::Value **)(v235 + 88);
      }
      v237 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v238 = *(uint64_t **)v316;
      __p = "agc.icb_dst_index";
      LOWORD(v326) = 259;
      v239 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v239 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v240 = (char *)v238 + *(_QWORD *)(*v238 - 24);
      v241 = *((_QWORD *)v240 + 47);
      v242 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v240 + 32), v237);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v241, v242);
      v243 = (uint64_t *)((char *)v238 + *(_QWORD *)(*v238 - 24));
      LOWORD(v326) = 257;
      v245 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v237, v244);
      v320 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v243 + 5, v245, (uint64_t)v237, 0, (uint64_t)&__p);
      v246 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p = "agc.icb_src_index";
      LOWORD(v326) = 259;
      v247 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v247 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v248 = (char *)v238 + *(_QWORD *)(*v238 - 24);
      v249 = *((_QWORD *)v248 + 47);
      v250 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v248 + 32), v246);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v249, v250);
      v251 = (uint64_t *)((char *)v238 + *(_QWORD *)(*v238 - 24));
      LOWORD(v326) = 257;
      v253 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v246, v252);
      v254 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v251 + 5, v253, (uint64_t)v246, 0, (uint64_t)&__p);
      v255 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      __p = "agc.icb_dst";
      LOWORD(v326) = 259;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v255 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v256 = (char *)v238 + *(_QWORD *)(*v238 - 24);
      v257 = *((_QWORD *)v256 + 47);
      v258 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v256 + 32), v255);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v257, v258);
      v259 = (uint64_t *)((char *)v238 + *(_QWORD *)(*v238 - 24));
      LOWORD(v326) = 257;
      v261 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v255, v260);
      v317 = llvm::IRBuilderBase::CreateAlignedLoad(v259 + 5, v261, (uint64_t)v255, 0, (uint64_t)&__p);
      v262 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      __p = "agc.icb_src";
      LOWORD(v326) = 259;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v262 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v263 = (char *)v238 + *(_QWORD *)(*v238 - 24);
      v264 = *((_QWORD *)v263 + 47);
      v265 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v263 + 32), v262);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v264, v265);
      v266 = (uint64_t *)((char *)v238 + *(_QWORD *)(*v238 - 24));
      LOWORD(v326) = 257;
      v268 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v262, v267);
      v315 = (llvm::Type *)llvm::IRBuilderBase::CreateAlignedLoad(v266 + 5, v268, (uint64_t)v262, 0, (uint64_t)&__p);
      v269 = (llvm::IRBuilderBase *)((char *)v238 + *(_QWORD *)(*v238 - 24) + 40);
      LOWORD(v326) = 257;
      v270 = llvm::IRBuilderBase::CreateAdd(v269, v320, v312, (const llvm::Twine *)&__p);
      v271 = (llvm::IRBuilderBase *)((char *)v238 + *(_QWORD *)(*v238 - 24) + 40);
      LOWORD(v326) = 257;
      v272 = llvm::IRBuilderBase::CreateAdd(v271, v254, v312, (const llvm::Twine *)&__p);
      v273 = llvm::PointerType::get();
      v274 = *(uint64_t *)((char *)v238 + *(_QWORD *)(*v238 - 24) + 232);
      v275 = llvm::PointerType::get();
      v276 = *(uint64_t *)((char *)v238 + *(_QWORD *)(*v238 - 24) + 232);
      *(_QWORD *)&__src = v273;
      *((_QWORD *)&__src + 1) = v274;
      v352 = v275;
      v353 = v276;
      __p = v325;
      v324 = 0x400000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&__p, &__src, v354);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v278 = v277;
      if (__p != v325)
        free(__p);
      *(_QWORD *)&__src = v317;
      *((_QWORD *)&__src + 1) = v270;
      v352 = (uint64_t)v315;
      v353 = v272;
      v5 = *(uint64_t **)v316;
      v167 = *(_QWORD *)(**(_QWORD **)v316 - 24) + *(_QWORD *)v316 + 40;
      LOWORD(v326) = 257;
      v168 = *(_QWORD *)(v278 + 24);
      v169 = &__src;
      v166 = v278;
      v170 = 4;
      goto LABEL_136;
    case 5:
    case 6:
      LODWORD(v358) = 0;
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5[63] + 464))(v5[63]);
      v23 = *v5;
      if (v22 == 2)
      {
        v24 = 0;
      }
      else
      {
        *((_DWORD *)v5 + 22) = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**(_QWORD **)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400)
                                                                                      + 440))(*(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 400), &v358, 4);
        v44 = v5;
        v45 = v358;
        v23 = *v44;
        if ((_DWORD)v358)
        {
          v46 = (char *)v44 + *(_QWORD *)(*v44 - 24) + 32;
          v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v358);
          v24 = v47;
          v48 = 0;
          do
          {
            *(_QWORD *)&v47[v48] = *((_QWORD *)v46 + 25);
            v48 += 8;
          }
          while (8 * v45 != v48);
          v5 = *(uint64_t **)v316;
          v23 = **(_QWORD **)v316;
        }
        else
        {
          v24 = 0;
          v5 = v44;
        }
      }
      (*(void (**)(void **__return_ptr, uint64_t *))(v23 + 72))(&__p, v5);
      v125 = v5;
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v127 = v126;
      v125[9] = v126;
      if (SHIBYTE(v325[1]) < 0)
      {
        operator delete(__p);
        v127 = v125[9];
      }
      *(_WORD *)(v127 + 18) = *(_WORD *)(v127 + 18) & 0xC00F | 0x660;
      __p = "entry";
      LOWORD(v326) = 259;
      operator new();
      v128 = llvm::BasicBlock::BasicBlock();
      v129 = (uint64_t)v125 + *(_QWORD *)(*v125 - 24);
      *(_QWORD *)(v129 + 88) = v128;
      *(_QWORD *)(v129 + 96) = v128 + 40;
      v130 = *(uint64_t *)((char *)v125 + *(_QWORD *)(*v125 - 24) + 400);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v130 + 464))(v130) == 2)
      {
        v131 = (uint64_t)v125 + *(_QWORD *)(*v125 - 24);
        v132 = *(_QWORD *)(v131 + 400);
        __src = *(_OWORD *)(v131 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v131 + 40));
        LODWORD(v353) = *(_DWORD *)(v131 + 136);
        v133 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)v132
                                                                                                  + 456))(v132, &__src, &v358, 4);
        if (v352)
          llvm::MetadataTracking::untrack();
      }
      else
      {
        v134 = v125[9];
        if ((*(_WORD *)(v134 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v125[9]);
        v133 = *(llvm::Value **)(v134 + 88);
        v135 = *(_DWORD *)(*(_QWORD *)v316 + 88);
        if (v135)
          v133 = (llvm::Value *)((char *)v133 + 40 * (v135 - 1) + 40);
      }
      v136 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      v137 = *(uint64_t **)v316;
      __p = "agc.icb_dst_index";
      LOWORD(v326) = 259;
      v138 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v138 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v139 = (char *)v137 + *(_QWORD *)(*v137 - 24);
      v140 = *((_QWORD *)v139 + 47);
      v141 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v139 + 32), v136);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v140, v141);
      v142 = (uint64_t *)((char *)v137 + *(_QWORD *)(*v137 - 24));
      LOWORD(v326) = 257;
      v144 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v136, v143);
      v145 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v142 + 5, v144, (uint64_t)v136, 0, (uint64_t)&__p);
      v146 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      __p = "agc.icb_dst";
      LOWORD(v326) = 259;
      llvm::GlobalVariable::GlobalVariable();
      *((_BYTE *)v146 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v147 = (char *)v137 + *(_QWORD *)(*v137 - 24);
      v148 = *((_QWORD *)v147 + 47);
      v149 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v147 + 32), v146);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v148, v149);
      v150 = (uint64_t *)((char *)v137 + *(_QWORD *)(*v137 - 24));
      LOWORD(v326) = 257;
      v152 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v146, v151);
      v153 = llvm::IRBuilderBase::CreateAlignedLoad(v150 + 5, v152, (uint64_t)v146, 0, (uint64_t)&__p);
      v154 = (llvm::IRBuilderBase *)((char *)v137 + *(_QWORD *)(*v137 - 24) + 40);
      LOWORD(v326) = 257;
      v155 = llvm::IRBuilderBase::CreateAdd(v154, v145, v133, (const llvm::Twine *)&__p);
      v156 = *v321 & 7;
      if (v156 == 6)
      {
        v157 = "air_optimize_compute_command_wrapper";
        v158 = "air_optimize_render_command_wrapper";
      }
      else
      {
        if (v156 != 5)
        {
          v159 = 0;
          v160 = 0;
          goto LABEL_88;
        }
        v157 = "air_nop_compute_command_wrapper";
        v158 = "air_nop_render_command_wrapper";
      }
      if ((*v321 & 0x8000000) != 0)
        v159 = v157;
      else
        v159 = v158;
      v160 = strlen(v159);
LABEL_88:
      v161 = *(uint64_t **)v316;
      v162 = *(_QWORD *)(**(_QWORD **)v316 - 24) + *(_QWORD *)v316;
      v163 = v162 + 32;
      v164 = *(_QWORD *)(v162 + 176);
      v165 = llvm::PointerType::get();
      v166 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v163, (uint64_t)v159, v160, v164, v165, *(uint64_t *)((char *)v161 + *(_QWORD *)(*v161 - 24) + 232));
      *(_QWORD *)&v347 = v153;
      *((_QWORD *)&v347 + 1) = v155;
      v5 = *(uint64_t **)v316;
      v167 = (uint64_t)v161 + *(_QWORD *)(*v161 - 24) + 40;
      LOWORD(v326) = 257;
      v168 = *(_QWORD *)(v166 + 24);
      v169 = &v347;
      v170 = 2;
LABEL_136:
      llvm::IRBuilderBase::CreateCall(v167, v168, v166, (uint64_t)v169, v170, (uint64_t)&__p);
      if (v24)
        operator delete(v24);
LABEL_138:
      a4 = v321;
      goto LABEL_139;
    default:
      goto LABEL_139;
  }
  do
  {
    v207 = (v205 >> 11);
    if ((v205 >> 11))
    {
      v208 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>((v205 >> 11));
      bzero(v208, 8 * v207);
      v205 = *a4;
      v209 = (v205 >> 11);
      if ((v205 >> 11))
      {
        v210 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>((v205 >> 11));
        v211 = 8 * v209;
        v209 = (unint64_t)v210;
        bzero(v210, v211);
        v205 = *a4;
        if ((v205 >> 11))
        {
          v212 = 0;
          do
          {
            v213 = (llvm::Value *)llvm::ConstantInt::get();
            *((_QWORD *)v208 + v212) = v213;
            v214 = v193;
            if ((*a4 & 7) != 1)
            {
              v215 = v193;
              v216 = v209;
              v217 = (llvm::Value *)((char *)v311 + *(_QWORD *)(*v5 - 24) + 32);
              LOWORD(v326) = 257;
              v218 = llvm::IRBuilderBase::CreateGEP(v217, v314, GEP, v213, (const llvm::Twine *)&__p);
              v354[0] = 257;
              v219 = (uint64_t *)v217;
              v209 = v216;
              v193 = v215;
              v214 = llvm::IRBuilderBase::CreateAlignedLoad(v219, v314, v218, (unsigned __int16)v301 | 0x100u, (uint64_t)&__src);
            }
            *(_QWORD *)(v209 + 8 * v212++) = v214;
            v205 = *a4;
          }
          while (v212 < (v205 >> 11));
        }
      }
    }
    else
    {
      v208 = 0;
      v209 = 0;
    }
    v306 = v206;
    if ((v205 & 0x7F800) != 0)
    {
      v220 = 0;
      do
      {
        v221 = *(_QWORD *)(**(_QWORD **)v316 - 24);
        v222 = *(llvm::Type ***)(v209 + 8 * v220);
        v223 = (uint64_t *)(v221 + *(_QWORD *)v316 + 40);
        v224 = (llvm::Value *)*((_QWORD *)v208 + v220);
        LOWORD(v326) = 257;
        v225 = llvm::IRBuilderBase::CreateGEP((llvm::Value *)((char *)v311 + v221 + 32), v314, v319, v224, (const llvm::Twine *)&__p);
        v226 = AlignedLoad & 0xFFFFFFFFFFFF0000 | v301;
        AlignedLoad = v226 | 0x100;
        llvm::IRBuilderBase::CreateAlignedStore(v223, v222, v225, v226 | 0x100);
        ++v220;
      }
      while (v220 < ((unint64_t)*v321 >> 11));
    }
    else if (!v209)
    {
      goto LABEL_117;
    }
    operator delete((void *)v209);
LABEL_117:
    v193 = (uint64_t)v304;
    if (v208)
      operator delete(v208);
    ++v206;
    a4 = v321;
    v205 = *v321;
    v5 = *(uint64_t **)v316;
  }
  while (((v205 >> 19) & 0xF) > (v306 + 1));
LABEL_120:
  if (v299)
    operator delete(v299);
LABEL_139:
  v279 = *(_QWORD *)(*v5 - 24);
  v280 = *(uint64_t *)((char *)v5 + v279 + 400);
  if (*(_BYTE *)(v280 + 1729))
  {
    v281 = (uint64_t)v5 + v279 + 32;
    v282 = *(_QWORD *)(v280 + 1392);
    if (v282)
      v283 = strlen(*(const char **)(v280 + 1392));
    else
      v283 = 0;
    v284 = *(_QWORD *)(v281 + 144);
    v285 = *(_QWORD *)(v281 + 168);
    v286 = v281;
    v5 = *(uint64_t **)v316;
    v287 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v286, v282, v283, v284, *(_QWORD *)(*(_QWORD *)v316 + v279 + 2768), v285);
    ++*(_DWORD *)(*(_QWORD *)v316 + 96);
    *(_QWORD *)&__src = llvm::ConstantInt::get();
    *((_QWORD *)&__src + 1) = llvm::ConstantFP::get();
    v288 = (uint64_t)v5 + *(_QWORD *)(*v5 - 24) + 40;
    LOWORD(v326) = 257;
    llvm::IRBuilderBase::CreateCall(v288, *(_QWORD *)(v287 + 24), v287, (uint64_t)&__src, 2, (uint64_t)&__p);
    ++*(_DWORD *)(*(_QWORD *)v316 + 96);
    *(_QWORD *)&v347 = llvm::ConstantInt::get();
    *((_QWORD *)&v347 + 1) = llvm::ConstantFP::get();
    v289 = (uint64_t)v5 + *(_QWORD *)(*v5 - 24) + 40;
    LOWORD(v326) = 257;
    llvm::IRBuilderBase::CreateCall(v289, *(_QWORD *)(v287 + 24), v287, (uint64_t)&v347, 2, (uint64_t)&__p);
    ++*(_DWORD *)(*(_QWORD *)v316 + 96);
    *(_QWORD *)&v358 = llvm::ConstantInt::get();
    *((_QWORD *)&v358 + 1) = llvm::ConstantFP::get();
    v290 = (uint64_t)v5 + *(_QWORD *)(*v5 - 24) + 40;
    LOWORD(v326) = 257;
    llvm::IRBuilderBase::CreateCall(v290, *(_QWORD *)(v287 + 24), v287, (uint64_t)&v358, 2, (uint64_t)&__p);
    ++*(_DWORD *)(*(_QWORD *)v316 + 96);
    *(_QWORD *)&v355 = llvm::ConstantInt::get();
    *((_QWORD *)&v355 + 1) = llvm::ConstantFP::get();
    v291 = (uint64_t)v5 + *(_QWORD *)(*v5 - 24) + 40;
    LOWORD(v326) = 257;
    llvm::IRBuilderBase::CreateCall(v291, *(_QWORD *)(v287 + 24), v287, (uint64_t)&v355, 2, (uint64_t)&__p);
    v279 = *(_QWORD *)(**(_QWORD **)v316 - 24);
    v280 = *(_QWORD *)(v279 + *(_QWORD *)v316 + 400);
  }
  v292 = *(const char **)(v280 + 1400);
  if (v292)
  {
    ++*((_DWORD *)v5 + 24);
    *(_QWORD *)&__src = llvm::ConstantInt::get();
    *((_QWORD *)&__src + 1) = llvm::ConstantFP::get();
    v293 = strlen(v292);
    v294 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v5 + *(_QWORD *)(*v5 - 24) + 32, (uint64_t)v292, v293, *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 176), *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 2768), *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 200));
    v295 = (uint64_t)v5 + *(_QWORD *)(*v5 - 24) + 40;
    LOWORD(v326) = 257;
    llvm::IRBuilderBase::CreateCall(v295, *(_QWORD *)(v294 + 24), v294, (uint64_t)&__src, 2, (uint64_t)&__p);
    *((_BYTE *)v5 + 100) = 1;
    v279 = *(_QWORD *)(*v5 - 24);
  }
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)((char *)v5 + v279 + 40));
  if ((*a4 & 7u) - 4 <= 2)
    AGCLLVMDriverShader::linkDriverRuntime((AGCLLVMDriverShader *)v5, 2, (llvm::Function *)v5[9]);
  return v5;
}

uint64_t *AGCLLVMDriverFragmentShader::AGCLLVMDriverFragmentShader(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17[2];
  _BYTE v18[96];
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = AGCLLVMDriverShader::AGCLLVMDriverShader(a1, a2 + 1);
  AGCLLVMFragmentShader::AGCLLVMFragmentShader((uint64_t)(v8 + 9), a2 + 4, a4, 1);
  v9 = *a2;
  *a1 = *a2;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(v9 - 24)) = a2[10];
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) = a2[11];
  a1[9] = a2[12];
  v10 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
  if (*(_DWORD *)(a3 + 40))
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 160))(v10);
  else
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 168))(v10, a1[83]);
  if ((*(_BYTE *)(a4 + 33) & 0xE0) != 0)
  {
    v11 = *(_DWORD *)(*(_QWORD *)(a3 + 32) + 28);
    if (v11 <= 0x22 && ((1 << v11) & 0x581000000) != 0)
    {
      v19[0] = xmmword_1C3E37B70;
      v19[1] = xmmword_1C3E37B80;
      v17[0] = v18;
      v17[1] = (void *)0x800000000;
      v12 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 680))(v12);
      AGCLLVMGen3TargetLowerer::addLIBSpansFromDrawBufferState(v13, a4, (uint64_t)v19, (uint64_t)v17);
      v14 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 680))(v14);
      AGCLLVMGen3TargetLowerer::setupLIBRasterOrderGroupFromSpans(v15, (uint64_t)v17);
      if (v17[0] != v18)
        free(v17[0]);
    }
  }
  return a1;
}

uint64_t *AGCLLVMClearFragmentShader::AGCLLVMClearFragmentShader(uint64_t *a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3, _DWORD *a4, uint64_t a5)
{
  unint64_t p_p;
  uint64_t inserted;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  llvm::GlobalVariable *v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Type *v23;
  uint64_t *v24;
  llvm::Type **AlignedLoad;
  void *__p;
  unint64_t v28;
  __int16 v29;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 87), a2, a3);
  AGCLLVMDriverFragmentShader::AGCLLVMDriverFragmentShader(a1, (uint64_t *)off_1E7EBB540, (uint64_t)a2, a5);
  *a1 = (uint64_t)off_1E7EBB2D0;
  a1[87] = (uint64_t)&unk_1E7EBB440;
  a1[91] = (uint64_t)&unk_1E7EBB530;
  a1[9] = (uint64_t)&unk_1E7EBB340;
  a1[86] = (uint64_t)a4;
  p_p = (unint64_t)&__p;
  std::string::basic_string[abi:nn180100]<0>(&__p, "agc.clear");
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  *(_WORD *)(inserted + 18) = *(_WORD *)(inserted + 18) & 0xC00F | 0x650;
  __p = "entry";
  v29 = 259;
  operator new();
  v11 = llvm::BasicBlock::BasicBlock();
  v12 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v12 + 11) = v11;
  *((_QWORD *)v12 + 12) = v11 + 40;
  v13 = ((BYTE1(*a4) | HIWORD(*a4) | *a4) | HIBYTE(*a4)) & *(_DWORD *)(a5 + 32);
  while (v13)
  {
    v14 = __clz(v13);
    v15 = v14 ^ 0x1F;
    v13 ^= 0x80000000 >> v14;
    v16 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    p_p = p_p & 0xFFFFFFFF00000000 | v15;
    __p = "agc.clear_color";
    v28 = p_p;
    v29 = 2051;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v17 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v18 = a4;
    v19 = *((_QWORD *)v17 + 47);
    v20 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v17 + 32), v16);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v19, v20);
    v21 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 8;
    v29 = 257;
    v23 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v16, v22);
    v24 = (uint64_t *)(v21 + 32);
    a4 = v18;
    AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad(v24, v23, (uint64_t)v16, 0, (uint64_t)&__p);
    AGCLLVMFragmentShader::buildWriteFramebuffer((AGCLLVMFragmentShader *)(a1 + 9), AlignedLoad, v15, (*v18 >> v15) & 1 | (8 * ((HIBYTE(*v18) >> v15) & 1)) | (2* ((BYTE1(*v18) >> v15) & 1)) & 0xFFFFFFFB | (4 * ((BYTE2(*v18) >> v15) & 1)), 0);
  }
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40));
  return a1;
}

uint64_t AGCLLVMDriverShader::isValidUberFunctionCombination(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 544))(v8))
    return 0;
  if (a3)
  {
    v9 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 584))(v9, a2))
      return 0;
  }
  v10 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 552))(v10, a4);
}

void AGCLLVMDriverShader::handleUberInvalidCombinationFunction(AGCLLVMDriverShader *this, llvm::Function *a2)
{
  AGCLLVMDriverShader *v2;
  llvm::Instruction **v3;
  uint64_t v4;
  llvm::Instruction *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[33];

  v8[32] = *MEMORY[0x1E0C80C00];
  v6 = v8;
  v7 = 0x2000000000;
  if (this)
  {
    v2 = this;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v6, *((_QWORD *)v2 + 3));
      v2 = (AGCLLVMDriverShader *)*((_QWORD *)v2 + 1);
    }
    while (v2);
    v3 = (llvm::Instruction **)v6;
    if ((_DWORD)v7)
    {
      v4 = 8 * v7;
      do
      {
        v5 = *v3++;
        llvm::Instruction::eraseFromParent(v5);
        v4 -= 8;
      }
      while (v4);
      v3 = (llvm::Instruction **)v6;
    }
    if (v3 != v8)
      free(v3);
  }
}

void std::vector<llvm::Function *>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t AGCLLVMBackgroundObjectFragmentShader::AGCLLVMBackgroundObjectFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  BOOL v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  const UInt8 *v20;
  CFIndex v21;
  uint64_t Bitcode;
  uint64_t v23;
  void *v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Function;
  llvm::GlobalVariable *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::GlobalVariable *v36;
  llvm::ArrayType *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::GlobalVariable *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::GlobalVariable *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::GlobalVariable *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  uint64_t Impl;
  uint64_t v61;
  uint64_t v62;
  llvm::IRBuilderBase *v63;
  uint64_t v64;
  llvm::BasicBlock *v65;
  llvm::Instruction *FirstNonPHI;
  llvm::Function *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t inserted;
  uint64_t *v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  llvm::IRBuilderBase *v95;
  llvm::Value *v96;
  llvm::Value *v97;
  llvm::Type *v98;
  uint64_t GEP;
  uint64_t v100;
  uint64_t v101;
  llvm::Value *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *Name;
  unint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  BOOL v111;
  _BOOL4 v112;
  _BOOL4 v113;
  BOOL v114;
  _BYTE *v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  unint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  char v132;
  int v133;
  char v134;
  uint64_t v135;
  int v136;
  unsigned __int8 v137;
  unsigned __int8 v138;
  int v139;
  unsigned __int8 v140;
  int v141;
  llvm::Function *v142;
  BOOL v143;
  BOOL v144;
  _BOOL4 v145;
  uint64_t v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  llvm::Function **v152;
  llvm::Function **v153;
  _BYTE *v154;
  uint64_t v155;
  llvm::Function **v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  int AsUnsignedInteger;
  unsigned int v163;
  int v164;
  char v165;
  uint64_t v166;
  int v167;
  unsigned __int8 v168;
  int v169;
  unsigned __int8 v170;
  int v171;
  llvm::Function *v172;
  uint64_t v173;
  uint64_t v174;
  llvm::Type **v175;
  llvm::Type **v176;
  llvm::Type **v177;
  llvm::Function **v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  llvm::Function **v182;
  llvm::Function *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  llvm::Function *v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  llvm::Value *v192;
  llvm::Value *v193;
  uint64_t v194;
  llvm::IRBuilderBase *v195;
  llvm::Value *v196;
  char v197;
  char v198;
  uint64_t v199;
  llvm::Value *v200;
  llvm::Value *Element;
  llvm::Value *v202;
  llvm::Value *v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  llvm::Type **v210;
  int v211;
  uint64_t v212;
  llvm::Function **v213;
  llvm::Function **v214;
  llvm::Function **v215;
  llvm::Function *v216;
  llvm::Function *v217;
  uint64_t j;
  llvm::Instruction *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  llvm::Value *v225;
  uint64_t v226;
  llvm::Value *v227;
  llvm::Value *v228;
  uint64_t v229;
  llvm::IRBuilderBase *v230;
  llvm::Value *v231;
  llvm::Value *InsertElement;
  uint64_t v233;
  llvm::IRBuilderBase *v234;
  llvm::Value *v235;
  uint64_t v236;
  llvm::Function *v237;
  uint64_t k;
  llvm::Instruction *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  llvm::Function *v243;
  uint64_t m;
  llvm::Instruction *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  llvm::Instruction **v249;
  uint64_t v250;
  llvm::Instruction *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  uint64_t v265;
  llvm::GlobalVariable *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  llvm::Value *v271;
  llvm::Type *v272;
  llvm::Type **v273;
  llvm::GlobalVariable *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unsigned int v279;
  const llvm::Twine *v280;
  llvm::GetElementPtrInst *ConstInBoundsGEP2_32;
  unsigned int v282;
  unsigned int v283;
  const llvm::Twine *v284;
  llvm::GetElementPtrInst *v285;
  unsigned int v286;
  unsigned int v287;
  const llvm::Twine *v288;
  llvm::GetElementPtrInst *v289;
  uint64_t v290;
  llvm::Type *v291;
  uint64_t *v292;
  uint64_t AlignedLoad;
  uint64_t v294;
  uint64_t v295;
  llvm::Type *v296;
  uint64_t v297;
  llvm::Value *v298;
  uint64_t FMul;
  uint64_t FAdd;
  uint64_t v301;
  uint64_t v302;
  llvm::Type *v303;
  uint64_t v304;
  llvm::Value *v305;
  uint64_t v306;
  llvm::Value *v307;
  int v308;
  llvm::Value *v309;
  uint64_t v310;
  llvm::GlobalVariable *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  llvm::Value *v315;
  llvm::Type *v316;
  llvm::Value *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  llvm::IRBuilderBase *v322;
  llvm::Value *v323;
  llvm::Type *v324;
  uint64_t UIToFP;
  llvm::IRBuilderBase *v326;
  llvm::Value *v327;
  uint64_t v328;
  llvm::IRBuilderBase *v329;
  llvm::Value *v330;
  uint64_t v331;
  llvm::IRBuilderBase *v332;
  uint64_t v333;
  llvm::GlobalVariable *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  llvm::Value *v338;
  llvm::Type *v339;
  llvm::Value *v340;
  llvm::Type *v341;
  llvm::Value *FPToUI;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  llvm::Value *v347;
  uint64_t v348;
  llvm::Value *v349;
  llvm::IRBuilderBase *v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v356;
  llvm::Value *v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t TextureHeapGlobal;
  llvm::GlobalVariable *v363;
  llvm::Value *v364;
  llvm::GlobalVariable *SamplerStateGlobal;
  llvm::Value *v366;
  llvm::Value *v367;
  llvm::Value *v368;
  int v369;
  llvm::Function *v370;
  int v371;
  uint64_t v372;
  int v373;
  unsigned int v374;
  _BOOL4 v375;
  unsigned int v376;
  int v377;
  int v378;
  unsigned int v379;
  int v380;
  llvm::GlobalVariable *ImageStateGlobal;
  unint64_t v382;
  unsigned __int8 v383;
  int v384;
  llvm::Type **v385;
  unsigned __int8 v386;
  uint64_t *v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int v392;
  unsigned int v393;
  uint64_t v394;
  unint64_t v395;
  llvm::GlobalVariable *v396;
  uint64_t v397;
  int v398;
  int v399;
  uint64_t v400;
  llvm::Function **v401;
  llvm::Function **v402;
  unint64_t v403;
  int v404[8];
  __int16 v405;
  __int128 v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char v413;
  BOOL v414;
  llvm::Type **v415;
  llvm::Type **v416;
  char v417;
  __int128 v418;
  uint64_t v419;
  int v420;
  __int16 v421;
  _BYTE v422[27];
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int16 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  llvm::Value *v431;
  int v432;
  __int128 v433;
  _BYTE v434[28];
  llvm::Value *v435;
  uint64_t v436;
  uint64_t v437;
  char v438;
  __int16 v439;
  char v440;
  char v441;
  uint64_t v442;
  char v443;
  _BYTE v444[24];
  _BYTE *v445;
  _QWORD v446[3];
  uint64_t Cast;
  uint64_t v448;
  uint64_t v449;

  v449 = *MEMORY[0x1E0C80C00];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 696), a2, a3);
  AGCLLVMDriverFragmentShader::AGCLLVMDriverFragmentShader((uint64_t *)a1, (uint64_t *)off_1E7EBB848, (uint64_t)a2, a4);
  *(_QWORD *)a1 = off_1E7EBB5D8;
  *(_QWORD *)(a1 + 696) = &unk_1E7EBB748;
  *(_QWORD *)(a1 + 728) = &unk_1E7EBB838;
  *(_QWORD *)(a1 + 72) = &unk_1E7EBB648;
  *(_QWORD *)(a1 + 688) = a5;
  v387 = (uint64_t *)(a1 + 72);
  if (((*a5 | ((unint64_t)*((unsigned __int16 *)a5 + 2) << 32)) & 0x10000000000) != 0)
  {
    v17 = (*(_DWORD *)(*(_QWORD *)(a1 + 664) + 32) & 0xE000) == 0;
    v388 = *(_DWORD *)(*(_QWORD *)(a1 + 664) + 32) & 0xE000;
    if (v388)
      v18 = "_msaa";
    else
      v18 = (const std::string::value_type *)&unk_1C3E4D9BB;
    *(_BYTE *)(a1 + 8) = 1;
    v397 = a1 + 8;
    if (v17)
      v19 = 0;
    else
      v19 = 5;
    memset(v422, 0, 24);
    std::string::reserve((std::string *)v422, v19 | 8);
    std::string::append((std::string *)v422, "bgo_uber", 8uLL);
    std::string::append((std::string *)v422, v18, v19);
    if (v422[23] >= 0)
      v20 = v422;
    else
      v20 = *(const UInt8 **)v422;
    if (v422[23] >= 0)
      v21 = v422[23];
    else
      v21 = *(_QWORD *)&v422[8];
    Bitcode = AGCLLVMObject::readBitcode((uint64_t)a3, v20, v21, 0);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 464) + 32);
    v24 = *(void **)(v23 + 8);
    if (v24)
      v25 = strlen(*(const char **)(v23 + 8));
    else
      v25 = 0;
    llvm::Module::setTargetTriple(Bitcode, v24, v25);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 464) + 32);
    if (*(_QWORD *)(v26 + 16))
      strlen(*(const char **)(v26 + 16));
    llvm::Module::setDataLayout();
    v410 = Bitcode;
    v445 = 0;
    llvm::Linker::linkModules();
    v27 = v445;
    if (v445 == v444)
    {
      v28 = 4;
      v27 = v444;
    }
    else
    {
      if (!v445)
      {
LABEL_34:
        v29 = v410;
        v410 = 0;
        if (v29)
        {
          v30 = MEMORY[0x1CAA2CC9C]();
          MEMORY[0x1CAA2D68C](v30, 0x10B2C407FF26C1CLL);
        }
        if ((v422[23] & 0x80000000) != 0)
          operator delete(*(void **)v422);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 336) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 368);
        Function = llvm::Module::getFunction();
        v32 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 320), (llvm::Type *)8);
        *(_QWORD *)v422 = "agc.clear_colors";
        LOWORD(v423) = 259;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        v33 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v34 = *(_QWORD *)(v33 + 376);
        v396 = v32;
        v35 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v33 + 32), v32);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v34, v35);
        if ((*(_WORD *)(Function + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        v36 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        *(_QWORD *)v422 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 256);
        *(_QWORD *)&v422[8] = *(_QWORD *)v422;
        *(_QWORD *)&v422[16] = *(_QWORD *)v422;
        v37 = (llvm::ArrayType *)llvm::StructType::get();
        llvm::ArrayType::get(v37, (llvm::Type *)8);
        *(_QWORD *)v422 = "agc.pbe_rotations";
        LOWORD(v423) = 259;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        v38 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v39 = *(_QWORD *)(v38 + 376);
        v40 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v38 + 32), v36);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v39, v40);
        v41 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 200), (llvm::Type *)8);
        *(_QWORD *)v422 = "agc.slice_indices";
        LOWORD(v423) = 259;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        v42 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v43 = *(_QWORD *)(v42 + 376);
        v389 = (uint64_t)v41;
        v44 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v42 + 32), v41);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v43, v44);
        v45 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        if ((*(_WORD *)(Function + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        *(_QWORD *)v422 = "agc.draw_buffer_state";
        LOWORD(v423) = 259;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        v46 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v47 = *(_QWORD *)(v46 + 376);
        v48 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v46 + 32), v45);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v47, v48);
        v49 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        if ((*(_WORD *)(Function + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        *(_QWORD *)v422 = "agc.bgo_state";
        LOWORD(v423) = 259;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        v50 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v51 = *(_QWORD *)(v50 + 376);
        v52 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v50 + 32), v49);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v51, v52);
        SamplerStateGlobal = AGCLLVMDriverShader::getSamplerStateGlobal((AGCLLVMDriverShader *)a1);
        TextureHeapGlobal = AGCLLVMDriverShader::getTextureHeapGlobal((AGCLLVMDriverShader *)a1, 1u);
        v53 = *(_QWORD *)a1;
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1780))
        {
          v385 = 0;
          *(_QWORD *)(a1 + 48) |= 0xFFuLL;
          v55 = (uint64_t)v36;
          v54 = (uint64_t)v396;
        }
        else
        {
          v56 = llvm::User::operator new((llvm::User *)0x58);
          llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1672), (llvm::Type *)8);
          *(_QWORD *)v422 = "agc.read_image_words_indirect";
          LOWORD(v423) = 259;
          llvm::GlobalVariable::GlobalVariable();
          llvm::GlobalObject::setSection();
          llvm::GlobalObject::setAlignment();
          *(_QWORD *)v422 = &v422[16];
          *(_QWORD *)&v422[8] = 0x2000000000;
          v385 = (llvm::Type **)v56;
          v57 = llvm::ValueAsMetadata::get();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v422, v57);
          llvm::ConstantInt::get();
          v58 = llvm::ValueAsMetadata::get();
          for (i = 0; i != 8; ++i)
          {
            v411 = v58;
            llvm::ConstantInt::get();
            v412 = llvm::ValueAsMetadata::get();
            Impl = llvm::MDTuple::getImpl();
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v422, Impl);
          }
          v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 376);
          v62 = llvm::MDTuple::getImpl();
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v61, v62);
          v55 = (uint64_t)v36;
          v54 = (uint64_t)v396;
          if (*(_BYTE **)v422 != &v422[16])
            free(*(void **)v422);
          v53 = *(_QWORD *)a1;
        }
        v63 = (llvm::IRBuilderBase *)(*(_QWORD *)(v53 - 24) + a1 + 40);
        v64 = *(_QWORD *)(Function + 80);
        if (v64)
          v65 = (llvm::BasicBlock *)(v64 - 24);
        else
          v65 = 0;
        FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v65);
        llvm::IRBuilderBase::SetInsertPoint(v63, FirstNonPHI);
        v68 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        if (*(_DWORD *)(*(_QWORD *)(v68 + a1 + 400) + 876) != 2)
        {
          AGCLLVMDriverShader::mutateAllConstantArgsToSharedRegister((AGCLLVMDriverShader *)Function, v67);
          v68 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        }
        Cast = 0;
        v448 = 0;
        v69 = v68 + a1 + 40;
        if ((*(_BYTE *)(Function + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        v70 = llvm::PointerType::get();
        LOWORD(v423) = 257;
        v446[0] = llvm::IRBuilderBase::CreateCast(v69, 49, (uint64_t)v45, v70, (uint64_t)v422);
        v71 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
        if ((*(_BYTE *)(Function + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        v72 = llvm::PointerType::get();
        LOWORD(v416) = 257;
        v446[1] = llvm::IRBuilderBase::CreateCast(v71, 49, (uint64_t)v49, v72, (uint64_t)&v411);
        v73 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
        v74 = llvm::PointerType::get();
        LOWORD(v409) = 257;
        v446[2] = llvm::IRBuilderBase::CreateCast(v73, 49, v54, v74, (uint64_t)&v406);
        v75 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
        if ((*(_BYTE *)(Function + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)Function);
        v76 = llvm::PointerType::get();
        v405 = 257;
        Cast = llvm::IRBuilderBase::CreateCast(v75, 49, v55, v76, (uint64_t)v404);
        v77 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
        v78 = llvm::PointerType::get();
        v421 = 257;
        v448 = llvm::IRBuilderBase::CreateCast(v77, 49, v389, v78, (uint64_t)&v418);
        v79 = llvm::Function::args((llvm::Function *)Function);
        if (v79 != v80)
        {
          v81 = v79;
          v82 = v80;
          v83 = 0;
          do
          {
            v84 = v83 + 1;
            llvm::Value::replaceAllUsesWith();
            v81 += 40;
            v83 = v84;
          }
          while (v81 != v82);
        }
        inserted = AGCLLVMBuilder::getOrInsertFunction<>();
        v86 = (uint64_t *)inserted;
        v87 = *(_WORD *)(inserted + 18) & 0xC00F;
        if (v388)
        {
          *(_WORD *)(inserted + 18) = v87 | 0x680;
          if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1730))
          {
            llvm::Module::getOrInsertNamedMetadata();
            llvm::ConstantInt::get();
            *(_QWORD *)v422 = llvm::ValueAsMetadata::get();
            llvm::MDTuple::getImpl();
            llvm::NamedMDNode::addOperand();
          }
        }
        else
        {
          *(_WORD *)(inserted + 18) = v87 | 0x650;
        }
        if (*(_QWORD *)(Function + 72) != Function + 72)
          llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer((uint64_t)(v86 + 9), v86 + 9, Function + 72, *(uint64_t **)(Function + 80), (uint64_t *)(Function + 72));
        v370 = (llvm::Function *)v86;
        llvm::Function::eraseFromParent((llvm::Function *)Function);
        v88 = llvm::PointerType::get();
        v89 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32, (uint64_t)"agc.bgo_get_texture", 19, v88, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 224));
        *(_DWORD *)(v89 + 32) = *(_DWORD *)(v89 + 32) & 0xFFFFBFC0 | 0x4007;
        *(_QWORD *)v422 = "entry";
        LOWORD(v423) = 259;
        operator new();
        v90 = llvm::BasicBlock::BasicBlock();
        v91 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        *(_QWORD *)(v91 + 88) = v90;
        *(_QWORD *)(v91 + 96) = v90 + 40;
        if ((*(_BYTE *)(v89 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v89);
        if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1780))
        {
          v92 = *(_QWORD *)(v89 + 88);
          v93 = llvm::PointerType::get();
          v94 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32, (uint64_t)"llvm.agx.textureState", 21, v93, v93, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 240));
          v95 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          v96 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v423) = 257;
          v98 = AGCLLVMBuilder::tryDeducePointeeType(v385, v97);
          GEP = llvm::IRBuilderBase::CreateGEP(v95, v98, (llvm::Value *)v385, v96, (const llvm::Twine *)v422);
          LOWORD(v416) = 257;
          *(_QWORD *)&v418 = llvm::IRBuilderBase::CreateCast((uint64_t)v95, 49, GEP, v93, (uint64_t)&v411);
          v100 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          v101 = *(_QWORD *)(v100 + 240);
          LOWORD(v409) = 257;
          *((_QWORD *)&v418 + 1) = llvm::IRBuilderBase::CreateCast(v100 + 40, 39, v92, v101, (uint64_t)&v406);
          v405 = 257;
          v102 = llvm::IRBuilderBase::CreateCall((uint64_t)v95, *(_QWORD *)(v94 + 24), v94, (uint64_t)&v418, 2, (uint64_t)v404);
          llvm::IRBuilderBase::CreateRet((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v102);
        }
        v360 = v89;
        v401 = 0;
        v402 = 0;
        v403 = 0;
        std::vector<llvm::Function *>::reserve((void **)&v401, 0x2338uLL);
        v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 368);
        v104 = v103 + 24;
        v105 = *(_QWORD *)(v103 + 32);
        if (v105 == v103 + 24)
        {
LABEL_273:
          v213 = v401;
          v214 = v402;
          if (v401 != v402)
          {
            v215 = v401;
            do
            {
              v216 = *v215++;
              llvm::Function::eraseFromParent(v216);
            }
            while (v215 != v214);
          }
          v402 = v213;
          *(_QWORD *)v422 = &v422[16];
          *(_QWORD *)&v422[8] = 0x2000000000;
          v217 = (llvm::Function *)llvm::Module::getFunction();
          for (j = *((_QWORD *)v217 + 1); j; j = *(_QWORD *)(j + 8))
          {
            v219 = *(llvm::Instruction **)(j + 24);
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v219);
            v220 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
            if (*(_QWORD *)(v220 + 1576))
              strlen(*(const char **)(v220 + 1576));
            v221 = AGCLLVMBuilder::getOrInsertFunction<>();
            v222 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
            if (*(_QWORD *)(v222 + 1584))
              strlen(*(const char **)(v222 + 1584));
            v223 = AGCLLVMBuilder::getOrInsertFunction<>();
            v224 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v397;
            LOWORD(v416) = 257;
            v225 = llvm::IRBuilderBase::CreateCall(v224 + 32, **(_QWORD **)(*(_QWORD *)v221 + 16), v221, 0, 0, (uint64_t)&v411);
            v226 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v397;
            LOWORD(v416) = 257;
            v227 = llvm::IRBuilderBase::CreateCall(v226 + 32, **(_QWORD **)(*(_QWORD *)v223 + 16), v223, 0, 0, (uint64_t)&v411);
            v228 = (llvm::Value *)llvm::UndefValue::get();
            v229 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            LOWORD(v416) = 257;
            v230 = (llvm::IRBuilderBase *)(v229 + 40);
            v231 = (llvm::Value *)llvm::ConstantInt::get();
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v230, v228, v225, v231, (const llvm::Twine *)&v411);
            v233 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            LOWORD(v416) = 257;
            v234 = (llvm::IRBuilderBase *)(v233 + 40);
            v235 = (llvm::Value *)llvm::ConstantInt::get();
            llvm::IRBuilderBase::CreateInsertElement(v234, InsertElement, v227, v235, (const llvm::Twine *)&v411);
            llvm::Value::replaceAllUsesWith();
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v422, (uint64_t)v219);
          }
          v236 = llvm::Module::getFunction();
          v237 = (llvm::Function *)v236;
          if (v236)
          {
            for (k = *(_QWORD *)(v236 + 8); k; k = *(_QWORD *)(k + 8))
            {
              v239 = *(llvm::Instruction **)(k + 24);
              llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v239);
              v240 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
              if (*(_QWORD *)(v240 + 1592))
                strlen(*(const char **)(v240 + 1592));
              v241 = AGCLLVMBuilder::getOrInsertFunction<>();
              v242 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v397;
              LOWORD(v416) = 257;
              llvm::IRBuilderBase::CreateCall(v242 + 32, **(_QWORD **)(*(_QWORD *)v241 + 16), v241, 0, 0, (uint64_t)&v411);
              llvm::Value::replaceAllUsesWith();
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v422, (uint64_t)v239);
            }
          }
          v243 = (llvm::Function *)llvm::Module::getFunction();
          for (m = *((_QWORD *)v243 + 1); m; m = *(_QWORD *)(m + 8))
          {
            v245 = *(llvm::Instruction **)(m + 24);
            llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v245);
            v246 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
            if (*(_QWORD *)(v246 + 1616))
            {
              strlen(*(const char **)(v246 + 1616));
              v247 = AGCLLVMBuilder::getOrInsertFunction<>();
              v248 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v397;
              LOWORD(v416) = 257;
              llvm::IRBuilderBase::CreateCall(v248 + 32, **(_QWORD **)(*(_QWORD *)v247 + 16), v247, 0, 0, (uint64_t)&v411);
            }
            else
            {
              llvm::ConstantInt::get();
            }
            llvm::Value::replaceAllUsesWith();
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v422, (uint64_t)v245);
          }
          if (*(_DWORD *)&v422[8])
          {
            v249 = *(llvm::Instruction ***)v422;
            v250 = 8 * *(unsigned int *)&v422[8];
            do
            {
              v251 = *v249++;
              llvm::Instruction::eraseFromParent(v251);
              v250 -= 8;
            }
            while (v250);
          }
          llvm::Function::eraseFromParent(v217);
          if (v237)
            llvm::Function::eraseFromParent(v237);
          llvm::Function::eraseFromParent(v243);
          *(_QWORD *)(a1 + 680) = -1;
          AGCLLVMDriverShader::finalizeDriverRuntimeLinking((AGCLLVMDriverShader *)a1, v370, 0);
          if (*(_BYTE **)v422 != &v422[16])
            free(*(void **)v422);
          if (v213)
            operator delete(v213);
          return a1;
        }
        v368 = (llvm::Value *)(a1 + 368);
        v390 = v103 + 24;
        while (1)
        {
          if (v105)
            v106 = v105 - 56;
          else
            v106 = 0;
          Name = (_QWORD *)llvm::Value::getName((llvm::Value *)v106);
          if (v108 < 0xD)
            goto LABEL_231;
          v109 = Name;
          v110 = v108;
          v111 = *Name == 0x5F6F67622E636761 && *(_QWORD *)((char *)Name + 5) == 0x5F64616F6C5F6F67;
          v112 = !v111;
          if (v108 == 13)
          {
            v113 = 0;
          }
          else
          {
            v114 = *Name == 0x5F6F67622E636761 && *(_QWORD *)((char *)Name + 6) == 0x5F7261656C635F6FLL;
            v113 = v114;
          }
          if (v112 && !v113)
            goto LABEL_231;
          *(_DWORD *)(v106 + 32) = *(_DWORD *)(v106 + 32) & 0xFFFFBFC0 | 0x4007;
          if (!v112)
            break;
          if (v113)
          {
            if (v108 < 0xF)
            {
              v117 = -1;
            }
            else
            {
              v116 = memchr((char *)Name + 14, 95, v108 - 14);
              if (v116)
                v117 = v116 - (_BYTE *)v109;
              else
                v117 = -1;
            }
            if (v110 <= v117 + 1)
            {
              v155 = -1;
            }
            else
            {
              v154 = memchr((char *)v109 + v117 + 1, 95, v110 - (v117 + 1));
              v155 = v154 - (_BYTE *)v109;
              if (!v154)
                v155 = -1;
            }
            if (v110 > v155 + 1)
              memchr((char *)v109 + v155 + 1, 95, v110 - (v155 + 1));
            *(_QWORD *)v422 = 0;
            AsUnsignedInteger = llvm::getAsUnsignedInteger();
            LOBYTE(v163) = v422[0];
            if (*(_QWORD *)v422 >= 0x100uLL)
              LOBYTE(v163) = 0;
            v163 = v163;
            if (AsUnsignedInteger)
              v163 = 0;
            v393 = v163;
            *(_QWORD *)v422 = 0;
            v164 = llvm::getAsUnsignedInteger();
            v165 = v422[0];
            if (*(_QWORD *)v422 >= 0x100uLL)
              v165 = 0;
            v166 = (v165 != 0) & ~v164;
            *(_QWORD *)v422 = 0;
            v167 = llvm::getAsUnsignedInteger();
            v168 = v422[0];
            if (*(_QWORD *)v422 >= 0x100uLL)
              v168 = 0;
            if (v167)
              v168 = 0;
            v386 = v168;
            *(_QWORD *)v422 = 0;
            v169 = llvm::getAsUnsignedInteger();
            v170 = v422[0];
            if (*(_QWORD *)v422 >= 0x100uLL)
              v170 = 0;
            if (v169)
              v171 = 0;
            else
              v171 = v170;
            if (AGCLLVMDriverShader::isValidUberFunctionCombination((_QWORD *)a1, v393, v166, 1)
              && (v171 != 6 || v386 == 1 && (v393 == 3 || v393 == 14)))
            {
              *(_QWORD *)v422 = "entry";
              LOWORD(v423) = 259;
              operator new();
              v173 = llvm::BasicBlock::BasicBlock();
              v174 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
              *(_QWORD *)(v174 + 88) = v173;
              *(_QWORD *)(v174 + 96) = v173 + 40;
              if ((*(_BYTE *)(v106 + 18) & 1) != 0)
              {
                llvm::Function::BuildLazyArguments((llvm::Function *)v106);
                v176 = *(llvm::Type ***)(v106 + 88);
                v104 = v390;
                if ((*(_WORD *)(v106 + 18) & 1) != 0)
                {
                  llvm::Function::BuildLazyArguments((llvm::Function *)v106);
                  v175 = *(llvm::Type ***)(v106 + 88);
                  if ((*(_WORD *)(v106 + 18) & 1) != 0)
                    llvm::Function::BuildLazyArguments((llvm::Function *)v106);
                  v177 = *(llvm::Type ***)(v106 + 88);
                }
                else
                {
                  v175 = *(llvm::Type ***)(v106 + 88);
                  v177 = v175;
                }
              }
              else
              {
                v175 = *(llvm::Type ***)(v106 + 88);
                v176 = v175;
                v177 = v175;
                v104 = v390;
              }
              v184 = *(_QWORD *)((char *)v368 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32);
              (*(void (**)(_BYTE *__return_ptr, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v184 + 560))(v422, v184, v393, v166, 0, 0);
              if (!BYTE9(v423))
              {
                v185 = *(_QWORD *)(*(_QWORD *)a1 - 24);
                v186 = *(_QWORD *)(v185 + a1 + 312 + 32);
                LOWORD(v416) = 257;
                v176 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(v185 + a1 + 40, 49, (uint64_t)v176, v186, (uint64_t)&v411);
              }
              v187 = *(_DWORD *)(*(_QWORD *)(a1 + 664) + 32);
              LODWORD(v411) = v393;
              HIDWORD(v411) = v386;
              LODWORD(v412) = (unsigned __int16)v187 >> 12;
              HIDWORD(v412) = v171;
              v413 = v166;
              v414 = (v187 & 0x2000000) == 0;
              v415 = v175 + 5;
              v416 = v177 + 10;
              LODWORD(v406) = 15;
              v404[0] = 0;
              AGCLLVMStatelessFragmentShader::buildWriteFramebuffer(v387, (unsigned int *)&v411, v422, v176, (int *)&v406, v404, 0);
              llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40));
              goto LABEL_231;
            }
            AGCLLVMDriverShader::handleUberInvalidCombinationFunction(*(AGCLLVMDriverShader **)(v106 + 8), v172);
            v152 = v402;
            if ((unint64_t)v402 < v403)
            {
              *v402 = (llvm::Function *)v106;
              v153 = v152 + 1;
              v104 = v390;
              goto LABEL_230;
            }
            v178 = v401;
            v179 = v402 - v401;
            v180 = v179 + 1;
            if ((unint64_t)(v179 + 1) >> 61)
LABEL_341:
              abort();
            v181 = v403 - (_QWORD)v401;
            if ((uint64_t)(v403 - (_QWORD)v401) >> 2 > v180)
              v180 = v181 >> 2;
            if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFF8)
              v160 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v160 = v180;
            if (v160)
              v160 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v160);
            else
              v161 = 0;
            v182 = (llvm::Function **)(v160 + 8 * v179);
            *v182 = (llvm::Function *)v106;
            v153 = v182 + 1;
            if (v152 != v178)
            {
              do
              {
                v188 = *--v152;
                *--v182 = v188;
              }
              while (v152 != v178);
              goto LABEL_226;
            }
            goto LABEL_227;
          }
LABEL_231:
          v105 = *(_QWORD *)(v105 + 8);
          if (v105 == v104)
            goto LABEL_273;
        }
        if (v108 >= 0xE && (v118 = memchr((char *)Name + 13, 95, v108 - 13)) != 0)
          v119 = v118 - (_BYTE *)v109;
        else
          v119 = -1;
        if (v110 > v119 + 1 && (v120 = memchr((char *)v109 + v119 + 1, 95, v110 - (v119 + 1))) != 0)
          v121 = v120 - (_BYTE *)v109;
        else
          v121 = -1;
        if (v110 > v121 + 1 && (v122 = memchr((char *)v109 + v121 + 1, 95, v110 - (v121 + 1))) != 0)
          v123 = v122 - (_BYTE *)v109;
        else
          v123 = -1;
        v124 = v123 + 1;
        if (v110 > v124 && (v125 = memchr((char *)v109 + v124, 95, v110 - v124)) != 0)
          v126 = v125 - (_BYTE *)v109;
        else
          v126 = -1;
        if (v110 > v126 + 1)
          memchr((char *)v109 + v126 + 1, 95, v110 - (v126 + 1));
        *(_QWORD *)v422 = 0;
        v127 = llvm::getAsUnsignedInteger();
        LOBYTE(v128) = v422[0];
        if (*(_QWORD *)v422 >= 0x100uLL)
          LOBYTE(v128) = 0;
        if (v127)
          v128 = 0;
        else
          v128 = v128;
        v371 = v128;
        v129 = v128 - 1;
        *(_QWORD *)v422 = 0;
        v130 = llvm::getAsUnsignedInteger();
        LOBYTE(v131) = v422[0];
        if (*(_QWORD *)v422 >= 0x100uLL)
          LOBYTE(v131) = 0;
        v131 = v131;
        if (v130)
          v131 = 0;
        v392 = v131;
        *(_QWORD *)v422 = 0;
        v377 = llvm::getAsUnsignedInteger();
        v132 = v422[0];
        if (*(_QWORD *)v422 >= 0x100uLL)
          v132 = 0;
        v375 = v132 != 0;
        v380 = v129;
        v374 = AGCLLVMBackgroundObjectFragmentShader::getImageDimFromLoadDimension(_AGCBackgroundObjectState::LoadDimension)::dim_table[v129];
        *(_QWORD *)v422 = 0;
        v133 = llvm::getAsUnsignedInteger();
        v134 = v422[0];
        if (*(_QWORD *)v422 >= 0x100uLL)
          v134 = 0;
        v135 = (v134 != 0) & ~v133;
        *(_QWORD *)v422 = 0;
        v136 = llvm::getAsUnsignedInteger();
        v137 = v422[0];
        if (*(_QWORD *)v422 >= 0x100uLL)
          v137 = 0;
        if (v136)
          v138 = 0;
        else
          v138 = v137;
        *(_QWORD *)v422 = 0;
        v139 = llvm::getAsUnsignedInteger();
        v140 = v422[0];
        if (*(_QWORD *)v422 >= 0x100uLL)
          v140 = 0;
        if (v139)
          v141 = 0;
        else
          v141 = v140;
        if (AGCLLVMDriverShader::isValidUberFunctionCombination((_QWORD *)a1, v392, v135, 1)
          && (v141 != 6 || v138 == 1 && (v392 == 14 || v392 == 3)))
        {
          v143 = v380 == 2 && v375 & ~(_BYTE)v377;
          v144 = v380 == 1 || v388 == 0;
          v145 = !v144;
          if (!v143 && !v145)
          {
            v358 = v375 & ~v377;
            v378 = v141;
            v383 = v138;
            *(_QWORD *)v422 = "entry";
            LOWORD(v423) = 259;
            operator new();
            v146 = llvm::BasicBlock::BasicBlock();
            v147 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            *(_QWORD *)(v147 + 88) = v146;
            *(_QWORD *)(v147 + 96) = v146 + 40;
            v400 = 0;
            v148 = *(_WORD *)(v106 + 18);
            if ((v148 & 1) != 0)
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v106);
              v148 = *(_WORD *)(v106 + 18);
              v149 = *(_QWORD *)(v106 + 88);
              v400 = v149;
              v151 = v380;
              if ((v148 & 1) != 0
                && (llvm::Function::BuildLazyArguments((llvm::Function *)v106),
                    v149 = *(_QWORD *)(v106 + 88),
                    v148 = *(_WORD *)(v106 + 18),
                    (v148 & 1) != 0))
              {
                llvm::Function::BuildLazyArguments((llvm::Function *)v106);
                v150 = *(_QWORD *)(v106 + 88);
                v148 = *(_WORD *)(v106 + 18);
              }
              else
              {
                v150 = v149;
              }
            }
            else
            {
              v149 = *(_QWORD *)(v106 + 88);
              v400 = v149;
              v150 = v149;
              v151 = v380;
            }
            v356 = v150;
            if (v388 && v371 == 2)
            {
              if ((v148 & 1) != 0)
              {
                llvm::Function::BuildLazyArguments((llvm::Function *)v106);
                v150 = *(_QWORD *)(v106 + 88);
                v148 = *(_WORD *)(v106 + 18);
              }
              v357 = (llvm::Value *)(v150 + 120);
            }
            else
            {
              v357 = 0;
            }
            v189 = v150;
            if ((v148 & 1) != 0)
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v106);
              v150 = *(_QWORD *)(v106 + 88);
              if ((*(_WORD *)(v106 + 18) & 1) != 0)
                llvm::Function::BuildLazyArguments((llvm::Function *)v106);
              v189 = *(_QWORD *)(v106 + 88);
            }
            v372 = v189;
            v190 = *(_QWORD *)((char *)v368 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32);
            (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v190 + 560))(&v411, v190, v392, v135, 0, 0);
            *(_DWORD *)v422 = 0;
            *(_QWORD *)&v422[4] = v374 | 0xA00000000;
            memset(&v422[16], 0, 11);
            v423 = 0u;
            v424 = 0u;
            v425 = 0u;
            v426 = 0u;
            v427 = 0;
            v428 = 0u;
            v429 = 0u;
            v430 = 0u;
            v431 = 0;
            v432 = 4;
            v439 = 0;
            v440 = 0;
            v433 = 0u;
            memset(v434, 0, sizeof(v434));
            v435 = 0;
            v436 = 0;
            v438 = 0;
            v437 = 0;
            v441 = 1;
            v442 = 0;
            v443 = 0;
            if (v417)
              v191 = v411 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 280 + 32);
            else
              v191 = 3;
            v192 = (llvm::Value *)(v149 + 40);
            *(_DWORD *)&v422[8] = v191;
            if (v151)
            {
              if (v151 == 2)
              {
                v193 = v192;
              }
              else
              {
                v193 = (llvm::Value *)llvm::UndefValue::get();
                v197 = 1;
                do
                {
                  v198 = v197;
                  v199 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
                  LOWORD(v409) = 257;
                  v200 = (llvm::Value *)llvm::ConstantInt::get();
                  Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v199 + 40), v192, v200, (const llvm::Twine *)&v406);
                  v405 = 257;
                  v202 = (llvm::Value *)llvm::ConstantInt::get();
                  v193 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v199 + 40), v193, Element, v202, (const llvm::Twine *)v404);
                  v197 = 0;
                }
                while ((v198 & 1) != 0);
              }
            }
            else
            {
              v194 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
              LOWORD(v409) = 257;
              v195 = (llvm::IRBuilderBase *)(v194 + 40);
              v196 = (llvm::Value *)llvm::ConstantInt::get();
              v193 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v195, v192, v196, (const llvm::Twine *)&v406);
            }
            *(_QWORD *)&v430 = v193;
            if (v358)
              v431 = (llvm::Value *)(v356 + 80);
            v203 = 0;
            v204 = *(_QWORD *)(*(_QWORD *)a1 - 24) + 32;
            v205 = *(_DWORD *)(*(_QWORD *)((char *)v368 + v204) + 1780);
            if (v205)
              v206 = v400;
            else
              v206 = 0;
            if (!v205)
            {
              LOWORD(v409) = 257;
              v203 = llvm::IRBuilderBase::CreateCall(v397 + v204, *(_QWORD *)(v360 + 24), v360, (uint64_t)&v400, 1, (uint64_t)&v406);
            }
            AGCLLVMDriverShader::setSampleArgsStateless((_QWORD *)a1, v422, v206, v203, (uint64_t)SamplerStateGlobal, TextureHeapGlobal);
            if (v388 || !v380)
            {
              v207 = 0;
              v432 = 3;
            }
            else
            {
              v432 = 0;
              v207 = llvm::ConstantFP::get();
            }
            *(_QWORD *)&v433 = v207;
            v435 = v357;
            v422[22] = 1;
            v208 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            v209 = *(_QWORD *)(v208 + 400);
            v418 = *(_OWORD *)(v208 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v208 + 40));
            v420 = *(_DWORD *)(v208 + 136);
            v210 = (llvm::Type **)(*(uint64_t (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v209 + 272))(v209, &v418, v422);
            if (v419)
              llvm::MetadataTracking::untrack();
            v211 = *(_DWORD *)(*(_QWORD *)(a1 + 664) + 32);
            v212 = (8 * (v388 != 0)) | (32 * (v388 != 0));
            LODWORD(v406) = v392;
            DWORD1(v406) = v383;
            DWORD2(v406) = (unsigned __int16)v211 >> 12;
            HIDWORD(v406) = v378;
            LOBYTE(v407) = v135;
            BYTE1(v407) = (v211 & 0x2000000) == 0;
            v408 = v150 + v212 + 120;
            v409 = v372 + v212 + 160;
            v404[0] = 15;
            v399 = 0;
            AGCLLVMStatelessFragmentShader::buildWriteFramebuffer(v387, (unsigned int *)&v406, &v411, v210, v404, &v399, 0);
            llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40));
            v104 = v390;
            goto LABEL_231;
          }
        }
        AGCLLVMDriverShader::handleUberInvalidCombinationFunction(*(AGCLLVMDriverShader **)(v106 + 8), v142);
        v152 = v402;
        if ((unint64_t)v402 < v403)
        {
          *v402 = (llvm::Function *)v106;
          v153 = v152 + 1;
          v104 = v390;
LABEL_230:
          v402 = v153;
          goto LABEL_231;
        }
        v156 = v401;
        v157 = v402 - v401;
        v158 = v157 + 1;
        if ((unint64_t)(v157 + 1) >> 61)
          goto LABEL_341;
        v159 = v403 - (_QWORD)v401;
        if ((uint64_t)(v403 - (_QWORD)v401) >> 2 > v158)
          v158 = v159 >> 2;
        if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
          v160 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v160 = v158;
        if (v160)
          v160 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v160);
        else
          v161 = 0;
        v182 = (llvm::Function **)(v160 + 8 * v157);
        *v182 = (llvm::Function *)v106;
        v153 = v182 + 1;
        if (v152 != v156)
        {
          do
          {
            v183 = *--v152;
            *--v182 = v183;
          }
          while (v152 != v156);
LABEL_226:
          v152 = v401;
        }
LABEL_227:
        v401 = v182;
        v402 = v153;
        v403 = v160 + 8 * v161;
        if (v152)
          operator delete(v152);
        v104 = v390;
        goto LABEL_230;
      }
      v28 = 5;
    }
    (*(void (**)(void))(*v27 + 8 * v28))();
    goto LABEL_34;
  }
  AGCLLVMBackgroundObjectFragmentShader::wrapperName(v422);
  v10 = AGCLLVMBuilder::getOrInsertFunction<>();
  if ((v422[23] & 0x80000000) != 0)
    operator delete(*(void **)v422);
  *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xC00F | 0x650;
  *(_QWORD *)v422 = "entry";
  LOWORD(v423) = 259;
  operator new();
  v11 = llvm::BasicBlock::BasicBlock();
  v12 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  *(_QWORD *)(v12 + 88) = v11;
  *(_QWORD *)(v12 + 96) = v11 + 40;
  v13 = *(_DWORD *)(*(_QWORD *)(a1 + 664) + 32);
  v14 = *(unsigned int **)(a1 + 688);
  v15 = *v14;
  v369 = *(_DWORD *)(*(_QWORD *)(a1 + 664) + 32) & 0xE000;
  v384 = *((unsigned __int8 *)v14 + 4);
  if (v384 | HIBYTE(*v14))
  {
    if (v369)
    {
      *(_WORD *)(v10 + 18) = *(_WORD *)(v10 + 18) & 0xC00F | 0x680;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1730))
      {
        llvm::Module::getOrInsertNamedMetadata();
        llvm::ConstantInt::get();
        *(_QWORD *)v422 = llvm::ValueAsMetadata::get();
        llvm::MDTuple::getImpl();
        llvm::NamedMDNode::addOperand();
      }
    }
  }
  if (v384)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
    if (*(_QWORD *)(v16 + 1576))
      strlen(*(const char **)(v16 + 1576));
    v252 = AGCLLVMBuilder::getOrInsertFunction<>();
    v253 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
    if (*(_QWORD *)(v253 + 1584))
      strlen(*(const char **)(v253 + 1584));
    v254 = AGCLLVMBuilder::getOrInsertFunction<>();
    v255 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    LOWORD(v423) = 257;
    v367 = llvm::IRBuilderBase::CreateCall(v255 + 40, **(_QWORD **)(*(_QWORD *)v252 + 16), v252, 0, 0, (uint64_t)v422);
    v256 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    LOWORD(v423) = 257;
    v366 = llvm::IRBuilderBase::CreateCall(v256 + 40, **(_QWORD **)(*(_QWORD *)v254 + 16), v254, 0, 0, (uint64_t)v422);
    if (v369)
    {
      v257 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
      if (*(_QWORD *)(v257 + 1592))
        strlen(*(const char **)(v257 + 1592));
      v258 = AGCLLVMBuilder::getOrInsertFunction<>();
      v259 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      LOWORD(v423) = 257;
      v364 = llvm::IRBuilderBase::CreateCall(v259 + 40, **(_QWORD **)(*(_QWORD *)v258 + 16), v258, 0, 0, (uint64_t)v422);
    }
    else
    {
      v364 = 0;
    }
  }
  else
  {
    v364 = 0;
    v366 = 0;
    v367 = 0;
  }
  v363 = AGCLLVMDriverShader::getSamplerStateGlobal((AGCLLVMDriverShader *)a1);
  v361 = AGCLLVMDriverShader::getTextureHeapGlobal((AGCLLVMDriverShader *)a1, 1u);
  if (v13)
  {
    v260 = HIBYTE(v15);
    v261 = a1 + 8;
    v359 = a1 + 200;
    v262 = a1 + 88;
    v391 = a1 + 8;
    v394 = a1 + 88;
    v376 = v260;
    while (1)
    {
      v263 = __clz(__rbit32(v13));
      v264 = 1 << v263;
      *(_DWORD *)(v262 + 72 * v263 + 68) = 0;
      if (((1 << v263) & v260) != 0)
        break;
      if ((v264 & v384) != 0)
      {
        v398 = 1 << v263;
        ImageStateGlobal = AGCLLVMDriverShader::getImageStateGlobal((AGCLLVMDriverShader *)a1);
        v274 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        *(_QWORD *)v422 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 256);
        *(_QWORD *)&v422[8] = *(_QWORD *)v422;
        *(_QWORD *)&v422[16] = *(_QWORD *)v422;
        llvm::StructType::get();
        *(_QWORD *)v422 = "agc.pbe_rotation";
        v382 = v382 & 0xFFFFFFFF00000000 | v263;
        *(_QWORD *)&v422[16] = v382;
        LOWORD(v423) = 2051;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        v275 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v276 = *(_QWORD *)(v275 + 376);
        v277 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v275 + 32), v274);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v276, v277);
        ConstInBoundsGEP2_32 = AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v274, 0, v278, v279, v280);
        v285 = AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v274, (llvm::Value *)1, v282, v283, v284);
        v289 = AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v274, (llvm::Value *)2, v286, v287, v288);
        *(_QWORD *)v422 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 224 + 32);
        *(_QWORD *)&v422[8] = *(_QWORD *)v422;
        *(_QWORD *)&v422[16] = *(_QWORD *)v422;
        v290 = llvm::StructType::get();
        v291 = *(llvm::Type **)(*(_QWORD *)(v290 + 16) + 16);
        v292 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v261 + 32);
        LOWORD(v423) = 257;
        AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v292, v291, (uint64_t)v289, 0, (uint64_t)v422);
        v294 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v295 = v294 + a1 + 40;
        v296 = **(llvm::Type ***)(v290 + 16);
        LOWORD(v423) = 257;
        v297 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v294 + v261 + 32), v296, (uint64_t)ConstInBoundsGEP2_32, 0, (uint64_t)v422);
        v298 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), 2, v367);
        LOWORD(v416) = 257;
        FMul = llvm::IRBuilderBase::CreateFMul(v295, v297, (uint64_t)v298, (uint64_t)&v411);
        LOWORD(v448) = 257;
        FAdd = llvm::IRBuilderBase::CreateFAdd(v295, FMul, AlignedLoad, (uint64_t)v446);
        v301 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v302 = v301 + a1 + 40;
        v303 = *(llvm::Type **)(*(_QWORD *)(v290 + 16) + 8);
        LOWORD(v423) = 257;
        v304 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v301 + v261 + 32), v303, (uint64_t)v285, 0, (uint64_t)v422);
        v305 = AGCLLVMBuilder::splat((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), 2, v366);
        LOWORD(v416) = 257;
        v306 = llvm::IRBuilderBase::CreateFMul(v302, v304, (uint64_t)v305, (uint64_t)&v411);
        LOWORD(v448) = 257;
        v307 = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd(v302, v306, FAdd, (uint64_t)v446);
        v308 = **(_DWORD **)(a1 + 688);
        v379 = AGCLLVMBackgroundObjectFragmentShader::getImageDimFromLoadDimension(_AGCBackgroundObjectState::LoadDimension)::dim_table[(((unsigned __int16)v308 >> (2 * v263)) & 3) - 1];
        v373 = (((unsigned __int16)v308 >> (2 * v263)) & 3) - 1;
        if ((((unsigned __int16)v308 >> (2 * v263)) & 3) == 1)
        {
          v328 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          LOWORD(v423) = 257;
          v329 = (llvm::IRBuilderBase *)(v328 + 40);
          v330 = (llvm::Value *)llvm::ConstantInt::get();
          v307 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v329, v307, v330, (const llvm::Twine *)v422);
        }
        else if ((((unsigned __int16)v308 >> (2 * v263)) & 3) == 3)
        {
          v309 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v307, 4);
          v310 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v391;
          v311 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
          *(_QWORD *)v422 = "agc.slice_index";
          *(_QWORD *)&v422[16] = v263;
          LOWORD(v423) = 2051;
          llvm::GlobalVariable::GlobalVariable();
          llvm::GlobalObject::setSection();
          v312 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          v313 = *(_QWORD *)(v312 + 376);
          v314 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v312 + 32), v311);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v313, v314);
          LOWORD(v423) = 257;
          v316 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v311, v315);
          v317 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v310 + 32), v316, (uint64_t)v311, 0, (uint64_t)v422);
          v318 = *(_QWORD *)(*(_QWORD *)a1 - 24) + 32;
          v319 = *(_QWORD *)(a1 + v318 + 368);
          if (*(_QWORD *)(v319 + 1616))
          {
            strlen(*(const char **)(v319 + 1616));
            v320 = AGCLLVMBuilder::getOrInsertFunction<>();
            v321 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v322 = (llvm::IRBuilderBase *)(v321 + a1 + 40);
            LOWORD(v423) = 257;
            v323 = llvm::IRBuilderBase::CreateCall(v321 + v391 + 32, **(_QWORD **)(*(_QWORD *)v320 + 16), v320, 0, 0, (uint64_t)v422);
            v324 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 168 + 32);
            LOWORD(v416) = 257;
            UIToFP = llvm::IRBuilderBase::CreateUIToFP(v322, v323, v324, (const llvm::Twine *)&v411);
            LOWORD(v448) = 257;
            v317 = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)v322, UIToFP, (uint64_t)v317, (uint64_t)v446);
            v318 = *(_QWORD *)(*(_QWORD *)a1 - 24) + 32;
          }
          LOWORD(v423) = 257;
          v326 = (llvm::IRBuilderBase *)(a1 + v318 + 8);
          v327 = (llvm::Value *)llvm::ConstantInt::get();
          v307 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v326, v309, v317, v327, (const llvm::Twine *)v422);
          v260 = v376;
LABEL_325:
          if ((v398 & BYTE2(v308)) != 0)
          {
            v331 = *(_QWORD *)(*(_QWORD *)a1 - 24);
            v332 = (llvm::IRBuilderBase *)(v331 + a1 + 40);
            v333 = v331 + v391;
            v334 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
            *(_QWORD *)v422 = "agc.slice_index";
            *(_QWORD *)&v422[16] = v263;
            LOWORD(v423) = 2051;
            llvm::GlobalVariable::GlobalVariable();
            llvm::GlobalObject::setSection();
            v335 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            v336 = *(_QWORD *)(v335 + 376);
            v337 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v335 + 32), v334);
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v336, v337);
            LOWORD(v423) = 257;
            v339 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v334, v338);
            v340 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v333 + 32), v339, (uint64_t)v334, 0, (uint64_t)v422);
            v341 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v359 + 32);
            LOWORD(v416) = 257;
            FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v332, v340, v341, (const llvm::Twine *)&v411);
            v343 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
            if (*(_QWORD *)(v343 + 1616))
            {
              strlen(*(const char **)(v343 + 1616));
              v344 = AGCLLVMBuilder::getOrInsertFunction<>();
              v345 = *(_QWORD *)(*(_QWORD *)a1 - 24);
              v346 = v345 + a1 + 40;
              LOWORD(v423) = 257;
              v347 = llvm::IRBuilderBase::CreateCall(v345 + v391 + 32, **(_QWORD **)(*(_QWORD *)v344 + 16), v344, 0, 0, (uint64_t)v422);
              v348 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v359 + 32);
              LOWORD(v416) = 257;
              v349 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v346, 38, (uint64_t)v347, v348, (uint64_t)&v411);
              v350 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              LOWORD(v423) = 257;
              FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v350, FPToUI, v349, (const llvm::Twine *)v422);
            }
            v260 = v376;
          }
          else
          {
            FPToUI = 0;
          }
          *(_DWORD *)v422 = 0;
          *(_QWORD *)&v422[4] = v379 | 0xA00000000;
          memset(&v422[16], 0, 11);
          v423 = 0u;
          v424 = 0u;
          v425 = 0u;
          v426 = 0u;
          v427 = 0;
          v428 = 0u;
          v429 = 0u;
          v430 = 0u;
          v431 = 0;
          v432 = 4;
          v439 = 0;
          v440 = 0;
          v433 = 0u;
          memset(v434, 0, sizeof(v434));
          v435 = 0;
          v436 = 0;
          v438 = 0;
          v437 = 0;
          v441 = 1;
          v442 = 0;
          v443 = 0;
          if (*(_BYTE *)(v394 + 72 * v263 + 41))
            v351 = *(_QWORD *)(v394 + 72 * v263) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                              + a1
                                                                              + 280
                                                                              + 32);
          else
            v351 = 3;
          *(_DWORD *)&v422[8] = v351;
          *(_QWORD *)&v430 = v307;
          v431 = FPToUI;
          AGCLLVMDriverShader::setSampleArgs((_QWORD *)a1, v422, v263, ImageStateGlobal, (uint64_t)v363, v361);
          if (v369 || !v373)
          {
            v352 = 0;
            v432 = 3;
          }
          else
          {
            v432 = 0;
            v352 = llvm::ConstantFP::get();
          }
          *(_QWORD *)&v433 = v352;
          v435 = v364;
          v422[22] = 1;
          v353 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          v354 = *(_QWORD *)(v353 + 400);
          v406 = *(_OWORD *)(v353 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v353 + 40));
          LODWORD(v408) = *(_DWORD *)(v353 + 136);
          v273 = (llvm::Type **)(*(uint64_t (**)(uint64_t, __int128 *, _BYTE *))(*(_QWORD *)v354 + 272))(v354, &v406, v422);
          if (v407)
            llvm::MetadataTracking::untrack();
LABEL_312:
          if (v273)
            AGCLLVMFragmentShader::buildWriteFramebuffer((AGCLLVMFragmentShader *)v387, v273, v263, 15, 0);
          v261 = a1 + 8;
          v262 = a1 + 88;
          v264 = v398;
          goto LABEL_315;
        }
        v260 = v376;
        goto LABEL_325;
      }
LABEL_315:
      v13 ^= v264;
      if (!v13)
        goto LABEL_339;
    }
    v398 = 1 << v263;
    v265 = v261;
    v266 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    *(_QWORD *)v422 = "agc.clear_color";
    v395 = v395 & 0xFFFFFFFF00000000 | v263;
    *(_QWORD *)&v422[16] = v395;
    LOWORD(v423) = 2051;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v267 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    v268 = *(_QWORD *)(v267 + 376);
    v269 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v267 + 32), v266);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v268, v269);
    v270 = *(_QWORD *)(*(_QWORD *)a1 - 24) + v265;
    LOWORD(v423) = 257;
    v272 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v266, v271);
    v273 = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v270 + 32), v272, (uint64_t)v266, 0, (uint64_t)v422);
    goto LABEL_312;
  }
LABEL_339:
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40));
  return a1;
}

void AGCLLVMEndOfTileProgram::buildStateless(AGCLLVMEndOfTileProgram *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type size;
  uint64_t Bitcode;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Function;
  uint64_t v23;
  llvm::GlobalVariable *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::GlobalVariable *v29;
  llvm::LLVMContext *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::GlobalVariable *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Type **v38;
  llvm::ArrayType *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Type **v43;
  llvm::ArrayType *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::GlobalVariable *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::Type **v52;
  llvm::ArrayType *v53;
  uint64_t v54;
  std::string::size_type v55;
  char *v56;
  llvm::GlobalVariable *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t Impl;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  llvm::IRBuilderBase *v79;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Type *v82;
  uint64_t GEP;
  char *v84;
  uint64_t v85;
  llvm::Value *v86;
  llvm::IRBuilderBase *v87;
  llvm::Value *Cast;
  llvm::IRBuilderBase *v89;
  uint64_t v90;
  llvm::BasicBlock *v91;
  llvm::Instruction *FirstNonPHI;
  llvm::Function *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  llvm::Value *v98;
  llvm::Type *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t inserted;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *Name;
  unint64_t v115;
  int AsUnsignedInteger;
  unsigned __int8 v118;
  uint64_t v119;
  int v120;
  std::string::value_type v121;
  unsigned __int8 v122;
  int v123;
  std::string::value_type v124;
  int v125;
  int v126;
  std::string::value_type v127;
  _BOOL4 v128;
  llvm::Function *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  __int16 v146;
  _DWORD *v147;
  uint64_t v148;
  uint64_t v149;
  llvm::Value *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  _DWORD *v160;
  uint64_t v161;
  char *v162;
  llvm::Function **v163;
  llvm::Function **v164;
  llvm::Function *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t j;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t k;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unsigned int v208;
  unsigned int v209;
  uint64_t v210;
  char v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  AGCLLVMGen3TargetLowerer *v229;
  llvm::Function *v230;
  uint64_t m;
  llvm::Instruction *v232;
  llvm::Function *v233;
  uint64_t n;
  llvm::Instruction *v235;
  uint64_t v236;
  llvm::Function *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  llvm::Value *v246;
  uint64_t *v247;
  llvm::Value *v248;
  llvm::Type *v249;
  llvm::Type **v250;
  llvm::Value *v251;
  llvm::Type *v252;
  llvm::Value *v253;
  uint64_t *v254;
  llvm::Value *v255;
  llvm::Type *v256;
  llvm::Type **v257;
  llvm::Value *v258;
  llvm::Type *v259;
  llvm::Value *v260;
  char *v261;
  llvm::Type *v262;
  llvm::IRBuilderBase *v263;
  uint64_t v264;
  llvm::Value *v265;
  llvm::Type **v266;
  llvm::Value *v267;
  llvm::Type *v268;
  llvm::Value *v269;
  uint64_t v270;
  char *v271;
  llvm::Instruction **v272;
  uint64_t v273;
  llvm::Instruction *v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  llvm::Type **v278;
  llvm::Type **v279;
  int v280;
  llvm::Function *v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  int v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  llvm::Function *v302;
  llvm::Function *v303;
  uint64_t v304;
  char *v305;
  int v306;
  char *v307;
  uint64_t v308;
  std::string::size_type Switch;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  llvm::GlobalVariable *v317;
  llvm::GlobalVariable *v318;
  unsigned int v319;
  uint64_t v320;
  unsigned int v321;
  AGCLLVMGen3TargetLowerer *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  __int128 v327;
  uint64_t v328;
  int v329;
  std::string v330;
  int v331;
  __int128 v332;
  uint64_t v333;
  int v334;
  _QWORD v335[4];
  __int16 v336;
  _QWORD v337[2];
  const char *v338;
  __int16 v339;
  __int128 v340;
  uint64_t v341;
  int v342;
  __int128 v343;
  uint64_t v344;
  int v345;
  void *__p;
  char *v347;
  unint64_t v348;
  uint64_t v349[2];
  const char *v350;
  __int16 v351;
  uint64_t v352;
  _QWORD v353[2];
  const char *v354;
  __int16 v355;
  uint64_t v356;
  uint64_t AlignedLoad;
  uint64_t v358;
  const char *v359;
  llvm::Value *v360;
  const char *v361;
  __int16 v362;
  const char *v363;
  uint64_t v364;
  const char *v365;
  __int16 v366;
  std::string v367;
  int v368;
  __int16 v369;
  _OWORD v370[8];
  uint64_t v371;
  _BYTE v372[24];
  _BYTE *v373;
  uint64_t v374;

  v374 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  v6 = (*(uint64_t (**)(uint64_t, AGCLLVMCtx *, llvm::LLVMContext *))(*(_QWORD *)v5 + 680))(v5, a2, a3);
  v7 = **((_DWORD **)this + 9);
  v304 = v6;
  if (v6)
    v8 = "3";
  else
    v8 = "2";
  v280 = **((_DWORD **)this + 9);
  *((_BYTE *)this + 8) = 1;
  v300 = (char *)this + 8;
  if ((_BYTE)v7)
    v9 = "_offChip";
  else
    v9 = (const std::string::value_type *)&unk_1C3E4D9BB;
  v10 = 8 * (v7 != 0);
  memset(&v367, 0, sizeof(v367));
  std::string::reserve(&v367, v10 + 13);
  std::string::append(&v367, "eot", 3uLL);
  std::string::append(&v367, v9, v10);
  std::string::append(&v367, "_uber_gen", 9uLL);
  std::string::append(&v367, v8, 1uLL);
  if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v367;
  else
    v11 = (std::string *)v367.__r_.__value_.__r.__words[0];
  if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v367.__r_.__value_.__r.__words[2]);
  else
    size = v367.__r_.__value_.__l.__size_;
  Bitcode = AGCLLVMObject::readBitcode((uint64_t)a2, (const UInt8 *)v11, size, 0);
  v14 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 32);
  v15 = *(void **)(v14 + 8);
  if (v15)
    v16 = strlen(*(const char **)(v14 + 8));
  else
    v16 = 0;
  llvm::Module::setTargetTriple(Bitcode, v15, v16);
  v17 = *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 464) + 32);
  if (*(_QWORD *)(v17 + 16))
    strlen(*(const char **)(v17 + 16));
  llvm::Module::setDataLayout();
  v352 = Bitcode;
  v373 = 0;
  llvm::Linker::linkModules();
  v18 = v373;
  if (v373 == v372)
  {
    v19 = 4;
    v18 = v372;
  }
  else
  {
    if (!v373)
      goto LABEL_23;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_23:
  v20 = v352;
  v352 = 0;
  if (v20)
  {
    v21 = MEMORY[0x1CAA2CC9C]();
    MEMORY[0x1CAA2D68C](v21, 0x10B2C407FF26C1CLL);
  }
  if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v367.__r_.__value_.__l.__data_);
  *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 336) = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  Function = llvm::Module::getFunction();
  if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1736))
    v23 = 17;
  else
    v23 = 16;
  v24 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  if ((*(_WORD *)(Function + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.eot_key";
  v25 = 259;
  v369 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v27 = *((_QWORD *)v26 + 47);
  v28 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v26 + 32), v24);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v27, v28);
  v29 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::Type::getInt32Ty(*(llvm::Type **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 392), v30);
  v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.emit_enabled";
  v369 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  v31 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v32 = *((_QWORD *)v31 + 47);
  v33 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v31 + 32), v29);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v32, v33);
  v34 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), (llvm::Type *)0x11);
  v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.emit_info_array";
  v369 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  v35 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v36 = *((_QWORD *)v35 + 47);
  v37 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v35 + 32), v34);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v36, v37);
  v38 = (llvm::Type **)llvm::User::operator new((llvm::User *)0x58);
  v39 = (llvm::ArrayType *)llvm::PointerType::get();
  llvm::ArrayType::get(v39, (llvm::Type *)v23);
  v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.sstt_address_array";
  v369 = 259;
  llvm::GlobalVariable::GlobalVariable();
  *((_BYTE *)v38 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v40 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v41 = *((_QWORD *)v40 + 47);
  v279 = v38;
  v42 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v40 + 32), (llvm::GlobalVariable *)v38);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v41, v42);
  v43 = (llvm::Type **)llvm::User::operator new((llvm::User *)0x58);
  v44 = (llvm::ArrayType *)llvm::PointerType::get();
  llvm::ArrayType::get(v44, (llvm::Type *)v23);
  v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.queue_address_array";
  v369 = 259;
  llvm::GlobalVariable::GlobalVariable();
  *((_BYTE *)v43 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v45 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v46 = *((_QWORD *)v45 + 47);
  v278 = v43;
  v47 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v45 + 32), (llvm::GlobalVariable *)v43);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v46, v47);
  v48 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::ArrayType::get(*(llvm::ArrayType **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232), (llvm::Type *)v23);
  v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.slice_level_array";
  v369 = 259;
  LOBYTE(v276) = 0;
  v275 = *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 876) | 0x100000000;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  v49 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v50 = *((_QWORD *)v49 + 47);
  v277 = (uint64_t)v48;
  v51 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v49 + 32), v48);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v50, v51);
  v371 = 0;
  memset(v370, 0, sizeof(v370));
  v323 = v23;
  if (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1780))
  {
    v52 = 0;
    *((_QWORD *)this + 7) |= ~(-1 << v23);
  }
  else
  {
    v53 = (llvm::ArrayType *)llvm::VectorType::get();
    v317 = v34;
    if (*(_BYTE *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1738))
    {
      v52 = (llvm::Type **)llvm::User::operator new((llvm::User *)0x58);
      llvm::ArrayType::get(v53, (llvm::Type *)v23);
      v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.pbe_words_indirect";
      v369 = 259;
      LOBYTE(v276) = 0;
      v275 = 0x100000040;
      llvm::GlobalVariable::GlobalVariable();
      v54 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
      if (*(_QWORD *)(v54 + 1712))
        strlen(*(const char **)(v54 + 1712));
      llvm::GlobalObject::setSection();
      llvm::GlobalObject::setAlignment();
      v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v367.__r_.__value_.__r.__words[2];
      v367.__r_.__value_.__l.__size_ = 0x2000000000;
      v65 = llvm::ValueAsMetadata::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v367, v65);
      llvm::ConstantInt::get();
      v66 = llvm::ValueAsMetadata::get();
      for (i = 0; i != v23; ++i)
      {
        v363 = (const char *)v66;
        llvm::ConstantInt::get();
        v364 = llvm::ValueAsMetadata::get();
        Impl = llvm::MDTuple::getImpl();
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v367, Impl);
      }
      v69 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 376);
      v70 = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v69, v70);
      if ((std::string::size_type *)v367.__r_.__value_.__l.__data_ != &v367.__r_.__value_.__r.__words[2])
        free(v367.__r_.__value_.__l.__data_);
    }
    else
    {
      v315 = Function;
      v55 = 0;
      v56 = (char *)this + 368;
      do
      {
        v57 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"agc.pbe_words";
        v367.__r_.__value_.__r.__words[2] = v55;
        v369 = 2307;
        LOBYTE(v276) = 0;
        v275 = 0x100000040;
        *((_QWORD *)v370 + v55) = llvm::GlobalVariable::GlobalVariable();
        v58 = *(_QWORD *)&v56[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
        if (*(_QWORD *)(v58 + 1712))
          strlen(*(const char **)(v58 + 1712));
        llvm::GlobalObject::setSection();
        v59 = *(unsigned int *)(*(_QWORD *)&v56[*(_QWORD *)(*(_QWORD *)this - 24) + 32] + 1724);
        v60 = __clz(v59) ^ 0x13F;
        if ((_DWORD)v59)
          v61 = v60;
        else
          v61 = 0;
        v25 = v61 | v25 & 0xFFFFFFFFFFFF0000;
        llvm::GlobalObject::setAlignment();
        v62 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        v63 = *((_QWORD *)v62 + 47);
        v64 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v62 + 32), v57);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v63, v64);
        ++v55;
      }
      while (v23 != v55);
      v52 = 0;
      Function = v315;
    }
    v34 = v317;
  }
  v71 = *(_QWORD *)(*(_QWORD *)this - 24);
  v72 = *(_QWORD *)((char *)this + v71 + 400);
  if (*(_BYTE *)(v72 + 1738) && !*(_DWORD *)(v72 + 1780))
  {
    v318 = v34;
    v73 = llvm::PointerType::get();
    v74 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, (uint64_t)"agc.eot_get_pbe_words", 21, v73, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 224));
    v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
    v369 = 259;
    operator new();
    v75 = llvm::BasicBlock::BasicBlock();
    v76 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v76 + 11) = v75;
    *((_QWORD *)v76 + 12) = v75 + 40;
    v302 = (llvm::Function *)v74;
    if ((*(_BYTE *)(v74 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v74);
    v315 = *(_QWORD *)(v74 + 88);
    v77 = llvm::PointerType::get();
    v78 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32, (uint64_t)"llvm.agx.textureState", 21, v77, v77, *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 240));
    v79 = (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v80 = (llvm::Value *)llvm::ConstantInt::get();
    v369 = 257;
    v82 = AGCLLVMBuilder::tryDeducePointeeType(v52, v81);
    GEP = llvm::IRBuilderBase::CreateGEP(v79, v82, (llvm::Value *)v52, v80, (const llvm::Twine *)&v367);
    v366 = 257;
    v353[0] = llvm::IRBuilderBase::CreateCast((uint64_t)v79, 49, GEP, v77, (uint64_t)&v363);
    v84 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v85 = *((_QWORD *)v84 + 30);
    v351 = 257;
    v353[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(v84 + 40), 39, v315, v85, (uint64_t)v349);
    v362 = 257;
    v86 = llvm::IRBuilderBase::CreateCall((uint64_t)v79, *(_QWORD *)(v78 + 24), v78, (uint64_t)v353, 2, (uint64_t)&v359);
    v87 = (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v369 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v87, 49, (uint64_t)v86, v73, (uint64_t)&v367);
    llvm::IRBuilderBase::CreateRet(v87, Cast);
    v71 = *(_QWORD *)(*(_QWORD *)this - 24);
    v34 = v318;
  }
  else
  {
    v302 = 0;
  }
  v89 = (AGCLLVMEndOfTileProgram *)((char *)this + v71 + 40);
  v90 = *(_QWORD *)(Function + 80);
  if (v90)
    v91 = (llvm::BasicBlock *)(v90 - 24);
  else
    v91 = 0;
  FirstNonPHI = (llvm::Instruction *)llvm::BasicBlock::getFirstNonPHI(v91);
  llvm::IRBuilderBase::SetInsertPoint(v89, FirstNonPHI);
  v94 = *(_QWORD *)(*(_QWORD *)this - 24);
  if (*(_DWORD *)(*(_QWORD *)((char *)this + v94 + 400) + 876) != 2)
  {
    AGCLLVMDriverShader::mutateAllConstantArgsToSharedRegister((AGCLLVMDriverShader *)Function, v93);
    v94 = *(_QWORD *)(*(_QWORD *)this - 24);
  }
  v358 = 0;
  v95 = (char *)this + v94 + 40;
  if ((*(_WORD *)(Function + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  v96 = **(_QWORD **)(Function + 88);
  v369 = 257;
  v356 = llvm::IRBuilderBase::CreateCast((uint64_t)v95, 49, (uint64_t)v24, v96, (uint64_t)&v367);
  v97 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v366 = 257;
  v99 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v29, v98);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v97 + 5, v99, (uint64_t)v29, 0, (uint64_t)&v363);
  v100 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  if ((*(_BYTE *)(Function + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)Function);
  v101 = *(_QWORD *)(*(_QWORD *)(Function + 88) + 80);
  v351 = 257;
  v358 = llvm::IRBuilderBase::CreateCast((uint64_t)v100, 49, (uint64_t)v34, v101, (uint64_t)v349);
  v102 = llvm::Function::args((llvm::Function *)Function);
  if (v102 != v103)
  {
    v104 = v102;
    v105 = v103;
    v106 = 0;
    do
    {
      v107 = v106 + 1;
      llvm::Value::replaceAllUsesWith();
      v104 += 40;
      v106 = v107;
    }
    while (v104 != v105);
  }
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v109 = inserted;
  *(_WORD *)(inserted + 18) = *(_WORD *)(inserted + 18) & 0xC00F | 0x6B0;
  if (*(_QWORD *)(Function + 72) != Function + 72)
    llvm::iplist_impl<llvm::simple_ilist<llvm::BasicBlock>,llvm::SymbolTableListTraits<llvm::BasicBlock>>::transfer(inserted + 72, (uint64_t *)(inserted + 72), Function + 72, *(uint64_t **)(Function + 80), (uint64_t *)(Function + 72));
  v281 = (llvm::Function *)v109;
  llvm::Function::eraseFromParent((llvm::Function *)Function);
  v347 = 0;
  __p = 0;
  v348 = 0;
  std::vector<llvm::Function *>::reserve(&__p, 0x678uLL);
  v110 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368);
  v111 = v110 + 24;
  v112 = *(_QWORD *)(v110 + 32);
  if (v112 != v110 + 24)
  {
    v307 = (char *)this + 368;
    v311 = (unint64_t)this + 192;
    v312 = v110 + 24;
    do
    {
      if (v112)
        v113 = v112 - 56;
      else
        v113 = 0;
      Name = (const char *)llvm::Value::getName((llvm::Value *)v113);
      v363 = Name;
      v364 = v115;
      if (v115 >= 0x10 && *(_QWORD *)Name == 0x5F746F652E636761 && *((_QWORD *)Name + 1) == 0x5F78695074696D65)
      {
        llvm::StringRef::find();
        llvm::StringRef::find();
        llvm::StringRef::find();
        v367.__r_.__value_.__r.__words[0] = 0;
        AsUnsignedInteger = llvm::getAsUnsignedInteger();
        v118 = v367.__r_.__value_.__s.__data_[0];
        if (v367.__r_.__value_.__r.__words[0] >= 0x100)
          v118 = 0;
        if (AsUnsignedInteger)
          v119 = 0;
        else
          v119 = v118;
        v367.__r_.__value_.__r.__words[0] = 0;
        v120 = llvm::getAsUnsignedInteger();
        v121 = v367.__r_.__value_.__s.__data_[0];
        if (v367.__r_.__value_.__r.__words[0] >= 0x100)
          v121 = 0;
        if (v120)
          v122 = 0;
        else
          v122 = v121;
        v367.__r_.__value_.__r.__words[0] = 0;
        v123 = llvm::getAsUnsignedInteger();
        v124 = v367.__r_.__value_.__s.__data_[0];
        if (v367.__r_.__value_.__r.__words[0] >= 0x100)
          v124 = 0;
        v125 = (v124 != 0) & ~v123;
        v367.__r_.__value_.__r.__words[0] = 0;
        v126 = llvm::getAsUnsignedInteger();
        v127 = v367.__r_.__value_.__s.__data_[0];
        if (v367.__r_.__value_.__r.__words[0] >= 0x100)
          v127 = 0;
        v128 = v127 != 0;
        v321 = v119;
        v319 = v125;
        if (AGCLLVMDriverShader::isValidUberFunctionCombination(this, v119, v125, 1)
          && (v130 = *(_QWORD *)&v307[*(_QWORD *)(*(_QWORD *)this - 24) + 32],
              (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v130 + 536))(v130, v122))
          && ((v131 = v128 & ~v126,
               v132 = *(_QWORD *)&v307[*(_QWORD *)(*(_QWORD *)this - 24) + 32],
               ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v132 + 200))(v132) & 1) != 0)
           || ((v131 ^ 1) & 1) != 0))
        {
          v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
          v369 = 259;
          operator new();
          v143 = llvm::BasicBlock::BasicBlock();
          v144 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v144 + 11) = v143;
          *((_QWORD *)v144 + 12) = v143 + 40;
          v349[0] = 0;
          if ((*(_WORD *)(v113 + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v113);
            v146 = *(_WORD *)(v113 + 18);
            v145 = *(_QWORD *)(v113 + 88);
            v349[0] = v145;
            if ((v146 & 1) != 0)
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v113);
              v145 = *(_QWORD *)(v113 + 88);
            }
          }
          else
          {
            v145 = *(_QWORD *)(v113 + 88);
            v349[0] = v145;
          }
          v313 = v145 + 40;
          v147 = *(_DWORD **)this;
          v148 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
          v149 = *(_QWORD *)((char *)this + v148 + 368);
          if (*(_BYTE *)(v149 + 1738))
          {
            if (*(_DWORD *)(v149 + 1780))
            {
              v150 = (llvm::Value *)*((_QWORD *)this + 11);
            }
            else
            {
              v369 = 257;
              v150 = llvm::IRBuilderBase::CreateCall((uint64_t)&v300[v148], *((_QWORD *)v302 + 3), (uint64_t)v302, (uint64_t)v349, 1, (uint64_t)&v367);
              v147 = *(_DWORD **)this;
            }
            v159 = (char *)this + *((_QWORD *)v147 - 3);
            v160 = (_DWORD *)*((_QWORD *)v159 + 50);
            if (v160[445])
              v161 = v349[0];
            else
              v161 = 0;
            v343 = *(_OWORD *)(v159 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v159 + 40));
            v345 = *((_DWORD *)v159 + 34);
            LOBYTE(v275) = 0;
            (*(void (**)(_DWORD *, __int128 *, llvm::Value *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v160 + 240))(v160, &v343, v150, v161, v131, v321, v319, v122, v313, v275);
            if (v344)
              llvm::MetadataTracking::untrack();
            llvm::IRBuilderBase::CreateRetVoid((AGCLLVMEndOfTileProgram *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                         + 40));
          }
          else
          {
            v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"pbeIndex0";
            v369 = 259;
            v151 = operator new();
            llvm::BasicBlock::BasicBlock();
            Switch = llvm::IRBuilderBase::CreateSwitch((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v349[0], v151, v323);
            v310 = v151;
            v152 = 0;
            v153 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            *((_QWORD *)v153 + 11) = v151;
            *((_QWORD *)v153 + 12) = v151 + 40;
            do
            {
              if (v152)
              {
                v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"pbeIndex";
                v315 = v315 & 0xFFFFFFFF00000000 | v152;
                v367.__r_.__value_.__r.__words[2] = v315;
                v369 = 2307;
                v154 = operator new();
                llvm::BasicBlock::BasicBlock();
                llvm::ConstantInt::get();
                llvm::SwitchInst::addCase();
                v155 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                *((_QWORD *)v155 + 11) = v154;
                *((_QWORD *)v155 + 12) = v154 + 40;
              }
              v156 = *((_QWORD *)v370 + v152);
              v157 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
              v158 = *((_QWORD *)v157 + 50);
              v340 = *(_OWORD *)(v157 + 88);
              llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v157 + 40));
              v342 = *((_DWORD *)v157 + 34);
              LOBYTE(v275) = 0;
              (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, int))(*(_QWORD *)v158 + 240))(v158, &v340, v156, 0, v131, v321, v319, v122, v313, v275, v276);
              if (v341)
                llvm::MetadataTracking::untrack();
              llvm::IRBuilderBase::CreateRetVoid((AGCLLVMEndOfTileProgram *)((char *)this
                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                           + 40));
              ++v152;
            }
            while (v323 != v152);
          }
          v111 = v312;
        }
        else
        {
          AGCLLVMDriverShader::handleUberInvalidCombinationFunction(*(AGCLLVMDriverShader **)(v113 + 8), v129);
          v133 = v347;
          if ((unint64_t)v347 >= v348)
          {
            v135 = (char *)__p;
            v136 = (v347 - (_BYTE *)__p) >> 3;
            v137 = v136 + 1;
            if ((unint64_t)(v136 + 1) >> 61)
              abort();
            v138 = v348 - (_QWORD)__p;
            if ((uint64_t)(v348 - (_QWORD)__p) >> 2 > v137)
              v137 = v138 >> 2;
            if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
              v139 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v139 = v137;
            if (v139)
              v139 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v139);
            else
              v140 = 0;
            v141 = (char *)(v139 + 8 * v136);
            *(_QWORD *)v141 = v113;
            v134 = v141 + 8;
            if (v133 != v135)
            {
              do
              {
                v142 = *((_QWORD *)v133 - 1);
                v133 -= 8;
                *((_QWORD *)v141 - 1) = v142;
                v141 -= 8;
              }
              while (v133 != v135);
              v133 = (char *)__p;
            }
            __p = v141;
            v348 = v139 + 8 * v140;
            if (v133)
              operator delete(v133);
          }
          else
          {
            *(_QWORD *)v347 = v113;
            v134 = v133 + 8;
          }
          v347 = v134;
          v111 = v312;
        }
      }
      v112 = *(_QWORD *)(v112 + 8);
    }
    while (v112 != v111);
  }
  v162 = (char *)__p;
  v163 = (llvm::Function **)v347;
  if (__p != v347)
  {
    v164 = (llvm::Function **)__p;
    do
    {
      v165 = *v164++;
      llvm::Function::eraseFromParent(v165);
    }
    while (v164 != v163);
  }
  v347 = v162;
  if ((_BYTE)v280)
  {
    if (v304)
    {
      v166 = llvm::Module::getFunction();
      v167 = v166;
      if ((*(_WORD *)(v166 + 18) & 1) == 0)
      {
        v168 = *(_QWORD *)(v166 + 88);
        v324 = v168;
        v169 = v168;
        v170 = v168;
        v171 = v168;
        v172 = v168;
LABEL_147:
        v173 = v168;
        goto LABEL_176;
      }
      llvm::Function::BuildLazyArguments((llvm::Function *)v166);
      v170 = *(_QWORD *)(v167 + 88);
      if ((*(_WORD *)(v167 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v167);
        v169 = *(_QWORD *)(v167 + 88);
        if ((*(_WORD *)(v167 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v167);
          v190 = *(_QWORD *)(v167 + 88);
          if ((*(_WORD *)(v167 + 18) & 1) != 0)
          {
            llvm::Function::BuildLazyArguments((llvm::Function *)v167);
            v173 = *(_QWORD *)(v167 + 88);
            v324 = v173;
            if ((*(_WORD *)(v167 + 18) & 1) != 0)
            {
              llvm::Function::BuildLazyArguments((llvm::Function *)v167);
              v172 = *(_QWORD *)(v167 + 88);
              if ((*(_WORD *)(v167 + 18) & 1) != 0)
              {
                llvm::Function::BuildLazyArguments((llvm::Function *)v167);
                v168 = *(_QWORD *)(v167 + 88);
                if ((*(_WORD *)(v167 + 18) & 1) == 0)
                {
                  v171 = v190;
                  goto LABEL_147;
                }
                v171 = v190;
                llvm::Function::BuildLazyArguments((llvm::Function *)v167);
                v173 = *(_QWORD *)(v167 + 88);
              }
              else
              {
                v171 = v190;
                v168 = *(_QWORD *)(v167 + 88);
                v173 = v168;
              }
            }
            else
            {
              v171 = v190;
              v168 = *(_QWORD *)(v167 + 88);
              v172 = v168;
            }
          }
          else
          {
            v168 = *(_QWORD *)(v167 + 88);
            v324 = v168;
            v172 = v168;
            v171 = v168;
            v173 = v168;
          }
        }
        else
        {
          v168 = *(_QWORD *)(v167 + 88);
          v324 = v168;
          v171 = v168;
          v172 = v168;
          v173 = v168;
        }
      }
      else
      {
        v168 = *(_QWORD *)(v167 + 88);
        v324 = v168;
        v169 = v168;
        v171 = v168;
        v172 = v168;
        v173 = v168;
      }
LABEL_176:
      v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
      v369 = 259;
      operator new();
      v191 = llvm::BasicBlock::BasicBlock();
      v192 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v192 + 11) = v191;
      *((_QWORD *)v192 + 12) = v191 + 40;
      v193 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      if (*(_BYTE *)(*((_QWORD *)v193 + 50) + 1741))
      {
        v286 = v171 + 80;
        v290 = v324 + 120;
        v301 = v168 + 200;
        v303 = (llvm::Function *)(v172 + 160);
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"channelFormatDefault";
        v369 = 259;
        v194 = operator new();
        llvm::BasicBlock::BasicBlock();
        llvm::IRBuilderBase::CreateSwitch((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v170, v194, 22);
        v305 = (char *)this + 368;
        for (j = 1; j != 23; j = (uint64_t)v229 + 1)
        {
          v322 = (AGCLLVMGen3TargetLowerer *)j;
          if (j == 1)
          {
            v196 = 1;
            v197 = v194;
          }
          else
          {
            v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"channelFormat";
            v282 = v282 & 0xFFFFFFFF00000000 | j;
            v367.__r_.__value_.__r.__words[2] = v282;
            v369 = 2051;
            v196 = j;
            operator new();
            v197 = llvm::BasicBlock::BasicBlock();
          }
          v198 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v198 + 11) = v197;
          *((_QWORD *)v198 + 12) = v197 + 40;
          v308 = v196;
          v363 = "channelFormat";
          v283 = v283 & 0xFFFFFFFF00000000 | v196;
          v365 = (const char *)v283;
          v366 = 2051;
          v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v363;
          v367.__r_.__value_.__r.__words[2] = (std::string::size_type)"numWrittenComponentsDefault";
          v369 = 770;
          v199 = operator new();
          llvm::BasicBlock::BasicBlock();
          v287 = v199;
          llvm::IRBuilderBase::CreateSwitch((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v169 + 40, v199, 4);
          for (k = 1; k != 4; k = v228 + 1)
          {
            v320 = k;
            if (k == 1)
            {
              v201 = v287;
              v203 = v288;
              v202 = v289;
              v204 = v308;
            }
            else
            {
              v349[0] = (uint64_t)"channelFormat";
              v284 = v284 & 0xFFFFFFFF00000000 | v308;
              v350 = (const char *)v284;
              v351 = 2051;
              v363 = (const char *)v349;
              v365 = "numWrittenComponents";
              v366 = 770;
              v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v363;
              v285 = v285 & 0xFFFFFFFF00000000 | k;
              v367.__r_.__value_.__r.__words[2] = v285;
              v369 = 2050;
              operator new();
              v201 = llvm::BasicBlock::BasicBlock();
              k = v320;
              v204 = v308;
              v203 = v288;
              v202 = v289;
            }
            v205 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
            *((_QWORD *)v205 + 11) = v201;
            *((_QWORD *)v205 + 12) = v201 + 40;
            v359 = "channelFormat";
            v288 = v203 & 0xFFFFFFFF00000000 | v204;
            v361 = (const char *)v288;
            v362 = 2051;
            v349[0] = (uint64_t)&v359;
            v350 = "numWrittenComponents";
            v351 = 770;
            v363 = (const char *)v349;
            v289 = v202 & 0xFFFFFFFF00000000 | k;
            v365 = (const char *)v289;
            v366 = 2050;
            v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v363;
            v367.__r_.__value_.__r.__words[2] = (std::string::size_type)"sampleCountDefault";
            v369 = 770;
            v206 = operator new();
            llvm::BasicBlock::BasicBlock();
            v207 = *(_QWORD *)(*(_QWORD *)this - 24);
            v208 = *(_DWORD *)(*(_QWORD *)&v305[v207 + 32] + 1804);
            v209 = 33 - __clz(v208 - 1);
            if (v208 <= 1)
              v210 = 1;
            else
              v210 = v209;
            v292 = v206;
            v291 = v210;
            llvm::IRBuilderBase::CreateSwitch((uint64_t *)((char *)this + v207 + 40), v286, v206, v210);
            v211 = 0;
            v212 = 0;
            do
            {
              v296 = v212;
              v213 = v320;
              v306 = 1 << v211;
              if ((_WORD)v212)
              {
                v353[0] = "channelFormat";
                v293 = v293 & 0xFFFFFFFF00000000 | v308;
                v354 = (const char *)v293;
                v355 = 2051;
                v359 = (const char *)v353;
                v361 = "numWrittenComponents";
                v362 = 770;
                v349[0] = (uint64_t)&v359;
                v294 = v294 & 0xFFFFFFFF00000000 | v320;
                v350 = (const char *)v294;
                v351 = 2050;
                v363 = (const char *)v349;
                v365 = "sampleCount";
                v366 = 770;
                v214 = (unsigned __int16)(1 << v211);
                v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v363;
                v295 = v295 & 0xFFFFFFFF00000000 | v214;
                v367.__r_.__value_.__r.__words[2] = v295;
                v369 = 2306;
                operator new();
                v215 = llvm::BasicBlock::BasicBlock();
                v216 = v214;
                v213 = v320;
              }
              else
              {
                v216 = (unsigned __int16)(1 << v211);
                v215 = v292;
              }
              v217 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
              *((_QWORD *)v217 + 11) = v215;
              *((_QWORD *)v217 + 12) = v215 + 40;
              v337[0] = "channelFormat";
              v297 = v297 & 0xFFFFFFFF00000000 | v308;
              v338 = (const char *)v297;
              v339 = 2051;
              v353[0] = v337;
              v354 = "numWrittenComponents";
              v355 = 770;
              v359 = (const char *)v353;
              v298 = v298 & 0xFFFFFFFF00000000 | v213;
              v361 = (const char *)v298;
              v362 = 2050;
              v349[0] = (uint64_t)&v359;
              v350 = "sampleCount";
              v351 = 770;
              v316 = v216;
              v363 = (const char *)v349;
              v299 = v299 & 0xFFFFFFFF00000000 | v216;
              v365 = (const char *)v299;
              v366 = 2306;
              v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v363;
              v367.__r_.__value_.__r.__words[2] = (std::string::size_type)"gammaCorrectionDefault";
              v369 = 770;
              v218 = operator new();
              llvm::BasicBlock::BasicBlock();
              v314 = v218;
              llvm::IRBuilderBase::CreateSwitch((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v290, v218, 2);
              v219 = 0;
              v220 = 1;
              do
              {
                v326 = v220;
                if ((v220 & 1) != 0)
                {
                  v222 = v314;
                  v221 = v316;
                }
                else
                {
                  v335[0] = "channelFormat";
                  v312 = v312 & 0xFFFFFFFF00000000 | v308;
                  v335[2] = v312;
                  v336 = 2051;
                  v337[0] = v335;
                  v338 = "numWrittenComponents";
                  v339 = 770;
                  v353[0] = v337;
                  v311 = v311 & 0xFFFFFFFF00000000 | v320;
                  v354 = (const char *)v311;
                  v355 = 2050;
                  v359 = (const char *)v353;
                  v361 = "sampleCount";
                  v362 = 770;
                  v349[0] = (uint64_t)&v359;
                  v310 = v310 & 0xFFFFFFFF00000000 | v316;
                  v350 = (const char *)v310;
                  v351 = 2306;
                  v363 = (const char *)v349;
                  v365 = "gammaCorrection";
                  v366 = 770;
                  v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v363;
                  Switch = Switch & 0xFFFFFFFF00000000 | 1;
                  v367.__r_.__value_.__r.__words[2] = Switch;
                  v369 = 2306;
                  v222 = operator new();
                  llvm::BasicBlock::BasicBlock();
                  v221 = v316;
                }
                v223 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                *((_QWORD *)v223 + 11) = v222;
                *((_QWORD *)v223 + 12) = v222 + 40;
                if (AGCLLVMDriverShader::isValidUberFunctionCombination(this, (uint64_t)v322, v219 & 1, v221))
                {
                  v224 = *(_QWORD *)&v305[*(_QWORD *)(*(_QWORD *)this - 24) + 32];
                  v225 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v224 + 680))(v224);
                  v226 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
                  v332 = *(_OWORD *)(v226 + 88);
                  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v226 + 40));
                  v334 = *((_DWORD *)v226 + 34);
                  AGCLLVMGen3TargetLowerer::buildCopyOffChipMRTPixelDataStateless((uint64_t)&v367, v225, (uint64_t)&v332, v322, v320, (unsigned __int16)v306, v219 & 1, *((unsigned __int8 *)this + 81), v303, v301, (llvm::Value *)(v173 + 240));
                  if (v333)
                    llvm::MetadataTracking::untrack();
                  if (v367.__r_.__value_.__r.__words[0])
                  {
                    v227 = *(_QWORD *)(*(_QWORD *)this - 24);
                    v330 = v367;
                    if (v367.__r_.__value_.__r.__words[2])
                      llvm::MetadataTracking::track();
                    v331 = v368;
                    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v330, (uint64_t)&v300[v227 + 32]);
                    if (v330.__r_.__value_.__r.__words[2])
                      llvm::MetadataTracking::untrack();
                  }
                  if (v367.__r_.__value_.__r.__words[2])
                    llvm::MetadataTracking::untrack();
                }
                llvm::IRBuilderBase::CreateRetVoid((AGCLLVMEndOfTileProgram *)((char *)this
                                                                             + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                             + 40));
                llvm::ConstantInt::get();
                llvm::SwitchInst::addCase();
                v220 = 0;
                v219 = 1;
              }
              while ((v326 & 1) != 0);
              if ((_WORD)v296)
              {
                llvm::ConstantInt::get();
                llvm::SwitchInst::addCase();
              }
              v212 = v296 + 1;
              v211 = v296 + 1;
            }
            while (v291 > (unsigned __int16)(v296 + 1));
            v228 = v320;
            if (v320 != 1)
            {
              llvm::ConstantInt::get();
              llvm::SwitchInst::addCase();
              v228 = v320;
            }
          }
          v229 = v322;
          if (v322 != (AGCLLVMGen3TargetLowerer *)1)
          {
            llvm::ConstantInt::get();
            llvm::SwitchInst::addCase();
            v229 = v322;
          }
        }
      }
      else
      {
        llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(v193 + 40));
      }
      goto LABEL_218;
    }
    v174 = llvm::Module::getFunction();
    v175 = v174;
    if ((*(_WORD *)(v174 + 18) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments((llvm::Function *)v174);
      v176 = *(_QWORD *)(v175 + 88);
      if ((*(_WORD *)(v175 + 18) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments((llvm::Function *)v175);
        v177 = *(_QWORD *)(v175 + 88);
LABEL_157:
        v325 = v177 + 40;
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
        v369 = 259;
        operator new();
        v178 = llvm::BasicBlock::BasicBlock();
        v179 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
        *((_QWORD *)v179 + 11) = v178;
        *((_QWORD *)v179 + 12) = v178 + 40;
        v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"dimensionDefault";
        v369 = 259;
        v180 = operator new();
        llvm::BasicBlock::BasicBlock();
        LOWORD(v363) = 1026;
        llvm::IRBuilderBase::CreateSwitch((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v176, v180, 2);
        v181 = 0;
        v182 = 0;
        do
        {
          v183 = v181;
          v184 = *((unsigned __int8 *)&v363 + v182);
          if (v184 == 2)
          {
            v185 = v180;
          }
          else
          {
            v176 = v176 & 0xFFFFFFFF00000000 | v184;
            v367.__r_.__value_.__r.__words[0] = (std::string::size_type)"dimension";
            v367.__r_.__value_.__r.__words[2] = v176;
            v369 = 2051;
            v185 = operator new();
            llvm::BasicBlock::BasicBlock();
          }
          v186 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          *((_QWORD *)v186 + 11) = v185;
          *((_QWORD *)v186 + 12) = v185 + 40;
          v187 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
          v188 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v187 + 672))(v187);
          v189 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
          v327 = *(_OWORD *)(v189 + 88);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v189 + 40));
          v329 = *((_DWORD *)v189 + 34);
          AGCLLVMGen2TargetLowerer::buildCopyOffChipMRTPixelDataStateless(v188, (uint64_t)&v327, v184, v325);
          if (v328)
            llvm::MetadataTracking::untrack();
          llvm::IRBuilderBase::CreateRetVoid((AGCLLVMEndOfTileProgram *)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 24)
                                                                       + 40));
          if ((_DWORD)v184 != 2)
          {
            llvm::ConstantInt::get();
            llvm::SwitchInst::addCase();
          }
          v181 = 1;
          v182 = 1;
        }
        while ((v183 & 1) == 0);
        goto LABEL_218;
      }
    }
    else
    {
      v176 = *(_QWORD *)(v174 + 88);
    }
    v177 = v176;
    goto LABEL_157;
  }
LABEL_218:
  v367.__r_.__value_.__r.__words[0] = (std::string::size_type)&v367.__r_.__value_.__r.__words[2];
  v367.__r_.__value_.__l.__size_ = 0x2000000000;
  v230 = (llvm::Function *)llvm::Module::getFunction();
  for (m = *((_QWORD *)v230 + 1); m; m = *(_QWORD *)(m + 8))
  {
    v232 = *(llvm::Instruction **)(m + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v232);
    llvm::ConstantInt::get();
    llvm::Value::replaceAllUsesWith();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v367, (uint64_t)v232);
  }
  v233 = (llvm::Function *)llvm::Module::getFunction();
  for (n = *((_QWORD *)v233 + 1); n; n = *(_QWORD *)(n + 8))
  {
    v235 = *(llvm::Instruction **)(n + 24);
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v235);
    v236 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    (*(void (**)(uint64_t))(*(_QWORD *)v236 + 200))(v236);
    llvm::ConstantInt::get();
    llvm::Value::replaceAllUsesWith();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v367, (uint64_t)v235);
  }
  llvm::Module::getFunction();
  v237 = v281;
  if (!*((_BYTE *)this + 81))
  {
    v363 = "entry";
    v366 = 259;
    operator new();
    v238 = llvm::BasicBlock::BasicBlock();
    v239 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v239 + 11) = v238;
    *((_QWORD *)v239 + 12) = v238 + 40;
    v240 = *(_QWORD *)(*(_QWORD *)this - 24);
    if (*(_QWORD *)(*(_QWORD *)((char *)this + v240 + 400) + 1640))
    {
      v241 = (char *)this + v240 + 32;
      strlen(*(const char **)(*(_QWORD *)((char *)this + v240 + 400) + 1640));
      v242 = AGCLLVMBuilder::getOrInsertFunction<>();
      v366 = 257;
      llvm::IRBuilderBase::CreateCall((uint64_t)(v241 + 8), **(_QWORD **)(*(_QWORD *)v242 + 16), v242, 0, 0, (uint64_t)&v363);
      v240 = *(_QWORD *)(*(_QWORD *)this - 24);
    }
    llvm::IRBuilderBase::CreateRetVoid((AGCLLVMEndOfTileProgram *)((char *)this + v240 + 40));
  }
  v243 = llvm::Module::getFunction();
  v363 = "entry";
  v366 = 259;
  operator new();
  v244 = llvm::BasicBlock::BasicBlock();
  v245 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v245 + 11) = v244;
  *((_QWORD *)v245 + 12) = v244 + 40;
  if ((v280 & 0x2000000) != 0)
  {
    if ((*(_WORD *)(v243 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v243);
    v246 = *(llvm::Value **)(v243 + 88);
    v247 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v359 = (const char *)llvm::ConstantInt::get();
    v360 = v246;
    v366 = 257;
    v249 = AGCLLVMBuilder::tryDeducePointeeType(v279, v248);
    v247 += 5;
    v250 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v247, (uint64_t)v249, (uint64_t *)v279, (uint64_t **)&v359, 2, (uint64_t)&v363);
    v351 = 257;
    v252 = AGCLLVMBuilder::tryDeducePointeeType(v250, v251);
    v253 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v247, v252, (uint64_t)v250, 0, (uint64_t)v349);
    v254 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v359 = (const char *)llvm::ConstantInt::get();
    v360 = v246;
    v366 = 257;
    v256 = AGCLLVMBuilder::tryDeducePointeeType(v278, v255);
    v254 += 5;
    v257 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v254, (uint64_t)v256, (uint64_t *)v278, (uint64_t **)&v359, 2, (uint64_t)&v363);
    v351 = 257;
    v259 = AGCLLVMBuilder::tryDeducePointeeType(v257, v258);
    v260 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v254, v259, (uint64_t)v257, 0, (uint64_t)v349);
    v261 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v262 = (llvm::Type *)*((_QWORD *)v261 + 29);
    v263 = (llvm::IRBuilderBase *)(v261 + 40);
    v264 = llvm::PointerType::get();
    v366 = 257;
    v265 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v263, 49, v277, v264, (uint64_t)&v363);
    v351 = 257;
    v266 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v263, v262, v265, v246, (const llvm::Twine *)v349);
    v362 = 257;
    v268 = AGCLLVMBuilder::tryDeducePointeeType(v266, v267);
    v269 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v263, v268, (uint64_t)v266, 0, (uint64_t)&v359);
    AGCLLVMEndOfTileProgram::setupOnDemandHwSparse(this, v253, v260, v269);
    v237 = v281;
  }
  llvm::IRBuilderBase::CreateRetVoid((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40));
  llvm::Module::getFunction();
  v363 = "entry";
  v366 = 259;
  operator new();
  v270 = llvm::BasicBlock::BasicBlock();
  v271 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v271 + 11) = v270;
  *((_QWORD *)v271 + 12) = v270 + 40;
  llvm::IRBuilderBase::CreateRetVoid((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40));
  if (LODWORD(v367.__r_.__value_.__r.__words[1]))
  {
    v272 = (llvm::Instruction **)v367.__r_.__value_.__r.__words[0];
    v273 = 8 * LODWORD(v367.__r_.__value_.__r.__words[1]);
    do
    {
      v274 = *v272++;
      llvm::Instruction::eraseFromParent(v274);
      v273 -= 8;
    }
    while (v273);
  }
  llvm::Function::eraseFromParent(v230);
  llvm::Function::eraseFromParent(v233);
  AGCLLVMObject::linkDSFile((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), "on_demand_mapping", v237);
  AGCLLVMDriverShader::finalizeDriverRuntimeLinking(this, v237, 1);
  if ((std::string::size_type *)v367.__r_.__value_.__l.__data_ != &v367.__r_.__value_.__r.__words[2])
    free(v367.__r_.__value_.__l.__data_);
  if (__p)
    operator delete(__p);
}

uint64_t AGCLLVMEndOfTileProgram::buildEmitSlice(AGCLLVMEndOfTileProgram *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5, llvm::Value *a6, llvm::Value *a7)
{
  uint64_t v12;
  llvm::GlobalVariable *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::GlobalVariable *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::IRBuilderBase *v29;
  llvm::Value *v30;
  llvm::CmpInst **v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t ICmp;
  char *v35;
  uint64_t v36;
  llvm::BasicBlock *v37;
  char *v38;
  llvm::GlobalVariable *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  llvm::Type *v44;
  llvm::GlobalVariable *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  llvm::Type *v50;
  llvm::Value *v51;
  llvm::GlobalVariable *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  llvm::Type *v58;
  llvm::Value *v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  llvm::BasicBlock *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  llvm::Value *v75;
  llvm::Type *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  _DWORD *v80;
  llvm::GlobalVariable *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  llvm::Type *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t inserted;
  char *v92;
  uint64_t v94;
  llvm::Value *v95;
  llvm::GlobalVariable *v96;
  llvm::Value *AlignedLoad;
  char v98;
  llvm::BasicBlock *v99;
  unsigned int v101;
  llvm::Type **v102;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  __int128 v108;
  uint64_t v109;
  int v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  __int128 v120;
  uint64_t v121;
  int v122;
  __int128 v123;
  uint64_t v124;
  int v125;
  __int16 v126;
  _QWORD v127[4];

  v127[2] = *MEMORY[0x1E0C80C00];
  llvm::FixedVectorType::get();
  if (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1780))
  {
    v96 = 0;
    v12 = a2;
  }
  else
  {
    v13 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v12 = a2;
    *(_QWORD *)&v123 = "agc.pbe_words";
    v124 = a2;
    v126 = 2051;
    llvm::GlobalVariable::GlobalVariable();
    v14 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
    if (*(_QWORD *)(v14 + 1712))
      strlen(*(const char **)(v14 + 1712));
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    v15 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v16 = *((_QWORD *)v15 + 47);
    v96 = v13;
    v17 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v15 + 32), v13);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v16, v17);
  }
  v18 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v19 = *(_QWORD *)this;
  *(_QWORD *)&v123 = "agc.emit_info";
  v124 = v12;
  v126 = 2051;
  v94 = *(unsigned int *)(*(_QWORD *)((char *)this + *(_QWORD *)(v19 - 24) + 400) + 876) | 0x100000000;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  v20 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v21 = *((_QWORD *)v20 + 47);
  v102 = (llvm::Type **)v18;
  v22 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v20 + 32), v18);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v21, v22);
  v104 = *((_QWORD *)this + 9);
  v23 = *(unsigned __int8 *)(v104 + 4 * v12);
  if (v23 != a3)
  {
    v24 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v25 = *((_QWORD *)v24 + 50);
    v120 = *(_OWORD *)(v24 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v24 + 40));
    v122 = *((_DWORD *)v24 + 34);
    (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v25 + 248))(&v123, v25, &v120, a2 & 7, *((_QWORD *)this + 9), *((unsigned __int8 *)this + 81));
    if (v121)
      llvm::MetadataTracking::untrack();
    if ((_QWORD)v123)
    {
      v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
      v117 = v123;
      v118 = v124;
      if (v124)
        llvm::MetadataTracking::track();
      v119 = v125;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v117, (uint64_t)(v26 + 8));
      if (v118)
        llvm::MetadataTracking::untrack();
    }
    if (v124)
      llvm::MetadataTracking::untrack();
    a3 = v23;
  }
  v101 = a3;
  if (a6)
  {
    *(_QWORD *)&v123 = "cond_emit";
    v126 = 259;
    v27 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v123 = "cond_skip";
    v126 = 259;
    v28 = operator new();
    llvm::BasicBlock::BasicBlock();
    v29 = (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v126 = 257;
    v31 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v29, a6, v30, (const llvm::Twine *)&v123);
    v32 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v33 = llvm::ConstantInt::get();
    v126 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp(v32, 32, v31, v33, (uint64_t)&v123);
    v99 = (llvm::BasicBlock *)v28;
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp, v27, v28);
    v35 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v35 + 11) = v27;
    *((_QWORD *)v35 + 12) = v27 + 40;
    if (a7)
    {
LABEL_19:
      *(_QWORD *)&v123 = "config";
      v126 = 259;
      v36 = operator new();
      llvm::BasicBlock::BasicBlock();
      *(_QWORD *)&v123 = "config_done";
      v126 = 259;
      v37 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (uint64_t)a7, v36, (uint64_t)v37);
      v38 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      *((_QWORD *)v38 + 11) = v36;
      *((_QWORD *)v38 + 12) = v36 + 40;
      goto LABEL_22;
    }
  }
  else
  {
    v99 = 0;
    if (a7)
      goto LABEL_19;
  }
  v37 = 0;
LABEL_22:
  if ((*(_BYTE *)(v104 + 4 * v12 + 3) & 2) != 0)
  {
    *((_BYTE *)this + 80) = 1;
    v39 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    *(_QWORD *)&v123 = "agc.sstt_address";
    v124 = v12;
    v126 = 2051;
    llvm::GlobalVariable::GlobalVariable();
    *((_BYTE *)v39 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v40 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v41 = *((_QWORD *)v40 + 47);
    v42 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v40 + 32), v39);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v41, v42);
    v43 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v44 = (llvm::Type *)llvm::PointerType::get();
    v126 = 257;
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v43 + 5, v44, (uint64_t)v39, 0, (uint64_t)&v123);
    v45 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    llvm::PointerType::get();
    *(_QWORD *)&v123 = "agc.queue_address";
    v124 = v12;
    v126 = 2051;
    llvm::GlobalVariable::GlobalVariable();
    *((_BYTE *)v45 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v46 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v47 = *((_QWORD *)v46 + 47);
    v48 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v46 + 32), v45);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v47, v48);
    v49 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
    v50 = (llvm::Type *)llvm::PointerType::get();
    v126 = 257;
    v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v49 + 5, v50, (uint64_t)v45, 0, (uint64_t)&v123);
    v52 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v53 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *(_QWORD *)&v123 = "agc.slice_level";
    v124 = v12;
    v126 = 2051;
    v94 = *(unsigned int *)(*((_QWORD *)v53 + 50) + 876) | 0x100000000;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v54 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v55 = *((_QWORD *)v54 + 47);
    v56 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v54 + 32), v52);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v55, v56);
    v57 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v58 = (llvm::Type *)*((_QWORD *)v57 + 29);
    v126 = 257;
    v59 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v57 + 5, v58, (uint64_t)v52, 0, (uint64_t)&v123);
    AGCLLVMEndOfTileProgram::setupOnDemandHwSparse(this, AlignedLoad, v51, v59);
  }
  if (v37)
  {
    llvm::IRBuilderBase::CreateBr((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v37);
    v60 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v60 + 11) = v37;
    *((_QWORD *)v60 + 12) = (char *)v37 + 40;
  }
  v61 = v104;
  if (*((_BYTE *)this + 81))
  {
    v62 = a5;
    if ((*(_BYTE *)(v104 + 4 * v12 + 3) & 0x20) != 0)
    {
      v95 = a7;
      v127[0] = llvm::ConstantInt::get();
      v127[1] = llvm::ConstantInt::get();
      AGCLLVMObject::buildWGBarrier((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t)v127, 2);
      v66 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
      v67 = *((_QWORD *)v66 + 50);
      v111 = *(_OWORD *)(v66 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v66 + 40));
      v113 = *((_DWORD *)v66 + 34);
      v68 = *(_DWORD *)(v104 + 4 * v12);
      v69 = BYTE1(v68);
      v70 = (v68 >> 26) & 7;
      v71 = HIBYTE(v68) & 1;
      v72 = *(_QWORD *)(*((_QWORD *)this + 9) + 72);
      v73 = llvm::ConstantInt::get();
      v74 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
      v126 = 257;
      v76 = AGCLLVMBuilder::tryDeducePointeeType(v102, v75);
      v77 = llvm::IRBuilderBase::CreateAlignedLoad(v74 + 5, v76, (uint64_t)v102, 0, (uint64_t)&v123);
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, _DWORD, uint64_t, _BYTE))(*(_QWORD *)v67 + 280))(&v114, v67, &v111, v69, v70, v71, HIDWORD(v72) & 0xF, v73, v77, 0, v94, 0);
      if (v112)
        llvm::MetadataTracking::untrack();
      v62 = a5;
      a7 = v95;
      v61 = v104;
      if ((_QWORD)v114)
      {
        v78 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32;
        v108 = v114;
        v109 = v115;
        if (v115)
          llvm::MetadataTracking::track();
        v110 = v116;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v108, (uint64_t)(v78 + 8));
        if (v109)
          llvm::MetadataTracking::untrack();
      }
      AGCLLVMObject::buildWGBarrier((uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 24), (uint64_t)v127, 2);
      if (v115)
        llvm::MetadataTracking::untrack();
      v98 = 1;
      if (!v95)
        goto LABEL_42;
    }
    else
    {
      v98 = 0;
      if (!a7)
        goto LABEL_42;
    }
LABEL_31:
    *(_QWORD *)&v123 = "emitpix";
    v126 = 259;
    v63 = operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v123 = "emitpix_skip";
    v126 = 259;
    v64 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), (uint64_t)a7, v63, (uint64_t)v64);
    v65 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v65 + 11) = v63;
    *((_QWORD *)v65 + 12) = v63 + 40;
    goto LABEL_43;
  }
  v98 = 0;
  v62 = a5;
  if (a7)
    goto LABEL_31;
LABEL_42:
  v64 = 0;
LABEL_43:
  v79 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
  v80 = *(_DWORD **)((char *)this + v79 + 368);
  if (v80[445])
  {
    v81 = (llvm::GlobalVariable *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 7) |= 1 << v12;
    v82 = llvm::ConstantInt::get();
    v79 = *(_QWORD *)(*(_QWORD *)this - 24) + 32;
    v80 = *(_DWORD **)((char *)this + v79 + 368);
  }
  else
  {
    v82 = 0;
    v81 = v96;
  }
  v83 = (char *)this + v79;
  v105 = *(_OWORD *)((char *)this + v79 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMEndOfTileProgram *)((char *)this + v79 + 8));
  v107 = *((_DWORD *)v83 + 26);
  LODWORD(v83) = *(_DWORD *)(v61 + 4 * v12);
  v84 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v85 = (llvm::Type *)*((_QWORD *)v84 + 29);
  v126 = 257;
  v86 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v84 + 5, v85, (uint64_t)v102, 0, (uint64_t)&v123);
  LOBYTE(v94) = v98;
  (*(void (**)(_DWORD *, __int128 *, llvm::GlobalVariable *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v80 + 240))(v80, &v105, v81, v82, a4, BYTE1(v83), (v83 >> 24) & 1, BYTE2(v83), v86, v94);
  if (v106)
    llvm::MetadataTracking::untrack();
  if (v64)
  {
    llvm::IRBuilderBase::CreateBr((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v64);
    v87 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v87 + 11) = v64;
    *((_QWORD *)v87 + 12) = (char *)v64 + 40;
  }
  if (v62)
  {
    v88 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v89 = v88 + 32;
    v90 = *((_QWORD *)v88 + 50);
    if (*(_QWORD *)(v90 + 1640))
      strlen(*(const char **)(v90 + 1640));
    inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    v126 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)(v89 + 8), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)&v123);
  }
  if (v99)
  {
    llvm::IRBuilderBase::CreateBr((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v99);
    v92 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v92 + 11) = v99;
    *((_QWORD *)v92 + 12) = (char *)v99 + 40;
  }
  return v101;
}

llvm::Value *AGCLLVMEndOfTileProgram::buildFastClearOfMetadata(AGCLLVMEndOfTileProgram *this, unsigned int a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  llvm::IRBuilderBase *v8;
  llvm::Value *v9;
  llvm::CmpInst **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t ICmp;
  char *v14;
  llvm::GlobalVariable *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::GlobalVariable *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::GlobalVariable *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::GlobalVariable *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::GlobalVariable *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::GlobalVariable *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::GlobalVariable *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  llvm::Value *v50;
  llvm::Type *v51;
  uint64_t *v52;
  llvm::Value *v53;
  llvm::Type *v54;
  uint64_t *v55;
  llvm::Value *v56;
  llvm::Type *v57;
  uint64_t *v58;
  llvm::Value *v59;
  llvm::Type *v60;
  uint64_t *v61;
  llvm::Value *v62;
  llvm::Type *v63;
  uint64_t *v64;
  llvm::Value *v65;
  llvm::Type *v66;
  uint64_t v67;
  uint64_t *v68;
  llvm::Value *v69;
  llvm::Type *v70;
  uint64_t v71;
  uint64_t inserted;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::IRBuilderBase *v76;
  llvm::Value *v77;
  char *v78;
  llvm::Value *v79;
  uint64_t Mul;
  llvm::IRBuilderBase *v81;
  llvm::Value *v82;
  char *v83;
  llvm::Value *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  llvm::Value *result;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  AGCLLVMBuilder *AlignedLoad;
  llvm::BasicBlock *v98;
  _BYTE v99[32];
  __int16 v100;
  _QWORD __src[4];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  _QWORD v109[2];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = operator new();
    llvm::BasicBlock::BasicBlock();
    v107 = "cond_skip";
    LOWORD(v110) = 259;
    v7 = operator new();
    llvm::BasicBlock::BasicBlock();
    v8 = (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v9 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v110) = 257;
    v10 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v8, a3, v9, (const llvm::Twine *)&v107);
    v11 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
    v12 = llvm::ConstantInt::get();
    LOWORD(v110) = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp(v11, 32, v10, v12, (uint64_t)&v107);
    v98 = (llvm::BasicBlock *)v7;
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), ICmp, v6, v7);
    v14 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v14 + 11) = v6;
    *((_QWORD *)v14 + 12) = v6 + 40;
  }
  else
  {
    v98 = 0;
  }
  v15 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::PointerType::get();
  v107 = "agc.metadata_address";
  v109[0] = a2;
  LOWORD(v110) = 2051;
  llvm::GlobalVariable::GlobalVariable();
  *((_BYTE *)v15 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v16 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v17 = *((_QWORD *)v16 + 47);
  v18 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v16 + 32), v15);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v17, v18);
  v19 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v107 = "agc.width_in_blocks";
  v109[0] = a2;
  LOWORD(v110) = 2051;
  v20 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v20 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v21 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v22 = *((_QWORD *)v21 + 47);
  v23 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v21 + 32), v19);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v22, v23);
  v24 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v107 = "agc.height_in_blocks";
  v109[0] = a2;
  LOWORD(v110) = 2051;
  v25 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v25 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v26 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v27 = *((_QWORD *)v26 + 47);
  v28 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v26 + 32), v24);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v27, v28);
  v29 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v107 = "agc.block_width";
  v109[0] = a2;
  LOWORD(v110) = 2051;
  v30 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v30 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v31 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v32 = *((_QWORD *)v31 + 47);
  v33 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v31 + 32), v29);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v32, v33);
  v34 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v107 = "agc.block_height";
  v109[0] = a2;
  LOWORD(v110) = 2051;
  v35 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v35 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v36 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v37 = *((_QWORD *)v36 + 47);
  v38 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v36 + 32), v34);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v37, v38);
  v39 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v107 = "agc.metadata_mb_size_32b";
  v109[0] = a2;
  LOWORD(v110) = 2051;
  v40 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v40 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v41 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v42 = *((_QWORD *)v41 + 47);
  v43 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v41 + 32), v39);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v42, v43);
  v44 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v107 = "agc.metadata_mb_per_tile";
  v109[0] = a2;
  LOWORD(v110) = 2051;
  v45 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v45 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v46 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v47 = *((_QWORD *)v46 + 47);
  v48 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v46 + 32), v44);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v47, v48);
  v49 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LOWORD(v110) = 257;
  v51 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v15, v50);
  AlignedLoad = (AGCLLVMBuilder *)llvm::IRBuilderBase::CreateAlignedLoad(v49 + 5, v51, (uint64_t)v15, 0, (uint64_t)&v107);
  v52 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LOWORD(v110) = 257;
  v54 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v19, v53);
  v96 = llvm::IRBuilderBase::CreateAlignedLoad(v52 + 5, v54, (uint64_t)v19, 0, (uint64_t)&v107);
  v55 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LOWORD(v110) = 257;
  v57 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v24, v56);
  v95 = llvm::IRBuilderBase::CreateAlignedLoad(v55 + 5, v57, (uint64_t)v24, 0, (uint64_t)&v107);
  v58 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LOWORD(v110) = 257;
  v60 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v29, v59);
  v94 = llvm::IRBuilderBase::CreateAlignedLoad(v58 + 5, v60, (uint64_t)v29, 0, (uint64_t)&v107);
  v61 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LOWORD(v110) = 257;
  v63 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v34, v62);
  v93 = llvm::IRBuilderBase::CreateAlignedLoad(v61 + 5, v63, (uint64_t)v34, 0, (uint64_t)&v107);
  v64 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LOWORD(v110) = 257;
  v66 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v39, v65);
  v67 = llvm::IRBuilderBase::CreateAlignedLoad(v64 + 5, v66, (uint64_t)v39, 0, (uint64_t)&v107);
  v68 = (uint64_t *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  LOWORD(v110) = 257;
  v70 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v44, v69);
  v71 = llvm::IRBuilderBase::CreateAlignedLoad(v68 + 5, v70, (uint64_t)v44, 0, (uint64_t)&v107);
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v73 = AGCLLVMBuilder::getOrInsertFunction<>();
  v74 = AGCLLVMBuilder::getOrInsertFunction<>();
  v75 = AGCLLVMBuilder::getOrInsertFunction<>();
  v76 = (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  LOWORD(v110) = 257;
  v77 = llvm::IRBuilderBase::CreateCall((uint64_t)v76, **(_QWORD **)(*(_QWORD *)v73 + 16), v73, 0, 0, (uint64_t)&v107);
  v78 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  LOWORD(v102) = 257;
  v79 = llvm::IRBuilderBase::CreateCall((uint64_t)(v78 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)__src);
  v100 = 257;
  Mul = llvm::IRBuilderBase::CreateMul(v76, v77, v79, (const llvm::Twine *)v99);
  v81 = (AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  LOWORD(v110) = 257;
  v82 = llvm::IRBuilderBase::CreateCall((uint64_t)v81, **(_QWORD **)(*(_QWORD *)v75 + 16), v75, 0, 0, (uint64_t)&v107);
  v83 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  LOWORD(v102) = 257;
  v84 = llvm::IRBuilderBase::CreateCall((uint64_t)(v83 + 40), **(_QWORD **)(*(_QWORD *)v74 + 16), v74, 0, 0, (uint64_t)__src);
  v100 = 257;
  v85 = llvm::IRBuilderBase::CreateMul(v81, v82, v84, (const llvm::Twine *)v99);
  v86 = llvm::PointerType::get();
  v87 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 232);
  __src[0] = v86;
  __src[1] = v87;
  __src[2] = v87;
  __src[3] = v87;
  v102 = v87;
  v103 = v87;
  v104 = v87;
  v105 = v87;
  v106 = v87;
  v107 = v109;
  v108 = 0x900000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v107, __src, &v107);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v89 = v88;
  if (v107 != v109)
    free(v107);
  v107 = AlignedLoad;
  v108 = Mul;
  v109[0] = v85;
  v109[1] = v96;
  v110 = v95;
  v111 = v94;
  v112 = v93;
  v113 = v67;
  v114 = v71;
  v90 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  LOWORD(v102) = 257;
  result = llvm::IRBuilderBase::CreateCall((uint64_t)v90, *(_QWORD *)(v89 + 24), v89, (uint64_t)&v107, 9, (uint64_t)__src);
  if (v98)
  {
    result = (llvm::Value *)llvm::IRBuilderBase::CreateBr((AGCLLVMEndOfTileProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40), v98);
    v92 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    *((_QWORD *)v92 + 11) = v98;
    *((_QWORD *)v92 + 12) = (char *)v98 + 40;
  }
  return result;
}

llvm::Value *AGCLLVMEndOfTileProgram::setupOnDemandHwSparse(AGCLLVMEndOfTileProgram *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v7;
  uint64_t inserted;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  llvm::Value *v12;
  char *v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD __src[4];
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD v29[2];
  llvm::Value *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  if (*(_QWORD *)(v7 + 1576))
    strlen(*(const char **)(v7 + 1576));
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v9 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400);
  if (*(_QWORD *)(v9 + 1584))
    strlen(*(const char **)(v9 + 1584));
  v10 = AGCLLVMBuilder::getOrInsertFunction<>();
  v11 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  LOWORD(v30) = 257;
  v12 = llvm::IRBuilderBase::CreateCall((uint64_t)(v11 + 40), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)&v27);
  v13 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  LOWORD(v30) = 257;
  v14 = llvm::IRBuilderBase::CreateCall((uint64_t)(v13 + 40), **(_QWORD **)(*(_QWORD *)v10 + 16), v10, 0, 0, (uint64_t)&v27);
  v15 = llvm::PointerType::get();
  v16 = llvm::PointerType::get();
  v17 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v18 = *((_QWORD *)v17 + 25);
  v19 = *((_QWORD *)v17 + 29);
  __src[0] = v15;
  __src[1] = v16;
  __src[2] = v18;
  __src[3] = v18;
  v26 = v19;
  v27 = v29;
  v28 = 0x500000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v27, __src, &v27);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v21 = v20;
  if (v27 != v29)
    free(v27);
  v27 = a3;
  v28 = (uint64_t)a2;
  v29[0] = v12;
  v29[1] = v14;
  v30 = a4;
  v22 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40;
  LOWORD(v26) = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v22, *(_QWORD *)(v21 + 24), v21, (uint64_t)&v27, 5, (uint64_t)__src);
}

uint64_t AGCLLVMEndOfTileProgram::AGCLLVMEndOfTileProgram(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3, uint64_t a4)
{
  llvm::LLVMContext *v7;
  uint64_t v8;
  unsigned int v9;
  llvm::GlobalVariable *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Function *inserted;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::IRBuilderBase *v28;
  llvm::CmpInst **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t ICmp;
  llvm::GlobalVariable *v33;
  llvm::LLVMContext *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Value *v39;
  llvm::Type *v40;
  llvm::Value *AlignedLoad;
  llvm::CmpInst **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::CmpInst **v46;
  uint64_t *v47;
  uint64_t v48;
  llvm::Value *v49;
  uint64_t *v50;
  uint64_t v51;
  llvm::Value *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  llvm::Value *v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  llvm::Value *v68;
  int v69;
  unsigned int v70;
  int v71;
  llvm::Value *v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  llvm::Value *v76;
  uint64_t v77;
  uint64_t v78;
  llvm::Function *v80;
  uint64_t v81;
  llvm::Value *v82;
  char v83[32];
  __int16 v84;
  __int128 v85;
  uint64_t v86;
  int v87;
  __int16 v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  char *v95;
  uint64_t v96;
  __int16 v97;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 96), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t *)a1, (uint64_t *)off_1E7EBBB20);
  *(_QWORD *)a1 = off_1E7EBB8E0;
  *(_QWORD *)(a1 + 96) = &unk_1E7EBBA20;
  *(_QWORD *)(a1 + 128) = &unk_1E7EBBB10;
  *(_QWORD *)(a1 + 72) = a4;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 81) = (*(_QWORD *)(a4 + 72) & 0x180000000000000) == 0x80000000000000;
  *(_BYTE *)(a1 + 82) = (*(_QWORD *)(a4 + 72) & 0x180000000000000) == 0x100000000000000;
  *(_QWORD *)(a1 + 88) = 0;
  v8 = *(_QWORD *)(a1 + 496);
  if (*(_DWORD *)(v8 + 1780))
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 824) + 200))(*(_QWORD *)(v8 + 824));
    llvm::PointerType::get();
    v10 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v95 = "agc.texture_heap.";
    v96 = v9;
    v97 = 2051;
    v11 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v11 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    llvm::GlobalObject::setAlignment();
    v12 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    v13 = *(_QWORD *)(v12 + 376);
    v14 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v12 + 32), v10);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v13, v14);
    *(_QWORD *)(a1 + 88) = v10;
  }
  if ((*(_BYTE *)(a4 + 79) & 2) != 0)
  {
    AGCLLVMEndOfTileProgram::buildStateless((AGCLLVMEndOfTileProgram *)a1, a3, v7);
    return a1;
  }
  (*(void (**)(char **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&v95, a1);
  inserted = (llvm::Function *)AGCLLVMBuilder::getOrInsertFunction<>();
  if (SHIBYTE(v96) < 0)
    operator delete(v95);
  if (*(_BYTE *)(a1 + 81))
    v16 = 1728;
  else
    v16 = 1712;
  *((_WORD *)inserted + 9) = *((_WORD *)inserted + 9) & 0xC00F | v16;
  v95 = "entry";
  v97 = 259;
  operator new();
  v17 = llvm::BasicBlock::BasicBlock();
  v18 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  *(_QWORD *)(v18 + 88) = v17;
  *(_QWORD *)(v18 + 96) = v17 + 40;
  LODWORD(v18) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 72);
  v19 = v18 & WORD1(v18);
  v20 = (WORD1(v18) ^ 0xFFFF) & v18;
  if (*(_BYTE *)(a1 + 81))
  {
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 680))(v21);
    AGCLLVMGen3TargetLowerer::setupFixedPRIDS(v22, 3);
    v23 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
    v24 = v23[1791];
    v25 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v23 + 680))(v23);
    v26 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    v27 = v26 + 32;
    v28 = (llvm::IRBuilderBase *)(v26 + 40);
    if (v24)
    {
      v85 = *(_OWORD *)(v26 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(v28);
      v87 = *(_DWORD *)(v27 + 104);
      v29 = (llvm::CmpInst **)AGCLLVMGen3TargetLowerer::buildLocalLinearID(v25, (uint64_t)&v85, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 224));
      if (v86)
        llvm::MetadataTracking::untrack();
      v30 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
      v31 = llvm::ConstantInt::get();
      v97 = 257;
      ICmp = llvm::IRBuilderBase::CreateICmp(v30, 32, v29, v31, (uint64_t)&v95);
    }
    else
    {
      v92 = *(_OWORD *)(v26 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation(v28);
      v94 = *(_DWORD *)(v27 + 104);
      v42 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)v25 + 256))(v25, &v92, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 224), 0);
      if (v93)
        llvm::MetadataTracking::untrack();
      v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 680))(v43);
      v45 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v89 = *(_OWORD *)(v45 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v45 + 40));
      v91 = *(_DWORD *)(v45 + 136);
      v46 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v44 + 256))(v44, &v89, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 224), 1);
      if (v90)
        llvm::MetadataTracking::untrack();
      v47 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
      v48 = llvm::ConstantInt::get();
      v97 = 257;
      v49 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v47, 32, v42, v48, (uint64_t)&v95);
      v50 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
      v51 = llvm::ConstantInt::get();
      v88 = 257;
      v52 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v50, 32, v46, v51, (uint64_t)&v85);
      v84 = 257;
      ICmp = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v47, v49, v52, (const llvm::Twine *)v83);
    }
    v82 = (llvm::Value *)ICmp;
    if (!v20)
    {
LABEL_24:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1736))
      {
        v20 = 1 << (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 72) >> 50);
        v19 &= ~v20;
        if (!v19)
          goto LABEL_26;
      }
      else
      {
        v20 = 0;
        if (!v19)
          goto LABEL_26;
      }
LABEL_17:
      v33 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::Type::getInt32Ty(*(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 392), v34);
      v95 = "agc.emit_enabled";
      v97 = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      v35 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v36 = *(_QWORD *)(v35 + 376);
      v37 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v35 + 32), v33);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v36, v37);
      v38 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v97 = 257;
      v40 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v33, v39);
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v38 + 40), v40, (uint64_t)v33, 0, (uint64_t)&v95);
      goto LABEL_27;
    }
  }
  else
  {
    v82 = 0;
    if (!v20)
      goto LABEL_24;
  }
  if (v19)
    goto LABEL_17;
LABEL_26:
  AlignedLoad = 0;
LABEL_27:
  v53 = 0;
  v54 = *(_QWORD *)a1;
  v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
  if (v19 && *(_BYTE *)(v55 + 1736))
  {
    v53 = 0;
    do
    {
      v56 = __clz(__rbit32(v19));
      v19 ^= 1 << v56;
      if (v19 | v20)
      {
        v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 368 + 32);
        v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 200))(v57);
      }
      else
      {
        v58 = 0;
      }
      v53 = AGCLLVMEndOfTileProgram::buildEmitSlice((AGCLLVMEndOfTileProgram *)a1, v56, v53, 0, v58, AlignedLoad, 0);
    }
    while (v19);
    v54 = *(_QWORD *)a1;
    v55 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
  }
  v59 = v19 | v20;
  v60 = v59 | (v59 >> 8);
  if (*(_DWORD *)(v55 + 1780))
    *(_QWORD *)(a1 + 56) |= v59;
  if (v60)
  {
    v80 = inserted;
    v81 = a1 + 368;
    while (1)
    {
      v61 = __clz(__rbit32(v60));
      v62 = 1 << v61;
      if (((1 << v61) & v59) == 0)
        goto LABEL_54;
      v63 = v62 & v19;
      LODWORD(v59) = v62 ^ v59;
      if (*(_BYTE *)(a1 + 82))
      {
        if (v63)
          v64 = AlignedLoad;
        else
          v64 = 0;
        AGCLLVMEndOfTileProgram::buildFastClearOfMetadata((AGCLLVMEndOfTileProgram *)a1, v61, v64);
        goto LABEL_54;
      }
      if ((_DWORD)v59)
      {
        v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v81 + 32);
        v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 200))(v65);
      }
      else
      {
        if (!*(_BYTE *)(a1 + 81))
        {
          v77 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v81 + 32);
          v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 200))(v77);
          v66 = 0;
          goto LABEL_50;
        }
        v66 = 0;
      }
      v67 = 0;
LABEL_50:
      if (v63)
        v68 = AlignedLoad;
      else
        v68 = 0;
      v53 = AGCLLVMEndOfTileProgram::buildEmitSlice((AGCLLVMEndOfTileProgram *)a1, v61, v53, v67, v66, v68, v82);
LABEL_54:
      v69 = 256 << v61;
      if ((v59 & (256 << v61)) != 0)
      {
        v70 = v61 + 8;
        v71 = v69 & v19;
        LODWORD(v59) = v59 ^ v69;
        if (!*(_BYTE *)(a1 + 82))
        {
          if ((_DWORD)v59)
          {
            v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v81 + 32);
            v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 200))(v73);
            goto LABEL_64;
          }
          if (*(_BYTE *)(a1 + 81))
          {
            v74 = 0;
LABEL_64:
            v75 = 0;
          }
          else
          {
            v78 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + v81 + 32);
            v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v78 + 200))(v78);
            v74 = 0;
          }
          if (v71)
            v76 = AlignedLoad;
          else
            v76 = 0;
          v53 = AGCLLVMEndOfTileProgram::buildEmitSlice((AGCLLVMEndOfTileProgram *)a1, v70, v53, v75, v74, v76, v82);
          goto LABEL_69;
        }
        if (v71)
          v72 = AlignedLoad;
        else
          v72 = 0;
        AGCLLVMEndOfTileProgram::buildFastClearOfMetadata((AGCLLVMEndOfTileProgram *)a1, v70, v72);
      }
LABEL_69:
      v60 ^= v62;
      if (!v60)
      {
        v54 = *(_QWORD *)a1;
        inserted = v80;
        break;
      }
    }
  }
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(v54 - 24) + a1 + 40));
  if (*(_BYTE *)(a1 + 80))
  {
    AGCLLVMObject::linkDSFile((AGCLLVMObject *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)), "on_demand_mapping", inserted);
    *(_BYTE *)(a1 + 8) = 1;
  }
  if (*(_BYTE *)(a1 + 82))
  {
    AGCLLVMObject::linkDSFile((AGCLLVMObject *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)), "eot_fast_clear_meta", inserted);
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

void AGCLLVMUtilityProgram::AGCLLVMUtilityProgram(AGCLLVMUtilityProgram *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t Bitcode;
  uint64_t v6;
  uint64_t Function;
  uint64_t v8;
  void *v9;
  void *__p[2];
  char v11;
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMUtilityProgram *)((char *)this + 8), a2, a3);
  *(_QWORD *)this = off_1E7EBBB60;
  *((_QWORD *)this + 1) = &unk_1E7EBBC98;
  *((_QWORD *)this + 5) = &unk_1E7EBBD88;
  Bitcode = AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"utility_program", 15, 0);
  v6 = *(_QWORD *)this;
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 368) = Bitcode;
  *(_QWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24) + 400) + 336) = *(_QWORD *)((char *)this
                                                                                          + *(_QWORD *)(v6 - 24)
                                                                                          + 368);
  (*(void (**)(void **__return_ptr, AGCLLVMUtilityProgram *))(v6 + 48))(__p, this);
  Function = llvm::Module::getFunction();
  if (v11 < 0)
    operator delete(__p[0]);
  __p[0] = *(void **)(Function + 112);
  llvm::AttributeList::getFnAttrs((llvm::AttributeList *)__p);
  v9 = (void *)llvm::AttributeSet::addAttribute();
  LODWORD(__p[0]) = -1;
  __p[1] = v9;
  *(_QWORD *)(Function + 112) = llvm::AttributeList::get();
  *(_WORD *)(Function + 18) = *(_WORD *)(Function + 18) & 0xC00F | 0x6A0;
  __p[0] = "agc.main";
  v12 = 259;
  llvm::Value::setName();
  AGCLLVMObject::disableConstantHoisting((AGCLLVMUtilityProgram *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  v8 = *(_QWORD *)this;
  *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 136) = -1;
  *(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(v8 - 24) + 400) + 104) = -1;
}

uint64_t *AGCLLVMDummyFeedbackFragmentShader::AGCLLVMDummyFeedbackFragmentShader(uint64_t *a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t inserted;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  char v19;
  __int16 v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 86), a2, a3);
  AGCLLVMDriverFragmentShader::AGCLLVMDriverFragmentShader(a1, (uint64_t *)off_1E7EBC018, (uint64_t)a2, (uint64_t)&pluginCreateLLVMObject(AGCLLVMCtx &,_AGCStreamToken,llvm::LLVMContext &,llvm::Module *,CompilationState &)::dummy);
  *a1 = (uint64_t)off_1E7EBBDA8;
  a1[86] = (uint64_t)&unk_1E7EBBF18;
  a1[90] = (uint64_t)&unk_1E7EBC008;
  a1[9] = (uint64_t)&unk_1E7EBBE18;
  std::string::basic_string[abi:nn180100]<0>(&__p, "agc.dummy_feedback");
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  if (v19 < 0)
    operator delete(__p);
  *(_WORD *)(inserted + 18) = *(_WORD *)(inserted + 18) & 0xC00F | 0x650;
  v6 = *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 680))(v6);
  AGCLLVMGen3TargetLowerer::setupFixedPRIDS(v7, 6);
  __p = "entry";
  v20 = 259;
  operator new();
  v8 = llvm::BasicBlock::BasicBlock();
  v9 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *((_QWORD *)v9 + 11) = v8;
  *((_QWORD *)v9 + 12) = v8 + 40;
  v10 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v11 = (uint64_t)(v10 + 32);
  v12 = *((_QWORD *)v10 + 50);
  v13 = *(_QWORD *)(v12 + 1512);
  if (v13)
    v14 = strlen(*(const char **)(v12 + 1512));
  else
    v14 = 0;
  v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v11, v13, v14, *(_QWORD *)(v11 + 144), *(_QWORD *)(v11 + 192), *(_QWORD *)(v11 + 192));
  v21[0] = llvm::ConstantInt::get();
  v21[1] = llvm::ConstantInt::get();
  v16 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24) + 40;
  v20 = 257;
  llvm::IRBuilderBase::CreateCall(v16, *(_QWORD *)(v15 + 24), v15, (uint64_t)v21, 2, (uint64_t)&__p);
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40));
  return a1;
}

uint64_t AGCLLVMTextureFetchFragmentShader::buildDefaultBlitShader(uint64_t a1, uint64_t a2, unsigned int *a3, int a4)
{
  uint64_t inserted;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Cast;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *InsertElement;
  uint64_t v33;
  llvm::Value *v34;
  llvm::GlobalVariable *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  const llvm::Twine *v41;
  llvm::Type **ConstInBoundsGEP2_32;
  unsigned int v43;
  unsigned int v44;
  const llvm::Twine *v45;
  llvm::Type **v46;
  uint64_t v47;
  llvm::Value *v48;
  llvm::Type *v49;
  uint64_t AlignedLoad;
  uint64_t v51;
  llvm::Value *v52;
  llvm::Type *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t FMul;
  llvm::Value *FAdd;
  uint64_t v58;
  llvm::IRBuilderBase *v59;
  llvm::Value *v60;
  unsigned int v61;
  uint64_t v62;
  llvm::Value *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Type **v70;
  unsigned int v71;
  unsigned int v72;
  int v74;
  unsigned int v75;
  llvm::GlobalVariable *SamplerStateGlobal;
  llvm::GlobalVariable *ImageStateGlobal;
  uint64_t TextureHeapGlobal;
  __int128 v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  void *__p;
  void *v86;
  _BYTE v87[11];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int16 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  int v101;
  llvm::Value *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int16 v106;
  char v107;
  char v108;
  uint64_t v109;
  char v110;
  _QWORD v111[4];
  __int16 v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 80))(&__p);
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  if ((v87[7] & 0x80000000) != 0)
    operator delete(__p);
  *(_WORD *)(inserted + 18) = *(_WORD *)(inserted + 18) & 0xC00F | 0x650;
  __p = "entry";
  LOWORD(v88) = 259;
  operator new();
  v9 = llvm::BasicBlock::BasicBlock();
  v10 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  *(_QWORD *)(v10 + 88) = v9;
  *(_QWORD *)(v10 + 96) = v9 + 40;
  if (*(_BYTE *)(a2 + 32))
  {
    v75 = __clz(*(unsigned __int8 *)(a2 + 32));
    TextureHeapGlobal = AGCLLVMDriverShader::getTextureHeapGlobal((AGCLLVMDriverShader *)a1, 1u);
    ImageStateGlobal = AGCLLVMDriverShader::getImageStateGlobal((AGCLLVMDriverShader *)a1);
    SamplerStateGlobal = AGCLLVMDriverShader::getSamplerStateGlobal((AGCLLVMDriverShader *)a1);
    if (a4 == 12)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
      if (*(_QWORD *)(v11 + 1576))
        strlen(*(const char **)(v11 + 1576));
      v24 = AGCLLVMBuilder::getOrInsertFunction<>();
      v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
      if (*(_QWORD *)(v25 + 1584))
        strlen(*(const char **)(v25 + 1584));
      v26 = AGCLLVMBuilder::getOrInsertFunction<>();
      v27 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v28 = (llvm::Value *)llvm::UndefValue::get();
      v29 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      LOWORD(v88) = 257;
      v30 = llvm::IRBuilderBase::CreateCall(v29 + 40, **(_QWORD **)(*(_QWORD *)v24 + 16), v24, 0, 0, (uint64_t)&__p);
      v112 = 257;
      v31 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v27 + 40), v28, v30, v31, (const llvm::Twine *)v111);
      v33 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      LOWORD(v88) = 257;
      v34 = llvm::IRBuilderBase::CreateCall(v33 + 40, **(_QWORD **)(*(_QWORD *)v26 + 16), v26, 0, 0, (uint64_t)&__p);
      __p = *(void **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 200);
      v86 = __p;
      llvm::StructType::get();
      v74 = 1;
      v35 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p = "agc.y_adjust";
      LOWORD(v88) = 259;
      llvm::GlobalVariable::GlobalVariable();
      llvm::GlobalObject::setSection();
      v36 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v37 = *(_QWORD *)(v36 + 376);
      v38 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v36 + 32), v35);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v37, v38);
      ConstInBoundsGEP2_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v35, 0, v39, v40, v41);
      v46 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP2_32((llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v35, (llvm::Value *)1, v43, v44, v45);
      v47 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      LOWORD(v88) = 257;
      v49 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP2_32, v48);
      AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v47 + 40), v49, (uint64_t)ConstInBoundsGEP2_32, 0, (uint64_t)&__p);
      v51 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      LOWORD(v88) = 257;
      v53 = AGCLLVMBuilder::tryDeducePointeeType(v46, v52);
      v54 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v51 + 40), v53, (uint64_t)v46, 0, (uint64_t)&__p);
      v55 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
      LOWORD(v88) = 257;
      FMul = llvm::IRBuilderBase::CreateFMul(v55, (uint64_t)v34, AlignedLoad, (uint64_t)&__p);
      v112 = 257;
      FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd(v55, FMul, v54, (uint64_t)v111);
      v58 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      LOWORD(v88) = 257;
      v59 = (llvm::IRBuilderBase *)(v58 + 40);
      v60 = (llvm::Value *)llvm::ConstantInt::get();
      v21 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v59, InsertElement, FAdd, v60, (const llvm::Twine *)&__p);
      v23 = *(_DWORD *)(a2 + 32) >> 8;
    }
    else
    {
      if ((*a3 & 0x100) != 0)
        v12 = 3;
      else
        v12 = 1;
      v74 = v12;
      if ((*a3 & 0x100) != 0)
        v13 = 3;
      else
        v13 = 2;
      llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 320), (llvm::Type *)v13);
      v14 = llvm::User::operator new((llvm::User *)0x58);
      __p = "agc.varying";
      LOWORD(v88) = 259;
      v15 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v15 + 80) |= 1u;
      llvm::GlobalObject::setAlignment();
      v111[0] = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v111[1] = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v111[2] = llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      v111[3] = llvm::ValueAsMetadata::get();
      llvm::Module::getOrInsertNamedMetadata();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
      v16 = llvm::PointerType::get();
      v17 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
      LOWORD(v88) = 257;
      Cast = llvm::IRBuilderBase::CreateCast(v17, 49, v14, v16, (uint64_t)&__p);
      v19 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      v20 = *(_QWORD *)(v19 + 400);
      v82 = *(_OWORD *)(v19 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v19 + 40));
      v84 = *(_DWORD *)(v19 + 136);
      v21 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 264))(v20, &v82, v13, 0, Cast, 0, 0);
      if (v83)
        llvm::MetadataTracking::untrack();
      v22 = *a3;
      if ((*a3 & 0x100) != 0)
      {
        v21 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v21, 4);
        v22 = *a3;
      }
      v23 = v22 >> 4;
    }
    v61 = v75 ^ 0x1F;
    if ((v23 & 0xFu) < 2)
    {
      v63 = 0;
    }
    else
    {
      v62 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
      if (*(_QWORD *)(v62 + 1592))
        strlen(*(const char **)(v62 + 1592));
      v64 = AGCLLVMBuilder::getOrInsertFunction<>();
      v65 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
      LOWORD(v88) = 257;
      v63 = llvm::IRBuilderBase::CreateCall(v65 + 40, **(_QWORD **)(*(_QWORD *)v64 + 16), v64, 0, 0, (uint64_t)&__p);
      *(_WORD *)(inserted + 18) = *(_WORD *)(inserted + 18) & 0xC00F | 0x680;
      llvm::Module::getOrInsertNamedMetadata();
      llvm::ConstantInt::get();
      __p = (void *)llvm::ValueAsMetadata::get();
      llvm::MDTuple::getImpl();
      llvm::NamedMDNode::addOperand();
    }
    LODWORD(__p) = 0;
    HIDWORD(__p) = v74;
    memset(v87, 0, sizeof(v87));
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    v92 = 0;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0;
    v106 = 0;
    v107 = 0;
    v99 = 0u;
    v100 = 0u;
    v101 = 0;
    v105 = 0;
    v103 = 0;
    v104 = 0;
    v108 = 1;
    v109 = 0;
    v110 = 0;
    if (*(_BYTE *)(a1 + 88 + 72 * v61 + 41))
      v66 = *(_QWORD *)(a1 + 88 + 72 * v61) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 312);
    else
      v66 = 3;
    LODWORD(v86) = v66;
    AGCLLVMDriverShader::setSampleArgs((_QWORD *)a1, &__p, v61, ImageStateGlobal, (uint64_t)SamplerStateGlobal, TextureHeapGlobal);
    *(_QWORD *)&v95 = v21;
    if (v63)
    {
      v67 = 0;
      v97 = 3;
    }
    else
    {
      v97 = 0;
      v67 = llvm::ConstantFP::get();
    }
    v98 = v67;
    v102 = v63;
    v87[6] = 1;
    v68 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
    v69 = *(_QWORD *)(v68 + 400);
    v79 = *(_OWORD *)(v68 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v68 + 40));
    v81 = *(_DWORD *)(v68 + 136);
    v70 = (llvm::Type **)(*(uint64_t (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v69 + 272))(v69, &v79, &__p);
    if (v80)
      llvm::MetadataTracking::untrack();
    v71 = *(unsigned __int8 *)(a2 + 32);
    while (v71)
    {
      v72 = __clz(v71);
      v71 ^= 0x80000000 >> v72;
      AGCLLVMFragmentShader::buildWriteFramebuffer((AGCLLVMFragmentShader *)(a1 + 72), v70, v72 ^ 0x1F, 15, 0);
    }
  }
  return llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40));
}

uint64_t AGCLLVMTextureFetchFragmentShader::buildMRCDownsampleBlitShader(AGCLLVMDriverShader *a1, _DWORD *a2, int *a3)
{
  uint64_t inserted;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  char v12;
  int v13;
  llvm::Value *v14;
  char *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *InsertElement;
  char *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value *v22;
  char *v23;
  llvm::Value *v24;
  llvm::Value *v25;
  llvm::Value *v26;
  char *v27;
  llvm::Value *v28;
  llvm::Value *v29;
  llvm::GlobalVariable *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::GlobalVariable *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::GlobalVariable *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::GlobalVariable *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::GlobalVariable *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::GlobalVariable *v55;
  llvm::GlobalVariable *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  llvm::Value *v68;
  uint64_t *v69;
  llvm::Type *v70;
  uint64_t AlignedLoad;
  uint64_t v72;
  uint64_t *v73;
  llvm::Type *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  llvm::Value *v78;
  llvm::Type *v79;
  uint64_t *v80;
  llvm::Value *v81;
  llvm::Type *v82;
  uint64_t *v83;
  llvm::Value *v84;
  llvm::Type *v85;
  uint64_t v86;
  uint64_t v87;
  llvm::Value *v88;
  uint64_t *v89;
  llvm::Type *v90;
  llvm::Value *v91;
  uint64_t v92;
  uint64_t *v93;
  llvm::Type *v94;
  uint64_t v95;
  char *v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  llvm::Value *v114;
  llvm::IRBuilderBase *v115;
  uint64_t v116;
  uint64_t v117;
  llvm::Value *v118;
  llvm::Value *Mul;
  uint64_t v120;
  llvm::IRBuilderBase *v121;
  uint64_t v122;
  llvm::Value *v123;
  llvm::BasicBlock *v124;
  llvm::BasicBlock *v125;
  llvm::BasicBlock *v126;
  uint64_t *v127;
  llvm::Value *v128;
  uint64_t ICmp;
  char *v130;
  llvm::IRBuilderBase *v131;
  uint64_t Sub;
  uint64_t v133;
  llvm::Value *v134;
  char *v135;
  uint64_t v136;
  llvm::Type *v137;
  llvm::User *PHI;
  AGCLLVMBuilder *v139;
  llvm::Value *v140;
  llvm::Value *v141;
  llvm::Value *v142;
  char *v143;
  llvm::IRBuilderBase *v144;
  llvm::Value *v145;
  llvm::Value *v146;
  char *v147;
  llvm::Value *v148;
  llvm::IRBuilderBase *v149;
  llvm::Value *v150;
  llvm::Value *v151;
  char *v152;
  llvm::Value *v153;
  llvm::IRBuilderBase *v154;
  llvm::Value *v155;
  llvm::Value *v156;
  char *v157;
  llvm::IRBuilderBase *v158;
  llvm::Value *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  llvm::Value *v166;
  llvm::Value *v167;
  char *v168;
  llvm::IRBuilderBase *v169;
  llvm::Value *v170;
  llvm::Value *v171;
  char *v172;
  llvm::IRBuilderBase *v173;
  llvm::Value *v174;
  llvm::Value *v175;
  char *v176;
  llvm::IRBuilderBase *v177;
  llvm::Value *v178;
  llvm::Value *v179;
  char *v180;
  llvm::IRBuilderBase *v181;
  llvm::Value *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  llvm::Value *v191;
  uint64_t *v192;
  uint64_t v193;
  llvm::Value *v194;
  llvm::IRBuilderBase *v195;
  llvm::Value *v196;
  llvm::CmpInst **v197;
  uint64_t v198;
  llvm::BasicBlock *v199;
  llvm::BasicBlock *v200;
  char *v201;
  char *v202;
  llvm::Type *v203;
  llvm::User *v204;
  uint64_t v205;
  uint64_t v206;
  llvm::IRBuilderBase *v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  llvm::BasicBlock *v213;
  uint64_t *v214;
  uint64_t v215;
  char *v216;
  char *v217;
  char *v218;
  llvm::Value *v219;
  uint64_t v220;
  char v221;
  char v222;
  uint64_t v223;
  llvm::IRBuilderBase *v224;
  llvm::Value *v225;
  llvm::Type *v226;
  uint64_t UIToFP;
  uint64_t v228;
  uint64_t FAdd;
  uint64_t v230;
  llvm::Value *v231;
  llvm::Type *v232;
  uint64_t v233;
  uint64_t v234;
  llvm::Value *FDiv;
  char *v236;
  llvm::IRBuilderBase *v237;
  llvm::Value *v238;
  int *v239;
  llvm::IRBuilderBase *v240;
  llvm::Value *v241;
  llvm::Value *v242;
  llvm::Type *v243;
  char *v244;
  uint64_t v245;
  llvm::Value *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  int8x8_t v251;
  uint64_t v252;
  char v253;
  uint8x8_t v254;
  llvm::Value *v255;
  AGCLLVMBuilder *v256;
  int *v257;
  llvm::BasicBlock *v258;
  llvm::BasicBlock *v259;
  char *v260;
  uint64_t v261;
  llvm::Type *v262;
  llvm::User *v263;
  llvm::IRBuilderBase *v264;
  uint64_t v265;
  llvm::Type *v266;
  llvm::User *v267;
  int *v268;
  uint64_t v269;
  uint64_t v270;
  llvm::BasicBlock *v271;
  uint64_t *v272;
  llvm::Value *v273;
  llvm::IRBuilderBase *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  AGCLLVMBuilder *v278;
  llvm::Value *v279;
  llvm::Value *v280;
  uint64_t FMul;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  llvm::IRBuilderBase *v298;
  llvm::Value *v299;
  uint64_t v300;
  llvm::Value *v301;
  llvm::Value *LShr;
  uint64_t v303;
  int v304;
  llvm::Value *v305;
  llvm::Value *v306;
  llvm::IRBuilderBase *v307;
  llvm::Value *v308;
  llvm::Value *v309;
  llvm::Value *v310;
  llvm::Value *v311;
  llvm::Value *v312;
  llvm::Value *v313;
  llvm::IRBuilderBase *v314;
  llvm::Value *v315;
  llvm::Value *v316;
  llvm::Value *v317;
  llvm::Value *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  char *v324;
  int v325;
  const char *v326;
  char v327;
  char v328;
  llvm::BasicBlock *v329;
  const char *v330;
  llvm::BasicBlock *v331;
  char *v332;
  uint64_t *v333;
  uint64_t v334;
  char *v335;
  char *v336;
  uint64_t v337;
  uint64_t FirstInsertionPt;
  llvm::Value *v339;
  uint64_t v340;
  char v341;
  char v342;
  char *v343;
  llvm::Value *v344;
  uint64_t v345;
  llvm::Value *v346;
  llvm::Value *v347;
  llvm::Value *v348;
  uint64_t v349;
  llvm::IRBuilderBase *v350;
  llvm::Value *v351;
  uint64_t v352;
  llvm::Value *v353;
  llvm::CmpInst **Select;
  uint64_t *v355;
  uint64_t v356;
  char *v357;
  llvm::IRBuilderBase *v358;
  llvm::Value *v359;
  llvm::IRBuilderBase *v360;
  llvm::Value *v361;
  llvm::Value *v362;
  llvm::Value *v363;
  uint64_t v364;
  uint64_t v365;
  llvm::Value *v366;
  llvm::Value *v367;
  llvm::Value *v368;
  llvm::Value *v369;
  char *v370;
  llvm::IRBuilderBase *v371;
  llvm::Value *v372;
  llvm::Value *v373;
  char *v374;
  llvm::Value *v375;
  llvm::Value *v376;
  uint64_t v377;
  llvm::IRBuilderBase *v378;
  llvm::Value *v379;
  llvm::IRBuilderBase *v380;
  BOOL v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  char *v387;
  llvm::IRBuilderBase *v388;
  llvm::Value *v389;
  int v390;
  uint64_t *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  llvm::IRBuilderBase *v398;
  llvm::BasicBlock *v399;
  llvm::Value *v400;
  llvm::Value *v401;
  uint64_t v402;
  char *v403;
  char v404;
  char v405;
  uint64_t v406;
  llvm::IRBuilderBase *v407;
  llvm::Value *v408;
  uint64_t v409;
  llvm::Value *v410;
  uint64_t v411;
  llvm::CmpInst **v412;
  uint64_t *v413;
  uint64_t v414;
  uint64_t *v415;
  llvm::Value *v416;
  uint64_t *v417;
  llvm::Value *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  char *v424;
  llvm::BasicBlock *v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  char v430;
  char v431;
  uint64_t v432;
  llvm::IRBuilderBase *v433;
  llvm::Value *v434;
  llvm::Value *v435;
  uint64_t v436;
  uint64_t v437;
  llvm::Value *v438;
  llvm::CmpInst **v439;
  uint64_t *v440;
  uint64_t v441;
  llvm::CmpInst **v442;
  uint64_t *v443;
  uint64_t v444;
  llvm::Value *v445;
  llvm::IRBuilderBase *v446;
  llvm::Value *v447;
  llvm::Value *v448;
  uint64_t v449;
  uint64_t v450;
  AGCLLVMBuilder *v451;
  llvm::BasicBlock *v452;
  llvm::BasicBlock *v453;
  char *v454;
  uint64_t v455;
  llvm::IRBuilderBase *v456;
  llvm::Type *v457;
  uint64_t v458;
  uint64_t v459;
  llvm::Value *v460;
  llvm::Type *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  llvm::IRBuilderBase *v465;
  llvm::Value *v466;
  llvm::Type *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  llvm::IRBuilderBase *v472;
  uint64_t v473;
  llvm::Value *FSub;
  llvm::Type *v475;
  llvm::Value *FPToUI;
  uint64_t v477;
  llvm::IRBuilderBase *v478;
  llvm::Type *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  uint64_t v485;
  llvm::Type *v486;
  llvm::User *v487;
  llvm::Value *v488;
  uint64_t v489;
  llvm::Type *v490;
  llvm::User *v491;
  llvm::Value *v492;
  llvm::Value *v493;
  llvm::IRBuilderBase *v494;
  llvm::Value *v495;
  llvm::Value *v496;
  uint64_t v497;
  uint64_t v498;
  llvm::Value *v499;
  llvm::Value *v500;
  uint64_t v501;
  llvm::Value *v502;
  llvm::IRBuilderBase *v503;
  llvm::Value *v504;
  char v505;
  uint64_t v506;
  char v507;
  uint64_t v508;
  char *v509;
  llvm::Value *v510;
  uint64_t v511;
  uint64_t v512;
  char *v513;
  llvm::Value *v514;
  uint64_t v515;
  char v516;
  char v517;
  llvm::IRBuilderBase *v518;
  llvm::Value *v519;
  llvm::Value *v520;
  llvm::Value *v521;
  llvm::Value *v522;
  uint64_t v523;
  char *v524;
  int v525;
  unsigned int v526;
  uint64_t v527;
  int v528;
  uint64_t *v529;
  int USCFormatFromState;
  uint64_t v531;
  llvm::Value *v532;
  llvm::Value **v533;
  uint64_t NextNonDebugInstruction;
  llvm::IRBuilderBase *v535;
  llvm::Instruction *v536;
  char *v537;
  llvm::IRBuilderBase *v538;
  llvm::User *v539;
  AGCLLVMBuilder *v540;
  llvm::Value *v541;
  llvm::Value *v542;
  uint64_t v543;
  uint64_t v544;
  char v545;
  char *v546;
  llvm::IRBuilderBase *v547;
  uint64_t *v548;
  uint64_t v549;
  AGCLLVMBuilder *v550;
  uint64_t v551;
  llvm::Value *v552;
  llvm::Value *FPExt;
  llvm::Value *v554;
  llvm::Instruction *v555;
  char *v556;
  uint64_t v557;
  uint64_t v558;
  AGCLLVMBuilder *v559;
  llvm::Value *v560;
  llvm::Value *v561;
  llvm::Instruction *v562;
  llvm::Instruction *v563;
  char *v564;
  llvm::IRBuilderBase *v565;
  uint64_t v566;
  AGCLLVMBuilder *v567;
  uint64_t v568;
  llvm::Value *v569;
  llvm::Value *v570;
  llvm::Value *v571;
  llvm::Value *v572;
  llvm::Instruction *v573;
  char *v574;
  uint64_t v575;
  uint64_t v576;
  AGCLLVMBuilder *v577;
  llvm::Value *v578;
  llvm::Value *v579;
  llvm::Instruction *v580;
  llvm::Instruction *v581;
  char *v582;
  llvm::BasicBlock *v583;
  char *v584;
  llvm::IRBuilderBase *v585;
  llvm::User *v586;
  llvm::Value *v587;
  llvm::BasicBlock *v588;
  uint64_t v589;
  char *v590;
  llvm::IRBuilderBase *v591;
  llvm::Value *v592;
  llvm::Value *v593;
  uint64_t v594;
  uint64_t v595;
  llvm::Value *v596;
  llvm::Value *v597;
  llvm::Value *v598;
  llvm::Value *v599;
  llvm::IRBuilderBase *v600;
  llvm::Value *v601;
  llvm::Value *v602;
  llvm::Value *v603;
  char *v604;
  llvm::Value *v605;
  llvm::IRBuilderBase *v606;
  llvm::Value *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  char *v611;
  uint64_t v612;
  char *v613;
  llvm::BasicBlock *v614;
  int v616;
  uint64_t v617;
  uint64_t v618;
  llvm::PHINode *v619;
  llvm::PHINode *v620;
  llvm::BasicBlock *v621;
  llvm::BasicBlock *v622;
  uint64_t v623;
  uint64_t v624;
  llvm::User *v625;
  llvm::Value *v626;
  char *v627;
  llvm::Value *v628;
  llvm::Value *Cast;
  char *v630;
  llvm::Value *v631;
  uint64_t v632;
  uint64_t v633;
  llvm::GlobalVariable *v634;
  uint64_t v635;
  llvm::Value *v636;
  int v637;
  char *v638;
  int *v639;
  char *v640;
  char v641;
  char v642;
  llvm::BasicBlock *v643;
  llvm::Type *v644;
  unsigned int v645;
  unsigned int v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  _DWORD *v650;
  char *v651;
  llvm::Value *v652;
  llvm::Value *v653;
  uint64_t v654;
  unsigned int v655;
  AGCLLVMGen3TargetLowerer *v656;
  llvm::Value *v657;
  llvm::Value *v658;
  char *v659;
  llvm::GlobalVariable *SamplerStateGlobal;
  llvm::BasicBlock *TextureHeapGlobal;
  int v662;
  llvm::BasicBlock *v663;
  llvm::Instruction *ImageStateGlobal;
  llvm::Instruction *RetVoid;
  llvm::BasicBlock *v666;
  int ComponentType;
  llvm::BasicBlock *v668;
  llvm::BasicBlock *v669;
  llvm::BasicBlock *v670;
  int v671;
  llvm::CmpInst **Add;
  llvm::BasicBlock *v673;
  llvm::BasicBlock *v674;
  llvm::BasicBlock *v675;
  llvm::Type **v676;
  AGCLLVMBuilder *v677;
  AGCLLVMBuilder *v678;
  int v679;
  AGCLLVMBuilder *v680;
  AGCLLVMBuilder *v681;
  AGCLLVMBuilder *v682;
  llvm::Type **v683;
  char v684;
  AGCLLVMBuilder *v685;
  AGCLLVMBuilder *v686;
  AGCLLVMBuilder *v687;
  AGCLLVMBuilder *v688;
  char v689;
  char v690;
  char v691;
  char v692;
  int v693;
  llvm::Type *v694;
  __int128 v695;
  uint64_t v696;
  int v697;
  __int128 v698;
  uint64_t v699;
  int v700;
  _BYTE v701[32];
  __int16 v702;
  _BYTE v703[32];
  __int16 v704;
  __int128 v705;
  uint64_t v706;
  int v707;
  __int128 v708;
  uint64_t v709;
  int v710;
  _BYTE v711[32];
  __int16 v712;
  __int128 v713;
  uint64_t v714;
  int v715;
  __int128 v716;
  uint64_t v717;
  int v718;
  __int128 v719;
  uint64_t v720;
  int v721;
  __int128 v722;
  uint64_t v723;
  int v724;
  __int128 v725;
  uint64_t v726;
  int v727;
  __int128 v728;
  uint64_t v729;
  int v730;
  __int128 v731;
  uint64_t v732;
  int v733;
  void *__p[2];
  _BYTE v735[12];
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int16 v740;
  __int128 v741;
  __int128 v742;
  __int128 v743;
  llvm::Value *v744;
  int v745;
  _QWORD v746[6];
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  char v750;
  __int16 v751;
  char v752;
  char v753;
  uint64_t v754;
  char v755;
  _BYTE v756[32];
  __int16 v757;
  __int128 v758;
  uint64_t v759;
  int v760;
  __int128 v761;
  uint64_t v762;
  int v763;
  __int128 v764;
  uint64_t v765;
  int v766;
  __int128 v767;
  uint64_t v768;
  int v769;
  __int128 v770;
  uint64_t v771;
  int v772;
  __int16 v773;
  __int128 v774;
  llvm::Value *v775;
  int v776;
  unsigned int v777;
  uint64_t v778;
  uint64_t v779;
  _OWORD v780[2];
  llvm::BasicBlock *v781;
  llvm::Value *v782;
  llvm::Value *v783[2];
  llvm::Value *v784;
  llvm::Value *v785;
  uint64_t v786;
  uint64_t v787;
  _QWORD v788[2];
  _QWORD v789[2];
  _QWORD v790[2];
  _QWORD v791[2];
  _QWORD v792[2];
  llvm::CmpInst **v793;
  llvm::CmpInst **v794;
  _QWORD v795[2];
  _QWORD v796[2];
  _QWORD v797[5];

  v797[2] = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 80))(__p);
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  if ((v735[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  *(_WORD *)(inserted + 18) = *(_WORD *)(inserted + 18) & 0xC00F | 0x6C0;
  __p[0] = "entry";
  LOWORD(v736) = 259;
  operator new();
  v7 = llvm::BasicBlock::BasicBlock();
  v8 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  *((_QWORD *)v8 + 11) = v7;
  *((_QWORD *)v8 + 12) = v7 + 40;
  v9 = *((_QWORD *)a1 + 12);
  if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
    v9 = **(_QWORD **)(v9 + 16);
  v671 = *a3;
  v10 = *a2;
  v11 = *a2 >> 5;
  v12 = *a2 >> 5;
  v694 = (llvm::Type *)v9;
  if (v11 >= 2)
  {
    v694 = (llvm::Type *)llvm::FixedVectorType::get();
    v10 = *a2;
    v12 = *a2 >> 5;
  }
  v692 = v12;
  v645 = v11;
  if ((v10 & 0x100) != 0)
    v13 = 1;
  else
    v13 = v10 & 0x1F;
  v655 = v13;
  v777 = 0;
  v644 = (llvm::Type *)v9;
  ComponentType = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32), (const llvm::Type *)v9, &v777);
  v14 = (llvm::Value *)llvm::UndefValue::get();
  v15 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v16 = (llvm::Value *)llvm::ConstantFP::get();
  LOWORD(v736) = 257;
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v15 + 40), v14, v16, v17, (const llvm::Twine *)__p);
  v19 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v20 = (llvm::Value *)llvm::ConstantFP::get();
  LOWORD(v736) = 257;
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v19 + 40), InsertElement, v20, v21, (const llvm::Twine *)__p);
  v23 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v24 = (llvm::Value *)llvm::ConstantFP::get();
  LOWORD(v736) = 257;
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v23 + 40), v22, v24, v25, (const llvm::Twine *)__p);
  v27 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v28 = (llvm::Value *)llvm::ConstantFP::get();
  LOWORD(v736) = 257;
  v29 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v27 + 40), v26, v28, v29, (const llvm::Twine *)__p);
  ImageStateGlobal = AGCLLVMDriverShader::getImageStateGlobal(a1);
  TextureHeapGlobal = (llvm::BasicBlock *)AGCLLVMDriverShader::getTextureHeapGlobal(a1, 1u);
  v634 = AGCLLVMDriverShader::getWriteImageStateGlobal(a1);
  v633 = AGCLLVMDriverShader::getTextureHeapGlobal(a1, 0);
  SamplerStateGlobal = AGCLLVMDriverShader::getSamplerStateGlobal(a1);
  v637 = *(unsigned __int8 *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 1739);
  if (*(_BYTE *)(*(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400) + 1739))
  {
    v30 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p[0] = "agc.view_level";
    LOWORD(v736) = 259;
    v31 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v31 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v32 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v33 = *((_QWORD *)v32 + 47);
    v676 = (llvm::Type **)v30;
    v34 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v32 + 32), v30);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v33, v34);
  }
  else
  {
    v676 = 0;
  }
  v650 = a2;
  v35 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  __p[0] = "agc.first_level";
  LOWORD(v736) = 259;
  v36 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v36 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v37 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v38 = *((_QWORD *)v37 + 47);
  v39 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v37 + 32), v35);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v38, v39);
  v40 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  __p[0] = "agc.mipgen_width";
  LOWORD(v736) = 259;
  v41 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v41 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v42 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v43 = *((_QWORD *)v42 + 47);
  v44 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v42 + 32), v40);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v43, v44);
  v45 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  __p[0] = "agc.mipgen_height";
  LOWORD(v736) = 259;
  v46 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v46 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v47 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v48 = *((_QWORD *)v47 + 47);
  v49 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v47 + 32), v45);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v48, v49);
  v50 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  __p[0] = "agc.num_levels";
  LOWORD(v736) = 259;
  v51 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v51 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v52 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v53 = *((_QWORD *)v52 + 47);
  v54 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v52 + 32), v50);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v53, v54);
  v55 = 0;
  v683 = 0;
  v639 = a3;
  if ((*((_BYTE *)a3 + 2) & 4) != 0)
  {
    v56 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p[0] = "agc.mipgen_first_slice";
    LOWORD(v736) = 259;
    v57 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v57 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v58 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v59 = *((_QWORD *)v58 + 47);
    v683 = (llvm::Type **)v56;
    v60 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v58 + 32), v56);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v59, v60);
    v55 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p[0] = "agc.mipgen_num_slices";
    LOWORD(v736) = 259;
    v61 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v61 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v62 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v63 = *((_QWORD *)v62 + 47);
    v64 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v62 + 32), v55);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v63, v64);
  }
  v65 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400);
  v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 680))(v65);
  v67 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v774 = *(_OWORD *)(v67 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v67 + 40));
  v776 = *((_DWORD *)v67 + 34);
  v656 = (AGCLLVMGen3TargetLowerer *)AGCLLVMGen3TargetLowerer::buildQuadElement(v66, (uint64_t)&v774, *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 224));
  v68 = v775;
  if (v775)
    llvm::MetadataTracking::untrack();
  if (v637)
  {
    v69 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    LOWORD(v736) = 257;
    v70 = AGCLLVMBuilder::tryDeducePointeeType(v676, v68);
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v69, v70, (uint64_t)v676, 0, (uint64_t)__p);
    v72 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 216);
    v773 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v69, 38, AlignedLoad, v72, (uint64_t)&v770);
  }
  else
  {
    Cast = 0;
  }
  v624 = ~(-1 << v692);
  v73 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  LOWORD(v736) = 257;
  v74 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v35, v68);
  v75 = llvm::IRBuilderBase::CreateAlignedLoad(v73, v74, (uint64_t)v35, 0, (uint64_t)__p);
  v76 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 216);
  v773 = 257;
  v636 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v73, 38, v75, v76, (uint64_t)&v770);
  v77 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  LOWORD(v736) = 257;
  v79 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v40, v78);
  v797[0] = llvm::IRBuilderBase::CreateAlignedLoad(v77 + 5, v79, (uint64_t)v40, 0, (uint64_t)__p);
  v80 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  v773 = 257;
  v82 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v45, v81);
  v797[1] = llvm::IRBuilderBase::CreateAlignedLoad(v80 + 5, v82, (uint64_t)v45, 0, (uint64_t)&v770);
  v83 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  LOWORD(v736) = 257;
  v85 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v50, v84);
  v86 = llvm::IRBuilderBase::CreateAlignedLoad(v83, v85, (uint64_t)v50, 0, (uint64_t)__p);
  v87 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 216);
  v773 = 257;
  v623 = llvm::IRBuilderBase::CreateCast((uint64_t)v83, 38, v86, v87, (uint64_t)&v770);
  if ((*v639 & 0x40000) == 0)
  {
    v657 = 0;
LABEL_23:
    v92 = 0;
    goto LABEL_25;
  }
  v89 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  LOWORD(v736) = 257;
  v90 = AGCLLVMBuilder::tryDeducePointeeType(v683, v88);
  v657 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v89 + 5, v90, (uint64_t)v683, 0, (uint64_t)__p);
  if ((*v639 & 0x40000) == 0)
    goto LABEL_23;
  v93 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  LOWORD(v736) = 257;
  v94 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v55, v91);
  v92 = llvm::IRBuilderBase::CreateAlignedLoad(v93 + 5, v94, (uint64_t)v55, 0, (uint64_t)__p);
LABEL_25:
  v652 = (llvm::Value *)v92;
  v95 = 0;
  v693 = v671 & 0xF;
  v796[0] = 0;
  v796[1] = 0;
  v96 = (char *)a1 + 368;
  v627 = (char *)a1 + 200;
  v659 = (char *)a1 + 192;
  v795[0] = 0;
  v795[1] = 0;
  v793 = 0;
  v794 = 0;
  v97 = 1;
  v792[0] = 0;
  v792[1] = 0;
  v651 = (char *)a1 + 368;
  do
  {
    v98 = v97;
    v99 = *(_QWORD *)&v96[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 680))(v99);
    v101 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v767 = *(_OWORD *)(v101 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v101 + 40));
    v769 = *((_DWORD *)v101 + 34);
    v796[v95] = AGCLLVMGen3TargetLowerer::buildGlobalID(v100, (uint64_t)&v767, *(_QWORD *)&v627[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32], v95);
    if (v768)
      llvm::MetadataTracking::untrack();
    v102 = *(_QWORD *)&v651[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
    v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v102 + 680))(v102);
    v104 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v764 = *(_OWORD *)(v104 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v104 + 40));
    v766 = *((_DWORD *)v104 + 34);
    v795[v95] = AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v103, (uint64_t)&v764, *(_QWORD *)&v627[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32], v95);
    if (v765)
      llvm::MetadataTracking::untrack();
    v105 = *(_QWORD *)&v651[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
    v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v105 + 680))(v105);
    v107 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v761 = *(_OWORD *)(v107 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v107 + 40));
    v763 = *((_DWORD *)v107 + 34);
    (&v793)[v95] = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)v106 + 256))(v106, &v761, *(_QWORD *)&v659[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32], v95);
    if (v762)
      llvm::MetadataTracking::untrack();
    v108 = *(_QWORD *)&v651[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
    v109 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 680))(v108);
    v110 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v758 = *(_OWORD *)(v110 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v110 + 40));
    v760 = *((_DWORD *)v110 + 34);
    v792[v95] = AGCLLVMGen3TargetLowerer::buildLocalSize(v109, (uint64_t)&v758, *(_QWORD *)&v659[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32], v95);
    if (v759)
      llvm::MetadataTracking::untrack();
    v97 = 0;
    v95 = 1;
    v96 = (char *)a1 + 368;
  }
  while ((v98 & 1) != 0);
  v111 = 0;
  v791[0] = 0;
  v791[1] = 0;
  v790[0] = 0;
  v790[1] = 0;
  v789[0] = 0;
  v789[1] = 0;
  v640 = (char *)a1 + 48;
  v112 = 1;
  v113 = *(_QWORD *)(*(_QWORD *)a1 - 24);
  do
  {
    v684 = v112;
    v114 = (llvm::Value *)v795[v111];
    v115 = (AGCLLVMDriverShader *)((char *)a1 + v113 + 40);
    v116 = v792[v111];
    v117 = *(_QWORD *)&v627[v113 + 32];
    LOWORD(v736) = 257;
    v677 = (AGCLLVMBuilder *)v116;
    v118 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v115, 39, v116, v117, (uint64_t)__p);
    v773 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v115, v114, v118, (const llvm::Twine *)&v770);
    v791[v111] = Mul;
    v120 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v121 = (AGCLLVMDriverShader *)((char *)a1 + v120 + 40);
    v122 = *(_QWORD *)&v627[v120 + 32];
    LOWORD(v736) = 257;
    v123 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v121, 39, v116, v122, (uint64_t)__p);
    v773 = 257;
    Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v121, Mul, v123, (const llvm::Twine *)&v770);
    v124 = *(llvm::BasicBlock **)&v640[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
    __p[0] = "block_size";
    LOWORD(v736) = 259;
    v125 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    __p[0] = "block_size.end";
    LOWORD(v736) = 259;
    v126 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v127 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v128 = (llvm::Value *)v797[v111];
    LOWORD(v736) = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp(v127, 34, Add, (uint64_t)v128, (uint64_t)__p);
    llvm::IRBuilderBase::CreateCondBr(v127, ICmp, (uint64_t)v125, (uint64_t)v126);
    v130 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *((_QWORD *)v130 + 11) = v125;
    *((_QWORD *)v130 + 12) = (char *)v125 + 40;
    v131 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    LOWORD(v736) = 257;
    Sub = llvm::IRBuilderBase::CreateSub(v131, v128, Mul, (const llvm::Twine *)__p);
    v133 = *(_QWORD *)&v659[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
    v773 = 257;
    v134 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v131, 38, Sub, v133, (uint64_t)&v770);
    llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v126);
    v135 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *((_QWORD *)v135 + 11) = v126;
    *((_QWORD *)v135 + 12) = (char *)v126 + 40;
    v136 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v137 = *(llvm::Type **)&v659[v136 + 32];
    LOWORD(v736) = 257;
    PHI = llvm::IRBuilderBase::CreatePHI((AGCLLVMDriverShader *)((char *)a1 + v136 + 40), v137, 2, (const llvm::Twine *)__p);
    llvm::PHINode::addIncoming(PHI, v677, v124);
    llvm::PHINode::addIncoming(PHI, v134, v125);
    v112 = 0;
    v789[v111] = PHI;
    v113 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    if (*(_BYTE *)(*(_QWORD *)&v651[v113 + 32] + 1764))
      v139 = v677;
    else
      v139 = PHI;
    v790[v111] = v139;
    v111 = 1;
  }
  while ((v684 & 1) != 0);
  v140 = (llvm::Value *)llvm::ConstantInt::get();
  v141 = (llvm::Value *)llvm::ConstantInt::get();
  v142 = (llvm::Value *)llvm::UndefValue::get();
  v143 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  LOWORD(v736) = 257;
  v144 = (llvm::IRBuilderBase *)(v143 + 40);
  v145 = (llvm::Value *)llvm::ConstantInt::get();
  v146 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v144, v142, v141, v145, (const llvm::Twine *)__p);
  v147 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v148 = (llvm::Value *)v793;
  LOWORD(v736) = 257;
  v149 = (llvm::IRBuilderBase *)(v147 + 40);
  v150 = (llvm::Value *)llvm::ConstantInt::get();
  v151 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v149, v146, v148, v150, (const llvm::Twine *)__p);
  v152 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v153 = (llvm::Value *)v794;
  LOWORD(v736) = 257;
  v154 = (llvm::IRBuilderBase *)(v152 + 40);
  v155 = (llvm::Value *)llvm::ConstantInt::get();
  v156 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v154, v151, v153, v155, (const llvm::Twine *)__p);
  v157 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  LOWORD(v736) = 257;
  v158 = (llvm::IRBuilderBase *)(v157 + 40);
  v159 = (llvm::Value *)llvm::ConstantInt::get();
  v160 = llvm::IRBuilderBase::CreateInsertElement(v158, v156, v140, v159, (const llvm::Twine *)__p);
  v161 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v162 = (uint64_t)(v161 + 40);
  v163 = *((_QWORD *)v161 + 30);
  LOWORD(v736) = 257;
  v164 = llvm::IRBuilderBase::CreateCast((uint64_t)(v161 + 40), 49, v160, v163, (uint64_t)__p);
  v165 = llvm::PointerType::get();
  v773 = 257;
  v632 = llvm::IRBuilderBase::CreateCast(v162, 48, v164, v165, (uint64_t)&v770);
  v635 = 0;
  v648 = (uint64_t)v141;
  if (v693 == 7)
  {
    v166 = (llvm::Value *)llvm::ConstantInt::get();
    v167 = (llvm::Value *)llvm::UndefValue::get();
    v168 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v736) = 257;
    v169 = (llvm::IRBuilderBase *)(v168 + 40);
    v170 = (llvm::Value *)llvm::ConstantInt::get();
    v678 = v166;
    v171 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v169, v167, v166, v170, (const llvm::Twine *)__p);
    v172 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v736) = 257;
    v173 = (llvm::IRBuilderBase *)(v172 + 40);
    v174 = (llvm::Value *)llvm::ConstantInt::get();
    v175 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v173, v171, v148, v174, (const llvm::Twine *)__p);
    v176 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v736) = 257;
    v177 = (llvm::IRBuilderBase *)(v176 + 40);
    v178 = (llvm::Value *)llvm::ConstantInt::get();
    v179 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v177, v175, v153, v178, (const llvm::Twine *)__p);
    v180 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v736) = 257;
    v181 = (llvm::IRBuilderBase *)(v180 + 40);
    v182 = (llvm::Value *)llvm::ConstantInt::get();
    v183 = llvm::IRBuilderBase::CreateInsertElement(v181, v179, v140, v182, (const llvm::Twine *)__p);
    v184 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v185 = (uint64_t)(v184 + 40);
    v186 = *((_QWORD *)v184 + 30);
    LOWORD(v736) = 257;
    v187 = llvm::IRBuilderBase::CreateCast((uint64_t)(v184 + 40), 49, v183, v186, (uint64_t)__p);
    v188 = llvm::PointerType::get();
    v773 = 257;
    v635 = llvm::IRBuilderBase::CreateCast(v185, 48, v187, v188, (uint64_t)&v770);
    v148 = (llvm::Value *)v793;
    v153 = (llvm::Value *)v794;
  }
  else
  {
    v678 = v141;
  }
  v189 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v190 = llvm::ConstantInt::get();
  LOWORD(v736) = 257;
  v191 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v189, 32, (llvm::CmpInst **)v148, v190, (uint64_t)__p);
  v192 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v193 = llvm::ConstantInt::get();
  v773 = 257;
  v194 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v192, 32, (llvm::CmpInst **)v153, v193, (uint64_t)&v770);
  v757 = 257;
  v631 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v189, v191, v194, (const llvm::Twine *)v756);
  v618 = 0;
  if (v693 == 7)
  {
    v195 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v196 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v736) = 257;
    v197 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v195, v656, v196, (const llvm::Twine *)__p);
    v198 = llvm::ConstantInt::get();
    v773 = 257;
    v618 = llvm::IRBuilderBase::CreateICmp((uint64_t *)v195, 32, v197, v198, (uint64_t)&v770);
  }
  v788[0] = llvm::ConstantInt::get();
  v788[1] = llvm::ConstantInt::get();
  AGCLLVMObject::buildWGBarrier((uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)v788, 2);
  v649 = (uint64_t)v140;
  if ((*((_BYTE *)v639 + 2) & 4) != 0)
  {
    v199 = *(llvm::BasicBlock **)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 88);
    __p[0] = "array_loop";
    LOWORD(v736) = 259;
    v200 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v200);
    v201 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v617 = (uint64_t)v200;
    *((_QWORD *)v201 + 11) = v200;
    *((_QWORD *)v201 + 12) = (char *)v200 + 40;
    v202 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v203 = (llvm::Type *)*((_QWORD *)v202 + 29);
    LOWORD(v736) = 257;
    v204 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(v202 + 40), v203, 2, (const llvm::Twine *)__p);
    llvm::PHINode::addIncoming(v204, v657, v199);
    __p[0] = "array_loop.end";
    LOWORD(v736) = 259;
    v205 = operator new();
    llvm::BasicBlock::BasicBlock();
    __p[0] = "array_loop.continue";
    LOWORD(v736) = 259;
    v206 = operator new();
    llvm::BasicBlock::BasicBlock();
    v207 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    LOWORD(v736) = 257;
    v208 = llvm::IRBuilderBase::CreateAdd(v207, v657, v652, (const llvm::Twine *)__p);
    v773 = 257;
    v209 = llvm::IRBuilderBase::CreateICmp((uint64_t *)v207, 32, (llvm::CmpInst **)v204, v208, (uint64_t)&v770);
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v207, v209, v205, v206);
    v210 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *((_QWORD *)v210 + 11) = v205;
    *((_QWORD *)v210 + 12) = v205 + 40;
    llvm::IRBuilderBase::CreateRetVoid((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40));
    v211 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *((_QWORD *)v211 + 11) = v206;
    *((_QWORD *)v211 + 12) = v206 + 40;
    __p[0] = "array_barrier.end";
    LOWORD(v736) = 259;
    v212 = operator new();
    llvm::BasicBlock::BasicBlock();
    __p[0] = "array_barrier.continue";
    LOWORD(v736) = 259;
    v213 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v214 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    LOWORD(v736) = 257;
    v628 = v204;
    v215 = llvm::IRBuilderBase::CreateICmp(v214, 33, (llvm::CmpInst **)v204, (uint64_t)v657, (uint64_t)__p);
    llvm::IRBuilderBase::CreateCondBr(v214, v215, v212, (uint64_t)v213);
    v216 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *((_QWORD *)v216 + 11) = v212;
    *((_QWORD *)v216 + 12) = v212 + 40;
    AGCLLVMObject::buildWGBarrier((uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)v788, 2);
    llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v213);
    v217 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *((_QWORD *)v217 + 11) = v213;
    *((_QWORD *)v217 + 12) = (char *)v213 + 40;
  }
  else
  {
    v617 = 0;
    v628 = 0;
  }
  v218 = (char *)a1 + 168;
  v219 = (llvm::Value *)llvm::UndefValue::get();
  v220 = 0;
  v221 = 1;
  do
  {
    v222 = v221;
    v223 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v224 = (AGCLLVMDriverShader *)((char *)a1 + v223 + 40);
    v225 = (llvm::Value *)v796[v220];
    v226 = *(llvm::Type **)&v218[v223 + 32];
    LOWORD(v736) = 257;
    UIToFP = llvm::IRBuilderBase::CreateUIToFP(v224, v225, v226, (const llvm::Twine *)__p);
    v228 = llvm::ConstantFP::get();
    v773 = 257;
    FAdd = llvm::IRBuilderBase::CreateFAdd((uint64_t)v224, UIToFP, v228, (uint64_t)&v770);
    v230 = *(_QWORD *)(*(_QWORD *)a1 - 24);
    v231 = (llvm::Value *)v797[v220];
    v232 = *(llvm::Type **)&v218[v230 + 32];
    LOWORD(v736) = 257;
    v233 = llvm::IRBuilderBase::CreateUIToFP((AGCLLVMDriverShader *)((char *)a1 + v230 + 40), v231, v232, (const llvm::Twine *)__p);
    v234 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
    LOWORD(v736) = 257;
    FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv(v234, FAdd, v233, (uint64_t)__p);
    v236 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v736) = 257;
    v237 = (llvm::IRBuilderBase *)(v236 + 40);
    v238 = (llvm::Value *)llvm::ConstantInt::get();
    v219 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v237, v219, FDiv, v238, (const llvm::Twine *)__p);
    v221 = 0;
    v220 = 1;
  }
  while ((v222 & 1) != 0);
  __p[0] = (void *)0x100000000;
  *(_QWORD *)v735 = 0;
  *(_DWORD *)&v735[7] = 0;
  v736 = 0u;
  v737 = 0u;
  v738 = 0u;
  v739 = 0u;
  v740 = 0;
  v741 = 0u;
  v742 = 0u;
  v743 = 0u;
  v744 = 0;
  v751 = 0;
  v752 = 0;
  memset(&v746[1], 0, 36);
  v748 = 0;
  v747 = 0;
  v750 = 0;
  v749 = 0;
  v753 = 1;
  v754 = 0;
  v755 = 0;
  LODWORD(__p[1]) = ComponentType;
  AGCLLVMDriverShader::setSampleArgs(a1, __p, 0, ImageStateGlobal, (uint64_t)SamplerStateGlobal, (uint64_t)TextureHeapGlobal);
  *(_QWORD *)&v743 = v219;
  v239 = v639;
  if ((*((_BYTE *)v639 + 2) & 4) != 0)
    v744 = v628;
  v745 = 1;
  v240 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v241 = (llvm::Value *)llvm::ConstantInt::get();
  v773 = 257;
  v242 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v240, v636, v241, (const llvm::Twine *)&v770);
  v243 = *(llvm::Type **)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 184);
  v757 = 257;
  v746[0] = llvm::IRBuilderBase::CreateUIToFP(v240, v242, v243, (const llvm::Twine *)v756);
  v735[6] = 1;
  v244 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v245 = *((_QWORD *)v244 + 50);
  v731 = *(_OWORD *)(v244 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v244 + 40));
  v733 = *((_DWORD *)v244 + 34);
  v246 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v245 + 272))(v245, &v731, __p);
  if (v732)
    llvm::MetadataTracking::untrack();
  v247 = AGCLLVMBuilder::subrangeVector((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32), v246, 0, v645, 1);
  v248 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 400);
  v249 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v248 + 680))(v248);
  v250 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v728 = *(_OWORD *)(v250 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v250 + 40));
  v730 = *((_DWORD *)v250 + 34);
  AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromFormat((uint64_t)&v770, v249, &v728, (AGCLLVMGen3TargetLowerer *)v655, v624, (v650[8] >> 8) & 0xF, HIWORD(v650[8]) & 0x1FF, v247, (uint64_t)v678, (uint64_t)v140, 0);
  if (v729)
    llvm::MetadataTracking::untrack();
  if ((_QWORD)v770)
  {
    v252 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32;
    v725 = v770;
    v726 = v771;
    if (v771)
      llvm::MetadataTracking::track();
    v727 = v772;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v725, v252 + 8);
    if (v726)
      llvm::MetadataTracking::untrack();
  }
  if (v771)
    llvm::MetadataTracking::untrack();
  v685 = (AGCLLVMBuilder *)v247;
  if ((*((_BYTE *)v639 + 2) & 4) != 0)
    v626 = (llvm::Value *)llvm::ConstantInt::get();
  else
    v626 = 0;
  v253 = 0;
  v638 = (char *)a1 + 8;
  v630 = (char *)a1 + 152;
  v251.i32[0] = v624;
  v254 = (uint8x8_t)vcnt_s8(v251);
  v254.i16[0] = vaddlv_u8(v254);
  v647 = (v624 << 32) | ((unint64_t)v254.u32[0] << 48);
  v646 = (unsigned __int16)(v254.i16[0] - 2);
  while (2)
  {
    v255 = (llvm::Value *)llvm::ConstantInt::get();
    if (v693 == 7)
      v256 = v685;
    else
      v256 = 0;
    v642 = v253;
    if ((v253 & 1) != 0)
    {
      v257 = v239;
      v258 = *(llvm::BasicBlock **)&v640[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
      __p[0] = "downsample_loop";
      LOWORD(v736) = 259;
      v259 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v259);
      v260 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v621 = v259;
      *((_QWORD *)v260 + 11) = v259;
      *((_QWORD *)v260 + 12) = (char *)v259 + 40;
      v261 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v262 = *(llvm::Type **)((char *)a1 + v261 + 216);
      LOWORD(v736) = 257;
      v263 = llvm::IRBuilderBase::CreatePHI((AGCLLVMDriverShader *)((char *)a1 + v261 + 40), v262, 2, (const llvm::Twine *)__p);
      llvm::PHINode::addIncoming(v263, v255, v258);
      v625 = 0;
      if (v693 == 7)
      {
        v264 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
        LOWORD(v736) = 257;
        v625 = llvm::IRBuilderBase::CreatePHI(v264, v694, 2, (const llvm::Twine *)__p);
        llvm::PHINode::addIncoming(v625, v685, v258);
      }
      v239 = v257;
      v620 = v263;
      if ((*((_BYTE *)v257 + 2) & 4) != 0)
      {
        v265 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v266 = *(llvm::Type **)((char *)a1 + v265 + 208);
        LOWORD(v736) = 257;
        v267 = llvm::IRBuilderBase::CreatePHI((AGCLLVMDriverShader *)((char *)a1 + v265 + 40), v266, 2, (const llvm::Twine *)__p);
        llvm::PHINode::addIncoming(v267, v626, v258);
        v619 = v267;
        v626 = v267;
      }
      else
      {
        v619 = 0;
      }
      v255 = v263;
      v256 = v625;
    }
    else
    {
      v620 = 0;
      v621 = 0;
      v625 = 0;
      v619 = 0;
    }
    v658 = v255;
    if (v693 == 7)
    {
      v686 = v256;
      __p[0] = "extra_downsample";
      LOWORD(v736) = 259;
      v268 = v239;
      v269 = operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "extra_downsample.write";
      LOWORD(v736) = 259;
      v270 = operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "extra_downsample.end";
      LOWORD(v736) = 259;
      v271 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v272 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      LOWORD(v736) = 257;
      v273 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v272, 36, (llvm::CmpInst **)v255, v623, (uint64_t)__p);
      if ((*((_BYTE *)v268 + 2) & 4) != 0)
      {
        v274 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
        LOWORD(v736) = 257;
        v273 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v274, v273, v626, (const llvm::Twine *)__p);
      }
      v653 = v273;
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), (uint64_t)v273, v269, (uint64_t)v271);
      v275 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v275 + 11) = v269;
      *((_QWORD *)v275 + 12) = v269 + 40;
      v276 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v277 = (uint64_t)(v276 + 40);
      v278 = (AGCLLVMBuilder *)(v276 + 32);
      v279 = (llvm::Value *)llvm::ConstantFP::get();
      v280 = AGCLLVMBuilder::splat(v278, v645, v279);
      LOWORD(v736) = 257;
      FMul = llvm::IRBuilderBase::CreateFMul(v277, (uint64_t)v686, (uint64_t)v280, (uint64_t)__p);
      v282 = *(_QWORD *)&v651[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
      v283 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v282 + 680))(v282);
      v284 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v722 = *(_OWORD *)(v284 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v284 + 40));
      v724 = *((_DWORD *)v284 + 34);
      v285 = llvm::ConstantInt::get();
      v286 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v283 + 1568))(v283, &v722, FMul, v285);
      if (v723)
        llvm::MetadataTracking::untrack();
      v287 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
      LOWORD(v736) = 257;
      v288 = llvm::IRBuilderBase::CreateFAdd(v287, FMul, v286, (uint64_t)__p);
      v289 = *(_QWORD *)&v651[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
      v290 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v289 + 680))(v289);
      v291 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v719 = *(_OWORD *)(v291 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v291 + 40));
      v721 = *((_DWORD *)v291 + 34);
      v292 = llvm::ConstantInt::get();
      v293 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v290 + 1568))(v290, &v719, v288, v292);
      if (v720)
        llvm::MetadataTracking::untrack();
      v294 = (uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40;
      LOWORD(v736) = 257;
      v295 = llvm::IRBuilderBase::CreateFAdd(v294, v288, v293, (uint64_t)__p);
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v618, v270, (uint64_t)v271);
      v296 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v296 + 11) = v270;
      *((_QWORD *)v296 + 12) = v270 + 40;
      v297 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      if ((v642 & 1) != 0)
      {
        v298 = (AGCLLVMDriverShader *)((char *)a1 + v297 + 40);
        v299 = (llvm::Value *)v792[0];
        v300 = *(_QWORD *)&v659[v297 + 32];
        LOWORD(v736) = 257;
        v301 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v298, 39, (uint64_t)v255, v300, (uint64_t)__p);
        v773 = 257;
        LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v298, v299, v301, (const llvm::Twine *)&v770);
        v757 = 257;
        v303 = llvm::IRBuilderBase::CreateSub(v298, v299, LShr, (const llvm::Twine *)v756);
      }
      else
      {
        v303 = llvm::ConstantInt::get();
      }
      v305 = (llvm::Value *)v303;
      v306 = (llvm::Value *)llvm::UndefValue::get();
      v307 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v308 = (llvm::Value *)v793;
      v309 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v736) = 257;
      v310 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v307, v308, v309, (const llvm::Twine *)__p);
      v773 = 257;
      v311 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v307, v310, v305, (const llvm::Twine *)&v770);
      v757 = 257;
      v312 = (llvm::Value *)llvm::ConstantInt::get();
      v313 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v307, v306, v311, v312, (const llvm::Twine *)v756);
      v314 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v315 = (llvm::Value *)v794;
      v316 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v736) = 257;
      v317 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v314, v315, v316, (const llvm::Twine *)__p);
      v773 = 257;
      v318 = (llvm::Value *)llvm::ConstantInt::get();
      v319 = llvm::IRBuilderBase::CreateInsertElement(v314, v313, v317, v318, (const llvm::Twine *)&v770);
      v320 = *(_QWORD *)&v651[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
      v321 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v320 + 680))(v320);
      v322 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v716 = *(_OWORD *)(v322 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v322 + 40));
      v718 = *((_DWORD *)v322 + 34);
      AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromFormat((uint64_t)__p, v321, &v716, (AGCLLVMGen3TargetLowerer *)v655, v624, (v650[8] >> 8) & 0xF, HIWORD(v650[8]) & 0x1FF, v295, v648, v649, v319);
      if (v717)
        llvm::MetadataTracking::untrack();
      if (__p[0])
      {
        v323 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v713 = *(_OWORD *)__p;
        v714 = *(_QWORD *)v735;
        if (*(_QWORD *)v735)
          llvm::MetadataTracking::track();
        v715 = *(_DWORD *)&v735[8];
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v713, (uint64_t)&v638[v323 + 32]);
        if (v714)
          llvm::MetadataTracking::untrack();
      }
      llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v271);
      v324 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v324 + 11) = v271;
      *((_QWORD *)v324 + 12) = (char *)v271 + 40;
      if (*(_QWORD *)v735)
        llvm::MetadataTracking::untrack();
      v304 = 2;
    }
    else
    {
      v653 = 0;
      v304 = 1;
    }
    v662 = v304;
    AGCLLVMObject::buildWGBarrier((uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)v788, 2);
    v325 = 0;
    do
    {
      v326 = "write_image_block_extra";
      if (!v325)
        v326 = "write_image_block";
      v327 = 1;
      BYTE1(v736) = 1;
      if (*v326)
      {
        __p[0] = (void *)v326;
        v328 = 3;
      }
      else
      {
        v328 = 1;
      }
      LOBYTE(v736) = v328;
      v329 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v330 = "write_image_block_extra.end";
      if (!v325)
        v330 = "write_image_block.end";
      BYTE1(v736) = 1;
      if (*v330)
      {
        __p[0] = (void *)v330;
        v327 = 3;
      }
      LOBYTE(v736) = v327;
      v331 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v332 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v333 = (uint64_t *)(v332 + 40);
      v334 = (uint64_t)v631;
      v679 = v325;
      if (v325)
      {
        LOWORD(v736) = 257;
        v334 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v332 + 40), v631, v653, (const llvm::Twine *)__p);
      }
      llvm::IRBuilderBase::CreateCondBr(v333, v334, (uint64_t)v329, (uint64_t)v331);
      v335 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v335 + 11) = v331;
      *((_QWORD *)v335 + 12) = (char *)v331 + 40;
      v668 = (llvm::BasicBlock *)((char *)v331 + 40);
      RetVoid = (llvm::Instruction *)llvm::IRBuilderBase::CreateRetVoid((AGCLLVMDriverShader *)((char *)a1
                                                                                              + *(_QWORD *)(*(_QWORD *)a1 - 24)
                                                                                              + 40));
      v336 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v336 + 11) = v329;
      *((_QWORD *)v336 + 12) = (char *)v329 + 40;
      v673 = v331;
      llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v331);
      v337 = (uint64_t)&v638[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v329);
      llvm::IRBuilderBase::SetInsertPoint(v337, (uint64_t)v329, FirstInsertionPt);
      v687 = (AGCLLVMBuilder *)llvm::UndefValue::get();
      v339 = (llvm::Value *)llvm::UndefValue::get();
      v340 = 0;
      v341 = 1;
      do
      {
        v342 = v341;
        v343 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v344 = (llvm::Value *)v791[v340];
        v345 = *((_QWORD *)v343 + 29);
        LOWORD(v736) = 257;
        v346 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v343 + 40), 39, (uint64_t)v658, v345, (uint64_t)__p);
        v773 = 257;
        v347 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(v343 + 40), v344, v346, (const llvm::Twine *)&v770);
        v757 = 257;
        v348 = (llvm::Value *)llvm::ConstantInt::get();
        v687 = (AGCLLVMBuilder *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v343 + 40), v687, v347, v348, (const llvm::Twine *)v756);
        v349 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v350 = (AGCLLVMDriverShader *)((char *)a1 + v349 + 40);
        v351 = (llvm::Value *)v790[v340];
        v352 = *(_QWORD *)&v659[v349 + 32];
        LOWORD(v736) = 257;
        v353 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v350, 39, (uint64_t)v658, v352, (uint64_t)__p);
        v773 = 257;
        Select = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v350, v351, v353, (const llvm::Twine *)&v770);
        if (v693 != 7)
        {
          v355 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
          v356 = llvm::ConstantInt::get();
          LOWORD(v736) = 257;
          llvm::IRBuilderBase::CreateICmp(v355, 32, Select, v356, (uint64_t)__p);
          llvm::ConstantInt::get();
          v773 = 257;
          Select = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSelect();
        }
        v357 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        LOWORD(v736) = 257;
        v358 = (llvm::IRBuilderBase *)(v357 + 40);
        v359 = (llvm::Value *)llvm::ConstantInt::get();
        v339 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v358, v339, (llvm::Value *)Select, v359, (const llvm::Twine *)__p);
        v341 = 0;
        v340 = 1;
      }
      while ((v342 & 1) != 0);
      if ((v642 & 1) != 0)
      {
        v360 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
        v361 = (llvm::Value *)v792[0];
        v362 = (llvm::Value *)llvm::ConstantInt::get();
        LOWORD(v736) = 257;
        v363 = v658;
        v364 = llvm::IRBuilderBase::CreateSub(v360, v658, v362, (const llvm::Twine *)__p);
        v365 = *(_QWORD *)&v659[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
        v773 = 257;
        v366 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v360, 39, v364, v365, (uint64_t)&v770);
        v757 = 257;
        v367 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v360, v361, v366, (const llvm::Twine *)v756);
        v712 = 257;
        v368 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v360, v361, v367, (const llvm::Twine *)v711);
      }
      else
      {
        v368 = (llvm::Value *)llvm::ConstantInt::get();
        v363 = v658;
      }
      v369 = (llvm::Value *)llvm::UndefValue::get();
      v370 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      LOWORD(v736) = 257;
      v371 = (llvm::IRBuilderBase *)(v370 + 40);
      v372 = (llvm::Value *)llvm::ConstantInt::get();
      v373 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v371, v369, v368, v372, (const llvm::Twine *)__p);
      v374 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v375 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v736) = 257;
      v376 = (llvm::Value *)llvm::ConstantInt::get();
      v377 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v374 + 40), v373, v375, v376, (const llvm::Twine *)__p);
      v378 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      LOWORD(v736) = 257;
      v379 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v378, v636, v363, (const llvm::Twine *)__p);
      if (v637)
      {
        v380 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
        LOWORD(v736) = 257;
        v379 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v380, Cast, v379, (const llvm::Twine *)__p);
      }
      __p[0] = (void *)0x100000008;
      *(_QWORD *)v735 = 0;
      *(_DWORD *)&v735[7] = 0;
      v736 = 0u;
      v737 = 0u;
      v738 = 0u;
      v739 = 0u;
      v740 = 0;
      v741 = 0u;
      v742 = 0u;
      v743 = 0u;
      v744 = 0;
      LODWORD(__p[1]) = 10;
      v745 = 4;
      v751 = 0;
      v752 = 0;
      memset(v746, 0, 44);
      v747 = 0;
      v748 = 0;
      v750 = 0;
      v749 = 0;
      v753 = 1;
      v754 = 0;
      v755 = 0;
      AGCLLVMDriverShader::setImageWriteSampleArgs(a1, (uint64_t)__p, v634, v633);
      if (v642 | v325)
        v381 = 0;
      else
        v381 = v693 == 7;
      HIDWORD(__p[1]) = v655;
      v382 = v632;
      if (v381)
        v382 = v635;
      *(_QWORD *)&v741 = v382;
      v745 = 1;
      v383 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v384 = *(_QWORD *)&v659[v383 + 32];
      v773 = 257;
      v746[0] = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + v383 + 40, 39, (uint64_t)v379, v384, (uint64_t)&v770);
      *(_QWORD *)&v743 = v687;
      if ((*((_BYTE *)v639 + 2) & 4) != 0)
        v744 = v628;
      *((_QWORD *)&v741 + 1) = llvm::ConstantInt::get();
      *(_QWORD *)&v742 = v377;
      *((_QWORD *)&v742 + 1) = v339;
      v385 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v386 = *((_QWORD *)v385 + 50);
      v708 = *(_OWORD *)(v385 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v385 + 40));
      v710 = *((_DWORD *)v385 + 34);
      (*(void (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v386 + 272))(v386, &v708, __p);
      if (v709)
        llvm::MetadataTracking::untrack();
      v387 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v387 + 11) = v673;
      *((_QWORD *)v387 + 12) = v668;
      llvm::Instruction::eraseFromParent(RetVoid);
      v388 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v389 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v736) = 257;
      v658 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v388, v658, v389, (const llvm::Twine *)__p);
      ++v325;
      v390 = v671 & 0xF;
    }
    while (v679 + 1 != v662);
    v391 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    LOWORD(v736) = 257;
    v392 = llvm::IRBuilderBase::CreateICmp(v391, 37, (llvm::CmpInst **)v658, v623, (uint64_t)__p);
    v393 = v392;
    if ((*((_BYTE *)v639 + 2) & 4) != 0)
    {
      __p[0] = "downsample_loop.continue";
      LOWORD(v736) = 259;
      v395 = operator new();
      llvm::BasicBlock::BasicBlock();
      v397 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v398 = (AGCLLVMDriverShader *)((char *)a1 + v397 + 40);
      v399 = *(llvm::BasicBlock **)((char *)a1 + v397 + 88);
      v400 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v736) = 257;
      v401 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v398, v628, v400, (const llvm::Twine *)__p);
      llvm::PHINode::addIncoming(v628, v401, v399);
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v393, v395, v617);
    }
    else
    {
      __p[0] = "downsample_loop.level.end";
      v688 = (AGCLLVMBuilder *)v392;
      LOWORD(v736) = 259;
      v394 = operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "downsample_loop.level.continue";
      LOWORD(v736) = 259;
      v395 = operator new();
      llvm::BasicBlock::BasicBlock();
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), (uint64_t)v688, v395, v394);
      v396 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v396 + 11) = v394;
      *((_QWORD *)v396 + 12) = v394 + 40;
      llvm::IRBuilderBase::CreateRetVoid((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40));
    }
    v402 = 0;
    v403 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *((_QWORD *)v403 + 11) = v395;
    *((_QWORD *)v403 + 12) = v395 + 40;
    v787 = 0;
    v786 = 0;
    v404 = 1;
    do
    {
      v405 = v404;
      v406 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v407 = (AGCLLVMDriverShader *)((char *)a1 + v406 + 40);
      v408 = (llvm::Value *)v789[v402];
      v409 = *(_QWORD *)&v659[v406 + 32];
      LOWORD(v736) = 257;
      v410 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v407, 39, (uint64_t)v658, v409, (uint64_t)__p);
      v773 = 257;
      v411 = llvm::IRBuilderBase::CreateLShr(v407, v408, v410, (const llvm::Twine *)&v770);
      *(&v786 + v402) = v411;
      if (v693 != 7)
      {
        v412 = (llvm::CmpInst **)v411;
        v413 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
        v414 = llvm::ConstantInt::get();
        LOWORD(v736) = 257;
        llvm::IRBuilderBase::CreateICmp(v413, 32, v412, v414, (uint64_t)__p);
        llvm::ConstantInt::get();
        v773 = 257;
        *(&v786 + v402) = llvm::IRBuilderBase::CreateSelect();
      }
      v404 = 0;
      v402 = 1;
    }
    while ((v405 & 1) != 0);
    v415 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    LOWORD(v736) = 257;
    v416 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v415, 36, v793, v786, (uint64_t)__p);
    v417 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v773 = 257;
    v418 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v417, 36, v794, v787, (uint64_t)&v770);
    v757 = 257;
    v419 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v415, v416, v418, (const llvm::Twine *)v756);
    v420 = v419;
    if ((*((_BYTE *)v639 + 2) & 4) != 0)
    {
      v425 = *(llvm::BasicBlock **)&v640[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
      v626 = (llvm::Value *)v419;
      goto LABEL_141;
    }
    __p[0] = "downsample_loop.bounds.end";
    LOWORD(v736) = 259;
    v421 = operator new();
    llvm::BasicBlock::BasicBlock();
    __p[0] = "downsample_loop.bounds.continue";
    LOWORD(v736) = 259;
    v422 = operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v420, v422, v421);
    v423 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *((_QWORD *)v423 + 11) = v421;
    *((_QWORD *)v423 + 12) = v421 + 40;
    llvm::IRBuilderBase::CreateRetVoid((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40));
    v643 = 0;
    v424 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    *((_QWORD *)v424 + 11) = v422;
    *((_QWORD *)v424 + 12) = v422 + 40;
    v425 = *(llvm::BasicBlock **)&v640[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
    if ((*((_BYTE *)v639 + 2) & 4) != 0)
    {
LABEL_141:
      __p[0] = "downsample";
      LOWORD(v736) = 259;
      v426 = operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "downsample.end";
      LOWORD(v736) = 259;
      v427 = operator new();
      llvm::BasicBlock::BasicBlock();
      v643 = (llvm::BasicBlock *)v427;
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), (uint64_t)v626, v426, v427);
      v428 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v428 + 11) = v426;
      *((_QWORD *)v428 + 12) = v426 + 40;
    }
    v622 = v425;
    v429 = 0;
    v785 = 0;
    v784 = 0;
    v783[1] = 0;
    v783[0] = 0;
    v430 = 1;
    v782 = 0;
    v781 = 0;
    do
    {
      v431 = v430;
      v432 = *(_QWORD *)a1;
      if (v390 == 7)
        goto LABEL_145;
      v433 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(v432 - 24) + 40);
      v434 = (llvm::Value *)v789[v429];
      v435 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v736) = 257;
      v436 = llvm::IRBuilderBase::CreateSub(v433, v658, v435, (const llvm::Twine *)__p);
      v437 = *(_QWORD *)&v659[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
      v773 = 257;
      v438 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v433, 39, v436, v437, (uint64_t)&v770);
      v757 = 257;
      v439 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateLShr(v433, v434, v438, (const llvm::Twine *)v756);
      v440 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v441 = llvm::ConstantInt::get();
      LOWORD(v736) = 257;
      llvm::IRBuilderBase::CreateICmp(v440, 32, v439, v441, (uint64_t)__p);
      llvm::ConstantInt::get();
      v773 = 257;
      v442 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSelect();
      v443 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v444 = llvm::ConstantInt::get();
      LOWORD(v736) = 257;
      v445 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v443, 34, v442, v444, (uint64_t)__p);
      *(&v784 + v429) = v445;
      v432 = *(_QWORD *)a1;
      if ((v671 & 0xE) == 6)
      {
LABEL_145:
        v446 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(v432 - 24) + 40);
        v447 = (llvm::Value *)(&v793)[v429];
        v448 = (llvm::Value *)llvm::ConstantInt::get();
        LOWORD(v736) = 257;
        v783[v429] = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v446, v447, v448, (const llvm::Twine *)__p);
        if (v390 == 7)
        {
          v449 = llvm::ConstantFP::get();
        }
        else
        {
          llvm::ConstantFP::get();
          llvm::ConstantFP::get();
          LOWORD(v736) = 257;
          v449 = llvm::IRBuilderBase::CreateSelect();
        }
        *(&v781 + v429) = (llvm::BasicBlock *)v449;
      }
      else
      {
        v450 = (uint64_t)v445;
        v451 = *(AGCLLVMBuilder **)&v640[*(_QWORD *)(v432 - 24) + 40];
        v689 = v431;
        __p[0] = "sample_coord";
        LOWORD(v736) = 259;
        v680 = v451;
        v669 = (llvm::BasicBlock *)v442;
        v452 = (llvm::BasicBlock *)operator new();
        llvm::BasicBlock::BasicBlock();
        __p[0] = "sample_coord.end";
        LOWORD(v736) = 259;
        v453 = (llvm::BasicBlock *)operator new();
        llvm::BasicBlock::BasicBlock();
        llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v450, (uint64_t)v452, (uint64_t)v453);
        v454 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        *((_QWORD *)v454 + 11) = v452;
        *((_QWORD *)v454 + 12) = (char *)v452 + 40;
        v455 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v456 = (AGCLLVMDriverShader *)((char *)a1 + v455 + 40);
        v457 = *(llvm::Type **)&v630[v455 + 32];
        LOWORD(v736) = 257;
        v458 = llvm::IRBuilderBase::CreateUIToFP(v456, v669, v457, (const llvm::Twine *)__p);
        v459 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v460 = (llvm::Value *)*(&v786 + v429);
        v461 = *(llvm::Type **)&v630[v459 + 32];
        v773 = 257;
        v462 = llvm::IRBuilderBase::CreateUIToFP((AGCLLVMDriverShader *)((char *)a1 + v459 + 40), v460, v461, (const llvm::Twine *)&v770);
        v757 = 257;
        v463 = llvm::IRBuilderBase::CreateFDiv((uint64_t)v456, v458, v462, (uint64_t)v756);
        v464 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v465 = (AGCLLVMDriverShader *)((char *)a1 + v464 + 40);
        v466 = (llvm::Value *)(&v793)[v429];
        v467 = *(llvm::Type **)&v630[v464 + 32];
        LOWORD(v736) = 257;
        v468 = llvm::IRBuilderBase::CreateUIToFP(v465, v466, v467, (const llvm::Twine *)__p);
        v469 = llvm::ConstantFP::get();
        v773 = 257;
        v470 = llvm::IRBuilderBase::CreateFAdd((uint64_t)v465, v468, v469, (uint64_t)&v770);
        v757 = 257;
        v471 = llvm::IRBuilderBase::CreateFMul((uint64_t)v465, v470, v463, (uint64_t)v756);
        v472 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
        v473 = llvm::ConstantFP::get();
        LOWORD(v736) = 257;
        FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)v472, v471, v473, (uint64_t)__p);
        v475 = *(llvm::Type **)&v659[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
        v773 = 257;
        FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v472, FSub, v475, (const llvm::Twine *)&v770);
        v477 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v478 = (AGCLLVMDriverShader *)((char *)a1 + v477 + 40);
        v479 = *(llvm::Type **)&v630[v477 + 32];
        LOWORD(v736) = 257;
        v480 = llvm::IRBuilderBase::CreateUIToFP(v478, FPToUI, v479, (const llvm::Twine *)__p);
        v481 = llvm::ConstantFP::get();
        v773 = 257;
        v482 = llvm::IRBuilderBase::CreateFAdd((uint64_t)v478, v480, v481, (uint64_t)&v770);
        v757 = 257;
        v483 = llvm::IRBuilderBase::CreateFSub((uint64_t)v478, v471, v482, (uint64_t)v756);
        llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v453);
        v484 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        *((_QWORD *)v484 + 11) = v453;
        *((_QWORD *)v484 + 12) = (char *)v453 + 40;
        v485 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v486 = *(llvm::Type **)&v659[v485 + 32];
        LOWORD(v736) = 257;
        v487 = llvm::IRBuilderBase::CreatePHI((AGCLLVMDriverShader *)((char *)a1 + v485 + 40), v486, 2, (const llvm::Twine *)__p);
        v488 = (llvm::Value *)llvm::ConstantInt::get();
        llvm::PHINode::addIncoming(v487, v488, v680);
        llvm::PHINode::addIncoming(v487, FPToUI, v452);
        v489 = *(_QWORD *)(*(_QWORD *)a1 - 24);
        v490 = *(llvm::Type **)&v630[v489 + 32];
        LOWORD(v736) = 257;
        v491 = llvm::IRBuilderBase::CreatePHI((AGCLLVMDriverShader *)((char *)a1 + v489 + 40), v490, 2, (const llvm::Twine *)__p);
        v492 = (llvm::Value *)llvm::ConstantFP::get();
        llvm::PHINode::addIncoming(v491, v492, v680);
        v493 = (llvm::Value *)v483;
        v431 = v689;
        v390 = v671 & 0xF;
        llvm::PHINode::addIncoming(v491, v493, v452);
        v783[v429] = v487;
        *(&v781 + v429) = v491;
      }
      v430 = 0;
      v429 = 1;
    }
    while ((v431 & 1) != 0);
    if ((v642 & 1) != 0)
    {
      v494 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      v495 = (llvm::Value *)v792[0];
      v496 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v736) = 257;
      v497 = llvm::IRBuilderBase::CreateSub(v494, v658, v496, (const llvm::Twine *)__p);
      v498 = *(_QWORD *)&v659[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
      v773 = 257;
      v499 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v494, 39, v497, v498, (uint64_t)&v770);
      v757 = 257;
      v500 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v494, v495, v499, (const llvm::Twine *)v756);
      v712 = 257;
      v501 = llvm::IRBuilderBase::CreateSub(v494, v495, v500, (const llvm::Twine *)v711);
    }
    else
    {
      v501 = llvm::ConstantInt::get();
    }
    v502 = (llvm::Value *)v501;
    v503 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    LOWORD(v736) = 257;
    v504 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v503, v783[0], v502, (const llvm::Twine *)__p);
    v505 = 0;
    v506 = 0;
    v783[0] = v504;
    do
    {
      v507 = 0;
      v508 = 0;
      v641 = v505;
      v654 = v506;
      do
      {
        v756[0] = v508;
        v756[1] = v506;
        v509 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v690 = v507;
        v670 = (llvm::BasicBlock *)*((_QWORD *)v509 + 11);
        v681 = (AGCLLVMBuilder *)v508;
        if (v390 == 7)
        {
LABEL_166:
          v663 = 0;
          v666 = 0;
          v674 = 0;
          goto LABEL_167;
        }
        if (v506 == 0 || (v507 & 1) == 0)
        {
          if ((v507 & 1) != 0)
          {
            v510 = v784;
            if (!v784)
              goto LABEL_166;
          }
          else
          {
            if (!(_BYTE)v506)
              goto LABEL_166;
            v510 = v785;
            if (!v785)
              goto LABEL_166;
          }
        }
        else
        {
          LOWORD(v736) = 257;
          v510 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v509 + 40), v784, v785, (const llvm::Twine *)__p);
          if (!v510)
            goto LABEL_166;
        }
        __p[0] = "read_sample";
        LOWORD(v736) = 259;
        v511 = operator new();
        llvm::BasicBlock::BasicBlock();
        __p[0] = "read_sample.end";
        LOWORD(v736) = 259;
        v512 = operator new();
        llvm::BasicBlock::BasicBlock();
        v674 = v510;
        v663 = (llvm::BasicBlock *)v512;
        llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), (uint64_t)v510, v511, v512);
        v513 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v666 = (llvm::BasicBlock *)v511;
        *((_QWORD *)v513 + 11) = v511;
        *((_QWORD *)v513 + 12) = v511 + 40;
LABEL_167:
        v514 = (llvm::Value *)llvm::UndefValue::get();
        v515 = 0;
        v516 = 1;
        do
        {
          v517 = v516;
          v518 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
          v519 = v783[v515];
          v520 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v736) = 257;
          v521 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v518, v519, v520, (const llvm::Twine *)__p);
          v773 = 257;
          v522 = (llvm::Value *)llvm::ConstantInt::get();
          v514 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v518, v514, v521, v522, (const llvm::Twine *)&v770);
          v516 = 0;
          v515 = 1;
        }
        while ((v517 & 1) != 0);
        v523 = *(_QWORD *)&v651[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
        v506 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v523 + 680))(v523);
        v524 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
        v705 = *(_OWORD *)(v524 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v524 + 40));
        v525 = *((_DWORD *)v524 + 34);
        v707 = v525;
        v526 = v650[8];
        *(_OWORD *)__p = v705;
        *(_QWORD *)v735 = v706;
        if (v706)
        {
          llvm::MetadataTracking::track();
          v525 = v707;
        }
        *(_DWORD *)&v735[8] = v525;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)__p, v506 + 8);
        if (*(_QWORD *)v735)
          llvm::MetadataTracking::untrack();
        v527 = (uint64_t)v694;
        v528 = *((unsigned __int8 *)v694 + 8);
        if (v528 == 15)
        {
          v529 = (uint64_t *)*((_QWORD *)v694 + 2);
          v527 = *v529;
          v528 = *(_DWORD *)(*v529 + 8);
        }
        USCFormatFromState = AGCLLVMGen3TargetLowerer::getUSCFormatFromState((AGCLLVMGen3TargetLowerer *)v655, 0);
        if ((v528 & 0xFE) == 0x12)
          v527 = **(_QWORD **)(v527 + 16);
        if ((*(_DWORD *)(v527 + 8) & 0xFFFFF0FF) == 0xD)
          v527 = *(_QWORD *)(v506 + 192);
        if (v646 <= 2)
          v527 = llvm::FixedVectorType::get();
        *(_QWORD *)&v770 = v647 | (v655 << 16) | USCFormatFromState;
        *((_QWORD *)&v770 + 1) = v527;
        v531 = llvm::ConstantInt::get();
        LOBYTE(v616) = 0;
        v532 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD, uint64_t, llvm::Type *, uint64_t, uint64_t, llvm::Value *, int))(*(_QWORD *)v506 + 1600))(v506, &v770, (v526 >> 8) & 0xF, v531, v694, v648, v649, v514, v616);
        LOBYTE(v506) = v654;
        v533 = (llvm::Value **)&v780[v654] + (_QWORD)v681;
        *v533 = v532;
        if (v706)
          llvm::MetadataTracking::untrack();
        NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction(v532);
        v535 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
        if (NextNonDebugInstruction)
        {
          v536 = (llvm::Instruction *)llvm::Instruction::getNextNonDebugInstruction(v532);
          llvm::IRBuilderBase::SetInsertPoint(v535, v536);
          if (!v674)
            goto LABEL_186;
LABEL_185:
          llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v663);
          v537 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
          *((_QWORD *)v537 + 11) = v663;
          *((_QWORD *)v537 + 12) = (char *)v663 + 40;
          v538 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
          LOWORD(v736) = 257;
          v539 = llvm::IRBuilderBase::CreatePHI(v538, v694, 2, (const llvm::Twine *)__p);
          v540 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32);
          v541 = (llvm::Value *)llvm::ConstantFP::get();
          v542 = AGCLLVMBuilder::splat(v540, v645, v541);
          llvm::PHINode::addIncoming(v539, v542, v670);
          llvm::PHINode::addIncoming(v539, *v533, v666);
          *v533 = v539;
          goto LABEL_186;
        }
        v543 = *((_QWORD *)v532 + 5);
        *(_QWORD *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 88) = v543;
        *((_QWORD *)v535 + 7) = v543 + 40;
        if (v674)
          goto LABEL_185;
LABEL_186:
        v507 = 1;
        v508 = 1;
        v390 = v671 & 0xF;
      }
      while ((v690 & 1) == 0);
      v505 = 1;
      v506 = 1;
    }
    while ((v641 & 1) == 0);
    v544 = 0;
    v779 = 0;
    v778 = 0;
    v545 = 1;
    v675 = v781;
    do
    {
      v682 = (AGCLLVMBuilder *)v544;
      v691 = v545;
      v546 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v547 = (llvm::IRBuilderBase *)(v546 + 40);
      v548 = (uint64_t *)&v780[v544];
      v549 = *v548;
      v550 = (AGCLLVMBuilder *)(v546 + 32);
      v551 = llvm::ConstantFP::get();
      LOWORD(v736) = 257;
      v552 = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)v547, v551, (uint64_t)v675, (uint64_t)__p);
      v773 = 257;
      FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v547, v552, v644, (const llvm::Twine *)&v770);
      v554 = AGCLLVMBuilder::splat(v550, v645, FPExt);
      v757 = 257;
      v555 = (llvm::Instruction *)llvm::IRBuilderBase::CreateFMul((uint64_t)v547, v549, (uint64_t)v554, (uint64_t)v756);
      llvm::Instruction::getFastMathFlags(v555);
      llvm::Instruction::copyFastMathFlags();
      v556 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v557 = (uint64_t)(v556 + 40);
      v558 = v548[1];
      v559 = (AGCLLVMBuilder *)(v556 + 32);
      v712 = 257;
      v560 = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(v556 + 40), v675, v644, (const llvm::Twine *)v711);
      v561 = AGCLLVMBuilder::splat(v559, v645, v560);
      v704 = 257;
      v562 = (llvm::Instruction *)llvm::IRBuilderBase::CreateFMul(v557, v558, (uint64_t)v561, (uint64_t)v703);
      llvm::Instruction::getFastMathFlags(v562);
      llvm::Instruction::copyFastMathFlags();
      v702 = 257;
      v563 = (llvm::Instruction *)llvm::IRBuilderBase::CreateFAdd((uint64_t)v547, (uint64_t)v555, (uint64_t)v562, (uint64_t)v701);
      llvm::Instruction::getFastMathFlags(v563);
      llvm::Instruction::copyFastMathFlags();
      v545 = 0;
      *(&v778 + (_QWORD)v682) = (uint64_t)v563;
      v544 = 1;
    }
    while ((v691 & 1) != 0);
    v564 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v565 = (llvm::IRBuilderBase *)(v564 + 40);
    v566 = v778;
    v567 = (AGCLLVMBuilder *)(v564 + 32);
    v568 = llvm::ConstantFP::get();
    v569 = v782;
    LOWORD(v736) = 257;
    v570 = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)v565, v568, (uint64_t)v782, (uint64_t)__p);
    v773 = 257;
    v571 = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v565, v570, v644, (const llvm::Twine *)&v770);
    v572 = AGCLLVMBuilder::splat(v567, v645, v571);
    v757 = 257;
    v573 = (llvm::Instruction *)llvm::IRBuilderBase::CreateFMul((uint64_t)v565, v566, (uint64_t)v572, (uint64_t)v756);
    llvm::Instruction::getFastMathFlags(v573);
    llvm::Instruction::copyFastMathFlags();
    v574 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v575 = (uint64_t)(v574 + 40);
    v576 = v779;
    v577 = (AGCLLVMBuilder *)(v574 + 32);
    v712 = 257;
    v578 = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(v574 + 40), v569, v644, (const llvm::Twine *)v711);
    v579 = AGCLLVMBuilder::splat(v577, v645, v578);
    v704 = 257;
    v580 = (llvm::Instruction *)llvm::IRBuilderBase::CreateFMul(v575, v576, (uint64_t)v579, (uint64_t)v703);
    llvm::Instruction::getFastMathFlags(v580);
    llvm::Instruction::copyFastMathFlags();
    v702 = 257;
    v581 = (llvm::Instruction *)llvm::IRBuilderBase::CreateFAdd((uint64_t)v565, (uint64_t)v573, (uint64_t)v580, (uint64_t)v701);
    llvm::Instruction::getFastMathFlags(v581);
    llvm::Instruction::copyFastMathFlags();
    v239 = v639;
    if ((*((_BYTE *)v639 + 2) & 4) != 0)
    {
      v582 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      v583 = (llvm::BasicBlock *)*((_QWORD *)v582 + 11);
      llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(v582 + 40), v643);
      v584 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v584 + 11) = v643;
      *((_QWORD *)v584 + 12) = (char *)v643 + 40;
      v585 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
      LOWORD(v736) = 257;
      v586 = llvm::IRBuilderBase::CreatePHI(v585, v694, 2, (const llvm::Twine *)__p);
      v587 = (llvm::Value *)llvm::UndefValue::get();
      llvm::PHINode::addIncoming(v586, v587, v622);
      llvm::PHINode::addIncoming(v586, v581, v583);
      v581 = v586;
    }
    if (!(v642 & 1 | (v693 == 7)))
      AGCLLVMObject::buildWGBarrier((uint64_t)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), (uint64_t)v788, 2);
    v685 = v581;
    if ((*((_BYTE *)v639 + 2) & 4) != 0)
    {
      __p[0] = "write";
      LOWORD(v736) = 259;
      v589 = operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "write.end";
      LOWORD(v736) = 259;
      v588 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), (uint64_t)v626, v589, (uint64_t)v588);
      v590 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v590 + 11) = v589;
      *((_QWORD *)v590 + 12) = v589 + 40;
    }
    else
    {
      v588 = 0;
    }
    v591 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    v592 = (llvm::Value *)v792[0];
    v593 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v736) = 257;
    v594 = llvm::IRBuilderBase::CreateSub(v591, v658, v593, (const llvm::Twine *)__p);
    v595 = *(_QWORD *)&v659[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
    v773 = 257;
    v596 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v591, 39, v594, v595, (uint64_t)&v770);
    v757 = 257;
    v597 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v591, v592, v596, (const llvm::Twine *)v756);
    v712 = 257;
    v598 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v591, v592, v597, (const llvm::Twine *)v711);
    v599 = (llvm::Value *)llvm::UndefValue::get();
    v600 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
    LOWORD(v736) = 257;
    v601 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v600, (llvm::Value *)v793, v598, (const llvm::Twine *)__p);
    v773 = 257;
    v602 = (llvm::Value *)llvm::ConstantInt::get();
    v603 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v600, v599, v601, v602, (const llvm::Twine *)&v770);
    v604 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v605 = (llvm::Value *)v794;
    LOWORD(v736) = 257;
    v606 = (llvm::IRBuilderBase *)(v604 + 40);
    v607 = (llvm::Value *)llvm::ConstantInt::get();
    v608 = llvm::IRBuilderBase::CreateInsertElement(v606, v603, v605, v607, (const llvm::Twine *)__p);
    v609 = *(_QWORD *)&v651[*(_QWORD *)(*(_QWORD *)a1 - 24) + 32];
    v610 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v609 + 680))(v609);
    v611 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v698 = *(_OWORD *)(v611 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v611 + 40));
    v700 = *((_DWORD *)v611 + 34);
    AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromFormat((uint64_t)__p, v610, &v698, (AGCLLVMGen3TargetLowerer *)v655, v624, (v650[8] >> 8) & 0xF, HIWORD(v650[8]) & 0x1FF, (uint64_t)v581, v648, v649, v608);
    if (v699)
      llvm::MetadataTracking::untrack();
    if (__p[0])
    {
      v612 = *(_QWORD *)(*(_QWORD *)a1 - 24);
      v695 = *(_OWORD *)__p;
      v696 = *(_QWORD *)v735;
      if (*(_QWORD *)v735)
        llvm::MetadataTracking::track();
      v697 = *(_DWORD *)&v735[8];
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v695, (uint64_t)&v638[v612 + 32]);
      if (v696)
        llvm::MetadataTracking::untrack();
    }
    if ((*((_BYTE *)v639 + 2) & 4) != 0)
    {
      llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v588);
      v613 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
      *((_QWORD *)v613 + 11) = v588;
      *((_QWORD *)v613 + 12) = (char *)v588 + 40;
    }
    if (*(_QWORD *)v735)
      llvm::MetadataTracking::untrack();
    if ((v642 & 1) == 0)
    {
      v253 = 1;
      continue;
    }
    break;
  }
  v614 = *(llvm::BasicBlock **)&v640[*(_QWORD *)(*(_QWORD *)a1 - 24) + 40];
  llvm::PHINode::addIncoming(v620, v658, v614);
  if (v693 == 7)
    llvm::PHINode::addIncoming(v625, v581, v614);
  if ((*((_BYTE *)v639 + 2) & 4) != 0)
    llvm::PHINode::addIncoming(v619, v626, v614);
  return llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40), v621);
}

llvm::GlobalVariable *AGCLLVMDriverShader::getWriteImageStateGlobal(AGCLLVMDriverShader *this)
{
  llvm::GlobalVariable *v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 400) + 1780))
    return 0;
  v1 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v4 = *((_QWORD *)v3 + 47);
  v5 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v3 + 32), v1);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v4, v5);
  return v1;
}

_QWORD *AGCLLVMDriverShader::setImageWriteSampleArgs(_QWORD *result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[32];
  __int16 v13;

  if (*(_DWORD *)(*(_QWORD *)((char *)result + *(_QWORD *)(*result - 24) + 400) + 1780))
  {
    v6 = result;
    result[7] |= 1uLL;
    v7 = llvm::ConstantInt::get();
    v8 = (uint64_t)v6 + *(_QWORD *)(*v6 - 24) + 40;
    v9 = llvm::PointerType::get();
    v13 = 257;
    *(_QWORD *)(a2 + 32) = llvm::IRBuilderBase::CreateCast(v8, 48, v7, v9, (uint64_t)v12);
    v10 = (uint64_t)v6 + *(_QWORD *)(*v6 - 24) + 40;
    v11 = llvm::PointerType::get();
    v13 = 257;
    result = (_QWORD *)llvm::IRBuilderBase::CreateCast(v10, 49, a4, v11, (uint64_t)v12);
    a3 = result;
  }
  *(_QWORD *)(a2 + 56) = a3;
  return result;
}

llvm::Value *AGCLLVMTextureFetchFragmentShader::buildUDivURem(AGCLLVMTextureFetchFragmentShader *this, llvm::Value *a2, llvm::Value *a3, llvm::Value **a4, llvm::Value **a5)
{
  llvm::IRBuilderBase *v9;
  llvm::IRBuilderBase *v10;
  llvm::Value *result;
  _BYTE v12[32];
  __int16 v13;

  v9 = (AGCLLVMTextureFetchFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v13 = 257;
  *a4 = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v9, a2, a3, (const llvm::Twine *)v12);
  v10 = (AGCLLVMTextureFetchFragmentShader *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 40);
  v13 = 257;
  result = (llvm::Value *)llvm::IRBuilderBase::CreateURem(v10, a2, a3, (const llvm::Twine *)v12);
  *a5 = result;
  return result;
}

uint64_t AGCLLVMTextureFetchFragmentShader::AGCLLVMTextureFetchFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3, _DWORD *a4, uint64_t a5, int a6)
{
  AGCLLVMFragmentShader *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t inserted;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::GlobalVariable *ImageStateGlobal;
  uint64_t TextureHeapGlobal;
  llvm::GlobalVariable *SamplerStateGlobal;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::IRBuilderBase *v34;
  llvm::Value *v35;
  llvm::Type *v36;
  llvm::IRBuilderBase *v37;
  llvm::Value *v38;
  llvm::Type *v39;
  llvm::GlobalVariable *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::GlobalVariable *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::Value *v51;
  llvm::Type *v52;
  llvm::Value *AlignedLoad;
  uint64_t v54;
  llvm::Value *v55;
  llvm::Type *v56;
  llvm::Value *Add;
  llvm::Value *v58;
  llvm::IRBuilderBase *v59;
  uint64_t v60;
  llvm::Value *v61;
  llvm::IRBuilderBase *v62;
  uint64_t v63;
  uint64_t *v64;
  llvm::Value *ICmp;
  uint64_t *v66;
  llvm::Value *v67;
  uint64_t *v68;
  llvm::Value *v69;
  uint64_t *v70;
  llvm::Value *v71;
  llvm::IRBuilderBase *v72;
  llvm::Value *v73;
  llvm::IRBuilderBase *v74;
  llvm::Value *v75;
  uint64_t v76;
  llvm::BasicBlock *v77;
  llvm::BasicBlock *v78;
  uint64_t v79;
  llvm::GlobalVariable *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  llvm::Value *v85;
  llvm::Type *v86;
  llvm::Value *GEP;
  llvm::BasicBlock *v88;
  llvm::Constant *v89;
  llvm::Type *v90;
  unsigned int v91;
  llvm::Value *Sub;
  uint64_t v93;
  uint64_t v94;
  llvm::Value *v95;
  llvm::IRBuilderBase *v96;
  llvm::IRBuilderBase *v97;
  llvm::GlobalVariable *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  llvm::Type *v104;
  llvm::Value *v105;
  llvm::IRBuilderBase *v106;
  llvm::Value *Mul;
  llvm::Value *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  llvm::IRBuilderBase *v115;
  llvm::Value *v116;
  llvm::Type *v117;
  llvm::Value *v118;
  llvm::IRBuilderBase *v119;
  llvm::Value *v120;
  llvm::Type *v121;
  llvm::Value *v122;
  llvm::IRBuilderBase *v123;
  llvm::Value *v124;
  llvm::IRBuilderBase *v125;
  llvm::Value *v126;
  llvm::GlobalVariable *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  llvm::GlobalVariable *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  llvm::Value *v138;
  llvm::Type *v139;
  llvm::Value *v140;
  llvm::IRBuilderBase *v141;
  llvm::Value *v142;
  llvm::Value *v143;
  llvm::IRBuilderBase *v144;
  llvm::Value *v145;
  llvm::Value *v146;
  llvm::Value *LShr;
  uint64_t *v148;
  llvm::Type *v149;
  llvm::Value *v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  llvm::IRBuilderBase *v154;
  llvm::Value *v155;
  llvm::Type *v156;
  llvm::Value *v157;
  llvm::IRBuilderBase *v158;
  llvm::Value *v159;
  llvm::Type *v160;
  llvm::Value *v161;
  uint64_t v162;
  llvm::Value *v163;
  uint64_t v164;
  llvm::Value *v165;
  llvm::IRBuilderBase *v166;
  llvm::Value *v167;
  llvm::Value *v168;
  llvm::IRBuilderBase *v169;
  llvm::Value *v170;
  llvm::IRBuilderBase *v171;
  llvm::IRBuilderBase *v172;
  llvm::GlobalVariable *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  llvm::GlobalVariable *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  llvm::Value *v183;
  llvm::IRBuilderBase *v184;
  llvm::IRBuilderBase *v185;
  uint64_t v186;
  llvm::Type *v187;
  llvm::Value *v188;
  llvm::IRBuilderBase *v189;
  llvm::Value *v190;
  llvm::Value *v191;
  llvm::IRBuilderBase *v192;
  llvm::Value *v193;
  llvm::Value *v194;
  llvm::Value *v195;
  uint64_t *v196;
  llvm::Type *v197;
  llvm::Value *v198;
  uint64_t v199;
  uint64_t v200;
  llvm::Value *v201;
  llvm::IRBuilderBase *v202;
  llvm::Value *v203;
  llvm::Value *Shl;
  llvm::IRBuilderBase *v205;
  uint64_t *v206;
  llvm::Value *v207;
  llvm::Value *v208;
  uint64_t v209;
  llvm::Type *v210;
  llvm::Value *NullValue;
  uint64_t v212;
  uint64_t FirstInsertionPt;
  llvm::IRBuilderBase *v214;
  llvm::User *PHI;
  AGCLLVMFragmentShader *v216;
  llvm::Type **v217;
  llvm::Value *v218;
  llvm::Type *v219;
  llvm::Value *v220;
  llvm::IRBuilderBase *v221;
  llvm::Value *v222;
  llvm::Value *v223;
  llvm::IRBuilderBase *v224;
  llvm::Value *v225;
  llvm::Value *v226;
  llvm::IRBuilderBase *v227;
  llvm::Type *v228;
  llvm::Value *v229;
  llvm::IRBuilderBase *v230;
  llvm::Value *v231;
  llvm::Value *v232;
  llvm::IRBuilderBase *v233;
  llvm::Value *v234;
  llvm::Value *v235;
  llvm::IRBuilderBase *v236;
  llvm::GlobalVariable *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  AGCLLVMBuilder *v243;
  uint64_t *v244;
  llvm::Value *v245;
  llvm::Type *v246;
  uint64_t v247;
  llvm::Value *v248;
  llvm::IRBuilderBase *v249;
  llvm::Value *v250;
  llvm::IRBuilderBase *v251;
  llvm::IRBuilderBase *v252;
  llvm::Value *v253;
  uint64_t v254;
  llvm::IRBuilderBase *v255;
  llvm::Value *v256;
  llvm::Value *InsertElement;
  uint64_t v258;
  llvm::Value *v259;
  llvm::IRBuilderBase *v260;
  llvm::Value *v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  llvm::Value *v268;
  unsigned int v269;
  uint64_t v270;
  llvm::Value *v271;
  llvm::IRBuilderBase *v272;
  llvm::Value *v273;
  llvm::Value *Element;
  unsigned int v276;
  llvm::Constant *v277;
  llvm::Value *v278;
  llvm::Value *v279;
  llvm::Value *v280;
  llvm::Value *v281;
  llvm::Value *v282;
  llvm::Value *v283;
  llvm::CmpInst **v284;
  llvm::Value *v285;
  uint64_t v286;
  llvm::GlobalVariable *v287;
  llvm::CmpInst **FPToUI;
  llvm::Value *v289;
  llvm::Type *v290;
  llvm::Type *v291;
  llvm::Value *v292[2];
  llvm::Value *v293[2];
  __int16 v294;
  llvm::Value *v295[2];
  uint64_t v296;
  int v297;
  void *__p;
  llvm::Type *v299;
  _BYTE v300[11];
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int16 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  __int128 v312;
  __int128 v313;
  int v314;
  llvm::Value *v315;
  uint64_t v316;
  uint64_t v317;
  char v318;
  __int16 v319;
  char v320;
  char v321;
  uint64_t v322;
  char v323;
  llvm::Value *v324;
  llvm::Value *v325;
  char v326[8];
  uint64_t v327;
  __int16 v328;

  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 704), a2, a3);
  AGCLLVMDriverFragmentShader::AGCLLVMDriverFragmentShader((uint64_t *)a1, (uint64_t *)off_1E7EBC320, (uint64_t)a2, (uint64_t)a4);
  *(_QWORD *)a1 = off_1E7EBC0B0;
  *(_QWORD *)(a1 + 704) = &unk_1E7EBC220;
  *(_QWORD *)(a1 + 736) = &unk_1E7EBC310;
  *(_QWORD *)(a1 + 72) = &unk_1E7EBC120;
  v11 = (AGCLLVMFragmentShader *)(a1 + 72);
  *(_QWORD *)(a1 + 688) = a5;
  *(_DWORD *)(a1 + 696) = a6;
  if (a5)
  {
    switch(*(_DWORD *)a5 & 0xF)
    {
      case 0:
        v12 = a1;
        v13 = (uint64_t)a4;
        v14 = (unsigned int *)a5;
        goto LABEL_5;
      case 1:
      case 2:
        v15 = *(_DWORD *)a5 >> 4;
        AGCLLVMTextureFetchFragmentShader::wrapperName((AGCLLVMTextureFetchFragmentShader *)a1, &__p);
        inserted = AGCLLVMBuilder::getOrInsertFunction<>();
        if ((v300[7] & 0x80000000) != 0)
          operator delete(__p);
        v17 = *(_WORD *)(inserted + 18) & 0xC00F;
        if (v15 < 2)
        {
          *(_WORD *)(inserted + 18) = v17 | 0x650;
        }
        else
        {
          *(_WORD *)(inserted + 18) = v17 | 0x680;
          llvm::Module::getOrInsertNamedMetadata();
          llvm::ConstantInt::get();
          __p = (void *)llvm::ValueAsMetadata::get();
          llvm::MDTuple::getImpl();
          llvm::NamedMDNode::addOperand();
        }
        __p = "entry";
        LOWORD(v301) = 259;
        operator new();
        v26 = llvm::BasicBlock::BasicBlock();
        v27 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        *(_QWORD *)(v27 + 88) = v26;
        *(_QWORD *)(v27 + 96) = v26 + 40;
        __p = "exit";
        LOWORD(v301) = 259;
        v28 = operator new();
        llvm::BasicBlock::BasicBlock();
        __p = "load";
        LOWORD(v301) = 259;
        v281 = (llvm::Value *)operator new();
        llvm::BasicBlock::BasicBlock();
        __p = "skip";
        LOWORD(v301) = 259;
        v29 = operator new();
        llvm::BasicBlock::BasicBlock();
        AGCLLVMDriverShader::getFormatInfo((uint64_t)&__p, (_QWORD *)a1, (*(_DWORD *)a5 >> 13) & 0x1F);
        v291 = v299;
        v276 = v15;
        v277 = (llvm::Constant *)__p;
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
        if (*(_QWORD *)(v30 + 1576))
          strlen(*(const char **)(v30 + 1576));
        v31 = AGCLLVMBuilder::getOrInsertFunction<>();
        v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
        if (*(_QWORD *)(v32 + 1584))
          strlen(*(const char **)(v32 + 1584));
        v286 = v29;
        v33 = AGCLLVMBuilder::getOrInsertFunction<>();
        v34 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        LOWORD(v301) = 257;
        v35 = llvm::IRBuilderBase::CreateCall((uint64_t)v34, **(_QWORD **)(*(_QWORD *)v31 + 16), v31, 0, 0, (uint64_t)&__p);
        v36 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 232);
        v328 = 257;
        FPToUI = (llvm::CmpInst **)llvm::IRBuilderBase::CreateFPToUI(v34, v35, v36, (const llvm::Twine *)v326);
        v37 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        LOWORD(v301) = 257;
        v38 = llvm::IRBuilderBase::CreateCall((uint64_t)v37, **(_QWORD **)(*(_QWORD *)v33 + 16), v33, 0, 0, (uint64_t)&__p);
        v39 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 232);
        v328 = 257;
        v284 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateFPToUI(v37, v38, v39, (const llvm::Twine *)v326);
        v295[0] = 0;
        v325 = 0;
        if ((*(_BYTE *)(a5 + 1) & 2) != 0)
          AGCLLVMDriverShader::buildRegionOffsets((AGCLLVMDriverShader *)a1, v295, &v325, "agc.region_offsets");
        v40 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        __p = "agc.buffer_width";
        LOWORD(v301) = 259;
        v41 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v41 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        v42 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v43 = *(_QWORD *)(v42 + 376);
        v44 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v42 + 32), v40);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v43, v44);
        v45 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        __p = "agc.buffer_height";
        LOWORD(v301) = 259;
        v46 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v46 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        v47 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v48 = *(_QWORD *)(v47 + 376);
        v49 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v47 + 32), v45);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v48, v49);
        v50 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        LOWORD(v301) = 257;
        v52 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v40, v51);
        AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v50 + 40), v52, (uint64_t)v40, 0, (uint64_t)&__p);
        v54 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        LOWORD(v301) = 257;
        v56 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v45, v55);
        Add = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v54 + 40), v56, (uint64_t)v45, 0, (uint64_t)&__p);
        v58 = v295[0];
        if (v295[0])
        {
          v59 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          LOWORD(v301) = 257;
          AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v59, v295[0], AlignedLoad, (const llvm::Twine *)&__p);
          v60 = (uint64_t)v58;
        }
        else
        {
          v60 = llvm::ConstantInt::get();
        }
        v61 = v325;
        if (v325)
        {
          v62 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          LOWORD(v301) = 257;
          Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v62, v325, Add, (const llvm::Twine *)&__p);
          v63 = (uint64_t)v61;
        }
        else
        {
          v63 = llvm::ConstantInt::get();
        }
        v64 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        LOWORD(v301) = 257;
        ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v64, 35, FPToUI, v60, (uint64_t)&__p);
        v66 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        LOWORD(v301) = 257;
        v67 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v66, 36, FPToUI, (uint64_t)AlignedLoad, (uint64_t)&__p);
        v68 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        LOWORD(v301) = 257;
        v69 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v68, 35, v284, v63, (uint64_t)&__p);
        v70 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        LOWORD(v301) = 257;
        v71 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v70, 36, v284, (uint64_t)Add, (uint64_t)&__p);
        v72 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        LOWORD(v301) = 257;
        v73 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v72, ICmp, v67, (const llvm::Twine *)&__p);
        v74 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        v328 = 257;
        v75 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v74, v69, v71, (const llvm::Twine *)v326);
        v294 = 257;
        v76 = llvm::IRBuilderBase::CreateAnd(v72, v73, v75, (const llvm::Twine *)v292);
        v77 = v281;
        v78 = (llvm::BasicBlock *)v286;
        llvm::IRBuilderBase::CreateCondBr((uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v76, (uint64_t)v281, v286);
        v79 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        *(_QWORD *)(v79 + 88) = v281;
        *(_QWORD *)(v79 + 96) = (char *)v281 + 40;
        v80 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        llvm::PointerType::get();
        __p = "agc.buffer_address";
        LOWORD(v301) = 259;
        llvm::GlobalVariable::GlobalVariable();
        *((_BYTE *)v80 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        llvm::GlobalObject::setAlignment();
        v81 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v82 = *(_QWORD *)(v81 + 376);
        v83 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v81 + 32), v80);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v82, v83);
        v84 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        LOWORD(v301) = 257;
        v86 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v80, v85);
        GEP = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v84 + 40), v86, (uint64_t)v80, 0, (uint64_t)&__p);
        if ((*(_DWORD *)a5 & 0xF) == 2)
        {
          v89 = v277;
          v88 = (llvm::BasicBlock *)v28;
          v90 = v291;
        }
        else
        {
          if ((*(_DWORD *)a5 & 0x200) != 0)
          {
            v96 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            LOWORD(v301) = 257;
            FPToUI = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub(v96, (llvm::Value *)FPToUI, v58, (const llvm::Twine *)&__p);
            v97 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            LOWORD(v301) = 257;
            Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v97, (llvm::Value *)v284, v61, (const llvm::Twine *)&__p);
            v91 = v276;
          }
          else
          {
            v91 = v276;
            Sub = (llvm::Value *)v284;
          }
          v98 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
          __p = "agc.buffer_stride";
          LOWORD(v301) = 259;
          v99 = llvm::GlobalVariable::GlobalVariable();
          *(_BYTE *)(v99 + 80) |= 1u;
          llvm::GlobalObject::setSection();
          v100 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          v101 = *(_QWORD *)(v100 + 376);
          v102 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v100 + 32), v98);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v101, v102);
          v103 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          v104 = *(llvm::Type **)(v103 + 232);
          LOWORD(v301) = 257;
          v105 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v103 + 40), v104, (uint64_t)v98, 0, (uint64_t)&__p);
          v106 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          LOWORD(v301) = 257;
          Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v106, Sub, v105, (const llvm::Twine *)&__p);
          v328 = 257;
          v108 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v106, Mul, (llvm::Value *)FPToUI, (const llvm::Twine *)v326);
          if (v91 >= 2)
          {
            v109 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
            if (*(_QWORD *)(v109 + 1592))
              strlen(*(const char **)(v109 + 1592));
            v199 = AGCLLVMBuilder::getOrInsertFunction<>();
            v200 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            LOWORD(v301) = 257;
            v201 = llvm::IRBuilderBase::CreateCall(v200 + 40, **(_QWORD **)(*(_QWORD *)v199 + 16), v199, 0, 0, (uint64_t)&__p);
            v202 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            v203 = (llvm::Value *)llvm::ConstantInt::get();
            LOWORD(v301) = 257;
            Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v202, v108, v203, (const llvm::Twine *)&__p);
            v328 = 257;
            v108 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v202, Shl, v201, (const llvm::Twine *)v326);
            v77 = v281;
          }
          v89 = v277;
          v88 = (llvm::BasicBlock *)v28;
          v90 = v291;
          v205 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          LOWORD(v301) = 257;
          GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v205, v291, GEP, v108, (const llvm::Twine *)&__p);
          v78 = (llvm::BasicBlock *)v286;
        }
        v206 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        LOWORD(v301) = 257;
        v207 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v206, v90, (uint64_t)GEP, 0, (uint64_t)&__p);
        v208 = AGCLLVMDriverShader::buildUnpack((_QWORD *)a1, (*(_DWORD *)a5 >> 13) & 0x1F, v207, (uint64_t)v89);
        llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v88);
        v209 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        *(_QWORD *)(v209 + 88) = v78;
        *(_QWORD *)(v209 + 96) = (char *)v78 + 40;
        NullValue = (llvm::Value *)llvm::Constant::getNullValue(v89, v210);
        llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40), v88);
        v212 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
        FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v88);
        llvm::IRBuilderBase::SetInsertPoint(v212, (uint64_t)v88, FirstInsertionPt);
        v214 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
        LOWORD(v301) = 257;
        PHI = llvm::IRBuilderBase::CreatePHI(v214, v89, 2, (const llvm::Twine *)&__p);
        llvm::PHINode::addIncoming(PHI, v208, v77);
        llvm::PHINode::addIncoming(PHI, NullValue, v78);
        if ((*((_DWORD *)v89 + 2) & 0xFE) != 0x12 || *((_DWORD *)v89 + 8) <= 3u)
          PHI = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), PHI, 4);
        v216 = (AGCLLVMFragmentShader *)(a1 + 72);
        v217 = (llvm::Type **)PHI;
        v218 = 0;
        goto LABEL_95;
      case 3:
      case 4:
        AGCLLVMTextureFetchFragmentShader::wrapperName((AGCLLVMTextureFetchFragmentShader *)a1, &__p);
        v18 = AGCLLVMBuilder::getOrInsertFunction<>();
        if ((v300[7] & 0x80000000) != 0)
          operator delete(__p);
        *(_WORD *)(v18 + 18) = *(_WORD *)(v18 + 18) & 0xC00F | 0x650;
        __p = "entry";
        LOWORD(v301) = 259;
        operator new();
        v19 = llvm::BasicBlock::BasicBlock();
        v20 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        *(_QWORD *)(v20 + 88) = v19;
        *(_QWORD *)(v20 + 96) = v19 + 40;
        ImageStateGlobal = AGCLLVMDriverShader::getImageStateGlobal((AGCLLVMDriverShader *)a1);
        TextureHeapGlobal = AGCLLVMDriverShader::getTextureHeapGlobal((AGCLLVMDriverShader *)a1, 1u);
        SamplerStateGlobal = AGCLLVMDriverShader::getSamplerStateGlobal((AGCLLVMDriverShader *)a1);
        v324 = 0;
        v325 = 0;
        v24 = *(_DWORD *)a5;
        if ((*(_DWORD *)a5 & 0x200) != 0)
        {
          AGCLLVMDriverShader::buildRegionOffsets((AGCLLVMDriverShader *)a1, &v325, &v324, "agc.region_offsets");
          v24 = *(_DWORD *)a5;
        }
        *(_OWORD *)v292 = 0u;
        *(_OWORD *)v293 = 0u;
        v290 = SamplerStateGlobal;
        if ((v24 & 0xF) == 4)
        {
          v282 = v325;
          v285 = v324;
          if ((v24 >> 4) >= 2u)
          {
            v93 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 88) + 56);
            *(_WORD *)(v93 + 18) = *(_WORD *)(v93 + 18) & 0xC00F | 0x680;
            llvm::Module::getOrInsertNamedMetadata();
            llvm::ConstantInt::get();
            __p = (void *)llvm::ValueAsMetadata::get();
            llvm::MDTuple::getImpl();
            llvm::NamedMDNode::addOperand();
          }
          v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
          if (*(_QWORD *)(v94 + 1576))
            strlen(*(const char **)(v94 + 1576));
          v112 = AGCLLVMBuilder::getOrInsertFunction<>();
          v113 = *(const char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1584);
          v289 = (llvm::Value *)TextureHeapGlobal;
          if (v113)
            strlen(v113);
          v151 = AGCLLVMBuilder::getOrInsertFunction<>();
          v152 = *(const char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1592);
          v287 = ImageStateGlobal;
          if (v152)
            strlen(v152);
          v153 = AGCLLVMBuilder::getOrInsertFunction<>();
          v154 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          LOWORD(v301) = 257;
          v155 = llvm::IRBuilderBase::CreateCall((uint64_t)v154, **(_QWORD **)(*(_QWORD *)v112 + 16), v112, 0, 0, (uint64_t)&__p);
          v156 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 232);
          v328 = 257;
          v157 = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v154, v155, v156, (const llvm::Twine *)v326);
          v158 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          LOWORD(v301) = 257;
          v159 = llvm::IRBuilderBase::CreateCall((uint64_t)v158, **(_QWORD **)(*(_QWORD *)v151 + 16), v151, 0, 0, (uint64_t)&__p);
          v160 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 232);
          v328 = 257;
          v161 = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v158, v159, v160, (const llvm::Twine *)v326);
          v162 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          LOWORD(v301) = 257;
          v163 = llvm::IRBuilderBase::CreateCall(v162 + 40, **(_QWORD **)(*(_QWORD *)v153 + 16), v153, 0, 0, (uint64_t)&__p);
          v164 = llvm::ConstantInt::get();
          v165 = (llvm::Value *)v164;
          if ((*(_BYTE *)(a5 + 1) & 4) != 0)
          {
            v279 = (llvm::Value *)v164;
            v173 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
            __p = "agc.address_remapping_factor";
            LOWORD(v301) = 259;
            v174 = llvm::GlobalVariable::GlobalVariable();
            *(_BYTE *)(v174 + 80) |= 1u;
            llvm::GlobalObject::setSection();
            v175 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            v176 = *(_QWORD *)(v175 + 376);
            v177 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v175 + 32), v173);
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v176, v177);
            v178 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
            __p = "agc.buffer_stride";
            LOWORD(v301) = 259;
            v179 = llvm::GlobalVariable::GlobalVariable();
            *(_BYTE *)(v179 + 80) |= 1u;
            llvm::GlobalObject::setSection();
            v180 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            v181 = *(_QWORD *)(v180 + 376);
            v182 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v180 + 32), v178);
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v181, v182);
            if ((*(_BYTE *)(a5 + 1) & 2) != 0)
            {
              v184 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              LOWORD(v301) = 257;
              v157 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v184, v157, v282, (const llvm::Twine *)&__p);
              v185 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              LOWORD(v301) = 257;
              v161 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v185, v161, v285, (const llvm::Twine *)&__p);
            }
            v186 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            LOWORD(v301) = 257;
            v187 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v178, v183);
            v188 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v186 + 40), v187, (uint64_t)v178, 0, (uint64_t)&__p);
            v189 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            LOWORD(v301) = 257;
            v190 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v189, v161, v188, (const llvm::Twine *)&__p);
            v328 = 257;
            v191 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v189, v190, v157, (const llvm::Twine *)v326);
            v192 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            LOWORD(v301) = 257;
            v193 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v192, v191, v279, (const llvm::Twine *)&__p);
            v328 = 257;
            v195 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v192, v193, v163, (const llvm::Twine *)v326);
            v196 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            v11 = (AGCLLVMFragmentShader *)(a1 + 72);
            ImageStateGlobal = v287;
            if ((*(_BYTE *)(a5 + 1) & 8) != 0)
            {
              LOWORD(v301) = 257;
              v228 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v173, v194);
              v229 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v196, v228, (uint64_t)v173, 0, (uint64_t)&__p);
              v230 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              v231 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v301) = 257;
              v232 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v230, v231, v229, (const llvm::Twine *)&__p);
              v233 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              v234 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v301) = 257;
              v235 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v233, v232, v234, (const llvm::Twine *)&__p);
              v328 = 257;
              v95 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v233, v195, v235, (const llvm::Twine *)v326);
              v292[0] = v95;
              v236 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              LOWORD(v301) = 257;
              v292[1] = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v236, v195, v229, (const llvm::Twine *)&__p);
            }
            else
            {
              LOWORD(v301) = 257;
              v197 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v173, v194);
              v198 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v196, v197, (uint64_t)v173, 0, (uint64_t)&__p);
              AGCLLVMTextureFetchFragmentShader::buildUDivURem((AGCLLVMTextureFetchFragmentShader *)a1, v195, v198, &v292[1], v292);
              v95 = v292[0];
            }
          }
          else
          {
            v166 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            v167 = (llvm::Value *)llvm::ConstantInt::get();
            LOWORD(v301) = 257;
            v168 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v166, v157, v167, (const llvm::Twine *)&__p);
            v328 = 257;
            v95 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v166, v168, v163, (const llvm::Twine *)v326);
            v292[0] = v95;
            v292[1] = v161;
            if ((*(_BYTE *)(a5 + 1) & 2) != 0)
            {
              v169 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              LOWORD(v301) = 257;
              v170 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v169, v282, v165, (const llvm::Twine *)&__p);
              v171 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              LOWORD(v301) = 257;
              v95 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v171, v95, v170, (const llvm::Twine *)&__p);
              v292[0] = v95;
              v172 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              LOWORD(v301) = 257;
              v292[1] = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v172, v161, v285, (const llvm::Twine *)&__p);
            }
            v11 = (AGCLLVMFragmentShader *)(a1 + 72);
            ImageStateGlobal = v287;
          }
          TextureHeapGlobal = (uint64_t)v289;
        }
        else if ((v24 & 0xF) == 3)
        {
          v280 = v325;
          v283 = v324;
          v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
          if (*(_QWORD *)(v25 + 1576))
            strlen(*(const char **)(v25 + 1576));
          v110 = AGCLLVMBuilder::getOrInsertFunction<>();
          v111 = *(const char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400) + 1584);
          if (v111)
            strlen(v111);
          v114 = AGCLLVMBuilder::getOrInsertFunction<>();
          v115 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          LOWORD(v301) = 257;
          v116 = llvm::IRBuilderBase::CreateCall((uint64_t)v115, **(_QWORD **)(*(_QWORD *)v110 + 16), v110, 0, 0, (uint64_t)&__p);
          v117 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 232);
          v328 = 257;
          v118 = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v115, v116, v117, (const llvm::Twine *)v326);
          v119 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          LOWORD(v301) = 257;
          v120 = llvm::IRBuilderBase::CreateCall((uint64_t)v119, **(_QWORD **)(*(_QWORD *)v114 + 16), v114, 0, 0, (uint64_t)&__p);
          v121 = *(llvm::Type **)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 232);
          v328 = 257;
          v122 = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI(v119, v120, v121, (const llvm::Twine *)v326);
          if ((*(_BYTE *)(a5 + 1) & 4) != 0)
          {
            v127 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
            __p = "agc.address_remapping_factor";
            LOWORD(v301) = 259;
            v128 = llvm::GlobalVariable::GlobalVariable();
            *(_BYTE *)(v128 + 80) |= 1u;
            llvm::GlobalObject::setSection();
            v129 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            v130 = *(_QWORD *)(v129 + 376);
            v131 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v129 + 32), v127);
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v130, v131);
            v132 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
            __p = "agc.buffer_view_stride";
            LOWORD(v301) = 259;
            v133 = llvm::GlobalVariable::GlobalVariable();
            *(_BYTE *)(v133 + 80) |= 1u;
            llvm::GlobalObject::setSection();
            v134 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            v135 = *(_QWORD *)(v134 + 376);
            v136 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v134 + 32), v132);
            llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v135, v136);
            v137 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
            LOWORD(v301) = 257;
            v139 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v132, v138);
            v140 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v137 + 40), v139, (uint64_t)v132, 0, (uint64_t)&__p);
            v141 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            LOWORD(v301) = 257;
            v142 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v141, v122, v140, (const llvm::Twine *)&__p);
            v328 = 257;
            v143 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v141, v142, v118, (const llvm::Twine *)v326);
            v144 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            v145 = (llvm::Value *)llvm::ConstantInt::get();
            LOWORD(v301) = 257;
            v278 = v143;
            LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v144, v143, v145, (const llvm::Twine *)&__p);
            v148 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            if ((*(_BYTE *)(a5 + 1) & 8) != 0)
            {
              LOWORD(v301) = 257;
              v219 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v127, v146);
              v220 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v148, v219, (uint64_t)v127, 0, (uint64_t)&__p);
              v221 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              v222 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v301) = 257;
              v223 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v221, v222, v220, (const llvm::Twine *)&__p);
              v224 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              v225 = (llvm::Value *)llvm::ConstantInt::get();
              LOWORD(v301) = 257;
              v226 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v224, v223, v225, (const llvm::Twine *)&__p);
              v328 = 257;
              v292[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v224, LShr, v226, (const llvm::Twine *)v326);
              v227 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
              LOWORD(v301) = 257;
              v292[1] = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v227, LShr, v220, (const llvm::Twine *)&__p);
            }
            else
            {
              LOWORD(v301) = 257;
              v149 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v127, v146);
              v150 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v148, v149, (uint64_t)v127, 0, (uint64_t)&__p);
              AGCLLVMTextureFetchFragmentShader::buildUDivURem((AGCLLVMTextureFetchFragmentShader *)a1, LShr, v150, &v292[1], v292);
            }
            if ((*(_BYTE *)(a5 + 1) & 0x10) != 0)
            {
              v237 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
              __p = "agc.buffer_width";
              LOWORD(v301) = 259;
              v238 = llvm::GlobalVariable::GlobalVariable();
              *(_BYTE *)(v238 + 80) |= 1u;
              llvm::GlobalObject::setSection();
              v239 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
              v240 = *(_QWORD *)(v239 + 376);
              v241 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v239 + 32), v237);
              llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v240, v241);
              v242 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
              v243 = (AGCLLVMBuilder *)(v242 + 32);
              v244 = (uint64_t *)(v242 + 40);
              v95 = v292[0];
              LOWORD(v301) = 257;
              v246 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v237, v245);
              v247 = llvm::IRBuilderBase::CreateAlignedLoad(v244, v246, (uint64_t)v237, 0, (uint64_t)&__p);
              v328 = 257;
              v248 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v244, 35, (llvm::CmpInst **)v95, v247, (uint64_t)v326);
              v293[1] = AGCLLVMBuilder::splat(v243, 4, v248);
            }
            else
            {
              v95 = v292[0];
            }
            v249 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            v250 = (llvm::Value *)llvm::ConstantInt::get();
            LOWORD(v301) = 257;
            v293[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v249, v278, v250, (const llvm::Twine *)&__p);
          }
          else
          {
            v123 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            v124 = (llvm::Value *)llvm::ConstantInt::get();
            LOWORD(v301) = 257;
            v95 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v123, v118, v124, (const llvm::Twine *)&__p);
            v292[0] = v95;
            v292[1] = v122;
            v125 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            v126 = (llvm::Value *)llvm::ConstantInt::get();
            LOWORD(v301) = 257;
            v293[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v125, v118, v126, (const llvm::Twine *)&__p);
          }
          v11 = (AGCLLVMFragmentShader *)(a1 + 72);
          if ((*(_BYTE *)(a5 + 1) & 2) != 0)
          {
            v251 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            LOWORD(v301) = 257;
            v95 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v251, v95, v280, (const llvm::Twine *)&__p);
            v292[0] = v95;
            v252 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
            LOWORD(v301) = 257;
            v292[1] = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v252, v292[1], v283, (const llvm::Twine *)&__p);
          }
        }
        else
        {
          v95 = 0;
        }
        v253 = (llvm::Value *)llvm::UndefValue::get();
        v254 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        LOWORD(v301) = 257;
        v255 = (llvm::IRBuilderBase *)(v254 + 40);
        v256 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v255, v253, v95, v256, (const llvm::Twine *)&__p);
        v258 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v259 = v292[1];
        LOWORD(v301) = 257;
        v260 = (llvm::IRBuilderBase *)(v258 + 40);
        v261 = (llvm::Value *)llvm::ConstantInt::get();
        v262 = llvm::IRBuilderBase::CreateInsertElement(v260, InsertElement, v259, v261, (const llvm::Twine *)&__p);
        if (*(_BYTE *)(a1 + 129))
          v263 = *(_QWORD *)(a1 + 88) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 312);
        else
          v263 = 3;
        __p = (void *)0x100000002;
        memset(v300, 0, sizeof(v300));
        v301 = 0u;
        v302 = 0u;
        v303 = 0u;
        v304 = 0u;
        v305 = 0;
        v306 = 0u;
        v307 = 0u;
        v308 = 0u;
        v309 = 0;
        v319 = 0;
        v320 = 0;
        v312 = 0u;
        v313 = 0u;
        v314 = 0;
        v316 = 0;
        v317 = 0;
        v318 = 0;
        v321 = 1;
        v322 = 0;
        v323 = 0;
        LODWORD(v299) = v263;
        AGCLLVMDriverShader::setSampleArgs((_QWORD *)a1, &__p, 0, ImageStateGlobal, (uint64_t)v290, TextureHeapGlobal);
        v264 = 0;
        *(_QWORD *)&v308 = v262;
        v315 = v293[0];
        if (v293[0])
          v265 = 3;
        else
          v265 = 1;
        v310 = v265;
        if (!v293[0])
          v264 = llvm::ConstantInt::get();
        v311 = v264;
        v300[6] = 1;
        v266 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
        v267 = *(_QWORD *)(v266 + 400);
        *(_OWORD *)v295 = *(_OWORD *)(v266 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v266 + 40));
        v297 = *(_DWORD *)(v266 + 136);
        v268 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, void **))(*(_QWORD *)v267 + 272))(v267, v295, &__p);
        if (v296)
          llvm::MetadataTracking::untrack();
        v269 = *(_DWORD *)a5;
        if ((*(_DWORD *)a5 & 0x3E000) != 0x30000)
          goto LABEL_94;
        AGCLLVMDriverShader::getFormatInfo((uint64_t)v326, (_QWORD *)a1, (v269 >> 13) & 0x1F);
        v270 = v327;
        if ((v269 & 0xF) == 4)
        {
          v272 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40);
          v328 = 257;
          v273 = (llvm::Value *)llvm::ConstantInt::get();
          Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v272, v268, v273, (const llvm::Twine *)v326);
          v271 = AGCLLVMDriverShader::buildUnpack((_QWORD *)a1, (*(_DWORD *)a5 >> 13) & 0x1F, Element, v270);
        }
        else
        {
          if ((v269 & 0xF) != 3)
            goto LABEL_94;
          v271 = AGCLLVMDriverShader::buildPack((_QWORD *)a1, (v269 >> 13) & 0x1F, v268, v327);
        }
        v268 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32), v271, 4);
LABEL_94:
        v218 = v293[1];
        v216 = v11;
        v217 = (llvm::Type **)v268;
LABEL_95:
        AGCLLVMFragmentShader::buildWriteFramebuffer(v216, v217, 0, 15, v218);
        llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40));
        break;
      case 5:
      case 6:
      case 7:
        AGCLLVMTextureFetchFragmentShader::buildMRCDownsampleBlitShader((AGCLLVMDriverShader *)a1, a4, (int *)a5);
        return a1;
      default:
        return a1;
    }
  }
  else
  {
    v12 = a1;
    v13 = (uint64_t)a4;
    v14 = 0;
LABEL_5:
    AGCLLVMTextureFetchFragmentShader::buildDefaultBlitShader(v12, v13, v14, a6);
  }
  return a1;
}

uint64_t AGCLLVMDriverCDMShader::buildLocalID(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *Cast;
  uint64_t v23;
  llvm::IRBuilderBase *v24;
  llvm::Value *v25;
  uint64_t Element;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int16 v33;
  __int128 v34;
  uint64_t v35;
  int v36;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 680))(v8);
  if (v9)
  {
    v10 = v9;
    v30 = *a2;
    v31 = *((_QWORD *)a2 + 2);
    if (v31)
      llvm::MetadataTracking::track();
    v32 = *((_DWORD *)a2 + 6);
    v11 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v10 + 256))(v10, &v30, a3, a4);
    if (v31)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24 * a4 + 56);
    if (v12)
    {
      v13 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
      v33 = 257;
      return llvm::IRBuilderBase::CreateCast(v13, 38, v12, a3, (uint64_t)&v30);
    }
    else
    {
      v14 = a4;
      if (*(_QWORD *)a2)
      {
        v15 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 32;
        v34 = *a2;
        v35 = *((_QWORD *)a2 + 2);
        if (v35)
          llvm::MetadataTracking::track();
        v36 = *((_DWORD *)a2 + 6);
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v34, v15 + 8);
        if (v35)
          llvm::MetadataTracking::untrack();
      }
      v16 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * a4 + 24);
      if (v16 == -2)
      {
        return 0;
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 88);
        if ((*(_WORD *)(v17 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments(*(llvm::Function **)(a1 + 88));
        v18 = 40 * (v16 - 1) + 40;
        if (!v16)
          v18 = 0;
        v19 = *(_QWORD *)(v17 + 88) + v18;
        if ((_DWORD)a4)
        {
          v20 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          v21 = *(_QWORD *)(v20 + 272);
          v33 = 257;
          Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v20 + 40, 49, v19, v21, (uint64_t)&v30);
          v23 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
          v33 = 257;
          v24 = (llvm::IRBuilderBase *)(v23 + 40);
          v25 = (llvm::Value *)llvm::ConstantInt::get();
          Element = llvm::IRBuilderBase::CreateExtractElement(v24, Cast, v25, (const llvm::Twine *)&v30);
          v27 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
          v33 = 257;
          v19 = llvm::IRBuilderBase::CreateCast(v27, 39, Element, a3, (uint64_t)&v30);
        }
        v28 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 40;
        v33 = 257;
        v11 = llvm::IRBuilderBase::CreateCast(v28, 38, v19, a3, (uint64_t)&v30);
        llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(*(_QWORD *)(a1 + 72) + 24 * v14 + 40), v11);
      }
    }
  }
  return v11;
}

uint64_t AGCLLVMDriverCDMBlitShader::getSampleResultType(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  const llvm::Type *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if ((a3 & 0x1F00) != 0)
  {
    AGCLLVMDriverShader::getFormatInfo((uint64_t)&v8, a1, (a3 >> 8) & 0x1F);
    return v10;
  }
  else
  {
    v5 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 400);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 560))(&v8, v5, a2 & 0x1F, (a2 >> 8) & 1, 0, 0);
    v6 = (const llvm::Type *)v9;
    if ((*(_DWORD *)(v9 + 8) & 0xFE) == 0x12)
      v6 = **(const llvm::Type ***)(v9 + 16);
    LODWORD(result) = AGCLLVMBuilder::getComponentType((int8x16_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32), v6, &v7);
    if ((result - 3) >= 3)
      return result;
    else
      return (result + 4);
  }
}

uint64_t AGCLLVMDriverCDMBlitShader::readDestinationTexture(AGCLLVMDriverShader *a1, _DWORD *a2, int a3)
{
  int v6;
  llvm::Value *v7;
  char *v8;
  llvm::Value *v9;
  llvm::IRBuilderBase *v10;
  llvm::Value *v11;
  llvm::Value *InsertElement;
  char *v13;
  llvm::Value *v14;
  llvm::IRBuilderBase *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::IRBuilderBase *v19;
  llvm::Value *Add;
  llvm::GlobalVariable *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  llvm::Value *v27;
  llvm::Type *v28;
  llvm::Value *AlignedLoad;
  llvm::Value *v30;
  char *v31;
  llvm::IRBuilderBase *v32;
  llvm::Value *v33;
  llvm::IRBuilderBase *v34;
  llvm::Type *v35;
  uint64_t UIToFP;
  llvm::GlobalVariable *ImageStateGlobal;
  uint64_t TextureHeapGlobal;
  llvm::GlobalVariable *SamplerStateGlobal;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v45;
  uint64_t v46;
  int v47;
  const char *v48;
  int v49;
  _QWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  __int16 v69;
  char v70;
  char v71;
  uint64_t v72;
  char v73;

  if ((*a2 & 0xC0) != 0)
    v6 = 3;
  else
    v6 = 1;
  v7 = (llvm::Value *)llvm::UndefValue::get();
  v8 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v9 = (llvm::Value *)*((_QWORD *)a1 + 12);
  LOWORD(v51) = 257;
  v10 = (llvm::IRBuilderBase *)(v8 + 40);
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v10, v7, v9, v11, (const llvm::Twine *)&v48);
  v13 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v14 = (llvm::Value *)*((_QWORD *)a1 + 13);
  LOWORD(v51) = 257;
  v15 = (llvm::IRBuilderBase *)(v13 + 40);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v15, InsertElement, v14, v16, (const llvm::Twine *)&v48);
  v18 = (llvm::Value *)AGCLLVMDriverShader::buildRegionOffsets(a1, "agc.dest_padded_offsets");
  v19 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  LOWORD(v51) = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v19, v17, v18, (const llvm::Twine *)&v48);
  if ((*(_BYTE *)a2 & 0xC0) != 0)
  {
    v21 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v48 = "agc.texture_write_slice";
    LOWORD(v51) = 259;
    v22 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v22 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v23 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    v24 = *((_QWORD *)v23 + 47);
    v25 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v23 + 32), v21);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v24, v25);
    v26 = (uint64_t *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
    LOWORD(v51) = 257;
    v28 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v21, v27);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v26 + 5, v28, (uint64_t)v21, 0, (uint64_t)&v48);
    v30 = AGCLLVMBuilder::extendVector((AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32), Add, 4);
    v31 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
    LOWORD(v51) = 257;
    v32 = (llvm::IRBuilderBase *)(v31 + 40);
    v33 = (llvm::Value *)llvm::ConstantInt::get();
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v32, v30, AlignedLoad, v33, (const llvm::Twine *)&v48);
  }
  v34 = (AGCLLVMDriverShader *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 40);
  v35 = (llvm::Type *)llvm::FixedVectorType::get();
  LOWORD(v51) = 257;
  UIToFP = llvm::IRBuilderBase::CreateUIToFP(v34, Add, v35, (const llvm::Twine *)&v48);
  ImageStateGlobal = AGCLLVMDriverShader::getImageStateGlobal(a1);
  TextureHeapGlobal = AGCLLVMDriverShader::getTextureHeapGlobal(a1, 1u);
  SamplerStateGlobal = AGCLLVMDriverShader::getSamplerStateGlobal(a1);
  LODWORD(v48) = 0;
  HIDWORD(v48) = v6;
  v50[0] = 0;
  *(_DWORD *)((char *)v50 + 7) = 0;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v69 = 0;
  v70 = 0;
  v62 = 0u;
  v63 = 0u;
  v64 = 0;
  v68 = 0;
  v66 = 0;
  v67 = 0;
  v71 = 1;
  v72 = 0;
  v73 = 0;
  v49 = a3;
  AGCLLVMDriverShader::setSampleArgs(a1, &v48, 1, ImageStateGlobal, (uint64_t)SamplerStateGlobal, TextureHeapGlobal);
  *(_QWORD *)&v58 = UIToFP;
  v65 = 0;
  v60 = 1;
  v40 = llvm::ConstantFP::get();
  BYTE6(v50[0]) = 1;
  v61 = v40;
  v59 = 0;
  v41 = (char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24);
  v42 = *((_QWORD *)v41 + 50);
  v45 = *(_OWORD *)(v41 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v41 + 40));
  v47 = *((_DWORD *)v41 + 34);
  v43 = (*(uint64_t (**)(uint64_t, __int128 *, const char **))(*(_QWORD *)v42 + 272))(v42, &v45, &v48);
  if (v46)
    llvm::MetadataTracking::untrack();
  return v43;
}

AGCLLVMDriverShader *AGCLLVMDriverCDMBlitShader::AGCLLVMDriverCDMBlitShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  AGCLLVMDriverShader *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t Add;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value *Cast;
  uint64_t v49;
  char v50;
  llvm::GlobalVariable *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Value *v56;
  llvm::Type *v57;
  uint64_t AlignedLoad;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Value *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  char v67;
  llvm::Type **v68;
  llvm::Type **v69;
  uint64_t v70;
  llvm::Value *v71;
  llvm::Type *v72;
  uint64_t v73;
  uint64_t v74;
  llvm::Value *Mul;
  llvm::IRBuilderBase *v76;
  llvm::Value *v77;
  _QWORD *v78;
  char *v79;
  unsigned int v80;
  llvm::GlobalVariable *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  llvm::Value *v87;
  llvm::Type *v88;
  uint64_t v89;
  uint64_t *v90;
  llvm::CmpInst **v91;
  uint64_t ICmp;
  uint64_t *v93;
  llvm::CmpInst **v94;
  llvm::Value *v95;
  uint64_t *v96;
  llvm::CmpInst **v97;
  llvm::Value *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  llvm::Type *v104;
  llvm::Type *v105;
  llvm::GlobalVariable *v106;
  const char *v107;
  int v108;
  llvm::Value *v109;
  uint64_t v110;
  llvm::Value *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  llvm::Type *v116;
  llvm::Value *v117;
  uint64_t v118;
  llvm::Value *v119;
  llvm::BasicBlock *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  llvm::CmpInst **v124;
  llvm::Value *v125;
  uint64_t *v126;
  llvm::CmpInst **v127;
  llvm::Value *v128;
  llvm::Value *v129;
  uint64_t *v130;
  llvm::CmpInst **v131;
  llvm::Value *v132;
  llvm::Value *v133;
  uint64_t *v134;
  llvm::CmpInst **v135;
  llvm::Value *v136;
  uint64_t v137;
  char *v138;
  llvm::IRBuilderBase *v139;
  llvm::Value *v140;
  llvm::Value *Sub;
  llvm::IRBuilderBase *v142;
  llvm::Value *v143;
  llvm::Value *v144;
  llvm::Value *v145;
  char *v146;
  llvm::IRBuilderBase *v147;
  llvm::Value *v148;
  llvm::Value *InsertElement;
  char *v150;
  llvm::IRBuilderBase *v151;
  llvm::Value *v152;
  llvm::Value *v153;
  unsigned int *v154;
  unsigned int v155;
  llvm::Value *v156;
  llvm::IRBuilderBase *v157;
  llvm::GlobalVariable *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  llvm::Value *v164;
  llvm::Type *v165;
  llvm::Value *v166;
  llvm::Value *v167;
  char *v168;
  llvm::IRBuilderBase *v169;
  llvm::Value *v170;
  llvm::IRBuilderBase *v171;
  llvm::Type *v172;
  llvm::GlobalVariable *v173;
  AGCLLVMDriverShader *v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  llvm::GlobalVariable *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  llvm::Value *v185;
  llvm::Type *v186;
  llvm::Value *v187;
  uint64_t *v188;
  llvm::Value *v189;
  llvm::Type *v190;
  llvm::Value *v191;
  llvm::GlobalVariable *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  llvm::Value *v198;
  llvm::Type *v199;
  llvm::Value *v200;
  uint64_t v201;
  llvm::Value *v202;
  char *v203;
  llvm::IRBuilderBase *v204;
  llvm::Value *v205;
  llvm::Value *v206;
  char *v207;
  llvm::IRBuilderBase *v208;
  llvm::Value *v209;
  llvm::Value *v210;
  char *v211;
  llvm::IRBuilderBase *v212;
  llvm::Value *v213;
  llvm::Value *v214;
  char *v215;
  llvm::Value *v216;
  llvm::Value *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t FAdd;
  uint64_t v221;
  llvm::Type *v222;
  uint64_t v223;
  uint64_t *v224;
  llvm::CmpInst **v225;
  llvm::Value *v226;
  uint64_t *v227;
  llvm::CmpInst **v228;
  llvm::Value *v229;
  llvm::Value *v230;
  uint64_t *v231;
  llvm::CmpInst **v232;
  llvm::Value *v233;
  llvm::Value *v234;
  uint64_t *v235;
  llvm::CmpInst **v236;
  llvm::Value *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  char *v241;
  llvm::IRBuilderBase *v242;
  llvm::Value *v243;
  llvm::Value *v244;
  llvm::IRBuilderBase *v245;
  llvm::Value *v246;
  llvm::Value *v247;
  unsigned int v248;
  llvm::GlobalVariable *v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  llvm::Type *v255;
  llvm::Value *v256;
  int v257;
  uint64_t *v258;
  void *v259;
  llvm::Type *v260;
  uint64_t GEP;
  unint64_t v262;
  llvm::Value *v263;
  char *v264;
  llvm::Value *v265;
  llvm::IRBuilderBase *v266;
  llvm::Value *v267;
  llvm::Value *v268;
  llvm::IRBuilderBase *v269;
  llvm::Value *v270;
  unsigned int *v271;
  uint64_t v272;
  llvm::Value *v273;
  char *v274;
  llvm::IRBuilderBase *v275;
  llvm::Value *v276;
  llvm::Value *v277;
  char *v278;
  llvm::IRBuilderBase *v279;
  llvm::Value *v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  llvm::Value *DestinationTexture;
  char *v290;
  llvm::IRBuilderBase *v291;
  llvm::Type *v292;
  llvm::User *PHI;
  AGCLLVMDriverShader *v294;
  char *v295;
  llvm::Type *v296;
  llvm::Value *v297;
  llvm::IRBuilderBase *v298;
  llvm::Value *v299;
  uint64_t v300;
  char *v301;
  uint64_t v302;
  llvm::Value *v303;
  llvm::IRBuilderBase *v304;
  llvm::Value *v305;
  llvm::Value *v306;
  char *v307;
  llvm::IRBuilderBase *v308;
  uint64_t v309;
  llvm::Value *v310;
  uint64_t v311;
  unint64_t v312;
  llvm::IRBuilderBase *v313;
  llvm::IRBuilderBase *v314;
  llvm::IRBuilderBase *v315;
  llvm::Value *v316;
  uint64_t v317;
  llvm::IRBuilderBase *v318;
  llvm::Value *v319;
  uint64_t Shl;
  llvm::Value *v321;
  llvm::Value *v322;
  llvm::Value *v323;
  llvm::IRBuilderBase *v324;
  uint64_t v325;
  uint64_t *v326;
  llvm::Value *v327;
  unsigned __int8 v328;
  llvm::IRBuilderBase *v329;
  uint64_t v330;
  __int16 v331;
  uint64_t *v332;
  llvm::Type *v333;
  unsigned __int8 v334;
  uint64_t v335;
  uint64_t v336;
  llvm::Value *v337;
  char *v338;
  uint64_t v339;
  llvm::Value *v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  char *v344;
  llvm::IRBuilderBase *v345;
  llvm::Type *v346;
  llvm::User *v347;
  unsigned int v348;
  llvm::Type *v349;
  llvm::GlobalVariable *v350;
  llvm::Type *v351;
  llvm::Value *v352;
  uint64_t v353;
  char v354;
  char v355;
  char *v356;
  llvm::Value *v357;
  llvm::IRBuilderBase *v358;
  llvm::Value *v359;
  llvm::IRBuilderBase *v360;
  unsigned int v361;
  llvm::Value *v362;
  llvm::IRBuilderBase *v363;
  llvm::GlobalVariable *v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t *v369;
  llvm::Value *v370;
  llvm::Type *v371;
  llvm::Value *v372;
  llvm::Value *v373;
  char *v374;
  llvm::IRBuilderBase *v375;
  llvm::Value *v376;
  llvm::IRBuilderBase *v377;
  int v378;
  char *v379;
  AGCLLVMDriverShader *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  llvm::Value *v384;
  llvm::Type *v385;
  llvm::Value *v386;
  unsigned int v387;
  llvm::GlobalVariable *v388;
  uint64_t v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  llvm::Type *v394;
  llvm::Value *v395;
  llvm::Value *v396;
  AGCLLVMGen3TargetLowerer *v397;
  int v398;
  uint64_t v399;
  llvm::Value *v400;
  char *v401;
  llvm::Value *v402;
  llvm::IRBuilderBase *v403;
  llvm::Value *v404;
  llvm::Value *v405;
  char *v406;
  llvm::Value *v407;
  llvm::IRBuilderBase *v408;
  llvm::Value *v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  AGCLLVMDriverShader *v417;
  llvm::Value *v418;
  llvm::Value *v419;
  llvm::IRBuilderBase *v420;
  llvm::Value *v421;
  llvm::IRBuilderBase *v422;
  llvm::Value *v423;
  llvm::Value *v424;
  llvm::Value *v425;
  uint64_t v426;
  int v427;
  llvm::IRBuilderBase *v428;
  uint64_t v429;
  llvm::Type **v430;
  llvm::IRBuilderBase *v431;
  llvm::Value *v432;
  AGCLLVMDriverShader *v433;
  char *v434;
  llvm::Type *v435;
  llvm::Value *v436;
  uint64_t v437;
  llvm::BasicBlock *v438;
  llvm::IRBuilderBase *v439;
  llvm::Value *v440;
  llvm::CmpInst **v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  llvm::IRBuilderBase *v445;
  llvm::Value *v446;
  uint64_t v447;
  char *v448;
  uint64_t v449;
  llvm::Value *v450;
  llvm::IRBuilderBase *v451;
  llvm::Value *v452;
  llvm::Value *v453;
  char *v454;
  llvm::IRBuilderBase *v455;
  uint64_t v456;
  llvm::Value *v457;
  uint64_t v458;
  unint64_t v459;
  llvm::GlobalVariable *v460;
  char *v461;
  uint64_t v462;
  uint64_t v463;
  llvm::Instruction *RetVoid;
  uint64_t v465;
  int v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  uint64_t v470;
  char *v471;
  char *v472;
  llvm::Value *v473;
  uint64_t i;
  char *v475;
  uint64_t v476;
  char *v477;
  llvm::IRBuilderBase *v478;
  llvm::Value *v479;
  uint64_t v480;
  llvm::Value *v481;
  char *v482;
  llvm::IRBuilderBase *v483;
  llvm::Value *v484;
  llvm::IRBuilderBase *v485;
  char *v486;
  char *v487;
  uint64_t v488;
  uint64_t v489;
  unsigned __int8 v490;
  llvm::IRBuilderBase *v491;
  llvm::Type **v492;
  llvm::Value *v493;
  uint64_t v494;
  unsigned __int8 v495;
  uint64_t *v496;
  llvm::Type **v497;
  uint64_t v498;
  uint64_t v499;
  char *v500;
  char v501;
  char v502;
  AGCLLVMDriverShader *v503;
  char *v504;
  uint64_t v505;
  char *v506;
  llvm::IRBuilderBase *v507;
  llvm::Value *v508;
  uint64_t Element;
  llvm::Value *v510;
  char *v511;
  llvm::IRBuilderBase *v512;
  llvm::Value *v513;
  llvm::IRBuilderBase *v514;
  char v515;
  char v516;
  AGCLLVMDriverShader *v517;
  char *v518;
  uint64_t v519;
  char *v520;
  llvm::IRBuilderBase *v521;
  llvm::Value *v522;
  uint64_t v523;
  llvm::Value *v524;
  char *v525;
  llvm::IRBuilderBase *v526;
  llvm::Value *v527;
  llvm::IRBuilderBase *v528;
  uint64_t j;
  char *v530;
  uint64_t v531;
  char *v532;
  llvm::IRBuilderBase *v533;
  llvm::Value *v534;
  uint64_t v535;
  llvm::Value *v536;
  char *v537;
  llvm::IRBuilderBase *v538;
  llvm::Value *v539;
  llvm::IRBuilderBase *v540;
  uint64_t v541;
  uint64_t v542;
  AGCLLVMDriverShader *v543;
  uint64_t v544;
  char *v545;
  uint64_t v546;
  int v547;
  char v548;
  llvm::Value *v549;
  llvm::Value *v550;
  llvm::Value *v551;
  char *v552;
  llvm::IRBuilderBase *v553;
  llvm::Value *v554;
  llvm::Value *v555;
  char *v556;
  llvm::Value *v557;
  llvm::IRBuilderBase *v558;
  llvm::Value *v559;
  llvm::Value *v560;
  char *v561;
  llvm::Value *v562;
  llvm::IRBuilderBase *v563;
  llvm::Value *v564;
  llvm::Value *v565;
  char *v566;
  llvm::IRBuilderBase *v567;
  llvm::Value *v568;
  uint64_t v569;
  char *v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t *v575;
  llvm::CmpInst **v576;
  uint64_t v577;
  llvm::Value *v578;
  uint64_t *v579;
  llvm::CmpInst **v580;
  uint64_t v581;
  llvm::Value *v582;
  uint64_t v583;
  llvm::BasicBlock *v584;
  llvm::BasicBlock *v585;
  AGCLLVMDriverShader *v586;
  char *v587;
  char *v588;
  uint64_t v589;
  uint64_t FirstInsertionPt;
  llvm::Value *v591;
  uint64_t v592;
  char v593;
  char *v594;
  llvm::Value *v595;
  llvm::IRBuilderBase *v596;
  llvm::Value *v597;
  int v598;
  unsigned int v599;
  llvm::Value *v600;
  llvm::IRBuilderBase *v601;
  llvm::GlobalVariable *v602;
  uint64_t v603;
  char *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t *v607;
  llvm::Value *v608;
  llvm::Type *v609;
  llvm::Value *v610;
  llvm::Value *v611;
  char *v612;
  llvm::IRBuilderBase *v613;
  llvm::Value *v614;
  llvm::Value *v615;
  char *v616;
  llvm::Value *v617;
  llvm::Value *v618;
  llvm::Value *v619;
  llvm::Type **v620;
  llvm::Value *v621;
  llvm::Value *v622;
  const llvm::Twine *v623;
  llvm::IRBuilderBase *v624;
  llvm::Value *v625;
  llvm::CmpInst **v626;
  uint64_t *v627;
  uint64_t v628;
  llvm::Type **v629;
  llvm::Value *Select;
  llvm::Value *v631;
  llvm::Value *v632;
  llvm::IRBuilderBase *v633;
  llvm::Value *v634;
  llvm::CmpInst **v635;
  uint64_t *v636;
  uint64_t v637;
  llvm::Value *v638;
  uint64_t v639;
  llvm::Value *v640;
  char *v641;
  llvm::Value *v642;
  llvm::Value *v643;
  llvm::Value *v644;
  char *v645;
  llvm::Value *v646;
  llvm::Value *v647;
  uint64_t v648;
  llvm::GlobalVariable *v649;
  uint64_t v650;
  llvm::GlobalVariable *v651;
  uint64_t v652;
  char *v653;
  int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t *v657;
  llvm::Value *v658;
  llvm::Type *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  int v665;
  unsigned int v666;
  int v667;
  int v668;
  char *v669;
  uint64_t v670;
  llvm::BasicBlock *v672;
  llvm::BasicBlock *v673;
  llvm::BasicBlock *v674;
  unsigned int *v675;
  llvm::BasicBlock *v676;
  unsigned int *v677;
  llvm::BasicBlock *v678;
  llvm::GlobalVariable *SamplerStateGlobal;
  _BOOL4 v680;
  llvm::Type *v681;
  uint64_t TextureHeapGlobal;
  uint64_t v683;
  int v684;
  llvm::GlobalVariable *ImageStateGlobal;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  llvm::Value *v689;
  int v690;
  llvm::Value *v691;
  llvm::Value *v692;
  llvm::GlobalVariable *v693;
  int SampleResultType;
  int v695;
  uint64_t v696;
  int v697;
  llvm::Value *UIToFP;
  llvm::Value *v699;
  int v700;
  unsigned int v701;
  llvm::Value *v702;
  AGCLLVMDriverShader *v703;
  __int128 v704;
  uint64_t v705;
  int v706;
  __int128 v707;
  uint64_t v708;
  int v709;
  _BYTE v710[32];
  __int16 v711;
  _BYTE v712[32];
  __int16 v713;
  _BYTE v714[32];
  __int16 v715;
  llvm::Value *v716[2];
  uint64_t v717;
  int v718;
  __int16 v719;
  llvm::Value *v720[2];
  __int128 v721;
  __int128 v722;
  __int128 v723;
  llvm::Value *v724;
  llvm::Value *v725;
  __int16 v726;
  llvm::Value *v727;
  llvm::Value *v728;
  llvm::Value *v729;
  llvm::Value *v730;
  llvm::Value *v731[2];
  uint64_t v732;
  int v733;
  __int16 v734;
  void *__p[2];
  __int128 v736;
  __int128 v737;
  __int128 v738;
  __int128 v739;
  __int128 v740;
  __int16 v741;
  __int128 v742;
  __int128 v743;
  __int128 v744;
  uint64_t v745;
  int v746;
  _QWORD v747[6];
  uint64_t v748;
  llvm::Value *v749;
  uint64_t v750;
  char v751;
  __int16 v752;
  char v753;
  char v754;
  uint64_t v755;
  char v756;
  uint64_t v757;

  v757 = *MEMORY[0x1E0C80C00];
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(a1 + 128), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t *)a1, (uint64_t *)off_1E7EBC600);
  *(_QWORD *)a1 = off_1E7EBFE98;
  *(_QWORD *)(a1 + 128) = &off_1E7EBFFB8;
  *(_QWORD *)(a1 + 160) = &off_1E7EC00A8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 528) + 680))(*(_QWORD *)(a1 + 528)))
  {
    v8 = operator new();
    *(_QWORD *)v8 = v8 + 16;
    *(_QWORD *)(v8 + 8) = 0x200000000;
    *(_QWORD *)(v8 + 24) = 0x100000001;
    *(_DWORD *)(v8 + 32) = -2;
    v9 = 40;
    do
    {
      v10 = (_QWORD *)(v8 + v9);
      v10[1] = 0;
      v10[2] = 0;
      *v10 = 4;
      v11 = v8 + v9 + 24;
      v9 += 24;
    }
    while (v11 != v8 + 112);
    v12 = 112;
    do
    {
      v13 = (_QWORD *)(v8 + v12);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = 4;
      v14 = v8 + v12 + 24;
      v12 += 24;
    }
    while (v14 != v8 + 184);
    v15 = 184;
    do
    {
      v16 = (_QWORD *)(v8 + v15);
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 4;
      v17 = v8 + v15 + 24;
      v15 += 24;
    }
    while (v17 != v8 + 256);
    *(_QWORD *)(a1 + 72) = v8;
  }
  *(_QWORD *)a1 = off_1E7EBC3B8;
  *(_QWORD *)(a1 + 128) = &unk_1E7EBC4F8;
  *(_QWORD *)(a1 + 160) = &unk_1E7EBC5E8;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  v18 = (*a5 & 3) != 0;
  if ((*a5 & 0xC) == 0)
    v18 = 0;
  v19 = (*a5 & 0x20000) == 0 && v18;
  v680 = v19;
  *(_DWORD *)(a1 + 80) = *(_WORD *)(a4 + 34) & 0x1FF;
  if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 528) + 680))(*(_QWORD *)(a1 + 528)))
  {
    v20 = *(_QWORD *)(a1 + 72);
    *(_DWORD *)(v20 + 24) = *(_DWORD *)(v20 + 8);
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(v20, 0);
    v21 = *(_DWORD **)(a1 + 72);
    v22 = v21[2];
    v21[7] = v22;
    v21[8] = v22;
    llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((uint64_t)v21, 3);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(__p, a1);
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 24) + a1 + 400);
  v703 = (AGCLLVMDriverShader *)a1;
  v675 = (unsigned int *)a4;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 680))(v23))
  {
    llvm::FunctionType::get();
  }
  else
  {
    v24 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 8);
    if ((_DWORD)v24)
    {
      v25 = a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32;
      v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(*(unsigned int *)(*(_QWORD *)(a1 + 72) + 8));
      v27 = 0;
      do
      {
        *(_QWORD *)&v26[v27] = *(_QWORD *)(v25 + 200);
        v27 += 8;
      }
      while (8 * v24 != v27);
      v28 = v26;
    }
    else
    {
      v28 = 0;
    }
    llvm::FunctionType::get();
    if (v28)
      operator delete(v28);
  }
  v677 = a5;
  llvm::Module::getOrInsertFunction();
  *(_QWORD *)(a1 + 88) = v29;
  *(_WORD *)(v29 + 18) = *(_WORD *)(v29 + 18) & 0xC00F | 0x6A0;
  v30 = (AGCLLVMDriverShader *)a1;
  if (SBYTE7(v736) < 0)
    operator delete(__p[0]);
  v689 = (llvm::Value *)(a1 + 192);
  __p[0] = "entry";
  LOWORD(v737) = 259;
  operator new();
  v31 = llvm::BasicBlock::BasicBlock();
  v32 = 0;
  v33 = a1 + 8;
  v34 = *(_QWORD *)(*(_QWORD *)a1 - 24) + a1;
  v35 = a1 + 200;
  *(_QWORD *)(v34 + 88) = v31;
  *(_QWORD *)(v34 + 96) = v31 + 40;
  v36 = a1 + 368;
  v686 = a1 + 8;
  v37 = 1;
  v688 = a1 + 200;
  do
  {
    v38 = v37;
    v39 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
    v707 = *(_OWORD *)(v39 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v39 + 40));
    v709 = *((_DWORD *)v39 + 34);
    v40 = *(_QWORD *)(*(_QWORD *)v30 - 24) + 32;
    v41 = *(_QWORD *)(v35 + v40);
    v42 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v36 + v40) + 680))(*(_QWORD *)(v36 + v40));
    if (v42)
    {
      v43 = v42;
      *(_OWORD *)__p = v707;
      *(_QWORD *)&v736 = v708;
      if (v708)
        llvm::MetadataTracking::track();
      DWORD2(v736) = v709;
      Add = AGCLLVMGen3TargetLowerer::buildGlobalID(v43, (uint64_t)__p, v41, v32);
      if ((_QWORD)v736)
        llvm::MetadataTracking::untrack();
    }
    else
    {
      if ((_QWORD)v707)
      {
        v45 = *(_QWORD *)(*(_QWORD *)v30 - 24);
        *(_OWORD *)v720 = v707;
        *(_QWORD *)&v721 = v708;
        if (v708)
          llvm::MetadataTracking::track();
        DWORD2(v721) = v709;
        AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)v720, v33 + v45 + 32);
        if ((_QWORD)v721)
          llvm::MetadataTracking::untrack();
      }
      v46 = *(_QWORD *)(*(_QWORD *)v30 - 24);
      v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v46 + v36 + 32) + 680))(*(_QWORD *)(v46 + v36 + 32));
      if (v47)
      {
        __p[1] = 0;
        __p[0] = 0;
        *(_QWORD *)&v736 = 0;
        DWORD2(v736) = 0;
        Cast = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalSize(v47, (uint64_t)__p, v41, v32);
        if ((_QWORD)v736)
          llvm::MetadataTracking::untrack();
        v30 = v703;
      }
      else
      {
        v49 = *(_QWORD *)(*((_QWORD *)v30 + 9) + 24 * v32 + 200);
        if (!v49)
        {
          v50 = 1;
          v51 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
          if (*AGCLLVMDriverCDMShader::buildLocalSize(AGCLLVMBuilder::InsertPoint,llvm::Type *,unsigned int)::$_1::operator() const(void)::xyz[v32])
          {
            *(_QWORD *)&v736 = AGCLLVMDriverCDMShader::buildLocalSize(AGCLLVMBuilder::InsertPoint,llvm::Type *,unsigned int)::$_1::operator() const(void)::xyz[v32];
            v50 = 3;
          }
          v30 = v703;
          __p[0] = "agc.local_size_";
          LOBYTE(v737) = 3;
          BYTE1(v737) = v50;
          llvm::GlobalVariable::GlobalVariable();
          *((_BYTE *)v51 + 80) |= 1u;
          llvm::GlobalObject::setSection();
          llvm::GlobalObject::setAlignment();
          v52 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
          v53 = *((_QWORD *)v52 + 47);
          v54 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v52 + 32), v51);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v53, v54);
          v55 = *(_QWORD *)(*(_QWORD *)v703 - 24) + v686;
          LOWORD(v737) = 257;
          v57 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v51, v56);
          AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v55 + 32), v57, (uint64_t)v51, 0, (uint64_t)__p);
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(*((_QWORD *)v703 + 9) + 24 * v32 + 184), AlignedLoad);
          v49 = *(_QWORD *)(*((_QWORD *)v703 + 9) + 24 * v32 + 200);
        }
        v59 = (uint64_t)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40;
        LOWORD(v737) = 257;
        Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v59, 38, v49, v41, (uint64_t)__p);
      }
      v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v30 - 24) + v36 + 32);
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 680))(v60);
      if (v61)
      {
        __p[1] = 0;
        __p[0] = 0;
        *(_QWORD *)&v736 = 0;
        DWORD2(v736) = 0;
        v62 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(v61, (uint64_t)__p, v41, v32);
        if ((_QWORD)v736)
          llvm::MetadataTracking::untrack();
        v30 = v703;
      }
      else
      {
        v63 = *(_QWORD *)(*((_QWORD *)v30 + 9) + 24 * v32 + 128);
        if (!v63)
        {
          v64 = 1;
          v65 = llvm::User::operator new((llvm::User *)0x58);
          v66 = AGCLLVMDriverCDMShader::buildLocalSize(AGCLLVMBuilder::InsertPoint,llvm::Type *,unsigned int)::$_1::operator() const(void)::xyz[v32];
          if (*v66)
          {
            *(_QWORD *)&v736 = AGCLLVMDriverCDMShader::buildLocalSize(AGCLLVMBuilder::InsertPoint,llvm::Type *,unsigned int)::$_1::operator() const(void)::xyz[v32];
            v64 = 3;
          }
          __p[0] = "agx.group_id_";
          LOBYTE(v737) = 3;
          BYTE1(v737) = v64;
          v67 = 1;
          v68 = (llvm::Type **)v65;
          llvm::GlobalVariable::GlobalVariable();
          if (*v66)
          {
            *(_QWORD *)&v736 = v66;
            v67 = 3;
          }
          __p[0] = "cl_group_id_";
          LOBYTE(v737) = 3;
          BYTE1(v737) = v67;
          llvm::Twine::str((llvm::Twine *)__p);
          llvm::GlobalObject::setSection();
          if (SHIBYTE(v717) < 0)
            operator delete(v716[0]);
          llvm::GlobalObject::setAlignment();
          v69 = v68;
          v30 = v703;
          v70 = *(_QWORD *)(*(_QWORD *)v703 - 24) + v686;
          LOWORD(v737) = 257;
          v72 = AGCLLVMBuilder::tryDeducePointeeType(v69, v71);
          v73 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v70 + 32), v72, (uint64_t)v69, 0, (uint64_t)__p);
          llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(*((_QWORD *)v703 + 9) + 24 * v32 + 112), v73);
          v63 = *(_QWORD *)(*((_QWORD *)v703 + 9) + 24 * v32 + 128);
        }
        v74 = (uint64_t)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40;
        LOWORD(v737) = 257;
        v62 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v74, 38, v63, v41, (uint64_t)__p);
      }
      LOWORD(v737) = 257;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMDriverShader *)((char *)v30 + v46 + 40), Cast, v62, (const llvm::Twine *)__p);
      v76 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      v716[1] = 0;
      v717 = 0;
      v716[0] = 0;
      v718 = 0;
      v77 = (llvm::Value *)AGCLLVMDriverCDMShader::buildLocalID((uint64_t)v30, (__int128 *)v716, v41, v32);
      LOWORD(v737) = 257;
      Add = llvm::IRBuilderBase::CreateAdd(v76, Mul, v77, (const llvm::Twine *)__p);
      v33 = v686;
      v35 = v688;
    }
    v78 = (_QWORD *)((char *)v30 + 8 * v32);
    v78[12] = Add;
    if (v708)
      llvm::MetadataTracking::untrack();
    v79 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
    v704 = *(_OWORD *)(v79 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v79 + 40));
    v706 = *((_DWORD *)v79 + 34);
    v78[14] = AGCLLVMDriverCDMShader::buildLocalID((uint64_t)v30, &v704, *(_QWORD *)((char *)v689 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 32), v32);
    if (v705)
      llvm::MetadataTracking::untrack();
    v37 = 0;
    v32 = 1;
  }
  while ((v38 & 1) != 0);
  v80 = *v677;
  if ((*v677 & 0x2000000) != 0)
  {
    if (v680)
    {
      v81 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p[0] = "agc.dest_padded_sizes";
      LOWORD(v737) = 259;
      v82 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v82 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v83 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      v84 = *((_QWORD *)v83 + 47);
      v85 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v83 + 32), v81);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v84, v85);
      v86 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24));
      LOWORD(v737) = 257;
      v88 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v81, v87);
      v89 = llvm::IRBuilderBase::CreateAlignedLoad(v86 + 5, v88, (uint64_t)v81, 0, (uint64_t)__p);
      v90 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      v91 = (llvm::CmpInst **)*((_QWORD *)v30 + 12);
      LOWORD(v737) = 257;
      ICmp = llvm::IRBuilderBase::CreateICmp(v90, 35, v91, v89, (uint64_t)__p);
    }
    else
    {
      v731[1] = 0;
      v731[0] = 0;
      AGCLLVMDriverShader::buildRegionOffsets(v30, v731, &v731[1], "agc.dest_padded_sizes");
      v93 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      v94 = (llvm::CmpInst **)*((_QWORD *)v30 + 12);
      LOWORD(v737) = 257;
      v95 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v93, 35, v94, (uint64_t)v731[0], (uint64_t)__p);
      v96 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      v97 = (llvm::CmpInst **)*((_QWORD *)v30 + 13);
      LOWORD(v722) = 257;
      v98 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v96, 35, v97, (uint64_t)v731[1], (uint64_t)v720);
      v719 = 257;
      ICmp = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v93, v95, v98, (const llvm::Twine *)v716);
    }
    v99 = ICmp;
    __p[0] = "bounds.exit";
    LOWORD(v737) = 259;
    v100 = operator new();
    llvm::BasicBlock::BasicBlock();
    __p[0] = "bounds.continue";
    LOWORD(v737) = 259;
    v101 = operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40), v99, v100, v101);
    v102 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
    *((_QWORD *)v102 + 11) = v100;
    *((_QWORD *)v102 + 12) = v100 + 40;
    v30 = v703;
    llvm::IRBuilderBase::CreateRetVoid((AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40));
    v103 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
    *((_QWORD *)v103 + 11) = v101;
    *((_QWORD *)v103 + 12) = v101 + 40;
    v80 = *v677;
  }
  if ((v80 & 0xC) != 4 && *(_DWORD *)(*(_QWORD *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 400) + 1780))
  {
    *((_QWORD *)v30 + 6) |= 1uLL;
    v80 = *v677;
  }
  v722 = 0u;
  v723 = 0u;
  *(_OWORD *)v720 = 0u;
  v721 = 0u;
  if ((v80 & 3) - 1 > 1)
  {
    SampleResultType = AGCLLVMDriverCDMBlitShader::getSampleResultType(v30, *v675, v80);
    if ((*v677 & 0x30) != 0)
      v108 = 3;
    else
      v108 = 1;
    v690 = v108;
    v109 = (llvm::Value *)llvm::ConstantInt::get();
    v110 = llvm::ConstantInt::get();
    if ((*((_BYTE *)v677 + 2) & 8) != 0)
    {
      v730 = 0;
      v728 = 0;
      v729 = 0;
      v727 = 0;
      AGCLLVMDriverShader::buildRegionOffsets(v30, &v727, &v728, "agc.dest_sizes");
      AGCLLVMDriverShader::buildRegionOffsets(v30, &v729, &v730, "agc.dest_offsets");
      __p[0] = "read_added_block";
      LOWORD(v737) = 259;
      v121 = operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "exit";
      LOWORD(v737) = 259;
      v673 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "sample_block";
      LOWORD(v737) = 259;
      v122 = operator new();
      llvm::BasicBlock::BasicBlock();
      v109 = v729;
      v111 = v730;
      v123 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      v124 = (llvm::CmpInst **)*((_QWORD *)v30 + 12);
      LOWORD(v737) = 257;
      v125 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v123, 36, v124, (uint64_t)v729, (uint64_t)__p);
      v126 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      v127 = (llvm::CmpInst **)*((_QWORD *)v30 + 13);
      v719 = 257;
      v128 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v126, 36, v127, (uint64_t)v111, (uint64_t)v716);
      v734 = 257;
      v129 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v123, v125, v128, (const llvm::Twine *)v731);
      v130 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      v131 = (llvm::CmpInst **)*((_QWORD *)v30 + 12);
      v726 = 257;
      v132 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v130, 35, v131, (uint64_t)v727, (uint64_t)&v724);
      v715 = 257;
      v133 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v123, v129, v132, (const llvm::Twine *)v714);
      v134 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      v135 = (llvm::CmpInst **)*((_QWORD *)v30 + 13);
      v713 = 257;
      v136 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v134, 35, v135, (uint64_t)v728, (uint64_t)v712);
      v711 = 257;
      v137 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v123, v133, v136, (const llvm::Twine *)v710);
      v674 = (llvm::BasicBlock *)v121;
      llvm::IRBuilderBase::CreateCondBr(v123, v137, v121, v122);
      v138 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      v672 = (llvm::BasicBlock *)v122;
      *((_QWORD *)v138 + 11) = v122;
      *((_QWORD *)v138 + 12) = v122 + 40;
    }
    else
    {
      v111 = (llvm::Value *)v110;
      v672 = 0;
      v673 = 0;
      v674 = 0;
    }
    v139 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
    v140 = (llvm::Value *)*((_QWORD *)v30 + 12);
    LOWORD(v737) = 257;
    Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v139, v140, v109, (const llvm::Twine *)__p);
    v142 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
    v143 = (llvm::Value *)*((_QWORD *)v30 + 13);
    LOWORD(v737) = 257;
    v144 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v142, v143, v111, (const llvm::Twine *)__p);
    v145 = (llvm::Value *)llvm::UndefValue::get();
    v146 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
    LOWORD(v737) = 257;
    v147 = (llvm::IRBuilderBase *)(v146 + 40);
    v148 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v147, v145, Sub, v148, (const llvm::Twine *)__p);
    v150 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
    LOWORD(v737) = 257;
    v151 = (llvm::IRBuilderBase *)(v150 + 40);
    v152 = (llvm::Value *)llvm::ConstantInt::get();
    v153 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v151, InsertElement, v144, v152, (const llvm::Twine *)__p);
    v154 = v677;
    v155 = *v677;
    if ((*v677 & 0x8000) != 0)
    {
      v156 = (llvm::Value *)AGCLLVMDriverShader::buildRegionOffsets(v30, "agc.region_offsets");
      v157 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      LOWORD(v737) = 257;
      v153 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v157, v153, v156, (const llvm::Twine *)__p);
      v155 = *v677;
    }
    if ((v155 & 0x30) != 0)
    {
      v158 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p[0] = "agc.texture_read_slice";
      LOWORD(v737) = 259;
      v159 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v159 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v160 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      v161 = *((_QWORD *)v160 + 47);
      v162 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v160 + 32), v158);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v161, v162);
      v163 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24));
      LOWORD(v737) = 257;
      v165 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v158, v164);
      v166 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v163 + 5, v165, (uint64_t)v158, 0, (uint64_t)__p);
      v167 = AGCLLVMBuilder::extendVector((AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 32), v153, 4);
      v168 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      LOWORD(v737) = 257;
      v169 = (llvm::IRBuilderBase *)(v168 + 40);
      v170 = (llvm::Value *)llvm::ConstantInt::get();
      v154 = v677;
      v153 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v169, v167, v166, v170, (const llvm::Twine *)__p);
    }
    v171 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
    v172 = (llvm::Type *)llvm::FixedVectorType::get();
    LOWORD(v737) = 257;
    UIToFP = (llvm::Value *)llvm::IRBuilderBase::CreateUIToFP(v171, v153, v172, (const llvm::Twine *)__p);
    if ((*((_BYTE *)v154 + 2) & 4) != 0)
    {
      v173 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p[0] = "agc.step_x";
      v174 = v30;
      LOWORD(v737) = 259;
      v175 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v175 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v176 = (char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24);
      v177 = *((_QWORD *)v176 + 47);
      v178 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v176 + 32), v173);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v177, v178);
      v179 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p[0] = "agc.step_y";
      LOWORD(v737) = 259;
      v180 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v180 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v181 = (char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24);
      v182 = *((_QWORD *)v181 + 47);
      v183 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v181 + 32), v179);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v182, v183);
      v184 = (uint64_t *)((char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24));
      LOWORD(v737) = 257;
      v186 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v173, v185);
      v187 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v184 + 5, v186, (uint64_t)v173, 0, (uint64_t)__p);
      v188 = (uint64_t *)((char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24));
      LOWORD(v737) = 257;
      v190 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v179, v189);
      v191 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v188 + 5, v190, (uint64_t)v179, 0, (uint64_t)__p);
      if ((*(_BYTE *)v154 & 0x30) != 0)
      {
        v192 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        __p[0] = "agc.step_z";
        LOWORD(v737) = 259;
        v193 = llvm::GlobalVariable::GlobalVariable();
        *(_BYTE *)(v193 + 80) |= 1u;
        llvm::GlobalObject::setSection();
        v194 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
        v195 = *((_QWORD *)v194 + 47);
        v196 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v194 + 32), v192);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v195, v196);
        v197 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24));
        LOWORD(v737) = 257;
        v199 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v192, v198);
        v200 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v197 + 5, v199, (uint64_t)v192, 0, (uint64_t)__p);
        __p[0] = (void *)llvm::ConstantFP::get();
        __p[1] = (void *)llvm::ConstantFP::get();
        *(_QWORD *)&v736 = llvm::ConstantFP::get();
        *((_QWORD *)&v736 + 1) = llvm::ConstantFP::get();
        v201 = llvm::ConstantVector::get();
        v202 = (llvm::Value *)llvm::UndefValue::get();
        v203 = (char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24);
        LOWORD(v737) = 257;
        v204 = (llvm::IRBuilderBase *)(v203 + 40);
        v205 = (llvm::Value *)llvm::ConstantInt::get();
        v206 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v204, v202, v187, v205, (const llvm::Twine *)__p);
        v207 = (char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24);
        LOWORD(v737) = 257;
        v208 = (llvm::IRBuilderBase *)(v207 + 40);
        v209 = (llvm::Value *)llvm::ConstantInt::get();
        v210 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v208, v206, v191, v209, (const llvm::Twine *)__p);
        v211 = (char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24);
        LOWORD(v737) = 257;
        v212 = (llvm::IRBuilderBase *)(v211 + 40);
        v213 = (llvm::Value *)llvm::ConstantInt::get();
        v214 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v212, v210, v200, v213, (const llvm::Twine *)__p);
        v215 = (char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24);
        v216 = (llvm::Value *)llvm::ConstantFP::get();
        LOWORD(v737) = 257;
        v217 = (llvm::Value *)llvm::ConstantInt::get();
        v218 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v215 + 40), v214, v216, v217, (const llvm::Twine *)__p);
        v219 = (uint64_t)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24) + 40;
        LOWORD(v737) = 257;
        FAdd = llvm::IRBuilderBase::CreateFAdd(v219, (uint64_t)UIToFP, v201, (uint64_t)__p);
        v719 = 257;
        v221 = v219;
      }
      else
      {
        __p[0] = (void *)llvm::ConstantFP::get();
        __p[1] = (void *)llvm::ConstantFP::get();
        v272 = llvm::ConstantVector::get();
        v273 = (llvm::Value *)llvm::UndefValue::get();
        v274 = (char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24);
        LOWORD(v737) = 257;
        v275 = (llvm::IRBuilderBase *)(v274 + 40);
        v276 = (llvm::Value *)llvm::ConstantInt::get();
        v277 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v275, v273, v187, v276, (const llvm::Twine *)__p);
        v278 = (char *)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24);
        LOWORD(v737) = 257;
        v279 = (llvm::IRBuilderBase *)(v278 + 40);
        v280 = (llvm::Value *)llvm::ConstantInt::get();
        v218 = llvm::IRBuilderBase::CreateInsertElement(v279, v277, v191, v280, (const llvm::Twine *)__p);
        v281 = (uint64_t)v174 + *(_QWORD *)(*(_QWORD *)v174 - 24) + 40;
        LOWORD(v737) = 257;
        FAdd = llvm::IRBuilderBase::CreateFAdd(v281, (uint64_t)UIToFP, v272, (uint64_t)__p);
        v719 = 257;
        v221 = v281;
      }
      UIToFP = (llvm::Value *)llvm::IRBuilderBase::CreateFMul(v221, FAdd, v218, (uint64_t)v716);
      v30 = v174;
    }
    ImageStateGlobal = AGCLLVMDriverShader::getImageStateGlobal(v30);
    TextureHeapGlobal = AGCLLVMDriverShader::getTextureHeapGlobal(v30, 1u);
    SamplerStateGlobal = AGCLLVMDriverShader::getSamplerStateGlobal(v30);
    v282 = 0;
    v283 = (*v154 >> 13) & 3;
    do
    {
      LODWORD(__p[0]) = 0;
      HIDWORD(__p[0]) = v690;
      *(_QWORD *)&v736 = 0;
      *(_DWORD *)((char *)&v736 + 7) = 0;
      v737 = 0u;
      v738 = 0u;
      v739 = 0u;
      v740 = 0u;
      v741 = 0;
      v742 = 0u;
      v743 = 0u;
      v744 = 0u;
      v745 = 0;
      v752 = 0;
      v753 = 0;
      memset(v747, 0, 44);
      v748 = 0;
      v749 = 0;
      v751 = 0;
      v750 = 0;
      v754 = 1;
      v755 = 0;
      v756 = 0;
      v746 = 4;
      LODWORD(__p[1]) = SampleResultType;
      AGCLLVMDriverShader::setSampleArgs(v30, __p, 0, ImageStateGlobal, (uint64_t)SamplerStateGlobal, TextureHeapGlobal);
      *(_QWORD *)&v744 = UIToFP;
      if (v283)
      {
        v284 = llvm::ConstantInt::get();
        v285 = 0;
        v748 = v284;
        v746 = 3;
      }
      else
      {
        v748 = 0;
        v746 = 1;
        v285 = llvm::ConstantFP::get();
      }
      BYTE6(v736) = 1;
      v747[0] = v285;
      v745 = 0;
      v286 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      v287 = *((_QWORD *)v286 + 50);
      *(_OWORD *)v716 = *(_OWORD *)(v286 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v286 + 40));
      v718 = *((_DWORD *)v286 + 34);
      v720[v282] = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, void **))(*(_QWORD *)v287 + 272))(v287, v716, __p);
      if (v717)
        llvm::MetadataTracking::untrack();
      ++v282;
      v30 = v703;
    }
    while (!(v282 >> v283));
    v271 = v677;
    if ((*((_BYTE *)v677 + 2) & 8) != 0)
    {
      llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40), v673);
      v288 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
      *((_QWORD *)v288 + 11) = v674;
      *((_QWORD *)v288 + 12) = (char *)v674 + 40;
      DestinationTexture = (llvm::Value *)AGCLLVMDriverCDMBlitShader::readDestinationTexture(v703, v677, SampleResultType);
      llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40), v673);
      v290 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
      *((_QWORD *)v290 + 11) = v673;
      *((_QWORD *)v290 + 12) = (char *)v673 + 40;
      v291 = (AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
      v292 = *(llvm::Type **)DestinationTexture;
      LOWORD(v737) = 257;
      PHI = llvm::IRBuilderBase::CreatePHI(v291, v292, 2, (const llvm::Twine *)__p);
      llvm::PHINode::addIncoming(PHI, v720[0], v672);
      llvm::PHINode::addIncoming(PHI, DestinationTexture, v674);
      v720[0] = PHI;
    }
  }
  else
  {
    AGCLLVMDriverShader::getFormatInfo((uint64_t)__p, v30, (v80 >> 8) & 0x1F);
    v684 = v736;
    v104 = (llvm::Type *)__p[0];
    if ((v80 & 0x100000) != 0)
    {
      v105 = *(llvm::Type **)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 232);
      v106 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      v107 = "agc.dst_buffer_address";
    }
    else
    {
      v105 = (llvm::Type *)__p[1];
      v106 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      v107 = "agc.src_buffer_address";
    }
    __p[0] = (void *)v107;
    LOWORD(v737) = 259;
    llvm::GlobalVariable::GlobalVariable();
    *((_BYTE *)v106 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v112 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
    v113 = *((_QWORD *)v112 + 47);
    v114 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v112 + 32), v106);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v113, v114);
    v115 = (uint64_t *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24));
    v116 = (llvm::Type *)llvm::PointerType::get();
    LOWORD(v737) = 257;
    v691 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v115 + 5, v116, (uint64_t)v106, 0, (uint64_t)__p);
    v117 = (llvm::Value *)llvm::ConstantInt::get();
    v118 = llvm::ConstantInt::get();
    if ((*((_BYTE *)v677 + 2) & 8) != 0)
    {
      v730 = 0;
      v728 = 0;
      v729 = 0;
      v727 = 0;
      AGCLLVMDriverShader::buildRegionOffsets(v30, &v727, &v728, "agc.dest_sizes");
      AGCLLVMDriverShader::buildRegionOffsets(v30, &v729, &v730, "agc.dest_offsets");
      __p[0] = "read_added_block";
      LOWORD(v737) = 259;
      v681 = v104;
      v222 = v105;
      v223 = operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "exit";
      LOWORD(v737) = 259;
      v676 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "sample_block";
      LOWORD(v737) = 259;
      v120 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v117 = v729;
      v119 = v730;
      v224 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
      v225 = (llvm::CmpInst **)*((_QWORD *)v703 + 12);
      LOWORD(v737) = 257;
      v226 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v224, 36, v225, (uint64_t)v729, (uint64_t)__p);
      v227 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
      v228 = (llvm::CmpInst **)*((_QWORD *)v703 + 13);
      v719 = 257;
      v229 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v227, 36, v228, (uint64_t)v119, (uint64_t)v716);
      v734 = 257;
      v230 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v224, v226, v229, (const llvm::Twine *)v731);
      v231 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
      v232 = (llvm::CmpInst **)*((_QWORD *)v703 + 12);
      v726 = 257;
      v233 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v231, 35, v232, (uint64_t)v727, (uint64_t)&v724);
      v715 = 257;
      v234 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v224, v230, v233, (const llvm::Twine *)v714);
      v235 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
      v236 = (llvm::CmpInst **)*((_QWORD *)v703 + 13);
      v713 = 257;
      v237 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v235, 35, v236, (uint64_t)v728, (uint64_t)v712);
      v711 = 257;
      v238 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)v224, v234, v237, (const llvm::Twine *)v710);
      v239 = v224;
      v30 = v703;
      v678 = (llvm::BasicBlock *)v223;
      v240 = v223;
      v105 = v222;
      v104 = v681;
      llvm::IRBuilderBase::CreateCondBr(v239, v238, v240, (uint64_t)v120);
      v241 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      *((_QWORD *)v241 + 11) = v120;
      *((_QWORD *)v241 + 12) = (char *)v120 + 40;
    }
    else
    {
      v119 = (llvm::Value *)v118;
      v120 = 0;
      v676 = 0;
      v678 = 0;
    }
    v242 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
    v243 = (llvm::Value *)*((_QWORD *)v30 + 12);
    LOWORD(v737) = 257;
    v244 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v242, v243, v117, (const llvm::Twine *)__p);
    v245 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
    v246 = (llvm::Value *)*((_QWORD *)v30 + 13);
    LOWORD(v737) = 257;
    v247 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v245, v246, v119, (const llvm::Twine *)__p);
    v248 = *v677;
    if ((*v677 & 0x120000) != 0)
    {
      v249 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p[0] = "agc.buffer_stride";
      LOWORD(v737) = 259;
      v250 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v250 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v251 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      v252 = *((_QWORD *)v251 + 47);
      v253 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v251 + 32), v249);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v252, v253);
      v254 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      v255 = (llvm::Type *)*((_QWORD *)v254 + 29);
      LOWORD(v737) = 257;
      v256 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v254 + 5, v255, (uint64_t)v249, 0, (uint64_t)__p);
      v248 = *v677;
    }
    else
    {
      v256 = 0;
    }
    if ((v248 & 3) == 2)
    {
      if ((v248 & 0x800000) != 0)
      {
        v30 = v703;
        v264 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
        *(_OWORD *)v731 = *(_OWORD *)(v264 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v264 + 40));
        v733 = *((_DWORD *)v264 + 34);
        v265 = (llvm::Value *)AGCLLVMDriverCDMShader::buildLocalID((uint64_t)v30, (__int128 *)v731, *(_QWORD *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 232), 0);
        if (v732)
          llvm::MetadataTracking::untrack();
        v266 = (AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
        v267 = (llvm::Value *)llvm::ConstantInt::get();
        LOWORD(v737) = 257;
        v268 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v266, v265, v267, (const llvm::Twine *)__p);
        v257 = (*v677 >> 8) & 0x1F;
        v269 = (AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
        LOWORD(v737) = 257;
        GEP = llvm::IRBuilderBase::CreateGEP(v269, v105, v691, v268, (const llvm::Twine *)__p);
        v719 = 257;
        v259 = v716;
        v258 = (uint64_t *)v269;
        v260 = v105;
      }
      else
      {
        v257 = (v248 >> 8) & 0x1F;
        v30 = v703;
        v258 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
        LOWORD(v737) = 257;
        v259 = __p;
        v260 = v105;
        GEP = (uint64_t)v691;
      }
      v270 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v258, v260, GEP, 0, (uint64_t)v259);
      v720[0] = AGCLLVMDriverShader::buildUnpack(v30, v257, v270, (uint64_t)v104);
      v271 = v677;
    }
    else if ((v248 & 0x20000) != 0)
    {
      if ((v248 & 0x8000) != 0)
      {
        v716[0] = 0;
        v731[0] = 0;
        v30 = v703;
        AGCLLVMDriverShader::buildRegionOffsets(v703, v716, v731, "agc.region_offsets");
        v313 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
        LOWORD(v737) = 257;
        v244 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v313, v244, v716[0], (const llvm::Twine *)__p);
        v314 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
        LOWORD(v737) = 257;
        v247 = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v314, v247, v731[0], (const llvm::Twine *)__p);
      }
      else
      {
        v30 = v703;
      }
      v315 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      LOWORD(v737) = 257;
      v316 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v315, v247, v256, (const llvm::Twine *)__p);
      v719 = 257;
      v699 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v315, v316, v244, (const llvm::Twine *)v716);
      v317 = 0;
      v695 = (*v677 >> 13) & 3;
      v271 = v677;
      do
      {
        v318 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
        v319 = (llvm::Value *)llvm::ConstantInt::get();
        LOWORD(v737) = 257;
        Shl = llvm::IRBuilderBase::CreateShl(v318, v699, v319, (const llvm::Twine *)__p);
        v321 = (llvm::Value *)llvm::ConstantInt::get();
        v719 = 257;
        v322 = (llvm::Value *)Shl;
        v30 = v703;
        v323 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v318, v322, v321, (const llvm::Twine *)v716);
        v324 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v703 - 24) + v686 + 32);
        LOWORD(v737) = 257;
        v325 = llvm::IRBuilderBase::CreateGEP(v324, v105, v691, v323, (const llvm::Twine *)__p);
        LODWORD(v318) = (*v677 >> 8) & 0x1F;
        v326 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v703 - 24) + v686 + 32);
        LOWORD(v737) = 257;
        v327 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v326, v105, v325, 0, (uint64_t)__p);
        v720[v317++] = AGCLLVMDriverShader::buildUnpack(v703, (int)v318, v327, (uint64_t)v104);
      }
      while (!(v317 >> v695));
    }
    else
    {
      if ((v248 & 0x100000) != 0)
      {
        v294 = v703;
        v295 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
        v296 = (llvm::Type *)*((_QWORD *)v295 + 29);
        LOWORD(v737) = 257;
        v297 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v295 + 5, v296, (uint64_t)v691, 0, (uint64_t)__p);
        v298 = (AGCLLVMDriverShader *)((char *)v294 + *(_QWORD *)(*(_QWORD *)v294 - 24) + 40);
        v299 = (llvm::Value *)llvm::ConstantInt::get();
        LOWORD(v737) = 257;
        v300 = llvm::IRBuilderBase::CreateAnd(v298, v297, v299, (const llvm::Twine *)__p);
        v301 = (char *)v294 + *(_QWORD *)(*(_QWORD *)v294 - 24);
        v302 = *((_QWORD *)v301 + 30);
        LOWORD(v737) = 257;
        v303 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v301 + 40), 39, v300, v302, (uint64_t)__p);
        v304 = (AGCLLVMDriverShader *)((char *)v294 + *(_QWORD *)(*(_QWORD *)v294 - 24) + 40);
        LOWORD(v737) = 257;
        v305 = (llvm::Value *)llvm::ConstantInt::get();
        v306 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v304, v303, v305, (const llvm::Twine *)__p);
        v307 = (char *)v294 + *(_QWORD *)(*(_QWORD *)v294 - 24);
        v308 = (llvm::IRBuilderBase *)(v307 + 40);
        v309 = *((_QWORD *)v307 + 30);
        LOWORD(v737) = 257;
        v310 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v307 + 40), 39, (uint64_t)v256, v309, (uint64_t)__p);
        v719 = 257;
        v311 = llvm::IRBuilderBase::CreateAdd(v308, v306, v310, (const llvm::Twine *)v716);
        v312 = ((unint64_t)*v677 >> 8) & 0x1F;
        switch((int)v312)
        {
          case 1:
            break;
          case 2:
            v312 = 2;
            break;
          case 3:
            v312 = 4;
            break;
          case 4:
          case 5:
          case 6:
          case 7:
            goto LABEL_132;
          case 8:
            v312 = 8;
            break;
          default:
            if ((_DWORD)v312 == 15)
              v312 = 16;
            else
LABEL_132:
              v312 = 0;
            break;
        }
        v334 = 63 - __clz(v312);
        v30 = v703;
        v335 = (uint64_t)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40;
        v336 = llvm::PointerType::get();
        LOWORD(v737) = 257;
        v330 = llvm::IRBuilderBase::CreateCast(v335, 48, v311, v336, (uint64_t)__p);
        v331 = v334 | 0x100;
        v719 = 257;
        v332 = (uint64_t *)v335;
        v333 = v104;
      }
      else
      {
        v262 = (v248 >> 8) & 0x1F;
        v30 = v703;
        v263 = v691;
        switch((int)v262)
        {
          case 1:
            break;
          case 2:
            v262 = 2;
            break;
          case 3:
            v262 = 4;
            break;
          case 4:
          case 5:
          case 6:
          case 7:
            goto LABEL_131;
          case 8:
            v262 = 8;
            break;
          default:
            v263 = v691;
            if ((_DWORD)v262 == 15)
              v262 = 16;
            else
LABEL_131:
              v262 = 0;
            break;
        }
        v328 = 63 - __clz(v262);
        v329 = (AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
        LOWORD(v737) = 257;
        v330 = llvm::IRBuilderBase::CreateGEP(v329, v105, v263, v244, (const llvm::Twine *)__p);
        v331 = v328 | 0x100;
        v719 = 257;
        v332 = (uint64_t *)v329;
        v333 = v105;
      }
      v720[0] = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v332, v333, v330, v331, (uint64_t)v716);
      v271 = v677;
    }
    if ((*((_BYTE *)v271 + 2) & 8) != 0)
    {
      v337 = AGCLLVMBuilder::extendVector((AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 32), v720[0], 4);
      llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40), v676);
      v338 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      *((_QWORD *)v338 + 11) = v678;
      *((_QWORD *)v338 + 12) = (char *)v678 + 40;
      v339 = AGCLLVMDriverCDMBlitShader::readDestinationTexture(v30, v271, v684);
      v340 = (llvm::Value *)v339;
      if ((*(_DWORD *)(*(_QWORD *)v339 + 8) & 0xFE) == 0x12)
        v341 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v339 + 16) + 8);
      else
        v341 = *(_DWORD *)(*(_QWORD *)v339 + 8);
      if (v341 == 13)
      {
        v342 = (uint64_t)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40;
        v343 = *(_QWORD *)v337;
        LOWORD(v737) = 257;
        v340 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v342, 38, (uint64_t)v340, v343, (uint64_t)__p);
      }
      llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40), v676);
      v344 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      *((_QWORD *)v344 + 11) = v676;
      *((_QWORD *)v344 + 12) = (char *)v676 + 40;
      v345 = (AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40);
      v346 = *(llvm::Type **)v340;
      LOWORD(v737) = 257;
      v347 = llvm::IRBuilderBase::CreatePHI(v345, v346, 2, (const llvm::Twine *)__p);
      llvm::PHINode::addIncoming(v347, v337, v120);
      llvm::PHINode::addIncoming(v347, v340, v678);
      v720[0] = v347;
    }
  }
  v348 = *v271;
  if ((*v271 & 0xC) == 4)
  {
    AGCLLVMDriverShader::getFormatInfo((uint64_t)__p, v30, (v348 >> 8) & 0x1F);
    v349 = (llvm::Type *)__p[1];
    if ((v348 & 0x200000) != 0)
    {
      v351 = *(llvm::Type **)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 232);
      v350 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      __p[0] = "agc.dst_buffer_address";
      LOWORD(v737) = 259;
      v30 = v703;
      llvm::GlobalVariable::GlobalVariable();
    }
    else
    {
      v350 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      llvm::PointerType::get();
      __p[0] = "agc.dst_buffer_address";
      LOWORD(v737) = 259;
      llvm::GlobalVariable::GlobalVariable();
      v351 = v349;
    }
    *((_BYTE *)v350 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v379 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
    v380 = v30;
    v381 = *((_QWORD *)v379 + 47);
    v382 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v379 + 32), v350);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v381, v382);
    v383 = (uint64_t *)((char *)v380 + *(_QWORD *)(*(_QWORD *)v380 - 24));
    LOWORD(v737) = 257;
    v385 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v350, v384);
    v386 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v383 + 5, v385, (uint64_t)v350, 0, (uint64_t)__p);
    v387 = *v677;
    if ((*v677 & 0x220000) != 0)
    {
      v388 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p[0] = "agc.buffer_stride";
      LOWORD(v737) = 259;
      v389 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v389 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v390 = (char *)v380 + *(_QWORD *)(*(_QWORD *)v380 - 24);
      v391 = *((_QWORD *)v390 + 47);
      v392 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v390 + 32), v388);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v391, v392);
      v393 = (char *)v380 + *(_QWORD *)(*(_QWORD *)v380 - 24);
      v394 = (llvm::Type *)*((_QWORD *)v393 + 29);
      LOWORD(v737) = 257;
      v395 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v393 + 5, v394, (uint64_t)v388, 0, (uint64_t)__p);
      v387 = *v677;
    }
    else
    {
      v395 = 0;
    }
    if ((v387 & 0x20000) != 0)
    {
      v417 = v703;
      v419 = (llvm::Value *)*((_QWORD *)v703 + 12);
      v418 = (llvm::Value *)*((_QWORD *)v703 + 13);
      v420 = (AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
      LOWORD(v737) = 257;
      v421 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v420, v418, v395, (const llvm::Twine *)__p);
      v422 = (AGCLLVMDriverShader *)((char *)v417 + *(_QWORD *)(*(_QWORD *)v417 - 24) + 40);
      v423 = (llvm::Value *)llvm::ConstantInt::get();
      v719 = 257;
      v424 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v422, v419, v423, (const llvm::Twine *)v716);
      v734 = 257;
      v425 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v420, v421, v424, (const llvm::Twine *)v731);
      v426 = 0;
      v427 = (*v677 >> 13) & 3;
      do
      {
        v428 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v703 - 24) + v686 + 32);
        LOWORD(v737) = 257;
        v429 = llvm::IRBuilderBase::CreateGEP(v428, v351, v386, v425, (const llvm::Twine *)__p);
        v430 = (llvm::Type **)AGCLLVMDriverShader::buildPack(v703, (*v677 >> 8) & 0x1F, v720[v426], (uint64_t)v349);
        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40), v430, v429, 0);
        v431 = (AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
        v432 = (llvm::Value *)llvm::ConstantInt::get();
        LOWORD(v737) = 257;
        v425 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v431, v425, v432, (const llvm::Twine *)__p);
        ++v426;
      }
      while (!(v426 >> v427));
    }
    else if ((v387 & 0x200000) != 0)
    {
      v433 = v703;
      v434 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
      v435 = (llvm::Type *)*((_QWORD *)v434 + 29);
      LOWORD(v737) = 257;
      v436 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v434 + 5, v435, (uint64_t)v386, 0, (uint64_t)__p);
      __p[0] = "write_block";
      LOWORD(v737) = 259;
      v437 = operator new();
      llvm::BasicBlock::BasicBlock();
      __p[0] = "exit";
      LOWORD(v737) = 259;
      v438 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v439 = (AGCLLVMDriverShader *)((char *)v433 + *(_QWORD *)(*(_QWORD *)v433 - 24) + 40);
      LOWORD(v737) = 257;
      v440 = (llvm::Value *)llvm::ConstantInt::get();
      v441 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v439, v436, v440, (const llvm::Twine *)__p);
      v442 = llvm::ConstantInt::get();
      v719 = 257;
      v443 = llvm::IRBuilderBase::CreateICmp((uint64_t *)v439, 33, v441, v442, (uint64_t)v716);
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)v439, v443, v437, (uint64_t)v438);
      v444 = (char *)v433 + *(_QWORD *)(*(_QWORD *)v433 - 24);
      *((_QWORD *)v444 + 11) = v437;
      *((_QWORD *)v444 + 12) = v437 + 40;
      v445 = (AGCLLVMDriverShader *)((char *)v433 + *(_QWORD *)(*(_QWORD *)v433 - 24) + 40);
      v446 = (llvm::Value *)llvm::ConstantInt::get();
      LOWORD(v737) = 257;
      v447 = llvm::IRBuilderBase::CreateAnd(v445, v436, v446, (const llvm::Twine *)__p);
      v448 = (char *)v433 + *(_QWORD *)(*(_QWORD *)v433 - 24);
      v449 = *((_QWORD *)v448 + 30);
      LOWORD(v737) = 257;
      v450 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v448 + 40), 39, v447, v449, (uint64_t)__p);
      v451 = (AGCLLVMDriverShader *)((char *)v433 + *(_QWORD *)(*(_QWORD *)v433 - 24) + 40);
      LOWORD(v737) = 257;
      v452 = (llvm::Value *)llvm::ConstantInt::get();
      v453 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v451, v450, v452, (const llvm::Twine *)__p);
      v454 = (char *)v433 + *(_QWORD *)(*(_QWORD *)v433 - 24);
      v455 = (llvm::IRBuilderBase *)(v454 + 40);
      v456 = *((_QWORD *)v454 + 30);
      LOWORD(v737) = 257;
      v457 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v454 + 40), 39, (uint64_t)v395, v456, (uint64_t)__p);
      v719 = 257;
      v458 = llvm::IRBuilderBase::CreateAdd(v455, v453, v457, (const llvm::Twine *)v716);
      v459 = ((unint64_t)*v677 >> 8) & 0x1F;
      switch((int)v459)
      {
        case 1:
          break;
        case 2:
          v459 = 2;
          break;
        case 3:
          v459 = 4;
          break;
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_201;
        case 8:
          v459 = 8;
          break;
        default:
          if ((_DWORD)v459 == 15)
            v459 = 16;
          else
LABEL_201:
            v459 = 0;
          break;
      }
      v495 = 63 - __clz(v459);
      v417 = v703;
      v496 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
      v497 = (llvm::Type **)v720[0];
      v498 = llvm::PointerType::get();
      LOWORD(v737) = 257;
      v499 = llvm::IRBuilderBase::CreateCast((uint64_t)v496, 48, v458, v498, (uint64_t)__p);
      llvm::IRBuilderBase::CreateAlignedStore(v496, v497, v499, v495 | 0x100);
      llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)v417 + *(_QWORD *)(*(_QWORD *)v417 - 24) + 40), v438);
      v500 = (char *)v417 + *(_QWORD *)(*(_QWORD *)v417 - 24);
      *((_QWORD *)v500 + 11) = v438;
      *((_QWORD *)v500 + 12) = (char *)v438 + 40;
    }
    else
    {
      v416 = (v387 >> 8) & 0x1F;
      v417 = v703;
      switch((int)v416)
      {
        case 1:
          break;
        case 2:
          v416 = 2;
          break;
        case 3:
          v416 = 4;
          break;
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_200;
        case 8:
          v416 = 8;
          break;
        default:
          v417 = v703;
          if ((_DWORD)v416 == 15)
            v416 = 16;
          else
LABEL_200:
            v416 = 0;
          break;
      }
      v490 = 63 - __clz(v416);
      v491 = (AGCLLVMDriverShader *)((char *)v417 + *(_QWORD *)(*(_QWORD *)v417 - 24) + 40);
      v492 = (llvm::Type **)v720[0];
      v493 = (llvm::Value *)*((_QWORD *)v417 + 12);
      LOWORD(v737) = 257;
      v494 = llvm::IRBuilderBase::CreateGEP(v491, v351, v386, v493, (const llvm::Twine *)__p);
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v491, v492, v494, v490 | 0x100);
    }
    llvm::IRBuilderBase::CreateRetVoid((AGCLLVMDriverShader *)((char *)v417 + *(_QWORD *)(*(_QWORD *)v417 - 24) + 40));
    return v417;
  }
  if ((v348 & 0x1000000) == 0)
  {
    v700 = AGCLLVMDriverCDMBlitShader::getSampleResultType(v30, *v675, *v271);
    llvm::FixedVectorType::get();
    v352 = (llvm::Value *)llvm::UndefValue::get();
    v353 = 0;
    v354 = 1;
    do
    {
      v355 = v354;
      v356 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      v357 = (llvm::Value *)*((_QWORD *)v30 + v353 + 12);
      LOWORD(v737) = 257;
      v358 = (llvm::IRBuilderBase *)(v356 + 40);
      v359 = (llvm::Value *)llvm::ConstantInt::get();
      v360 = v358;
      v30 = v703;
      v352 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v360, v352, v357, v359, (const llvm::Twine *)__p);
      v354 = 0;
      v353 = 1;
    }
    while ((v355 & 1) != 0);
    v361 = *v271;
    if ((*v271 & 0x10000) != 0)
    {
      v362 = (llvm::Value *)AGCLLVMDriverShader::buildRegionOffsets(v703, "agc.dest_padded_offsets");
      v363 = (AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
      LOWORD(v737) = 257;
      v352 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v363, v352, v362, (const llvm::Twine *)__p);
      v361 = *v271;
    }
    if ((v361 & 0xC0) != 0)
    {
      v364 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
      __p[0] = "agc.texture_write_slice";
      LOWORD(v737) = 259;
      v365 = llvm::GlobalVariable::GlobalVariable();
      *(_BYTE *)(v365 + 80) |= 1u;
      llvm::GlobalObject::setSection();
      v366 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
      v367 = *((_QWORD *)v366 + 47);
      v368 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v366 + 32), v364);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v367, v368);
      v369 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24));
      LOWORD(v737) = 257;
      v371 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v364, v370);
      v372 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v369 + 5, v371, (uint64_t)v364, 0, (uint64_t)__p);
      v373 = AGCLLVMBuilder::extendVector((AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 32), v352, 4);
      v374 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
      LOWORD(v737) = 257;
      v375 = (llvm::IRBuilderBase *)(v374 + 40);
      v376 = (llvm::Value *)llvm::ConstantInt::get();
      v377 = v375;
      v30 = v703;
      v683 = llvm::IRBuilderBase::CreateInsertElement(v377, v373, v372, v376, (const llvm::Twine *)__p);
      v378 = 3;
    }
    else
    {
      v683 = (uint64_t)v352;
      v378 = 1;
    }
    v697 = v378;
    v693 = AGCLLVMDriverShader::getWriteImageStateGlobal(v30);
    v687 = AGCLLVMDriverShader::getTextureHeapGlobal(v30, 0);
    v460 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p[0] = "agc.image_pack_format";
    LOWORD(v737) = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v461 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
    v462 = *((_QWORD *)v461 + 47);
    v463 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v461 + 32), v460);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v462, v463);
    RetVoid = (llvm::Instruction *)llvm::IRBuilderBase::CreateRetVoid((AGCLLVMDriverShader *)((char *)v30
                                                                                            + *(_QWORD *)(*(_QWORD *)v30 - 24)
                                                                                            + 40));
    llvm::IRBuilderBase::SetInsertPoint((AGCLLVMDriverShader *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 40), RetVoid);
    v465 = 0;
    v466 = (*v677 >> 13) & 3;
    do
    {
      LODWORD(__p[0]) = 3;
      HIDWORD(__p[0]) = v697;
      *(_QWORD *)&v736 = 0;
      *(_DWORD *)((char *)&v736 + 7) = 0;
      v737 = 0u;
      v738 = 0u;
      v739 = 0u;
      v740 = 0u;
      v741 = 0;
      v742 = 0u;
      v743 = 0u;
      v744 = 0u;
      v745 = 0;
      v752 = 0;
      v753 = 0;
      memset(v747, 0, 44);
      v751 = 0;
      v749 = 0;
      v750 = 0;
      v748 = 0;
      v754 = 1;
      v755 = 0;
      v756 = 0;
      v746 = 4;
      LODWORD(__p[1]) = v700;
      v749 = v720[v465];
      AGCLLVMDriverShader::setImageWriteSampleArgs(v703, (uint64_t)__p, v693, v687);
      *(_QWORD *)&v740 = v460;
      *(_QWORD *)&v744 = v683;
      if (v466)
      {
        v467 = llvm::ConstantInt::get();
        v468 = 0;
        v748 = v467;
        v746 = 3;
      }
      else
      {
        v748 = 0;
        v746 = 1;
        v468 = llvm::ConstantFP::get();
      }
      v747[0] = v468;
      v469 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
      v470 = *((_QWORD *)v469 + 50);
      *(_OWORD *)v716 = *(_OWORD *)(v469 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v469 + 40));
      v718 = *((_DWORD *)v469 + 34);
      (*(void (**)(uint64_t, llvm::Value **, void **))(*(_QWORD *)v470 + 272))(v470, v716, __p);
      if (v717)
        llvm::MetadataTracking::untrack();
      ++v465;
    }
    while (!(v465 >> v466));
    return v703;
  }
  v396 = v720[0];
  v397 = (AGCLLVMGen3TargetLowerer *)(*v675 & 0x1F);
  v398 = ~(-1 << (*v675 >> 5));
  v399 = llvm::ConstantInt::get();
  v400 = (llvm::Value *)llvm::UndefValue::get();
  v401 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
  v402 = (llvm::Value *)*((_QWORD *)v30 + 14);
  LOWORD(v737) = 257;
  v403 = (llvm::IRBuilderBase *)(v401 + 40);
  v404 = (llvm::Value *)llvm::ConstantInt::get();
  v405 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v403, v400, v402, v404, (const llvm::Twine *)__p);
  v406 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
  v407 = (llvm::Value *)*((_QWORD *)v30 + 15);
  LOWORD(v737) = 257;
  v408 = (llvm::IRBuilderBase *)(v406 + 40);
  v409 = (llvm::Value *)llvm::ConstantInt::get();
  v410 = llvm::IRBuilderBase::CreateInsertElement(v408, v405, v407, v409, (const llvm::Twine *)__p);
  v411 = *(_QWORD *)v396;
  v701 = v398;
  v692 = (llvm::Value *)v410;
  v696 = v399;
  switch((_DWORD)v397)
  {
    case 2:
      v471 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      v472 = v471 + 32;
      if (v411 != *((_QWORD *)v471 + 27))
      {
        if (v411 == *((_QWORD *)v471 + 33))
        {
          v473 = (llvm::Value *)llvm::UndefValue::get();
          v501 = 1;
          do
          {
            v502 = v501;
            v503 = v30;
            v504 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
            v505 = *((_QWORD *)v504 + 50);
            *(_OWORD *)v716 = *(_OWORD *)(v504 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v504 + 40));
            v718 = *((_DWORD *)v504 + 34);
            v506 = (char *)v503 + *(_QWORD *)(*(_QWORD *)v503 - 24);
            LOWORD(v737) = 257;
            v507 = (llvm::IRBuilderBase *)(v506 + 40);
            v508 = (llvm::Value *)llvm::ConstantInt::get();
            Element = llvm::IRBuilderBase::CreateExtractElement(v507, v396, v508, (const llvm::Twine *)__p);
            v510 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v505 + 96))(v505, v716, Element, 8, 1, 32);
            if (v717)
              llvm::MetadataTracking::untrack();
            v511 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
            LOWORD(v737) = 257;
            v512 = (llvm::IRBuilderBase *)(v511 + 40);
            v513 = (llvm::Value *)llvm::ConstantInt::get();
            v514 = v512;
            v30 = v703;
            v473 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v514, v473, v510, v513, (const llvm::Twine *)__p);
            v501 = 0;
          }
          while ((v502 & 1) != 0);
          goto LABEL_227;
        }
        if (v411 == *((_QWORD *)v471 + 41))
        {
          v473 = (llvm::Value *)llvm::UndefValue::get();
          for (i = 0; i != 4; ++i)
          {
            v475 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
            v476 = *((_QWORD *)v475 + 50);
            *(_OWORD *)v716 = *(_OWORD *)(v475 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v475 + 40));
            v718 = *((_DWORD *)v475 + 34);
            v477 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
            LOWORD(v737) = 257;
            v478 = (llvm::IRBuilderBase *)(v477 + 40);
            v479 = (llvm::Value *)llvm::ConstantInt::get();
            v480 = llvm::IRBuilderBase::CreateExtractElement(v478, v396, v479, (const llvm::Twine *)__p);
            v481 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v476 + 96))(v476, v716, v480, 8, 1, 32);
            if (v717)
              llvm::MetadataTracking::untrack();
            v482 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
            LOWORD(v737) = 257;
            v483 = (llvm::IRBuilderBase *)(v482 + 40);
            v484 = (llvm::Value *)llvm::ConstantInt::get();
            v485 = v483;
            v30 = v703;
            v473 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v485, v473, v481, v484, (const llvm::Twine *)__p);
          }
          goto LABEL_227;
        }
        break;
      }
      v488 = *((_QWORD *)v471 + 50);
      *(_OWORD *)__p = *(_OWORD *)(v471 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v471 + 40));
      DWORD2(v736) = *((_DWORD *)v472 + 26);
      v415 = (*(uint64_t (**)(uint64_t, void **, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v488 + 96))(v488, __p, v396, 8, 1, 32);
LABEL_204:
      v473 = (llvm::Value *)v415;
      if ((_QWORD)v736)
        llvm::MetadataTracking::untrack();
      goto LABEL_227;
    case 6:
      v486 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      v487 = v486 + 32;
      if (v411 != *((_QWORD *)v486 + 28))
      {
        if (v411 == *((_QWORD *)v486 + 34))
        {
          v473 = (llvm::Value *)llvm::UndefValue::get();
          v515 = 1;
          do
          {
            v516 = v515;
            v517 = v30;
            v518 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
            v519 = *((_QWORD *)v518 + 50);
            *(_OWORD *)v716 = *(_OWORD *)(v518 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v518 + 40));
            v718 = *((_DWORD *)v518 + 34);
            v520 = (char *)v517 + *(_QWORD *)(*(_QWORD *)v517 - 24);
            LOWORD(v737) = 257;
            v521 = (llvm::IRBuilderBase *)(v520 + 40);
            v522 = (llvm::Value *)llvm::ConstantInt::get();
            v523 = llvm::IRBuilderBase::CreateExtractElement(v521, v396, v522, (const llvm::Twine *)__p);
            v524 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v519 + 96))(v519, v716, v523, 16, 1, 32);
            if (v717)
              llvm::MetadataTracking::untrack();
            v525 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
            LOWORD(v737) = 257;
            v526 = (llvm::IRBuilderBase *)(v525 + 40);
            v527 = (llvm::Value *)llvm::ConstantInt::get();
            v528 = v526;
            v30 = v703;
            v473 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v528, v473, v524, v527, (const llvm::Twine *)__p);
            v515 = 0;
          }
          while ((v516 & 1) != 0);
          goto LABEL_227;
        }
        if (v411 == *((_QWORD *)v486 + 42))
        {
          v473 = (llvm::Value *)llvm::UndefValue::get();
          for (j = 0; j != 4; ++j)
          {
            v530 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
            v531 = *((_QWORD *)v530 + 50);
            *(_OWORD *)v716 = *(_OWORD *)(v530 + 88);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v530 + 40));
            v718 = *((_DWORD *)v530 + 34);
            v532 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
            LOWORD(v737) = 257;
            v533 = (llvm::IRBuilderBase *)(v532 + 40);
            v534 = (llvm::Value *)llvm::ConstantInt::get();
            v535 = llvm::IRBuilderBase::CreateExtractElement(v533, v396, v534, (const llvm::Twine *)__p);
            v536 = (llvm::Value *)(*(uint64_t (**)(uint64_t, llvm::Value **, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v531 + 96))(v531, v716, v535, 16, 1, 32);
            if (v717)
              llvm::MetadataTracking::untrack();
            v537 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
            LOWORD(v737) = 257;
            v538 = (llvm::IRBuilderBase *)(v537 + 40);
            v539 = (llvm::Value *)llvm::ConstantInt::get();
            v540 = v538;
            v30 = v703;
            v473 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v540, v473, v536, v539, (const llvm::Twine *)__p);
          }
          goto LABEL_227;
        }
        break;
      }
      v489 = *((_QWORD *)v486 + 50);
      *(_OWORD *)__p = *(_OWORD *)(v486 + 88);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v486 + 40));
      DWORD2(v736) = *((_DWORD *)v487 + 26);
      v415 = (*(uint64_t (**)(uint64_t, void **, llvm::Value *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v489 + 96))(v489, __p, v396, 16, 1, 32);
      goto LABEL_204;
    case 3:
      v412 = (char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24);
      if (v411 == *((_QWORD *)v412 + 27))
      {
        v413 = v412 + 32;
        v414 = *((_QWORD *)v412 + 50);
        *(_OWORD *)__p = *(_OWORD *)(v412 + 88);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v412 + 40));
        DWORD2(v736) = *((_DWORD *)v413 + 26);
        v415 = (*(uint64_t (**)(uint64_t, void **, llvm::Value *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v414 + 96))(v414, __p, v396, 8, 0, 32);
        goto LABEL_204;
      }
      break;
  }
  v473 = v396;
LABEL_227:
  v541 = llvm::ConstantInt::get();
  v542 = *(_QWORD *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24) + 400);
  v543 = v30;
  v544 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v542 + 680))(v542);
  v545 = (char *)v543 + *(_QWORD *)(*(_QWORD *)v543 - 24);
  *(_OWORD *)v716 = *(_OWORD *)(v545 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v545 + 40));
  v718 = *((_DWORD *)v545 + 34);
  AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromFormat((uint64_t)__p, v544, (__int128 *)v716, v397, v701, (*(unsigned __int16 *)v677 >> 13) & 3, *((unsigned __int16 *)v543 + 40), (uint64_t)v473, v696, v541, (uint64_t)v692);
  if (v717)
    llvm::MetadataTracking::untrack();
  if (__p[0])
  {
    v546 = (uint64_t)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 32;
    *(_OWORD *)v731 = *(_OWORD *)__p;
    v732 = v736;
    if ((_QWORD)v736)
      llvm::MetadataTracking::track();
    v733 = DWORD2(v736);
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)v731, v546 + 8);
    if (v732)
      llvm::MetadataTracking::untrack();
  }
  if ((_QWORD)v736)
    llvm::MetadataTracking::untrack();
  v547 = *v677 & 0xC0;
  v548 = 1;
  v549 = (llvm::Value *)llvm::ConstantInt::get();
  v550 = (llvm::Value *)llvm::ConstantInt::get();
  v551 = (llvm::Value *)llvm::UndefValue::get();
  v552 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
  LOWORD(v737) = 257;
  v553 = (llvm::IRBuilderBase *)(v552 + 40);
  v554 = (llvm::Value *)llvm::ConstantInt::get();
  v555 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v553, v551, v550, v554, (const llvm::Twine *)__p);
  v556 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
  v557 = (llvm::Value *)*((_QWORD *)v703 + 14);
  LOWORD(v737) = 257;
  v558 = (llvm::IRBuilderBase *)(v556 + 40);
  v559 = (llvm::Value *)llvm::ConstantInt::get();
  v560 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v558, v555, v557, v559, (const llvm::Twine *)__p);
  v561 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
  v562 = (llvm::Value *)*((_QWORD *)v703 + 15);
  LOWORD(v737) = 257;
  v563 = (llvm::IRBuilderBase *)(v561 + 40);
  v564 = (llvm::Value *)llvm::ConstantInt::get();
  v565 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v563, v560, v562, v564, (const llvm::Twine *)__p);
  v566 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
  LOWORD(v737) = 257;
  v567 = (llvm::IRBuilderBase *)(v566 + 40);
  v568 = (llvm::Value *)llvm::ConstantInt::get();
  v569 = llvm::IRBuilderBase::CreateInsertElement(v567, v565, v549, v568, (const llvm::Twine *)__p);
  v570 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
  v571 = (uint64_t)(v570 + 40);
  v572 = *((_QWORD *)v570 + 30);
  LOWORD(v737) = 257;
  v573 = llvm::IRBuilderBase::CreateCast((uint64_t)(v570 + 40), 49, v569, v572, (uint64_t)__p);
  v574 = llvm::PointerType::get();
  v719 = 257;
  v702 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v571, 48, v573, v574, (uint64_t)v716);
  v575 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
  v576 = (llvm::CmpInst **)*((_QWORD *)v703 + 14);
  v577 = llvm::ConstantInt::get();
  LOWORD(v737) = 257;
  v578 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v575, 32, v576, v577, (uint64_t)__p);
  v579 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
  v580 = (llvm::CmpInst **)*((_QWORD *)v703 + 15);
  v581 = llvm::ConstantInt::get();
  v719 = 257;
  v582 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(v579, 32, v580, v581, (uint64_t)v716);
  v734 = 257;
  v583 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v575, v578, v582, (const llvm::Twine *)v731);
  v731[0] = (llvm::Value *)llvm::ConstantInt::get();
  v731[1] = (llvm::Value *)llvm::ConstantInt::get();
  AGCLLVMObject::buildWGBarrier((uint64_t)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24), (uint64_t)v731, 2);
  __p[0] = "write_image_block";
  LOWORD(v737) = 259;
  v584 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  __p[0] = "write_image_block.end";
  LOWORD(v737) = 259;
  v585 = (llvm::BasicBlock *)operator new();
  v586 = v703;
  llvm::BasicBlock::BasicBlock();
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 40), v583, (uint64_t)v584, (uint64_t)v585);
  v587 = (char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24);
  *((_QWORD *)v587 + 11) = v585;
  *((_QWORD *)v587 + 12) = (char *)v585 + 40;
  llvm::IRBuilderBase::CreateRetVoid((AGCLLVMDriverShader *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 40));
  v588 = (char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24);
  *((_QWORD *)v588 + 11) = v584;
  *((_QWORD *)v588 + 12) = (char *)v584 + 40;
  llvm::IRBuilderBase::CreateBr((AGCLLVMDriverShader *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 40), v585);
  v589 = (uint64_t)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 40;
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v584);
  llvm::IRBuilderBase::SetInsertPoint(v589, (uint64_t)v584, FirstInsertionPt);
  llvm::FixedVectorType::get();
  v591 = (llvm::Value *)llvm::UndefValue::get();
  v592 = 0;
  do
  {
    v593 = v548;
    v594 = (char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24);
    v595 = (llvm::Value *)*((_QWORD *)v586 + v592 + 12);
    LOWORD(v737) = 257;
    v596 = (llvm::IRBuilderBase *)(v594 + 40);
    v597 = (llvm::Value *)llvm::ConstantInt::get();
    v586 = v703;
    v591 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v596, v591, v595, v597, (const llvm::Twine *)__p);
    v548 = 0;
    v592 = 1;
  }
  while ((v593 & 1) != 0);
  if (v547)
    v598 = 3;
  else
    v598 = 1;
  v599 = *v677;
  if ((*v677 & 0x10000) != 0)
  {
    v600 = (llvm::Value *)AGCLLVMDriverShader::buildRegionOffsets(v703, "agc.dest_padded_offsets");
    v601 = (AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 40);
    LOWORD(v737) = 257;
    v591 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v601, v591, v600, (const llvm::Twine *)__p);
    v599 = *v677;
  }
  if ((v599 & 0xC0) != 0)
  {
    v602 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p[0] = "agc.texture_write_slice";
    LOWORD(v737) = 259;
    v603 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v603 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v604 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
    v605 = *((_QWORD *)v604 + 47);
    v606 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v604 + 32), v602);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v605, v606);
    v607 = (uint64_t *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24));
    LOWORD(v737) = 257;
    v609 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v602, v608);
    v610 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v607 + 5, v609, (uint64_t)v602, 0, (uint64_t)__p);
    v611 = AGCLLVMBuilder::extendVector((AGCLLVMDriverShader *)((char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24) + 32), v591, 4);
    v612 = (char *)v703 + *(_QWORD *)(*(_QWORD *)v703 - 24);
    LOWORD(v737) = 257;
    v613 = (llvm::IRBuilderBase *)(v612 + 40);
    v614 = (llvm::Value *)llvm::ConstantInt::get();
    v586 = v703;
    v591 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v613, v611, v610, v614, (const llvm::Twine *)__p);
  }
  v615 = (llvm::Value *)llvm::UndefValue::get();
  if ((*((_BYTE *)v677 + 2) & 1) != 0)
  {
    v724 = 0;
    v725 = 0;
    AGCLLVMDriverShader::buildRegionOffsets(v586, &v724, &v725, "agc.dest_padded_sizes");
    v624 = (AGCLLVMDriverShader *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 40);
    v625 = (llvm::Value *)*((_QWORD *)v586 + 12);
    LOWORD(v737) = 257;
    v626 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub(v624, v724, v625, (const llvm::Twine *)__p);
    v627 = (uint64_t *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 40);
    v628 = llvm::ConstantInt::get();
    LOWORD(v737) = 257;
    llvm::IRBuilderBase::CreateICmp(v627, 36, v626, v628, (uint64_t)__p);
    v629 = (llvm::Type **)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24));
    llvm::ConstantInt::get();
    LOWORD(v737) = 257;
    Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    v631 = AGCLLVMBuilder::truncateToSmall(v629 + 4, Select, *(llvm::Type **)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 224));
    v719 = 257;
    v632 = (llvm::Value *)llvm::ConstantInt::get();
    v619 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v629 + 5), v615, v631, v632, (const llvm::Twine *)v716);
    v633 = (AGCLLVMDriverShader *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 40);
    v634 = (llvm::Value *)*((_QWORD *)v586 + 13);
    LOWORD(v737) = 257;
    v635 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub(v633, v725, v634, (const llvm::Twine *)__p);
    v636 = (uint64_t *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 40);
    v637 = llvm::ConstantInt::get();
    LOWORD(v737) = 257;
    llvm::IRBuilderBase::CreateICmp(v636, 36, v635, v637, (uint64_t)__p);
    v620 = (llvm::Type **)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24));
    llvm::ConstantInt::get();
    LOWORD(v737) = 257;
    v638 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    v621 = AGCLLVMBuilder::truncateToSmall(v620 + 4, v638, *(llvm::Type **)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 224));
    v719 = 257;
    v622 = (llvm::Value *)llvm::ConstantInt::get();
    v623 = (const llvm::Twine *)v716;
  }
  else
  {
    v616 = (char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24);
    v617 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v737) = 257;
    v618 = (llvm::Value *)llvm::ConstantInt::get();
    v619 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v616 + 40), v615, v617, v618, (const llvm::Twine *)__p);
    v620 = (llvm::Type **)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24));
    v621 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v737) = 257;
    v622 = (llvm::Value *)llvm::ConstantInt::get();
    v623 = (const llvm::Twine *)__p;
  }
  v639 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v620 + 5), v619, v621, v622, v623);
  v640 = (llvm::Value *)llvm::UndefValue::get();
  v641 = (char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24);
  v642 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v737) = 257;
  v643 = (llvm::Value *)llvm::ConstantInt::get();
  v644 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v641 + 40), v640, v642, v643, (const llvm::Twine *)__p);
  v645 = (char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24);
  v646 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v737) = 257;
  v647 = (llvm::Value *)llvm::ConstantInt::get();
  v648 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v645 + 40), v644, v646, v647, (const llvm::Twine *)__p);
  v649 = AGCLLVMDriverShader::getWriteImageStateGlobal(v586);
  v650 = AGCLLVMDriverShader::getTextureHeapGlobal(v586, 0);
  if (*(_BYTE *)(*(_QWORD *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 400) + 1739))
  {
    v651 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p[0] = "agc.view_level";
    LOWORD(v737) = 259;
    v652 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v652 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v653 = (char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24);
    v654 = v598;
    v655 = *((_QWORD *)v653 + 47);
    v656 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v653 + 32), v651);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v655, v656);
    llvm::ConstantInt::get();
    v657 = (uint64_t *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 40);
    LOWORD(v737) = 257;
    v659 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v651, v658);
    v660 = llvm::IRBuilderBase::CreateAlignedLoad(v657, v659, (uint64_t)v651, 0, (uint64_t)__p);
    v661 = *(_QWORD *)((char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24) + 224);
    v719 = 257;
    v662 = (uint64_t)v657;
    v598 = v654;
    v663 = llvm::IRBuilderBase::CreateCast(v662, 38, v660, v661, (uint64_t)v716);
  }
  else
  {
    v663 = llvm::ConstantInt::get();
  }
  v664 = v663;
  v665 = *v675 & 0x1F;
  v666 = *v677;
  if ((*v675 & 0x1E) == 4)
    v667 = 3;
  else
    v667 = *v675 & 0x1F;
  LODWORD(__p[0]) = 8;
  HIDWORD(__p[0]) = v598;
  if ((v666 & 0x400000) != 0)
    v668 = v667;
  else
    v668 = v665;
  LODWORD(__p[1]) = 10;
  *(_QWORD *)&v736 = 0;
  *(_DWORD *)((char *)&v736 + 7) = 0;
  v737 = 0u;
  v738 = 0u;
  v739 = 0u;
  v740 = 0u;
  v741 = 0;
  v745 = 0;
  *((_QWORD *)&v744 + 1) = 0;
  v752 = 0;
  v753 = 0;
  memset(&v747[1], 0, 36);
  v749 = 0;
  v748 = 0;
  v751 = 0;
  v750 = 0;
  v754 = 1;
  v755 = 0;
  v756 = 0;
  AGCLLVMDriverShader::setImageWriteSampleArgs(v586, (uint64_t)__p, v649, v650);
  HIDWORD(__p[1]) = v668;
  v746 = 1;
  v747[0] = v664;
  *(_QWORD *)&v742 = v702;
  *(_QWORD *)&v744 = v591;
  *((_QWORD *)&v742 + 1) = llvm::ConstantInt::get();
  *(_QWORD *)&v743 = v648;
  *((_QWORD *)&v743 + 1) = v639;
  v669 = (char *)v586 + *(_QWORD *)(*(_QWORD *)v586 - 24);
  v670 = *((_QWORD *)v669 + 50);
  *(_OWORD *)v716 = *(_OWORD *)(v669 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v669 + 40));
  v718 = *((_DWORD *)v669 + 34);
  (*(void (**)(uint64_t, llvm::Value **, void **))(*(_QWORD *)v670 + 272))(v670, v716, __p);
  v417 = v586;
  if (v717)
    llvm::MetadataTracking::untrack();
  return v417;
}

void std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7EC0820;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#2}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7EC0820;
  a2[1] = v2;
  return result;
}

void std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7EC07D8;
  return result;
}

void std::__function::__func<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1},std::allocator<AGCDeserializedReply::serialize(void *&,unsigned long &)::{lambda(_CompilerData const&,section_64 *&,unsigned int)#1}>,void ()(_CompilerData const&,section_64 *&,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7EC07D8;
}

uint64_t AGCLLVMObjectArray::compile(AGCLLVMObjectArray *this)
{
  uint64_t v1;
  char *v3;
  char *v4;
  uint64_t **v5;
  char *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  _QWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  _BYTE v41[24];
  _BYTE *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned int *)this + 10);
  if (!(_DWORD)v1)
    return 1;
  v3 = (char *)*((_QWORD *)this + 4);
  v4 = &v3[32 * v1];
  v5 = (uint64_t **)((char *)this + 248);
  while (1)
  {
    v6 = v3 + 8;
    if (((***(uint64_t (****)(_QWORD))v3)(*(_QWORD *)v3) & 1) == 0)
    {
      std::string::operator=((std::string *)((char *)this + 8), (const std::string *)(*(_QWORD *)v3 + 8));
      return 0;
    }
    v37 = 0;
    v38 = 0;
    v35 = 0u;
    v36 = 0u;
    v7 = *(_QWORD *)v3;
    v42 = 0;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, __int128 *, _BYTE *))(*(_QWORD *)v7 + 8))(v7, &v38, &v37, &v35, v41);
    v9 = v42;
    if (v42 == v41)
    {
      v9 = v41;
      v10 = 4;
    }
    else
    {
      if (!v42)
        goto LABEL_9;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_9:
    if (!v8)
      break;
    v11 = v37;
    v12 = v38;
    if ((v3[31] & 0x80000000) == 0 || (v6 = *(char **)v6) != 0)
    {
      if (*v6)
      {
        std::string::basic_string[abi:nn180100]<0>(__p, v6);
        v14 = *((_QWORD *)this + 23);
        v13 = *((_QWORD *)this + 24);
        v15 = v5;
        v16 = v5;
        v17 = (uint64_t *)*((_QWORD *)this + 31);
        if (v17)
        {
          while (1)
          {
            while (1)
            {
              v15 = (uint64_t **)v17;
              v18 = v17 + 4;
              if (!std::less<std::string>::operator()[abi:nn180100](__p, v17 + 4))
                break;
              v17 = *v15;
              v16 = v15;
              if (!*v15)
                goto LABEL_19;
            }
            if (!std::less<std::string>::operator()[abi:nn180100](v18, __p))
              break;
            v16 = v15 + 1;
            v17 = v15[1];
            if (!v17)
              goto LABEL_19;
          }
        }
        else
        {
LABEL_19:
          v19 = operator new(0x40uLL);
          v19[2] = *(_OWORD *)__p;
          *((_QWORD *)v19 + 6) = v40;
          __p[0] = 0;
          __p[1] = 0;
          v40 = 0;
          *((_DWORD *)v19 + 14) = (unint64_t)(v13 - v14) >> 4;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
          *((_QWORD *)v19 + 2) = v15;
          *v16 = (uint64_t *)v19;
          v20 = **((_QWORD **)this + 30);
          if (v20)
          {
            *((_QWORD *)this + 30) = v20;
            v21 = *v16;
          }
          else
          {
            v21 = (uint64_t *)v19;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 31), v21);
          ++*((_QWORD *)this + 32);
        }
        if (SHIBYTE(v40) < 0)
          operator delete(__p[0]);
      }
    }
    v23 = (char *)*((_QWORD *)this + 24);
    v22 = *((_QWORD *)this + 25);
    if ((unint64_t)v23 >= v22)
    {
      v25 = (char *)*((_QWORD *)this + 23);
      v26 = (v23 - v25) >> 4;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 60)
        abort();
      v28 = v22 - (_QWORD)v25;
      if (v28 >> 3 > v27)
        v27 = v28 >> 3;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 60)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v30 = (char *)operator new(16 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = &v30[16 * v26];
      *(_QWORD *)v31 = v12;
      *((_QWORD *)v31 + 1) = v11;
      v32 = v31;
      if (v23 != v25)
      {
        do
        {
          *((_OWORD *)v32 - 1) = *((_OWORD *)v23 - 1);
          v32 -= 16;
          v23 -= 16;
        }
        while (v23 != v25);
        v23 = (char *)*((_QWORD *)this + 23);
      }
      v33 = &v30[16 * v29];
      v24 = v31 + 16;
      *((_QWORD *)this + 23) = v32;
      *((_QWORD *)this + 24) = v31 + 16;
      *((_QWORD *)this + 25) = v33;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *(_QWORD *)v23 = v12;
      *((_QWORD *)v23 + 1) = v11;
      v24 = v23 + 16;
    }
    *((_QWORD *)this + 24) = v24;
    *((_QWORD *)this + 29) += v11;
    *((_QWORD *)this + 33) += *((_QWORD *)&v36 + 1);
    v3 += 32;
    if (v3 == v4)
      return 1;
  }
  MEMORY[0x1CAA2D494]((char *)this + 8, "Error occurred composing compiler reply.");
  return 0;
}

uint64_t AGCLLVMObjectArray::composeCompilerReply(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _BYTE *v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  const char *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  size_t v27;
  int64_t v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  char *v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  BOOL v55;
  int64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char **v70;
  const void **v71;
  char *v72;
  size_t v73;
  char *v74;
  _BOOL4 v75;
  const char *v76;
  const char *Value;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  AGCLLVMObjectArray *v93;
  size_t v95;
  uint64_t v98;
  _QWORD *v99;
  size_t v100;
  char *v101;
  char *v102;
  char *v103;
  int v104;
  _QWORD *v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;

  *(_QWORD *)(a4 + 24) = a1[33];
  if (!((a1[24] - a1[23]) >> 4))
    return 0;
  v98 = (a1[24] - a1[23]) >> 4;
  v6 = operator new(1uLL);
  v7 = (unint64_t)v6;
  *v6 = 0;
  v8 = v6 + 1;
  v9 = (_QWORD *)a1[30];
  v99 = a1;
  v105 = a1 + 31;
  if (v9 != a1 + 31)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = v6 + 1;
    while (1)
    {
      if (*((char *)v9 + 55) < 0)
      {
        v14 = (const char *)v9[4];
        v15 = *((_DWORD *)v9 + 14) + 1;
        if (!v14)
          goto LABEL_10;
      }
      else
      {
        v14 = (const char *)(v9 + 4);
        v15 = *((_DWORD *)v9 + 14) + 1;
      }
      if (*v14)
      {
        v16 = &v13[-v7];
        v110 = (_DWORD)v13 - v7;
        v107 = v15;
        if (v13 >= v8)
        {
          v19 = (unint64_t)(v16 + 1);
          if ((uint64_t)(v16 + 1) < 0)
            goto LABEL_134;
          v20 = v12;
          if (2 * (uint64_t)&v8[-v7] > v19)
            v19 = 2 * (_QWORD)&v8[-v7];
          if ((unint64_t)&v8[-v7] >= 0x3FFFFFFFFFFFFFFFLL)
            v21 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
            v22 = (unint64_t)operator new(v21);
          else
            v22 = 0;
          v23 = &v16[v22];
          v24 = &v16[v22];
          *v24 = 95;
          v17 = v24 + 1;
          if (v13 == (char *)v7)
          {
            v7 = (unint64_t)v23;
          }
          else
          {
            v25 = &v13[~v7];
            do
            {
              v26 = *--v13;
              (v25--)[v22] = v26;
            }
            while (v13 != (char *)v7);
            v13 = (char *)v7;
            v7 = v22;
          }
          v8 = (char *)(v22 + v21);
          if (v13)
            operator delete(v13);
          v12 = v20;
        }
        else
        {
          *v13 = 95;
          v17 = v13 + 1;
        }
        v27 = strlen(v14);
        v28 = v27 + 1;
        if ((uint64_t)(v27 + 1) < 1)
        {
          v13 = v17;
        }
        else if (v8 - v17 >= v28)
        {
          v101 = v8;
          if (v28 > 0)
          {
            v103 = v12;
            v35 = v27 + 1;
            if (&v14[v27 + 1] != v14)
              memmove(v17, v14, v27 + 1);
            v13 = &v17[v35];
            goto LABEL_60;
          }
          v36 = (uint64_t)&v14[v27 + 1];
          v37 = &v17[v28];
          v38 = -v28;
          v39 = &v17[-v28];
          v13 = v17;
          v40 = v38;
          if (v39 < v17)
          {
            do
              *v13++ = v17[v40++];
            while (v40);
          }
          if (v17 != v37)
            memmove(&v17[-v38], v17, v38);
          if ((const char *)v36 != v14)
            memmove(v17, v14, v36 - (_QWORD)v14);
          v8 = v101;
        }
        else
        {
          v29 = v8;
          v30 = (int64_t)&v17[-v7];
          v31 = (uint64_t)&v17[v28 - v7];
          if (v31 < 0)
            goto LABEL_134;
          v32 = (unint64_t)&v29[-v7];
          if (2 * v32 > v31)
            v31 = 2 * v32;
          if (v32 >= 0x3FFFFFFFFFFFFFFFLL)
            v33 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          v100 = v33;
          v103 = v12;
          if (v33)
            v34 = (char *)operator new(v33);
          else
            v34 = 0;
          v41 = &v34[v30];
          memcpy(&v34[v30], v14, v28);
          if ((char *)v7 == v17)
          {
            v42 = (char *)v7;
            v43 = &v34[v30];
          }
          else
          {
            do
            {
              v34[v30 - 1] = *(_BYTE *)(v7 - 1 + v30);
              --v30;
            }
            while (v30);
            v42 = v17;
            v43 = v34;
          }
          v44 = &v41[v28];
          if (v42 != v17)
            memmove(v44, v17, 0);
          v8 = &v34[v100];
          v13 = v44;
          if (v7)
            operator delete((void *)v7);
          v7 = (unint64_t)v43;
LABEL_60:
          v12 = v103;
        }
        v18 = v110;
        v15 = v107;
        goto LABEL_62;
      }
LABEL_10:
      v18 = 0;
LABEL_62:
      v45 = v15;
      if (v11 >= v12)
      {
        v46 = (v11 - v10) >> 4;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 60)
LABEL_134:
          abort();
        if ((v12 - v10) >> 3 > v47)
          v47 = (v12 - v10) >> 3;
        if ((unint64_t)(v12 - v10) >= 0x7FFFFFFFFFFFFFF0)
          v48 = 0xFFFFFFFFFFFFFFFLL;
        else
          v48 = v47;
        if (v48)
        {
          if (v48 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v49 = (char *)operator new(16 * v48);
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[16 * v46];
        *(_DWORD *)v50 = v18;
        *((_DWORD *)v50 + 1) = 2;
        *((_QWORD *)v50 + 1) = v45;
        if (v11 == v10)
        {
          v52 = &v49[16 * v46];
        }
        else
        {
          v51 = &v49[16 * v46];
          do
          {
            v52 = v51 - 16;
            *((_OWORD *)v51 - 1) = *((_OWORD *)v11 - 1);
            v11 -= 16;
            v51 -= 16;
          }
          while (v11 != v10);
        }
        v12 = &v49[16 * v48];
        v11 = v50 + 16;
        if (v10)
          operator delete(v10);
        v10 = v52;
      }
      else
      {
        *(_DWORD *)v11 = v18;
        *((_DWORD *)v11 + 1) = 2;
        *((_QWORD *)v11 + 1) = v15;
        v11 += 16;
      }
      v53 = (_QWORD *)v9[1];
      if (v53)
      {
        do
        {
          v54 = v53;
          v53 = (_QWORD *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (_QWORD *)v9[2];
          v55 = *v54 == (_QWORD)v9;
          v9 = v54;
        }
        while (!v55);
      }
      v9 = v54;
      if (v54 == v105)
      {
        v56 = v11 - v10;
        goto LABEL_90;
      }
    }
  }
  v10 = 0;
  v11 = 0;
  v56 = 0;
  v13 = v6 + 1;
LABEL_90:
  v57 = v56 & 0xFFFFFFFF0;
  if ((v56 & 0xFFFFFFFF0) != 0)
    v58 = 24;
  else
    v58 = 0;
  if ((v56 & 0xFFFFFFFF0) != 0)
    v59 = 2;
  else
    v59 = 1;
  v108 = v59;
  v60 = (v58 + 80 * v98 + 104);
  v61 = *((_DWORD *)v99 + 58);
  v62 = (v56 + 7) & 0xFFFFFFF8;
  v102 = v13;
  v63 = ((_DWORD)v13 - v7 + 7) & 0xFFFFFFF8;
  if (v57)
    v64 = v60 + v61 + v62;
  else
    v64 = v60 + v61;
  if (!v57)
    v62 = 0;
  v104 = v62;
  if (v57)
    v65 = v63;
  else
    v65 = 0;
  v95 = v65 + v64;
  v66 = (char *)malloc_type_calloc(1uLL, v95, 0xD59E51C7uLL);
  v67 = v66;
  *(_OWORD *)v66 = xmmword_1C3E37F20;
  *((_DWORD *)v66 + 4) = v108;
  *((_DWORD *)v66 + 5) = v60 - 32;
  *((_DWORD *)v66 + 6) = 0;
  *((_DWORD *)v66 + 8) = 25;
  *((_DWORD *)v66 + 9) = 80 * v98 + 72;
  v68 = v104 + v65 + v61;
  *((_QWORD *)v66 + 8) = v68;
  *((_QWORD *)v66 + 9) = v60;
  *((_QWORD *)v66 + 10) = v68;
  *((_DWORD *)v66 + 24) = v98;
  v111 = v57;
  if (v57)
  {
    v69 = &v66[(80 * v98 + 104)];
    *(_QWORD *)v69 = 0x1800000002;
    *((_DWORD *)v69 + 2) = v60 + v61;
    *((_DWORD *)v69 + 3) = (unint64_t)(v11 - v10) >> 4;
    *((_DWORD *)v69 + 4) = v64;
    *((_DWORD *)v69 + 5) = v65;
  }
  v109 = v60 + v61;
  v106 = v64;
  v71 = (const void **)v99[23];
  v70 = (char **)v99[24];
  if (v71 != (const void **)v70)
  {
    v72 = v66 + 104;
    do
    {
      v74 = (char *)*v71;
      v73 = (size_t)v71[1];
      memcpy(&v67[v60], *v71, v73);
      if (!*((_DWORD *)v67 + 3))
      {
        *(_QWORD *)(v67 + 4) = *(_QWORD *)(v74 + 4);
        *((_DWORD *)v67 + 3) = *((_DWORD *)v74 + 3);
      }
      strcpy(v72, "__data");
      strcpy(v72 + 16, "__DATA");
      *((_DWORD *)v72 + 12) = v60;
      LODWORD(v60) = v60 + v73;
      v71 += 2;
      *((_QWORD *)v72 + 5) = v73;
      v72 += 80;
    }
    while (v71 != (const void **)v70);
  }
  if (!v111)
  {
LABEL_115:
    *a2 = (uint64_t)v67;
    *a3 = v95;
    v75 = v95 != 0;
    if (!v7)
      goto LABEL_119;
LABEL_118:
    operator delete((void *)v7);
    goto LABEL_119;
  }
  if (v11 == v10)
  {
    v75 = 0;
    if (!v7)
      goto LABEL_119;
    goto LABEL_118;
  }
  memcpy(&v67[v109], v10, ((_DWORD)v11 - (_DWORD)v10));
  if (v102 != (char *)v7)
  {
    memcpy(&v67[v106], (const void *)v7, ((_DWORD)v102 - v7));
    goto LABEL_115;
  }
  v75 = 0;
  v7 = (unint64_t)v102;
  if (v102)
    goto LABEL_118;
LABEL_119:
  if (v10)
    operator delete(v10);
  if (!v75)
    return 0;
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DUMP_MACHO", v76);
    if (Value)
    {
      if (*Value != 48)
      {
        if (atoi(Value))
        {
          printMessage((char **)&AGCPrinter, "------ Start dump mach-O for multiple shaders (size=%lu) ------\n", v78, v79, v80, v81, v82, v83, *((_DWORD *)v99 + 10));
          printHexDump((char **)&AGCPrinter, *a2, *a3, 0x20u, (const char *)&unk_1C3E4D9BB, 0);
          printMessage((char **)&AGCPrinter, "\n\n------ End dump mach-O for multiple shaders (size=%lu) ------\n", v84, v85, v86, v87, v88, v89, *((_DWORD *)v99 + 10));
        }
      }
    }
  }
  if (!*(_QWORD *)(a5 + 24))
    return 1;
  v90 = (*(uint64_t (**)(_QWORD *))(*v99 + 16))(v99);
  v91 = *(_QWORD *)(a5 + 24);
  if (v91)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 48))(v91, v90);
    return 1;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return AGCLLVMObjectArray::getMainDeserializedReply(v93);
}

uint64_t AGCLLVMObjectArray::getMainDeserializedReply(AGCLLVMObjectArray *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 16))(*((_QWORD *)this + 22));
}

void AGCLLVMObjectArray::~AGCLLVMObjectArray(AGCLLVMObjectArray *this)
{
  AGCLLVMObjectArray::~AGCLLVMObjectArray(this);
  JUMPOUT(0x1CAA2D68CLL);
}

{
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;

  *(_QWORD *)this = &off_1E7ECDDA8;
  v2 = (void **)*((_QWORD *)this + 23);
  v3 = (void **)*((_QWORD *)this + 24);
  while (v2 != v3)
  {
    v4 = *v2;
    v2 += 2;
    free(v4);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 31));
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  llvm::SmallVectorTemplateBase<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>,false>::destroy_range(*((_QWORD *)this + 4), *((_QWORD *)this + 4) + 32 * *((unsigned int *)this + 10));
  v7 = (char *)*((_QWORD *)this + 4);
  if (v7 != (char *)this + 48)
    free(v7);
  *(_QWORD *)this = &unk_1E7ECDDE8;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t AGCLLVMObjectArray::getObjectName(AGCLLVMObjectArray *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 40))(*((_QWORD *)this + 22));
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>,false>::destroy_range(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      if (*(char *)(v2 - 1) < 0)
        operator delete(*(void **)(v2 - 24));
      result = *(_QWORD *)(v2 - 32);
      *(_QWORD *)(v2 - 32) = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
      v2 -= 32;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t AGCLLVMCtx::initialize(AGCLLVMUserShader *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  AGCLLVMUserObject *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  char v14;
  BOOL v15;
  char v16;
  char v17;
  char v18;
  char v19;
  unint64_t v20;
  char **v21;
  char v22;
  char *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  const char **v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  const char *v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char *v55;
  char **v56;
  uint64_t v57;
  char **v58;
  int v59;
  uint64_t v60;
  char **v61;
  char *v62;
  char *v63;
  size_t v64;
  char *v65;
  char *v66;
  size_t v67;
  size_t v68;
  size_t v69;
  size_t v70;
  size_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  int v83;
  char v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  BOOL v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char **v96;
  BOOL v98;
  char *v99;
  size_t v100;
  size_t v101;
  const char **v102;
  char *v103;
  size_t v104;
  size_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  const char **v121;
  char **v122;
  char *v123;
  char *v124;
  size_t v125;
  size_t v126;
  size_t v127;
  size_t v128;
  size_t v129;
  int v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  char *v135;
  uint64_t i;
  unint64_t v137;
  char **v138;
  char **v139;
  char *v140;
  BOOL v142;
  char *v143;
  size_t v144;
  size_t v145;
  int v146;
  int v147;
  uint64_t v148;
  char *v149;
  char v150;
  uint64_t v151;
  char **v152;
  char *v153;
  char v154;
  char v155;
  char v156;
  char v157;
  char v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  int v162;
  char *v163;
  uint64_t v164;
  char **v165;
  char *v166;
  size_t v167;
  size_t v168;
  size_t v169;
  size_t v170;
  int v171;
  int v172;
  char *v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char **v178;
  int v179;
  const char *v180;
  unint64_t v181;
  BOOL v182;
  const char *v183;
  uint64_t v184;
  char v185;
  int v186;
  char *v187;
  size_t v188;
  std::string::value_type *v189;
  char *v190;
  uint64_t v191;
  char v192;
  AGCLLVMUserObject *v193;
  uint64_t v194;
  uint64_t v195;
  const char *v196;
  const char *v197;
  uint64_t v198;
  const char *v199;
  char v200;
  char *v201;
  char *v202;
  char v203;
  AGCLLVMUserObject *v204;
  uint64_t j;
  size_t v206;
  AGCLLVMUserObject *v207;
  uint64_t k;
  size_t v209;
  AGCLLVMUserObject *v210;
  uint64_t m;
  size_t v212;
  AGCLLVMUserObject *v213;
  uint64_t v214;
  std::string *v215;
  uint64_t n;
  char *v217;
  int v218;
  std::string::size_type size;
  size_t v220;
  std::string *v221;
  std::string *p_p;
  char *v223;
  std::string *v224;
  std::string::size_type v225;
  std::string *v226;
  std::string::size_type v227;
  char v228;
  uint64_t ii;
  char *v230;
  int v231;
  std::string::size_type v232;
  size_t v233;
  std::string *v234;
  std::string *v235;
  char *v236;
  std::string *v237;
  std::string::size_type v238;
  std::string *v239;
  std::string::size_type v240;
  char v241;
  uint64_t jj;
  char *v243;
  int v244;
  std::string::size_type v245;
  size_t v246;
  std::string *v247;
  std::string *v248;
  char *v249;
  std::string *v250;
  std::string::size_type v251;
  std::string *v252;
  std::string::size_type v253;
  char v254;
  uint64_t kk;
  char *v256;
  int v257;
  std::string::size_type v258;
  size_t v259;
  std::string *v260;
  std::string *v261;
  char *v262;
  std::string *v263;
  std::string::size_type v264;
  uint64_t mm;
  std::string *v266;
  std::string::size_type v267;
  const std::string::value_type *v268;
  std::string::size_type v269;
  std::string *v270;
  std::string::size_type v271;
  std::string *v272;
  std::string::size_type v273;
  char v274;
  uint64_t nn;
  char *v276;
  int v277;
  std::string::size_type v278;
  size_t v279;
  std::string *v280;
  std::string *v281;
  char *v282;
  std::string *v283;
  std::string::size_type v284;
  char v285;
  uint64_t v286;
  char v287;
  std::string *v288;
  std::string::size_type v289;
  const std::string::value_type *v290;
  std::string::size_type v291;
  std::string *v292;
  std::string::size_type v293;
  std::string *v294;
  std::string::size_type v295;
  char v296;
  uint64_t v297;
  char v298;
  const char *v299;
  char v300;
  int v301;
  std::string::size_type v302;
  size_t v303;
  std::string *v304;
  std::string *v305;
  char *v306;
  std::string *v307;
  std::string::size_type v308;
  llvm::PassRegistry *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  llvm *PassRegistry;
  llvm::PassRegistry *v336;
  llvm::PassRegistry *v337;
  llvm::PassRegistry *v338;
  llvm::PassRegistry *v339;
  llvm::PassRegistry *v340;
  llvm::PassRegistry *v341;
  llvm::PassRegistry *v342;
  llvm::PassRegistry *v343;
  uint64_t v345;
  char v346;
  char v347;
  uint64_t v348;
  uint64_t v349;
  char v350;
  char v351;
  char v352;
  char v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char v362;
  unint64_t v363;
  char v364;
  const char *v365;
  char v366;
  const char *v367;
  char v368;
  char *v369;
  char v370;
  char v371;
  char v372;
  char v373;
  char **v374;
  uint64_t v375;
  char v376;
  char v377;
  char v378;
  char v379;
  char v380;
  char v381;
  char v382;
  char v383;
  uint64_t v384;
  char v385;
  char v386;
  uint64_t v387;
  char *v388;
  char v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  int v393;
  char v394;
  BOOL v395;
  uint64_t v396;
  char v397;
  char v398;
  uint64_t v399;
  unint64_t v400;
  char **v401;
  char **v402;
  char v403;
  char v404;
  char v405;
  int v406;
  char v407;
  char v408;
  char v409;
  char v410;
  char v411;
  char v412;
  char v413;
  char v414;
  char v415;
  int *v416;
  char **v417;
  char v418;
  char *__s;
  char *__sa;
  char __sb;
  char *__sc;
  char __sd;
  _DWORD *v424;
  const char **v425;
  char v426;
  int *v427;
  char v428;
  uint64_t v429;
  char *v430;
  char *v431;
  char v432;
  char *v433;
  char v434;
  char v435;
  const char **v436;
  std::string::value_type *v437;
  int v438;
  std::string::value_type *v439;
  std::string::value_type *v440;
  std::string::value_type *v441;
  void *v442;
  std::string::size_type v443;
  unsigned __int8 v444;
  std::string v445;
  std::string v446;
  std::string __p;
  std::string v448;
  _QWORD v449[2];
  _QWORD *v450;
  __int128 v451;
  _QWORD v452[11];

  v452[8] = *MEMORY[0x1E0C80C00];
  AGCLLVMUserShader::getVaryingModeMap(a1);
  *(_DWORD *)(*llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>("air.perspective", 0xFuLL)+ 8) = 0;
  *(_DWORD *)(*llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>("air.flat", 8uLL)+ 8) = 1;
  v1 = llvm::StringMap<AGCCodeTranslator::VertexShaderVaryingType,llvm::MallocAllocator>::try_emplace<>("air.no_perspective", 0x12uLL);
  *(_DWORD *)(*v1 + 8) = 2;
  AGCLLVMUserShader::getInterpolationLocationMap((AGCLLVMUserShader *)v1);
  *(_DWORD *)(*llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>("air.center", 0xAuLL) + 8) = 0;
  *(_DWORD *)(*llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>("air.centroid", 0xCuLL) + 8) = 2;
  v2 = llvm::StringMap<InterpolationLocation,llvm::MallocAllocator>::try_emplace<>("air.sample", 0xAuLL);
  *(_DWORD *)(*v2 + 8) = 1;
  AGCLLVMUserObject::getSampleFunctionMap((AGCLLVMUserObject *)v2);
  if (dword_1ED839C74)
    goto LABEL_462;
  v4 = 0;
  v450 = v452;
  v451 = xmmword_1C3E37B50;
  do
  {
    v358 = 0;
    v402 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * v4];
    v354 = v4 & 0x7FFFFFFE;
    v348 = v4;
    v5 = 0x28AAAuLL >> v4;
    v6 = (0x28AAAuLL >> v4) & 1;
    v7 = (v354 == 2) | v5 & 1;
    if (v6)
      v8 = 3;
    else
      v8 = 2;
    v389 = v8;
    if ((v5 & 1) != 0)
      v9 = 3;
    else
      v9 = 2;
    v356 = v6;
    v385 = 2 * v6;
    v350 = v9 + 2;
    v352 = v9 + 1;
    __s = "1d";
    v393 = v7;
    do
    {
      if (!v356 || v358 != 4)
      {
        v10 = 0;
        v11 = v358 - 5;
        v12 = v350;
        v13 = v352;
        if (((0xB5uLL >> v358) & 1) != 0)
        {
          v12 = v352;
          v13 = 0;
        }
        v412 = v13;
        v14 = v12 + (v354 == 2);
        if (v354 != 2)
          v12 = 0;
        v407 = v12;
        v15 = v11 >= 3;
        if (v11 >= 3)
          v16 = v14 + 3;
        else
          v16 = 0;
        v373 = v16;
        if (v15)
          v17 = v14 + 5;
        else
          v17 = v14 + 3;
        v372 = v17;
        if (v15)
          v18 = v14;
        else
          v18 = 0;
        v370 = v18;
        v376 = v14 + 2;
        v380 = v14;
        if (v15)
          v19 = v14 + 2;
        else
          v19 = v14;
        v366 = v19 + 2;
        v368 = v19;
        v364 = v19 + 3;
        v362 = v14 + 1;
        v430 = (char *)&unk_1C3E4D9BB;
        do
        {
          v20 = 0;
          v360 = v10;
          v424 = &AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_texture_subtypes
               + 2 * v10
               + 1;
          v21 = &off_1E7EB7778;
          do
          {
            if (v20 > 1)
              v22 = v7;
            else
              v22 = 0;
            if (v20 != 6 && (v22 & 1) == 0)
            {
              v23 = *v402;
              if (*v402)
              {
                v24 = strlen(*v402);
                *(_QWORD *)&v451 = 0;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v23, &v23[v24]);
              }
              else
              {
                *(_QWORD *)&v451 = 0;
              }
              v25 = strlen(__s);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, __s, &__s[v25]);
              v26 = strlen(v430);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v430, &v430[v26]);
              if (v7)
                v27 = (const char **)v21;
              else
                v27 = (const char **)(v21 - 1);
              v28 = (char *)*v27;
              if (*v27)
              {
                v29 = strlen(*v27);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v28, &v28[v29]);
              }
              else
              {
                v30 = v451;
                if (*((_QWORD *)&v451 + 1) < (unint64_t)v451)
                {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  v30 = v451;
                }
                *(_QWORD *)&v451 = v30;
              }
              if (*v424)
              {
                v31 = 0;
                if (*v424 == 1)
                {
                  v32 = v380;
                  v435 = v376;
                  v33 = v373;
                  v34 = v372;
                }
                else
                {
                  v33 = 0;
                  v32 = 0;
                  v435 = v380;
                  v34 = v362;
                }
              }
              else
              {
                v32 = 0;
                v435 = v366;
                v31 = v368;
                v33 = v370;
                v34 = v364;
              }
              v35 = *((_DWORD *)v402 + 2);
              v36 = (int)(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v358 + 1];
              v37 = *((_DWORD *)v21 + 2);
              v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v450, v451);
              v38 = *(_QWORD *)v3;
              *(_DWORD *)(v38 + 8) = v35;
              *(_DWORD *)(v38 + 12) = v36;
              *(_DWORD *)(v38 + 16) = 0;
              *(_DWORD *)(v38 + 20) = v37;
              *(_DWORD *)(v38 + 24) = 1;
              *(_QWORD *)(v38 + 28) = 0;
              v7 = v393;
              *(_BYTE *)(v38 + 36) = v393;
              *(_BYTE *)(v38 + 37) = v34 + 1;
              *(_WORD *)(v38 + 38) = 256;
              *(_BYTE *)(v38 + 40) = 0;
              *(_BYTE *)(v38 + 41) = v385;
              *(_BYTE *)(v38 + 42) = v389;
              *(_BYTE *)(v38 + 43) = v33;
              *(_BYTE *)(v38 + 44) = v31;
              *(_BYTE *)(v38 + 45) = v32;
              *(_BYTE *)(v38 + 46) = 0;
              *(_BYTE *)(v38 + 47) = v412;
              *(_BYTE *)(v38 + 48) = v407;
              *(_DWORD *)(v38 + 49) = 0;
              *(_BYTE *)(v38 + 53) = v435;
              *(_BYTE *)(v38 + 54) = v34;
              *(_BYTE *)(v38 + 55) = 1;
              *(_WORD *)(v38 + 56) = 0;
            }
            ++v20;
            v21 += 3;
          }
          while (v20 != 7);
          v430 = (char *)*(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_texture_subtypes
                         + 2 * v360
                         + 2);
          v10 = 1;
        }
        while (v360 != 1);
      }
      __s = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * ++v358];
    }
    while (v358 != 7);
    v4 = v348 + 1;
  }
  while (v348 != 3);
  do
  {
    v349 = 0;
    v39 = 0x28AAAuLL >> v4;
    v431 = (char *)((0x28AAAuLL >> v4) & 1);
    v374 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * v4];
    v363 = (0x20C0uLL >> v4) & 1;
    v345 = v4;
    v357 = 0x1030uLL >> v4;
    if (v431)
      v40 = 2;
    else
      v40 = 1;
    v371 = v40;
    if ((v39 & 1) != 0)
      v41 = 2;
    else
      v41 = 1;
    v346 = v41 + 2;
    v347 = v41 + 1;
    v369 = "1d";
    do
    {
      if (!v431 || v349 != 4)
      {
        v42 = 0;
        v43 = v346;
        v44 = v347;
        if ((unint64_t)(v349 - 5) >= 3)
        {
          v43 = v347;
          v44 = 0;
        }
        v381 = v44;
        if (((0xB5uLL >> v349) & 1) != 0)
          v45 = "2d_ms";
        else
          v45 = "2d_ms_array";
        v46 = 5;
        if (((0xB5uLL >> v349) & 1) == 0)
          v46 = 11;
        v365 = &v45[v46];
        v367 = v45;
        if (((0xB5uLL >> v349) & 1) != 0)
          v47 = v43;
        else
          v47 = v43 + 1;
        v351 = v47;
        if (((0xB5uLL >> v349) & 1) != 0)
          v48 = 0;
        else
          v48 = v43;
        v377 = v48;
        v49 = 1;
        do
        {
          v353 = v49;
          v50 = 0;
          v51 = v351;
          v52 = v351 + (v42 & 1);
          if ((v42 & 1) == 0)
            v51 = 0;
          v408 = v51;
          v413 = v42;
          v53 = v52 + v363;
          if ((v42 & 1) != 0)
            v54 = 0;
          else
            v54 = v52 + v363;
          v403 = v54;
          if (!v363)
            v52 = 0;
          v398 = v52;
          v394 = v53 + ((v42 & 1) == 0);
          v55 = (char *)&unk_1C3E4D9BB;
          do
          {
            v359 = 0;
            v355 = v50;
            v416 = (int *)(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coherence_modes
                         + 2 * v50
                         + 1);
            v56 = AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types;
            do
            {
              if (!v431 || v359 <= 1)
              {
                v57 = 0;
                v58 = &AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types[3 * v359];
                if (v431)
                  v56 = v58 + 1;
                v425 = (const char **)v56;
                __sa = (char *)(v58 + 2);
                v59 = 1;
                do
                {
                  v60 = 0;
                  v361 = v57;
                  v436 = (const char **)((char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types
                                       + 16 * v57
                                       + 8);
                  v61 = &off_1E7EB7740;
                  v62 = (char *)&unk_1C3E4D9BB;
                  do
                  {
                    if (!((v363 != 0) | v357 & 1 | (v359 != 6)) || (_DWORD)v60 && (_DWORD)v60 != 3 && !v363)
                      goto LABEL_109;
                    v63 = *v374;
                    if (*v374)
                    {
                      v64 = strlen(*v374);
                      *(_QWORD *)&v451 = 0;
                      llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v63, &v63[v64]);
                      if ((v42 & 1) == 0)
                        goto LABEL_102;
                    }
                    else
                    {
                      *(_QWORD *)&v451 = 0;
                      if ((v42 & 1) == 0)
                      {
LABEL_102:
                        v66 = &v369[strlen(v369)];
                        v65 = v369;
                        goto LABEL_103;
                      }
                    }
                    v66 = (char *)v365;
                    v65 = (char *)v367;
LABEL_103:
                    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v65, v66);
                    v67 = strlen(v62);
                    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v62, &v62[v67]);
                    v68 = strlen(*v436);
                    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, *v436, &(*v436)[v68]);
                    v69 = strlen(v55);
                    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v55, &v55[v69]);
                    if (*v425)
                    {
                      v70 = strlen(*v425);
                      llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, *v425, &(*v425)[v70]);
                      v71 = v451;
                    }
                    else
                    {
                      v71 = v451;
                      if (*((_QWORD *)&v451 + 1) < (unint64_t)v451)
                      {
                        llvm::SmallVectorBase<unsigned long long>::grow_pod();
                        v71 = v451;
                      }
                      *(_QWORD *)&v451 = v71;
                    }
                    v72 = *((_DWORD *)v374 + 2);
                    v73 = (int)(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v349 + 1];
                    v74 = *((_DWORD *)v61 - 2);
                    v75 = *(_DWORD *)__sa;
                    v76 = *v416;
                    v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v450, v71);
                    v77 = *(_QWORD *)v3;
                    *(_DWORD *)(v77 + 8) = v72;
                    *(_DWORD *)(v77 + 12) = v73;
                    *(_DWORD *)(v77 + 16) = v59;
                    *(_DWORD *)(v77 + 20) = v75;
                    *(_DWORD *)(v77 + 24) = v76;
                    *(_DWORD *)(v77 + 28) = 0;
                    *(_DWORD *)(v77 + 32) = v74;
                    *(_BYTE *)(v77 + 36) = (_BYTE)v431;
                    *(_BYTE *)(v77 + 37) = v394 + 1;
                    *(_BYTE *)(v77 + 38) = 0;
                    *(_WORD *)(v77 + 39) = 0;
                    *(_BYTE *)(v77 + 41) = (_BYTE)v431;
                    *(_BYTE *)(v77 + 42) = v371;
                    *(_BYTE *)(v77 + 45) = 0;
                    *(_WORD *)(v77 + 43) = 0;
                    *(_BYTE *)(v77 + 46) = v403;
                    *(_BYTE *)(v77 + 47) = v377;
                    *(_BYTE *)(v77 + 48) = 0;
                    v42 = v413;
                    *(_BYTE *)(v77 + 49) = v408;
                    *(_BYTE *)(v77 + 50) = v398;
                    *(_BYTE *)(v77 + 51) = v381;
                    *(_WORD *)(v77 + 52) = 0;
                    *(_BYTE *)(v77 + 54) = v394;
                    *(_BYTE *)(v77 + 55) = 1;
                    *(_WORD *)(v77 + 56) = 0;
LABEL_109:
                    ++v60;
                    v78 = *v61;
                    v61 += 2;
                    v62 = v78;
                  }
                  while (v60 != 3);
                  v59 = *((_DWORD *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types
                        + 4 * v361
                        + 4);
                  v57 = 1;
                }
                while (v361 != 1);
              }
              v56 = &AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types[3 * ++v359];
            }
            while (v359 != 7);
            v55 = (char *)*(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coherence_modes
                          + 2 * v355
                          + 2);
            v50 = 1;
          }
          while (v355 != 1);
          v42 = 1;
          v49 = 0;
        }
        while ((((v349 & 0xFFFFFFFE) == 2) & v353) != 0);
      }
      v369 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * ++v349];
    }
    while (v349 != 7);
    v4 = v345 + 1;
  }
  while (v345 != 7);
  do
  {
    v79 = 0;
    v417 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * v4];
    v80 = v4 & 0x7FFFFFFE;
    v395 = v80 == 10;
    v375 = v4;
    v81 = (0x57555uLL >> v4) & 1;
    if (v81)
      v82 = 2;
    else
      v82 = 3;
    v409 = v82;
    v83 = (0x57555uLL >> v4) & 1;
    if (v83)
      v84 = 2;
    else
      v84 = 3;
    v390 = v81;
    v404 = (2 * v81) ^ 2;
    v386 = v84 + 1;
    v378 = v83 & (v80 != 10);
    v382 = v84 + 2;
    v85 = "1d";
    do
    {
      v399 = v79;
      v86 = v79 - 5;
      if ((v79 & 0xFFFFFFFE) == 2 || v86 <= 2)
      {
        v87 = 0;
        v437 = (std::string::value_type *)&(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v79 + 1];
        v88 = v386;
        v89 = v382;
        if (((0xB5uLL >> v79) & 1) != 0)
        {
          v89 = v386;
          v88 = 0;
        }
        v432 = v88;
        v90 = v86 >= 3;
        if (v86 >= 3)
          v91 = v89 + v395;
        else
          v91 = 0;
        v426 = v91;
        if (v90)
          v92 = v89 + v395 + 2;
        else
          v92 = v89 + v395;
        if (v80 != 10)
          v89 = 0;
        __sb = v89;
        if (v80 == 10)
          v93 = 0;
        else
          v93 = v92;
        v94 = v92 + v378;
        if (v390)
          v95 = v93;
        else
          v95 = 0;
        v96 = &off_1E7EB7778;
        do
        {
          v98 = v80 == 10 && v87 > 1;
          if (v87 != 6 && !v98)
          {
            v99 = *v417;
            if (*v417)
            {
              v100 = strlen(*v417);
              *(_QWORD *)&v451 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v99, &v99[v100]);
            }
            else
            {
              *(_QWORD *)&v451 = 0;
            }
            v101 = strlen(v85);
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v85, &v85[v101]);
            if (v80 == 10)
              v102 = (const char **)v96;
            else
              v102 = (const char **)(v96 - 1);
            v103 = (char *)*v102;
            if (*v102)
            {
              v104 = strlen(*v102);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v103, &v103[v104]);
              v105 = v451;
            }
            else
            {
              v105 = v451;
              if (*((_QWORD *)&v451 + 1) < (unint64_t)v451)
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
                v105 = v451;
              }
              *(_QWORD *)&v451 = v105;
            }
            v106 = *((_DWORD *)v417 + 2);
            v107 = *(_DWORD *)v437;
            v108 = *((_DWORD *)v96 + 2);
            v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v450, v105);
            v109 = *(_QWORD *)v3;
            *(_DWORD *)(v109 + 8) = v106;
            *(_DWORD *)(v109 + 12) = v107;
            *(_DWORD *)(v109 + 16) = 0;
            *(_DWORD *)(v109 + 20) = v108;
            *(_DWORD *)(v109 + 24) = 1;
            *(_BYTE *)(v109 + 36) = 0;
            *(_QWORD *)(v109 + 28) = 0;
            *(_BYTE *)(v109 + 37) = v94 + 1;
            *(_WORD *)(v109 + 38) = 256;
            *(_BYTE *)(v109 + 40) = 0;
            *(_BYTE *)(v109 + 41) = v404;
            *(_BYTE *)(v109 + 42) = v409;
            *(_BYTE *)(v109 + 43) = v426;
            *(_BYTE *)(v109 + 46) = 0;
            *(_WORD *)(v109 + 44) = 0;
            *(_BYTE *)(v109 + 47) = v432;
            *(_BYTE *)(v109 + 48) = __sb;
            *(_WORD *)(v109 + 49) = 0;
            *(_BYTE *)(v109 + 51) = 0;
            *(_BYTE *)(v109 + 52) = v95;
            *(_BYTE *)(v109 + 53) = 0;
            *(_BYTE *)(v109 + 54) = v94;
            *(_BYTE *)(v109 + 55) = 0;
            *(_WORD *)(v109 + 56) = 0;
          }
          ++v87;
          v96 += 3;
        }
        while (v87 != 7);
      }
      v79 = v399 + 1;
      v85 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v399 + 2];
    }
    while (v399 != 6);
    v4 = v375 + 1;
  }
  while (v375 != 11);
  v110 = 0;
  v111 = 12;
  do
  {
    v112 = 0;
    v383 = v110;
    v113 = (0x20C0uLL >> v111) & 1;
    __sc = (char *)&(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * v111];
    if (v113)
      v114 = 3;
    else
      v114 = 2;
    if (((0x20C0uLL >> v111) & 1) != 0)
      v115 = 4;
    else
      v115 = 3;
    v410 = v115;
    v414 = v114;
    v400 = v113;
    v405 = 2 * v113;
    v116 = (char *)&unk_1C3E4D9BB;
    do
    {
      v117 = 0;
      v387 = v112;
      v427 = (int *)(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coherence_modes + 2 * v112 + 1);
      v118 = ".v4f32";
      do
      {
        v119 = 0;
        v391 = v117;
        v433 = (char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types[3 * v117 + 2];
        v438 = 1;
        do
        {
          v120 = 0;
          v396 = v119;
          v121 = (const char **)((char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types
                               + 16 * v119
                               + 8);
          v122 = &off_1E7EB7740;
          v123 = (char *)&unk_1C3E4D9BB;
          do
          {
            if (!(_DWORD)v120 || (_DWORD)v120 == 3 || v400)
            {
              v124 = *(char **)__sc;
              if (*(_QWORD *)__sc)
              {
                v125 = strlen(*(const char **)__sc);
                *(_QWORD *)&v451 = 0;
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v124, &v124[v125]);
              }
              else
              {
                *(_QWORD *)&v451 = 0;
              }
              v126 = strlen(v123);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v123, &v123[v126]);
              v127 = strlen(*v121);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, *v121, &(*v121)[v127]);
              v128 = strlen(v116);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v116, &v116[v128]);
              v129 = strlen(v118);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v118, &v118[v129]);
              v130 = *((_DWORD *)__sc + 2);
              v131 = *((_DWORD *)v122 - 2);
              v132 = *(_DWORD *)v433;
              v133 = *v427;
              v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v450, v451);
              v134 = *(_QWORD *)v3;
              *(_DWORD *)(v134 + 8) = v130;
              *(_DWORD *)(v134 + 12) = 1;
              *(_DWORD *)(v134 + 16) = v438;
              *(_DWORD *)(v134 + 20) = v132;
              *(_DWORD *)(v134 + 24) = v133;
              *(_DWORD *)(v134 + 28) = 0;
              *(_DWORD *)(v134 + 32) = v131;
              *(_BYTE *)(v134 + 36) = 0;
              *(_BYTE *)(v134 + 37) = v410;
              *(_DWORD *)(v134 + 38) = 0;
              *(_BYTE *)(v134 + 42) = 1;
              *(_DWORD *)(v134 + 46) = 0;
              *(_DWORD *)(v134 + 43) = 0;
              *(_BYTE *)(v134 + 50) = v405;
              *(_BYTE *)(v134 + 53) = 0;
              *(_WORD *)(v134 + 51) = 0;
              *(_BYTE *)(v134 + 54) = v414;
              *(_WORD *)(v134 + 55) = 1;
              *(_BYTE *)(v134 + 57) = 1;
            }
            ++v120;
            v135 = *v122;
            v122 += 2;
            v123 = v135;
          }
          while (v120 != 3);
          v438 = *((_DWORD *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types
                 + 4 * v396
                 + 4);
          v119 = 1;
        }
        while (v396 != 1);
        v117 = v391 + 1;
        v118 = AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::res_types[3 * v391 + 3];
      }
      while (v391 != 6);
      v116 = (char *)*(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coherence_modes + 2 * v387 + 2);
      v112 = 1;
    }
    while (v387 != 1);
    v110 = 1;
    v111 = 13;
  }
  while ((v383 & 1) == 0);
  for (i = 14; i != 18; ++i)
  {
    v137 = 0;
    v138 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::sample_function_types)[2 * i];
    v139 = &off_1E7EB7690;
    v140 = "1d";
    do
    {
      v142 = ((0x57555uLL >> i) & 1) == 0 && v137 == 4;
      if (v137 >= 2 && !v142)
      {
        v143 = *v138;
        if (*v138)
        {
          v144 = strlen(*v138);
          *(_QWORD *)&v451 = 0;
          llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v143, &v143[v144]);
        }
        else
        {
          *(_QWORD *)&v451 = 0;
        }
        v145 = strlen(v140);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v140, &v140[v145]);
        v146 = *((_DWORD *)v138 + 2);
        v147 = *((_DWORD *)v139 - 2);
        v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v450, v451);
        v148 = *(_QWORD *)v3;
        *(_DWORD *)(v148 + 8) = v146;
        *(_DWORD *)(v148 + 12) = v147;
        *(_QWORD *)(v148 + 16) = 0;
        *(_DWORD *)(v148 + 24) = 1;
        *(_BYTE *)(v148 + 36) = 0;
        *(_QWORD *)(v148 + 28) = 0;
        *(_WORD *)(v148 + 37) = 4;
        *(_BYTE *)(v148 + 39) = 1;
        *(_WORD *)(v148 + 40) = 0;
        *(_BYTE *)(v148 + 42) = 2;
        *(_DWORD *)(v148 + 43) = 0;
        *(_BYTE *)(v148 + 47) = (0x4AuLL >> v137) & 1;
        *(_WORD *)(v148 + 52) = 0;
        *(_DWORD *)(v148 + 48) = 0;
        *(_DWORD *)(v148 + 54) = 3;
      }
      ++v137;
      v149 = *v139;
      v139 += 2;
      v140 = v149;
    }
    while (v137 != 7);
  }
  v150 = 1;
  do
  {
    v151 = 0;
    v379 = v150;
    if ((v150 & 1) != 0)
      v152 = &pixel_data_types;
    else
      v152 = &packed_pixel_data_types;
    v388 = *v152;
    v153 = "1d";
    v401 = v152;
    do
    {
      v154 = 0;
      v439 = (std::string::value_type *)&(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v151 + 1];
      if ((unint64_t)(v151 - 5) >= 3)
        v155 = 6;
      else
        v155 = 7;
      if ((unint64_t)(v151 - 5) >= 3)
        v156 = 0;
      else
        v156 = 6;
      v434 = v156;
      v384 = v151;
      if (((0xB5uLL >> v151) & 1) != 0)
        v157 = v155;
      else
        v157 = v155 + 1;
      if (((0xB5uLL >> v151) & 1) != 0)
        v155 = 0;
      __sd = v155;
      v418 = v157 + 1;
      v428 = v157;
      v411 = v157 + 3;
      v415 = v157 + 2;
      v158 = 1;
      v159 = 1;
      v160 = ".i16";
      do
      {
        v392 = v159;
        v397 = v154;
        if (v388)
        {
          v161 = 0;
          v162 = 0;
          v163 = v388;
          do
          {
            v406 = v162;
            v164 = 0;
            v165 = &v152[2 * v161 + 1];
            v166 = (char *)&unk_1C3E4D9BB;
            do
            {
              *(_QWORD *)&v451 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "air.write_imageblock_slice_to_texture_", "");
              v167 = strlen(v153);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v153, &v153[v167]);
              v168 = strlen(v166);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v166, &v166[v168]);
              if ((v158 & 1) != 0)
              {
                v169 = strlen(v160);
                llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v160, &v160[v169]);
              }
              v170 = strlen(v163);
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v163, &v163[v170]);
              v171 = *(_DWORD *)v439;
              v172 = *(_DWORD *)v165;
              v173 = (char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::rounding_modes + v164;
              v174 = *(_DWORD *)((char *)&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::rounding_modes
                               + v164
                               + 8);
              v3 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::AIRSampleFunction,llvm::MallocAllocator>::try_emplace<>(v450, v451);
              v175 = *(_QWORD *)v3;
              *(_DWORD *)(v175 + 8) = 8;
              *(_DWORD *)(v175 + 12) = v171;
              *(_QWORD *)(v175 + 16) = 0xA00000001;
              *(_DWORD *)(v175 + 24) = 1;
              *(_DWORD *)(v175 + 28) = v172;
              *(_DWORD *)(v175 + 32) = v174;
              *(_BYTE *)(v175 + 36) = 0;
              *(_BYTE *)(v175 + 37) = v411;
              *(_DWORD *)(v175 + 38) = 0x10000;
              *(_BYTE *)(v175 + 42) = 5;
              *(_BYTE *)(v175 + 45) = 0;
              *(_WORD *)(v175 + 43) = 0;
              *(_BYTE *)(v175 + 46) = v428;
              *(_BYTE *)(v175 + 47) = __sd;
              *(_BYTE *)(v175 + 50) = 0;
              *(_WORD *)(v175 + 48) = 0;
              *(_BYTE *)(v175 + 51) = v434;
              *(_WORD *)(v175 + 52) = 0;
              *(_BYTE *)(v175 + 54) = v415;
              *(_BYTE *)(v175 + 55) = 0;
              *(_BYTE *)(v175 + 56) = v418;
              *(_BYTE *)(v175 + 57) = 0;
              v164 += 16;
              v166 = (char *)*((_QWORD *)v173 + 2);
            }
            while (v164 != 48);
            v161 = (v406 + 1);
            v152 = v401;
            v163 = v401[2 * v161];
            v162 = v406 + 1;
          }
          while (v163);
        }
        v158 = 0;
        v160 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::coord_types)[2 * v392];
        v154 = 1;
        v159 = 2;
      }
      while ((v397 & 1) == 0);
      v151 = v384 + 1;
      v153 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v384 + 2];
    }
    while (v384 != 6);
    v150 = 0;
  }
  while ((v379 & 1) != 0);
  AGCLLVMUserObject::getDimensionFunctionMap(v3);
  v176 = 0;
  while (2)
  {
    v177 = 0;
    v178 = &(&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::dim_funcs)[2 * v176];
    v179 = *((_DWORD *)v178 + 2);
    v180 = "1d";
    while (2)
    {
      if (v176 != 4 || v177 == 4)
      {
        v181 = (0xB5uLL >> v177) & 1;
        if ((v176 - 5) > 1 || !v181)
        {
          v182 = v181 == 0;
          if (v181)
            v183 = "2d_ms";
          else
            v183 = "2d_ms_array";
          v184 = 5;
          if (v182)
            v184 = 11;
          v440 = (std::string::value_type *)&v183[v184];
          v185 = 1;
          do
          {
            if ((v185 & 1) != 0)
              v186 = -11;
            else
              v186 = -9;
            if ((v186 + v176) > 0xFFFFFFFD)
              goto LABEL_253;
            v187 = *v178;
            if (*v178)
            {
              v188 = strlen(*v178);
              *(_QWORD *)&v451 = 0;
              llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v187, &v187[v188]);
              if ((v185 & 1) == 0)
                goto LABEL_251;
            }
            else
            {
              *(_QWORD *)&v451 = 0;
              if ((v185 & 1) == 0)
              {
LABEL_251:
                v190 = (char *)v183;
                v189 = v440;
                goto LABEL_252;
              }
            }
            v189 = (std::string::value_type *)&v180[strlen(v180)];
            v190 = (char *)v180;
LABEL_252:
            llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v190, v189);
            v191 = *llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::try_emplace<>(v450, v451);
            *(_DWORD *)(v191 + 12) = v179;
            *(_BYTE *)(v191 + 16) = 0;
LABEL_253:
            v192 = ((v177 & 0xFFFFFFFE) == 2) & v185;
            v185 = 0;
          }
          while ((v192 & 1) != 0);
        }
      }
      ++v177;
      v180 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v177];
      if (v177 != 7)
        continue;
      break;
    }
    if (++v176 != 11)
      continue;
    break;
  }
  *(_QWORD *)&v451 = 0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "air.get_width_texture_buffer_1d", "");
  v193 = (AGCLLVMUserObject *)llvm::StringMap<AGCLLVMUserObject::DimensionFunction,llvm::MallocAllocator>::try_emplace<>(v450, v451);
  v194 = *(_QWORD *)v193;
  *(_DWORD *)(v194 + 12) = 0;
  *(_BYTE *)(v194 + 16) = 1;
  AGCLLVMUserObject::getTextureFenceFunctionSet(v193);
  v195 = 0;
  v196 = "1d";
  do
  {
    if (((0xB5uLL >> v195) & 1) != 0)
      v197 = "2d_ms";
    else
      v197 = "2d_ms_array";
    v198 = 5;
    if (((0xB5uLL >> v195) & 1) == 0)
      v198 = 11;
    v199 = &v197[v198];
    v200 = 1;
    do
    {
      *(_QWORD *)&v451 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "air.fence_texture_", "");
      if ((v200 & 1) != 0)
      {
        v201 = (char *)&v196[strlen(v196)];
        v202 = (char *)v196;
      }
      else
      {
        v202 = (char *)v197;
        v201 = (char *)v199;
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v202, v201);
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureFenceFunctionSet(void)::texturefence_function_set, v450, v451);
      v203 = ((v195 & 0xFFFFFFFE) == 2) & v200;
      v200 = 0;
    }
    while ((v203 & 1) != 0);
    ++v195;
    v196 = (&AGCLLVMUserObject::initializeTextureAndSamplerFunctionMaps(void)::image_dims)[2 * v195];
  }
  while (v195 != 7);
  *(_QWORD *)&v451 = 0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "air.fence_texture_", "");
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "buffer_1d", "");
  v204 = (AGCLLVMUserObject *)llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureFenceFunctionSet(void)::texturefence_function_set, v450, v451);
  AGCLLVMUserObject::getIsNullTextureFunctionSet(v204);
  for (j = 0; j != 16; ++j)
  {
    *(_QWORD *)&v451 = 0;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "air.is_null_", "");
    v206 = strlen(off_1E7EB7B80[j]);
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, off_1E7EB7B80[j], &off_1E7EB7B80[j][v206]);
    v207 = (AGCLLVMUserObject *)llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getIsNullTextureFunctionSet(void)::is_null_texture_function_set, v450, v451);
  }
  AGCLLVMUserObject::getGetNullTextureFunctionSet(v207);
  for (k = 0; k != 16; ++k)
  {
    *(_QWORD *)&v451 = 0;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "air.get_null_", "");
    v209 = strlen(off_1E7EB7B80[k]);
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, off_1E7EB7B80[k], &off_1E7EB7B80[k][v209]);
    v210 = (AGCLLVMUserObject *)llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getGetNullTextureFunctionSet(void)::get_null_texture_function_set, v450, v451);
  }
  AGCLLVMUserObject::getUniqueIDFunctionSet(v210);
  for (m = 0; m != 16; ++m)
  {
    *(_QWORD *)&v451 = 0;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "air.get_unique_identifier_", "");
    v212 = strlen(off_1E7EB7B80[m]);
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, off_1E7EB7B80[m], &off_1E7EB7B80[m][v212]);
    v213 = (AGCLLVMUserObject *)llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getUniqueIDFunctionSet(void)::uniqueID_function_set, v450, v451);
  }
  AGCLLVMUserObject::getTextureAtomicFunctionSet(v213);
  v214 = 0;
  do
  {
    std::string::basic_string[abi:nn180100]<0>(&v446, "air.atomic_load_explicit_");
    v429 = v214;
    v441 = off_1E7EB7B80[v214];
    v215 = std::string::append(&v446, v441);
    __p = *v215;
    v215->__r_.__value_.__r.__words[0] = 0;
    v215->__r_.__value_.__l.__size_ = 0;
    v215->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v446.__r_.__value_.__l.__data_);
    for (n = 0; n != 4; ++n)
    {
      v217 = off_1E7EB7C00[n];
      v218 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v220 = strlen(off_1E7EB7C00[n]);
      std::string::basic_string[abi:nn180100]((uint64_t)&v446, size + v220);
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v221 = &v446;
      else
        v221 = (std::string *)v446.__r_.__value_.__r.__words[0];
      if (size)
      {
        if (v218 >= 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v221, p_p, size);
      }
      v223 = (char *)v221 + size;
      if (v220)
        memmove(v223, v217, v220);
      v223[v220] = 0;
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v224 = &v446;
      else
        v224 = (std::string *)v446.__r_.__value_.__r.__words[0];
      v225 = HIBYTE(v446.__r_.__value_.__r.__words[2]);
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v225 = v446.__r_.__value_.__l.__size_;
      *(_QWORD *)&v451 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v224, (_BYTE *)v224 + v225);
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v446.__r_.__value_.__l.__data_);
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v450, v451);
    }
    std::string::basic_string[abi:nn180100]<0>(&v446, "air.atomic_store_explicit_");
    v226 = std::string::append(&v446, v441);
    v227 = v226->__r_.__value_.__r.__words[0];
    v448.__r_.__value_.__r.__words[0] = v226->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v448.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v226->__r_.__value_.__r.__words[1] + 7);
    v228 = HIBYTE(v226->__r_.__value_.__r.__words[2]);
    v226->__r_.__value_.__l.__size_ = 0;
    v226->__r_.__value_.__r.__words[2] = 0;
    v226->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v227;
    __p.__r_.__value_.__l.__size_ = v448.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v448.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v228;
    if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v446.__r_.__value_.__l.__data_);
    for (ii = 0; ii != 4; ++ii)
    {
      v230 = off_1E7EB7C00[ii];
      v231 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v232 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v232 = __p.__r_.__value_.__l.__size_;
      v233 = strlen(off_1E7EB7C00[ii]);
      std::string::basic_string[abi:nn180100]((uint64_t)&v446, v232 + v233);
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v234 = &v446;
      else
        v234 = (std::string *)v446.__r_.__value_.__r.__words[0];
      if (v232)
      {
        if (v231 >= 0)
          v235 = &__p;
        else
          v235 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v234, v235, v232);
      }
      v236 = (char *)v234 + v232;
      if (v233)
        memmove(v236, v230, v233);
      v236[v233] = 0;
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v237 = &v446;
      else
        v237 = (std::string *)v446.__r_.__value_.__r.__words[0];
      v238 = HIBYTE(v446.__r_.__value_.__r.__words[2]);
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v238 = v446.__r_.__value_.__l.__size_;
      *(_QWORD *)&v451 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v237, (_BYTE *)v237 + v238);
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v446.__r_.__value_.__l.__data_);
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v450, v451);
    }
    std::string::basic_string[abi:nn180100]<0>(&v446, "air.atomic_exchange_explicit_");
    v239 = std::string::append(&v446, v441);
    v240 = v239->__r_.__value_.__r.__words[0];
    v448.__r_.__value_.__r.__words[0] = v239->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v448.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v239->__r_.__value_.__r.__words[1] + 7);
    v241 = HIBYTE(v239->__r_.__value_.__r.__words[2]);
    v239->__r_.__value_.__l.__size_ = 0;
    v239->__r_.__value_.__r.__words[2] = 0;
    v239->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v240;
    __p.__r_.__value_.__l.__size_ = v448.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v448.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v241;
    if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v446.__r_.__value_.__l.__data_);
    for (jj = 0; jj != 4; ++jj)
    {
      v243 = off_1E7EB7C00[jj];
      v244 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v245 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v245 = __p.__r_.__value_.__l.__size_;
      v246 = strlen(off_1E7EB7C00[jj]);
      std::string::basic_string[abi:nn180100]((uint64_t)&v446, v245 + v246);
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v247 = &v446;
      else
        v247 = (std::string *)v446.__r_.__value_.__r.__words[0];
      if (v245)
      {
        if (v244 >= 0)
          v248 = &__p;
        else
          v248 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v247, v248, v245);
      }
      v249 = (char *)v247 + v245;
      if (v246)
        memmove(v249, v243, v246);
      v249[v246] = 0;
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v250 = &v446;
      else
        v250 = (std::string *)v446.__r_.__value_.__r.__words[0];
      v251 = HIBYTE(v446.__r_.__value_.__r.__words[2]);
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v251 = v446.__r_.__value_.__l.__size_;
      *(_QWORD *)&v451 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v250, (_BYTE *)v250 + v251);
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v446.__r_.__value_.__l.__data_);
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v450, v451);
    }
    std::string::basic_string[abi:nn180100]<0>(&v446, "air.atomic_compare_exchange_weak_explicit_");
    v252 = std::string::append(&v446, v441);
    v253 = v252->__r_.__value_.__r.__words[0];
    v448.__r_.__value_.__r.__words[0] = v252->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v448.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v252->__r_.__value_.__r.__words[1] + 7);
    v254 = HIBYTE(v252->__r_.__value_.__r.__words[2]);
    v252->__r_.__value_.__l.__size_ = 0;
    v252->__r_.__value_.__r.__words[2] = 0;
    v252->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v253;
    __p.__r_.__value_.__l.__size_ = v448.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v448.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v254;
    if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v446.__r_.__value_.__l.__data_);
    for (kk = 0; kk != 4; ++kk)
    {
      v256 = off_1E7EB7C00[kk];
      v257 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v258 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v258 = __p.__r_.__value_.__l.__size_;
      v259 = strlen(off_1E7EB7C00[kk]);
      std::string::basic_string[abi:nn180100]((uint64_t)&v446, v258 + v259);
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v260 = &v446;
      else
        v260 = (std::string *)v446.__r_.__value_.__r.__words[0];
      if (v258)
      {
        if (v257 >= 0)
          v261 = &__p;
        else
          v261 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v260, v261, v258);
      }
      v262 = (char *)v260 + v258;
      if (v259)
        memmove(v262, v256, v259);
      v262[v259] = 0;
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v263 = &v446;
      else
        v263 = (std::string *)v446.__r_.__value_.__r.__words[0];
      v264 = HIBYTE(v446.__r_.__value_.__r.__words[2]);
      if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v264 = v446.__r_.__value_.__l.__size_;
      *(_QWORD *)&v451 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v263, (_BYTE *)v263 + v264);
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v446.__r_.__value_.__l.__data_);
      llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v450, v451);
    }
    for (mm = 0; mm != 7; ++mm)
    {
      std::string::basic_string[abi:nn180100]<0>(&v445, "air.atomic_");
      v266 = std::string::append(&v445, off_1E7EB7C30[mm]);
      v267 = v266->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v448.__r_.__value_.__l.__data_ = *(_OWORD *)&v266->__r_.__value_.__l.__data_;
      v448.__r_.__value_.__r.__words[2] = v267;
      v266->__r_.__value_.__l.__size_ = 0;
      v266->__r_.__value_.__r.__words[2] = 0;
      v266->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:nn180100]<0>(&v442, "_explicit_");
      if ((v444 & 0x80u) == 0)
        v268 = (const std::string::value_type *)&v442;
      else
        v268 = (const std::string::value_type *)v442;
      if ((v444 & 0x80u) == 0)
        v269 = v444;
      else
        v269 = v443;
      v270 = std::string::append(&v448, v268, v269);
      v271 = v270->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v446.__r_.__value_.__l.__data_ = *(_OWORD *)&v270->__r_.__value_.__l.__data_;
      v446.__r_.__value_.__r.__words[2] = v271;
      v270->__r_.__value_.__l.__size_ = 0;
      v270->__r_.__value_.__r.__words[2] = 0;
      v270->__r_.__value_.__r.__words[0] = 0;
      v272 = std::string::append(&v446, v441);
      v273 = v272->__r_.__value_.__r.__words[0];
      v449[0] = v272->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v449 + 7) = *(std::string::size_type *)((char *)&v272->__r_.__value_.__r.__words[1] + 7);
      v274 = HIBYTE(v272->__r_.__value_.__r.__words[2]);
      v272->__r_.__value_.__l.__size_ = 0;
      v272->__r_.__value_.__r.__words[2] = 0;
      v272->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = v273;
      __p.__r_.__value_.__l.__size_ = v449[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v449 + 7);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v274;
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v446.__r_.__value_.__l.__data_);
      if ((char)v444 < 0)
        operator delete(v442);
      if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v448.__r_.__value_.__l.__data_);
      if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v445.__r_.__value_.__l.__data_);
      for (nn = 0; nn != 4; ++nn)
      {
        v276 = off_1E7EB7C00[nn];
        v277 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v278 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v278 = __p.__r_.__value_.__l.__size_;
        v279 = strlen(off_1E7EB7C00[nn]);
        std::string::basic_string[abi:nn180100]((uint64_t)&v446, v278 + v279);
        if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v280 = &v446;
        else
          v280 = (std::string *)v446.__r_.__value_.__r.__words[0];
        if (v278)
        {
          if (v277 >= 0)
            v281 = &__p;
          else
            v281 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v280, v281, v278);
        }
        v282 = (char *)v280 + v278;
        if (v279)
          memmove(v282, v276, v279);
        v282[v279] = 0;
        if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v283 = &v446;
        else
          v283 = (std::string *)v446.__r_.__value_.__r.__words[0];
        v284 = HIBYTE(v446.__r_.__value_.__r.__words[2]);
        if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v284 = v446.__r_.__value_.__l.__size_;
        *(_QWORD *)&v451 = 0;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v283, (_BYTE *)v283 + v284);
        if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v446.__r_.__value_.__l.__data_);
        llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v450, v451);
      }
    }
    v285 = 0;
    v286 = 0;
    do
    {
      v287 = v285;
      std::string::basic_string[abi:nn180100]<0>(&v445, "air.atomic_");
      v288 = std::string::append(&v445, off_1E7EB7C68[v286]);
      v289 = v288->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v448.__r_.__value_.__l.__data_ = *(_OWORD *)&v288->__r_.__value_.__l.__data_;
      v448.__r_.__value_.__r.__words[2] = v289;
      v288->__r_.__value_.__l.__size_ = 0;
      v288->__r_.__value_.__r.__words[2] = 0;
      v288->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:nn180100]<0>(&v442, "_explicit_");
      if ((v444 & 0x80u) == 0)
        v290 = (const std::string::value_type *)&v442;
      else
        v290 = (const std::string::value_type *)v442;
      if ((v444 & 0x80u) == 0)
        v291 = v444;
      else
        v291 = v443;
      v292 = std::string::append(&v448, v290, v291);
      v293 = v292->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v446.__r_.__value_.__l.__data_ = *(_OWORD *)&v292->__r_.__value_.__l.__data_;
      v446.__r_.__value_.__r.__words[2] = v293;
      v292->__r_.__value_.__l.__size_ = 0;
      v292->__r_.__value_.__r.__words[2] = 0;
      v292->__r_.__value_.__r.__words[0] = 0;
      v294 = std::string::append(&v446, v441);
      v295 = v294->__r_.__value_.__r.__words[0];
      v449[0] = v294->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v449 + 7) = *(std::string::size_type *)((char *)&v294->__r_.__value_.__r.__words[1] + 7);
      v296 = HIBYTE(v294->__r_.__value_.__r.__words[2]);
      v294->__r_.__value_.__l.__size_ = 0;
      v294->__r_.__value_.__r.__words[2] = 0;
      v294->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = v295;
      __p.__r_.__value_.__l.__size_ = v449[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v449 + 7);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v296;
      if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v446.__r_.__value_.__l.__data_);
      if ((char)v444 < 0)
        operator delete(v442);
      if (SHIBYTE(v448.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v448.__r_.__value_.__l.__data_);
      if (SHIBYTE(v445.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v445.__r_.__value_.__l.__data_);
      v297 = 0;
      v298 = 1;
      do
      {
        v299 = off_1E7EB7C20[v297];
        v300 = v298;
        v301 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v302 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v302 = __p.__r_.__value_.__l.__size_;
        v303 = strlen(v299);
        std::string::basic_string[abi:nn180100]((uint64_t)&v446, v302 + v303);
        if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v304 = &v446;
        else
          v304 = (std::string *)v446.__r_.__value_.__r.__words[0];
        if (v302)
        {
          if (v301 >= 0)
            v305 = &__p;
          else
            v305 = (std::string *)__p.__r_.__value_.__r.__words[0];
          memmove(v304, v305, v302);
        }
        v306 = (char *)v304 + v302;
        if (v303)
          memmove(v306, v299, v303);
        v306[v303] = 0;
        if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v307 = &v446;
        else
          v307 = (std::string *)v446.__r_.__value_.__r.__words[0];
        v308 = HIBYTE(v446.__r_.__value_.__r.__words[2]);
        if ((v446.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v308 = v446.__r_.__value_.__l.__size_;
        *(_QWORD *)&v451 = 0;
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, v307, (_BYTE *)v307 + v308);
        if (SHIBYTE(v446.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v446.__r_.__value_.__l.__data_);
        llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getTextureAtomicFunctionSet(void)::texture_atomic_function_set, v450, v451);
        v298 = 0;
        v297 = 1;
      }
      while ((v300 & 1) != 0);
      v285 = 1;
      v286 = 1;
    }
    while ((v287 & 1) == 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v214 = v429 + 1;
  }
  while (v429 != 7);
  *(_QWORD *)&v451 = 0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "air.get_unique_identifier_", "");
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v450, "sampler", "");
  llvm::StringMap<llvm::NoneType,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getUniqueIDFunctionSet(void)::uniqueID_function_set, v450, v451);
  v3 = (AGCLLVMUserObject *)v450;
  if (v450 != v452)
    free(v450);
LABEL_462:
  AGCLLVMUserObject::getBuiltinArgMap(v3);
  if (!dword_1ED839B5C)
  {
    v310 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.vertex_id", 0xDuLL);
    *(_QWORD *)(v310 + 8) = "air.get_vertex_id";
    *(_QWORD *)(v310 + 16) = 17;
    *(_BYTE *)(v310 + 24) = 1;
    v311 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.instance_id", 0xFuLL);
    *(_QWORD *)(v311 + 8) = "air.get_instance_id";
    *(_QWORD *)(v311 + 16) = 19;
    *(_BYTE *)(v311 + 24) = 1;
    v312 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.base_vertex", 0xFuLL);
    *(_QWORD *)(v312 + 8) = "air.get_base_vertex";
    *(_QWORD *)(v312 + 16) = 19;
    *(_BYTE *)(v312 + 24) = 1;
    v313 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.base_instance", 0x11uLL);
    *(_QWORD *)(v313 + 8) = "air.get_base_instance";
    *(_QWORD *)(v313 + 16) = 21;
    *(_BYTE *)(v313 + 24) = 1;
    v314 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_position_in_grid", 0x1BuLL);
    *(_QWORD *)(v314 + 8) = "air.get_global_id";
    *(_QWORD *)(v314 + 16) = 17;
    *(_BYTE *)(v314 + 24) = 0;
    v315 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_position_in_threadgroup", 0x22uLL);
    *(_QWORD *)(v315 + 8) = "air.get_local_id";
    *(_QWORD *)(v315 + 16) = 16;
    *(_BYTE *)(v315 + 24) = 0;
    v316 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_index_in_threadgroup", 0x1FuLL);
    *(_QWORD *)(v316 + 8) = "air.get_local_linear_id";
    *(_QWORD *)(v316 + 16) = 23;
    *(_BYTE *)(v316 + 24) = 1;
    v317 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threadgroup_position_in_grid", 0x20uLL);
    *(_QWORD *)(v317 + 8) = "air.get_group_id";
    *(_QWORD *)(v317 + 16) = 16;
    *(_BYTE *)(v317 + 24) = 0;
    v318 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threads_per_grid", 0x14uLL);
    *(_QWORD *)(v318 + 8) = "air.get_global_size";
    *(_QWORD *)(v318 + 16) = 19;
    *(_BYTE *)(v318 + 24) = 0;
    v319 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threads_per_threadgroup", 0x1BuLL);
    *(_QWORD *)(v319 + 8) = "air.get_local_size";
    *(_QWORD *)(v319 + 16) = 18;
    *(_BYTE *)(v319 + 24) = 0;
    v320 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threadgroups_per_grid", 0x19uLL);
    *(_QWORD *)(v320 + 8) = "air.get_num_groups";
    *(_QWORD *)(v320 + 16) = 18;
    *(_BYTE *)(v320 + 24) = 0;
    v321 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_execution_width", 0x1AuLL);
    *(_QWORD *)(v321 + 8) = "air.get_thread_execution_width";
    *(_QWORD *)(v321 + 16) = 30;
    *(_BYTE *)(v321 + 24) = 1;
    v322 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.dispatch_threads_per_threadgroup", 0x24uLL);
    *(_QWORD *)(v322 + 8) = "air.get_dispatch_local_size";
    *(_QWORD *)(v322 + 16) = 27;
    *(_BYTE *)(v322 + 24) = 0;
    v323 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_index_in_quadgroup", 0x1DuLL);
    *(_QWORD *)(v323 + 8) = "air.get_quad_element";
    *(_QWORD *)(v323 + 16) = 20;
    *(_BYTE *)(v323 + 24) = 1;
    v324 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.quadgroup_index_in_threadgroup", 0x22uLL);
    *(_QWORD *)(v324 + 8) = "air.get_quad_group";
    *(_QWORD *)(v324 + 16) = 18;
    *(_BYTE *)(v324 + 24) = 1;
    v325 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.quadgroups_per_threadgroup", 0x1EuLL);
    *(_QWORD *)(v325 + 8) = "air.get_quadgroups_per_threadgroup";
    *(_QWORD *)(v325 + 16) = 34;
    *(_BYTE *)(v325 + 24) = 1;
    v326 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.dispatch_quadgroups_per_threadgroup", 0x27uLL);
    *(_QWORD *)(v326 + 8) = "air.get_dispatch_quadgroups_per_threadgroup";
    *(_QWORD *)(v326 + 16) = 43;
    *(_BYTE *)(v326 + 24) = 1;
    v327 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.threads_per_simdgroup", 0x19uLL);
    *(_QWORD *)(v327 + 8) = "air.get_threads_per_simdgroup";
    *(_QWORD *)(v327 + 16) = 29;
    *(_BYTE *)(v327 + 24) = 1;
    v328 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.thread_index_in_simdgroup", 0x1DuLL);
    *(_QWORD *)(v328 + 8) = "air.get_thread_index_in_simdgroup";
    *(_QWORD *)(v328 + 16) = 33;
    *(_BYTE *)(v328 + 24) = 1;
    v329 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.simdgroup_index_in_threadgroup", 0x22uLL);
    *(_QWORD *)(v329 + 8) = "air.get_simdgroup_index_in_threadgroup";
    *(_QWORD *)(v329 + 16) = 38;
    *(_BYTE *)(v329 + 24) = 1;
    v330 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.simdgroups_per_threadgroup", 0x1EuLL);
    *(_QWORD *)(v330 + 8) = "air.get_simdgroups_per_threadgroup";
    *(_QWORD *)(v330 + 16) = 34;
    *(_BYTE *)(v330 + 24) = 1;
    v331 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.dispatch_simdgroups_per_threadgroup", 0x27uLL);
    *(_QWORD *)(v331 + 8) = "air.get_dispatch_simdgroups_per_threadgroup";
    *(_QWORD *)(v331 + 16) = 43;
    *(_BYTE *)(v331 + 24) = 1;
    v332 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.pixel_position_in_tile", 0x1AuLL);
    *(_QWORD *)(v332 + 8) = "air.get_local_id";
    *(_QWORD *)(v332 + 16) = 16;
    *(_BYTE *)(v332 + 24) = 0;
    v333 = *llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.pixels_per_tile", 0x13uLL);
    *(_QWORD *)(v333 + 8) = "air.get_local_size";
    *(_QWORD *)(v333 + 16) = 18;
    *(_BYTE *)(v333 + 24) = 0;
    v309 = (llvm::PassRegistry *)llvm::StringMap<AGCLLVMUserObject::BuiltinArg,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)&AGCLLVMUserObject::getBuiltinArgMap(void)::builtin_arg_map, "air.tile_index", 0xEuLL);
    v334 = *(_QWORD *)v309;
    *(_QWORD *)(v334 + 8) = "air.get_local_linear_id";
    *(_QWORD *)(v334 + 16) = 23;
    *(_BYTE *)(v334 + 24) = 1;
  }
  PassRegistry = (llvm *)llvm::PassRegistry::getPassRegistry(v309);
  llvm::initializeCore(PassRegistry, v336);
  llvm::initializeScalarOpts(PassRegistry, v337);
  llvm::initializeVectorization(PassRegistry, v338);
  llvm::initializeIPO(PassRegistry, v339);
  llvm::initializeAnalysis(PassRegistry, v340);
  llvm::initializeTransformUtils(PassRegistry, v341);
  llvm::initializeInstCombine(PassRegistry, v342);
  return llvm::initializeTarget(PassRegistry, v343);
}

uint64_t AGCLLVMCtx::AGCLLVMCtx(uint64_t a1, uint64_t a2, uint64_t a3, int a4, __int128 *a5, const void **a6)
{
  std::string *v9;
  __int128 v10;
  int v11;
  const char *v12;
  BOOL v13;
  const char *Value;
  size_t v15;
  Boolean *v16;
  const std::string::value_type *v17;
  void **v18;
  unint64_t v19;
  void *v20;
  int v21;
  const void *v22;
  size_t v23;
  const __CFAllocator *v24;
  CFStringRef v25;
  const __CFString *v26;
  const __CFString *v27;
  const __CFString *v28;
  char AppIntegerValue;
  char v30;
  Boolean keyExistsAndHasValidFormat[16];
  uint64_t v33;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a4;
  llvm::AGX::AGXCompiler::AGXCompiler();
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 176;
  *(_OWORD *)(a1 + 160) = xmmword_1C3E37F10;
  v9 = (std::string *)(a1 + 384);
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v10 = *a5;
    *(_QWORD *)(a1 + 400) = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  llvm::AGX::TelemetryCollector::TelemetryCollector((llvm::AGX::TelemetryCollector *)(a1 + 448));
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 378) = 0;
  v11 = MGGetBoolAnswer();
  v13 = 0;
  if (v11)
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_DISABLE_OPTIMIZATIONS", v12);
    v13 = Value && *Value != 48 && atoi(Value) != 0;
  }
  *(_BYTE *)(a1 + 378) = v13;
  if (*((char *)a5 + 23) >= 0)
    v15 = *((unsigned __int8 *)a5 + 23);
  else
    v15 = *((_QWORD *)a5 + 1);
  v16 = keyExistsAndHasValidFormat;
  std::string::basic_string[abi:nn180100]((uint64_t)keyExistsAndHasValidFormat, v15 + 18);
  if (v33 < 0)
    v16 = *(Boolean **)keyExistsAndHasValidFormat;
  if (v15)
  {
    if (*((char *)a5 + 23) >= 0)
      v17 = (const std::string::value_type *)a5;
    else
      v17 = *(const std::string::value_type **)a5;
    memmove(v16, v17, v15);
  }
  v18 = (void **)(a1 + 408);
  strcpy((char *)&v16[v15], "/metal_rt.metallib");
  if (*(char *)(a1 + 431) < 0)
    operator delete(*v18);
  *(_OWORD *)v18 = *(_OWORD *)keyExistsAndHasValidFormat;
  *(_QWORD *)(a1 + 424) = v33;
  v19 = *((unsigned __int8 *)a6 + 23);
  if ((v19 & 0x80u) != 0)
    v19 = (unint64_t)a6[1];
  *(_DWORD *)(a1 + 440) = v19 >> 2;
  v20 = (void *)operator new[]();
  *(_QWORD *)(a1 + 432) = v20;
  v21 = *((char *)a6 + 23);
  if (v21 >= 0)
    v22 = a6;
  else
    v22 = *a6;
  if (v21 >= 0)
    v23 = *((unsigned __int8 *)a6 + 23);
  else
    v23 = (size_t)a6[1];
  memcpy(v20, v22, v23);
  keyExistsAndHasValidFormat[0] = 0;
  v24 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v25 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "UseGlobalISel", 0x8000100u);
  if (!v25)
    goto LABEL_35;
  v26 = v25;
  v27 = CFStringCreateWithCString(v24, "com.apple.Metal", 0x8000100u);
  if (!v27)
  {
    CFRelease(v26);
LABEL_35:
    v30 = 0;
    goto LABEL_36;
  }
  v28 = v27;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(v26, v27, keyExistsAndHasValidFormat);
  CFRelease(v26);
  CFRelease(v28);
  if (keyExistsAndHasValidFormat[0])
    v30 = AppIntegerValue;
  else
    v30 = 0;
LABEL_36:
  *(_BYTE *)(a1 + 444) = v30;
  return a1;
}

void AGCLLVMCtx::~AGCLLVMCtx(AGCLLVMCtx *this)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  for (i = 328; i != 352; i += 8)
  {
    v3 = *(_QWORD *)((char *)this + i);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)((char *)this + i) = 0;
  }
  v4 = *((_QWORD *)this + 44);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 44) = 0;
  v5 = *((_QWORD *)this + 45);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 45) = 0;
  v6 = *((_QWORD *)this + 46);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 46) = 0;
  v7 = *((_QWORD *)this + 54);
  if (v7)
    MEMORY[0x1CAA2D674](v7, 0x1000C8052888210);
  MEMORY[0x1CAA2CAB0]((char *)this + 448);
  if (*((char *)this + 431) < 0)
    operator delete(*((void **)this + 51));
  if (*((char *)this + 407) < 0)
    operator delete(*((void **)this + 48));
  if (*((char *)this + 327) < 0)
    operator delete(*((void **)this + 38));
  v8 = (char *)*((_QWORD *)this + 19);
  if (v8 != (char *)this + 176)
    free(v8);
  if (*((_BYTE *)this + 144))
  {
    MEMORY[0x1CAA2CA38]((char *)this + 128);
    *((_BYTE *)this + 144) = 0;
  }
  if (*((_BYTE *)this + 120))
  {
    MEMORY[0x1CAA2CA38]((char *)this + 104);
    *((_BYTE *)this + 120) = 0;
  }
  if (*((_BYTE *)this + 96))
  {
    MEMORY[0x1CAA2CA38]((char *)this + 80);
    *((_BYTE *)this + 96) = 0;
  }
  if (*((_BYTE *)this + 72))
  {
    MEMORY[0x1CAA2CA38]((char *)this + 56);
    *((_BYTE *)this + 72) = 0;
  }
  llvm::AGX::AGXCompiler::~AGXCompiler((AGCLLVMCtx *)((char *)this + 48));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t AGCLLVMCtx::addPass(AGCLLVMCtx *this, llvm::legacy::PassManager *a2, llvm::Pass *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (isValidToPrintMessage((char **)&AGCPrinter))
  {
    v6 = operator new();
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = &AGCLLVMPrintModulePass::ID;
    *(_DWORD *)(v6 + 24) = 4;
    *(_QWORD *)v6 = &off_1E7EC0628;
    *(_QWORD *)(v6 + 32) = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)(v6 + 40) = v7;
    *(_BYTE *)(v6 + 48) = 1;
    *(_QWORD *)(v6 + 56) = this;
    (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v6);
    v8 = operator new();
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = &AGCLLVMVerifyModulePass::ID;
    *(_DWORD *)(v8 + 24) = 4;
    *(_QWORD *)v8 = &off_1E7EC06C8;
    *(_QWORD *)(v8 + 32) = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)(v8 + 40) = v9;
    *(_BYTE *)(v8 + 48) = 1;
    *(_QWORD *)(v8 + 56) = this;
    (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v8);
  }
  (*(void (**)(llvm::legacy::PassManager *, llvm::Pass *))(*(_QWORD *)a2 + 16))(a2, a3);
  result = isValidToPrintMessage((char **)&AGCPrinter);
  if ((_DWORD)result)
  {
    v11 = operator new();
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = &AGCLLVMPrintModulePass::ID;
    *(_DWORD *)(v11 + 24) = 4;
    *(_QWORD *)v11 = &off_1E7EC0628;
    *(_QWORD *)(v11 + 32) = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)(v11 + 40) = v12;
    *(_BYTE *)(v11 + 48) = 0;
    *(_QWORD *)(v11 + 56) = this;
    (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v11);
    v13 = operator new();
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = &AGCLLVMVerifyModulePass::ID;
    *(_DWORD *)(v13 + 24) = 4;
    *(_QWORD *)v13 = &off_1E7EC06C8;
    *(_QWORD *)(v13 + 32) = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)a3 + 16))(a3);
    *(_QWORD *)(v13 + 40) = v14;
    *(_BYTE *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = this;
    return (*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v13);
  }
  return result;
}

llvm::legacy::PassManager *AGCLLVMCtx::createPassManager(AGCLLVMCtx *this)
{
  llvm::legacy::PassManager *v2;
  uint64_t v3;
  _BYTE *v4;
  char v5;
  _BYTE *v7;
  char v8;
  char v9;
  void *__p[2];
  char v11;

  v2 = (llvm::legacy::PassManager *)operator new();
  llvm::legacy::PassManager::PassManager(v2);
  v3 = operator new();
  v4 = *(_BYTE **)(*((_QWORD *)this + 4) + 8);
  v5 = 1;
  v9 = 1;
  if (*v4)
  {
    v7 = v4;
    v5 = 3;
  }
  v8 = v5;
  MEMORY[0x1CAA2CCA8](__p, &v7);
  MEMORY[0x1CAA2C930](v3, __p);
  (*(void (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  if (v11 < 0)
    operator delete(__p[0]);
  return v2;
}

void AGCLLVMVerifyModulePass::~AGCLLVMVerifyModulePass(AGCLLVMVerifyModulePass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMVerifyModulePass::getPassName(AGCLLVMVerifyModulePass *this)
{
  return "verify module";
}

void AGCLLVMVerifyModulePass::getAnalysisUsage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t AGCLLVMVerifyModulePass::runOnModule(AGCLLVMVerifyModulePass *this, llvm::Module *a2)
{
  int v2;
  FILE *v4;
  const char *v5;
  void *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  void *v20;
  const char *v22;
  void *v23;
  void *p_p;
  void *v25;
  void *__p;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  void **v37;
  void *v38[2];
  uint64_t v39;
  _BYTE buf[28];
  __int16 v41;
  const char *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  void *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 48))
    v2 = 4;
  else
    v2 = 8;
  if ((**((_DWORD **)this + 7) & v2) != 0)
  {
    v38[0] = 0;
    v38[1] = 0;
    v39 = 0;
    v30 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 1;
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v29 = MEMORY[0x1E0DE2AB0] + 16;
    v37 = v38;
    llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v29);
    if (llvm::verifyModule())
    {
      v4 = (FILE *)*MEMORY[0x1E0C80C10];
      if (*((_BYTE *)this + 48))
        v5 = "before";
      else
        v5 = "after";
      v6 = (void *)*((_QWORD *)this + 4);
      if (v6)
      {
        std::string::basic_string[abi:nn180100](buf, v6, *((_QWORD *)this + 5));
        if (buf[23] >= 0)
          v7 = buf;
        else
          v7 = *(const char **)buf;
      }
      else
      {
        memset(buf, 0, 24);
        v7 = buf;
      }
      v8 = (const char *)v37;
      if (*((char *)v37 + 23) < 0)
        v8 = (const char *)*v37;
      fprintf(v4, "AGC: %s:%d:%s: *** Module verification failed %s pass '%s' : %s\n", "agc_llvm_object.cpp", 252, "runOnModule", v5, v7, v8);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        if (*((_BYTE *)this + 48))
          v22 = "before";
        else
          v22 = "after";
        v23 = (void *)*((_QWORD *)this + 4);
        if (v23)
        {
          std::string::basic_string[abi:nn180100](&__p, v23, *((_QWORD *)this + 5));
          if (v28 >= 0)
            p_p = &__p;
          else
            p_p = __p;
        }
        else
        {
          __p = 0;
          v27 = 0;
          p_p = &__p;
          v28 = 0;
        }
        v25 = v37;
        if (*((char *)v37 + 23) < 0)
          v25 = *v37;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "agc_llvm_object.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 252;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "runOnModule";
        v41 = 2080;
        v42 = v22;
        v43 = 2080;
        v44 = p_p;
        v45 = 2080;
        v46 = v25;
        _os_log_error_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: *** Module verification failed %s pass '%s' : %s\n", buf, 0x3Au);
        if (SHIBYTE(v28) < 0)
          operator delete(__p);
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
      {
        if (*((_BYTE *)this + 48))
          v15 = "before";
        else
          v15 = "after";
        v16 = (void *)*((_QWORD *)this + 4);
        if (v16)
        {
          std::string::basic_string[abi:nn180100](&__p, v16, *((_QWORD *)this + 5));
          if (v28 >= 0)
            v17 = &__p;
          else
            v17 = __p;
        }
        else
        {
          __p = 0;
          v27 = 0;
          v17 = &__p;
          v28 = 0;
        }
        v18 = v37;
        if (*((char *)v37 + 23) < 0)
          v18 = *v37;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "agc_llvm_object.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 252;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "runOnModule";
        v41 = 2080;
        v42 = v15;
        v43 = 2080;
        v44 = v17;
        v45 = 2080;
        v46 = v18;
        _os_log_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "AGC: AGC: %s:%d:%s: *** Module verification failed %s pass '%s' : %s\n", buf, 0x3Au);
        if (SHIBYTE(v28) < 0)
          operator delete(__p);
      }
      if (*((_BYTE *)this + 48))
        v19 = "before";
      else
        v19 = "after";
      v20 = (void *)*((_QWORD *)this + 4);
      if (v20)
        std::string::basic_string[abi:nn180100](buf, v20, *((_QWORD *)this + 5));
      else
        memset(buf, 0, 24);
      printMessage((char **)&AGCPrinter, "Module verification failed %s pass '%s' : %s", v9, v10, v11, v12, v13, v14, (char)v19);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v29);
    if (SHIBYTE(v39) < 0)
      operator delete(v38[0]);
  }
  return 0;
}

void AGCLLVMPrintModulePass::~AGCLLVMPrintModulePass(AGCLLVMPrintModulePass *this)
{
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA2D68CLL);
}

const char *AGCLLVMPrintModulePass::getPassName(AGCLLVMPrintModulePass *this)
{
  return "print module";
}

void AGCLLVMPrintModulePass::getAnalysisUsage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t AGCLLVMPrintModulePass::runOnModule(AGCLLVMPrintModulePass *this, llvm::Module *a2)
{
  int v2;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type size;
  std::string *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  const std::string::value_type *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string *v31;
  std::string::size_type v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v46;
  void *__p[2];
  char v49;
  std::string v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  int v58;
  std::string *p_str;
  std::string __str;

  if (*((_BYTE *)this + 48))
    v2 = 1;
  else
    v2 = 2;
  if ((**((_DWORD **)this + 7) & v2) != 0)
  {
    memset(&__str, 0, sizeof(__str));
    v52 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 1;
    v54 = 0;
    v55 = 0;
    v53 = 0;
    v51 = MEMORY[0x1E0DE2AB0] + 16;
    p_str = &__str;
    llvm::raw_ostream::SetUnbuffered((llvm::raw_ostream *)&v51);
    llvm::Module::print();
    if (v55 != v53)
      llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v51);
    v4 = *((_QWORD *)this + 7);
    v5 = (std::string *)(v4 + 8);
    v6 = *(unsigned __int8 *)(v4 + 31);
    if ((v6 & 0x80u) == 0)
      v7 = *(unsigned __int8 *)(v4 + 31);
    else
      v7 = *(_QWORD *)(v4 + 16);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (v7 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &__str;
      else
        v9 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v6 & 0x80) != 0)
      {
        v15 = memcmp(v5->__r_.__value_.__l.__data_, v9, *(_QWORD *)(v4 + 16)) != 0;
      }
      else if (*(_BYTE *)(v4 + 31))
      {
        v10 = v6 - 1;
        v11 = (unsigned __int8 *)(v4 + 8);
        do
        {
          v13 = *v11++;
          v12 = v13;
          v14 = v9->__r_.__value_.__s.__data_[0];
          v9 = (std::string *)((char *)v9 + 1);
          v15 = v12 != v14;
        }
        while (v12 == v14 && v10-- != 0);
      }
      else
      {
        v15 = 0;
      }
    }
    else
    {
      v15 = 1;
    }
    std::string::operator=(v5, &__str);
    memset(&v50, 0, sizeof(v50));
    MEMORY[0x1CAA2D494](&v50, "------ ");
    if (*((_BYTE *)this + 48))
      v17 = "Before ";
    else
      v17 = "After ";
    std::string::append(&v50, v17);
    std::string::append(&v50, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
    if (v15)
    {
      std::string::append(&v50, " ------");
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v50;
      else
        LOBYTE(v24) = v50.__r_.__value_.__s.__data_[0];
      printMessage((char **)&AGCPrinter, "%s", v18, v19, v20, v21, v22, v23, (char)v24);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &__str;
      else
        LOBYTE(v31) = __str.__r_.__value_.__s.__data_[0];
      printMessage((char **)&AGCPrinter, "%s", v25, v26, v27, v28, v29, v30, (char)v31);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      else
        v32 = v50.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:nn180100](__p, v32, 45);
      if (v49 >= 0)
        v39 = __p;
      else
        LOBYTE(v39) = __p[0];
      printMessage((char **)&AGCPrinter, "%s", v33, v34, v35, v36, v37, v38, (char)v39);
      if (v49 < 0)
        operator delete(__p[0]);
    }
    else
    {
      std::string::append(&v50, " (No change)");
      std::string::append(&v50, " ------");
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v50;
      else
        LOBYTE(v46) = v50.__r_.__value_.__s.__data_[0];
      printMessage((char **)&AGCPrinter, "%s", v40, v41, v42, v43, v44, v45, (char)v46);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v51);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 0;
}

uint64_t AGCLLVMObject::linkCommon(AGCLLVMObject *this, llvm::Module *a2, int a3, llvm::Function *a4)
{
  char *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *Name;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  int Key;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Module *v38;
  _QWORD v39[5];

  v39[4] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 1;
  v8 = (char *)a2 + 24;
  for (i = *((_QWORD *)a2 + 4); (char *)i != v8; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v10 = i - 56;
    else
      v10 = 0;
    if (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v10) && (*(_BYTE *)(v10 + 34) & 0x80) != 0)
      llvm::GlobalValue::setLinkage(v10, 3);
    if ((*(_DWORD *)(v10 + 32) & 0xFu) - 7 >= 2)
      llvm::GlobalValue::setVisibility(v10);
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 58) + 32);
  v12 = *(void **)(v11 + 8);
  if (v12)
    v13 = strlen(*(const char **)(v11 + 8));
  else
    v13 = 0;
  llvm::Module::setTargetTriple((uint64_t)a2, v12, v13);
  v15 = *(_QWORD *)(*((_QWORD *)this + 58) + 32);
  if (*(_QWORD *)(v15 + 16))
    strlen(*(const char **)(v15 + 16));
  llvm::Module::setDataLayout();
  v38 = a2;
  v39[3] = 0;
  v16 = llvm::Linker::linkModules();
  if (!v39)
    (*(void (**)(void))(v39[0] + 32))();
  v17 = MEMORY[0x1CAA2CC9C](v38);
  MEMORY[0x1CAA2D68C](v17, 0x10B2C407FF26C1CLL);
  if ((v16 & 1) == 0)
  {
    v18 = *((_QWORD *)this + 46);
    v19 = v18 + 24;
    v20 = *(_QWORD *)(v18 + 32);
    if (a3)
    {
      if (v20 != v18 + 24)
      {
        do
        {
          v21 = v20 - 56;
          v25 = v20 == 0;
          v20 = *(_QWORD *)(v20 + 8);
          if (v25)
            v22 = 0;
          else
            v22 = v21;
          if ((llvm::Function *)v22 != a4)
          {
            Name = (_QWORD *)llvm::Value::getName((llvm::Value *)v22);
            if (v24 != 22
              || (*Name == 0x626F6C672E636761 ? (v25 = Name[1] == 0x74736E6F635F6C61) : (v25 = 0),
                  v25 ? (v26 = *(_QWORD *)((char *)Name + 14) == 0x726F746375727473) : (v26 = 0),
                  !v26))
            {
              llvm::Value::getName((llvm::Value *)v22);
              Key = llvm::StringMapImpl::FindKey();
              if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 824))
              {
                v28 = *(_DWORD *)(v22 + 32);
                if ((v28 & 0xF) != 0)
                  goto LABEL_42;
              }
              else
              {
                v28 = *(_DWORD *)(v22 + 32);
              }
              if ((v28 & 0x30) == 0x10)
              {
LABEL_42:
                if (!*(_QWORD *)(v22 + 8))
                  llvm::Function::eraseFromParent((llvm::Function *)v22);
              }
            }
          }
        }
        while (v20 != v19);
      }
    }
    else
    {
      v29 = 1;
      if (v20 != v18 + 24)
      {
        do
        {
          v30 = v20 - 56;
          v25 = v20 == 0;
          v20 = *(_QWORD *)(v20 + 8);
          if (v25)
            v31 = 0;
          else
            v31 = v30;
          if ((llvm::Function *)v31 != a4)
          {
            v32 = *(_DWORD *)(v31 + 32);
            v33 = (v32 & 0xF) != 0 || (*(_DWORD *)(v31 + 32) & 0x30) == 16;
            if (v33 && !*(_QWORD *)(v31 + 8))
            {
              llvm::Function::eraseFromParent((llvm::Function *)v31);
            }
            else if ((v32 & 0x2000) == 0 && (llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v31) & 1) == 0)
            {
              *(_DWORD *)(v31 + 32) = *(_DWORD *)(v31 + 32) & 0xFFFFBFC0 | 0x4007;
              llvm::Function::addFnAttr();
              ++v29;
            }
          }
        }
        while (v20 != v19);
        v18 = *((_QWORD *)this + 46);
      }
      v34 = v18 + 8;
      v35 = *(_QWORD *)(v18 + 16);
      if (v35 != v18 + 8)
      {
        do
        {
          v36 = v35 - 56;
          v25 = v35 == 0;
          v35 = *(_QWORD *)(v35 + 8);
          if (v25)
            v37 = 0;
          else
            v37 = v36;
          if ((llvm::GlobalValue::isDeclaration((llvm::GlobalValue *)v37) & 1) == 0)
          {
            if (*(_QWORD *)(v37 + 8))
              *(_DWORD *)(v37 + 32) = *(_DWORD *)(v37 + 32) & 0xFFFFBFC0 | 0x4007;
            else
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v37);
          }
        }
        while (v35 != v34);
      }
      if (v29 > 1)
        llvm::legacy::PassManager::run(*(llvm::legacy::PassManager **)(*((_QWORD *)this + 58) + 344), *((llvm::Module **)this + 46));
    }
  }
  return v16 ^ 1u;
}

llvm::Module *AGCLLVMObject::linkDSFile(AGCLLVMObject *this, const char *__s, llvm::Function *a3)
{
  uint64_t v6;
  size_t v7;
  llvm::Module *result;
  llvm::Module *v9;
  AGCLLVMAirBuiltins *v10;

  v6 = **((_QWORD **)this + 46);
  if (__s)
    v7 = strlen(__s);
  else
    v7 = 0;
  result = (llvm::Module *)AGCLLVMObject::readBitcode(v6, (const UInt8 *)__s, v7, 1);
  if (result)
  {
    v9 = result;
    v10 = (AGCLLVMAirBuiltins *)(*(uint64_t (**)(_QWORD, _QWORD, llvm::Module *))(**((_QWORD **)this + 50)
                                                                                          + 816))(*((_QWORD *)this + 50), 0, result);
    AGCLLVMAirBuiltins::replaceBuiltins(v10);
    result = (llvm::Module *)AGCLLVMObject::linkCommon(this, v9, 0, a3);
    if (v10)
      return (llvm::Module *)(*(uint64_t (**)(AGCLLVMAirBuiltins *))(*(_QWORD *)v10 + 16))(v10);
  }
  return result;
}

uint64_t AGCLLVMObject::readBitcode(uint64_t a1, const UInt8 *a2, CFIndex a3, int a4)
{
  const __CFString *v5;
  __CFBundle *BundleWithIdentifier;
  const __CFString *v7;
  const __CFURL *v8;
  const __CFURL *v9;
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  const std::locale::facet *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  char v28;
  char *v29;
  uint64_t v30;
  size_t v31;
  char *v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  llvm *v37;
  llvm::raw_ostream *v39;
  void **v40;
  size_t v41;
  __int128 *v42;
  size_t v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string __dst;
  unint64_t v48;
  char *v49;
  char *v50;
  size_t v51;
  uint64_t v52;
  std::locale v53[2];
  void *v54[2];
  __int128 v55;
  int v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 __p;
  uint64_t v61;
  char *v62[2];
  uint64_t v63;
  _QWORD v64[2];
  _BYTE v65[408];
  uint64_t v66[19];
  char buffer[1025];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v5 = CFStringCreateWithBytes(0, a2, a3, 0x8000100u, 1u);
  BundleWithIdentifier = CFBundleGetBundleWithIdentifier(CFSTR("com.apple.AGXCompilerCore"));
  if (a4)
    v7 = CFSTR("ds");
  else
    v7 = CFSTR("ds_internal");
  v8 = CFBundleCopyResourceURL(BundleWithIdentifier, v5, CFSTR("ds"), v7);
  if (!v8)
    AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_0::operator()[abi:[AGX] Failed assertion _bitcode_url_]();
  v9 = v8;
  v10 = CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);
  CFStringGetCString(v10, buffer, 1024, 0x600u);
  CFRelease(v5);
  CFRelease(v9);
  CFRelease(v10);
  v11 = MEMORY[0x1E0DE4FA8];
  v12 = MEMORY[0x1E0DE4FA8] + 64;
  v13 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v66[0] = MEMORY[0x1E0DE4FA8] + 64;
  v64[0] = v14;
  *(_QWORD *)((char *)v64 + *(_QWORD *)(v14 - 24)) = v15;
  v64[1] = 0;
  v16 = (std::ios_base *)((char *)v64 + *(_QWORD *)(v64[0] - 24));
  std::ios_base::init(v16, v65);
  v16[1].__vftable = 0;
  v16[1].__fmtflags_ = -1;
  v64[0] = v11 + 24;
  v66[0] = v12;
  MEMORY[0x1CAA2D50C](v65);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)v64 + *(_QWORD *)(v64[0] - 24)), *(_DWORD *)&v65[*(_QWORD *)(v64[0] - 24) + 16] | 4);
  v17 = (char *)v64 + *(_QWORD *)(v64[0] - 24);
  if ((v17[32] & 5) != 0)
  {
    v18 = (_QWORD *)MEMORY[0x1E0DE4A50];
    v19 = std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"readBitcode", 11);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v19, (uint64_t)"(): unable to open file: ", 25);
    v20 = strlen(buffer);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v18, (uint64_t)buffer, v20);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v21 = std::locale::use_facet(v53, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
    std::locale::~locale(v53);
    std::ostream::put();
    std::ostream::flush();
    v22 = 0;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = (_QWORD *)*((_QWORD *)v17 + 5);
    while (v26 && (v26[3] != v26[4] || (*(unsigned int (**)(_QWORD *))(*v26 + 72))(v26) != -1))
    {
      v27 = (char *)v26[3];
      if (v27 == (char *)v26[4])
        v28 = (*(uint64_t (**)(_QWORD *))(*v26 + 72))(v26);
      else
        v28 = *v27;
      if (v24 >= v25)
      {
        v30 = (uint64_t)&v24[-v23 + 1];
        if (v30 < 0)
          abort();
        if (2 * (uint64_t)&v25[-v23] > (unint64_t)v30)
          v30 = 2 * (_QWORD)&v25[-v23];
        if ((unint64_t)&v25[-v23] >= 0x3FFFFFFFFFFFFFFFLL)
          v31 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)operator new(v31);
        else
          v32 = 0;
        v33 = &v24[(_QWORD)v32 - v23];
        *v33 = v28;
        v29 = v33 + 1;
        if (v24 != (char *)v23)
        {
          v34 = &v24[~v23];
          do
          {
            v35 = *--v24;
            (v34--)[(_QWORD)v32] = v35;
          }
          while (v24 != (char *)v23);
          v33 = v32;
        }
        v25 = &v32[v31];
        if (v23)
          operator delete((void *)v23);
        v23 = (unint64_t)v33;
      }
      else
      {
        *v24 = v28;
        v29 = v24 + 1;
      }
      v36 = v26[3];
      if (v36 == v26[4])
        (*(void (**)(_QWORD *))(*v26 + 80))(v26);
      else
        v26[3] = v36 + 1;
      v24 = v29;
    }
    *(_DWORD *)v23 = 186106078;
    *(_DWORD *)(v23 + 20) = -557825214;
    v56 = 0;
    *(_OWORD *)v54 = 0u;
    v55 = 0u;
    *(_OWORD *)&v53[0].__locale_ = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    __p = 0u;
    v61 = 0;
    v62[0] = (char *)&v63;
    v62[1] = (char *)0x400000000;
    v48 = v23;
    v49 = &v24[-v23];
    v50 = buffer;
    v51 = strlen(buffer);
    v37 = (llvm *)llvm::parseIR();
    v22 = v52;
    v52 = 0;
    if (!v22)
    {
      v39 = (llvm::raw_ostream *)llvm::errs(v37);
      llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v53, "readBitcode", v39);
      if ((SBYTE7(v55) & 0x80u) == 0)
        v40 = v54;
      else
        v40 = (void **)v54[0];
      if (v40)
      {
        if ((SBYTE7(v55) & 0x80u) == 0)
          v41 = BYTE7(v55);
        else
          v41 = (size_t)v54[1];
        std::string::basic_string[abi:nn180100](&__dst, v40, v41);
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
      }
      if ((SBYTE7(v58) & 0x80u) == 0)
        v42 = &v57;
      else
        v42 = (__int128 *)v57;
      if (v42)
      {
        if ((SBYTE7(v58) & 0x80u) == 0)
          v43 = BYTE7(v58);
        else
          v43 = *((_QWORD *)&v57 + 1);
        std::string::basic_string[abi:nn180100](&v46, v42, v43);
      }
      else
      {
        memset(&v46, 0, sizeof(v46));
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v44, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v44 = __dst;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v45, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
      else
        v45 = v46;
      AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_1::operator()[abi:[AGX] Failed assertion _false_]();
      AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_0::operator()[abi:[AGX] Failed assertion _bitcode_url_]();
    }
    llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v62);
    v13 = (_QWORD *)MEMORY[0x1E0DE4F40];
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if (SHIBYTE(v59) < 0)
      operator delete(*((void **)&v58 + 1));
    if (SBYTE7(v58) < 0)
      operator delete((void *)v57);
    if (SBYTE7(v55) < 0)
      operator delete(v54[0]);
    operator delete((void *)v23);
  }
  v64[0] = *v13;
  *(_QWORD *)((char *)v64 + *(_QWORD *)(v64[0] - 24)) = v13[3];
  MEMORY[0x1CAA2D518](v65);
  std::istream::~istream();
  MEMORY[0x1CAA2D638](v66);
  return v22;
}

void AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_0::operator()[abi:[AGX] Failed assertion _bitcode_url_]()
{
  os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
}

void llvm::function_ref<llvm::Optional<std::string> ()(llvm::StringRef)>::callback_fn<llvm::$_2>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t AGCLLVMObject::readBitcode(AGCLLVMCtx &,llvm::LLVMContext &,llvm::StringRef,BOOL)::$_1::operator()[abi:[AGX] Failed assertion _false_]()
{
  uint64_t result;

  os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR);
  _os_log_send_and_compose_impl();
  result = _os_crash_msg();
  __break(1u);
  return result;
}

void AGCLLVMObject::extractPhaseOffsetsWithAux(flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const*,flatbuffers::Offset<flatbuffers::Vector<unsigned int>> &)::$_0::operator()(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unsigned int *v4;
  int *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  int v9;
  unsigned __int8 v10;
  size_t v11;
  void **v12;
  size_t v13;
  const void *v14;
  size_t v15;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  unint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  int v42;
  void *__p[2];
  unsigned __int8 v44;

  if (a2 && *a2)
  {
    v3 = *(uint64_t **)(a1[1] + 16);
    if (v3)
    {
      v4 = a2 + 1;
      do
      {
        v5 = (int *)((char *)v4 + *v4);
        v6 = (unsigned __int16 *)((char *)v5 - *v5);
        if (*v6 >= 5u && (v7 = v6[2]) != 0)
          v8 = (char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7);
        else
          v8 = 0;
        std::string::basic_string[abi:nn180100]<0>(__p, v8 + 4);
        v9 = *((char *)v3 + 39);
        v10 = v44;
        if ((v44 & 0x80u) == 0)
          v11 = v44;
        else
          v11 = (size_t)__p[1];
        if ((v44 & 0x80u) == 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        if (v9 >= 0)
          v13 = *((unsigned __int8 *)v3 + 39);
        else
          v13 = v3[3];
        if (v9 >= 0)
          v14 = v3 + 2;
        else
          v14 = (const void *)v3[2];
        if (v13 >= v11)
          v15 = v11;
        else
          v15 = v13;
        if (!memcmp(v12, v14, v15) && v13 == v11)
        {
          v17 = *a1;
          v19 = *(_DWORD **)(*a1 + 8);
          v18 = *(_QWORD *)(*a1 + 16);
          if ((unint64_t)v19 >= v18)
          {
            v21 = *(_DWORD **)v17;
            v22 = ((uint64_t)v19 - *(_QWORD *)v17) >> 2;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 62)
              goto LABEL_67;
            v24 = v18 - (_QWORD)v21;
            if (v24 >> 1 > v23)
              v23 = v24 >> 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
              v25 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v25);
              v21 = *(_DWORD **)v17;
              v19 = *(_DWORD **)(v17 + 8);
            }
            else
            {
              v26 = 0;
            }
            v27 = (_DWORD *)(v25 + 4 * v22);
            *v27 = *((_DWORD *)v3 + 10);
            v20 = v27 + 1;
            while (v19 != v21)
            {
              v28 = *--v19;
              *--v27 = v28;
            }
            *(_QWORD *)v17 = v27;
            *(_QWORD *)(v17 + 8) = v20;
            *(_QWORD *)(v17 + 16) = v25 + 4 * v26;
            if (v21)
              operator delete(v21);
          }
          else
          {
            *v19 = *((_DWORD *)v3 + 10);
            v20 = v19 + 1;
          }
          *(_QWORD *)(v17 + 8) = v20;
          v10 = v44;
        }
        if ((v10 & 0x80) != 0)
          operator delete(__p[0]);
        v3 = (uint64_t *)*v3;
      }
      while (v3);
    }
  }
  else
  {
    v29 = *a1;
    v31 = *(_DWORD **)(*a1 + 8);
    v30 = *(_QWORD *)(*a1 + 16);
    if ((unint64_t)v31 >= v30)
    {
      v33 = *(_DWORD **)v29;
      v34 = ((uint64_t)v31 - *(_QWORD *)v29) >> 2;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62)
LABEL_67:
        abort();
      v36 = v30 - (_QWORD)v33;
      if (v36 >> 1 > v35)
        v35 = v36 >> 1;
      v37 = (unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL;
      v38 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v37)
        v38 = v35;
      if (v38)
      {
        v38 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v38);
        v33 = *(_DWORD **)v29;
        v31 = *(_DWORD **)(v29 + 8);
      }
      else
      {
        v39 = 0;
      }
      v40 = (_DWORD *)(v38 + 4 * v34);
      v41 = v38 + 4 * v39;
      *v40 = -1;
      v32 = v40 + 1;
      while (v31 != v33)
      {
        v42 = *--v31;
        *--v40 = v42;
      }
      *(_QWORD *)v29 = v40;
      *(_QWORD *)(v29 + 8) = v32;
      *(_QWORD *)(v29 + 16) = v41;
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v31 = -1;
      v32 = v31 + 1;
    }
    *(_QWORD *)(v29 + 8) = v32;
  }
}

llvm::Value *AGCLLVMObject::buildWGBarrier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;

  *(_BYTE *)(a1 + 456) = 1;
  v6 = *(_QWORD *)(a1 + 400);
  v7 = *(_QWORD *)(v6 + 936);
  if (v7)
    v8 = strlen(*(const char **)(v6 + 936));
  else
    v8 = 0;
  v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1 + 32, v7, v8, *(_QWORD *)(a1 + 176), *(_QWORD *)(a1 + 224), *(_QWORD *)(a1 + 224));
  v12 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 40, *(_QWORD *)(v9 + 24), v9, a2, a3, (uint64_t)v11);
}

void AGCLLVMObject::addDylibBinding(AGCLLVMObject *this, llvm::GlobalVariable *a2)
{
  uint64_t Impl;
  _QWORD __src[2];
  void *v5[2];
  _QWORD v6[3];

  v6[2] = *MEMORY[0x1E0C80C00];
  __src[0] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  __src[1] = llvm::ValueAsMetadata::get();
  v5[0] = v6;
  v5[1] = (void *)0x200000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v5, __src, v5);
  Impl = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)this + 2936, Impl);
  if (v5[0] != v6)
    free(v5[0]);
}

uint64_t AGCLLVMObject::buildMulShiftDiv(AGCLLVMObject *this, llvm::Value *a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::IRBuilderBase *v8;
  uint64_t v9;
  llvm::Value *Cast;
  uint64_t v11;
  llvm::Value *v12;
  llvm::Value *Mul;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t Add;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *Element;
  uint64_t LShr;
  uint64_t v22;
  _BYTE v24[32];
  __int16 v25;
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[32];
  __int16 v29;

  v8 = (AGCLLVMObject *)((char *)this + 40);
  v9 = *((_QWORD *)this + 30);
  v29 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 40, 39, (uint64_t)a2, v9, (uint64_t)v28);
  v11 = *((_QWORD *)this + 30);
  v27 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 39, (uint64_t)a3, v11, (uint64_t)v26);
  v25 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v8, Cast, v12, (const llvm::Twine *)v24);
  v14 = *((_QWORD *)this + 30);
  v29 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 39, (uint64_t)a2, v14, (uint64_t)v28);
  v27 = 257;
  Add = llvm::IRBuilderBase::CreateAdd(v8, Mul, v15, (const llvm::Twine *)v26);
  v17 = *((_QWORD *)this + 35);
  v29 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 49, Add, v17, (uint64_t)v28);
  v29 = 257;
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v8, v18, v19, (const llvm::Twine *)v28);
  v29 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v8, Element, a4, (const llvm::Twine *)v28);
  v22 = *(_QWORD *)a2;
  v27 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v8, 39, LShr, v22, (uint64_t)v26);
}

uint64_t AGCLLVMObject::createGlobalBufferBinding(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Impl;
  _QWORD __src[3];
  void *v14[2];
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v7 = llvm::User::operator new((llvm::User *)0x58);
  v8 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v8 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  __src[0] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  __src[1] = llvm::ValueAsMetadata::get();
  llvm::ConstantInt::get();
  __src[2] = llvm::ValueAsMetadata::get();
  v14[0] = v15;
  v14[1] = (void *)0x400000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v14, __src, v14);
  if (a5)
  {
    llvm::ConstantInt::get();
    v9 = llvm::ValueAsMetadata::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v14, v9);
  }
  v10 = *(_QWORD *)(a1 + 376);
  Impl = llvm::MDTuple::getImpl();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v10, Impl);
  if (v14[0] != v15)
    free(v14[0]);
  return v7;
}

void AGCLLVMObject::replaceConstantChainWithInstrs(AGCLLVMObject *this, llvm::Constant *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  llvm::ConstantExpr **v14;
  llvm::ConstantExpr *v15;
  int v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  _QWORD *AsInstruction;
  uint64_t v21;
  uint64_t v22;
  llvm::ConstantExpr *v23;
  llvm::Value *v24;
  char *v25;
  llvm *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  llvm::Type *Context;
  llvm::LLVMContext *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::ConstantExpr *v35;
  llvm::Value *v36;
  char *v37;
  llvm *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  llvm::ValueHandleBase *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char *v52;
  char *v53;
  llvm::ConstantExpr **v54;
  llvm *v55[2];
  unsigned int v56;
  _BYTE v57[40];
  _BYTE buf[28];
  __int16 v59;
  void *v60;
  uint64_t i;
  _BYTE v62[32];
  char *v63;
  uint64_t v64;
  _QWORD v65[35];

  v65[32] = *MEMORY[0x1E0C80C00];
  v63 = (char *)v65;
  v64 = 0x1000000000;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    do
    {
      v3 = *(_QWORD *)(v2 + 24);
      v4 = *(_QWORD *)(v3 + 8);
      if (v4 || *(unsigned __int8 *)(v3 + 16) >= 0x1Cu)
        llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v63, v2, v4);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
    v5 = v64;
    v60 = v62;
    for (i = 0x400000000; (_DWORD)v64; v5 = v64)
    {
      while (1)
      {
        while (1)
        {
          v6 = &v63[16 * v5];
          v7 = *(_QWORD *)(*((_QWORD *)v6 - 2) + 24);
          if (v7)
            v8 = *(unsigned __int8 *)(v7 + 16) >= 0x1Cu;
          else
            v8 = 0;
          if (v8)
          {
            v56 = 128;
            v55[0] = (llvm *)MEMORY[0x1CAA2C6C0](0x2000, 8);
            llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)v55);
            v57[0] = 0;
            v57[24] = 0;
            if ((_DWORD)i)
            {
              v52 = v6;
              v14 = (llvm::ConstantExpr **)v60;
              v53 = (char *)v60 + 8 * i;
              do
              {
                v15 = *v14;
                v16 = *((unsigned __int8 *)*v14 + 16);
                if (*v14)
                  v17 = v16 == 5;
                else
                  v17 = 0;
                v54 = v14;
                if (v17)
                {
                  AsInstruction = (_QWORD *)llvm::ConstantExpr::getAsInstruction(v15, 0);
                  llvm::Instruction::insertBefore();
                }
                else
                {
                  if (v15)
                    v18 = v16 == 10;
                  else
                    v18 = 0;
                  if (v18)
                  {
                    v30 = llvm::UndefValue::get();
                    Context = (llvm::Type *)llvm::Value::getContext(v15);
                    llvm::Type::getInt32Ty(Context, v32);
                    v33 = *(unsigned int *)(*(_QWORD *)v15 + 32);
                    if ((_DWORD)v33)
                    {
                      v34 = 0;
                      v35 = v15;
                      do
                      {
                        v36 = (llvm::Value *)*((_QWORD *)v35 - 4 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF));
                        *(_QWORD *)buf = 0;
                        if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v55[0], v56, (uint64_t)v36, buf))
                        {
                          v37 = *(char **)buf;
                          v38 = v55[0];
                          v39 = v56;
                        }
                        else
                        {
                          v38 = v55[0];
                          v39 = v56;
                          v37 = (char *)v55[0] + 64 * (unint64_t)v56;
                        }
                        if ((char *)v38 + 64 * v39 == v37)
                        {
                          *(_QWORD *)buf = 6;
                          *(_QWORD *)&buf[8] = 0;
                          *(_QWORD *)&buf[16] = v36;
                          if (v36 != (llvm::Value *)-8192 && v36 != (llvm::Value *)-4096 && v36 != 0)
                            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)buf);
                        }
                        else
                        {
                          v40 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v55, v36);
                          llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)buf, 3u, v40);
                        }
                        v42 = *(_QWORD *)&buf[16];
                        if (*(_QWORD *)&buf[16] != -8192 && *(_QWORD *)&buf[16] != -4096 && *(_QWORD *)&buf[16])
                          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)buf);
                        v43 = llvm::ConstantInt::get();
                        v59 = 257;
                        AsInstruction = (_QWORD *)llvm::User::operator new((llvm::User *)0x40);
                        MEMORY[0x1CAA2C780](AsInstruction, v30, v42, v43, buf, 0);
                        llvm::Instruction::insertBefore();
                        ++v34;
                        v35 = (llvm::ConstantExpr *)((char *)v35 + 32);
                        v30 = (uint64_t)AsInstruction;
                      }
                      while (v33 != v34);
                    }
                    else
                    {
                      AsInstruction = (_QWORD *)v30;
                    }
                  }
                  else
                  {
                    if (v15)
                      v19 = v16 == 9;
                    else
                      v19 = 0;
                    if (!v19)
                    {
                      fprintf((FILE *)*MEMORY[0x1E0C80C10], "AGC: %s:%d:%s: !!! Unable to replace a constant with instructions\n", "agc_llvm_object.cpp", 1794, "void AGCLLVMObject::replaceConstantChainWithInstrs(Constant *)");
                      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "agc_llvm_object.cpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 1794;
                        *(_WORD *)&buf[18] = 2080;
                        *(_QWORD *)&buf[20] = "void AGCLLVMObject::replaceConstantChainWithInstrs(Constant *)";
                        _os_log_error_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: !!! Unable to replace a constant with instructions\n", buf, 0x1Cu);
                      }
                      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)buf = 136315650;
                        *(_QWORD *)&buf[4] = "agc_llvm_object.cpp";
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 1794;
                        *(_WORD *)&buf[18] = 2080;
                        *(_QWORD *)&buf[20] = "void AGCLLVMObject::replaceConstantChainWithInstrs(Constant *)";
                        _os_log_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "AGC: AGC: %s:%d:%s: !!! Unable to replace a constant with instructions\n", buf, 0x1Cu);
                      }
                      abort();
                    }
                    AsInstruction = (_QWORD *)llvm::UndefValue::get();
                    v21 = *(unsigned int *)(*(_QWORD *)v15 + 12);
                    if ((_DWORD)v21)
                    {
                      v22 = 0;
                      v23 = v15;
                      do
                      {
                        v24 = (llvm::Value *)*((_QWORD *)v23 - 4 * (*((_DWORD *)v15 + 5) & 0x7FFFFFF));
                        *(_QWORD *)buf = 0;
                        if (llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v55[0], v56, (uint64_t)v24, buf))
                        {
                          v25 = *(char **)buf;
                          v26 = v55[0];
                          v27 = v56;
                        }
                        else
                        {
                          v26 = v55[0];
                          v27 = v56;
                          v25 = (char *)v55[0] + 64 * (unint64_t)v56;
                        }
                        if ((char *)v26 + 64 * v27 == v25)
                        {
                          *(_QWORD *)buf = 6;
                          *(_QWORD *)&buf[8] = 0;
                          *(_QWORD *)&buf[16] = v24;
                          if (v24 != (llvm::Value *)-8192 && v24 != (llvm::Value *)-4096 && v24 != 0)
                            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)buf);
                        }
                        else
                        {
                          v28 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v55, v24);
                          llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)buf, 3u, v28);
                        }
                        if (*(_QWORD *)&buf[16] != -8192 && *(_QWORD *)&buf[16] != -4096 && *(_QWORD *)&buf[16])
                          llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)buf);
                        v59 = 257;
                        AsInstruction = (_QWORD *)llvm::InsertValueInst::Create();
                        llvm::Instruction::insertBefore();
                        ++v22;
                        v23 = (llvm::ConstantExpr *)((char *)v23 + 32);
                      }
                      while (v21 != v22);
                    }
                  }
                }
                v44 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v55, v15);
                llvm::ValueHandleBase::operator=(v44, (uint64_t)AsInstruction);
                llvm::ValueMapper::ValueMapper();
                llvm::ValueMapper::remapInstruction((llvm::ValueMapper *)buf, (llvm::Instruction *)AsInstruction);
                MEMORY[0x1CAA2C39C](buf);
                v14 = v54 + 1;
              }
              while (v54 + 1 != (llvm::ConstantExpr **)v53);
              v45 = *((_QWORD *)v52 - 2);
              if (*(_QWORD *)v45)
              {
                **(_QWORD **)(v45 + 16) = *(_QWORD *)(v45 + 8);
                v46 = *(_QWORD *)(v45 + 8);
                if (v46)
                  *(_QWORD *)(v46 + 16) = *(_QWORD *)(v45 + 16);
              }
              *(_QWORD *)v45 = AsInstruction;
              v49 = AsInstruction[1];
              v48 = AsInstruction + 1;
              v47 = v49;
              *(_QWORD *)(v45 + 8) = v49;
              if (v49)
                *(_QWORD *)(v47 + 16) = v45 + 8;
              *(_QWORD *)(v45 + 16) = v48;
              *v48 = v45;
            }
            LODWORD(v64) = v64 - 1;
            llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v57);
            llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v55[0], v56);
            llvm::deallocate_buffer(v55[0], (void *)((unint64_t)v56 << 6));
            goto LABEL_89;
          }
          v9 = *((_QWORD *)v6 - 1);
          if (v9)
            break;
          LODWORD(v64) = --v5;
          LODWORD(i) = i - 1;
          if (!v5)
            goto LABEL_92;
        }
        v10 = *(_QWORD *)(v7 + 8);
        if (v10)
          break;
        LODWORD(v64) = --v5;
        if (!v5)
          goto LABEL_92;
      }
      if (v9 == v10 && (!(_DWORD)i || *((_QWORD *)v60 + i - 1) != v7))
      {
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v60, *(_QWORD *)(*((_QWORD *)v6 - 2) + 24));
        v9 = *((_QWORD *)v6 - 1);
      }
      *((_QWORD *)v6 - 1) = *(_QWORD *)(v9 + 8);
      v11 = *(_QWORD *)(v9 + 24);
      v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 < 0x1C)
      {
        if (v12 < 4)
          continue;
        v13 = *(_QWORD *)(v11 + 8);
        if (!v13)
          continue;
      }
      else
      {
        v13 = *(_QWORD *)(v11 + 8);
      }
      llvm::SmallVectorTemplateBase<AGCLLVMAGPFragmentShaderGen3::setupPRIDs(void)::md_list_t,true>::push_back((uint64_t)&v63, v9, v13);
LABEL_89:
      ;
    }
  }
  else
  {
    v60 = v62;
    i = 0x400000000;
  }
LABEL_92:
  llvm::Constant::removeDeadConstantUsers(this);
  if (v60 != v62)
    free(v60);
  if (v63 != (char *)v65)
    free(v63);
}

void RewriteAdressSpacePass::TypeRemapper::~TypeRemapper(llvm **this)
{
  *this = (llvm *)&unk_1E7EC0868;
  llvm::deallocate_buffer(this[2], (void *)(16 * *((unsigned int *)this + 8)));
}

{
  *this = (llvm *)&unk_1E7EC0868;
  llvm::deallocate_buffer(this[2], (void *)(16 * *((unsigned int *)this + 8)));
  JUMPOUT(0x1CAA2D68CLL);
}

llvm::Type *RewriteAdressSpacePass::TypeRemapper::remapType(RewriteAdressSpacePass::TypeRemapper *this, llvm::Type *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Type *v9;
  llvm::Type *v10;
  int v11;
  int v12;
  int v13;
  llvm::ArrayType *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  char v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  _BYTE *v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[9];

  v33[8] = *MEMORY[0x1E0C80C00];
  v5 = (char *)this + 16;
  v4 = *((_QWORD *)this + 2);
  v6 = *((unsigned int *)this + 8);
  if (!(_DWORD)v6)
    goto LABEL_9;
  LODWORD(v7) = ((a2 >> 4) ^ (a2 >> 9)) & (v6 - 1);
  v8 = v4 + 16 * v7;
  v9 = *(llvm::Type **)v8;
  if (*(llvm::Type **)v8 != a2)
  {
    v11 = 1;
    while (v9 != (llvm::Type *)-4096)
    {
      v12 = v7 + v11++;
      v7 = v12 & (v6 - 1);
      v9 = *(llvm::Type **)(v4 + 16 * v7);
      if (v9 == a2)
      {
        v8 = v4 + 16 * v7;
        goto LABEL_3;
      }
    }
LABEL_9:
    v13 = *((_DWORD *)a2 + 2);
    if (a2 && v13 == 17)
    {
      v14 = (llvm::ArrayType *)(*(uint64_t (**)(RewriteAdressSpacePass::TypeRemapper *, _QWORD))(*(_QWORD *)this + 24))(this, *((_QWORD *)a2 + 3));
      v15 = llvm::ArrayType::get(v14, *((llvm::Type **)a2 + 4));
LABEL_12:
      v10 = (llvm::Type *)v15;
      goto LABEL_20;
    }
    if (a2 && v13 == 14)
    {
      v16 = *((_QWORD *)a2 + 2);
      v17 = (_BYTE *)(v16 + 8 * *((unsigned int *)a2 + 3));
      v31 = v33;
      v32 = 0x800000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v31, (_BYTE *)(v16 + 8), v17);
      if ((_DWORD)v32)
      {
        v18 = v31;
        v19 = 8 * v32;
        do
        {
          *v18 = (*(uint64_t (**)(RewriteAdressSpacePass::TypeRemapper *, _QWORD))(*(_QWORD *)this + 24))(this, *v18);
          ++v18;
          v19 -= 8;
        }
        while (v19);
      }
      (*(void (**)(RewriteAdressSpacePass::TypeRemapper *, _QWORD))(*(_QWORD *)this + 24))(this, **((_QWORD **)a2 + 2));
      v10 = (llvm::Type *)llvm::FunctionType::get();
      v20 = v31;
      if (v31 != v33)
LABEL_19:
        free(v20);
    }
    else
    {
      if (a2 && v13 == 15)
      {
        (*(void (**)(RewriteAdressSpacePass::TypeRemapper *, _QWORD))(*(_QWORD *)this + 24))(this, **((_QWORD **)a2 + 2));
        v15 = llvm::PointerType::get();
        goto LABEL_12;
      }
      if (a2 && v13 == 16)
      {
        v10 = a2;
        if ((v13 & 0x100) != 0)
        {
          v26 = (_BYTE *)*((_QWORD *)a2 + 2);
          v27 = &v26[8 * *((unsigned int *)a2 + 3)];
          v31 = v33;
          v32 = 0x800000000;
          llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v31, v26, v27);
          if ((_DWORD)v32)
          {
            v28 = v31;
            v29 = 8 * v32;
            do
            {
              *v28 = (*(uint64_t (**)(RewriteAdressSpacePass::TypeRemapper *, _QWORD))(*(_QWORD *)this + 24))(this, *v28);
              ++v28;
              v29 -= 8;
            }
            while (v29);
          }
          if ((*((_DWORD *)a2 + 2) & 0x400) != 0)
          {
            v30 = llvm::StructType::get();
          }
          else
          {
            llvm::StructType::getName(a2);
            v30 = llvm::StructType::create();
          }
          v10 = (llvm::Type *)v30;
          v20 = v31;
          if (v31 != v33)
            goto LABEL_19;
        }
      }
      else
      {
        v10 = a2;
        if (a2)
        {
          v10 = a2;
          if ((v13 & 0xFE) == 0x12)
          {
            (*(void (**)(RewriteAdressSpacePass::TypeRemapper *, _QWORD))(*(_QWORD *)this + 24))(this, *((_QWORD *)a2 + 3));
            v15 = llvm::VectorType::get();
            goto LABEL_12;
          }
        }
      }
    }
LABEL_20:
    v31 = 0;
    v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*((_QWORD *)this + 2), *((_DWORD *)this + 8), (uint64_t)a2, &v31);
    v22 = v31;
    if ((v21 & 1) != 0)
    {
LABEL_26:
      v22[1] = v10;
      return v10;
    }
    v23 = *((_DWORD *)this + 6);
    v24 = *((_DWORD *)this + 8);
    if (4 * v23 + 4 >= 3 * v24)
    {
      v24 *= 2;
    }
    else if (v24 + ~v23 - *((_DWORD *)this + 7) > v24 >> 3)
    {
LABEL_23:
      ++*((_DWORD *)this + 6);
      if (*v22 != -4096)
        --*((_DWORD *)this + 7);
      *v22 = a2;
      v22[1] = 0;
      goto LABEL_26;
    }
    llvm::DenseMap<llvm::Function *,llvm::Value *,llvm::DenseMapInfo<llvm::Function *,void>,llvm::detail::DenseMapPair<llvm::Function *,llvm::Value *>>::grow((uint64_t)v5, v24);
    v31 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>(*((_QWORD *)this + 2), *((_DWORD *)this + 8), (uint64_t)a2, &v31);
    v22 = v31;
    goto LABEL_23;
  }
LABEL_3:
  if (v8 == v4 + 16 * v6)
    goto LABEL_9;
  return *(llvm::Type **)(v8 + 8);
}

void RewriteAdressSpacePass::~RewriteAdressSpacePass(RewriteAdressSpacePass *this)
{
  *(_QWORD *)this = &off_1E7EC0898;
  *((_QWORD *)this + 4) = &unk_1E7EC0868;
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
  llvm::Pass::~Pass(this);
}

{
  *(_QWORD *)this = &off_1E7EC0898;
  *((_QWORD *)this + 4) = &unk_1E7EC0868;
  llvm::deallocate_buffer(*((llvm **)this + 6), (void *)(16 * *((unsigned int *)this + 16)));
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t RewriteAdressSpacePass::runOnModule(RewriteAdressSpacePass *this, llvm::Module *a2)
{
  _QWORD *i;
  llvm::Value *v4;
  llvm::Type **v5;
  uint64_t v6;
  uint64_t Declaration;
  uint64_t v8;
  llvm::ValueHandleBase *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Type *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::ValueHandleBase *v16;
  llvm::Value **v17;
  llvm::Value **v18;
  llvm::Value *v19;
  uint64_t v20;
  llvm *v21;
  unint64_t v22;
  llvm *v23;
  unint64_t v24;
  llvm::Value *v25;
  uint64_t j;
  llvm::ValueHandleBase *v27;
  llvm::Value **v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm *v33;
  int v34;
  unsigned int v35;
  _BYTE v36[40];
  void *v37;
  uint64_t v38;
  _BYTE v39[32];
  llvm *v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE v43[8];
  __int16 v44;
  char v45;
  llvm *v46;
  uint64_t v47;
  unsigned int v48;
  _BYTE v49[88];
  void *v50;
  uint64_t v51;
  _QWORD v52[34];

  v52[32] = *MEMORY[0x1E0C80C00];
  v50 = v52;
  v51 = 0x2000000000;
  v35 = 128;
  v33 = (llvm *)MEMORY[0x1CAA2C6C0](0x2000, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v33);
  v36[0] = 0;
  v36[24] = 0;
  for (i = (_QWORD *)*((_QWORD *)a2 + 4); i != (_QWORD *)((char *)a2 + 24); i = (_QWORD *)i[1])
  {
    if (i)
      v4 = (llvm::Value *)(i - 7);
    else
      v4 = 0;
    llvm::Module::materialize();
    if ((llvm::GlobalValue::isDeclaration(v4) & 1) != 0)
    {
      if (*((_DWORD *)v4 + 9))
      {
        v46 = (llvm *)&v48;
        v47 = 0x800000000;
        llvm::Intrinsic::getIntrinsicInfoTableEntries();
        v37 = v46;
        v38 = v47;
        v40 = (llvm *)&v42;
        v41 = 0x800000000;
        llvm::Intrinsic::matchIntrinsicSignature();
        v5 = (llvm::Type **)v40;
        if ((_DWORD)v41)
        {
          v6 = 8 * v41;
          do
          {
            *v5 = RewriteAdressSpacePass::TypeRemapper::remapType((RewriteAdressSpacePass *)((char *)this + 32), *v5);
            ++v5;
            v6 -= 8;
          }
          while (v6);
        }
        Declaration = llvm::Intrinsic::getDeclaration();
        if (v4 != (llvm::Value *)Declaration)
        {
          v8 = Declaration;
          v9 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v33, v4);
          llvm::ValueHandleBase::operator=(v9, v8);
        }
        if (v40 != (llvm *)&v42)
          free(v40);
        if (v46 != (llvm *)&v48)
          free(v46);
      }
    }
    else
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v50, (uint64_t)v4);
    }
  }
  v48 = 128;
  v46 = (llvm *)MEMORY[0x1CAA2C6C0](0x2000, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v46);
  v49[0] = 0;
  v49[24] = 0;
  if ((_DWORD)v51)
  {
    v10 = (uint64_t *)v50;
    v11 = 8 * v51;
    do
    {
      v12 = *v10++;
      v13 = RewriteAdressSpacePass::TypeRemapper::remapType((RewriteAdressSpacePass *)((char *)this + 32), *(llvm::Type **)(v12 + 24));
      v14 = *(_DWORD *)(v12 + 32) & 0xF;
      v44 = 257;
      v15 = llvm::User::operator new((llvm::User *)0x78);
      MEMORY[0x1CAA2CE58](v15, v13, v14, 0xFFFFFFFFLL, &v40, a2);
      v16 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v46, (llvm::Value *)v12);
      llvm::ValueHandleBase::operator=(v16, v15);
      v11 -= 8;
    }
    while (v11);
    if ((_DWORD)v51)
    {
      v17 = (llvm::Value **)v50;
      v18 = (llvm::Value **)((char *)v50 + 8 * v51);
      do
      {
        v19 = *v17;
        v20 = llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v46, *v17)[2];
        v42 = 128;
        v40 = (llvm *)MEMORY[0x1CAA2C6C0](0x2000, 8);
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::initEmpty((uint64_t)&v40);
        v43[0] = 0;
        v45 = 0;
        v21 = v33;
        if (v34)
        {
          if (v35)
          {
            v22 = (unint64_t)v35 << 6;
            while ((*((_QWORD *)v21 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v21 = (llvm *)((char *)v21 + 64);
              v22 -= 64;
              if (!v22)
                goto LABEL_29;
            }
          }
        }
        else
        {
LABEL_29:
          v21 = (llvm *)((char *)v33 + 64 * (unint64_t)v35);
        }
        llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert<llvm::ValueMapIterator<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::Value const*>>((uint64_t)&v40, (uint64_t)v21, (uint64_t)v33 + 64 * (unint64_t)v35, (uint64_t)v33 + 64 * (unint64_t)v35);
        v23 = v46;
        if ((_DWORD)v47)
        {
          if (v48)
          {
            v24 = (unint64_t)v48 << 6;
            while ((*((_QWORD *)v23 + 3) | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v23 = (llvm *)((char *)v23 + 64);
              v24 -= 64;
              if (!v24)
                goto LABEL_35;
            }
          }
        }
        else
        {
LABEL_35:
          v23 = (llvm *)((char *)v46 + 64 * (unint64_t)v48);
        }
        llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert<llvm::ValueMapIterator<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::Value const*>>((uint64_t)&v40, (uint64_t)v23, (uint64_t)v46 + 64 * (unint64_t)v48, (uint64_t)v46 + 64 * (unint64_t)v48);
        if ((*((_WORD *)v19 + 9) & 1) != 0)
          llvm::Function::BuildLazyArguments(v19);
        v25 = (llvm::Value *)*((_QWORD *)v19 + 11);
        if ((*(_WORD *)(v20 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v20);
        for (j = *(_QWORD *)(v20 + 88); ; j += 40)
        {
          if ((*((_WORD *)v19 + 9) & 1) != 0)
            llvm::Function::BuildLazyArguments(v19);
          if (v25 == (llvm::Value *)(*((_QWORD *)v19 + 11) + 40 * *((_QWORD *)v19 + 12)))
            break;
          if ((*(_WORD *)(v20 + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)v20);
          if (j == *(_QWORD *)(v20 + 88) + 40 * *(_QWORD *)(v20 + 96))
            break;
          v27 = (llvm::ValueHandleBase *)llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v40, v25);
          llvm::ValueHandleBase::operator=(v27, j);
          v25 = (llvm::Value *)((char *)v25 + 40);
        }
        v37 = v39;
        v38 = 0x400000000;
        llvm::CloneFunctionInto();
        if (v37 != v39)
          free(v37);
        llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v43);
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v40, v42);
        llvm::deallocate_buffer(v40, (void *)((unint64_t)v42 << 6));
        ++v17;
      }
      while (v17 != v18);
      if ((_DWORD)v51)
      {
        v28 = (llvm::Value **)v50;
        v29 = 8 * v51;
        do
        {
          v30 = *v28++;
          llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)&v46, v30);
          llvm::Value::takeName();
          llvm::UndefValue::get();
          llvm::Value::replaceAllUsesWith();
          llvm::Function::eraseFromParent(v30);
          v29 -= 8;
        }
        while (v29);
      }
    }
  }
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v49);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v46, v48);
  llvm::deallocate_buffer(v46, (void *)((unint64_t)v48 << 6));
  llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)v36);
  llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>::destroyAll((uint64_t)v33, v35);
  llvm::deallocate_buffer(v33, (void *)((unint64_t)v35 << 6));
  if (v50 != v52)
    free(v50);
  return 1;
}

void llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert<llvm::ValueMapIterator<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>,llvm::WeakTrackingVH>>,llvm::Value const*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  __n128 v11;
  llvm::Value *v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 != a4)
  {
    v15 = v4;
    v16 = v5;
    v8 = a2;
    do
    {
      v12 = *(llvm::Value **)(v8 + 24);
      llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v13, 3u, (_QWORD *)(v8 + 40));
      llvm::ValueMap<llvm::Value const*,llvm::WeakTrackingVH,llvm::ValueMapConfig<llvm::Value const*,llvm::sys::SmartMutex<false>>>::insert(&v11, a1, &v12);
      if (v14 != -8192 && v14 != -4096 && v14 != 0)
        llvm::ValueHandleBase::RemoveFromUseList((llvm::ValueHandleBase *)v13);
      while (1)
      {
        v8 += 64;
        if (v8 == a3)
          break;
        if ((*(_QWORD *)(v8 + 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_13;
      }
      v8 = a3;
LABEL_13:
      ;
    }
    while (v8 != a4);
  }
}

uint64_t AGCLLVMTargetLowerer::getIntIntrinsicName(uint64_t *a1, llvm::Type *this)
{
  int ScalarSizeInBits;
  uint64_t result;
  unint64_t v5;

  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  result = 0;
  HIDWORD(v5) = ScalarSizeInBits;
  LODWORD(v5) = ScalarSizeInBits - 8;
  switch((v5 >> 3))
  {
    case 0u:
      goto LABEL_5;
    case 1u:
      ++a1;
      goto LABEL_5;
    case 3u:
      a1 += 2;
      goto LABEL_5;
    case 7u:
      a1 += 3;
LABEL_5:
      result = *a1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::IRBuilderBase::CreateNeg(llvm::IRBuilderBase *this, llvm::Value *a2, const llvm::Twine *a3)
{
  uint64_t Neg;
  BOOL v6;

  if (a2 && *((unsigned __int8 *)a2 + 16) <= 0x14u)
  {
    Neg = (*(uint64_t (**)(_QWORD, llvm::Value *, _QWORD, _QWORD))(**((_QWORD **)this + 9) + 192))(*((_QWORD *)this + 9), a2, 0, 0);
    if (Neg)
      v6 = *(unsigned __int8 *)(Neg + 16) >= 0x1Cu;
    else
      v6 = 0;
    if (v6)
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, Neg, (uint64_t)a3);
  }
  else
  {
    Neg = llvm::BinaryOperator::CreateNeg();
    llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, Neg, (uint64_t)a3);
  }
  return Neg;
}

llvm::Value *AGCLLVMTargetBuilder::getMinMaxConstants(AGCLLVMTargetBuilder *this, llvm::Type *a2, int a3, llvm::Value **a4, llvm::Value **a5, llvm::Type **a6)
{
  llvm::Value *result;
  unint64_t v12;

  llvm::Type::getScalarSizeInBits(a2);
  *a6 = (llvm::Type *)llvm::IntegerType::get();
  result = (llvm::Value *)llvm::Type::getScalarSizeInBits(a2);
  HIDWORD(v12) = (_DWORD)result;
  LODWORD(v12) = (_DWORD)result - 8;
  switch((v12 >> 3))
  {
    case 0u:
      if (!a3)
        goto LABEL_10;
      goto LABEL_9;
    case 1u:
      if (a3)
        goto LABEL_9;
      goto LABEL_10;
    case 3u:
      if (a3)
        goto LABEL_9;
      goto LABEL_10;
    case 7u:
      *a6 = a2;
      if (a3)
      {
LABEL_9:
        *a4 = (llvm::Value *)llvm::ConstantInt::getSigned();
        result = (llvm::Value *)llvm::ConstantInt::getSigned();
      }
      else
      {
LABEL_10:
        *a4 = (llvm::Value *)llvm::ConstantInt::get();
        result = (llvm::Value *)llvm::ConstantInt::get();
      }
      *a5 = result;
      break;
    default:
      return result;
  }
  return result;
}

llvm::Type **AGCLLVMTargetBuilder::buildAddSat(AGCLLVMTargetBuilder *this, llvm::Type **a2, llvm::Type **a3, int a4)
{
  llvm::Type *v8;
  uint64_t v9;
  const char *IntIntrinsicName;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  llvm::Type *v15;
  unsigned int ScalarSizeInBits;
  llvm::IRBuilderBase *v17;
  llvm::Type **SExtOrTrunc;
  llvm::Type **v19;
  llvm::CmpInst **Add;
  llvm::Type **Select;
  llvm::Type *v22;
  llvm::IRBuilderBase *v23;
  llvm::CmpInst **v24;
  llvm::Type *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  llvm::Value *LShr;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *Xor;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  llvm::Value *v36;
  llvm::CmpInst **v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Type *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  _BYTE v43[32];
  __int16 v44;
  _QWORD v45[4];
  __int16 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v9 = 1048;
  if (a4)
    v9 = 1016;
  IntIntrinsicName = (const char *)AGCLLVMTargetLowerer::getIntIntrinsicName((uint64_t *)(*((_QWORD *)this + 46) + v9), *a2);
  if (IntIntrinsicName)
  {
    v11 = (uint64_t)IntIntrinsicName;
    v12 = strlen(IntIntrinsicName);
    v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, v11, v12, (uint64_t)v8, (uint64_t)v8, (uint64_t)v8);
    v45[0] = a2;
    v45[1] = a3;
    v44 = 257;
    return (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v13 + 24), v13, (uint64_t)v45, 2, (uint64_t)v43);
  }
  v41 = 0;
  v42 = 0;
  v40 = 0;
  AGCLLVMTargetBuilder::getMinMaxConstants(*((AGCLLVMTargetBuilder **)this + 9), v8, a4, &v42, &v41, &v40);
  if (a4)
  {
    v15 = v40;
    ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v40);
    v17 = (AGCLLVMTargetBuilder *)((char *)this + 8);
    if (ScalarSizeInBits > llvm::Type::getScalarSizeInBits(v8))
    {
      v44 = 257;
      SExtOrTrunc = llvm::IRBuilderBase::CreateSExtOrTrunc(v17, a2, v15, (const llvm::Twine *)v43);
      v44 = 257;
      v19 = llvm::IRBuilderBase::CreateSExtOrTrunc(v17, a3, v15, (const llvm::Twine *)v43);
      v44 = 257;
      Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v17, (llvm::Value *)SExtOrTrunc, (llvm::Value *)v19, (const llvm::Twine *)v43);
      v44 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v17, 38, Add, (uint64_t)v41, (uint64_t)v43);
      v46 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v17, 40, Add, (uint64_t)v42, (uint64_t)v45);
      llvm::IRBuilderBase::CreateSelect();
      Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
      v22 = *a2;
      v44 = 257;
      return llvm::IRBuilderBase::CreateSExtOrTrunc(v17, Select, v22, (const llvm::Twine *)v43);
    }
    v44 = 257;
    v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v17, (llvm::Value *)a2, (llvm::Value *)a3, (const llvm::Twine *)v43);
    llvm::Type::getScalarSizeInBits(v8);
    v44 = 257;
    v27 = (llvm::Value *)llvm::ConstantInt::get();
    LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v17, (llvm::Value *)a2, v27, (const llvm::Twine *)v43);
    llvm::Type::getScalarSizeInBits(v8);
    v44 = 257;
    v29 = (llvm::Value *)llvm::ConstantInt::get();
    v30 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v17, (llvm::Value *)a3, v29, (const llvm::Twine *)v43);
    v44 = 257;
    Xor = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v17, LShr, v30, (const llvm::Twine *)v43);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v46 = 257;
    v33 = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v17, Xor, v32, (const llvm::Twine *)v45);
    llvm::Type::getScalarSizeInBits(v8);
    v44 = 257;
    v34 = (llvm::Value *)llvm::ConstantInt::get();
    v35 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v17, v26, v34, (const llvm::Twine *)v43);
    v44 = 257;
    v36 = (llvm::Value *)llvm::IRBuilderBase::CreateXor(v17, LShr, v35, (const llvm::Twine *)v43);
    v46 = 257;
    v37 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v17, v33, v36, (const llvm::Twine *)v45);
    v38 = llvm::ConstantInt::get();
    v44 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v17, 40, (llvm::CmpInst **)v26, v38, (uint64_t)v43);
    v46 = 257;
    llvm::IRBuilderBase::CreateSelect();
    v39 = llvm::ConstantInt::get();
    v44 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v17, 32, v37, v39, (uint64_t)v43);
    v46 = 257;
  }
  else
  {
    v23 = (AGCLLVMTargetBuilder *)((char *)this + 8);
    v44 = 257;
    v24 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd(v23, (llvm::Value *)a2, (llvm::Value *)a3, (const llvm::Twine *)v43);
    v44 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)v23, 36, v24, (uint64_t)a2, (uint64_t)v43);
    v25 = *a2;
    v46 = 257;
    llvm::IRBuilderBase::CreateZExtOrTrunc(v23, (llvm::Type **)v41, v25, (const llvm::Twine *)v45);
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
}

llvm::Type **llvm::IRBuilderBase::CreateSExtOrTrunc(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  unsigned int ScalarSizeInBits;
  unsigned int v9;
  uint64_t v10;

  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a2);
  v9 = llvm::Type::getScalarSizeInBits(a3);
  if (ScalarSizeInBits >= v9)
  {
    if (ScalarSizeInBits <= v9)
      return a2;
    v10 = 38;
  }
  else
  {
    v10 = 40;
  }
  return (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this, v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
}

llvm::Value *AGCLLVMTargetBuilder::CreateBarrier(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  _WORD v7[20];
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[46];
  v3 = *(_QWORD *)(v2 + 936);
  if (v3)
    v4 = strlen(*(const char **)(v2 + 936));
  else
    v4 = 0;
  v5 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, v3, v4, a1[18], a1[24], a1[24]);
  v8[0] = llvm::ConstantInt::get();
  v8[1] = llvm::ConstantInt::get();
  v7[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v5 + 24), v5, (uint64_t)v8, 2, (uint64_t)v7);
}

uint64_t AGCLLVMTargetConfig::supportFastISel(AGCLLVMTargetConfig *this)
{
  return 1;
}

uint64_t AGCLLVMTargetConfig::createPassthroughVertexShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, unsigned int a4, int a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *__p;
  _QWORD v29[4];
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v9 + 88), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t *)v9, (uint64_t *)off_1E7EBA5D0);
  *(_QWORD *)v9 = off_1E7EBA390;
  *(_QWORD *)(v9 + 88) = &unk_1E7EBA4D0;
  *(_QWORD *)(v9 + 120) = &unk_1E7EBA5C0;
  *(_DWORD *)(v9 + 72) = a5 + a4;
  *(_DWORD *)(v9 + 76) = a4;
  *(_DWORD *)(v9 + 80) = a5;
  if (a4)
  {
    v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(a4);
    bzero(v10, 8 * a4);
    v11 = 0;
    v12 = *(_QWORD *)v9;
    do
    {
      *(_QWORD *)&v10[v11] = *(_QWORD *)(*(_QWORD *)(v12 - 24) + v9 + 168 + 32);
      v11 += 8;
    }
    while (8 * a4 != v11);
  }
  else
  {
    v10 = 0;
  }
  __p = v10;
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v14 = v13;
  *(_WORD *)(v13 + 18) = *(_WORD *)(v13 + 18) & 0xC00F | 0x660;
  v29[0] = "entry";
  v30 = 259;
  operator new();
  v15 = llvm::BasicBlock::BasicBlock();
  v16 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v9;
  *(_QWORD *)(v16 + 88) = v15;
  *(_QWORD *)(v16 + 96) = v15 + 40;
  v17 = *(_QWORD *)(*(_QWORD *)v9 - 24);
  v18 = *(_QWORD *)(v17 + v9 + 400);
  v19 = *(_QWORD *)(v18 + 1384);
  if (v19)
    v20 = strlen(*(const char **)(v18 + 1384));
  else
    v20 = 0;
  v21 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v17 + v9 + 32, v19, v20, *(_QWORD *)(v17 + v9 + 176), *(_QWORD *)(v9 + v17 + 2768), *(_QWORD *)(v17 + v9 + 200));
  if ((*(_WORD *)(v14 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v14);
  v22 = v9 + 8;
  if (a4)
  {
    v23 = 0;
    v24 = *(_QWORD *)(v14 + 88);
    do
    {
      v31 = 0;
      v32 = 0;
      v31 = llvm::ConstantInt::get();
      v32 = v24;
      v25 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v22 + 32;
      v30 = 257;
      llvm::IRBuilderBase::CreateCall(v25, *(_QWORD *)(v21 + 24), v21, (uint64_t)&v31, 2, (uint64_t)v29);
      ++v23;
      v24 += 40;
    }
    while (a4 != v23);
  }
  if (a5 + a4 > a4)
  {
    do
    {
      v31 = 0;
      v32 = 0;
      v31 = llvm::ConstantInt::get();
      v32 = llvm::ConstantFP::get();
      v26 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v22 + 32;
      v30 = 257;
      llvm::IRBuilderBase::CreateCall(v26, *(_QWORD *)(v21 + 24), v21, (uint64_t)&v31, 2, (uint64_t)v29);
      ++a4;
      --a5;
    }
    while (a5);
  }
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v9 - 24) + v9 + 40));
  if (__p)
    operator delete(__p);
  return v9 + *(_QWORD *)(*(_QWORD *)v9 - 24);
}

uint64_t AGCLLVMTargetConfig::createTileDispatchVertexShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createMetalComputeShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v7 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v7 + 4792), a2, *a3);
  AGCLLVMUserComputeKernelBase::AGCLLVMUserComputeKernelBase(v7, (uint64_t *)off_1E7E8C528, (uint64_t)a3, a4);
  *(_QWORD *)v7 = &off_1E7E8C0C8;
  *(_QWORD *)(v7 + 4792) = &unk_1E7E8C428;
  *(_QWORD *)(v7 + 4824) = &unk_1E7E8C518;
  *(_QWORD *)(v7 + 4336) = v7 + 4352;
  *(_QWORD *)(v7 + 4344) = 0x200000000;
  v8 = 4376;
  do
  {
    v9 = (_QWORD *)(v7 + v8);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 4;
    v10 = v7 + v8 + 24;
    v8 += 24;
  }
  while (v10 != v7 + 4448);
  *(_QWORD *)(v7 + 4448) = 4;
  *(_QWORD *)(v7 + 4464) = 0;
  *(_QWORD *)(v7 + 4456) = 0;
  v11 = 4472;
  do
  {
    v12 = (_QWORD *)(v7 + v11);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = 4;
    v13 = v7 + v11 + 24;
    v11 += 24;
  }
  while (v13 != v7 + 4544);
  *(_QWORD *)(v7 + 4544) = 4;
  *(_QWORD *)(v7 + 4560) = 0;
  *(_QWORD *)(v7 + 4552) = 0;
  *(_QWORD *)(v7 + 4568) = 4;
  *(_QWORD *)(v7 + 4584) = 0;
  *(_QWORD *)(v7 + 4576) = 0;
  *(_QWORD *)(v7 + 4592) = 4;
  *(_QWORD *)(v7 + 4608) = 0;
  *(_QWORD *)(v7 + 4600) = 0;
  *(_QWORD *)(v7 + 4616) = 4;
  *(_QWORD *)(v7 + 4632) = 0;
  v14 = 4640;
  *(_QWORD *)(v7 + 4624) = 0;
  do
  {
    v15 = (_QWORD *)(v7 + v14);
    v15[1] = 0;
    v15[2] = 0;
    *v15 = 4;
    v16 = v7 + v14 + 24;
    v14 += 24;
  }
  while (v16 != v7 + 4712);
  *(_QWORD *)(v7 + 4712) = 4;
  *(_QWORD *)(v7 + 4728) = 0;
  *(_QWORD *)(v7 + 4720) = 0;
  *(_QWORD *)(v7 + 4736) = 4;
  *(_QWORD *)(v7 + 4752) = 0;
  *(_QWORD *)(v7 + 4744) = 0;
  *(_QWORD *)(v7 + 4760) = 4;
  *(_QWORD *)(v7 + 4776) = 0;
  *(_QWORD *)(v7 + 4768) = 0;
  *(_BYTE *)(v7 + 4784) = 0;
  return v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
}

uint64_t AGCLLVMTargetConfig::createMetalTileShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createMetalFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int *v24;
  unsigned __int16 *v25;
  uint64_t v26;
  _DWORD *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  const char *v33;
  _DWORD *v34;
  int v35;
  uint64_t v36;
  size_t v37;

  v13 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v13 + 6928), a2, *a3);
  AGCLLVMUserFragmentShader::AGCLLVMUserFragmentShader(v13, (uint64_t *)off_1E7E60EC8, (llvm::Module *)a3, a4, a5, 0);
  *(_QWORD *)v13 = &off_1E7E60A20;
  *(_QWORD *)(v13 + 6928) = &unk_1E7E60DC8;
  *(_QWORD *)(v13 + 6960) = &unk_1E7E60EB8;
  *(_QWORD *)(v13 + 4320) = &unk_1E7E60CC8;
  *(_OWORD *)(v13 + 5880) = 0u;
  *(_QWORD *)(v13 + 5896) = 0x1000000000;
  *(_QWORD *)(v13 + 5912) = v13 + 5928;
  *(_QWORD *)(v13 + 5920) = 0x800000000;
  *(_DWORD *)(v13 + 6440) = 0;
  *(_BYTE *)(v13 + 6444) = 0;
  *(_OWORD *)(v13 + 6448) = 0u;
  *(_OWORD *)(v13 + 6464) = 0u;
  v14 = 6488;
  *(_QWORD *)(v13 + 6480) = 0;
  do
  {
    v15 = (_QWORD *)(v13 + v14);
    v15[1] = 0;
    v15[2] = 0;
    *v15 = 4;
    v16 = v13 + v14 + 24;
    v14 += 24;
  }
  while (v16 != v13 + 6608);
  v17 = 0;
  v18 = v13 + 6616;
  do
  {
    *(_QWORD *)(v13 + v17 + 6608) = v18 + v17 + 8;
    *(_QWORD *)(v18 + v17) = 0x300000000;
    v17 += 32;
  }
  while (v17 != 160);
  v19 = 0;
  v20 = v13 + 6776;
  do
  {
    *(_QWORD *)(v13 + v19 + 6768) = v20 + v19 + 8;
    *(_QWORD *)(v20 + v19) = 0x300000000;
    v19 += 32;
  }
  while (v19 != 160);
  AGCLLVMUserShader::enableStatistics(v13, *(_DWORD *)(*(_QWORD *)(a4 + 16) + 60) & 1, (*(_DWORD *)(*(_QWORD *)(a4 + 16) + 60) >> 1) & 1);
  v21 = *(_QWORD *)(a4 + 16);
  *(_BYTE *)(v13 + 18) = (*(_BYTE *)(v21 + 60) & 8) != 0;
  v22 = *(_QWORD *)v13;
  *(_BYTE *)(v13 + *(_QWORD *)(*(_QWORD *)v13 - 24) + 2760) = (*(_DWORD *)(v21 + 60) & 0x4000000) != 0;
  *(_DWORD *)(v13 + 5876) = *(_DWORD *)(v21 + 56);
  *(_QWORD *)(v13 + 3304) = *(_QWORD *)(v21 + 16);
  *(_BYTE *)(v13 + 20) = (*(_BYTE *)(v21 + 60) & 4) != 0;
  if (a6 && a7)
  {
    v23 = (int *)((char *)a6 + *a6);
    v24 = (int *)((char *)a7 + *a7);
    v25 = (unsigned __int16 *)((char *)v23 - *v23);
    if (*v25 >= 5u && (v26 = v25[2]) != 0)
      v27 = (int *)((char *)v23 + v26 + *(unsigned int *)((char *)v23 + v26));
    else
      v27 = 0;
    v28 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v28 >= 5u && (v29 = v28[2]) != 0)
      v30 = (char *)v24 + v29 + *(unsigned int *)((char *)v24 + v29);
    else
      v30 = 0;
    if (*v27)
    {
      v31 = 0;
      v32 = v30 + 4;
      v33 = (const char *)(v27 + 2);
      v34 = v27 + 2;
      do
      {
        v35 = *(_DWORD *)&v32[4 * v31];
        v36 = *((unsigned int *)v33 - 1);
        v37 = strlen(&v33[v36]);
        *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v13 + 5880), (char *)v34 + v36, v37)+ 8) = v35;
        ++v31;
        ++v34;
        v33 += 4;
      }
      while (v31 < *v27);
      v22 = *(_QWORD *)v13;
    }
  }
  return v13 + *(_QWORD *)(v22 - 24);
}

_QWORD *AGCLLVMTargetConfig::createMetalVertexShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  _QWORD *v11;

  v11 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 1261), a2, *a3);
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader((uint64_t)v11, (uint64_t *)off_1E7E6D538, (uint64_t)a3, a4, a5, a6);
  *v11 = &off_1E7E6D0E0;
  v11[1261] = &unk_1E7E6D438;
  v11[1265] = &unk_1E7E6D528;
  return v11 + 1261;
}

uint64_t AGCLLVMTargetConfig::createMetalVertexShaderForAnalysis(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t result;

  v7 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v7 + 1257), a2, *a3);
  result = AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader((uint64_t)v7, (uint64_t *)off_1E7E6D058, (uint64_t)a3, a4, 0, 0);
  *v7 = &off_1E7E6CC00;
  v7[1257] = &unk_1E7E6CF58;
  v7[1261] = &unk_1E7E6D048;
  return result;
}

uint64_t AGCLLVMTargetConfig::createMetalPostTessellationShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createMetalObjectShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createPassThroughObjectShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createMetalMeshShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createMetalMeshShaderAnalysis()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createGPUGatherComputeShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"gpu_gather_compute", 18, 0);
  if ((v5 & 1) == 0
  {
    AGCLLVMDriverGPUGatherComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9018 = 0;
    qword_1EF8E9020 = 0;
  }
  v6 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v6 + 603), a2, *Bitcode);
  AGCLLVMUserComputeKernelLegacy::AGCLLVMUserComputeKernelLegacy((uint64_t)v6, (uint64_t *)&off_1E7E8CF40, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverGPUGatherComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v6 = &off_1E7E8CAD8;
  v6[603] = &unk_1E7E8CE38;
  v6[607] = &unk_1E7E8CF28;
  *(_OWORD *)(v6 + 599) = 0u;
  v6[601] = 0x2000000000;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6[653] + 824) + 408))(*(_QWORD *)(v6[653] + 824));
  v8 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v6 + 599), "gpuGatherOffsets", 0x10uLL);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 20) = 0;
  return (uint64_t)v6 + *(_QWORD *)(*v6 - 24);
}

uint64_t AGCLLVMTargetConfig::createPDSPatchUpComputeShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"pds_patchup_compute", 19, 0);
  if ((v5 & 1) == 0
  {
    AGCLLVMDriverPDSPatchUpComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9038 = 0;
    qword_1EF8E9040 = 0;
  }
  v6 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v6 + 603), a2, *Bitcode);
  AGCLLVMUserComputeKernelLegacy::AGCLLVMUserComputeKernelLegacy((uint64_t)v6, (uint64_t *)&off_1E7E8D440, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverPDSPatchUpComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v6 = &off_1E7E8CFD8;
  v6[603] = &unk_1E7E8D338;
  v6[607] = &unk_1E7E8D428;
  *(_OWORD *)(v6 + 599) = 0u;
  v6[601] = 0x2000000000;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6[653] + 824) + 408))(*(_QWORD *)(v6[653] + 824));
  v8 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v6 + 599), "pdsPatchUpOffsets", 0x11uLL);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 20) = 0;
  return (uint64_t)v6 + *(_QWORD *)(*v6 - 24);
}

_QWORD *AGCLLVMTargetConfig::createExecuteIndirectCDMPatchUpShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  int v5;
  const char *v6;
  void **v7;
  CFIndex v8;
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v10;
  _QWORD *v11;
  void *__p[2];
  unsigned __int8 v14;

  std::string::basic_string[abi:nn180100]<0>(__p, (char *)&unk_1C3E4D9BB);
  v5 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 28);
  if ((v5 - 6) >= 2)
  {
    if (v5 != 4)
      goto LABEL_6;
    v6 = "cei_pds_gen_gen1";
  }
  else
  {
    v6 = "cei_pds_gen_gen2";
  }
  MEMORY[0x1CAA2D494](__p, v6);
LABEL_6:
  if ((v14 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v8 = v14;
  else
    v8 = (CFIndex)__p[1];
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)v7, v8, 0);
  if ((v10 & 1) == 0
  {
    AGCLLVMDriverExecuteIndirectComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9058 = 0;
    qword_1EF8E9060 = 0;
  }
  v11 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 599), a2, *Bitcode);
  AGCLLVMUserComputeKernelLegacy::AGCLLVMUserComputeKernelLegacy((uint64_t)v11, (uint64_t *)&off_1E7E8D940, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverExecuteIndirectComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v11 = &off_1E7E8D4D8;
  v11[599] = &unk_1E7E8D838;
  v11[603] = &unk_1E7E8D928;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  return v11 + 599;
}

_QWORD *AGCLLVMTargetConfig::createExecuteIndirectCDMRangeExecutionShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  int v5;
  const char *v6;
  void **v7;
  CFIndex v8;
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v10;
  _QWORD *v11;
  void *__p[2];
  unsigned __int8 v14;

  std::string::basic_string[abi:nn180100]<0>(__p, (char *)&unk_1C3E4D9BB);
  v5 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 28);
  if ((v5 - 6) >= 2)
  {
    if (v5 != 4)
      goto LABEL_6;
    v6 = "cei_pds_gen_range_exec_gen1";
  }
  else
  {
    v6 = "cei_pds_gen_range_exec_gen2";
  }
  MEMORY[0x1CAA2D494](__p, v6);
LABEL_6:
  if ((v14 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v8 = v14;
  else
    v8 = (CFIndex)__p[1];
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)v7, v8, 0);
  if ((v10 & 1) == 0
  {
    AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9078 = 0;
    qword_1EF8E9080 = 0;
  }
  v11 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 599), a2, *Bitcode);
  AGCLLVMUserComputeKernelLegacy::AGCLLVMUserComputeKernelLegacy((uint64_t)v11, (uint64_t *)&off_1E7E8DE40, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v11 = &off_1E7E8D9D8;
  v11[599] = &unk_1E7E8DD38;
  v11[603] = &unk_1E7E8DE28;
  if ((char)v14 < 0)
    operator delete(__p[0]);
  return v11 + 599;
}

uint64_t AGCLLVMTargetConfig::createComputeProgressMarkerShader(AGCLLVMTargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  unsigned __int8 v5;
  llvm::LLVMContext **Bitcode;
  _QWORD *v7;
  uint64_t v8;

  if ((v5 & 1) == 0
  {
    AGCLLVMDriverComputeProgressMarkerShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9218 = 0;
    qword_1EF8E9220 = 0;
  }
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"progress_marker_compute", 23, 0);
  v7 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v7 + 603), a2, *Bitcode);
  AGCLLVMUserComputeKernelLegacy::AGCLLVMUserComputeKernelLegacy((uint64_t)v7, (uint64_t *)&off_1E7E92E68, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverComputeProgressMarkerShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v7 = &off_1E7E92A00;
  v7[603] = &unk_1E7E92D60;
  v7[607] = &unk_1E7E92E50;
  *(_OWORD *)(v7 + 599) = 0u;
  v7[601] = 0x2000000000;
  LODWORD(Bitcode) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7[653] + 824) + 584))(*(_QWORD *)(v7[653] + 824));
  v8 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v7 + 599), "markerBuffer", 0xCuLL);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v8 + 20) = 0;
  return (uint64_t)v7 + *(_QWORD *)(*v7 - 24);
}

uint64_t AGCLLVMTargetConfig::createComputeControlFlowPredicateShader(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4)
{
  char v6;
  unsigned __int8 v7;
  const char *ComputeControlFlowBitcodeFileName;
  const UInt8 *v9;
  size_t v10;
  llvm::LLVMContext **Bitcode;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a4;
  if ((v7 & 1) == 0
  {
    AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &,unsigned int,BOOL,BOOL)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9238 = 0;
    qword_1EF8E9240 = 0;
  }
  ComputeControlFlowBitcodeFileName = getComputeControlFlowBitcodeFileName(a2[4]);
  v9 = (const UInt8 *)ComputeControlFlowBitcodeFileName;
  if (ComputeControlFlowBitcodeFileName)
    v10 = strlen(ComputeControlFlowBitcodeFileName);
  else
    v10 = 0;
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode(a3, v9, v10, 1);
  v12 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v12 + 4832), (AGCLLVMCtx *)a2, *Bitcode);
  AGCLLVMUserComputeKernelLegacy::AGCLLVMUserComputeKernelLegacy(v12, (uint64_t *)&off_1E7E93368, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverComputeControlFlowPredicateShaderLegacy::create(AGCLLVMCtx &,llvm::LLVMContext &,unsigned int,BOOL,BOOL)::computeCS);
  *(_QWORD *)v12 = &off_1E7E92F00;
  *(_QWORD *)(v12 + 4832) = &unk_1E7E93260;
  *(_QWORD *)(v12 + 4864) = &unk_1E7E93350;
  *(_QWORD *)(v12 + 4808) = 0x2000000000;
  *(_OWORD *)(v12 + 4792) = 0u;
  *(_DWORD *)(v12 + 4824) = v6 & 7;
  *(_BYTE *)(v12 + 4828) = (v6 & 8) != 0;
  *(_BYTE *)(v12 + 4829) = (v6 & 0x10) != 0;
  LODWORD(Bitcode) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v12 + 5232) + 824) + 600))(*(_QWORD *)(*(_QWORD *)(v12 + 5232) + 824));
  v13 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4792), "left", 4uLL);
  *(_QWORD *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v13 + 20) = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 24) + v12 + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 608))(v14);
  v15 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4792), "right", 5uLL);
  *(_QWORD *)(v15 + 8) = 1;
  *(_DWORD *)(v15 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v15 + 20) = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 24) + v12 + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 616))(v16);
  v17 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4792), "passLinkAddress", 0xFuLL);
  *(_QWORD *)(v17 + 8) = 2;
  *(_DWORD *)(v17 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v17 + 20) = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 24) + v12 + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 624))(v18);
  v19 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4792), "failLinkAddress", 0xFuLL);
  *(_QWORD *)(v19 + 8) = 3;
  *(_DWORD *)(v19 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v19 + 20) = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 24) + v12 + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 632))(v20);
  v21 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4792), "linkToken", 9uLL);
  *(_QWORD *)(v21 + 8) = 4;
  *(_DWORD *)(v21 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v21 + 20) = 0;
  return v12 + *(_QWORD *)(*(_QWORD *)v12 - 24);
}

uint64_t AGCLLVMTargetConfig::createBVHBuilderShader(uint64_t a1, AGCLLVMCtx *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned __int8 v16;
  int v17;
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;
  __int128 v26;
  _QWORD v27[9];

  v27[8] = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)a4 & 0x3FFFFFFF;
  v8 = off_1E7E933E8[v7];
  v9 = strlen(v8);
  v25 = v27;
  v26 = xmmword_1C3E37B50;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v25, v8, &v8[v9]);
  if (v7 > 0x5E)
  {
    if ((*(_BYTE *)(a4 + 3) & 0x40) != 0)
    {
      v14 = "_assert";
      v15 = "";
    }
    else
    {
      v14 = "_release";
      v15 = "";
    }
    goto LABEL_30;
  }
  if ((v7 - 76) <= 0x12)
  {
    if (*(int *)a4 < 0)
      v10 = "_legacy";
    else
      v10 = "_temporal";
    v11 = 7;
    if (*(int *)a4 >= 0)
      v11 = 9;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v25, v10, &v10[v11]);
  }
  if ((*(_BYTE *)(a4 + 3) & 0x40) != 0)
  {
    v12 = "_assert";
    v13 = "";
  }
  else
  {
    v12 = "_release";
    v13 = "";
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v25, v12, v13);
  if ((v16 & 1) == 0
  {
    AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride = 0;
  }
  if (AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride >= 1)
  {
    if (AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride == 3)
    {
      v14 = "_gen3";
      goto LABEL_29;
    }
    if (AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride != 2)
    {
      if (AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::riaBvhGenOverride != 1)
        goto LABEL_31;
      goto LABEL_24;
    }
LABEL_27:
    v14 = "_gen2";
    goto LABEL_29;
  }
  v17 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 28);
  if (v17 > 31)
  {
    if (v17 == 32 || v17 == 34)
      goto LABEL_27;
  }
  else if (v17 == 24 || v17 == 31)
  {
LABEL_24:
    v14 = "_gen1";
LABEL_29:
    v15 = v14 + 5;
LABEL_30:
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v25, v14, v15);
  }
LABEL_31:
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode(a3, (const UInt8 *)v25, v26, 0);
  if ((v19 & 1) == 0
  {
    AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9268 = 0;
    qword_1EF8E9270 = 0;
  }
  v20 = operator new();
  v21 = v25;
  v22 = v26;
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v20 + 4544), a2, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10(v20, (uint64_t *)&off_1E7E93CA8, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverBVHBuilderComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &,_AGCBVHBuilderState const*)::computeCS);
  *(_QWORD *)v20 = &off_1E7E93840;
  *(_QWORD *)(v20 + 4544) = &unk_1E7E93BA0;
  *(_QWORD *)(v20 + 4576) = &unk_1E7E93C90;
  *(_OWORD *)(v20 + 4424) = 0u;
  *(_QWORD *)(v20 + 4440) = 0x2000000000;
  *(_QWORD *)(v20 + 4456) = v20 + 4480;
  *(_OWORD *)(v20 + 4464) = xmmword_1C3E37B50;
  llvm::SmallVectorImpl<char>::append<char const*,void>((_QWORD *)(v20 + 4456), v21, &v21[v22]);
  v23 = *(_QWORD *)(*(_QWORD *)v20 - 24);
  if (v25 != v27)
    free(v25);
  return v20 + v23;
}

uint64_t AGCLLVMTargetConfig::createGeometryPipelineEmulationFWAllocationSetupShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createGeometryPipelineEmulationFWAllocationPostObjectShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createGeometryPipelineEmulationFWAllocationPreMeshShader()
{
  return 0;
}

uint64_t AGCLLVMTargetConfig::createMetalIntersectionShader()
{
  return 0;
}

void AGCLLVMTargetConfig::getTargetFeatureString(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t AGCLLVMTargetConfig::getDMARegisterLayoutMask(AGCLLVMTargetConfig *this)
{
  return 0;
}

uint64_t *AGCLLVMTargetConfig::initializeAirBuiltinsMap(AGCLLVMTargetConfig *this, AGCLLVMAirBuiltinsMap *a2)
{
  return AGCLLVMAirBuiltinsMap::insertBuiltinReplacementsBase(a2, this);
}

uint64_t AGCLLVMTargetLowerer::buildFMin(AGCLLVMBuilder *a1, __int128 *a2, llvm::Value *a3, llvm::Value *a4, int a5)
{
  llvm::Value *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  if (a5)
  {
    v18 = *a2;
    v19 = *((_QWORD *)a2 + 2);
    if (v19)
      llvm::MetadataTracking::track();
    v20 = *((_DWORD *)a2 + 6);
    v9 = AGCLLVMTargetLowerer::flushNaN((uint64_t)a1, (uint64_t)&v18, a3, a4);
    if (v19)
      llvm::MetadataTracking::untrack();
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    if (v16)
      llvm::MetadataTracking::track();
    v17 = *((_DWORD *)a2 + 6);
    a4 = AGCLLVMTargetLowerer::flushNaN((uint64_t)a1, (uint64_t)&v15, a4, a3);
    if (v16)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v9 = a3;
  }
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *((_DWORD *)a2 + 6);
  v10 = AGCLLVMTargetLowerer::buildFCmpSel(a1, (uint64_t)&v12, (uint64_t)v9, a4);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t AGCLLVMTargetLowerer::buildFMax(AGCLLVMBuilder *a1, __int128 *a2, llvm::Value *a3, llvm::Value *a4, int a5)
{
  llvm::Value *v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  if (a5)
  {
    v18 = *a2;
    v19 = *((_QWORD *)a2 + 2);
    if (v19)
      llvm::MetadataTracking::track();
    v20 = *((_DWORD *)a2 + 6);
    v9 = AGCLLVMTargetLowerer::flushNaN((uint64_t)a1, (uint64_t)&v18, a3, a4);
    if (v19)
      llvm::MetadataTracking::untrack();
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    if (v16)
      llvm::MetadataTracking::track();
    v17 = *((_DWORD *)a2 + 6);
    a4 = AGCLLVMTargetLowerer::flushNaN((uint64_t)a1, (uint64_t)&v15, a4, a3);
    if (v16)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v9 = a3;
  }
  v12 = *a2;
  v13 = *((_QWORD *)a2 + 2);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *((_DWORD *)a2 + 6);
  v10 = AGCLLVMTargetLowerer::buildFCmpSel(a1, (uint64_t)&v12, (uint64_t)v9, a4);
  if (v13)
    llvm::MetadataTracking::untrack();
  return v10;
}

uint64_t AGCLLVMTargetLowerer::buildAtomicFnAddrSpaceCast(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t AGCLLVMTargetLowerer::buildDisableAtomicSmashingIntrinsic(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t AGCLLVMTargetLowerer::buildUnpackNorm(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Type *v20;
  _BYTE v22[32];
  __int16 v23;
  __int128 v24;
  uint64_t v25;
  int v26;

  v24 = *(_OWORD *)a2;
  v25 = *(_QWORD *)(a2 + 16);
  if (v25)
    llvm::MetadataTracking::track();
  v26 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v24);
  if (v25)
    llvm::MetadataTracking::untrack();
  if (a4 == 16)
  {
    v15 = 164;
    if (a5)
      v15 = 162;
    v13 = a1[v15];
    if (v13)
      v14 = strlen((const char *)a1[v15]);
    else
      v14 = 0;
    v17 = a1 + 30;
    v18 = 176;
  }
  else
  {
    if (a4 != 8)
      return 0;
    v12 = 165;
    if (a5)
      v12 = 163;
    v13 = a1[v12];
    if (v13)
      v14 = strlen((const char *)a1[v12]);
    else
      v14 = 0;
    v17 = a1 + 37;
    v18 = 175;
  }
  v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, v13, v14, a1[21], *v17, a1[25]);
  v16 = (llvm::Value *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 8 * v18))(a1, a3, v19);
  if (a6 != 32)
  {
    v20 = (llvm::Type *)a1[19];
    v23 = 257;
    return llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 1), v16, v20, (const llvm::Twine *)v22);
  }
  return (uint64_t)v16;
}

uint64_t AGCLLVMTargetLowerer::buildPackFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  int v17;

  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  result = 0;
  switch((int)a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1456))(a1, a3, a4, a5, a6, a7);
      break;
    case 5:
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1448))(a1, a5, a6, a7);
      break;
    case 6:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1432))(a1, a5);
      break;
    case 7:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1480))(a1, a5);
      break;
    case 8:
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1496))(a1, a5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildUnpackFormat(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  llvm::Value *v15;
  llvm::Type *v16;
  _BYTE v17[32];
  __int16 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v19 = *(_OWORD *)a2;
  v20 = *(_QWORD *)(a2 + 16);
  if (v20)
    llvm::MetadataTracking::track();
  v21 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v19);
  if (v20)
    llvm::MetadataTracking::untrack();
  switch((int)a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1464))(a1, a3, a4, a5, a6, a7);
      break;
    case 4:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1440))(a1, a5, a4, 3, a6, a7);
      break;
    case 5:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1440))(a1, a5, a4, 4, a6, a7);
      break;
    case 6:
      v15 = (llvm::Value *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 1440))(a1, a5, a1[19], 4, a6, a7);
      v16 = (llvm::Type *)a1[38];
      v18 = 257;
      result = llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v17);
      break;
    case 7:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 1472))(a1, a5, a4);
      break;
    case 8:
      result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 1488))(a1, a5, a4);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildUnpackXR10(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  llvm::Value *v6;
  llvm::Value *LShr;
  llvm::Type *v8;
  uint64_t UIToFP;
  uint64_t v10;
  uint64_t FSub;
  uint64_t v12;
  llvm::Value *FMul;
  llvm::Value *v14;
  uint64_t Element;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Value *v19;
  __int128 v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int16 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  _BYTE v29[32];
  __int16 v30;

  v26 = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  if (v27)
    llvm::MetadataTracking::track();
  v28 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v26);
  if (v27)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v30 = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v29);
  v8 = *(llvm::Type **)(a1 + 280);
  v30 = 257;
  UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(a1 + 8), LShr, v8, (const llvm::Twine *)v29);
  v10 = llvm::ConstantFP::get();
  v25 = 257;
  FSub = llvm::IRBuilderBase::CreateFSub(a1 + 8, UIToFP, v10, (uint64_t)v24);
  v12 = llvm::ConstantFP::get();
  v30 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul(a1 + 8, FSub, v12, (uint64_t)v29);
  v21 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v23 = *(_DWORD *)(a1 + 104);
  v30 = 257;
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), FMul, v14, (const llvm::Twine *)v29);
  v16 = llvm::ConstantFP::get();
  v17 = llvm::ConstantFP::get();
  v18 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, &v21, Element, v16, v17, 0);
  if (v22)
    llvm::MetadataTracking::untrack();
  v30 = 257;
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), FMul, v18, v19, (const llvm::Twine *)v29);
}

uint64_t AGCLLVMTargetLowerer::buildPackXR10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t FMul;
  uint64_t v8;
  llvm::Value *FAdd;
  llvm::Type *v10;
  llvm::Value *FPToUI;
  llvm::Value *v12;
  _BYTE v14[32];
  __int16 v15;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v18);
  if (v19)
    llvm::MetadataTracking::untrack();
  v6 = llvm::ConstantFP::get();
  v17 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul(a1 + 8, a3, v6, (uint64_t)v16);
  v8 = llvm::ConstantFP::get();
  v15 = 257;
  FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd(a1 + 8, FMul, v8, (uint64_t)v14);
  v10 = *(llvm::Type **)(a1 + 304);
  v17 = 257;
  FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 8), FAdd, v10, (const llvm::Twine *)v16);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v15 = 257;
  return llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), FPToUI, v12, (const llvm::Twine *)v14);
}

uint64_t AGCLLVMTargetLowerer::buildWriteOutputPartitionFromState@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, llvm::Type *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Cast;
  uint64_t result;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  unint64_t v21;
  llvm::Value *v22;
  uint64_t Element;
  llvm::Value *v24;
  llvm::Value *v25;
  uint64_t Add;
  __int128 v28;
  uint64_t v29;
  int v30;
  _QWORD v31[4];
  __int16 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  int v38;

  v36 = *(_OWORD *)a2;
  v37 = *(_QWORD *)(a2 + 16);
  if (v37)
    llvm::MetadataTracking::track();
  v38 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v36);
  if (v37)
    llvm::MetadataTracking::untrack();
  v31[0] = llvm::Type::getPrimitiveSizeInBits(a4);
  v31[1] = v11;
  v12 = llvm::TypeSize::operator unsigned long long();
  v13 = *(_DWORD *)(a3 + 4);
  switch(*(_DWORD *)a3)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x16:
      v13 *= 2;
      break;
    case 0xA:
    case 0xB:
    case 0x11:
      v13 *= 4;
      break;
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
      v13 = 4;
      break;
    default:
      v13 = 0;
      break;
  }
  if (v12 == 32)
  {
    v33 = *(_OWORD *)a2;
    v34 = *(_QWORD *)(a2 + 16);
    if (v34)
      llvm::MetadataTracking::track();
    v35 = *(_DWORD *)(a2 + 24);
    v14 = *(_QWORD *)(a3 + 32);
    v15 = a1[25];
    v32 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, a5, v15, (uint64_t)v31);
    result = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t, uint64_t, _QWORD))(*a1 + 224))(a1, &v33, v14, Cast, *(_QWORD *)(a3 + 24));
    if (v34)
      result = llvm::MetadataTracking::untrack();
  }
  else
  {
    v18 = llvm::FixedVectorType::get();
    v32 = 257;
    result = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, a5, v18, (uint64_t)v31);
    if (v13)
    {
      v19 = (llvm::Value *)result;
      v20 = 0;
      v21 = ((unint64_t)v13 + 3) >> 2;
      do
      {
        v32 = 257;
        v22 = (llvm::Value *)llvm::ConstantInt::get();
        Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v19, v22, (const llvm::Twine *)v31);
        v28 = *(_OWORD *)a2;
        v29 = *(_QWORD *)(a2 + 16);
        if (v29)
          llvm::MetadataTracking::track();
        v30 = *(_DWORD *)(a2 + 24);
        v24 = *(llvm::Value **)(a3 + 32);
        v25 = (llvm::Value *)llvm::ConstantInt::get();
        v32 = 257;
        Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v24, v25, (const llvm::Twine *)v31);
        result = (*(uint64_t (**)(_QWORD *, __int128 *, uint64_t, uint64_t, _QWORD))(*a1 + 224))(a1, &v28, Add, Element, *(_QWORD *)(a3 + 24));
        if (v29)
          result = llvm::MetadataTracking::untrack();
        ++v20;
      }
      while (v21 != v20);
    }
  }
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 24) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildReadOutputPartitionFromState(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Type *a4)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  llvm::Value *InsertElement;
  uint64_t v12;
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t Add;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;

  v28 = *(_OWORD *)a2;
  v29 = *(_QWORD *)(a2 + 16);
  if (v29)
    llvm::MetadataTracking::track();
  v30 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v28);
  if (v29)
    llvm::MetadataTracking::untrack();
  v19 = (uint64_t)a4;
  v20[0] = llvm::Type::getPrimitiveSizeInBits(a4);
  v20[1] = v8;
  v9 = llvm::TypeSize::operator unsigned long long();
  v10 = *(_DWORD *)(a3 + 4);
  switch(*(_DWORD *)a3)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x16:
      v10 *= 2;
      break;
    case 0xA:
    case 0xB:
    case 0x11:
      v10 *= 4;
      break;
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
      v10 = 4;
      break;
    default:
      v10 = 0;
      break;
  }
  if (v9 == 32)
  {
    v25 = *(_OWORD *)a2;
    v26 = *(_QWORD *)(a2 + 16);
    if (v26)
      llvm::MetadataTracking::track();
    v27 = *(_DWORD *)(a2 + 24);
    InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 232))(a1, &v25, *(_QWORD *)(a3 + 32), *(_QWORD *)(a3 + 24));
    if (v26)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    llvm::FixedVectorType::get();
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    if (v10)
    {
      v12 = 0;
      do
      {
        v22 = *(_OWORD *)a2;
        v23 = *(_QWORD *)(a2 + 16);
        if (v23)
          llvm::MetadataTracking::track();
        v24 = *(_DWORD *)(a2 + 24);
        v13 = *(llvm::Value **)(a3 + 32);
        v14 = (llvm::Value *)llvm::ConstantInt::get();
        v21 = 257;
        Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v13, v14, (const llvm::Twine *)v20);
        v16 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)a1 + 232))(a1, &v22, Add, *(_QWORD *)(a3 + 24));
        if (v23)
          llvm::MetadataTracking::untrack();
        v21 = 257;
        v17 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v16, v17, (const llvm::Twine *)v20);
        ++v12;
      }
      while (((unint64_t)v10 + 3) >> 2 != v12);
    }
  }
  v21 = 257;
  return llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)InsertElement, v19, (uint64_t)v20);
}

void AGCLLVMTargetLowerer::buildManualResolve(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t AGCLLVMTargetLowerer::buildSparseSample(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t InsertValue;
  uint64_t v9;
  int v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13)
    llvm::MetadataTracking::untrack();
  v6 = *(_QWORD *)(a1 + 184);
  v15[0] = *a3;
  v15[1] = v6;
  llvm::StructType::get();
  v7 = llvm::UndefValue::get();
  v11 = 0;
  v16 = 257;
  InsertValue = llvm::IRBuilderBase::CreateInsertValue(a1 + 8, v7, (uint64_t)a3, (uint64_t)&v11, 1, (uint64_t)v15);
  v9 = llvm::ConstantInt::get();
  v11 = 1;
  v16 = 257;
  return llvm::IRBuilderBase::CreateInsertValue(a1 + 8, InsertValue, v9, (uint64_t)&v11, 1, (uint64_t)v15);
}

uint64_t AGCLLVMTargetLowerer::buildGetPayloadPointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildGetMeshPrimitivePointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildCoherentLoad()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildCoherentStore()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getVertexInputRegister(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = result + 1;
  return result;
}

uint64_t AGCLLVMTargetLowerer::getVertexInputIntrinsic()
{
  return 0;
}

llvm::Value *AGCLLVMTargetLowerer::getVertexInputCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _WORD v10[20];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v12 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v12);
  if (v13)
    llvm::MetadataTracking::untrack();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 440))(a1, a3, a4);
  v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)"agc.read_vi.f32", 15, a1[21], a1[25]);
  v11 = llvm::ConstantInt::get();
  v10[16] = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v8 + 24), v8, (uint64_t)&v11, 1, (uint64_t)v10);
}

uint64_t AGCLLVMTargetLowerer::vertexBuiltinRegisterDomain(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::vertexInputNeedsBias()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getExecutionScopedSamplerStateRegisterCount(AGCLLVMTargetLowerer *this)
{
  return 0;
}

void AGCLLVMTargetLowerer::getListOfFunctionsInMetalRuntimeWithFastAndNonFastVariants(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t AGCLLVMTargetLowerer::buildFrontFacing(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  llvm::CmpInst **v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  if (*(_QWORD *)(a1 + 1568))
    strlen(*(const char **)(a1 + 1568));
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v9 = 257;
  v5 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v8);
  v6 = llvm::ConstantInt::get();
  v9 = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v5, v6, (uint64_t)v8);
}

uint64_t AGCLLVMTargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL AGCLLVMTargetLowerer::isImageWriteBlockFromDimensionSupported(uint64_t a1, int a2)
{
  return a2 == 2 || a2 == 4;
}

uint64_t AGCLLVMTargetLowerer::isFormatSupported(uint64_t a1, unsigned int a2)
{
  return (a2 < 0x17) & (0x46FFFCu >> a2);
}

BOOL AGCLLVMTargetLowerer::isMSAASampleCountSupported(AGCLLVMTargetLowerer *this, unsigned __int32 a2, int8x8_t a3)
{
  uint8x8_t v3;

  a3.i32[0] = a2;
  v3 = (uint8x8_t)vcnt_s8(a3);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.i32[0] == 1 && *((_DWORD *)this + 451) >= a2;
}

uint64_t *AGCLLVMTargetLowerer::fragmentOutputConfiguration@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;

  v4 = 0;
  *(_QWORD *)(a4 + 52) = 0;
  *(_QWORD *)(a4 + 44) = 0;
  *(_BYTE *)(a4 + 60) = 0;
  *(_BYTE *)(a4 + 64) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 68) = a3;
  *(_OWORD *)(a4 + 27) = 0u;
  switch(a2)
  {
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 0x12u:
      v5 = result + 37;
      goto LABEL_6;
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      v5 = result + 38;
      goto LABEL_6;
    case 0xAu:
    case 0xBu:
      v5 = result + 39;
      goto LABEL_6;
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x16u:
      v5 = result + 35;
LABEL_6:
      v4 = *v5;
      *(_QWORD *)a4 = v4;
      if (a2 - 2 < 2)
      {
        *(_QWORD *)(a4 + 8) = result[35];
        v4 = result[37];
      }
      else if (a2 - 6 >= 2)
      {
        if (a2 == 18)
        {
          v6 = result[38];
          *(_QWORD *)(a4 + 8) = v6;
          *(_QWORD *)(a4 + 24) = v6;
          *(_QWORD *)(a4 + 32) = 0x200000001;
LABEL_16:
          v7 = result + 38;
          goto LABEL_21;
        }
LABEL_13:
        *(_QWORD *)(a4 + 8) = v4;
      }
      else
      {
        *(_QWORD *)(a4 + 8) = result[36];
        v4 = result[38];
      }
      *(_QWORD *)(a4 + 24) = v4;
      if (a2 > 0x16)
        goto LABEL_18;
      if (((1 << a2) & 0x7D93C0) != 0)
        goto LABEL_16;
      if (((1 << a2) & 0x603C) != 0 || ((1 << a2) & 0x20C00) == 0)
LABEL_18:
        v7 = result + 37;
      else
        v7 = result + 39;
LABEL_21:
      *(_QWORD *)(a4 + 16) = *v7;
      switch(a2)
      {
        case 2u:
        case 6u:
        case 0xDu:
          *(_WORD *)(a4 + 41) = 257;
          *(_OWORD *)(a4 + 44) = xmmword_1C3E37F30;
          goto LABEL_27;
        case 3u:
        case 7u:
        case 0xEu:
          *(_BYTE *)(a4 + 41) = 1;
          *(_OWORD *)(a4 + 44) = xmmword_1C3E37F40;
          goto LABEL_27;
        case 4u:
        case 8u:
        case 0xAu:
          *(_BYTE *)(a4 + 42) = 1;
          goto LABEL_28;
        case 0xCu:
        case 0x11u:
          *(_BYTE *)(a4 + 41) = 1;
          goto LABEL_28;
        case 0xFu:
        case 0x16u:
          v8 = dword_1C3E37930[a2 == 22];
          *(_WORD *)(a4 + 41) = 257;
          *(_DWORD *)(a4 + 44) = dword_1C3E37938[a2 == 22];
          *(_DWORD *)(a4 + 48) = 0;
          *(_DWORD *)(a4 + 52) = v8;
          *(_DWORD *)(a4 + 56) = 1065353216;
LABEL_27:
          *(_BYTE *)(a4 + 60) = 1;
LABEL_28:
          if (a2 <= 0x16 && ((1 << a2) & 0x40E000) != 0)
            *(_BYTE *)(a4 + 40) = 1;
          break;
        default:
          return result;
      }
      return result;
    case 0x11u:
      v4 = result[36];
      *(_QWORD *)a4 = v4;
      goto LABEL_13;
    default:
      goto LABEL_13;
  }
}

uint64_t AGCLLVMTargetLowerer::emulatedColorMask(AGCLLVMTargetLowerer *this, unsigned int a2, uint64_t a3)
{
  return a3;
}

uint64_t AGCLLVMTargetLowerer::convertRegisterMaskToMRTMask(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64_t v14;
  int v15;
  uint32x4_t v16;
  uint32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint32x4_t v21;
  int8x16_t v22;
  int8x8_t v23;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = (int8x16_t)vdupq_n_s64(a3);
  do
  {
    if (((1 << v3) & *(_DWORD *)(a2 + 32)) != 0)
    {
      v7 = 0;
      v8 = *(_DWORD *)(a2 + v4);
      v9 = ((v8 >> 12) * *(_DWORD *)(a1 + 868)) >> 1;
      switch(v8 & 0x1F)
      {
        case 2u:
        case 3u:
        case 4u:
        case 5u:
          if ((a3 & (1 << v9)) != 0)
            v7 = 3;
          else
            v7 = 0;
          v14 = 2 << v9;
          v15 = v7 | 0xC;
          goto LABEL_15;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x16u:
          v10 = vshlq_u32((uint32x4_t)xmmword_1C3E37F50, (uint32x4_t)vdupq_n_s32(v9));
          v11.i64[0] = v10.i32[2];
          v11.i64[1] = v10.i32[3];
          v12 = v11;
          v11.i64[0] = v10.i32[0];
          v11.i64[1] = v10.i32[1];
          v13 = vbicq_s8((int8x16_t)xmmword_1C3E37F50, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v11)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v12))));
          goto LABEL_10;
        case 0xAu:
        case 0xBu:
        case 0x11u:
          v16 = (uint32x4_t)vdupq_n_s32(v9);
          v17 = vshlq_u32((uint32x4_t)xmmword_1C3E37F50, v16);
          v18.i64[0] = v17.i32[2];
          v18.i64[1] = v17.i32[3];
          v19 = v18;
          v18.i64[0] = v17.i32[0];
          v18.i64[1] = v17.i32[1];
          v20 = vbicq_s8((int8x16_t)xmmword_1C3E37F60, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v18)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v19))));
          v21 = vshlq_u32((uint32x4_t)xmmword_1C3E37F70, v16);
          v18.i64[0] = v21.i32[2];
          v18.i64[1] = v21.i32[3];
          v22 = v18;
          v18.i64[0] = v21.i32[0];
          v18.i64[1] = v21.i32[1];
          v13 = vorrq_s8(vbicq_s8((int8x16_t)xmmword_1C3E37F80, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v18)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v6, v22)))), v20);
LABEL_10:
          v23 = vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
          v7 = v23.i32[0] | v23.i32[1];
          break;
        case 0x12u:
          if ((a3 & (1 << v9)) != 0)
            v7 = 3;
          else
            v7 = 0;
          v14 = 2 << v9;
          v15 = v7 | 0xE;
LABEL_15:
          if ((a3 & v14) != 0)
            v7 = v15;
          break;
        default:
          break;
      }
      v5 |= ((-1 << (v8 >> 5)) & ((int)((v7 & ~(-1 << (v8 >> 5))) >> ((v8 >> 5) - 1) << 31) >> 31) & 0xF | v7 & ~(-1 << (v8 >> 5))) << v4;
    }
    v4 += 4;
    ++v3;
  }
  while (v4 != 32);
  return v5;
}

uint64_t AGCLLVMTargetLowerer::isGammaSpaceConversionNecessary()
{
  return 1;
}

uint64_t AGCLLVMTargetLowerer::buildGammaExpansion(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  llvm::Value *v6;
  llvm::Value *InsertElement;
  uint64_t v8;
  uint64_t i;
  llvm::Value *v10;
  uint64_t Element;
  uint64_t v12;
  uint64_t Cast;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Type *v19;
  llvm::Value *FPTrunc;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  _BYTE v28[32];
  __int16 v29;
  __int128 v30;
  uint64_t v31;
  int v32;

  v30 = *(_OWORD *)a2;
  v31 = *(_QWORD *)(a2 + 16);
  if (v31)
    llvm::MetadataTracking::track();
  v32 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v30);
  if (v31)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, a3, 0, 3, 1);
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  v8 = *(unsigned int *)(*(_QWORD *)v6 + 32);
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
    {
      v29 = 257;
      v10 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v6, v10, (const llvm::Twine *)v28);
      v25 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v27 = *(_DWORD *)(a1 + 104);
      v12 = *(_QWORD *)(a1 + 192);
      v29 = 257;
      Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, Element, v12, (uint64_t)v28);
      v14 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v25, Cast, 0, *(_QWORD *)(a1 + 152));
      if (v26)
        llvm::MetadataTracking::untrack();
      v29 = 257;
      v15 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v14, v15, (const llvm::Twine *)v28);
    }
  }
  v22 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v24 = *(_DWORD *)(a1 + 104);
  v29 = 257;
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v17 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v16, (const llvm::Twine *)v28);
  v18 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 96))(a1, &v22, v17, 8, 0, 32);
  if (v23)
    llvm::MetadataTracking::untrack();
  v19 = *(llvm::Type **)(a1 + 152);
  v29 = 257;
  FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v28);
  return AGCLLVMBuilder::combineRGBA((AGCLLVMBuilder *)a1, InsertElement, FPTrunc);
}

llvm::Value *AGCLLVMTargetLowerer::buildDepthf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = a3;
  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12)
    llvm::MetadataTracking::untrack();
  v5 = *(_QWORD *)(a1 + 1504);
  if (v5)
    v6 = strlen(*(const char **)(a1 + 1504));
  else
    v6 = 0;
  v7 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v5, v6, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 168));
  v10 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v7 + 24), v7, (uint64_t)&v14, 1, (uint64_t)v9);
}

llvm::Value *AGCLLVMTargetLowerer::buildMovmsk(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  llvm::Type *v6;
  uint64_t v7;
  size_t v8;
  llvm::IRBuilderBase *v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  llvm::Value *IntCast;

  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Type *)llvm::IntegerType::get();
  v7 = *(_QWORD *)(a1 + 1512);
  if (v7)
    v8 = strlen(*(const char **)(a1 + 1512));
  else
    v8 = 0;
  v9 = (llvm::IRBuilderBase *)(a1 + 8);
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v7, v8, *(_QWORD *)(a1 + 144), (uint64_t)v6);
  v13 = 257;
  IntCast = llvm::IRBuilderBase::CreateIntCast(v9, a3, v6, 1, (const llvm::Twine *)v12);
  v13 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v9, *(_QWORD *)(v10 + 24), v10, (uint64_t)&IntCast, 1, (uint64_t)v12);
}

uint64_t AGCLLVMTargetLowerer::getDisableTriangleMerging(AGCLLVMTargetLowerer *this, int a2, unsigned int a3, BOOL a4, unsigned int a5, const unsigned __int8 *a6)
{
  int v6;

  if (a3 > 1)
    v6 = a2;
  else
    v6 = 0;
  return v6 | a5;
}

uint64_t AGCLLVMTargetLowerer::toGen2(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::toGen3(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::toGen5(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdgroupAtomicWaitNotify()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdYield()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrix16x16MultiplyAccumulate()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrixLoad()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrixStore()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSimdMatrixInit()
{
  return 0;
}

void AGCLLVMTargetLowerer::buildConvertHFP8_ParseArgTypes(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t AGCLLVMTargetLowerer::buildConvertHFP8_F2F()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildConvertHFP8_Vector()
{
  return 0;
}

void AGCLLVMTargetLowerer::exceededResourceLimits(AGCLLVMTargetLowerer *this@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  unsigned int v22;
  std::string *p_p;
  std::string::size_type size;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  char v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  unsigned int v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  const std::string::value_type *v55;
  std::string::size_type v56;
  std::string *v57;
  std::string __p;
  std::string v59;
  std::string v60;
  std::string v61;
  std::string v62;
  __int128 v63;
  uint64_t v64;
  std::string v65;

  v12 = a5 + a2;
  v13 = a6 + a3;
  v14 = a7 + a4;
  std::string::basic_string[abi:nn180100]<0>(&v65, (char *)&unk_1C3E4D9BB);
  v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 103) + 24))(*((_QWORD *)this + 103), a8);
  v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 16))(*((_QWORD *)this + 103));
  v17 = v16;
  if (v12 <= v15)
  {
    if (v14 <= 0x10 && v13 <= v16)
    {
      v31 = 0;
      goto LABEL_80;
    }
  }
  else
  {
    std::to_string(&v59, v12);
    v18 = std::string::insert(&v59, 0, " buffers (");
    v19 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v60, "/");
    v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 103) + 24))(*((_QWORD *)this + 103), a8);
    std::to_string(&__p, v22);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v25 = std::string::append(&v61, (const std::string::value_type *)p_p, size);
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v62, ")");
    v28 = v27->__r_.__value_.__r.__words[2];
    v63 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v64 = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0)
      v29 = (const std::string::value_type *)&v63;
    else
      v29 = (const std::string::value_type *)v63;
    if (v64 >= 0)
      v30 = HIBYTE(v64);
    else
      v30 = *((_QWORD *)&v63 + 1);
    std::string::append(&v65, v29, v30);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (v13 > v17)
  {
    std::to_string(&v59, v13);
    v32 = std::string::insert(&v59, 0, " textures (");
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v60, "/");
    v35 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 16))(*((_QWORD *)this + 103));
    std::to_string(&__p, v36);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &__p;
    else
      v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v38 = __p.__r_.__value_.__l.__size_;
    v39 = std::string::append(&v61, (const std::string::value_type *)v37, v38);
    v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&v62, ")");
    v42 = v41->__r_.__value_.__r.__words[2];
    v63 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v64 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0)
      v43 = (const std::string::value_type *)&v63;
    else
      v43 = (const std::string::value_type *)v63;
    if (v64 >= 0)
      v44 = HIBYTE(v64);
    else
      v44 = *((_QWORD *)&v63 + 1);
    std::string::append(&v65, v43, v44);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (v14 >= 0x11)
  {
    std::to_string(&v59, v14);
    v45 = std::string::insert(&v59, 0, " samplers (");
    v46 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&v60, "/");
    v48 = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &__p;
    else
      v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v50 = __p.__r_.__value_.__l.__size_;
    v51 = std::string::append(&v61, (const std::string::value_type *)v49, v50);
    v52 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    v53 = std::string::append(&v62, ")");
    v54 = v53->__r_.__value_.__r.__words[2];
    v63 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v64 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    if (v64 >= 0)
      v55 = (const std::string::value_type *)&v63;
    else
      v55 = (const std::string::value_type *)v63;
    if (v64 >= 0)
      v56 = HIBYTE(v64);
    else
      v56 = *((_QWORD *)&v63 + 1);
    std::string::append(&v65, v55, v56);
    if (SHIBYTE(v64) < 0)
      operator delete((void *)v63);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  v31 = 1;
LABEL_80:
  *a9 = v31;
  v57 = (std::string *)(a9 + 8);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v57, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
  }
  else
  {
    *v57 = v65;
  }
}

uint64_t AGCLLVMTargetLowerer::isValidTileSize(AGCLLVMTargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMTargetLowerer::textureBufferRequiresProtectedReadWrite(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::supportsPrimitiveID(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::supportsBarycentricCoords(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::supportsMeshShading(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::supportsHWMeshShading(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::needsShaderDepthClamp(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildBarycentricCoords(uint64_t a1, uint64_t a2, llvm::Value *a3, int a4)
{
  llvm::Value *v8;
  llvm::Value *v10;
  llvm::Value *Element;
  llvm::Value *v12;
  llvm::Value *v13;
  uint64_t v14;
  uint64_t FAdd;
  llvm::Value *FSub;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *InsertElement;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value *v22;
  _WORD v24[20];
  _BYTE v25[32];
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  int v29;

  v27 = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  if (v28)
    llvm::MetadataTracking::track();
  v29 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v27);
  if (v28)
    llvm::MetadataTracking::untrack();
  if (a4 == 3)
  {
    v26 = 257;
    v10 = (llvm::Value *)llvm::ConstantInt::get();
    Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v10, (const llvm::Twine *)v25);
    v26 = 257;
    v12 = (llvm::Value *)llvm::ConstantInt::get();
    v13 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v12, (const llvm::Twine *)v25);
    v14 = llvm::ConstantFP::get();
    v26 = 257;
    FAdd = llvm::IRBuilderBase::CreateFAdd(a1 + 8, (uint64_t)Element, (uint64_t)v13, (uint64_t)v25);
    v24[16] = 257;
    FSub = (llvm::Value *)llvm::IRBuilderBase::CreateFSub(a1 + 8, v14, FAdd, (uint64_t)v24);
    v17 = (llvm::Value *)llvm::UndefValue::get();
    v26 = 257;
    v18 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v17, Element, v18, (const llvm::Twine *)v25);
    v26 = 257;
    v20 = (llvm::Value *)llvm::ConstantInt::get();
    v21 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v13, v20, (const llvm::Twine *)v25);
    v26 = 257;
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v21, FSub, v22, (const llvm::Twine *)v25);
  }
  if (a4 != 2)
  {
    if (a4 != 1)
      return 0;
    v26 = 257;
    v8 = (llvm::Value *)llvm::ConstantInt::get();
    return llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v8, (const llvm::Twine *)v25);
  }
  return (uint64_t)a3;
}

uint64_t AGCLLVMTargetLowerer::buildTextureOOBReadSWWA(uint64_t a1, uint64_t a2, _BYTE *a3, AGCLLVMUserObject *a4, _QWORD *a5, int a6, int a7, int a8)
{
  llvm::Value *v16;
  llvm::Type **v17;
  llvm::Value *v18;
  llvm::Type *v19;
  llvm::Value *AlignedLoad;
  llvm::Value *v21;
  llvm::Type **Sub;
  llvm::CmpInst **v23;
  llvm::Type *v24;
  llvm::Type **ZExtOrTrunc;
  llvm::Value *ICmp;
  uint64_t *v27;
  llvm::Type **v28;
  llvm::Value *v29;
  llvm::Type *v30;
  llvm::Value *v31;
  _BYTE *v32;
  llvm::IRBuilderBase *v33;
  llvm::Value *v34;
  llvm::Value *Element;
  llvm::Value *v36;
  llvm::Type **v37;
  llvm::CmpInst **v38;
  llvm::Type *v39;
  llvm::Type **v40;
  llvm::Value *v41;
  llvm::CmpInst **v42;
  uint64_t v43;
  llvm::Value *v44;
  llvm::Type **v45;
  llvm::Value *v46;
  llvm::Type *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Type **v50;
  llvm::CmpInst **v51;
  llvm::Type *v52;
  llvm::Type **v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  llvm::Value *Select;
  llvm::Value *v59;
  uint64_t result;
  _BYTE v61[32];
  __int16 v62;
  _BYTE v63[32];
  __int16 v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  _BYTE v68[32];
  __int16 v69;

  v65 = *(_OWORD *)a2;
  v66 = *(_QWORD *)(a2 + 16);
  if (v66)
    llvm::MetadataTracking::track();
  v67 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v65);
  if (v66)
    llvm::MetadataTracking::untrack();
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  if (a5[21])
  {
    v17 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(a3, a4, 5u);
    v69 = 257;
    v19 = AGCLLVMBuilder::tryDeducePointeeType(v17, v18);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v19, (uint64_t)v17, 0, (uint64_t)v68);
    v21 = (llvm::Value *)llvm::ConstantInt::get();
    v64 = 257;
    Sub = (llvm::Type **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v21, (const llvm::Twine *)v63);
    v23 = (llvm::CmpInst **)a5[21];
    v24 = *v23;
    v69 = 257;
    ZExtOrTrunc = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)(a1 + 8), Sub, v24, (const llvm::Twine *)v68);
    v64 = 257;
    ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v23, (uint64_t)ZExtOrTrunc, (uint64_t)v63);
    v62 = 257;
    v16 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v16, ICmp, (const llvm::Twine *)v61);
  }
  if (a6)
  {
    v27 = (uint64_t *)&a3[*(_QWORD *)(*(_QWORD *)a3 - 24)];
    v28 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(a3, a4, 2u);
    v69 = 257;
    v30 = AGCLLVMBuilder::tryDeducePointeeType(v28, v29);
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v27 + 5, v30, (uint64_t)v28, 0, (uint64_t)v68);
    v32 = &a3[*(_QWORD *)(*(_QWORD *)a3 - 24)];
    v69 = 257;
    v33 = (llvm::IRBuilderBase *)(v32 + 40);
    v34 = (llvm::Value *)llvm::ConstantInt::get();
    Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v33, v31, v34, (const llvm::Twine *)v68);
    v36 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v37 = (llvm::Type **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), Element, v36, (const llvm::Twine *)v68);
    v38 = (llvm::CmpInst **)a5[19];
    v39 = *v38;
    v69 = 257;
    v40 = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)(a1 + 8), v37, v39, (const llvm::Twine *)v68);
    v64 = 257;
    v41 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v38, (uint64_t)v40, (uint64_t)v63);
    v62 = 257;
    v16 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v16, v41, (const llvm::Twine *)v61);
  }
  if (a7)
  {
    v42 = (llvm::CmpInst **)a5[29];
    v43 = llvm::ConstantInt::get();
    v69 = 257;
    v44 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v42, v43, (uint64_t)v68);
    v64 = 257;
    v16 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v16, v44, (const llvm::Twine *)v63);
  }
  if (a8)
  {
    v45 = (llvm::Type **)AGCLLVMUserObject::buildImageArgumentPointer(a3, a4, 6u);
    v69 = 257;
    v47 = AGCLLVMBuilder::tryDeducePointeeType(v45, v46);
    v48 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v47, (uint64_t)v45, 0, (uint64_t)v68);
    v49 = (llvm::Value *)llvm::ConstantInt::get();
    v64 = 257;
    v50 = (llvm::Type **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v48, v49, (const llvm::Twine *)v63);
    v51 = (llvm::CmpInst **)a5[27];
    v52 = *v51;
    v69 = 257;
    v53 = llvm::IRBuilderBase::CreateZExtOrTrunc((llvm::IRBuilderBase *)(a1 + 8), v50, v52, (const llvm::Twine *)v68);
    v64 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v51, (uint64_t)v53, (uint64_t)v63);
    v62 = 257;
    llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v16, v54, (const llvm::Twine *)v61);
  }
  v55 = (llvm::Value *)a5[17];
  if ((*(_DWORD *)(*(_QWORD *)v55 + 8) & 0xFE) == 0x12)
  {
    v69 = 257;
    v56 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v68);
    v57 = (llvm::Value *)a5[17];
    llvm::ConstantInt::get();
    v69 = 257;
    Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    v64 = 257;
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    result = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v57, Select, v59, (const llvm::Twine *)v63);
  }
  else
  {
    llvm::ConstantInt::get();
    v69 = 257;
    result = llvm::IRBuilderBase::CreateSelect();
  }
  a5[17] = result;
  return result;
}

uint64_t AGCLLVMTargetLowerer::maxImageDimLog2(AGCLLVMTargetLowerer *this)
{
  return 14;
}

void AGCLLVMTargetLowerer::createGPUVAMasks(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectionShaderArgument()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getVRIDAndCoreID(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getVRIDAllocation(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getRayTraversalDepth(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildProgramType()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSCSGlobalBindingTablePointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSCSPerEncoderIndirectionTablePointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSCSGOTPointer()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSCSConfiguration@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v5 = (_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
  {
    result = llvm::MetadataTracking::retrack();
    *v5 = 0;
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectRay()
{
  return 0;
}

double AGCLLVMTargetLowerer::buildIntersectRayWithResults@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectRayForDirectAccess()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectionResultAccessor()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildAllocateIntersectionQuery()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildNextIntersectionQuery()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildIntersectionQueryAccessor()
{
  return 0;
}

double AGCLLVMTargetLowerer::buildTriangleIntersectionTest@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double AGCLLVMTargetLowerer::buildBoundingBoxIntersectionTest@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double AGCLLVMTargetLowerer::buildCurveIntersectionTest@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t AGCLLVMTargetLowerer::commitIntersectionTestParallel()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::commitIntersectionTestSerial()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildRayHasTerminated()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildRayRunThisThread()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildRayHasMoreResults()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildRayDriverTestHit()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::computeDriverPayloadSizeAndUserPayloadSize(AGCLLVMTargetLowerer *this)
{
  return 0;
}

_QWORD *AGCLLVMTargetLowerer::getIntersectionMainFunctionName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, (char *)&unk_1C3E4D9BB);
}

double AGCLLVMTargetLowerer::createShaderCoreBindings@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t AGCLLVMTargetLowerer::createDriverParameterShaderCoreBinding()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildGetSizeIntersectionFunctionTable()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildGetBufferIntersectionFunctionTable()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSetBufferIntersectionFunctionTable()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildSCSDoneRayTraceSCSFlagRead()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildGlobalBindingOffsetIntrinsic()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getRaytracingShaderType(AGCLLVMTargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::getPayloadVariant(AGCLLVMTargetLowerer *this)
{
  return 0;
}

void AGCLLVMTargetLowerer::analyseIntersectionQueryUsage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

llvm::Value *AGCLLVMTargetLowerer::buildUnpackNorm8(AGCLLVMTargetLowerer *this, llvm::Value *a2, llvm::Function *a3)
{
  uint64_t v5;
  llvm::Value *v6;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v9;
  llvm::Value *v10;
  _BYTE v12[32];
  __int16 v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12)
  {
    v6 = AGCLLVMBuilder::extendVector(this, a2, 4);
    goto LABEL_8;
  }
  v5 = *(unsigned int *)(*(_QWORD *)a2 + 32);
  v6 = AGCLLVMBuilder::extendVector(this, a2, 4);
  if ((_DWORD)v5 == 1)
  {
LABEL_8:
    v14 = v6;
    v15 = llvm::ConstantInt::get();
    v13 = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((_QWORD *)a3 + 3), (uint64_t)a3, (uint64_t)&v14, 2, (uint64_t)v12);
  }
  llvm::FixedVectorType::get();
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v14 = v6;
      v15 = 0;
      v15 = llvm::ConstantInt::get();
      v13 = 257;
      v9 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((_QWORD *)a3 + 3), (uint64_t)a3, (uint64_t)&v14, 2, (uint64_t)v12);
      v13 = 257;
      v10 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMTargetLowerer *)((char *)this + 8), InsertElement, v9, v10, (const llvm::Twine *)v12);
    }
  }
  return InsertElement;
}

llvm::Value *AGCLLVMTargetLowerer::buildUnpackNorm16(AGCLLVMTargetLowerer *this, llvm::Value *a2, llvm::Function *a3)
{
  uint64_t v6;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v10;
  llvm::Value *Element;
  llvm::Value *v12;
  llvm::Value *v13;
  _BYTE v14[32];
  __int16 v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12
    && (v6 = *(unsigned int *)(*(_QWORD *)a2 + 32), (_DWORD)v6 != 1))
  {
    llvm::FixedVectorType::get();
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v15 = 257;
        v10 = (llvm::Value *)llvm::ConstantInt::get();
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMTargetLowerer *)((char *)this + 8), a2, v10, (const llvm::Twine *)v14);
        v16 = AGCLLVMBuilder::extendVector(this, Element, 2);
        v17 = 0;
        v17 = llvm::ConstantInt::get();
        v15 = 257;
        v12 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((_QWORD *)a3 + 3), (uint64_t)a3, (uint64_t)&v16, 2, (uint64_t)v14);
        v15 = 257;
        v13 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMTargetLowerer *)((char *)this + 8), InsertElement, v12, v13, (const llvm::Twine *)v14);
      }
    }
  }
  else
  {
    v16 = AGCLLVMBuilder::extendVector(this, a2, 2);
    v17 = llvm::ConstantInt::get();
    v15 = 257;
    return llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *((_QWORD *)a3 + 3), (uint64_t)a3, (uint64_t)&v16, 2, (uint64_t)v14);
  }
  return InsertElement;
}

uint64_t AGCLLVMTargetLowerer::buildUnpackToFloat(AGCLLVMTargetLowerer *this, llvm::Value *a2, int a3, int a4, int a5, int a6)
{
  llvm::IRBuilderBase *v12;
  llvm::Value *v13;
  llvm::Type **LShr;
  llvm::Type *v15;
  llvm::Value *IntCast;
  llvm::Value *v17;
  llvm::Value *Shl;
  llvm::Value *v19;
  llvm::CmpInst **AShr;
  llvm::Value *v21;
  llvm::Type *v22;
  uint64_t SIToFP;
  llvm::Value *v24;
  llvm::Type *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[32];
  __int16 v30;

  v12 = (AGCLLVMTargetLowerer *)((char *)this + 8);
  v30 = 257;
  v13 = (llvm::Value *)llvm::ConstantInt::get();
  LShr = (llvm::Type **)llvm::IRBuilderBase::CreateLShr(v12, a2, v13, (const llvm::Twine *)v29);
  v15 = (llvm::Type *)*((_QWORD *)this + 24);
  v30 = 257;
  IntCast = llvm::IRBuilderBase::CreateIntCast(v12, LShr, v15, 0, (const llvm::Twine *)v29);
  if (a6)
  {
    v30 = 257;
    v17 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v12, IntCast, v17, (const llvm::Twine *)v29);
    v30 = 257;
    v19 = (llvm::Value *)llvm::ConstantInt::get();
    AShr = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAShr(v12, Shl, v19, (const llvm::Twine *)v29);
    if (a5)
    {
      v21 = (llvm::Value *)llvm::ConstantInt::get();
      AShr = (llvm::CmpInst **)AGCLLVMBuilder::buildICmpSel(this, AShr, v21, 38);
    }
    v22 = (llvm::Type *)*((_QWORD *)this + 21);
    v30 = 257;
    SIToFP = llvm::IRBuilderBase::CreateSIToFP(v12, (llvm::Value *)AShr, v22, (const llvm::Twine *)v29);
  }
  else
  {
    if ((a4 + a3) <= 0x1F)
    {
      v30 = 257;
      v24 = (llvm::Value *)llvm::ConstantInt::get();
      IntCast = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v12, IntCast, v24, (const llvm::Twine *)v29);
    }
    v25 = (llvm::Type *)*((_QWORD *)this + 21);
    v30 = 257;
    SIToFP = llvm::IRBuilderBase::CreateUIToFP(v12, IntCast, v25, (const llvm::Twine *)v29);
  }
  v26 = SIToFP;
  if (a5)
  {
    v27 = llvm::ConstantFP::get();
    v30 = 257;
    return llvm::IRBuilderBase::CreateFMul((uint64_t)v12, v26, v27, (uint64_t)v29);
  }
  return v26;
}

uint64_t AGCLLVMTargetLowerer::buildPackFromFloat(AGCLLVMTargetLowerer *this, llvm::Value *a2, int a3, int a4, BOOL a5, int a6)
{
  llvm::Value *v10;
  llvm::IRBuilderBase *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  uint64_t FMul;

  v10 = AGCLLVMBuilder::f32Extend(this, a2, 1);
  v11 = (AGCLLVMTargetLowerer *)((char *)this + 8);
  v25 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMTargetLowerer *)((char *)this + 8));
  v27 = *((_DWORD *)this + 26);
  v12 = llvm::ConstantFP::get();
  v13 = llvm::ConstantFP::get();
  v14 = (*(uint64_t (**)(AGCLLVMTargetLowerer *, __int128 *, llvm::Value *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 80))(this, &v25, v10, v12, v13, 0);
  if (v26)
    llvm::MetadataTracking::untrack();
  v15 = llvm::ConstantFP::get();
  v24 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul((uint64_t)this + 8, v14, v15, (uint64_t)v23);
  v16 = *((_QWORD *)this + 160);
  if (v16)
    v17 = strlen(*((const char **)this + 160));
  else
    v17 = 0;
  v18 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)this, v16, v17, *((_QWORD *)this + 25), *((_QWORD *)this + 21));
  v24 = 257;
  v19 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, **(_QWORD **)(*(_QWORD *)v18 + 16), v18, (uint64_t)&FMul, 1, (uint64_t)v23);
  if ((a4 + a3) <= 0x1F && a6)
  {
    v24 = 257;
    v20 = (llvm::Value *)llvm::ConstantInt::get();
    v19 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v11, v19, v20, (const llvm::Twine *)v23);
  }
  v24 = 257;
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateShl(v11, v19, v21, (const llvm::Twine *)v23);
}

llvm::Value *AGCLLVMTargetLowerer::buildPackUIntTo1010102(llvm::Type **this, llvm::Value *a2)
{
  llvm::Value *v4;
  uint64_t v5;
  uint64_t i;
  llvm::Value *v7;
  llvm::CmpInst **Element;
  unsigned int v9;
  llvm::Type **v10;
  llvm::Type *v11;
  llvm::Value *IntCast;
  llvm::Value *v13;
  llvm::Value *Shl;
  llvm::Value *result;
  _BYTE v16[32];
  __int16 v17;

  v4 = (llvm::Value *)llvm::ConstantInt::get();
  v5 = 0;
  for (i = 0; i != 4; ++i)
  {
    v17 = 257;
    v7 = (llvm::Value *)llvm::ConstantInt::get();
    Element = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(this + 1), a2, v7, (const llvm::Twine *)v16);
    if (i == 3)
      v9 = 2;
    else
      v9 = 10;
    v10 = (llvm::Type **)AGCLLVMBuilder::clampToWidth((AGCLLVMBuilder *)this, Element, v9, 0);
    v11 = this[25];
    v17 = 257;
    IntCast = llvm::IRBuilderBase::CreateIntCast((llvm::IRBuilderBase *)(this + 1), v10, v11, 0, (const llvm::Twine *)v16);
    v17 = 257;
    v13 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(this + 1), IntCast, v13, (const llvm::Twine *)v16);
    v17 = 257;
    result = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(this + 1), v4, Shl, (const llvm::Twine *)v16);
    v4 = result;
    v5 += 10;
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildUnpack1010102(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;

  if (a4 == 3)
    v5 = 4;
  else
    v5 = 5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1464))(a1, v5, a3, a2);
}

uint64_t AGCLLVMTargetLowerer::buildPack1010102(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*a1 + 1456))(a1, 5, a1[25], a2, a3, a4);
}

llvm::Value *AGCLLVMTargetLowerer::buildPackFloatFormat(llvm::Type **a1, unsigned int a2, llvm::Type *a3, llvm::Value *a4, uint64_t a5, uint64_t a6)
{
  llvm::Value *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t Element;
  llvm::Value *v17;
  _BYTE v20[32];
  __int16 v21;

  v11 = (llvm::Value *)llvm::ConstantInt::get();
  v12 = (char *)&formats + 9 * a2;
  v13 = *v12;
  if (*v12)
  {
    v14 = 0;
    do
    {
      v21 = 257;
      v15 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), a4, v15, (const llvm::Twine *)v20);
      v17 = (llvm::Value *)(*((uint64_t (**)(llvm::Type **, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))*a1
                            + 178))(a1, Element, v12[v14 + 1], v12[v14 + 5], a5, a6);
      v21 = 257;
      v11 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v11, v17, (const llvm::Twine *)v20);
      ++v14;
    }
    while (v13 != v14);
  }
  return AGCLLVMBuilder::truncateToSmall(a1, v11, a3);
}

llvm::Value *AGCLLVMTargetLowerer::buildUnpackFloatFormat(llvm::Type **a1, unsigned int a2, llvm::Type *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned __int8 *v11;
  uint64_t v12;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v15;
  llvm::Value *v16;
  unsigned __int8 *v17;
  llvm::Type *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  _BYTE v26[32];
  __int16 v27;

  v11 = (unsigned __int8 *)&formats + 9 * a2;
  v12 = *v11;
  llvm::FixedVectorType::get();
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  if ((_DWORD)v12)
  {
    for (i = 0; i != v12; ++i)
    {
      v15 = (llvm::Value *)(*((uint64_t (**)(llvm::Type **, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))*a1
                            + 177))(a1, a4, v11[i + 5], v11[i + 1], a5, a6);
      v16 = AGCLLVMBuilder::truncateToSmall(a1, v15, a3);
      v17 = v11;
      v18 = a3;
      v19 = a4;
      v20 = a5;
      v21 = a6;
      v22 = v16;
      v27 = 257;
      v23 = (llvm::Value *)llvm::ConstantInt::get();
      v24 = v22;
      a6 = v21;
      a5 = v20;
      a4 = v19;
      a3 = v18;
      v11 = v17;
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v24, v23, (const llvm::Twine *)v26);
    }
  }
  return InsertElement;
}

uint64_t AGCLLVMTargetLowerer::buildUnpack111110()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildPack111110()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildUnpack9995()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildPack9995()
{
  return 0;
}

uint64_t AGCLLVMTargetLowerer::buildFClamp(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_0::operator()(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::APFloatBase *v13;
  uint64_t v14;
  int isExactlyValue;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  char v28;
  _BYTE v29[24];
  _QWORD v30[4];

  v30[3] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a1;
  if (*(_BYTE *)(a4 + 16) == 17)
    v9 = a4;
  else
    v9 = 0;
  if (!a3 || *(_BYTE *)(a3 + 16) != 17)
    goto LABEL_16;
  v10 = *(_QWORD *)(a3 + 32);
  v11 = llvm::APFloatBase::PPCDoubleDouble((llvm::APFloatBase *)a1) == v10 ? *(_QWORD *)(a3 + 40) : a3 + 24;
  if ((*(_BYTE *)(v11 + 28) & 7) != 3 || v9 == 0)
    goto LABEL_16;
  v28 = 0;
  v13 = (llvm::APFloatBase *)llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v29, 1.0);
  v14 = llvm::APFloatBase::IEEEdouble(v13);
  MEMORY[0x1CAA2CCE4](v30, v29, v14);
  llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)v29);
  llvm::APFloat::convert();
  isExactlyValue = llvm::ConstantFP::isExactlyValue();
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v30);
  if (isExactlyValue)
  {
    v25 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 8));
    v27 = *(_DWORD *)(v8 + 104);
    v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, &v25, a2, a1[40]);
    if (v26)
LABEL_19:
      llvm::MetadataTracking::untrack();
  }
  else
  {
LABEL_16:
    v22 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 8));
    v24 = *(_DWORD *)(v8 + 104);
    v17 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 56))(v8, &v22, a2, a3, a1[40]);
    if (v23)
      llvm::MetadataTracking::untrack();
    v19 = *(_OWORD *)(v8 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v8 + 8));
    v21 = *(_DWORD *)(v8 + 104);
    v16 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, &v19, v17, a4, a1[40]);
    if (v20)
      goto LABEL_19;
  }
  return v16;
}

llvm::Value *AGCLLVMTargetLowerer::flushNaN(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8;
  const std::string::value_type *v9;
  std::string *v10;
  std::string::size_type size;
  llvm::Function *v12;
  llvm::Value *v13;
  std::string v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  std::string::basic_string[abi:nn180100]<0>(&v15, *(char **)(a1 + 1832));
  v8 = *(_QWORD *)a3;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
    v8 = **(_QWORD **)(v8 + 16);
  if (v8 == *(_QWORD *)(a1 + 152))
    v9 = ".f16";
  else
    v9 = ".f32";
  std::string::append(&v15, v9);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v15;
  else
    v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v12 = (llvm::Function *)AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)v10, size, v8, v8, v8);
  v13 = AGCLLVMBuilder::map2((AGCLLVMBuilder *)a1, v12, a3, a4);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

uint64_t AGCLLVMTargetLowerer::buildFCmpSel(AGCLLVMBuilder *a1, uint64_t a2, uint64_t a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  if (*(_QWORD *)a3 != *(_QWORD *)a4)
    AGCLLVMBuilder::splat(a1, *(_DWORD *)(*(_QWORD *)a3 + 32), a4);
  llvm::IRBuilderBase::CreateFCmpHelper();
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t *std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm *v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 12))
    {
      v3 = *(unsigned int *)(v2 + 8);
      if ((_DWORD)v3)
      {
        v4 = 0;
        v5 = 8 * v3;
        do
        {
          v6 = *(llvm **)(*(_QWORD *)v2 + v4);
          if (v6 != (llvm *)-8 && v6 != 0)
            llvm::deallocate_buffer(v6, (void *)(*(_QWORD *)v6 + 41));
          v4 += 8;
        }
        while (v5 != v4);
      }
    }
    free(*(void **)v2);
    JUMPOUT(0x1CAA2D68CLL);
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::remapGradients(uint64_t result, uint64_t a2, llvm::Value *a3, llvm::Value *a4, unsigned int a5)
{
  uint64_t v8;
  llvm::IRBuilderBase *v9;
  uint64_t v10;
  llvm::Value *v11;
  uint64_t ShuffleVector;
  _WORD v13[20];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v8 = 0;
    v9 = (llvm::IRBuilderBase *)(result + 8);
    v10 = a5;
    do
    {
      v14 = 0;
      v15 = 0;
      v14 = llvm::ConstantInt::get();
      v15 = llvm::ConstantInt::get();
      v11 = (llvm::Value *)llvm::ConstantVector::get();
      v13[16] = 257;
      ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector(v9, a3, a4, v11, (const llvm::Twine *)v13);
      result = llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(a2, ShuffleVector);
      ++v8;
    }
    while (v10 != v8);
  }
  return result;
}

uint64_t AGCLLVMTargetLowerer::buildBiasF2IVarying(uint64_t a1, uint64_t a2, llvm *a3)
{
  const char *v6;
  const char *Value;
  const char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  BOOL v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  BOOL v23;
  unsigned int v24;
  int v25;
  llvm *v26;
  uint64_t v27;
  int v28;
  _DWORD *v29;
  BOOL v30;
  uint64_t v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  llvm *v36;
  uint64_t v37;
  int v38;
  _DWORD *v39;
  BOOL v40;
  uint64_t v41;
  llvm *v42;
  uint64_t v43;
  int v44;
  _DWORD *v45;
  BOOL v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  llvm *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  llvm *v60;
  uint64_t v61;
  int v62;
  _DWORD *v63;
  BOOL v64;
  uint64_t v65;
  llvm *v66;
  uint64_t v67;
  int v68;
  _DWORD *v69;
  BOOL v70;
  uint64_t v71;
  llvm *v72;
  uint64_t v73;
  llvm *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  llvm::Value *v81;
  BOOL v82;
  _QWORD *Name;
  unint64_t v84;
  _BOOL4 v85;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  llvm *v95;
  uint64_t v96;
  _DWORD *v97;
  llvm *__src;
  uint64_t v99;
  unsigned int v100;
  void *v101;
  uint64_t v102;
  _WORD v103[80];
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  if ((!MGGetBoolAnswer()
     || (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_BIAS_F2I_VARYING", v6)) == 0
     || *Value == 48
     || !atoi(Value))
    && (MGGetBoolAnswer() && AGCEnv::getValue((AGCEnv *)"AGC_BIAS_F2I_VARYING", v8)
     || !*(_BYTE *)(a1 + 808)
     || *(_BYTE *)(a1 + 1776)))
  {
    return (uint64_t)a3;
  }
  v89 = a2;
  v90 = a1;
  v95 = a3;
  v91 = (uint64_t)a3;
  __src = a3;
  v99 = 0xFFFFFFFFLL;
  v101 = v103;
  v102 = 0xA00000000;
  llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::append<std::tuple<llvm::Value *,int> const*,void>((uint64_t)&v101, &__src, &v100);
  __src = 0;
  v99 = 0;
  v100 = 0;
  v9 = (uint64_t *)&v95;
LABEL_10:
  *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, v9)+ 8) = 255;
  while ((_DWORD)v102)
  {
    v10 = (char *)v101 + 16 * v102;
    v11 = *((_QWORD *)v10 - 2);
    v12 = *((_QWORD *)v10 - 1);
    LODWORD(v102) = v102 - 1;
    v13 = *(unsigned __int8 *)(v11 + 16);
    if (v11)
      v14 = v13 >= 0x15;
    else
      v14 = 1;
    if (v14)
    {
      if (v11)
        v15 = v13 >= 0x1C;
      else
        v15 = 0;
      if (!v15)
        break;
      v16 = *(unsigned __int8 *)(v11 + 16);
      if ((v16 - 59) > 0xFFFFFFED || v16 == 85 || v16 == 83)
      {
        v17 = *(_DWORD *)(v11 + 20);
        v18 = v17 & 0x7FFFFFF;
        if ((v17 & 0x7FFFFFF) != 0)
        {
          v19 = 0;
          v20 = 0;
          do
          {
            if ((v17 & 0x40000000) != 0)
              v21 = *(_QWORD *)(v11 - 8);
            else
              v21 = v11 - 32 * v18;
            v22 = *(_BYTE **)(v21 + v19);
            if (v22)
              v23 = v22[16] == 22;
            else
              v23 = 0;
            if (!v23)
            {
              if ((*(_DWORD *)(*(_QWORD *)v22 + 8) & 0xFE) == 0x12)
                v24 = v12;
              else
                v24 = -1;
              v96 = *(_QWORD *)(v21 + v19);
              v97 = 0;
              if (v24 == -1)
                v25 = 255;
              else
                v25 = 1 << v24;
              v26 = __src;
              v27 = v100;
              v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v100, (uint64_t)v22, &v97);
              v29 = v97;
              if (v28)
                v30 = v97 == (_DWORD *)((char *)v26 + 16 * v27);
              else
                v30 = 1;
              if (v30)
              {
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, (uint64_t)v22, v24);
                *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, &v96)+ 8) = v25;
              }
              else if ((v25 & ~v97[2]) != 0)
              {
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, (uint64_t)v22, v24);
                v29[2] |= v25;
              }
              v17 = *(_DWORD *)(v11 + 20);
            }
            ++v20;
            v18 = v17 & 0x7FFFFFF;
            v19 += 32;
          }
          while (v20 < v18);
        }
      }
      else if ((v16 - 79) >= 0xFFFFFFF3)
      {
        v34 = *(_QWORD *)(v11 - 32);
        if ((*(_DWORD *)(*(_QWORD *)v34 + 8) & 0xFE) == 0x12)
        {
          if ((_DWORD)v12 == -1)
            goto LABEL_77;
          if ((*(_DWORD *)(*(_QWORD *)v11 + 8) & 0xFE) != 0x12
            || *(_DWORD *)(*(_QWORD *)v34 + 32) != *(_DWORD *)(*(_QWORD *)v11 + 32))
          {
            goto LABEL_70;
          }
          v96 = *(_QWORD *)(v11 - 32);
          v35 = 1 << v12;
LABEL_78:
          v97 = 0;
          v42 = __src;
          v43 = v100;
          v44 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v100, v34, &v97);
          v45 = v97;
          if (v44)
            v46 = v97 == (_DWORD *)((char *)v42 + 16 * v43);
          else
            v46 = 1;
          if (v46)
          {
LABEL_83:
            v47 = v34;
            v48 = v12;
LABEL_84:
            llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, v47, v48);
            *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, &v96)+ 8) = v35;
          }
          else
          {
LABEL_128:
            if ((v35 & ~v45[2]) != 0)
            {
              v57 = v34;
              v58 = v12;
LABEL_130:
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, v57, v58);
              v45[2] |= v35;
            }
          }
        }
        else
        {
          if ((_DWORD)v12 == -1)
          {
LABEL_77:
            v96 = *(_QWORD *)(v11 - 32);
            v35 = 255;
            goto LABEL_78;
          }
LABEL_70:
          v96 = *(_QWORD *)(v11 - 32);
          v97 = 0;
          v36 = __src;
          v37 = v100;
          v38 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v100, v34, &v97);
          v39 = v97;
          if (v38)
            v40 = v97 == (_DWORD *)((char *)v36 + 16 * v37);
          else
            v40 = 1;
          if (v40)
          {
            v77 = v34;
LABEL_139:
            llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, v77, 0xFFFFFFFF);
            v9 = &v96;
            goto LABEL_10;
          }
          if (*((unsigned __int8 *)v97 + 8) != 0xFF)
          {
            v41 = v34;
            goto LABEL_76;
          }
        }
      }
      else
      {
        switch(*(_BYTE *)(v11 + 16))
        {
          case 'T':
            v78 = *(_DWORD *)(v11 + 20) & 0x7FFFFFF;
            if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 0)
              goto LABEL_160;
            v79 = 1;
            v80 = v11;
            do
            {
              v81 = *(llvm::Value **)(v80 - 32 * v78);
              if (v81)
                v82 = *((_BYTE *)v81 + 16) == 3;
              else
                v82 = 0;
              v85 = v82
                 && (Name = (_QWORD *)llvm::Value::getName(v81), v84 >= 0xF)
                 && *Name == 0x66656F632E636761
                 && *(_QWORD *)((char *)Name + 7) == 0x746E656963696666;
              v78 = *(_DWORD *)(v11 + 20) & 0x7FFFFFF;
              if (v79 >= v78)
                break;
              ++v79;
              v80 += 32;
            }
            while (!v85);
            goto LABEL_161;
          case 'Y':
            v31 = *(_QWORD *)(v11 - 32);
            if (v31)
              v32 = *(_BYTE *)(v31 + 16) == 16;
            else
              v32 = 0;
            if (v32)
            {
              v33 = (_QWORD *)(v31 + 24);
              if (*(_DWORD *)(v31 + 32) >= 0x41u)
                v33 = (_QWORD *)*v33;
              LODWORD(v12) = *(_DWORD *)v33;
            }
            v34 = *(_QWORD *)(v11 - 64);
            v96 = v34;
            if ((_DWORD)v12 == -1)
              v35 = 255;
            else
              v35 = 1 << v12;
            goto LABEL_78;
          case 'Z':
            v49 = *(_QWORD *)(v11 - 32);
            if (*(_BYTE *)(v49 + 16) != 16)
              v49 = 0;
            if ((_DWORD)v12 == -1 || !v49)
            {
              v59 = *(_QWORD *)(v11 - 64);
              v96 = v59;
              v97 = 0;
              v60 = __src;
              v61 = v100;
              v62 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v100, v59, &v97);
              v63 = v97;
              if (v62)
                v64 = v97 == (_DWORD *)((char *)v60 + 16 * v61);
              else
                v64 = 1;
              if (v64)
              {
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, v59, 0xFFFFFFFF);
                *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, &v96)+ 8) = 255;
              }
              else if (*((unsigned __int8 *)v97 + 8) != 0xFF)
              {
                llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, v59, 0xFFFFFFFF);
                v63[2] |= 0xFFu;
              }
            }
            else
            {
              if (*(_DWORD *)(v49 + 32) >= 0x41u)
                v50 = **(_QWORD **)(v49 + 24);
              else
                v50 = *(_QWORD *)(v49 + 24);
              if (v50 == (int)v12)
              {
                v71 = *(_QWORD *)(v11 - 64);
                v96 = v71;
                v97 = 0;
                v72 = __src;
                v73 = v100;
                if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v100, v71, &v97)|| (v39 = v97, v97 == (_DWORD *)((char *)v72 + 16 * v73)))
                {
                  v77 = v71;
                  goto LABEL_139;
                }
                if (*((unsigned __int8 *)v97 + 8) == 0xFF)
                  continue;
                v41 = v71;
                break;
              }
            }
            v34 = *(_QWORD *)(v11 - 96);
            v96 = v34;
            v97 = 0;
            if ((_DWORD)v12 == -1)
              v35 = 255;
            else
              v35 = 1 << v12;
            v74 = __src;
            v75 = v100;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v100, v34, &v97))goto LABEL_83;
            v45 = v97;
            if (v97 == (_DWORD *)((char *)v74 + 16 * v75))
              goto LABEL_83;
            goto LABEL_128;
          case '[':
            if ((_DWORD)v12 != -1)
            {
              v51 = *(_DWORD *)(*(_QWORD *)(v11 + 64) + 4 * v12);
              if (v51 == -1)
                continue;
              v52 = *(_QWORD *)(v11 - 64);
              v53 = *(_DWORD *)(*(_QWORD *)v52 + 32);
              v14 = v51 >= v53;
              v54 = v51 - v53;
              if (v14)
              {
                v52 = *(_QWORD *)(v11 - 32);
                v51 = v54;
              }
              v96 = v52;
              v97 = 0;
              if (v51 == -1)
                v35 = 255;
              else
                v35 = 1 << v51;
              v55 = __src;
              v56 = v100;
              if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v100, v52, &v97)|| (v45 = v97, v97 == (_DWORD *)((char *)v55 + 16 * v56)))
              {
                v47 = v52;
                v48 = v51;
                goto LABEL_84;
              }
              if ((v35 & ~v97[2]) == 0)
                continue;
              v57 = v52;
              v58 = v51;
              goto LABEL_130;
            }
            v65 = *(_QWORD *)(v11 - 64);
            v96 = v65;
            v97 = 0;
            v66 = __src;
            v67 = v100;
            v68 = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)__src, v100, v65, &v97);
            v69 = v97;
            if (v68)
              v70 = v97 == (_DWORD *)((char *)v66 + 16 * v67);
            else
              v70 = 1;
            if (v70)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, v65, 0xFFFFFFFF);
              *(_DWORD *)(llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::FindAndConstruct((uint64_t)&__src, &v96)+ 8) = 255;
              v66 = __src;
              v67 = v100;
            }
            else if (*((unsigned __int8 *)v97 + 8) != 0xFF)
            {
              llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, v65, 0xFFFFFFFF);
              v69[2] |= 0xFFu;
            }
            v76 = *(_QWORD *)(v11 - 32);
            v96 = v76;
            v97 = 0;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>,llvm::Value *,int,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,int>>::LookupBucketFor<llvm::Value const*>((uint64_t)v66, v67, v76, &v97)|| (v39 = v97, v97 == (_DWORD *)((char *)v66 + 16 * v67)))
            {
              v77 = v76;
              goto LABEL_139;
            }
            if (*((unsigned __int8 *)v97 + 8) == 0xFF)
              continue;
            v41 = v76;
            break;
          default:
            continue;
        }
LABEL_76:
        llvm::SmallVectorImpl<std::tuple<llvm::Value *,int>>::emplace_back<llvm::Value *&,int &>((uint64_t)&v101, v41, 0xFFFFFFFF);
        v39[2] |= 0xFFu;
      }
    }
  }
LABEL_160:
  v85 = 0;
LABEL_161:
  llvm::deallocate_buffer(__src, (void *)(16 * v100));
  if (v101 != v103)
    free(v101);
  a3 = (llvm *)v91;
  if (v85)
  {
    v92 = *(_OWORD *)v89;
    v93 = *(_QWORD *)(v89 + 16);
    if (v93)
      llvm::MetadataTracking::track();
    v94 = *(_DWORD *)(v89 + 24);
    AGCLLVMTargetLowerer::SetIP(v90, &v92);
    if (v93)
      llvm::MetadataTracking::untrack();
    v87 = llvm::ConstantFP::get();
    v103[8] = 257;
    return llvm::IRBuilderBase::CreateFAdd(v90 + 8, v91, v87, (uint64_t)&v101);
  }
  return (uint64_t)a3;
}

uint64_t AGCLLVMTargetLowerer::buildRTZF16Value(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  llvm::Type *v8;
  uint64_t v9;
  llvm::IRBuilderBase *v10;
  llvm::Value *Cast;
  llvm::Value *v12;
  llvm::CmpInst **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::Value *LShr;
  llvm::Value *v24;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  llvm::Value *v28;
  llvm::Value *v29;
  llvm::Value *Sub;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Value *v35;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  _BYTE v44[32];
  __int16 v45;
  __int128 v46;
  uint64_t v47;
  int v48;

  v46 = *(_OWORD *)a2;
  v47 = *(_QWORD *)(a2 + 16);
  if (v47)
    llvm::MetadataTracking::track();
  v48 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v46);
  if (v47)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)*a3;
  if ((*(_DWORD *)(*a3 + 8) & 0xFE) == 0x12)
    v9 = llvm::FixedVectorType::get();
  else
    v9 = *(_QWORD *)(a1 + 200);
  v10 = (llvm::IRBuilderBase *)(a1 + 8);
  v45 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a3, v9, (uint64_t)v44);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v45 = 257;
  v13 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), Cast, v12, (const llvm::Twine *)v44);
  v14 = llvm::ConstantInt::get();
  v45 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v13, v14, (uint64_t)v44);
  v15 = llvm::ConstantFP::get();
  v16 = llvm::ConstantFP::get();
  v41 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v43 = *(_DWORD *)(a1 + 104);
  v17 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, &v41, a3, v15, v16, 0);
  if (v42)
    llvm::MetadataTracking::untrack();
  if (a4)
  {
    v18 = *((_DWORD *)v8 + 2);
    v19 = *(_QWORD *)(a1 + 192);
    if ((v18 & 0xFE) == 0x12)
    {
      v19 = llvm::FixedVectorType::get();
      v18 = *((_DWORD *)v8 + 2);
    }
    v20 = *(_QWORD *)(a1 + 152);
    if ((v18 & 0xFE) == 0x12)
      v20 = llvm::FixedVectorType::get();
    v37 = v19;
    v45 = 257;
    v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a3, v9, (uint64_t)v44);
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v45 = 257;
    LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v21, v22, (const llvm::Twine *)v44);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v45 = 257;
    v25 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), LShr, v24, (const llvm::Twine *)v44);
    v38 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v40 = *(_DWORD *)(a1 + 104);
    AGCLLVMTargetLowerer::CreateFabs(a1, &v38, a3);
    if (v39)
      llvm::MetadataTracking::untrack();
    llvm::ConstantFP::get();
    v45 = 257;
    llvm::IRBuilderBase::CreateFCmpHelper();
    v45 = 257;
    v26 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 49, v17, v9, (uint64_t)v44);
    v27 = (llvm::Value *)llvm::ConstantInt::get();
    v45 = 257;
    v28 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v10, v26, v27, (const llvm::Twine *)v44);
    v29 = (llvm::Value *)llvm::ConstantInt::get();
    v45 = 257;
    Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub(v10, v28, v29, (const llvm::Twine *)v44);
    v31 = (llvm::Value *)llvm::ConstantInt::get();
    v45 = 257;
    v32 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v10, Sub, v31, (const llvm::Twine *)v44);
    v45 = 257;
    v33 = llvm::IRBuilderBase::CreateOr(v10, v32, v25, (const llvm::Twine *)v44);
    v45 = 257;
    v34 = llvm::IRBuilderBase::CreateCast((uint64_t)v10, 38, v33, v37, (uint64_t)v44);
    v45 = 257;
    v35 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v10, 49, v34, v20, (uint64_t)v44);
    v45 = 257;
    llvm::IRBuilderBase::CreateFPExt(v10, v35, v8, (const llvm::Twine *)v44);
    llvm::ConstantFP::get();
    v45 = 257;
    llvm::IRBuilderBase::CreateSelect();
  }
  v45 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

uint64_t *AGCLLVMTargetConfig::createTargetConfig(int a1)
{
  uint64_t *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t *v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  uint64_t *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  __guard *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;

  v1 = 0;
  switch((__int16)a1)
  {
    case 4:
      if ((v28 & 1) != 0)
        return &AGCLLVMCreateG5TargetConfig(AGCTargetArch)::g5pC0;
      v1 = &AGCLLVMCreateG5TargetConfig(AGCTargetArch)::g5pC0;
        return v1;
      qword_1EF8E7650 = 0;
      qword_1EF8E7668 = 0;
      qword_1EF8E7648 = 0x400050004;
      qword_1EF8E7658 = 0x10000010100;
      unk_1EF8E7660 = 60;
      qword_1EF8E7638 = (uint64_t)"agx1-apple-ios";
      unk_1EF8E7640 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      AGCLLVMCreateG5TargetConfig(AGCTargetArch)::g5pC0 = (uint64_t)&off_1E7EC9DB0;
      __cxa_atexit((void (*)(void *))AGCLLVMG5TargetConfig::~AGCLLVMG5TargetConfig, &AGCLLVMCreateG5TargetConfig(AGCTargetArch)::g5pC0, &dword_1C3C54000);
      goto LABEL_151;
    case 6:
    case 7:
      return AGCLLVMCreateG9TargetConfig(a1);
    case 8:
      if ((v29 & 1) != 0)
        return &AGCLLVMCreateG10TargetConfig(AGCTargetArch)::g10pB0;
      v1 = &AGCLLVMCreateG10TargetConfig(AGCTargetArch)::g10pB0;
      {
        qword_1ED839B38 = 0;
        qword_1ED839B18 = 0x800030008;
        qword_1ED839B20 = (uint64_t)"/metal_rt_precise.metallib";
        qword_1ED839B28 = 0x100010000010100;
        unk_1ED839B30 = 124;
        qword_1ED839B08 = (uint64_t)"agx2-apple-ios";
        unk_1ED839B10 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
        AGCLLVMCreateG10TargetConfig(AGCTargetArch)::g10pB0 = (uint64_t)&off_1E7EC0A88;
        __cxa_atexit((void (*)(void *))AGCLLVMG10TargetConfig::~AGCLLVMG10TargetConfig, &AGCLLVMCreateG10TargetConfig(AGCTargetArch)::g10pB0, &dword_1C3C54000);
LABEL_151:
        __cxa_guard_release(v84);
      }
      return v1;
    case 9:
    case 10:
    case 11:
    case 23:
      if ((v12 & 1) == 0)
      {
        v56 = a1;
        a1 = v56;
        if (v57)
        {
          qword_1EF8E7E70 = 0;
          qword_1EF8E7E50 = 0x900010009;
          qword_1EF8E7E58 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E7E60 = 0x100010000010100;
          unk_1EF8E7E68 = 124;
          qword_1EF8E7E40 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E7E48 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pA0 = (uint64_t)&off_1E7EC1210;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pA0, &dword_1C3C54000);
          a1 = v56;
        }
      }
      if ((v13 & 1) == 0)
      {
        v58 = a1;
        a1 = v58;
        if (v59)
        {
          qword_1EF8E7DF0 = 0;
          qword_1EF8E7DD0 = 0xA0001000ALL;
          qword_1EF8E7DD8 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E7DE0 = 0x100010000010100;
          unk_1EF8E7DE8 = 124;
          qword_1EF8E7DC0 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E7DC8 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mA0 = (uint64_t)&off_1E7EC1210;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mA0, &dword_1C3C54000);
          a1 = v58;
        }
      }
      if ((v14 & 1) == 0)
      {
        v60 = a1;
        a1 = v60;
        if (v61)
        {
          qword_1EF8E7DB0 = 0;
          qword_1EF8E7D90 = 0xB0001000BLL;
          qword_1EF8E7D98 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E7DA0 = 0x100010000010100;
          unk_1EF8E7DA8 = 124;
          qword_1EF8E7D80 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E7D88 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11gA0 = (uint64_t)&off_1E7EC1210;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11gA0, &dword_1C3C54000);
          a1 = v60;
        }
      }
      if ((v15 & 1) == 0)
      {
        v62 = a1;
        a1 = v62;
        if (v63)
        {
          qword_1EF8E7708 = 0;
          qword_1EF8E76E8 = 0x900030009;
          qword_1EF8E76F0 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E76F8 = 0x100010000010100;
          unk_1EF8E7700 = 124;
          qword_1EF8E76D8 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E76E0 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pB0 = (uint64_t)&off_1E7EC1210;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pB0, &dword_1C3C54000);
          a1 = v62;
        }
      }
      if ((v16 & 1) == 0)
      {
        v64 = a1;
        a1 = v64;
        if (v65)
        {
          qword_1EF8E7E30 = 0;
          qword_1EF8E7E10 = 0xA0003000ALL;
          qword_1EF8E7E18 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E7E20 = 0x100010000010100;
          unk_1EF8E7E28 = 124;
          qword_1EF8E7E00 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E7E08 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mB0 = (uint64_t)&off_1E7EC1210;
          __cxa_atexit((void (*)(void *))AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig, &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mB0, &dword_1C3C54000);
          a1 = v64;
        }
      }
      if (a1 > 65558)
      {
        if (a1 != 65559)
        {
          if (a1 == 196617)
            return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pB0;
          if (a1 == 196618)
            return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mB0;
          return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mA0;
        }
        return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11gA0;
      }
      if (a1 == 65545)
        return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11pA0;
      if (a1 == 65547)
        return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11gA0;
      return &AGCLLVMCreateG11TargetConfig(AGCTargetArch)::g11mA0;
    case 12:
      if ((v30 & 1) == 0)
      {
        v85 = a1;
        a1 = v85;
        if (v86)
        {
          qword_1EF8E8150 = 0;
          qword_1EF8E8130 = 0xC0001000CLL;
          qword_1EF8E8138 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E8140 = 0x101010000010100;
          unk_1EF8E8148 = 124;
          qword_1EF8E8120 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E8128 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pA0 = (uint64_t)&off_1E7EC19A0;
          __cxa_atexit((void (*)(void *))AGCLLVMG12TargetConfig::~AGCLLVMG12TargetConfig, &AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pA0, &dword_1C3C54000);
          a1 = v85;
        }
      }
      if ((v31 & 1) == 0)
      {
        v92 = a1;
        a1 = v92;
        if (v87)
        {
          qword_1EF8E80B0 = 0;
          qword_1EF8E8090 = 0xC0003000CLL;
          qword_1EF8E8098 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E80A0 = 0x101010000010100;
          unk_1EF8E80A8 = 124;
          qword_1EF8E8080 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E8088 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pB0 = (uint64_t)&off_1E7EC19A0;
          __cxa_atexit((void (*)(void *))AGCLLVMG12TargetConfig::~AGCLLVMG12TargetConfig, &AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pB0, &dword_1C3C54000);
          a1 = v92;
        }
      }
      if (a1 == 196620)
        return &AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pB0;
      else
        return &AGCLLVMCreateG12TargetConfig(AGCTargetArch)::g12pA0;
    case 14:
    case 16:
    case 25:
    case 26:
    case 27:
      if ((v2 & 1) == 0)
      {
        v36 = a1;
        a1 = v36;
        if (v37)
        {
          qword_1EF8E8210 = 0;
          qword_1EF8E81F0 = 0xE0001000ELL;
          qword_1EF8E81F8 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E8200 = 0x101010000010100;
          unk_1EF8E8208 = 0x400000007CLL;
          qword_1EF8E81E0 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E81E8 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pA0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pA0, &dword_1C3C54000);
          a1 = v36;
        }
      }
      if ((v3 & 1) == 0)
      {
        v38 = a1;
        a1 = v38;
        if (v39)
        {
          qword_1EF8E8190 = 0;
          qword_1EF8E8170 = 0x1000010010;
          qword_1EF8E8178 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E8180 = 0x101010000010100;
          unk_1EF8E8188 = 0x400000007CLL;
          qword_1EF8E8160 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E8168 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gA0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gA0, &dword_1C3C54000);
          a1 = v38;
        }
      }
      if ((v4 & 1) == 0)
      {
        v40 = a1;
        a1 = v40;
        if (v41)
        {
          qword_1EF8E80F0 = 0;
          qword_1EF8E80D0 = 0xE0003000ELL;
          qword_1EF8E80D8 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E80E0 = 0x101010000010100;
          unk_1EF8E80E8 = 0x400000007CLL;
          qword_1EF8E80C0 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E80C8 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pB0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pB0, &dword_1C3C54000);
          a1 = v40;
        }
      }
      if ((v5 & 1) == 0)
      {
        v42 = a1;
        a1 = v42;
        if (v43)
        {
          qword_1EF8E81D0 = 0;
          qword_1EF8E81B0 = 0x1000030010;
          qword_1EF8E81B8 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8E81C0 = 0x101010000010100;
          unk_1EF8E81C8 = 0x400000007CLL;
          qword_1EF8E81A0 = (uint64_t)"agx2-apple-ios";
          unk_1EF8E81A8 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gB0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gB0, &dword_1C3C54000);
          a1 = v42;
        }
      }
      if ((v6 & 1) == 0)
      {
        v44 = a1;
        a1 = v44;
        if (v45)
        {
          qword_1EF8EA158 = 0;
          qword_1EF8EA138 = 0x1900010019;
          qword_1EF8EA140 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA148 = 0x101010000010100;
          unk_1EF8EA150 = 0x400000007CLL;
          qword_1EF8EA128 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA130 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sA0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sA0, &dword_1C3C54000);
          a1 = v44;
        }
      }
      if ((v7 & 1) == 0)
      {
        v46 = a1;
        a1 = v46;
        if (v47)
        {
          qword_1EF8EA1A0 = 0;
          qword_1EF8EA180 = 0x1A0001001ALL;
          qword_1EF8EA188 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA190 = 0x101010000010100;
          unk_1EF8EA198 = 0x400000007CLL;
          qword_1EF8EA170 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA178 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cA0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cA0, &dword_1C3C54000);
          a1 = v46;
        }
      }
      if ((v8 & 1) == 0)
      {
        v48 = a1;
        a1 = v48;
        if (v49)
        {
          qword_1EF8EA1E8 = 0;
          qword_1EF8EA1C8 = 0x1B0001001BLL;
          qword_1EF8EA1D0 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA1D8 = 0x101010000010100;
          unk_1EF8EA1E0 = 0x400000007CLL;
          qword_1EF8EA1B8 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA1C0 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dA0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dA0, &dword_1C3C54000);
          a1 = v48;
        }
      }
      if ((v9 & 1) == 0)
      {
        v50 = a1;
        a1 = v50;
        if (v51)
        {
          qword_1EF8EA230 = 0;
          qword_1EF8EA210 = 0x1900030019;
          qword_1EF8EA218 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA220 = 0x101010000010100;
          unk_1EF8EA228 = 0x400000007CLL;
          qword_1EF8EA200 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA208 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sB0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sB0, &dword_1C3C54000);
          a1 = v50;
        }
      }
      if ((v10 & 1) == 0)
      {
        v52 = a1;
        a1 = v52;
        if (v53)
        {
          qword_1EF8EA278 = 0;
          qword_1EF8EA258 = 0x1A0003001ALL;
          qword_1EF8EA260 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA268 = 0x101010000010100;
          unk_1EF8EA270 = 0x400000007CLL;
          qword_1EF8EA248 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA250 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cB0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cB0, &dword_1C3C54000);
          a1 = v52;
        }
      }
      if ((v11 & 1) == 0)
      {
        v54 = a1;
        a1 = v54;
        if (v55)
        {
          qword_1EF8EA2C0 = 0;
          qword_1EF8EA2A0 = 0x1B0003001BLL;
          qword_1EF8EA2A8 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA2B0 = 0x101010000010100;
          unk_1EF8EA2B8 = 0x400000007CLL;
          qword_1EF8EA290 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA298 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dB0 = (uint64_t)&off_1E7EC2210;
          __cxa_atexit((void (*)(void *))AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig, &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dB0, &dword_1C3C54000);
          a1 = v54;
        }
      }
      v1 = &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pA0;
      if (a1 <= 196621)
      {
        if (a1 > 65561)
        {
          if (a1 == 65562)
          {
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cA0;
          }
          else if (a1 == 65563)
          {
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dA0;
          }
        }
        else if (a1 == 65552)
        {
          return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gA0;
        }
        else if (a1 == 65561)
        {
          return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sA0;
        }
      }
      else if (a1 <= 196632)
      {
        if (a1 == 196622)
        {
          return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13pB0;
        }
        else if (a1 == 196624)
        {
          return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13gB0;
        }
      }
      else
      {
        switch(a1)
        {
          case 196633:
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13sB0;
          case 196634:
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13cB0;
          case 196635:
            return &AGCLLVMCreateG13TargetConfig(AGCTargetArch)::g13dB0;
        }
      }
      return v1;
    case 17:
    case 18:
      return AGCLLVMCreateG14TargetConfig(a1);
    case 19:
    case 20:
    case 21:
      if ((v17 & 1) == 0)
      {
        v66 = a1;
        a1 = v66;
        if (v67)
        {
          qword_1EF8EA308 = 0;
          qword_1EF8EA2E8 = 0x1300010013;
          qword_1EF8EA2F0 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA2F8 = 0x101010000010100;
          unk_1EF8EA300 = 0x400000007CLL;
          qword_1EF8EA2D8 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA2E0 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sA0 = (uint64_t)&off_1E7EC32F0;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sA0, &dword_1C3C54000);
          a1 = v66;
        }
      }
      if ((v18 & 1) == 0)
      {
        v68 = a1;
        a1 = v68;
        if (v69)
        {
          qword_1EF8EA350 = 0;
          qword_1EF8EA330 = 0x1300030013;
          qword_1EF8EA338 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA340 = 0x101010000010100;
          unk_1EF8EA348 = 0x400000007CLL;
          qword_1EF8EA320 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA328 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sB0 = (uint64_t)&off_1E7EC32F0;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sB0, &dword_1C3C54000);
          a1 = v68;
        }
      }
      if ((v19 & 1) == 0)
      {
        v70 = a1;
        a1 = v70;
        if (v71)
        {
          qword_1EF8EA398 = 0;
          qword_1EF8EA378 = 0x1400010014;
          qword_1EF8EA380 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA388 = 0x101010000010100;
          unk_1EF8EA390 = 0x400000007CLL;
          qword_1EF8EA368 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA370 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cA0 = (uint64_t)&off_1E7EC32F0;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cA0, &dword_1C3C54000);
          a1 = v70;
        }
      }
      if ((v20 & 1) == 0)
      {
        v72 = a1;
        a1 = v72;
        if (v73)
        {
          qword_1EF8EA3E0 = 0;
          qword_1EF8EA3C0 = 0x1400030014;
          qword_1EF8EA3C8 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA3D0 = 0x101010000010100;
          unk_1EF8EA3D8 = 0x400000007CLL;
          qword_1EF8EA3B0 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA3B8 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cB0 = (uint64_t)&off_1E7EC32F0;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cB0, &dword_1C3C54000);
          a1 = v72;
        }
      }
      if ((v21 & 1) == 0)
      {
        v74 = a1;
        a1 = v74;
        if (v75)
        {
          qword_1EF8EA428 = 0;
          qword_1EF8EA408 = 0x1500010015;
          qword_1EF8EA410 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA418 = 0x101010000010100;
          unk_1EF8EA420 = 0x400000007CLL;
          qword_1EF8EA3F8 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA400 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dA0 = (uint64_t)&off_1E7EC32F0;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dA0, &dword_1C3C54000);
          a1 = v74;
        }
      }
      if ((v22 & 1) == 0)
      {
        v76 = a1;
        a1 = v76;
        if (v77)
        {
          qword_1EF8EA470 = 0;
          qword_1EF8EA450 = 0x1500030015;
          qword_1EF8EA458 = (uint64_t)"/metal_rt_precise.metallib";
          qword_1EF8EA460 = 0x101010000010100;
          unk_1EF8EA468 = 0x400000007CLL;
          qword_1EF8EA440 = (uint64_t)"agx2-apple-ios";
          unk_1EF8EA448 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
          AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dB0 = (uint64_t)&off_1E7EC32F0;
          __cxa_atexit((void (*)(void *))AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig, &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dB0, &dword_1C3C54000);
          a1 = v76;
        }
      }
      v1 = &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sA0;
      if (a1 <= 196626)
      {
        if (a1 == 65556)
        {
          return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cA0;
        }
        else if (a1 == 65557)
        {
          return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dA0;
        }
      }
      else
      {
        switch(a1)
        {
          case 196629:
            return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14dB0;
          case 196628:
            return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14cB0;
          case 196627:
            return &AGCLLVMCreateG14XTargetConfig(AGCTargetArch)::g14sB0;
        }
      }
      return v1;
    case 22:
      if (a1 != 196630)
        return AGCLLVMCreateG15TargetConfig(a1);
      a1 = 196625;
      return AGCLLVMCreateG14TargetConfig(a1);
    case 24:
      return AGCLLVMCreateG15TargetConfig(a1);
    case 31:
      if ((v32 & 1) == 0)
      {
        v88 = a1;
        a1 = v88;
        if (v89)
        {
          AGCLLVMG16PA0TargetConfig::AGCLLVMG16PA0TargetConfig();
          __cxa_atexit((void (*)(void *))AGCLLVMG16PA0TargetConfig::~AGCLLVMG16PA0TargetConfig, &AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pA0, &dword_1C3C54000);
          a1 = v88;
        }
      }
      if ((v33 & 1) == 0)
      {
        v93 = a1;
        a1 = v93;
        if (v90)
        {
          AGCLLVMG16PB0TargetConfig::AGCLLVMG16PB0TargetConfig((uint64_t)&AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB0, 196639);
          __cxa_atexit((void (*)(void *))AGCLLVMG16PB0TargetConfig::~AGCLLVMG16PB0TargetConfig, &AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB0, &dword_1C3C54000);
          a1 = v93;
        }
      }
      if ((v34 & 1) == 0)
      {
        v94 = a1;
        a1 = v94;
        if (v91)
        {
          AGCLLVMG16PB0TargetConfig::AGCLLVMG16PB0TargetConfig((uint64_t)&AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB1, 262175);
          __cxa_atexit((void (*)(void *))AGCLLVMG16PB0TargetConfig::~AGCLLVMG16PB0TargetConfig, &AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB1, &dword_1C3C54000);
          a1 = v94;
        }
      }
      v35 = &AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pA0;
      if (a1 == 196639)
        v35 = (uint64_t *)&AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB0;
      if (a1 == 262175)
        return (uint64_t *)&AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pB1;
      else
        return v35;
    case 32:
    case 34:
      if ((v24 & 1) == 0)
      {
        v78 = a1;
        a1 = v78;
        if (v79)
        {
          AGCLLVMG16GA0TargetConfig::AGCLLVMG16GA0TargetConfig();
          __cxa_atexit((void (*)(void *))AGCLLVMG16GA0TargetConfig::~AGCLLVMG16GA0TargetConfig, &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_a0, &dword_1C3C54000);
          a1 = v78;
        }
      }
      if ((v25 & 1) == 0)
      {
        v80 = a1;
        a1 = v80;
        if (v81)
        {
          AGCLLVMG16GB0TargetConfig::AGCLLVMG16GB0TargetConfig();
          __cxa_atexit((void (*)(void *))AGCLLVMG16GB0TargetConfig::~AGCLLVMG16GB0TargetConfig, &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_b0, &dword_1C3C54000);
          a1 = v80;
        }
      }
      if ((v26 & 1) == 0)
      {
        v82 = a1;
        a1 = v82;
        if (v83)
        {
          AGCLLVMG17PA0TargetConfig::AGCLLVMG17PA0TargetConfig();
          __cxa_atexit((void (*)(void *))AGCLLVMG17PA0TargetConfig::~AGCLLVMG17PA0TargetConfig, &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g17p_a0, &dword_1C3C54000);
          a1 = v82;
        }
      }
      if (a1 == 196640)
        v27 = &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_b0;
      else
        v27 = &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_a0;
      if (a1 == 65570)
        return &AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g17p_a0;
      else
        return v27;
    default:
      return v1;
  }
}

void AGCLLVMG10TargetConfig::createTargetLowerer(const char **this, llvm::LLVMContext *a2)
{
  AGCLLVMGen3TargetLowerer *v4;
  uint64_t v5;

  v4 = (AGCLLVMGen3TargetLowerer *)operator new();
  AGCLLVMGen3TargetLowerer::AGCLLVMGen3TargetLowerer(v4, a2, this);
  *(_QWORD *)v5 = &off_1E7EC0B90;
  *(_BYTE *)(v5 + 1739) = 1;
  *(_WORD *)(v5 + 1746) = 0;
}

void AGCLLVMG10TargetConfig::~AGCLLVMG10TargetConfig(AGCLLVMG10TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG10TargetConfig::createTileDispatchVertexShader(AGCLLVMG10TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  llvm::GlobalVariable *v26;
  llvm::LLVMContext *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::GlobalVariable *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::GlobalVariable *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::GlobalVariable *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::GlobalVariable *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  llvm::LLVMContext *v57;
  llvm::Type *FloatTy;
  uint64_t v59;
  AGCLLVMBuilder *v60;
  uint64_t v61;
  uint64_t v62;
  llvm::Value *FMul;
  llvm::Value *v64;
  uint64_t v65;
  llvm::Type *v66;
  llvm::IRBuilderBase *v67;
  llvm::Value *v68;
  llvm::Value *Add;
  uint64_t v70;
  llvm::Type *v71;
  llvm::IRBuilderBase *v72;
  llvm::Value *v73;
  llvm::Value *v74;
  llvm::Value *v75;
  uint64_t v76;
  llvm::Value *v77;
  uint64_t v78;
  llvm::Type *v79;
  uint64_t v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *InsertElement;
  uint64_t v84;
  llvm::Value *v85;
  uint64_t v86;
  llvm::Type *v87;
  uint64_t v88;
  llvm::Value *v89;
  llvm::Value *v90;
  uint64_t v91;
  uint64_t v92;
  llvm::Value *FAdd;
  uint64_t v94;
  llvm::IRBuilderBase *v95;
  llvm::Value *v96;
  uint64_t v97;
  uint64_t v98;
  llvm::IRBuilderBase *v99;
  llvm::Value *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t AlignedLoad;
  llvm::Value *v107;
  void *__p;
  __int128 v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  uint64_t v113;
  int v114;
  _QWORD v115[4];
  __int16 v116;
  unsigned int v117;
  _QWORD v118[2];
  _QWORD v119[2];
  _QWORD v120[2];
  _QWORD v121[4];
  __int16 v122;
  _QWORD v123[4];
  __int16 v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v5 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v5 + 88), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t *)v5, (uint64_t *)off_1E7EBAAE8);
  *(_QWORD *)(v5 + 72) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v5 + 80) = -1;
  *(_QWORD *)v5 = off_1E7EBA8A0;
  *(_QWORD *)(v5 + 88) = &unk_1E7EBA9E0;
  *(_QWORD *)(v5 + 120) = &unk_1E7EBAAD0;
  *(_DWORD *)(v5 + 72) = 5;
  *(_WORD *)(v5 + 84) = 1;
  v117 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 488) + 464))(*(_QWORD *)(v5 + 488)) == 2
    || (*(_DWORD *)(v5 + 76) = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 32 + 368)
                                                                                          + 440))(*(_QWORD *)(v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 32 + 368), &v117, 4), v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 400), *(_DWORD *)(v5 + 80) = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v6 + 440))(v6, &v117, 2), (v7 = v117) == 0))
  {
    __p = 0;
  }
  else
  {
    v8 = v5 + *(_QWORD *)(*(_QWORD *)v5 - 24) + 32;
    v9 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v117);
    v10 = 0;
    do
    {
      *(_QWORD *)&v9[v10] = *(_QWORD *)(v8 + 200);
      v10 += 8;
    }
    while (8 * v7 != v10);
    __p = v9;
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v12 = v11;
  *(_WORD *)(v11 + 18) = *(_WORD *)(v11 + 18) & 0xC00F | 0x660;
  v115[0] = "entry";
  v116 = 259;
  operator new();
  v13 = llvm::BasicBlock::BasicBlock();
  v14 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  *(_QWORD *)(v14 + 88) = v13;
  *(_QWORD *)(v14 + 96) = v13 + 40;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 400);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 464))(v15) == 2)
  {
    v16 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
    v17 = *(_QWORD *)(v16 + 400);
    v112 = *(_OWORD *)(v16 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v16 + 40));
    v114 = *(_DWORD *)(v16 + 136);
    v18 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned int *, uint64_t))(*(_QWORD *)v17 + 456))(v17, &v112, &v117, 4);
    if (v113)
      llvm::MetadataTracking::untrack();
    v19 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
    v20 = *(_QWORD *)(v19 + 400);
    v109 = *(_OWORD *)(v19 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v19 + 40));
    v111 = *(_DWORD *)(v19 + 136);
    v107 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned int *, uint64_t))(*(_QWORD *)v20
                                                                                                  + 456))(v20, &v109, &v117, 2);
    if (v110)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    if ((*(_WORD *)(v12 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v12);
    v21 = *(_QWORD *)(v12 + 88);
    v22 = *(_DWORD *)(v5 + 76);
    v23 = *(_DWORD *)(v5 + 80);
    v24 = 40 * (v22 - 1) + 40;
    if (!v22)
      v24 = 0;
    v18 = (llvm::Value *)(v21 + v24);
    v25 = v21 + v24 + 40 * (v23 + ~v22) + 40;
    if (v22 >= v23)
      v25 = (uint64_t)v18;
    v107 = (llvm::Value *)v25;
  }
  v26 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  llvm::Type::getFloatTy(*(llvm::Type **)(*(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 392), v27);
  v115[0] = "agc.pointsize_info";
  v116 = 259;
  llvm::GlobalVariable::GlobalVariable();
  *((_BYTE *)v26 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v28 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v29 = *(_QWORD *)(v28 + 376);
  v30 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v28 + 32), v26);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v29, v30);
  v31 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v115[0] = "agc.tile.width";
  v116 = 259;
  v32 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v32 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v33 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v34 = *(_QWORD *)(v33 + 376);
  v35 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v33 + 32), v31);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v34, v35);
  v36 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v115[0] = "agc.tile.height";
  v116 = 259;
  v37 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v37 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v38 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v39 = *(_QWORD *)(v38 + 376);
  v40 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v38 + 32), v36);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v39, v40);
  v41 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v115[0] = "agc.tile.offset.x";
  v116 = 259;
  v42 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v42 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v43 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v44 = *(_QWORD *)(v43 + 376);
  v45 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v43 + 32), v41);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v44, v45);
  v46 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v115[0] = "agc.tile.offset.y";
  v116 = 259;
  v47 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v47 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v48 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v49 = *(_QWORD *)(v48 + 376);
  v50 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v48 + 32), v46);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v49, v50);
  v51 = *(_QWORD *)(*(_QWORD *)v5 - 24);
  v52 = *(_QWORD *)(v51 + v5 + 400);
  v53 = *(_QWORD *)(v52 + 1384);
  if (v53)
    v54 = strlen(*(const char **)(v52 + 1384));
  else
    v54 = 0;
  v55 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v51 + v5 + 32, v53, v54, *(_QWORD *)(v51 + v5 + 176), *(_QWORD *)(v5 + v51 + 2768), *(_QWORD *)(v51 + v5 + 200));
  v56 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  FloatTy = (llvm::Type *)llvm::Type::getFloatTy(*(llvm::Type **)(v56 + 392), v57);
  v116 = 257;
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v56 + 40), FloatTy, (uint64_t)v26, 0, (uint64_t)v115);
  v59 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v60 = (AGCLLVMBuilder *)(v59 + 32);
  v61 = v59 + 40;
  v62 = llvm::ConstantFP::get();
  v116 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul(v61, AlignedLoad, v62, (uint64_t)v115);
  v64 = AGCLLVMBuilder::splat(v60, 2, FMul);
  v65 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v66 = *(llvm::Type **)(v65 + 232);
  v67 = (llvm::IRBuilderBase *)(v65 + 40);
  v116 = 257;
  v68 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v65 + 40), v66, (uint64_t)v41, 0, (uint64_t)v115);
  v124 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v67, v18, v68, (const llvm::Twine *)v123);
  v70 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v71 = *(llvm::Type **)(v70 + 232);
  v72 = (llvm::IRBuilderBase *)(v70 + 40);
  v116 = 257;
  v73 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v70 + 40), v71, (uint64_t)v46, 0, (uint64_t)v115);
  v124 = 257;
  v74 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v72, v107, v73, (const llvm::Twine *)v123);
  v75 = (llvm::Value *)llvm::UndefValue::get();
  v76 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v77 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)(v76 + 32), Add, 1);
  v78 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v79 = *(llvm::Type **)(v78 + 200);
  v116 = 257;
  v80 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v78 + 40), v79, (uint64_t)v31, 0, (uint64_t)v115);
  v124 = 257;
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul(v76 + 40, (uint64_t)v77, v80, (uint64_t)v123);
  v122 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v76 + 40), v75, v81, v82, (const llvm::Twine *)v121);
  v84 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v85 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)(v84 + 32), v74, 1);
  v86 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v87 = *(llvm::Type **)(v86 + 200);
  v116 = 257;
  v88 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v86 + 40), v87, (uint64_t)v36, 0, (uint64_t)v115);
  v124 = 257;
  v89 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul(v84 + 40, (uint64_t)v85, v88, (uint64_t)v123);
  v122 = 257;
  v90 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v84 + 40), InsertElement, v89, v90, (const llvm::Twine *)v121);
  v92 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 40;
  v116 = 257;
  FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd(v92, (uint64_t)v64, v91, (uint64_t)v115);
  v123[0] = llvm::ConstantInt::get();
  v94 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v116 = 257;
  v95 = (llvm::IRBuilderBase *)(v94 + 40);
  v96 = (llvm::Value *)llvm::ConstantInt::get();
  v123[1] = llvm::IRBuilderBase::CreateExtractElement(v95, FAdd, v96, (const llvm::Twine *)v115);
  v97 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 40;
  v116 = 257;
  llvm::IRBuilderBase::CreateCall(v97, *(_QWORD *)(v55 + 24), v55, (uint64_t)v123, 2, (uint64_t)v115);
  v121[0] = llvm::ConstantInt::get();
  v98 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5;
  v116 = 257;
  v99 = (llvm::IRBuilderBase *)(v98 + 40);
  v100 = (llvm::Value *)llvm::ConstantInt::get();
  v121[1] = llvm::IRBuilderBase::CreateExtractElement(v99, FAdd, v100, (const llvm::Twine *)v115);
  v101 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 40;
  v116 = 257;
  llvm::IRBuilderBase::CreateCall(v101, *(_QWORD *)(v55 + 24), v55, (uint64_t)v121, 2, (uint64_t)v115);
  v120[0] = llvm::ConstantInt::get();
  v120[1] = llvm::ConstantFP::get();
  v102 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 40;
  v116 = 257;
  llvm::IRBuilderBase::CreateCall(v102, *(_QWORD *)(v55 + 24), v55, (uint64_t)v120, 2, (uint64_t)v115);
  v119[0] = llvm::ConstantInt::get();
  v119[1] = llvm::ConstantFP::get();
  v103 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 40;
  v116 = 257;
  llvm::IRBuilderBase::CreateCall(v103, *(_QWORD *)(v55 + 24), v55, (uint64_t)v119, 2, (uint64_t)v115);
  v118[0] = llvm::ConstantInt::get();
  v118[1] = AlignedLoad;
  v104 = *(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 40;
  v116 = 257;
  llvm::IRBuilderBase::CreateCall(v104, *(_QWORD *)(v55 + 24), v55, (uint64_t)v118, 2, (uint64_t)v115);
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v5 - 24) + v5 + 40));
  if (__p)
    operator delete(__p);
  return v5 + *(_QWORD *)(*(_QWORD *)v5 - 24);
}

void AGCLLVMG10TargetLowerer::~AGCLLVMG10TargetLowerer(AGCLLVMG10TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMGen3TargetLowerer::setupMetalDriverShaderPRIDS(AGCLLVMGen3TargetLowerer *this)
{
  return AGCLLVMGen3TargetLowerer::setupFixedPRIDS((uint64_t)this, 0);
}

uint64_t AGCLLVMGen3TargetLowerer::isPartitionLockingHandlingRequired(AGCLLVMGen3TargetLowerer *this)
{
  return 0;
}

uint64_t AGCLLVMGen2TargetLowerer::forceWritethroughForStores(AGCLLVMGen2TargetLowerer *this, llvm::Function *a2)
{
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

const char *AGCLLVMGen3TargetLowerer::setSlcCachePolicyForImageWrites(AGCLLVMGen3TargetLowerer *this, llvm::Function *a2)
{
  const char *v2;
  const char *Value;
  const char *result;
  const char *v5;

  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  if (MGGetBoolAnswer())
  {
    Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_G10_IMAGE_WRITE_CACHE_CTL", v2);
    if (Value)
    {
      strlen(Value);
      llvm::Function::addFnAttr();
    }
  }
  result = (const char *)MGGetBoolAnswer();
  if ((_DWORD)result)
  {
    result = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_IMAGE_WRITE_PERSISTANCE", v5);
    if (result)
    {
      strlen(result);
      return (const char *)llvm::Function::addFnAttr();
    }
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::bypassL1ForStoresForVertexDataDependencies(AGCLLVMGen3TargetLowerer *this, llvm::Function *a2)
{
  return llvm::Function::addFnAttr();
}

uint64_t AGCLLVMGen3TargetLowerer::setLoadStoreCacheControl()
{
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t AGCLLVMGen3TargetLowerer::getVertexInputRegister(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t result;

  if ((a3 - 1) > 4)
    return 0;
  result = dword_1C3DF8610[a3 - 1];
  if (*a2 <= result)
    *a2 = result + 1;
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::getVertexInputCall(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t Cast;
  uint64_t v12;
  _QWORD v14[4];
  __int16 v15;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;

  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v18);
  if (v19)
    llvm::MetadataTracking::untrack();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 440))(a1, a3, a4);
  v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)"agc.read_vi.f32", 15, a1[21], a1[25]);
  v14[0] = llvm::ConstantInt::get();
  v17 = 257;
  v9 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v8 + 24), v8, (uint64_t)v14, 1, (uint64_t)v16);
  if ((_DWORD)a4 == 9)
  {
    v10 = a1[25];
    v17 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)v9, v10, (uint64_t)v16);
    v12 = a1[24];
    v15 = 257;
    return llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, Cast, v12, (uint64_t)v14);
  }
  return (uint64_t)v9;
}

uint64_t AGCLLVMGen3TargetLowerer::vertexBuiltinRegisterDomain(AGCLLVMGen3TargetLowerer *this)
{
  return 1;
}

BOOL AGCLLVMG10TargetLowerer::checkMaxTexturesAndSamplers(AGCLLVMG10TargetLowerer *this, unsigned int a2, unsigned int a3)
{
  return a2 < 0x80 && a3 < 0x1C;
}

void AGCLLVMGen3TargetLowerer::printAsm(AGCLLVMGen3TargetLowerer *this, const unsigned __int8 *a2, uint64_t a3, const AGCLLVMObject *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char __str[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = (const char *)(*(uint64_t (**)(const AGCLLVMObject *))(*(_QWORD *)a4 + 56))(a4);
  snprintf(__str, 0x80uLL, "%s shader %u (driver disassembler)", v7, *((_DWORD *)a4 + 818));
  printMessage((char **)&AGCPrinter, "------ Start USC %s -------\n", v8, v9, v10, v11, v12, v13, (char)__str);
  printHexDump((char **)&AGCPrinter, (uint64_t)a2, a3, 0x10u, "0x", 1);
  printMessage((char **)&AGCPrinter, "\n------- End USC %s --------\n", v14, v15, v16, v17, v18, v19, (char)__str);
}

BOOL AGCLLVMG10TargetLowerer::isValidTileSize(AGCLLVMG10TargetLowerer *this, int a2, int a3)
{
  return a2 == a3;
}

BOOL AGCLLVMGen2TargetLowerer::isTextureWriteFunction(uint64_t a1, const void *a2, size_t a3)
{
  const void *v3;
  size_t v7;
  const char *v8;
  size_t v9;

  v3 = *(const void **)(a1 + 1912);
  if (!v3)
    return 1;
  v7 = strlen(*(const char **)(a1 + 1912));
  if (a3 >= v7 && (!v7 || !memcmp(a2, v3, v7)))
    return 1;
  v8 = *(const char **)(a1 + 1920);
  if (!v8)
    return 1;
  v9 = strlen(v8);
  if (a3 < v9)
    return 0;
  return !v9 || memcmp(a2, v8, v9) == 0;
}

BOOL AGCLLVMGen2TargetLowerer::isImageBlockWrite(uint64_t a1, const void *a2, size_t a3)
{
  const void *v3;
  size_t v6;

  v3 = *(const void **)(a1 + 1920);
  if (!v3)
    return 1;
  v6 = strlen(*(const char **)(a1 + 1920));
  if (a3 < v6)
    return 0;
  return !v6 || memcmp(a2, v3, v6) == 0;
}

uint64_t AGCLLVMG10TargetLowerer::maxImageDimLog2(AGCLLVMG10TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG10TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  if (a3 == *(_QWORD *)(a1 + 168) && a2 == 1)
    return 917504;
  else
    return (a2 << 16);
}

void AGCLLVMG11TargetConfig::createTargetLowerer(const char **this, llvm::LLVMContext *a2)
{
  AGCLLVMGen4TargetLowerer *v4;
  uint64_t v5;

  v4 = (AGCLLVMGen4TargetLowerer *)operator new();
  AGCLLVMGen4TargetLowerer::AGCLLVMGen4TargetLowerer(v4, a2, this);
  *(_QWORD *)v5 = &off_1E7EC1318;
  *(_BYTE *)(v5 + 1766) = 1;
  *(_BYTE *)(v5 + 1794) = 1;
}

void AGCLLVMG11TargetConfig::~AGCLLVMG11TargetConfig(AGCLLVMG11TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG11TargetConfig::createMetalPostTessellationShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v11;

  v11 = operator new();
  return AGCLLVMAGPVertexShaderPostTessellationHW::AGCLLVMAGPVertexShaderPostTessellationHW(v11, a2, a3, a4, a5, a6);
}

std::string *AGCLLVMG11TargetConfig::getTargetFeatureString@<X0>(std::string *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if ((LODWORD(this[1].__r_.__value_.__l.__data_) - 65545) <= 1)
    return std::string::append(a2, "-smpfwd");
  return this;
}

void AGCLLVMG11TargetLowerer::~AGCLLVMG11TargetLowerer(AGCLLVMG11TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMGen4TargetLowerer::getVertexInputRegister(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t result;

  if ((a3 - 1) > 8)
    return 0;
  result = dword_1C3DF8624[a3 - 1];
  if (*a2 <= result)
    *a2 = result + 1;
  return result;
}

uint64_t AGCLLVMG11TargetLowerer::maxImageDimLog2(AGCLLVMG11TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG11TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  if (a3 == *(_QWORD *)(a1 + 168) && a2 == 1)
    return 917504;
  else
    return (a2 << 16);
}

void AGCLLVMG12TargetConfig::createTargetLowerer(const char **this, llvm::LLVMContext *a2)
{
  AGCLLVMGen5TargetLowerer *v4;
  uint64_t v5;

  v4 = (AGCLLVMGen5TargetLowerer *)operator new();
  AGCLLVMGen5TargetLowerer::AGCLLVMGen5TargetLowerer(v4, a2, this);
  *(_QWORD *)v5 = &off_1E7EC1AA8;
  *(_BYTE *)(v5 + 1766) = 1;
  *(_WORD *)(v5 + 1775) = 1;
  *(_BYTE *)(v5 + 1786) = 0;
  *(_BYTE *)(v5 + 1794) = 1;
}

void AGCLLVMG12TargetConfig::~AGCLLVMG12TargetConfig(AGCLLVMG12TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG12TargetLowerer::~AGCLLVMG12TargetLowerer(AGCLLVMG12TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG12TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL AGCLLVMG12TargetLowerer::isImageWriteBlockFromDimensionSupported(uint64_t a1, int a2)
{
  return (a2 - 2) < 4;
}

uint64_t AGCLLVMG12TargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  llvm::Type **GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  llvm::Type *v15;
  llvm::Value *v16;
  llvm::Type **v17;
  llvm::Value *v18;
  llvm::Type *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  uint64_t LShr;
  uint64_t v25;
  llvm::Value *Cast;
  llvm::Value *v27;
  llvm::Value *Add;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  llvm::Value *v35;
  llvm::Value *v36;
  llvm::Value *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  llvm::Value *v46;
  uint64_t v47;
  uint64_t v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::Value *v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  llvm::Value *v62;
  llvm::Value *v63;
  uint64_t v64;
  uint64_t v65;
  llvm::CmpInst **v66;
  llvm::Value *v67;
  llvm::Value *v68;
  llvm::Value *v69;
  uint64_t v70;
  uint64_t v71;
  llvm::CmpInst **v72;
  uint64_t v73;
  llvm::Value *ICmp;
  uint64_t v75;
  llvm::Value *v76;
  llvm::Value *Select;
  llvm::Type *v78;
  llvm::Value *NullValue;
  llvm::Value *v80;
  llvm::Value *InsertElement;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Value *v85;
  llvm::Value *v86;
  llvm::Type **v87;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  _BYTE v96[32];
  __int16 v97;
  __int128 v98;
  uint64_t v99;
  int v100;

  v98 = *(_OWORD *)a2;
  v99 = *(_QWORD *)(a2 + 16);
  if (v99)
    llvm::MetadataTracking::track();
  v100 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v98);
  if (v99)
    llvm::MetadataTracking::untrack();
  v7 = *(llvm::Type **)(a1 + 208);
  v97 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v96);
  v9 = *(llvm::Type **)(a1 + 208);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v96);
  v95 = 257;
  v13 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v12);
  v14 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, (uint64_t)GEP, 0, (uint64_t)v94);
  v15 = *(llvm::Type **)(a1 + 208);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v17 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v15, a3, v16, (const llvm::Twine *)v96);
  v95 = 257;
  v19 = AGCLLVMBuilder::tryDeducePointeeType(v17, v18);
  v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v19, (uint64_t)v17, 0, (uint64_t)v94);
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v22 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v14, v21, (const llvm::Twine *)v96);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v22, v23, (const llvm::Twine *)v94);
  v25 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v25, (uint64_t)v92);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v27, (const llvm::Twine *)v90);
  v29 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v30 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v29, (const llvm::Twine *)v96);
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v32 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v30, v31, (const llvm::Twine *)v94);
  v33 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v32, v33, (uint64_t)v92);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v36 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v35, (const llvm::Twine *)v96);
  v37 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v38 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v94);
  v39 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v38, v39, (uint64_t)v92);
  v41 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v42 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v40, v41, (const llvm::Twine *)v90);
  v43 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v42, v34);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v44, (const llvm::Twine *)v96);
  v46 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v47 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v94);
  v48 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v47, v48, (uint64_t)v92);
  v50 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v49, v50, (const llvm::Twine *)v90);
  v52 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v51, v34);
  v53 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v34);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v55 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v20, v54, (const llvm::Twine *)v96);
  v56 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v57 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v94);
  v58 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v59 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v57, v58, (uint64_t)v92);
  v60 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v59, v60, (const llvm::Twine *)v90);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v61, (const llvm::Twine *)v96);
  v63 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v64 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v62, v63, (const llvm::Twine *)v94);
  v65 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v66 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v64, v65, (uint64_t)v92);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v68 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v67, (const llvm::Twine *)v96);
  v69 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v70 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v68, v69, (const llvm::Twine *)v94);
  v71 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v72 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v70, v71, (uint64_t)v92);
  v73 = llvm::ConstantInt::get();
  v97 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v66, v73, (uint64_t)v96);
  v75 = llvm::ConstantInt::get();
  v95 = 257;
  v76 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v72, v75, (uint64_t)v94);
  v93 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v76, (const llvm::Twine *)v92);
  v97 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v78);
  v97 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v43, v80, (const llvm::Twine *)v96);
  v97 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v52, v82, (const llvm::Twine *)v96);
  v97 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v83, v53, v84, (const llvm::Twine *)v96);
  v97 = 257;
  v86 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v85, Select, v86, (const llvm::Twine *)v96);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v87, a4, 0);
}

uint64_t AGCLLVMG12TargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *Sub;
  llvm::Value *v23;
  llvm::Type **Add;
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[32];
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v32 = *(_OWORD *)a2;
  v33 = *(_QWORD *)(a2 + 16);
  if (v33)
    llvm::MetadataTracking::track();
  v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  v14 = a1[25];
  v27 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  v20 = a1[25];
  v27 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG12TargetLowerer::buildImageSampleCountExtract(_QWORD *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *v9;
  llvm::Type **GEP;
  llvm::Value *v11;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t LShr;
  uint64_t v18;
  llvm::Value *Cast;
  llvm::Value *v20;
  llvm::Type **Shl;
  _BYTE v23[32];
  __int16 v24;
  _BYTE v25[32];
  __int16 v26;
  _BYTE v27[32];
  __int16 v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  if (v30)
    llvm::MetadataTracking::track();
  v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  v26 = 257;
  v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  v18 = a1[25];
  v24 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG12TargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Type **Cast;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  v14 = a1[25];
  v18 = 257;
  Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG12TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG12TargetLowerer::maxImageDimLog2(AGCLLVMG12TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG12TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3)
{
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  if (a3 == *(_QWORD *)(a1 + 168) && a2 == 1)
    return 917504;
  else
    return (a2 << 16);
}

uint64_t AGCLLVMG12TargetLowerer::buildShuffleAndFill(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;

  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  v12 = AGCLLVMGen5TargetLowerer::buildShuffleAndFillEmulation(a1, &v14, a3, a4, a5, a6);
  if (v15)
    llvm::MetadataTracking::untrack();
  return v12;
}

uint64_t AGCLLVMG13TargetConfig::createTargetLowerer(const char **this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  int v8;
  int v9;
  BOOL v10;

  v4 = operator new();
  AGCLLVMGen5TargetLowerer::AGCLLVMGen5TargetLowerer((AGCLLVMGen5TargetLowerer *)v4, a2, this);
  *(_QWORD *)v5 = &off_1E7EC2318;
  v6 = ((_DWORD)this[3] & 0xFFFDFFFF) - 0x10000;
  *(_BYTE *)(v5 + 1744) = 0;
  LOBYTE(v6) = v6 != 14;
  v7 = 1;
  *(_BYTE *)(v5 + 1762) = 1;
  *(_BYTE *)(v5 + 1763) = v6;
  *(_BYTE *)(v5 + 1741) = 1;
  *(_BYTE *)(v5 + 1764) = 1;
  *(_BYTE *)(v5 + 1770) = v6;
  *(_BYTE *)(v5 + 1771) = 0;
  *(_BYTE *)(v5 + 1773) = v6;
  *(_QWORD *)(v4 + 1688) = llvm::FixedVectorType::get();
  v8 = *((_DWORD *)this + 6);
  v9 = *((_DWORD *)this + 7);
  *(_BYTE *)(v4 + 1775) = v9 == 14;
  *(_BYTE *)(v4 + 1776) = v9 != 14;
  if (((v8 - 196624) > 0xB || ((1 << (v8 - 16)) & 0xE01) == 0) && (v8 - 65562) >= 2)
    v7 = 0;
  *(_BYTE *)(v4 + 1786) = v7;
  v10 = 1;
  *(_BYTE *)(v4 + 1794) = 1;
  *(_BYTE *)(v4 + 1797) = v9 > 14;
  if ((v8 - 196633) >= 3)
    v10 = (v8 - 65562) < 2;
  *(_BYTE *)(v4 + 1816) = v10;
  return v4;
}

void AGCLLVMG13TargetConfig::~AGCLLVMG13TargetConfig(AGCLLVMG13TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG13TargetLowerer::~AGCLLVMG13TargetLowerer(AGCLLVMG13TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG13TargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  llvm::Type **GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  llvm::Type *v15;
  llvm::Value *v16;
  llvm::Type **v17;
  llvm::Value *v18;
  llvm::Type *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  uint64_t LShr;
  uint64_t v25;
  llvm::Value *Cast;
  llvm::Value *v27;
  llvm::Value *Add;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  llvm::Value *v35;
  llvm::Value *v36;
  llvm::Value *v37;
  uint64_t v38;
  uint64_t v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  llvm::Value *v46;
  uint64_t v47;
  uint64_t v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::Value *v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  llvm::Value *v62;
  llvm::Value *v63;
  uint64_t v64;
  uint64_t v65;
  llvm::CmpInst **v66;
  llvm::Value *v67;
  llvm::Value *v68;
  llvm::Value *v69;
  uint64_t v70;
  uint64_t v71;
  llvm::CmpInst **v72;
  uint64_t v73;
  llvm::Value *ICmp;
  uint64_t v75;
  llvm::Value *v76;
  llvm::Value *Select;
  llvm::Type *v78;
  llvm::Value *NullValue;
  llvm::Value *v80;
  llvm::Value *InsertElement;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Value *v85;
  llvm::Value *v86;
  llvm::Type **v87;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  _BYTE v96[32];
  __int16 v97;
  __int128 v98;
  uint64_t v99;
  int v100;

  v98 = *(_OWORD *)a2;
  v99 = *(_QWORD *)(a2 + 16);
  if (v99)
    llvm::MetadataTracking::track();
  v100 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v98);
  if (v99)
    llvm::MetadataTracking::untrack();
  v7 = *(llvm::Type **)(a1 + 208);
  v97 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v96);
  v9 = *(llvm::Type **)(a1 + 208);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v96);
  v95 = 257;
  v13 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v12);
  v14 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, (uint64_t)GEP, 0, (uint64_t)v94);
  v15 = *(llvm::Type **)(a1 + 208);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v17 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v15, a3, v16, (const llvm::Twine *)v96);
  v95 = 257;
  v19 = AGCLLVMBuilder::tryDeducePointeeType(v17, v18);
  v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v19, (uint64_t)v17, 0, (uint64_t)v94);
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v22 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v14, v21, (const llvm::Twine *)v96);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v22, v23, (const llvm::Twine *)v94);
  v25 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v25, (uint64_t)v92);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v27, (const llvm::Twine *)v90);
  v29 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v30 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v29, (const llvm::Twine *)v96);
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v32 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v30, v31, (const llvm::Twine *)v94);
  v33 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v32, v33, (uint64_t)v92);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v36 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v35, (const llvm::Twine *)v96);
  v37 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v38 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v94);
  v39 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v38, v39, (uint64_t)v92);
  v41 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v42 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v40, v41, (const llvm::Twine *)v90);
  v43 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v42, v34);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v44, (const llvm::Twine *)v96);
  v46 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v47 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v94);
  v48 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v47, v48, (uint64_t)v92);
  v50 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v49, v50, (const llvm::Twine *)v90);
  v52 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v51, v34);
  v53 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v34);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v55 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v20, v54, (const llvm::Twine *)v96);
  v56 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v57 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v94);
  v58 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v59 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v57, v58, (uint64_t)v92);
  v60 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v59, v60, (const llvm::Twine *)v90);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v61, (const llvm::Twine *)v96);
  v63 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v64 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v62, v63, (const llvm::Twine *)v94);
  v65 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v66 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v64, v65, (uint64_t)v92);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = 257;
  v68 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v67, (const llvm::Twine *)v96);
  v69 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v70 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v68, v69, (const llvm::Twine *)v94);
  v71 = *(_QWORD *)(a1 + 200);
  v93 = 257;
  v72 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v70, v71, (uint64_t)v92);
  v73 = llvm::ConstantInt::get();
  v97 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v66, v73, (uint64_t)v96);
  v75 = llvm::ConstantInt::get();
  v95 = 257;
  v76 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v72, v75, (uint64_t)v94);
  v93 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v76, (const llvm::Twine *)v92);
  v97 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v78);
  v97 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v43, v80, (const llvm::Twine *)v96);
  v97 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v52, v82, (const llvm::Twine *)v96);
  v97 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v83, v53, v84, (const llvm::Twine *)v96);
  v97 = 257;
  v86 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v85, Select, v86, (const llvm::Twine *)v96);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v87, a4, 0);
}

uint64_t AGCLLVMG13TargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *Sub;
  llvm::Value *v23;
  llvm::Type **Add;
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[32];
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v32 = *(_OWORD *)a2;
  v33 = *(_QWORD *)(a2 + 16);
  if (v33)
    llvm::MetadataTracking::track();
  v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  v14 = a1[25];
  v27 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  v20 = a1[25];
  v27 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG13TargetLowerer::buildImageSampleCountExtract(_QWORD *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *v9;
  llvm::Type **GEP;
  llvm::Value *v11;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t LShr;
  uint64_t v18;
  llvm::Value *Cast;
  llvm::Value *v20;
  llvm::Type **Shl;
  _BYTE v23[32];
  __int16 v24;
  _BYTE v25[32];
  __int16 v26;
  _BYTE v27[32];
  __int16 v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  if (v30)
    llvm::MetadataTracking::track();
  v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  v26 = 257;
  v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  v18 = a1[25];
  v24 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG13TargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Type **Cast;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  v14 = a1[25];
  v18 = 257;
  Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG13TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG13TargetLowerer::supportsPrimitiveID(AGCLLVMG13TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG13TargetLowerer::supportsBarycentricCoords(AGCLLVMG13TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG13TargetLowerer::supportsMeshShading(AGCLLVMG13TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG13TargetLowerer::needsShaderDepthClamp(AGCLLVMG13TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG13TargetLowerer::maxImageDimLog2(AGCLLVMG13TargetLowerer *this)
{
  return 14;
}

void AGCLLVMG13TargetLowerer::createGPUVAMasks(int *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  int *v24;
  char *v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  int *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  BOOL v54;
  uint64_t *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;

  *(_QWORD *)(a3 + 8) = 0;
  v6 = (_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v7 = *a1;
  v8 = *(unsigned __int16 *)((char *)a1 - v7 + 4);
  v9 = *(unsigned int *)((char *)a1 + v8);
  v10 = (int *)((char *)a1 + v8 + v9);
  v11 = *(unsigned __int16 *)((char *)v10 - *v10 + 12);
  v12 = (char *)v10 + v11;
  v13 = *(unsigned int *)((char *)v10 + v11);
  v14 = *(unsigned int *)&v12[v13];
  if ((_DWORD)v14)
  {
    v15 = 4 * v14;
    if (a2)
      v16 = -524484864;
    else
      v16 = 65280;
    v17 = v8 + v9 + v11 + v13;
    do
    {
      v18 = *(unsigned int *)((char *)a1 + v17 + 4);
      v19 = (char *)a1 + v17 + v18 - *(int *)((char *)a1 + v17 + v18 + 4);
      if (*((unsigned __int16 *)v19 + 2) >= 7u && (v20 = *((unsigned __int16 *)v19 + 5)) != 0)
        v21 = *(int *)((char *)a1 + v17 + v18 + v20 + 4);
      else
        v21 = 0;
      v64 = v21;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v21, &v64)+ 8) = v16;
      v17 += 4;
      v15 -= 4;
    }
    while (v15);
    v22 = -(uint64_t)*a1;
  }
  else
  {
    v22 = -v7;
  }
  v23 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v22 + 4));
  v24 = (int *)((char *)v23 + *v23);
  v25 = (char *)v24 - *v24;
  v26 = (unsigned int *)((char *)v24
                       + *((unsigned __int16 *)v25 + 4)
                       + *(unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 4)));
  v27 = *v26;
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = 4 * v27;
    while (1)
    {
      v30 = v26[v28 / 4 + 1];
      v31 = v30 - *(int *)((char *)&v26[v28 / 4 + 1] + v30);
      v32 = (char *)&v26[v28 / 4] + v31;
      v33 = *((unsigned __int16 *)v32 + 2);
      if (v33 < 5)
        break;
      v34 = *((unsigned __int16 *)v32 + 4);
      if (!v34)
      {
        v36 = (uint64_t)v26 + v30 + v28 + 4;
        v37 = (char *)&v26[v28 / 4] + v31;
LABEL_22:
        v38 = v37 + 4;
        if (v33 >= 0xB)
        {
          v39 = *((unsigned __int16 *)v38 + 5);
          if (v39)
          {
            v35 = *(_DWORD *)(v36 + v39);
            goto LABEL_26;
          }
        }
        break;
      }
      if (!*((_BYTE *)&v26[v28 / 4 + 1] + v30 + v34))
      {
        v36 = (uint64_t)v26 + v30 + v28 + 4;
        v37 = (char *)&v26[v28 / 4] + v31;
        goto LABEL_22;
      }
      v28 += 4;
      if (v29 == v28)
        goto LABEL_19;
    }
    v35 = 0;
  }
  else
  {
LABEL_19:
    v35 = -1;
  }
LABEL_26:
  v40 = (unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 12));
  v41 = *v40;
  v43 = (unsigned int *)((char *)v40 + v41 + 4);
  v42 = *(unsigned int *)((char *)v40 + v41);
  if ((_DWORD)v42)
  {
    v44 = &v43[v42];
    do
    {
      v45 = (int *)((char *)v43 + *v43);
      v46 = (unsigned __int16 *)((char *)v45 - *v45);
      v47 = *v46;
      if (v47 >= 5 && v46[2] && *((_BYTE *)v45 + v46[2]) == 110)
      {
        if (v47 <= 6)
        {
          v48 = 0;
          v49 = 0;
          v63 = 0;
        }
        else
        {
          v48 = v46[3] ? *(int *)((char *)v45 + v46[3]) : 0;
          v63 = v48;
          if (v47 >= 9 && (v50 = v46[4]) != 0)
            v49 = *(int *)((char *)v45 + v50);
          else
            v49 = 0;
        }
        v51 = *v6;
        if (*v6)
        {
          v52 = v6;
          do
          {
            v53 = *(_DWORD *)(v51 + 28);
            v54 = v53 >= v48;
            if (v53 >= v48)
              v55 = (uint64_t *)v51;
            else
              v55 = (uint64_t *)(v51 + 8);
            if (v54)
              v52 = (_QWORD *)v51;
            v51 = *v55;
          }
          while (*v55);
          if (v52 != v6 && v48 >= *((_DWORD *)v52 + 7))
          {
            v56 = (v49 + v35) << 7;
            v57 = v56 & 0x7F00;
            v58 = (v57 & 0xFFFF7FFF | ((((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2)) >> 1)) & 1) << 15)) ^ 0x8000;
            if (a2)
            {
              v59 = 0;
              v60 = v58 | 0xBC0000;
              v61 = v60 >> 8;
              v62 = 43;
              do
              {
                v61 ^= ((int)(v61 >> v59 << 31) >> 31) & v62;
                v62 *= 2;
                ++v59;
              }
              while (v59 != 19);
              v58 = v60 & 0x7FFFFFF | ((v61 >> 19) << 27);
            }
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v48, &v63)+ 8) = v58;
          }
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
}

uint64_t AGCLLVMG13TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5, int a6)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v13;

  v6 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (a6)
  {
    v7 = a3;
    if (v6 == 18)
      v7 = **(_QWORD **)(a3 + 16);
    if (a2 == 1)
      v8 = 3;
    else
      v8 = a2;
    if (a2 == 12)
      v9 = 16;
    else
      v9 = v8;
    if (a2 == 13)
      v10 = 15;
    else
      v10 = v9;
    if ((a5 & 1) != 0)
      v10 = a2;
    if (v7 == *(_QWORD *)(a1 + 168) && a4 != 0)
      a2 = v10;
  }
  if (v6 == 18)
    a3 = **(_QWORD **)(a3 + 16);
  v13 = a2 == 1 && a3 == *(_QWORD *)(a1 + 168);
  return v13 | (a2 << 16);
}

uint64_t AGCLLVMG13TargetLowerer::buildShuffleAndFill(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;

  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  v12 = AGCLLVMGen5TargetLowerer::buildShuffleAndFillEmulation(a1, &v14, a3, a4, a5, a6);
  if (v15)
    llvm::MetadataTracking::untrack();
  return v12;
}

uint64_t AGCLLVMG14TargetConfig::createTargetLowerer(const char **this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  AGCLLVMGen5TargetLowerer::AGCLLVMGen5TargetLowerer((AGCLLVMGen5TargetLowerer *)v4, a2, this);
  *(_QWORD *)v5 = &off_1E7EC2B88;
  *(_BYTE *)(v5 + 1744) = 0;
  *(_WORD *)(v5 + 1762) = 257;
  *(_BYTE *)(v5 + 1741) = 1;
  *(_BYTE *)(v5 + 1764) = 1;
  *(_WORD *)(v5 + 1770) = 1;
  *(_BYTE *)(v5 + 1773) = 1;
  *(_QWORD *)(v4 + 1688) = llvm::FixedVectorType::get();
  *(_BYTE *)(v4 + 1787) = *(_DWORD *)(v4 + 1824) == 18;
  *(_BYTE *)(v4 + 1794) = 1;
  *(_BYTE *)(v4 + 1797) = 1;
  return v4;
}

void AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig(AGCLLVMG14TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG14TargetLowerer::~AGCLLVMG14TargetLowerer(AGCLLVMG14TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG14TargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  uint64_t v60;
  uint64_t v61;
  llvm::CmpInst **v62;
  llvm::Value *v63;
  llvm::Value *v64;
  llvm::Value *v65;
  uint64_t v66;
  uint64_t v67;
  llvm::CmpInst **v68;
  uint64_t v69;
  llvm::Value *ICmp;
  uint64_t v71;
  llvm::Value *v72;
  llvm::Value *Select;
  llvm::Type *v74;
  llvm::Value *NullValue;
  llvm::Value *v76;
  llvm::Value *InsertElement;
  llvm::Value *v78;
  llvm::Value *v79;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Type **v83;
  _BYTE v86[32];
  __int16 v87;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  __int128 v94;
  uint64_t v95;
  int v96;

  v94 = *(_OWORD *)a2;
  v95 = *(_QWORD *)(a2 + 16);
  if (v95)
    llvm::MetadataTracking::track();
  v96 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v94);
  if (v95)
    llvm::MetadataTracking::untrack();
  v7 = *(llvm::Type **)(a1 + 208);
  v93 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v92);
  v9 = *(llvm::Type **)(a1 + 208);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v92);
  v91 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v9, GEP, 0, (uint64_t)v90);
  v13 = *(llvm::Type **)(a1 + 208);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v13, a3, v14, (const llvm::Twine *)v92);
  v91 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, v15, 0, (uint64_t)v90);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v12, v17, (const llvm::Twine *)v92);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v90);
  v21 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v21, (uint64_t)v88);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v23, (const llvm::Twine *)v86);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v25, (const llvm::Twine *)v92);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v26, v27, (const llvm::Twine *)v90);
  v29 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v28, v29, (uint64_t)v88);
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v31, (const llvm::Twine *)v92);
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v34 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v32, v33, (const llvm::Twine *)v90);
  v35 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v34, v35, (uint64_t)v88);
  v37 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v86);
  v39 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v38, v30);
  v40 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v41 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v40, (const llvm::Twine *)v92);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v43 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v41, v42, (const llvm::Twine *)v90);
  v44 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v45 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v43, v44, (uint64_t)v88);
  v46 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v86);
  v48 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v47, v30);
  v49 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v30);
  v50 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v16, v50, (const llvm::Twine *)v92);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v53 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v51, v52, (const llvm::Twine *)v90);
  v54 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v55 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v53, v54, (uint64_t)v88);
  v56 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v86);
  v57 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v57, (const llvm::Twine *)v92);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v60 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v90);
  v61 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v62 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v60, v61, (uint64_t)v88);
  v63 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v63, (const llvm::Twine *)v92);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v66 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v64, v65, (const llvm::Twine *)v90);
  v67 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v68 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v66, v67, (uint64_t)v88);
  v69 = llvm::ConstantInt::get();
  v93 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v62, v69, (uint64_t)v92);
  v71 = llvm::ConstantInt::get();
  v91 = 257;
  v72 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v68, v71, (uint64_t)v90);
  v89 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v72, (const llvm::Twine *)v88);
  v93 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v74);
  v93 = 257;
  v76 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v39, v76, (const llvm::Twine *)v92);
  v93 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  v79 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v48, v78, (const llvm::Twine *)v92);
  v93 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v79, v49, v80, (const llvm::Twine *)v92);
  v93 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v81, Select, v82, (const llvm::Twine *)v92);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v83, a4, 0);
}

uint64_t AGCLLVMG14TargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *Sub;
  llvm::Value *v23;
  llvm::Type **Add;
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[32];
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v32 = *(_OWORD *)a2;
  v33 = *(_QWORD *)(a2 + 16);
  if (v33)
    llvm::MetadataTracking::track();
  v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  v14 = a1[25];
  v27 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  v20 = a1[25];
  v27 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG14TargetLowerer::buildImageSampleCountExtract(_QWORD *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *v9;
  llvm::Type **GEP;
  llvm::Value *v11;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t LShr;
  uint64_t v18;
  llvm::Value *Cast;
  llvm::Value *v20;
  llvm::Type **Shl;
  _BYTE v23[32];
  __int16 v24;
  _BYTE v25[32];
  __int16 v26;
  _BYTE v27[32];
  __int16 v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  if (v30)
    llvm::MetadataTracking::track();
  v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  v26 = 257;
  v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  v18 = a1[25];
  v24 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG14TargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Type **Cast;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  v14 = a1[25];
  v18 = 257;
  Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG14TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG14TargetLowerer::supportsPrimitiveID(AGCLLVMG14TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14TargetLowerer::supportsBarycentricCoords(AGCLLVMG14TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14TargetLowerer::supportsMeshShading(AGCLLVMG14TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14TargetLowerer::needsShaderDepthClamp(AGCLLVMG14TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14TargetLowerer::maxImageDimLog2(AGCLLVMG14TargetLowerer *this)
{
  return 14;
}

void AGCLLVMG14TargetLowerer::createGPUVAMasks(int *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  int *v24;
  char *v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  int *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  BOOL v54;
  uint64_t *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;

  *(_QWORD *)(a3 + 8) = 0;
  v6 = (_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v7 = *a1;
  v8 = *(unsigned __int16 *)((char *)a1 - v7 + 4);
  v9 = *(unsigned int *)((char *)a1 + v8);
  v10 = (int *)((char *)a1 + v8 + v9);
  v11 = *(unsigned __int16 *)((char *)v10 - *v10 + 12);
  v12 = (char *)v10 + v11;
  v13 = *(unsigned int *)((char *)v10 + v11);
  v14 = *(unsigned int *)&v12[v13];
  if ((_DWORD)v14)
  {
    v15 = 4 * v14;
    if (a2)
      v16 = -524484864;
    else
      v16 = 65280;
    v17 = v8 + v9 + v11 + v13;
    do
    {
      v18 = *(unsigned int *)((char *)a1 + v17 + 4);
      v19 = (char *)a1 + v17 + v18 - *(int *)((char *)a1 + v17 + v18 + 4);
      if (*((unsigned __int16 *)v19 + 2) >= 7u && (v20 = *((unsigned __int16 *)v19 + 5)) != 0)
        v21 = *(int *)((char *)a1 + v17 + v18 + v20 + 4);
      else
        v21 = 0;
      v64 = v21;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v21, &v64)+ 8) = v16;
      v17 += 4;
      v15 -= 4;
    }
    while (v15);
    v22 = -(uint64_t)*a1;
  }
  else
  {
    v22 = -v7;
  }
  v23 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v22 + 4));
  v24 = (int *)((char *)v23 + *v23);
  v25 = (char *)v24 - *v24;
  v26 = (unsigned int *)((char *)v24
                       + *((unsigned __int16 *)v25 + 4)
                       + *(unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 4)));
  v27 = *v26;
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = 4 * v27;
    while (1)
    {
      v30 = v26[v28 / 4 + 1];
      v31 = v30 - *(int *)((char *)&v26[v28 / 4 + 1] + v30);
      v32 = (char *)&v26[v28 / 4] + v31;
      v33 = *((unsigned __int16 *)v32 + 2);
      if (v33 < 5)
        break;
      v34 = *((unsigned __int16 *)v32 + 4);
      if (!v34)
      {
        v36 = (uint64_t)v26 + v30 + v28 + 4;
        v37 = (char *)&v26[v28 / 4] + v31;
LABEL_22:
        v38 = v37 + 4;
        if (v33 >= 0xB)
        {
          v39 = *((unsigned __int16 *)v38 + 5);
          if (v39)
          {
            v35 = *(_DWORD *)(v36 + v39);
            goto LABEL_26;
          }
        }
        break;
      }
      if (!*((_BYTE *)&v26[v28 / 4 + 1] + v30 + v34))
      {
        v36 = (uint64_t)v26 + v30 + v28 + 4;
        v37 = (char *)&v26[v28 / 4] + v31;
        goto LABEL_22;
      }
      v28 += 4;
      if (v29 == v28)
        goto LABEL_19;
    }
    v35 = 0;
  }
  else
  {
LABEL_19:
    v35 = -1;
  }
LABEL_26:
  v40 = (unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 12));
  v41 = *v40;
  v43 = (unsigned int *)((char *)v40 + v41 + 4);
  v42 = *(unsigned int *)((char *)v40 + v41);
  if ((_DWORD)v42)
  {
    v44 = &v43[v42];
    do
    {
      v45 = (int *)((char *)v43 + *v43);
      v46 = (unsigned __int16 *)((char *)v45 - *v45);
      v47 = *v46;
      if (v47 >= 5 && v46[2] && *((_BYTE *)v45 + v46[2]) == 110)
      {
        if (v47 <= 6)
        {
          v48 = 0;
          v49 = 0;
          v63 = 0;
        }
        else
        {
          v48 = v46[3] ? *(int *)((char *)v45 + v46[3]) : 0;
          v63 = v48;
          if (v47 >= 9 && (v50 = v46[4]) != 0)
            v49 = *(int *)((char *)v45 + v50);
          else
            v49 = 0;
        }
        v51 = *v6;
        if (*v6)
        {
          v52 = v6;
          do
          {
            v53 = *(_DWORD *)(v51 + 28);
            v54 = v53 >= v48;
            if (v53 >= v48)
              v55 = (uint64_t *)v51;
            else
              v55 = (uint64_t *)(v51 + 8);
            if (v54)
              v52 = (_QWORD *)v51;
            v51 = *v55;
          }
          while (*v55);
          if (v52 != v6 && v48 >= *((_DWORD *)v52 + 7))
          {
            v56 = (v49 + v35) << 7;
            v57 = v56 & 0x7F00;
            v58 = (v57 & 0xFFFF7FFF | ((((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2)) >> 1)) & 1) << 15)) ^ 0x8000;
            if (a2)
            {
              v59 = 0;
              v60 = v58 | 0xBC0000;
              v61 = v60 >> 8;
              v62 = 43;
              do
              {
                v61 ^= ((int)(v61 >> v59 << 31) >> 31) & v62;
                v62 *= 2;
                ++v59;
              }
              while (v59 != 19);
              v58 = v60 & 0x7FFFFFF | ((v61 >> 19) << 27);
            }
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v48, &v63)+ 8) = v58;
          }
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
}

uint64_t AGCLLVMG14TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5, int a6)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v13;

  v6 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (a6)
  {
    v7 = a3;
    if (v6 == 18)
      v7 = **(_QWORD **)(a3 + 16);
    if (a2 == 1)
      v8 = 3;
    else
      v8 = a2;
    if (a2 == 12)
      v9 = 16;
    else
      v9 = v8;
    if (a2 == 13)
      v10 = 15;
    else
      v10 = v9;
    if ((a5 & 1) != 0)
      v10 = a2;
    if (v7 == *(_QWORD *)(a1 + 168) && a4 != 0)
      a2 = v10;
  }
  if (v6 == 18)
    a3 = **(_QWORD **)(a3 + 16);
  v13 = a2 == 1 && a3 == *(_QWORD *)(a1 + 168);
  return v13 | (a2 << 16);
}

uint64_t *AGCLLVMCreateG14TargetConfig(int a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  if ((v1 & 1) == 0)
  {
    v11 = a1;
    a1 = v11;
    if (v7)
    {
      qword_1EF8E7F30 = 0;
      qword_1EF8E7F10 = 0x1100010011;
      qword_1EF8E7F18 = (uint64_t)"/metal_rt_precise.metallib";
      qword_1EF8E7F20 = 0x101010000010100;
      unk_1EF8E7F28 = 0x400000007CLL;
      qword_1EF8E7F00 = (uint64_t)"agx2-apple-ios";
      unk_1EF8E7F08 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pA0 = (uint64_t)&off_1E7EC2A80;
      __cxa_atexit((void (*)(void *))AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig, &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pA0, &dword_1C3C54000);
      a1 = v11;
    }
  }
  if ((v2 & 1) == 0)
  {
    v12 = a1;
    a1 = v12;
    if (v8)
    {
      qword_1EF8E7748 = 0;
      qword_1EF8E7728 = 0x1100030011;
      qword_1EF8E7730 = (uint64_t)"/metal_rt_precise.metallib";
      qword_1EF8E7738 = 0x101010000010100;
      unk_1EF8E7740 = 0x400000007CLL;
      qword_1EF8E7718 = (uint64_t)"agx2-apple-ios";
      unk_1EF8E7720 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pB0 = (uint64_t)&off_1E7EC2A80;
      __cxa_atexit((void (*)(void *))AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig, &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pB0, &dword_1C3C54000);
      a1 = v12;
    }
  }
  if ((v3 & 1) == 0)
  {
    v13 = a1;
    a1 = v13;
    if (v9)
    {
      qword_1EF8E7EB0 = 0;
      qword_1EF8E7E90 = 0x1200010012;
      qword_1EF8E7E98 = (uint64_t)"/metal_rt_precise.metallib";
      qword_1EF8E7EA0 = 0x101010000010100;
      unk_1EF8E7EA8 = 0x400000007CLL;
      qword_1EF8E7E80 = (uint64_t)"agx2-apple-ios";
      unk_1EF8E7E88 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gA0 = (uint64_t)&off_1E7EC2A80;
      __cxa_atexit((void (*)(void *))AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig, &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gA0, &dword_1C3C54000);
      a1 = v13;
    }
  }
  if ((v4 & 1) == 0)
  {
    v14 = a1;
    a1 = v14;
    if (v10)
    {
      qword_1EF8E7EF0 = 0;
      qword_1EF8E7ED0 = 0x1200030012;
      qword_1EF8E7ED8 = (uint64_t)"/metal_rt_precise.metallib";
      qword_1EF8E7EE0 = 0x101010000010100;
      unk_1EF8E7EE8 = 0x400000007CLL;
      qword_1EF8E7EC0 = (uint64_t)"agx2-apple-ios";
      unk_1EF8E7EC8 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gB0 = (uint64_t)&off_1E7EC2A80;
      __cxa_atexit((void (*)(void *))AGCLLVMG14TargetConfig::~AGCLLVMG14TargetConfig, &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gB0, &dword_1C3C54000);
      a1 = v14;
    }
  }
  v5 = &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pA0;
  if (a1 == 196625)
    v5 = &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14pB0;
  if (a1 == 196626)
    v5 = &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gB0;
  if (a1 == 65554)
    return &AGCLLVMCreateG14TargetConfig(AGCTargetArch)::g14gA0;
  else
    return v5;
}

uint64_t AGCLLVMG14XTargetConfig::createTargetLowerer(const char **this, llvm::LLVMContext *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = operator new();
  AGCLLVMGen5TargetLowerer::AGCLLVMGen5TargetLowerer((AGCLLVMGen5TargetLowerer *)v4, a2, this);
  *(_QWORD *)v5 = &off_1E7EC33F8;
  *(_BYTE *)(v5 + 1744) = 0;
  *(_WORD *)(v5 + 1762) = 257;
  *(_BYTE *)(v5 + 1741) = 1;
  *(_BYTE *)(v5 + 1764) = 1;
  *(_WORD *)(v5 + 1770) = 1;
  *(_BYTE *)(v5 + 1773) = 1;
  *(_QWORD *)(v4 + 1688) = llvm::FixedVectorType::get();
  *(_BYTE *)(v4 + 1787) = 1;
  *(_BYTE *)(v4 + 1794) = 1;
  *(_BYTE *)(v4 + 1797) = 1;
  *(_BYTE *)(v4 + 1816) = ((_DWORD)this[3] & 0xFFFDFFFF) == 65557;
  return v4;
}

void AGCLLVMG14XTargetConfig::~AGCLLVMG14XTargetConfig(AGCLLVMG14XTargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG14XTargetLowerer::~AGCLLVMG14XTargetLowerer(AGCLLVMG14XTargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG14XTargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  uint64_t v60;
  uint64_t v61;
  llvm::CmpInst **v62;
  llvm::Value *v63;
  llvm::Value *v64;
  llvm::Value *v65;
  uint64_t v66;
  uint64_t v67;
  llvm::CmpInst **v68;
  uint64_t v69;
  llvm::Value *ICmp;
  uint64_t v71;
  llvm::Value *v72;
  llvm::Value *Select;
  llvm::Type *v74;
  llvm::Value *NullValue;
  llvm::Value *v76;
  llvm::Value *InsertElement;
  llvm::Value *v78;
  llvm::Value *v79;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Type **v83;
  _BYTE v86[32];
  __int16 v87;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  __int128 v94;
  uint64_t v95;
  int v96;

  v94 = *(_OWORD *)a2;
  v95 = *(_QWORD *)(a2 + 16);
  if (v95)
    llvm::MetadataTracking::track();
  v96 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v94);
  if (v95)
    llvm::MetadataTracking::untrack();
  v7 = *(llvm::Type **)(a1 + 208);
  v93 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v92);
  v9 = *(llvm::Type **)(a1 + 208);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v92);
  v91 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v9, GEP, 0, (uint64_t)v90);
  v13 = *(llvm::Type **)(a1 + 208);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v13, a3, v14, (const llvm::Twine *)v92);
  v91 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, v15, 0, (uint64_t)v90);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v12, v17, (const llvm::Twine *)v92);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v90);
  v21 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v21, (uint64_t)v88);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v23, (const llvm::Twine *)v86);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v25, (const llvm::Twine *)v92);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v26, v27, (const llvm::Twine *)v90);
  v29 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v28, v29, (uint64_t)v88);
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v31, (const llvm::Twine *)v92);
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v34 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v32, v33, (const llvm::Twine *)v90);
  v35 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v34, v35, (uint64_t)v88);
  v37 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v86);
  v39 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v38, v30);
  v40 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v41 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v40, (const llvm::Twine *)v92);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v43 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v41, v42, (const llvm::Twine *)v90);
  v44 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v45 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v43, v44, (uint64_t)v88);
  v46 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v86);
  v48 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v47, v30);
  v49 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v30);
  v50 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v16, v50, (const llvm::Twine *)v92);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v53 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v51, v52, (const llvm::Twine *)v90);
  v54 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v55 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v53, v54, (uint64_t)v88);
  v56 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v86);
  v57 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v57, (const llvm::Twine *)v92);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v60 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v90);
  v61 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v62 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v60, v61, (uint64_t)v88);
  v63 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v63, (const llvm::Twine *)v92);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v66 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v64, v65, (const llvm::Twine *)v90);
  v67 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v68 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v66, v67, (uint64_t)v88);
  v69 = llvm::ConstantInt::get();
  v93 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v62, v69, (uint64_t)v92);
  v71 = llvm::ConstantInt::get();
  v91 = 257;
  v72 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v68, v71, (uint64_t)v90);
  v89 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v72, (const llvm::Twine *)v88);
  v93 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v74);
  v93 = 257;
  v76 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v39, v76, (const llvm::Twine *)v92);
  v93 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  v79 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v48, v78, (const llvm::Twine *)v92);
  v93 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v79, v49, v80, (const llvm::Twine *)v92);
  v93 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v81, Select, v82, (const llvm::Twine *)v92);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v83, a4, 0);
}

uint64_t AGCLLVMG14XTargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *Sub;
  llvm::Value *v23;
  llvm::Type **Add;
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[32];
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v32 = *(_OWORD *)a2;
  v33 = *(_QWORD *)(a2 + 16);
  if (v33)
    llvm::MetadataTracking::track();
  v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  v14 = a1[25];
  v27 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  v20 = a1[25];
  v27 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG14XTargetLowerer::buildImageSampleCountExtract(_QWORD *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *v9;
  llvm::Type **GEP;
  llvm::Value *v11;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t LShr;
  uint64_t v18;
  llvm::Value *Cast;
  llvm::Value *v20;
  llvm::Type **Shl;
  _BYTE v23[32];
  __int16 v24;
  _BYTE v25[32];
  __int16 v26;
  _BYTE v27[32];
  __int16 v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  if (v30)
    llvm::MetadataTracking::track();
  v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  v26 = 257;
  v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  v18 = a1[25];
  v24 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG14XTargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Type **Cast;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  v14 = a1[25];
  v18 = 257;
  Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG14XTargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Type **Shl;
  uint64_t result;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::Value *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::CmpInst **v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::CmpInst **v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::CmpInst **v44;
  uint64_t v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::CmpInst **v52;
  uint64_t v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::Value *v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Type **v61;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  result = llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), Shl, a4, 0);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v23 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v24 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v23, (const llvm::Twine *)v70);
    v25 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v26 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v24, v25, (const llvm::Twine *)v68);
    v27 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v28 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v26, v27, (uint64_t)v66);
    v29 = llvm::ConstantInt::get();
    v65 = 257;
    v30 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v28, v29, (uint64_t)v64);
    v31 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v31, (const llvm::Twine *)v70);
    v33 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v34 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v32, v33, (const llvm::Twine *)v68);
    v35 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v36 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v34, v35, (uint64_t)v66);
    v37 = llvm::ConstantInt::get();
    v65 = 257;
    v38 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v36, v37, (uint64_t)v64);
    v39 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v39, (const llvm::Twine *)v70);
    v41 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v42 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v40, v41, (const llvm::Twine *)v68);
    v43 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v44 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v42, v43, (uint64_t)v66);
    v45 = llvm::ConstantInt::get();
    v65 = 257;
    v46 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v44, v45, (uint64_t)v64);
    v47 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v48 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v47, (const llvm::Twine *)v70);
    v49 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v50 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v48, v49, (const llvm::Twine *)v68);
    v51 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v52 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v50, v51, (uint64_t)v66);
    v53 = llvm::ConstantInt::get();
    v65 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v52, v53, (uint64_t)v64);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v38, v46, (const llvm::Twine *)v70);
    v71 = 257;
    v56 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v55, v54, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v57 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v30, v56, (const llvm::Twine *)v70);
    v58 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v59 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v57, v58, (uint64_t)v68);
    v60 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v61 = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v59, v60, (const llvm::Twine *)v70);
    return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v61, a4, 0);
  }
  return result;
}

uint64_t AGCLLVMG14XTargetLowerer::supportsPrimitiveID(AGCLLVMG14XTargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14XTargetLowerer::supportsBarycentricCoords(AGCLLVMG14XTargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14XTargetLowerer::supportsMeshShading(AGCLLVMG14XTargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14XTargetLowerer::needsShaderDepthClamp(AGCLLVMG14XTargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG14XTargetLowerer::maxImageDimLog2(AGCLLVMG14XTargetLowerer *this)
{
  return 14;
}

void AGCLLVMG14XTargetLowerer::createGPUVAMasks(int *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  int *v24;
  char *v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  int *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  BOOL v54;
  uint64_t *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;

  *(_QWORD *)(a3 + 8) = 0;
  v6 = (_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v7 = *a1;
  v8 = *(unsigned __int16 *)((char *)a1 - v7 + 4);
  v9 = *(unsigned int *)((char *)a1 + v8);
  v10 = (int *)((char *)a1 + v8 + v9);
  v11 = *(unsigned __int16 *)((char *)v10 - *v10 + 12);
  v12 = (char *)v10 + v11;
  v13 = *(unsigned int *)((char *)v10 + v11);
  v14 = *(unsigned int *)&v12[v13];
  if ((_DWORD)v14)
  {
    v15 = 4 * v14;
    if (a2)
      v16 = -524484864;
    else
      v16 = 65280;
    v17 = v8 + v9 + v11 + v13;
    do
    {
      v18 = *(unsigned int *)((char *)a1 + v17 + 4);
      v19 = (char *)a1 + v17 + v18 - *(int *)((char *)a1 + v17 + v18 + 4);
      if (*((unsigned __int16 *)v19 + 2) >= 7u && (v20 = *((unsigned __int16 *)v19 + 5)) != 0)
        v21 = *(int *)((char *)a1 + v17 + v18 + v20 + 4);
      else
        v21 = 0;
      v64 = v21;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v21, &v64)+ 8) = v16;
      v17 += 4;
      v15 -= 4;
    }
    while (v15);
    v22 = -(uint64_t)*a1;
  }
  else
  {
    v22 = -v7;
  }
  v23 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v22 + 4));
  v24 = (int *)((char *)v23 + *v23);
  v25 = (char *)v24 - *v24;
  v26 = (unsigned int *)((char *)v24
                       + *((unsigned __int16 *)v25 + 4)
                       + *(unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 4)));
  v27 = *v26;
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = 4 * v27;
    while (1)
    {
      v30 = v26[v28 / 4 + 1];
      v31 = v30 - *(int *)((char *)&v26[v28 / 4 + 1] + v30);
      v32 = (char *)&v26[v28 / 4] + v31;
      v33 = *((unsigned __int16 *)v32 + 2);
      if (v33 < 5)
        break;
      v34 = *((unsigned __int16 *)v32 + 4);
      if (!v34)
      {
        v36 = (uint64_t)v26 + v30 + v28 + 4;
        v37 = (char *)&v26[v28 / 4] + v31;
LABEL_22:
        v38 = v37 + 4;
        if (v33 >= 0xB)
        {
          v39 = *((unsigned __int16 *)v38 + 5);
          if (v39)
          {
            v35 = *(_DWORD *)(v36 + v39);
            goto LABEL_26;
          }
        }
        break;
      }
      if (!*((_BYTE *)&v26[v28 / 4 + 1] + v30 + v34))
      {
        v36 = (uint64_t)v26 + v30 + v28 + 4;
        v37 = (char *)&v26[v28 / 4] + v31;
        goto LABEL_22;
      }
      v28 += 4;
      if (v29 == v28)
        goto LABEL_19;
    }
    v35 = 0;
  }
  else
  {
LABEL_19:
    v35 = -1;
  }
LABEL_26:
  v40 = (unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 12));
  v41 = *v40;
  v43 = (unsigned int *)((char *)v40 + v41 + 4);
  v42 = *(unsigned int *)((char *)v40 + v41);
  if ((_DWORD)v42)
  {
    v44 = &v43[v42];
    do
    {
      v45 = (int *)((char *)v43 + *v43);
      v46 = (unsigned __int16 *)((char *)v45 - *v45);
      v47 = *v46;
      if (v47 >= 5 && v46[2] && *((_BYTE *)v45 + v46[2]) == 110)
      {
        if (v47 <= 6)
        {
          v48 = 0;
          v49 = 0;
          v63 = 0;
        }
        else
        {
          v48 = v46[3] ? *(int *)((char *)v45 + v46[3]) : 0;
          v63 = v48;
          if (v47 >= 9 && (v50 = v46[4]) != 0)
            v49 = *(int *)((char *)v45 + v50);
          else
            v49 = 0;
        }
        v51 = *v6;
        if (*v6)
        {
          v52 = v6;
          do
          {
            v53 = *(_DWORD *)(v51 + 28);
            v54 = v53 >= v48;
            if (v53 >= v48)
              v55 = (uint64_t *)v51;
            else
              v55 = (uint64_t *)(v51 + 8);
            if (v54)
              v52 = (_QWORD *)v51;
            v51 = *v55;
          }
          while (*v55);
          if (v52 != v6 && v48 >= *((_DWORD *)v52 + 7))
          {
            v56 = (v49 + v35) << 7;
            v57 = v56 & 0x7F00;
            v58 = (v57 & 0xFFFF7FFF | ((((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2)) >> 1)) & 1) << 15)) ^ 0x8000;
            if (a2)
            {
              v59 = 0;
              v60 = v58 | 0xBC0000;
              v61 = v60 >> 8;
              v62 = 43;
              do
              {
                v61 ^= ((int)(v61 >> v59 << 31) >> 31) & v62;
                v62 *= 2;
                ++v59;
              }
              while (v59 != 19);
              v58 = v60 & 0x7FFFFFF | ((v61 >> 19) << 27);
            }
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v48, &v63)+ 8) = v58;
          }
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
}

uint64_t AGCLLVMG14XTargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5, int a6)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v13;

  v6 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (a6)
  {
    v7 = a3;
    if (v6 == 18)
      v7 = **(_QWORD **)(a3 + 16);
    if (a2 == 1)
      v8 = 3;
    else
      v8 = a2;
    if (a2 == 12)
      v9 = 16;
    else
      v9 = v8;
    if (a2 == 13)
      v10 = 15;
    else
      v10 = v9;
    if ((a5 & 1) != 0)
      v10 = a2;
    if (v7 == *(_QWORD *)(a1 + 168) && a4 != 0)
      a2 = v10;
  }
  if (v6 == 18)
    a3 = **(_QWORD **)(a3 + 16);
  v13 = a2 == 1 && a3 == *(_QWORD *)(a1 + 168);
  return v13 | (a2 << 16);
}

uint64_t *AGCLLVMCreateG15TargetConfig(int a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t *v5;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  if ((v1 & 1) == 0)
  {
    v11 = a1;
    a1 = v11;
    if (v7)
    {
      AGCLLVMG15PB0TargetConfig::AGCLLVMG15PB0TargetConfig();
      __cxa_atexit((void (*)(void *))AGCLLVMG15PB0TargetConfig::~AGCLLVMG15PB0TargetConfig, &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15pB0, &dword_1C3C54000);
      a1 = v11;
    }
  }
  if ((v2 & 1) == 0)
  {
    v12 = a1;
    a1 = v12;
    if (v8)
    {
      AGCLLVMG15GA0TargetConfig::AGCLLVMG15GA0TargetConfig();
      __cxa_atexit((void (*)(void *))AGCLLVMG15GA0TargetConfig::~AGCLLVMG15GA0TargetConfig, &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gA0, &dword_1C3C54000);
      a1 = v12;
    }
  }
  if ((v3 & 1) == 0)
  {
    v13 = a1;
    a1 = v13;
    if (v9)
    {
      AGCLLVMG15GB0TargetConfig::AGCLLVMG15GB0TargetConfig();
      __cxa_atexit((void (*)(void *))AGCLLVMG15GB0TargetConfig::~AGCLLVMG15GB0TargetConfig, &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gB0, &dword_1C3C54000);
      a1 = v13;
    }
  }
  if ((v4 & 1) == 0)
  {
    v14 = a1;
    a1 = v14;
    if (v10)
    {
      AGCLLVMG15GC0TargetConfig::AGCLLVMG15GC0TargetConfig();
      __cxa_atexit((void (*)(void *))AGCLLVMG15GC0TargetConfig::~AGCLLVMG15GC0TargetConfig, &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gC0, &dword_1C3C54000);
      a1 = v14;
    }
  }
  v5 = &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15pB0;
  if (a1 == 65560)
    v5 = &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gA0;
  if (a1 == 196632)
    v5 = &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gB0;
  if (a1 == 327704)
    return &AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gC0;
  else
    return v5;
}

void AGCLLVMG15PB0TargetConfig::~AGCLLVMG15PB0TargetConfig(AGCLLVMG15PB0TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG15GA0TargetConfig::~AGCLLVMG15GA0TargetConfig(AGCLLVMG15GA0TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG15GB0TargetConfig::~AGCLLVMG15GB0TargetConfig(AGCLLVMG15GB0TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG15GC0TargetConfig::~AGCLLVMG15GC0TargetConfig(AGCLLVMG15GC0TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG15TargetLowerer::AGCLLVMG15TargetLowerer(AGCLLVMG15TargetLowerer *this, llvm::LLVMContext *a2, const AGCLLVMTargetConfig *a3)
{
  uint64_t v4;
  int v5;
  char v7;
  int v8;

  v4 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::AGCLLVMGen6TargetLowerer((uint64_t)this, a2, (uint64_t)a3);
  *(_QWORD *)v4 = &off_1E7EC3B60;
  v5 = *((_DWORD *)a3 + 6);
  if (v5 > 196631)
  {
    if (v5 != 327704 && v5 != 196632)
      goto LABEL_12;
    v7 = 1;
    v8 = 96;
LABEL_11:
    *(_DWORD *)(v4 + 884) = v8;
    *(_BYTE *)(v4 + 1785) = v7;
    goto LABEL_12;
  }
  if (v5 == 65560 || v5 == 196630)
  {
    v7 = 0;
    v8 = 62;
    goto LABEL_11;
  }
LABEL_12:
  *(_BYTE *)(v4 + 1792) = 1;
}

void AGCLLVMG15GA0TargetConfig::createTargetLowerer(AGCLLVMG15GA0TargetConfig *this, llvm::LLVMContext *a2)
{
  AGCLLVMG15TargetLowerer *v4;
  _QWORD *v5;

  v4 = (AGCLLVMG15TargetLowerer *)operator new();
  AGCLLVMG15TargetLowerer::AGCLLVMG15TargetLowerer(v4, a2, this);
  *v5 = &off_1E7EC43F8;
}

void AGCLLVMG15GA0TargetLowerer::~AGCLLVMG15GA0TargetLowerer(AGCLLVMG15GA0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG15GA0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMG15GA0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::CmpInst **v30;
  uint64_t v31;
  llvm::Value *Select;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::CmpInst **v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::CmpInst **v70;
  uint64_t v71;
  llvm::Value *ICmp;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Type *v76;
  llvm::Value *NullValue;
  llvm::Value *v78;
  llvm::Value *InsertElement;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Type **v85;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  __int128 v96;
  uint64_t v97;
  int v98;

  v96 = *(_OWORD *)a2;
  v97 = *(_QWORD *)(a2 + 16);
  if (v97)
    llvm::MetadataTracking::track();
  v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97)
    llvm::MetadataTracking::untrack();
  v7 = (llvm::Type *)a1[26];
  v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  v9 = (llvm::Type *)a1[26];
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  v93 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  v13 = (llvm::Type *)a1[26];
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  v93 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  v21 = a1[25];
  v91 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  v29 = a1[25];
  v91 = 257;
  v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  v31 = llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  v37 = a1[25];
  v91 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  v46 = a1[25];
  v91 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  v56 = a1[25];
  v91 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  v58 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  v63 = a1[25];
  v91 = 257;
  v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  v69 = a1[25];
  v91 = 257;
  v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  v71 = llvm::ConstantInt::get();
  v95 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  v73 = llvm::ConstantInt::get();
  v93 = 257;
  v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  v95 = 257;
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  v95 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  v95 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  v95 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  v95 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG15GA0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Type **Shl;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  v14 = a1[25];
  v20 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG15GA0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG15GA0TargetLowerer::maxImageDimLog2(AGCLLVMG15GA0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG15GA0TargetLowerer::extractBaseLevel(AGCLLVMG15GA0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG15GA0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG15GA0TargetLowerer::extractMaxLevel(AGCLLVMG15GA0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG15GA0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

double AGCLLVMG15GA0TargetConfig::AGCLLVMG15GA0TargetConfig()
{
  double result;

  qword_1EF8EA4D8 = (uint64_t)"e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  qword_1EF8EA500 = 0;
  qword_1EF8EA4E0 = 0x1800010018;
  qword_1EF8EA4E8 = (uint64_t)"/metal_rt_precise.metallib";
  result = 7.29290208e-304;
  qword_1EF8EA4F0 = 0x101010000000000;
  unk_1EF8EA4F8 = 124;
  AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gA0 = (uint64_t)&off_1E7EC42F0;
  unk_1EF8EA4D0 = "agx3-apple-ios";
  return result;
}

void AGCLLVMG15GB0TargetConfig::createTargetLowerer(AGCLLVMG15GB0TargetConfig *this, llvm::LLVMContext *a2)
{
  AGCLLVMG15TargetLowerer *v4;
  _QWORD *v5;

  v4 = (AGCLLVMG15TargetLowerer *)operator new();
  AGCLLVMG15TargetLowerer::AGCLLVMG15TargetLowerer(v4, a2, this);
  *v5 = &off_1E7EC4C90;
}

void AGCLLVMG15GB0TargetLowerer::~AGCLLVMG15GB0TargetLowerer(AGCLLVMG15GB0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG15GB0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMG15GB0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::CmpInst **v30;
  uint64_t v31;
  llvm::Value *Select;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::CmpInst **v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::CmpInst **v70;
  uint64_t v71;
  llvm::Value *ICmp;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Type *v76;
  llvm::Value *NullValue;
  llvm::Value *v78;
  llvm::Value *InsertElement;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Type **v85;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  __int128 v96;
  uint64_t v97;
  int v98;

  v96 = *(_OWORD *)a2;
  v97 = *(_QWORD *)(a2 + 16);
  if (v97)
    llvm::MetadataTracking::track();
  v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97)
    llvm::MetadataTracking::untrack();
  v7 = (llvm::Type *)a1[26];
  v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  v9 = (llvm::Type *)a1[26];
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  v93 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  v13 = (llvm::Type *)a1[26];
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  v93 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  v21 = a1[25];
  v91 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  v29 = a1[25];
  v91 = 257;
  v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  v31 = llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  v37 = a1[25];
  v91 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  v46 = a1[25];
  v91 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  v56 = a1[25];
  v91 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  v58 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  v63 = a1[25];
  v91 = 257;
  v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  v69 = a1[25];
  v91 = 257;
  v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  v71 = llvm::ConstantInt::get();
  v95 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  v73 = llvm::ConstantInt::get();
  v93 = 257;
  v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  v95 = 257;
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  v95 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  v95 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  v95 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  v95 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG15GB0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Type **Shl;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  v14 = a1[25];
  v20 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG15GB0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG15GB0TargetLowerer::maxImageDimLog2(AGCLLVMG15GB0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG15GB0TargetLowerer::extractBaseLevel(AGCLLVMG15GB0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG15GB0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG15GB0TargetLowerer::extractMaxLevel(AGCLLVMG15GB0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG15GB0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

double AGCLLVMG15GB0TargetConfig::AGCLLVMG15GB0TargetConfig()
{
  double result;

  qword_1EF8EA520 = (uint64_t)"e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  qword_1EF8EA548 = 0;
  qword_1EF8EA528 = 0x1800030018;
  qword_1EF8EA530 = (uint64_t)"/metal_rt_precise.metallib";
  result = 7.29290208e-304;
  qword_1EF8EA538 = 0x101010000000000;
  unk_1EF8EA540 = 124;
  AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gB0 = (uint64_t)&off_1E7EC4B88;
  *(_QWORD *)algn_1EF8EA518 = "agx3-apple-ios";
  return result;
}

void AGCLLVMG15GC0TargetConfig::createTargetLowerer(AGCLLVMG15GC0TargetConfig *this, llvm::LLVMContext *a2)
{
  AGCLLVMG15TargetLowerer *v4;
  _QWORD *v5;

  v4 = (AGCLLVMG15TargetLowerer *)operator new();
  AGCLLVMG15TargetLowerer::AGCLLVMG15TargetLowerer(v4, a2, this);
  *v5 = &off_1E7EC5528;
}

void AGCLLVMG15GC0TargetLowerer::~AGCLLVMG15GC0TargetLowerer(AGCLLVMG15GC0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG15GC0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMG15GC0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::CmpInst **v30;
  uint64_t v31;
  llvm::Value *Select;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::CmpInst **v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::CmpInst **v70;
  uint64_t v71;
  llvm::Value *ICmp;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Type *v76;
  llvm::Value *NullValue;
  llvm::Value *v78;
  llvm::Value *InsertElement;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Type **v85;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  __int128 v96;
  uint64_t v97;
  int v98;

  v96 = *(_OWORD *)a2;
  v97 = *(_QWORD *)(a2 + 16);
  if (v97)
    llvm::MetadataTracking::track();
  v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97)
    llvm::MetadataTracking::untrack();
  v7 = (llvm::Type *)a1[26];
  v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  v9 = (llvm::Type *)a1[26];
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  v93 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  v13 = (llvm::Type *)a1[26];
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  v93 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  v21 = a1[25];
  v91 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  v29 = a1[25];
  v91 = 257;
  v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  v31 = llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  v37 = a1[25];
  v91 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  v46 = a1[25];
  v91 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  v56 = a1[25];
  v91 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  v58 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  v63 = a1[25];
  v91 = 257;
  v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  v69 = a1[25];
  v91 = 257;
  v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  v71 = llvm::ConstantInt::get();
  v95 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  v73 = llvm::ConstantInt::get();
  v93 = 257;
  v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  v95 = 257;
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  v95 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  v95 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  v95 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  v95 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG15GC0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Type **Shl;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  v14 = a1[25];
  v20 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG15GC0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG15GC0TargetLowerer::maxImageDimLog2(AGCLLVMG15GC0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG15GC0TargetLowerer::extractBaseLevel(AGCLLVMG15GC0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG15GC0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG15GC0TargetLowerer::extractMaxLevel(AGCLLVMG15GC0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG15GC0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

double AGCLLVMG15GC0TargetConfig::AGCLLVMG15GC0TargetConfig()
{
  double result;

  qword_1EF8EA568 = (uint64_t)"e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  qword_1EF8EA590 = 0;
  qword_1EF8EA570 = 0x1800050018;
  qword_1EF8EA578 = (uint64_t)"/metal_rt_precise.metallib";
  result = 7.29290208e-304;
  qword_1EF8EA580 = 0x101010000000000;
  unk_1EF8EA588 = 124;
  AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15gC0 = (uint64_t)&off_1E7EC5420;
  unk_1EF8EA560 = "agx3-apple-ios";
  return result;
}

void AGCLLVMG15PB0TargetConfig::createTargetLowerer(const char **this, llvm::LLVMContext *a2)
{
  AGCLLVMGen5TargetLowerer *v4;
  uint64_t v5;

  v4 = (AGCLLVMGen5TargetLowerer *)operator new();
  AGCLLVMGen5TargetLowerer::AGCLLVMGen5TargetLowerer(v4, a2, this);
  *(_QWORD *)v5 = &off_1E7EC5DC0;
  *(_WORD *)(v5 + 1770) = 1;
  *(_BYTE *)(v5 + 1787) = 0;
}

void AGCLLVMG15PB0TargetLowerer::~AGCLLVMG15PB0TargetLowerer(AGCLLVMG15PB0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG15PB0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImageDimensionsExtract(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  uint64_t v53;
  uint64_t v54;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  uint64_t v60;
  uint64_t v61;
  llvm::CmpInst **v62;
  llvm::Value *v63;
  llvm::Value *v64;
  llvm::Value *v65;
  uint64_t v66;
  uint64_t v67;
  llvm::CmpInst **v68;
  uint64_t v69;
  llvm::Value *ICmp;
  uint64_t v71;
  llvm::Value *v72;
  llvm::Value *Select;
  llvm::Type *v74;
  llvm::Value *NullValue;
  llvm::Value *v76;
  llvm::Value *InsertElement;
  llvm::Value *v78;
  llvm::Value *v79;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Type **v83;
  _BYTE v86[32];
  __int16 v87;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  __int128 v94;
  uint64_t v95;
  int v96;

  v94 = *(_OWORD *)a2;
  v95 = *(_QWORD *)(a2 + 16);
  if (v95)
    llvm::MetadataTracking::track();
  v96 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v94);
  if (v95)
    llvm::MetadataTracking::untrack();
  v7 = *(llvm::Type **)(a1 + 208);
  v93 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v7, (uint64_t)a3, 0, (uint64_t)v92);
  v9 = *(llvm::Type **)(a1 + 208);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v9, a3, v10, (const llvm::Twine *)v92);
  v91 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v9, GEP, 0, (uint64_t)v90);
  v13 = *(llvm::Type **)(a1 + 208);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v13, a3, v14, (const llvm::Twine *)v92);
  v91 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, v15, 0, (uint64_t)v90);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v12, v17, (const llvm::Twine *)v92);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v90);
  v21 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v21, (uint64_t)v88);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v23, (const llvm::Twine *)v86);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v25, (const llvm::Twine *)v92);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v26, v27, (const llvm::Twine *)v90);
  v29 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v28, v29, (uint64_t)v88);
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v32 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v31, (const llvm::Twine *)v92);
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v34 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v32, v33, (const llvm::Twine *)v90);
  v35 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v36 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v34, v35, (uint64_t)v88);
  v37 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v36, v37, (const llvm::Twine *)v86);
  v39 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v38, v30);
  v40 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v41 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v40, (const llvm::Twine *)v92);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v43 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v41, v42, (const llvm::Twine *)v90);
  v44 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v45 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v43, v44, (uint64_t)v88);
  v46 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)v86);
  v48 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v47, v30);
  v49 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, v30);
  v50 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v51 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v16, v50, (const llvm::Twine *)v92);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v53 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v51, v52, (const llvm::Twine *)v90);
  v54 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v55 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v53, v54, (uint64_t)v88);
  v56 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v55, v56, (const llvm::Twine *)v86);
  v57 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v57, (const llvm::Twine *)v92);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v60 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v90);
  v61 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v62 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v60, v61, (uint64_t)v88);
  v63 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v63, (const llvm::Twine *)v92);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v91 = 257;
  v66 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v64, v65, (const llvm::Twine *)v90);
  v67 = *(_QWORD *)(a1 + 200);
  v89 = 257;
  v68 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v66, v67, (uint64_t)v88);
  v69 = llvm::ConstantInt::get();
  v93 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v62, v69, (uint64_t)v92);
  v71 = llvm::ConstantInt::get();
  v91 = 257;
  v72 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v68, v71, (uint64_t)v90);
  v89 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), ICmp, v72, (const llvm::Twine *)v88);
  v93 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 312), v74);
  v93 = 257;
  v76 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v39, v76, (const llvm::Twine *)v92);
  v93 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  v79 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v48, v78, (const llvm::Twine *)v92);
  v93 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v79, v49, v80, (const llvm::Twine *)v92);
  v93 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v81, Select, v82, (const llvm::Twine *)v92);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v83, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImageMipCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  llvm::Value *Sub;
  llvm::Value *v23;
  llvm::Type **Add;
  _BYTE v26[32];
  __int16 v27;
  _BYTE v28[32];
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  int v34;

  v32 = *(_OWORD *)a2;
  v33 = *(_QWORD *)(a2 + 16);
  if (v33)
    llvm::MetadataTracking::track();
  v34 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v32);
  if (v33)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v31 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v30);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v30);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v28);
  v14 = a1[25];
  v27 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v26);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v16, (const llvm::Twine *)v30);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  v19 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v17, v18, (const llvm::Twine *)v28);
  v20 = a1[25];
  v27 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)v26);
  v31 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), Cast, v21, (const llvm::Twine *)v30);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v29 = 257;
  Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v23, (const llvm::Twine *)v28);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImageSampleCountExtract(_QWORD *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *v9;
  llvm::Type **GEP;
  llvm::Value *v11;
  llvm::Type *v12;
  llvm::Value *AlignedLoad;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t LShr;
  uint64_t v18;
  llvm::Value *Cast;
  llvm::Value *v20;
  llvm::Type **Shl;
  _BYTE v23[32];
  __int16 v24;
  _BYTE v25[32];
  __int16 v26;
  _BYTE v27[32];
  __int16 v28;
  __int128 v29;
  uint64_t v30;
  int v31;

  v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  if (v30)
    llvm::MetadataTracking::track();
  v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v29);
  if (v30)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v27);
  v26 = 257;
  v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v12, (uint64_t)GEP, 0, (uint64_t)v25);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  v15 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v14, (const llvm::Twine *)v27);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v15, v16, (const llvm::Twine *)v25);
  v18 = a1[25];
  v24 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v18, (uint64_t)v23);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v20, Cast, (const llvm::Twine *)v27);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImageBaseLevelExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Type **Cast;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v22 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v21);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v21);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v19);
  v14 = a1[25];
  v18 = 257;
  Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v17);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Cast, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG15PB0TargetLowerer::supportsPrimitiveID(AGCLLVMG15PB0TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG15PB0TargetLowerer::supportsBarycentricCoords(AGCLLVMG15PB0TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG15PB0TargetLowerer::supportsMeshShading(AGCLLVMG15PB0TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG15PB0TargetLowerer::needsShaderDepthClamp(AGCLLVMG15PB0TargetLowerer *this)
{
  return 1;
}

uint64_t AGCLLVMG15PB0TargetLowerer::maxImageDimLog2(AGCLLVMG15PB0TargetLowerer *this)
{
  return 14;
}

void AGCLLVMG15PB0TargetLowerer::createGPUVAMasks(int *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  int *v24;
  char *v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  int *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  BOOL v54;
  uint64_t *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;

  *(_QWORD *)(a3 + 8) = 0;
  v6 = (_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v7 = *a1;
  v8 = *(unsigned __int16 *)((char *)a1 - v7 + 4);
  v9 = *(unsigned int *)((char *)a1 + v8);
  v10 = (int *)((char *)a1 + v8 + v9);
  v11 = *(unsigned __int16 *)((char *)v10 - *v10 + 12);
  v12 = (char *)v10 + v11;
  v13 = *(unsigned int *)((char *)v10 + v11);
  v14 = *(unsigned int *)&v12[v13];
  if ((_DWORD)v14)
  {
    v15 = 4 * v14;
    if (a2)
      v16 = -524484864;
    else
      v16 = 65280;
    v17 = v8 + v9 + v11 + v13;
    do
    {
      v18 = *(unsigned int *)((char *)a1 + v17 + 4);
      v19 = (char *)a1 + v17 + v18 - *(int *)((char *)a1 + v17 + v18 + 4);
      if (*((unsigned __int16 *)v19 + 2) >= 7u && (v20 = *((unsigned __int16 *)v19 + 5)) != 0)
        v21 = *(int *)((char *)a1 + v17 + v18 + v20 + 4);
      else
        v21 = 0;
      v64 = v21;
      *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v21, &v64)+ 8) = v16;
      v17 += 4;
      v15 -= 4;
    }
    while (v15);
    v22 = -(uint64_t)*a1;
  }
  else
  {
    v22 = -v7;
  }
  v23 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 + v22 + 4));
  v24 = (int *)((char *)v23 + *v23);
  v25 = (char *)v24 - *v24;
  v26 = (unsigned int *)((char *)v24
                       + *((unsigned __int16 *)v25 + 4)
                       + *(unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 4)));
  v27 = *v26;
  if ((_DWORD)v27)
  {
    v28 = 0;
    v29 = 4 * v27;
    while (1)
    {
      v30 = v26[v28 / 4 + 1];
      v31 = v30 - *(int *)((char *)&v26[v28 / 4 + 1] + v30);
      v32 = (char *)&v26[v28 / 4] + v31;
      v33 = *((unsigned __int16 *)v32 + 2);
      if (v33 < 5)
        break;
      v34 = *((unsigned __int16 *)v32 + 4);
      if (!v34)
      {
        v36 = (uint64_t)v26 + v30 + v28 + 4;
        v37 = (char *)&v26[v28 / 4] + v31;
LABEL_22:
        v38 = v37 + 4;
        if (v33 >= 0xB)
        {
          v39 = *((unsigned __int16 *)v38 + 5);
          if (v39)
          {
            v35 = *(_DWORD *)(v36 + v39);
            goto LABEL_26;
          }
        }
        break;
      }
      if (!*((_BYTE *)&v26[v28 / 4 + 1] + v30 + v34))
      {
        v36 = (uint64_t)v26 + v30 + v28 + 4;
        v37 = (char *)&v26[v28 / 4] + v31;
        goto LABEL_22;
      }
      v28 += 4;
      if (v29 == v28)
        goto LABEL_19;
    }
    v35 = 0;
  }
  else
  {
LABEL_19:
    v35 = -1;
  }
LABEL_26:
  v40 = (unsigned int *)((char *)v24 + *((unsigned __int16 *)v25 + 12));
  v41 = *v40;
  v43 = (unsigned int *)((char *)v40 + v41 + 4);
  v42 = *(unsigned int *)((char *)v40 + v41);
  if ((_DWORD)v42)
  {
    v44 = &v43[v42];
    do
    {
      v45 = (int *)((char *)v43 + *v43);
      v46 = (unsigned __int16 *)((char *)v45 - *v45);
      v47 = *v46;
      if (v47 >= 5 && v46[2] && *((_BYTE *)v45 + v46[2]) == 110)
      {
        if (v47 <= 6)
        {
          v48 = 0;
          v49 = 0;
          v63 = 0;
        }
        else
        {
          v48 = v46[3] ? *(int *)((char *)v45 + v46[3]) : 0;
          v63 = v48;
          if (v47 >= 9 && (v50 = v46[4]) != 0)
            v49 = *(int *)((char *)v45 + v50);
          else
            v49 = 0;
        }
        v51 = *v6;
        if (*v6)
        {
          v52 = v6;
          do
          {
            v53 = *(_DWORD *)(v51 + 28);
            v54 = v53 >= v48;
            if (v53 >= v48)
              v55 = (uint64_t *)v51;
            else
              v55 = (uint64_t *)(v51 + 8);
            if (v54)
              v52 = (_QWORD *)v51;
            v51 = *v55;
          }
          while (*v55);
          if (v52 != v6 && v48 >= *((_DWORD *)v52 + 7))
          {
            v56 = (v49 + v35) << 7;
            v57 = v56 & 0x7F00;
            v58 = (v57 & 0xFFFF7FFF | ((((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12) ^ (((v56 >> 8) & 0x7F ^ (v57 >> 12)) >> 2)) >> 1)) & 1) << 15)) ^ 0x8000;
            if (a2)
            {
              v59 = 0;
              v60 = v58 | 0xBC0000;
              v61 = v60 >> 8;
              v62 = 43;
              do
              {
                v61 ^= ((int)(v61 >> v59 << 31) >> 31) & v62;
                v62 *= 2;
                ++v59;
              }
              while (v59 != 19);
              v58 = v60 & 0x7FFFFFF | ((v61 >> 19) << 27);
            }
            *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)a3, v48, &v63)+ 8) = v58;
          }
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
}

uint64_t AGCLLVMG15PB0TargetLowerer::getF16FormatInfo(uint64_t a1, int a2, uint64_t a3, int a4, char a5, int a6)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v13;

  v6 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (a6)
  {
    v7 = a3;
    if (v6 == 18)
      v7 = **(_QWORD **)(a3 + 16);
    if (a2 == 1)
      v8 = 3;
    else
      v8 = a2;
    if (a2 == 12)
      v9 = 16;
    else
      v9 = v8;
    if (a2 == 13)
      v10 = 15;
    else
      v10 = v9;
    if ((a5 & 1) != 0)
      v10 = a2;
    if (v7 == *(_QWORD *)(a1 + 168) && a4 != 0)
      a2 = v10;
  }
  if (v6 == 18)
    a3 = **(_QWORD **)(a3 + 16);
  v13 = a2 == 1 && a3 == *(_QWORD *)(a1 + 168);
  return v13 | (a2 << 16);
}

double AGCLLVMG15PB0TargetConfig::AGCLLVMG15PB0TargetConfig()
{
  double result;

  qword_1EF8EA4B8 = 0;
  qword_1EF8EA498 = 0x1600030016;
  qword_1EF8EA4A0 = (uint64_t)"/metal_rt_precise.metallib";
  result = 7.29290208e-304;
  qword_1EF8EA4A8 = 0x101010000010100;
  unk_1EF8EA4B0 = 0x400000007CLL;
  qword_1EF8EA488 = (uint64_t)"agx2-apple-ios";
  unk_1EF8EA490 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  AGCLLVMCreateG15TargetConfig(AGCTargetArch)::g15pB0 = (uint64_t)&off_1E7EC5CB8;
  return result;
}

void AGCLLVMG16PA0TargetConfig::~AGCLLVMG16PA0TargetConfig(AGCLLVMG16PA0TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG16PB0TargetConfig::~AGCLLVMG16PB0TargetConfig(AGCLLVMG16PB0TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG16GA0TargetConfig::createTargetLowerer(AGCLLVMG16GA0TargetConfig *this, llvm::LLVMContext *a2)
{
  AGCLLVMHAL200TargetLowerer *v4;
  _QWORD *v5;

  v4 = (AGCLLVMHAL200TargetLowerer *)operator new();
  AGCLLVMHAL200TargetLowerer::AGCLLVMHAL200TargetLowerer(v4, a2, this);
  *v5 = &off_1E7EC6DC0;
}

void AGCLLVMG16GA0TargetConfig::~AGCLLVMG16GA0TargetConfig(AGCLLVMG16GA0TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG16GA0TargetLowerer::~AGCLLVMG16GA0TargetLowerer(AGCLLVMG16GA0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG16GA0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMG16GA0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::CmpInst **v30;
  uint64_t v31;
  llvm::Value *Select;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::CmpInst **v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::CmpInst **v70;
  uint64_t v71;
  llvm::Value *ICmp;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Type *v76;
  llvm::Value *NullValue;
  llvm::Value *v78;
  llvm::Value *InsertElement;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Type **v85;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  __int128 v96;
  uint64_t v97;
  int v98;

  v96 = *(_OWORD *)a2;
  v97 = *(_QWORD *)(a2 + 16);
  if (v97)
    llvm::MetadataTracking::track();
  v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97)
    llvm::MetadataTracking::untrack();
  v7 = (llvm::Type *)a1[26];
  v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  v9 = (llvm::Type *)a1[26];
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  v93 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  v13 = (llvm::Type *)a1[26];
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  v93 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  v21 = a1[25];
  v91 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  v29 = a1[25];
  v91 = 257;
  v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  v31 = llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  v37 = a1[25];
  v91 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  v46 = a1[25];
  v91 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  v56 = a1[25];
  v91 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  v58 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  v63 = a1[25];
  v91 = 257;
  v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  v69 = a1[25];
  v91 = 257;
  v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  v71 = llvm::ConstantInt::get();
  v95 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  v73 = llvm::ConstantInt::get();
  v93 = 257;
  v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  v95 = 257;
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  v95 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  v95 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  v95 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  v95 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG16GA0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Type **Shl;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  v14 = a1[25];
  v20 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG16GA0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG16GA0TargetLowerer::maxImageDimLog2(AGCLLVMG16GA0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG16GA0TargetLowerer::extractBaseLevel(AGCLLVMG16GA0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG16GA0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16GA0TargetLowerer::extractMaxLevel(AGCLLVMG16GA0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG16GA0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

double AGCLLVMG16GA0TargetConfig::AGCLLVMG16GA0TargetConfig()
{
  double result;

  qword_1EF8EA6B0 = (uint64_t)"e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  qword_1EF8EA6D8 = 0;
  qword_1EF8EA6B8 = 0x2000010020;
  qword_1EF8EA6C0 = (uint64_t)"/metal_rt_precise.metallib";
  result = 7.29290208e-304;
  qword_1EF8EA6C8 = 0x101010000000000;
  unk_1EF8EA6D0 = 124;
  AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_a0 = (uint64_t)&off_1E7EC6CB8;
  *(_QWORD *)algn_1EF8EA6A8 = "agx3-apple-ios";
  return result;
}

void AGCLLVMG16GB0TargetConfig::createTargetLowerer(AGCLLVMG16GB0TargetConfig *this, llvm::LLVMContext *a2)
{
  AGCLLVMHAL200TargetLowerer *v4;
  _QWORD *v5;

  v4 = (AGCLLVMHAL200TargetLowerer *)operator new();
  AGCLLVMHAL200TargetLowerer::AGCLLVMHAL200TargetLowerer(v4, a2, this);
  *v5 = &off_1E7EC7658;
}

void AGCLLVMG16GB0TargetConfig::~AGCLLVMG16GB0TargetConfig(AGCLLVMG16GB0TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG16GB0TargetLowerer::~AGCLLVMG16GB0TargetLowerer(AGCLLVMG16GB0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG16GB0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMG16GB0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::CmpInst **v30;
  uint64_t v31;
  llvm::Value *Select;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::CmpInst **v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::CmpInst **v70;
  uint64_t v71;
  llvm::Value *ICmp;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Type *v76;
  llvm::Value *NullValue;
  llvm::Value *v78;
  llvm::Value *InsertElement;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Type **v85;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  __int128 v96;
  uint64_t v97;
  int v98;

  v96 = *(_OWORD *)a2;
  v97 = *(_QWORD *)(a2 + 16);
  if (v97)
    llvm::MetadataTracking::track();
  v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97)
    llvm::MetadataTracking::untrack();
  v7 = (llvm::Type *)a1[26];
  v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  v9 = (llvm::Type *)a1[26];
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  v93 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  v13 = (llvm::Type *)a1[26];
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  v93 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  v21 = a1[25];
  v91 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  v29 = a1[25];
  v91 = 257;
  v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  v31 = llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  v37 = a1[25];
  v91 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  v46 = a1[25];
  v91 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  v56 = a1[25];
  v91 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  v58 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  v63 = a1[25];
  v91 = 257;
  v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  v69 = a1[25];
  v91 = 257;
  v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  v71 = llvm::ConstantInt::get();
  v95 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  v73 = llvm::ConstantInt::get();
  v93 = 257;
  v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  v95 = 257;
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  v95 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  v95 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  v95 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  v95 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG16GB0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Type **Shl;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  v14 = a1[25];
  v20 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG16GB0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG16GB0TargetLowerer::maxImageDimLog2(AGCLLVMG16GB0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG16GB0TargetLowerer::extractBaseLevel(AGCLLVMG16GB0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG16GB0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16GB0TargetLowerer::extractMaxLevel(AGCLLVMG16GB0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG16GB0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

double AGCLLVMG16GB0TargetConfig::AGCLLVMG16GB0TargetConfig()
{
  double result;

  qword_1EF8EA6F8 = (uint64_t)"e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  qword_1EF8EA720 = 0;
  qword_1EF8EA700 = 0x2000030020;
  qword_1EF8EA708 = (uint64_t)"/metal_rt_precise.metallib";
  result = 7.29290208e-304;
  qword_1EF8EA710 = 0x101010000000000;
  unk_1EF8EA718 = 124;
  AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g16g_b0 = (uint64_t)&off_1E7EC7550;
  unk_1EF8EA6F0 = "agx3-apple-ios";
  return result;
}

void AGCLLVMG16PA0TargetConfig::createTargetLowerer(AGCLLVMG16PA0TargetConfig *this, llvm::LLVMContext *a2)
{
  AGCLLVMG16TargetLowerer *v4;
  _QWORD *v5;

  v4 = (AGCLLVMG16TargetLowerer *)operator new();
  AGCLLVMG16TargetLowerer::AGCLLVMG16TargetLowerer(v4, a2, this);
  *v5 = &off_1E7EC7EF0;
}

void AGCLLVMG16PA0TargetLowerer::~AGCLLVMG16PA0TargetLowerer(AGCLLVMG16PA0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG16PA0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMG16PA0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::CmpInst **v30;
  uint64_t v31;
  llvm::Value *Select;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::CmpInst **v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::CmpInst **v70;
  uint64_t v71;
  llvm::Value *ICmp;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Type *v76;
  llvm::Value *NullValue;
  llvm::Value *v78;
  llvm::Value *InsertElement;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Type **v85;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  __int128 v96;
  uint64_t v97;
  int v98;

  v96 = *(_OWORD *)a2;
  v97 = *(_QWORD *)(a2 + 16);
  if (v97)
    llvm::MetadataTracking::track();
  v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97)
    llvm::MetadataTracking::untrack();
  v7 = (llvm::Type *)a1[26];
  v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  v9 = (llvm::Type *)a1[26];
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  v93 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  v13 = (llvm::Type *)a1[26];
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  v93 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  v21 = a1[25];
  v91 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  v29 = a1[25];
  v91 = 257;
  v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  v31 = llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  v37 = a1[25];
  v91 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  v46 = a1[25];
  v91 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  v56 = a1[25];
  v91 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  v58 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  v63 = a1[25];
  v91 = 257;
  v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  v69 = a1[25];
  v91 = 257;
  v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  v71 = llvm::ConstantInt::get();
  v95 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  v73 = llvm::ConstantInt::get();
  v93 = 257;
  v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  v95 = 257;
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  v95 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  v95 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  v95 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  v95 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG16PA0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Type **Shl;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  v14 = a1[25];
  v20 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG16PA0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG16PA0TargetLowerer::maxImageDimLog2(AGCLLVMG16PA0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG16PA0TargetLowerer::extractBaseLevel(AGCLLVMG16PA0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG16PA0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG16PA0TargetLowerer::extractMaxLevel(AGCLLVMG16PA0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG16PA0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

double AGCLLVMG16PA0TargetConfig::AGCLLVMG16PA0TargetConfig()
{
  double result;

  qword_1EF8E7F48 = (uint64_t)"e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  qword_1EF8E7F70 = 0;
  qword_1EF8E7F50 = 0x1F0001001FLL;
  qword_1EF8E7F58 = (uint64_t)"/metal_rt_precise.metallib";
  result = 7.29290208e-304;
  qword_1EF8E7F60 = 0x101010000000000;
  unk_1EF8E7F68 = 124;
  AGCLLVMCreateG16TargetConfig(AGCTargetArch)::g16pA0 = (uint64_t)&off_1E7EC7DE8;
  unk_1EF8E7F40 = "agx3-apple-ios";
  return result;
}

uint64_t AGCLLVMG16PB0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMG16PB0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Type **Shl;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  v14 = a1[25];
  v20 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG16PB0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG16PB0TargetLowerer::maxImageDimLog2(AGCLLVMG16PB0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG16PB0TargetLowerer::extractMaxLevel(AGCLLVMG16PB0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG16PB0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

double AGCLLVMG16PB0TargetConfig::AGCLLVMG16PB0TargetConfig(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)(a1 + 16) = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = (unsigned __int16)a2;
  *(_QWORD *)(a1 + 32) = "/metal_rt_precise.metallib";
  result = 7.29290208e-304;
  *(_QWORD *)(a1 + 40) = 0x100010000010100;
  *(_QWORD *)(a1 + 48) = 124;
  *(_BYTE *)(a1 + 46) = 1;
  *(_DWORD *)(a1 + 52) = 0;
  *(_WORD *)(a1 + 41) = 0;
  *(_QWORD *)a1 = &off_1E7EC8680;
  *(_QWORD *)(a1 + 8) = "agx3-apple-ios";
  return result;
}

void AGCLLVMG17PA0TargetConfig::createTargetLowerer(AGCLLVMG17PA0TargetConfig *this, llvm::LLVMContext *a2)
{
  AGCLLVMHAL200TargetLowerer *v4;
  _QWORD *v5;

  v4 = (AGCLLVMHAL200TargetLowerer *)operator new();
  AGCLLVMHAL200TargetLowerer::AGCLLVMHAL200TargetLowerer(v4, a2, this);
  *v5 = &off_1E7EC9020;
}

void AGCLLVMG17PA0TargetConfig::~AGCLLVMG17PA0TargetConfig(AGCLLVMG17PA0TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG17PA0TargetLowerer::~AGCLLVMG17PA0TargetLowerer(AGCLLVMG17PA0TargetLowerer *this)
{
  AGCLLVMGen3TargetLowerer::~AGCLLVMGen3TargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMG17PA0TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMG17PA0TargetLowerer::buildImageDimensionsExtract(uint64_t *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v7;
  llvm::Value *AlignedLoad;
  llvm::Type *v9;
  llvm::Value *v10;
  uint64_t GEP;
  llvm::Value *v12;
  llvm::Type *v13;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t LShr;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *Add;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::CmpInst **v30;
  uint64_t v31;
  llvm::Value *Select;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::CmpInst **v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::CmpInst **v70;
  uint64_t v71;
  llvm::Value *ICmp;
  uint64_t v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Type *v76;
  llvm::Value *NullValue;
  llvm::Value *v78;
  llvm::Value *InsertElement;
  llvm::Value *v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Type **v85;
  _BYTE v88[32];
  __int16 v89;
  _BYTE v90[32];
  __int16 v91;
  _BYTE v92[32];
  __int16 v93;
  _BYTE v94[32];
  __int16 v95;
  __int128 v96;
  uint64_t v97;
  int v98;

  v96 = *(_OWORD *)a2;
  v97 = *(_QWORD *)(a2 + 16);
  if (v97)
    llvm::MetadataTracking::track();
  v98 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v96);
  if (v97)
    llvm::MetadataTracking::untrack();
  v7 = (llvm::Type *)a1[26];
  v95 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v7, (uint64_t)a3, 0, (uint64_t)v94);
  v9 = (llvm::Type *)a1[26];
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v9, a3, v10, (const llvm::Twine *)v94);
  v93 = 257;
  v12 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v9, GEP, 0, (uint64_t)v92);
  v13 = (llvm::Type *)a1[26];
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v15 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v13, a3, v14, (const llvm::Twine *)v94);
  v93 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, v15, 0, (uint64_t)v92);
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v12, v17, (const llvm::Twine *)v94);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v18, v19, (const llvm::Twine *)v92);
  v21 = a1[25];
  v91 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v21, (uint64_t)v90);
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Cast, v23, (const llvm::Twine *)v88);
  (*(void (**)(uint64_t *, llvm::Value *))(*a1 + 1904))(a1, v16);
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v25, (const llvm::Twine *)v94);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v28 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v26, v27, (const llvm::Twine *)v92);
  v29 = a1[25];
  v91 = 257;
  v30 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v28, v29, (uint64_t)v90);
  v31 = llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v30, v31, (uint64_t)v88);
  llvm::ConstantInt::get();
  v95 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v33, (const llvm::Twine *)v94);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v36 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)v92);
  v37 = a1[25];
  v91 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)v90);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v38, v39, (const llvm::Twine *)v88);
  v41 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v40, Select);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v42, (const llvm::Twine *)v94);
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v45 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v43, v44, (const llvm::Twine *)v92);
  v46 = a1[25];
  v91 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v45, v46, (uint64_t)v90);
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v47, v48, (const llvm::Twine *)v88);
  v50 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, v49, Select);
  v51 = (llvm::Value *)AGCLLVMGen5TargetLowerer::adjustToMip((AGCLLVMGen5TargetLowerer *)a1, Add, Select);
  v52 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v53 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v16, v52, (const llvm::Twine *)v94);
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v55 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v53, v54, (const llvm::Twine *)v92);
  v56 = a1[25];
  v91 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v55, v56, (uint64_t)v90);
  v58 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v58, (const llvm::Twine *)v88);
  v59 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v60 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v59, (const llvm::Twine *)v94);
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v62 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v60, v61, (const llvm::Twine *)v92);
  v63 = a1[25];
  v91 = 257;
  v64 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v62, v63, (uint64_t)v90);
  v65 = (llvm::Value *)llvm::ConstantInt::get();
  v95 = 257;
  v66 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v65, (const llvm::Twine *)v94);
  v67 = (llvm::Value *)llvm::ConstantInt::get();
  v93 = 257;
  v68 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v66, v67, (const llvm::Twine *)v92);
  v69 = a1[25];
  v91 = 257;
  v70 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v68, v69, (uint64_t)v90);
  v71 = llvm::ConstantInt::get();
  v95 = 257;
  ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v64, v71, (uint64_t)v94);
  v73 = llvm::ConstantInt::get();
  v93 = 257;
  v74 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v70, v73, (uint64_t)v92);
  v91 = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), ICmp, v74, (const llvm::Twine *)v90);
  v95 = 257;
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  NullValue = (llvm::Value *)llvm::Constant::getNullValue((llvm::Constant *)a1[39], v76);
  v95 = 257;
  v78 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), NullValue, v41, v78, (const llvm::Twine *)v94);
  v95 = 257;
  v80 = (llvm::Value *)llvm::ConstantInt::get();
  v81 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v50, v80, (const llvm::Twine *)v94);
  v95 = 257;
  v82 = (llvm::Value *)llvm::ConstantInt::get();
  v83 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v81, v51, v82, (const llvm::Twine *)v94);
  v95 = 257;
  v84 = (llvm::Value *)llvm::ConstantInt::get();
  v85 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v75, v84, (const llvm::Twine *)v94);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v85, a4, 0);
}

uint64_t AGCLLVMG17PA0TargetLowerer::buildImageSampleCountExtract(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  llvm::Type **Shl;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v24 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, a3, 0, (uint64_t)v23);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v10, (const llvm::Twine *)v23);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v11, v12, (const llvm::Twine *)v21);
  v14 = a1[25];
  v20 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v14, (uint64_t)v19);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = 257;
  Shl = (llvm::Type **)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v16, Cast, (const llvm::Twine *)v23);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Shl, a4, 0);
}

uint64_t AGCLLVMG17PA0TargetLowerer::buildImagePackFormatExtract(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *AlignedLoad;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t LShr;
  uint64_t v14;
  llvm::CmpInst **Cast;
  uint64_t v16;
  uint64_t ICmp;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *Shl;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::CmpInst **v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::CmpInst **v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::CmpInst **v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::CmpInst **v51;
  uint64_t v52;
  llvm::Value *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  _BYTE v62[32];
  __int16 v63;
  _BYTE v64[32];
  __int16 v65;
  _BYTE v66[32];
  __int16 v67;
  _BYTE v68[32];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;
  __int128 v72;
  uint64_t v73;
  int v74;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
    llvm::MetadataTracking::track();
  v74 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v72);
  if (v73)
    llvm::MetadataTracking::untrack();
  v8 = *(llvm::Type **)(a1 + 208);
  v71 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v8, a3, 0, (uint64_t)v70);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  v11 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v10, (const llvm::Twine *)v70);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v11, v12, (const llvm::Twine *)v68);
  v14 = *(_QWORD *)(a1 + 200);
  v67 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, LShr, v14, (uint64_t)v66);
  v16 = llvm::ConstantInt::get();
  v65 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Cast, v16, (uint64_t)v64);
  v18 = *(_QWORD *)(a1 + 200);
  v63 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ICmp, v18, (uint64_t)v62);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v71 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v70);
  if (!*(_BYTE *)(a1 + 1770))
  {
    v22 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v23 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v22, (const llvm::Twine *)v70);
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v25 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v23, v24, (const llvm::Twine *)v68);
    v26 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v27 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v66);
    v28 = llvm::ConstantInt::get();
    v65 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v27, v28, (uint64_t)v64);
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v30, (const llvm::Twine *)v70);
    v32 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v68);
    v34 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v35 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v33, v34, (uint64_t)v66);
    v36 = llvm::ConstantInt::get();
    v65 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v35, v36, (uint64_t)v64);
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v38, (const llvm::Twine *)v70);
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v39, v40, (const llvm::Twine *)v68);
    v42 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v43 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v66);
    v44 = llvm::ConstantInt::get();
    v65 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v43, v44, (uint64_t)v64);
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v47 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v46, (const llvm::Twine *)v70);
    v48 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    v49 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v47, v48, (const llvm::Twine *)v68);
    v50 = *(_QWORD *)(a1 + 200);
    v67 = 257;
    v51 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v49, v50, (uint64_t)v66);
    v52 = llvm::ConstantInt::get();
    v65 = 257;
    v53 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v51, v52, (uint64_t)v64);
    v71 = 257;
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v37, v45, (const llvm::Twine *)v70);
    v71 = 257;
    v55 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v54, v53, (const llvm::Twine *)v70);
    v70[0] = "is_float16_texture";
    v71 = 259;
    v56 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v29, v55, (const llvm::Twine *)v70);
    v57 = *(_QWORD *)(a1 + 200);
    v69 = 257;
    v58 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v56, v57, (uint64_t)v68);
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = 257;
    v60 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v58, v59, (const llvm::Twine *)v70);
    v69 = 257;
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v60, (const llvm::Twine *)v68);
  }
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), (llvm::Type **)Shl, a4, 0);
}

uint64_t AGCLLVMG17PA0TargetLowerer::maxImageDimLog2(AGCLLVMG17PA0TargetLowerer *this)
{
  return 14;
}

uint64_t AGCLLVMG17PA0TargetLowerer::extractBaseLevel(AGCLLVMG17PA0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG17PA0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

uint64_t AGCLLVMG17PA0TargetLowerer::extractMaxLevel(AGCLLVMG17PA0TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *v7;
  uint64_t LShr;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;

  v4 = (AGCLLVMG17PA0TargetLowerer *)((char *)this + 8);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  v6 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v4, a2, v5, (const llvm::Twine *)v12);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v13 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v4, v6, v7, (const llvm::Twine *)v12);
  v9 = *((_QWORD *)this + 25);
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v4, 38, LShr, v9, (uint64_t)v11);
}

double AGCLLVMG17PA0TargetConfig::AGCLLVMG17PA0TargetConfig()
{
  double result;

  qword_1EF8EA740 = (uint64_t)"e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
  qword_1EF8EA768 = 0;
  qword_1EF8EA748 = 0x2200010022;
  qword_1EF8EA750 = (uint64_t)"/metal_rt_precise.metallib";
  result = 7.29290208e-304;
  qword_1EF8EA758 = 0x101010000000000;
  unk_1EF8EA760 = 124;
  AGCLLVMCreateHAL200TargetConfig(AGCTargetArch)::g17p_a0 = (uint64_t)&off_1E7EC8F18;
  *(_QWORD *)algn_1EF8EA738 = "agx3-apple-ios";
  return result;
}

llvm::Value *AGCLLVMG5TargetLowerer::coerceSampleType(_QWORD *a1, llvm::Value *a2, int a3)
{
  uint64_t v4;
  _BYTE v5[32];
  __int16 v6;

  if (a3 != 8 && a3 != 4
    || (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12
    || *(_BYTE *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8))
  {
    return AGCLLVMBuilder::coerceSampleType(a1, a2, a3);
  }
  v4 = a1[38];
  v6 = 257;
  return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)a2, v4, (uint64_t)v5);
}

void AGCLLVMG5TargetLowerer::~AGCLLVMG5TargetLowerer(AGCLLVMG5TargetLowerer *this)
{
  AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMGen2TargetLowerer::isPartitionLockingHandlingRequired(AGCLLVMGen2TargetLowerer *this)
{
  return 1;
}

llvm::Value *AGCLLVMG5TargetLowerer::buildSampleFunction(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  llvm::IRBuilderBase *v7;
  uint64_t v8;
  llvm::BasicBlock *v9;
  uint64_t v10;
  llvm::Instruction *v11;
  uint64_t v12;
  llvm::Instruction *v13;
  llvm::Value *v14;
  llvm::Type **v16;
  llvm::Value *v17;
  llvm::Type *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *v24;
  uint64_t LShr;
  uint64_t v26;
  llvm::CmpInst **Cast;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ICmp;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  llvm::CmpInst **AlignedLoad;
  __int128 v65;
  uint64_t v66;
  int v67;
  _QWORD v68[4];
  __int16 v69;
  _QWORD __dst[34];

  v65 = *(_OWORD *)a2;
  v66 = *(_QWORD *)(a2 + 16);
  if (v66)
    llvm::MetadataTracking::track();
  v67 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v65);
  if (v66)
    llvm::MetadataTracking::untrack();
  if ((*(_DWORD *)a3 - 6) < 3)
    return (llvm::Value *)(*(uint64_t (**)(uint64_t *, _QWORD *))(*a1 + 1504))(a1, a3);
  if (*(_DWORD *)a3 != 3)
    return AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, a3, 0, 0, 0);
  memcpy(__dst, a3, 0x108uLL);
  v7 = (llvm::IRBuilderBase *)(a1 + 1);
  v8 = a1[7];
  v68[0] = "end_write_image";
  v69 = 259;
  v9 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v10 = *(_QWORD *)(v8 + 40);
  if (v10 == v8 + 40)
  {
    v13 = 0;
  }
  else
  {
    v11 = (llvm::Instruction *)(v10 - 24);
    if (v10)
      v12 = v10 - 24;
    else
      v12 = 0;
    if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB)
      v13 = 0;
    else
      v13 = v11;
  }
  llvm::Instruction::eraseFromParent(v13);
  a1[7] = v8;
  a1[8] = v8 + 40;
  v16 = (llvm::Type **)a3[10];
  v69 = 257;
  v18 = AGCLLVMBuilder::tryDeducePointeeType(v16, v17);
  AlignedLoad = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v18, (uint64_t)v16, 0, (uint64_t)v68);
  v19 = __dst[1];
  if (LODWORD(__dst[1]) > 1)
  {
    v68[0] = "I16";
    v69 = 259;
    v48 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "I32";
    v69 = 259;
    v49 = operator new();
    llvm::BasicBlock::BasicBlock();
    v50 = llvm::ConstantInt::get();
    v69 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, AlignedLoad, v50, (uint64_t)v68);
    llvm::IRBuilderBase::CreateCondBr(a1 + 1, ICmp, v49, v48);
    a1[7] = v48;
    a1[8] = v48 + 40;
    if (v19 == 4)
    {
      v19 = 3;
    }
    else if (v19 == 8)
    {
      v19 = 7;
    }
    LODWORD(__dst[1]) = v19;
    AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, __dst, 1, 1, 0);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 1), v9);
    a1[7] = v49;
    a1[8] = v49 + 40;
    LODWORD(__dst[1]) = v19;
    v44 = (uint64_t)a1;
    v45 = 0;
    v46 = 0;
    v47 = 0;
  }
  else
  {
    v68[0] = "SET_TOP_NIBBLE";
    v69 = 259;
    v20 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "NOPACK";
    v69 = 259;
    v21 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP32";
    v69 = 259;
    v56 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_NO_PACK";
    v69 = 259;
    v54 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_UNORM_POW2";
    v69 = 259;
    v22 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_UNORM16";
    v69 = 259;
    v58 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_UNORM8";
    v69 = 259;
    v55 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "UNSET_TOP_NIBBLE";
    v69 = 259;
    v52 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_UNORM10_OR_XR10";
    v69 = 259;
    v60 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_UNORM10";
    v69 = 259;
    v61 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_RGBXR10";
    v69 = 259;
    v57 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_OTHER_RGBXR10";
    v69 = 259;
    v53 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_ARGBV16";
    v69 = 259;
    v62 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_SRGBXR10_OR_SARGBV16";
    v69 = 259;
    v59 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_SRGBXR10";
    v69 = 259;
    v63 = operator new();
    llvm::BasicBlock::BasicBlock();
    v68[0] = "FP16_SARGBV16";
    v69 = 259;
    v23 = operator new();
    llvm::BasicBlock::BasicBlock();
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v69 = 257;
    LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), (llvm::Value *)AlignedLoad, v24, (const llvm::Twine *)v68);
    v26 = a1[24];
    v69 = 257;
    Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v26, (uint64_t)v68);
    v28 = llvm::ConstantInt::get();
    v69 = 257;
    v29 = llvm::IRBuilderBase::CreateICmp(a1 + 1, 35, Cast, v28, (uint64_t)v68);
    llvm::IRBuilderBase::CreateCondBr(a1 + 1, v29, v20, v52);
    a1[7] = v20;
    a1[8] = v20 + 40;
    v30 = llvm::ConstantInt::get();
    v69 = 257;
    v31 = llvm::IRBuilderBase::CreateICmp(a1 + 1, 35, Cast, v30, (uint64_t)v68);
    llvm::IRBuilderBase::CreateCondBr(a1 + 1, v31, v21, v22);
    a1[7] = v21;
    a1[8] = v21 + 40;
    v32 = llvm::ConstantInt::get();
    v69 = 257;
    v33 = llvm::IRBuilderBase::CreateICmp(a1 + 1, 35, Cast, v32, (uint64_t)v68);
    llvm::IRBuilderBase::CreateCondBr(a1 + 1, v33, v56, v54);
    a1[7] = v56;
    a1[8] = v56 + 40;
    LODWORD(__dst[1]) = 0;
    AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, __dst, 0, 0, 0);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 1), v9);
    a1[7] = v54;
    a1[8] = v54 + 40;
    LODWORD(__dst[1]) = 1;
    AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, __dst, 0, 0, 0);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 1), v9);
    a1[7] = v22;
    a1[8] = v22 + 40;
    v34 = llvm::ConstantInt::get();
    v69 = 257;
    v35 = llvm::IRBuilderBase::CreateICmp(a1 + 1, 35, Cast, v34, (uint64_t)v68);
    llvm::IRBuilderBase::CreateCondBr(a1 + 1, v35, v58, v55);
    a1[7] = v58;
    a1[8] = v58 + 40;
    LODWORD(__dst[1]) = 1;
    AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, __dst, 1, 0, 0);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 1), v9);
    a1[7] = v55;
    a1[8] = v55 + 40;
    LODWORD(__dst[1]) = 1;
    AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, __dst, 0, 1, 0);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 1), v9);
    a1[7] = v52;
    a1[8] = v52 + 40;
    v36 = llvm::ConstantInt::get();
    v69 = 257;
    v37 = llvm::IRBuilderBase::CreateICmp(a1 + 1, 35, Cast, v36, (uint64_t)v68);
    llvm::IRBuilderBase::CreateCondBr(a1 + 1, v37, v60, v53);
    a1[7] = v60;
    a1[8] = v60 + 40;
    v38 = llvm::ConstantInt::get();
    v69 = 257;
    v39 = llvm::IRBuilderBase::CreateICmp(a1 + 1, 35, Cast, v38, (uint64_t)v68);
    llvm::IRBuilderBase::CreateCondBr(a1 + 1, v39, v61, v57);
    a1[7] = v61;
    a1[8] = v61 + 40;
    LODWORD(__dst[1]) = 1;
    AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, __dst, 1, 1, 0);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 1), v9);
    a1[7] = v57;
    a1[8] = v57 + 40;
    LODWORD(__dst[1]) = 1;
    AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, __dst, 1, 1, 1);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 1), v9);
    a1[7] = v53;
    a1[8] = v53 + 40;
    v40 = llvm::ConstantInt::get();
    v69 = 257;
    v41 = llvm::IRBuilderBase::CreateICmp(a1 + 1, 35, Cast, v40, (uint64_t)v68);
    llvm::IRBuilderBase::CreateCondBr(a1 + 1, v41, v62, v59);
    a1[7] = v62;
    a1[8] = v62 + 40;
    LODWORD(__dst[1]) = 1;
    AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, __dst, 1, 1, 3);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 1), v9);
    a1[7] = v59;
    a1[8] = v59 + 40;
    v42 = llvm::ConstantInt::get();
    v69 = 257;
    v43 = llvm::IRBuilderBase::CreateICmp(a1 + 1, 35, Cast, v42, (uint64_t)v68);
    llvm::IRBuilderBase::CreateCondBr(a1 + 1, v43, v63, v23);
    a1[7] = v63;
    a1[8] = v63 + 40;
    LODWORD(__dst[1]) = 1;
    AGCLLVMG5TargetLowerer::buildReadWriteImage((uint64_t)a1, __dst, 1, 1, 2);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 1), v9);
    a1[7] = v23;
    a1[8] = v23 + 40;
    LODWORD(__dst[1]) = 1;
    v44 = (uint64_t)a1;
    v45 = 1;
    v46 = 1;
    v47 = 4;
  }
  v14 = AGCLLVMG5TargetLowerer::buildReadWriteImage(v44, __dst, v45, v46, v47);
  llvm::IRBuilderBase::CreateBr(v7, v9);
  return v14;
}

uint64_t AGCLLVMGen2TargetLowerer::setSlcCachePolicyForImageWrites(AGCLLVMGen2TargetLowerer *this, llvm::Function *a2)
{
  return llvm::Function::addFnAttr();
}

uint64_t AGCLLVMGen2TargetLowerer::bypassL1ForStoresForVertexDataDependencies(AGCLLVMGen2TargetLowerer *this, llvm::Function *a2)
{
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

uint64_t AGCLLVMGen2TargetLowerer::setLoadStoreCacheControl()
{
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  llvm::Function::addFnAttr();
  return llvm::Function::addFnAttr();
}

void AGCLLVMGen2TargetLowerer::printAsm(AGCLLVMGen2TargetLowerer *this, const unsigned __int8 *a2, unint64_t a3, const AGCLLVMObject *a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  std::string::size_type v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  char v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *p_p;
  void *v39[2];
  unsigned __int8 v40;
  std::string v41;
  std::string __p;
  char __str[128];
  std::string v44;
  std::string v45;
  _QWORD v46[5];

  v46[2] = *MEMORY[0x1E0C80C00];
  v7 = (const char *)(*(uint64_t (**)(const AGCLLVMObject *))(*(_QWORD *)a4 + 56))(a4);
  snprintf(__str, 0x80uLL, "%s shader %u (driver disassembler)", v7, *((_DWORD *)a4 + 818));
  printMessage((char **)&AGCPrinter, "------ Start USC %s -------\n", v8, v9, v10, v11, v12, v13, (char)__str);
  memset(&__p, 0, sizeof(__p));
  if (a3 >= 2)
  {
    v20 = 0;
    v21 = 0;
    v22 = 1;
    v23 = 1;
    do
    {
      if (v23)
      {
        std::string::basic_string[abi:nn180100]<0>(&v41, "\t[Inst ");
        std::to_string(&v44, v21);
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v44;
        else
          v24 = (std::string *)v44.__r_.__value_.__r.__words[0];
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
        else
          size = v44.__r_.__value_.__l.__size_;
        v26 = std::string::append(&v41, (const std::string::value_type *)v24, size);
        v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::string::basic_string[abi:nn180100]<0>(v39, ", offset ");
        if ((v40 & 0x80u) == 0)
          v28 = v39;
        else
          v28 = (void **)v39[0];
        if ((v40 & 0x80u) == 0)
          v29 = v40;
        else
          v29 = (std::string::size_type)v39[1];
        v30 = std::string::append(&v45, (const std::string::value_type *)v28, v29);
        v31 = v30->__r_.__value_.__r.__words[0];
        v46[0] = v30->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
        v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v31;
        __p.__r_.__value_.__l.__size_ = v46[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v46 + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v32;
        if ((char)v40 < 0)
          operator delete(v39[0]);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        sprintf((char *)&v44, " 0x%04x", v22 - 1);
        std::string::basic_string[abi:nn180100]<0>(&v41, "]");
        v33 = std::string::insert(&v41, 0, (const std::string::value_type *)&v44);
        v34 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v45;
        else
          v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
        else
          v36 = v45.__r_.__value_.__l.__size_;
        std::string::append(&__p, (const std::string::value_type *)v35, v36);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        ++v21;
      }
      sprintf((char *)&v45, " 0x%04x", *(unsigned __int16 *)&a2[2 * v20]);
      std::string::append(&__p, (const std::string::value_type *)&v45);
      if ((*(_WORD *)&a2[2 * v20] & 0x100) != 0)
      {
        v23 = 0;
      }
      else
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          LOBYTE(p_p) = __p.__r_.__value_.__s.__data_[0];
        printMessage((char **)&AGCPrinter, "%s", v14, v15, v16, v17, v18, v19, (char)p_p);
        MEMORY[0x1CAA2D494](&__p, &unk_1C3E4D9BB);
        v23 = 1;
      }
      v20 = v22;
    }
    while (a3 >> 1 > v22++);
  }
  printMessage((char **)&AGCPrinter, "\n------- End USC %s --------\n", v14, v15, v16, v17, v18, v19, (char)__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMGen2TargetLowerer::countInstructions(AGCLLVMGen2TargetLowerer *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t AGCLLVMG5TargetLowerer::buildFrontFacing(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  llvm::CmpInst **v9;
  llvm::Value *v10;
  llvm::Type *v11;
  uint64_t AlignedLoad;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17[2];
  _BYTE v18[16];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  if (*(_QWORD *)(a1 + 1568))
    strlen(*(const char **)(a1 + 1568));
  v17[0] = v18;
  v17[1] = (void *)0x100000000;
  llvm::SmallVectorImpl<llvm::Type *>::assign((uint64_t)v17, 0);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v7 = v6;
  if (v17[0] != v18)
    free(v17[0]);
  v19 = 257;
  v8 = (uint64_t *)(a1 + 8);
  v9 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall((uint64_t)v8, **(_QWORD **)(*(_QWORD *)v7 + 16), v7, 0, 0, (uint64_t)v17);
  v19 = 257;
  v11 = AGCLLVMBuilder::tryDeducePointeeType(a3, v10);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v8, v11, (uint64_t)a3, 0, (uint64_t)v17);
  v19 = 257;
  return llvm::IRBuilderBase::CreateICmp(v8, 32, v9, AlignedLoad, (uint64_t)v17);
}

llvm::Value *AGCLLVMG5TargetLowerer::applyCoordBias(AGCLLVMG5TargetLowerer *this, llvm::Value *a2, llvm::Value **a3, char a4)
{
  uint64_t v8;
  llvm::Value *Cast;
  llvm::Type *v10;
  llvm::Value *v11;
  uint64_t GEP;
  uint64_t v13;
  llvm::Type **v14;
  llvm::Value *v15;
  llvm::Type *v16;
  llvm::Value *AlignedLoad;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::Value *result;
  __int128 v26;
  uint64_t v27;
  int v28;
  _BYTE v29[32];
  __int16 v30;

  v8 = llvm::PointerType::get();
  v30 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a2, v8, (uint64_t)v29);
  v10 = (llvm::Type *)*((_QWORD *)this + 21);
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  v30 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((AGCLLVMG5TargetLowerer *)((char *)this + 8), v10, Cast, v11, (const llvm::Twine *)v29);
  v13 = llvm::PointerType::get();
  v30 = 257;
  v14 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, GEP, v13, (uint64_t)v29);
  v30 = 257;
  v16 = AGCLLVMBuilder::tryDeducePointeeType(v14, v15);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v16, (uint64_t)v14, 0, (uint64_t)v29);
  v18 = *(_QWORD *)*a3;
  v19 = *(unsigned int *)(v18 + 32);
  InsertElement = AGCLLVMBuilder::extendVector(this, AlignedLoad, *(_DWORD *)(v18 + 32));
  if (v19 >= 3)
  {
    for (i = 2; i != v19; ++i)
    {
      v22 = (llvm::Value *)llvm::ConstantFP::get();
      v30 = 257;
      v23 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMG5TargetLowerer *)((char *)this + 8), InsertElement, v22, v23, (const llvm::Twine *)v29);
    }
  }
  v24 = AGCLLVMGen2TargetLowerer::foldFPTruncExt(this, *a3);
  *a3 = v24;
  v30 = 257;
  result = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)v24, (uint64_t)InsertElement, (uint64_t)v29);
  *a3 = result;
  if ((a4 & 1) != 0)
  {
    v26 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMG5TargetLowerer *)((char *)this + 8));
    v28 = *((_DWORD *)this + 26);
    result = (llvm::Value *)(*(uint64_t (**)(AGCLLVMG5TargetLowerer *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, &v26, *a3, 0);
    *a3 = result;
    if (v27)
      return (llvm::Value *)llvm::MetadataTracking::untrack();
  }
  return result;
}

llvm::Value *AGCLLVMG5TargetLowerer::buildReadWriteImage(uint64_t a1, _QWORD *__src, int a3, int a4, int a5)
{
  int v5;
  _QWORD *v7;
  llvm::Type **v10;
  llvm::Type *v11;
  llvm::Value *AlignedLoad;
  unsigned int v13;
  llvm::Value *v14;
  uint64_t v15;
  size_t v16;
  llvm::Value *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  llvm::Value *v24;
  uint64_t v25;
  llvm::Value *v26;
  llvm::Value *v27;
  llvm::Value *v28;
  llvm::Value *v29;
  llvm::Value *v30;
  uint64_t v31;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v36;
  llvm::Value *Element;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t k;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  llvm::Value *v46;
  uint64_t j;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int *v56;
  int v57;
  uint64_t SamplerFunction;
  int v60;
  uint64_t v61;
  llvm::Value *Splat;
  llvm::Value *v63;
  llvm::Value *Add;
  llvm::Value *v65;
  llvm::Type *v66;
  llvm::Type **v67;
  llvm::Value *v68;
  llvm::Value *v69;
  llvm::Value *v70;
  llvm::Value *v71;
  llvm::Value *v72;
  uint64_t v73;
  uint64_t v74;
  llvm::Value *v75;
  llvm::Value *v76;
  llvm::Value *v77;
  llvm::Value *v78;
  llvm::Value *v79;
  uint64_t v80;
  uint64_t v81;
  llvm::Value *v82;
  uint64_t Select;
  llvm::Value *v84;
  llvm::Value *Shl;
  llvm::Value *v86;
  llvm::Value *v87;
  llvm::Value *v88;
  llvm::Value *v89;
  llvm::Value *v90;
  llvm::Value *v91;
  uint64_t v92;
  uint64_t ICmp;
  llvm::Value *v94;
  llvm::Value *v95;
  llvm::Value *v96;
  llvm::Value *v97;
  llvm::Value *v98;
  llvm::Value *v99;
  llvm::Value *v100;
  llvm::Value *v101;
  llvm::Value *v102;
  llvm::Value *v103;
  llvm::Value *v104;
  llvm::Value *v105;
  llvm::Value *v106;
  llvm::Value *v107;
  llvm::Value *v108;
  llvm::Value *v109;
  uint64_t v110;
  llvm::Value *v111;
  llvm::CmpInst **v112;
  uint64_t v113;
  uint64_t v114;
  llvm::Value *v115;
  llvm::Type *v116;
  llvm::Value *NullValue;
  llvm::Value *v118;
  llvm::Value *v119;
  llvm::Value *v120;
  llvm::Value *v121;
  llvm::Value *v122;
  llvm::Value *v123;
  llvm::Value *v124;
  uint64_t v125;
  llvm::Value *v126;
  llvm::Type *v127;
  llvm::Value *v128;
  llvm::Value *v129;
  llvm::Value *v130;
  llvm::Value *v131;
  llvm::Value *v132;
  llvm::Value *v133;
  llvm::Value *v134;
  llvm::Value *v135;
  llvm::Value *v136;
  int v137;
  _QWORD *v138;
  llvm::Value *Cast;
  llvm::Value *v141;
  _BYTE v142[32];
  __int16 v143;
  _BYTE v144[32];
  __int16 v145;
  _BYTE v146[32];
  __int16 v147;
  _BYTE v148[32];
  __int16 v149;
  _BYTE v150[32];
  __int16 v151;
  _BYTE v152[32];
  __int16 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *__dst[35];

  v5 = a4;
  v7 = __src;
  __dst[33] = *(void **)MEMORY[0x1E0C80C00];
  if (*(_DWORD *)__src != 3)
  {
    v17 = 0;
    goto LABEL_37;
  }
  v10 = (llvm::Type **)__src[10];
  LOWORD(__dst[4]) = 257;
  v11 = AGCLLVMBuilder::tryDeducePointeeType(v10, (llvm::Value *)__src);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v11, (uint64_t)v10, 0, (uint64_t)__dst);
  v13 = *((_DWORD *)v7 + 2);
  v14 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, (llvm::Value *)v7[28], 4);
  v15 = *(_QWORD *)(a1 + 1888);
  if (v15)
    v16 = strlen(*(const char **)(a1 + 1888));
  else
    v16 = 0;
  v18 = (uint64_t *)AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v15, v16, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 192));
  v19 = *(_QWORD *)(a1 + 192);
  LOWORD(__dst[4]) = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)AlignedLoad, v19, (uint64_t)__dst);
  v20 = v13 - 3;
  if ((*(_DWORD *)(*(_QWORD *)v14 + 8) & 0xFE) == 0x12)
    v21 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v14 + 16) + 8);
  else
    v21 = *(_DWORD *)(*(_QWORD *)v14 + 8);
  v22 = v21 >= 7;
  v23 = 192;
  if (!v22)
    v23 = 152;
  v17 = AGCLLVMBuilder::extendFromSmall((llvm::Type **)a1, v14, *(llvm::Type **)(a1 + v23), v20 < 2);
  if (v13 > 1)
  {
    if (a3)
    {
      v137 = a3;
      InsertElement = (llvm::Value *)llvm::UndefValue::get();
      if (a4)
      {
        for (i = 0; i != 4; ++i)
        {
          __dst[0] = &__dst[2];
          __dst[1] = (void *)0x300000000;
          v153 = 257;
          v36 = (llvm::Value *)llvm::ConstantInt::get();
          Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v17, v36, (const llvm::Twine *)v152);
          v38 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, Element, v20 < 2);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)v38);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)Cast);
          v153 = 257;
          v39 = llvm::IRBuilderBase::CreateCall(a1 + 8, v18[3], (uint64_t)v18, (uint64_t)__dst[0], LODWORD(__dst[1]), (uint64_t)v152);
          v153 = 257;
          v40 = (llvm::Value *)llvm::ConstantInt::get();
          InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v39, v40, (const llvm::Twine *)v152);
          if (__dst[0] != &__dst[2])
            free(__dst[0]);
        }
      }
      else
      {
        for (j = 0; j != 4; ++j)
        {
          __dst[0] = &__dst[2];
          __dst[1] = (void *)0x300000000;
          v153 = 257;
          v48 = (llvm::Value *)llvm::ConstantInt::get();
          v49 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v17, v48, (const llvm::Twine *)v152);
          v50 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, v49, v20 < 2);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)v50);
          llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)Cast);
          v153 = 257;
          v51 = llvm::IRBuilderBase::CreateCall(a1 + 8, v18[3], (uint64_t)v18, (uint64_t)__dst[0], LODWORD(__dst[1]), (uint64_t)v152);
          v153 = 257;
          v52 = (llvm::Value *)llvm::ConstantInt::get();
          InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v51, v52, (const llvm::Twine *)v152);
          if (__dst[0] != &__dst[2])
            free(__dst[0]);
        }
      }
LABEL_35:
      v53 = *(_QWORD *)(a1 + 280);
      LOWORD(__dst[4]) = 257;
      v17 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)InsertElement, v53, (uint64_t)__dst);
      a3 = v137;
      goto LABEL_36;
    }
    v17 = (llvm::Value *)AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, v17, *(llvm::Type **)(a1 + 168));
LABEL_36:
    v5 = a4;
    goto LABEL_37;
  }
  if (v13 != 1)
    goto LABEL_36;
  v5 = a4;
  if (!a3 || !a4)
  {
    if (!a3)
    {
      if (a4)
      {
        v60 = a3;
        v61 = AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, v17, *(llvm::Type **)(a1 + 200));
        llvm::ConstantInt::get();
        Splat = (llvm::Value *)llvm::ConstantDataVector::getSplat();
        LOWORD(__dst[4]) = 257;
        v63 = (llvm::Value *)v61;
        a3 = v60;
        Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v63, Splat, (const llvm::Twine *)__dst);
        v65 = (llvm::Value *)AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, Add, *(llvm::Type **)(a1 + 168));
        v66 = *(llvm::Type **)(a1 + 152);
        v67 = (llvm::Type **)a1;
      }
      else
      {
        v66 = *(llvm::Type **)(a1 + 152);
        v67 = (llvm::Type **)a1;
        v65 = v17;
      }
      v17 = AGCLLVMBuilder::truncateToSmall(v67, v65, v66);
      goto LABEL_37;
    }
    v137 = a3;
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    for (k = 0; k != 4; ++k)
    {
      __dst[0] = &__dst[2];
      __dst[1] = (void *)0x300000000;
      v153 = 257;
      v42 = (llvm::Value *)llvm::ConstantInt::get();
      v43 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v17, v42, (const llvm::Twine *)v152);
      v44 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, v43, 1);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)v44);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)__dst, (uint64_t)Cast);
      v153 = 257;
      v45 = llvm::IRBuilderBase::CreateCall(a1 + 8, v18[3], (uint64_t)v18, (uint64_t)__dst[0], LODWORD(__dst[1]), (uint64_t)v152);
      v153 = 257;
      v46 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v45, v46, (const llvm::Twine *)v152);
      if (__dst[0] != &__dst[2])
        free(__dst[0]);
    }
    goto LABEL_35;
  }
  v138 = v7;
  v24 = (llvm::Value *)AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, v17, *(llvm::Type **)(a1 + 200));
  v25 = AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, v24, *(llvm::Type **)(a1 + 168));
  v155 = a1;
  v156 = v25;
  v154 = a1;
  __dst[0] = (void *)a1;
  LODWORD(__dst[1]) = a5;
  __dst[2] = v18;
  __dst[3] = &v156;
  __dst[4] = &v155;
  __dst[5] = &v154;
  AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t *)__dst);
  v141 = v26;
  AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t *)__dst);
  v28 = v27;
  AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t *)__dst);
  v30 = v29;
  v31 = llvm::ConstantInt::get();
  if ((a5 - 3) >= 2)
  {
    v33 = (llvm::Value *)v31;
    if (!a5)
    {
      AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t *)__dst);
      v33 = v68;
      goto LABEL_55;
    }
  }
  else
  {
    AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()((uint64_t *)__dst);
    v33 = v32;
  }
  if ((a5 - 1) < 2)
  {
    v153 = 257;
    v84 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v33, v84, (const llvm::Twine *)v152);
    v151 = 257;
    v86 = (llvm::Value *)llvm::ConstantInt::get();
    v87 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v141, v86, (const llvm::Twine *)v150);
    v149 = 257;
    v88 = (llvm::Value *)llvm::ConstantInt::get();
    v89 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v28, v88, (const llvm::Twine *)v148);
    v147 = 257;
    v90 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v89, v30, (const llvm::Twine *)v146);
    v145 = 257;
    v91 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v87, v90, (const llvm::Twine *)v144);
    v143 = 257;
    v92 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, v91, (const llvm::Twine *)v142);
    ICmp = 0;
    goto LABEL_56;
  }
  if ((a5 - 3) < 2)
  {
    v153 = 257;
    v69 = (llvm::Value *)llvm::ConstantInt::get();
    v70 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v28, v69, (const llvm::Twine *)v152);
    v151 = 257;
    v71 = (llvm::Value *)llvm::ConstantInt::get();
    v72 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v30, v71, (const llvm::Twine *)v150);
    v149 = 257;
    v73 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v70, v72, (const llvm::Twine *)v148);
    v74 = *(_QWORD *)(a1 + 216);
    v147 = 257;
    v75 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v73, v74, (uint64_t)v146);
    v153 = 257;
    v76 = (llvm::Value *)llvm::ConstantInt::get();
    v77 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v33, v76, (const llvm::Twine *)v152);
    v151 = 257;
    v78 = (llvm::Value *)llvm::ConstantInt::get();
    v79 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v141, v78, (const llvm::Twine *)v150);
    v149 = 257;
    v80 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v77, v79, (const llvm::Twine *)v148);
    v81 = *(_QWORD *)(a1 + 216);
    v147 = 257;
    v5 = a4;
    v82 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v80, v81, (uint64_t)v146);
    Select = AGCLLVMBuilder::concatenateVectors((AGCLLVMBuilder *)a1, v75, v82);
LABEL_58:
    v17 = (llvm::Value *)Select;
    goto LABEL_59;
  }
  if (a5)
  {
    v17 = 0;
    goto LABEL_59;
  }
LABEL_55:
  v153 = 257;
  v94 = (llvm::Value *)llvm::ConstantInt::get();
  v136 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v33, v94, (const llvm::Twine *)v152);
  v151 = 257;
  v95 = v30;
  v96 = (llvm::Value *)llvm::ConstantInt::get();
  v97 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v30, v96, (const llvm::Twine *)v150);
  v149 = 257;
  v98 = (llvm::Value *)llvm::ConstantInt::get();
  v99 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v28, v98, (const llvm::Twine *)v148);
  v147 = 257;
  v100 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v99, v141, (const llvm::Twine *)v146);
  v145 = 257;
  v101 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v97, v100, (const llvm::Twine *)v144);
  v143 = 257;
  v92 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v136, v101, (const llvm::Twine *)v142);
  v153 = 257;
  v102 = (llvm::Value *)llvm::ConstantInt::get();
  v103 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v33, v102, (const llvm::Twine *)v152);
  v151 = 257;
  v104 = (llvm::Value *)llvm::ConstantInt::get();
  v105 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v141, v104, (const llvm::Twine *)v150);
  v149 = 257;
  v106 = (llvm::Value *)llvm::ConstantInt::get();
  v107 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v28, v106, (const llvm::Twine *)v148);
  v147 = 257;
  v108 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v107, v95, (const llvm::Twine *)v146);
  v145 = 257;
  v109 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v105, v108, (const llvm::Twine *)v144);
  v143 = 257;
  v110 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v103, v109, (const llvm::Twine *)v142);
  v111 = (llvm::Value *)llvm::ConstantInt::get();
  v153 = 257;
  v112 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v111, (const llvm::Twine *)v152);
  v113 = llvm::ConstantInt::get();
  v151 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 33, v112, v113, (uint64_t)v150);
  v114 = *(_QWORD *)(a1 + 216);
  v153 = 257;
  v115 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v110, v114, (uint64_t)v152);
  NullValue = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 280), v116);
  v153 = 257;
  v118 = (llvm::Value *)llvm::ConstantInt::get();
  v119 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v115, v118, (const llvm::Twine *)v152);
  v151 = 257;
  v120 = (llvm::Value *)llvm::ConstantInt::get();
  v121 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), NullValue, v119, v120, (const llvm::Twine *)v150);
  v153 = 257;
  v122 = (llvm::Value *)llvm::ConstantInt::get();
  v123 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v115, v122, (const llvm::Twine *)v152);
  v151 = 257;
  v124 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v121, v123, v124, (const llvm::Twine *)v150);
LABEL_56:
  v125 = *(_QWORD *)(a1 + 216);
  v153 = 257;
  v126 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v92, v125, (uint64_t)v152);
  v128 = (llvm::Value *)llvm::Constant::getNullValue(*(llvm::Constant **)(a1 + 280), v127);
  v153 = 257;
  v129 = (llvm::Value *)llvm::ConstantInt::get();
  v130 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v126, v129, (const llvm::Twine *)v152);
  v151 = 257;
  v131 = (llvm::Value *)llvm::ConstantInt::get();
  v132 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v128, v130, v131, (const llvm::Twine *)v150);
  v153 = 257;
  v133 = (llvm::Value *)llvm::ConstantInt::get();
  v134 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v126, v133, (const llvm::Twine *)v152);
  v151 = 257;
  v135 = (llvm::Value *)llvm::ConstantInt::get();
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v132, v134, v135, (const llvm::Twine *)v150);
  if (ICmp)
  {
    v153 = 257;
    Select = llvm::IRBuilderBase::CreateSelect();
    goto LABEL_58;
  }
LABEL_59:
  v7 = v138;
LABEL_37:
  v54 = *((_DWORD *)v7 + 2);
  if (v54 > 1)
  {
    memcpy(__dst, v7, 0x108uLL);
    if ((v54 & 0xFFFFFFFB) == 3)
      v57 = v5;
    else
      v57 = 1;
    LODWORD(__dst[1]) = v57 | a3;
    v56 = (int *)__dst;
    v55 = a1;
  }
  else
  {
    v55 = a1;
    v56 = (int *)v7;
  }
  SamplerFunction = AGCLLVMGen2TargetLowerer::getSamplerFunction(v55, v56);
  return AGCLLVMGen2TargetLowerer::buildReadWriteImage(a1, (int *)v7, (uint64_t)v17, SamplerFunction);
}

void AGCLLVMG5TargetLowerer::convertWriteValue(ComponentType,llvm::Value *,llvm::Value *,BOOL,BOOL,AGCLLVMG5TargetLowerer::XR10Format)::$_2::operator()(uint64_t *a1)
{
  uint64_t v2;
  llvm::Value *v3;
  llvm::Value *v4;
  _BYTE v5[32];
  __int16 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(llvm::Value **)a1[3];
  v6 = 257;
  v4 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v2 + 8), v3, v4, (const llvm::Twine *)v5);
  __asm { BR              X10 }
}

uint64_t sub_1C3D934A4()
{
  uint64_t *v0;
  AGCLLVMBuilder *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t FMul;
  uint64_t v7;
  llvm::Value *FAdd;
  uint64_t v9;
  llvm::Value *v10;
  llvm::CmpInst **v11;
  uint64_t v12;
  llvm::Value *Select;
  llvm::Value *v14;
  _BYTE v16[32];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  v4 = **(_QWORD **)(v2 + 40);
  v5 = llvm::ConstantFP::get();
  v17 = 257;
  FMul = llvm::IRBuilderBase::CreateFMul(v4 + 8, v3, v5, (uint64_t)v16);
  v7 = llvm::ConstantFP::get();
  v19 = 257;
  FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd(v4 + 8, FMul, v7, (uint64_t)v18);
  v18[0] = AGCLLVMBuilder::f32Extend(v1, FAdd, 1);
  v18[1] = llvm::ConstantInt::get();
  v9 = *(_QWORD *)(v2 + 16);
  v17 = 257;
  v10 = llvm::IRBuilderBase::CreateCall((uint64_t)v0, *(_QWORD *)(v9 + 24), v9, (uint64_t)v18, 2, (uint64_t)v16);
  v11 = (llvm::CmpInst **)AGCLLVMBuilder::extendFromSmall((llvm::Type **)v1, v10, *(llvm::Type **)v10, 1);
  v12 = llvm::ConstantInt::get();
  v17 = 257;
  llvm::IRBuilderBase::CreateICmp(v0, 34, v11, v12, (uint64_t)v16);
  llvm::ConstantInt::get();
  v19 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v17 = 257;
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)v0, Select, v14, (const llvm::Twine *)v16);
}

void AGCLLVMG5TargetConfig::createTargetLowerer(const char **this, llvm::LLVMContext *a2)
{
  AGCLLVMGen2TargetLowerer *v4;
  uint64_t v5;

  v4 = (AGCLLVMGen2TargetLowerer *)operator new();
  AGCLLVMGen2TargetLowerer::AGCLLVMGen2TargetLowerer(v4, a2, this);
  *(_QWORD *)v5 = &off_1E7EC97B0;
  *(_BYTE *)(v5 + 1728) = 1;
  *(_BYTE *)(v5 + 1730) = 1;
  *(_BYTE *)(v5 + 1840) = 0;
}

void AGCLLVMG5TargetConfig::~AGCLLVMG5TargetConfig(AGCLLVMG5TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMG9TargetConfig::createTargetLowerer(const char **this, llvm::LLVMContext *a2)
{
  AGCLLVMGen2TargetLowerer *v4;
  uint64_t v5;

  v4 = (AGCLLVMGen2TargetLowerer *)operator new();
  AGCLLVMGen2TargetLowerer::AGCLLVMGen2TargetLowerer(v4, a2, this);
  *(_QWORD *)v5 = &off_1E7EC9FB0;
  *(_BYTE *)(v5 + 1728) = 1;
  *(_BYTE *)(v5 + 1730) = 1;
}

void AGCLLVMG9TargetConfig::~AGCLLVMG9TargetConfig(AGCLLVMG9TargetConfig *this)
{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
}

{
  *(_QWORD *)this = &off_1E7EC0960;
  std::unique_ptr<AGCLLVMAirBuiltinsMap>::reset[abi:nn180100]((uint64_t *)this + 7, 0);
  JUMPOUT(0x1CAA2D68CLL);
}

llvm::Value *AGCLLVMG9TargetLowerer::coerceSampleType(_QWORD *a1, llvm::Value *a2, int a3)
{
  uint64_t v4;
  _BYTE v5[32];
  __int16 v6;

  if (a3 != 8 && a3 != 4
    || (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) != 0x12
    || *(_BYTE *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8))
  {
    return AGCLLVMBuilder::coerceSampleType(a1, a2, a3);
  }
  v4 = a1[38];
  v6 = 257;
  return (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)a2, v4, (uint64_t)v5);
}

void AGCLLVMG9TargetLowerer::~AGCLLVMG9TargetLowerer(AGCLLVMG9TargetLowerer *this)
{
  AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

llvm::Value *AGCLLVMG9TargetLowerer::buildSampleFunction(AGCLLVMBuilder *a1, uint64_t a2, uint64_t a3)
{
  llvm::Value *v7;
  uint64_t SamplerFunction;
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  if ((*(_DWORD *)a3 - 6) <= 2)
    return (llvm::Value *)(*(uint64_t (**)(AGCLLVMBuilder *, uint64_t))(*(_QWORD *)a1 + 1504))(a1, a3);
  if (*(_DWORD *)a3 == 3)
    v7 = AGCLLVMGen2TargetLowerer::convertWriteValue(a1, *(_DWORD *)(a3 + 8), *(llvm::Value **)(a3 + 224));
  else
    v7 = 0;
  SamplerFunction = AGCLLVMGen2TargetLowerer::getSamplerFunction((uint64_t)a1, (int *)a3);
  return AGCLLVMGen2TargetLowerer::buildReadWriteImage((uint64_t)a1, (int *)a3, (uint64_t)v7, SamplerFunction);
}

llvm::Value *AGCLLVMG9TargetLowerer::applyCoordBias(AGCLLVMG9TargetLowerer *this, llvm::Value *a2, llvm::Value **a3, char a4)
{
  uint64_t v8;
  llvm::Value *Cast;
  llvm::Type *v10;
  llvm::Value *v11;
  uint64_t GEP;
  uint64_t v13;
  llvm::Type **v14;
  llvm::Value *v15;
  llvm::Type *v16;
  llvm::Value *AlignedLoad;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::Value *result;
  __int128 v26;
  uint64_t v27;
  int v28;
  _BYTE v29[32];
  __int16 v30;

  v8 = llvm::PointerType::get();
  v30 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a2, v8, (uint64_t)v29);
  v10 = (llvm::Type *)*((_QWORD *)this + 21);
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  v30 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((AGCLLVMG9TargetLowerer *)((char *)this + 8), v10, Cast, v11, (const llvm::Twine *)v29);
  v13 = llvm::PointerType::get();
  v30 = 257;
  v14 = (llvm::Type **)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, GEP, v13, (uint64_t)v29);
  v30 = 257;
  v16 = AGCLLVMBuilder::tryDeducePointeeType(v14, v15);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v16, (uint64_t)v14, 0, (uint64_t)v29);
  v18 = *(_QWORD *)*a3;
  v19 = *(unsigned int *)(v18 + 32);
  InsertElement = AGCLLVMBuilder::extendVector(this, AlignedLoad, *(_DWORD *)(v18 + 32));
  if (v19 >= 3)
  {
    for (i = 2; i != v19; ++i)
    {
      v22 = (llvm::Value *)llvm::ConstantFP::get();
      v30 = 257;
      v23 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMG9TargetLowerer *)((char *)this + 8), InsertElement, v22, v23, (const llvm::Twine *)v29);
    }
  }
  v24 = AGCLLVMGen2TargetLowerer::foldFPTruncExt(this, *a3);
  *a3 = v24;
  v30 = 257;
  result = (llvm::Value *)llvm::IRBuilderBase::CreateFSub((uint64_t)this + 8, (uint64_t)v24, (uint64_t)InsertElement, (uint64_t)v29);
  *a3 = result;
  if ((a4 & 1) != 0)
  {
    v26 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMG9TargetLowerer *)((char *)this + 8));
    v28 = *((_DWORD *)this + 26);
    result = (llvm::Value *)(*(uint64_t (**)(AGCLLVMG9TargetLowerer *, __int128 *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, &v26, *a3, 0);
    *a3 = result;
    if (v27)
      return (llvm::Value *)llvm::MetadataTracking::untrack();
  }
  return result;
}

uint64_t *AGCLLVMCreateG9TargetConfig(int a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  int v4;
  int v5;
  int v6;
  int v7;

  if ((v1 & 1) == 0)
  {
    v6 = a1;
    a1 = v6;
    if (v4)
    {
      qword_1ED8391B0 = 0;
      qword_1ED8391C8 = 0;
      qword_1ED8391A8 = 0x600010006;
      qword_1ED8391B8 = 0x10000010100;
      unk_1ED8391C0 = 60;
      qword_1ED839198 = (uint64_t)"agx1-apple-ios";
      unk_1ED8391A0 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9pA0 = (uint64_t)&off_1E7EC9EB0;
      __cxa_atexit((void (*)(void *))AGCLLVMG9TargetConfig::~AGCLLVMG9TargetConfig, &AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9pA0, &dword_1C3C54000);
      a1 = v6;
    }
  }
  if ((v2 & 1) == 0)
  {
    v7 = a1;
    a1 = v7;
    if (v5)
    {
      qword_1ED839170 = 0;
      qword_1ED839188 = 0;
      qword_1ED839168 = 0x700010007;
      qword_1ED839178 = 0x10000010100;
      unk_1ED839180 = 60;
      qword_1ED839158 = (uint64_t)"agx1-apple-ios";
      unk_1ED839160 = "e-p:64:64:64-f32:32:32-i64:64:64-i32:32:32-i16:16:16-v32:32:32-n32-S64";
      AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9gA0 = (uint64_t)&off_1E7EC9EB0;
      __cxa_atexit((void (*)(void *))AGCLLVMG9TargetConfig::~AGCLLVMG9TargetConfig, &AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9gA0, &dword_1C3C54000);
      a1 = v7;
    }
  }
  if (a1 == 65543)
    return &AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9gA0;
  else
    return &AGCLLVMCreateG9TargetConfig(AGCTargetArch)::g9pA0;
}

BOOL AGCLLVMGen2TargetConfig::supportFastISel(AGCLLVMGen2TargetConfig *this)
{
  return *((_DWORD *)this + 7) == 4;
}

uint64_t AGCLLVMGen2TargetConfig::createMetalPostTessellationShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v11;

  v11 = operator new();
  return AGCLLVMAGPVertexShaderPostTessellationSW::AGCLLVMAGPVertexShaderPostTessellationSW(v11, a2, a3, a4, a5, a6);
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getGOTIndex()
{
  return 0;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getTextureHeapReadIndex()
{
  return 1;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getTextureHeapWriteIndex()
{
  return 2;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getTextureHeapLengthIndex()
{
  return 3;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getSamplerHeapIndex()
{
  return 4;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getPerEncoderIndirectionTableIndex()
{
  return 5;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getIntersectionFunctionTableHeapIndex()
{
  return 6;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getVisibleFunctionTableHeapIndex()
{
  return 7;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getGlobalBindingTableIndex()
{
  return 9;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getAccelerationStructureHeapIndex()
{
  return 8;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getIFTHeapAddressIndex()
{
  return 10;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getRayUserDataBoundsIndex()
{
  return 11;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getRayStridesIndex()
{
  return 12;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getRayDriverDataStartIndex()
{
  return 13;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getStageSpecificBindpoint0()
{
  return 10;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getStageSpecificBindpoint1()
{
  return 11;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<false>>::getCount()
{
  return 12;
}

void AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::~AGCBindPointLayoutT()
{
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxAPIBindPointsTexture()
{
  return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2)
    return 35;
  else
    return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxAPIIndirectTexture()
{
  return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxAPIIndirectBuffer()
{
  return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderMaxSPIBindPoints()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationFactorBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationInternalPerPatchIDBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationInternalPerPatchDataBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationInternalDrawIndexOffsetsBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationProducerDrawElemIndirectCmdsOutputBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationProducerDrawElemIndirectCmdsInputBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationProducerInternalInstanceCountsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationProducerInternalInstanceIDsBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationConsumerPatchIndexBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationConsumerPositionInPatchBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderTessellationConsumerControlPointIndexBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderGLMTLReserved()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderBaseVertexBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderBaseInstanceBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderBaseImmediateBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderReadTextureHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderWriteTextureHeapBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderReadTextureGatherBufferIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderWriteTextureGatherBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderWidthTextureHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderSamplerHeapBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderSamplerGatherBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderPerEncoderIndirectionTableIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderIntersectionFunctionTableHeapBufferIndex()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderVisibleFunctionTableHeapBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderVertexAmplificationViewMappingsIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderFragmentViewportDepthRange()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderBVHStateHeapBufferIndex()
{
  return 54;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderDylibGOTBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderGlobalConstructorsBufferIndex()
{
  return 60;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 62);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderDylibGlobalBindingTableIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderSCSPerKickConfigurationTableBufferIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getRenderSCSPerShaderConfigurationTableBufferIndex()
{
  return 64;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getMeshLocalMeshDataIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeMaxAPIBindPointsTexture()
{
  return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2)
    return 35;
  else
    return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeFastIntegerDivideBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeTGOptParamsIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeTGOptCountIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeStageInBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeGatherOrPatchUpOffsetsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeReadTextureHeapBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeWriteTextureHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeReadTextureGatherBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeWriteTextureGatherBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeWidthTextureHeapBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSamplerHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSamplerGatherBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputePerEncoderIndirectionTableIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeIntersectionFunctionTableHeapBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeVisibleFunctionTableHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeExecuteIndirectInputParametersBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeExecuteIndirectIndirectCommandBufferBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameters()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterThreadgroupOffset()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterThreadgroupsPerGrid()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterThreadOffset()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterThreadsPerGrid()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSplitDispatchParameterEnabled()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeDylibGOTBufferIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeGlobalConstructorsBufferIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 64);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeProgressMarkerBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeBVHStateHeapBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicateLeftOperandIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicateRightOperandIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicatePassLinkAddressIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicateFailLinkAddressIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeControlFlowPredicateLinkTokenWordsIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSCSPerKickConfigurationTableBufferIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeSCSPerShaderConfigurationTableBufferIndex()
{
  return 62;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getComputeDylibGlobalBindingTableIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionReadTextureHeapBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionWriteTextureHeapBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionSamplerHeapBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionSamplerGatherBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionReadTextureGatherBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionWriteTextureGatherBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionBVHStateHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionDylibGOTBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionWidthTextureHeapBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionVisibleFunctionTableHeapBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionPerEncoderIndirectionTableIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsDriverSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsSizeIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsReadTextureHeapIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsWriteTextureHeapIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsWidthTextureHeapIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsSamplerHeapIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsBVHHeapIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsVFTHeapIndex()
{
  return 7;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsIFTHeapIndex()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsLeafPointersInfoIndex()
{
  return 11;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsShaderStridesIndex()
{
  return 32;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsUserDataBoundsIndex()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsDriverDataStartIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsDoraStateBufferIndex()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerEncoderIndirectionTableIndex()
{
  return 13;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickIftHeapIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickUserBoundsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickPayloadStridesIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickDriverDataStartIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickGin1122SWWABvhIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickLeafPointersInfoIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerKickDoraStateBufferIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataShaderUserSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataInstanceLevelsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataShaderStrideIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataDoneRayTracingFlagIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataGlobalBindingsTableIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataGotIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getIntersectionScsPerCliqueDataCount()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getObjectIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getObjectIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getGeometryPipelineEmulationPerKickInfoIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getGeometryPipelineEmulationPerDispatchInfoIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getGeometryPipelineEmulationMailboxLookupBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTableICBHeapBufferIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTablePipelineStateHeapBufferIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTableFragmentBuiltinEncoderStateIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTablePrivateDataIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<31,31,4,64,31,31,false>>::getPerEncoderIndirectionTableSize()
{
  return 11;
}

void AGCLLVMGen2TargetLowerer::~AGCLLVMGen2TargetLowerer(AGCLLVMGen2TargetLowerer *this)
{
  AGCLLVMTargetLowerer::~AGCLLVMTargetLowerer(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCLLVMGen2TargetLowerer::buildAlphaTest(uint64_t a1, uint64_t a2)
{
  uint64_t Select;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  llvm::IRBuilderBase::CreateFCmpHelper();
  llvm::ConstantInt::get();
  llvm::ConstantInt::get();
  v9 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
    llvm::MetadataTracking::track();
  v8 = *(_DWORD *)(a2 + 24);
  result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 616))(a1, &v6, Select);
  if (v7)
    return llvm::MetadataTracking::untrack();
  return result;
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildCoverageMask(uint64_t a1, uint64_t a2, llvm::Value *a3, unsigned int a4)
{
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  llvm::Value *v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v18);
  if (v19)
    llvm::MetadataTracking::untrack();
  v21 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, a3, 1);
  if (a4 > 1)
  {
    v9 = *(_QWORD *)(a1 + 1864);
    if (v9)
      v10 = strlen(*(const char **)(a1 + 1864));
    else
      v10 = 0;
    v11 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v9, v10, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 168));
    v17 = 257;
    v12 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v11 + 24), v11, (uint64_t)&v21, 1, (uint64_t)v16);
    v13 = *(_QWORD *)(a1 + 2200);
    if (v13)
      v14 = strlen(*(const char **)(a1 + 2200));
    else
      v14 = 0;
    v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v13, v14, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192));
    v22[0] = llvm::ConstantInt::get();
    v22[1] = v12;
    v17 = 257;
    return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v15 + 24), v15, (uint64_t)v22, 2, (uint64_t)v16);
  }
  else
  {
    llvm::ConstantFP::get();
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    v17 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildPackNorm(uint64_t *a1, uint64_t a2, llvm::Value *a3, int a4, int a5)
{
  llvm::Value *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  const char **v14;
  const char *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Type *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Type **v23;
  const llvm::Twine *v24;
  llvm::IRBuilderBase *v25;
  llvm::Type *v26;
  llvm::Value *InsertElement;
  uint64_t i;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  uint64_t Element;
  _BYTE v34[32];
  __int16 v35;
  _BYTE v36[32];
  __int16 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  llvm::Value *v41;

  v38 = *(_OWORD *)a2;
  v39 = *(_QWORD *)(a2 + 16);
  if (v39)
    llvm::MetadataTracking::track();
  v40 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v38);
  if (v39)
    llvm::MetadataTracking::untrack();
  v10 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, a3, 1);
  v41 = v10;
  if (a4 == 16)
  {
    v11 = a5 == 0;
    v12 = 1880;
    v13 = 1872;
  }
  else
  {
    if (a4 != 8)
    {
      v15 = 0;
      goto LABEL_14;
    }
    v11 = a5 == 0;
    v12 = 1864;
    v13 = 1856;
  }
  if (!v11)
    v12 = v13;
  v14 = (const char **)((char *)a1 + v12);
  v15 = *v14;
  if (*v14)
  {
    v16 = strlen(*v14);
    goto LABEL_15;
  }
LABEL_14:
  v16 = 0;
LABEL_15:
  v17 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)v15, v16, a1[24], a1[21]);
  v18 = v17;
  v19 = 24;
  if (a4 == 8)
    v19 = 23;
  v20 = (llvm::Type *)a1[v19];
  if ((*(_DWORD *)(*(_QWORD *)v10 + 8) & 0xFE) == 0x12
    && (v21 = *(unsigned int *)(*(_QWORD *)v10 + 32), (_DWORD)v21 != 1))
  {
    llvm::FixedVectorType::get();
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
      {
        v37 = 257;
        v29 = (llvm::Value *)llvm::ConstantInt::get();
        Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v10, v29, (const llvm::Twine *)v36);
        v35 = 257;
        v30 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v18 + 24), v18, (uint64_t)&Element, 1, (uint64_t)v34);
        v37 = 257;
        v31 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v30, v31, (const llvm::Twine *)v36);
      }
    }
    v26 = (llvm::Type *)llvm::FixedVectorType::get();
    v37 = 257;
    v24 = (const llvm::Twine *)v36;
    v25 = (llvm::IRBuilderBase *)(a1 + 1);
    v23 = (llvm::Type **)InsertElement;
  }
  else
  {
    v22 = (uint64_t)(a1 + 1);
    v37 = 257;
    v23 = (llvm::Type **)llvm::IRBuilderBase::CreateCall(v22, *(_QWORD *)(v17 + 24), v17, (uint64_t)&v41, 1, (uint64_t)v36);
    v35 = 257;
    v24 = (const llvm::Twine *)v34;
    v25 = (llvm::IRBuilderBase *)v22;
    v26 = v20;
  }
  return llvm::IRBuilderBase::CreateIntCast(v25, v23, v26, 0, v24);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildForceF16Precision(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  llvm::Value *Cast;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  v6 = *(_QWORD *)(a1 + 1888);
  if (v6)
    v7 = strlen(*(const char **)(a1 + 1888));
  else
    v7 = 0;
  v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v6, v7, *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 192));
  v18[0] = a3;
  v18[1] = llvm::ConstantInt::get();
  v14 = 257;
  v9 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v8 + 24), v8, (uint64_t)v18, 2, (uint64_t)v13);
  v10 = *(_QWORD *)(a1 + 152);
  v14 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v9, v10, (uint64_t)v13);
  return AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, Cast, 1);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildGCmp(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, llvm::Type *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  llvm::IRBuilderBase *v20;
  llvm::Type **v21;
  _WORD v23[20];
  _BYTE v24[32];
  __int16 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;

  v29 = a3;
  v26 = *(_OWORD *)a2;
  v27 = *(_QWORD *)(a2 + 16);
  if (v27)
    llvm::MetadataTracking::track();
  v28 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v26);
  if (v27)
    llvm::MetadataTracking::untrack();
  v10 = *a3;
  v11 = *(_QWORD *)(a1 + 168);
  v12 = 192;
  if (v10 == v11)
    v12 = 200;
  v13 = *(_QWORD *)(a1 + v12);
  v14 = v10 == v11;
  if (a4)
  {
    v15 = 1984;
    v16 = 1976;
  }
  else
  {
    v15 = 1952;
    v16 = 1944;
  }
  if (v14)
    v15 = v16;
  v17 = *(_QWORD *)(a1 + v15);
  if (v17)
    v18 = strlen(*(const char **)(a1 + v15));
  else
    v18 = 0;
  v19 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v17, v18, v13, v10);
  v20 = (llvm::IRBuilderBase *)(a1 + 8);
  v25 = 257;
  v21 = (llvm::Type **)llvm::IRBuilderBase::CreateCall((uint64_t)v20, *(_QWORD *)(v19 + 24), v19, (uint64_t)&v29, 1, (uint64_t)v24);
  v23[16] = 257;
  return llvm::IRBuilderBase::CreateIntCast(v20, v21, a5, 0, (const llvm::Twine *)v23);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildGExp(_QWORD *a1, uint64_t a2, llvm::Type **a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  llvm::Type *v15;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;
  llvm::Value *IntCast;
  __int128 v22;
  uint64_t v23;
  int v24;

  v22 = *(_OWORD *)a2;
  v23 = *(_QWORD *)(a2 + 16);
  if (v23)
    llvm::MetadataTracking::track();
  v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v22);
  if (v23)
    llvm::MetadataTracking::untrack();
  if (a4)
  {
    v10 = 2000;
    v11 = 1992;
  }
  else
  {
    v10 = 1968;
    v11 = 1960;
  }
  if (a1[21] == a5)
    v10 = v11;
  v12 = *(_QWORD *)((char *)a1 + v10);
  if (v12)
    v13 = strlen(*(const char **)((char *)a1 + v10));
  else
    v13 = 0;
  v14 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, v12, v13, a5, a1[24]);
  v15 = (llvm::Type *)a1[24];
  v20 = 257;
  IntCast = llvm::IRBuilderBase::CreateIntCast((llvm::IRBuilderBase *)(a1 + 1), a3, v15, 0, (const llvm::Twine *)v19);
  v18 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v14 + 24), v14, (uint64_t)&IntCast, 1, (uint64_t)v17);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildWriteOutputRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  v10 = *(_QWORD *)(a1 + 1528);
  if (v10)
    v11 = strlen(*(const char **)(a1 + 1528));
  else
    v11 = 0;
  v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(a1, v10, v11, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 192));
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = a5;
  v15 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildReadOutputRegister(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v8 = *(_QWORD *)(a1 + 1520);
  if (v8)
    v9 = strlen(*(const char **)(a1 + 1520));
  else
    v9 = 0;
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v8, v9, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192));
  v17[0] = a3;
  v17[1] = a4;
  v13 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildEmitpix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  int v23;
  _QWORD __src[4];
  uint64_t v25;
  void *Cast;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v21 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a2 + 16);
  if (v22)
    llvm::MetadataTracking::track();
  v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22)
    llvm::MetadataTracking::untrack();
  if (*(_QWORD *)(a1 + 1848))
    strlen(*(const char **)(a1 + 1848));
  v13 = *(_QWORD *)(a1 + 192);
  v14 = llvm::PointerType::get();
  v15 = *(_QWORD *)(a1 + 192);
  __src[0] = v13;
  __src[1] = v14;
  __src[2] = v15;
  __src[3] = v15;
  v25 = v15;
  Cast = v28;
  v27 = 0x500000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&Cast, __src, &Cast);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v17 = v16;
  if (Cast != v28)
    free(Cast);
  v18 = *(_QWORD *)(a1 + 192);
  LOWORD(v29) = 257;
  Cast = (void *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, a9, v18, (uint64_t)&Cast);
  v19 = llvm::PointerType::get();
  LOWORD(v25) = 257;
  v27 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v19, (uint64_t)__src);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 528))(a1, a8);
  v28[0] = llvm::ConstantInt::get();
  v28[1] = llvm::ConstantInt::get();
  v29 = llvm::ConstantInt::get();
  LOWORD(v25) = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v17 + 24), v17, (uint64_t)&Cast, 5, (uint64_t)__src);
}

uint64_t AGCLLVMGen2TargetLowerer::buildCopyOffChipMRTPixelData@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  uint64_t v14;
  int v15;

  v9 = a3;
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  if (v14)
    llvm::MetadataTracking::track();
  v15 = *((_DWORD *)a2 + 6);
  v10 = *(_DWORD *)(a4 + 4 * v9);
  v11 = llvm::ConstantInt::get();
  result = (uint64_t)AGCLLVMGen2TargetLowerer::buildCopyOffChipMRTPixelDataStateless(a1, (uint64_t)&v13, BYTE2(v10), v11);
  if (v14)
    result = llvm::MetadataTracking::untrack();
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  return result;
}

uint64_t AGCLLVMGen2TargetLowerer::buildLocalID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t inserted;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t Cast;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int128 v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx1.local.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v19, aXyz[a4]);
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v9 = a1 + 8;
  v15 = 257;
  v10 = llvm::IRBuilderBase::CreateCall(v9, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  v13[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21)
    free(v19);
  return Cast;
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildInterpolate(AGCLLVMBuilder *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v13;
  uint64_t v14;
  const char **v15;
  uint64_t v16;
  llvm::Value *v17;
  int8x8_t v18;
  uint8x8_t v19;
  _BYTE v21[32];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  void *v26;
  uint64_t v27;
  _BYTE v28[32];
  void *v29[2];
  _QWORD v30[6];

  v30[4] = *MEMORY[0x1E0C80C00];
  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v13 = a3 - 1;
  if (a3 != 1)
    llvm::FixedVectorType::get();
  v14 = llvm::PointerType::get();
  v29[0] = v30;
  v29[1] = (void *)0x400000000;
  v26 = v28;
  v27 = 0x400000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, v14);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, a5);
  if (a7)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, v14);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, a7);
    v15 = (const char **)((char *)a1 + 32 * a4 + 8 * v13 + 2104);
  }
  else
  {
    v15 = (const char **)((char *)a1 + 32 * a4 + 8 * v13 + 2008);
  }
  if (*v15)
    strlen(*v15);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v22 = 257;
  v17 = llvm::IRBuilderBase::CreateCall((uint64_t)a1 + 8, *(_QWORD *)(v16 + 24), v16, (uint64_t)v26, v27, (uint64_t)v21);
  v18.i32[0] = a3;
  v19 = (uint8x8_t)vcnt_s8(v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.i32[0] != 1)
    v17 = (llvm::Value *)AGCLLVMBuilder::subrangeVector(a1, v17, 0, a3, 1);
  if (v26 != v28)
    free(v26);
  if (v29[0] != v30)
    free(v29[0]);
  return v17;
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildGammaSpaceConversion(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, uint64_t a5)
{
  llvm::Value *v9;
  int v10;
  llvm::Value *v11;
  llvm::Value *v12;
  uint64_t Element;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *InsertElement;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value *v22;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  llvm::Value *v41[2];
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v31 = *(_OWORD *)a2;
  v32 = *(_QWORD *)(a2 + 16);
  if (v32)
    llvm::MetadataTracking::track();
  v33 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v31);
  if (v32)
    llvm::MetadataTracking::untrack();
  v28 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v30 = *(_DWORD *)(a1 + 104);
  v9 = (llvm::Value *)AGCLLVMTargetLowerer::buildClampColor(a1, (uint64_t)&v28, a3, a5, 0);
  if (v29)
    llvm::MetadataTracking::untrack();
  v25 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v10 = *(_DWORD *)(a1 + 104);
  v27 = v10;
  v34 = v25;
  v35 = v26;
  if (v26)
  {
    llvm::MetadataTracking::track();
    v10 = v27;
  }
  v36 = v10;
  AGCLLVMTargetLowerer::SetIP(a1, &v34);
  if (v35)
    llvm::MetadataTracking::untrack();
  if (*(_QWORD *)v9 == *(_QWORD *)(a1 + 288) || *(_QWORD *)v9 == *(_QWORD *)(a1 + 280))
  {
    v11 = (llvm::Value *)AGCLLVMBuilder::subrangeVector((AGCLLVMBuilder *)a1, v9, 0, 3, 1);
    v40 = 257;
    v12 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v9, v12, (const llvm::Twine *)&v37);
    v14 = Element;
    v15 = *(_QWORD *)(a1 + 184);
    if ((*(_DWORD *)(*(_QWORD *)v11 + 8) & 0xFE) == 0x12)
    {
      v24 = Element;
      *(_OWORD *)v41 = 0u;
      v42 = 0u;
      AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, v11, v41);
      v16 = *(unsigned int *)(*(_QWORD *)v11 + 32);
      if ((_DWORD)v16)
      {
        v17 = 0;
        InsertElement = 0;
        do
        {
          v19 = v41[v17];
          v37 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
          v39 = *(_DWORD *)(a1 + 104);
          v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v37, v19, 0, v15);
          if (v38)
            llvm::MetadataTracking::untrack();
          if (!InsertElement)
          {
            llvm::FixedVectorType::get();
            InsertElement = (llvm::Value *)llvm::UndefValue::get();
          }
          v40 = 257;
          v21 = (llvm::Value *)llvm::ConstantInt::get();
          InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v20, v21, (const llvm::Twine *)&v37);
          ++v17;
        }
        while (v16 != v17);
      }
      else
      {
        InsertElement = 0;
      }
      v14 = v24;
    }
    else
    {
      v37 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v39 = *(_DWORD *)(a1 + 104);
      InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, _QWORD, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v37, v11, 0, v15);
      if (v38)
        llvm::MetadataTracking::untrack();
    }
    v37 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v39 = *(_DWORD *)(a1 + 104);
    v22 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 88))(a1, &v37, v14, 8, 0, 1);
    if (v38)
      llvm::MetadataTracking::untrack();
    v9 = (llvm::Value *)AGCLLVMBuilder::combineRGBA((AGCLLVMBuilder *)a1, InsertElement, v22);
  }
  if (v26)
    llvm::MetadataTracking::untrack();
  return v9;
}

void AGCLLVMGen2TargetLowerer::createBuiltins(AGCLLVMGen2TargetLowerer *this, AGCLLVMUserObject *a2, llvm::LLVMContext **a3)
{
  AGCLLVMAirBuiltins *v6;
  _QWORD *v7;

  v6 = (AGCLLVMAirBuiltins *)operator new();
  AGCLLVMAirBuiltins::AGCLLVMAirBuiltins(v6, a2, a3, this);
  *v7 = &off_1E7E8B220;
}

uint64_t AGCLLVMGen2TargetLowerer::buildWriteImageBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Cast;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  llvm::Value *v16;
  llvm::Value *v17;
  unsigned int v18;
  uint64_t v19;
  const std::string::value_type *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  llvm::Value *Element;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  uint64_t v34;
  llvm::Type *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  unsigned int v39;
  const std::string::value_type *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v49[32];
  __int16 v50;
  std::string v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[128];
  void *v55[2];
  _QWORD v56[17];

  v56[16] = *MEMORY[0x1E0C80C00];
  memset(&v51, 0, sizeof(v51));
  v55[0] = v56;
  v55[1] = (void *)0x1000000000;
  v52 = v54;
  v53 = 0x1000000000;
  if (*(_DWORD *)a2 == 8)
  {
    MEMORY[0x1CAA2D494](&v51, *(_QWORD *)(a1 + 1920));
    v4 = llvm::PointerType::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v4);
    v5 = *(_QWORD *)(a2 + 104);
    v6 = llvm::PointerType::get();
    v50 = 257;
    Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v5, v6, (uint64_t)v49);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, Cast);
    v8 = llvm::PointerType::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v8);
    v9 = *(_QWORD *)(a2 + 56);
    v10 = llvm::PointerType::get();
    v50 = 257;
    v11 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v9, v10, (uint64_t)v49);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v11);
    v12 = llvm::PointerType::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v12);
    v13 = *(_QWORD *)(a2 + 32);
    if (!v13)
    {
      v14 = llvm::ConstantInt::get();
      v50 = 257;
      v13 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v14, v12, (uint64_t)v49);
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v13);
    v15 = *(_DWORD *)(a2 + 4);
    if (v15 == 3)
    {
      std::string::append(&v51, ".3d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(_QWORD *)(a1 + 304));
      v38 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *(llvm::Value **)(a2 + 136), *(llvm::Type **)(a1 + 192));
      v17 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, v38, 4);
    }
    else
    {
      if (v15 != 1)
        goto LABEL_20;
      std::string::append(&v51, ".2d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(_QWORD *)(a1 + 240));
      v16 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *(llvm::Value **)(a2 + 136), *(llvm::Type **)(a1 + 192));
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v16);
      if (!*(_QWORD *)(a2 + 152))
        goto LABEL_20;
      std::string::append(&v51, ".array");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(_QWORD *)(a1 + 192));
      v17 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *(llvm::Value **)(a2 + 152), *(llvm::Type **)(a1 + 192));
    }
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v17);
LABEL_20:
    if (*(_QWORD *)(a2 + 168))
      std::string::append(&v51, ".lod");
    v39 = *(_DWORD *)(a2 + 8);
    if (v39 <= 7 && ((1 << v39) & 0x89) != 0)
      v40 = ".32";
    else
      v40 = ".16";
    std::string::append(&v51, v40);
    if (*(_QWORD *)(a2 + 168))
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(_QWORD *)(a1 + 192));
      v41 = *(_QWORD *)(a2 + 168);
      v42 = *(_QWORD *)(a1 + 192);
      v50 = 257;
      v43 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v41, v42, (uint64_t)v49);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v43);
    }
    goto LABEL_28;
  }
  v18 = (*(_DWORD *)(a2 + 8) > 7u) | (0x76u >> *(_DWORD *)(a2 + 8));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(_QWORD *)(a1 + 192));
  v19 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v19);
  if (*(_DWORD *)a2 == 7)
    MEMORY[0x1CAA2D494](&v51, *(_QWORD *)(a1 + 1936));
  else
    MEMORY[0x1CAA2D494](&v51, *(_QWORD *)(a1 + 1928));
  if ((v18 & 1) != 0)
    v20 = ".4xh";
  else
    v20 = ".4xf";
  std::string::append(&v51, v20);
  v21 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v21);
  v22 = *(_QWORD *)(a2 + 104);
  v23 = llvm::PointerType::get();
  v50 = 257;
  v24 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v22, v23, (uint64_t)v49);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v24);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(_QWORD *)(a1 + 240));
  v25 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, *(llvm::Value **)(a2 + 136), *(llvm::Type **)(a1 + 240));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v25);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(_QWORD *)(a1 + 192));
  v26 = *(llvm::Value **)(a2 + 144);
  v50 = 257;
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v26, v27, (const llvm::Twine *)v49);
  v29 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, Element, *(llvm::Type **)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v29);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, *(_QWORD *)(a1 + 192));
  v30 = *(llvm::Value **)(a2 + 144);
  v50 = 257;
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  v32 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v30, v31, (const llvm::Twine *)v49);
  v33 = AGCLLVMBuilder::truncateToSmall((llvm::Type **)a1, v32, *(llvm::Type **)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, (uint64_t)v33);
  if (*(_DWORD *)a2 == 7)
  {
    v34 = 168;
    if ((v18 & 1) != 0)
      v34 = 152;
    v35 = *(llvm::Type **)(a1 + v34);
    v36 = llvm::FixedVectorType::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v55, v36);
    v37 = AGCLLVMBuilder::bitCastElements((AGCLLVMBuilder *)a1, *(llvm::Value **)(a2 + 224), v35);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v52, v37);
  }
LABEL_28:
  llvm::FunctionType::get();
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v44 = &v51;
LABEL_31:
    strlen((const char *)v44);
    goto LABEL_32;
  }
  v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
  if (v51.__r_.__value_.__r.__words[0])
    goto LABEL_31;
LABEL_32:
  llvm::Module::getOrInsertFunction();
  v50 = 257;
  v46 = (uint64_t)llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v45 + 24), v45, (uint64_t)v52, v53, (uint64_t)v49);
  if (*(_DWORD *)a2 == 6)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 3:
      case 7:
        v47 = *(_QWORD *)(a1 + 312);
        goto LABEL_36;
      case 4:
      case 8:
        v47 = *(_QWORD *)(a1 + 304);
LABEL_36:
        v50 = 257;
        v46 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v46, v47, (uint64_t)v49);
        break;
      default:
        break;
    }
  }
  if (v52 != v54)
    free(v52);
  if (v55[0] != v56)
    free(v55[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  return v46;
}

llvm::Value *AGCLLVMGen2TargetLowerer::convertWriteValue(AGCLLVMBuilder *this, int a2, llvm::Value *a3)
{
  llvm::Value *Element;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *LShr;
  llvm::Value *v10;
  uint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  llvm::Value *Cast;
  llvm::Value *v15;
  llvm::Value *InsertElement;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::Value *v25;
  _BYTE v27[32];
  __int16 v28;
  _BYTE v29[32];
  __int16 v30;

  Element = a3;
  if (a2 != 6)
    return AGCLLVMBuilder::extendVector(this, a3, 4);
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12)
  {
    v30 = 257;
    v5 = (llvm::Value *)llvm::ConstantInt::get();
    Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMBuilder *)((char *)this + 8), Element, v5, (const llvm::Twine *)v29);
  }
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v30 = 257;
  v7 = llvm::IRBuilderBase::CreateAnd((AGCLLVMBuilder *)((char *)this + 8), Element, v6, (const llvm::Twine *)v29);
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  v30 = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((AGCLLVMBuilder *)((char *)this + 8), Element, v8, (const llvm::Twine *)v29);
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = 257;
  v11 = llvm::IRBuilderBase::CreateAnd((AGCLLVMBuilder *)((char *)this + 8), LShr, v10, (const llvm::Twine *)v27);
  llvm::FixedVectorType::get();
  v12 = (llvm::Value *)llvm::UndefValue::get();
  v13 = *((_QWORD *)this + 25);
  v30 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, v7, v13, (uint64_t)v29);
  v28 = 257;
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v12, Cast, v15, (const llvm::Twine *)v27);
  v17 = *((_QWORD *)this + 25);
  v30 = 257;
  v18 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, v11, v17, (uint64_t)v29);
  v28 = 257;
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), InsertElement, v18, v19, (const llvm::Twine *)v27);
  v21 = (llvm::Value *)llvm::ConstantInt::get();
  v30 = 257;
  v22 = (llvm::Value *)llvm::ConstantInt::get();
  v23 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v20, v21, v22, (const llvm::Twine *)v29);
  v24 = (llvm::Value *)llvm::ConstantInt::get();
  v30 = 257;
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  return (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMBuilder *)((char *)this + 8), v23, v24, v25, (const llvm::Twine *)v29);
}

llvm::Value *AGCLLVMGen2TargetLowerer::buildCopyOffChipMRTPixelDataStateless(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v8 = *(_QWORD *)(a1 + 1664);
  if (v8)
    v9 = strlen(*(const char **)(a1 + 1664));
  else
    v9 = 0;
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v8, v9, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192));
  v17[0] = a4;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 528))(a1, a3);
  v17[1] = llvm::ConstantInt::get();
  v13 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen2TargetLowerer::foldFPTruncExt(AGCLLVMGen2TargetLowerer *this, llvm::Value *a2)
{
  llvm::Value *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t i;
  int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  _QWORD v21[8];

  v2 = a2;
  v21[7] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
  {
    v5 = (uint64_t *)*(unsigned int *)(v4 + 32);
    if (!(_DWORD)v5)
      goto LABEL_28;
  }
  else
  {
    LODWORD(v5) = 1;
  }
  v6 = 0;
  v7 = v5;
  do
  {
    v8 = v6;
    v9 = (uint64_t)v2;
    while (1)
    {
      for (i = v9; ; i = *(_QWORD *)(i - 32))
      {
        v11 = *(unsigned __int8 *)(i + 16);
        if (!i || (v11 - 75) < 0xFFFFFFFE)
          break;
      }
      if (!i || v11 != 91)
        break;
      v9 = *(_QWORD *)(i - 64);
      v8 = *(_DWORD *)(*(_QWORD *)(i + 64) + 4 * v8);
      if (v8 == -1)
      {
        v9 = llvm::UndefValue::get();
        v8 = 0;
      }
      else
      {
        v12 = *(_DWORD *)(*(_QWORD *)v9 + 32);
        v13 = v8 >= v12;
        v14 = v8 - v12;
        if (v13)
        {
          v9 = *(_QWORD *)(i - 32);
          v8 = v14;
        }
      }
    }
    LODWORD(v21[2 * v6]) = v8;
    v21[2 * v6++ - 1] = i;
  }
  while (v6 != v7);
  v5 = v20;
  if (v7 <= 1)
  {
LABEL_28:
    v17 = *v5;
LABEL_29:
    if (v17 == v4)
      return (llvm::Value *)v5;
    return v2;
  }
  v15 = 0;
  v16 = (uint64_t **)v21;
  while (*(v16 - 1) == v20 && v15 == *(_DWORD *)v16)
  {
    v17 = *v20;
    v18 = *v20;
    if ((*(_DWORD *)(*v20 + 8) & 0xFE) == 0x12)
      v18 = **(_QWORD **)(v17 + 16);
    if (v18 != *((_QWORD *)this + 21))
      break;
    ++v15;
    v16 += 2;
    if (v7 == v15)
      goto LABEL_29;
  }
  return v2;
}

uint64_t AGCLLVMGen3TargetConfig::supportFastISel(AGCLLVMGen3TargetConfig *this)
{
  return 0;
}

uint64_t AGCLLVMGen3TargetConfig::createPassthroughVertexShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, unsigned int a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *v21;
  int v22;
  llvm::GlobalVariable *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Type **ConstInBoundsGEP1_32;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Type *v38;
  llvm::Value *AlignedLoad;
  llvm::Value *v40;
  llvm::IRBuilderBase *v41;
  llvm::Value *v42;
  llvm::Value *Mul;
  llvm::Value *v44;
  llvm::Value *Add;
  uint64_t v46;
  llvm::Type *v47;
  llvm::Type **GEP;
  uint64_t v49;
  llvm::Value *v50;
  llvm::Type *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  void *__p;
  llvm::GlobalVariable *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  _QWORD v63[4];
  __int16 v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v9 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v9 + 96), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t *)v9, (uint64_t *)off_1E7EBA850);
  *(_QWORD *)(v9 + 72) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v9 + 80) = -1;
  *(_QWORD *)v9 = off_1E7EBA610;
  *(_QWORD *)(v9 + 96) = &unk_1E7EBA748;
  *(_QWORD *)(v9 + 128) = &unk_1E7EBA838;
  *(_DWORD *)(v9 + 88) = a4;
  *(_DWORD *)(v9 + 92) = a5;
  *(_DWORD *)(v9 + 72) = a5 + a4;
  *(_WORD *)(v9 + 84) = 256;
  v65 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v9 + 496) + 464))(*(_QWORD *)(v9 + 496)) == 2
    || (*(_DWORD *)(v9 + 76) = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)(v9 + *(_QWORD *)(*(_QWORD *)v9 - 24) + 32 + 368)
                                                                                          + 440))(*(_QWORD *)(v9 + *(_QWORD *)(*(_QWORD *)v9 - 24) + 32 + 368), &v65, 4), (v10 = v65) == 0))
  {
    __p = 0;
  }
  else
  {
    v11 = v9 + *(_QWORD *)(*(_QWORD *)v9 - 24) + 32;
    v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v65);
    v13 = 0;
    do
    {
      *(_QWORD *)&v12[v13] = *(_QWORD *)(v11 + 200);
      v13 += 8;
    }
    while (8 * v10 != v13);
    __p = v12;
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v15 = v14;
  *(_WORD *)(v14 + 18) = *(_WORD *)(v14 + 18) & 0xC00F | 0x660;
  v63[0] = "entry";
  v64 = 259;
  operator new();
  v16 = llvm::BasicBlock::BasicBlock();
  v17 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v9;
  *(_QWORD *)(v17 + 88) = v16;
  *(_QWORD *)(v17 + 96) = v16 + 40;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 - 24) + v9 + 400);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 464))(v18) == 2)
  {
    v19 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v9;
    v20 = *(_QWORD *)(v19 + 400);
    v60 = *(_OWORD *)(v19 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v19 + 40));
    v62 = *(_DWORD *)(v19 + 136);
    v21 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned int *, uint64_t))(*(_QWORD *)v20 + 456))(v20, &v60, &v65, 4);
    if (v61)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    if ((*(_WORD *)(v15 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v15);
    v22 = *(_DWORD *)(v9 + 76);
    if (v22)
      v21 = (llvm::Value *)(*(_QWORD *)(v15 + 88) + 40 * (v22 - 1) + 40);
    else
      v21 = *(llvm::Value **)(v15 + 88);
  }
  llvm::Type::getFloatPtrTy(*(llvm::Type **)(*(_QWORD *)(*(_QWORD *)v9 - 24) + v9 + 392), (llvm::LLVMContext *)2);
  v23 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v63[0] = "agc.vertex_attrib_info";
  v64 = 259;
  v24 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v24 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v25 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v9;
  v26 = *(_QWORD *)(v25 + 376);
  v27 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v25 + 32), v23);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v26, v27);
  v28 = *(_QWORD *)(*(_QWORD *)v9 - 24);
  v29 = *(_QWORD *)(v28 + v9 + 400);
  v30 = *(_QWORD *)(v29 + 1384);
  if (v30)
    v31 = strlen(*(const char **)(v29 + 1384));
  else
    v31 = 0;
  v32 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v28 + v9 + 32, v30, v31, *(_QWORD *)(v28 + v9 + 176), *(_QWORD *)(v9 + v28 + 2768), *(_QWORD *)(v28 + v9 + 200));
  v33 = v9 + 8;
  if (a4)
  {
    v34 = 0;
    v59 = v23;
    do
    {
      ConstInBoundsGEP1_32 = (llvm::Type **)AGCLLVMBuilder::CreateConstInBoundsGEP1_32((AGCLLVMBuilder *)(*(_QWORD *)(*(_QWORD *)v9 - 24) + v9 + 32), v23, 0);
      v36 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v33;
      v64 = 257;
      v38 = AGCLLVMBuilder::tryDeducePointeeType(ConstInBoundsGEP1_32, v37);
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v36 + 32), v38, (uint64_t)ConstInBoundsGEP1_32, 0, (uint64_t)v63);
      v40 = (llvm::Value *)llvm::ConstantInt::get();
      v41 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v9 - 24) + v9 + 40);
      v64 = 257;
      v42 = v21;
      Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v41, v40, v21, (const llvm::Twine *)v63);
      v44 = (llvm::Value *)llvm::ConstantInt::get();
      v68 = 257;
      Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v41, Mul, v44, (const llvm::Twine *)&v66);
      v46 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v9;
      v47 = *(llvm::Type **)(v46 + 200);
      v64 = 257;
      GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v46 + 40), v47, AlignedLoad, Add, (const llvm::Twine *)v63);
      v66 = 0;
      v67 = 0;
      v66 = llvm::ConstantInt::get();
      v49 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v33;
      v64 = 257;
      v51 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v50);
      v52 = (uint64_t *)(v49 + 32);
      v21 = v42;
      v53 = (uint64_t)GEP;
      v23 = v59;
      v67 = llvm::IRBuilderBase::CreateAlignedLoad(v52, v51, v53, 0, (uint64_t)v63);
      v54 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v33 + 32;
      v64 = 257;
      llvm::IRBuilderBase::CreateCall(v54, *(_QWORD *)(v32 + 24), v32, (uint64_t)&v66, 2, (uint64_t)v63);
      ++v34;
    }
    while (a4 != v34);
  }
  v55 = a5;
  if (a5 + a4 > a4)
  {
    do
    {
      v66 = 0;
      v67 = 0;
      v66 = llvm::ConstantInt::get();
      v67 = llvm::ConstantFP::get();
      v56 = *(_QWORD *)(*(_QWORD *)v9 - 24) + v33 + 32;
      v64 = 257;
      llvm::IRBuilderBase::CreateCall(v56, *(_QWORD *)(v32 + 24), v32, (uint64_t)&v66, 2, (uint64_t)v63);
      ++a4;
      --v55;
    }
    while (v55);
  }
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v9 - 24) + v9 + 40));
  if (__p)
    operator delete(__p);
  return v9 + *(_QWORD *)(*(_QWORD *)v9 - 24);
}

uint64_t AGCLLVMGen3TargetConfig::createTileDispatchVertexShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  llvm::Value *v29;
  uint64_t v30;
  unsigned int v31;
  llvm::Type *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::GlobalVariable *Cast;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::GlobalVariable *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::GlobalVariable *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  llvm::GlobalVariable *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::GlobalVariable *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  llvm::GlobalVariable *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  llvm::Value *v67;
  llvm::Type *v68;
  llvm::Value *AlignedLoad;
  uint64_t v70;
  uint64_t v71;
  llvm::IRBuilderBase *v72;
  llvm::Value *v73;
  llvm::Value *Add;
  uint64_t v75;
  uint64_t v76;
  llvm::IRBuilderBase *v77;
  llvm::Value *v78;
  llvm::Value *v79;
  uint64_t v80;
  uint64_t v81;
  llvm::IRBuilderBase *v82;
  llvm::Value *v83;
  llvm::Value *v84;
  uint64_t v85;
  uint64_t v86;
  llvm::IRBuilderBase *v87;
  llvm::Value *v88;
  llvm::Value *v89;
  uint64_t v90;
  uint64_t v91;
  llvm::IRBuilderBase *v92;
  llvm::Value *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  llvm::GlobalVariable *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  llvm::GlobalVariable *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  llvm::GlobalVariable *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  llvm::Type **v116;
  uint64_t v117;
  llvm::Type **v118;
  uint64_t v119;
  llvm::Type **v120;
  uint64_t v121;
  llvm::Type **v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  size_t v130;
  uint64_t v131;
  llvm::Value *v132;
  llvm::Type *v133;
  llvm::Value *v134;
  llvm::IRBuilderBase *v135;
  llvm::Value *v136;
  llvm::Value *UDiv;
  llvm::IRBuilderBase *v138;
  llvm::Value *v139;
  llvm::CmpInst **URem;
  llvm::IRBuilderBase *v141;
  llvm::CmpInst **v142;
  llvm::IRBuilderBase *v143;
  llvm::Value *v144;
  uint64_t *v145;
  llvm::Value *v146;
  llvm::Type *v147;
  uint64_t v148;
  uint64_t *v149;
  llvm::Value *v150;
  llvm::Type *v151;
  llvm::Value *v152;
  llvm::Value *v153;
  uint64_t *v154;
  llvm::Value *v155;
  llvm::Type *v156;
  llvm::Value *v157;
  llvm::Value *v158;
  llvm::Value *v159;
  uint64_t v160;
  llvm::Type *v161;
  llvm::Value *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  llvm::Value *v168;
  llvm::Type *v169;
  llvm::Value *Select;
  llvm::Value *v171;
  llvm::Value *InsertElement;
  uint64_t *v173;
  llvm::Value *v174;
  llvm::Type *v175;
  llvm::Value *v176;
  llvm::Value *v177;
  uint64_t v178;
  llvm::Value *v179;
  uint64_t v180;
  llvm::Value *v181;
  uint64_t v182;
  llvm::Value *v183;
  llvm::Type *v184;
  uint64_t v185;
  llvm::Value *FMul;
  llvm::Value *v187;
  llvm::Value *v188;
  uint64_t v189;
  llvm::Value *v190;
  uint64_t v191;
  llvm::Value *v192;
  llvm::Type *v193;
  uint64_t v194;
  llvm::Value *v195;
  llvm::Value *v196;
  uint64_t v197;
  uint64_t v198;
  llvm::Value *FAdd;
  uint64_t v200;
  llvm::IRBuilderBase *v201;
  llvm::Value *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  llvm::IRBuilderBase *v206;
  llvm::Value *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  llvm::IRBuilderBase *v212;
  llvm::Value *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  llvm::IRBuilderBase *v217;
  llvm::Value *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  llvm::Type **v223;
  llvm::Type **v224;
  uint64_t *v225;
  llvm::Type **v226;
  llvm::Type **v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  llvm::Value *v232;
  void *v233;
  uint64_t v234;
  char v235;
  __int128 v236;
  uint64_t v237;
  int v238;
  __int128 v239;
  uint64_t v240;
  int v241;
  void *__p;
  char v243;
  __int16 v244;
  unsigned int v245;
  _QWORD v246[2];
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __int16 v251;
  uint64_t *v252;
  uint64_t Element;
  __int16 v254;
  uint64_t v255;

  v255 = *MEMORY[0x1E0C80C00];
  v7 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v7 + 96), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t *)v7, (uint64_t *)off_1E7EBAD80);
  *(_QWORD *)(v7 + 72) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v7 + 80) = -1;
  *(_WORD *)(v7 + 84) = 0;
  *(_QWORD *)v7 = off_1E7EBAB38;
  *(_QWORD *)(v7 + 96) = &unk_1E7EBAC78;
  *(_QWORD *)(v7 + 128) = &unk_1E7EBAD68;
  v235 = a4;
  *(_DWORD *)(v7 + 88) = a4;
  *(_DWORD *)(v7 + 72) = 5;
  v245 = 0;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 496) + 464))(*(_QWORD *)(v7 + 496));
  v9 = *(_QWORD *)v7;
  if (v8 == 2
    || (v10 = *(_QWORD *)(*(_QWORD *)(v9 - 24) + v7 + 400),
        *(_DWORD *)(v7 + 76) = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v10 + 440))(v10, &v245, 4), v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 400), *(_DWORD *)(v7 + 80) = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v11 + 440))(v11, &v245, 2), v12 = v245, v9 = *(_QWORD *)v7, !v245))
  {
    v15 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v9 - 24) + v7 + 32;
    v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v245);
    v15 = v14;
    v16 = 0;
    do
    {
      *(_QWORD *)&v14[v16] = *(_QWORD *)(v13 + 200);
      v16 += 8;
    }
    while (8 * v12 != v16);
    v9 = *(_QWORD *)v7;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(v9 + 72))(&__p, v7);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v18 = v17;
  if (v243 < 0)
    operator delete(__p);
  *(_WORD *)(v18 + 18) = *(_WORD *)(v18 + 18) & 0xC00F | 0x660;
  __p = "entry";
  v244 = 259;
  operator new();
  v19 = llvm::BasicBlock::BasicBlock();
  v20 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  *(_QWORD *)(v20 + 88) = v19;
  *(_QWORD *)(v20 + 96) = v19 + 40;
  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 400);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 464))(v21) == 2)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v23 = *(_QWORD *)(v22 + 400);
    v239 = *(_OWORD *)(v22 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v22 + 40));
    v241 = *(_DWORD *)(v22 + 136);
    v232 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, unsigned int *, uint64_t))(*(_QWORD *)v23
                                                                                                  + 456))(v23, &v239, &v245, 4);
    if (v240)
      llvm::MetadataTracking::untrack();
    v24 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v25 = *(_QWORD *)(v24 + 400);
    v236 = *(_OWORD *)(v24 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v24 + 40));
    v238 = *(_DWORD *)(v24 + 136);
    v234 = (*(uint64_t (**)(uint64_t, __int128 *, unsigned int *, uint64_t))(*(_QWORD *)v25 + 456))(v25, &v236, &v245, 2);
    if (v237)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    if ((*(_WORD *)(v18 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments((llvm::Function *)v18);
    v26 = *(_DWORD *)(v7 + 76);
    v27 = *(_DWORD *)(v7 + 80);
    v28 = 40 * (v26 - 1) + 40;
    if (!v26)
      v28 = 0;
    v29 = (llvm::Value *)(*(_QWORD *)(v18 + 88) + v28);
    v30 = (uint64_t)v29 + 40 * v27 + 40 * ~v26 + 40;
    v232 = v29;
    if (v26 >= v27)
      v30 = (uint64_t)v29;
    v234 = v30;
  }
  v31 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 28) - 9;
  if (v31 > 0x19)
    v32 = 0;
  else
    v32 = (llvm::Type *)qword_1C3DF8340[v31];
  v233 = v15;
  v33 = llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 200), v32);
  v34 = llvm::ArrayType::get(*(llvm::ArrayType **)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 232), v32);
  Cast = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  v230 = v33;
  __p = "agc.tile.scale.x";
  v244 = 259;
  llvm::GlobalVariable::GlobalVariable();
  *((_BYTE *)Cast + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v36 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  if ((v235 & 2) != 0)
  {
    v64 = *(_QWORD *)(v36 + 376);
    v65 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v36 + 32), Cast);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v64, v65);
    v66 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v244 = 257;
    v68 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)Cast, v67);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v66 + 40), v68, (uint64_t)Cast, 0, (uint64_t)&__p);
    v70 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v71 = llvm::PointerType::get();
    v244 = 257;
    Cast = (llvm::GlobalVariable *)llvm::IRBuilderBase::CreateCast(v70, 48, (uint64_t)AlignedLoad, v71, (uint64_t)&__p);
    v72 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
    v73 = (llvm::Value *)llvm::ConstantInt::get();
    v244 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v72, AlignedLoad, v73, (const llvm::Twine *)&__p);
    v75 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v76 = llvm::PointerType::get();
    v244 = 257;
    v228 = (uint64_t *)llvm::IRBuilderBase::CreateCast(v75, 48, (uint64_t)Add, v76, (uint64_t)&__p);
    v77 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
    v78 = (llvm::Value *)llvm::ConstantInt::get();
    v244 = 257;
    v79 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v77, Add, v78, (const llvm::Twine *)&__p);
    v80 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v81 = llvm::PointerType::get();
    v244 = 257;
    v225 = (uint64_t *)llvm::IRBuilderBase::CreateCast(v80, 48, (uint64_t)v79, v81, (uint64_t)&__p);
    v82 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
    v83 = (llvm::Value *)llvm::ConstantInt::get();
    v244 = 257;
    v84 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v82, v79, v83, (const llvm::Twine *)&__p);
    v85 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v86 = llvm::PointerType::get();
    v244 = 257;
    v49 = (llvm::GlobalVariable *)llvm::IRBuilderBase::CreateCast(v85, 48, (uint64_t)v84, v86, (uint64_t)&__p);
    v87 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
    v88 = (llvm::Value *)llvm::ConstantInt::get();
    v244 = 257;
    v89 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v87, v84, v88, (const llvm::Twine *)&__p);
    v90 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v91 = llvm::PointerType::get();
    v244 = 257;
    v54 = (llvm::GlobalVariable *)llvm::IRBuilderBase::CreateCast(v90, 48, (uint64_t)v89, v91, (uint64_t)&__p);
    v92 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
    v93 = (llvm::Value *)llvm::ConstantInt::get();
    v244 = 257;
    v94 = llvm::IRBuilderBase::CreateAdd(v92, v89, v93, (const llvm::Twine *)&__p);
    v95 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v96 = llvm::PointerType::get();
    v244 = 257;
    v59 = (llvm::GlobalVariable *)llvm::IRBuilderBase::CreateCast(v95, 48, v94, v96, (uint64_t)&__p);
  }
  else
  {
    v37 = *(_QWORD *)(v36 + 376);
    v38 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v36 + 32), Cast);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v37, v38);
    v39 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p = "agc.tile.scale.y";
    v244 = 259;
    v40 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v40 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v41 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v42 = *(_QWORD *)(v41 + 376);
    v228 = (uint64_t *)v39;
    v43 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v41 + 32), v39);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v42, v43);
    v44 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p = "agc.tile.count.x";
    v244 = 259;
    v45 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v45 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v46 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v47 = *(_QWORD *)(v46 + 376);
    v225 = (uint64_t *)v44;
    v48 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v46 + 32), v44);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v47, v48);
    v49 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p = "agc.tile.count.y";
    v244 = 259;
    v50 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v50 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v51 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v52 = *(_QWORD *)(v51 + 376);
    v53 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v51 + 32), v49);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v52, v53);
    v54 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p = "agc.tile.offset.x";
    v244 = 259;
    v55 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v55 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v56 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v57 = *(_QWORD *)(v56 + 376);
    v58 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v56 + 32), v54);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v57, v58);
    v59 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    __p = "agc.tile.offset.y";
    v244 = 259;
    v60 = llvm::GlobalVariable::GlobalVariable();
    *(_BYTE *)(v60 + 80) |= 1u;
    llvm::GlobalObject::setSection();
    v61 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v62 = *(_QWORD *)(v61 + 376);
    v63 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v61 + 32), v59);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v62, v63);
  }
  v97 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  __p = "agc.tile.size.x";
  v244 = 259;
  v98 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v98 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v99 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v100 = *(_QWORD *)(v99 + 376);
  v227 = (llvm::Type **)v97;
  v101 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v99 + 32), v97);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v100, v101);
  v102 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  __p = "agc.tile.size.y";
  v244 = 259;
  v103 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v103 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v104 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v105 = *(_QWORD *)(v104 + 376);
  v226 = (llvm::Type **)v102;
  v106 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v104 + 32), v102);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v105, v106);
  v107 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
  __p = "agc.tile.layer_index";
  v244 = 259;
  v108 = llvm::GlobalVariable::GlobalVariable();
  *(_BYTE *)(v108 + 80) |= 1u;
  llvm::GlobalObject::setSection();
  v109 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v110 = *(_QWORD *)(v109 + 376);
  v111 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)(v109 + 32), v107);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v110, v111);
  v112 = v234;
  if ((v235 & 1) == 0)
    v112 = llvm::ConstantInt::get();
  v113 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v252 = (uint64_t *)llvm::ConstantInt::get();
  Element = v112;
  v244 = 257;
  v223 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v113 + 40, v230, (uint64_t *)Cast, &v252, 2, (uint64_t)&__p);
  v114 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v252 = (uint64_t *)llvm::ConstantInt::get();
  Element = v112;
  v244 = 257;
  v224 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v114 + 40, v230, v228, &v252, 2, (uint64_t)&__p);
  v115 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v252 = (uint64_t *)llvm::ConstantInt::get();
  Element = v112;
  v244 = 257;
  v116 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v115 + 40, v34, v225, &v252, 2, (uint64_t)&__p);
  v117 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v252 = (uint64_t *)llvm::ConstantInt::get();
  Element = v112;
  v244 = 257;
  v118 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v117 + 40, v34, (uint64_t *)v49, &v252, 2, (uint64_t)&__p);
  v119 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v252 = (uint64_t *)llvm::ConstantInt::get();
  Element = v112;
  v244 = 257;
  v120 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v119 + 40, v34, (uint64_t *)v54, &v252, 2, (uint64_t)&__p);
  v121 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v252 = (uint64_t *)llvm::ConstantInt::get();
  Element = v112;
  v244 = 257;
  v122 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v121 + 40, v34, (uint64_t *)v59, &v252, 2, (uint64_t)&__p);
  v123 = *(_QWORD *)(*(_QWORD *)v7 - 24);
  v124 = *(_QWORD *)(v123 + v7 + 400);
  v125 = *(_QWORD *)(v124 + 1384);
  if (v125)
    v126 = strlen(*(const char **)(v124 + 1384));
  else
    v126 = 0;
  v231 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v123 + v7 + 32, v125, v126, *(_QWORD *)(v123 + v7 + 176), *(_QWORD *)(v7 + v123 + 2768), *(_QWORD *)(v123 + v7 + 200));
  v127 = *(_QWORD *)(*(_QWORD *)v7 - 24);
  v128 = *(_QWORD *)(v127 + v7 + 400);
  v129 = *(_QWORD *)(v128 + 1424);
  if (v129)
    v130 = strlen(*(const char **)(v128 + 1424));
  else
    v130 = 0;
  v229 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(v127 + v7 + 32, v129, v130, *(_QWORD *)(v127 + v7 + 176), *(_QWORD *)(v7 + v127 + 2768), *(_QWORD *)(v127 + v7 + 232));
  v131 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v244 = 257;
  v133 = AGCLLVMBuilder::tryDeducePointeeType(v116, v132);
  v134 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v131 + 40), v133, (uint64_t)v116, 0, (uint64_t)&__p);
  v135 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v136 = (llvm::Value *)llvm::ConstantInt::get();
  v244 = 257;
  UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v135, v232, v136, (const llvm::Twine *)&__p);
  v138 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v139 = (llvm::Value *)llvm::ConstantInt::get();
  v244 = 257;
  URem = (llvm::CmpInst **)llvm::IRBuilderBase::CreateURem(v138, v232, v139, (const llvm::Twine *)&__p);
  v141 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v244 = 257;
  v142 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateUDiv(v141, UDiv, v134, (const llvm::Twine *)&__p);
  v143 = (llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v244 = 257;
  v144 = (llvm::Value *)llvm::IRBuilderBase::CreateURem(v143, UDiv, v134, (const llvm::Twine *)&__p);
  v145 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v244 = 257;
  v147 = AGCLLVMBuilder::tryDeducePointeeType(v118, v146);
  v148 = llvm::IRBuilderBase::CreateAlignedLoad(v145, v147, (uint64_t)v118, 0, (uint64_t)&__p);
  v254 = 257;
  llvm::IRBuilderBase::CreateICmp(v145, 36, v142, v148, (uint64_t)&v252);
  v149 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v244 = 257;
  v151 = AGCLLVMBuilder::tryDeducePointeeType(v120, v150);
  v152 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v149, v151, (uint64_t)v120, 0, (uint64_t)&__p);
  v254 = 257;
  v153 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v149, v144, v152, (const llvm::Twine *)&v252);
  v154 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v244 = 257;
  v156 = AGCLLVMBuilder::tryDeducePointeeType(v122, v155);
  v157 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(v154, v156, (uint64_t)v122, 0, (uint64_t)&__p);
  v254 = 257;
  v159 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v154, (llvm::Value *)v142, v157, (const llvm::Twine *)&v252);
  if ((v235 & 4) != 0)
  {
    v160 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v244 = 257;
    v161 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v107, v158);
    v234 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v160 + 40), v161, (uint64_t)v107, 0, (uint64_t)&__p);
  }
  v162 = (llvm::Value *)llvm::UndefValue::get();
  v163 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v164 = llvm::ConstantInt::get();
  v244 = 257;
  llvm::IRBuilderBase::CreateICmp(v163, 32, URem, v164, (uint64_t)&__p);
  v165 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v166 = llvm::ConstantInt::get();
  v244 = 257;
  llvm::IRBuilderBase::CreateICmp(v165, 32, URem, v166, (uint64_t)&__p);
  v167 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v244 = 257;
  v169 = AGCLLVMBuilder::tryDeducePointeeType(v223, v168);
  llvm::IRBuilderBase::CreateAlignedLoad(v167, v169, (uint64_t)v223, 0, (uint64_t)&__p);
  llvm::ConstantFP::get();
  v254 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v251 = 257;
  v171 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v167, v162, Select, v171, (const llvm::Twine *)&v249);
  v173 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40);
  v244 = 257;
  v175 = AGCLLVMBuilder::tryDeducePointeeType(v224, v174);
  llvm::IRBuilderBase::CreateAlignedLoad(v173, v175, (uint64_t)v224, 0, (uint64_t)&__p);
  llvm::ConstantFP::get();
  v254 = 257;
  v176 = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v251 = 257;
  v177 = (llvm::Value *)llvm::ConstantInt::get();
  v178 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)v173, InsertElement, v176, v177, (const llvm::Twine *)&v249);
  v179 = (llvm::Value *)llvm::UndefValue::get();
  v180 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v181 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)(v180 + 32), v153, 1);
  v182 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v244 = 257;
  v184 = AGCLLVMBuilder::tryDeducePointeeType(v227, v183);
  v185 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v182 + 40), v184, (uint64_t)v227, 0, (uint64_t)&__p);
  v254 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul(v180 + 40, (uint64_t)v181, v185, (uint64_t)&v252);
  v251 = 257;
  v187 = (llvm::Value *)llvm::ConstantInt::get();
  v188 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v180 + 40), v179, FMul, v187, (const llvm::Twine *)&v249);
  v189 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v190 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)(v189 + 32), v159, 1);
  v191 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
  v244 = 257;
  v193 = AGCLLVMBuilder::tryDeducePointeeType(v226, v192);
  v194 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v191 + 40), v193, (uint64_t)v226, 0, (uint64_t)&__p);
  v254 = 257;
  v195 = (llvm::Value *)llvm::IRBuilderBase::CreateFMul(v189 + 40, (uint64_t)v190, v194, (uint64_t)&v252);
  v251 = 257;
  v196 = (llvm::Value *)llvm::ConstantInt::get();
  v197 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v189 + 40), v188, v195, v196, (const llvm::Twine *)&v249);
  v198 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
  v244 = 257;
  FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd(v198, v178, v197, (uint64_t)&__p);
  if ((v235 & 1) != 0)
  {
    llvm::ConstantFP::get();
    v249 = llvm::ConstantInt::get();
    v211 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v244 = 257;
    v212 = (llvm::IRBuilderBase *)(v211 + 40);
    v213 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateExtractElement(v212, FAdd, v213, (const llvm::Twine *)&__p);
    v254 = 257;
    v250 = llvm::IRBuilderBase::CreateSelect();
    v214 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v244 = 257;
    v215 = v231;
    llvm::IRBuilderBase::CreateCall(v214, *(_QWORD *)(v231 + 24), v231, (uint64_t)&v249, 2, (uint64_t)&__p);
    v247 = llvm::ConstantInt::get();
    v216 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v244 = 257;
    v217 = (llvm::IRBuilderBase *)(v216 + 40);
    v218 = (llvm::Value *)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateExtractElement(v217, FAdd, v218, (const llvm::Twine *)&__p);
    v254 = 257;
    v248 = llvm::IRBuilderBase::CreateSelect();
    v219 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v244 = 257;
    llvm::IRBuilderBase::CreateCall(v219, *(_QWORD *)(v215 + 24), v215, (uint64_t)&v247, 2, (uint64_t)&__p);
    v252 = (uint64_t *)llvm::ConstantInt::get();
    Element = llvm::ConstantFP::get();
    v220 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v244 = 257;
    llvm::IRBuilderBase::CreateCall(v220, *(_QWORD *)(v215 + 24), v215, (uint64_t)&v252, 2, (uint64_t)&__p);
  }
  else
  {
    v252 = (uint64_t *)llvm::ConstantInt::get();
    v200 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v244 = 257;
    v201 = (llvm::IRBuilderBase *)(v200 + 40);
    v202 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement(v201, FAdd, v202, (const llvm::Twine *)&__p);
    v203 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v244 = 257;
    v204 = v231;
    llvm::IRBuilderBase::CreateCall(v203, *(_QWORD *)(v231 + 24), v231, (uint64_t)&v252, 2, (uint64_t)&__p);
    v249 = llvm::ConstantInt::get();
    v205 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7;
    v244 = 257;
    v206 = (llvm::IRBuilderBase *)(v205 + 40);
    v207 = (llvm::Value *)llvm::ConstantInt::get();
    v250 = llvm::IRBuilderBase::CreateExtractElement(v206, FAdd, v207, (const llvm::Twine *)&__p);
    v208 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v244 = 257;
    llvm::IRBuilderBase::CreateCall(v208, *(_QWORD *)(v204 + 24), v204, (uint64_t)&v249, 2, (uint64_t)&__p);
    v247 = llvm::ConstantInt::get();
    v248 = llvm::ConstantFP::get();
    v209 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
    v244 = 257;
    llvm::IRBuilderBase::CreateCall(v209, *(_QWORD *)(v204 + 24), v204, (uint64_t)&v247, 2, (uint64_t)&__p);
  }
  v246[0] = llvm::ConstantInt::get();
  v246[1] = llvm::ConstantFP::get();
  v210 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
  v244 = 257;
  llvm::IRBuilderBase::CreateCall(v210, *(_QWORD *)(v231 + 24), v231, (uint64_t)v246, 2, (uint64_t)&__p);
  v252 = (uint64_t *)llvm::ConstantInt::get();
  Element = v234;
  v221 = *(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40;
  v244 = 257;
  llvm::IRBuilderBase::CreateCall(v221, *(_QWORD *)(v229 + 24), v229, (uint64_t)&v252, 2, (uint64_t)&__p);
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v7 - 24) + v7 + 40));
  if (v233)
    operator delete(v233);
  return v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
}

char *AGCLLVMGen3TargetConfig::createMetalComputeShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;

  (*(void (**)(uint64_t, llvm::LLVMContext **, uint64_t))(*(_QWORD *)a1 + 240))(a1, a3, a4);
  v7 = operator new();
  v8 = (_QWORD *)AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10(v7, a2, a3, a4);
  return (char *)v8 + *(_QWORD *)(*v8 - 24);
}

char *AGCLLVMGen3TargetConfig::createMetalTileShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;

  v11 = operator new();
  v12 = (_QWORD *)AGCLLVMUserTileShader::AGCLLVMUserTileShader(v11, a2, a3, a4, a5, a6);
  return (char *)v12 + *(_QWORD *)(*v12 - 24);
}

uint64_t AGCLLVMGen3TargetConfig::createMetalFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7, int a8, _DWORD *a9)
{
  uint64_t v16;
  int v17;
  _OWORD *v18;
  unint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  v16 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v16 + 7320), a2, *a3);
  AGCLLVMAGPFragmentShader::AGCLLVMAGPFragmentShader(v16, (uint64_t *)&off_1E7E61600, (llvm::Module *)a3, a4, a5, a6, a7);
  *(_QWORD *)v16 = &off_1E7E61150;
  *(_QWORD *)(v16 + 7320) = &unk_1E7E61500;
  *(_QWORD *)(v16 + 7352) = &unk_1E7E615F0;
  *(_QWORD *)(v16 + 4320) = &unk_1E7E61400;
  *(_OWORD *)(v16 + 6936) = 0u;
  *(_QWORD *)(v16 + 6928) = v16 + 6936;
  *(_OWORD *)(v16 + 6960) = 0u;
  *(_QWORD *)(v16 + 6952) = v16 + 6960;
  *(_OWORD *)(v16 + 6976) = 0u;
  *(_DWORD *)(v16 + 6992) = 0;
  *(_QWORD *)(v16 + 7000) = v16 + 7016;
  *(_QWORD *)(v16 + 7008) = 0x800000000;
  *(_QWORD *)(v16 + 7048) = v16 + 7064;
  *(_QWORD *)(v16 + 7056) = 0x800000000;
  *(_OWORD *)(v16 + 7096) = 0u;
  *(_OWORD *)(v16 + 7112) = 0u;
  *(_OWORD *)(v16 + 7128) = 0u;
  *(_OWORD *)(v16 + 7144) = 0u;
  *(_OWORD *)(v16 + 7160) = 0u;
  *(_OWORD *)(v16 + 7176) = 0u;
  *(_OWORD *)(v16 + 7192) = 0u;
  *(_OWORD *)(v16 + 7208) = 0u;
  *(_BYTE *)(v16 + 7224) = 0;
  *(_QWORD *)(v16 + 7232) = 4;
  *(_QWORD *)(v16 + 7248) = 0;
  *(_QWORD *)(v16 + 7240) = 0;
  *(_DWORD *)(v16 + 7256) = a8;
  v17 = a8 == 3;
  *(_BYTE *)(v16 + 7260) = v17;
  *(_DWORD *)(v16 + 7264) = 0;
  *(_QWORD *)(v16 + 7272) = 4;
  *(_QWORD *)(v16 + 7280) = 0;
  *(_QWORD *)(v16 + 7288) = 0;
  *(_QWORD *)(v16 + 7296) = 4;
  *(_QWORD *)(v16 + 7312) = 0;
  *(_QWORD *)(v16 + 7304) = 0;
  if (*(_BYTE *)(*(_QWORD *)(v16 + 7720) + 1749))
  {
    v18 = *(_OWORD **)(v16 + 904);
    v19 = *(_QWORD *)(v16 + 912);
    if ((unint64_t)v18 >= v19)
    {
      v21 = *(_QWORD *)(v16 + 896);
      v22 = ((uint64_t)v18 - v21) >> 4;
      if ((unint64_t)(v22 + 1) >> 60)
        goto LABEL_48;
      v23 = v19 - v21;
      v24 = v23 >> 3;
      if (v23 >> 3 <= (unint64_t)(v22 + 1))
        v24 = v22 + 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v25 = 0xFFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v25);
      else
        v26 = 0;
      v27 = (_OWORD *)(v25 + 16 * v22);
      v28 = v25 + 16 * v26;
      *v27 = xmmword_1C3E37BE0;
      v20 = v27 + 1;
      v29 = *(char **)(v16 + 904);
      v30 = *(char **)(v16 + 896);
      if (v29 != v30)
      {
        do
        {
          *--v27 = *((_OWORD *)v29 - 1);
          v29 -= 16;
        }
        while (v29 != v30);
        v29 = *(char **)(v16 + 896);
      }
      *(_QWORD *)(v16 + 896) = v27;
      *(_QWORD *)(v16 + 904) = v20;
      *(_QWORD *)(v16 + 912) = v28;
      if (v29)
        operator delete(v29);
    }
    else
    {
      *v18 = xmmword_1C3E37BE0;
      v20 = v18 + 1;
    }
    *(_QWORD *)(v16 + 904) = v20;
    v31 = *(char **)(v16 + 928);
    v32 = *(_QWORD *)(v16 + 936);
    if ((unint64_t)v31 < v32)
    {
      *(_OWORD *)v31 = xmmword_1C3E37BE0;
      v33 = v31 + 16;
LABEL_33:
      *(_QWORD *)(v16 + 928) = v33;
      v17 = *(unsigned __int8 *)(v16 + 7260);
      goto LABEL_34;
    }
    v34 = *(char **)(v16 + 920);
    v35 = (v31 - v34) >> 4;
    v36 = v35 + 1;
    if (!((unint64_t)(v35 + 1) >> 60))
    {
      v37 = v32 - (_QWORD)v34;
      if (v37 >> 3 > v36)
        v36 = v37 >> 3;
      v38 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0;
      v39 = 0xFFFFFFFFFFFFFFFLL;
      if (!v38)
        v39 = v36;
      if (v39)
      {
        v39 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<AIRConstSampler>>(v39);
        v31 = *(char **)(v16 + 928);
        v34 = *(char **)(v16 + 920);
      }
      else
      {
        v40 = 0;
      }
      v41 = (_OWORD *)(v39 + 16 * v35);
      v42 = v39 + 16 * v40;
      *v41 = xmmword_1C3E37BE0;
      v33 = v41 + 1;
      if (v31 != v34)
      {
        do
        {
          *--v41 = *((_OWORD *)v31 - 1);
          v31 -= 16;
        }
        while (v31 != v34);
        v34 = *(char **)(v16 + 920);
      }
      *(_QWORD *)(v16 + 920) = v41;
      *(_QWORD *)(v16 + 928) = v33;
      *(_QWORD *)(v16 + 936) = v42;
      if (v34)
        operator delete(v34);
      goto LABEL_33;
    }
LABEL_48:
    abort();
  }
LABEL_34:
  if (v17)
    *(_DWORD *)(v16 + 7264) = *a9;
  if (*(_BYTE *)(v16 + 5845))
  {
    *(_BYTE *)(v16 + 5862) = 1;
    v43 = *(_QWORD *)(*(_QWORD *)(v16 + 5848) + 8);
    if (v43)
    {
      do
      {
        v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v43 + 24) + 40) + 40);
        v45 = v44 - 24;
        if (v44)
          v46 = v44 - 24;
        else
          v46 = 0;
        if (*(unsigned __int8 *)(v46 + 16) - 29 >= 0xB)
          v47 = 0;
        else
          v47 = v45;
        v48 = *(unsigned __int8 *)(v47 + 16);
        if (v48 == 35)
          break;
        v43 = *(_QWORD *)(v43 + 8);
      }
      while (v43);
      *(_BYTE *)(v16 + 5862) = v48 != 35;
    }
  }
  return v16 + *(_QWORD *)(*(_QWORD *)v16 - 24);
}

uint64_t AGCLLVMGen3TargetConfig::createMetalPostTessellationShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v11;

  v11 = operator new();
  return AGCLLVMAGPVertexShaderPostTessellationSW::AGCLLVMAGPVertexShaderPostTessellationSW(v11, a2, a3, a4, a5, a6);
}

uint64_t AGCLLVMGen3TargetConfig::createGPUGatherComputeShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"gpu_gather_compute_gen2", 23, 0);
  if ((v5 & 1) == 0
  {
    AGCLLVMDriverGPUGatherComputeShaderGen3::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9138 = 0;
    qword_1EF8E9140 = 0;
  }
  v6 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v6 + 557), a2, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v6, (uint64_t *)&off_1E7E90B68, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverGPUGatherComputeShaderGen3::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v6 = &off_1E7E90700;
  v6[557] = &unk_1E7E90A60;
  v6[561] = &unk_1E7E90B50;
  *(_OWORD *)(v6 + 553) = 0u;
  v6[555] = 0x2000000000;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6[607] + 824) + 408))(*(_QWORD *)(v6[607] + 824));
  v8 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v6 + 553), "gpuGatherOffsets", 0x10uLL);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 20) = 0;
  return (uint64_t)v6 + *(_QWORD *)(*v6 - 24);
}

_QWORD *AGCLLVMGen3TargetConfig::createExecuteIndirectCDMPatchUpShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  return AGCLLVMDriverExecuteIndirectComputeShaderG10::create(a2, a3, a3);
}

_QWORD *AGCLLVMGen3TargetConfig::createExecuteIndirectCDMRangeExecutionShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  const char *v5;
  std::string *p_p;
  std::string::size_type size;
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  UInt8 *v17;
  int v19;
  const char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t i;
  unsigned int v24;
  uint64_t v25;
  uint64_t j;
  unsigned int v27;
  uint64_t v28;
  uint64_t k;
  const UInt8 *v30;
  CFIndex v31;
  llvm::LLVMContext **v32;
  unsigned __int8 v33;
  _QWORD *v34;
  char **v35;
  char *v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  std::string v40;
  std::string __p;
  const UInt8 *v42;
  CFIndex v43;
  unsigned __int8 v44;
  int v45;
  _QWORD v46[3];
  int v47;
  _QWORD v48[4];

  v48[3] = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  switch(*(_DWORD *)(*((_QWORD *)a2 + 4) + 28))
  {
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      v5 = "cei_range_exec_gen4";
      goto LABEL_6;
    case 0x11:
    case 0x12:
      v5 = "cei_range_exec_gen5";
      goto LABEL_6;
    case 0x13:
    case 0x14:
    case 0x15:
      v5 = "cei_range_exec_gen5x";
      goto LABEL_6;
    case 0x16:
      std::string::basic_string[abi:nn180100]<0>(v38, "cei_range_exec_gen6_g15p");
      v21 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 24);
      LODWORD(v42) = 1;
      std::string::basic_string[abi:nn180100]<0>(&v43, "a0");
      v45 = 3;
      std::string::basic_string[abi:nn180100]<0>(v46, "b0");
      v22 = 0;
      v36 = 0;
      v37 = 0;
      v35 = &v36;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v35, (uint64_t *)&v36, (int)(&v42)[v22], (uint64_t)&(&v42)[v22]);
        v22 += 4;
      }
      while (v22 != 8);
      getFullBitcodePath(&v40, (uint64_t)v38, v21, (uint64_t)&v35);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v40;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v36);
      for (i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v46[i + 2]) < 0)
          operator delete((void *)v46[i]);
      }
      goto LABEL_48;
    case 0x18:
      std::string::basic_string[abi:nn180100]<0>(v38, "cei_range_exec_gen6_g15g");
      v24 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 24);
      LODWORD(v42) = 1;
      std::string::basic_string[abi:nn180100]<0>(&v43, "a0");
      v45 = 3;
      std::string::basic_string[abi:nn180100]<0>(v46, "b0");
      v47 = 5;
      std::string::basic_string[abi:nn180100]<0>(v48, "c0");
      v25 = 0;
      v36 = 0;
      v37 = 0;
      v35 = &v36;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v35, (uint64_t *)&v36, (int)(&v42)[v25], (uint64_t)&(&v42)[v25]);
        v25 += 4;
      }
      while (v25 != 12);
      getFullBitcodePath(&v40, (uint64_t)v38, v24, (uint64_t)&v35);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v40;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v36);
      for (j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v48[j + 2]) < 0)
          operator delete((void *)v48[j]);
      }
      goto LABEL_48;
    case 0x1F:
      std::string::basic_string[abi:nn180100]<0>(v38, "cei_range_exec_gen6_g16p");
      v27 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 24);
      LODWORD(v42) = 1;
      std::string::basic_string[abi:nn180100]<0>(&v43, "a0");
      v45 = 3;
      std::string::basic_string[abi:nn180100]<0>(v46, "b0");
      v47 = 4;
      std::string::basic_string[abi:nn180100]<0>(v48, "b0");
      v28 = 0;
      v36 = 0;
      v37 = 0;
      v35 = &v36;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v35, (uint64_t *)&v36, (int)(&v42)[v28], (uint64_t)&(&v42)[v28]);
        v28 += 4;
      }
      while (v28 != 12);
      getFullBitcodePath(&v40, (uint64_t)v38, v27, (uint64_t)&v35);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v40;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v36);
      for (k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v48[k + 2]) < 0)
          operator delete((void *)v48[k]);
      }
LABEL_48:
      if (v39 < 0)
        operator delete(v38[0]);
      goto LABEL_7;
    case 0x20:
    case 0x22:
      v5 = "cei_range_exec_gen6_hal200";
LABEL_6:
      MEMORY[0x1CAA2D494](&__p, v5);
LABEL_7:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)p_p, size, 0);
      if ((v9 & 1) == 0
      {
        AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
        *(_QWORD *)algn_1EF8E9118 = 0;
        qword_1EF8E9120 = 0;
      }
      v10 = (_QWORD *)operator new();
      AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v10 + 557), a2, *Bitcode);
      AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v10, (uint64_t *)&off_1E7E90180, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverExecuteIndirectRangeExecutionComputeShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
      *v10 = &off_1E7E8FD18;
      v10[557] = &unk_1E7E90078;
      v10[561] = &unk_1E7E90168;
      *(_OWORD *)(v10 + 553) = 0u;
      v10[555] = 0x2000000000;
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10[607] + 824) + 504))(*(_QWORD *)(v10[607] + 824));
      v12 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v10 + 553), "indirectCommandBuffer", 0x15uLL);
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 20) = 0;
      v13 = *(_QWORD *)(*(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 400) + 824);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 496))(v13);
      v15 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v10 + 553), "params", 6uLL);
      *(_QWORD *)(v15 + 8) = 1;
      *(_DWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 20) = 0;
      v16 = (_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24));
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v16;
      v17 = (UInt8 *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_16;
    default:
      std::string::basic_string[abi:nn180100]<0>(&v42, (char *)&unk_1C3E4D9BB);
      v19 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 28);
      if (v19 <= 11)
      {
        if ((v19 - 9) >= 3)
        {
          if (v19 != 8)
            goto LABEL_55;
          v20 = "cei_esl_gen_range_exec_gen1";
          goto LABEL_54;
        }
LABEL_52:
        v20 = "cei_esl_gen_range_exec_gen2";
        goto LABEL_54;
      }
      if (v19 != 12)
      {
        if (v19 != 23)
          goto LABEL_55;
        goto LABEL_52;
      }
      v20 = "cei_esl_gen_range_exec_gen3";
LABEL_54:
      MEMORY[0x1CAA2D494](&v42, v20);
LABEL_55:
      if ((v44 & 0x80u) == 0)
        v30 = (const UInt8 *)&v42;
      else
        v30 = v42;
      if ((v44 & 0x80u) == 0)
        v31 = v44;
      else
        v31 = v43;
      v32 = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, v30, v31, 0);
      if ((v33 & 1) == 0
      {
        AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
        *(_QWORD *)algn_1EF8E90D8 = 0;
        qword_1EF8E90E0 = 0;
      }
      v34 = (_QWORD *)operator new();
      v16 = v34 + 553;
      AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v34 + 553), a2, *v32);
      AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v34, (uint64_t *)&off_1E7E8FC80, (uint64_t)v32, (uint64_t)&AGCLLVMDriverExecuteIndirectRangeExecutionComputeShaderG10::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
      *v34 = &off_1E7E8F818;
      v34[553] = &unk_1E7E8FB78;
      v34[557] = &unk_1E7E8FC68;
      if ((char)v44 < 0)
      {
        v17 = (UInt8 *)v42;
LABEL_16:
        operator delete(v17);
      }
      return v16;
  }
}

uint64_t AGCLLVMGen3TargetConfig::createComputeProgressMarkerShader(AGCLLVMGen3TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  unsigned __int8 v5;
  llvm::LLVMContext **Bitcode;
  _QWORD *v7;
  uint64_t v8;

  if ((v5 & 1) == 0
  {
    AGCLLVMDriverComputeProgressMarkerShaderGen3::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E91D8 = 0;
    qword_1EF8E91E0 = 0;
  }
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"progress_marker_compute", 23, 0);
  v7 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v7 + 557), a2, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v7, (uint64_t *)&off_1E7E92468, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverComputeProgressMarkerShaderGen3::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v7 = &off_1E7E92000;
  v7[557] = &unk_1E7E92360;
  v7[561] = &unk_1E7E92450;
  *(_OWORD *)(v7 + 553) = 0u;
  v7[555] = 0x2000000000;
  LODWORD(Bitcode) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7[607] + 824) + 584))(*(_QWORD *)(v7[607] + 824));
  v8 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v7 + 553), "markerBuffer", 0xCuLL);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v8 + 20) = 0;
  return (uint64_t)v7 + *(_QWORD *)(*v7 - 24);
}

uint64_t AGCLLVMGen3TargetConfig::createComputeControlFlowPredicateShader(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4)
{
  char v6;
  unsigned __int8 v7;
  const char *ComputeControlFlowBitcodeFileName;
  const UInt8 *v9;
  CFIndex v10;
  llvm::LLVMContext **Bitcode;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a4;
  if ((v7 & 1) == 0
  {
    AGCLLVMDriverComputeControlFlowPredicateShaderGen3::create(AGCLLVMCtx &,llvm::LLVMContext &,unsigned int,BOOL,BOOL)::computeCS = 0;
    *(_QWORD *)algn_1EF8E91F8 = 0;
    qword_1EF8E9200 = 0;
  }
  ComputeControlFlowBitcodeFileName = getComputeControlFlowBitcodeFileName(a2[4]);
  v9 = (const UInt8 *)ComputeControlFlowBitcodeFileName;
  if (ComputeControlFlowBitcodeFileName)
    v10 = strlen(ComputeControlFlowBitcodeFileName);
  else
    v10 = 0;
  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode(a3, v9, v10, 1);
  v12 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v12 + 4464), (AGCLLVMCtx *)a2, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10(v12, (uint64_t *)&off_1E7E92968, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverComputeControlFlowPredicateShaderGen3::create(AGCLLVMCtx &,llvm::LLVMContext &,unsigned int,BOOL,BOOL)::computeCS);
  *(_QWORD *)v12 = &off_1E7E92500;
  *(_QWORD *)(v12 + 4464) = &unk_1E7E92860;
  *(_QWORD *)(v12 + 4496) = &unk_1E7E92950;
  *(_QWORD *)(v12 + 4440) = 0x2000000000;
  *(_OWORD *)(v12 + 4424) = 0u;
  *(_DWORD *)(v12 + 4456) = v6 & 7;
  *(_BYTE *)(v12 + 4460) = (v6 & 8) != 0;
  *(_BYTE *)(v12 + 4461) = (v6 & 0x10) != 0;
  LODWORD(Bitcode) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v12 + 4864) + 824) + 600))(*(_QWORD *)(*(_QWORD *)(v12 + 4864) + 824));
  v13 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4424), "left", 4uLL);
  *(_QWORD *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v13 + 20) = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 24) + v12 + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 608))(v14);
  v15 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4424), "right", 5uLL);
  *(_QWORD *)(v15 + 8) = 1;
  *(_DWORD *)(v15 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v15 + 20) = 0;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 24) + v12 + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 616))(v16);
  v17 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4424), "passLinkAddress", 0xFuLL);
  *(_QWORD *)(v17 + 8) = 2;
  *(_DWORD *)(v17 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v17 + 20) = 0;
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 24) + v12 + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 624))(v18);
  v19 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4424), "failLinkAddress", 0xFuLL);
  *(_QWORD *)(v19 + 8) = 3;
  *(_DWORD *)(v19 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v19 + 20) = 0;
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 24) + v12 + 400) + 824);
  LODWORD(Bitcode) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 632))(v20);
  v21 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v12 + 4424), "linkToken", 9uLL);
  *(_QWORD *)(v21 + 8) = 4;
  *(_DWORD *)(v21 + 16) = (_DWORD)Bitcode;
  *(_QWORD *)(v21 + 20) = 0;
  return v12 + *(_QWORD *)(*(_QWORD *)v12 - 24);
}

uint64_t AGCLLVMGen3TargetConfig::getDMARegisterLayoutMask(AGCLLVMGen3TargetConfig *this)
{
  return 6;
}

double AGCLLVMGen3TargetConfig::initializeAirBuiltinsMap(AGCLLVMGen3TargetConfig *this, AGCLLVMAirBuiltinsMap *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  AGCLLVMAirBuiltinsMap::insertBuiltinReplacementsBase(a2, this);
  v3 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_broadcast", 0xEuLL);
  *(_DWORD *)(v3 + 8) = 1;
  *(_OWORD *)(v3 + 16) = xmmword_1C3E37FB0;
  *(_DWORD *)(v3 + 32) = 5;
  *(_WORD *)(v3 + 36) = 0;
  v4 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle", 0xCuLL);
  *(_DWORD *)(v4 + 8) = 1;
  *(_OWORD *)(v4 + 16) = xmmword_1C3E37FC0;
  *(_DWORD *)(v4 + 32) = 5;
  *(_WORD *)(v4 + 36) = 0;
  v5 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_up", 0xFuLL);
  *(_DWORD *)(v5 + 8) = 1;
  *(_OWORD *)(v5 + 16) = xmmword_1C3E37FD0;
  *(_DWORD *)(v5 + 32) = 5;
  *(_WORD *)(v5 + 36) = 0;
  v6 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_down", 0x11uLL);
  *(_DWORD *)(v6 + 8) = 1;
  *(_OWORD *)(v6 + 16) = xmmword_1C3E37FE0;
  *(_DWORD *)(v6 + 32) = 5;
  *(_WORD *)(v6 + 36) = 0;
  v7 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_xor", 0x10uLL);
  *(_DWORD *)(v7 + 8) = 1;
  *(_OWORD *)(v7 + 16) = xmmword_1C3E37FF0;
  *(_DWORD *)(v7 + 32) = 5;
  *(_WORD *)(v7 + 36) = 0;
  v8 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_rotate_up", 0x16uLL);
  *(_DWORD *)(v8 + 8) = 1;
  *(_OWORD *)(v8 + 16) = xmmword_1C3E38000;
  *(_DWORD *)(v8 + 32) = 5;
  *(_WORD *)(v8 + 36) = 0;
  v9 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_rotate_down", 0x18uLL);
  *(_DWORD *)(v9 + 8) = 1;
  *(_OWORD *)(v9 + 16) = xmmword_1C3E38010;
  *(_DWORD *)(v9 + 32) = 5;
  *(_WORD *)(v9 + 36) = 0;
  v10 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "wg", 2uLL);
  *(_DWORD *)(v10 + 8) = 1;
  *(_OWORD *)(v10 + 16) = xmmword_1C3E37C00;
  *(_DWORD *)(v10 + 32) = 7;
  *(_WORD *)(v10 + 36) = 0;
  v11 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_quad_element", 0x10uLL);
  *(_DWORD *)(v11 + 8) = 1;
  *(_OWORD *)(v11 + 16) = xmmword_1C3E38020;
  *(_DWORD *)(v11 + 32) = 7;
  *(_WORD *)(v11 + 36) = 0;
  v12 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_threads_per_simdgroup", 0x19uLL);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 16) = AGCLLVMAirBuiltins::buildThreadExecutionWidth;
  *(_QWORD *)(v12 + 24) = 0;
  *(_DWORD *)(v12 + 32) = 7;
  *(_WORD *)(v12 + 36) = 0;
  v13 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "load", 4uLL);
  *(_DWORD *)(v13 + 8) = 1;
  *(_OWORD *)(v13 + 16) = xmmword_1C3E38030;
  *(_DWORD *)(v13 + 32) = 8;
  *(_WORD *)(v13 + 36) = 0;
  v14 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "store", 5uLL);
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)&result = 136;
  *(_OWORD *)(v14 + 16) = xmmword_1C3E38040;
  *(_DWORD *)(v14 + 32) = 7;
  *(_WORD *)(v14 + 36) = 0;
  return result;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildCoverageMask(uint64_t a1, __int128 *a2, llvm::Value *a3, unsigned int a4)
{
  llvm::Value *v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t FMul;
  __int128 v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  __int16 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  _QWORD v29[4];
  __int16 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v26 = *a2;
  v27 = *((_QWORD *)a2 + 2);
  if (v27)
    llvm::MetadataTracking::track();
  v28 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v26, a1 + 8);
  if (v27)
    llvm::MetadataTracking::untrack();
  v8 = AGCLLVMBuilder::f32Extend((AGCLLVMBuilder *)a1, a3, 1);
  if (a4 > 1)
  {
    v21 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v23 = *(_DWORD *)(a1 + 104);
    v10 = (*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, _QWORD))(*(_QWORD *)a1 + 40))(a1, &v21, v8, 0);
    if (v22)
      llvm::MetadataTracking::untrack();
    v11 = *(_QWORD *)(a1 + 1288);
    if (v11)
      v12 = strlen(*(const char **)(a1 + 1288));
    else
      v12 = 0;
    v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, v11, v12, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 168));
    v14 = llvm::ConstantFP::get();
    v25 = 257;
    FMul = llvm::IRBuilderBase::CreateFMul(a1 + 8, v10, v14, (uint64_t)v24);
    v30 = 257;
    v15 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)v13 + 16), v13, (uint64_t)&FMul, 1, (uint64_t)v29);
    v16 = *(_QWORD *)(a1 + 2200);
    if (v16)
      v17 = strlen(*(const char **)(a1 + 2200));
    else
      v17 = 0;
    v18 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v16, v17, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192));
    v29[0] = llvm::ConstantInt::get();
    v19 = *(_QWORD *)(a1 + 192);
    v25 = 257;
    v29[1] = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v15, v19, (uint64_t)v24);
    v25 = 257;
    return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v18 + 24), v18, (uint64_t)v29, 2, (uint64_t)v24);
  }
  else
  {
    llvm::ConstantFP::get();
    llvm::IRBuilderBase::CreateFCmpHelper();
    llvm::ConstantInt::get();
    llvm::ConstantInt::get();
    v25 = 257;
    return (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  }
}

uint64_t AGCLLVMGen3TargetLowerer::buildAtomicFnAddrSpaceCast(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[32];
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v17 = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  if (v18)
    llvm::MetadataTracking::track();
  v19 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v17);
  if (v18)
    llvm::MetadataTracking::untrack();
  v8 = (_QWORD *)(a4 + 24);
  if (*(_DWORD *)(a4 + 32) >= 0x41u)
    v8 = (_QWORD *)*v8;
  v9 = *(_DWORD *)v8;
  v10 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if ((v10 & 0xFE) == 0x12)
    v10 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
  v11 = v10 >> 8;
  if (v11 == 3)
  {
    if (!v9)
    {
      v12 = a1 + 8;
      goto LABEL_17;
    }
  }
  else if (v11 == 1)
  {
    if (v9 == 1)
    {
      v12 = a1 + 8;
      goto LABEL_17;
    }
    if (!v9)
    {
      v12 = a1 + 8;
LABEL_17:
      v13 = llvm::PointerType::get();
      v16 = 257;
      return llvm::IRBuilderBase::CreateCast(v12, 50, a3, v13, (uint64_t)v15);
    }
  }
  return a3;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildPackNorm(uint64_t a1, uint64_t a2, llvm::Type **a3, unsigned int a4, int a5, int a6)
{
  llvm::Type *IntNTy;
  const char *v13;
  unint64_t v14;
  char v15;
  const char *v16;
  void *v17;
  size_t v18;
  void **v19;
  uint64_t v20;
  llvm::Value *v21;
  __int128 v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void *__p[2];
  unsigned __int8 v33;
  __int128 v34;
  uint64_t v35;
  int v36;

  v34 = *(_OWORD *)a2;
  v35 = *(_QWORD *)(a2 + 16);
  if (v35)
    llvm::MetadataTracking::track();
  v36 = *(_DWORD *)(a2 + 24);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v34, a1 + 8);
  if (v35)
    llvm::MetadataTracking::untrack();
  IntNTy = (llvm::Type *)llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 72), (llvm::LLVMContext *)(a6 * a4));
  if ((*((_DWORD *)*a3 + 2) & 0xFE) == 0x12)
  {
    v13 = "rg";
    if (*((_DWORD *)*a3 + 8) == 4)
      v13 = "rgba";
  }
  else
  {
    v13 = "r";
  }
  v14 = a4;
  if (*v13)
  {
    *(_QWORD *)&v26 = v13;
    *(_QWORD *)&v27 = a4;
    LOWORD(v28) = 2051;
    v15 = 2;
    v14 = (unint64_t)&v26;
  }
  else
  {
    *(_QWORD *)&v26 = a4;
    LOWORD(v28) = 264;
    v15 = 8;
  }
  v16 = "unorm";
  if (a5)
    v16 = "snorm";
  if (*v16)
  {
    *(_QWORD *)&v29 = v14;
    *(_QWORD *)&v30 = v16;
    LOBYTE(v31) = v15;
    BYTE1(v31) = 3;
  }
  else
  {
    v29 = v26;
    v30 = v27;
    v31 = v28;
  }
  llvm::Twine::str((llvm::Twine *)&v29);
  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  v17 = *(void **)(a1 + 2384);
  if (v17)
    v18 = strlen(*(const char **)(a1 + 2384));
  else
    v18 = 0;
  if ((v33 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v33 & 0x80u) == 0)
    v20 = v33;
  else
    v20 = (uint64_t)__p[1];
  v21 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic((uint64_t *)a1, &v23, v17, v18, (uint64_t)v19, v20, IntNTy, a3);
  if (v24)
    llvm::MetadataTracking::untrack();
  if ((char)v33 < 0)
    operator delete(__p[0]);
  return v21;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildUnpackNorm(uint64_t a1, __int128 *a2, llvm::Type **a3, unsigned int a4, int a5, int a6)
{
  uint64_t v12;
  llvm::Type ***v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  unint64_t v17;
  char v18;
  const char *v19;
  void *v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  llvm::Value *v24;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  void *__p[2];
  unsigned __int8 v36;
  __int128 v37;
  uint64_t v38;
  int v39;

  v37 = *a2;
  v38 = *((_QWORD *)a2 + 2);
  if (v38)
    llvm::MetadataTracking::track();
  v39 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v37, a1 + 8);
  if (v38)
    llvm::MetadataTracking::untrack();
  v12 = 152;
  if (a6 == 32)
    v12 = 168;
  v13 = *(llvm::Type ****)(a1 + v12);
  *(_QWORD *)&v32 = llvm::Type::getPrimitiveSizeInBits(*a3);
  *((_QWORD *)&v32 + 1) = v14;
  v15 = llvm::TypeSize::operator unsigned long long() / a4;
  if (v15 < 2)
  {
    v16 = "r";
  }
  else
  {
    if (v15 == 4)
      v16 = "rgba";
    else
      v16 = "rg";
    v13 = (llvm::Type ***)llvm::FixedVectorType::get();
  }
  v17 = a4;
  if (*v16)
  {
    *(_QWORD *)&v29 = v16;
    *(_QWORD *)&v30 = a4;
    LOWORD(v31) = 2051;
    v18 = 2;
    v17 = (unint64_t)&v29;
  }
  else
  {
    *(_QWORD *)&v29 = a4;
    LOWORD(v31) = 264;
    v18 = 8;
  }
  v19 = "unorm";
  if (a5)
    v19 = "snorm";
  if (*v19)
  {
    *(_QWORD *)&v32 = v17;
    *(_QWORD *)&v33 = v19;
    LOBYTE(v34) = v18;
    BYTE1(v34) = 3;
  }
  else
  {
    v32 = v29;
    v33 = v30;
    v34 = v31;
  }
  llvm::Twine::str((llvm::Twine *)&v32);
  v26 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v28 = *(_DWORD *)(a1 + 104);
  v20 = *(void **)(a1 + 2376);
  if (v20)
    v21 = strlen(*(const char **)(a1 + 2376));
  else
    v21 = 0;
  if ((v36 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v36 & 0x80u) == 0)
    v23 = v36;
  else
    v23 = (uint64_t)__p[1];
  v24 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic((uint64_t *)a1, &v26, v20, v21, (uint64_t)v22, v23, v13, (uint64_t *)a3);
  if (v27)
    llvm::MetadataTracking::untrack();
  if ((char)v36 < 0)
    operator delete(__p[0]);
  return v24;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildGCmp(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4, llvm::Type *a5)
{
  int v9;
  const char *v10;
  BOOL v11;
  const char *v12;
  void *v13;
  size_t v14;
  size_t v15;
  llvm::Value *v16;
  __int128 v18;
  uint64_t v19;
  int v20;

  if ((*((_DWORD *)*a3 + 2) & 0xFE) != 0x12 || (v9 = *((_DWORD *)*a3 + 8), v9 == 1))
  {
    v11 = 0;
    v12 = "sr8unorm";
  }
  else
  {
    v10 = "srg8unorm";
    if (v9 != 2)
      v10 = 0;
    v11 = v9 != 4 && v9 != 2;
    if (v9 == 4)
      v12 = "srgba8unorm";
    else
      v12 = v10;
  }
  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  v13 = *(void **)(a1 + 2384);
  if (v13)
  {
    v14 = strlen(*(const char **)(a1 + 2384));
    if (v11)
    {
LABEL_16:
      v15 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v14 = 0;
    if (v11)
      goto LABEL_16;
  }
  v15 = strlen(v12);
LABEL_19:
  v16 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic((uint64_t *)a1, &v18, v13, v14, (uint64_t)v12, v15, a5, a3);
  if (v19)
    llvm::MetadataTracking::untrack();
  return v16;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildGExp(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, llvm::Type ***a5)
{
  int v9;
  const char *v10;
  BOOL v11;
  const char *v12;
  void *v13;
  size_t v14;
  size_t v15;
  llvm::Value *v16;
  __int128 v18;
  uint64_t v19;
  int v20;

  if ((*(_DWORD *)(*a3 + 8) & 0xFE) != 0x12 || (v9 = *(_DWORD *)(*a3 + 32), v9 == 1))
  {
    v11 = 0;
    v12 = "sr8unorm";
  }
  else
  {
    v10 = "srg8unorm";
    if (v9 != 2)
      v10 = 0;
    v11 = v9 != 4 && v9 != 2;
    if (v9 == 4)
      v12 = "srgba8unorm";
    else
      v12 = v10;
  }
  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  v13 = *(void **)(a1 + 2376);
  if (v13)
  {
    v14 = strlen(*(const char **)(a1 + 2376));
    if (v11)
    {
LABEL_16:
      v15 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v14 = 0;
    if (v11)
      goto LABEL_16;
  }
  v15 = strlen(v12);
LABEL_19:
  v16 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic((uint64_t *)a1, &v18, v13, v14, (uint64_t)v12, v15, a5, a3);
  if (v19)
    llvm::MetadataTracking::untrack();
  return v16;
}

void AGCLLVMGen3TargetLowerer::setupGLFragmentShaderPRIDs(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5[2];
  _QWORD v6[13];

  v6[12] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 808))
    v4 = &AGCLLVMGen3TargetLowerer::gl_raster_order_groups_macOS;
  else
    v4 = &AGCLLVMGen3TargetLowerer::gl_raster_order_groups_iOS;
  AGCLLVMGen3TargetLowerer::setupFixedPRIDS(a1, 1);
  v5[0] = v6;
  v5[1] = (void *)0x800000000;
  AGCLLVMGen3TargetLowerer::addLIBSpansFromDrawBufferState(a1, a2, (uint64_t)v4, (uint64_t)v5);
  AGCLLVMGen3TargetLowerer::setupLIBRasterOrderGroupFromSpans(a1, (uint64_t)v5);
  if (v5[0] != v6)
    free(v5[0]);
}

uint64_t AGCLLVMGen3TargetLowerer::setupResourcePRIDs(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, unsigned int a3, int a4)
{
  llvm::Module::getOrInsertNamedMetadata();
  if (a4)
  {
    llvm::ValueAsMetadata::get();
    llvm::ConstantInt::get();
    llvm::ValueAsMetadata::get();
    llvm::MDString::get();
    if (a3 < 9)
      goto LABEL_5;
LABEL_6:
    abort();
  }
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  if (a3 >= 9)
    goto LABEL_6;
LABEL_5:
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDString::get();
  llvm::ConstantInt::get();
  llvm::ValueAsMetadata::get();
  llvm::MDTuple::getImpl();
  return llvm::NamedMDNode::addOperand();
}

void AGCLLVMGen3TargetLowerer::setupIndirectResourcePRIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t Impl;
  void *v10[2];
  _QWORD v11[10];

  v11[8] = *MEMORY[0x1E0C80C00];
  v10[0] = v11;
  v10[1] = (void *)0x800000000;
  v4 = llvm::ValueAsMetadata::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v10, v4);
  v5 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v5)
  {
    v6 = *(unsigned int **)a3;
    v7 = *(_QWORD *)a3 + 16 * v5;
    do
    {
      v8 = *v6;
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      if (v8 >= 9)
        abort();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v10, Impl);
      v6 += 4;
    }
    while (v6 != (unsigned int *)v7);
  }
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (v10[0] != v11)
    free(v10[0]);
}

void AGCLLVMGen3TargetLowerer::setupConstantTextureIndexPRIDs(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t Impl;
  void *v9[2];
  _QWORD v10[9];

  v10[8] = *MEMORY[0x1E0C80C00];
  v9[0] = v10;
  v9[1] = (void *)0x800000000;
  v3 = llvm::MDString::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v9, v3);
  v4 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v4)
  {
    v5 = *a2;
    v6 = *a2 + 8 * v4;
    do
    {
      v7 = *(_DWORD *)(v5 + 4);
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      if (v7 >= 9)
        abort();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      llvm::MDString::get();
      llvm::ConstantInt::get();
      llvm::ValueAsMetadata::get();
      Impl = llvm::MDTuple::getImpl();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v9, Impl);
      v5 += 8;
    }
    while (v5 != v6);
  }
  llvm::Module::getOrInsertNamedMetadata();
  llvm::MDTuple::getImpl();
  llvm::NamedMDNode::addOperand();
  if (v9[0] != v10)
    free(v9[0]);
}

void AGCLLVMGen3TargetLowerer::buildEmitpix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, AGCLLVMGen3TargetLowerer *a6, int a7, unsigned int a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t Cast;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  _BYTE v26[32];
  __int16 v27;
  std::string v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[128];
  void *v35[2];
  _QWORD v36[17];

  v36[16] = *MEMORY[0x1E0C80C00];
  v29 = *(_OWORD *)a2;
  v30 = *(_QWORD *)(a2 + 16);
  if (v30)
    llvm::MetadataTracking::track();
  v31 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v29);
  if (v30)
    llvm::MetadataTracking::untrack();
  memset(&v28, 0, sizeof(v28));
  v35[0] = v36;
  v35[1] = (void *)0x1000000000;
  v32 = v34;
  v33 = 0x1000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v35, *(_QWORD *)(a1 + 192));
  AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a6, a7);
  v15 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v32, v15);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v35, *(_QWORD *)(a1 + 192));
  v16 = *(_QWORD *)(a1 + 192);
  v27 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, a9, v16, (uint64_t)v26);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v32, Cast);
  v18 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v35, v18);
  v19 = llvm::PointerType::get();
  v27 = 257;
  v20 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v19, (uint64_t)v26);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v32, v20);
  MEMORY[0x1CAA2D494](&v28, *(_QWORD *)(a1 + 1920));
  if (a8 <= 7)
    std::string::append(&v28, off_1E7ECC170[a8]);
  v21 = llvm::PointerType::get();
  v22 = llvm::ConstantInt::get();
  v27 = 257;
  v23 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v22, v21, (uint64_t)v26);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v35, v21);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v32, v23);
  llvm::FunctionType::get();
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v24 = &v28;
LABEL_10:
    strlen((const char *)v24);
    goto LABEL_11;
  }
  v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if (v28.__r_.__value_.__r.__words[0])
    goto LABEL_10;
LABEL_11:
  llvm::Module::getOrInsertFunction();
  v27 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v25 + 24), v25, (uint64_t)v32, v33, (uint64_t)v26);
  if (v32 != v34)
    free(v32);
  if (v35[0] != v36)
    free(v35[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMGen3TargetLowerer::buildCopyOffChipMRTPixelData@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::GlobalVariable *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Type *v19;
  uint64_t AlignedLoad;
  unsigned int v21;
  int v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm::Value *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t *v29;
  unsigned int v31;
  unint64_t v32;
  __int128 v34;
  uint64_t v35;
  int v36;
  _BYTE v37[16];
  uint64_t v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  _QWORD v44[4];

  v44[2] = *MEMORY[0x1E0C80C00];
  v41 = *(_OWORD *)a2;
  v42 = *(_QWORD *)(a2 + 16);
  if (v42)
    llvm::MetadataTracking::track();
  v43 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v41);
  if (v42)
    llvm::MetadataTracking::untrack();
  v10 = *(unsigned __int8 *)(a4 + 4 * a3);
  v31 = *(unsigned __int16 *)(a4 + 72);
  v11 = *(_QWORD *)(a1 + 936);
  if (v11)
    v12 = strlen(*(const char **)(a1 + 936));
  else
    v12 = 0;
  v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v11, v12, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192));
  v44[0] = llvm::ConstantInt::get();
  v44[1] = llvm::ConstantInt::get();
  if (a5)
  {
    v40 = 257;
    llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v13 + 24), v13, (uint64_t)v44, 2, (uint64_t)v39);
  }
  v27 = v13;
  if (a3 <= 7)
  {
    v14 = a3;
    v29 = (uint64_t *)(a1 + 8);
    do
    {
      if (((v31 >> v14) & 1) != 0 || ((v31 >> v14) & 0x100) != 0)
      {
        if (*(unsigned __int8 *)(a4 + 4 * v14) != (_DWORD)v10)
          break;
        v15 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
        v39[0] = "agc.emit_info";
        v32 = v6 & 0xFFFFFFFF00000000 | v14;
        v39[2] = v32;
        v40 = 2051;
        llvm::GlobalVariable::GlobalVariable();
        llvm::GlobalObject::setSection();
        v16 = *(_QWORD *)(a1 + 344);
        v17 = AGCLLVMBuilder::buildGlobalMetadata((AGCLLVMBuilder *)a1, v15);
        llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v16, v17);
        v40 = 257;
        v19 = AGCLLVMBuilder::tryDeducePointeeType((llvm::Type **)v15, v18);
        AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v29, v19, (uint64_t)v15, 0, (uint64_t)v39);
        v34 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)v29);
        v36 = *(_DWORD *)(a1 + 104);
        v21 = *(_DWORD *)(a4 + 4 * v14);
        v22 = *(_DWORD *)(a4 + 76);
        v23 = v10;
        v24 = (llvm::Value *)llvm::ConstantInt::get();
        v25 = (llvm::Value *)llvm::ConstantInt::get();
        AGCLLVMGen3TargetLowerer::buildCopyOffChipMRTPixelDataStateless((uint64_t)v37, (_QWORD *)a1, (uint64_t)&v34, (AGCLLVMGen3TargetLowerer *)BYTE1(v21), (v21 >> 26) & 7, v22 & 0xF, HIBYTE(v21) & 1, a5, v24, AlignedLoad, v25);
        if (v38)
          llvm::MetadataTracking::untrack();
        if (v35)
          llvm::MetadataTracking::untrack();
        v10 = v23;
        v6 = v32;
      }
      ++v14;
    }
    while ((_DWORD)v14 != 8);
  }
  if (a5)
  {
    v40 = 257;
    llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v27 + 24), v27, (uint64_t)v44, 2, (uint64_t)v39);
  }
  *(_OWORD *)a6 = *(_OWORD *)(a1 + 56);
  result = llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  *(_DWORD *)(a6 + 24) = *(_DWORD *)(a1 + 104);
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildLocalID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t inserted;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t Cast;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int128 v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.local.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v19, aXyz[a4]);
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v9 = a1 + 8;
  v15 = 257;
  v10 = llvm::IRBuilderBase::CreateCall(v9, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  v13[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21)
    free(v19);
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildManualResolve(AGCLLVMBuilder *a1, uint64_t a2, AGCLLVMGen3TargetLowerer *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  uint64_t Cast;
  int v17;
  llvm::Constant *v18;
  llvm::Type *v19;
  uint64_t NullValue;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *FDiv;
  llvm::Value *v28;
  uint64_t v29;
  int v31;
  __int16 v32;
  _WORD v34[4];
  uint64_t v35;
  _BYTE v36[32];
  __int16 v37;
  __int128 v38;
  uint64_t v39;
  int v40;

  v38 = *(_OWORD *)a2;
  v39 = *(_QWORD *)(a2 + 16);
  if (v39)
    llvm::MetadataTracking::track();
  v40 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v38);
  if (v39)
    llvm::MetadataTracking::untrack();
  v15 = *((_QWORD *)a1 + 24);
  v37 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 38, a8, v15, (uint64_t)v36);
  if (a4 == 3)
    v17 = 4;
  else
    v17 = a4;
  v18 = (llvm::Constant *)*((_QWORD *)a1 + 21);
  if (v17 != 1)
    v18 = (llvm::Constant *)llvm::FixedVectorType::get();
  v35 = (uint64_t)v18;
  v34[0] = AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a3, a5);
  v34[1] = (_WORD)a3;
  v34[2] = ~(-1 << a4);
  v34[3] = a4;
  NullValue = llvm::Constant::getNullValue(v18, v19);
  if ((_DWORD)a6)
  {
    v21 = 0;
    do
    {
      v22 = v35;
      v23 = llvm::ConstantInt::get();
      LOBYTE(v31) = 1;
      v24 = (*(uint64_t (**)(AGCLLVMBuilder *, _WORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, int))(*(_QWORD *)a1 + 1600))(a1, v34, a6, a7, v22, Cast, v23, 0, v31);
      v37 = 257;
      NullValue = llvm::IRBuilderBase::CreateFAdd((uint64_t)a1 + 8, NullValue, v24, (uint64_t)v36);
      ++v21;
    }
    while ((_DWORD)a6 != v21);
  }
  v25 = (llvm::Value *)llvm::ConstantFP::get();
  v26 = AGCLLVMBuilder::splat(a1, v17, v25);
  v37 = 257;
  FDiv = (llvm::Value *)llvm::IRBuilderBase::CreateFDiv((uint64_t)a1 + 8, NullValue, (uint64_t)v26, (uint64_t)v36);
  v35 = llvm::FixedVectorType::get();
  v28 = AGCLLVMBuilder::extendVector(a1, FDiv, 4);
  v29 = llvm::ConstantInt::get();
  HIBYTE(v32) = 1;
  LOBYTE(v32) = *((_BYTE *)a1 + 1770);
  return (*(uint64_t (**)(AGCLLVMBuilder *, _WORD *, uint64_t, uint64_t, llvm::Value *, uint64_t, uint64_t, uint64_t, _QWORD, __int16))(*(_QWORD *)a1 + 1608))(a1, v34, a6, a7, v28, Cast, v29, 1, 0, v32);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildCoherentLoad(uint64_t a1, __int128 *a2, llvm::Type **a3, uint64_t a4, void *a5, size_t a6, uint64_t a7)
{
  uint64_t v13;
  llvm::Type *v14;
  llvm::Value *PointerCast;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void **p_p;
  uint64_t v24;
  llvm::Value *v25;
  void *__p;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  void *v34;
  __int128 v35;
  _WORD v36[16];
  void *v37;
  uint64_t v38;
  _BYTE v39[24];
  void *v40[2];
  _QWORD v41[5];

  v41[3] = *MEMORY[0x1E0C80C00];
  v31 = *a2;
  v32 = *((_QWORD *)a2 + 2);
  if (v32)
    llvm::MetadataTracking::track();
  v33 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v31, a1 + 8);
  if (v32)
    llvm::MetadataTracking::untrack();
  v40[0] = v41;
  v40[1] = (void *)0x300000000;
  v13 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, v13);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *(_QWORD *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *(_QWORD *)(a1 + 176));
  v37 = v39;
  v38 = 0x300000000;
  v14 = (llvm::Type *)llvm::PointerType::get();
  v36[4] = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v14, (const llvm::Twine *)&v34);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, (uint64_t)PointerCast);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1552))(a1, a7, 1);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, v16);
  v17 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, v17);
  v34 = v36;
  v35 = xmmword_1C3E37BA0;
  v18 = *(_BYTE **)(a1 + 1344);
  if (v18)
  {
    v19 = strlen(*(const char **)(a1 + 1344));
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v34, v18, &v18[v19]);
  }
  else
  {
    *(_QWORD *)&v35 = 0;
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v34, ".", "");
  if (a5)
  {
    std::string::basic_string[abi:nn180100](&__p, a5, a6);
    LODWORD(v20) = HIBYTE(v29);
    v22 = (void **)__p;
    v21 = v28;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    LODWORD(v20) = 0;
    __p = 0;
    v28 = 0;
    v29 = 0;
  }
  if ((v20 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = v22;
  v20 = v20;
  if ((v20 & 0x80u) != 0)
    v20 = v21;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v34, p_p, (_BYTE *)p_p + v20);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v30 = 257;
  v25 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v24 + 24), v24, (uint64_t)v37, v38, (uint64_t)&__p);
  if (v34 != v36)
    free(v34);
  if (v37 != v39)
    free(v37);
  if (v40[0] != v41)
    free(v40[0]);
  return v25;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildCoherentStore(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t *a4, void *a5, size_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t Cast;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void **p_p;
  uint64_t v24;
  llvm::Value *v25;
  void *__p;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  void *v35;
  __int128 v36;
  _WORD v37[16];
  void *v38;
  uint64_t v39;
  _BYTE v40[24];
  void *v41[2];
  _QWORD v42[6];

  v42[4] = *MEMORY[0x1E0C80C00];
  v32 = *a2;
  v33 = *((_QWORD *)a2 + 2);
  if (v33)
    llvm::MetadataTracking::track();
  v34 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v32, a1 + 8);
  if (v33)
    llvm::MetadataTracking::untrack();
  v41[0] = v42;
  v41[1] = (void *)0x400000000;
  v13 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v41, v13);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v41, *a4);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v41, *(_QWORD *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v41, *(_QWORD *)(a1 + 176));
  v38 = v40;
  v39 = 0x300000000;
  v14 = llvm::PointerType::get();
  v37[4] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v14, (uint64_t)&v35);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v38, Cast);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v38, (uint64_t)a4);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1552))(a1, a7, 0);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v38, v16);
  v17 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v38, v17);
  v35 = v37;
  v36 = xmmword_1C3E37BA0;
  v18 = *(_BYTE **)(a1 + 1352);
  if (v18)
  {
    v19 = strlen(*(const char **)(a1 + 1352));
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v35, v18, &v18[v19]);
  }
  else
  {
    *(_QWORD *)&v36 = 0;
  }
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v35, ".", "");
  if (a5)
  {
    std::string::basic_string[abi:nn180100](&__p, a5, a6);
    LODWORD(v20) = HIBYTE(v30);
    v22 = (void **)__p;
    v21 = v29;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    LODWORD(v20) = 0;
    __p = 0;
    v29 = 0;
    v30 = 0;
  }
  if ((v20 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = v22;
  v20 = v20;
  if ((v20 & 0x80u) != 0)
    v20 = v21;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v35, p_p, (_BYTE *)p_p + v20);
  if (SHIBYTE(v30) < 0)
    operator delete(__p);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v31 = 257;
  v25 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v24 + 24), v24, (uint64_t)v38, v39, (uint64_t)&__p);
  if (v35 != v37)
    free(v35);
  if (v38 != v40)
    free(v38);
  if (v41[0] != v42)
    free(v41[0]);
  return v25;
}

uint64_t AGCLLVMGen3TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL AGCLLVMGen3TargetLowerer::isFormatSupported(uint64_t a1, int a2)
{
  return (a2 - 2) < 0x15;
}

BOOL AGCLLVMGen3TargetLowerer::isGammaSpaceConversionNecessary(uint64_t a1, int a2)
{
  return a2 == 3;
}

uint64_t AGCLLVMGen3TargetLowerer::buildGammaExpansion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v7;
  uint64_t v8;
  int v9;

  v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
    llvm::MetadataTracking::track();
  v9 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v7);
  if (v8)
    llvm::MetadataTracking::untrack();
  return a3;
}

uint64_t AGCLLVMGen3TargetLowerer::buildGammaSpaceConversion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v7;
  uint64_t v8;
  int v9;

  v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
    llvm::MetadataTracking::track();
  v9 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v7);
  if (v8)
    llvm::MetadataTracking::untrack();
  return a3;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildDepthf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t inserted;
  uint64_t v10;
  llvm::Value *v11;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  v6 = *(_QWORD *)(a1 + 1504);
  if (v6)
    v7 = strlen(*(const char **)(a1 + 1504));
  else
    v7 = 0;
  v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v6, v7, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 192));
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v14 = 257;
  v10 = a1 + 8;
  v11 = llvm::IRBuilderBase::CreateCall(v10, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v13);
  v18[0] = a3;
  v18[1] = v11;
  v14 = 257;
  return llvm::IRBuilderBase::CreateCall(v10, *(_QWORD *)(v8 + 24), v8, (uint64_t)v18, 2, (uint64_t)v13);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildMovmsk(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  llvm::Type *v6;
  uint64_t v7;
  size_t v8;
  llvm::IRBuilderBase *v9;
  uint64_t v10;
  uint64_t inserted;
  llvm::Value *v12;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Type *)llvm::IntegerType::get();
  v7 = *(_QWORD *)(a1 + 1512);
  if (v7)
    v8 = strlen(*(const char **)(a1 + 1512));
  else
    v8 = 0;
  v9 = (llvm::IRBuilderBase *)(a1 + 8);
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v7, v8, *(_QWORD *)(a1 + 144), (uint64_t)v6, *(_QWORD *)(a1 + 192));
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v15 = 257;
  v12 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  v15 = 257;
  v19[0] = llvm::IRBuilderBase::CreateIntCast(v9, a3, v6, 1, (const llvm::Twine *)v14);
  v19[1] = v12;
  v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)v9, *(_QWORD *)(v10 + 24), v10, (uint64_t)v19, 2, (uint64_t)v14);
}

void AGCLLVMGen3TargetLowerer::createBuiltins(AGCLLVMGen3TargetLowerer *this, AGCLLVMUserObject *a2, llvm::LLVMContext **a3)
{
  AGCLLVMAirBuiltins *v6;
  _QWORD *v7;

  v6 = (AGCLLVMAirBuiltins *)operator new();
  AGCLLVMAirBuiltins::AGCLLVMAirBuiltins(v6, a2, a3, this);
  *v7 = &off_1E7E8B488;
}

void AGCLLVMGen3TargetLowerer::exceededResourceLimits(AGCLLVMGen3TargetLowerer *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, unsigned int a5@<W4>, unsigned int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  char v25;
  char *v26;
  unsigned int v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  unsigned int v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  const std::string::value_type *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  unsigned int v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *v62;
  std::string::size_type v63;
  const std::string::value_type *v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  std::string::size_type v69;
  unsigned int v70;
  std::string *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  std::string::size_type v76;
  const std::string::value_type *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  unsigned int v83;
  std::string *v84;
  std::string::size_type v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  std::string::size_type v89;
  const std::string::value_type *v90;
  std::string::size_type v91;
  std::string *v92;
  unsigned int __val;
  unsigned int v94;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  __int128 v101;
  uint64_t v102;
  std::string v103;

  v15 = a7 + a4;
  std::string::basic_string[abi:nn180100]<0>(&v103, (char *)&unk_1C3E4D9BB);
  v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 103) + 24))(*((_QWORD *)this + 103), a8);
  v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 16))(*((_QWORD *)this + 103));
  __val = a5;
  v18 = a5 + a2;
  v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 40))(*((_QWORD *)this + 103));
  v94 = a6;
  v20 = a6 + a3;
  v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 32))(*((_QWORD *)this + 103));
  if (v15 > 0x10
    || (v16 >= a2 ? (v22 = v17 >= a3) : (v22 = 0),
        v22 ? (v23 = v18 > v19) : (v23 = 1),
        !v23 ? (v24 = v20 > v21) : (v24 = 1),
        v24))
  {
    v22 = v16 >= a2;
    v27 = v21;
    if (!v22)
    {
      std::to_string(&v97, a2);
      v28 = std::string::insert(&v97, 0, " buffers (");
      v29 = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v98, "/");
      v31 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 103) + 24))(*((_QWORD *)this + 103), a8);
      std::to_string(&v96, v32);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v96;
      else
        v33 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        size = v96.__r_.__value_.__l.__size_;
      v35 = std::string::append(&v99, (const std::string::value_type *)v33, size);
      v36 = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = std::string::append(&v100, ")");
      v38 = v37->__r_.__value_.__r.__words[2];
      v101 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v102 = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0)
        v39 = (const std::string::value_type *)&v101;
      else
        v39 = (const std::string::value_type *)v101;
      if (v102 >= 0)
        v40 = HIBYTE(v102);
      else
        v40 = *((_QWORD *)&v101 + 1);
      std::string::append(&v103, v39, v40);
      if (SHIBYTE(v102) < 0)
        operator delete((void *)v101);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      v21 = v27;
    }
    if (v17 < a3)
    {
      std::to_string(&v97, a3);
      v41 = std::string::insert(&v97, 0, " textures (");
      v42 = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = std::string::append(&v98, "/");
      v44 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 16))(*((_QWORD *)this + 103));
      std::to_string(&v96, v45);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = &v96;
      else
        v46 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v47 = v96.__r_.__value_.__l.__size_;
      v48 = std::string::append(&v99, (const std::string::value_type *)v46, v47);
      v49 = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      v50 = std::string::append(&v100, ")");
      v51 = v50->__r_.__value_.__r.__words[2];
      v101 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v102 = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0)
        v52 = (const std::string::value_type *)&v101;
      else
        v52 = (const std::string::value_type *)v101;
      if (v102 >= 0)
        v53 = HIBYTE(v102);
      else
        v53 = *((_QWORD *)&v101 + 1);
      std::string::append(&v103, v52, v53);
      if (SHIBYTE(v102) < 0)
        operator delete((void *)v101);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      v21 = v27;
    }
    if (v15 >= 0x11)
    {
      std::to_string(&v97, v15);
      v54 = std::string::insert(&v97, 0, " samplers (");
      v55 = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      v56 = std::string::append(&v98, "/");
      v57 = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v96, 16);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &v96;
      else
        v58 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v59 = v96.__r_.__value_.__l.__size_;
      v60 = std::string::append(&v99, (const std::string::value_type *)v58, v59);
      v61 = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      v62 = std::string::append(&v100, ")");
      v63 = v62->__r_.__value_.__r.__words[2];
      v101 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v102 = v63;
      v62->__r_.__value_.__l.__size_ = 0;
      v62->__r_.__value_.__r.__words[2] = 0;
      v62->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0)
        v64 = (const std::string::value_type *)&v101;
      else
        v64 = (const std::string::value_type *)v101;
      if (v102 >= 0)
        v65 = HIBYTE(v102);
      else
        v65 = *((_QWORD *)&v101 + 1);
      std::string::append(&v103, v64, v65);
      if (SHIBYTE(v102) < 0)
        operator delete((void *)v101);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      v21 = v27;
    }
    v23 = v18 > v19;
    v26 = a9;
    if (v23)
    {
      std::to_string(&v97, __val);
      v66 = std::string::insert(&v97, 0, " indirect buffers (");
      v67 = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      v68 = std::string::append(&v98, "/");
      v69 = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      v70 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 40))(*((_QWORD *)this + 103));
      std::to_string(&v96, v70);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v96;
      else
        v71 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v72 = v96.__r_.__value_.__l.__size_;
      v73 = std::string::append(&v99, (const std::string::value_type *)v71, v72);
      v74 = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      v75 = std::string::append(&v100, ")");
      v76 = v75->__r_.__value_.__r.__words[2];
      v101 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v102 = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0)
        v77 = (const std::string::value_type *)&v101;
      else
        v77 = (const std::string::value_type *)v101;
      if (v102 >= 0)
        v78 = HIBYTE(v102);
      else
        v78 = *((_QWORD *)&v101 + 1);
      std::string::append(&v103, v77, v78);
      if (SHIBYTE(v102) < 0)
        operator delete((void *)v101);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      v21 = v27;
    }
    if (v20 > v21)
    {
      std::to_string(&v97, v94);
      v79 = std::string::insert(&v97, 0, " indirect textures (");
      v80 = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v98.__r_.__value_.__r.__words[2] = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      v81 = std::string::append(&v98, "/");
      v82 = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v99.__r_.__value_.__r.__words[2] = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      v83 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 103) + 32))(*((_QWORD *)this + 103));
      std::to_string(&v96, v83);
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = &v96;
      else
        v84 = (std::string *)v96.__r_.__value_.__r.__words[0];
      if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = HIBYTE(v96.__r_.__value_.__r.__words[2]);
      else
        v85 = v96.__r_.__value_.__l.__size_;
      v86 = std::string::append(&v99, (const std::string::value_type *)v84, v85);
      v87 = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v100.__r_.__value_.__l.__data_ = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v100.__r_.__value_.__r.__words[2] = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      v88 = std::string::append(&v100, ")");
      v89 = v88->__r_.__value_.__r.__words[2];
      v101 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      v102 = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      if (v102 >= 0)
        v90 = (const std::string::value_type *)&v101;
      else
        v90 = (const std::string::value_type *)v101;
      if (v102 >= 0)
        v91 = HIBYTE(v102);
      else
        v91 = *((_QWORD *)&v101 + 1);
      std::string::append(&v103, v90, v91);
      if (SHIBYTE(v102) < 0)
        operator delete((void *)v101);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
    }
    v25 = 1;
  }
  else
  {
    v25 = 0;
    v26 = a9;
  }
  *v26 = v25;
  v92 = (std::string *)(v26 + 8);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v92, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
  }
  else
  {
    *v92 = v103;
  }
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildUnpack1010102(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, llvm::Type *a3, int a4, int a5, char a6)
{
  void *v8;
  size_t v9;
  uint64_t v10;
  llvm::Type ***v12;
  llvm::Value *v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  if (!a5 || (a6 & 1) != 0)
  {
    if (a4 == 3)
      v10 = 4;
    else
      v10 = 5;
    return (llvm::Value *)(*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, uint64_t, llvm::Type *, llvm::Value *))(*(_QWORD *)this + 1464))(this, v10, a3, a2);
  }
  else
  {
    v14 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
    v16 = *((_DWORD *)this + 26);
    v8 = (void *)*((_QWORD *)this + 297);
    if (v8)
      v9 = strlen(*((const char **)this + 297));
    else
      v9 = 0;
    v12 = (llvm::Type ***)llvm::FixedVectorType::get();
    v13 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic((uint64_t *)this, &v14, v8, v9, (uint64_t)"rgb10a2", 7, v12, (uint64_t *)a2);
    if (v15)
      llvm::MetadataTracking::untrack();
    return v13;
  }
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildPack1010102(AGCLLVMGen3TargetLowerer *this, llvm::Type **a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  size_t v7;
  llvm::Value *v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if (!(_DWORD)a3 || (a4 & 1) != 0)
    return (llvm::Value *)(*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, uint64_t, _QWORD, llvm::Type **, uint64_t, uint64_t))(*(_QWORD *)this + 1456))(this, 5, *((_QWORD *)this + 25), a2, a3, a4);
  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v6 = (void *)*((_QWORD *)this + 298);
  if (v6)
    v7 = strlen(*((const char **)this + 298));
  else
    v7 = 0;
  v9 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic((uint64_t *)this, &v10, v6, v7, (uint64_t)"rgb10a2", 7, *((llvm::Type **)this + 25), a2);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v9;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildUnpack111110(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, llvm::Type *a3)
{
  void *v5;
  size_t v6;
  llvm::Type ***v7;
  llvm::Value *v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v5 = (void *)*((_QWORD *)this + 297);
  if (v5)
    v6 = strlen(*((const char **)this + 297));
  else
    v6 = 0;
  v7 = (llvm::Type ***)llvm::FixedVectorType::get();
  v8 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic((uint64_t *)this, &v10, v5, v6, (uint64_t)"rg11b10f", 8, v7, (uint64_t *)a2);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildPack111110(AGCLLVMGen3TargetLowerer *this, llvm::Type **a2)
{
  void *v4;
  size_t v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  v10 = *((_DWORD *)this + 26);
  v4 = (void *)*((_QWORD *)this + 298);
  if (v4)
    v5 = strlen(*((const char **)this + 298));
  else
    v5 = 0;
  v6 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic((uint64_t *)this, &v8, v4, v5, (uint64_t)"rg11b10f", 8, *((llvm::Type **)this + 25), a2);
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildUnpack9995(AGCLLVMGen3TargetLowerer *this, llvm::Value *a2, llvm::Type *a3)
{
  void *v5;
  size_t v6;
  llvm::Type ***v7;
  llvm::Value *v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  v12 = *((_DWORD *)this + 26);
  v5 = (void *)*((_QWORD *)this + 297);
  if (v5)
    v6 = strlen(*((const char **)this + 297));
  else
    v6 = 0;
  v7 = (llvm::Type ***)llvm::FixedVectorType::get();
  v8 = AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic((uint64_t *)this, &v10, v5, v6, (uint64_t)"rgb9e5", 6, v7, (uint64_t *)a2);
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildPack9995(AGCLLVMGen3TargetLowerer *this, llvm::Type **a2)
{
  void *v4;
  size_t v5;
  llvm::Value *v6;
  __int128 v8;
  uint64_t v9;
  int v10;

  v8 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  v10 = *((_DWORD *)this + 26);
  v4 = (void *)*((_QWORD *)this + 298);
  if (v4)
    v5 = strlen(*((const char **)this + 298));
  else
    v5 = 0;
  v6 = AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic((uint64_t *)this, &v8, v4, v5, (uint64_t)"rgb9e5", 6, *((llvm::Type **)this + 25), a2);
  if (v9)
    llvm::MetadataTracking::untrack();
  return v6;
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteImageBlock(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  llvm::BasicBlock *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Instruction *v9;
  uint64_t v10;
  llvm::Instruction *v11;
  llvm::CmpInst **v12;
  uint64_t v13;
  uint64_t ICmp;
  const char *v16;
  __int16 v17;

  v4 = a1[7];
  v5 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  v6 = operator new();
  llvm::BasicBlock::BasicBlock();
  v16 = "implicit_origin_and_size";
  v17 = 259;
  v7 = operator new();
  llvm::BasicBlock::BasicBlock();
  AGCLLVMGen3TargetLowerer::buildWriteImageBlockSwitch(a1, a2, *(_QWORD *)(v4 + 56), v6, v7, v5, 1);
  AGCLLVMGen3TargetLowerer::buildWriteImageBlockSwitch(a1, a2, *(_QWORD *)(v4 + 56), v7, (uint64_t)v5, v5, 0);
  v8 = *(_QWORD *)(v4 + 40);
  if (v8 == v4 + 40)
  {
    v11 = 0;
  }
  else
  {
    v9 = (llvm::Instruction *)(v8 - 24);
    if (v8)
      v10 = v8 - 24;
    else
      v10 = 0;
    if (*(unsigned __int8 *)(v10 + 16) - 29 >= 0xB)
      v11 = 0;
    else
      v11 = v9;
  }
  llvm::Instruction::eraseFromParent(v11);
  a1[7] = v4;
  a1[8] = v4 + 40;
  v12 = *(llvm::CmpInst ***)(a2 + 112);
  v13 = llvm::ConstantInt::get();
  v17 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v12, v13, (uint64_t)&v16);
  llvm::IRBuilderBase::CreateCondBr(a1 + 1, ICmp, v6, v7);
  return 0;
}

uint64_t AGCLLVMGen3TargetLowerer::colorCoverageMaskType(AGCLLVMGen3TargetLowerer *this)
{
  return *((_QWORD *)this + 25);
}

void AGCLLVMGen3TargetLowerer::buildWriteImageBlockIntrinsic(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Cast;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Type **v17;
  llvm::Type *v18;
  const std::string::value_type *v19;
  llvm::Value *ZExtOrBitCast;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t Element;
  llvm::Value *v37;
  llvm::Value *v38;
  uint64_t v39;
  std::string *v40;
  uint64_t v41;
  _BYTE v42[32];
  __int16 v43;
  std::string v44;
  void *v45;
  uint64_t v46;
  _BYTE v47[128];
  void *v48[2];
  _QWORD v49[17];

  v49[16] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&v44, *(char **)(a1 + 1920));
  if (a5)
    std::string::append(&v44, ".subset");
  std::string::append(&v44, ".coords");
  v48[0] = v49;
  v48[1] = (void *)0x1000000000;
  v45 = v47;
  v46 = 0x1000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, a3);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, a4);
  v10 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, v10);
  v11 = *(_QWORD *)(a2 + 56);
  v12 = llvm::PointerType::get();
  v43 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v11, v12, (uint64_t)v42);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, Cast);
  v14 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, v14);
  v15 = *(_QWORD *)(a2 + 32);
  if (!v15)
  {
    v16 = llvm::ConstantInt::get();
    v43 = 257;
    v15 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v16, v14, (uint64_t)v42);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v15);
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      std::string::append(&v44, ".1d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 200));
      v17 = *(llvm::Type ***)(a2 + 136);
      v18 = *(llvm::Type **)(a1 + 200);
      goto LABEL_11;
    case 1:
      v19 = ".2d";
      goto LABEL_9;
    case 2:
      v19 = ".cubestf";
LABEL_9:
      std::string::append(&v44, v19);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 248));
      v17 = *(llvm::Type ***)(a2 + 136);
      v18 = *(llvm::Type **)(a1 + 248);
      goto LABEL_11;
    case 3:
      std::string::append(&v44, ".3d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 312));
      v17 = *(llvm::Type ***)(a2 + 136);
      v18 = *(llvm::Type **)(a1 + 312);
LABEL_11:
      v43 = 257;
      ZExtOrBitCast = llvm::IRBuilderBase::CreateZExtOrBitCast((llvm::IRBuilderBase *)(a1 + 8), v17, v18, (const llvm::Twine *)v42);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, (uint64_t)ZExtOrBitCast);
      break;
    default:
      break;
  }
  if (*(_QWORD *)(a2 + 152))
  {
    std::string::append(&v44, ".array");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 192));
    v21 = *(_QWORD *)(a2 + 152);
    v22 = *(_QWORD *)(a1 + 192);
    v43 = 257;
    v23 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v21, v22, (uint64_t)v42);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v23);
  }
  if (*(_QWORD *)(a2 + 232))
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 192));
    v24 = *(_QWORD *)(a2 + 232);
    v25 = *(_QWORD *)(a1 + 192);
    v43 = 257;
    v26 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v24, v25, (uint64_t)v42);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v26);
  }
  if (*(_QWORD *)(a2 + 168))
  {
    std::string::append(&v44, ".lod");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 192));
    v27 = *(_QWORD *)(a2 + 168);
    v28 = *(_QWORD *)(a1 + 192);
    v43 = 257;
    v29 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v27, v28, (uint64_t)v42);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v29);
  }
  if (a5)
  {
    v30 = **(_QWORD **)(a2 + 120);
    if ((*(_DWORD *)(v30 + 8) & 0xFE) == 0x12)
    {
      v31 = *(_DWORD *)(v30 + 32);
      if (!v31)
        goto LABEL_25;
    }
    else
    {
      v31 = 1;
    }
    v32 = 0;
    v33 = v31;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 192));
      v34 = *(llvm::Value **)(a2 + 120);
      v43 = 257;
      v35 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v34, v35, (const llvm::Twine *)v42);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, Element);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v48, *(_QWORD *)(a1 + 192));
      v37 = *(llvm::Value **)(a2 + 128);
      v43 = 257;
      v38 = (llvm::Value *)llvm::ConstantInt::get();
      v39 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v37, v38, (const llvm::Twine *)v42);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v45, v39);
      ++v32;
    }
    while (v33 != v32);
  }
LABEL_25:
  if (*(_DWORD *)(a2 + 16) == 1)
    std::string::append(&v44, ".rtz");
  llvm::FunctionType::get();
  if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v40 = &v44;
LABEL_30:
    strlen((const char *)v40);
    goto LABEL_31;
  }
  v40 = (std::string *)v44.__r_.__value_.__r.__words[0];
  if (v44.__r_.__value_.__r.__words[0])
    goto LABEL_30;
LABEL_31:
  llvm::Module::getOrInsertFunction();
  v43 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v41 + 24), v41, (uint64_t)v45, v46, (uint64_t)v42);
  if (v45 != v47)
    free(v45);
  if (v48[0] != v49)
    free(v48[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMGen3TargetLowerer::buildThreadIndexInSimdGroup(uint64_t a1, __int128 *a2, uint64_t a3)
{
  llvm::IRBuilderBase *v6;
  llvm::Value *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t Cast;
  _WORD v12[20];
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v6 = (llvm::IRBuilderBase *)(a1 + 8);
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *((_DWORD *)a2 + 6);
  v7 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalLinearID(a1, (uint64_t)&v15, *(_QWORD *)(a1 + 200));
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  v14 = 257;
  v9 = llvm::IRBuilderBase::CreateAnd(v6, v7, v8, (const llvm::Twine *)v13);
  v12[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)v6, 38, v9, a3, (uint64_t)v12);
  if (v16)
    llvm::MetadataTracking::untrack();
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdGroupIndexInThreadgroup(uint64_t a1, __int128 *a2, uint64_t a3)
{
  llvm::IRBuilderBase *v6;
  llvm::Value *v7;
  llvm::Value *v8;
  uint64_t LShr;
  _BYTE v11[32];
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  v6 = (llvm::IRBuilderBase *)(a1 + 8);
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  if (v14)
    llvm::MetadataTracking::track();
  v15 = *((_DWORD *)a2 + 6);
  v7 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalLinearID(a1, (uint64_t)&v13, a3);
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  v12 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr(v6, v7, v8, (const llvm::Twine *)v11);
  if (v14)
    llvm::MetadataTracking::untrack();
  return LShr;
}

uint64_t AGCLLVMGen3TargetLowerer::buildMemoryCacheCtlFromCoherenceScope()
{
  return llvm::ConstantInt::get();
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffleUp(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[294], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffleDown(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[295], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdShuffleUp(uint64_t a1, __int128 *a2, llvm::Type **a3, llvm::Value *a4)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *((_DWORD *)a2 + 6);
  v8 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(a1, (uint64_t)&v10, a3, a4, 1, *(_DWORD *)(a1 + 872));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdShuffleDown(uint64_t a1, __int128 *a2, llvm::Type **a3, llvm::Value *a4)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *((_DWORD *)a2 + 6);
  v8 = AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(a1, (uint64_t)&v10, a3, a4, 2, *(_DWORD *)(a1 + 872));
  if (v11)
    llvm::MetadataTracking::untrack();
  return v8;
}

uint64_t AGCLLVMGen3TargetLowerer::buildAddressInOffChipMRTBuffer(AGCLLVMGen3TargetLowerer *this, int a2, unsigned __int16 a3, unsigned __int16 a4, llvm::Value *a5, llvm::Value *a6)
{
  llvm::Value *v8;
  llvm::GlobalVariable *v9;
  uint64_t v10;
  uint64_t v11;
  llvm::GlobalVariable *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::GlobalVariable *v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Type **v18;
  llvm::Type *v19;
  llvm::Type **v20;
  llvm::Value *v21;
  llvm::Type *v22;
  llvm::Type **v23;
  llvm::Value *v24;
  llvm::Type *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Value *Mul;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  uint64_t Add;
  uint64_t v43;
  llvm::Value *v44;
  llvm::Value *v45;
  uint64_t v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  uint64_t v54;
  llvm::Value *v55;
  uint64_t v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Type *v59;
  llvm::Value *GEP;
  llvm::Type *v61;
  llvm::Value *v62;
  uint64_t v63;
  uint64_t v64;
  llvm::Value *Cast;
  llvm::Value *v67;
  llvm::Value *AlignedLoad;
  uint64_t v70;
  llvm::Type *v71;
  __int128 v72;
  uint64_t v73;
  int v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  _BYTE v84[32];
  __int16 v85;
  _QWORD v86[4];
  __int16 v87;
  llvm::Value *v88;
  llvm::Value *v89;
  llvm::Value *v90;
  llvm::Value *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  switch(a2)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    case 6:
    case 7:
    case 8:
    case 9:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 22:
      a3 *= 2;
      break;
    case 10:
    case 11:
    case 17:
      a3 *= 4;
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      a3 = 4;
      break;
    default:
      a3 = 0;
      break;
  }
  v71 = (llvm::Type *)a3;
  llvm::ArrayType::get(*((llvm::ArrayType **)this + 23), v71);
  v70 = llvm::PointerType::get();
  if (!*((_QWORD *)this + 307))
  {
    llvm::Type::getInt8PtrTy(*((llvm::Type **)this + 45), (llvm::LLVMContext *)0x41);
    v9 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v86[0] = "agc.eMRT_tile_buffer_address";
    v87 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v10 = *((_QWORD *)this + 43);
    v11 = AGCLLVMBuilder::buildGlobalMetadata(this, v9);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v10, v11);
    llvm::ValueHandleBase::operator=((AGCLLVMGen3TargetLowerer *)((char *)this + 2440), (uint64_t)v9);
  }
  if (!*((_QWORD *)this + 310))
  {
    v12 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v86[0] = "agc.eMRT_spilled_partition_size";
    v87 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v13 = *((_QWORD *)this + 43);
    v14 = AGCLLVMBuilder::buildGlobalMetadata(this, v12);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v13, v14);
    llvm::ValueHandleBase::operator=((AGCLLVMGen3TargetLowerer *)((char *)this + 2464), (uint64_t)v12);
  }
  if (!*((_QWORD *)this + 313))
  {
    v15 = (llvm::GlobalVariable *)llvm::User::operator new((llvm::User *)0x58);
    v86[0] = "agc.eMRT_max_concurrent_tiles";
    v87 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setSection();
    v16 = *((_QWORD *)this + 43);
    v17 = AGCLLVMBuilder::buildGlobalMetadata(this, v15);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(v16, v17);
    llvm::ValueHandleBase::operator=((AGCLLVMGen3TargetLowerer *)((char *)this + 2488), (uint64_t)v15);
  }
  v18 = (llvm::Type **)*((_QWORD *)this + 307);
  v87 = 257;
  v19 = AGCLLVMBuilder::tryDeducePointeeType(v18, v8);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v19, (uint64_t)v18, 0, (uint64_t)v86);
  v20 = (llvm::Type **)*((_QWORD *)this + 310);
  v87 = 257;
  v22 = AGCLLVMBuilder::tryDeducePointeeType(v20, v21);
  v67 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v22, (uint64_t)v20, 0, (uint64_t)v86);
  v23 = (llvm::Type **)*((_QWORD *)this + 313);
  v87 = 257;
  v25 = AGCLLVMBuilder::tryDeducePointeeType(v23, v24);
  v26 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)this + 1, v25, (uint64_t)v23, 0, (uint64_t)v86);
  v27 = *((_QWORD *)this + 24);
  v85 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 38, v26, v27, (uint64_t)v84);
  v28 = 0;
  v29 = 0;
  v90 = 0;
  v91 = 0;
  v88 = 0;
  v89 = 0;
  v30 = 1;
  do
  {
    v31 = v30;
    if (a6)
    {
      v87 = 257;
      v32 = (llvm::Value *)llvm::ConstantInt::get();
      *(&v90 + v28) = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), a6, v32, (const llvm::Twine *)v86);
    }
    else
    {
      v81 = *(_OWORD *)((char *)this + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
      v83 = *((_DWORD *)this + 26);
      *(&v90 + v28) = (llvm::Value *)(*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, __int128 *, _QWORD, uint64_t))(*(_QWORD *)this + 256))(this, &v81, *((_QWORD *)this + 24), v29);
      if (v82)
        llvm::MetadataTracking::untrack();
    }
    v78 = *(_OWORD *)((char *)this + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
    v80 = *((_DWORD *)this + 26);
    *(&v88 + v28) = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalSize((uint64_t)this, (uint64_t)&v78, *((_QWORD *)this + 24), v29);
    if (v79)
      llvm::MetadataTracking::untrack();
    v30 = 0;
    v28 = 1;
    v29 = 1;
  }
  while ((v31 & 1) != 0);
  v33 = v88;
  v87 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v88, v89, (const llvm::Twine *)v86);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v36 = llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), Mul, v35, (const llvm::Twine *)v86);
  v37 = *((_QWORD *)this + 25);
  v85 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, v36, v37, (uint64_t)v84);
  v75 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  v77 = *((_DWORD *)this + 26);
  v39 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, __int128 *, _QWORD))(*(_QWORD *)this
                                                                                                 + 1624))(this, &v75, *((_QWORD *)this + 24));
  if (v76)
    llvm::MetadataTracking::untrack();
  v72 = *(_OWORD *)((char *)this + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((AGCLLVMGen3TargetLowerer *)((char *)this + 8));
  v74 = *((_DWORD *)this + 26);
  v40 = (llvm::Value *)(*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, __int128 *, _QWORD))(*(_QWORD *)this
                                                                                                 + 1632))(this, &v72, *((_QWORD *)this + 24));
  if (v73)
    llvm::MetadataTracking::untrack();
  v87 = 257;
  v41 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v39, Cast, (const llvm::Twine *)v86);
  v87 = 257;
  Add = llvm::IRBuilderBase::CreateAdd((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v41, v40, (const llvm::Twine *)v86);
  v43 = *((_QWORD *)this + 25);
  v87 = 257;
  v44 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, Add, v43, (uint64_t)v86);
  v85 = 257;
  v45 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v44, v67, (const llvm::Twine *)v84);
  v46 = *((_QWORD *)this + 25);
  v87 = 257;
  v47 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, (uint64_t)a5, v46, (uint64_t)v86);
  v85 = 257;
  v48 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v47, v38, (const llvm::Twine *)v84);
  v87 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v91, v33, (const llvm::Twine *)v86);
  v87 = 257;
  v50 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v49, v90, (const llvm::Twine *)v86);
  v51 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v52 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v50, v51, (const llvm::Twine *)v86);
  v53 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v54 = llvm::IRBuilderBase::CreateMul((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v52, v53, (const llvm::Twine *)v86);
  v87 = 257;
  v55 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v45, v48, (const llvm::Twine *)v86);
  v56 = *((_QWORD *)this + 25);
  v87 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, v54, v56, (uint64_t)v86);
  v85 = 257;
  v58 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v55, v57, (const llvm::Twine *)v84);
  v59 = (llvm::Type *)*((_QWORD *)this + 23);
  v87 = 257;
  GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v59, AlignedLoad, v58, (const llvm::Twine *)v86);
  v61 = (llvm::Type *)*((_QWORD *)this + 23);
  v62 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v63 = llvm::IRBuilderBase::CreateGEP((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v61, GEP, v62, (const llvm::Twine *)v86);
  v87 = 257;
  v64 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v63, v70, (uint64_t)v86);
  llvm::ArrayType::get(*((llvm::ArrayType **)this + 23), v71);
  return v64;
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadClusterID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t Cast;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.cluster.num", "");
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = a1 + 8;
  v13 = 257;
  v8 = llvm::IRBuilderBase::CreateCall(v7, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19)
    free(v17);
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadHWTileID()
{
  return 0;
}

void AGCLLVMGen3TargetLowerer::buildUpdateHWColorCovarageMask(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[40];
  void *v24[2];
  _BYTE v25[40];
  _QWORD *v26;
  __int128 v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x1E0C80C00];
  v26 = v28;
  v27 = xmmword_1C3E38060;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v26, "llvm.agx2.update.hw.coverage.mask.", "");
  if (a5)
    v9 = "coords.i16";
  else
    v9 = "i16";
  v10 = 10;
  if (!a5)
    v10 = 3;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v26, v9, &v9[v10]);
  v18 = *(_OWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v18);
  if (v19)
    llvm::MetadataTracking::untrack();
  v24[0] = v25;
  v24[1] = (void *)0x500000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(_QWORD *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(_QWORD *)(a1 + 192));
  if (a5)
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(_QWORD *)(a1 + 240));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(_QWORD *)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(_QWORD *)(a1 + 192));
    v21 = v23;
    v22 = 0x500000000;
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, a3);
    v11 = llvm::ConstantInt::get();
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, v11);
    v12 = a5;
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(_QWORD *)(a1 + 192));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v24, *(_QWORD *)(a1 + 192));
    v21 = v23;
    v22 = 0x500000000;
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, a3);
    v12 = llvm::ConstantInt::get();
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, v12);
  v13 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, v13);
  v14 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v21, v14);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v17 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v15 + 24), v15, (uint64_t)v21, v22, (uint64_t)v16);
  if (v21 != v23)
    free(v21);
  if (v24[0] != v25)
    free(v24[0]);
  if (v26 != v28)
    free(v26);
}

uint64_t AGCLLVMGen3TargetLowerer::buildLocalSize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t inserted;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t Cast;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int128 v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.threadgroup.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v19, aXyz[a4]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, ".size", "");
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v9 = a1 + 8;
  v15 = 257;
  v10 = llvm::IRBuilderBase::CreateCall(v9, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  v13[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21)
    free(v19);
  return Cast;
}

void AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_0::operator()(_QWORD *a1)
{
  uint64_t v2;
  llvm::Value *InsertElement;
  unint64_t v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *Element;
  llvm::Type *v8;
  llvm::Value *FPTrunc;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Type *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  std::string::size_type v20;
  uint64_t v21;
  _WORD v22[20];
  void *__p[2];
  unsigned __int8 v24;
  std::string v25;
  void *v26;
  uint64_t v27;
  _WORD v28[32];
  void *v29[2];
  _BYTE v30[16];
  __int16 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)*a1 + 1592))(*a1, *(unsigned __int16 *)a1[1], *(_QWORD *)(a1[1] + 8), 1, 0, *(unsigned __int8 *)a1[2]) & 1) != 0)
  {
    if ((*(_DWORD *)(*(_QWORD *)(a1[1] + 8) + 8) & 0xFE) == 0x12)
    {
      llvm::FixedVectorType::get();
      InsertElement = (llvm::Value *)llvm::UndefValue::get();
      if (*(_DWORD *)(*(_QWORD *)(a1[1] + 8) + 32))
      {
        v4 = 0;
        do
        {
          v5 = *(llvm::Value **)a1[3];
          v31 = 257;
          v6 = (llvm::Value *)llvm::ConstantInt::get();
          Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(v2 + 8), v5, v6, (const llvm::Twine *)v29);
          v8 = *(llvm::Type **)(v2 + 152);
          v28[8] = 257;
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(v2 + 8), Element, v8, (const llvm::Twine *)&v26);
          v31 = 257;
          v10 = (llvm::Value *)llvm::ConstantInt::get();
          InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(v2 + 8), InsertElement, FPTrunc, v10, (const llvm::Twine *)v29);
          ++v4;
        }
        while (v4 < *(unsigned int *)(*(_QWORD *)(a1[1] + 8) + 32));
      }
      *(_QWORD *)a1[3] = InsertElement;
    }
    else
    {
      v11 = *(llvm::Value **)a1[3];
      v12 = *(llvm::Type **)(v2 + 152);
      v31 = 257;
      *(_QWORD *)a1[3] = llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(v2 + 8), v11, v12, (const llvm::Twine *)v29);
    }
  }
  std::string::basic_string[abi:nn180100]<0>(&v25, *(char **)(v2 + 1528));
  AGCLLVMGen3TargetLowerer::getWriteSuffix((AGCLLVMGen3TargetLowerer *)__p, (llvm::Type *)v2, **(_QWORD **)a1[3]);
  v29[0] = v30;
  v29[1] = (void *)0x800000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(_QWORD *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(_QWORD *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(_QWORD *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(_QWORD *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, **(_QWORD **)a1[3]);
  v26 = v28;
  v27 = 0x800000000;
  v13 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v13);
  v14 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v14);
  v15 = *(_QWORD *)a1[4];
  if (!v15)
    v15 = *(_QWORD *)a1[5];
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v15);
  v16 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v16);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, *(_QWORD *)a1[3]);
  if (*(_QWORD *)a1[7])
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(_QWORD *)(v2 + 240));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, *(_QWORD *)a1[7]);
    std::string::append(&v25, "coords.");
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(_QWORD *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(_QWORD *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v29, *(_QWORD *)(v2 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, *(_QWORD *)a1[8]);
  v17 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v17);
  v18 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v26, v18);
  if ((v24 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v24 & 0x80u) == 0)
    v20 = v24;
  else
    v20 = (std::string::size_type)__p[1];
  std::string::append(&v25, (const std::string::value_type *)v19, v20);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v22[16] = 257;
  llvm::IRBuilderBase::CreateCall(v2 + 8, *(_QWORD *)(v21 + 24), v21, (uint64_t)v26, v27, (uint64_t)v22);
  if (v26 != v28)
    free(v26);
  if (v29[0] != v30)
    free(v29[0]);
  if ((char)v24 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL,llvm::Value *,BOOL,BOOL)::$_1::operator()(llvm::Type **a1)
{
  llvm::Type **v1;
  llvm::Type *v2;
  llvm::Value *InsertElement;
  unint64_t v4;
  llvm::Value *v5;
  llvm::Value *v6;
  llvm::Value *Element;
  llvm::Type *v8;
  llvm::Value *FPTrunc;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::Type *v12;
  uint64_t inserted;
  llvm::IRBuilderBase *v14;
  llvm::Value *v15;
  uint64_t v16;
  llvm::Value *Cast;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Type *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  uint64_t Sub;
  uint64_t *GEP;
  llvm::Value *v29;
  llvm::Type **v30;
  llvm::Type *v31;
  uint64_t AlignedLoad;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  int v36;
  llvm::Value *v37;
  llvm::CmpInst **v38;
  uint64_t v39;
  llvm::Type *v40;
  llvm::Value *v41;
  int8x8_t v42;
  llvm::Value *v43;
  unsigned int v44;
  int v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  unsigned int v51;
  uint64_t Int8PtrTy;
  uint64_t *v53;
  uint64_t v54;
  llvm::Type *v55;
  _QWORD *v56;
  void *p_p;
  uint64_t v58;
  _QWORD *v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  uint64_t v62;
  llvm::Value *v63;
  llvm::Value *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::Type **v68;
  llvm::Type *v69;
  llvm::Type *v70;
  llvm::IRBuilderBase *v71;
  int v72;
  uint64_t v73;
  uint64_t Select;
  int v75;
  llvm::Value *v76;
  llvm::Value *v77;
  llvm::Type **v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  void *__p;
  std::string::size_type v83;
  unsigned __int8 v84;
  __int16 v85;
  _QWORD v86[4];
  __int16 v87;
  void *v88;
  char v89;
  uint64_t v90;
  std::string v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE v94[48];
  void *v95[2];
  _BYTE v96[16];
  __int16 v97;
  uint64_t v98;

  v1 = a1;
  v98 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (((*(uint64_t (**)(llvm::Type *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 1592))(*a1, *(unsigned __int16 *)a1[1], *((_QWORD *)a1[1] + 1), 1, 1, *(unsigned __int8 *)a1[2]) & 1) != 0)
  {
    if ((*(_DWORD *)(*((_QWORD *)v1[1] + 1) + 8) & 0xFE) == 0x12)
    {
      llvm::VectorType::get();
      InsertElement = (llvm::Value *)llvm::UndefValue::get();
      if (*(_DWORD *)(*((_QWORD *)v1[1] + 1) + 32))
      {
        v4 = 0;
        do
        {
          v5 = *(llvm::Value **)v1[3];
          v87 = 257;
          v6 = (llvm::Value *)llvm::ConstantInt::get();
          Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::Type *)((char *)v2 + 8), v5, v6, (const llvm::Twine *)v86);
          v8 = (llvm::Type *)*((_QWORD *)v2 + 19);
          v97 = 257;
          FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::Type *)((char *)v2 + 8), Element, v8, (const llvm::Twine *)v95);
          v87 = 257;
          v10 = (llvm::Value *)llvm::ConstantInt::get();
          InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::Type *)((char *)v2 + 8), InsertElement, FPTrunc, v10, (const llvm::Twine *)v86);
          ++v4;
        }
        while (v4 < *(unsigned int *)(*((_QWORD *)v1[1] + 1) + 32));
      }
      *(_QWORD *)v1[3] = InsertElement;
    }
    else
    {
      v11 = *(llvm::Value **)v1[3];
      v12 = (llvm::Type *)*((_QWORD *)v2 + 19);
      v87 = 257;
      *(_QWORD *)v1[3] = llvm::IRBuilderBase::CreateFPTrunc((llvm::Type *)((char *)v2 + 8), v11, v12, (const llvm::Twine *)v86);
    }
  }
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v14 = (llvm::Type *)((char *)v2 + 8);
  v87 = 257;
  v15 = llvm::IRBuilderBase::CreateCall((uint64_t)v2 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v86);
  v16 = *((_QWORD *)v2 + 24);
  v97 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v2 + 8, 38, (uint64_t)v15, v16, (uint64_t)v95);
  v18 = *(llvm::Value **)v1[4];
  if (!v18)
    v18 = *(llvm::Value **)v1[5];
  if (!*(_BYTE *)v1[6])
  {
    v87 = 257;
    v18 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::Type *)((char *)v2 + 8), v18, Cast, (const llvm::Twine *)v86);
  }
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v87 = 257;
  v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::Type *)((char *)v2 + 8), v18, v19, (const llvm::Twine *)v86);
  v21 = v1[1];
  v22 = *((unsigned __int16 *)v21 + 1);
  v23 = *((unsigned __int16 *)v21 + 3);
  v24 = *(unsigned __int16 *)v1[7];
  v25 = *(llvm::Value **)v1[8];
  v26 = *(llvm::Value **)v1[9];
  v87 = 257;
  Sub = llvm::IRBuilderBase::CreateSub((llvm::Type *)((char *)v2 + 8), v25, v26, (const llvm::Twine *)v86);
  GEP = (uint64_t *)(*(uint64_t (**)(llvm::Type *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 1616))(v2, v22, v23, v24, Sub, *(_QWORD *)v1[10]);
  v69 = v29;
  v30 = (llvm::Type **)*((_QWORD *)v2 + 307);
  v87 = 257;
  v31 = AGCLLVMBuilder::tryDeducePointeeType(v30, v29);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v2 + 1, v31, (uint64_t)v30, 0, (uint64_t)v86);
  v33 = *GEP;
  v97 = 257;
  llvm::IRBuilderBase::CreateCast((uint64_t)v2 + 8, 49, AlignedLoad, v33, (uint64_t)v95);
  v79 = *(_OWORD *)((char *)v2 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::Type *)((char *)v2 + 8));
  v81 = *((_DWORD *)v2 + 26);
  v34 = *(_QWORD *)v1[4];
  if (!v34)
    v34 = *(_QWORD *)v1[5];
  result = (*(uint64_t (**)(llvm::Type *, __int128 *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 1640))(v2, &v79, v34, *(unsigned __int8 *)v1[6], *(_QWORD *)v1[10]);
  if (v80)
    result = llvm::MetadataTracking::untrack();
  if (*(_WORD *)v1[7])
  {
    v36 = 0;
    v66 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v67 = *MEMORY[0x1E0DE4F60];
    v65 = MEMORY[0x1E0DE4FB8] + 16;
    v68 = v1;
    v70 = v2;
    v71 = (llvm::Type *)((char *)v2 + 8);
    do
    {
      v37 = (llvm::Value *)llvm::ConstantInt::get();
      v87 = 257;
      v38 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd(v14, v20, v37, (const llvm::Twine *)v86);
      v39 = llvm::ConstantInt::get();
      v97 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)v14, 32, v38, v39, (uint64_t)v95);
      v87 = 257;
      Select = llvm::IRBuilderBase::CreateSelect();
      v40 = v1[1];
      v41 = *(llvm::Value **)v1[3];
      (*(uint64_t (**)(llvm::Type *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 1592))(v2, *(unsigned __int16 *)v40, *((_QWORD *)v40 + 1), 1, 1, 0);
      v42 = (int8x8_t)*((unsigned __int16 *)v40 + 2);
      v76 = (llvm::Value *)GEP;
      v77 = v20;
      v75 = v36;
      v73 = llvm::ConstantInt::get();
      v72 = vaddlv_u8((uint8x8_t)vcnt_s8(v42));
      llvm::FixedVectorType::get();
      v43 = (llvm::Value *)llvm::UndefValue::get();
      v44 = *((unsigned __int16 *)v40 + 2);
      v78 = (llvm::Type **)v41;
      if (*((_WORD *)v40 + 2))
      {
        v45 = 0;
        do
        {
          v87 = 257;
          v46 = (llvm::Value *)llvm::ConstantInt::get();
          v47 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v71, v41, v46, (const llvm::Twine *)v86);
          v97 = 257;
          v48 = (llvm::Value *)llvm::ConstantInt::get();
          v43 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v71, v43, v47, v48, (const llvm::Twine *)v95);
          ++v45;
          v41 = (llvm::Value *)v78;
          v44 ^= 1 << __clz(__rbit32(v44));
        }
        while (v44);
      }
      if (v72 == 1)
      {
        v87 = 257;
        v2 = v70;
        v49 = (llvm::Value *)llvm::ConstantInt::get();
        v14 = v71;
        v43 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement(v71, v43, v49, (const llvm::Twine *)v86);
        v1 = v68;
        v50 = v77;
      }
      else
      {
        v1 = v68;
        v50 = v77;
        v2 = v70;
        v14 = v71;
      }
      v51 = *(_DWORD *)(*(_QWORD *)Select + 8);
      if ((v51 & 0xFE) == 0x12)
        v51 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)Select + 16) + 8);
      Int8PtrTy = llvm::Type::getInt8PtrTy(*((llvm::Type **)v2 + 45), (llvm::LLVMContext *)(v51 >> 8));
      v87 = 257;
      v53 = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v14, 49, Select, Int8PtrTy, (uint64_t)v86);
      std::string::basic_string[abi:nn180100]<0>(&v91, *((char **)v2 + 167));
      v95[0] = v96;
      v95[1] = (void *)0x600000000;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v95, *((_QWORD *)v2 + 24));
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v95, *((_QWORD *)v2 + 24));
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v95, *(_QWORD *)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v95, *v53);
      v92 = v94;
      v93 = 0x600000000;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v92, v73);
      v54 = llvm::ConstantInt::get();
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v92, v54);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v92, (uint64_t)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v92, (uint64_t)v53);
      v55 = *v78;
      std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v86);
      v56 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v56, (uint64_t)"xsz", 3);
      llvm::Type::getScalarSizeInBits(v55);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)".", 1);
      AGCLLVMGen3TargetLowerer::getWriteSuffix((AGCLLVMGen3TargetLowerer *)&__p, v2, *(_QWORD *)v43);
      if ((v84 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v84 & 0x80u) == 0)
        v58 = v84;
      else
        v58 = v83;
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)p_p, v58);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v86, (uint64_t)".p", 2);
      v59 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v59, (uint64_t)"i8", 2);
      if ((char)v84 < 0)
        operator delete(__p);
      std::stringbuf::str();
      if ((v84 & 0x80u) == 0)
        v60 = (const std::string::value_type *)&__p;
      else
        v60 = (const std::string::value_type *)__p;
      if ((v84 & 0x80u) == 0)
        v61 = v84;
      else
        v61 = v83;
      std::string::append(&v91, v60, v61);
      if ((char)v84 < 0)
        operator delete(__p);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v85 = 257;
      llvm::IRBuilderBase::CreateCall((uint64_t)v14, *(_QWORD *)(v62 + 24), v62, (uint64_t)v92, v93, (uint64_t)&__p);
      v86[0] = v67;
      *(_QWORD *)((char *)v86 + *(_QWORD *)(v67 - 24)) = v66;
      v86[1] = v65;
      if (v89 < 0)
        operator delete(v88);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1CAA2D638](&v90);
      if (v92 != v94)
        free(v92);
      if (v95[0] != v96)
        free(v95[0]);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      v63 = (llvm::Value *)llvm::ConstantInt::get();
      v87 = 257;
      GEP = (uint64_t *)llvm::IRBuilderBase::CreateGEP(v14, v69, v76, v63, (const llvm::Twine *)v86);
      v64 = (llvm::Value *)llvm::ConstantInt::get();
      v87 = 257;
      result = llvm::IRBuilderBase::CreateLShr(v14, v50, v64, (const llvm::Twine *)v86);
      v20 = (llvm::Value *)result;
      v36 = v75 + 1;
    }
    while (*(unsigned __int16 *)v1[7] > (v75 + 1));
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadOutputPartition(AGCLLVMGen3TargetLowerer::MemoryTransferOp const&,unsigned short,llvm::Value *,llvm::Type *,llvm::Value *,llvm::Value *,llvm::Value *,BOOL)::$_1::operator()(uint64_t a1)
{
  uint64_t *v2;
  uint64_t inserted;
  llvm::Value *v4;
  uint64_t v5;
  llvm::Value *Cast;
  llvm::Value *v7;
  llvm::Value *v8;
  llvm::CmpInst **v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Value *Select;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t Sub;
  llvm::Value *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  llvm::Type *v23;
  uint64_t GEP;
  llvm::Constant **EMRTTileBuffer;
  llvm::Type *v26;
  _BYTE v28[32];
  __int16 v29;
  _BYTE v30[32];
  __int16 v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)a1;
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v31 = 257;
  v4 = llvm::IRBuilderBase::CreateCall((uint64_t)(v2 + 1), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v30);
  v5 = v2[24];
  v29 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(v2 + 1), 38, (uint64_t)v4, v5, (uint64_t)v28);
  v7 = **(llvm::Value ***)(a1 + 8);
  if (!v7)
    v7 = **(llvm::Value ***)(a1 + 16);
  if (!**(_BYTE **)(a1 + 24))
  {
    v31 = 257;
    v7 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v2 + 1), v7, Cast, (const llvm::Twine *)v30);
  }
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = 257;
  v9 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v2 + 1), v7, v8, (const llvm::Twine *)v30);
  v10 = llvm::ConstantInt::get();
  v31 = 257;
  llvm::IRBuilderBase::CreateICmp(v2 + 1, 32, v9, v10, (uint64_t)v30);
  v11 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)v2, (uint64_t)"llvm.cttz.i16", 13, v2[24], v2[24], v2[22]);
  llvm::ConstantInt::get();
  v32[0] = v9;
  v32[1] = llvm::ConstantInt::get();
  v31 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)(v2 + 1), *(_QWORD *)(v11 + 24), v11, (uint64_t)v32, 2, (uint64_t)v30);
  v29 = 257;
  Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(unsigned __int16 *)(v13 + 2);
  v15 = *(unsigned __int16 *)(v13 + 6);
  v16 = **(unsigned __int16 **)(a1 + 32);
  v17 = **(llvm::Value ***)(a1 + 48);
  v18 = **(llvm::Value ***)(a1 + 56);
  v31 = 257;
  Sub = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(v2 + 1), v17, v18, (const llvm::Twine *)v30);
  v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*v2 + 1616))(v2, v14, v15, v16, Sub, **(_QWORD **)(a1 + 64));
  v21 = *(unsigned __int16 **)(a1 + 40);
  v22 = **(_QWORD **)(a1 + 72);
  v31 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v2 + 1), v23, v20, Select, (const llvm::Twine *)v30);
  EMRTTileBuffer = (llvm::Constant **)AGCLLVMGen3TargetLowerer::buildLoadEMRTTileBuffer((AGCLLVMGen3TargetLowerer *)v2, v21, v22, GEP);
  llvm::Constant::getNullValue(*EMRTTileBuffer, v26);
  v31 = 257;
  return llvm::IRBuilderBase::CreateSelect();
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildLoadEMRTTileBuffer(AGCLLVMGen3TargetLowerer *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t *v8;
  uint64_t v9;
  llvm::Type *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t Int8PtrTy;
  uint64_t *Cast;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  void *p_p;
  uint64_t v19;
  _QWORD *v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm::Value *v25;
  void *__p;
  std::string::size_type v28;
  unsigned __int8 v29;
  __int16 v30;
  _QWORD v31[4];
  __int16 v32;
  void *v33;
  char v34;
  uint64_t v35;
  std::string v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE v39[24];
  void *v40[2];
  _QWORD v41[5];

  v41[3] = *MEMORY[0x1E0C80C00];
  v7 = (*(uint64_t (**)(AGCLLVMGen3TargetLowerer *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 1592))(a1, *a2, *((_QWORD *)a2 + 1), 0, 0, 0);
  if ((v7 & 1) != 0)
  {
    v8 = (uint64_t *)((char *)a1 + 152);
  }
  else
  {
    v9 = *((_QWORD *)a2 + 1);
    if ((*(_DWORD *)(v9 + 8) & 0xFE) != 0x12)
      goto LABEL_6;
    v8 = *(uint64_t **)(v9 + 16);
  }
  v9 = *v8;
LABEL_6:
  v10 = (llvm::Type *)v9;
  if (a2[3] != 1)
    v10 = (llvm::Type *)llvm::FixedVectorType::get();
  v11 = llvm::ConstantInt::get();
  v12 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  if ((v12 & 0xFE) == 0x12)
    v12 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a4 + 16) + 8);
  Int8PtrTy = llvm::Type::getInt8PtrTy(*((llvm::Type **)a1 + 45), (llvm::LLVMContext *)(v12 >> 8));
  v32 = 257;
  Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)a1 + 8, 49, a4, Int8PtrTy, (uint64_t)v31);
  std::string::basic_string[abi:nn180100]<0>(&v36, *((char **)a1 + 166));
  v40[0] = v41;
  v40[1] = (void *)0x300000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *((_QWORD *)a1 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *((_QWORD *)a1 + 24));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v40, *Cast);
  v37 = v39;
  v38 = 0x300000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, v11);
  v15 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, v15);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v37, (uint64_t)Cast);
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)v31);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v16, (uint64_t)"xsz", 3);
  llvm::Type::getScalarSizeInBits(v10);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
  if (*((_QWORD *)a1 + 24) == v9)
  {
    v17 = "i16";
  }
  else if (*((_QWORD *)a1 + 25) == v9)
  {
    v17 = "i32";
  }
  else if (*((_QWORD *)a1 + 19) == v9)
  {
    v17 = "f16";
  }
  else
  {
    v17 = "f32";
  }
  std::string::basic_string[abi:nn180100]<0>(&__p, v17);
  if ((v29 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v29 & 0x80u) == 0)
    v19 = v29;
  else
    v19 = v28;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)p_p, v19);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)".p", 2);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v20, (uint64_t)"i8", 2);
  if ((char)v29 < 0)
    operator delete(__p);
  std::stringbuf::str();
  if ((v29 & 0x80u) == 0)
    v21 = (const std::string::value_type *)&__p;
  else
    v21 = (const std::string::value_type *)__p;
  if ((v29 & 0x80u) == 0)
    v22 = v29;
  else
    v22 = v28;
  std::string::append(&v36, v21, v22);
  if ((char)v29 < 0)
    operator delete(__p);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v30 = 257;
  v24 = llvm::IRBuilderBase::CreateCall((uint64_t)a1 + 8, *(_QWORD *)(v23 + 24), v23, (uint64_t)v37, v38, (uint64_t)&__p);
  v25 = AGCLLVMGen3TargetLowerer::convertFromF16(a1, v24, v7 & 1);
  v31[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v31[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v34 < 0)
    operator delete(v33);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA2D638](&v35);
  if (v37 != v39)
    free(v37);
  if (v40[0] != v41)
    free(v40[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  return v25;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(uint64_t a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4, int a5, int a6)
{
  llvm::Type *v10;
  int ScalarSizeInBits;
  int v12;
  llvm::Value *InsertElement;
  unint64_t v14;
  llvm::Value *v15;
  llvm::Type **Element;
  llvm::Value *v17;
  llvm::Value *v18;
  _BYTE v20[32];
  __int16 v21;
  _QWORD v22[3];
  __int128 v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;

  v26 = a6;
  v27 = a5;
  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v22[0] = &v26;
  v22[1] = a1;
  v22[2] = &v27;
  v10 = *a3;
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a3);
  if ((*((_DWORD *)v10 + 2) & 0xFE) == 0x12)
    v12 = *((_DWORD *)v10 + 8);
  else
    v12 = 1;
  if ((v12 * ScalarSizeInBits) < 0x21)
    return AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,AGCLLVMGen3TargetLowerer::SimdShuffleFunction,unsigned int)::$_0::operator()((uint64_t)v22, a3, a4);
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  if (*((_DWORD *)*a3 + 8))
  {
    v14 = 0;
    do
    {
      v21 = 257;
      v15 = (llvm::Value *)llvm::ConstantInt::get();
      Element = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)a3, v15, (const llvm::Twine *)v20);
      v17 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,AGCLLVMGen3TargetLowerer::SimdShuffleFunction,unsigned int)::$_0::operator()((uint64_t)v22, Element, a4);
      v21 = 257;
      v18 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v17, v18, (const llvm::Twine *)v20);
      ++v14;
    }
    while (v14 < *((unsigned int *)*a3 + 8));
  }
  return (uint64_t)InsertElement;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedSimdShuffle(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *,AGCLLVMGen3TargetLowerer::SimdShuffleFunction,unsigned int)::$_0::operator()(uint64_t a1, llvm::Type **a2, llvm::Value *a3)
{
  uint64_t v6;
  llvm::IRBuilderBase *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *Cast;
  llvm::Type *v12;
  uint64_t GEP;
  llvm::CmpInst **Add;
  uint64_t v15;
  uint64_t Select;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::Value *Sub;
  llvm::Value *v22;
  const llvm::Twine *v23;
  llvm::Type *v24;
  llvm::Type **v25;
  llvm::Value *v26;
  llvm::Type *v27;
  char v29;
  __int16 v30;
  _BYTE v31[32];
  __int16 v32;
  _BYTE v33[32];
  __int16 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  _BYTE v38[32];
  __int16 v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  int v48;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (llvm::IRBuilderBase *)(v6 + 8);
  if (**(_DWORD **)a1 == 4)
  {
    v46 = *(_OWORD *)(v6 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 8));
    v48 = *(_DWORD *)(v6 + 104);
    v8 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(v6, (uint64_t)&v46, *(_QWORD *)(v6 + 192));
    if (!v47)
      goto LABEL_4;
    goto LABEL_3;
  }
  v43 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 8));
  v45 = *(_DWORD *)(v6 + 104);
  v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)v6 + 1536))(v6, &v43, *(_QWORD *)(v6 + 192));
  if (v44)
LABEL_3:
    llvm::MetadataTracking::untrack();
LABEL_4:
  v40 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 8));
  v42 = *(_DWORD *)(v6 + 104);
  v9 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(v6, (uint64_t)&v40, v8);
  if (v41)
    llvm::MetadataTracking::untrack();
  v10 = llvm::PointerType::get();
  v39 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v6 + 8, 49, v9, v10, (uint64_t)v38);
  v12 = *a2;
  v39 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v6 + 8), v12, Cast, v8, (const llvm::Twine *)v38);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(v6 + 8), a2, GEP, 0);
  v35 = *(_OWORD *)(v6 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v6 + 8));
  v37 = *(_DWORD *)(v6 + 104);
  AGCLLVMGen3TargetLowerer::buildSimdBarrier(v6, (uint64_t)&v35);
  if (v36)
    llvm::MetadataTracking::untrack();
  switch(**(_DWORD **)(a1 + 16))
  {
    case 0:
      break;
    case 1:
      v39 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(v6 + 8), 36, (llvm::CmpInst **)v8, (uint64_t)a3, (uint64_t)v38);
      v34 = 257;
      llvm::IRBuilderBase::CreateSub(v7, v8, a3, (const llvm::Twine *)v33);
      v32 = 257;
      goto LABEL_14;
    case 2:
      v39 = 257;
      Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v6 + 8), v8, a3, (const llvm::Twine *)v38);
      v15 = llvm::ConstantInt::get();
      v39 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(v6 + 8), 34, Add, v15, (uint64_t)v38);
      v34 = 257;
LABEL_14:
      Select = llvm::IRBuilderBase::CreateSelect();
      goto LABEL_19;
    case 3:
      v39 = 257;
      Select = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)(v6 + 8), v8, a3, (const llvm::Twine *)v38);
      goto LABEL_19;
    case 4:
      v17 = *(_QWORD *)(v6 + 200);
      v39 = 257;
      v18 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v6 + 8, 40, (uint64_t)v8, v17, (uint64_t)v38);
      v19 = *(_QWORD *)(v6 + 200);
      v34 = 257;
      v20 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v6 + 8, 40, (uint64_t)a3, v19, (uint64_t)v33);
      v32 = 257;
      Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(v6 + 8), v18, v20, (const llvm::Twine *)v31);
      v22 = (llvm::Value *)llvm::ConstantInt::get();
      v30 = 257;
      v23 = (const llvm::Twine *)&v29;
      goto LABEL_18;
    case 5:
      v39 = 257;
      Sub = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(v6 + 8), v8, a3, (const llvm::Twine *)v38);
      v22 = (llvm::Value *)llvm::ConstantInt::get();
      v34 = 257;
      v23 = (const llvm::Twine *)v33;
LABEL_18:
      Select = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v6 + 8), Sub, v22, v23);
LABEL_19:
      a3 = (llvm::Value *)Select;
      break;
    default:
      a3 = 0;
      break;
  }
  v24 = *a2;
  v39 = 257;
  v25 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v7, v24, Cast, a3, (const llvm::Twine *)v38);
  v39 = 257;
  v27 = AGCLLVMBuilder::tryDeducePointeeType(v25, v26);
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v7, v27, (uint64_t)v25, 0, (uint64_t)v38);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t Cast;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.quad.element", "");
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = a1 + 8;
  v13 = 257;
  v8 = llvm::IRBuilderBase::CreateCall(v7, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19)
    free(v17);
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *Cast;
  llvm::Value *v10;
  llvm::Value *Sub;
  llvm::Type *v12;
  llvm::Value *v13;
  llvm::Value *Mul;
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  _QWORD v24[4];
  __int16 v25;

  v21 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a2 + 16);
  if (v22)
    llvm::MetadataTracking::track();
  v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22)
    llvm::MetadataTracking::untrack();
  v6 = *(_QWORD *)(a1 + 2528);
  if (!v6)
  {
    llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 184), (llvm::Type *)0x1000);
    v7 = llvm::User::operator new((llvm::User *)0x58);
    llvm::UndefValue::get();
    v24[0] = "agc.simd_permute_emulation_scratchpad";
    v25 = 259;
    llvm::GlobalVariable::GlobalVariable();
    llvm::GlobalObject::setAlignment();
    *(_DWORD *)(v7 + 32) = *(_DWORD *)(v7 + 32) & 0xFFFFFF3F | 0x80;
    llvm::GlobalObject::setSection();
    llvm::ValueHandleBase::operator=((llvm::ValueHandleBase *)(a1 + 2512), v7);
    v6 = *(_QWORD *)(a1 + 2528);
  }
  v8 = llvm::PointerType::get();
  v25 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v6, v8, (uint64_t)v24);
  v18 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v20 = *(_DWORD *)(a1 + 104);
  v10 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalLinearID(a1, (uint64_t)&v18, *(_QWORD *)(a1 + 192));
  if (v19)
    llvm::MetadataTracking::untrack();
  v25 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v10, a3, (const llvm::Twine *)v24);
  v12 = *(llvm::Type **)(a1 + 184);
  v13 = (llvm::Value *)llvm::ConstantInt::get();
  v25 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), Sub, v13, (const llvm::Twine *)v24);
  v17 = 257;
  return llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v12, Cast, Mul, (const llvm::Twine *)v16);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildSimdBarrier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  v13[0] = llvm::ConstantInt::get();
  v13[1] = llvm::ConstantInt::get();
  v4 = *(_QWORD *)(a1 + 952);
  if (v4)
    v5 = strlen(*(const char **)(a1 + 952));
  else
    v5 = 0;
  v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v4, v5, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192));
  v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v6 + 24), v6, (uint64_t)v13, 2, (uint64_t)v8);
}

uint64_t AGCLLVMGen3TargetLowerer::buildLocalLinearID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t Cast;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.linear.id", "");
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = a1 + 8;
  v13 = 257;
  v8 = llvm::IRBuilderBase::CreateCall(v7, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19)
    free(v17);
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildPermute(AGCLLVMGen3TargetLowerer *this, char *a2, llvm::Type **a3, llvm::Value *a4)
{
  llvm::Value *v5;
  llvm::Type *v8;
  int ScalarSizeInBits;
  int v10;
  unsigned int v11;
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t InsertElement;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::Value *v21;
  uint64_t Element;
  uint64_t v23;
  llvm::Value *Cast;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  _BYTE v28[32];
  __int16 v29;

  v5 = (llvm::Value *)a3;
  v8 = *a3;
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(*a3);
  if (ScalarSizeInBits == 32)
    return AGCLLVMGen3TargetLowerer::buildPermute32(this, a2, v5, a4);
  if (ScalarSizeInBits == 16)
    return AGCLLVMGen3TargetLowerer::buildPermute16(this, a2, v5, a4);
  if (ScalarSizeInBits != 8)
    return 0;
  if ((*((_DWORD *)v8 + 2) & 0xFE) == 0x12)
  {
    v10 = *((_DWORD *)v8 + 8);
    if ((v10 & 1) != 0)
    {
      v11 = v10 + 1;
      v5 = AGCLLVMBuilder::extendVector(this, v5, v10 + 1);
    }
    else
    {
      v11 = *((_DWORD *)v8 + 8);
    }
    if (v11 < 4)
      v23 = *((_QWORD *)this + 24);
    else
      v23 = llvm::FixedVectorType::get();
    v29 = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v5, v23, (uint64_t)v28);
    v25 = AGCLLVMGen3TargetLowerer::buildPermute16(this, a2, Cast, a4);
    v26 = llvm::FixedVectorType::get();
    v29 = 257;
    v27 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v25, v26, (uint64_t)v28);
    if ((v10 & 1) == 0)
      goto LABEL_18;
    Element = AGCLLVMBuilder::subrangeVector(this, v27, 0, v11 - 1, 1);
  }
  else
  {
    v13 = (llvm::Value *)llvm::UndefValue::get();
    v29 = 257;
    v14 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = llvm::IRBuilderBase::CreateInsertElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v13, v5, v14, (const llvm::Twine *)v28);
    v16 = *((_QWORD *)this + 24);
    v29 = 257;
    v17 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, InsertElement, v16, (uint64_t)v28);
    v18 = AGCLLVMGen3TargetLowerer::buildPermute16(this, a2, v17, a4);
    v19 = *((_QWORD *)this + 29);
    v29 = 257;
    v20 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v18, v19, (uint64_t)v28);
    v29 = 257;
    v21 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v20, v21, (const llvm::Twine *)v28);
  }
  v27 = (llvm::Value *)Element;
LABEL_18:
  v29 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v27, (uint64_t)v8, (uint64_t)v28);
}

uint64_t AGCLLVMGen3TargetLowerer::buildPermute16(AGCLLVMGen3TargetLowerer *this, char *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v8;
  std::string *v9;
  std::string::size_type v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t Element;
  uint64_t v18;
  llvm::Value *v19;
  uint64_t v20;
  llvm::Value *v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Value *v24;
  llvm::Value *v25;
  llvm::Value *v26;
  uint64_t InsertElement;
  uint64_t v28;
  llvm::Value *v29;
  uint64_t v30;
  std::string v32;
  __int16 v33;
  void *__p[2];
  uint64_t v35;
  uint64_t Cast;
  llvm::Value *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)a3;
  std::string::basic_string[abi:nn180100]<0>(&v32, a2);
  v9 = std::string::append(&v32, ".u.i16");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v35 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v35 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v35 >= 0)
    v12 = HIBYTE(v35);
  else
    v12 = (uint64_t)__p[1];
  v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v11, v12, *((_QWORD *)this + 24), *((_QWORD *)this + 24), *((_QWORD *)this + 24));
  if ((*(_DWORD *)(v8 + 8) & 0xFE) == 0x12)
  {
    v14 = *(_DWORD *)(v8 + 32);
    if (v14 < 4)
    {
      v15 = *((_QWORD *)this + 25);
      if ((v14 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      v15 = llvm::FixedVectorType::get();
      if ((v14 & 1) != 0)
      {
LABEL_12:
        v33 = 257;
        v16 = (llvm::Value *)llvm::ConstantInt::get();
        Element = llvm::IRBuilderBase::CreateExtractElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), a3, v16, (const llvm::Twine *)&v32);
        v18 = *((_QWORD *)this + 24);
        v33 = 257;
        Cast = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, Element, v18, (uint64_t)&v32);
        v37 = a4;
        v33 = 257;
        v19 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v13 + 24), v13, (uint64_t)&Cast, 2, (uint64_t)&v32);
        v20 = AGCLLVMBuilder::subrangeVector(this, a3, 0, v14 - 1, 1);
        v33 = 257;
        v21 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v20, v15, (uint64_t)&v32);
        v22 = AGCLLVMGen3TargetLowerer::buildPermute32(this, a2, v21, a4);
        v23 = llvm::FixedVectorType::get();
        v33 = 257;
        v24 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, v22, v23, (uint64_t)&v32);
        v25 = AGCLLVMBuilder::extendVector(this, v24, v14);
        v33 = 257;
        v26 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = llvm::IRBuilderBase::CreateInsertElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), v25, v19, v26, (const llvm::Twine *)&v32);
        goto LABEL_16;
      }
    }
    v33 = 257;
    v29 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a3, v15, (uint64_t)&v32);
    InsertElement = AGCLLVMGen3TargetLowerer::buildPermute32(this, a2, v29, a4);
  }
  else
  {
    v28 = *((_QWORD *)this + 24);
    v33 = 257;
    Cast = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a3, v28, (uint64_t)&v32);
    v37 = a4;
    v33 = 257;
    InsertElement = (uint64_t)llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v13 + 24), v13, (uint64_t)&Cast, 2, (uint64_t)&v32);
  }
LABEL_16:
  v33 = 257;
  v30 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, InsertElement, v8, (uint64_t)&v32);
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
  return v30;
}

uint64_t AGCLLVMGen3TargetLowerer::buildPermute32(AGCLLVMGen3TargetLowerer *this, char *a2, llvm::Value *a3, llvm::Value *a4)
{
  uint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  llvm::Value *InsertElement;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  uint64_t v21;
  uint64_t v22;
  std::string v24;
  __int16 v25;
  void *__p[2];
  uint64_t v27;
  uint64_t Cast;
  llvm::Value *v29;
  llvm::Value *v30[2];
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)a3;
  std::string::basic_string[abi:nn180100]<0>(&v24, a2);
  v8 = std::string::append(&v24, ".u.i32");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v27 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v27 >= 0)
    v11 = HIBYTE(v27);
  else
    v11 = (uint64_t)__p[1];
  v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)this, (uint64_t)v10, v11, *((_QWORD *)this + 25), *((_QWORD *)this + 25), *((_QWORD *)this + 24));
  if ((*(_DWORD *)(v7 + 8) & 0xFE) == 0x12)
  {
    *(_OWORD *)v30 = 0u;
    v31 = 0u;
    v13 = AGCLLVMBuilder::unboxVector(this, a3, v30);
    llvm::FixedVectorType::get();
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    if (v13)
    {
      v15 = 0;
      v16 = v13;
      do
      {
        Cast = 0;
        v29 = 0;
        v17 = v30[v15];
        v18 = *((_QWORD *)this + 25);
        v25 = 257;
        Cast = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)v17, v18, (uint64_t)&v24);
        v29 = a4;
        v25 = 257;
        v19 = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v12 + 24), v12, (uint64_t)&Cast, 2, (uint64_t)&v24);
        v25 = 257;
        v20 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((AGCLLVMGen3TargetLowerer *)((char *)this + 8), InsertElement, v19, v20, (const llvm::Twine *)&v24);
        ++v15;
      }
      while (v16 != v15);
    }
  }
  else
  {
    v21 = *((_QWORD *)this + 25);
    v25 = 257;
    v30[0] = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)a3, v21, (uint64_t)&v24);
    v30[1] = a4;
    v25 = 257;
    InsertElement = llvm::IRBuilderBase::CreateCall((uint64_t)this + 8, *(_QWORD *)(v12 + 24), v12, (uint64_t)v30, 2, (uint64_t)&v24);
  }
  v25 = 257;
  v22 = llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 49, (uint64_t)InsertElement, v7, (uint64_t)&v24);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  return v22;
}

llvm::Value *llvm::IRBuilderBase::CreateZExtOrBitCast(llvm::IRBuilderBase *this, llvm::Type **a2, llvm::Type *a3, const llvm::Twine *a4)
{
  llvm::Value *ZExtOrBitCast;
  BOOL v7;

  ZExtOrBitCast = (llvm::Value *)a2;
  if (*a2 != a3)
  {
    if (*((unsigned __int8 *)a2 + 16) > 0x14u)
    {
      ZExtOrBitCast = (llvm::Value *)llvm::CastInst::CreateZExtOrBitCast();
      llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)ZExtOrBitCast, (uint64_t)a4);
    }
    else
    {
      ZExtOrBitCast = (llvm::Value *)(*(uint64_t (**)(_QWORD, llvm::Type **, llvm::Type *))(**((_QWORD **)this + 9) + 288))(*((_QWORD *)this + 9), a2, a3);
      if (ZExtOrBitCast)
        v7 = *((unsigned __int8 *)ZExtOrBitCast + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
        llvm::IRBuilderBase::Insert<llvm::Instruction>((uint64_t *)this, (uint64_t)ZExtOrBitCast, (uint64_t)a4);
    }
  }
  return ZExtOrBitCast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteImageBlockSwitch(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::BasicBlock *a6, uint64_t a7)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Cast;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t i;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  llvm::Value *v25;
  uint64_t Add;
  char v27[32];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;

  v11 = a1 + 1;
  a1[7] = a4;
  a1[8] = a4 + 40;
  v12 = *(_QWORD *)(a2 + 104);
  v13 = a1[26];
  v30 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, v12, v13, (uint64_t)v29);
  v15 = a1[24];
  v28 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v11, 38, Cast, v15, (uint64_t)v27);
  if (*(_QWORD *)(a2 + 248))
  {
    v29[0] = "default";
    v30 = 259;
    v17 = operator new();
    llvm::BasicBlock::BasicBlock();
    llvm::IRBuilderBase::CreateSwitch(v11, (uint64_t)v16, v17, 8);
    a1[7] = v17;
    a1[8] = v17 + 40;
    result = llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)v11, a6);
    for (i = 0; i != 8; ++i)
    {
      v20 = *(_DWORD *)(*(_QWORD *)(a2 + 248) + 4 * i);
      if ((v20 & 0x1F) != 0)
      {
        v29[0] = "render_target_index";
        v30 = 259;
        operator new();
        v21 = llvm::BasicBlock::BasicBlock();
        a1[7] = v21;
        a1[8] = v21 + 40;
        if ((v20 & 0x100) != 0)
          LOBYTE(v20) = v20 & 0xE0 | 1;
        (*(void (**)(uint64_t *))(*a1 + 680))(a1);
        AGCLLVMGen3TargetLowerer::getUSCFormatFromState((AGCLLVMGen3TargetLowerer *)(v20 & 0x1F), 0);
        v22 = llvm::ConstantInt::get();
        v23 = llvm::ConstantInt::get();
        llvm::ConstantInt::get();
        llvm::SwitchInst::addCase();
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1528))(a1, a2, v22, v23, a7);
        result = llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)v11, a6);
      }
    }
  }
  else
  {
    AGCLLVMGen3TargetLowerer::getUSCFormatFromState((AGCLLVMGen3TargetLowerer *)*(unsigned int *)(a2 + 12), 0);
    v24 = llvm::ConstantInt::get();
    v25 = (llvm::Value *)llvm::ConstantInt::get();
    v30 = 257;
    Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)v11, v25, v16, (const llvm::Twine *)v29);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1528))(a1, a2, v24, Add, a7);
    return llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)v11, a6);
  }
  return result;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildWriteConversionIntrinsic(uint64_t *a1, __int128 *a2, void *a3, size_t a4, uint64_t a5, uint64_t a6, llvm::Type *a7, llvm::Type **a8)
{
  uint64_t v16;
  uint64_t v17;
  std::string::size_type size;
  std::string *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  void **v24;
  std::string::size_type v25;
  int v26;
  std::string *p_str;
  std::string::size_type v28;
  llvm::Type *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  const char *v33;
  uint64_t v34;
  void **v35;
  std::string::size_type v36;
  uint64_t v37;
  llvm::Value *v38;
  void *v40[2];
  unsigned __int8 v41;
  __int16 v42;
  void *__p[2];
  uint64_t v44;
  void *v45;
  char v46;
  uint64_t v47;
  std::string __str;
  std::string __dst;
  __int128 v50;
  uint64_t v51;
  int v52;
  std::string v53;
  std::string v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v50 = *a2;
  v51 = *((_QWORD *)a2 + 2);
  if (v51)
    llvm::MetadataTracking::track();
  v52 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v50, (uint64_t)(a1 + 1));
  if (v51)
    llvm::MetadataTracking::untrack();
  AGCLLVMGen3TargetLowerer::getMemoryWriteIntrinsicArgsFromIR((uint64_t)a1, *a8, a5, a6);
  v17 = v16;
  if (a3)
    std::string::basic_string[abi:nn180100](&__dst, a3, a4);
  else
    memset(&__dst, 0, sizeof(__dst));
  AGCLLVMGen3TargetLowerer::getWriteSuffix((AGCLLVMGen3TargetLowerer *)&__str, (llvm::Type *)a1, v17);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  v19 = std::string::basic_string(&v53, &__str, size - 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  v20 = std::string::insert(v19, 0, "sz");
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v54, ".");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v44 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  if (v44 >= 0)
    v25 = HIBYTE(v44);
  else
    v25 = (std::string::size_type)__p[1];
  std::string::insert(&__str, 0, (const std::string::value_type *)v24, v25);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((*((_DWORD *)*a8 + 2) & 0xFE) == 0x12)
    v26 = *((_DWORD *)*a8 + 8);
  else
    v26 = 1;
  std::string::insert(&__str, 0, off_1E7ECBD18[v26 - 1]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v28 = __str.__r_.__value_.__l.__size_;
  std::string::append(&__dst, (const std::string::value_type *)p_str, v28);
  if (v26 == 3)
    a8 = (llvm::Type **)AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, (llvm::Value *)a8, 4);
  v29 = *a8;
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54.__r_.__value_.__r.__words[2];
  v54.__r_.__value_.__l.__size_ = 0x300000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v54, a1[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v54, a1[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v54, (uint64_t)v29);
  v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53.__r_.__value_.__r.__words[2];
  v53.__r_.__value_.__l.__size_ = 0x300000000;
  v30 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v53, v30);
  v31 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v53, v31);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v53, (uint64_t)a8);
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)__p);
  if ((*((_DWORD *)a7 + 2) & 0xFE) == 0x12)
  {
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)".v", 2);
    v32 = (_QWORD *)std::ostream::operator<<();
    v33 = "i";
    v34 = 1;
  }
  else
  {
    v33 = ".i";
    v32 = __p;
    v34 = 2;
  }
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
  llvm::Type::getScalarSizeInBits(a7);
  std::ostream::operator<<();
  std::stringbuf::str();
  if ((v41 & 0x80u) == 0)
    v35 = v40;
  else
    v35 = (void **)v40[0];
  if ((v41 & 0x80u) == 0)
    v36 = v41;
  else
    v36 = (std::string::size_type)v40[1];
  std::string::append(&__dst, (const std::string::value_type *)v35, v36);
  if ((char)v41 < 0)
    operator delete(v40[0]);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v42 = 257;
  v38 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v37 + 24), v37, (uint64_t)v53.__r_.__value_.__l.__data_, LODWORD(v53.__r_.__value_.__r.__words[1]), (uint64_t)v40);
  __p[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v46 < 0)
    operator delete(v45);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA2D638](&v47);
  if ((std::string::size_type *)v53.__r_.__value_.__l.__data_ != &v53.__r_.__value_.__r.__words[2])
    free(v53.__r_.__value_.__l.__data_);
  if ((std::string::size_type *)v54.__r_.__value_.__l.__data_ != &v54.__r_.__value_.__r.__words[2])
    free(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v38;
}

unint64_t AGCLLVMGen3TargetLowerer::getMemoryWriteIntrinsicArgsFromIR(uint64_t a1, llvm::Type *this, uint64_t a3, uint64_t a4)
{
  llvm::Type *v6;
  int Key;
  uint64_t v8;
  unsigned int v9;
  int8x8_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint8x8_t v21;

  v6 = this;
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
    v6 = (llvm::Type *)**((_QWORD **)this + 2);
  if (a4)
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1)
      v8 = *(unsigned int *)(a1 + 2280);
    else
      v8 = Key;
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2272) + 8 * v8) + 8);
    v18 = HIDWORD(v16);
    v19 = HIWORD(v16);
  }
  else
  {
    llvm::Type::getPrimitiveSizeInBits(v6);
    v9 = llvm::TypeSize::operator unsigned long long();
    v11 = *(_QWORD *)(a1 + 2256);
    if (!v11)
      goto LABEL_17;
    v12 = a1 + 2256;
    do
    {
      v13 = *(_DWORD *)(v11 + 32);
      v14 = v13 >= v9;
      if (v13 >= v9)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v12 = v11;
      v11 = *v15;
    }
    while (*v15);
    if (v12 == a1 + 2256 || *(_DWORD *)(v12 + 32) > v9)
LABEL_17:
      v12 = a1 + 2256;
    v16 = *(_QWORD *)(v12 + 40);
    if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
      v17 = *((_DWORD *)this + 8);
    else
      v17 = 1;
    if (*((_DWORD *)v6 + 2) >> 8 >= 0x21u && *((_DWORD *)v6 + 2) == 13)
      v17 /= *(_DWORD *)(*(_QWORD *)(a1 + 192) + 8) >> 12;
    v20 = -1 << v17;
    v10.i32[0] = (unsigned __int16)~(_WORD)v20;
    v21 = (uint8x8_t)vcnt_s8(v10);
    v21.i16[0] = vaddlv_u8(v21);
    if (WORD2(v16))
      v19 = HIWORD(v16);
    else
      v19 = v21.u32[0];
    if (WORD2(v16))
      LOWORD(v18) = WORD2(*(_QWORD *)(v12 + 40));
    else
      LOWORD(v18) = ~(_WORD)v20;
  }
  llvm::FixedVectorType::get();
  return (v19 << 48) | ((unint64_t)(unsigned __int16)v18 << 32) | v16;
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildReadConversionIntrinsic(uint64_t *a1, __int128 *a2, void *a3, size_t a4, uint64_t a5, uint64_t a6, llvm::Type ***a7, uint64_t *Cast)
{
  unint64_t IntrinsicArgsFromIR;
  llvm::Type *v17;
  llvm::Type *v18;
  std::string::size_type size;
  std::string *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  void **v25;
  std::string::size_type v26;
  std::string *p_str;
  std::string::size_type v28;
  llvm::Type *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string *v33;
  std::string::size_type v34;
  std::string *p_dst;
  std::string::size_type v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  std::string v41;
  __int16 v42;
  void *__p[2];
  uint64_t v44;
  void *v45;
  char v46;
  uint64_t v47;
  std::string __str;
  std::string __dst;
  __int128 v50;
  uint64_t v51;
  int v52;
  std::string v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v50 = *a2;
  v51 = *((_QWORD *)a2 + 2);
  if (v51)
    llvm::MetadataTracking::track();
  v52 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v50, (uint64_t)(a1 + 1));
  if (v51)
    llvm::MetadataTracking::untrack();
  IntrinsicArgsFromIR = AGCLLVMGen3TargetLowerer::getMemoryReadIntrinsicArgsFromIR((uint64_t)a1, a7, a5, a6);
  v18 = v17;
  if (a3)
    std::string::basic_string[abi:nn180100](&__dst, a3, a4);
  else
    memset(&__dst, 0, sizeof(__dst));
  AGCLLVMGen3TargetLowerer::getReadSuffix(&__str, (llvm::Type *)a1, (uint64_t)v18, HIWORD(IntrinsicArgsFromIR));
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  v20 = std::string::basic_string(&v53, &__str, size - 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  v21 = std::string::insert(v20, 0, "sz");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v41, ".");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v44 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0)
    v25 = __p;
  else
    v25 = (void **)__p[0];
  if (v44 >= 0)
    v26 = HIBYTE(v44);
  else
    v26 = (std::string::size_type)__p[1];
  std::string::insert(&__str, 2uLL, (const std::string::value_type *)v25, v26);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v28 = __str.__r_.__value_.__l.__size_;
  std::string::append(&__dst, (const std::string::value_type *)p_str, v28);
  std::ostringstream::basic_ostringstream[abi:nn180100]((uint64_t)__p);
  v29 = (llvm::Type *)*Cast;
  if (*(_DWORD *)(*Cast + 8) == 15)
  {
    v30 = llvm::PointerType::get();
    v42 = 257;
    Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, (uint64_t)Cast, v30, (uint64_t)&v41);
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)".p", 2);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v31, (uint64_t)"i8", 2);
  }
  else
  {
    if ((*(_DWORD *)(*Cast + 8) & 0xFE) == 0x12)
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)".v", 2);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v32, (uint64_t)"i", 1);
    }
    else
    {
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(__p, (uint64_t)".i", 2);
    }
    llvm::Type::getScalarSizeInBits(v29);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v41;
  else
    v33 = (std::string *)v41.__r_.__value_.__r.__words[0];
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  else
    v34 = v41.__r_.__value_.__l.__size_;
  std::string::append(&__dst, (const std::string::value_type *)v33, v34);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v36 = __dst.__r_.__value_.__l.__size_;
  v37 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)p_dst, v36, (uint64_t)v18, a1[24], a1[24], *Cast);
  v53.__r_.__value_.__r.__words[0] = llvm::ConstantInt::get();
  v53.__r_.__value_.__l.__size_ = llvm::ConstantInt::get();
  v53.__r_.__value_.__r.__words[2] = (std::string::size_type)Cast;
  v42 = 257;
  v38 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v37 + 24), v37, (uint64_t)&v53, 3, (uint64_t)&v41);
  v39 = AGCLLVMGen3TargetLowerer::reconcileLLVMReadIntrinsicResultWithIR((AGCLLVMGen3TargetLowerer *)a1, a7, v18, v38);
  __p[0] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v46 < 0)
    operator delete(v45);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1CAA2D638](&v47);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v39;
}

unint64_t AGCLLVMGen3TargetLowerer::getMemoryReadIntrinsicArgsFromIR(uint64_t a1, llvm::Type ***this, uint64_t a3, uint64_t a4)
{
  llvm::Type *v4;
  int v6;
  llvm::Type *v7;
  int Key;
  uint64_t v9;
  unsigned int v10;
  int8x8_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint8x8_t v21;

  v4 = (llvm::Type *)this;
  v6 = *((unsigned __int8 *)this + 8);
  if (v6 == 15)
  {
    v4 = *this[2];
    v6 = *((_DWORD *)v4 + 2);
  }
  v7 = v4;
  if ((v6 & 0xFE) == 0x12)
    v7 = (llvm::Type *)**((_QWORD **)v4 + 2);
  if (a4)
  {
    Key = llvm::StringMapImpl::FindKey();
    if (Key == -1)
      v9 = *(unsigned int *)(a1 + 2280);
    else
      v9 = Key;
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2272) + 8 * v9) + 8);
    v18 = HIDWORD(v17);
    v19 = HIWORD(v17);
  }
  else
  {
    llvm::Type::getPrimitiveSizeInBits(v7);
    v10 = llvm::TypeSize::operator unsigned long long();
    v12 = *(_QWORD *)(a1 + 2256);
    if (!v12)
      goto LABEL_19;
    v13 = a1 + 2256;
    do
    {
      v14 = *(_DWORD *)(v12 + 32);
      v15 = v14 >= v10;
      if (v14 >= v10)
        v16 = (uint64_t *)v12;
      else
        v16 = (uint64_t *)(v12 + 8);
      if (v15)
        v13 = v12;
      v12 = *v16;
    }
    while (*v16);
    if (v13 == a1 + 2256 || *(_DWORD *)(v13 + 32) > v10)
LABEL_19:
      v13 = a1 + 2256;
    v17 = *(_QWORD *)(v13 + 40);
    if (WORD2(v17))
    {
      v18 = HIDWORD(v17);
      v19 = HIWORD(v17);
    }
    else
    {
      if ((*((_DWORD *)v4 + 2) & 0xFE) == 0x12)
        v20 = *((_DWORD *)v4 + 8);
      else
        LOBYTE(v20) = 1;
      LOWORD(v18) = ~(unsigned __int16)(-1 << v20);
      v11.i32[0] = (unsigned __int16)~(-1 << v20);
      v21 = (uint8x8_t)vcnt_s8(v11);
      v21.i16[0] = vaddlv_u8(v21);
      v19 = v21.u32[0];
    }
  }
  if ((unsigned __int16)(v19 - 2) <= 2u)
    llvm::FixedVectorType::get();
  return ((unint64_t)(unsigned __int16)v18 << 32) | (v19 << 48) | v17;
}

uint64_t AGCLLVMGen3TargetLowerer::buildCopyOffChipMRTPixelDataStateless(uint64_t a1, _QWORD *a2, uint64_t a3, AGCLLVMGen3TargetLowerer *a4, __int16 a5, uint64_t a6, uint64_t a7, int a8, llvm::Value *a9, uint64_t a10, llvm::Value *a11)
{
  uint64_t v17;
  llvm::Value *Cast;
  llvm::Value *v19;
  llvm::Value *Sub;
  llvm::Value *Mul;
  uint64_t Add;
  llvm::Value *InsertElement;
  uint64_t v24;
  char v25;
  char v26;
  llvm::Value *v27;
  llvm::Value *v28;
  uint64_t v29;
  llvm::Type *v30;
  llvm::Value *GEP;
  llvm::Type *v32;
  int v33;
  uint64_t v34;
  llvm::Value *EMRTTileBuffer;
  llvm::Value *v36;
  uint64_t v37;
  llvm::BasicBlock *v38;
  uint64_t v39;
  char v40;
  char v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Type *v44;
  llvm::BasicBlock *v45;
  uint64_t FirstInsertionPt;
  llvm::Type *v47;
  llvm::User *PHI;
  llvm::Type *v49;
  uint64_t v50;
  llvm::Type *v51;
  llvm::User *v52;
  llvm::Type *v53;
  llvm::User *v54;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::CmpInst **Element;
  uint64_t ICmp;
  int v62;
  llvm::Value *v63;
  uint64_t v64;
  llvm::Value *v65;
  llvm::Value *v66;
  uint64_t v67;
  llvm::BasicBlock *v68;
  llvm::BasicBlock *v69;
  llvm::Value *v70;
  llvm::Value *v71;
  llvm::Value *v72;
  llvm::Value *v73;
  llvm::Value *v74;
  llvm::Value *v75;
  uint64_t v76;
  llvm::Value *v77;
  llvm::Value *v78;
  llvm::Value *v79;
  llvm::Value *Select;
  llvm::Value *v81;
  llvm::Value *v82;
  uint64_t result;
  int v84;
  llvm::PHINode *v85;
  llvm::PHINode *v86;
  llvm::User *v87;
  uint64_t v88;
  llvm::BasicBlock *v89;
  uint64_t v90;
  llvm::Type *v93;
  llvm::Value *v94;
  llvm::BasicBlock *v95;
  uint64_t v96;
  int v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  _QWORD v101[4];
  __int128 v102;
  uint64_t v103;
  int v104;
  _QWORD v105[4];
  __int16 v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[32];
  __int16 v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  uint64_t v117;
  int v118;
  __int16 v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v111 = *(_OWORD *)a3;
  v112 = *(_QWORD *)(a3 + 16);
  if (v112)
    llvm::MetadataTracking::track();
  v113 = *(_DWORD *)(a3 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a2, &v111);
  if (v112)
    llvm::MetadataTracking::untrack();
  v17 = a2[24];
  v106 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a2 + 1), 38, a10, v17, (uint64_t)v105);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v106 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a2 + 1), a9, v19, (const llvm::Twine *)v105);
  v119 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a2 + 1), a11, Sub, (const llvm::Twine *)v116);
  v110 = 257;
  v94 = Cast;
  Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a2 + 1), Cast, Mul, (const llvm::Twine *)v109);
  v107 = 0;
  v108 = 0;
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, AGCLLVMGen3TargetLowerer *, uint64_t, _QWORD, _QWORD))(*a2 + 560))(v105, a2, a4, a7, 0, 0);
  v108 = llvm::FixedVectorType::get();
  LOWORD(v107) = AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a4, a7);
  WORD1(v107) = (_WORD)a4;
  WORD2(v107) = (1 << a5) - 1;
  HIWORD(v107) = a5;
  if (a8)
  {
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    v24 = 0;
    v25 = 1;
    do
    {
      v26 = v25;
      v102 = *(_OWORD *)(a2 + 7);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 1));
      v104 = *((_DWORD *)a2 + 26);
      v27 = (llvm::Value *)(*(uint64_t (**)(_QWORD *, __int128 *, _QWORD, uint64_t))(*a2 + 256))(a2, &v102, a2[24], v24);
      v119 = 257;
      v28 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a2 + 1), InsertElement, v27, v28, (const llvm::Twine *)v116);
      if (v103)
        llvm::MetadataTracking::untrack();
      v25 = 0;
      v24 = 1;
    }
    while ((v26 & 1) != 0);
    v29 = (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t, llvm::Value *))(*a2 + 1616))(a2, WORD1(v107), HIWORD(v107), a6, Add, InsertElement);
    if ((_DWORD)a6)
    {
      GEP = (llvm::Value *)v29;
      v32 = v30;
      v33 = 0;
      do
      {
        v34 = llvm::ConstantInt::get();
        EMRTTileBuffer = AGCLLVMGen3TargetLowerer::buildLoadEMRTTileBuffer((AGCLLVMGen3TargetLowerer *)a2, (unsigned __int16 *)&v107, v34, (uint64_t)GEP);
        v36 = (llvm::Value *)llvm::ConstantInt::get();
        v119 = 257;
        GEP = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a2 + 1), v32, GEP, v36, (const llvm::Twine *)v116);
        v37 = llvm::ConstantInt::get();
        BYTE1(v84) = 1;
        LOBYTE(v84) = *((_BYTE *)a2 + 1770);
        (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t *, uint64_t, llvm::Value *, llvm::Value *, llvm::Value *, uint64_t, uint64_t, llvm::Value *, int))(*a2 + 1608))(v101, a2, &v107, a6, a11, EMRTTileBuffer, v94, v37, 1, InsertElement, v84);
        if (v101[2])
          llvm::MetadataTracking::untrack();
        ++v33;
      }
      while (a6 > v33);
    }
  }
  else
  {
    v116[0] = "itr_x";
    v119 = 259;
    v38 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v116[0] = "itr_y";
    v119 = 259;
    v89 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    v116[0] = "done";
    v119 = 259;
    v88 = operator new();
    llvm::BasicBlock::BasicBlock();
    v39 = 0;
    v114 = 0;
    v115 = 0;
    v40 = 1;
    do
    {
      v41 = v40;
      v98 = *(_OWORD *)(a2 + 7);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 1));
      v100 = *((_DWORD *)a2 + 26);
      *(&v114 + v39) = AGCLLVMGen3TargetLowerer::buildLocalSize((uint64_t)a2, (uint64_t)&v98, a2[24], v39);
      if (v99)
        llvm::MetadataTracking::untrack();
      v40 = 0;
      v39 = 1;
    }
    while ((v41 & 1) != 0);
    v116[0] = llvm::ConstantInt::get();
    v116[1] = llvm::ConstantInt::get();
    v42 = (llvm::Value *)llvm::ConstantVector::get();
    v43 = (llvm::Value *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(*a2 + 1616))(a2, WORD1(v107), HIWORD(v107), a6, Add, 0);
    v93 = v44;
    v45 = (llvm::BasicBlock *)a2[7];
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a2 + 1), v89);
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v89);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)(a2 + 1), (uint64_t)v89, FirstInsertionPt);
    v47 = (llvm::Type *)a2[30];
    v119 = 257;
    PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(a2 + 1), v47, 2, (const llvm::Twine *)v116);
    llvm::PHINode::addIncoming(PHI, v42, v45);
    v49 = *(llvm::Type **)v43;
    v119 = 257;
    v87 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(a2 + 1), v49, 2, (const llvm::Twine *)v116);
    llvm::PHINode::addIncoming(v87, v43, v45);
    v50 = llvm::BasicBlock::getFirstInsertionPt(v38);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)(a2 + 1), (uint64_t)v38, v50);
    v51 = (llvm::Type *)a2[30];
    v119 = 257;
    v52 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(a2 + 1), v51, 2, (const llvm::Twine *)v116);
    v53 = *(llvm::Type **)v43;
    v119 = 257;
    v54 = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(a2 + 1), v53, 2, (const llvm::Twine *)v116);
    a2[7] = v89;
    a2[8] = (char *)v89 + 40;
    v55 = (llvm::Value *)llvm::ConstantInt::get();
    v119 = 257;
    v56 = (llvm::Value *)llvm::ConstantInt::get();
    v85 = PHI;
    v57 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a2 + 1), PHI, v55, v56, (const llvm::Twine *)v116);
    v58 = v52;
    llvm::PHINode::addIncoming(v52, v57, v89);
    v86 = v54;
    llvm::PHINode::addIncoming(v54, v87, v89);
    v119 = 257;
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    Element = (llvm::CmpInst **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a2 + 1), v57, v59, (const llvm::Twine *)v116);
    v110 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp(a2 + 1, 32, Element, v115, (uint64_t)v109);
    llvm::IRBuilderBase::CreateCondBr(a2 + 1, ICmp, v88, (uint64_t)v38);
    v90 = (uint64_t)v38;
    a2[7] = v38;
    a2[8] = (char *)v38 + 40;
    v97 = 0;
    v96 = 0;
    if ((_DWORD)a6)
    {
      v62 = 0;
      v63 = v54;
      do
      {
        v64 = llvm::ConstantInt::get();
        v65 = AGCLLVMGen3TargetLowerer::buildLoadEMRTTileBuffer((AGCLLVMGen3TargetLowerer *)a2, (unsigned __int16 *)&v107, v64, (uint64_t)v63);
        v66 = (llvm::Value *)llvm::ConstantInt::get();
        v119 = 257;
        v63 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a2 + 1), v93, v63, v66, (const llvm::Twine *)v116);
        v67 = llvm::ConstantInt::get();
        BYTE1(v84) = 1;
        LOBYTE(v84) = *((_BYTE *)a2 + 1770);
        (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t *, uint64_t, llvm::Value *, llvm::Value *, llvm::Value *, uint64_t, uint64_t, llvm::Value *, int, llvm::PHINode *))(*a2 + 1608))(v116, a2, &v107, a6, a11, v65, v94, v67, 1, v58, v84, v85);
        v95 = (llvm::BasicBlock *)v116[0];
        llvm::TrackingMDRef::operator=(&v96, &v117);
        v97 = v118;
        if (v117)
          llvm::MetadataTracking::untrack();
        ++v62;
      }
      while (a6 > v62);
      v68 = v95;
    }
    else
    {
      v68 = 0;
      v63 = v54;
    }
    if (v68)
      v69 = v68;
    else
      v69 = (llvm::BasicBlock *)v90;
    v119 = 257;
    v70 = (llvm::Value *)llvm::ConstantInt::get();
    v71 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a2 + 1), v58, v70, (const llvm::Twine *)v116);
    v72 = (llvm::Value *)llvm::ConstantInt::get();
    v110 = 257;
    v73 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a2 + 1), v71, v72, (const llvm::Twine *)v109);
    v119 = 257;
    v74 = (llvm::Value *)llvm::ConstantInt::get();
    v75 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a2 + 1), v58, v73, v74, (const llvm::Twine *)v116);
    v119 = 257;
    v76 = llvm::IRBuilderBase::CreateICmp(a2 + 1, 32, (llvm::CmpInst **)v73, v114, (uint64_t)v116);
    v119 = 257;
    v77 = (llvm::Value *)llvm::ConstantInt::get();
    v78 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a2 + 1), v75, v77, (const llvm::Twine *)v116);
    v79 = (llvm::Value *)llvm::ConstantInt::get();
    v119 = 257;
    llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a2 + 1), v78, v79, (const llvm::Twine *)v116);
    v110 = 257;
    Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    v119 = 257;
    v81 = (llvm::Value *)llvm::ConstantInt::get();
    v82 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a2 + 1), v75, Select, v81, (const llvm::Twine *)v116);
    llvm::PHINode::addIncoming(v58, v82, v69);
    llvm::PHINode::addIncoming(v85, v82, v69);
    llvm::PHINode::addIncoming(v86, v63, v69);
    llvm::PHINode::addIncoming(v87, v63, v69);
    llvm::IRBuilderBase::CreateCondBr(a2 + 1, v76, (uint64_t)v89, v90);
    if (v96)
      llvm::MetadataTracking::untrack();
    a2[7] = v88;
    a2[8] = v88 + 40;
  }
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 7);
  result = llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 1));
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 26);
  return result;
}

void AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::~AGCBindPointLayoutT()
{
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxAPIBindPointsTexture()
{
  return 96;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2)
    return 35;
  else
    return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxAPIIndirectTexture()
{
  return 96;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxAPIIndirectBuffer()
{
  return 96;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationFactorBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationInternalPerPatchIDBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationInternalPerPatchDataBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationInternalDrawIndexOffsetsBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationProducerDrawElemIndirectCmdsOutputBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationProducerDrawElemIndirectCmdsInputBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationProducerInternalInstanceCountsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationProducerInternalInstanceIDsBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationConsumerPatchIndexBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationConsumerPositionInPatchBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderTessellationConsumerControlPointIndexBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderGLMTLReserved()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderBaseVertexBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderBaseInstanceBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderBaseImmediateBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderReadTextureHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderWriteTextureHeapBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderReadTextureGatherBufferIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderWriteTextureGatherBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderWidthTextureHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderSamplerHeapBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderSamplerGatherBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderPerEncoderIndirectionTableIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderIntersectionFunctionTableHeapBufferIndex()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderVisibleFunctionTableHeapBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderVertexAmplificationViewMappingsIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderFragmentViewportDepthRange()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderBVHStateHeapBufferIndex()
{
  return 54;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderDylibGOTBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderGlobalConstructorsBufferIndex()
{
  return 60;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 62);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderDylibGlobalBindingTableIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderSCSPerKickConfigurationTableBufferIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getRenderSCSPerShaderConfigurationTableBufferIndex()
{
  return 64;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getMeshLocalMeshDataIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeMaxAPIBindPointsTexture()
{
  return 96;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2)
    return 35;
  else
    return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeFastIntegerDivideBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeTGOptParamsIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeTGOptCountIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeStageInBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeGatherOrPatchUpOffsetsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeReadTextureHeapBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeWriteTextureHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeReadTextureGatherBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeWriteTextureGatherBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeWidthTextureHeapBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSamplerHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSamplerGatherBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputePerEncoderIndirectionTableIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeIntersectionFunctionTableHeapBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeVisibleFunctionTableHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeExecuteIndirectInputParametersBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeExecuteIndirectIndirectCommandBufferBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameters()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterThreadgroupOffset()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterThreadgroupsPerGrid()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterThreadOffset()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterThreadsPerGrid()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSplitDispatchParameterEnabled()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeDylibGOTBufferIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeGlobalConstructorsBufferIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 64);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeProgressMarkerBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeBVHStateHeapBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicateLeftOperandIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicateRightOperandIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicatePassLinkAddressIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicateFailLinkAddressIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeControlFlowPredicateLinkTokenWordsIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSCSPerKickConfigurationTableBufferIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeSCSPerShaderConfigurationTableBufferIndex()
{
  return 62;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getComputeDylibGlobalBindingTableIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionReadTextureHeapBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionWriteTextureHeapBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionSamplerHeapBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionSamplerGatherBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionReadTextureGatherBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionWriteTextureGatherBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionBVHStateHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionDylibGOTBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionWidthTextureHeapBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionVisibleFunctionTableHeapBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionPerEncoderIndirectionTableIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsDriverSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsSizeIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsReadTextureHeapIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsWriteTextureHeapIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsWidthTextureHeapIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsSamplerHeapIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsBVHHeapIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsVFTHeapIndex()
{
  return 7;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsIFTHeapIndex()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsLeafPointersInfoIndex()
{
  return 11;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsShaderStridesIndex()
{
  return 32;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsUserDataBoundsIndex()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsDriverDataStartIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsDoraStateBufferIndex()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerEncoderIndirectionTableIndex()
{
  return 13;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickIftHeapIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickUserBoundsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickPayloadStridesIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickDriverDataStartIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickGin1122SWWABvhIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickLeafPointersInfoIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerKickDoraStateBufferIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataShaderUserSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataInstanceLevelsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataShaderStrideIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataDoneRayTracingFlagIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataGlobalBindingsTableIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataGotIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getIntersectionScsPerCliqueDataCount()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getObjectIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getObjectIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getGeometryPipelineEmulationPerKickInfoIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getGeometryPipelineEmulationPerDispatchInfoIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getGeometryPipelineEmulationMailboxLookupBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTableICBHeapBufferIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTablePipelineStateHeapBufferIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTableFragmentBuiltinEncoderStateIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTablePrivateDataIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<96,31,4,128,96,96,true>>::getPerEncoderIndirectionTableSize()
{
  return 11;
}

uint64_t AGCLLVMGen3TargetLowerer::getTempRegistersLimitAcrossTileSizesForTileShader(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  if (a3)
  {
    v5 = result;
    LODWORD(v6) = 1;
    do
    {
      if (a3 / v6 >= 0x20)
        v7 = 32;
      else
        v7 = a3 / v6;
      if (v7)
      {
        v8 = 1;
        do
        {
          v6 = (v6 & 1) + v6;
          v9 = (v8 & 1u) + v8;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 832))(v5, v6, v9);
          if ((_DWORD)result)
          {
            v10 = 0;
            v11 = *(_DWORD *)(a2 + 440) - 1;
            do
            {
              v12 = (v11 + v10) >> 1;
              if (*(_DWORD *)(*(_QWORD *)(a2 + 432) + 4 * v12) < (v9 * v6))
                v11 = v12 - 1;
              else
                v10 = v12 + 1;
            }
            while (v10 <= v11);
          }
          v8 = v9 + 1;
        }
        while ((int)v9 + 1 <= v7);
      }
      LODWORD(v6) = v6 + 1;
    }
    while (v6 < 0x21);
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildImageBlockMemWriteLoop(_QWORD *a1, llvm::BasicBlock *a2, llvm::BasicBlock *a3, uint64_t a4, llvm::Type **a5, llvm::Type **AlignedLoad, llvm::Value *a7, uint64_t a8, llvm::Value *a9, unsigned int a10)
{
  llvm::IRBuilderBase *v15;
  llvm::Type *v16;
  llvm::User *PHI;
  llvm::Value *Add;
  llvm::Value *v19;
  llvm::Type *v20;
  llvm::Type **GEP;
  llvm::Value *v22;
  llvm::Type *v23;
  llvm::Type *v24;
  uint64_t v25;
  uint64_t ICmp;
  _BYTE v30[32];
  __int16 v31;

  v15 = (llvm::IRBuilderBase *)(a1 + 1);
  a1[7] = a3;
  a1[8] = (char *)a3 + 40;
  v16 = (llvm::Type *)a1[24];
  v31 = 257;
  PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(a1 + 1), v16, 2, (const llvm::Twine *)v30);
  llvm::PHINode::addIncoming(PHI, a7, a2);
  v31 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v15, PHI, a9, (const llvm::Twine *)v30);
  llvm::PHINode::addIncoming(PHI, Add, a3);
  if (*((_BYTE *)*AlignedLoad + 8) == 15)
  {
    v31 = 257;
    v20 = AGCLLVMBuilder::tryDeducePointeeType(AlignedLoad, v19);
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v15, v20, (llvm::Value *)AlignedLoad, PHI, (const llvm::Twine *)v30);
    v31 = 257;
    v23 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v22);
    AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)v15, v23, (uint64_t)GEP, 0, (uint64_t)v30);
  }
  v31 = 257;
  v24 = AGCLLVMBuilder::tryDeducePointeeType(a5, v19);
  v25 = llvm::IRBuilderBase::CreateGEP(v15, v24, (llvm::Value *)a5, PHI, (const llvm::Twine *)v30);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)v15, AlignedLoad, v25, 0);
  v31 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)v15, a10, (llvm::CmpInst **)Add, a8, (uint64_t)v30);
  return llvm::IRBuilderBase::CreateCondBr((uint64_t *)v15, ICmp, (uint64_t)a3, a4);
}

llvm::Value *AGCLLVMGen3TargetLowerer::splitUnalignedLoads(uint64_t a1, __int128 *a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, llvm::Value *a7, uint64_t a8, uint64_t a9)
{
  unsigned int v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t v16;
  llvm::Type *v17;
  unsigned int ScalarSizeInBits;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *Cast;
  llvm::Value *v23;
  llvm::Value *v24;
  uint64_t Add;
  unsigned int v27;
  uint64_t v28;
  __int128 v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  _BYTE v39[32];
  __int16 v40;
  __int128 v41;
  uint64_t v42;
  int v43;

  v41 = *a2;
  v42 = *((_QWORD *)a2 + 2);
  if (v42)
    llvm::MetadataTracking::track();
  v43 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v41, a1 + 8);
  if (v42)
    llvm::MetadataTracking::untrack();
  if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12)
    v13 = *(_DWORD *)(a6 + 32);
  else
    v13 = 1;
  if (*(_QWORD *)(a1 + 184) == a6)
  {
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v40 = 257;
    Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), a7, v24, (const llvm::Twine *)v39);
    v36 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v38 = *(_DWORD *)(a1 + 104);
    Cast = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(a1, &v36, (uint64_t)"i8", 2, a4, a5, (llvm::Type ***)a6, Add, a8, a9);
    if (v37)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v14 = llvm::UndefValue::get();
    v15 = (llvm::Value *)v14;
    if (v13)
    {
      v16 = 0;
      v27 = v13;
      v28 = v13;
      do
      {
        v17 = (llvm::Type *)a6;
        if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12)
          v17 = **(llvm::Type ***)(a6 + 16);
        ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v17);
        v19 = ScalarSizeInBits;
        if (ScalarSizeInBits >= 9)
        {
          llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 72), (llvm::LLVMContext *)(ScalarSizeInBits >> 1));
          v17 = (llvm::Type *)llvm::FixedVectorType::get();
        }
        v33 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
        v35 = *(_DWORD *)(a1 + 104);
        v20 = AGCLLVMGen3TargetLowerer::splitUnalignedLoads(a1, &v33, a3, a4, a5, v17, a7, a8, a9);
        if (v34)
          llvm::MetadataTracking::untrack();
        v21 = a6;
        if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12)
          v21 = **(_QWORD **)(a6 + 16);
        v40 = 257;
        Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v20, v21, (uint64_t)v39);
        if (v27 != 1)
        {
          v40 = 257;
          v23 = (llvm::Value *)llvm::ConstantInt::get();
          Cast = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v15, Cast, v23, (const llvm::Twine *)v39);
        }
        a3 = a3 + (v19 >> 3);
        ++v16;
        v15 = Cast;
      }
      while (v28 != v16);
    }
    else
    {
      return (llvm::Value *)v14;
    }
  }
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildReadOutputPartitionFromIR(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::Type ***a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  char v19;
  _QWORD v21[2];
  __int128 v22;
  uint64_t v23;
  int v24;

  v22 = *a2;
  v23 = *((_QWORD *)a2 + 2);
  if (v23)
    llvm::MetadataTracking::track();
  v24 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v22, a1 + 8);
  if (v23)
    llvm::MetadataTracking::untrack();
  v21[0] = AGCLLVMGen3TargetLowerer::getMemoryReadIntrinsicArgsFromIR(a1, a7, a3, a4);
  v21[1] = v16;
  v17 = llvm::ConstantInt::get();
  v19 = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t, llvm::Type ***, uint64_t, uint64_t, uint64_t, char))(*(_QWORD *)a1 + 1600))(a1, v21, a5, v17, a7, a8, a9, a10, v19);
}

uint64_t AGCLLVMGen3TargetLowerer::splitUnalignedStore(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, unsigned int a5, unsigned int a6, llvm::Type **a7, llvm::Value *a8, uint64_t a9, uint64_t a10)
{
  llvm::Type *v15;
  unsigned int v16;
  uint64_t result;
  llvm::Type ***v18;
  uint64_t v19;
  uint64_t Cast;
  unsigned int ScalarSizeInBits;
  unsigned int v22;
  uint64_t v23;
  llvm::Value *v24;
  uint64_t Add;
  __int128 v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  llvm::Value *v42[2];
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v39 = *a3;
  v40 = *((_QWORD *)a3 + 2);
  if (v40)
    llvm::MetadataTracking::track();
  v41 = *((_DWORD *)a3 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v39, a2 + 8);
  if (v40)
    llvm::MetadataTracking::untrack();
  v15 = *a7;
  if ((*((_DWORD *)*a7 + 2) & 0xFE) == 0x12)
    v16 = *((_DWORD *)v15 + 8);
  else
    v16 = 1;
  if (v15 == *(llvm::Type **)(a2 + 184))
  {
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v38 = 257;
    Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a2 + 8), a8, v24, (const llvm::Twine *)&v35);
    v32 = *(_OWORD *)(a2 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 8));
    v34 = *(_DWORD *)(a2 + 104);
    result = AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR(a1, a2, &v32, (uint64_t)"i8", 2, a5, a6, a7, Add, 0, a9, a10, 0);
    if (v33)
      return llvm::MetadataTracking::untrack();
  }
  else
  {
    *(_OWORD *)v42 = 0u;
    v43 = 0u;
    result = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a2, (llvm::Value *)a7, v42);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 24) = 0;
    if (v16)
    {
      v18 = (llvm::Type ***)v42;
      v19 = v16;
      do
      {
        Cast = (uint64_t)*v18;
        ScalarSizeInBits = llvm::Type::getScalarSizeInBits(**v18);
        v22 = ScalarSizeInBits;
        if (ScalarSizeInBits >= 9)
        {
          llvm::Type::getIntNTy(*(llvm::Type **)(a2 + 72), (llvm::LLVMContext *)(ScalarSizeInBits >> 1));
          v23 = llvm::FixedVectorType::get();
          v38 = 257;
          Cast = llvm::IRBuilderBase::CreateCast(a2 + 8, 49, Cast, v23, (uint64_t)&v35);
        }
        v29 = *(_OWORD *)(a2 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a2 + 8));
        v31 = *(_DWORD *)(a2 + 104);
        AGCLLVMGen3TargetLowerer::splitUnalignedStore(&v35, a2, &v29, a4, a5, a6, Cast, a8, a9, a10);
        *(_OWORD *)a1 = v35;
        result = (uint64_t)llvm::TrackingMDRef::operator=((_QWORD *)(a1 + 16), &v36);
        *(_DWORD *)(a1 + 24) = v37;
        if (v36)
          result = llvm::MetadataTracking::untrack();
        if (v30)
          result = llvm::MetadataTracking::untrack();
        a4 = a4 + (v22 >> 3);
        ++v18;
        --v19;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromIR(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, llvm::Type **a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v18;
  uint64_t v19;
  __int16 v21;
  _QWORD v23[2];
  __int128 v24;
  uint64_t v25;
  int v26;

  v24 = *a3;
  v25 = *((_QWORD *)a3 + 2);
  if (v25)
    llvm::MetadataTracking::track();
  v26 = *((_DWORD *)a3 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v24, a2 + 8);
  if (v25)
    llvm::MetadataTracking::untrack();
  v23[0] = AGCLLVMGen3TargetLowerer::getMemoryWriteIntrinsicArgsFromIR(a2, *a8, a4, a5);
  v23[1] = v18;
  v19 = llvm::ConstantInt::get();
  HIBYTE(v21) = a13 ^ 1;
  LOBYTE(v21) = a10;
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t, llvm::Type **, uint64_t, uint64_t, BOOL, uint64_t, __int16))(*(_QWORD *)a2 + 1608))(a2, v23, a6, v19, a8, a9, a11, a11 != 0, a12, v21);
}

uint64_t AGCLLVMGen3TargetLowerer::buildWriteOutputPartitionFromFormat(uint64_t a1, uint64_t a2, __int128 *a3, AGCLLVMGen3TargetLowerer *a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int8x8_t v16;
  uint8x8_t v17;
  uint64_t v18;
  __int16 v20;
  _QWORD v22[2];
  __int128 v23;
  uint64_t v24;
  int v25;

  v23 = *a3;
  v24 = *((_QWORD *)a3 + 2);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *((_DWORD *)a3 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v23, a2 + 8);
  if (v24)
    llvm::MetadataTracking::untrack();
  v16.i32[0] = a5;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  v22[0] = (a5 << 32) | ((unint64_t)v17.u32[0] << 48) | ((_DWORD)a4 << 16) | (unint64_t)AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a4, 0);
  v22[1] = llvm::FixedVectorType::get();
  v18 = llvm::ConstantInt::get();
  v20 = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, __int16))(*(_QWORD *)a2 + 1608))(a2, v22, a6, v18, a8, a9, a10, a10 != 0, a11, v20);
}

uint64_t AGCLLVMGen3TargetLowerer::buildExtractColorCoverageMask(_QWORD *a1, __int128 *a2, llvm::Value *a3, llvm::Value *a4)
{
  llvm::Value *v8;
  uint64_t Mul;
  uint64_t v10;
  llvm::Value *Cast;
  uint64_t LShr;
  uint64_t v13;
  llvm::Value *v14;
  llvm::Value *v15;
  _BYTE v17[32];
  __int16 v18;
  _BYTE v19[32];
  __int16 v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v21 = *a2;
  v22 = *((_QWORD *)a2 + 2);
  if (v22)
    llvm::MetadataTracking::track();
  v23 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v21, (uint64_t)(a1 + 1));
  if (v22)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 1), a4, v8, (const llvm::Twine *)v19);
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 1520))(a1);
  v18 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 39, Mul, v10, (uint64_t)v17);
  v20 = 257;
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), a3, Cast, (const llvm::Twine *)v19);
  v13 = a1[24];
  v18 = 257;
  v14 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, LShr, v13, (uint64_t)v17);
  v20 = 257;
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v14, v15, (const llvm::Twine *)v19);
}

llvm::Value *AGCLLVMGen3TargetLowerer::buildColorCoverageMaskSet(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v18 = a3;
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 1520))(a1);
  v19 = v21;
  v20 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.", "");
  v6 = a1[25];
  v7 = v5 == v6;
  if (v5 == v6)
    v8 = "agx2.";
  else
    v8 = "agx3.8xmsaa.";
  v9 = 12;
  if (v7)
    v9 = 5;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, v8, &v8[v9]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "colcvgmsk.coords", "");
  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v15, (uint64_t)(a1 + 1));
  if (v16)
    llvm::MetadataTracking::untrack();
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)v19, v20, v5, a1[30]);
  v14 = 257;
  v11 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v10 + 24), v10, (uint64_t)&v18, 1, (uint64_t)v13);
  if (v19 != v21)
    free(v19);
  return v11;
}

uint64_t AGCLLVMGen3TargetLowerer::buildThreadgroupIndex(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t inserted;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t Cast;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int128 v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.threadgroup.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v19, aXyz[a4]);
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v9 = a1 + 8;
  v15 = 257;
  v10 = llvm::IRBuilderBase::CreateCall(v9, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  v13[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21)
    free(v19);
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildLayerId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t Cast;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.get.layerid", "");
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = a1 + 8;
  v13 = 257;
  v8 = llvm::IRBuilderBase::CreateCall(v7, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19)
    free(v17);
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildThreadgroupDispatchSize(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t inserted;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t Cast;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int128 v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = xmmword_1C3E37B50;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.dispatch.threadgroup.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v19, aXyz[a4]);
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, ".size", "");
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v9 = a1 + 8;
  v15 = 257;
  v10 = llvm::IRBuilderBase::CreateCall(v9, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  v13[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21)
    free(v19);
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildGlobalID(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t inserted;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t Cast;
  _WORD v13[20];
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  void *v19;
  __int128 v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = xmmword_1C3E37B50;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v19, "llvm.agx2.thread.position.in.grid.", "");
  llvm::SmallVectorTemplateBase<char,true>::push_back((uint64_t)&v19, aXyz[a4]);
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v9 = a1 + 8;
  v15 = 257;
  v10 = llvm::IRBuilderBase::CreateCall(v9, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v14);
  v13[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v9, 38, (uint64_t)v10, a3, (uint64_t)v13);
  if (v19 != v21)
    free(v19);
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t Cast;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.quad.group", "");
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = a1 + 8;
  v13 = 257;
  v8 = llvm::IRBuilderBase::CreateCall(v7, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19)
    free(v17);
  return Cast;
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadBroadcast(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[292], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffle(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[293], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadShuffleXor(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[296], a3, a4);
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedReduce(uint64_t result, llvm::Value *a2, llvm::Value *a3, int a4, int a5)
{
  uint64_t v6;
  llvm::IRBuilderBase *v7;
  llvm::IRBuilderBase *v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE v11[32];
  __int16 v12;
  _BYTE v13[32];
  __int16 v14;

  v6 = *(_QWORD *)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v6 = **(_QWORD **)(v6 + 16);
  switch(a4)
  {
    case 0:
      v14 = 257;
      result = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(result + 8), a2, a3, (const llvm::Twine *)v13);
      break;
    case 1:
      v14 = 257;
      result = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(result + 8), a2, a3, (const llvm::Twine *)v13);
      break;
    case 2:
      v14 = 257;
      result = llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)(result + 8), a2, a3, (const llvm::Twine *)v13);
      break;
    case 3:
    case 7:
    case 9:
      v7 = (llvm::IRBuilderBase *)(result + 8);
      if (*(unsigned __int8 *)(v6 + 8) > 6u)
      {
        v12 = 257;
        result = llvm::IRBuilderBase::CreateMul(v7, a2, a3, (const llvm::Twine *)v11);
      }
      else
      {
        v14 = 257;
        result = llvm::IRBuilderBase::CreateFMul((uint64_t)v7, (uint64_t)a2, (uint64_t)a3, (uint64_t)v13);
      }
      break;
    case 4:
    case 8:
    case 10:
      v8 = (llvm::IRBuilderBase *)(result + 8);
      if (*(unsigned __int8 *)(v6 + 8) > 6u)
      {
        v12 = 257;
        result = llvm::IRBuilderBase::CreateAdd(v8, a2, a3, (const llvm::Twine *)v11);
      }
      else
      {
        v14 = 257;
        result = llvm::IRBuilderBase::CreateFAdd((uint64_t)v8, (uint64_t)a2, (uint64_t)a3, (uint64_t)v13);
      }
      break;
    case 5:
      if (*(unsigned __int8 *)(v6 + 8) <= 6u)
      {
        v14 = 257;
        goto LABEL_15;
      }
      v14 = 257;
      v9 = (uint64_t *)(result + 8);
      if (a5)
        v10 = 38;
      else
        v10 = 34;
      goto LABEL_24;
    case 6:
      if (*(unsigned __int8 *)(v6 + 8) > 6u)
      {
        v14 = 257;
        v9 = (uint64_t *)(result + 8);
        if (a5)
          v10 = 40;
        else
          v10 = 36;
LABEL_24:
        llvm::IRBuilderBase::CreateICmp(v9, v10, (llvm::CmpInst **)a2, (uint64_t)a3, (uint64_t)v13);
      }
      else
      {
        v14 = 257;
LABEL_15:
        llvm::IRBuilderBase::CreateFCmpHelper();
      }
      v14 = 257;
      result = llvm::IRBuilderBase::CreateSelect();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(uint64_t a1, uint64_t a2, llvm::Type **Cast, unsigned int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  llvm::Value *Select;
  llvm::Value *v11;
  int v12;
  llvm::Value *v13;
  llvm::Type **v14;
  llvm::CmpInst **v15;
  llvm::Value *ICmp;
  llvm::Value *v17;
  int v18;
  llvm::Type **v19;
  llvm::CmpInst **v20;
  llvm::Value *v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::Type *v25;
  uint64_t v28;
  llvm::Value *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  _BYTE v45[32];
  __int16 v46;
  _BYTE v47[32];
  __int16 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  int v57;

  v39 = *(_OWORD *)a2;
  v40 = *(_QWORD *)(a2 + 16);
  if (v40)
    llvm::MetadataTracking::track();
  v41 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v39);
  if (v40)
    llvm::MetadataTracking::untrack();
  v36 = *(_OWORD *)a2;
  v37 = *(_QWORD *)(a2 + 16);
  if (v37)
    llvm::MetadataTracking::track();
  v38 = *(_DWORD *)(a2 + 24);
  v28 = AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v36, *(_QWORD *)(a1 + 192));
  if (v37)
    llvm::MetadataTracking::untrack();
  v25 = *Cast;
  if (llvm::Type::getScalarSizeInBits(*Cast) <= 7)
  {
    v8 = *(_QWORD *)(a1 + 184);
    v48 = 257;
    Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)Cast, v8, (uint64_t)v47);
  }
  v9 = 0;
  Select = 0;
  getSimdReductionIdentity(a4, (uint64_t *)Cast);
  do
  {
    v29 = Select;
    v11 = (llvm::Value *)llvm::ConstantInt::get();
    v33 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v12 = *(_DWORD *)(a1 + 104);
    v35 = v12;
    v55 = v33;
    v56 = v34;
    if (v34)
    {
      llvm::MetadataTracking::track();
      v12 = v35;
    }
    v57 = v12;
    AGCLLVMTargetLowerer::SetIP(a1, &v55);
    if (v56)
      llvm::MetadataTracking::untrack();
    v13 = (llvm::Value *)llvm::ConstantInt::get();
    v52 = v33;
    v53 = v34;
    if (v34)
      llvm::MetadataTracking::track();
    v54 = v35;
    v14 = (llvm::Type **)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v52, *(_QWORD *)(a1 + 192));
    if (v53)
      llvm::MetadataTracking::untrack();
    v49 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v51 = *(_DWORD *)(a1 + 104);
    v15 = (llvm::CmpInst **)AGCLLVMGen3TargetLowerer::buildQuadShuffle((char **)a1, (uint64_t)&v49, v14, v11);
    v48 = 257;
    ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v15, (uint64_t)v11, (uint64_t)v47);
    v46 = 257;
    v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v13, ICmp, (const llvm::Twine *)v45);
    if (v50)
      llvm::MetadataTracking::untrack();
    v18 = 4;
    do
    {
      random();
      v19 = (llvm::Type **)llvm::ConstantInt::get();
      v42 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v44 = *(_DWORD *)(a1 + 104);
      v20 = (llvm::CmpInst **)AGCLLVMGen3TargetLowerer::buildQuadShuffle((char **)a1, (uint64_t)&v42, v19, v11);
      v48 = 257;
      v21 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v20, (uint64_t)v19, (uint64_t)v47);
      v46 = 257;
      v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v17, v21, (const llvm::Twine *)v45);
      if (v43)
        llvm::MetadataTracking::untrack();
      --v18;
    }
    while (v18);
    if (v34)
      llvm::MetadataTracking::untrack();
    v30 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v32 = *(_DWORD *)(a1 + 104);
    AGCLLVMGen3TargetLowerer::buildQuadShuffle((char **)a1, (uint64_t)&v30, Cast, v11);
    if (v31)
      llvm::MetadataTracking::untrack();
    v48 = 257;
    Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
    if (a4 - 7 > 1)
    {
      if (a4 - 9 > 1)
        goto LABEL_35;
      v48 = 257;
      v22 = (uint64_t *)(a1 + 8);
      v23 = 36;
    }
    else
    {
      v48 = 257;
      v22 = (uint64_t *)(a1 + 8);
      v23 = 37;
    }
    llvm::IRBuilderBase::CreateICmp(v22, v23, (llvm::CmpInst **)v11, v28, (uint64_t)v47);
    v46 = 257;
    Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
LABEL_35:
    if (v29)
      Select = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedReduce(a1, v29, Select, a4, a5);
    ++v9;
  }
  while (v9 != 4);
  v48 = 257;
  return llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)Select, (uint64_t)v25, (uint64_t)v47);
}

uint64_t getSimdReductionIdentity(unsigned int a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  if ((*(_DWORD *)(*a2 + 8) & 0xFE) == 0x12)
    v2 = **(_QWORD **)(*a2 + 16);
  if (a1 <= 0xA)
  {
    if (((1 << a1) & 0x516) != 0)
    {
      if (*(unsigned __int8 *)(v2 + 8) <= 6u)
        return llvm::ConstantFP::get();
      return llvm::ConstantInt::get();
    }
    if (((1 << a1) & 0x288) != 0)
    {
      if (*(unsigned __int8 *)(v2 + 8) <= 6u)
        return llvm::ConstantFP::get();
      return llvm::ConstantInt::get();
    }
    if (!a1)
      return llvm::ConstantInt::get();
  }
  return (uint64_t)a2;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, char a5)
{
  llvm::Value *v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  llvm::Value *Cast;
  uint64_t *Shl;
  llvm::Value *active;
  uint64_t v15;
  llvm::Value *v16;
  llvm::Value *Sub;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::Value *InsertElement;
  unint64_t v22;
  llvm::Value *v23;
  uint64_t *Element;
  llvm::Value *v25;
  llvm::Value *v26;
  _QWORD v28[4];
  int *v29;
  char *v30;
  uint64_t *v31;
  llvm::Value **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  llvm::Value *v39;
  _BYTE v40[32];
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  char v53;
  int v54;

  v54 = a4;
  v53 = a5;
  v52 = 32;
  v49 = *(_OWORD *)a2;
  v50 = *(_QWORD *)(a2 + 16);
  if (v50)
    llvm::MetadataTracking::track();
  v51 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v49);
  if (v50)
    llvm::MetadataTracking::untrack();
  v46 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v48 = *(_DWORD *)(a1 + 104);
  v8 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 1536))(a1, &v46, *(_QWORD *)(a1 + 192));
  if (v47)
    llvm::MetadataTracking::untrack();
  v42 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v44 = *(_DWORD *)(a1 + 104);
  v9 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(a1, (uint64_t)&v42, v8);
  if (v43)
    llvm::MetadataTracking::untrack();
  v45 = v9;
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v11 = *(_QWORD *)(a1 + 200);
  LOWORD(v29) = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)v8, v11, (uint64_t)v28);
  v41 = 257;
  Shl = (uint64_t *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v10, Cast, (const llvm::Twine *)v40);
  v36 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v38 = *(_DWORD *)(a1 + 104);
  active = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedActiveThreadsMask(a1, (uint64_t)&v36, Shl, v9);
  if (v37)
    llvm::MetadataTracking::untrack();
  v39 = active;
  v15 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.ctpop.i32", 14, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 200));
  v35 = v15;
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v29) = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)Shl, v16, (const llvm::Twine *)v28);
  v41 = 257;
  v34 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), active, Sub, (const llvm::Twine *)v40);
  LOWORD(v29) = 257;
  v18 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v15 + 24), v15, (uint64_t)&v34, 1, (uint64_t)v28);
  v19 = *(_QWORD *)v8;
  v41 = 257;
  v20 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v18, v19, (uint64_t)v40);
  v28[0] = a1;
  v28[1] = &v45;
  v28[2] = &v33;
  v28[3] = &v52;
  v29 = &v54;
  v30 = &v53;
  v31 = &v35;
  v32 = &v39;
  v33 = v20;
  llvm::DataLayout::getTypeSizeInBits(a1 + 376, *a3);
  if ((unint64_t)llvm::TypeSize::operator unsigned long long() < 0x21)
    return AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(AGCLLVMBuilder::InsertPoint,llvm::Value *,SimdReduceFunction,BOOL,unsigned short)::$_0::operator()((uint64_t)v28, a3);
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  if (*(_DWORD *)(*a3 + 32))
  {
    v22 = 0;
    do
    {
      v41 = 257;
      v23 = (llvm::Value *)llvm::ConstantInt::get();
      Element = (uint64_t *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)a3, v23, (const llvm::Twine *)v40);
      v25 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(AGCLLVMBuilder::InsertPoint,llvm::Value *,SimdReduceFunction,BOOL,unsigned short)::$_0::operator()((uint64_t)v28, Element);
      v41 = 257;
      v26 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v25, v26, (const llvm::Twine *)v40);
      ++v22;
    }
    while (v22 < *(unsigned int *)(*a3 + 32));
  }
  return (uint64_t)InsertElement;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedActiveThreadsMask(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t Cast;
  llvm::Type **v10;
  llvm::Type *v11;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _BYTE v19[32];
  __int16 v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v21 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a2 + 16);
  if (v22)
    llvm::MetadataTracking::track();
  v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22)
    llvm::MetadataTracking::untrack();
  v8 = llvm::PointerType::get();
  v20 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a4, v8, (uint64_t)v19);
  v10 = (llvm::Type **)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v10, Cast, 0);
  v16 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v18 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen3TargetLowerer::buildSimdBarrier(a1, (uint64_t)&v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  llvm::IRBuilderBase::CreateAtomicRMW((uint64_t *)(a1 + 8), 5, Cast, a3);
  v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v15 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen3TargetLowerer::buildSimdBarrier(a1, (uint64_t)&v13);
  if (v14)
    llvm::MetadataTracking::untrack();
  v11 = *(llvm::Type **)(a1 + 200);
  v20 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v11, Cast, 0, (uint64_t)v19);
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedSimdReduce(AGCLLVMBuilder::InsertPoint,llvm::Value *,SimdReduceFunction,BOOL,unsigned short)::$_0::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Type *v7;
  llvm::Value *v8;
  llvm::Value *v9;
  int v10;
  llvm::Value *v11;
  llvm::Type *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  llvm::CmpInst **Sub;
  uint64_t v16;
  llvm::Type *v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Type **v21;
  llvm::Value *v22;
  llvm::Type *v23;
  llvm::Value *Select;
  llvm::Type **v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  uint64_t v31;
  llvm::Value *Cast;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Type *v35;
  llvm::Value *v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::Type **v39;
  llvm::Value *v40;
  llvm::Type *v41;
  uint64_t *v42;
  uint64_t v43;
  llvm::Type **GEP;
  llvm::Type **v46;
  uint64_t *AlignedLoad;
  _BYTE v48[32];
  __int16 v49;
  __int128 v50;
  llvm::Value *v51;
  int v52;
  _BYTE v53[32];
  __int16 v54;

  v4 = *(_QWORD *)a1;
  llvm::DataLayout::getTypeSizeInBits(*(_QWORD *)a1 + 376, *a2);
  v5 = **(_QWORD **)(a1 + 8);
  v46 = (llvm::Type **)a2;
  v6 = llvm::PointerType::get();
  v54 = 257;
  **(_QWORD **)(a1 + 8) = llvm::IRBuilderBase::CreateCast(v4 + 8, 49, v5, v6, (uint64_t)v53);
  v7 = (llvm::Type *)*a2;
  v8 = **(llvm::Value ***)(a1 + 8);
  v9 = **(llvm::Value ***)(a1 + 16);
  v54 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v4 + 8), v7, v8, v9, (const llvm::Twine *)v53);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(v4 + 8), (llvm::Type **)a2, (uint64_t)GEP, 0);
  if (**(unsigned __int16 **)(a1 + 24) >= 2u)
  {
    v10 = 1;
    do
    {
      v50 = *(_OWORD *)(v4 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v4 + 8));
      v52 = *(_DWORD *)(v4 + 104);
      AGCLLVMGen3TargetLowerer::buildSimdBarrier(v4, (uint64_t)&v50);
      v11 = v51;
      if (v51)
        llvm::MetadataTracking::untrack();
      v54 = 257;
      v12 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v11);
      AlignedLoad = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v4 + 8), v12, (uint64_t)GEP, 0, (uint64_t)v53);
      getSimdReductionIdentity(**(_DWORD **)(a1 + 32), AlignedLoad);
      v13 = **(llvm::Value ***)(a1 + 16);
      v14 = (llvm::Value *)llvm::ConstantInt::get();
      v54 = 257;
      Sub = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(v4 + 8), v13, v14, (const llvm::Twine *)v53);
      v16 = llvm::ConstantInt::get();
      v54 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(v4 + 8), 39, Sub, v16, (uint64_t)v53);
      v17 = *v46;
      v18 = **(llvm::Value ***)(a1 + 8);
      v19 = (llvm::Value *)llvm::ConstantInt::get();
      v54 = 257;
      v20 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v4 + 8), (llvm::Value *)Sub, v19, (const llvm::Twine *)v53);
      v49 = 257;
      v21 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v4 + 8), v17, v18, v20, (const llvm::Twine *)v48);
      v54 = 257;
      v23 = AGCLLVMBuilder::tryDeducePointeeType(v21, v22);
      llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v4 + 8), v23, (uint64_t)v21, 0, (uint64_t)v53);
      v49 = 257;
      Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      v25 = (llvm::Type **)AGCLLVMGen3TargetLowerer::buildEmulatedReduce(v4, (llvm::Value *)AlignedLoad, Select, **(_DWORD **)(a1 + 32), **(unsigned __int8 **)(a1 + 40));
      llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(v4 + 8), v25, (uint64_t)GEP, 0);
      v10 *= 2;
    }
    while ((v10 & 0xFFFEu) < **(unsigned __int16 **)(a1 + 24));
  }
  v26 = **(_DWORD **)(a1 + 32);
  if (v26 > 0xA)
  {
    v34 = 0;
  }
  else
  {
    v27 = 1 << v26;
    if ((v27 & 0x7F) != 0)
    {
      v28 = *(_QWORD *)(a1 + 56);
      v29 = **(_QWORD **)(a1 + 48);
      v54 = 257;
      v30 = llvm::IRBuilderBase::CreateCall(v4 + 8, *(_QWORD *)(v29 + 24), v29, v28, 1, (uint64_t)v53);
      v31 = *(_QWORD *)(v4 + 192);
      v49 = 257;
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v4 + 8, 38, (uint64_t)v30, v31, (uint64_t)v48);
      v33 = (llvm::Value *)llvm::ConstantInt::get();
      v54 = 257;
    }
    else
    {
      if ((v27 & 0x180) != 0)
      {
        v34 = **(llvm::Value ***)(a1 + 16);
        goto LABEL_13;
      }
      Cast = **(llvm::Value ***)(a1 + 16);
      v33 = (llvm::Value *)llvm::ConstantInt::get();
      v54 = 257;
    }
    v34 = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(v4 + 8), Cast, v33, (const llvm::Twine *)v53);
  }
LABEL_13:
  v35 = *v46;
  v36 = **(llvm::Value ***)(a1 + 8);
  v37 = (llvm::Value *)llvm::ConstantInt::get();
  v54 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(v4 + 8), v34, v37, (const llvm::Twine *)v53);
  v49 = 257;
  v39 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v4 + 8), v35, v36, v38, (const llvm::Twine *)v48);
  v54 = 257;
  v41 = AGCLLVMBuilder::tryDeducePointeeType(v39, v40);
  v42 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v4 + 8), v41, (uint64_t)v39, 0, (uint64_t)v53);
  if ((**(_DWORD **)(a1 + 32) - 9) <= 1)
  {
    v43 = llvm::ConstantInt::get();
    v54 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)(v4 + 8), 39, (llvm::CmpInst **)v34, v43, (uint64_t)v53);
    getSimdReductionIdentity(**(_DWORD **)(a1 + 32), v42);
    v54 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return (uint64_t)v42;
}

uint64_t AGCLLVMGen3TargetLowerer::buildEmulatedFirstActiveThreadIndex(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  llvm::Value *v8;
  uint64_t v9;
  llvm::Value *Cast;
  uint64_t *Shl;
  uint64_t active;
  uint64_t v13;
  llvm::Value *v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  int v19;
  _BYTE v20[32];
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  _QWORD v25[4];
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v22 = *(_OWORD *)a2;
  v23 = *(_QWORD *)(a2 + 16);
  if (v23)
    llvm::MetadataTracking::track();
  v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v22);
  if (v23)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  v9 = *(_QWORD *)(a1 + 200);
  v21 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)a3, v9, (uint64_t)v20);
  v26 = 257;
  Shl = (uint64_t *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v8, Cast, (const llvm::Twine *)v25);
  v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v19 = *(_DWORD *)(a1 + 104);
  active = AGCLLVMGen3TargetLowerer::buildEmulatedActiveThreadsMask(a1, (uint64_t)&v17, Shl, a4);
  if (v18)
    llvm::MetadataTracking::untrack();
  v13 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.cttz.i32", 13, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 176));
  v25[0] = active;
  v25[1] = llvm::ConstantInt::get();
  v21 = 257;
  v14 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v13 + 24), v13, (uint64_t)v25, 2, (uint64_t)v20);
  v15 = *a3;
  v21 = 257;
  return llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v14, v15, (uint64_t)v20);
}

uint64_t AGCLLVMGen3TargetLowerer::buildQuadBallot(uint64_t a1, __int128 *a2)
{
  llvm::Value *v4;
  llvm::Value *v5;
  llvm::Type **Select;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;

  v15 = *a2;
  v16 = *((_QWORD *)a2 + 2);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *((_DWORD *)a2 + 6);
  v4 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v15, *(_QWORD *)(a1 + 192));
  if (v16)
    llvm::MetadataTracking::untrack();
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v14 = 257;
  llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v5, v4, (const llvm::Twine *)v13);
  llvm::ConstantInt::get();
  v12 = 257;
  Select = (llvm::Type **)llvm::IRBuilderBase::CreateSelect();
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *((_DWORD *)a2 + 6);
  v7 = AGCLLVMGen3TargetLowerer::buildEmulatedQuadReduce(a1, (uint64_t)&v9, Select, 1u, 0);
  if (v10)
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t AGCLLVMGen3TargetLowerer::buildSimdBallot(uint64_t a1, __int128 *a2)
{
  llvm::Value *v4;
  uint64_t v5;
  llvm::Value *v6;
  uint64_t v7;
  llvm::Value *Cast;
  uint64_t *Select;
  uint64_t active;
  __int128 v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  _BYTE v16[32];
  __int16 v17;
  _BYTE v18[32];
  __int16 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v23 = *a2;
  v24 = *((_QWORD *)a2 + 2);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *((_DWORD *)a2 + 6);
  v4 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 1536))(a1, &v23, *(_QWORD *)(a1 + 192));
  if (v24)
    llvm::MetadataTracking::untrack();
  v20 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v22 = *(_DWORD *)(a1 + 104);
  v5 = AGCLLVMGen3TargetLowerer::buildSimdGroupScratchMemoryPtr(a1, (uint64_t)&v20, v4);
  if (v21)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v7 = *(_QWORD *)(a1 + 200);
  v19 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)v4, v7, (uint64_t)v18);
  v17 = 257;
  llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v6, Cast, (const llvm::Twine *)v16);
  llvm::ConstantInt::get();
  v15 = 257;
  Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect();
  v12 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v14 = *(_DWORD *)(a1 + 104);
  active = AGCLLVMGen3TargetLowerer::buildEmulatedActiveThreadsMask(a1, (uint64_t)&v12, Select, v5);
  if (v13)
    llvm::MetadataTracking::untrack();
  return active;
}

_QWORD *AGCLLVMGen4TargetConfig::createMetalFragmentShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7, int a8, _DWORD *a9)
{
  _QWORD *v16;

  v16 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v16 + 933), a2, *a3);
  AGCLLVMAGPFragmentShaderGen3::AGCLLVMAGPFragmentShaderGen3((uint64_t)v16, (uint64_t *)off_1E7E61B80, (llvm::Module *)a3, a4, a5, a6, a7, a8, a9);
  *v16 = &off_1E7E616D0;
  v16[933] = &unk_1E7E61A80;
  v16[937] = &unk_1E7E61B70;
  v16[540] = &unk_1E7E61980;
  v16[915] = v16 + 917;
  v16[916] = 0x800000000;
  return v16 + 933;
}

void AGCLLVMGen4TargetLowerer::buildEmitpix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, AGCLLVMGen3TargetLowerer *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t Cast;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inserted;
  uint64_t v25;
  uint64_t v26;
  llvm::Value *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _WORD v31[22];
  int v32;
  _BYTE v33[32];
  __int16 v34;
  char __s[8];
  char v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[128];
  void *v43[2];
  _QWORD v44[17];

  v44[16] = *MEMORY[0x1E0C80C00];
  v37 = *(_OWORD *)a2;
  v38 = *(_QWORD *)(a2 + 16);
  if (v38)
    llvm::MetadataTracking::track();
  v39 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v37);
  if (v38)
    llvm::MetadataTracking::untrack();
  v43[0] = v44;
  v43[1] = (void *)0x1000000000;
  v40 = v42;
  v41 = 0x1000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, *(_QWORD *)(a1 + 192));
  AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a6, a7);
  v15 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, v15);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, *(_QWORD *)(a1 + 192));
  v16 = *(_QWORD *)(a1 + 192);
  v34 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, a9, v16, (uint64_t)v33);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, Cast);
  v18 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, v18);
  v19 = llvm::PointerType::get();
  v34 = 257;
  v20 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v19, (uint64_t)v33);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, v20);
  v32 = 0;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 1648))(__s, a1, a8, &v32);
  v21 = llvm::PointerType::get();
  v22 = llvm::ConstantInt::get();
  v34 = 257;
  v23 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v22, v21, (uint64_t)v33);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, v21);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, v23);
  if ((v32 - 1) <= 1)
  {
    if (*(_QWORD *)(a1 + 1616))
      strlen(*(const char **)(a1 + 1616));
    inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    v25 = 200;
    if (v32 == 1)
      v25 = 192;
    v26 = *(_QWORD *)(a1 + v25);
    v34 = 257;
    v27 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v33);
    v31[16] = 257;
    v28 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v27, v26, (uint64_t)v31);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v43, v26);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v40, v28);
  }
  llvm::FunctionType::get();
  if ((v36 & 0x80000000) == 0)
  {
    v29 = __s;
LABEL_14:
    strlen(v29);
    goto LABEL_15;
  }
  v29 = *(char **)__s;
  if (*(_QWORD *)__s)
    goto LABEL_14;
LABEL_15:
  llvm::Module::getOrInsertFunction();
  v34 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v30 + 24), v30, (uint64_t)v40, v41, (uint64_t)v33);
  if (v40 != v42)
    free(v40);
  if (v43[0] != v44)
    free(v43[0]);
  if (v36 < 0)
    operator delete(*(void **)__s);
}

uint64_t AGCLLVMGen4TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL AGCLLVMGen4TargetLowerer::isImageWriteBlockFromDimensionSupported(uint64_t a1, int a2)
{
  return (a2 - 2) < 4;
}

void AGCLLVMGen4TargetLowerer::buildDepthf(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t inserted;
  llvm::Value *v9;
  std::string *v10;
  uint64_t v11;
  _BYTE v12[32];
  __int16 v13;
  std::string v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[128];
  void *v21[2];
  _QWORD v22[17];

  v22[16] = *MEMORY[0x1E0C80C00];
  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  memset(&v14, 0, sizeof(v14));
  v21[0] = v22;
  v21[1] = (void *)0x1000000000;
  v18 = v20;
  v19 = 0x1000000000;
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v13 = 257;
  v9 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  MEMORY[0x1CAA2D494](&v14, a1[188]);
  if (a3)
  {
    std::string::append(&v14, ".depth");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, a1[21]);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, a3);
  }
  if (a4)
  {
    std::string::append(&v14, ".stencil");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, a1[24]);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, a4);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v21, a1[24]);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v18, (uint64_t)v9);
  llvm::FunctionType::get();
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v10 = &v14;
LABEL_12:
    strlen((const char *)v10);
    goto LABEL_13;
  }
  v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v14.__r_.__value_.__r.__words[0])
    goto LABEL_12;
LABEL_13:
  llvm::Module::getOrInsertFunction();
  v13 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v11 + 24), v11, (uint64_t)v18, v19, (uint64_t)v12);
  if (v18 != v20)
    free(v18);
  if (v21[0] != v22)
    free(v21[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

std::string *AGCLLVMGen4TargetLowerer::getImageBlockWriteIntrinsicFromDimension@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  std::string *result;
  const std::string::value_type *v7;
  const std::string::value_type *v8;
  int v9;

  *a3 = 0;
  result = (std::string *)std::string::basic_string[abi:nn180100]<0>(a4, *(char **)(a1 + 1920));
  switch(a2)
  {
    case 0:
      v7 = ".1d";
      goto LABEL_10;
    case 1:
      v7 = ".1d.array";
      goto LABEL_10;
    case 2:
      v7 = ".2d";
      goto LABEL_10;
    case 3:
      v8 = ".2d.array";
      goto LABEL_12;
    case 4:
      v7 = ".2d.msaa";
      goto LABEL_10;
    case 5:
      result = std::string::append(result, ".3d");
      v9 = 2;
      goto LABEL_13;
    case 6:
      v7 = ".cubestf";
      goto LABEL_10;
    case 7:
      v7 = ".cubestf.array";
LABEL_10:
      result = std::string::append(result, v7);
      break;
    case 8:
      v8 = ".2d.msaa.array";
LABEL_12:
      result = std::string::append(result, v8);
      v9 = 1;
LABEL_13:
      *a3 = v9;
      break;
    default:
      return result;
  }
  return result;
}

char *AGCLLVMGen5TargetConfig::createMetalComputeShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;

  (*(void (**)(uint64_t, llvm::LLVMContext **, uint64_t))(*(_QWORD *)a1 + 240))(a1, a3, a4);
  v7 = operator new();
  v8 = (_QWORD *)AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10(v7, a2, a3, a4);
  return (char *)v8 + *(_QWORD *)(*v8 - 24);
}

uint64_t AGCLLVMGen5TargetConfig::createMetalPostTessellationShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v11;

  v11 = operator new();
  return AGCLLVMAGPVertexShaderPostTessellationHW::AGCLLVMAGPVertexShaderPostTessellationHW(v11, a2, a3, a4, a5, a6);
}

uint64_t AGCLLVMGen5TargetConfig::createMetalObjectShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Operand;
  uint64_t v12;
  char v13;
  unsigned int v14;
  int v16;

  v7 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v7 + 4880), a2, *a3);
  AGCLLVMUserObjectShaderBase::AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v7, (AGCLLVMCtx *)off_1E7E6BF98, (llvm::Module *)a3, "air.object");
  *(_QWORD *)v7 = &off_1E7E6BB60;
  *(_QWORD *)(v7 + 4880) = &unk_1E7E6BE98;
  *(_QWORD *)(v7 + 4912) = &unk_1E7E6BF88;
  *(_QWORD *)(v7 + 4520) = a4;
  *(_QWORD *)(v7 + 4528) = 4;
  *(_QWORD *)(v7 + 4544) = 0;
  *(_QWORD *)(v7 + 4536) = 0;
  *(_QWORD *)(v7 + 4552) = 4;
  *(_QWORD *)(v7 + 4568) = 0;
  *(_QWORD *)(v7 + 4560) = 0;
  *(_QWORD *)(v7 + 4576) = 4;
  *(_QWORD *)(v7 + 4592) = 0;
  *(_QWORD *)(v7 + 4584) = 0;
  *(_QWORD *)(v7 + 4600) = 4;
  *(_QWORD *)(v7 + 4616) = 0;
  *(_QWORD *)(v7 + 4608) = 0;
  *(_QWORD *)(v7 + 4624) = 4;
  *(_QWORD *)(v7 + 4640) = 0;
  *(_QWORD *)(v7 + 4632) = 0;
  *(_QWORD *)(v7 + 4648) = 4;
  *(_QWORD *)(v7 + 4664) = 0;
  *(_QWORD *)(v7 + 4656) = 0;
  *(_QWORD *)(v7 + 4672) = 4;
  *(_QWORD *)(v7 + 4680) = 0;
  *(_QWORD *)(v7 + 4688) = 0;
  *(_QWORD *)(v7 + 4696) = 4;
  *(_QWORD *)(v7 + 4704) = 0;
  *(_QWORD *)(v7 + 4712) = 0;
  *(_QWORD *)(v7 + 4720) = 4;
  *(_QWORD *)(v7 + 4728) = 0;
  *(_QWORD *)(v7 + 4736) = 0;
  *(_QWORD *)(v7 + 4744) = 4;
  *(_QWORD *)(v7 + 4752) = 0;
  *(_QWORD *)(v7 + 4760) = 0;
  *(_QWORD *)(v7 + 4768) = 4;
  *(_QWORD *)(v7 + 4784) = 0;
  *(_QWORD *)(v7 + 4776) = 0;
  *(_QWORD *)(v7 + 4792) = 4;
  *(_QWORD *)(v7 + 4808) = 0;
  *(_QWORD *)(v7 + 4800) = 0;
  *(_QWORD *)(v7 + 4816) = 4;
  *(_QWORD *)(v7 + 4824) = 0;
  *(_QWORD *)(v7 + 4832) = 0;
  *(_QWORD *)(v7 + 4840) = 4;
  *(_QWORD *)(v7 + 4856) = 0;
  *(_QWORD *)(v7 + 4848) = 0;
  *(_DWORD *)(v7 + 4872) = 0;
  v8 = *(_DWORD *)(a4 + 12);
  *(_QWORD *)(v7 + 4864) = 0;
  AGCLLVMUserShader::enableStatistics(v9, v8 & 1, (v8 >> 1) & 1);
  v10 = *(_QWORD *)(v7 + 4520);
  *(_BYTE *)(v7 + 18) = (*(_BYTE *)(v10 + 12) & 8) != 0;
  *(_BYTE *)(v7 + *(_QWORD *)(*(_QWORD *)v7 - 24) + 2760) = (*(_DWORD *)(v10 + 12) & 0x4000000) != 0;
  *(_QWORD *)(v7 + 3304) = *(_QWORD *)v10;
  *(_BYTE *)(v7 + 20) = (*(_BYTE *)(v10 + 12) & 4) != 0;
  *(_BYTE *)(v7 + 4384) = (*(_BYTE *)(v10 + 16) & 2) != 0;
  *(_BYTE *)(v7 + 4385) = (*(_BYTE *)(v10 + 16) & 4) != 0;
  *(_DWORD *)(v7 + 4376) = (*(_DWORD *)(v10 + 24) + 7) & 0xFFFFFFF8;
  *(_BYTE *)(v7 + 4405) = (*(_DWORD *)(v10 + 16) & 0x70) != 0;
  Operand = llvm::NamedMDNode::getOperand(*(llvm::NamedMDNode **)(v7 + 64));
  v16 = 3;
  if (*(_DWORD *)(Operand + 8) >= 4u)
  {
    v12 = Operand;
    do
    {
      v13 = parseMDUint3(v12, "air.max_mesh_work_groups", &v16, (_DWORD *)(v7 + 4864));
      v14 = v16;
      if ((v13 & 1) == 0)
        v14 = ++v16;
    }
    while (v14 < *(_DWORD *)(v12 + 8));
  }
  return v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
}

uint64_t AGCLLVMGen5TargetConfig::createMetalMeshShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int *v17;
  int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  const char *v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  size_t v31;

  v11 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 6776), a2, *a3);
  AGCLLVMUserObjectShaderBase::AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v11, (AGCLLVMCtx *)off_1E7E698F8, (llvm::Module *)a3, "air.mesh");
  *(_QWORD *)v11 = &off_1E7E694C0;
  *(_QWORD *)(v11 + 6776) = &unk_1E7E697F8;
  *(_QWORD *)(v11 + 6808) = &unk_1E7E698E8;
  *(_QWORD *)(v11 + 4520) = a4;
  *(_BYTE *)(v11 + 4528) = 0;
  *(_QWORD *)(v11 + 4536) = 4;
  *(_OWORD *)(v11 + 4544) = 0u;
  *(_OWORD *)(v11 + 4576) = 0u;
  *(_QWORD *)(v11 + 4592) = 0x1000000000;
  *(_DWORD *)(v11 + 4564) = 0;
  *(_BYTE *)(v11 + 4568) = 0;
  *(_QWORD *)(v11 + 4608) = 0;
  *(_DWORD *)(v11 + 4616) = 0;
  *(_DWORD *)(v11 + 4624) = 0;
  *(_WORD *)(v11 + 4628) = 0;
  *(_OWORD *)(v11 + 4632) = 0u;
  *(_WORD *)(v11 + 4648) = 0;
  *(_OWORD *)(v11 + 4652) = 0u;
  *(_OWORD *)(v11 + 4668) = 0u;
  *(_OWORD *)(v11 + 4684) = 0u;
  v12 = *(_BYTE *)(*(_QWORD *)(v11 + 7176) + 1762);
  *(_OWORD *)(v11 + 4704) = 0u;
  *(_QWORD *)(v11 + 4720) = 0;
  *(_QWORD *)(v11 + 4728) = v11 + 4744;
  *(_QWORD *)(v11 + 4736) = 0x800000000;
  *(_QWORD *)(v11 + 5256) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 5264) = v12;
  *(_DWORD *)(v11 + 5396) = 0;
  *(_OWORD *)(v11 + 5378) = 0u;
  *(_OWORD *)(v11 + 5352) = 0u;
  *(_OWORD *)(v11 + 5368) = 0u;
  *(_OWORD *)(v11 + 5320) = 0u;
  *(_OWORD *)(v11 + 5336) = 0u;
  *(_OWORD *)(v11 + 5288) = 0u;
  *(_OWORD *)(v11 + 5304) = 0u;
  *(_OWORD *)(v11 + 5272) = 0u;
  *(_BYTE *)(v11 + 5400) = 1;
  *(_QWORD *)(v11 + 5408) = v11 + 5424;
  *(_QWORD *)(v11 + 5416) = 0x800000000;
  *(_QWORD *)(v11 + 5488) = 0;
  v13 = -1248;
  *(_DWORD *)(v11 + 5496) = 0;
  do
  {
    *(_DWORD *)(v11 + v13 + 6760) = 0;
    v13 += 48;
  }
  while (v13);
  *(_QWORD *)(v11 + 6752) = 4;
  *(_QWORD *)(v11 + 6768) = 0;
  *(_QWORD *)(v11 + 6760) = 0;
  AGCLLVMUserShader::enableStatistics(v11, *(_DWORD *)(a4 + 12) & 1, (*(_DWORD *)(a4 + 12) >> 1) & 1);
  v14 = *(_QWORD *)(v11 + 4520);
  *(_BYTE *)(v11 + 18) = (*(_BYTE *)(v14 + 12) & 8) != 0;
  v15 = *(_QWORD *)v11;
  *(_BYTE *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 24) + 2760) = (*(_DWORD *)(v14 + 12) & 0x4000000) != 0;
  *(_QWORD *)(v11 + 3304) = *(_QWORD *)v14;
  *(_BYTE *)(v11 + 20) = (*(_BYTE *)(v14 + 12) & 4) != 0;
  v16 = *(_DWORD *)(v14 + 16) & 0xF;
  *(_DWORD *)(v11 + 4560) = v16;
  *(_BYTE *)(v11 + 4405) = v16 > 1;
  *(_BYTE *)(v11 + 3712) = *(_BYTE *)(v14 + 13) & 1;
  *(_DWORD *)(v11 + 4376) = (*(_DWORD *)(v14 + 24) + 7) & 0xFFFFFFF8;
  if (a5 && a6)
  {
    v17 = (int *)((char *)a5 + *a5);
    v18 = (int *)((char *)a6 + *a6);
    v19 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v19 >= 5u && (v20 = v19[2]) != 0)
      v21 = (int *)((char *)v17 + v20 + *(unsigned int *)((char *)v17 + v20));
    else
      v21 = 0;
    v22 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v22 >= 5u && (v23 = v22[2]) != 0)
      v24 = (char *)v18 + v23 + *(unsigned int *)((char *)v18 + v23);
    else
      v24 = 0;
    if (*v21)
    {
      v25 = 0;
      v26 = v24 + 4;
      v27 = (const char *)(v21 + 2);
      v28 = v21 + 2;
      do
      {
        v29 = *(_DWORD *)&v26[4 * v25];
        v30 = *((unsigned int *)v27 - 1);
        v31 = strlen(&v27[v30]);
        *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v11 + 4576), (char *)v28 + v30, v31)+ 8) = v29;
        ++v25;
        ++v28;
        v27 += 4;
      }
      while (v25 < *v21);
      v14 = *(_QWORD *)(v11 + 4520);
      v15 = *(_QWORD *)v11;
    }
    *(_BYTE *)(v11 + 4568) = (*(_BYTE *)(v14 + 16) & 0x10) != 0;
  }
  return v11 + *(_QWORD *)(v15 - 24);
}

void AGCLLVMGen5TargetConfig::createMetalMeshShaderAnalysis(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  AGCLLVMObject *v7;

  v7 = (AGCLLVMObject *)operator new();
  AGCLLVMUserMeshShaderAnalysis::AGCLLVMUserMeshShaderAnalysis(v7, a2, a3, a4, 1);
}

_QWORD *AGCLLVMGen5TargetConfig::createExecuteIndirectCDMPatchUpShader(AGCLLVMGen5TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  const char *v5;
  std::string *p_p;
  CFIndex size;
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  unsigned int v18;
  uint64_t v19;
  uint64_t i;
  unsigned int v21;
  uint64_t v22;
  uint64_t j;
  unsigned int v24;
  uint64_t v25;
  uint64_t k;
  char **v27;
  char *v28;
  uint64_t v29;
  void *v30[2];
  char v31;
  std::string v32;
  std::string __p;
  _DWORD v34[2];
  _QWORD v35[3];
  int v36;
  _QWORD v37[3];
  int v38;
  _QWORD v39[4];

  v39[3] = *MEMORY[0x1E0C80C00];
  memset(&__p, 0, sizeof(__p));
  switch(*(_DWORD *)(*((_QWORD *)a2 + 4) + 28))
  {
    case 0xE:
    case 0x10:
    case 0x19:
    case 0x1A:
    case 0x1B:
      v5 = "cei_patch_exec_gen4";
      goto LABEL_6;
    case 0x11:
    case 0x12:
      v5 = "cei_patch_exec_gen5";
      goto LABEL_6;
    case 0x13:
    case 0x14:
    case 0x15:
      v5 = "cei_patch_exec_gen5x";
      goto LABEL_6;
    case 0x16:
      std::string::basic_string[abi:nn180100]<0>(v30, "cei_patch_exec_gen6_g15p");
      v18 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 24);
      v34[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v35, "a0");
      v36 = 3;
      std::string::basic_string[abi:nn180100]<0>(v37, "b0");
      v19 = 0;
      v28 = 0;
      v29 = 0;
      v27 = &v28;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v27, (uint64_t *)&v28, v34[v19], (uint64_t)&v34[v19]);
        v19 += 8;
      }
      while (v19 != 16);
      getFullBitcodePath(&v32, (uint64_t)v30, v18, (uint64_t)&v27);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v32;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v28);
      for (i = 0; i != -8; i -= 4)
      {
        if (SHIBYTE(v37[i + 2]) < 0)
          operator delete((void *)v37[i]);
      }
      goto LABEL_44;
    case 0x18:
      std::string::basic_string[abi:nn180100]<0>(v30, "cei_patch_exec_gen6_g15g");
      v21 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 24);
      v34[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v35, "a0");
      v36 = 3;
      std::string::basic_string[abi:nn180100]<0>(v37, "b0");
      v38 = 5;
      std::string::basic_string[abi:nn180100]<0>(v39, "c0");
      v22 = 0;
      v28 = 0;
      v29 = 0;
      v27 = &v28;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v27, (uint64_t *)&v28, v34[v22], (uint64_t)&v34[v22]);
        v22 += 8;
      }
      while (v22 != 24);
      getFullBitcodePath(&v32, (uint64_t)v30, v21, (uint64_t)&v27);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v32;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v28);
      for (j = 0; j != -12; j -= 4)
      {
        if (SHIBYTE(v39[j + 2]) < 0)
          operator delete((void *)v39[j]);
      }
      goto LABEL_44;
    case 0x1F:
      std::string::basic_string[abi:nn180100]<0>(v30, "cei_patch_exec_gen6_g16p");
      v24 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 24);
      v34[0] = 1;
      std::string::basic_string[abi:nn180100]<0>(v35, "a0");
      v36 = 3;
      std::string::basic_string[abi:nn180100]<0>(v37, "b0");
      v38 = 4;
      std::string::basic_string[abi:nn180100]<0>(v39, "b0");
      v25 = 0;
      v28 = 0;
      v29 = 0;
      v27 = &v28;
      do
      {
        std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::__emplace_hint_unique_key_args<AGCTargetArchMinor,std::pair<AGCTargetArchMinor const,std::string> const&>((uint64_t *)&v27, (uint64_t *)&v28, v34[v25], (uint64_t)&v34[v25]);
        v25 += 8;
      }
      while (v25 != 24);
      getFullBitcodePath(&v32, (uint64_t)v30, v24, (uint64_t)&v27);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v32;
      std::__tree<std::__value_type<AGCTargetArchMinor,std::string>,std::__map_value_compare<AGCTargetArchMinor,std::__value_type<AGCTargetArchMinor,std::string>,std::less<AGCTargetArchMinor>,true>,std::allocator<std::__value_type<AGCTargetArchMinor,std::string>>>::destroy(v28);
      for (k = 0; k != -12; k -= 4)
      {
        if (SHIBYTE(v39[k + 2]) < 0)
          operator delete((void *)v39[k]);
      }
LABEL_44:
      if (v31 < 0)
        operator delete(v30[0]);
      goto LABEL_7;
    case 0x20:
    case 0x22:
      v5 = "cei_patch_exec_gen6_hal200";
LABEL_6:
      MEMORY[0x1CAA2D494](&__p, v5);
LABEL_7:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)p_p, size, 0);
      if ((v9 & 1) == 0
      {
        AGCLLVMDriverExecuteIndirectComputeShaderGen5::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
        *(_QWORD *)algn_1EF8E90F8 = 0;
        qword_1EF8E9100 = 0;
      }
      v10 = (_QWORD *)operator new();
      AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v10 + 557), a2, *Bitcode);
      AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v10, (uint64_t *)&off_1E7E90678, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverExecuteIndirectComputeShaderGen5::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
      *v10 = &off_1E7E90218;
      v10[557] = &unk_1E7E90578;
      v10[561] = &unk_1E7E90668;
      *(_OWORD *)(v10 + 553) = 0u;
      v10[555] = 0x2000000000;
      v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10[607] + 824) + 504))(*(_QWORD *)(v10[607] + 824));
      v12 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v10 + 553), "indirectCommandBuffer", 0x15uLL);
      *(_QWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 20) = 0;
      v13 = *(_QWORD *)(*(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 400) + 824);
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 496))(v13);
      v15 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v10 + 553), "params", 6uLL);
      *(_QWORD *)(v15 + 8) = 1;
      *(_DWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 20) = 0;
      v16 = *(_QWORD *)(*v10 - 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      result = (_QWORD *)((char *)v10 + v16);
      break;
    default:
      result = AGCLLVMDriverExecuteIndirectComputeShaderG10::create(a2, a3, a3);
      break;
  }
  return result;
}

uint64_t AGCLLVMGen5TargetConfig::createGeometryPipelineEmulationFWAllocationSetupShader(AGCLLVMGen5TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"gpe_setup", 9, 0);
  if ((v5 & 1) == 0
  {
    AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9158 = 0;
    qword_1EF8E9160 = 0;
  }
  v6 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v6 + 557), a2, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v6, (uint64_t *)&off_1E7E91068, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverGeometryPipelineEmulationFWAllocationSetupShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v6 = &off_1E7E90C00;
  v6[557] = &unk_1E7E90F60;
  v6[561] = &unk_1E7E91050;
  *(_OWORD *)(v6 + 553) = 0u;
  v6[555] = 0x2000000000;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6[607] + 824) + 1000))(*(_QWORD *)(v6[607] + 824));
  v8 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v6 + 553), "per_kick_info", 0xDuLL);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 20) = 0;
  v9 = *(_QWORD *)(*(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 400) + 824);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1016))(v9);
  v11 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v6 + 553), "mailbox_lookup_buffer_gpuva", 0x1BuLL);
  *(_QWORD *)(v11 + 8) = 1;
  *(_DWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 20) = 0;
  return (uint64_t)v6 + *(_QWORD *)(*v6 - 24);
}

uint64_t AGCLLVMGen5TargetConfig::createGeometryPipelineEmulationFWAllocationPostObjectShader(AGCLLVMGen5TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"gpe_post_os", 11, 0);
  if ((v5 & 1) == 0
  {
    AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9178 = 0;
    qword_1EF8E9180 = 0;
  }
  v6 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v6 + 557), a2, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v6, (uint64_t *)&off_1E7E91568, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverGeometryPipelineEmulationFWAllocationPostObjectShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v6 = &off_1E7E91100;
  v6[557] = &unk_1E7E91460;
  v6[561] = &unk_1E7E91550;
  *(_OWORD *)(v6 + 553) = 0u;
  v6[555] = 0x2000000000;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6[607] + 824) + 1000))(*(_QWORD *)(v6[607] + 824));
  v8 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v6 + 553), "per_kick_info", 0xDuLL);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 20) = 0;
  v9 = *(_QWORD *)(*(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 400) + 824);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1016))(v9);
  v11 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v6 + 553), "mailbox_lookup_buffer_gpuva", 0x1BuLL);
  *(_QWORD *)(v11 + 8) = 1;
  *(_DWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 20) = 0;
  return (uint64_t)v6 + *(_QWORD *)(*v6 - 24);
}

uint64_t AGCLLVMGen5TargetConfig::createGeometryPipelineEmulationFWAllocationPreMeshShader(AGCLLVMGen5TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3)
{
  llvm::LLVMContext **Bitcode;
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  Bitcode = (llvm::LLVMContext **)AGCLLVMObject::readBitcode((uint64_t)a3, (const UInt8 *)"gpe_pre_ms", 10, 0);
  if ((v5 & 1) == 0
  {
    AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS = 0;
    *(_QWORD *)algn_1EF8E9198 = 0;
    qword_1EF8E91A0 = 0;
  }
  v6 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v6 + 557), a2, *Bitcode);
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v6, (uint64_t *)&off_1E7E91A68, (uint64_t)Bitcode, (uint64_t)&AGCLLVMDriverGeometryPipelineEmulationFWAllocationPreMeshShader::create(AGCLLVMCtx &,llvm::LLVMContext &)::computeCS);
  *v6 = &off_1E7E91600;
  v6[557] = &unk_1E7E91960;
  v6[561] = &unk_1E7E91A50;
  *(_OWORD *)(v6 + 553) = 0u;
  v6[555] = 0x2000000000;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6[607] + 824) + 1000))(*(_QWORD *)(v6[607] + 824));
  v8 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v6 + 553), "per_kick_info", 0xDuLL);
  *(_QWORD *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 20) = 0;
  v9 = *(_QWORD *)(*(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 400) + 824);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1016))(v9);
  v11 = *llvm::StringMap<BufferReplacementInfo,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v6 + 553), "mailbox_lookup_buffer_gpuva", 0x1BuLL);
  *(_QWORD *)(v11 + 8) = 1;
  *(_DWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 20) = 0;
  return (uint64_t)v6 + *(_QWORD *)(*v6 - 24);
}

double AGCLLVMGen5TargetConfig::initializeAirBuiltinsMap(AGCLLVMGen5TargetConfig *this, AGCLLVMAirBuiltinsMap *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double result;

  AGCLLVMGen3TargetConfig::initializeAirBuiltinsMap(this, a2);
  v3 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_warped_coordinates", 0x16uLL);
  *(_DWORD *)(v3 + 8) = 1;
  *(_OWORD *)(v3 + 16) = xmmword_1C3E38330;
  *(_DWORD *)(v3 + 32) = 7;
  *(_WORD *)(v3 + 36) = 0;
  v4 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_dewarped_coordinates", 0x18uLL);
  *(_DWORD *)(v4 + 8) = 1;
  *(_OWORD *)(v4 + 16) = xmmword_1C3E38340;
  *(_DWORD *)(v4 + 32) = 7;
  *(_WORD *)(v4 + 36) = 0;
  v5 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "map_screen_to_physical_coordinates", 0x22uLL);
  *(_DWORD *)(v5 + 8) = 1;
  *(_OWORD *)(v5 + 16) = xmmword_1C3E38330;
  *(_DWORD *)(v5 + 32) = 7;
  *(_WORD *)(v5 + 36) = 0;
  v6 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "map_physical_to_screen_coordinates", 0x22uLL);
  *(_DWORD *)(v6 + 8) = 1;
  *(_OWORD *)(v6 + 16) = xmmword_1C3E38340;
  *(_DWORD *)(v6 + 32) = 7;
  *(_WORD *)(v6 + 36) = 0;
  v7 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_ballot", 0xBuLL);
  *(_DWORD *)(v7 + 8) = 1;
  *(_OWORD *)(v7 + 16) = xmmword_1C3E38350;
  *(_DWORD *)(v7 + 32) = 3;
  *(_WORD *)(v7 + 36) = 0;
  v8 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_broadcast", 0xEuLL);
  *(_DWORD *)(v8 + 8) = 1;
  *(_OWORD *)(v8 + 16) = xmmword_1C3E38360;
  *(_DWORD *)(v8 + 32) = 5;
  *(_WORD *)(v8 + 36) = 0;
  v9 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_ballot", 0xBuLL);
  *(_DWORD *)(v9 + 8) = 1;
  *(_OWORD *)(v9 + 16) = xmmword_1C3E38370;
  *(_DWORD *)(v9 + 32) = 7;
  *(_WORD *)(v9 + 36) = 0;
  v10 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle", 0xCuLL);
  *(_DWORD *)(v10 + 8) = 1;
  *(_OWORD *)(v10 + 16) = xmmword_1C3E38380;
  *(_DWORD *)(v10 + 32) = 5;
  *(_WORD *)(v10 + 36) = 0;
  v11 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_up", 0xFuLL);
  *(_DWORD *)(v11 + 8) = 1;
  *(_OWORD *)(v11 + 16) = xmmword_1C3E38390;
  *(_DWORD *)(v11 + 32) = 5;
  *(_WORD *)(v11 + 36) = 0;
  v12 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_down", 0x11uLL);
  *(_DWORD *)(v12 + 8) = 1;
  *(_OWORD *)(v12 + 16) = xmmword_1C3E383A0;
  *(_DWORD *)(v12 + 32) = 5;
  *(_WORD *)(v12 + 36) = 0;
  v13 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_xor", 0x10uLL);
  *(_DWORD *)(v13 + 8) = 1;
  *(_OWORD *)(v13 + 16) = xmmword_1C3E383B0;
  *(_DWORD *)(v13 + 32) = 5;
  *(_WORD *)(v13 + 36) = 0;
  v14 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_rotate_up", 0x16uLL);
  *(_DWORD *)(v14 + 8) = 1;
  *(_OWORD *)(v14 + 16) = xmmword_1C3E383C0;
  *(_DWORD *)(v14 + 32) = 5;
  *(_WORD *)(v14 + 36) = 0;
  v15 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_rotate_down", 0x18uLL);
  *(_DWORD *)(v15 + 8) = 1;
  *(_OWORD *)(v15 + 16) = xmmword_1C3E383D0;
  *(_DWORD *)(v15 + 32) = 5;
  *(_WORD *)(v15 + 36) = 0;
  v16 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_threads_per_simdgroup", 0x19uLL);
  *(_DWORD *)(v16 + 8) = 1;
  *(_OWORD *)(v16 + 16) = xmmword_1C3E383E0;
  *(_DWORD *)(v16 + 32) = 7;
  *(_WORD *)(v16 + 36) = 0;
  v17 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_thread_index_in_simdgroup", 0x1DuLL);
  *(_DWORD *)(v17 + 8) = 1;
  *(_OWORD *)(v17 + 16) = xmmword_1C3E383F0;
  *(_DWORD *)(v17 + 32) = 7;
  *(_WORD *)(v17 + 36) = 0;
  v18 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_simdgroup_index_in_threadgroup", 0x22uLL);
  *(_DWORD *)(v18 + 8) = 1;
  *(_OWORD *)(v18 + 16) = xmmword_1C3E38400;
  *(_DWORD *)(v18 + 32) = 7;
  *(_WORD *)(v18 + 36) = 0;
  v19 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_active_threads_mask", 0x18uLL);
  *(_DWORD *)(v19 + 8) = 1;
  *(_OWORD *)(v19 + 16) = xmmword_1C3E38410;
  *(_DWORD *)(v19 + 32) = 7;
  *(_WORD *)(v19 + 36) = 256;
  v20 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_active_threads_mask", 0x18uLL);
  *(_DWORD *)(v20 + 8) = 1;
  *(_OWORD *)(v20 + 16) = xmmword_1C3E38420;
  *(_DWORD *)(v20 + 32) = 1;
  *(_WORD *)(v20 + 36) = 0;
  v21 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_all", 8uLL);
  *(_DWORD *)(v21 + 8) = 1;
  *(_OWORD *)(v21 + 16) = xmmword_1C3E38430;
  *(_DWORD *)(v21 + 32) = 3;
  *(_WORD *)(v21 + 36) = 0;
  v22 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_any", 8uLL);
  *(_DWORD *)(v22 + 8) = 1;
  *(_OWORD *)(v22 + 16) = xmmword_1C3E38440;
  *(_DWORD *)(v22 + 32) = 3;
  *(_WORD *)(v22 + 36) = 0;
  v23 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_all", 8uLL);
  *(_DWORD *)(v23 + 8) = 1;
  *(_OWORD *)(v23 + 16) = xmmword_1C3E38450;
  *(_DWORD *)(v23 + 32) = 3;
  *(_WORD *)(v23 + 36) = 0;
  v24 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_any", 8uLL);
  *(_DWORD *)(v24 + 8) = 1;
  *(_OWORD *)(v24 + 16) = xmmword_1C3E38460;
  *(_DWORD *)(v24 + 32) = 3;
  *(_WORD *)(v24 + 36) = 0;
  v25 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_vote_all", 0xDuLL);
  *(_DWORD *)(v25 + 8) = 1;
  *(_OWORD *)(v25 + 16) = xmmword_1C3E38470;
  *(_DWORD *)(v25 + 32) = 7;
  *(_WORD *)(v25 + 36) = 0;
  v26 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_vote_any", 0xDuLL);
  *(_DWORD *)(v26 + 8) = 1;
  *(_OWORD *)(v26 + 16) = xmmword_1C3E38480;
  *(_DWORD *)(v26 + 32) = 7;
  *(_WORD *)(v26 + 36) = 0;
  v27 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_vote_all", 0xDuLL);
  *(_DWORD *)(v27 + 8) = 1;
  *(_OWORD *)(v27 + 16) = xmmword_1C3E38490;
  *(_DWORD *)(v27 + 32) = 3;
  *(_WORD *)(v27 + 36) = 0;
  v28 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_vote_any", 0xDuLL);
  *(_DWORD *)(v28 + 8) = 1;
  *(_OWORD *)(v28 + 16) = xmmword_1C3E384A0;
  *(_DWORD *)(v28 + 32) = 3;
  *(_WORD *)(v28 + 36) = 0;
  v29 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_load", 0x19uLL);
  *(_DWORD *)(v29 + 8) = 1;
  *(_OWORD *)(v29 + 16) = xmmword_1C3E384B0;
  *(_DWORD *)(v29 + 32) = 10;
  *(_WORD *)(v29 + 36) = 0;
  v30 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_store", 0x1AuLL);
  *(_DWORD *)(v30 + 8) = 1;
  *(_OWORD *)(v30 + 16) = xmmword_1C3E384C0;
  *(_DWORD *)(v30 + 32) = 10;
  *(_WORD *)(v30 + 36) = 0;
  v31 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_load_bf16", 0x1EuLL);
  *(_DWORD *)(v31 + 8) = 1;
  *(_OWORD *)(v31 + 16) = xmmword_1C3E384B0;
  *(_DWORD *)(v31 + 32) = 10;
  *(_WORD *)(v31 + 36) = 0;
  v32 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_store_bf16", 0x1FuLL);
  *(_DWORD *)(v32 + 8) = 1;
  *(_OWORD *)(v32 + 16) = xmmword_1C3E384C0;
  *(_DWORD *)(v32 + 32) = 10;
  *(_WORD *)(v32 + 36) = 0;
  v33 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_multiply_accumulate", 0x28uLL);
  *(_DWORD *)(v33 + 8) = 1;
  *(_OWORD *)(v33 + 16) = xmmword_1C3E384D0;
  *(_DWORD *)(v33 + 32) = 10;
  *(_WORD *)(v33 + 36) = 0;
  v34 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_init_diag", 0x1EuLL);
  *(_DWORD *)(v34 + 8) = 1;
  *(_OWORD *)(v34 + 16) = xmmword_1C3E37D90;
  *(_DWORD *)(v34 + 32) = 10;
  *(_WORD *)(v34 + 36) = 0;
  v35 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simdgroup_matrix_8x8_init_filled", 0x20uLL);
  *(_DWORD *)(v35 + 8) = 1;
  *(_OWORD *)(v35 + 16) = xmmword_1C3E37D90;
  *(_DWORD *)(v35 + 32) = 10;
  *(_WORD *)(v35 + 36) = 0;
  v36 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_and", 8uLL);
  *(_DWORD *)(v36 + 8) = 1;
  *(_OWORD *)(v36 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v36 + 32) = 10;
  *(_WORD *)(v36 + 36) = 0;
  v37 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_or", 7uLL);
  *(_DWORD *)(v37 + 8) = 1;
  *(_OWORD *)(v37 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v37 + 32) = 10;
  *(_WORD *)(v37 + 36) = 0;
  v38 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_xor", 8uLL);
  *(_DWORD *)(v38 + 8) = 1;
  *(_OWORD *)(v38 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v38 + 32) = 10;
  *(_WORD *)(v38 + 36) = 0;
  v39 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_product", 0xCuLL);
  *(_DWORD *)(v39 + 8) = 1;
  *(_OWORD *)(v39 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v39 + 32) = 10;
  *(_WORD *)(v39 + 36) = 0;
  v40 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_sum", 8uLL);
  *(_DWORD *)(v40 + 8) = 1;
  *(_OWORD *)(v40 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v40 + 32) = 10;
  *(_WORD *)(v40 + 36) = 0;
  v41 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_max", 8uLL);
  *(_DWORD *)(v41 + 8) = 1;
  *(_OWORD *)(v41 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v41 + 32) = 10;
  *(_WORD *)(v41 + 36) = 0;
  v42 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_min", 8uLL);
  *(_DWORD *)(v42 + 8) = 1;
  *(_OWORD *)(v42 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v42 + 32) = 10;
  *(_WORD *)(v42 + 36) = 0;
  v43 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_prefix_inclusive_product", 0x1DuLL);
  *(_DWORD *)(v43 + 8) = 1;
  *(_OWORD *)(v43 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v43 + 32) = 10;
  *(_WORD *)(v43 + 36) = 0;
  v44 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_prefix_inclusive_sum", 0x19uLL);
  *(_DWORD *)(v44 + 8) = 1;
  *(_OWORD *)(v44 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v44 + 32) = 10;
  *(_WORD *)(v44 + 36) = 0;
  v45 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_prefix_exclusive_product", 0x1DuLL);
  *(_DWORD *)(v45 + 8) = 1;
  *(_OWORD *)(v45 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v45 + 32) = 10;
  *(_WORD *)(v45 + 36) = 0;
  v46 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_prefix_exclusive_sum", 0x19uLL);
  *(_DWORD *)(v46 + 8) = 1;
  *(_OWORD *)(v46 + 16) = xmmword_1C3E384E0;
  *(_DWORD *)(v46 + 32) = 10;
  *(_WORD *)(v46 + 36) = 0;
  v47 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_is_helper_thread", 0x15uLL);
  *(_DWORD *)(v47 + 8) = 1;
  *(_OWORD *)(v47 + 16) = xmmword_1C3E384F0;
  *(_DWORD *)(v47 + 32) = 10;
  *(_WORD *)(v47 + 36) = 0;
  v48 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_is_first", 0xDuLL);
  *(_DWORD *)(v48 + 8) = 1;
  *(_OWORD *)(v48 + 16) = xmmword_1C3E37E00;
  *(_DWORD *)(v48 + 32) = 10;
  *(_WORD *)(v48 + 36) = 0;
  v49 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_broadcast_first", 0x14uLL);
  *(_DWORD *)(v49 + 8) = 1;
  *(_OWORD *)(v49 + 16) = xmmword_1C3E37E10;
  *(_DWORD *)(v49 + 32) = 10;
  *(_WORD *)(v49 + 36) = 0;
  v50 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_and", 8uLL);
  *(_DWORD *)(v50 + 8) = 1;
  *(_OWORD *)(v50 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v50 + 32) = 10;
  *(_WORD *)(v50 + 36) = 0;
  v51 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_or", 7uLL);
  *(_DWORD *)(v51 + 8) = 1;
  *(_OWORD *)(v51 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v51 + 32) = 10;
  *(_WORD *)(v51 + 36) = 0;
  v52 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_xor", 8uLL);
  *(_DWORD *)(v52 + 8) = 1;
  *(_OWORD *)(v52 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v52 + 32) = 10;
  *(_WORD *)(v52 + 36) = 0;
  v53 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_product", 0xCuLL);
  *(_DWORD *)(v53 + 8) = 1;
  *(_OWORD *)(v53 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v53 + 32) = 10;
  *(_WORD *)(v53 + 36) = 0;
  v54 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_sum", 8uLL);
  *(_DWORD *)(v54 + 8) = 1;
  *(_OWORD *)(v54 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v54 + 32) = 10;
  *(_WORD *)(v54 + 36) = 0;
  v55 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_max", 8uLL);
  *(_DWORD *)(v55 + 8) = 1;
  *(_OWORD *)(v55 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v55 + 32) = 10;
  *(_WORD *)(v55 + 36) = 0;
  v56 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_min", 8uLL);
  *(_DWORD *)(v56 + 8) = 1;
  *(_OWORD *)(v56 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v56 + 32) = 10;
  *(_WORD *)(v56 + 36) = 0;
  v57 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_prefix_inclusive_product", 0x1DuLL);
  *(_DWORD *)(v57 + 8) = 1;
  *(_OWORD *)(v57 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v57 + 32) = 10;
  *(_WORD *)(v57 + 36) = 0;
  v58 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_prefix_inclusive_sum", 0x19uLL);
  *(_DWORD *)(v58 + 8) = 1;
  *(_OWORD *)(v58 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v58 + 32) = 10;
  *(_WORD *)(v58 + 36) = 0;
  v59 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_prefix_exclusive_product", 0x1DuLL);
  *(_DWORD *)(v59 + 8) = 1;
  *(_OWORD *)(v59 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v59 + 32) = 10;
  *(_WORD *)(v59 + 36) = 0;
  v60 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_prefix_exclusive_sum", 0x19uLL);
  *(_DWORD *)(v60 + 8) = 1;
  *(_OWORD *)(v60 + 16) = xmmword_1C3E38500;
  *(_DWORD *)(v60 + 32) = 10;
  *(_WORD *)(v60 + 36) = 0;
  v61 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_is_helper_thread", 0x15uLL);
  *(_DWORD *)(v61 + 8) = 1;
  *(_OWORD *)(v61 + 16) = xmmword_1C3E38510;
  *(_DWORD *)(v61 + 32) = 10;
  *(_WORD *)(v61 + 36) = 0;
  v62 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_is_first", 0xDuLL);
  *(_DWORD *)(v62 + 8) = 1;
  *(_OWORD *)(v62 + 16) = xmmword_1C3E38520;
  *(_DWORD *)(v62 + 32) = 10;
  *(_WORD *)(v62 + 36) = 0;
  v63 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_broadcast_first", 0x14uLL);
  *(_DWORD *)(v63 + 8) = 1;
  *(_OWORD *)(v63 + 16) = xmmword_1C3E38530;
  *(_DWORD *)(v63 + 32) = 10;
  *(_WORD *)(v63 + 36) = 0;
  v64 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_and_fill_up", 0x18uLL);
  *(_DWORD *)(v64 + 8) = 1;
  *(_OWORD *)(v64 + 16) = xmmword_1C3E37DA0;
  *(_DWORD *)(v64 + 32) = 10;
  *(_WORD *)(v64 + 36) = 0;
  v65 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "simd_shuffle_and_fill_down", 0x1AuLL);
  *(_DWORD *)(v65 + 8) = 1;
  *(_OWORD *)(v65 + 16) = xmmword_1C3E37DA0;
  *(_DWORD *)(v65 + 32) = 10;
  *(_WORD *)(v65 + 36) = 0;
  v66 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_and_fill_up", 0x18uLL);
  *(_DWORD *)(v66 + 8) = 1;
  *(_OWORD *)(v66 + 16) = xmmword_1C3E37DA0;
  *(_DWORD *)(v66 + 32) = 10;
  *(_WORD *)(v66 + 36) = 0;
  v67 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "quad_shuffle_and_fill_down", 0x1AuLL);
  *(_DWORD *)(v67 + 8) = 1;
  *(_OWORD *)(v67 + 16) = xmmword_1C3E37DA0;
  *(_DWORD *)(v67 + 32) = 10;
  *(_WORD *)(v67 + 36) = 0;
  v68 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_thread_position_in_grid", 0x1BuLL);
  *(_DWORD *)(v68 + 8) = 1;
  *(_OWORD *)(v68 + 16) = xmmword_1C3E38540;
  *(_DWORD *)(v68 + 32) = 3;
  *(_WORD *)(v68 + 36) = 0;
  v69 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_position", 0xCuLL);
  *(_DWORD *)(v69 + 8) = 1;
  *(_OWORD *)(v69 + 16) = xmmword_1C3E38550;
  *(_DWORD *)(v69 + 32) = 3;
  *(_WORD *)(v69 + 36) = 0;
  v70 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_sample_id", 0xDuLL);
  *(_DWORD *)(v70 + 8) = 1;
  *(_OWORD *)(v70 + 16) = xmmword_1C3E38560;
  *(_DWORD *)(v70 + 32) = 3;
  *(_WORD *)(v70 + 36) = 0;
  v71 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_vertex_id", 0xDuLL);
  *(_DWORD *)(v71 + 8) = 1;
  *(_OWORD *)(v71 + 16) = xmmword_1C3E38570;
  *(_DWORD *)(v71 + 32) = 3;
  *(_WORD *)(v71 + 36) = 0;
  v72 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_instance_id", 0xFuLL);
  *(_DWORD *)(v72 + 8) = 1;
  *(_OWORD *)(v72 + 16) = xmmword_1C3E38580;
  *(_DWORD *)(v72 + 32) = 3;
  *(_WORD *)(v72 + 36) = 0;
  v73 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_amplification_id", 0x14uLL);
  *(_DWORD *)(v73 + 8) = 1;
  *(_OWORD *)(v73 + 16) = xmmword_1C3E38590;
  *(_DWORD *)(v73 + 32) = 3;
  *(_WORD *)(v73 + 36) = 0;
  v74 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_patch_id", 0xCuLL);
  *(_DWORD *)(v74 + 8) = 1;
  *(_OWORD *)(v74 + 16) = xmmword_1C3E385A0;
  *(_DWORD *)(v74 + 32) = 3;
  *(_WORD *)(v74 + 36) = 0;
  v75 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "get_render_target_array_index", 0x1DuLL);
  *(_DWORD *)(v75 + 8) = 1;
  *(_QWORD *)&result = 424;
  *(_OWORD *)(v75 + 16) = xmmword_1C3E385B0;
  *(_DWORD *)(v75 + 32) = 3;
  *(_WORD *)(v75 + 36) = 0;
  return result;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildStoreChildcount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v8 = *(_QWORD *)(a1 + 312);
  v9 = llvm::PointerType::get();
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.agx2.object.childcount.store", 33, *(_QWORD *)(a1 + 144), v8, v9);
  v17[0] = a4;
  v17[1] = a3;
  v13 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildWriteChildcount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.agx2.object.childcount.write", 33, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 200));
  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  v13[0] = a3;
  v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v6 + 24), v6, (uint64_t)v13, 1, (uint64_t)v8);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildEnableAllThreads(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  _BYTE v6[32];
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
    llvm::MetadataTracking::track();
  v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9)
    llvm::MetadataTracking::untrack();
  v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildGetPayloadPointer(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  _BYTE v6[32];
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
    llvm::MetadataTracking::track();
  v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9)
    llvm::MetadataTracking::untrack();
  llvm::PointerType::get();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildGetMeshPrimitivePointer(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  _BYTE v6[32];
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
    llvm::MetadataTracking::track();
  v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9)
    llvm::MetadataTracking::untrack();
  llvm::PointerType::get();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildAllocateUVB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v12 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13)
    llvm::MetadataTracking::untrack();
  v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.agx2.allocate.uvb", 22, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192));
  v15[0] = a3;
  v15[1] = a4;
  v11 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v8 + 24), v8, (uint64_t)v15, 2, (uint64_t)v10);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildWaitFence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.agx2.wait.fence", 20, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 192));
  v13[0] = a3;
  v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v6 + 24), v6, (uint64_t)v13, 1, (uint64_t)v8);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildMeshIndexWrite(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Type **a4)
{
  llvm::Type *v8;
  llvm::Value *PointerCast;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)llvm::PointerType::get();
  v13 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a4, v8, (const llvm::Twine *)v12);
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx2.mesh.index.write", 26, a1[18], a1[24], (uint64_t)v8);
  v17[0] = a3;
  v17[1] = PointerCast;
  v13 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildMeshPrimattrWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type **a5)
{
  llvm::Type *v10;
  llvm::Value *PointerCast;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  v10 = (llvm::Type *)llvm::PointerType::get();
  v15 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a5, v10, (const llvm::Twine *)v14);
  v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx2.mesh.primattr.write", 29, a1[18], a1[24], a1[24], (uint64_t)v10);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = PointerCast;
  v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildMeshVaryingWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type **a5)
{
  llvm::Type *v10;
  llvm::Value *PointerCast;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  v10 = (llvm::Type *)llvm::PointerType::get();
  v15 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a5, v10, (const llvm::Twine *)v14);
  v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx2.mesh.varying.write", 28, a1[18], a1[24], a1[24], (uint64_t)v10);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = PointerCast;
  v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

uint64_t AGCLLVMGen5TargetLowerer::getExecutionScopedSamplerStateRegisterCount(AGCLLVMGen5TargetLowerer *this)
{
  return 28;
}

uint64_t AGCLLVMGen5TargetLowerer::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL AGCLLVMGen5TargetLowerer::isImageWriteBlockFromDimensionSupported(uint64_t a1, int a2)
{
  return a2 == 8 || (a2 - 2) < 4;
}

void AGCLLVMGen5TargetLowerer::buildMemCpy1D(uint64_t a1, llvm::Instruction *a2, char a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  llvm::Instruction *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[4];
  __int16 v14;
  void *v15[2];
  _QWORD v16[6];

  v16[5] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 8;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v15[0] = v16;
  v15[1] = (void *)0x500000000;
  v7 = llvm::CallBase::arg_end(a2) - (_QWORD)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  if ((int)(v7 >> 5) >= 1)
  {
    v8 = (v7 >> 5);
    v9 = a2;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v15, *((_QWORD *)v9 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      v9 = (llvm::Instruction *)((char *)v9 + 32);
      --v8;
    }
    while (v8);
  }
  if ((a3 & 1) == 0)
  {
    v10 = (char *)v15[0] + 8;
    v13[0] = (*(uint64_t (**)(uint64_t, llvm::Instruction *, _QWORD))(*(_QWORD *)a1 + 1864))(a1, a2, 0);
    llvm::SmallVectorImpl<llvm::Value *>::insert_one_impl<llvm::Value *>((uint64_t)v15, (uint64_t)v10, v13);
  }
  v11 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 1856))(a1, v15);
  v12 = *(_QWORD *)a2;
  v14 = 257;
  llvm::IRBuilderBase::CreateCast(v6, 48, v11, v12, (uint64_t)v13);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (v15[0] != v16)
    free(v15[0]);
}

void AGCLLVMGen5TargetLowerer::buildMemCpy2D(_QWORD *a1, llvm::Instruction *a2, char a3)
{
  llvm::IRBuilderBase *v6;
  unint64_t v7;
  uint64_t v8;
  llvm::Instruction *v9;
  char *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::APInt *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  llvm::Value *ICmp;
  llvm::CmpInst **URem;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::CmpInst **Cast;
  llvm::Value *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::CmpInst **v33;
  uint64_t Signed;
  llvm::Value *v35;
  uint64_t v36;
  llvm::Value *v37;
  llvm::Value *v38;
  uint64_t v39;
  llvm::Value *v40;
  uint64_t v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  uint64_t v46;
  llvm::BasicBlock *v47;
  uint64_t FirstInsertionPt;
  llvm::Type *v49;
  llvm::User *PHI;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Instruction *v56;
  uint64_t v57;
  llvm::Instruction *v58;
  llvm::Value *v59;
  uint64_t v60;
  llvm::Instruction *v61;
  uint64_t v62;
  llvm::Instruction *v63;
  llvm::Value *v64;
  uint64_t v65;
  llvm::Instruction *v66;
  uint64_t v67;
  llvm::Instruction *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  llvm::Value *v76;
  uint64_t Element;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  llvm::Value *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89[32];
  __int16 v90;
  char v91[32];
  __int16 v92;
  char v93[32];
  __int16 v94;
  char v95[32];
  __int16 v96;
  char v97[32];
  __int16 v98;
  _BYTE v99[32];
  __int16 v100;
  uint64_t v101[4];
  __int16 v102;
  void *v103[2];
  _QWORD v104[14];

  v104[12] = *MEMORY[0x1E0C80C00];
  v6 = (llvm::IRBuilderBase *)(a1 + 1);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), a2);
  v103[0] = v104;
  v103[1] = (void *)0xC00000000;
  v7 = llvm::CallBase::arg_end(a2) - (_QWORD)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  if ((int)(v7 >> 5) >= 1)
  {
    v8 = (v7 >> 5);
    v9 = a2;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v103, *((_QWORD *)v9 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      v9 = (llvm::Instruction *)((char *)v9 + 32);
      --v8;
    }
    while (v8);
  }
  if ((a3 & 1) == 0)
  {
    v10 = (char *)v103[0] + 8;
    v101[0] = (*(uint64_t (**)(_QWORD *, llvm::Instruction *, _QWORD))(*a1 + 1864))(a1, a2, 0);
    llvm::SmallVectorImpl<llvm::Value *>::insert_one_impl<llvm::Value *>((uint64_t)v103, (uint64_t)v10, v101);
  }
  v11 = (unsigned __int8 *)*((_QWORD *)v103[0] + 10);
  v12 = **((_QWORD **)v103[0] + 2);
  v13 = *(_DWORD *)(v12 + 8);
  if ((v13 & 0xFE) == 0x12)
    v13 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
  v14 = v13 & 0xFFFFFF00;
  if (v14 == 768)
    v15 = *((_QWORD *)v103[0] + 4);
  else
    v15 = *((_QWORD *)v103[0] + 8);
  if (v14 == 768)
    v16 = *((_QWORD *)v103[0] + 8);
  else
    v16 = *((_QWORD *)v103[0] + 4);
  if (v14 == 768)
    v17 = *((_QWORD *)v103[0] + 7);
  else
    v17 = *((_QWORD *)v103[0] + 3);
  if (*(_BYTE *)(v15 + 16) == 16 && *(_BYTE *)(v16 + 16) == 16 && *(_BYTE *)(v17 + 16) == 16 && v11[16] <= 0x14u)
  {
    v18 = (llvm::APInt *)(v15 + 24);
    v19 = *(_DWORD *)(v15 + 32);
    if (v19 > 0x40)
      v20 = llvm::APInt::countLeadingZerosSlowCase(v18) == v19 - 1;
    else
      v20 = *(_QWORD *)v18 == 1;
    v71 = v20;
    v72 = (unint64_t *)(v17 + 24);
    if (*(_DWORD *)(v17 + 32) >= 0x41u)
      v72 = (unint64_t *)*v72;
    v73 = (unint64_t *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u)
      v73 = (unint64_t *)*v73;
    v74 = *v72;
    v75 = *v73;
    v102 = 257;
    v76 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement(v6, (llvm::Value *)v11, v76, (const llvm::Twine *)v101);
    if (*(_BYTE *)(Element + 16) == 16)
      v78 = Element;
    else
      v78 = 0;
    v79 = *(_DWORD *)(v78 + 32);
    if (v79 > 0x40)
      v80 = **(_QWORD **)(v78 + 24);
    else
      v80 = (uint64_t)(*(_QWORD *)(v78 + 24) << -(char)v79) >> -(char)v79;
    v102 = 257;
    v81 = (llvm::Value *)llvm::ConstantInt::get();
    v82 = llvm::IRBuilderBase::CreateExtractElement(v6, (llvm::Value *)v11, v81, (const llvm::Twine *)v101);
    if (*(_BYTE *)(v82 + 16) == 16)
      v83 = v82;
    else
      v83 = 0;
    v84 = *(_DWORD *)(v83 + 32);
    if (v84 > 0x40)
      v85 = **(_QWORD **)(v83 + 24);
    else
      v85 = (uint64_t)(*(_QWORD *)(v83 + 24) << -(char)v84) >> -(char)v84;
    v86 = *a1;
    if (!v71 || v74 % v75 || (v80 - 0x8000) < 0xFFFF0000 || (v85 - 0x8000) < 0xFFFF0000)
      v87 = (*(uint64_t (**)(_QWORD *, void **))(v86 + 1832))(a1, v103);
    else
      v87 = (*(uint64_t (**)(_QWORD *, void **))(v86 + 1840))(a1, v103);
    PHI = (llvm::User *)v87;
  }
  else
  {
    v21 = llvm::ConstantInt::get();
    v102 = 257;
    ICmp = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v6, 32, (llvm::CmpInst **)v15, v21, (uint64_t)v101);
    v102 = 257;
    URem = (llvm::CmpInst **)llvm::IRBuilderBase::CreateURem(v6, (llvm::Value *)v17, (llvm::Value *)v16, (const llvm::Twine *)v101);
    v24 = llvm::ConstantInt::get();
    v100 = 257;
    v25 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v6, 32, URem, v24, (uint64_t)v99);
    v102 = 257;
    v26 = (llvm::Value *)llvm::ConstantInt::get();
    v27 = llvm::IRBuilderBase::CreateExtractElement(v6, (llvm::Value *)v11, v26, (const llvm::Twine *)v101);
    v28 = a1[25];
    v100 = 257;
    Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v6, 38, v27, v28, (uint64_t)v99);
    v102 = 257;
    v30 = (llvm::Value *)llvm::ConstantInt::get();
    v31 = llvm::IRBuilderBase::CreateExtractElement(v6, (llvm::Value *)v11, v30, (const llvm::Twine *)v101);
    v32 = a1[25];
    v100 = 257;
    v33 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v6, 38, v31, v32, (uint64_t)v99);
    Signed = llvm::ConstantInt::getSigned();
    v102 = 257;
    v35 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v6, 39, Cast, Signed, (uint64_t)v101);
    v36 = llvm::ConstantInt::getSigned();
    v100 = 257;
    v37 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v6, 41, Cast, v36, (uint64_t)v99);
    v98 = 257;
    v38 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v6, v35, v37, (const llvm::Twine *)v97);
    v39 = llvm::ConstantInt::getSigned();
    v96 = 257;
    v40 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v6, 39, v33, v39, (uint64_t)v95);
    v41 = llvm::ConstantInt::getSigned();
    v94 = 257;
    v42 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)v6, 41, v33, v41, (uint64_t)v93);
    v92 = 257;
    v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v6, v40, v42, (const llvm::Twine *)v91);
    v90 = 257;
    v44 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v6, v38, v43, (const llvm::Twine *)v89);
    v102 = 257;
    v45 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v6, ICmp, v25, (const llvm::Twine *)v101);
    v100 = 257;
    v88 = llvm::IRBuilderBase::CreateAnd(v6, v44, v45, (const llvm::Twine *)v99);
    v46 = a1[7];
    v101[0] = (uint64_t)"async.copy.merge";
    v102 = 259;
    v47 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v47);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v6, (uint64_t)v47, FirstInsertionPt);
    v49 = (llvm::Type *)a1[26];
    v102 = 257;
    PHI = llvm::IRBuilderBase::CreatePHI(v6, v49, 2, (const llvm::Twine *)v101);
    v101[0] = (uint64_t)"async.copy.emulation";
    v102 = 259;
    v51 = operator new();
    llvm::BasicBlock::BasicBlock();
    v101[0] = (uint64_t)"async.copy.dma";
    v102 = 259;
    v52 = operator new();
    v53 = llvm::BasicBlock::BasicBlock();
    v54 = v53 + 40;
    a1[7] = v53;
    a1[8] = v53 + 40;
    llvm::IRBuilderBase::CreateBr(v6, v47);
    v55 = *(_QWORD *)(v52 + 40);
    if (v55 == v54)
    {
      v58 = 0;
    }
    else
    {
      v56 = (llvm::Instruction *)(v55 - 24);
      if (v55)
        v57 = v55 - 24;
      else
        v57 = 0;
      if (*(unsigned __int8 *)(v57 + 16) - 29 >= 0xB)
        v58 = 0;
      else
        v58 = v56;
    }
    llvm::IRBuilderBase::SetInsertPoint(v6, v58);
    v59 = (llvm::Value *)(*(uint64_t (**)(_QWORD *, void **))(*a1 + 1840))(a1, v103);
    llvm::PHINode::addIncoming(PHI, v59, (llvm::BasicBlock *)a1[7]);
    a1[7] = v51;
    a1[8] = v51 + 40;
    llvm::IRBuilderBase::CreateBr(v6, v47);
    v60 = *(_QWORD *)(v51 + 40);
    if (v60 == v51 + 40)
    {
      v63 = 0;
    }
    else
    {
      v61 = (llvm::Instruction *)(v60 - 24);
      if (v60)
        v62 = v60 - 24;
      else
        v62 = 0;
      if (*(unsigned __int8 *)(v62 + 16) - 29 >= 0xB)
        v63 = 0;
      else
        v63 = v61;
    }
    llvm::IRBuilderBase::SetInsertPoint(v6, v63);
    v64 = (llvm::Value *)(*(uint64_t (**)(_QWORD *, void **))(*a1 + 1832))(a1, v103);
    llvm::PHINode::addIncoming(PHI, v64, (llvm::BasicBlock *)a1[7]);
    v65 = *(_QWORD *)(v46 + 40);
    if (v65 == v46 + 40)
    {
      v68 = 0;
    }
    else
    {
      v66 = (llvm::Instruction *)(v65 - 24);
      if (v65)
        v67 = v65 - 24;
      else
        v67 = 0;
      if (*(unsigned __int8 *)(v67 + 16) - 29 >= 0xB)
        v68 = 0;
      else
        v68 = v66;
    }
    llvm::Instruction::eraseFromParent(v68);
    a1[7] = v46;
    a1[8] = v46 + 40;
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)v6, v88, v52, v51);
    v69 = llvm::BasicBlock::getFirstInsertionPt(v47);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v6, (uint64_t)v47, v69);
  }
  v70 = *(_QWORD *)a2;
  v102 = 257;
  llvm::IRBuilderBase::CreateCast((uint64_t)v6, 48, (uint64_t)PHI, v70, (uint64_t)v101);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (v103[0] != v104)
    free(v103[0]);
}

uint64_t AGCLLVMGen5TargetLowerer::buildWaitSimdgroupEvents(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t *v4;
  llvm::Type **v5;
  llvm::Value *v6;
  llvm::Type *v7;
  uint64_t AlignedLoad;
  uint64_t v9;
  char v10;
  char v11;
  const std::string::value_type *v12;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type size;
  void **v16;
  std::string *v17;
  llvm::BasicBlock *v18;
  uint64_t v19;
  llvm::Instruction *v20;
  uint64_t v21;
  llvm::Instruction *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ICmp;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  size_t v29;
  uint64_t v30;
  uint64_t FirstInsertionPt;
  llvm::CmpInst **Cast;
  std::string v34;
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;
  void *__p[2];
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a1 + 8);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = (llvm::Type **)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
  v37 = 257;
  v7 = AGCLLVMBuilder::tryDeducePointeeType(v5, v6);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v4, v7, (uint64_t)v5, 0, (uint64_t)v36);
  v9 = *(_QWORD *)(a1 + 208);
  v35 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v4, 47, AlignedLoad, v9, (uint64_t)&v34);
  v10 = 1;
  do
  {
    v11 = v10;
    std::string::basic_string[abi:nn180100]<0>(&v34, "async.copy.waiton");
    if ((v11 & 1) != 0)
      v12 = "bufrblk";
    else
      v12 = "bufwblk";
    std::string::append(&v34, v12);
    v13 = *(_QWORD *)(a1 + 56);
    v37 = 260;
    v36[0] = &v34;
    v14 = operator new();
    llvm::BasicBlock::BasicBlock();
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:nn180100]((uint64_t)__p, size + 5);
    if (v39 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if (size)
    {
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v34;
      else
        v17 = (std::string *)v34.__r_.__value_.__r.__words[0];
      memmove(v16, v17, size);
    }
    strcpy((char *)v16 + size, "merge");
    v37 = 260;
    v36[0] = __p;
    v18 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    if (v39 < 0)
      operator delete(__p[0]);
    v19 = *(_QWORD *)(v13 + 40);
    if (v19 == v13 + 40)
    {
      v22 = 0;
    }
    else
    {
      v20 = (llvm::Instruction *)(v19 - 24);
      if (v19)
        v21 = v19 - 24;
      else
        v21 = 0;
      if (*(unsigned __int8 *)(v21 + 16) - 29 >= 0xB)
        v22 = 0;
      else
        v22 = v20;
    }
    llvm::Instruction::eraseFromParent(v22);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v13 + 40;
    v23 = 2568;
    if ((v11 & 1) != 0)
      v23 = 2560;
    v24 = *(_QWORD *)(a1 + v23);
    v37 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp(v4, 32, Cast, v24, (uint64_t)v36);
    llvm::IRBuilderBase::CreateCondBr(v4, ICmp, v14, (uint64_t)v18);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14 + 40;
    v26 = (uint64_t *)llvm::ConstantInt::get();
    v27 = (uint64_t *)llvm::ConstantInt::get();
    v28 = *(_QWORD *)(a1 + 2664);
    if (v28)
      v29 = strlen(*(const char **)(a1 + 2664));
    else
      v29 = 0;
    v30 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, v28, v29, *(_QWORD *)(a1 + 144), *v27, *v26);
    __p[0] = v27;
    __p[1] = v26;
    v37 = 257;
    llvm::IRBuilderBase::CreateCall((uint64_t)v4, *(_QWORD *)(v30 + 24), v30, (uint64_t)__p, 2, (uint64_t)v36);
    llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)v4, v18);
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v18);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v4, (uint64_t)v18, FirstInsertionPt);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    v10 = 0;
  }
  while ((v11 & 1) != 0);
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMGen5TargetLowerer::buildGetNullSimdgroupEvent(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;

  v4 = a1 + 8;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v5 = *(_QWORD *)(a1 + 2552);
  v6 = *(_QWORD *)a2;
  v9 = 257;
  llvm::IRBuilderBase::CreateCast(v4, 48, v5, v6, (uint64_t)v8);
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

uint64_t AGCLLVMGen5TargetLowerer::buildIsNullSimdgroupEvent(_QWORD *a1, llvm::Instruction *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  llvm::CmpInst **Cast;
  uint64_t v8;
  _WORD v10[20];
  _BYTE v11[32];
  __int16 v12;

  v4 = a1 + 1;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), a2);
  v5 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v6 = a1[26];
  v12 = 257;
  Cast = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCast((uint64_t)v4, 47, v5, v6, (uint64_t)v11);
  v8 = a1[319];
  v10[16] = 257;
  llvm::IRBuilderBase::CreateICmp(v4, 32, Cast, v8, (uint64_t)v10);
  llvm::Value::replaceAllUsesWith();
  return llvm::Instruction::eraseFromParent(a2);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildProgramType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[32];
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
    llvm::MetadataTracking::track();
  v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9)
    llvm::MetadataTracking::untrack();
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v4 + 24), v4, 0, 0, (uint64_t)v6);
}

uint64_t AGCLLVMGen5TargetLowerer::buildGlobalBindingOffsetIntrinsic()
{
  return llvm::Intrinsic::getDeclaration();
}

uint64_t AGCLLVMGen5TargetLowerer::buildThreadIndexInSimdGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t Cast;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.simd.element", "");
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = a1 + 8;
  v13 = 257;
  v8 = llvm::IRBuilderBase::CreateCall(v7, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19)
    free(v17);
  return Cast;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdGroupIndexInThreadgroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t Cast;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.simd.group", "");
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = a1 + 8;
  v13 = 257;
  v8 = llvm::IRBuilderBase::CreateCall(v7, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19)
    free(v17);
  return Cast;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffleUp(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[336], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffleDown(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[337], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildReadHWTileID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v7;
  llvm::Value *v8;
  uint64_t Cast;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = xmmword_1C3E37BA0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v17, "llvm.agx2.tile.id", "");
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = a1 + 8;
  v13 = 257;
  v8 = llvm::IRBuilderBase::CreateCall(v7, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v11[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(v7, 38, (uint64_t)v8, a3, (uint64_t)v11);
  if (v17 != v19)
    free(v17);
  return Cast;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildCoordinateWarp(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  BOOL v13;
  _BOOL4 v18;
  llvm::Value *FAdd;
  llvm::Type *v20;
  uint64_t UIToFP;
  uint64_t Splat;
  char v23;
  uint64_t v26;
  llvm::Value *FMul;
  llvm::Type *v28;
  llvm::Value *FPToUI;
  llvm::Type *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *Cast;
  llvm::Value *v37;
  llvm::Value *Element;
  llvm::Value *v39;
  llvm::Value *Add;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *Mul;
  llvm::Type *v44;
  uint64_t GEP;
  llvm::Type *v46;
  char v47;
  llvm::Value *v48;
  llvm::Value *v49;
  uint64_t v50;
  llvm::Type *v51;
  llvm::Value *AlignedLoad;
  llvm::Type *v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  llvm::Type *v58;
  uint64_t v59;
  llvm::Type *v60;
  llvm::Value *v61;
  llvm::Value *v62;
  uint64_t v63;
  llvm::Type *v64;
  llvm::Value *v65;
  llvm::Type *v66;
  llvm::Value *v67;
  llvm::Value *v68;
  llvm::Value *v69;
  llvm::Value *v70;
  llvm::Value *InsertElement;
  llvm::Value *v72;
  llvm::Value *v73;
  llvm::Value *v74;
  llvm::Value *v75;
  llvm::Value *v76;
  llvm::Value *v77;
  llvm::Type *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  llvm::Value *v83;
  llvm::Value *v84;
  llvm::Value *v85;
  llvm::Value *v86;
  llvm::Value *v87;
  llvm::Value *v88;
  llvm::Value *v89;
  llvm::Value *v90;
  llvm::Value *v91;
  llvm::Value *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  llvm::Value *v98;
  llvm::Value *v99;
  llvm::Value *v100;
  llvm::Value *v101;
  llvm::Value *v102;
  llvm::Value *v103;
  llvm::Value *v104;
  llvm::Value *v105;
  llvm::Value *v106;
  llvm::Value *v107;
  llvm::Value *v108;
  llvm::Value *v109;
  llvm::Value *AShr;
  llvm::Type *v111;
  uint64_t SIToFP;
  uint64_t v113;
  uint64_t v114;
  uint64_t Select;
  uint64_t v116;
  uint64_t v117;
  llvm::Value *v118;
  llvm::Type *v119;
  char v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  int v125;
  _BYTE v126[32];
  __int16 v127;
  _BYTE v128[32];
  __int16 v129;
  __int128 v130;
  uint64_t v131;
  int v132;
  _QWORD v133[2];
  _QWORD v134[2];
  _QWORD v135[2];
  _QWORD v136[4];
  __int16 v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v123 = *(_OWORD *)a2;
  v124 = *(_QWORD *)(a2 + 16);
  if (v124)
  {
    llvm::MetadataTracking::track();
    v125 = *(_DWORD *)(a2 + 24);
    v130 = v123;
    v131 = v124;
    llvm::MetadataTracking::track();
    v10 = v125;
  }
  else
  {
    v10 = *(_DWORD *)(a2 + 24);
    v130 = *(_OWORD *)a2;
    v131 = 0;
  }
  v132 = v10;
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v130);
  if (v131)
    llvm::MetadataTracking::untrack();
  if (a5 == 18)
  {
    if (*(_QWORD *)a4 == 0x746E6174736E6F63
      && *(_QWORD *)(a4 + 8) == 0x6632762E3233692ELL
      && *(_WORD *)(a4 + 16) == 12851)
    {
      FAdd = *(llvm::Value **)a3;
      v18 = 1;
LABEL_50:
      v23 = 1;
      goto LABEL_52;
    }
    if (*(_QWORD *)a4 == 0x746E6174736E6F63
      && *(_QWORD *)(a4 + 8) == 0x6932762E3233692ELL
      && *(_WORD *)(a4 + 16) == 12851)
    {
      v18 = 1;
      goto LABEL_34;
    }
LABEL_33:
    v18 = 0;
LABEL_34:
    FAdd = *(llvm::Value **)a3;
    goto LABEL_35;
  }
  if (a5 != 14)
    goto LABEL_33;
  v13 = *(_QWORD *)a4 == 0x746E6174736E6F63 && *(_QWORD *)(a4 + 6) == 0x32336632762E746ELL
     || *(_QWORD *)a4 == 0x32702E3233663276 && *(_QWORD *)(a4 + 6) == 0x3233692E38693270;
  if (*(_QWORD *)a4 != 0x32702E3233663276 || *(_QWORD *)(a4 + 6) != 0x3233692E38693270)
  {
    v18 = *(_QWORD *)a4 == 0x32702E3233693276 && *(_QWORD *)(a4 + 6) == 0x3233692E38693270;
    FAdd = *(llvm::Value **)a3;
    if (v13)
      goto LABEL_50;
LABEL_35:
    v20 = (llvm::Type *)a1[28];
    v129 = 257;
    UIToFP = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(a1 + 1), FAdd, v20, (const llvm::Twine *)v128);
    llvm::ConstantFP::get();
    Splat = llvm::ConstantDataVector::getSplat();
    v127 = 257;
    FAdd = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)(a1 + 1), UIToFP, Splat, (uint64_t)v126);
    v23 = 0;
    goto LABEL_52;
  }
  FAdd = *(llvm::Value **)a3;
  v18 = 1;
  v23 = 1;
  if (!v13)
    goto LABEL_35;
LABEL_52:
  v121 = v23;
  llvm::ConstantFP::get();
  v26 = llvm::ConstantDataVector::getSplat();
  v129 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), (uint64_t)FAdd, v26, (uint64_t)v128);
  v28 = (llvm::Type *)a1[31];
  v129 = 257;
  FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), FMul, v28, (const llvm::Twine *)v128);
  v30 = (llvm::Type *)a1[28];
  v129 = 257;
  v31 = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(a1 + 1), FPToUI, v30, (const llvm::Twine *)v128);
  llvm::ConstantFP::get();
  v32 = llvm::ConstantDataVector::getSplat();
  v127 = 257;
  v33 = llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), v31, v32, (uint64_t)v126);
  v137 = 257;
  llvm::IRBuilderBase::CreateFSub((uint64_t)(a1 + 1), (uint64_t)FAdd, v33, (uint64_t)v136);
  v34 = *(_QWORD *)(a3 + 8);
  v35 = llvm::PointerType::get();
  v129 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, v34, v35, (uint64_t)v128);
  v129 = 257;
  v37 = (llvm::Value *)llvm::ConstantInt::get();
  Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPToUI, v37, (const llvm::Twine *)v128);
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v127 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Element, v39, (const llvm::Twine *)v126);
  if (v18)
  {
    v41 = *(llvm::Value **)(a3 + 16);
    v42 = (llvm::Value *)llvm::ConstantInt::get();
    v129 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 1), v41, v42, (const llvm::Twine *)v128);
    v127 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Add, Mul, (const llvm::Twine *)v126);
  }
  v122 = (uint64_t)FAdd;
  v44 = (llvm::Type *)a1[31];
  v129 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v44, Cast, Add, (const llvm::Twine *)v128);
  v46 = (llvm::Type *)a1[31];
  v47 = 1;
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  v129 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Add, v48, (const llvm::Twine *)v128);
  v127 = 257;
  v50 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v46, Cast, v49, (const llvm::Twine *)v126);
  v51 = (llvm::Type *)a1[31];
  v129 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v51, GEP, 0, (uint64_t)v128);
  v136[0] = AlignedLoad;
  v53 = (llvm::Type *)a1[31];
  v129 = 257;
  v136[1] = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v53, v50, 0, (uint64_t)v128);
  v129 = 257;
  v54 = (llvm::Value *)llvm::ConstantInt::get();
  v55 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPToUI, v54, (const llvm::Twine *)v128);
  v56 = (llvm::Value *)llvm::ConstantInt::get();
  v127 = 257;
  v57 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v55, v56, (const llvm::Twine *)v126);
  v58 = (llvm::Type *)a1[31];
  v129 = 257;
  v59 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v58, Cast, v57, (const llvm::Twine *)v128);
  v60 = (llvm::Type *)a1[31];
  v61 = (llvm::Value *)llvm::ConstantInt::get();
  v129 = 257;
  v62 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v57, v61, (const llvm::Twine *)v128);
  v127 = 257;
  v63 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v60, Cast, v62, (const llvm::Twine *)v126);
  v64 = (llvm::Type *)a1[31];
  v129 = 257;
  v65 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v64, v59, 0, (uint64_t)v128);
  v135[0] = v65;
  v66 = (llvm::Type *)a1[31];
  v129 = 257;
  v135[1] = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v66, v63, 0, (uint64_t)v128);
  v67 = (llvm::Value *)llvm::UndefValue::get();
  v129 = 257;
  v68 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v68, (const llvm::Twine *)v128);
  v127 = 257;
  v70 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v67, v69, v70, (const llvm::Twine *)v126);
  v129 = 257;
  v72 = (llvm::Value *)llvm::ConstantInt::get();
  v73 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v65, v72, (const llvm::Twine *)v128);
  v127 = 257;
  v74 = (llvm::Value *)llvm::ConstantInt::get();
  v75 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v73, v74, (const llvm::Twine *)v126);
  llvm::UndefValue::get();
  llvm::ConstantInt::get();
  v76 = (llvm::Value *)llvm::ConstantDataVector::getSplat();
  v129 = 257;
  v77 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v75, v76, (const llvm::Twine *)v128);
  v78 = (llvm::Type *)a1[28];
  v129 = 257;
  v79 = llvm::IRBuilderBase::CreateUIToFP((llvm::IRBuilderBase *)(a1 + 1), v77, v78, (const llvm::Twine *)v128);
  llvm::ConstantFP::get();
  v80 = llvm::ConstantDataVector::getSplat();
  v129 = 257;
  llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), v79, v80, (uint64_t)v128);
  v129 = 257;
  llvm::IRBuilderBase::CreateFCmpHelper();
  v134[0] = llvm::UndefValue::get();
  v81 = 0;
  v134[1] = llvm::UndefValue::get();
  do
  {
    v82 = v47;
    v83 = (llvm::Value *)v134[v81];
    v84 = (llvm::Value *)v136[v81];
    v129 = 257;
    v85 = (llvm::Value *)llvm::ConstantInt::get();
    v86 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v84, v85, (const llvm::Twine *)v128);
    v127 = 257;
    v87 = (llvm::Value *)llvm::ConstantInt::get();
    v88 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v83, v86, v87, (const llvm::Twine *)v126);
    v89 = (llvm::Value *)v135[v81];
    v129 = 257;
    v90 = (llvm::Value *)llvm::ConstantInt::get();
    v91 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v89, v90, (const llvm::Twine *)v128);
    v127 = 257;
    v92 = (llvm::Value *)llvm::ConstantInt::get();
    v93 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v88, v91, v92, (const llvm::Twine *)v126);
    v94 = a1[28];
    v129 = 257;
    v47 = 0;
    v134[v81] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, v93, v94, (uint64_t)v128);
    v81 = 1;
  }
  while ((v82 & 1) != 0);
  v133[0] = llvm::UndefValue::get();
  v95 = 0;
  v133[1] = llvm::UndefValue::get();
  v96 = 1;
  do
  {
    v97 = v96;
    v98 = (llvm::Value *)v133[v95];
    v99 = (llvm::Value *)v136[v95];
    v129 = 257;
    v100 = (llvm::Value *)llvm::ConstantInt::get();
    v101 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v99, v100, (const llvm::Twine *)v128);
    v127 = 257;
    v102 = (llvm::Value *)llvm::ConstantInt::get();
    v103 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v98, v101, v102, (const llvm::Twine *)v126);
    v104 = (llvm::Value *)v135[v95];
    v129 = 257;
    v105 = (llvm::Value *)llvm::ConstantInt::get();
    v106 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v104, v105, (const llvm::Twine *)v128);
    v127 = 257;
    v107 = (llvm::Value *)llvm::ConstantInt::get();
    v108 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v103, v106, v107, (const llvm::Twine *)v126);
    llvm::ConstantInt::get();
    v109 = (llvm::Value *)llvm::ConstantDataVector::getSplat();
    v129 = 257;
    AShr = (llvm::Value *)llvm::IRBuilderBase::CreateAShr((llvm::IRBuilderBase *)(a1 + 1), v108, v109, (const llvm::Twine *)v128);
    v111 = (llvm::Type *)a1[28];
    v129 = 257;
    SIToFP = llvm::IRBuilderBase::CreateSIToFP((llvm::IRBuilderBase *)(a1 + 1), AShr, v111, (const llvm::Twine *)v128);
    llvm::ConstantFP::get();
    v113 = llvm::ConstantDataVector::getSplat();
    v129 = 257;
    v114 = llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), SIToFP, v113, (uint64_t)v128);
    v96 = 0;
    v133[v95] = v114;
    v95 = 1;
  }
  while ((v97 & 1) != 0);
  v129 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v129 = 257;
  v116 = llvm::IRBuilderBase::CreateSelect();
  v129 = 257;
  v117 = llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), v122, Select, (uint64_t)v128);
  v127 = 257;
  v118 = (llvm::Value *)llvm::IRBuilderBase::CreateFAdd((uint64_t)(a1 + 1), v117, v116, (uint64_t)v126);
  if ((v121 & 1) == 0)
  {
    v119 = (llvm::Type *)a1[31];
    v129 = 257;
    v118 = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), v118, v119, (const llvm::Twine *)v128);
  }
  if (v124)
    llvm::MetadataTracking::untrack();
  return v118;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildCoordinateDewarp(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  _BOOL4 v13;
  _BOOL4 v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *LShr;
  char v22;
  uint64_t Splat;
  llvm::Value *FMul;
  llvm::Type *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *Cast;
  llvm::Value *v31;
  llvm::Value *Element;
  llvm::Value *v33;
  llvm::Value *Add;
  llvm::Value *v35;
  llvm::Value *v36;
  llvm::Value *Mul;
  llvm::Type *v38;
  uint64_t GEP;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Type *v44;
  uint64_t v45;
  llvm::Type *v46;
  llvm::Value *AlignedLoad;
  llvm::Type *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *InsertElement;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  uint64_t v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  llvm::Value *v62;
  llvm::Value *v63;
  llvm::Value *v64;
  llvm::Value *v65;
  llvm::Value *v66;
  uint64_t v67;
  uint64_t FSub;
  llvm::Value *FPToUI;
  llvm::Type *v70;
  __int128 v72;
  uint64_t v73;
  int v74;
  _BYTE v75[32];
  __int16 v76;
  _BYTE v77[32];
  __int16 v78;
  __int128 v79;
  uint64_t v80;
  int v81;

  v72 = *(_OWORD *)a2;
  v73 = *(_QWORD *)(a2 + 16);
  if (v73)
  {
    llvm::MetadataTracking::track();
    v74 = *(_DWORD *)(a2 + 24);
    v79 = v72;
    v80 = v73;
    llvm::MetadataTracking::track();
    v10 = v74;
  }
  else
  {
    v10 = *(_DWORD *)(a2 + 24);
    v79 = *(_OWORD *)a2;
    v80 = 0;
  }
  v81 = v10;
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v79);
  if (v80)
    llvm::MetadataTracking::untrack();
  if (a5 == 18)
  {
    if (*(_QWORD *)a4 == 0x746E6174736E6F63
      && *(_QWORD *)(a4 + 8) == 0x6632762E3233692ELL
      && *(_WORD *)(a4 + 16) == 12851)
    {
      v19 = *(llvm::Value **)a3;
      v18 = 1;
      goto LABEL_51;
    }
    if (*(_QWORD *)a4 == 0x746E6174736E6F63
      && *(_QWORD *)(a4 + 8) == 0x6932762E3233692ELL
      && *(_WORD *)(a4 + 16) == 12851)
    {
      v18 = 1;
      goto LABEL_34;
    }
LABEL_33:
    v18 = 0;
LABEL_34:
    v19 = *(llvm::Value **)a3;
    goto LABEL_35;
  }
  if (a5 != 14)
    goto LABEL_33;
  v13 = *(_QWORD *)a4 == 0x746E6174736E6F63 && *(_QWORD *)(a4 + 6) == 0x32336632762E746ELL
     || *(_QWORD *)a4 == 0x32702E3233663276 && *(_QWORD *)(a4 + 6) == 0x3233692E38693270;
  if (*(_QWORD *)a4 != 0x32702E3233663276 || *(_QWORD *)(a4 + 6) != 0x3233692E38693270)
  {
    v18 = *(_QWORD *)a4 == 0x32702E3233693276 && *(_QWORD *)(a4 + 6) == 0x3233692E38693270;
    v19 = *(llvm::Value **)a3;
    if (v13)
      goto LABEL_51;
LABEL_35:
    v78 = 257;
    v20 = (llvm::Value *)llvm::ConstantInt::get();
    LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v19, v20, (const llvm::Twine *)v77);
    v22 = 0;
    goto LABEL_52;
  }
  v19 = *(llvm::Value **)a3;
  v18 = 1;
  if (!v13)
    goto LABEL_35;
LABEL_51:
  llvm::ConstantFP::get();
  Splat = llvm::ConstantDataVector::getSplat();
  v78 = 257;
  FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), (uint64_t)v19, Splat, (uint64_t)v77);
  v27 = (llvm::Type *)a1[31];
  v78 = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), FMul, v27, (const llvm::Twine *)v77);
  v22 = 1;
LABEL_52:
  v28 = *(_QWORD *)(a3 + 8);
  v29 = llvm::PointerType::get();
  v78 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 49, v28, v29, (uint64_t)v77);
  v78 = 257;
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), LShr, v31, (const llvm::Twine *)v77);
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v76 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Element, v33, (const llvm::Twine *)v75);
  if (v18)
  {
    v35 = *(llvm::Value **)(a3 + 16);
    v36 = (llvm::Value *)llvm::ConstantInt::get();
    v78 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 1), v35, v36, (const llvm::Twine *)v77);
    v76 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Add, Mul, (const llvm::Twine *)v75);
  }
  v38 = (llvm::Type *)a1[28];
  v78 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v38, Cast, Add, (const llvm::Twine *)v77);
  v78 = 257;
  v40 = (llvm::Value *)llvm::ConstantInt::get();
  v41 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), LShr, v40, (const llvm::Twine *)v77);
  v42 = (llvm::Value *)llvm::ConstantInt::get();
  v76 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), v41, v42, (const llvm::Twine *)v75);
  v44 = (llvm::Type *)a1[28];
  v78 = 257;
  v45 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v44, Cast, v43, (const llvm::Twine *)v77);
  v46 = (llvm::Type *)a1[28];
  v78 = 257;
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v46, GEP, 0, (uint64_t)v77);
  v48 = (llvm::Type *)a1[28];
  v78 = 257;
  v49 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v48, v45, 0, (uint64_t)v77);
  v50 = (llvm::Value *)llvm::UndefValue::get();
  v78 = 257;
  v51 = (llvm::Value *)llvm::ConstantInt::get();
  v52 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v51, (const llvm::Twine *)v77);
  v76 = 257;
  v53 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v50, v52, v53, (const llvm::Twine *)v75);
  v78 = 257;
  v55 = (llvm::Value *)llvm::ConstantInt::get();
  v56 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v49, v55, (const llvm::Twine *)v77);
  v76 = 257;
  v57 = (llvm::Value *)llvm::ConstantInt::get();
  v58 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, v56, v57, (const llvm::Twine *)v75);
  v59 = (llvm::Value *)llvm::UndefValue::get();
  v78 = 257;
  v60 = (llvm::Value *)llvm::ConstantInt::get();
  v61 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), AlignedLoad, v60, (const llvm::Twine *)v77);
  v76 = 257;
  v62 = (llvm::Value *)llvm::ConstantInt::get();
  v63 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v59, v61, v62, (const llvm::Twine *)v75);
  v78 = 257;
  v64 = (llvm::Value *)llvm::ConstantInt::get();
  v65 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v49, v64, (const llvm::Twine *)v77);
  v76 = 257;
  v66 = (llvm::Value *)llvm::ConstantInt::get();
  v67 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), v63, v65, v66, (const llvm::Twine *)v75);
  v78 = 257;
  FSub = llvm::IRBuilderBase::CreateFSub((uint64_t)(a1 + 1), (uint64_t)v19, v67, (uint64_t)v77);
  v76 = 257;
  FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)(a1 + 1), FSub, v58, (uint64_t)v75);
  if ((v22 & 1) == 0)
  {
    v70 = (llvm::Type *)a1[31];
    v78 = 257;
    FPToUI = (llvm::Value *)llvm::IRBuilderBase::CreateFPToUI((llvm::IRBuilderBase *)(a1 + 1), FPToUI, v70, (const llvm::Twine *)v77);
  }
  if (v73)
    llvm::MetadataTracking::untrack();
  return FPToUI;
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadShuffleRotateUp(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[340], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadBallot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  std::string::size_type v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  uint64_t Cast;
  _WORD v14[20];
  std::string v15;
  __int16 v16;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = a3;
  v19 = *(_OWORD *)a2;
  v20 = *(_QWORD *)(a2 + 16);
  if (v20)
    llvm::MetadataTracking::track();
  v21 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v19);
  if (v20)
    llvm::MetadataTracking::untrack();
  std::string::basic_string[abi:nn180100]<0>(&v15, *(char **)(a1 + 2736));
  v5 = std::string::append(&v15, ".u.32");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v18 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v18 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v18 >= 0)
    v8 = HIBYTE(v18);
  else
    v8 = (uint64_t)__p[1];
  v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)v7, v8, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 176));
  v16 = 257;
  v10 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v9 + 24), v9, (uint64_t)&v22, 1, (uint64_t)&v15);
  v11 = *(_QWORD *)(a1 + 192);
  v14[16] = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v10, v11, (uint64_t)v14);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  return Cast;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdBroadcast(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[334], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffle(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[335], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffleXor(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[338], a3, a4);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdShuffleRotateUp(char **a1, uint64_t a2, llvm::Type **a3, llvm::Value *a4)
{
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *(_OWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v9);
  if (v10)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen3TargetLowerer::buildPermute((AGCLLVMGen3TargetLowerer *)a1, a1[339], a3, a4);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildSimdBallot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  std::string::size_type v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  std::string v12;
  __int16 v13;
  void *__p[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = a3;
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  std::string::basic_string[abi:nn180100]<0>(&v12, *(char **)(a1 + 2728));
  v5 = std::string::append(&v12, ".u.32");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v15 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if (v15 >= 0)
    v8 = HIBYTE(v15);
  else
    v8 = (uint64_t)__p[1];
  v9 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)v7, v8, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 176));
  v13 = 257;
  v10 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v9 + 24), v9, (uint64_t)&v19, 1, (uint64_t)&v12);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return v10;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdActiveThreadsMask(uint64_t a1, uint64_t a2)
{
  uint64_t ActiveThreadsMask;
  __int128 v6;
  uint64_t v7;
  int v8;

  v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
    llvm::MetadataTracking::track();
  v8 = *(_DWORD *)(a2 + 24);
  ActiveThreadsMask = AGCLLVMGen5TargetLowerer::buildGetActiveThreadsMask(a1, &v6, 0);
  if (v7)
    llvm::MetadataTracking::untrack();
  return ActiveThreadsMask;
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadActiveThreadsMask(uint64_t a1, uint64_t a2)
{
  uint64_t ActiveThreadsMask;
  __int128 v6;
  uint64_t v7;
  int v8;

  v6 = *(_OWORD *)a2;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7)
    llvm::MetadataTracking::track();
  v8 = *(_DWORD *)(a2 + 24);
  ActiveThreadsMask = AGCLLVMGen5TargetLowerer::buildGetActiveThreadsMask(a1, &v6, 1);
  if (v7)
    llvm::MetadataTracking::untrack();
  return ActiveThreadsMask;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdAll(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  llvm::CmpInst **v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *((_DWORD *)a2 + 6);
  v6 = (*(uint64_t (**)(uint64_t *, __int128 *))(*a1 + 1728))(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *((_DWORD *)a2 + 6);
  v7 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 1720))(a1, &v11, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  v10 = 257;
  return llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v7, v6, (uint64_t)v9);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdAny(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  llvm::CmpInst **v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *((_DWORD *)a2 + 6);
  v6 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 1720))(a1, &v11, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  v7 = llvm::ConstantInt::get();
  v10 = 257;
  return llvm::IRBuilderBase::CreateICmp(a1 + 1, 33, v6, v7, (uint64_t)v9);
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadAll(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  llvm::CmpInst **v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *((_DWORD *)a2 + 6);
  v6 = (*(uint64_t (**)(uint64_t *, __int128 *))(*a1 + 1736))(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *((_DWORD *)a2 + 6);
  v7 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 1680))(a1, &v11, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  v10 = 257;
  return llvm::IRBuilderBase::CreateICmp(a1 + 1, 32, v7, v6, (uint64_t)v9);
}

uint64_t AGCLLVMGen5TargetLowerer::buildQuadAny(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  llvm::CmpInst **v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v11 = *a2;
  v12 = *((_QWORD *)a2 + 2);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *((_DWORD *)a2 + 6);
  v6 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 1680))(a1, &v11, a3);
  if (v12)
    llvm::MetadataTracking::untrack();
  v7 = llvm::ConstantInt::get();
  v10 = 257;
  return llvm::IRBuilderBase::CreateICmp(a1 + 1, 33, v6, v7, (uint64_t)v9);
}

uint64_t AGCLLVMGen5TargetLowerer::buildVoteAll(uint64_t a1, __int128 *a2, llvm::CmpInst **a3)
{
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v10, a1 + 8);
  if (v11)
    llvm::MetadataTracking::untrack();
  v6 = llvm::ConstantInt::get();
  v9 = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, a3, v6, (uint64_t)v8);
}

uint64_t AGCLLVMGen5TargetLowerer::buildVoteAny(uint64_t a1, __int128 *a2, llvm::CmpInst **a3)
{
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v10, a1 + 8);
  if (v11)
    llvm::MetadataTracking::untrack();
  v6 = llvm::ConstantInt::get();
  v9 = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 33, a3, v6, (uint64_t)v8);
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdMatrixLoadStore(uint64_t a1, __int128 *a2, unsigned int a3, llvm::Value *a4, uint64_t a5, int a6)
{
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Value *v15;
  uint64_t v16;
  llvm::Type **v17;
  llvm::Value *v18;
  llvm::Value *Not;
  uint64_t v20;
  uint64_t v21;
  llvm::Value *v22;
  uint64_t Element;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value *Cast;
  llvm::Value *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  uint64_t v34;
  llvm::Value *v35;
  llvm::Value *Add;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  uint64_t v40;
  llvm::Value *v41;
  uint64_t v42;
  llvm::Value *v43;
  char v44;
  llvm::Value *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::CmpInst **v50;
  uint64_t v51;
  uint64_t ICmp;
  uint64_t v53;
  llvm::BasicBlock *v54;
  llvm::BasicBlock *v55;
  llvm::BasicBlock *v56;
  uint64_t v57;
  llvm::Instruction *v58;
  uint64_t v59;
  llvm::Instruction *v60;
  llvm::Value *v61;
  llvm::Value *v62;
  llvm::Value *LShr;
  llvm::Value *v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  llvm::Value *v68;
  llvm::Value *v69;
  uint64_t v70;
  uint64_t v71;
  llvm::Value *v72;
  uint64_t FirstInsertionPt;
  llvm::Type *v74;
  llvm::User *PHI;
  llvm::Value *v76;
  uint64_t v77;
  char v78;
  llvm::Type *v79;
  char v80;
  llvm::Value *v81;
  llvm::Value *v82;
  llvm::Value *Mul;
  llvm::Value *v84;
  llvm::Value *v85;
  llvm::Value *v86;
  uint64_t v87;
  llvm::Value *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  llvm::APInt *v93;
  unsigned int v94;
  uint64_t v95;
  char v96;
  char v97;
  llvm::Value *v98;
  llvm::Type **v99;
  uint64_t v100;
  llvm::Value *AlignedLoad;
  llvm::Type *v102;
  llvm::Type **v103;
  llvm::Type *v104;
  llvm::Value *PointerCast;
  llvm::Value *v106;
  llvm::Value *v107;
  llvm::Value *v108;
  llvm::Value *v109;
  llvm::Value *v110;
  llvm::Value *v111;
  llvm::Value *v112;
  llvm::Value *v113;
  llvm::Type **v114;
  llvm::Value *v115;
  llvm::Value *v116;
  llvm::Value *v117;
  llvm::Value *v118;
  uint64_t v119;
  char v120;
  char v121;
  llvm::Value *v122;
  llvm::Value *v123;
  uint64_t v125;
  llvm::Value *v126;
  int v127;
  unsigned int v128;
  llvm::Value *v129;
  char v130;
  llvm::Value *v131;
  uint64_t v132;
  llvm::Value *InsertElement;
  llvm::Type *v134;
  __int128 v135;
  uint64_t v136;
  int v137;
  _BYTE v138[32];
  __int16 v139;
  _QWORD v140[4];
  __int16 v141;
  __int128 v142;
  uint64_t v143;
  int v144;
  __int16 v145;
  llvm::Value *v146;
  llvm::Value *v147;
  _QWORD v148[2];
  _QWORD v149[4];

  v149[2] = *MEMORY[0x1E0C80C00];
  v12 = (_DWORD *)((char *)a4 - 32 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF));
  v13 = 8;
  if (a3)
    v13 = 16;
  v131 = *(llvm::Value **)&v12[v13];
  v132 = *(_QWORD *)&v12[8 * a3];
  v135 = *a2;
  v136 = *((_QWORD *)a2 + 2);
  if (v136)
    llvm::MetadataTracking::track();
  v137 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v135, a1 + 8);
  if (v136)
    llvm::MetadataTracking::untrack();
  v14 = a3;
  v128 = a3;
  if (a3)
  {
    v15 = (llvm::Value *)*((_QWORD *)a4 - 4 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF));
    v16 = 4;
    v129 = v15;
  }
  else
  {
    v129 = 0;
    v16 = 3;
    v15 = a4;
  }
  v17 = *(llvm::Type ***)(*(_QWORD *)v15 + 16);
  v127 = a6;
  if (a6)
    v17 = (llvm::Type **)(a1 + 192);
  v134 = *v17;
  v125 = 32 * v16;
  v18 = (llvm::Value *)*((_QWORD *)a4 + 4 * v16 + -4 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF));
  v141 = 257;
  Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)(a1 + 8), v18, (const llvm::Twine *)v140);
  v142 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v144 = *(_DWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a1 + 200);
  v21 = llvm::ConstantInt::get();
  v22 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1816))(a1, &v142, v20, a5, v21);
  if (v143)
    llvm::MetadataTracking::untrack();
  v141 = 257;
  Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v22, v18, (const llvm::Twine *)v140);
  v141 = 257;
  v24 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v22, Not, (const llvm::Twine *)v140);
  v25 = (llvm::Value *)*((_QWORD *)a4 + 4 * v14 + -4 * (*((_DWORD *)a4 + 5) & 0x7FFFFFF) + 8);
  v141 = 257;
  v26 = (llvm::Value *)llvm::ConstantInt::get();
  v27 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v25, v26, (const llvm::Twine *)v140);
  v28 = *(_QWORD *)(a1 + 208);
  v139 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v27, v28, (uint64_t)v138);
  v141 = 257;
  v30 = (llvm::Value *)llvm::ConstantInt::get();
  v31 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v25, v30, (const llvm::Twine *)v140);
  v32 = *(_QWORD *)(a1 + 208);
  v139 = 257;
  v33 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v31, v32, (uint64_t)v138);
  v34 = *(_QWORD *)(a1 + 208);
  v141 = 257;
  v35 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, Element, v34, (uint64_t)v140);
  v139 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Cast, v35, (const llvm::Twine *)v138);
  v149[0] = Add;
  v37 = *(_QWORD *)(a1 + 208);
  v141 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v24, v37, (uint64_t)v140);
  v139 = 257;
  v39 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v33, v38, (const llvm::Twine *)v138);
  v148[0] = v39;
  v40 = *(_QWORD *)(a1 + 208);
  v141 = 257;
  v41 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)Not, v40, (uint64_t)v140);
  v139 = 257;
  v149[1] = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Add, v41, (const llvm::Twine *)v138);
  v42 = *(_QWORD *)(a1 + 208);
  v141 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)v18, v42, (uint64_t)v140);
  v139 = 257;
  v148[1] = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v39, v43, (const llvm::Twine *)v138);
  v146 = 0;
  v147 = 0;
  v126 = a4;
  if (v128 && v127)
  {
    llvm::FixedVectorType::get();
    InsertElement = (llvm::Value *)llvm::UndefValue::get();
    v44 = 1;
    do
    {
      v130 = v44;
      v145 = 257;
      v45 = (llvm::Value *)llvm::ConstantInt::get();
      v46 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v129, v45, (const llvm::Twine *)&v142);
      v47 = *(_QWORD *)(a1 + 200);
      v141 = 257;
      v48 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v46, v47, (uint64_t)v140);
      v49 = (llvm::Value *)llvm::ConstantInt::get();
      v141 = 257;
      v50 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v48, v49, (const llvm::Twine *)v140);
      v51 = llvm::ConstantInt::get();
      v139 = 257;
      ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 34, v50, v51, (uint64_t)v138);
      v53 = *(_QWORD *)(a1 + 56);
      v140[0] = "is.nan.merge";
      v141 = 259;
      v54 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
      v140[0] = "is.nan.true";
      v141 = 259;
      v55 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v140[0] = "is.nan.false";
      v141 = 259;
      v56 = (llvm::BasicBlock *)operator new();
      llvm::BasicBlock::BasicBlock();
      v57 = *(_QWORD *)(v53 + 40);
      if (v57 == v53 + 40)
      {
        v60 = 0;
      }
      else
      {
        v58 = (llvm::Instruction *)(v57 - 24);
        if (v57)
          v59 = v57 - 24;
        else
          v59 = 0;
        if (*(unsigned __int8 *)(v59 + 16) - 29 >= 0xB)
          v60 = 0;
        else
          v60 = v58;
      }
      llvm::Instruction::eraseFromParent(v60);
      *(_QWORD *)(a1 + 56) = v53;
      *(_QWORD *)(a1 + 64) = v53 + 40;
      llvm::IRBuilderBase::CreateCondBr((uint64_t *)(a1 + 8), ICmp, (uint64_t)v55, (uint64_t)v56);
      *(_QWORD *)(a1 + 56) = v55;
      *(_QWORD *)(a1 + 64) = (char *)v55 + 40;
      v61 = (llvm::Value *)llvm::ConstantInt::get();
      llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 8), v54);
      *(_QWORD *)(a1 + 56) = v56;
      *(_QWORD *)(a1 + 64) = (char *)v56 + 40;
      v62 = (llvm::Value *)llvm::ConstantInt::get();
      v141 = 257;
      LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v48, v62, (const llvm::Twine *)v140);
      v64 = (llvm::Value *)llvm::ConstantInt::get();
      v139 = 257;
      v65 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), LShr, v64, (const llvm::Twine *)v138);
      v66 = (llvm::Value *)llvm::ConstantInt::get();
      v141 = 257;
      v67 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v65, v66, (const llvm::Twine *)v140);
      v141 = 257;
      v68 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v48, v67, (const llvm::Twine *)v140);
      v69 = (llvm::Value *)llvm::ConstantInt::get();
      v141 = 257;
      v70 = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v68, v69, (const llvm::Twine *)v140);
      v71 = *(_QWORD *)(a1 + 192);
      v139 = 257;
      v72 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v70, v71, (uint64_t)v138);
      llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 8), v54);
      FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v54);
      llvm::IRBuilderBase::SetInsertPoint(a1 + 8, (uint64_t)v54, FirstInsertionPt);
      v74 = *(llvm::Type **)(a1 + 192);
      v141 = 257;
      PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(a1 + 8), v74, 2, (const llvm::Twine *)v140);
      llvm::PHINode::addIncoming(PHI, v61, v55);
      llvm::PHINode::addIncoming(PHI, v72, v56);
      v141 = 257;
      v76 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, PHI, v76, (const llvm::Twine *)v140);
      v44 = 0;
    }
    while ((v130 & 1) != 0);
  }
  else
  {
    InsertElement = v129;
  }
  v77 = 0;
  v142 = 0uLL;
  v78 = 1;
  v79 = v134;
  do
  {
    v80 = v78;
    v81 = (llvm::Value *)v149[v77];
    v82 = (llvm::Value *)v148[v77];
    v141 = 257;
    Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v82, v131, (const llvm::Twine *)v140);
    v139 = 257;
    v84 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Mul, v81, (const llvm::Twine *)v138);
    llvm::Type::getScalarSizeInBits(v79);
    v85 = (llvm::Value *)llvm::ConstantInt::get();
    v141 = 257;
    v86 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v84, v85, (const llvm::Twine *)v140);
    v87 = *(_QWORD *)(a1 + 208);
    v141 = 257;
    v88 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v132, v87, (uint64_t)v140);
    v139 = 257;
    v89 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v88, v86, (const llvm::Twine *)v138);
    v79 = v134;
    v90 = llvm::PointerType::get();
    v140[0] = "addr_elem";
    v141 = 259;
    v91 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v89, v90, (uint64_t)v140);
    v78 = 0;
    *((_QWORD *)&v142 + v77) = v91;
    v77 = 1;
  }
  while ((v80 & 1) != 0);
  v92 = *(_QWORD *)((char *)v126 + v125 + -32 * (*((_DWORD *)v126 + 5) & 0x7FFFFFF));
  if (*(_BYTE *)(v92 + 16) != 16)
    goto LABEL_33;
  v93 = (llvm::APInt *)(v92 + 24);
  v94 = *(_DWORD *)(v92 + 32);
  if (v94 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v93) == v94)
      goto LABEL_40;
LABEL_33:
    v95 = 0;
    v96 = 1;
    do
    {
      while (1)
      {
        v97 = v96;
        if (!v128)
          break;
        v141 = 257;
        v98 = (llvm::Value *)llvm::ConstantInt::get();
        v99 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v98, (const llvm::Twine *)v140);
        llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v99, *((_QWORD *)&v142 + v95), 0);
        v96 = 0;
        v95 = 1;
        if ((v97 & 1) == 0)
          return llvm::UndefValue::get();
      }
      v100 = *((_QWORD *)&v142 + v95);
      v141 = 257;
      AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v134, v100, 0, (uint64_t)v140);
      v96 = 0;
      *(&v146 + v95) = AlignedLoad;
      v95 = 1;
    }
    while ((v97 & 1) != 0);
    goto LABEL_44;
  }
  if (*(_QWORD *)v93)
    goto LABEL_33;
LABEL_40:
  v102 = (llvm::Type *)llvm::FixedVectorType::get();
  v103 = (llvm::Type **)v142;
  v104 = (llvm::Type *)llvm::PointerType::get();
  v140[0] = "addr_vectorized";
  v141 = 259;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v103, v104, (const llvm::Twine *)v140);
  if (!v128)
  {
    v141 = 257;
    v116 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v102, (uint64_t)PointerCast, 0, (uint64_t)v140);
    v141 = 257;
    v117 = (llvm::Value *)llvm::ConstantInt::get();
    v146 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v116, v117, (const llvm::Twine *)v140);
    v141 = 257;
    v118 = (llvm::Value *)llvm::ConstantInt::get();
    v147 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v116, v118, (const llvm::Twine *)v140);
LABEL_44:
    v115 = (llvm::Value *)llvm::UndefValue::get();
    if (v127)
    {
      v146 = (llvm::Value *)AGCLLVMGen5TargetLowerer::bfloatConvert16RawToF32((AGCLLVMGen5TargetLowerer *)a1, v146);
      v147 = (llvm::Value *)AGCLLVMGen5TargetLowerer::bfloatConvert16RawToF32((AGCLLVMGen5TargetLowerer *)a1, v147);
    }
    v119 = 0;
    v120 = 1;
    do
    {
      v121 = v120;
      v122 = *(&v146 + v119);
      v141 = 257;
      v123 = (llvm::Value *)llvm::ConstantInt::get();
      v115 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v115, v122, v123, (const llvm::Twine *)v140);
      v120 = 0;
      v119 = 1;
    }
    while ((v121 & 1) != 0);
    return (uint64_t)v115;
  }
  v106 = (llvm::Value *)llvm::UndefValue::get();
  v141 = 257;
  v107 = (llvm::Value *)llvm::ConstantInt::get();
  v108 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v107, (const llvm::Twine *)v140);
  v139 = 257;
  v109 = (llvm::Value *)llvm::ConstantInt::get();
  v110 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v106, v108, v109, (const llvm::Twine *)v138);
  v141 = 257;
  v111 = (llvm::Value *)llvm::ConstantInt::get();
  v112 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v111, (const llvm::Twine *)v140);
  v139 = 257;
  v113 = (llvm::Value *)llvm::ConstantInt::get();
  v114 = (llvm::Type **)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v110, v112, v113, (const llvm::Twine *)v138);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v114, (uint64_t)PointerCast, 0);
  return llvm::UndefValue::get();
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildSimdMatrixMultiplyAccumulate(_QWORD *a1, __int128 *a2, llvm::Type *a3, llvm::Value *a4, llvm::Value *a5, llvm::Value *a6)
{
  llvm::Value *v12;
  uint64_t ShuffleVector;
  llvm::Value *v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  llvm::Type *v23;
  llvm::Type *v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t v27;
  llvm::Type *v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  llvm::Value *FPTrunc;
  unsigned int ScalarSizeInBits;
  llvm::Type *v34;
  llvm::Value *InsertElement;
  char v36;
  char v37;
  llvm::Value *v38;
  llvm::Value *Element;
  llvm::Value *v40;
  uint64_t v42;
  llvm::Type *v43;
  char v44[32];
  __int16 v45;
  std::string v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  void *v53[2];
  _BYTE v54[16];
  __int16 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v47 = *a2;
  v48 = *((_QWORD *)a2 + 2);
  if (v48)
    llvm::MetadataTracking::track();
  v43 = a3;
  v49 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v47, (uint64_t)(a1 + 1));
  if (v48)
    llvm::MetadataTracking::untrack();
  v50 = llvm::ConstantInt::get();
  v51 = llvm::ConstantInt::get();
  v12 = (llvm::Value *)llvm::ConstantVector::get();
  v55 = 257;
  ShuffleVector = llvm::IRBuilderBase::CreateShuffleVector((llvm::IRBuilderBase *)(a1 + 1), a4, a4, v12, (const llvm::Twine *)v53);
  v50 = llvm::ConstantInt::get();
  v51 = llvm::ConstantInt::get();
  v14 = (llvm::Value *)llvm::ConstantVector::get();
  v55 = 257;
  v15 = llvm::IRBuilderBase::CreateShuffleVector((llvm::IRBuilderBase *)(a1 + 1), a5, a5, v14, (const llvm::Twine *)v53);
  v50 = llvm::ConstantInt::get();
  v51 = llvm::ConstantInt::get();
  v16 = (llvm::Value *)llvm::ConstantVector::get();
  v55 = 257;
  v17 = llvm::IRBuilderBase::CreateShuffleVector((llvm::IRBuilderBase *)(a1 + 1), a6, a6, v16, (const llvm::Twine *)v53);
  v18 = **(_QWORD **)(*(_QWORD *)ShuffleVector + 16);
  v19 = **(_QWORD **)(*(_QWORD *)v15 + 16);
  v20 = **(_QWORD **)(*(_QWORD *)v17 + 16);
  v42 = **((_QWORD **)v43 + 2);
  v21 = operator new(0x18uLL);
  *v21 = ShuffleVector;
  v21[1] = v15;
  v21[2] = v17;
  memset(&v46, 0, sizeof(v46));
  v22 = a1[19];
  if (v18 == v22 && v19 == v22 && v20 == v22 && v42 == v22)
  {
    MEMORY[0x1CAA2D494](&v46, a1[332]);
    std::string::append(&v46, ".v2f16");
    v23 = (llvm::Type *)a1[19];
    v24 = v43;
  }
  else
  {
    MEMORY[0x1CAA2D494](&v46, a1[331]);
    std::string::append(&v46, ".v2f32");
    v25 = 0;
    v23 = (llvm::Type *)a1[21];
    v24 = v43;
    do
    {
      v26 = (llvm::Value *)v21[v25];
      v27 = **(_QWORD **)(*(_QWORD *)v26 + 16);
      if (v27 == a1[19] || v27 == a1[20])
      {
        v28 = (llvm::Type *)llvm::FixedVectorType::get();
        v55 = 257;
        v21[v25] = llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 1), v26, v28, (const llvm::Twine *)v53);
      }
      ++v25;
    }
    while (v25 != 3);
  }
  v29 = 0;
  v53[0] = v54;
  v53[1] = (void *)0x300000000;
  do
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v53, *(_QWORD *)v21[v29++]);
  while (v29 != 3);
  if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v30 = &v46;
LABEL_20:
    strlen((const char *)v30);
    goto LABEL_21;
  }
  v30 = (std::string *)v46.__r_.__value_.__r.__words[0];
  if (v46.__r_.__value_.__r.__words[0])
    goto LABEL_20;
LABEL_21:
  llvm::FixedVectorType::get();
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v52 = 257;
  FPTrunc = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v31 + 24), v31, (uint64_t)v21, 3, (uint64_t)&v50);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v23);
  if (ScalarSizeInBits > llvm::Type::getScalarSizeInBits(v24))
  {
    v34 = (llvm::Type *)llvm::FixedVectorType::get();
    v52 = 257;
    FPTrunc = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 1), FPTrunc, v34, (const llvm::Twine *)&v50);
  }
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  v36 = 1;
  do
  {
    v37 = v36;
    v52 = 257;
    v38 = (llvm::Value *)llvm::ConstantInt::get();
    Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPTrunc, v38, (const llvm::Twine *)&v50);
    v45 = 257;
    v40 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 1), InsertElement, Element, v40, (const llvm::Twine *)v44);
    v36 = 0;
  }
  while ((v37 & 1) != 0);
  if (v53[0] != v54)
    free(v53[0]);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  operator delete(v21);
  return InsertElement;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildSimdMatrixThreadElementsInit(uint64_t a1, __int128 *a2, uint64_t a3, llvm::Constant **a4, uint64_t a5, char a6)
{
  llvm::Value *InsertElement;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *Element;
  char v17;
  llvm::Value *v18;
  llvm::Type *v19;
  char v20;
  llvm::Value *v21;
  llvm::Value *Select;
  llvm::Value *v23;
  char v24;
  char v25;
  llvm::Value *v26;
  uint64_t v28;
  _BYTE v29[32];
  __int16 v30;
  _BYTE v31[32];
  __int16 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  int v38;

  v36 = *a2;
  v37 = *((_QWORD *)a2 + 2);
  if (v37)
    llvm::MetadataTracking::track();
  v38 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v36, a1 + 8);
  if (v37)
    llvm::MetadataTracking::untrack();
  InsertElement = (llvm::Value *)llvm::UndefValue::get();
  if ((a6 & 1) != 0)
  {
    v33 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v35 = *(_DWORD *)(a1 + 104);
    v12 = *(_QWORD *)(a1 + 200);
    v13 = llvm::ConstantInt::get();
    v14 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1816))(a1, &v33, v12, a5, v13);
    if (v34)
      llvm::MetadataTracking::untrack();
    v32 = 257;
    v15 = (llvm::Value *)llvm::ConstantInt::get();
    Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v14, v15, (const llvm::Twine *)v31);
    v32 = 257;
    v17 = 1;
    v18 = (llvm::Value *)llvm::ConstantInt::get();
    v28 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v14, v18, (const llvm::Twine *)v31);
    llvm::Constant::getNullValue(*a4, v19);
    do
    {
      v20 = v17;
      v21 = (llvm::Value *)llvm::ConstantInt::get();
      v32 = 257;
      Element = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Element, v21, (const llvm::Twine *)v31);
      v32 = 257;
      llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, (llvm::CmpInst **)Element, v28, (uint64_t)v31);
      v32 = 257;
      Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
      v30 = 257;
      v23 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, Select, v23, (const llvm::Twine *)v29);
      v17 = 0;
    }
    while ((v20 & 1) != 0);
  }
  else
  {
    v24 = 1;
    do
    {
      v25 = v24;
      v32 = 257;
      v26 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, (llvm::Value *)a4, v26, (const llvm::Twine *)v31);
      v24 = 0;
    }
    while ((v25 & 1) != 0);
  }
  return InsertElement;
}

uint64_t AGCLLVMGen5TargetLowerer::buildSimdMatrixThreadElementsGetPosition(uint64_t a1, __int128 *a2, uint64_t a3, llvm::Value *a4, llvm::Value *a5)
{
  llvm::Value *v9;
  llvm::Value *v10;
  llvm::Value *Shl;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  llvm::Value *LShr;
  llvm::Value *v16;
  llvm::Value *Add;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::Value *v23;
  llvm::Value *v24;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  llvm::Value *v28;
  llvm::Value *InsertElement;
  llvm::Value *v30;
  _BYTE v32[32];
  __int16 v33;
  _BYTE v34[32];
  __int16 v35;
  _BYTE v36[32];
  __int16 v37;
  _BYTE v38[32];
  __int16 v39;
  _BYTE v40[32];
  __int16 v41;
  __int128 v42;
  uint64_t v43;
  int v44;

  v42 = *a2;
  v43 = *((_QWORD *)a2 + 2);
  if (v43)
    llvm::MetadataTracking::track();
  v44 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v42, a1 + 8);
  if (v43)
    llvm::MetadataTracking::untrack();
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v10 = (llvm::Value *)llvm::ConstantInt::get();
  v41 = 257;
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), a4, v10, (const llvm::Twine *)v40);
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v39 = 257;
  v13 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), Shl, v12, (const llvm::Twine *)v38);
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v37 = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), a4, v14, (const llvm::Twine *)v36);
  v35 = 257;
  v16 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), LShr, v9, (const llvm::Twine *)v34);
  v33 = 257;
  Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v13, v16, (const llvm::Twine *)v32);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v41 = 257;
  v19 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), a4, v18, (const llvm::Twine *)v40);
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  v39 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v19, v20, (const llvm::Twine *)v38);
  v22 = (llvm::Value *)llvm::ConstantInt::get();
  v37 = 257;
  v23 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), a4, v22, (const llvm::Twine *)v36);
  v35 = 257;
  v24 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v23, v9, (const llvm::Twine *)v34);
  v33 = 257;
  v25 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v21, v24, (const llvm::Twine *)v32);
  v41 = 257;
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), Add, a5, (const llvm::Twine *)v40);
  llvm::FixedVectorType::get();
  v27 = (llvm::Value *)llvm::UndefValue::get();
  v41 = 257;
  v28 = (llvm::Value *)llvm::ConstantInt::get();
  InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v27, v26, v28, (const llvm::Twine *)v40);
  v41 = 257;
  v30 = (llvm::Value *)llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v25, v30, (const llvm::Twine *)v40);
}

uint64_t AGCLLVMGen5TargetLowerer::programTypeSpecialRegisterValueForShaderType(uint64_t a1, unsigned int a2)
{
  if (a2 > 9)
    return 0;
  else
    return dword_1C3DF89E8[a2];
}

uint64_t AGCLLVMGen5TargetLowerer::buildMemCpy2DEmulation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  llvm::Value *v17;
  uint64_t Element;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _BOOL4 v22;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  llvm::Value *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  const std::string::value_type *v33;
  std::string *v34;
  std::string::size_type v35;
  const std::string::value_type *v36;
  std::string *v37;
  std::string::size_type v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Value *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  llvm::Value *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  llvm::Value *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  llvm::Value *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  llvm::Value *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string v72;
  void *__p[2];
  std::string::size_type v74;
  std::string v75;
  __int16 v76;
  void *v77[2];
  _QWORD v78[14];

  v78[12] = *MEMORY[0x1E0C80C00];
  v77[0] = v78;
  v77[1] = (void *)0xC00000000;
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *(uint64_t **)v4;
      v4 += 8;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v77, *v7);
      v6 -= 8;
    }
    while (v6);
    v4 = *(_QWORD *)a2;
  }
  v8 = *(uint64_t **)(v4 + 16);
  v9 = *(unsigned __int8 **)(v4 + 40);
  v10 = *(unsigned __int8 **)(v4 + 72);
  v11 = *(unsigned __int8 **)(v4 + 80);
  v12 = *v8;
  v13 = *(_DWORD *)(*v8 + 8);
  if ((v13 & 0xFE) == 0x12)
    v13 = *(_DWORD *)(**(_QWORD **)(v12 + 16) + 8);
  v14 = v13 & 0xFFFFFF00;
  if ((v13 & 0xFFFFFF00) == 0x300)
    v15 = v9;
  else
    v15 = v10;
  if (v14 == 768)
    v16 = v10;
  else
    v16 = v9;
  if (v15[16] >= 0x15u || v16[16] > 0x14u || v11[16] > 0x14u)
  {
    v22 = 0;
  }
  else
  {
    v76 = 257;
    v17 = (llvm::Value *)llvm::ConstantInt::get();
    Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v16, v17, (const llvm::Twine *)&v75);
    if (*(_BYTE *)(Element + 16) == 16)
      v19 = Element;
    else
      v19 = 0;
    v20 = *(_DWORD *)(v19 + 32);
    if (v20 > 0x40)
      v21 = **(_QWORD **)(v19 + 24);
    else
      v21 = (uint64_t)(*(_QWORD *)(v19 + 24) << -(char)v20) >> -(char)v20;
    v70 = v21;
    v76 = 257;
    v44 = (llvm::Value *)llvm::ConstantInt::get();
    v45 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v16, v44, (const llvm::Twine *)&v75);
    if (*(_BYTE *)(v45 + 16) == 16)
      v46 = v45;
    else
      v46 = 0;
    v47 = *(_DWORD *)(v46 + 32);
    if (v47 > 0x40)
      v48 = **(_QWORD **)(v46 + 24);
    else
      v48 = (uint64_t)(*(_QWORD *)(v46 + 24) << -(char)v47) >> -(char)v47;
    v69 = v48;
    v76 = 257;
    v49 = (llvm::Value *)llvm::ConstantInt::get();
    v50 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v11, v49, (const llvm::Twine *)&v75);
    if (*(_BYTE *)(v50 + 16) == 16)
      v51 = v50;
    else
      v51 = 0;
    v52 = *(_DWORD *)(v51 + 32);
    if (v52 > 0x40)
      v53 = **(_QWORD **)(v51 + 24);
    else
      v53 = (uint64_t)(*(_QWORD *)(v51 + 24) << -(char)v52) >> -(char)v52;
    v71 = v53;
    v76 = 257;
    v54 = (llvm::Value *)llvm::ConstantInt::get();
    v55 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v11, v54, (const llvm::Twine *)&v75);
    if (*(_BYTE *)(v55 + 16) == 16)
      v56 = v55;
    else
      v56 = 0;
    v57 = *(_DWORD *)(v56 + 32);
    if (v57 > 0x40)
      v58 = **(_QWORD **)(v56 + 24);
    else
      v58 = (uint64_t)(*(_QWORD *)(v56 + 24) << -(char)v57) >> -(char)v57;
    v76 = 257;
    v59 = (llvm::Value *)llvm::ConstantInt::get();
    v60 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v15, v59, (const llvm::Twine *)&v75);
    if (*(_BYTE *)(v60 + 16) == 16)
      v61 = v60;
    else
      v61 = 0;
    v62 = *(_DWORD *)(v61 + 32);
    if (v62 > 0x40)
      v63 = **(_QWORD **)(v61 + 24);
    else
      v63 = (uint64_t)(*(_QWORD *)(v61 + 24) << -(char)v62) >> -(char)v62;
    v76 = 257;
    v64 = (llvm::Value *)llvm::ConstantInt::get();
    v65 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v15, v64, (const llvm::Twine *)&v75);
    if (*(_BYTE *)(v65 + 16) == 16)
      v66 = v65;
    else
      v66 = 0;
    v67 = *(_DWORD *)(v66 + 32);
    if (v67 > 0x40)
      v68 = **(_QWORD **)(v66 + 24);
    else
      v68 = (uint64_t)(*(_QWORD *)(v66 + 24) << -(char)v67) >> -(char)v67;
    v22 = 0;
    if ((v71 & 0x8000000000000000) == 0 && (v58 & 0x8000000000000000) == 0 && v71 + v63 - 1 < v70)
      v22 = v58 + v68 - 1 < v69;
  }
  if (v11[16] <= 0x14u && v16 == v15)
  {
    v76 = 257;
    v24 = (llvm::Value *)llvm::ConstantInt::get();
    v25 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v11, v24, (const llvm::Twine *)&v75);
    if (*(_BYTE *)(v25 + 16) == 16)
      v26 = v25;
    else
      v26 = 0;
    v27 = *(_DWORD *)(v26 + 32);
    if (v27 > 0x40)
    {
      if (**(_QWORD **)(v26 + 24))
        goto LABEL_42;
    }
    else if ((uint64_t)(*(_QWORD *)(v26 + 24) << -(char)v27) >> -(char)v27)
    {
      goto LABEL_42;
    }
    v76 = 257;
    v28 = (llvm::Value *)llvm::ConstantInt::get();
    v29 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v11, v28, (const llvm::Twine *)&v75);
    if (*(_BYTE *)(v29 + 16) == 16)
      v30 = v29;
    else
      v30 = 0;
    v31 = *(_DWORD *)(v30 + 32);
    if (v31 > 0x40)
      v32 = **(_QWORD **)(v30 + 24);
    else
      v32 = (uint64_t)(*(_QWORD *)(v30 + 24) << -(char)v31) >> -(char)v31;
    if (!v32)
      v22 = 1;
  }
LABEL_42:
  std::string::basic_string[abi:nn180100]<0>(&v72, *(char **)(a1 + 2544));
  if (v14 == 768)
    v33 = ".read";
  else
    v33 = ".write";
  v34 = std::string::append(&v72, v33);
  v35 = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v75.__r_.__value_.__r.__words[2] = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (v22)
    v36 = ".unchecked";
  else
    v36 = (const std::string::value_type *)&unk_1C3E4D9BB;
  v37 = std::string::append(&v75, v36);
  v38 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v74 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v39 = *(_QWORD *)a2;
  v40 = *(unsigned int *)(a2 + 8);
  v76 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v41 + 24), v41, v39, v40, (uint64_t)&v75);
  v42 = *(_QWORD *)(a1 + 2576);
  if (SHIBYTE(v74) < 0)
    operator delete(__p[0]);
  if (v77[0] != v78)
    free(v77[0]);
  return v42;
}

uint64_t AGCLLVMGen5TargetLowerer::buildMemCpy2DDMA(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  llvm::Value *v5;
  llvm::Value *v6;
  uint64_t *v7;
  llvm::Value *v8;
  int v9;
  uint64_t **v10;
  uint64_t **v11;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t *v20;
  _BOOL4 v21;
  unsigned int v22;
  uint64_t v23;
  llvm::Value *v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  _BYTE v28[32];
  __int16 v29;
  uint64_t *v30;
  llvm::Value *Mul;
  llvm::Value *UDiv;
  uint64_t *v33[6];

  v3 = **a2;
  v4 = (*a2)[2];
  v19 = (*a2)[3];
  v5 = (llvm::Value *)(*a2)[4];
  v6 = (llvm::Value *)(*a2)[5];
  v7 = (*a2)[6];
  v20 = (*a2)[7];
  v8 = (llvm::Value *)(*a2)[9];
  v23 = (uint64_t)(*a2)[11];
  v24 = (llvm::Value *)(*a2)[10];
  v9 = *(_DWORD *)(*v4 + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(*v4 + 16) + 8);
  v22 = v9 & 0xFFFFFF00;
  v21 = (v9 & 0xFFFFFF00) == 768;
  if ((v9 & 0xFFFFFF00) == 0x300)
    v10 = v33;
  else
    v10 = &v30;
  *v10 = v4;
  v10[1] = v3;
  v29 = 257;
  if ((v9 & 0xFFFFFF00) == 0x300)
    v11 = &v30;
  else
    v11 = v33;
  v12 = v5;
  v13 = (llvm::Value *)llvm::ConstantInt::get();
  v10[2] = (uint64_t *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v6, v13, (const llvm::Twine *)v28);
  v29 = 257;
  v14 = (llvm::Value *)llvm::ConstantInt::get();
  v10[3] = (uint64_t *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v6, v14, (const llvm::Twine *)v28);
  v10[4] = v19;
  *v11 = v7;
  v11[1] = v3;
  v29 = 257;
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v11[2] = (uint64_t *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v8, v15, (const llvm::Twine *)v28);
  v29 = 257;
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v11[3] = (uint64_t *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v8, v16, (const llvm::Twine *)v28);
  v11[4] = v20;
  v29 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v12, Mul, (const llvm::Twine *)v28);
  v29 = 257;
  UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv((llvm::IRBuilderBase *)(a1 + 8), UDiv, v12, (const llvm::Twine *)v28);
  v25 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v27 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen5TargetLowerer::CreateBufferReadWriteBlock((_QWORD *)a1, &v25, v21, 0, v33, &v30, v24, v23);
  if (v26)
    llvm::MetadataTracking::untrack();
  v17 = 2568;
  if (v22 == 768)
    v17 = 2560;
  return *(_QWORD *)(a1 + v17);
}

uint64_t AGCLLVMGen5TargetLowerer::buildMemCpy1DEmulation(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  const std::string::value_type *v11;
  std::string *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string v19;
  __int16 v20;
  void *__p[2];
  std::string::size_type v22;
  void *v23[2];
  _QWORD v24[6];

  v24[5] = *MEMORY[0x1E0C80C00];
  v23[0] = v24;
  v23[1] = (void *)0x500000000;
  v4 = *(uint64_t ***)a2;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    do
    {
      v7 = *v4++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v23, *v7);
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t ***)a2;
  }
  v8 = *v4[2];
  v9 = *(_DWORD *)(v8 + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(v8 + 16) + 8);
  v10 = v9 & 0xFFFFFF00;
  std::string::basic_string[abi:nn180100]<0>(&v19, *(char **)(a1 + 2536));
  if (v10 == 768)
    v11 = ".read";
  else
    v11 = ".write";
  v12 = std::string::append(&v19, v11);
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v14 = *(_QWORD *)a2;
  v15 = *(unsigned int *)(a2 + 8);
  v20 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v16 + 24), v16, v14, v15, (uint64_t)&v19);
  v17 = *(_QWORD *)(a1 + 2576);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if (v23[0] != v24)
    free(v23[0]);
  return v17;
}

uint64_t AGCLLVMGen5TargetLowerer::buildMemCpy1DDMA(uint64_t a1, uint64_t ***a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *Cast;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  int v19;
  _BYTE v20[32];
  __int16 v21;
  uint64_t *v22[5];
  uint64_t *v23[5];

  v3 = **a2;
  v4 = (*a2)[2];
  v5 = (*a2)[3];
  v6 = (*a2)[4];
  v7 = *(_DWORD *)(*v4 + 8);
  if ((v7 & 0xFE) == 0x12)
    v7 = *(_DWORD *)(**(_QWORD **)(*v4 + 16) + 8);
  v8 = v7 & 0xFFFFFF00;
  if ((v7 & 0xFFFFFF00) == 0x300)
    v9 = v23;
  else
    v9 = v22;
  *v9 = v4;
  v9[1] = v3;
  v9[2] = v6;
  if (v8 == 768)
    v10 = v22;
  else
    v10 = v23;
  v9[3] = (uint64_t *)llvm::ConstantInt::get();
  v9[4] = v6;
  *v10 = v5;
  v10[1] = v3;
  v10[2] = v6;
  v10[3] = (uint64_t *)llvm::ConstantInt::get();
  v10[4] = v6;
  v11 = llvm::ConstantInt::get();
  v12 = *(_QWORD *)(a1 + 240);
  v21 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v11, v12, (uint64_t)v20);
  v14 = llvm::ConstantInt::get();
  v17 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v19 = *(_DWORD *)(a1 + 104);
  AGCLLVMGen5TargetLowerer::CreateBufferReadWriteBlock((_QWORD *)a1, &v17, v8 == 768, 1, v23, v22, Cast, v14);
  if (v18)
    llvm::MetadataTracking::untrack();
  v15 = 2568;
  if (v8 == 768)
    v15 = 2560;
  return *(_QWORD *)(a1 + v15);
}

uint64_t AGCLLVMGen5TargetLowerer::findPointerAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t result;
  int v6;
  BOOL v9;
  uint64_t v10;

  v2 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v3 = *v2;
  v4 = (unsigned __int8 *)v2[4];
  result = llvm::ConstantInt::get();
  v6 = v4[16];
  if (v6 == 77 && v4 != 0)
  {
    v10 = **((_QWORD **)v4 - 4);
    v9 = *(_BYTE *)(v10 + 8) != 15 || v10 == 0;
    goto LABEL_14;
  }
  if (v6 == 62 && v4 != 0)
  {
    v9 = *(_BYTE *)(**(_QWORD **)(*(_QWORD *)v4 + 16) + 8) == 17;
LABEL_14:
    if (!v9)
      return v3;
  }
  return result;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildShuffleAndFill(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  llvm::Value *v12;
  unsigned int v14;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v21 = *a2;
  v22 = *((_QWORD *)a2 + 2);
  if (v22)
    llvm::MetadataTracking::track();
  v23 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v21, a1 + 8);
  if (v22)
    llvm::MetadataTracking::untrack();
  if (*(_BYTE *)(*(_QWORD *)(a3 + 24) + 16) == 16)
  {
    v18 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v20 = *(_DWORD *)(a1 + 104);
    v12 = AGCLLVMGen5TargetLowerer::buildShuffleAndFillNative((_QWORD *)a1, &v18, (llvm::Value **)a3, a4, a5);
    if (v19)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    if (a6)
    {
      v12 = *(llvm::Value **)a3;
      v14 = 4;
    }
    else
    {
      v14 = *(_DWORD *)(a1 + 872);
      v12 = *(llvm::Value **)a3;
      if (v14 < 2)
        return v12;
    }
    for (i = 2; i <= v14; i *= 2)
    {
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v16 = llvm::ConstantInt::get();
      v12 = AGCLLVMGen5TargetLowerer::buildShuffleAndFillIfModuloIsAlpha(a1, v12, a3, a4, v16, a5);
      if (v17)
        llvm::MetadataTracking::untrack();
    }
  }
  return v12;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildShuffleAndFillNative(_QWORD *a1, __int128 *a2, llvm::Value **a3, uint64_t a4, int a5)
{
  uint64_t v8;
  llvm::Value *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  char *v13;
  char *v14;
  unsigned int ScalarSizeInBits;
  const std::string::value_type *p_p;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  const std::string::value_type *v20;
  _QWORD *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  std::string::size_type v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  llvm::IRBuilderBase *v32;
  unsigned int v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t Cast;
  llvm::Value *v41;
  uint64_t v42;
  llvm::Value *v43;
  llvm::Value *v44;
  uint64_t v45;
  llvm::Value *InsertElement;
  llvm::Value *v47;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  int v53;
  uint64_t v54;
  std::string::size_type v55;
  std::string v56;
  std::string v57;
  std::string v58;
  void *__p;
  std::string::size_type v60;
  unsigned __int8 v61;
  void *v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  std::string v67;
  uint64_t v68;
  llvm::Value *v69[2];
  __int128 v70;
  __int128 __src;
  __int128 v72;
  char v73[8];
  void *v74[2];
  _BYTE v75[16];
  __int16 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v64 = *a2;
  v65 = *((_QWORD *)a2 + 2);
  if (v65)
    llvm::MetadataTracking::track();
  v66 = *((_DWORD *)a2 + 6);
  v8 = (uint64_t)(a1 + 1);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v64, (uint64_t)(a1 + 1));
  if (v65)
    llvm::MetadataTracking::untrack();
  v9 = *a3;
  v50 = a3[1];
  v55 = (std::string::size_type)a3[2];
  v54 = llvm::ConstantInt::get();
  v10 = *(unsigned __int8 **)v9;
  v11 = *(unsigned __int8 **)v9;
  if ((*(_DWORD *)(*(_QWORD *)v9 + 8) & 0xFE) == 0x12)
    v11 = (unsigned __int8 *)**((_QWORD **)v10 + 2);
  v52 = v9;
  v12 = v11;
  if (v11 == (unsigned __int8 *)a1[23])
    v12 = (unsigned __int8 *)a1[24];
  if (a5)
    v13 = ".dn";
  else
    v13 = ".up";
  std::string::basic_string[abi:nn180100]<0>(&v62, v13);
  if (v12[8] >= 7u)
    v14 = ".i";
  else
    v14 = ".f";
  std::string::basic_string[abi:nn180100]<0>(&__p, v14);
  ScalarSizeInBits = llvm::Type::getScalarSizeInBits((llvm::Type *)v12);
  std::to_string(&v58, ScalarSizeInBits);
  std::operator+<char>();
  if ((v61 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v61 & 0x80u) == 0)
    v17 = v61;
  else
    v17 = v60;
  v18 = std::string::append(&v56, p_p, v17);
  v19 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v57.__r_.__value_.__r.__words[2] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v61 & 0x80u) == 0)
    v20 = (const std::string::value_type *)&__p;
  else
    v20 = (const std::string::value_type *)__p;
  v21 = a1;
  if ((v61 & 0x80u) == 0)
    v22 = v61;
  else
    v22 = v60;
  v23 = std::string::append(&v57, v20, v22);
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v58;
  else
    v25 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v27 = std::string::append(&v67, (const std::string::value_type *)v25, size);
  v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)v69 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)&v70 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = a1[24];
  *(_QWORD *)&__src = v12;
  *((_QWORD *)&__src + 1) = v29;
  *(_QWORD *)&v72 = v12;
  *((_QWORD *)&v72 + 1) = v29;
  v74[0] = v75;
  v74[1] = (void *)0x400000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v74, &__src, v73);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v31 = v30;
  if (v74[0] != v75)
    free(v74[0]);
  if (SBYTE7(v70) < 0)
    operator delete(v69[0]);
  v32 = (llvm::IRBuilderBase *)(a1 + 1);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  __src = 0u;
  v72 = 0u;
  *(_OWORD *)v69 = 0u;
  v70 = 0u;
  v33 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, v52, (llvm::Value **)&__src);
  AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, v50, v69);
  v53 = *((_DWORD *)v10 + 2) & 0xFE;
  if (v53 == 18)
  {
    llvm::FixedVectorType::get();
    v34 = (llvm::Value *)llvm::UndefValue::get();
    if (v33)
      goto LABEL_45;
LABEL_54:
    InsertElement = v34;
    goto LABEL_55;
  }
  v34 = 0;
  if (!v33)
    goto LABEL_54;
LABEL_45:
  v51 = (llvm::Value *)v11;
  v35 = 0;
  v36 = v33;
  do
  {
    if (v51 == (llvm::Value *)v21[23])
    {
      v38 = *((_QWORD *)&__src + v35);
      v39 = v21[24];
      v76 = 257;
      Cast = llvm::IRBuilderBase::CreateCast(v8, 40, v38, v39, (uint64_t)v74);
      *((_QWORD *)&__src + v35) = Cast;
      v32 = (llvm::IRBuilderBase *)(a1 + 1);
      v41 = v69[v35];
      v42 = a1[24];
      v76 = 257;
      v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(v8, 40, (uint64_t)v41, v42, (uint64_t)v74);
      v69[v35] = v43;
      v21 = a1;
      v67.__r_.__value_.__r.__words[0] = Cast;
      v67.__r_.__value_.__l.__size_ = v55;
      v67.__r_.__value_.__r.__words[2] = (std::string::size_type)v43;
      v68 = v54;
      v76 = 257;
      v44 = llvm::IRBuilderBase::CreateCall(v8, *(_QWORD *)(v31 + 24), v31, (uint64_t)&v67, 4, (uint64_t)v74);
      v45 = a1[23];
      v76 = 257;
      v37 = llvm::IRBuilderBase::CreateCast(v8, 38, (uint64_t)v44, v45, (uint64_t)v74);
    }
    else
    {
      v67.__r_.__value_.__r.__words[0] = *((_QWORD *)&__src + v35);
      v67.__r_.__value_.__l.__size_ = v55;
      v67.__r_.__value_.__r.__words[2] = (std::string::size_type)v69[v35];
      v68 = v54;
      v76 = 257;
      v37 = (uint64_t)llvm::IRBuilderBase::CreateCall((uint64_t)v32, *(_QWORD *)(v31 + 24), v31, (uint64_t)&v67, 4, (uint64_t)v74);
    }
    InsertElement = (llvm::Value *)v37;
    if (v53 == 18)
    {
      v76 = 257;
      v47 = (llvm::Value *)llvm::ConstantInt::get();
      InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v32, v34, InsertElement, v47, (const llvm::Twine *)v74);
    }
    ++v35;
    v34 = InsertElement;
  }
  while (v36 != v35);
LABEL_55:
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if ((char)v61 < 0)
    operator delete(__p);
  if (v63 < 0)
    operator delete(v62);
  return InsertElement;
}

llvm::User *AGCLLVMGen5TargetLowerer::buildShuffleAndFillIfModuloIsAlpha(uint64_t a1, llvm::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t *v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  llvm::BasicBlock *v15;
  int v16;
  size_t v17;
  std::string *v18;
  void **v19;
  llvm::BasicBlock *v20;
  llvm::BasicBlock *v21;
  _QWORD *v22;
  llvm::Instruction *v23;
  _QWORD *v24;
  llvm::Instruction *v25;
  llvm::CmpInst **v26;
  uint64_t ICmp;
  llvm::Value *v28;
  uint64_t FirstInsertionPt;
  llvm::Type *v30;
  llvm::User *PHI;
  __int128 v35;
  uint64_t v36;
  int v37;
  std::string v38;
  void *__p[2];
  uint64_t v40;
  std::string v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v10 = (unint64_t *)(a5 + 24);
  if (*(_DWORD *)(a5 + 32) >= 0x41u)
    v10 = (unint64_t *)*v10;
  std::to_string(&v38, *v10);
  v11 = std::string::insert(&v38, 0, "mod");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v41, ".block");
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v40 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v15 = *(llvm::BasicBlock **)(a1 + 56);
  v16 = SHIBYTE(v40);
  if (v40 >= 0)
    v17 = HIBYTE(v40);
  else
    v17 = (size_t)__p[1];
  std::string::basic_string[abi:nn180100]((uint64_t)&v38, v17 + 6);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v38;
  else
    v18 = (std::string *)v38.__r_.__value_.__r.__words[0];
  if (v17)
  {
    if (v16 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    memmove(v18, v19, v17);
  }
  strcpy((char *)v18 + v17, ".merge");
  v42 = 260;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  v20 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  v42 = 260;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  v21 = (llvm::BasicBlock *)operator new();
  llvm::BasicBlock::BasicBlock();
  v22 = (_QWORD *)*((_QWORD *)v15 + 5);
  if (v22 == (_QWORD *)((char *)v15 + 40))
  {
    v25 = 0;
  }
  else
  {
    v23 = (llvm::Instruction *)(v22 - 3);
    if (v22)
      v24 = v22 - 3;
    else
      v24 = 0;
    if (*((unsigned __int8 *)v24 + 16) - 29 >= 0xB)
      v25 = 0;
    else
      v25 = v23;
  }
  llvm::Instruction::eraseFromParent(v25);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = (char *)v15 + 40;
  v26 = *(llvm::CmpInst ***)(a3 + 24);
  v42 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v26, a5, (uint64_t)&v41);
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)(a1 + 8), ICmp, (uint64_t)v21, (uint64_t)v20);
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = (char *)v21 + 40;
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41.__r_.__value_.__r.__words[2];
  v41.__r_.__value_.__l.__size_ = 0x400000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v41, (_BYTE *)a3, (_BYTE *)(a3 + 8 * a4));
  *(_QWORD *)(v41.__r_.__value_.__r.__words[0] + 24) = a5;
  v35 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v37 = *(_DWORD *)(a1 + 104);
  v28 = AGCLLVMGen5TargetLowerer::buildShuffleAndFillNative((_QWORD *)a1, &v35, (llvm::Value **)v41.__r_.__value_.__l.__data_, LODWORD(v41.__r_.__value_.__r.__words[1]), a6);
  if (v36)
    llvm::MetadataTracking::untrack();
  llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 8), v20);
  if ((std::string::size_type *)v41.__r_.__value_.__l.__data_ != &v41.__r_.__value_.__r.__words[2])
    free(v41.__r_.__value_.__l.__data_);
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v20);
  llvm::IRBuilderBase::SetInsertPoint(a1 + 8, (uint64_t)v20, FirstInsertionPt);
  v30 = *(llvm::Type **)a2;
  v42 = 257;
  PHI = llvm::IRBuilderBase::CreatePHI((llvm::IRBuilderBase *)(a1 + 8), v30, 2, (const llvm::Twine *)&v41);
  llvm::PHINode::addIncoming(PHI, v28, v21);
  llvm::PHINode::addIncoming(PHI, a2, v15);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  return PHI;
}

uint64_t AGCLLVMGen5TargetLowerer::CreateBufferReadWriteBlock(_QWORD *a1, __int128 *a2, int a3, int a4, uint64_t **a5, uint64_t **a6, llvm::Value *a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  llvm::Value *v31;
  uint64_t Element;
  uint64_t v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  _QWORD *v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  char *v65;
  char *v66;
  llvm::Value *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  llvm::Value *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  char *v84;
  char *v85;
  llvm::Value *v86;
  uint64_t **v87;
  uint64_t Value;
  uint64_t **v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t **v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  unint64_t v141;
  uint64_t **v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  llvm::Instruction *v155;
  uint64_t v156;
  llvm::Instruction *v157;
  uint64_t v158;
  llvm::CmpInst **v159;
  uint64_t v160;
  uint64_t ICmp;
  uint64_t FirstInsertionPt;
  uint64_t v164;
  uint64_t v165;
  llvm::BasicBlock *v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t Cast;
  uint64_t v171;
  llvm::IRBuilderBase *v173;
  _QWORD *v174;
  _DWORD v175[8];
  __int16 v176;
  __int128 v177;
  uint64_t v178;
  int v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  v177 = *a2;
  v178 = *((_QWORD *)a2 + 2);
  if (v178)
    llvm::MetadataTracking::track();
  v179 = *((_DWORD *)a2 + 6);
  v14 = (uint64_t)(a1 + 1);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v177, (uint64_t)(a1 + 1));
  if (v178)
    llvm::MetadataTracking::untrack();
  v15 = (uint64_t)a5[1];
  v16 = a1[24];
  v183 = 257;
  a5[1] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v15, v16, (uint64_t)&v180);
  v17 = (uint64_t)a5[2];
  v18 = a1[24];
  v183 = 257;
  a5[2] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v17, v18, (uint64_t)&v180);
  v19 = (uint64_t)a5[3];
  v20 = a1[24];
  v183 = 257;
  a5[3] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v19, v20, (uint64_t)&v180);
  v21 = (uint64_t)a5[4];
  v22 = a1[24];
  v183 = 257;
  a5[4] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v21, v22, (uint64_t)&v180);
  v23 = (uint64_t)a6[1];
  v24 = a1[24];
  v183 = 257;
  a6[1] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v23, v24, (uint64_t)&v180);
  v25 = (uint64_t)a6[2];
  v26 = a1[25];
  v183 = 257;
  a6[2] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v25, v26, (uint64_t)&v180);
  v27 = (uint64_t)a6[3];
  v28 = a1[25];
  v183 = 257;
  a6[3] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v27, v28, (uint64_t)&v180);
  v29 = (uint64_t)a6[4];
  v30 = a1[25];
  v183 = 257;
  a6[4] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v29, v30, (uint64_t)&v180);
  v183 = 257;
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), a7, v31, (const llvm::Twine *)&v180);
  v33 = a1[24];
  v176 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, Element, v33, (uint64_t)v175);
  v183 = 257;
  v34 = (llvm::Value *)llvm::ConstantInt::get();
  v35 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), a7, v34, (const llvm::Twine *)&v180);
  v36 = a1[24];
  v176 = 257;
  v169 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v35, v36, (uint64_t)v175);
  v37 = operator new(0x30uLL);
  v37[1] = unk_1C3DF89C8;
  v37[2] = xmmword_1C3DF89D8;
  *v37 = xmmword_1C3DF89B8;
  v38 = a5[1];
  v173 = (llvm::IRBuilderBase *)(a1 + 1);
  v174 = a1;
  if (v38 && *((_BYTE *)v38 + 16) == 16)
  {
    v171 = a8;
    v39 = 0;
    v42 = (_QWORD *)v38[3];
    v41 = v38 + 3;
    v40 = v42;
    v43 = v41[2];
    do
    {
      v44 = *((unsigned int *)v37 + v39);
      v45 = v41;
      if (v43 < 0x41
        || (v46 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v41), v45 = v40, v43 - v46 <= 0x40))
      {
        if (*v45 == v44)
          break;
      }
      ++v39;
    }
    while (v39 != 12);
    v14 = (uint64_t)v173;
    a1 = v174;
    a8 = v171;
  }
  v47 = llvm::ConstantInt::get();
  v48 = a1[24];
  v183 = 257;
  a5[1] = (uint64_t *)llvm::IRBuilderBase::CreateCast(v14, 38, v47, v48, (uint64_t)&v180);
  operator delete(v37);
  v49 = a1[24];
  v183 = 257;
  v168 = llvm::IRBuilderBase::CreateCast(v14, 38, a8, v49, (uint64_t)&v180);
  v50 = a1[7];
  v180 = "if.first.active.lane.end";
  v183 = 259;
  v51 = llvm::BasicBlock::splitBasicBlock();
  v180 = "if.first.active.lane.end";
  v183 = 259;
  v164 = v50;
  operator new();
  v165 = llvm::BasicBlock::BasicBlock();
  v166 = (llvm::BasicBlock *)v51;
  a1[7] = v165;
  a1[8] = v165 + 40;
  v52 = a4;
  v53 = 329;
  if (a4)
    v53 = 325;
  if (a1[v53])
    strlen((const char *)a1[v53]);
  v54 = **a5;
  v55 = *a5[1];
  v56 = *a5[2];
  if (a4)
  {
    v57 = operator new(0x18uLL);
    *v57 = v54;
    v57[1] = v55;
    v57[2] = v56;
  }
  else
  {
    v58 = *a5[3];
    v59 = *a5[4];
    v57 = operator new(0x28uLL);
    *v57 = v54;
    v57[1] = v55;
    v57[2] = v56;
    v57[3] = v58;
    v52 = 0;
    v57[4] = v59;
    a1 = v174;
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v61 = v60;
  operator delete(v57);
  v63 = *a5;
  v62 = a5[1];
  v64 = a5[2];
  if (v52)
  {
    v65 = (char *)operator new(0x18uLL);
    v66 = v65 + 24;
    *(_QWORD *)v65 = v63;
    *((_QWORD *)v65 + 1) = v62;
    *((_QWORD *)v65 + 2) = v64;
  }
  else
  {
    v65 = (char *)operator new(0x28uLL);
    v66 = v65 + 40;
    *(_QWORD *)v65 = v63;
    *((_QWORD *)v65 + 1) = v62;
    *((_QWORD *)v65 + 2) = v64;
    *(_OWORD *)(v65 + 24) = *(_OWORD *)(a5 + 3);
  }
  v183 = 257;
  v67 = llvm::IRBuilderBase::CreateCall((uint64_t)v173, *(_QWORD *)(v61 + 24), v61, (uint64_t)v65, (v66 - v65) >> 3, (uint64_t)&v180);
  operator delete(v65);
  v68 = 330;
  if (v52)
    v68 = 326;
  v69 = (const char *)a1[v68];
  v71 = a1[25];
  v70 = a1[26];
  if (v52)
  {
    v180 = (const char *)a1[26];
    v181 = v71;
  }
  else
  {
    v180 = (const char *)a1[26];
    v181 = v70;
    v182 = v71;
  }
  llvm::StructType::get();
  if (v69)
    strlen(v69);
  v72 = **a6;
  v73 = *a6[1];
  v74 = *a6[2];
  if (v52)
  {
    v75 = operator new(0x18uLL);
    *v75 = v72;
    v75[1] = v73;
    v75[2] = v74;
  }
  else
  {
    v76 = *a6[3];
    v77 = v67;
    v78 = *a6[4];
    v75 = operator new(0x28uLL);
    *v75 = v72;
    v75[1] = v73;
    v75[2] = v74;
    v75[3] = v76;
    v52 = a4;
    v75[4] = v78;
    v67 = v77;
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v80 = v79;
  operator delete(v75);
  v82 = *a6;
  v81 = a6[1];
  v83 = a6[2];
  if (v52)
  {
    v84 = (char *)operator new(0x18uLL);
    v85 = v84 + 24;
    *(_QWORD *)v84 = v82;
    *((_QWORD *)v84 + 1) = v81;
    *((_QWORD *)v84 + 2) = v83;
  }
  else
  {
    v84 = (char *)operator new(0x28uLL);
    v85 = v84 + 40;
    *(_QWORD *)v84 = v82;
    *((_QWORD *)v84 + 1) = v81;
    *((_QWORD *)v84 + 2) = v83;
    *(_OWORD *)(v84 + 24) = *(_OWORD *)(a6 + 3);
  }
  v183 = 257;
  v86 = llvm::IRBuilderBase::CreateCall((uint64_t)v173, *(_QWORD *)(v80 + 24), v80, (uint64_t)v84, (v85 - v84) >> 3, (uint64_t)&v180);
  operator delete(v84);
  v87 = (uint64_t **)operator new(8uLL);
  *v87 = (uint64_t *)v67;
  v175[0] = 0;
  v183 = 257;
  Value = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v173, (uint64_t)v86, (uint64_t)v175, 1, (uint64_t)&v180);
  v89 = (uint64_t **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(2uLL);
  v91 = v90;
  v92 = (uint64_t *)&v89[v90];
  v89[1] = (uint64_t *)Value;
  *v89 = *v87;
  operator delete(v87);
  v175[0] = 1;
  v183 = 257;
  v93 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v173, (uint64_t)v86, (uint64_t)v175, 1, (uint64_t)&v180);
  v94 = v93;
  if (v91 < 3)
  {
    v96 = 3;
    if ((unint64_t)(((char *)v92 - (char *)v89) >> 2) > 3)
      v96 = ((char *)v92 - (char *)v89) >> 2;
    if ((unint64_t)((char *)v92 - (char *)v89) >= 0x7FFFFFFFFFFFFFF8)
      v97 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v97 = v96;
    if (v97)
      v97 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v97);
    else
      v98 = 0;
    v99 = 0;
    v92 = (uint64_t *)(v97 + 8 * v98);
    *(_QWORD *)(v97 + 16) = v94;
    v95 = (uint64_t *)(v97 + 24);
    do
    {
      *(_QWORD *)(v97 + 16 + v99 * 8 - 8) = v89[v99 + 1];
      --v99;
    }
    while (v99 != -2);
    v100 = (uint64_t **)v97;
    operator delete(v89);
    v89 = v100;
    if ((v52 & 1) != 0)
      goto LABEL_65;
  }
  else
  {
    v89[2] = (uint64_t *)v93;
    v95 = (uint64_t *)(v89 + 3);
    if ((v52 & 1) != 0)
      goto LABEL_65;
  }
  v175[0] = 2;
  v183 = 257;
  v101 = llvm::IRBuilderBase::CreateExtractValue((uint64_t)v173, (uint64_t)v86, (uint64_t)v175, 1, (uint64_t)&v180);
  v102 = v101;
  if (v95 >= v92)
  {
    v103 = ((char *)v95 - (char *)v89) >> 3;
    v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 61)
      goto LABEL_170;
    if (((char *)v92 - (char *)v89) >> 2 > v104)
      v104 = ((char *)v92 - (char *)v89) >> 2;
    if ((unint64_t)((char *)v92 - (char *)v89) >= 0x7FFFFFFFFFFFFFF8)
      v105 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v105 = v104;
    if (v105)
      v105 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v105);
    else
      v106 = 0;
    v107 = (uint64_t *)(v105 + 8 * v103);
    v92 = (uint64_t *)(v105 + 8 * v106);
    *v107 = v102;
    v108 = v107 + 1;
    while (v95 != (uint64_t *)v89)
    {
      v109 = *--v95;
      *--v107 = v109;
    }
    operator delete(v89);
    v89 = (uint64_t **)v107;
    v95 = v108;
  }
  else
  {
    *v95++ = v101;
  }
LABEL_65:
  if (v95 >= v92)
  {
    v111 = ((char *)v95 - (char *)v89) >> 3;
    v112 = v111 + 1;
    if ((unint64_t)(v111 + 1) >> 61)
      goto LABEL_170;
    if (((char *)v92 - (char *)v89) >> 2 > v112)
      v112 = ((char *)v92 - (char *)v89) >> 2;
    if ((unint64_t)((char *)v92 - (char *)v89) >= 0x7FFFFFFFFFFFFFF8)
      v113 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v113 = v112;
    if (v113)
      v113 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v113);
    else
      v114 = 0;
    v115 = (uint64_t *)(v113 + 8 * v111);
    v92 = (uint64_t *)(v113 + 8 * v114);
    *v115 = Cast;
    v110 = v115 + 1;
    while (v95 != (uint64_t *)v89)
    {
      v116 = *--v95;
      *--v115 = v116;
    }
    operator delete(v89);
    v89 = (uint64_t **)v115;
  }
  else
  {
    *v95 = Cast;
    v110 = v95 + 1;
  }
  if (v110 >= v92)
  {
    v118 = ((char *)v110 - (char *)v89) >> 3;
    v119 = v118 + 1;
    if ((unint64_t)(v118 + 1) >> 61)
      goto LABEL_170;
    if (((char *)v92 - (char *)v89) >> 2 > v119)
      v119 = ((char *)v92 - (char *)v89) >> 2;
    if ((unint64_t)((char *)v92 - (char *)v89) >= 0x7FFFFFFFFFFFFFF8)
      v120 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v120 = v119;
    if (v120)
      v120 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v120);
    else
      v121 = 0;
    v122 = (uint64_t *)(v120 + 8 * v118);
    v92 = (uint64_t *)(v120 + 8 * v121);
    *v122 = v169;
    v117 = v122 + 1;
    if (v110 == (uint64_t *)v89)
      goto LABEL_94;
    do
    {
      v123 = *--v110;
      *--v122 = v123;
    }
    while (v110 != (uint64_t *)v89);
    if (v89)
LABEL_94:
      operator delete(v89);
    v89 = (uint64_t **)v122;
  }
  else
  {
    *v110 = v169;
    v117 = v110 + 1;
  }
  v124 = llvm::ConstantInt::get();
  v125 = v124;
  if (v117 >= v92)
  {
    v127 = ((char *)v117 - (char *)v89) >> 3;
    v128 = v127 + 1;
    if ((unint64_t)(v127 + 1) >> 61)
      goto LABEL_170;
    if (((char *)v92 - (char *)v89) >> 2 > v128)
      v128 = ((char *)v92 - (char *)v89) >> 2;
    if ((unint64_t)((char *)v92 - (char *)v89) >= 0x7FFFFFFFFFFFFFF8)
      v129 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v129 = v128;
    if (v129)
      v129 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v129);
    else
      v130 = 0;
    v131 = (uint64_t *)(v129 + 8 * v127);
    v92 = (uint64_t *)(v129 + 8 * v130);
    *v131 = v125;
    v126 = v131 + 1;
    if (v117 == (uint64_t *)v89)
      goto LABEL_110;
    do
    {
      v132 = *--v117;
      *--v131 = v132;
    }
    while (v117 != (uint64_t *)v89);
    if (v89)
LABEL_110:
      operator delete(v89);
    v89 = (uint64_t **)v131;
  }
  else
  {
    *v117 = v124;
    v126 = v117 + 1;
  }
  if (v126 < v92)
  {
    *v126 = v168;
    v133 = (uint64_t **)(v126 + 1);
    goto LABEL_127;
  }
  v134 = ((char *)v126 - (char *)v89) >> 3;
  v135 = v134 + 1;
  if ((unint64_t)(v134 + 1) >> 61)
LABEL_170:
    abort();
  if (((char *)v92 - (char *)v89) >> 2 > v135)
    v135 = ((char *)v92 - (char *)v89) >> 2;
  if ((unint64_t)((char *)v92 - (char *)v89) >= 0x7FFFFFFFFFFFFFF8)
    v136 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v136 = v135;
  if (v136)
    v136 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v136);
  v137 = (uint64_t *)(v136 + 8 * v134);
  *v137 = v168;
  v133 = (uint64_t **)(v137 + 1);
  if (v126 == (uint64_t *)v89)
    goto LABEL_125;
  do
  {
    v138 = *--v126;
    *--v137 = v138;
  }
  while (v126 != (uint64_t *)v89);
  if (v89)
LABEL_125:
    operator delete(v89);
  v89 = (uint64_t **)v137;
LABEL_127:
  if (v89 == v133)
  {
    v139 = 0;
  }
  else
  {
    v139 = 0;
    v140 = 0;
    v141 = 0;
    v142 = v89;
    do
    {
      v143 = **v142;
      if ((unint64_t)v140 >= v141)
      {
        v145 = (v140 - v139) >> 3;
        v146 = v145 + 1;
        if ((unint64_t)(v145 + 1) >> 61)
          goto LABEL_170;
        if ((uint64_t)(v141 - (_QWORD)v139) >> 2 > v146)
          v146 = (uint64_t)(v141 - (_QWORD)v139) >> 2;
        if (v141 - (unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8)
          v147 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v147 = v146;
        if (v147)
          v147 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v147);
        else
          v148 = 0;
        v149 = (char *)(v147 + 8 * v145);
        *(_QWORD *)v149 = v143;
        v144 = v149 + 8;
        while (v140 != v139)
        {
          v150 = *((_QWORD *)v140 - 1);
          v140 -= 8;
          *((_QWORD *)v149 - 1) = v150;
          v149 -= 8;
        }
        v141 = v147 + 8 * v148;
        if (v139)
          operator delete(v139);
        v139 = v149;
      }
      else
      {
        *(_QWORD *)v140 = v143;
        v144 = v140 + 8;
      }
      ++v142;
      v140 = v144;
    }
    while (v142 != v133);
  }
  v151 = 2616;
  if (a4)
    v151 = 2584;
  v152 = 2624;
  if (a4)
    v152 = 2592;
  if (!a3)
    v151 = v152;
  if (*(_QWORD *)((char *)v174 + v151))
    strlen(*(const char **)((char *)v174 + v151));
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v183 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)v173, *(_QWORD *)(v153 + 24), v153, (uint64_t)v89, v133 - v89, (uint64_t)&v180);
  if (v139)
    operator delete(v139);
  if (v89)
    operator delete(v89);
  llvm::IRBuilderBase::CreateBr(v173, v166);
  v154 = *(_QWORD *)(v164 + 40);
  if (v154 == v164 + 40)
  {
    v157 = 0;
  }
  else
  {
    v155 = (llvm::Instruction *)(v154 - 24);
    if (v154)
      v156 = v154 - 24;
    else
      v156 = 0;
    if (*(unsigned __int8 *)(v156 + 16) - 29 >= 0xB)
      v157 = 0;
    else
      v157 = v155;
  }
  llvm::Instruction::eraseFromParent(v157);
  v174[7] = v164;
  v174[8] = v164 + 40;
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v183 = 257;
  v159 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall((uint64_t)v173, **(_QWORD **)(*(_QWORD *)v158 + 16), v158, 0, 0, (uint64_t)&v180);
  v160 = llvm::ConstantInt::get();
  v183 = 257;
  ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)v173, 32, v159, v160, (uint64_t)&v180);
  llvm::IRBuilderBase::CreateCondBr((uint64_t *)v173, ICmp, v165, (uint64_t)v166);
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v166);
  return llvm::IRBuilderBase::SetInsertPoint((uint64_t)v173, (uint64_t)v166, FirstInsertionPt);
}

uint64_t AGCLLVMGen5TargetLowerer::bfloatConvert16RawToF32(AGCLLVMGen5TargetLowerer *this, llvm::Value *a2)
{
  llvm::IRBuilderBase *v3;
  uint64_t v4;
  llvm::Value *Cast;
  llvm::Value *v6;
  uint64_t Shl;
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;

  v3 = (AGCLLVMGen5TargetLowerer *)((char *)this + 8);
  v4 = *((_QWORD *)this + 25);
  v11 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)this + 8, 39, (uint64_t)a2, v4, (uint64_t)v10);
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  v11 = 257;
  Shl = llvm::IRBuilderBase::CreateShl(v3, Cast, v6, (const llvm::Twine *)v10);
  v8 = *((_QWORD *)this + 21);
  v11 = 257;
  return llvm::IRBuilderBase::CreateCast((uint64_t)v3, 49, Shl, v8, (uint64_t)v10);
}

uint64_t AGCLLVMGen5TargetLowerer::buildGetActiveThreadsMask(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v16, a1 + 8);
  if (v17)
    llvm::MetadataTracking::untrack();
  if ((a3 & 1) == 0)
  {
    v10 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v12 = *(_DWORD *)(a1 + 104);
    v9 = llvm::ConstantInt::get();
    v7 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 1720))(a1, &v10, v9);
    if (!v11)
      return v7;
    goto LABEL_7;
  }
  v13 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v15 = *(_DWORD *)(a1 + 104);
  v6 = llvm::ConstantInt::get();
  v7 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 1680))(a1, &v13, v6);
  if (v14)
LABEL_7:
    llvm::MetadataTracking::untrack();
  return v7;
}

uint64_t llvm::SmallVectorImpl<llvm::Value *>::insert_one_impl<llvm::Value *>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = *(unsigned int *)(result + 8);
  if (*(_QWORD *)result + 8 * v6 == a2)
    return llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back(result, *a3);
  v7 = (a2 - v5) >> 3;
  if (v6 >= *(_DWORD *)(result + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod();
    v5 = *(_QWORD *)v4;
    v6 = *(unsigned int *)(v4 + 8);
  }
  v8 = (uint64_t *)(v5 + 8 * v7);
  *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)(v5 + 8 * v6 - 8);
  v9 = *(_QWORD *)v4 + 8 * v6 - 8;
  if ((uint64_t *)v9 != v8)
  {
    result = (uint64_t)memmove(v8 + 1, v8, v9 - (_QWORD)v8);
    LODWORD(v6) = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(v4 + 8) = v6 + 1;
  *v8 = *a3;
  return result;
}

void AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::~AGCBindPointLayoutT()
{
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxAPIBindPointsTexture()
{
  return 128;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2)
    return 35;
  else
    return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxAPIIndirectTexture()
{
  return 500000;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxAPIIndirectBuffer()
{
  return 500000;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationFactorBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationInternalPerPatchIDBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationInternalPerPatchDataBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationInternalDrawIndexOffsetsBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationProducerDrawElemIndirectCmdsOutputBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationProducerDrawElemIndirectCmdsInputBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationProducerInternalInstanceCountsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationProducerInternalInstanceIDsBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationConsumerPatchIndexBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationConsumerPositionInPatchBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderTessellationConsumerControlPointIndexBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderGLMTLReserved()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderBaseVertexBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderBaseInstanceBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderBaseImmediateBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderReadTextureHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderWriteTextureHeapBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderReadTextureGatherBufferIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderWriteTextureGatherBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderWidthTextureHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderSamplerHeapBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderSamplerGatherBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderPerEncoderIndirectionTableIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderIntersectionFunctionTableHeapBufferIndex()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderVisibleFunctionTableHeapBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderVertexAmplificationViewMappingsIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderFragmentViewportDepthRange()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderBVHStateHeapBufferIndex()
{
  return 54;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderDylibGOTBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderGlobalConstructorsBufferIndex()
{
  return 60;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 62);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderDylibGlobalBindingTableIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderSCSPerKickConfigurationTableBufferIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getRenderSCSPerShaderConfigurationTableBufferIndex()
{
  return 64;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getMeshLocalMeshDataIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeMaxAPIBindPointsTexture()
{
  return 128;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeMaxAPIBindPointsBuffer(uint64_t a1, int a2)
{
  if (a2)
    return 35;
  else
    return 31;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeMaxSPIBindPoints()
{
  return 65;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeFastIntegerDivideBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeTGOptParamsIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeTGOptCountIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeStageInBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeGatherOrPatchUpOffsetsBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeReadTextureHeapBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeWriteTextureHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeReadTextureGatherBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeWriteTextureGatherBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeWidthTextureHeapBufferIndex()
{
  return 46;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSamplerHeapBufferIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSamplerGatherBufferIndex()
{
  return 48;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputePerEncoderIndirectionTableIndex()
{
  return 49;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeIntersectionFunctionTableHeapBufferIndex()
{
  return 50;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeVisibleFunctionTableHeapBufferIndex()
{
  return 51;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeExecuteIndirectInputParametersBufferIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeExecuteIndirectIndirectCommandBufferBufferIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameters()
{
  return 55;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterThreadgroupOffset()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterThreadgroupsPerGrid()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterThreadOffset()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterThreadsPerGrid()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSplitDispatchParameterEnabled()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeDylibGOTBufferIndex()
{
  return 56;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeGlobalConstructorsBufferIndex()
{
  return 58;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeDylibStageSpecificBindPointIndex(uint64_t a1, int a2)
{
  return (a2 + 64);
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeProgressMarkerBufferIndex()
{
  return 57;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeBVHStateHeapBufferIndex()
{
  return 59;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicateLeftOperandIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicateRightOperandIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicatePassLinkAddressIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicateFailLinkAddressIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeControlFlowPredicateLinkTokenWordsIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSCSPerKickConfigurationTableBufferIndex()
{
  return 61;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeSCSPerShaderConfigurationTableBufferIndex()
{
  return 62;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getComputeDylibGlobalBindingTableIndex()
{
  return 63;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionReadTextureHeapBufferIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionWriteTextureHeapBufferIndex()
{
  return 37;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionSamplerHeapBufferIndex()
{
  return 41;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionSamplerGatherBufferIndex()
{
  return 42;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionReadTextureGatherBufferIndex()
{
  return 38;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionWriteTextureGatherBufferIndex()
{
  return 39;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionBVHStateHeapBufferIndex()
{
  return 43;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionDylibGOTBufferIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionWidthTextureHeapBufferIndex()
{
  return 40;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionVisibleFunctionTableHeapBufferIndex()
{
  return 45;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionPerEncoderIndirectionTableIndex()
{
  return 47;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsDriverSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsSizeIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsReadTextureHeapIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsWriteTextureHeapIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsWidthTextureHeapIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsSamplerHeapIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsBVHHeapIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsVFTHeapIndex()
{
  return 7;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsIFTHeapIndex()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsLeafPointersInfoIndex()
{
  return 11;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsShaderStridesIndex()
{
  return 32;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsUserDataBoundsIndex()
{
  return 9;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsDriverDataStartIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsDoraStateBufferIndex()
{
  return 12;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerEncoderIndirectionTableIndex()
{
  return 13;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickIftHeapIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickUserBoundsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickPayloadStridesIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickDriverDataStartIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickGin1122SWWABvhIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickLeafPointersInfoIndex()
{
  return 5;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerKickDoraStateBufferIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataShaderUserSizeIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataInstanceLevelsIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataShaderStrideIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataDoneRayTracingFlagIndex()
{
  return 3;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataGlobalBindingsTableIndex()
{
  return 4;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataGotIndex()
{
  return 6;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getIntersectionScsPerCliqueDataCount()
{
  return 8;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getObjectIndirectBufferWgCountIndex()
{
  return 35;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getObjectIndirectBufferWgSizeIndex()
{
  return 36;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getGeometryPipelineEmulationPerKickInfoIndex()
{
  return 52;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getGeometryPipelineEmulationPerDispatchInfoIndex()
{
  return 53;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getGeometryPipelineEmulationMailboxLookupBufferIndex()
{
  return 44;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTableICBHeapBufferIndex()
{
  return 0;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTablePipelineStateHeapBufferIndex()
{
  return 1;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTableFragmentBuiltinEncoderStateIndex()
{
  return 2;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTablePrivateDataIndex()
{
  return 10;
}

uint64_t AGCBindPointLayoutT<AGX::BindPointLayout<128,31,4,128,500000,500000,true>>::getPerEncoderIndirectionTableSize()
{
  return 11;
}

uint64_t AGCLLVMGen5TargetLowerer::buildIsFirstActiveThread(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t inserted;
  llvm::CmpInst **v8;
  uint64_t v9;
  _WORD v11[20];
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  v14 = *a2;
  v15 = *((_QWORD *)a2 + 2);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v14, a1 + 8);
  if (v15)
    llvm::MetadataTracking::untrack();
  v6 = 2768;
  if (a3)
    v6 = 2776;
  if (*(_QWORD *)(a1 + v6))
    strlen(*(const char **)(a1 + v6));
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v13 = 257;
  v8 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v12);
  v9 = llvm::ConstantInt::get();
  v11[16] = 257;
  return llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v8, v9, (uint64_t)v11);
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildReduce(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, llvm::Value *a5)
{
  llvm::IRBuilderBase *v8;
  int v9;
  __int128 v10;
  llvm::Type *v11;
  uint64_t v12;
  llvm::Value *PHI;
  int v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  llvm::Value *v18;
  uint64_t v19;
  llvm::Value *v20;
  uint64_t j;
  llvm::Value *v22;
  llvm::Value *Element;
  llvm::Value *v24;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Value *v29;
  uint64_t v30;
  llvm::Value *v31;
  uint64_t k;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  llvm::Value *v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  llvm::Value *v48;
  uint64_t v49;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  uint64_t v53;
  llvm::Value *v54;
  llvm::Value *v55;
  llvm::Value *v56;
  llvm::Value *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Value *v60;
  llvm::Value *v61;
  int v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  llvm::Type *v66;
  llvm::Type *v67;
  uint64_t inserted;
  llvm::CmpInst **v69;
  uint64_t v70;
  uint64_t ICmp;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  llvm::Instruction *v75;
  uint64_t v76;
  llvm::Instruction *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  llvm::Type **v82;
  llvm::Type *v83;
  llvm::Value *v84;
  unsigned int ScalarSizeInBits;
  const llvm::APInt *v86;
  llvm::Value *IntegerValue;
  unsigned int v88;
  llvm::Value *v89;
  uint64_t v90;
  uint64_t v91;
  llvm::Value *v92;
  uint64_t v93;
  llvm::Value *Cast;
  llvm::CmpInst **Xor;
  uint64_t Mul;
  llvm::Value *v97;
  unsigned int v98;
  uint64_t v99;
  llvm::Value *v100;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  llvm::Type *v106;
  llvm::Value *v107;
  uint64_t v108;
  uint64_t ActiveThreadsMask;
  uint64_t v110;
  llvm::Value *v111;
  unsigned int v112;
  const llvm::APInt *v113;
  llvm::Value *InsertElement;
  uint64_t i;
  uint64_t v116;
  llvm::Value *v117;
  uint64_t v118;
  llvm::Value *v119;
  llvm::CmpInst **Sub;
  uint64_t v121;
  llvm::Value *v122;
  llvm::Value *Select;
  llvm::Value *LShr;
  llvm::Value *v125;
  uint64_t v126;
  uint64_t v127;
  llvm::Value *v128;
  llvm::Value *v129;
  int v130;
  llvm::Value *v131;
  uint64_t v132;
  uint64_t v133;
  llvm::Value *v134;
  llvm::Value *v135;
  llvm::CmpInst **Add;
  llvm::Value *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  llvm::Value *v142;
  uint64_t v143;
  llvm::Value *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t FirstInsertionPt;
  llvm::Value *v148;
  llvm::Type *v149;
  llvm::BasicBlock *v150;
  llvm::BasicBlock *v151;
  llvm::BasicBlock *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  BOOL v156;
  llvm::Value *v157;
  llvm::Value *v158;
  llvm::Value *v159;
  llvm::Value *v160;
  int v161;
  uint64_t v162;
  llvm::Value *v163;
  uint64_t v164;
  llvm::Value *v165;
  llvm::Value *v166;
  llvm::Value *v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  int v171;
  __int128 v172;
  uint64_t v173;
  int v174;
  __int128 v175;
  uint64_t v176;
  int v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  int v181;
  __int128 v182;
  uint64_t v183;
  int v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  int v188;
  __int128 v189;
  uint64_t v190;
  int v191;
  __int128 v192;
  uint64_t v193;
  int v194;
  __int128 v195;
  uint64_t v196;
  int v197;
  __int128 v198;
  uint64_t v199;
  int v200;
  __int128 v201;
  uint64_t v202;
  int v203;
  __int128 v204;
  uint64_t v205;
  int v206;
  __int128 v207;
  uint64_t v208;
  int v209;
  __int128 v210;
  uint64_t v211;
  int v212;
  __int128 v213;
  uint64_t v214;
  int v215;
  __int128 v216;
  uint64_t v217;
  int v218;
  __int128 v219;
  uint64_t v220;
  int v221;
  __int128 v222;
  uint64_t v223;
  int v224;
  __int128 v225;
  uint64_t v226;
  int v227;
  __int16 v228;
  __int128 v229;
  uint64_t v230;
  int v231;
  __int16 v232;
  __int128 v233;
  uint64_t v234;
  int v235;
  _BYTE v236[32];
  __int16 v237;
  __int128 v238;
  uint64_t v239;
  int v240;
  __int16 v241;
  llvm::Value *v242[2];
  __int128 v243;
  uint64_t v244;

  v244 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v178 = a3;
  *((_QWORD *)&v178 + 1) = a4;
  v175 = *a2;
  v176 = *((_QWORD *)a2 + 2);
  if (v176)
    llvm::MetadataTracking::track();
  v177 = *((_DWORD *)a2 + 6);
  v8 = (llvm::IRBuilderBase *)(a1 + 8);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v175, a1 + 8);
  if (v176)
    llvm::MetadataTracking::untrack();
  if (llvm::StringRef::find() == -1 && llvm::StringRef::find() == -1 && llvm::StringRef::find() == -1)
  {
    v169 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v62 = *(_DWORD *)(a1 + 104);
    v171 = v62;
    v185 = v178;
    v182 = v169;
    v183 = v170;
    if (v170)
    {
      llvm::MetadataTracking::track();
      v62 = v171;
    }
    v184 = v62;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v182, a1 + 8);
    if (v183)
      llvm::MetadataTracking::untrack();
    v63 = llvm::StringRef::find();
    v64 = llvm::StringRef::find() == -1 && llvm::StringRef::find() == -1;
    v164 = llvm::StringRef::find();
    v157 = (llvm::Value *)llvm::StringRef::find();
    v168 = llvm::StringRef::find();
    if (v63 == -1 || v64)
    {
      v238 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v240 = *(_DWORD *)(a1 + 104);
      PHI = AGCLLVMGen5TargetLowerer::buildReduceCore((_QWORD *)a1, &v238, v185, *((uint64_t *)&v185 + 1), a5);
      if (v239)
LABEL_188:
        llvm::MetadataTracking::untrack();
LABEL_189:
      if (v170)
        goto LABEL_28;
      return PHI;
    }
    v179 = v169;
    v180 = v170;
    if (v170)
    {
      llvm::MetadataTracking::track();
      v65 = v171;
      v181 = v171;
      v192 = v179;
      v193 = v180;
      if (v180)
      {
        llvm::MetadataTracking::track();
        v65 = v181;
      }
    }
    else
    {
      v65 = v171;
      v181 = v171;
      v192 = v179;
      v193 = 0;
    }
    v194 = v65;
    AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v192, a1 + 8);
    if (v193)
      llvm::MetadataTracking::untrack();
    v66 = *(llvm::Type **)a5;
    *(_OWORD *)v242 = 0u;
    v243 = 0u;
    v67 = v66;
    v155 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a5, v242);
    v149 = v67;
    if (*(_QWORD *)(a1 + 2784))
      strlen(*(const char **)(a1 + 2784));
    v161 = *((_DWORD *)v67 + 2) & 0xFE;
    inserted = AGCLLVMBuilder::getOrInsertFunction<>();
    v241 = 257;
    v69 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)&v238);
    v70 = llvm::ConstantInt::get();
    v237 = 257;
    ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, v69, v70, (uint64_t)v236);
    v72 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)&v238 = "reduce.int.prod.merge";
    v241 = 259;
    v73 = llvm::BasicBlock::splitBasicBlock();
    *(_QWORD *)&v238 = "reduce.int.prod.fast";
    v241 = 259;
    v151 = (llvm::BasicBlock *)operator new();
    llvm::BasicBlock::BasicBlock();
    *(_QWORD *)&v238 = "reduce.int.prod.slow";
    v241 = 259;
    v152 = (llvm::BasicBlock *)operator new();
    v150 = (llvm::BasicBlock *)v73;
    llvm::BasicBlock::BasicBlock();
    v74 = *(_QWORD *)(v72 + 40);
    if (v74 == v72 + 40)
    {
      v77 = 0;
    }
    else
    {
      v75 = (llvm::Instruction *)(v74 - 24);
      if (v74)
        v76 = v74 - 24;
      else
        v76 = 0;
      if (*(unsigned __int8 *)(v76 + 16) - 29 >= 0xB)
        v77 = 0;
      else
        v77 = v75;
    }
    llvm::Instruction::eraseFromParent(v77);
    *(_QWORD *)(a1 + 56) = v72;
    *(_QWORD *)(a1 + 64) = v72 + 40;
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)(a1 + 8), ICmp, (uint64_t)v151, (uint64_t)v152);
    *(_QWORD *)(a1 + 56) = v151;
    *(_QWORD *)(a1 + 64) = (char *)v151 + 40;
    if (v161 == 18)
      llvm::FixedVectorType::get();
    v78 = llvm::UndefValue::get();
    if (!v155)
    {
      IntegerValue = (llvm::Value *)v78;
      goto LABEL_115;
    }
    v79 = 0;
    if (v168 == -1)
      v80 = 5;
    else
      v80 = 2;
    while (1)
    {
      v159 = (llvm::Value *)v78;
      v189 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v81 = *(_DWORD *)(a1 + 104);
      v191 = v81;
      v162 = v79;
      v82 = (llvm::Type **)v242[v79];
      v83 = *v82;
      if ((*((_DWORD *)*v82 + 2) & 0xFE) == 0x12)
        v83 = (llvm::Type *)**((_QWORD **)v83 + 2);
      v225 = v189;
      v226 = v190;
      if (v190)
      {
        llvm::MetadataTracking::track();
        v81 = v191;
      }
      v227 = v81;
      AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v225, a1 + 8);
      if (v226)
        llvm::MetadataTracking::untrack();
      v233 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v235 = *(_DWORD *)(a1 + 104);
      v84 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 1536))(a1, &v233, *(_QWORD *)(a1 + 200));
      if (v234)
        llvm::MetadataTracking::untrack();
      ScalarSizeInBits = llvm::Type::getScalarSizeInBits(v83);
      llvm::APInt::APInt((llvm::APInt *)&v238, ScalarSizeInBits);
      IntegerValue = (llvm::Value *)llvm::Constant::getIntegerValue(v83, (llvm::Type *)&v238, v86);
      if (DWORD2(v238) >= 0x41 && (_QWORD)v238)
        MEMORY[0x1CAA2D674](v238, 0x1000C8000313F17);
      v88 = 0;
      if (v157 != (llvm::Value *)-1)
        IntegerValue = (llvm::Value *)v82;
      do
      {
        v89 = (llvm::Value *)llvm::ConstantInt::get();
        if (v88 <= 1)
        {
          v222 = v189;
          v223 = v190;
          if (v190)
            llvm::MetadataTracking::track();
          v224 = v191;
          v93 = *(_QWORD *)(a1 + 192);
          v241 = 257;
          Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v89, v93, (uint64_t)&v238);
          v92 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadShuffleXor((char **)a1, (uint64_t)&v222, v82, Cast);
          if (v223)
LABEL_102:
            llvm::MetadataTracking::untrack();
        }
        else
        {
          v219 = v189;
          v220 = v190;
          if (v190)
            llvm::MetadataTracking::track();
          v221 = v191;
          v90 = *(_QWORD *)(a1 + 192);
          v237 = 257;
          v91 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v89, v90, (uint64_t)v236);
          v92 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Type **, uint64_t))(*(_QWORD *)a1 + 1704))(a1, &v219, v82, v91);
          if (v220)
            goto LABEL_102;
        }
        if (v164 != -1)
        {
          v241 = 257;
          Xor = (llvm::CmpInst **)llvm::IRBuilderBase::CreateXor((llvm::IRBuilderBase *)(a1 + 8), v84, v89, (const llvm::Twine *)&v238);
          v241 = 257;
          llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 36, Xor, (uint64_t)v84, (uint64_t)&v238);
          v237 = 257;
          llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v92, IntegerValue, (const llvm::Twine *)v236);
          v232 = 257;
          IntegerValue = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
        }
        v241 = 257;
        Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v92, (llvm::Value *)v82, (const llvm::Twine *)&v238);
        v82 = (llvm::Type **)Mul;
        ++v88;
      }
      while (v80 != v88);
      if (v164 == -1)
        IntegerValue = (llvm::Value *)Mul;
      if (v190)
        llvm::MetadataTracking::untrack();
      if (v161 == 18)
      {
        v241 = 257;
        v97 = (llvm::Value *)llvm::ConstantInt::get();
        IntegerValue = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v159, IntegerValue, v97, (const llvm::Twine *)&v238);
      }
      v79 = v162 + 1;
      v78 = (uint64_t)IntegerValue;
      if (v162 + 1 == v155)
      {
LABEL_115:
        llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 8), v150);
        *(_QWORD *)(a1 + 56) = v152;
        *(_QWORD *)(a1 + 64) = (char *)v152 + 40;
        v98 = v155;
        if (v161 == 18)
          llvm::FixedVectorType::get();
        v99 = llvm::UndefValue::get();
        v148 = IntegerValue;
        if (!v155)
        {
          InsertElement = (llvm::Value *)v99;
          goto LABEL_187;
        }
        v100 = 0;
        v102 = v164 == -1 || (llvm::Value *)((char *)v157 + 1) != 0;
        v156 = v102;
        if (v168 == -1)
          v103 = 2768;
        else
          v103 = 2776;
        v104 = 2784;
        if (v168 != -1)
          v104 = 2792;
        v153 = v104;
        v154 = v103;
        while (1)
        {
          v158 = (llvm::Value *)v99;
          v186 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
          v105 = *(_DWORD *)(a1 + 104);
          v188 = v105;
          v160 = v100;
          v163 = v242[(_QWORD)v100];
          v106 = *(llvm::Type **)v163;
          if ((*(_DWORD *)(*(_QWORD *)v163 + 8) & 0xFE) == 0x12)
            v106 = (llvm::Type *)**((_QWORD **)v106 + 2);
          v216 = v186;
          v217 = v187;
          if (v187)
          {
            llvm::MetadataTracking::track();
            v105 = v188;
          }
          v218 = v105;
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v216, a1 + 8);
          if (v217)
            llvm::MetadataTracking::untrack();
          v213 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
          v215 = *(_DWORD *)(a1 + 104);
          v167 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 1536))(a1, &v213, *(_QWORD *)(a1 + 200));
          if (v214)
            llvm::MetadataTracking::untrack();
          if (v168 == -1)
          {
            v108 = 32;
          }
          else
          {
            v107 = (llvm::Value *)llvm::ConstantInt::get();
            v241 = 257;
            v167 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v167, v107, (const llvm::Twine *)&v238);
            v108 = 4;
          }
          v210 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
          v212 = *(_DWORD *)(a1 + 104);
          ActiveThreadsMask = AGCLLVMGen5TargetLowerer::buildGetActiveThreadsMask(a1, &v210, v168 != -1);
          v110 = *(_QWORD *)(a1 + 200);
          v241 = 257;
          v111 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, ActiveThreadsMask, v110, (uint64_t)&v238);
          if (v211)
            llvm::MetadataTracking::untrack();
          v112 = llvm::Type::getScalarSizeInBits(v106);
          llvm::APInt::APInt((llvm::APInt *)&v238, v112);
          InsertElement = (llvm::Value *)llvm::Constant::getIntegerValue(v106, (llvm::Type *)&v238, v113);
          if (DWORD2(v238) >= 0x41 && (_QWORD)v238)
            MEMORY[0x1CAA2D674](v238, 0x1000C8000313F17);
          for (i = 1; i != v108; ++i)
          {
            if (v168 == -1)
            {
              v204 = v186;
              v205 = v187;
              if (v187)
                llvm::MetadataTracking::track();
              v206 = v188;
              v118 = llvm::ConstantInt::get();
              v117 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t))(*(_QWORD *)a1 + 1576))(a1, &v204, v163, v118);
              if (v205)
LABEL_155:
                llvm::MetadataTracking::untrack();
            }
            else
            {
              v207 = v186;
              v208 = v187;
              if (v187)
                llvm::MetadataTracking::track();
              v209 = v188;
              v116 = llvm::ConstantInt::get();
              v117 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t))(*(_QWORD *)a1 + 1560))(a1, &v207, v163, v116);
              if (v208)
                goto LABEL_155;
            }
            v119 = (llvm::Value *)llvm::ConstantInt::get();
            v241 = 257;
            Sub = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v167, v119, (const llvm::Twine *)&v238);
            v121 = llvm::ConstantInt::get();
            v241 = 257;
            v122 = (llvm::Value *)llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 39, Sub, v121, (uint64_t)&v238);
            llvm::ConstantInt::get();
            v241 = 257;
            Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
            v241 = 257;
            LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v111, Select, (const llvm::Twine *)&v238);
            v125 = (llvm::Value *)llvm::ConstantInt::get();
            v237 = 257;
            v126 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), LShr, v125, (const llvm::Twine *)v236);
            v127 = *(_QWORD *)(a1 + 176);
            v241 = 257;
            v128 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v126, v127, (uint64_t)&v238);
            v237 = 257;
            llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v122, v128, (const llvm::Twine *)v236);
            v241 = 257;
            llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v117, (const llvm::Twine *)&v238);
            v237 = 257;
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
          }
          if (!v156)
          {
            v129 = v160;
            goto LABEL_166;
          }
          v241 = 257;
          InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v163, (const llvm::Twine *)&v238);
          v129 = v160;
          if (v164 != -1)
            goto LABEL_166;
          v201 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
          v130 = *(_DWORD *)(a1 + 104);
          v203 = v130;
          v233 = v201;
          v234 = v202;
          if (v202)
          {
            llvm::MetadataTracking::track();
            v130 = v203;
          }
          v235 = v130;
          AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v233, a1 + 8);
          if (v234)
            llvm::MetadataTracking::untrack();
          if (*(_QWORD *)(a1 + v154))
            strlen(*(const char **)(a1 + v154));
          v132 = AGCLLVMBuilder::getOrInsertFunction<>();
          if (*(_QWORD *)(a1 + v153))
            strlen(*(const char **)(a1 + v153));
          v133 = AGCLLVMBuilder::getOrInsertFunction<>();
          v241 = 257;
          v134 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)v132 + 16), v132, 0, 0, (uint64_t)&v238);
          v135 = (llvm::Value *)llvm::ConstantInt::get();
          v237 = 257;
          Add = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v134, v135, (const llvm::Twine *)v236);
          v232 = 257;
          v137 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)v133 + 16), v133, 0, 0, (uint64_t)&v229);
          v228 = 257;
          v138 = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 32, Add, (uint64_t)v137, (uint64_t)&v225);
          if (v168 == -1)
          {
            v219 = *(_OWORD *)(a1 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
            v221 = *(_DWORD *)(a1 + 104);
            v139 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 1720))(a1, &v219, v138);
            if (v220)
              goto LABEL_178;
          }
          else
          {
            v222 = *(_OWORD *)(a1 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
            v224 = *(_DWORD *)(a1 + 104);
            v139 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 1680))(a1, &v222, v138);
            if (v223)
LABEL_178:
              llvm::MetadataTracking::untrack();
          }
          v140 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.agx2.ft1", 13, *(_QWORD *)(a1 + 200), *(_QWORD *)(a1 + 200));
          v141 = *(_QWORD *)(a1 + 200);
          v241 = 257;
          *(_QWORD *)&v229 = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v139, v141, (uint64_t)&v238);
          v237 = 257;
          v142 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v140 + 24), v140, (uint64_t)&v229, 1, (uint64_t)v236);
          if (v202)
            llvm::MetadataTracking::untrack();
          if (v168 == -1)
          {
            v195 = *(_OWORD *)(a1 + 56);
            llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
            v197 = *(_DWORD *)(a1 + 104);
            v145 = *(_QWORD *)(a1 + 192);
            v237 = 257;
            v146 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v142, v145, (uint64_t)v236);
            InsertElement = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, uint64_t))(*(_QWORD *)a1 + 1688))(a1, &v195, InsertElement, v146);
            if (!v196)
              goto LABEL_166;
LABEL_185:
            llvm::MetadataTracking::untrack();
            goto LABEL_166;
          }
          v198 = *(_OWORD *)(a1 + 56);
          llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
          v200 = *(_DWORD *)(a1 + 104);
          v143 = *(_QWORD *)(a1 + 192);
          v241 = 257;
          v144 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v142, v143, (uint64_t)&v238);
          InsertElement = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadBroadcast((char **)a1, (uint64_t)&v198, (llvm::Type **)InsertElement, v144);
          if (v199)
            goto LABEL_185;
LABEL_166:
          if (v187)
            llvm::MetadataTracking::untrack();
          if (v161 == 18)
          {
            v241 = 257;
            v131 = (llvm::Value *)llvm::ConstantInt::get();
            InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v158, InsertElement, v131, (const llvm::Twine *)&v238);
          }
          v100 = (llvm::Value *)((char *)v129 + 1);
          v99 = (uint64_t)InsertElement;
          if (v100 == (llvm::Value *)v98)
          {
LABEL_187:
            llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 8), v150);
            FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v150);
            llvm::IRBuilderBase::SetInsertPoint((uint64_t)v8, (uint64_t)v150, FirstInsertionPt);
            v241 = 257;
            PHI = llvm::IRBuilderBase::CreatePHI(v8, v149, 2, (const llvm::Twine *)&v238);
            llvm::PHINode::addIncoming(PHI, v148, v151);
            llvm::PHINode::addIncoming(PHI, InsertElement, v152);
            if (v180)
              goto LABEL_188;
            goto LABEL_189;
          }
        }
      }
    }
  }
  v172 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v9 = *(_DWORD *)(a1 + 104);
  v174 = v9;
  v10 = v178;
  v225 = v172;
  v226 = v173;
  if (v173)
  {
    llvm::MetadataTracking::track();
    v9 = v174;
  }
  v227 = v9;
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v225, a1 + 8);
  if (v226)
    llvm::MetadataTracking::untrack();
  v11 = *(llvm::Type **)a5;
  if ((*(_DWORD *)(*(_QWORD *)a5 + 8) & 0xFE) != 0x12 || **((_QWORD **)v11 + 2) == *(_QWORD *)(a1 + 200))
  {
    v238 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v240 = *(_DWORD *)(a1 + 104);
    PHI = AGCLLVMGen5TargetLowerer::buildReduceCore((_QWORD *)a1, &v238, v10, *((uint64_t *)&v10 + 1), a5);
    if (v239)
      llvm::MetadataTracking::untrack();
  }
  else
  {
    v12 = *((unsigned int *)v11 + 8);
    llvm::FixedVectorType::get();
    PHI = (llvm::Value *)llvm::UndefValue::get();
    v14 = llvm::Type::getScalarSizeInBits(v11);
    if (v14 == 8)
    {
      v15 = 200;
      if ((_DWORD)v12 == 2)
        v15 = 192;
      v16 = *(_QWORD *)(a1 + v15);
      v165 = (llvm::Value *)llvm::FixedVectorType::get();
      if ((_DWORD)v12 == 3)
        a5 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, a5, 4);
      v229 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v231 = *(_DWORD *)(a1 + 104);
      v241 = 257;
      v17 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a5, v16, (uint64_t)&v238);
      v18 = AGCLLVMGen5TargetLowerer::buildReduceCore((_QWORD *)a1, &v229, v10, *((uint64_t *)&v10 + 1), v17);
      if (v230)
        llvm::MetadataTracking::untrack();
      v241 = 257;
      v19 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v18, (uint64_t)v165, (uint64_t)&v238);
      if ((_DWORD)v12)
      {
        v20 = (llvm::Value *)v19;
        for (j = 0; j != v12; ++j)
        {
          v241 = 257;
          v22 = (llvm::Value *)llvm::ConstantInt::get();
          Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v20, v22, (const llvm::Twine *)&v238);
          v237 = 257;
          v24 = (llvm::Value *)llvm::ConstantInt::get();
          PHI = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), PHI, Element, v24, (const llvm::Twine *)v236);
        }
      }
    }
    else if ((_DWORD)v12 == 3 || v14 != 16)
    {
      if ((_DWORD)v12 == 3 && v14 == 16)
      {
        v36 = AGCLLVMBuilder::extendVector((AGCLLVMBuilder *)a1, a5, 4);
        v37 = *(_QWORD *)(a1 + 248);
        v241 = 257;
        v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v36, v37, (uint64_t)&v238);
        v241 = 257;
        v39 = (llvm::Value *)llvm::ConstantInt::get();
        v40 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v38, v39, (const llvm::Twine *)&v238);
        v233 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
        v235 = *(_DWORD *)(a1 + 104);
        v41 = AGCLLVMGen5TargetLowerer::buildReduceCore((_QWORD *)a1, &v233, v10, *((uint64_t *)&v10 + 1), v40);
        if (v234)
          llvm::MetadataTracking::untrack();
        v241 = 257;
        v42 = (llvm::Value *)llvm::ConstantInt::get();
        v43 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v38, v42, (const llvm::Twine *)&v238);
        v44 = *(_QWORD *)(a1 + 240);
        v237 = 257;
        v45 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v43, v44, (uint64_t)v236);
        v232 = 257;
        v46 = (llvm::Value *)llvm::ConstantInt::get();
        v47 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v45, v46, (const llvm::Twine *)&v229);
        v229 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
        v231 = *(_DWORD *)(a1 + 104);
        v48 = AGCLLVMGen5TargetLowerer::buildReduceCore((_QWORD *)a1, &v229, v10, *((uint64_t *)&v10 + 1), v47);
        if (v230)
          llvm::MetadataTracking::untrack();
        v49 = *(_QWORD *)(a1 + 240);
        v241 = 257;
        v50 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v41, v49, (uint64_t)&v238);
        v237 = 257;
        v51 = (llvm::Value *)llvm::ConstantInt::get();
        v52 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v50, v51, (const llvm::Twine *)v236);
        v53 = *(_QWORD *)(a1 + 240);
        v241 = 257;
        v54 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v41, v53, (uint64_t)&v238);
        v237 = 257;
        v55 = (llvm::Value *)llvm::ConstantInt::get();
        v56 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v54, v55, (const llvm::Twine *)v236);
        v241 = 257;
        v57 = (llvm::Value *)llvm::ConstantInt::get();
        v58 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), PHI, v52, v57, (const llvm::Twine *)&v238);
        v241 = 257;
        v59 = (llvm::Value *)llvm::ConstantInt::get();
        v60 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v58, v56, v59, (const llvm::Twine *)&v238);
        v241 = 257;
        v61 = (llvm::Value *)llvm::ConstantInt::get();
        PHI = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v60, v48, v61, (const llvm::Twine *)&v238);
      }
    }
    else
    {
      v26 = 248;
      if ((_DWORD)v12 == 2)
        v26 = 200;
      v27 = *(_QWORD *)(a1 + v26);
      v166 = (llvm::Value *)llvm::FixedVectorType::get();
      v229 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v231 = *(_DWORD *)(a1 + 104);
      v241 = 257;
      v28 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a5, v27, (uint64_t)&v238);
      v29 = AGCLLVMGen5TargetLowerer::buildReduceCore((_QWORD *)a1, &v229, v10, *((uint64_t *)&v10 + 1), v28);
      if (v230)
        llvm::MetadataTracking::untrack();
      v241 = 257;
      v30 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v29, (uint64_t)v166, (uint64_t)&v238);
      if ((_DWORD)v12)
      {
        v31 = (llvm::Value *)v30;
        for (k = 0; k != v12; ++k)
        {
          v241 = 257;
          v33 = (llvm::Value *)llvm::ConstantInt::get();
          v34 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v31, v33, (const llvm::Twine *)&v238);
          v237 = 257;
          v35 = (llvm::Value *)llvm::ConstantInt::get();
          PHI = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), PHI, v34, v35, (const llvm::Twine *)v236);
        }
      }
    }
  }
  if (v173)
LABEL_28:
    llvm::MetadataTracking::untrack();
  return PHI;
}

llvm::Value *AGCLLVMGen5TargetLowerer::buildReduceCore(_QWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4, llvm::Value *a5)
{
  llvm::IRBuilderBase *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const std::string::value_type *v16;
  const std::string::value_type *p_p;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type size;
  uint64_t v21;
  unsigned int v22;
  llvm::Value *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Value *Cast;
  llvm::Value *FMul;
  uint64_t Add;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Value *v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  __int16 v42;
  std::string v43;
  void *__p;
  std::string::size_type v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  __int16 v53;
  llvm::Value *v54[2];
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v50 = a3;
  v51 = a4;
  v47 = *a2;
  v48 = *((_QWORD *)a2 + 2);
  if (v48)
    llvm::MetadataTracking::track();
  v49 = *((_DWORD *)a2 + 6);
  v8 = (llvm::IRBuilderBase *)(a1 + 1);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v47, (uint64_t)(a1 + 1));
  if (v48)
    llvm::MetadataTracking::untrack();
  v9 = *(_QWORD *)a5;
  v10 = *(_QWORD *)a5;
  if ((*(_DWORD *)(*(_QWORD *)a5 + 8) & 0xFE) == 0x12)
    v10 = **(_QWORD **)(v9 + 16);
  v11 = llvm::StringRef::find();
  llvm::StringRef::find();
  v40 = llvm::StringRef::find();
  v39 = llvm::StringRef::find();
  v36 = llvm::StringRef::find();
  v12 = llvm::StringRef::find() != -1 && (llvm::StringRef::find() != -1 || llvm::StringRef::find() != -1);
  __p = 0;
  v45 = 0;
  v46 = 0;
  if (llvm::StringRef::find() == -1)
  {
    if (llvm::StringRef::find() == -1)
    {
      if (llvm::StringRef::find() == -1)
      {
        if (llvm::StringRef::find() == -1)
        {
          if (llvm::StringRef::find() == -1)
          {
            if (llvm::StringRef::find() == -1)
            {
              if (llvm::StringRef::find() == -1)
                goto LABEL_27;
              v13 = "Xor";
            }
            else
            {
              v13 = "Or";
            }
          }
          else
          {
            v13 = "And";
          }
        }
        else
        {
          v13 = "Min";
        }
      }
      else
      {
        v13 = "Max";
      }
    }
    else
    {
      v13 = "Add";
    }
  }
  else
  {
    v13 = "Mul";
  }
  MEMORY[0x1CAA2D494](&__p, v13);
LABEL_27:
  v14 = v10;
  if (*(_BYTE *)(v10 + 8) == 13)
    v14 = a1[25];
  v15 = 343;
  if (v11 == -1)
    v15 = 344;
  std::string::basic_string[abi:nn180100]<0>(&v43, (char *)a1[v15]);
  if (v12)
  {
    v16 = "u.";
  }
  else if (v14 == a1[21])
  {
    v16 = "f.";
  }
  else if (v14 == a1[19])
  {
    v16 = "f16.";
  }
  else
  {
    v16 = "i.";
  }
  std::string::append(&v43, v16);
  if (v46 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v46 >= 0)
    v18 = HIBYTE(v46);
  else
    v18 = v45;
  std::string::append(&v43, p_p, v18);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v43;
  else
    v19 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  else
    size = v43.__r_.__value_.__l.__size_;
  v21 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)v19, size, v14, a1[24], v14);
  *(_OWORD *)v54 = 0u;
  v55 = 0u;
  v22 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a1, a5, v54);
  v38 = *(_DWORD *)(v9 + 8) & 0xFE;
  if (v38 == 18)
  {
    llvm::FixedVectorType::get();
    v23 = (llvm::Value *)llvm::UndefValue::get();
  }
  else
  {
    v23 = 0;
  }
  v37 = llvm::ConstantInt::get();
  if (v22)
  {
    v24 = 0;
    v25 = v22;
    do
    {
      if (*(_BYTE *)(v10 + 8) == 13)
      {
        v26 = v54[v24];
        v27 = a1[25];
        v42 = 257;
        if (v36 == -1)
          v28 = 39;
        else
          v28 = 40;
        Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), v28, (uint64_t)v26, v27, (uint64_t)v41);
        v54[v24] = Cast;
      }
      else
      {
        Cast = v54[v24];
      }
      v52[0] = v37;
      v52[1] = Cast;
      v42 = 257;
      FMul = llvm::IRBuilderBase::CreateCall((uint64_t)v8, *(_QWORD *)(v21 + 24), v21, (uint64_t)v52, 2, (uint64_t)v41);
      if (*(_BYTE *)(v10 + 8) == 13)
      {
        v42 = 257;
        FMul = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 38, (uint64_t)FMul, v10, (uint64_t)v41);
      }
      if (v40 != -1)
      {
        if (*(unsigned __int8 *)(v10 + 8) > 6u)
        {
          v42 = 257;
          v32 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v8, 38, (uint64_t)Cast, v10, (uint64_t)v41);
          v53 = 257;
          Add = llvm::IRBuilderBase::CreateAdd(v8, FMul, v32, (const llvm::Twine *)v52);
        }
        else
        {
          v42 = 257;
          Add = llvm::IRBuilderBase::CreateFAdd((uint64_t)v8, (uint64_t)FMul, (uint64_t)Cast, (uint64_t)v41);
        }
        FMul = (llvm::Value *)Add;
      }
      if (v39 != -1)
      {
        v33 = v54[v24];
        v42 = 257;
        FMul = (llvm::Value *)llvm::IRBuilderBase::CreateFMul((uint64_t)v8, (uint64_t)FMul, (uint64_t)v33, (uint64_t)v41);
      }
      if (v38 == 18)
      {
        v42 = 257;
        v34 = (llvm::Value *)llvm::ConstantInt::get();
        FMul = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v8, v23, FMul, v34, (const llvm::Twine *)v41);
      }
      ++v24;
      v23 = FMul;
    }
    while (v25 != v24);
  }
  else
  {
    FMul = v23;
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  return FMul;
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, unsigned int a2)
{
  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40)
    llvm::APInt::initSlowCase(this);
  else
    *(_QWORD *)this = a2 != 0;
  return this;
}

uint64_t AGCLLVMGen5TargetLowerer::buildShuffleAndFillEmulation(uint64_t a1, __int128 *a2, _QWORD *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v9;
  llvm::CmpInst **v10;
  llvm::Value *v11;
  uint64_t Select;
  llvm::Value *v13;
  llvm::Value *Sub;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::Value *v17;
  uint64_t v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value *v21;
  uint64_t Add;
  llvm::Value *v23;
  llvm::Value *Not;
  llvm::CmpInst **v25;
  uint64_t v26;
  llvm::Value *v27;
  llvm::Value *v28;
  uint64_t v29;
  llvm::Value *ActiveThreadsMask;
  uint64_t v31;
  llvm::Value *Cast;
  llvm::Value *LShr;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::Type *v37;
  uint64_t v38;
  uint64_t i;
  _QWORD *v40;
  uint64_t v41;
  llvm::Constant **v43;
  llvm::Value *v44;
  _BYTE v47[32];
  __int16 v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  _BYTE v52[32];
  __int16 v53;
  _BYTE v54[32];
  __int16 v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  _BYTE v68[32];
  __int16 v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t (**v73)();
  __int128 v74;
  uint64_t (***v75)();
  uint64_t (**v76)();
  __int128 v77;
  uint64_t (***v78)();
  void *v79;
  __int128 v80;
  void **v81;
  void *v82;
  __int128 v83;
  _QWORD v84[4];

  v84[1] = *MEMORY[0x1E0C80C00];
  v70 = *a2;
  v71 = *((_QWORD *)a2 + 2);
  if (v71)
    llvm::MetadataTracking::track();
  v72 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v70, a1 + 8);
  if (v71)
    llvm::MetadataTracking::untrack();
  v9 = a3[1];
  v10 = (llvm::CmpInst **)a3[2];
  v11 = (llvm::Value *)a3[3];
  LOWORD(v76) = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 35, v10, (uint64_t)v11, (uint64_t)&v73);
  LOWORD(v76) = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v13 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v76) = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v11, v13, (const llvm::Twine *)&v73);
  LOWORD(v76) = 257;
  v15 = (llvm::Value *)v10;
  v16 = Sub;
  v17 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v15, Sub, (const llvm::Twine *)&v73);
  v74 = xmmword_1C3E385C0;
  v73 = &off_1E7ECCFB0;
  v75 = &v73;
  v76 = &off_1E7ECCFB0;
  v77 = xmmword_1C3E385D0;
  v80 = xmmword_1C3E385E0;
  v78 = &v76;
  v79 = &unk_1E7ECCFF8;
  v81 = &v79;
  v82 = &unk_1E7ECCFF8;
  v83 = xmmword_1C3E385F0;
  v84[0] = &v82;
  v69 = 257;
  v44 = v17;
  v18 = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v11, v17, (const llvm::Twine *)v68);
  v65 = *a2;
  v66 = *((_QWORD *)a2 + 2);
  if (v66)
    llvm::MetadataTracking::track();
  v67 = *((_DWORD *)a2 + 6);
  v43 = (llvm::Constant **)std::function<llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()((uint64_t)(&(&v73)[8 * (unint64_t)a6])[4 * a5 + 3], a1, (uint64_t)&v65, Select, (uint64_t)v44);
  if (v66)
    llvm::MetadataTracking::untrack();
  v62 = *a2;
  v63 = *((_QWORD *)a2 + 2);
  v19 = v16;
  if (v63)
    llvm::MetadataTracking::track();
  v64 = *((_DWORD *)a2 + 6);
  std::function<llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()((uint64_t)(&(&v73)[8 * (unint64_t)a6])[4 * (a5 ^ 1) + 3], a1, (uint64_t)&v62, v9, v18);
  if (v63)
    llvm::MetadataTracking::untrack();
  if ((a6 & 1) == 0)
  {
    v56 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v58 = *(_DWORD *)(a1 + 104);
    v20 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 1536))(a1, &v56, *(_QWORD *)(a1 + 192));
    if (!v57)
      goto LABEL_16;
    goto LABEL_15;
  }
  v59 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v61 = *(_DWORD *)(a1 + 104);
  v20 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v59, *(_QWORD *)(a1 + 192));
  if (v60)
LABEL_15:
    llvm::MetadataTracking::untrack();
LABEL_16:
  v69 = 257;
  v21 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v20, v16, (const llvm::Twine *)v68);
  v69 = 257;
  if (a5)
    Add = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v21, v44, (const llvm::Twine *)v68);
  else
    Add = llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v21, v44, (const llvm::Twine *)v68);
  v23 = (llvm::Value *)Add;
  v69 = 257;
  Not = (llvm::Value *)llvm::IRBuilderBase::CreateNot((llvm::IRBuilderBase *)(a1 + 8), v19, (const llvm::Twine *)v68);
  v69 = 257;
  v25 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v23, Not, (const llvm::Twine *)v68);
  v26 = llvm::ConstantInt::get();
  v55 = 257;
  llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 33, v25, v26, (uint64_t)v54);
  v69 = 257;
  v27 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v20, Not, (const llvm::Twine *)v68);
  v55 = 257;
  v28 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v23, v19, (const llvm::Twine *)v54);
  v53 = 257;
  v29 = llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 8), v27, v28, (const llvm::Twine *)v52);
  v49 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v51 = *(_DWORD *)(a1 + 104);
  ActiveThreadsMask = (llvm::Value *)AGCLLVMGen5TargetLowerer::buildGetActiveThreadsMask(a1, &v49, a6);
  if (v50)
    llvm::MetadataTracking::untrack();
  v31 = *(_QWORD *)ActiveThreadsMask;
  v69 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v29, v31, (uint64_t)v68);
  v55 = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), ActiveThreadsMask, Cast, (const llvm::Twine *)v54);
  v34 = (llvm::Value *)llvm::ConstantInt::get();
  v53 = 257;
  v35 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), LShr, v34, (const llvm::Twine *)v52);
  v36 = *(_QWORD *)(a1 + 176);
  v48 = 257;
  llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v35, v36, (uint64_t)v47);
  v69 = 257;
  llvm::IRBuilderBase::CreateSelect();
  llvm::Constant::getNullValue(*v43, v37);
  v55 = 257;
  v38 = llvm::IRBuilderBase::CreateSelect();
  for (i = 0; i != -16; i -= 4)
  {
    v40 = (_QWORD *)v84[i];
    if ((void **)((char *)&v82 + i * 8) == v40)
    {
      v40 = (void **)((char *)&v82 + i * 8);
      v41 = 4;
    }
    else
    {
      if (!v40)
        continue;
      v41 = 5;
    }
    (*(void (**)(void))(*v40 + 8 * v41))();
  }
  return v38;
}

uint64_t std::function<llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a5;
  v7 = a4;
  if (!a1)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x1C3DB28A0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, a3, &v7, &v6);
}

void std::__function::__func<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_1E7ECCFF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E7ECCFF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen3TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer &,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, __int128 *, _QWORD, _QWORD);
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;

  v9 = *(uint64_t (**)(_QWORD *, __int128 *, _QWORD, _QWORD))(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, __int128 *, _QWORD, _QWORD))(*v10 + v9);
  v14 = *a3;
  v11 = a3 + 1;
  v15 = *((_QWORD *)a3 + 2);
  if (v15)
  {
    llvm::MetadataTracking::retrack();
    *v11 = 0;
  }
  v16 = *((_DWORD *)a3 + 6);
  v12 = v9(v10, &v14, *a4, *a5);
  if (v15)
    llvm::MetadataTracking::untrack();
  return v12;
}

void std::__function::__func<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer&,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

__n128 std::__function::__func<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer&,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E7ECCFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer&,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7ECCFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *),std::allocator<llvm::Value * (AGCLLVMGen5TargetLowerer::*)(AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>,llvm::Value * ()(AGCLLVMGen5TargetLowerer&,AGCLLVMBuilder::InsertPoint,llvm::Value *,llvm::Value *)>::operator()(uint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, __int128 *, _QWORD, _QWORD);
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  int v16;

  v9 = *(uint64_t (**)(_QWORD *, __int128 *, _QWORD, _QWORD))(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_QWORD *)(a2 + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *, __int128 *, _QWORD, _QWORD))(*v10 + v9);
  v14 = *a3;
  v11 = a3 + 1;
  v15 = *((_QWORD *)a3 + 2);
  if (v15)
  {
    llvm::MetadataTracking::retrack();
    *v11 = 0;
  }
  v16 = *((_DWORD *)a3 + 6);
  v12 = v9(v10, &v14, *a4, *a5);
  if (v15)
    llvm::MetadataTracking::untrack();
  return v12;
}

char *AGCLLVMGen6TargetConfig::createMetalComputeShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x8_t v12;
  llvm::NamedMDNode *NamedMetadata;
  unsigned int i;
  llvm::Module *v15;
  uint64_t v16;
  llvm::NamedMDNode *v17;
  unsigned int j;
  uint64_t Operand;
  unsigned __int8 *v20;
  llvm::Function *v21;
  BOOL v22;
  llvm::NamedMDNode *v23;
  llvm::Module *v24;
  void *v26[2];
  char v27;
  uint64_t v28;
  llvm::Module *v29[4];
  __int16 v30;
  __int32 v31;
  void *__p[2];
  char v33;

  (*(void (**)(uint64_t, llvm::LLVMContext **, uint64_t))(*(_QWORD *)a1 + 240))(a1, a3, a4);
  v7 = (_QWORD *)operator new();
  AGCLLVMUserComputeKernelG10::AGCLLVMUserComputeKernelG10((uint64_t)v7, a2, a3, a4);
  v29[0] = (llvm::Module *)"air.intersection";
  v30 = 259;
  if (!llvm::Module::getNamedMetadata((llvm::Module *)a3, (const llvm::Twine *)v29))
    return (char *)v7 + *(_QWORD *)(*v7 - 24);
  v8 = operator new();
  *(_QWORD *)(v8 + 32) = v8 + 48;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 40) = 0x400000000;
  *(_QWORD *)(v8 + 256) = 0;
  *(_QWORD *)(v8 + 264) = 0;
  *(_QWORD *)(v8 + 248) = 0;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_QWORD *)(v8 + 240) = v8 + 248;
  *(_QWORD *)v8 = &off_1E7ECDD68;
  *(_QWORD *)(v8 + 8) = 0;
  v9 = (uint64_t)v7 + *(_QWORD *)(*v7 - 24);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v9 + 40))(__p, v9);
  AGCLLVMObjectArray::addNewMainObject(v8, v9, (uint64_t)__p);
  if (v33 < 0)
    operator delete(__p[0]);
  v10.i64[0] = *(_QWORD *)(a4 + 12);
  v11 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v10, v10), (uint32x4_t)xmmword_1C3E38600), (int8x16_t)xmmword_1C3E38610);
  v12 = vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v10.i8, (uint32x2_t)0x900000001), (int8x8_t)0x80000000000F0);
  *(int8x8_t *)v11.i8 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  v31 = v11.i32[0] | v12.i32[0] | v11.i32[1] | v12.i32[1];
  v29[0] = (llvm::Module *)"air.intersection";
  v30 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((llvm::Module *)a3, (const llvm::Twine *)v29);
  for (i = 0; i < llvm::NamedMDNode::getNumOperands(NamedMetadata); ++i)
  {
    llvm::CloneModule();
    v15 = v29[0];
    v29[0] = (llvm::Module *)"air.visible";
    v30 = 259;
    v16 = llvm::Module::getNamedMetadata(v15, (const llvm::Twine *)v29);
    if (v16)
    {
      v17 = (llvm::NamedMDNode *)v16;
      for (j = 0; j < llvm::NamedMDNode::getNumOperands(v17); ++j)
      {
        Operand = llvm::NamedMDNode::getOperand(v17);
        v20 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8));
        if (v20 && *v20 - 1 <= 1)
        {
          v21 = (llvm::Function *)*((_QWORD *)v20 + 16);
          if (v21)
            v22 = *((_BYTE *)v21 + 16) == 0;
          else
            v22 = 0;
          if (v22)
          {
            llvm::Function::dropAllReferences(v21);
            llvm::GlobalValue::setLinkage((uint64_t)v21, 0);
          }
        }
      }
      llvm::NamedMDNode::eraseFromParent(v17);
    }
    v29[0] = (llvm::Module *)"air.intersection";
    v30 = 259;
    v23 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v15, (const llvm::Twine *)v29);
    v28 = llvm::NamedMDNode::getOperand(v23);
    if (v28)
      llvm::MetadataTracking::track();
    llvm::NamedMDNode::clearOperands(v23);
    llvm::NamedMDNode::addOperand();
    v24 = (llvm::Module *)(*(uint64_t (**)(_QWORD *, AGCLLVMCtx *, llvm::Module *, __int32 *))(**((_QWORD **)a2 + 4) + 208))(*((_QWORD **)a2 + 4), a2, v15, &v31);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v24 + 40))(v26);
    v29[0] = v24;
    llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>((void **)(v8 + 32), v29, (uint64_t)v26);
    if (v27 < 0)
      operator delete(v26[0]);
    if (v28)
      llvm::MetadataTracking::untrack();
  }
  return (char *)v8;
}

uint64_t AGCLLVMGen6TargetConfig::createMetalTileShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;

  v11 = operator new();
  v12 = (_QWORD *)AGCLLVMUserTileShader::AGCLLVMUserTileShader(v11, a2, a3, a4, a5, a6);
  return newObjectArrayWithIntersectionShadersIfNeeded<_AGCFragmentContextStateAGP>(v12, (uint64_t)a2, (llvm::Module *)a3, *(_QWORD *)(a4 + 16));
}

char *AGCLLVMGen6TargetConfig::createMetalVertexShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::NamedMDNode *NamedMetadata;
  unsigned int i;
  llvm::Module *v16;
  uint64_t v17;
  llvm::NamedMDNode *v18;
  unsigned int j;
  uint64_t Operand;
  unsigned __int8 *v21;
  llvm::Function *v22;
  BOOL v23;
  llvm::NamedMDNode *v24;
  llvm::Module *v25;
  void *v27[2];
  char v28;
  uint64_t v29;
  llvm::Module *v30[4];
  __int16 v31;
  int v32;
  void *__p[2];
  char v34;

  v11 = (_QWORD *)operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 1261), a2, *a3);
  AGCLLVMAGPVertexShader::AGCLLVMAGPVertexShader((uint64_t)v11, (uint64_t *)off_1E7E726E0, (uint64_t)a3, a4, a5, a6);
  *v11 = &off_1E7E72280;
  v11[1261] = &unk_1E7E725D8;
  v11[1265] = &unk_1E7E726C8;
  v30[0] = (llvm::Module *)"air.intersection";
  v31 = 259;
  if (!llvm::Module::getNamedMetadata((llvm::Module *)a3, (const llvm::Twine *)v30))
    return (char *)v11 + *(_QWORD *)(*v11 - 24);
  v12 = operator new();
  *(_QWORD *)(v12 + 32) = v12 + 48;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 40) = 0x400000000;
  *(_QWORD *)(v12 + 256) = 0;
  *(_QWORD *)(v12 + 264) = 0;
  *(_QWORD *)(v12 + 248) = 0;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_QWORD *)(v12 + 240) = v12 + 248;
  *(_QWORD *)v12 = &off_1E7ECDD68;
  *(_QWORD *)(v12 + 8) = 0;
  v13 = (uint64_t)v11 + *(_QWORD *)(*v11 - 24);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v13 + 40))(__p, v13);
  AGCLLVMObjectArray::addNewMainObject(v12, v13, (uint64_t)__p);
  if (v34 < 0)
    operator delete(__p[0]);
  v32 = (2 * *(_DWORD *)(a4 + 12)) & 0xF0 | (4 * (*(_BYTE *)(a4 + 12) & 3)) | (((*(_DWORD *)(a4 + 12) >> 8) & 1) << 15) | (*(_QWORD *)(a4 + 16) >> 24) & 0x20000 | (*(_QWORD *)(a4 + 16) >> 17) & 0x100 | (*(_QWORD *)(a4 + 16) >> 21) & 0x80000;
  v30[0] = (llvm::Module *)"air.intersection";
  v31 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((llvm::Module *)a3, (const llvm::Twine *)v30);
  for (i = 0; i < llvm::NamedMDNode::getNumOperands(NamedMetadata); ++i)
  {
    llvm::CloneModule();
    v16 = v30[0];
    v30[0] = (llvm::Module *)"air.visible";
    v31 = 259;
    v17 = llvm::Module::getNamedMetadata(v16, (const llvm::Twine *)v30);
    if (v17)
    {
      v18 = (llvm::NamedMDNode *)v17;
      for (j = 0; j < llvm::NamedMDNode::getNumOperands(v18); ++j)
      {
        Operand = llvm::NamedMDNode::getOperand(v18);
        v21 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8));
        if (v21 && *v21 - 1 <= 1)
        {
          v22 = (llvm::Function *)*((_QWORD *)v21 + 16);
          if (v22)
            v23 = *((_BYTE *)v22 + 16) == 0;
          else
            v23 = 0;
          if (v23)
          {
            llvm::Function::dropAllReferences(v22);
            llvm::GlobalValue::setLinkage((uint64_t)v22, 0);
          }
        }
      }
      llvm::NamedMDNode::eraseFromParent(v18);
    }
    v30[0] = (llvm::Module *)"air.intersection";
    v31 = 259;
    v24 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v16, (const llvm::Twine *)v30);
    v29 = llvm::NamedMDNode::getOperand(v24);
    if (v29)
      llvm::MetadataTracking::track();
    llvm::NamedMDNode::clearOperands(v24);
    llvm::NamedMDNode::addOperand();
    v25 = (llvm::Module *)(*(uint64_t (**)(_QWORD *, AGCLLVMCtx *, llvm::Module *, int *))(**((_QWORD **)a2 + 4) + 208))(*((_QWORD **)a2 + 4), a2, v16, &v32);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v25 + 40))(v27);
    v30[0] = v25;
    llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>((void **)(v12 + 32), v30, (uint64_t)v27);
    if (v28 < 0)
      operator delete(v27[0]);
    if (v29)
      llvm::MetadataTracking::untrack();
  }
  return (char *)v12;
}

uint64_t AGCLLVMGen6TargetConfig::createMetalObjectShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Operand;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  uint32x4_t v17;
  int8x16_t v18;
  llvm::NamedMDNode *NamedMetadata;
  unsigned int i;
  llvm::Module *v21;
  uint64_t v22;
  llvm::NamedMDNode *v23;
  unsigned int j;
  uint64_t v25;
  unsigned __int8 *v26;
  llvm::Function *v27;
  BOOL v28;
  llvm::NamedMDNode *v29;
  llvm::Module *v30;
  void *v32[2];
  char v33;
  uint64_t v34;
  llvm::Module *v35[4];
  __int16 v36;
  __int32 v37;
  void *__p[2];
  char v39;

  v7 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v7 + 4568), a2, *a3);
  AGCLLVMUserObjectShaderBase::AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v7, (AGCLLVMCtx *)off_1E7E6A958, (llvm::Module *)a3, "air.object");
  *(_QWORD *)v7 = &off_1E7E6A520;
  *(_QWORD *)(v7 + 4568) = &unk_1E7E6A858;
  *(_QWORD *)(v7 + 4600) = &unk_1E7E6A948;
  *(_QWORD *)(v7 + 4520) = a4;
  *(_QWORD *)(v7 + 4528) = 4;
  *(_QWORD *)(v7 + 4536) = 0;
  *(_QWORD *)(v7 + 4552) = 0;
  *(_QWORD *)(v7 + 4544) = 0;
  *(_DWORD *)(v7 + 4560) = 0;
  AGCLLVMUserShader::enableStatistics(v8, *(_DWORD *)(a4 + 12) & 1, (*(_DWORD *)(a4 + 12) >> 1) & 1);
  v9 = *(_QWORD *)(v7 + 4520);
  *(_BYTE *)(v7 + 18) = (*(_BYTE *)(v9 + 12) & 8) != 0;
  *(_BYTE *)(v7 + *(_QWORD *)(*(_QWORD *)v7 - 24) + 2760) = (*(_DWORD *)(v9 + 12) & 0x4000000) != 0;
  *(_QWORD *)(v7 + 3304) = *(_QWORD *)v9;
  *(_BYTE *)(v7 + 20) = (*(_BYTE *)(v9 + 12) & 4) != 0;
  *(_BYTE *)(v7 + 4384) = (*(_BYTE *)(v9 + 16) & 2) != 0;
  *(_BYTE *)(v7 + 4385) = (*(_BYTE *)(v9 + 16) & 4) != 0;
  *(_DWORD *)(v7 + 4376) = *(_DWORD *)(v9 + 24);
  *(_BYTE *)(v7 + 4405) = (*(_DWORD *)(v9 + 16) & 0x70) != 0;
  *(_BYTE *)(v7 + 3712) = *(_BYTE *)(v9 + 13) & 1;
  *(_BYTE *)(v7 + 3713) = (*(_DWORD *)(v9 + 12) & 0x200) != 0;
  Operand = llvm::NamedMDNode::getOperand(*(llvm::NamedMDNode **)(v7 + 64));
  LODWORD(v35[0]) = 3;
  if (*(_DWORD *)(Operand + 8) >= 4u)
  {
    v11 = Operand;
    do
    {
      v12 = parseMDUint3(v11, "air.max_mesh_work_groups", v35, (_DWORD *)(v7 + 4552));
      v13 = v35[0];
      if ((v12 & 1) == 0)
        v13 = ++LODWORD(v35[0]);
    }
    while (v13 < *(_DWORD *)(v11 + 8));
  }
  v35[0] = (llvm::Module *)"air.intersection";
  v36 = 259;
  if (!llvm::Module::getNamedMetadata((llvm::Module *)a3, (const llvm::Twine *)v35))
    return v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
  v14 = operator new();
  *(_QWORD *)(v14 + 32) = v14 + 48;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 40) = 0x400000000;
  *(_QWORD *)(v14 + 256) = 0;
  *(_QWORD *)(v14 + 264) = 0;
  *(_QWORD *)(v14 + 248) = 0;
  *(_OWORD *)(v14 + 176) = 0u;
  *(_OWORD *)(v14 + 192) = 0u;
  *(_OWORD *)(v14 + 208) = 0u;
  *(_OWORD *)(v14 + 224) = 0u;
  *(_QWORD *)(v14 + 240) = v14 + 248;
  *(_QWORD *)v14 = &off_1E7ECDD68;
  *(_QWORD *)(v14 + 8) = 0;
  v15 = v7 + *(_QWORD *)(*(_QWORD *)v7 - 24);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v15 + 40))(__p, v15);
  AGCLLVMObjectArray::addNewMainObject(v14, v15, (uint64_t)__p);
  if (v39 < 0)
    operator delete(__p[0]);
  v16.i64[0] = *(_QWORD *)(a4 + 12);
  v17 = (uint32x4_t)vzip1q_s32(v16, v16);
  v17.i32[2] = v16.i32[0];
  v18 = vandq_s8((int8x16_t)vshlq_u32(v17, (uint32x4_t)xmmword_1C3E38620), (int8x16_t)xmmword_1C3E38630);
  *(int8x8_t *)v18.i8 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
  v37 = v18.i32[0] | v18.i32[1];
  v35[0] = (llvm::Module *)"air.intersection";
  v36 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata((llvm::Module *)a3, (const llvm::Twine *)v35);
  for (i = 0; i < llvm::NamedMDNode::getNumOperands(NamedMetadata); ++i)
  {
    llvm::CloneModule();
    v21 = v35[0];
    v35[0] = (llvm::Module *)"air.visible";
    v36 = 259;
    v22 = llvm::Module::getNamedMetadata(v21, (const llvm::Twine *)v35);
    if (v22)
    {
      v23 = (llvm::NamedMDNode *)v22;
      for (j = 0; j < llvm::NamedMDNode::getNumOperands(v23); ++j)
      {
        v25 = llvm::NamedMDNode::getOperand(v23);
        v26 = *(unsigned __int8 **)(v25 - 8 * *(unsigned int *)(v25 + 8));
        if (v26 && *v26 - 1 <= 1)
        {
          v27 = (llvm::Function *)*((_QWORD *)v26 + 16);
          if (v27)
            v28 = *((_BYTE *)v27 + 16) == 0;
          else
            v28 = 0;
          if (v28)
          {
            llvm::Function::dropAllReferences(v27);
            llvm::GlobalValue::setLinkage((uint64_t)v27, 0);
          }
        }
      }
      llvm::NamedMDNode::eraseFromParent(v23);
    }
    v35[0] = (llvm::Module *)"air.intersection";
    v36 = 259;
    v29 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v21, (const llvm::Twine *)v35);
    v34 = llvm::NamedMDNode::getOperand(v29);
    if (v34)
      llvm::MetadataTracking::track();
    llvm::NamedMDNode::clearOperands(v29);
    llvm::NamedMDNode::addOperand();
    v30 = (llvm::Module *)(*(uint64_t (**)(_QWORD *, AGCLLVMCtx *, llvm::Module *, __int32 *))(**((_QWORD **)a2 + 4) + 208))(*((_QWORD **)a2 + 4), a2, v21, &v37);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v30 + 40))(v32);
    v35[0] = v30;
    llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>((void **)(v14 + 32), v35, (uint64_t)v32);
    if (v33 < 0)
      operator delete(v32[0]);
    if (v34)
      llvm::MetadataTracking::untrack();
  }
  return v14;
}

uint64_t AGCLLVMGen6TargetConfig::createPassThroughObjectShader(AGCLLVMGen6TargetConfig *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, char a4, int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Value *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Type **GlobalBufferBinding;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Type *v29;
  llvm::Value *AlignedLoad;
  uint64_t v31;
  llvm::Type *v32;
  llvm::Type **GEP;
  uint64_t v34;
  llvm::Value *v35;
  llvm::Type *v36;
  llvm::Type **v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Type **v41;
  llvm::Type *v42;
  llvm::Value *PointerCast;
  uint64_t v44;
  llvm::Type *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  llvm::Type *v50;
  uint64_t v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Type **v54;
  llvm::Type *v55;
  llvm::Value *v56;
  uint64_t i;
  uint64_t *v58;
  llvm::Type **v59;
  uint64_t v60;
  llvm::Type *v61;
  llvm::Value *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  __int128 v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  __int128 v80;
  uint64_t v81;
  int v82;
  __int16 v83;
  _QWORD v84[4];
  __int16 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v11 = operator new();
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 112), a2, a3);
  AGCLLVMDriverShader::AGCLLVMDriverShader((uint64_t *)v11, (uint64_t *)off_1E7E6AC08);
  *(_QWORD *)v11 = off_1E7E6A9C8;
  *(_QWORD *)(v11 + 112) = &unk_1E7E6AB08;
  *(_QWORD *)(v11 + 144) = &unk_1E7E6ABF8;
  *(_OWORD *)(v11 + 72) = xmmword_1C3E38640;
  *(_QWORD *)(v11 + 88) = 0x100000000;
  *(_BYTE *)(v11 + 96) = a4;
  *(_BYTE *)(v11 + 97) = a5;
  *(_QWORD *)(v11 + 100) = 0x100000003;
  *(_DWORD *)(v11 + 108) = 1;
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  *(_WORD *)(v12 + 18) = *(_WORD *)(v12 + 18) & 0xC00F | 0x6A0;
  *(_QWORD *)&v80 = "entry";
  v83 = 259;
  operator new();
  v13 = llvm::BasicBlock::BasicBlock();
  v14 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
  *(_QWORD *)(v14 + 88) = v13;
  *(_QWORD *)(v14 + 96) = v13 + 40;
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 - 24) + v11 + 400);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 680))(v15);
  v17 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
  v77 = *(_OWORD *)(v17 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v17 + 40));
  v79 = *(_DWORD *)(v17 + 136);
  v18 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildLocalLinearID(v16, (uint64_t)&v77, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 - 24) + v11 + 232));
  if (v78)
    llvm::MetadataTracking::untrack();
  if (a6)
  {
    v19 = llvm::ConstantInt::get();
  }
  else
  {
    v20 = v11 + *(_QWORD *)(*(_QWORD *)v11 - 24);
    v21 = llvm::PointerType::get();
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 - 24) + v11 + 400) + 824);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 984))(v22);
    *(_QWORD *)&v80 = "agc.indirect_wg_count_buffer_pointer.";
    v81 = v23;
    v83 = 2051;
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v11 - 24) + v11 + 400) + 824);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 984))(v24);
    GlobalBufferBinding = (llvm::Type **)AGCLLVMObject::createGlobalBufferBinding(v20, v21, (uint64_t)&v80, v25, 12);
    v27 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
    v83 = 257;
    v29 = AGCLLVMBuilder::tryDeducePointeeType(GlobalBufferBinding, v28);
    AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v27 + 40), v29, (uint64_t)GlobalBufferBinding, 0, (uint64_t)&v80);
    v31 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
    v32 = *(llvm::Type **)(v31 + 232);
    v83 = 257;
    GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v31 + 40), v32, AlignedLoad, v18, (const llvm::Twine *)&v80);
    v34 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
    v83 = 257;
    v36 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v35);
    v19 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(v34 + 40), v36, (uint64_t)GEP, 0, (uint64_t)&v80);
  }
  v37 = (llvm::Type **)v19;
  v70 = v19;
  if (*(_BYTE *)(v11 + 96))
  {
    v38 = *(_DWORD *)(v11 + 92);
    if (v38 <= 4)
      v38 = 4;
    *(_DWORD *)(v11 + 88) += 16;
    *(_DWORD *)(v11 + 92) = v38;
    v39 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
    v40 = *(_QWORD *)(v39 + 400);
    v74 = *(_OWORD *)(v39 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v39 + 40));
    v76 = *(_DWORD *)(v39 + 136);
    v41 = (llvm::Type **)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v40 + 320))(v40, &v74);
    v42 = (llvm::Type *)llvm::PointerType::get();
    v83 = 257;
    PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v39 + 40), v41, v42, (const llvm::Twine *)&v80);
    if (v75)
      llvm::MetadataTracking::untrack();
    v44 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
    v45 = *(llvm::Type **)(v44 + 232);
    v83 = 257;
    v46 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v44 + 40), v45, PointerCast, v18, (const llvm::Twine *)&v80);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(*(_QWORD *)(*(_QWORD *)v11 - 24) + v11 + 40), v37, v46, 0);
  }
  v47 = a5;
  if (a5)
  {
    v48 = *(_DWORD *)(v11 + 92);
    if (v48 <= 4)
      v48 = 4;
    *(_DWORD *)(v11 + 88) += 16;
    *(_DWORD *)(v11 + 92) = v48;
    v49 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
    v50 = *(llvm::Type **)(v49 + 216);
    v51 = *(_QWORD *)(v49 + 400);
    v71 = *(_OWORD *)(v49 + 88);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v49 + 40));
    v73 = *(_DWORD *)(v49 + 136);
    v52 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v51 + 320))(v51, &v71);
    v53 = (llvm::Value *)llvm::ConstantInt::get();
    v83 = 257;
    v54 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v49 + 40), v50, v52, v53, (const llvm::Twine *)&v80);
    v55 = (llvm::Type *)llvm::PointerType::get();
    v85 = 257;
    v56 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(v49 + 40), v54, v55, (const llvm::Twine *)v84);
    if (v72)
      llvm::MetadataTracking::untrack();
    for (i = 0; i != 3; ++i)
    {
      v58 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v11 - 24) + v11 + 40);
      v59 = (llvm::Type **)llvm::ConstantInt::get();
      v60 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
      v61 = *(llvm::Type **)(v60 + 232);
      v62 = (llvm::Value *)llvm::ConstantInt::get();
      v83 = 257;
      v63 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(v60 + 40), v61, v56, v62, (const llvm::Twine *)&v80);
      llvm::IRBuilderBase::CreateAlignedStore(v58, v59, v63, 0);
    }
  }
  if (*(_BYTE *)(v11 + 96) || v47)
  {
    v64 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
    v65 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>(v64 + 32, (uint64_t)"llvm.agx2.memory.fence", 22, *(_QWORD *)(v64 + 176), *(_QWORD *)(v64 + 224), *(_QWORD *)(v64 + 224), *(_QWORD *)(v64 + 224));
    v84[0] = llvm::ConstantInt::get();
    v84[1] = llvm::ConstantInt::get();
    v84[2] = llvm::ConstantInt::get();
    v66 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11 + 40;
    v83 = 257;
    llvm::IRBuilderBase::CreateCall(v66, *(_QWORD *)(v65 + 24), v65, (uint64_t)v84, 3, (uint64_t)&v80);
  }
  v67 = *(_QWORD *)(*(_QWORD *)v11 - 24) + v11;
  v68 = *(_QWORD *)(v67 + 400);
  v80 = *(_OWORD *)(v67 + 88);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(v67 + 40));
  v82 = *(_DWORD *)(v67 + 136);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v68 + 304))(v68, &v80, v70);
  if (v81)
    llvm::MetadataTracking::untrack();
  llvm::IRBuilderBase::CreateRetVoid((llvm::IRBuilderBase *)(*(_QWORD *)(*(_QWORD *)v11 - 24) + v11 + 40));
  return v11 + *(_QWORD *)(*(_QWORD *)v11 - 24);
}

uint64_t AGCLLVMGen6TargetConfig::createMetalMeshShader(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v11;
  BOOL *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int *v17;
  int *v18;
  unsigned __int16 *v19;
  uint64_t v20;
  _DWORD *v21;
  unsigned __int16 *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  char *v26;
  const char *v27;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t v34;
  uint32x4_t v35;
  int8x16_t v36;
  llvm::NamedMDNode *NamedMetadata;
  unsigned int i;
  llvm::Module *v39;
  uint64_t v40;
  llvm::NamedMDNode *v41;
  unsigned int j;
  uint64_t Operand;
  unsigned __int8 *v44;
  llvm::Function *v45;
  BOOL v46;
  llvm::NamedMDNode *v47;
  llvm::Module *v48;
  uint64_t v50;
  llvm::Module *v51;
  void *v52[2];
  char v53;
  uint64_t v54;
  llvm::Module *v55[4];
  __int16 v56;
  __int32 v57;
  void *__p[2];
  char v59;

  v11 = operator new();
  v12 = (BOOL *)(v11 + 4405);
  AGCLLVMObject::AGCLLVMObject((AGCLLVMObject *)(v11 + 6048), a2, *a3);
  v51 = (llvm::Module *)a3;
  AGCLLVMUserObjectShaderBase::AGCLLVMUserObjectShaderBase((AGCLLVMUserObjectShaderBase *)v11, (AGCLLVMCtx *)off_1E7E68898, (llvm::Module *)a3, "air.mesh");
  *(_QWORD *)v11 = &off_1E7E68460;
  *(_QWORD *)(v11 + 6048) = &unk_1E7E68798;
  *(_QWORD *)(v11 + 6080) = &unk_1E7E68888;
  *(_QWORD *)(v11 + 4520) = a4;
  *(_BYTE *)(v11 + 4528) = 0;
  *(_QWORD *)(v11 + 4536) = 4;
  *(_OWORD *)(v11 + 4544) = 0u;
  *(_OWORD *)(v11 + 4572) = 0u;
  *(_QWORD *)(v11 + 4564) = 0;
  *(_DWORD *)(v11 + 4588) = 16;
  *(_OWORD *)(v11 + 4600) = 0u;
  *(_BYTE *)(v11 + 4616) = 0;
  *(_OWORD *)(v11 + 4620) = 0u;
  *(_WORD *)(v11 + 4636) = 0;
  *(_OWORD *)(v11 + 4640) = 0u;
  *(_OWORD *)(v11 + 4656) = 0u;
  *(_OWORD *)(v11 + 4672) = 0u;
  *(_DWORD *)(v11 + 4688) = 0;
  v13 = *(_BYTE *)(*(_QWORD *)(v11 + 6448) + 1762);
  *(_OWORD *)(v11 + 4696) = 0u;
  *(_QWORD *)(v11 + 4712) = 0;
  *(_QWORD *)(v11 + 4720) = v11 + 4736;
  *(_QWORD *)(v11 + 4728) = 0x800000000;
  *(_QWORD *)(v11 + 5248) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 5256) = v13;
  *(_DWORD *)(v11 + 5388) = 0;
  *(_OWORD *)(v11 + 5264) = 0u;
  *(_OWORD *)(v11 + 5280) = 0u;
  *(_OWORD *)(v11 + 5296) = 0u;
  *(_OWORD *)(v11 + 5312) = 0u;
  *(_OWORD *)(v11 + 5328) = 0u;
  *(_OWORD *)(v11 + 5344) = 0u;
  *(_OWORD *)(v11 + 5360) = 0u;
  *(_OWORD *)(v11 + 5370) = 0u;
  *(_BYTE *)(v11 + 5392) = 1;
  *(_OWORD *)(v11 + 5400) = 0u;
  v14 = -624;
  *(_DWORD *)(v11 + 5416) = 0;
  do
  {
    *(_DWORD *)(v11 + v14 + 6056) = 0;
    v14 += 24;
  }
  while (v14);
  AGCLLVMUserShader::enableStatistics(v11, *(_DWORD *)(a4 + 12) & 1, (*(_DWORD *)(a4 + 12) >> 1) & 1);
  v15 = *(_QWORD *)(v11 + 4520);
  *(_BYTE *)(v11 + 18) = (*(_BYTE *)(v15 + 12) & 8) != 0;
  *(_BYTE *)(v11 + *(_QWORD *)(*(_QWORD *)v11 - 24) + 2760) = (*(_DWORD *)(v15 + 12) & 0x4000000) != 0;
  *(_QWORD *)(v11 + 3304) = *(_QWORD *)v15;
  *(_BYTE *)(v11 + 20) = (*(_BYTE *)(v15 + 12) & 4) != 0;
  v16 = *(_DWORD *)(v15 + 16) & 0xF;
  *(_DWORD *)(v11 + 4560) = v16;
  *v12 = v16 > 1;
  *(_BYTE *)(v11 + 3712) = *(_BYTE *)(v15 + 13) & 1;
  *(_BYTE *)(v11 + 3713) = (*(_DWORD *)(v15 + 12) & 0x200) != 0;
  *(_DWORD *)(v11 + 4376) = *(_DWORD *)(v15 + 24);
  if (a5 && a6)
  {
    v17 = (int *)((char *)a5 + *a5);
    v18 = (int *)((char *)a6 + *a6);
    v19 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v19 >= 5u && (v20 = v19[2]) != 0)
      v21 = (int *)((char *)v17 + v20 + *(unsigned int *)((char *)v17 + v20));
    else
      v21 = 0;
    v22 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v22 >= 5u && (v23 = v22[2]) != 0)
      v24 = (char *)v18 + v23 + *(unsigned int *)((char *)v18 + v23);
    else
      v24 = 0;
    if (*v21)
    {
      v50 = a4;
      v25 = 0;
      v26 = v24 + 4;
      v27 = (const char *)(v21 + 2);
      v28 = v21 + 2;
      do
      {
        v29 = *(_DWORD *)&v26[4 * v25];
        v30 = *((unsigned int *)v27 - 1);
        v31 = strlen(&v27[v30]);
        *(_DWORD *)(*llvm::StringMap<unsigned int,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v11 + 4568), (char *)v28 + v30, v31)+ 8) = v29;
        ++v25;
        ++v28;
        v27 += 4;
      }
      while (v25 < *v21);
      v15 = *(_QWORD *)(v11 + 4520);
      v12 = (BOOL *)(v11 + 4405);
      a4 = v50;
    }
    v12[162] = (*(_BYTE *)(v15 + 16) & 0x10) != 0;
  }
  v55[0] = (llvm::Module *)"air.intersection";
  v56 = 259;
  if (!llvm::Module::getNamedMetadata(v51, (const llvm::Twine *)v55))
    return v11 + *(_QWORD *)(*(_QWORD *)v11 - 24);
  v32 = operator new();
  *(_QWORD *)(v32 + 32) = v32 + 48;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 40) = 0x400000000;
  *(_QWORD *)(v32 + 256) = 0;
  *(_QWORD *)(v32 + 264) = 0;
  *(_QWORD *)(v32 + 248) = 0;
  *(_OWORD *)(v32 + 176) = 0u;
  *(_OWORD *)(v32 + 192) = 0u;
  *(_OWORD *)(v32 + 208) = 0u;
  *(_OWORD *)(v32 + 224) = 0u;
  *(_QWORD *)(v32 + 240) = v32 + 248;
  *(_QWORD *)v32 = &off_1E7ECDD68;
  *(_QWORD *)(v32 + 8) = 0;
  v33 = v11 + *(_QWORD *)(*(_QWORD *)v11 - 24);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v33 + 40))(__p, v33);
  AGCLLVMObjectArray::addNewMainObject(v32, v33, (uint64_t)__p);
  if (v59 < 0)
    operator delete(__p[0]);
  v34.i64[0] = *(_QWORD *)(a4 + 12);
  v35 = (uint32x4_t)vzip1q_s32(v34, v34);
  v35.i32[2] = v34.i32[0];
  v36 = vandq_s8((int8x16_t)vshlq_u32(v35, (uint32x4_t)xmmword_1C3E38650), (int8x16_t)xmmword_1C3E38630);
  *(int8x8_t *)v36.i8 = vorr_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
  v57 = v36.i32[0] | v36.i32[1];
  v55[0] = (llvm::Module *)"air.intersection";
  v56 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v51, (const llvm::Twine *)v55);
  for (i = 0; i < llvm::NamedMDNode::getNumOperands(NamedMetadata); ++i)
  {
    llvm::CloneModule();
    v39 = v55[0];
    v55[0] = (llvm::Module *)"air.visible";
    v56 = 259;
    v40 = llvm::Module::getNamedMetadata(v39, (const llvm::Twine *)v55);
    if (v40)
    {
      v41 = (llvm::NamedMDNode *)v40;
      for (j = 0; j < llvm::NamedMDNode::getNumOperands(v41); ++j)
      {
        Operand = llvm::NamedMDNode::getOperand(v41);
        v44 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8));
        if (v44 && *v44 - 1 <= 1)
        {
          v45 = (llvm::Function *)*((_QWORD *)v44 + 16);
          if (v45)
            v46 = *((_BYTE *)v45 + 16) == 0;
          else
            v46 = 0;
          if (v46)
          {
            llvm::Function::dropAllReferences(v45);
            llvm::GlobalValue::setLinkage((uint64_t)v45, 0);
          }
        }
      }
      llvm::NamedMDNode::eraseFromParent(v41);
    }
    v55[0] = (llvm::Module *)"air.intersection";
    v56 = 259;
    v47 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v39, (const llvm::Twine *)v55);
    v54 = llvm::NamedMDNode::getOperand(v47);
    if (v54)
      llvm::MetadataTracking::track();
    llvm::NamedMDNode::clearOperands(v47);
    llvm::NamedMDNode::addOperand();
    v48 = (llvm::Module *)(*(uint64_t (**)(_QWORD *, AGCLLVMCtx *, llvm::Module *, __int32 *))(**((_QWORD **)a2 + 4) + 208))(*((_QWORD **)a2 + 4), a2, v39, &v57);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v48 + 40))(v52);
    v55[0] = v48;
    llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>((void **)(v32 + 32), v55, (uint64_t)v52);
    if (v53 < 0)
      operator delete(v52[0]);
    if (v54)
      llvm::MetadataTracking::untrack();
  }
  return v32;
}

void AGCLLVMGen6TargetConfig::createMetalMeshShaderAnalysis(uint64_t a1, AGCLLVMCtx *a2, llvm::LLVMContext **a3, uint64_t a4)
{
  AGCLLVMObject *v7;

  v7 = (AGCLLVMObject *)operator new();
  AGCLLVMUserMeshShaderAnalysis::AGCLLVMUserMeshShaderAnalysis(v7, a2, a3, a4, 0);
}

uint64_t AGCLLVMGen6TargetConfig::createMetalIntersectionShader(uint64_t a1, AGCLLVMCtx *a2, llvm::Module *a3, _DWORD *a4)
{
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned int v9;
  llvm::NamedMDNode *NamedMetadata;
  uint64_t Operand;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  llvm::LLVMContext **v20;
  char *v21;
  llvm::LLVMContext **v22;
  uint64_t v23;
  const char *v25;
  const char *Value;
  BOOL v27;
  const char *v28;
  const char *v29;
  BOOL v30;
  void *v32[2];
  char v33;
  llvm::LLVMContext **v34;
  int v35;
  char *v36;
  void *__p[2];
  char v38;
  __int16 v39;

  v6 = operator new();
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = v6 + 48;
  *(_QWORD *)(v6 + 40) = 0x400000000;
  *(_QWORD *)(v6 + 256) = 0;
  *(_QWORD *)(v6 + 264) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_QWORD *)(v6 + 240) = v6 + 248;
  *(_QWORD *)v6 = &off_1E7ECDE28;
  *(_QWORD *)(v6 + 8) = 0;
  if ((v7 & 1) == 0
  {
    v27 = MGGetBoolAnswer()
       && (Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_RIA_DISABLE_PARALLEL_LEAF_LOOP", v25)) != 0
       && *Value != 48
       && atoi(Value) != 0;
    AGCLLVMUserIntersectionShaderArray<RaytracingConstantsGen1>::AGCLLVMUserIntersectionShaderArray(AGCLLVMCtx &,llvm::Module *,_AGCUserIntersectionState const*)::disableParallelLeafLoop = v27;
  }
  if ((v8 & 1) == 0
  {
    v30 = MGGetBoolAnswer()
       && (v29 = (const char *)AGCEnv::getValue((AGCEnv *)"AGX_RIA_DISABLE_PARALLEL_LEAF_TESTS", v28)) != 0
       && *v29 != 48
       && atoi(v29) != 0;
    AGCLLVMUserIntersectionShaderArray<RaytracingConstantsGen1>::AGCLLVMUserIntersectionShaderArray(AGCLLVMCtx &,llvm::Module *,_AGCUserIntersectionState const*)::disableParallelLeafTests = v30;
  }
  v9 = *a4 & 0xFFFE81FC | ((AGCLLVMUserIntersectionShaderArray<RaytracingConstantsGen1>::AGCLLVMUserIntersectionShaderArray(AGCLLVMCtx &,llvm::Module *,_AGCUserIntersectionState const*)::disableParallelLeafTests == 0) << 13) | (AGCLLVMUserIntersectionShaderArray<RaytracingConstantsGen1>::AGCLLVMUserIntersectionShaderArray(AGCLLVMCtx &,llvm::Module *,_AGCUserIntersectionState const*)::disableParallelLeafLoop << 16);
  __p[0] = "air.intersection";
  v39 = 259;
  NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(a3, (const llvm::Twine *)__p);
  if (!NamedMetadata)
    goto LABEL_10;
  Operand = llvm::NamedMDNode::getOperand(NamedMetadata);
  if (isStringMDNode(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 24), "air.triangle"))
  {
    v12 = 1;
    goto LABEL_11;
  }
  if (isStringMDNode(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 24), "air.bounding_box"))
  {
    v12 = 2;
    goto LABEL_11;
  }
  if (isStringMDNode(*(llvm::MDString **)(Operand - 8 * *(unsigned int *)(Operand + 8) + 24), "air.curve"))
    v12 = 3;
  else
LABEL_10:
    v12 = 0;
LABEL_11:
  v35 = v9;
  v13 = operator new();
  v14 = (_QWORD *)AGCLLVMUserIntersectionShader::AGCLLVMUserIntersectionShader(v13, a2, (llvm::LLVMContext **)a3, (uint64_t)&v35, v12);
  v15 = (uint64_t)v14 + *(_QWORD *)(*v14 - 24);
  std::string::basic_string[abi:nn180100]<0>(__p, (char *)&unk_1C3E4D9BB);
  AGCLLVMObjectArray::addNewMainObject(v6, v15, (uint64_t)__p);
  if (v38 < 0)
    operator delete(__p[0]);
  if ((v12 - 1) <= 2)
  {
    v16 = dword_1C3DF8A10[v12 - 1];
    v17 = 1;
    do
    {
      v18 = v9 & 0xFFFFF1FC;
      v9 = v9 & 0xFFFFF1FC | v17 & 0x7FFFF1FF;
      v35 = v18 | v17 & 0x7FFFF1FF;
      v19 = (_QWORD *)operator new();
      llvm::CloneModule();
      v20 = v34;
      v34 = 0;
      AGCLLVMUserIntersectionShader::AGCLLVMUserIntersectionShader((uint64_t)v19, a2, v20, (uint64_t)&v35, v12);
      v21 = (char *)v19 + *(_QWORD *)(*v19 - 24);
      std::string::basic_string[abi:nn180100]<0>(v32, (char *)&unk_1C3E4D9BB);
      v36 = v21;
      llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>((void **)(v6 + 32), &v36, (uint64_t)v32);
      if (v33 < 0)
        operator delete(v32[0]);
      v22 = v34;
      v34 = 0;
      if (v22)
      {
        v23 = MEMORY[0x1CAA2CC9C]();
        MEMORY[0x1CAA2D68C](v23, 0x10B2C407FF26C1CLL);
      }
      ++v17;
    }
    while (v16 != v17);
  }
  return v6;
}

double AGCLLVMGen6TargetConfig::initializeAirBuiltinsMap(AGCLLVMGen6TargetConfig *this, AGCLLVMAirBuiltinsMap *a2)
{
  uint64_t v3;
  double result;

  AGCLLVMGen5TargetConfig::initializeAirBuiltinsMap(this, a2);
  v3 = *llvm::StringMap<AGCLLVMAirBuiltinReplacement<AGCLLVMAirBuiltins>::Replacement,llvm::MallocAllocator>::try_emplace<>(a2, "yield_simdgroup", 0xFuLL);
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)&result = 360;
  *(_OWORD *)(v3 + 16) = xmmword_1C3E38660;
  *(_DWORD *)(v3 + 32) = 3;
  *(_WORD *)(v3 + 36) = 0;
  return result;
}

void AGCLLVMObjectArray::addNewMainObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 176) = a2;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v4 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v5 = a2;
  llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>((void **)(a1 + 32), &v5, (uint64_t)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void **llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>(void **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  __int128 v5;

  v3 = *((unsigned int *)a1 + 2);
  if (v3 >= *((_DWORD *)a1 + 3))
    return (void **)llvm::SmallVectorTemplateBase<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>,false>::growAndEmplaceBack<AGCLLVMObjectBase*&,std::string>(a1, a2, a3);
  v4 = (char *)*a1 + 32 * v3;
  *(_QWORD *)v4 = *a2;
  v5 = *(_OWORD *)a3;
  *((_QWORD *)v4 + 3) = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 8) = v5;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  ++*((_DWORD *)a1 + 2);
  return a1;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>,false>::growAndEmplaceBack<AGCLLVMObjectBase*&,std::string>(void **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow();
  v7 = v6 + 32 * *((unsigned int *)a1 + 2);
  *(_QWORD *)v7 = *a2;
  v8 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)a3;
  *(_QWORD *)(v7 + 24) = v8;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v9 = (char *)*a1;
  v10 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v10)
  {
    v11 = &v9[32 * v10];
    v12 = v6;
    do
    {
      v13 = *(_QWORD *)v9;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)v12 = v13;
      v14 = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v12 + 24) = *((_QWORD *)v9 + 3);
      *(_OWORD *)(v12 + 8) = v14;
      *((_QWORD *)v9 + 2) = 0;
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 1) = 0;
      v9 += 32;
      v12 += 32;
    }
    while (v9 != v11);
    v9 = (char *)*a1;
    v15 = *((unsigned int *)a1 + 2);
  }
  else
  {
    v15 = 0;
  }
  llvm::SmallVectorTemplateBase<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>,false>::destroy_range((uint64_t)v9, (uint64_t)&v9[32 * v15]);
  if (*a1 != a1 + 2)
    free(*a1);
  *a1 = (void *)v6;
  v16 = (*((_DWORD *)a1 + 2) + 1);
  a1[1] = (void *)v16;
  return v6 + 32 * v16 - 32;
}

void AGCLLVMUserIntersectionShaderArray<RaytracingConstantsGen1>::~AGCLLVMUserIntersectionShaderArray(AGCLLVMObjectArray *a1)
{
  AGCLLVMObjectArray::~AGCLLVMObjectArray(a1);
  JUMPOUT(0x1CAA2D68CLL);
}

void AGCLLVMUserShaderWithIntersectionShadersArray::~AGCLLVMUserShaderWithIntersectionShadersArray(AGCLLVMUserShaderWithIntersectionShadersArray *this)
{
  AGCLLVMObjectArray::~AGCLLVMObjectArray(this);
  JUMPOUT(0x1CAA2D68CLL);
}

uint64_t newObjectArrayWithIntersectionShadersIfNeeded<_AGCFragmentContextStateAGP>(_QWORD *a1, uint64_t a2, llvm::Module *this, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x8_t v12;
  llvm::NamedMDNode *NamedMetadata;
  unsigned int i;
  llvm::Module *v15;
  uint64_t v16;
  llvm::NamedMDNode *v17;
  unsigned int j;
  uint64_t Operand;
  unsigned __int8 *v20;
  llvm::Function *v21;
  BOOL v22;
  llvm::NamedMDNode *v23;
  llvm::Module *v24;
  void *v26[2];
  char v27;
  uint64_t v28;
  llvm::Module *v29[4];
  __int16 v30;
  __int32 v31;
  void *__p[2];
  char v33;

  v29[0] = (llvm::Module *)"air.intersection";
  v30 = 259;
  if (llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v29))
  {
    v8 = operator new();
    *(_QWORD *)(v8 + 32) = v8 + 48;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 40) = 0x400000000;
    *(_QWORD *)(v8 + 256) = 0;
    *(_QWORD *)(v8 + 264) = 0;
    *(_QWORD *)(v8 + 248) = 0;
    *(_OWORD *)(v8 + 176) = 0u;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
    *(_OWORD *)(v8 + 224) = 0u;
    *(_QWORD *)(v8 + 240) = v8 + 248;
    *(_QWORD *)v8 = &off_1E7ECDD68;
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v9 + 40))(__p, v9);
    AGCLLVMObjectArray::addNewMainObject(v8, v9, (uint64_t)__p);
    if (v33 < 0)
      operator delete(__p[0]);
    v10.i64[0] = *(_QWORD *)(a4 + 60);
    v11 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vzip1q_s32(v10, v10), (uint32x4_t)xmmword_1C3E38670), (int8x16_t)xmmword_1C3E38610);
    v12 = vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v10.i8, (uint32x2_t)0x900000001), (int8x8_t)0x80000000000F0);
    *(int8x8_t *)v11.i8 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
    v31 = v11.i32[0] | v12.i32[0] | v11.i32[1] | v12.i32[1];
    v29[0] = (llvm::Module *)"air.intersection";
    v30 = 259;
    NamedMetadata = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(this, (const llvm::Twine *)v29);
    for (i = 0; i < llvm::NamedMDNode::getNumOperands(NamedMetadata); ++i)
    {
      llvm::CloneModule();
      v15 = v29[0];
      v29[0] = (llvm::Module *)"air.visible";
      v30 = 259;
      v16 = llvm::Module::getNamedMetadata(v15, (const llvm::Twine *)v29);
      if (v16)
      {
        v17 = (llvm::NamedMDNode *)v16;
        for (j = 0; j < llvm::NamedMDNode::getNumOperands(v17); ++j)
        {
          Operand = llvm::NamedMDNode::getOperand(v17);
          v20 = *(unsigned __int8 **)(Operand - 8 * *(unsigned int *)(Operand + 8));
          if (v20 && *v20 - 1 <= 1)
          {
            v21 = (llvm::Function *)*((_QWORD *)v20 + 16);
            if (v21)
              v22 = *((_BYTE *)v21 + 16) == 0;
            else
              v22 = 0;
            if (v22)
            {
              llvm::Function::dropAllReferences(v21);
              llvm::GlobalValue::setLinkage((uint64_t)v21, 0);
            }
          }
        }
        llvm::NamedMDNode::eraseFromParent(v17);
      }
      v29[0] = (llvm::Module *)"air.intersection";
      v30 = 259;
      v23 = (llvm::NamedMDNode *)llvm::Module::getNamedMetadata(v15, (const llvm::Twine *)v29);
      v28 = llvm::NamedMDNode::getOperand(v23);
      if (v28)
        llvm::MetadataTracking::track();
      llvm::NamedMDNode::clearOperands(v23);
      llvm::NamedMDNode::addOperand();
      v24 = (llvm::Module *)(*(uint64_t (**)(_QWORD, uint64_t, llvm::Module *, __int32 *))(**(_QWORD **)(a2 + 32)
                                                                                                  + 208))(*(_QWORD *)(a2 + 32), a2, v15, &v31);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v24 + 40))(v26);
      v29[0] = v24;
      llvm::SmallVectorImpl<std::pair<std::unique_ptr<AGCLLVMObjectBase>,std::string>>::emplace_back<AGCLLVMObjectBase*&,std::string>((void **)(v8 + 32), v29, (uint64_t)v26);
      if (v27 < 0)
        operator delete(v26[0]);
      if (v28)
        llvm::MetadataTracking::untrack();
    }
    return v8;
  }
  else if (a1)
  {
    return (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
  }
  else
  {
    return 0;
  }
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildEmitpix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, AGCLLVMGen3TargetLowerer *a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t Cast;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inserted;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Value *v29;
  llvm::Value *Mul;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Value *v33;
  llvm::Value *v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Value *v37;
  llvm::Value *InsertElement;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Value *v44;
  llvm::Value *v45;
  llvm::Value *v46;
  llvm::Value *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  _BYTE v52[32];
  __int16 v53;
  _BYTE v54[32];
  __int16 v55;
  int v56;
  _BYTE v57[32];
  __int16 v58;
  char __s[8];
  char v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  void *v64;
  uint64_t v65;
  _BYTE v66[128];
  void *v67[2];
  _QWORD v68[18];

  v68[16] = *MEMORY[0x1E0C80C00];
  v61 = *(_OWORD *)a2;
  v62 = *(_QWORD *)(a2 + 16);
  if (v62)
    llvm::MetadataTracking::track();
  v63 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v61);
  if (v62)
    llvm::MetadataTracking::untrack();
  v67[0] = v68;
  v67[1] = (void *)0x1000000000;
  v64 = v66;
  v65 = 0x1000000000;
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(_QWORD *)(a1 + 192));
  AGCLLVMGen3TargetLowerer::getUSCFormatFromState(a6, a7);
  v16 = llvm::ConstantInt::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v16);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(_QWORD *)(a1 + 192));
  v17 = *(_QWORD *)(a1 + 192);
  v58 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, a9, v17, (uint64_t)v57);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, Cast);
  v19 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, v19);
  v20 = llvm::PointerType::get();
  v58 = 257;
  v21 = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, a3, v20, (uint64_t)v57);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v21);
  v56 = 0;
  (*(void (**)(char *__return_ptr, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 1648))(__s, a1, a8, &v56);
  v22 = llvm::PointerType::get();
  v58 = 257;
  v23 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, a4, v22, (uint64_t)v57);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, v22);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v23);
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v25 = AGCLLVMBuilder::getOrInsertFunction<>();
  v26 = AGCLLVMBuilder::getOrInsertFunction<>();
  v27 = AGCLLVMBuilder::getOrInsertFunction<>();
  v58 = 257;
  v28 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)v25 + 16), v25, 0, 0, (uint64_t)v57);
  v55 = 257;
  v29 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v54);
  v53 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v28, v29, (const llvm::Twine *)v52);
  v58 = 257;
  v31 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)v27 + 16), v27, 0, 0, (uint64_t)v57);
  v55 = 257;
  v32 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)v26 + 16), v26, 0, 0, (uint64_t)v54);
  v53 = 257;
  v33 = (llvm::Value *)llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v31, v32, (const llvm::Twine *)v52);
  v34 = 0;
  if ((v56 - 1) > 1)
    goto LABEL_10;
  if (*(_QWORD *)(a1 + 1616))
    strlen(*(const char **)(a1 + 1616));
  v35 = AGCLLVMBuilder::getOrInsertFunction<>();
  v58 = 257;
  v34 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)v35 + 16), v35, 0, 0, (uint64_t)v57);
  if (v56 == 2)
  {
    v36 = (llvm::Value *)llvm::UndefValue::get();
    v58 = 257;
    v37 = (llvm::Value *)llvm::ConstantInt::get();
    InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v36, Mul, v37, (const llvm::Twine *)v57);
    v58 = 257;
    v39 = (llvm::Value *)llvm::ConstantInt::get();
    v40 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v33, v39, (const llvm::Twine *)v57);
    v58 = 257;
    v41 = (llvm::Value *)llvm::ConstantInt::get();
    v42 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v40, v34, v41, (const llvm::Twine *)v57);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(_QWORD *)(a1 + 312));
    v43 = v42;
  }
  else
  {
LABEL_10:
    v44 = (llvm::Value *)llvm::UndefValue::get();
    v58 = 257;
    v45 = (llvm::Value *)llvm::ConstantInt::get();
    v46 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v44, Mul, v45, (const llvm::Twine *)v57);
    v58 = 257;
    v47 = (llvm::Value *)llvm::ConstantInt::get();
    v48 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v46, v33, v47, (const llvm::Twine *)v57);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(_QWORD *)(a1 + 248));
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v48);
    if (!v34)
      goto LABEL_13;
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v67, *(_QWORD *)(a1 + 192));
    v49 = *(_QWORD *)(a1 + 192);
    v58 = 257;
    v43 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, (uint64_t)v34, v49, (uint64_t)v57);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v64, v43);
LABEL_13:
  llvm::FunctionType::get();
  if ((v60 & 0x80000000) == 0)
  {
    v50 = __s;
LABEL_16:
    strlen(v50);
    goto LABEL_17;
  }
  v50 = *(char **)__s;
  if (*(_QWORD *)__s)
    goto LABEL_16;
LABEL_17:
  llvm::Module::getOrInsertFunction();
  v58 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v51 + 24), v51, (uint64_t)v64, v65, (uint64_t)v57);
  if (v64 != v66)
    free(v64);
  if (v67[0] != v68)
    free(v67[0]);
  if (v60 < 0)
    operator delete(*(void **)__s);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildStoreChildcount(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v8 = *(_QWORD *)(a1 + 312);
  v9 = llvm::PointerType::get();
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.agx3.object.childcount.store", 33, *(_QWORD *)(a1 + 144), v8, v9);
  v17[0] = a4;
  v17[1] = a3;
  v13 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildWriteChildcount(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.agx3.object.childcount.write", 33, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 200));
  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  v13[0] = a3;
  v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v6 + 24), v6, (uint64_t)v13, 1, (uint64_t)v8);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildEnableAllThreads(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  _BYTE v6[32];
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
    llvm::MetadataTracking::track();
  v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9)
    llvm::MetadataTracking::untrack();
  v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildGetPayloadPointer(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  _BYTE v6[32];
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
    llvm::MetadataTracking::track();
  v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9)
    llvm::MetadataTracking::untrack();
  llvm::PointerType::get();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildGetMeshPrimitivePointer(uint64_t a1, uint64_t a2)
{
  uint64_t inserted;
  _BYTE v6[32];
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  int v10;

  v8 = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
    llvm::MetadataTracking::track();
  v10 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v8);
  if (v9)
    llvm::MetadataTracking::untrack();
  llvm::PointerType::get();
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  v7 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)inserted + 16), inserted, 0, 0, (uint64_t)v6);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildAllocateUVB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE v10[32];
  __int16 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v12 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13)
    llvm::MetadataTracking::untrack();
  v8 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>(a1, (uint64_t)"llvm.agx3.allocate.uvb", 22, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 192), *(_QWORD *)(a1 + 192));
  v15[0] = a3;
  v15[1] = a4;
  v11 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v8 + 24), v8, (uint64_t)v15, 2, (uint64_t)v10);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildWaitFence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[32];
  __int16 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v10 = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
    llvm::MetadataTracking::track();
  v12 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v10);
  if (v11)
    llvm::MetadataTracking::untrack();
  v6 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>(a1, (uint64_t)"llvm.agx3.wait.fence", 20, *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 192));
  v13[0] = a3;
  v9 = 257;
  return llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v6 + 24), v6, (uint64_t)v13, 1, (uint64_t)v8);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMeshIndexWrite(uint64_t *a1, uint64_t a2, uint64_t a3, llvm::Type **a4)
{
  llvm::Type *v8;
  llvm::Value *PointerCast;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)llvm::PointerType::get();
  v13 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a4, v8, (const llvm::Twine *)v12);
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx3.mesh.index.write", 26, a1[18], a1[24], (uint64_t)v8);
  v17[0] = a3;
  v17[1] = PointerCast;
  v13 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v10 + 24), v10, (uint64_t)v17, 2, (uint64_t)v12);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMeshPrimattrWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type **a5)
{
  llvm::Type *v10;
  llvm::Value *PointerCast;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  v10 = (llvm::Type *)llvm::PointerType::get();
  v15 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a5, v10, (const llvm::Twine *)v14);
  v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx3.mesh.primattr.write", 29, a1[18], a1[24], a1[24], (uint64_t)v10);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = PointerCast;
  v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMeshVaryingWrite(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type **a5)
{
  llvm::Type *v10;
  llvm::Value *PointerCast;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  v10 = (llvm::Type *)llvm::PointerType::get();
  v15 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a5, v10, (const llvm::Twine *)v14);
  v12 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *,llvm::Type *,llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx3.mesh.varying.write", 28, a1[18], a1[24], a1[24], (uint64_t)v10);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = PointerCast;
  v15 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v12 + 24), v12, (uint64_t)v19, 3, (uint64_t)v14);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVertexInputRegister()
{
  return 0;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getExecutionScopedSamplerStateRegisterCount()
{
  return 0;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPBEStateWordDimFromEmitStateDim(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildImageMipCountExtract(_QWORD *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *v9;
  uint64_t GEP;
  uint64_t AlignedLoad;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::Value *Sub;
  llvm::Value *v15;
  llvm::Type **Add;
  _BYTE v18[32];
  __int16 v19;
  _BYTE v20[32];
  __int16 v21;
  __int128 v22;
  uint64_t v23;
  int v24;

  v22 = *(_OWORD *)a2;
  v23 = *(_QWORD *)(a2 + 16);
  if (v23)
    llvm::MetadataTracking::track();
  v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v22);
  if (v23)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v21 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v20);
  v19 = 257;
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, GEP, 0, (uint64_t)v18);
  v12 = (llvm::Value *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 1904))(a1, AlignedLoad);
  v13 = (llvm::Value *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 1912))(a1, AlignedLoad);
  v21 = 257;
  Sub = (llvm::Value *)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 1), v13, v12, (const llvm::Twine *)v20);
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v19 = 257;
  Add = (llvm::Type **)llvm::IRBuilderBase::CreateAdd((llvm::IRBuilderBase *)(a1 + 1), Sub, v15, (const llvm::Twine *)v18);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, Add, a4, 0);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildImageBaseLevelExtract(_QWORD *a1, uint64_t a2, llvm::Value *a3, uint64_t a4)
{
  llvm::Type *v8;
  llvm::Value *v9;
  uint64_t GEP;
  uint64_t AlignedLoad;
  llvm::Type **v12;
  _WORD v14[20];
  _BYTE v15[32];
  __int16 v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v17 = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  if (v18)
    llvm::MetadataTracking::track();
  v19 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v17);
  if (v18)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)a1[26];
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v16 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 1), v8, a3, v9, (const llvm::Twine *)v15);
  v14[16] = 257;
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v8, GEP, 0, (uint64_t)v14);
  v12 = (llvm::Type **)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 1904))(a1, AlignedLoad);
  return llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v12, a4, 0);
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMemCpy1D(uint64_t a1, llvm::Instruction *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  llvm::Instruction *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];
  __int16 v11;
  void *v12[2];
  _QWORD v13[6];

  v13[5] = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v12[0] = v13;
  v12[1] = (void *)0x500000000;
  v5 = llvm::CallBase::arg_end(a2) - (_QWORD)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  if ((int)(v5 >> 5) >= 1)
  {
    v6 = (v5 >> 5);
    v7 = a2;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v12, *((_QWORD *)v7 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      v7 = (llvm::Instruction *)((char *)v7 + 32);
      --v6;
    }
    while (v6);
  }
  v8 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 1848))(a1, v12);
  v9 = *(_QWORD *)a2;
  v11 = 257;
  llvm::IRBuilderBase::CreateCast(v4, 48, v8, v9, (uint64_t)v10);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (v12[0] != v13)
    free(v12[0]);
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMemCpy2D(_QWORD *a1, llvm::Instruction *a2)
{
  uint64_t inserted;
  uint64_t v5;
  llvm::Value *v6;
  unint64_t v7;
  uint64_t v8;
  llvm::Instruction *v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v12[20];
  void *v13[2];
  _WORD v14[48];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  *(_WORD *)(inserted + 18) &= 0xC00Fu;
  v14[8] = 259;
  operator new();
  v5 = llvm::BasicBlock::BasicBlock();
  a1[7] = v5;
  a1[8] = v5 + 40;
  v6 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateRet((llvm::IRBuilderBase *)(a1 + 1), v6);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), a2);
  v13[0] = v14;
  v13[1] = (void *)0xC00000000;
  v7 = llvm::CallBase::arg_end(a2) - (_QWORD)a2 + 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
  if ((int)(v7 >> 5) >= 1)
  {
    v8 = (v7 >> 5);
    v9 = a2;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v13, *((_QWORD *)v9 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF)));
      v9 = (llvm::Instruction *)((char *)v9 + 32);
      --v8;
    }
    while (v8);
  }
  v10 = (*(uint64_t (**)(_QWORD *, void **))(*a1 + 1896))(a1, v13);
  v11 = *(_QWORD *)a2;
  v12[16] = 257;
  llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 48, v10, v11, (uint64_t)v12);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (v13[0] != v14)
    free(v13[0]);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  std::string::size_type **v11;
  std::string::size_type *v12;
  std::string::size_type *v13;
  std::string::size_type v14;
  int v15;
  std::string::size_type *v16;
  std::string::size_type *v17;
  unsigned int v18;
  std::string::size_type *v19;
  const std::string::value_type *v20;
  std::string *v21;
  std::string::size_type v22;
  uint64_t i;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  uint64_t **v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  uint64_t j;
  unsigned int v36;
  uint64_t v37;
  uint8x8_t v38;
  unint64_t v39;
  uint64_t *v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  uint64_t k;
  unsigned int v46;
  uint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint64_t *v50;
  std::string *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD v58[2];
  int v59;
  _OWORD v60[2];
  int v61;
  _OWORD v62[2];
  int v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  __int128 v68;
  std::string::size_type v69;
  uint64_t Name;
  uint64_t v71;
  std::string v72;
  __int16 v73;
  std::string v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 - 32);
  if (!v4 || *(_BYTE *)(v4 + 16) || *(_QWORD *)(v4 + 24) != *(_QWORD *)(a2 + 72))
    v4 = 0;
  Name = llvm::Value::getName((llvm::Value *)v4);
  v71 = v5;
  if (llvm::StringRef::find() == -1)
  {
    if (llvm::StringRef::find() == -1)
    {
      return 0;
    }
    else
    {
      v6 = 0;
      if (((llvm::CallBase::arg_end((llvm::CallBase *)a2) - (a2 + 32 * -(*(_DWORD *)(a2 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xA0)
      {
        if ((v8 & 1) == 0
        {
          v55 = 0;
          AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::order_map = 0u;
          *(_OWORD *)&qword_1EF8EA5B0 = 0u;
          dword_1EF8EA5C0 = 1065353216;
          do
          {
            std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>((uint64_t)&AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::order_map, *(_DWORD *)((char *)&unk_1E7ECD808 + v55), (char *)&unk_1E7ECD808 + v55);
            v55 += 16;
          }
          while (v55 != 48);
          __cxa_atexit((void (*)(void *))std::unordered_map<AIR::MemoryOrder,char const*>::~unordered_map[abi:nn180100], &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::order_map, &dword_1C3C54000);
        }
        if ((v9 & 1) == 0
        {
          v56 = 0;
          AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::scope_map = 0u;
          *(_OWORD *)&qword_1EF8EA5E0 = 0u;
          dword_1EF8EA5F0 = 1065353216;
          do
          {
            std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>((uint64_t)&AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::scope_map, *(_DWORD *)((char *)&unk_1E7ECD838 + v56), (char *)&unk_1E7ECD838 + v56);
            v56 += 16;
          }
          while (v56 != 32);
          __cxa_atexit((void (*)(void *))std::unordered_map<AIR::MemoryScope,char const*>::~unordered_map[abi:nn180100], &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::scope_map, &dword_1C3C54000);
        }
        if ((v10 & 1) == 0
        {
          v57 = 0;
          AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::volat_map = 0u;
          *(_OWORD *)&qword_1EF8EA610 = 0u;
          dword_1EF8EA620 = 1065353216;
          do
          {
            std::__hash_table<std::__hash_value_type<BOOL,char const*>,std::__unordered_map_hasher<BOOL,std::__hash_value_type<BOOL,char const*>,std::hash<BOOL>,std::equal_to<BOOL>,true>,std::__unordered_map_equal<BOOL,std::__hash_value_type<BOOL,char const*>,std::equal_to<BOOL>,std::hash<BOOL>,true>,std::allocator<std::__hash_value_type<BOOL,char const*>>>::__emplace_unique_key_args<BOOL,std::pair<BOOL const,char const*> const&>((uint64_t)&AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::volat_map, byte_1E7ECD858[v57], &byte_1E7ECD858[v57]);
            v57 += 16;
          }
          while (v57 != 32);
          __cxa_atexit((void (*)(void *))std::unordered_map<BOOL,char const*>::~unordered_map[abi:nn180100], &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdgroupAtomicWaitNotify(llvm::CallInst *)::volat_map, &dword_1C3C54000);
        }
        v11 = (std::string::size_type **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        v12 = *v11;
        v13 = v11[16];
        v14 = **v11;
        v15 = *(_DWORD *)(v14 + 8);
        if ((v15 & 0xFE) == 0x12)
          v15 = *(_DWORD *)(**(_QWORD **)(v14 + 16) + 8);
        v16 = v11[4];
        v17 = v11[8];
        v18 = v15 & 0xFFFFFF00;
        v19 = v11[12];
        std::string::basic_string[abi:nn180100]<0>(&v64, "air.simdgroup_atomic.wait.i32.");
        if (v18 == 256)
          v20 = "device.";
        else
          v20 = "threadgroup.";
        v21 = std::string::append(&v64, v20);
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        memset(v62, 0, sizeof(v62));
        v63 = dword_1EF8EA620;
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v62, qword_1EF8EA608);
        for (i = qword_1EF8EA610; i; i = *(_QWORD *)i)
          std::__hash_table<std::__hash_value_type<BOOL,char const*>,std::__unordered_map_hasher<BOOL,std::__hash_value_type<BOOL,char const*>,std::hash<BOOL>,std::equal_to<BOOL>,true>,std::__unordered_map_equal<BOOL,std::__hash_value_type<BOOL,char const*>,std::equal_to<BOOL>,std::hash<BOOL>,true>,std::allocator<std::__hash_value_type<BOOL,char const*>>>::__emplace_unique_key_args<BOOL,std::pair<BOOL const,char const*> const&>((uint64_t)v62, *(_BYTE *)(i + 16), (_OWORD *)(i + 16));
        v24 = *((_DWORD *)v13 + 8);
        if (v24 > 0x40)
          v25 = *(_QWORD *)v13[3];
        else
          v25 = (uint64_t)(v13[3] << -(char)v24) >> -(char)v24;
        v26 = v25 != 0;
        if (*((_QWORD *)&v62[0] + 1) <= v26)
          v27 = *((_QWORD *)&v62[0] + 1);
        else
          v27 = 0;
        v28 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v62 + 8));
        v28.i16[0] = vaddlv_u8(v28);
        v29 = v26 - v27;
        if (v28.u32[0] <= 1uLL)
          v29 = (DWORD2(v62[0]) + 1) & v26;
        v30 = *(uint64_t ***)(*(_QWORD *)&v62[0] + 8 * v29);
        do
        {
          do
            v30 = (uint64_t **)*v30;
          while (v30[1] != (uint64_t *)v26);
        }
        while (*((unsigned __int8 *)v30 + 16) != (_DWORD)v26);
        v31 = std::string::append(&v65, (const std::string::value_type *)v30[3]);
        v32 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        v33 = std::string::append(&v66, ".");
        v34 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        memset(v60, 0, sizeof(v60));
        v61 = dword_1EF8EA5C0;
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v60, qword_1EF8EA5A8);
        for (j = qword_1EF8EA5B0; j; j = *(_QWORD *)j)
          std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>((uint64_t)v60, *(_DWORD *)(j + 16), (_OWORD *)(j + 16));
        v36 = *((_DWORD *)v17 + 8);
        if (v36 > 0x40)
          v37 = *(_QWORD *)v17[3];
        else
          v37 = (uint64_t)(v17[3] << -(char)v36) >> -(char)v36;
        v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v60 + 8));
        v38.i16[0] = vaddlv_u8(v38);
        if (v38.u32[0] > 1uLL)
        {
          v39 = (int)v37;
          if (*((_QWORD *)&v60[0] + 1) <= (unint64_t)(int)v37)
            v39 = (unint64_t)(int)v37 % *((_QWORD *)&v60[0] + 1);
        }
        else
        {
          v39 = (*((_QWORD *)&v60[0] + 1) - 1) & (int)v37;
        }
        v40 = *(uint64_t **)(*(_QWORD *)&v60[0] + 8 * v39);
        do
        {
          do
            v40 = (uint64_t *)*v40;
          while (v40[1] != (int)v37);
        }
        while (*((_DWORD *)v40 + 4) != (_DWORD)v37);
        v41 = std::string::append(&v67, (const std::string::value_type *)v40[3]);
        v42 = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v74.__r_.__value_.__r.__words[2] = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        v43 = std::string::append(&v74, ".");
        v44 = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v72.__r_.__value_.__r.__words[2] = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        memset(v58, 0, sizeof(v58));
        v59 = dword_1EF8EA5F0;
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>((uint64_t)v58, qword_1EF8EA5D8);
        for (k = qword_1EF8EA5E0; k; k = *(_QWORD *)k)
          std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>((uint64_t)v58, *(_DWORD *)(k + 16), (_OWORD *)(k + 16));
        v46 = *((_DWORD *)v19 + 8);
        if (v46 > 0x40)
          v47 = *(_QWORD *)v19[3];
        else
          v47 = (uint64_t)(v19[3] << -(char)v46) >> -(char)v46;
        v48 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v58 + 8));
        v48.i16[0] = vaddlv_u8(v48);
        if (v48.u32[0] > 1uLL)
        {
          v49 = (int)v47;
          if (*((_QWORD *)&v58[0] + 1) <= (unint64_t)(int)v47)
            v49 = (unint64_t)(int)v47 % *((_QWORD *)&v58[0] + 1);
        }
        else
        {
          v49 = (*((_QWORD *)&v58[0] + 1) - 1) & (int)v47;
        }
        v50 = *(uint64_t **)(*(_QWORD *)&v58[0] + 8 * v49);
        do
        {
          do
            v50 = (uint64_t *)*v50;
          while (v50[1] != (int)v47);
        }
        while (*((_DWORD *)v50 + 4) != (_DWORD)v47);
        v51 = std::string::append(&v72, (const std::string::value_type *)v50[3]);
        v52 = v51->__r_.__value_.__r.__words[2];
        v68 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v69 = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)v58);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v72.__r_.__value_.__l.__data_);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)v60);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        std::__hash_table<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::GlobalVariable *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::GlobalVariable *>>>::~__hash_table((uint64_t)v62);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), (llvm::Instruction *)a2);
        v53 = *v16;
        v72.__r_.__value_.__r.__words[0] = *v12;
        v72.__r_.__value_.__l.__size_ = v53;
        llvm::FunctionType::get();
        llvm::Module::getOrInsertFunction();
        v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        v74.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
        v73 = 257;
        llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v54 + 24), v54, (uint64_t)&v74, 2, (uint64_t)&v72);
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
        v6 = 0;
        if (AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(a1, "spin_limit", 6.0))
        {
          if (AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(a1, "exp_growth_rate", 1.2)&& AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(a1, "exp_growth_max", 195.0))
          {
            v6 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(a1, "exp_growth_initial", 2.0312);
          }
          else
          {
            v6 = 0;
          }
        }
        if (SHIBYTE(v69) < 0)
          operator delete((void *)v68);
      }
    }
  }
  else
  {
    llvm::Instruction::eraseFromParent((llvm::Instruction *)a2);
    return 1;
  }
  return v6;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdYield(uint64_t *a1, uint64_t a2, llvm::CmpInst **a3)
{
  uint64_t v6;
  uint64_t Select;
  uint64_t v8;
  uint64_t Cast;
  uint64_t v10;
  _BYTE v12[32];
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17[4];
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v6 = llvm::ConstantInt::get();
  v13 = 257;
  llvm::IRBuilderBase::CreateICmp(a1 + 1, 37, a3, v6, (uint64_t)v12);
  llvm::ConstantInt::get();
  v18 = 257;
  Select = llvm::IRBuilderBase::CreateSelect();
  v8 = a1[24];
  v13 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, Select, v8, (uint64_t)v12);
  v10 = AGCLLVMBuilder::getOrInsertFunction<llvm::Type *>((uint64_t)a1, (uint64_t)"llvm.agx3.yield", 15, a1[18], a1[24]);
  v17[0] = Cast;
  v13 = 257;
  return llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v10 + 24), v10, (uint64_t)v17, 1, (uint64_t)v12);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateTransposeOperands(uint64_t a1, llvm::Instruction *a2, int a3, char a4, char a5, char a6)
{
  uint64_t v12;
  _DWORD *v13;
  llvm::Value *v14;
  void *v15;
  int64_t v16;
  char *v17;
  void *v18;
  int v20;
  llvm::Value *v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v24;
  void *v25;
  void *__dst;
  uint64_t v27;
  void *__p;
  _BYTE *v29;

  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v12 = *(_QWORD *)a2;
  v13 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v14 = *(llvm::Value **)v13;
  v23 = (llvm::Value *)*((_QWORD *)v13 + 8);
  v24 = *((_QWORD *)v13 + 4);
  v21 = (llvm::Value *)*((_QWORD *)v13 + 16);
  v22 = *((_QWORD *)v13 + 12);
  (*(void (**)(void **__return_ptr, uint64_t, llvm::Instruction *))(*(_QWORD *)a1 + 792))(&__p, a1, a2);
  v25 = 0;
  __dst = 0;
  v27 = 0;
  v15 = __p;
  v16 = v29 - (_BYTE *)__p;
  if (v29 == __p)
  {
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(a1, v12, v14, v24, v23, v22, v21, a3, a4, a5, a6, (uint64_t *)&v25);
  }
  else
  {
    std::vector<llvm::StringRef>::__vallocate[abi:nn180100](&v25, v16 >> 4);
    v20 = a3;
    v17 = (char *)__dst;
    memmove(__dst, v15, v16);
    __dst = &v17[v16];
    v18 = v25;
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(a1, v12, v14, v24, v23, v22, v21, v20, a4, a5, a6, (uint64_t *)&v25);
    if (v18)
      operator delete(v18);
  }
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulate(uint64_t a1, llvm::Instruction *a2, int a3, char a4, char a5, char a6)
{
  uint64_t v12;
  llvm::Value **v13;
  llvm::Value *v14;
  void *v15;
  int64_t v16;
  char *v17;
  void *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  llvm::Value *v24;
  void *v25;
  void *__dst;
  uint64_t v27;
  void *__p;
  _BYTE *v29;

  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v12 = *(_QWORD *)a2;
  v13 = (llvm::Value **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v23 = *v13;
  v24 = v13[4];
  v14 = v13[8];
  v22 = llvm::ConstantInt::get();
  v21 = llvm::ConstantInt::get();
  (*(void (**)(void **__return_ptr, uint64_t, llvm::Instruction *))(*(_QWORD *)a1 + 792))(&__p, a1, a2);
  v25 = 0;
  __dst = 0;
  v27 = 0;
  v15 = __p;
  v16 = v29 - (_BYTE *)__p;
  if (v29 == __p)
  {
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(a1, v12, v23, v22, v24, v21, v14, a3, a4, a5, a6, (uint64_t *)&v25);
  }
  else
  {
    std::vector<llvm::StringRef>::__vallocate[abi:nn180100](&v25, v16 >> 4);
    v20 = a3;
    v17 = (char *)__dst;
    memmove(__dst, v15, v16);
    __dst = &v17[v16];
    v18 = v25;
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(a1, v12, v23, v22, v24, v21, v14, v20, a4, a5, a6, (uint64_t *)&v25);
    if (v18)
      operator delete(v18);
  }
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixLoad(uint64_t a1, llvm::Instruction *a2)
{
  _DWORD *v4;

  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v4 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixLoadStoreImpl(a1, 0, *(_QWORD *)a2, 0, *(llvm::Type ***)v4, *((_QWORD *)v4 + 4), *((_QWORD *)v4 + 8), *((_QWORD *)v4 + 12));
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixStore(uint64_t a1, llvm::Instruction *a2)
{
  _DWORD *v4;

  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), a2);
  v4 = (_DWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixLoadStoreImpl(a1, 1, **(_QWORD **)v4, *(llvm::Type ***)v4, *((llvm::Type ***)v4 + 4), *((_QWORD *)v4 + 8), *((_QWORD *)v4 + 12), *((_QWORD *)v4 + 16));
  llvm::Instruction::eraseFromParent(a2);
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixInit(llvm::Type **a1, llvm::Instruction *a2, int a3)
{
  uint64_t *v5;
  llvm::Type *v6;
  uint64_t v7;
  llvm::Type *v8;
  uint64_t AllocaInEntryBlock;
  uint64_t v10;
  llvm::LLVMContext *v11;
  unsigned int v12;
  uint64_t IntNTy;
  uint64_t v14;
  void *Cast;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t *v19;
  const std::string::value_type *v20;
  std::string *v21;
  std::string::size_type v22;
  void **v23;
  std::string::size_type v24;
  const std::string::value_type *v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  std::string v31;
  void *__p[2];
  uint64_t v33;
  std::string v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[16];
  void *__src;
  uint64_t v39;
  _BYTE v40[16];
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)(a1 + 1);
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 1), a2);
  v6 = *(llvm::Type **)a2;
  v7 = *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
  v29 = *(_DWORD *)(*(_QWORD *)a2 + 32);
  v8 = **(llvm::Type ***)(*(_QWORD *)a2 + 16);
  AllocaInEntryBlock = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, *(llvm::Type **)a2);
  __src = (void *)llvm::Type::getPrimitiveSizeInBits(v8);
  v39 = v10;
  v11 = (llvm::LLVMContext *)llvm::TypeSize::operator unsigned long long();
  v12 = v11;
  IntNTy = llvm::Type::getIntNTy(a1[9], v11);
  v14 = llvm::PointerType::get();
  v41 = 257;
  Cast = (void *)llvm::IRBuilderBase::CreateCast((uint64_t)v5, 49, AllocaInEntryBlock, v14, (uint64_t)&__src);
  v41 = 257;
  v16 = llvm::IRBuilderBase::CreateCast((uint64_t)v5, 49, v7, IntNTy, (uint64_t)&__src);
  __src = Cast;
  v39 = v16;
  v35 = v37;
  v36 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v35, &__src, v40);
  __src = v40;
  v39 = 0x200000000;
  if ((_DWORD)v36)
  {
    v17 = (uint64_t **)v35;
    v18 = 8 * v36;
    do
    {
      v19 = *v17++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, *v19);
      v18 -= 8;
    }
    while (v18);
  }
  std::string::basic_string[abi:nn180100]<0>(&v34, "agx.simd_matrix_");
  if (v29 == 256)
    v20 = "16x16_";
  else
    v20 = "8x8_";
  std::string::append(&v34, v20);
  std::to_string(&v31, v12);
  v21 = std::string::insert(&v31, 0, "sz");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v33 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v33 >= 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if (v33 >= 0)
    v24 = HIBYTE(v33);
  else
    v24 = (std::string::size_type)__p[1];
  std::string::append(&v34, (const std::string::value_type *)v23, v24);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  std::string::append(&v34, "_init");
  if (a3)
    v25 = "_diag";
  else
    v25 = "_filled";
  std::string::append(&v34, v25);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v27 = v26;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (__src != v40)
    free(__src);
  v41 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)v5, *(_QWORD *)(v27 + 24), v27, (uint64_t)v35, v36, (uint64_t)&__src);
  v41 = 257;
  llvm::IRBuilderBase::CreateAlignedLoad(v5, v6, AllocaInEntryBlock, 0, (uint64_t)&__src);
  if (v35 != v37)
    free(v35);
  llvm::Value::replaceAllUsesWith();
  llvm::Instruction::eraseFromParent(a2);
  return 1;
}

unint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildConvertHFP8_ParseArgTypes@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t Name;
  unint64_t v29;
  unint64_t v30;

  if (*(_BYTE *)(result + 1814))
  {
    v5 = operator new(0x40uLL);
    a3[1] = v5 + 4;
    a3[2] = v5 + 4;
    *v5 = 0u;
    v5[1] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    *a3 = v5;
    v6 = *(_QWORD *)(a2 - 32);
    if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *(_QWORD *)(a2 + 72))
      v6 = 0;
    llvm::Value::getName((llvm::Value *)v6);
    if (llvm::StringRef::find() == -1)
    {
      result = llvm::StringRef::find();
      if (result != -1)
      {
        v17 = *(_QWORD *)(a2 - 32);
        if (!v17 || *(_BYTE *)(v17 + 16) || *(_QWORD *)(v17 + 24) != *(_QWORD *)(a2 + 72))
          v17 = 0;
        v18 = 0;
        Name = llvm::Value::getName((llvm::Value *)v17);
        v30 = v19;
        do
        {
          v20 = llvm::StringRef::find();
          result = llvm::StringRef::find();
          v21 = v30;
          v22 = v20 + 4;
          if (v30 < v20 + 4)
            v22 = v30;
          v23 = Name + v22;
          if (v22 <= result)
            v24 = result;
          else
            v24 = v22;
          if (v30 >= v24)
            v21 = v24;
          v25 = v21 - v22;
          v26 = (unint64_t *)&v5[v18];
          *v26 = v23;
          v26[1] = v25;
          ++v18;
        }
        while (v18 != 4);
      }
    }
    else
    {
      v7 = *(_QWORD *)(a2 - 32);
      if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a2 + 72))
        v7 = 0;
      v8 = 0;
      v27 = llvm::Value::getName((llvm::Value *)v7);
      v29 = v9;
      do
      {
        v10 = llvm::StringRef::find();
        result = llvm::StringRef::find();
        v11 = v29;
        v12 = v10 + 5;
        if (v29 < v10 + 5)
          v12 = v29;
        v13 = v27 + v12;
        if (v12 <= result)
          v14 = result;
        else
          v14 = v12;
        if (v29 >= v14)
          v11 = v14;
        v15 = v11 - v12;
        v16 = (unint64_t *)&v5[v8];
        *v16 = v13;
        v16[1] = v15;
        ++v8;
      }
      while (v8 != 4);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildConvertHFP8_F2F(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unsigned __int16 *a5, int a6, int a7)
{
  uint64_t *v11;
  uint64_t v12;
  void **v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  char *v18;
  std::string *v19;
  uint64_t **v20;
  uint64_t i;
  llvm::Type **v22;
  uint64_t v23;
  uint64_t j;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  const char *v28;
  const char *Value;
  llvm::Value *FPExt;
  llvm::Value *v31;
  uint64_t v32;
  int v33;
  unsigned __int16 *v34;
  int v35;
  int v36;
  BOOL v37;
  llvm::Type *v38;
  uint64_t v39;
  std::string *v40;
  const std::string::value_type *v41;
  uint64_t v42;
  uint64_t v43;
  llvm::Value *v44;
  llvm::Value *v45;
  int v46;
  llvm::Type *v48;
  uint64_t Cast;
  llvm::Value *v50;
  llvm::Value *v51;
  llvm::Value *v52;
  uint64_t v53;
  llvm::Value *v54;
  uint64_t Element;
  llvm::Value *v56;
  llvm::Value *v57;
  unsigned __int16 *v58;
  int v59;
  int v60;
  int v61;
  llvm::Type *v63;
  llvm::Type *v64;
  std::string *v65;
  llvm::Value *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  std::string v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  uint64_t **v78;
  char *v79[2];
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t __src;
  uint64_t v84;
  llvm::Value *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  uint64_t v91;
  _QWORD v92[3];
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&v86, "f8e4m3");
  LOWORD(v89) = 0;
  std::string::basic_string[abi:nn180100]<0>(v90, "f8e4m3fn");
  LOWORD(v91) = 1;
  std::string::basic_string[abi:nn180100]<0>(v92, "f8e5m2");
  v11 = 0;
  v12 = 0;
  LOWORD(v93) = 2;
  v81 = 0;
  v82 = 0;
  v80 = &v81;
  while (1)
  {
    v13 = &v86 + 4 * v12;
    v14 = &v81;
    if (v80 != &v81)
    {
      v15 = v11;
      v16 = &v81;
      if (v11)
      {
        do
        {
          v14 = (uint64_t **)v15;
          v15 = (uint64_t *)v15[1];
        }
        while (v15);
      }
      else
      {
        do
        {
          v14 = (uint64_t **)v16[2];
          v37 = *v14 == (uint64_t *)v16;
          v16 = v14;
        }
        while (v37);
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v14 + 4, &v86 + 4 * v12))
      {
        v17 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v80, &v78, &v86 + 4 * v12);
LABEL_11:
        if (*v17)
          goto LABEL_20;
        goto LABEL_14;
      }
    }
    if (v11)
    {
      v78 = v14;
      v17 = v14 + 1;
      goto LABEL_11;
    }
    v78 = &v81;
    v17 = &v81;
LABEL_14:
    v18 = (char *)operator new(0x40uLL);
    v19 = (std::string *)(v18 + 32);
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)*v13, (std::string::size_type)v13[1]);
    }
    else
    {
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
      *((_QWORD *)v18 + 6) = v13[2];
    }
    *((_WORD *)v18 + 28) = v90[4 * v12 - 1];
    v20 = v78;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v20;
    *v17 = (uint64_t *)v18;
    if (*v80)
    {
      v80 = (uint64_t **)*v80;
      v18 = (char *)*v17;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v81, (uint64_t *)v18);
    ++v82;
LABEL_20:
    if (++v12 == 3)
      break;
    v11 = v81;
  }
  for (i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(v92[i + 2]) < 0)
      operator delete((void *)v92[i]);
  }
  std::string::basic_string[abi:nn180100]<0>(&v86, "f32");
  v22 = (llvm::Type **)(a1 + 21);
  v89 = a1[21];
  std::string::basic_string[abi:nn180100]<0>(v90, "f16");
  v91 = a1[19];
  std::string::basic_string[abi:nn180100]<0>(v92, "bf16");
  v23 = 0;
  v93 = a1[20];
  v79[0] = 0;
  v79[1] = 0;
  v78 = (uint64_t **)v79;
  do
  {
    std::__tree<std::__value_type<std::string,llvm::Type *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::Type *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::Type *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,llvm::Type *> const&>((uint64_t)&v78, v79, (void **)((char *)&v86 + v23), (uint64_t)&v86 + v23);
    v23 += 32;
  }
  while (v23 != 96);
  for (j = 0; j != -12; j -= 4)
  {
    if (SHIBYTE(v92[j + 2]) < 0)
      operator delete((void *)v92[j]);
  }
  v75 = *(_OWORD *)a2;
  v76 = *(_QWORD *)(a2 + 16);
  if (v76)
    llvm::MetadataTracking::track();
  v77 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v75);
  if (v76)
    llvm::MetadataTracking::untrack();
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v90[0]) = 257;
  v27 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v26, v25, (const llvm::Twine *)&v86);
  if (a6)
  {
    if (MGGetBoolAnswer())
    {
      Value = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_HFP8_ENABLE_SATURATE", v28);
      FPExt = (llvm::Value *)a3;
      if (Value && *Value != 48)
        atoi(Value);
    }
    else
    {
      FPExt = (llvm::Value *)a3;
    }
    v50 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v90[0]) = 257;
    v51 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v50, v27, (const llvm::Twine *)&v86);
    std::map<std::string,llvm::Type *>::at((uint64_t)&v80, a5);
    v52 = (llvm::Value *)llvm::ConstantInt::get();
    LOWORD(v90[0]) = 257;
    v53 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v52, v51, (const llvm::Twine *)&v86);
    if (a7)
    {
      LOWORD(v90[0]) = 257;
      v54 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPExt, v54, (const llvm::Twine *)&v86);
      LOWORD(v90[0]) = 257;
      v56 = (llvm::Value *)llvm::ConstantInt::get();
      v57 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), FPExt, v56, (const llvm::Twine *)&v86);
      FPExt = (llvm::Value *)Element;
    }
    else
    {
      v57 = (llvm::Value *)llvm::ConstantFP::get();
    }
    v58 = a4;
    v59 = *((char *)a4 + 23);
    if (v59 < 0)
    {
      if (*((_QWORD *)a4 + 1) != 3)
        goto LABEL_88;
      v58 = *(unsigned __int16 **)a4;
    }
    else if (v59 != 3)
    {
      goto LABEL_88;
    }
    v60 = *v58;
    v61 = *((unsigned __int8 *)v58 + 2);
    if (v60 != 13158 || v61 != 50)
    {
LABEL_88:
      v63 = *v22;
      LOWORD(v90[0]) = 257;
      FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 1), FPExt, v63, (const llvm::Twine *)&v86);
      v64 = *v22;
      LOWORD(v90[0]) = 257;
      v57 = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt((llvm::IRBuilderBase *)(a1 + 1), v57, v64, (const llvm::Twine *)&v86);
    }
    v65 = &v74;
    std::string::basic_string[abi:nn180100]<0>(&v74, "llvm.agx3.pack.hfp8");
    v66 = (llvm::Value *)a1[21];
    __src = a1[24];
    v84 = (uint64_t)v66;
    v85 = v66;
    v86 = &v88;
    v87 = 0x200000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v86, &__src, &v86);
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0
      || (v65 = (std::string *)v74.__r_.__value_.__r.__words[0]) != 0)
    {
      strlen((const char *)v65);
    }
    llvm::FunctionType::get();
    llvm::Module::getOrInsertFunction();
    v68 = v67;
    if (v86 != &v88)
      free(v86);
    __src = v53;
    v84 = (uint64_t)FPExt;
    v85 = v57;
    LOWORD(v90[0]) = 257;
    v44 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v68 + 24), v68, (uint64_t)&__src, 3, (uint64_t)&v86);
    if ((a7 & 1) == 0)
    {
      v69 = a1[23];
      LOWORD(v90[0]) = 257;
      Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, (uint64_t)v44, v69, (uint64_t)&v86);
LABEL_96:
      v44 = (llvm::Value *)Cast;
    }
    goto LABEL_97;
  }
  std::map<std::string,llvm::Type *>::at((uint64_t)&v80, a4);
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v90[0]) = 257;
  v32 = llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 1), v31, v27, (const llvm::Twine *)&v86);
  v33 = *((char *)a5 + 23);
  if (v33 < 0)
  {
    if (*((_QWORD *)a5 + 1) != 3)
      goto LABEL_51;
    v34 = *(unsigned __int16 **)a5;
  }
  else
  {
    v34 = a5;
    if (v33 != 3)
      goto LABEL_51;
  }
  v35 = *v34;
  v36 = *((unsigned __int8 *)v34 + 2);
  v37 = v35 == 12646 && v36 == 54;
  if (!v37)
LABEL_51:
    v22 = (llvm::Type **)std::map<std::string,llvm::Type *>::at((uint64_t)&v78, a5);
  v38 = *v22;
  if ((a7 & 1) == 0)
  {
    v39 = a1[24];
    LOWORD(v90[0]) = 257;
    a3 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 39, a3, v39, (uint64_t)&v86);
  }
  v40 = &v74;
  std::string::basic_string[abi:nn180100]<0>(&v74, "llvm.agx3.unpack.hfp8.");
  if (v38 == (llvm::Type *)a1[21])
    v41 = "f32";
  else
    v41 = "bf16";
  std::string::append(&v74, v41);
  llvm::FixedVectorType::get();
  __src = a1[24];
  v84 = __src;
  v86 = &v88;
  v87 = 0x200000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v86, &__src, &v85);
  if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0
    || (v40 = (std::string *)v74.__r_.__value_.__r.__words[0]) != 0)
  {
    strlen((const char *)v40);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v43 = v42;
  if (v86 != &v88)
    free(v86);
  __src = v32;
  v84 = a3;
  LOWORD(v90[0]) = 257;
  v44 = llvm::IRBuilderBase::CreateCall((uint64_t)(a1 + 1), *(_QWORD *)(v43 + 24), v43, (uint64_t)&__src, 2, (uint64_t)&v86);
  if (!a7)
  {
    LOWORD(v90[0]) = 257;
    v45 = (llvm::Value *)llvm::ConstantInt::get();
    v44 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 1), v44, v45, (const llvm::Twine *)&v86);
  }
  v46 = *((char *)a5 + 23);
  if (v46 < 0)
  {
    if (*((_QWORD *)a5 + 1) != 3)
      goto LABEL_97;
    a5 = *(unsigned __int16 **)a5;
  }
  else if (v46 != 3)
  {
    goto LABEL_97;
  }
  if (*a5 == 12646 && *((_BYTE *)a5 + 2) == 54)
  {
    v48 = (llvm::Type *)a1[19];
    LOWORD(v90[0]) = 257;
    Cast = llvm::IRBuilderBase::CreateFPTrunc((llvm::IRBuilderBase *)(a1 + 1), v44, v48, (const llvm::Twine *)&v86);
    goto LABEL_96;
  }
LABEL_97:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v79[0]);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((char *)v81);
  return v44;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildConvertHFP8_Vector(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t i;
  unsigned int v14;
  uint64_t v15;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::Value *v21;
  llvm::Value *Element;
  llvm::Value *v23;
  llvm::Value *InsertElement;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  uint64_t v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *Cast;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value *v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  llvm::Value *v46;
  uint64_t v47;
  llvm::Value *v48;
  llvm::Value *v49;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string v58;
  std::string v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  std::string v63;
  std::string v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  std::string v68;
  std::string v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  _BYTE v73[32];
  __int16 v74;
  char **v75;
  char *v76[2];
  __int128 v77;
  uint64_t v78;
  int v79;
  _QWORD v80[4];
  _QWORD v81[4];
  _QWORD v82[4];
  _QWORD v83[4];
  _QWORD v84[4];
  _QWORD v85[6];

  v85[4] = *MEMORY[0x1E0C80C00];
  v77 = *(_OWORD *)a2;
  v78 = *(_QWORD *)(a2 + 16);
  if (v78)
    llvm::MetadataTracking::track();
  v79 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v77);
  if (v78)
    llvm::MetadataTracking::untrack();
  v11 = *(_DWORD *)(*(_QWORD *)a3 + 32);
  std::string::basic_string[abi:nn180100]<0>(v80, "f32");
  v80[3] = *(_QWORD *)(a1 + 168);
  std::string::basic_string[abi:nn180100]<0>(v81, "f16");
  v81[3] = *(_QWORD *)(a1 + 152);
  std::string::basic_string[abi:nn180100]<0>(v82, "bf16");
  v82[3] = *(_QWORD *)(a1 + 160);
  std::string::basic_string[abi:nn180100]<0>(v83, "f8e5m2");
  v83[3] = *(_QWORD *)(a1 + 184);
  std::string::basic_string[abi:nn180100]<0>(v84, "f8e4m3");
  v84[3] = *(_QWORD *)(a1 + 184);
  std::string::basic_string[abi:nn180100]<0>(v85, "f8e4m3fn");
  v12 = 0;
  v85[3] = *(_QWORD *)(a1 + 184);
  v76[0] = 0;
  v76[1] = 0;
  v75 = v76;
  do
  {
    std::__tree<std::__value_type<std::string,llvm::Type *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::Type *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::Type *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,llvm::Type *> const&>((uint64_t)&v75, v76, &v80[v12], (uint64_t)&v80[v12]);
    v12 += 4;
  }
  while (v12 != 24);
  for (i = 0; i != -24; i -= 4)
  {
    if (SHIBYTE(v85[i + 2]) < 0)
      operator delete((void *)v85[i]);
  }
  v14 = v11 >> 1;
  std::map<std::string,llvm::Type *>::at((uint64_t)&v75, (_QWORD *)a5);
  v15 = llvm::FixedVectorType::get();
  v53 = a6;
  if (a6)
  {
    v51 = v15;
    llvm::FixedVectorType::get();
    v16 = (llvm::Value *)llvm::UndefValue::get();
    v52 = v11;
    if (v11 >= 2)
    {
      v17 = 0;
      if (v14 <= 1)
        v18 = 1;
      else
        v18 = v14;
      v54 = a5;
      v55 = v18;
      v19 = 1;
      do
      {
        std::map<std::string,llvm::Type *>::at((uint64_t)&v75, (_QWORD *)a4);
        llvm::FixedVectorType::get();
        v20 = (llvm::Value *)llvm::UndefValue::get();
        LOWORD(v81[0]) = 257;
        v21 = (llvm::Value *)llvm::ConstantInt::get();
        Element = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v21, (const llvm::Twine *)v80);
        v74 = 257;
        v23 = (llvm::Value *)llvm::ConstantInt::get();
        InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v20, Element, v23, (const llvm::Twine *)v73);
        LOWORD(v81[0]) = 257;
        v25 = (llvm::Value *)llvm::ConstantInt::get();
        v26 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v25, (const llvm::Twine *)v80);
        v74 = 257;
        v27 = (llvm::Value *)llvm::ConstantInt::get();
        v28 = llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), InsertElement, v26, v27, (const llvm::Twine *)v73);
        v70 = *(_OWORD *)(a1 + 56);
        llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
        v72 = *(_DWORD *)(a1 + 104);
        if (*(char *)(a4 + 23) < 0)
          std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
        else
          v69 = *(std::string *)a4;
        a5 = v54;
        if (*(char *)(v54 + 23) < 0)
          std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v54, *(_QWORD *)(v54 + 8));
        else
          v68 = *(std::string *)v54;
        v29 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, std::string *, std::string *, uint64_t, uint64_t))(*(_QWORD *)a1 + 800))(a1, &v70, v28, &v69, &v68, 1, 1);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (v71)
          llvm::MetadataTracking::untrack();
        LOWORD(v81[0]) = 257;
        v30 = (llvm::Value *)llvm::ConstantInt::get();
        v16 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v16, v29, v30, (const llvm::Twine *)v80);
        ++v17;
        v19 += 2;
      }
      while (v55 != v17);
    }
    LOWORD(v81[0]) = 257;
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)v16, v51, (uint64_t)v80);
  }
  else
  {
    v32 = llvm::FixedVectorType::get();
    LOWORD(v81[0]) = 257;
    a3 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 49, (uint64_t)a3, v32, (uint64_t)v80);
    Cast = (llvm::Value *)llvm::UndefValue::get();
    if (v11 < 2)
      goto LABEL_50;
    v52 = v11;
    v33 = 0;
    if (v14 <= 1)
      v34 = 1;
    else
      v34 = v14;
    v56 = v34;
    v35 = 1;
    do
    {
      LOWORD(v81[0]) = 257;
      v36 = (llvm::Value *)llvm::ConstantInt::get();
      v37 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v36, (const llvm::Twine *)v80);
      v65 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v67 = *(_DWORD *)(a1 + 104);
      if (*(char *)(a4 + 23) < 0)
        std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      else
        v64 = *(std::string *)a4;
      if (*(char *)(a5 + 23) < 0)
        std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
      else
        v63 = *(std::string *)a5;
      v38 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, std::string *, std::string *, _QWORD, uint64_t))(*(_QWORD *)a1 + 800))(a1, &v65, v37, &v64, &v63, 0, 1);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (v66)
        llvm::MetadataTracking::untrack();
      LOWORD(v81[0]) = 257;
      v39 = (llvm::Value *)llvm::ConstantInt::get();
      v40 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v38, v39, (const llvm::Twine *)v80);
      v74 = 257;
      v41 = (llvm::Value *)llvm::ConstantInt::get();
      v42 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), Cast, v40, v41, (const llvm::Twine *)v73);
      LOWORD(v81[0]) = 257;
      v43 = (llvm::Value *)llvm::ConstantInt::get();
      v44 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v38, v43, (const llvm::Twine *)v80);
      v74 = 257;
      v45 = (llvm::Value *)llvm::ConstantInt::get();
      Cast = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), v42, v44, v45, (const llvm::Twine *)v73);
      ++v33;
      v35 += 2;
    }
    while (v56 != v33);
  }
  LOBYTE(v11) = v52;
LABEL_50:
  if ((v11 & 1) != 0)
  {
    LOWORD(v81[0]) = 257;
    v46 = (llvm::Value *)llvm::ConstantInt::get();
    v47 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), a3, v46, (const llvm::Twine *)v80);
    v60 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
    v62 = *(_DWORD *)(a1 + 104);
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v59 = *(std::string *)a4;
    if (*(char *)(a5 + 23) < 0)
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    else
      v58 = *(std::string *)a5;
    v48 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t, std::string *, std::string *, _QWORD, _QWORD))(*(_QWORD *)a1 + 800))(a1, &v60, v47, &v59, &v58, v53, 0);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (v61)
      llvm::MetadataTracking::untrack();
    LOWORD(v81[0]) = 257;
    v49 = (llvm::Value *)llvm::ConstantInt::get();
    Cast = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement((llvm::IRBuilderBase *)(a1 + 8), Cast, v48, v49, (const llvm::Twine *)v80);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v76[0]);
  return Cast;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::supportsPrimitiveID()
{
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::supportsBarycentricCoords()
{
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::supportsMeshShading()
{
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::supportsHWMeshShading()
{
  return 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::needsShaderDepthClamp()
{
  return 1;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::createGPUVAMasks(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectionShaderArgument(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, unsigned int a6)
{
  unsigned int v11;
  uint64_t v12;
  llvm::Type *v13;
  llvm::Type *v14;
  uint64_t v15;
  llvm::BasicBlock *v16;
  uint64_t FirstInsertionPt;
  llvm::Instruction *v18;
  llvm::Value *v19;
  llvm::Type **Alloca;
  char *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::Value *v26;
  llvm::Type *v27;
  _BYTE v30[32];
  __int16 v31;
  void *v32[2];
  char v33;
  void *__p[2];
  unsigned __int8 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  _QWORD v39[4];
  llvm::Value *PointerCast;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v11 = 1;
  v12 = llvm::PointerType::get();
  v13 = 0;
  v14 = (llvm::Type *)llvm::PointerType::get();
  switch(a3)
  {
    case 0:
    case 1:
    case 9:
    case 10:
      v13 = *(llvm::Type **)(a1 + 264);
      break;
    case 2:
    case 3:
    case 13:
    case 14:
    case 21:
    case 23:
    case 24:
      v13 = *(llvm::Type **)(a1 + 168);
      break;
    case 4:
    case 5:
    case 6:
    case 16:
    case 17:
    case 22:
    case 27:
      goto LABEL_7;
    case 7:
    case 8:
      if ((a5 & 0x40) != 0)
        v11 = a6;
      else
        v11 = 1;
LABEL_7:
      v13 = *(llvm::Type **)(a1 + 200);
      break;
    case 11:
      v13 = *(llvm::Type **)(a1 + 224);
      break;
    case 12:
    case 15:
      v13 = *(llvm::Type **)(a1 + 184);
      break;
    case 19:
    case 20:
      v13 = *(llvm::Type **)(a1 + 264);
      v11 = 4;
      break;
    case 25:
    case 26:
      v13 = (llvm::Type *)v12;
      break;
    default:
      break;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 56) + 80);
  if (v15)
    v16 = (llvm::BasicBlock *)(v15 - 24);
  else
    v16 = 0;
  FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v16);
  if (FirstInsertionPt)
    v18 = (llvm::Instruction *)(FirstInsertionPt - 24);
  else
    v18 = 0;
  llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), v18);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(PointerCast) = 257;
  Alloca = (llvm::Type **)llvm::IRBuilderBase::CreateAlloca((llvm::BasicBlock **)(a1 + 8), v13, v19, (const llvm::Twine *)v39);
  v36 = *(_OWORD *)a2;
  v37 = *(_QWORD *)(a2 + 16);
  if (v37)
    llvm::MetadataTracking::track();
  v38 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v36);
  if (v37)
    llvm::MetadataTracking::untrack();
  if (*(_BYTE *)(a1 + 1810))
    v21 = "agx.get_intersection_shader_argument_legacy";
  else
    v21 = "agx.get_intersection_shader_argument";
  std::string::basic_string[abi:nn180100]<0>(v32, v21);
  v22 = __p;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v32, (_DWORD *)a4);
  if ((v35 & 0x80u) == 0)
  {
    v23 = v35;
  }
  else
  {
    v22 = (void **)__p[0];
    v23 = (uint64_t)__p[1];
  }
  v24 = *(_QWORD *)(a1 + 144);
  v25 = *(_QWORD *)(a4 + 8);
  v39[0] = *(_QWORD *)(a4 + 24);
  v39[1] = v25;
  v39[2] = llvm::ConstantInt::get();
  v39[3] = llvm::ConstantInt::get();
  v31 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), Alloca, v14, (const llvm::Twine *)v30);
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v22, v23, v24, (uint64_t)v39, 5uLL);
  if ((char)v35 < 0)
    operator delete(__p[0]);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v11 <= 1)
  {
    LOWORD(PointerCast) = 257;
    v27 = AGCLLVMBuilder::tryDeducePointeeType(Alloca, v26);
    return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v27, (uint64_t)Alloca, 0, (uint64_t)v39);
  }
  return (uint64_t)Alloca;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVRIDAndCoreID(uint64_t a1)
{
  llvm::Value *v2;
  llvm::Value *v3;
  uint64_t v4;
  llvm::Value *v5;
  llvm::Value *AShr;
  llvm::Value *v7;
  _WORD v9[20];
  _BYTE v10[32];
  __int16 v11;

  v2 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.ray.pointer", 21, *(_QWORD *)(a1 + 192), 0, 0);
  v3 = (llvm::Value *)llvm::ConstantInt::get();
  v11 = 257;
  v4 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v2, v3, (const llvm::Twine *)v10);
  v5 = (llvm::Value *)llvm::ConstantInt::get();
  v11 = 257;
  AShr = (llvm::Value *)llvm::IRBuilderBase::CreateAShr((llvm::IRBuilderBase *)(a1 + 8), v2, v5, (const llvm::Twine *)v10);
  v7 = (llvm::Value *)llvm::ConstantInt::get();
  v9[16] = 257;
  llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), AShr, v7, (const llvm::Twine *)v9);
  return v4;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getVRIDAllocation(uint64_t a1)
{
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.ray.id", 16, *(_QWORD *)(a1 + 192), 0, 0);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getRayTraversalDepth(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2 >= 0x1F)
    v2 = 31;
  else
    v2 = a2;
  v3 = 114 * v2;
  if (v3 >= 0x388)
    v3 = 904;
  return (v3 + 119) & 0x7F8;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSGlobalBindingTablePointer(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  llvm::Type *v6;
  llvm::Value *PointerCast;
  uint64_t v8;
  uint64_t v9;
  uint64_t Cast;
  llvm::Type **PerVridSetDataPtr;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::Type *v14;
  llvm::Type **GEP;
  llvm::Value *v16;
  llvm::Type *v17;
  _QWORD v19[4];
  __int16 v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v21 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a2 + 16);
  if (v22)
    llvm::MetadataTracking::track();
  v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Type *)llvm::PointerType::get();
  v20 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v19);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
  v9 = *(_QWORD *)(a1 + 200);
  v19[0] = "vrid";
  v20 = 259;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v8, v9, (uint64_t)v19);
  PerVridSetDataPtr = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, Cast, PointerCast);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 960))(*(_QWORD *)(a1 + 824));
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(PerVridSetDataPtr, v13);
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v14, (llvm::Value *)PerVridSetDataPtr, v12, (const llvm::Twine *)v19);
  v20 = 257;
  v16 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), GEP, v6, (const llvm::Twine *)v19);
  v17 = *(llvm::Type **)(a1 + 208);
  v20 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v17, (uint64_t)v16, 0, (uint64_t)v19);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSPerEncoderIndirectionTablePointer(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  llvm::Type *v6;
  llvm::Value *PointerCast;
  llvm::Type *v8;
  llvm::Value *v9;
  llvm::Type **GEP;
  llvm::Value *v11;
  llvm::Type *v12;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Type *)llvm::PointerType::get();
  v15 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v14);
  v8 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 864))(*(_QWORD *)(a1 + 824));
  v9 = (llvm::Value *)llvm::ConstantInt::get();
  v15 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v8, PointerCast, v9, (const llvm::Twine *)v14);
  v15 = 257;
  v11 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), GEP, v6, (const llvm::Twine *)v14);
  v12 = *(llvm::Type **)(a1 + 208);
  v15 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v12, (uint64_t)v11, 0, (uint64_t)v14);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSGOTPointer(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  llvm::Type *v6;
  llvm::Value *PointerCast;
  uint64_t v8;
  uint64_t v9;
  uint64_t Cast;
  llvm::Type **PerVridSetDataPtr;
  llvm::Value *v12;
  llvm::Value *v13;
  llvm::Type *v14;
  llvm::Type **GEP;
  llvm::Value *v16;
  llvm::Type *v17;
  _QWORD v19[4];
  __int16 v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v21 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a2 + 16);
  if (v22)
    llvm::MetadataTracking::track();
  v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Type *)llvm::PointerType::get();
  v20 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v19);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
  v9 = *(_QWORD *)(a1 + 200);
  v19[0] = "vrid";
  v20 = 259;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v8, v9, (uint64_t)v19);
  PerVridSetDataPtr = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, Cast, PointerCast);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 968))(*(_QWORD *)(a1 + 824));
  v12 = (llvm::Value *)llvm::ConstantInt::get();
  v20 = 257;
  v14 = AGCLLVMBuilder::tryDeducePointeeType(PerVridSetDataPtr, v13);
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v14, (llvm::Value *)PerVridSetDataPtr, v12, (const llvm::Twine *)v19);
  v20 = 257;
  v16 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), GEP, v6, (const llvm::Twine *)v19);
  v17 = *(llvm::Type **)(a1 + 208);
  v20 = 257;
  return llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v17, (uint64_t)v16, 0, (uint64_t)v19);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSConfiguration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, llvm::Type **a11, uint64_t a12, llvm::Type **a13, llvm::Type **a14, uint64_t a15, uint64_t a16, char a17)
{
  llvm::Type *v20;
  llvm::Type *v21;
  llvm::Value *v22;
  llvm::Type *v23;
  llvm::Type **AlignedLoad;
  llvm::Value *PointerCast;
  llvm::Type *v26;
  llvm::Type *v27;
  llvm::Value *v28;
  llvm::Type **GEP;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Type *v32;
  uint64_t v33;
  llvm::Type *v34;
  llvm::BasicBlock *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Instruction *v39;
  uint64_t v40;
  llvm::Instruction *v41;
  uint64_t v42;
  uint64_t ICmp;
  llvm::Value *v44;
  uint64_t LShr;
  llvm::Value *v46;
  uint64_t v47;
  uint64_t v48;
  llvm::Type **v49;
  llvm::Type **v50;
  llvm::Type **v51;
  llvm::Value *v52;
  llvm::Type **v53;
  llvm::Type *v54;
  llvm::Value *v55;
  uint64_t v56;
  uint64_t v57;
  llvm::Type **Cast;
  llvm::Type *v59;
  llvm::Value *v60;
  uint64_t v61;
  llvm::Value *v62;
  llvm::Type *v63;
  uint64_t *v64;
  llvm::Type **v65;
  llvm::Value *v66;
  llvm::Type *v67;
  uint64_t v68;
  uint64_t v69;
  llvm::Type **v70;
  llvm::Type *v71;
  llvm::Value *v72;
  uint64_t v73;
  llvm::Type *v74;
  llvm::Value *v75;
  llvm::Type **v76;
  llvm::Value *v77;
  llvm::Value *v78;
  llvm::Type *v79;
  uint64_t v80;
  llvm::Type **Value;
  llvm::Type **v82;
  llvm::Type *v83;
  llvm::Value *v84;
  uint64_t v85;
  llvm::Type *v86;
  llvm::Value *v87;
  llvm::Type **v88;
  llvm::Value *v89;
  llvm::Value *v90;
  llvm::Type *v91;
  uint64_t v92;
  llvm::Type **v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  llvm::Value *PerVridSetDataPtr;
  llvm::Type *v98;
  llvm::Value *v99;
  uint64_t v100;
  llvm::Type *v101;
  llvm::Value *v102;
  uint64_t v103;
  llvm::Type *v104;
  llvm::Value *v105;
  uint64_t v106;
  llvm::Type **v107;
  llvm::Type *v108;
  llvm::Value *v109;
  uint64_t v110;
  llvm::Value *v111;
  llvm::Type *v112;
  llvm::Value *v113;
  llvm::Type **v114;
  llvm::Value *v115;
  uint64_t v116;
  llvm::Type **v117;
  llvm::Type *v118;
  llvm::Value *v119;
  llvm::Type **v120;
  llvm::Value *v121;
  llvm::Value *v122;
  uint64_t v123;
  llvm::Type **v124;
  llvm::Type **v125;
  llvm::Type *v126;
  uint64_t v127;
  uint64_t v128;
  llvm::Type **v129;
  llvm::Type *v130;
  llvm::Value *v131;
  uint64_t v132;
  llvm::Type **v133;
  llvm::Value *v134;
  llvm::Type *v135;
  uint64_t v136;
  uint64_t v137;
  llvm::Type **v138;
  llvm::Type *v139;
  llvm::Value *v140;
  uint64_t v141;
  llvm::Type **v142;
  llvm::Value *v143;
  llvm::Type *v144;
  uint64_t v145;
  uint64_t v146;
  llvm::Type **v147;
  llvm::Type *v148;
  llvm::Value *v149;
  uint64_t v150;
  llvm::Type **v151;
  llvm::Value *v152;
  llvm::Type *v153;
  uint64_t v154;
  uint64_t v155;
  llvm::Type **v156;
  llvm::Type *v157;
  llvm::Value *v158;
  uint64_t v159;
  llvm::Type **v160;
  llvm::Value *v161;
  llvm::Type *v162;
  uint64_t v163;
  uint64_t v164;
  llvm::Type **v165;
  llvm::Type *v166;
  llvm::Value *v167;
  uint64_t v168;
  llvm::Type **v169;
  llvm::Value *v170;
  llvm::Type *v171;
  uint64_t v172;
  uint64_t v173;
  llvm::Type **v174;
  llvm::Type *v175;
  llvm::Value *v176;
  uint64_t v177;
  llvm::Type **v178;
  llvm::Value *v179;
  llvm::Type *v180;
  uint64_t v181;
  uint64_t v182;
  llvm::Type **v183;
  llvm::Type *v184;
  llvm::Value *v185;
  uint64_t v186;
  llvm::Instruction *Br;
  uint64_t result;
  llvm::Type *v189;
  uint64_t TypeByName;
  llvm::Type **v192;
  llvm::Type **v193;
  uint64_t v194;
  llvm::Type *v200;
  llvm::CmpInst **v201;
  llvm::BasicBlock *v202;
  llvm::BasicBlock *v203;
  llvm::Type *v204;
  __int128 v205;
  uint64_t v206;
  int v207;
  _DWORD v208[8];
  __int16 v209;
  _QWORD v210[4];
  __int16 v211;
  uint64_t *v212[2];
  _QWORD v213[4];
  __int16 v214;
  uint64_t v215;

  v215 = *MEMORY[0x1E0C80C00];
  v205 = *(_OWORD *)a2;
  v206 = *(_QWORD *)(a2 + 16);
  if (v206)
    llvm::MetadataTracking::track();
  v194 = a6;
  v207 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v205);
  if (v206)
    llvm::MetadataTracking::untrack();
  v20 = (llvm::Type *)llvm::PointerType::get();
  v21 = (llvm::Type *)llvm::PointerType::get();
  v211 = 257;
  v23 = AGCLLVMBuilder::tryDeducePointeeType(a11, v22);
  AlignedLoad = (llvm::Type **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v23, (uint64_t)a11, 0, (uint64_t)v210);
  v209 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), AlignedLoad, v20, (const llvm::Twine *)v208);
  v26 = *(llvm::Type **)(a1 + 200);
  v27 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 888))(*(_QWORD *)(a1 + 824));
  v28 = (llvm::Value *)llvm::ConstantInt::get();
  v211 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v27, PointerCast, v28, (const llvm::Twine *)v210);
  v209 = 257;
  v30 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), GEP, v21, (const llvm::Twine *)v208);
  v214 = 257;
  v31 = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v26, (uint64_t)v30, 0, (uint64_t)v213);
  v32 = *(llvm::Type **)(a1 + 200);
  v211 = 257;
  v33 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v21, a12, 0, (uint64_t)v210);
  v209 = 257;
  v201 = (llvm::CmpInst **)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v32, v33, 0, (uint64_t)v208);
  v192 = (llvm::Type **)llvm::ConstantInt::get();
  v193 = (llvm::Type **)llvm::ConstantInt::get();
  v189 = (llvm::Type *)llvm::PointerType::get();
  v200 = (llvm::Type *)llvm::PointerType::get();
  v204 = (llvm::Type *)llvm::PointerType::get();
  TypeByName = llvm::StructType::getTypeByName();
  v34 = (llvm::Type *)llvm::PointerType::get();
  v35 = 0;
  if ((a17 & 1) == 0)
  {
    v36 = *(_QWORD *)(a1 + 56);
    v210[0] = "entry.continue";
    v211 = 259;
    v202 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    v210[0] = "scs.config";
    v211 = 259;
    v37 = operator new();
    llvm::BasicBlock::BasicBlock();
    v38 = *(_QWORD *)(v36 + 40);
    if (v38 == v36 + 40)
    {
      v41 = 0;
    }
    else
    {
      v39 = (llvm::Instruction *)(v38 - 24);
      if (v38)
        v40 = v38 - 24;
      else
        v40 = 0;
      if (*(unsigned __int8 *)(v40 + 16) - 29 >= 0xB)
        v41 = 0;
      else
        v41 = v39;
    }
    llvm::Instruction::eraseFromParent(v41);
    *(_QWORD *)(a1 + 56) = v36;
    *(_QWORD *)(a1 + 64) = v36 + 40;
    v42 = llvm::ConstantInt::get();
    v210[0] = "scs.needs_config";
    v211 = 259;
    ICmp = llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 33, v201, v42, (uint64_t)v210);
    v35 = v202;
    llvm::IRBuilderBase::CreateCondBr((uint64_t *)(a1 + 8), ICmp, v37, (uint64_t)v202);
    *(_QWORD *)(a1 + 56) = v37;
    *(_QWORD *)(a1 + 64) = v37 + 40;
  }
  v203 = v35;
  v211 = 257;
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v31, v44, (const llvm::Twine *)v210);
  v46 = (llvm::Value *)llvm::ConstantInt::get();
  v211 = 257;
  v47 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v31, v46, (const llvm::Twine *)v210);
  v48 = *(_QWORD *)(a1 + 144);
  v213[0] = LShr;
  v49 = (llvm::Type **)a3[3];
  v211 = 257;
  v213[1] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v49, v189, (const llvm::Twine *)v210);
  v213[2] = v47;
  v50 = (llvm::Type **)a3[5];
  v209 = 257;
  v213[3] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v50, v34, (const llvm::Twine *)v208);
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.kick.scoped.ray.data.stride.driver.user.data", 54, v48, (uint64_t)v213, 4uLL);
  v51 = (llvm::Type **)a3[2];
  v211 = 257;
  v52 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v51, v204, (const llvm::Twine *)v210);
  v53 = (llvm::Type **)llvm::ConstantInt::get();
  v54 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 752))(*(_QWORD *)(a1 + 824));
  v55 = (llvm::Value *)llvm::ConstantInt::get();
  v211 = 257;
  v56 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v54, v52, v55, (const llvm::Twine *)v210);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v53, v56, 0);
  v57 = *(_QWORD *)(a1 + 208);
  v211 = 257;
  Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, (uint64_t)v31, v57, (uint64_t)v210);
  v59 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 760))(*(_QWORD *)(a1 + 824));
  v60 = (llvm::Value *)llvm::ConstantInt::get();
  v209 = 257;
  v61 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v59, v52, v60, (const llvm::Twine *)v208);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), Cast, v61, 0);
  v211 = 257;
  v63 = AGCLLVMBuilder::tryDeducePointeeType(a11, v62);
  v64 = (uint64_t *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v63, (uint64_t)a11, 0, (uint64_t)v210);
  v212[0] = (uint64_t *)llvm::ConstantInt::get();
  v212[1] = (uint64_t *)llvm::ConstantInt::get();
  v209 = 257;
  v65 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(a1 + 8, TypeByName, v64, v212, 2, (uint64_t)v208);
  v214 = 257;
  v67 = AGCLLVMBuilder::tryDeducePointeeType(v65, v66);
  v68 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v67, (uint64_t)v65, 0, (uint64_t)v213);
  v69 = *(_QWORD *)(a1 + 208);
  v211 = 257;
  v70 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v68, v69, (uint64_t)v210);
  v71 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 816))(*(_QWORD *)(a1 + 824));
  v72 = (llvm::Value *)llvm::ConstantInt::get();
  v209 = 257;
  v73 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v71, v52, v72, (const llvm::Twine *)v208);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v70, v73, 0);
  if (a13)
  {
    v74 = *(llvm::Type **)(a1 + 208);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 840))(*(_QWORD *)(a1 + 824));
    v75 = (llvm::Value *)llvm::ConstantInt::get();
    v211 = 257;
    v76 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v74, v52, v75, (const llvm::Twine *)v210);
    v209 = 257;
    v77 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v76, v200, (const llvm::Twine *)v208);
    v211 = 257;
    v79 = AGCLLVMBuilder::tryDeducePointeeType(a13, v78);
    v80 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v79, (uint64_t)a13, 0, (uint64_t)v210);
    v208[0] = 0;
    v210[0] = "user_data_start";
    v211 = 259;
    Value = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(a1 + 8, v80, (uint64_t)v208, 1, (uint64_t)v210);
    v208[0] = 1;
    v210[0] = "user_data_end";
    v211 = 259;
    v82 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(a1 + 8, v80, (uint64_t)v208, 1, (uint64_t)v210);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), Value, (uint64_t)v77, 0);
    v83 = *(llvm::Type **)(a1 + 200);
    v84 = (llvm::Value *)llvm::ConstantInt::get();
    v211 = 257;
    v85 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v83, v77, v84, (const llvm::Twine *)v210);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v82, v85, 0);
  }
  if (a14)
  {
    v86 = *(llvm::Type **)(a1 + 208);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 848))(*(_QWORD *)(a1 + 824));
    v87 = (llvm::Value *)llvm::ConstantInt::get();
    v211 = 257;
    v88 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v86, v52, v87, (const llvm::Twine *)v210);
    v209 = 257;
    v89 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v88, v200, (const llvm::Twine *)v208);
    v211 = 257;
    v91 = AGCLLVMBuilder::tryDeducePointeeType(a14, v90);
    v92 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v91, (uint64_t)a14, 0, (uint64_t)v210);
    v208[0] = 0;
    v210[0] = "driver_data_start";
    v211 = 259;
    v93 = (llvm::Type **)llvm::IRBuilderBase::CreateExtractValue(a1 + 8, v92, (uint64_t)v208, 1, (uint64_t)v210);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v93, (uint64_t)v89, 0);
  }
  v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
  v95 = *(_QWORD *)(a1 + 200);
  v210[0] = "vrid";
  v211 = 259;
  v96 = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v94, v95, (uint64_t)v210);
  PerVridSetDataPtr = (llvm::Value *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, v96, v52);
  v98 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 928))(*(_QWORD *)(a1 + 824));
  v99 = (llvm::Value *)llvm::ConstantInt::get();
  v211 = 257;
  v100 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v98, PerVridSetDataPtr, v99, (const llvm::Twine *)v210);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v192, v100, 0);
  v101 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 936))(*(_QWORD *)(a1 + 824));
  v102 = (llvm::Value *)llvm::ConstantInt::get();
  v211 = 257;
  v103 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v101, PerVridSetDataPtr, v102, (const llvm::Twine *)v210);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v193, v103, 0);
  v104 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 944))(*(_QWORD *)(a1 + 824));
  v105 = (llvm::Value *)llvm::ConstantInt::get();
  v211 = 257;
  v106 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v104, PerVridSetDataPtr, v105, (const llvm::Twine *)v210);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v201, v106, 0);
  v107 = (llvm::Type **)llvm::ConstantInt::get();
  v108 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 952))(*(_QWORD *)(a1 + 824));
  v109 = (llvm::Value *)llvm::ConstantInt::get();
  v211 = 257;
  v110 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v108, PerVridSetDataPtr, v109, (const llvm::Twine *)v210);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v107, v110, 0);
  if (a15)
  {
    v112 = *(llvm::Type **)(a1 + 200);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 960))(*(_QWORD *)(a1 + 824));
    v113 = (llvm::Value *)llvm::ConstantInt::get();
    v211 = 257;
    v114 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v112, PerVridSetDataPtr, v113, (const llvm::Twine *)v210);
    v211 = 257;
    v115 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v114, v204, (const llvm::Twine *)v210);
    v116 = *(_QWORD *)(a1 + 208);
    v211 = 257;
    v117 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, a15, v116, (uint64_t)v210);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v117, (uint64_t)v115, 0);
  }
  if (v194)
  {
    v118 = *(llvm::Type **)(a1 + 200);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 968))(*(_QWORD *)(a1 + 824));
    v119 = (llvm::Value *)llvm::ConstantInt::get();
    v211 = 257;
    v120 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v118, PerVridSetDataPtr, v119, (const llvm::Twine *)v210);
    v209 = 257;
    v121 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v120, v204, (const llvm::Twine *)v208);
    v211 = 257;
    v122 = llvm::IRBuilderBase::CreateCall(a1 + 8, **(_QWORD **)(*(_QWORD *)v194 + 16), v194, 0, 0, (uint64_t)v210);
    v123 = *(_QWORD *)(a1 + 208);
    v209 = 257;
    v124 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, (uint64_t)v122, v123, (uint64_t)v208);
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v124, (uint64_t)v121, 0);
  }
  v125 = (llvm::Type **)a4[2];
  v211 = 257;
  v126 = AGCLLVMBuilder::tryDeducePointeeType(v125, v111);
  v127 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v126, (uint64_t)v125, 0, (uint64_t)v210);
  v128 = *(_QWORD *)(a1 + 208);
  v209 = 257;
  v129 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v127, v128, (uint64_t)v208);
  v130 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 768))(*(_QWORD *)(a1 + 824));
  v131 = (llvm::Value *)llvm::ConstantInt::get();
  v214 = 257;
  v132 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v130, v52, v131, (const llvm::Twine *)v213);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v129, v132, 0);
  v133 = (llvm::Type **)a4[5];
  v211 = 257;
  v135 = AGCLLVMBuilder::tryDeducePointeeType(v133, v134);
  v136 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v135, (uint64_t)v133, 0, (uint64_t)v210);
  v137 = *(_QWORD *)(a1 + 208);
  v209 = 257;
  v138 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v136, v137, (uint64_t)v208);
  v139 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 776))(*(_QWORD *)(a1 + 824));
  v140 = (llvm::Value *)llvm::ConstantInt::get();
  v214 = 257;
  v141 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v139, v52, v140, (const llvm::Twine *)v213);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v138, v141, 0);
  v142 = (llvm::Type **)a4[8];
  v211 = 257;
  v144 = AGCLLVMBuilder::tryDeducePointeeType(v142, v143);
  v145 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v144, (uint64_t)v142, 0, (uint64_t)v210);
  v146 = *(_QWORD *)(a1 + 208);
  v209 = 257;
  v147 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v145, v146, (uint64_t)v208);
  v148 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 784))(*(_QWORD *)(a1 + 824));
  v149 = (llvm::Value *)llvm::ConstantInt::get();
  v214 = 257;
  v150 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v148, v52, v149, (const llvm::Twine *)v213);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v147, v150, 0);
  v151 = *(llvm::Type ***)(a5 + 16);
  v211 = 257;
  v153 = AGCLLVMBuilder::tryDeducePointeeType(v151, v152);
  v154 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v153, (uint64_t)v151, 0, (uint64_t)v210);
  v155 = *(_QWORD *)(a1 + 208);
  v209 = 257;
  v156 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v154, v155, (uint64_t)v208);
  v157 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 792))(*(_QWORD *)(a1 + 824));
  v158 = (llvm::Value *)llvm::ConstantInt::get();
  v214 = 257;
  v159 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v157, v52, v158, (const llvm::Twine *)v213);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v156, v159, 0);
  v160 = *(llvm::Type ***)(a7 + 16);
  v211 = 257;
  v162 = AGCLLVMBuilder::tryDeducePointeeType(v160, v161);
  v163 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v162, (uint64_t)v160, 0, (uint64_t)v210);
  v164 = *(_QWORD *)(a1 + 208);
  v209 = 257;
  v165 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v163, v164, (uint64_t)v208);
  v166 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 800))(*(_QWORD *)(a1 + 824));
  v167 = (llvm::Value *)llvm::ConstantInt::get();
  v214 = 257;
  v168 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v166, v52, v167, (const llvm::Twine *)v213);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v165, v168, 0);
  v169 = *(llvm::Type ***)(a8 + 16);
  v211 = 257;
  v171 = AGCLLVMBuilder::tryDeducePointeeType(v169, v170);
  v172 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v171, (uint64_t)v169, 0, (uint64_t)v210);
  v173 = *(_QWORD *)(a1 + 208);
  v209 = 257;
  v174 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v172, v173, (uint64_t)v208);
  v175 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 808))(*(_QWORD *)(a1 + 824));
  v176 = (llvm::Value *)llvm::ConstantInt::get();
  v214 = 257;
  v177 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v175, v52, v176, (const llvm::Twine *)v213);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v174, v177, 0);
  v178 = *(llvm::Type ***)(a10 + 16);
  v211 = 257;
  v180 = AGCLLVMBuilder::tryDeducePointeeType(v178, v179);
  v181 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v180, (uint64_t)v178, 0, (uint64_t)v210);
  v182 = *(_QWORD *)(a1 + 208);
  v209 = 257;
  v183 = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a1 + 8, 47, v181, v182, (uint64_t)v208);
  v184 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 864))(*(_QWORD *)(a1 + 824));
  v185 = (llvm::Value *)llvm::ConstantInt::get();
  v214 = 257;
  v186 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v184, v52, v185, (const llvm::Twine *)v213);
  llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v183, v186, 0);
  if (v203)
  {
    Br = (llvm::Instruction *)llvm::IRBuilderBase::CreateBr((llvm::IRBuilderBase *)(a1 + 8), v203);
    llvm::IRBuilderBase::SetInsertPoint((llvm::IRBuilderBase *)(a1 + 8), Br);
  }
  *(_OWORD *)a9 = *(_OWORD *)(a1 + 56);
  result = llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  *(_DWORD *)(a9 + 24) = *(_DWORD *)(a1 + 104);
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectRay(uint64_t *a1, uint64_t a2, __int128 *a3, llvm::Type **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10)
{
  llvm::Value *v15;
  llvm::Type *v16;
  uint64_t AlignedLoad;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  llvm::Type **v22;
  llvm::Type *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  llvm::Value *v29;
  _BYTE v31[32];
  __int16 v32;
  _BYTE v33[32];
  __int16 v34;
  __int128 v35;
  llvm::Value *v36;
  int v37;
  _QWORD v38[4];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  llvm::Value *PointerCast;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t Cast;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v35 = *(_OWORD *)a2;
  v36 = *(llvm::Value **)(a2 + 16);
  if (v36)
    llvm::MetadataTracking::track();
  v37 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v35);
  v15 = v36;
  if (v36)
    llvm::MetadataTracking::untrack();
  LOWORD(v39) = 257;
  v16 = AGCLLVMBuilder::tryDeducePointeeType(a4, v15);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v16, (uint64_t)a4, 0, (uint64_t)v38);
  v38[0] = "bvh_state_words_heap_base";
  LOWORD(v39) = 259;
  llvm::Value::setName();
  if (*((_BYTE *)a3 + 112))
    llvm::IRBuilderBase::CreateMemCpy((uint64_t)(a1 + 1), *(llvm::LLVMContext **)(a9 + 8));
  v18 = a1[22];
  v38[0] = *(_QWORD *)a9;
  v38[1] = AlignedLoad;
  v38[2] = a5;
  v38[3] = llvm::ConstantInt::get();
  v39 = llvm::ConstantInt::get();
  v40 = llvm::ConstantInt::get();
  (*(void (**)(uint64_t *, _QWORD))(*a1 + 1384))(a1, a10);
  v19 = llvm::ConstantInt::get();
  v20 = a3[1];
  v42 = *a3;
  v43 = v20;
  v21 = *((_QWORD *)a3 + 6);
  v22 = (llvm::Type **)*((_QWORD *)a3 + 7);
  v41 = v19;
  v44 = v21;
  v23 = (llvm::Type *)llvm::PointerType::get();
  v34 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), v22, v23, (const llvm::Twine *)v33);
  v24 = a3[5];
  v46 = a3[4];
  v47 = v24;
  v48 = a3[6];
  v25 = *((_QWORD *)a3 + 4);
  v26 = a1[25];
  v32 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, v25, v26, (uint64_t)v31);
  v27 = a3[11];
  v50 = a3[10];
  v51 = v27;
  v28 = *((_QWORD *)a3 + 5);
  v52 = *((_QWORD *)a3 + 24);
  v53 = v28;
  v54 = a3[15];
  v55 = *((_QWORD *)a3 + 32);
  v56 = llvm::ConstantInt::get();
  v57 = llvm::ConstantInt::get();
  v29 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.intersect.ray", 17, v18, (uint64_t)v38, 0x1FuLL);
  if (*((_BYTE *)a3 + 112))
    llvm::IRBuilderBase::CreateMemCpy((uint64_t)(a1 + 1), *((llvm::LLVMContext **)a3 + 15));
  return v29;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectRayWithResults@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Type **v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::Value *v33;
  uint64_t Value;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _DWORD v43[8];
  __int16 v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  _QWORD v49[2];
  _OWORD v50[3];
  __int128 v51;
  uint64_t v52;
  int v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v51 = *(_OWORD *)a2;
  v52 = *(_QWORD *)(a2 + 16);
  if (v52)
    llvm::MetadataTracking::track();
  v53 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v51);
  if (v52)
    llvm::MetadataTracking::untrack();
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
  v54 = "vrid";
  LOWORD(v58) = 259;
  llvm::Value::setName();
  if (*(_BYTE *)(a3 + 112))
  {
    if (*(_BYTE *)(*(_QWORD *)(a3 + 128) + 16) == 16)
      v13 = *(_QWORD *)(a3 + 128);
    else
      v13 = 0;
    v14 = (unsigned int *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = *(unsigned int **)v14;
    v15 = *v14;
  }
  else
  {
    v15 = 0;
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 1272))(a1, v15, 0, a6, *(unsigned int *)(a3 + 140));
  v18 = v17;
  memset(v50, 0, sizeof(v50));
  v19 = (llvm::Type **)llvm::ConstantInt::get();
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v50, a1, a5, v12, v18 | 0x100000000, v19, 1);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1384))(a1, a6);
  v49[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a5, v12, (llvm::Value **)v50, v20, (a6 >> 5) & 1, 0);
  v49[1] = v21;
  v46 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v48 = *(_DWORD *)(a1 + 104);
  v40 = a6;
  v41 = a3;
  v22 = a4;
  v39 = v12;
  v37 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, _WORD))(*(_QWORD *)a1 + 1008))(a1, &v46, a3, v22, v12, v16, v15, v18, v49, a6);
  if (v47)
    llvm::MetadataTracking::untrack();
  v23 = *(const char **)(a1 + 200);
  v24 = *(_QWORD *)(a1 + 168);
  v25 = llvm::PointerType::get();
  v26 = *(_QWORD *)(a1 + 200);
  v27 = *(_QWORD *)(a1 + 184);
  v28 = *(_QWORD *)(a1 + 224);
  v29 = *(_QWORD *)(a1 + 168);
  v30 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 264), (llvm::Type *)4);
  v31 = llvm::ArrayType::get(*(llvm::ArrayType **)(a1 + 264), (llvm::Type *)4);
  v54 = v23;
  v55 = v24;
  v56 = (uint64_t)v23;
  v57 = (uint64_t)v23;
  v58 = v25;
  *(_QWORD *)&v59 = v26;
  *((_QWORD *)&v59 + 1) = v26;
  v60 = v27;
  v61 = v28;
  v62 = v27;
  v63 = v29;
  v64 = v30;
  v65 = v31;
  v32 = llvm::StructType::get();
  v54 = (const char *)v49[0];
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1384))(a1, v40);
  v55 = llvm::ConstantInt::get();
  v56 = llvm::ConstantInt::get();
  v57 = v39;
  v58 = v37;
  v59 = *(_OWORD *)(v41 + 144);
  v33 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersect.ray.result", 24, v32, (uint64_t)&v54, 7uLL);
  a7[10] = 0;
  a7[11] = 0;
  a7[12] = 0;
  v43[0] = 0;
  LOWORD(v58) = 257;
  *a7 = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 1;
  LOWORD(v58) = 257;
  a7[1] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 2;
  LOWORD(v58) = 257;
  a7[2] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 3;
  LOWORD(v58) = 257;
  a7[3] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 4;
  LOWORD(v58) = 257;
  a7[4] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 5;
  LOWORD(v58) = 257;
  a7[5] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 6;
  LOWORD(v58) = 257;
  a7[6] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 7;
  LOWORD(v58) = 257;
  a7[7] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 8;
  LOWORD(v58) = 257;
  a7[8] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v45 = 9;
  LOWORD(v58) = 257;
  Value = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)&v45, 1, (uint64_t)&v54);
  v35 = *(_QWORD *)(a1 + 176);
  v44 = 257;
  a7[9] = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, Value, v35, (uint64_t)v43);
  v43[0] = 10;
  LOWORD(v58) = 257;
  a7[10] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 11;
  LOWORD(v58) = 257;
  a7[11] = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  v43[0] = 12;
  LOWORD(v58) = 257;
  result = llvm::IRBuilderBase::CreateExtractValue(a1 + 8, (uint64_t)v33, (uint64_t)v43, 1, (uint64_t)&v54);
  a7[12] = result;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectRayForDirectAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::Type **v19;
  unsigned int v20;
  uint64_t v21;
  llvm::IRBuilderBase *v22;
  uint64_t v23;
  llvm::Value *v24;
  uint64_t v25;
  llvm::Value *Cast;
  llvm::Value *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *Shl;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t LShr;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  llvm::Value *v41;
  uint64_t v42;
  llvm::Value *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  llvm::Value *v46;
  uint64_t v47;
  llvm::Value *v48;
  llvm::Value *v49;
  llvm::Value *v50;
  uint64_t v51;
  llvm::Value *v52;
  llvm::Value *v53;
  llvm::Value *v54;
  __int128 v56;
  uint64_t v57;
  int v58;
  _QWORD v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  _BYTE v66[32];
  __int16 v67;
  _QWORD v68[4];
  __int16 v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v63 = *(_OWORD *)a2;
  v64 = *(_QWORD *)(a2 + 16);
  if (v64)
    llvm::MetadataTracking::track();
  v65 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v63);
  if (v64)
    llvm::MetadataTracking::untrack();
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
  *(_QWORD *)&v60 = "vrid";
  LOWORD(v62) = 259;
  llvm::Value::setName();
  if (*(_BYTE *)(a3 + 112))
  {
    if (*(_BYTE *)(*(_QWORD *)(a3 + 128) + 16) == 16)
      v13 = *(_QWORD *)(a3 + 128);
    else
      v13 = 0;
    v14 = (unsigned int *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v14 = *(unsigned int **)v14;
    v15 = *v14;
  }
  else
  {
    v15 = 0;
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 1272))(a1, v15, 0, a6, *(unsigned int *)(a3 + 140));
  v18 = v17;
  v61 = 0u;
  v62 = 0u;
  v60 = 0u;
  v19 = (llvm::Type **)llvm::ConstantInt::get();
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(&v60, a1, a5, v12, v18 | 0x100000000, v19, 1);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1384))(a1, a6);
  v59[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a5, v12, (llvm::Value **)&v60, v20, (a6 >> 5) & 1, 0);
  v59[1] = v21;
  v22 = (llvm::IRBuilderBase *)(a1 + 8);
  v56 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v58 = *(_DWORD *)(a1 + 104);
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, _WORD))(*(_QWORD *)a1 + 1008))(a1, &v56, a3, a4, v12, v16, v15, v18, v59, a6);
  if (v57)
    llvm::MetadataTracking::untrack();
  v23 = *(_QWORD *)(a1 + 184);
  v68[0] = v59[0];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 1384))(a1, a6);
  v68[1] = llvm::ConstantInt::get();
  v24 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersect.ray.get_core_id", 29, v23, (uint64_t)v68, 2uLL);
  v25 = *(_QWORD *)(a1 + 208);
  v69 = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v12, v25, (uint64_t)v68);
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v69 = 257;
  v28 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 8), v24, v27, (const llvm::Twine *)v68);
  v29 = *(_QWORD *)(a1 + 208);
  v67 = 257;
  v30 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v28, v29, (uint64_t)v66);
  v69 = 257;
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v30, v31, (const llvm::Twine *)v68);
  v69 = 257;
  v33 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), Shl, Cast, (const llvm::Twine *)v68);
  v34 = (llvm::Value *)v60;
  v69 = 257;
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  LShr = llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 8), v34, v35, (const llvm::Twine *)v68);
  v37 = *(_QWORD *)(a1 + 208);
  v67 = 257;
  v38 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, LShr, v37, (uint64_t)v66);
  v69 = 257;
  v39 = (llvm::Value *)llvm::ConstantInt::get();
  v40 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v38, v39, (const llvm::Twine *)v68);
  v69 = 257;
  v41 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v40, v33, (const llvm::Twine *)v68);
  v42 = *(_QWORD *)(a1 + 208);
  v69 = 257;
  v43 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, *((uint64_t *)&v61 + 1), v42, (uint64_t)v68);
  v69 = 257;
  v44 = (llvm::Value *)llvm::ConstantInt::get();
  v45 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v43, v44, (const llvm::Twine *)v68);
  v69 = 257;
  v46 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v45, v41, (const llvm::Twine *)v68);
  if ((_QWORD)v62)
  {
    v47 = *(_QWORD *)(a1 + 208);
    v69 = 257;
    v48 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v62, v47, (uint64_t)v68);
    v69 = 257;
    v49 = (llvm::Value *)llvm::ConstantInt::get();
    v50 = (llvm::Value *)llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 8), v48, v49, (const llvm::Twine *)v68);
    v69 = 257;
    v46 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), v50, v46, (const llvm::Twine *)v68);
  }
  if (*((_QWORD *)&v62 + 1))
  {
    v51 = *(_QWORD *)(a1 + 208);
    v69 = 257;
    v52 = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, *((uint64_t *)&v62 + 1), v51, (uint64_t)v68);
    v69 = 257;
    v53 = (llvm::Value *)llvm::ConstantInt::get();
    v54 = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v22, v52, v53, (const llvm::Twine *)v68);
    v69 = 257;
    return llvm::IRBuilderBase::CreateOr(v22, v54, v46, (const llvm::Twine *)v68);
  }
  return (uint64_t)v46;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectionResultAccessor(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  uint64_t v14;
  llvm::Value *Cast;
  llvm::Value *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::Value *LShr;
  llvm::Value *v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  llvm::Value *v26;
  llvm::Value *v27;
  llvm::Value *v28;
  llvm::Value *v29;
  llvm::Value *v30;
  uint64_t Shl;
  uint64_t v32;
  llvm::Value *v33;
  llvm::Value *v34;
  llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Value *v38;
  llvm::Value *v39;
  llvm::Value *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::Value *v43;
  llvm::Value *v44;
  llvm::Value *v45;
  uint64_t v46;
  uint64_t v47;
  llvm::Value *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  std::string::size_type v52;
  void **v53;
  uint64_t v54;
  llvm::Value *v55;
  void *__p[2];
  unsigned __int8 v61;
  llvm::Value *v62[4];
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  std::string __str;
  __int16 v69;
  std::string v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v65 = *(_OWORD *)a2;
  v66 = *(_QWORD *)(a2 + 16);
  if (v66)
    llvm::MetadataTracking::track();
  v67 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v65);
  if (v66)
    llvm::MetadataTracking::untrack();
  v14 = a1[26];
  LOWORD(v63) = 257;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, a3, v14, (uint64_t)v62);
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v63) = 257;
  v17 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), Cast, v16, (const llvm::Twine *)v62);
  v18 = a1[24];
  LOWORD(v63) = 257;
  v19 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v17, v18, (uint64_t)v62);
  LOWORD(v63) = 257;
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), Cast, v20, (const llvm::Twine *)v62);
  v22 = (llvm::Value *)llvm::ConstantInt::get();
  v72 = 257;
  v23 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), LShr, v22, (const llvm::Twine *)&v70);
  v24 = a1[25];
  LOWORD(v63) = 257;
  v25 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v23, v24, (uint64_t)v62);
  LOWORD(v63) = 257;
  v26 = (llvm::Value *)llvm::ConstantInt::get();
  v27 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), Cast, v26, (const llvm::Twine *)v62);
  v28 = (llvm::Value *)llvm::ConstantInt::get();
  LOWORD(v63) = 257;
  v29 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v27, v28, (const llvm::Twine *)v62);
  v72 = 257;
  v30 = (llvm::Value *)llvm::ConstantInt::get();
  Shl = llvm::IRBuilderBase::CreateShl((llvm::IRBuilderBase *)(a1 + 1), v29, v30, (const llvm::Twine *)&v70);
  v32 = a1[25];
  v69 = 257;
  v62[0] = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, Shl, v32, (uint64_t)&__str);
  v72 = 257;
  v33 = (llvm::Value *)llvm::ConstantInt::get();
  v34 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v27, v33, (const llvm::Twine *)&v70);
  v35 = (llvm::Value *)llvm::ConstantInt::get();
  v72 = 257;
  v36 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v34, v35, (const llvm::Twine *)&v70);
  v37 = a1[25];
  v72 = 257;
  v62[3] = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v36, v37, (uint64_t)&v70);
  v72 = 257;
  v38 = (llvm::Value *)llvm::ConstantInt::get();
  v39 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v34, v38, (const llvm::Twine *)&v70);
  v40 = (llvm::Value *)llvm::ConstantInt::get();
  v72 = 257;
  v41 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v39, v40, (const llvm::Twine *)&v70);
  v42 = a1[25];
  v72 = 257;
  v63 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v41, v42, (uint64_t)&v70);
  v72 = 257;
  v43 = (llvm::Value *)llvm::ConstantInt::get();
  v44 = (llvm::Value *)llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v39, v43, (const llvm::Twine *)&v70);
  v45 = (llvm::Value *)llvm::ConstantInt::get();
  v72 = 257;
  v46 = llvm::IRBuilderBase::CreateAnd((llvm::IRBuilderBase *)(a1 + 1), v44, v45, (const llvm::Twine *)&v70);
  v47 = a1[25];
  v72 = 257;
  v64 = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 38, v46, v47, (uint64_t)&v70);
  v72 = 257;
  v48 = (llvm::Value *)llvm::ConstantInt::get();
  llvm::IRBuilderBase::CreateLShr((llvm::IRBuilderBase *)(a1 + 1), v44, v48, (const llvm::Twine *)&v70);
  v62[1] = 0;
  v62[2] = 0;
  v49 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 1384))(a1, a9);
  v50 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a8, v19, v62, v49, (a9 >> 5) & 1, 0);
  if (a5)
  {
    v51 = 4;
    if (a6 < 4)
      v51 = a6;
    std::string::basic_string[abi:nn180100](&__str, (void *)(a5 + v51), a6 - v51);
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
  }
  v52 = std::string::find(&__str, 46, 0);
  if (v52 != -1)
  {
    std::string::basic_string(&v70, &__str, 0, v52, (std::allocator<char> *)__p);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v70;
  }
  v53 = __p;
  std::operator+<char>();
  if ((v61 & 0x80u) == 0)
  {
    v54 = v61;
  }
  else
  {
    v53 = (void **)__p[0];
    v54 = (uint64_t)__p[1];
  }
  v70.__r_.__value_.__r.__words[0] = v50;
  v70.__r_.__value_.__l.__size_ = v25;
  (*(void (**)(_QWORD *, _QWORD))(*a1 + 1384))(a1, a9);
  v70.__r_.__value_.__r.__words[2] = llvm::ConstantInt::get();
  v71 = a4;
  v55 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v53, v54, a7, (uint64_t)&v70, 4uLL);
  if ((char)v61 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v55;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildReleaseIntersectionResult(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  int v7;

  v5 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
    llvm::MetadataTracking::track();
  v7 = *(_DWORD *)(a2 + 24);
  result = AGCLLVMTargetLowerer::SetIP(a1, &v5);
  if (v6)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildReleaseIntersectPayload(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  int v7;

  v5 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
    llvm::MetadataTracking::track();
  v7 = *(_DWORD *)(a2 + 24);
  result = AGCLLVMTargetLowerer::SetIP(a1, &v5);
  if (v6)
    return llvm::MetadataTracking::untrack();
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildAllocateIntersectionQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  int v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12)
    llvm::MetadataTracking::untrack();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1272))(a1, 0, 1, a4, a5);
  v9 = llvm::PointerType::get();
  v14[0] = llvm::ConstantInt::get();
  v14[1] = llvm::ConstantInt::get();
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersection_query.allocate", 31, v9, (uint64_t)v14, 2uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildResetIntersectionQuery(_QWORD *a1, uint64_t a2, uint64_t a3, llvm::Type **a4)
{
  llvm::Type *v8;
  uint64_t v9;
  llvm::Type **v10;
  uint64_t v11;
  uint64_t v12;
  llvm::Value *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Type *v17;
  _BYTE v19[32];
  __int16 v20;
  _BYTE v21[32];
  __int16 v22;
  _BYTE v23[32];
  __int16 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  llvm::Value *PointerCast;
  __int128 v29;
  __int128 v30;
  uint64_t Cast;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t AlignedLoad;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v25 = *(_OWORD *)a2;
  v26 = *(_QWORD *)(a2 + 16);
  if (v26)
    llvm::MetadataTracking::track();
  v27 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v25);
  if (v26)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)llvm::PointerType::get();
  v9 = a1[18];
  v10 = *(llvm::Type ***)a3;
  v24 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), v10, v8, (const llvm::Twine *)v23);
  v29 = *(_OWORD *)(a3 + 8);
  v30 = *(_OWORD *)(a3 + 24);
  v11 = *(_QWORD *)(a3 + 40);
  v12 = a1[25];
  v22 = 257;
  Cast = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, v11, v12, (uint64_t)v21);
  v14 = *(_OWORD *)(a3 + 64);
  v32 = *(_OWORD *)(a3 + 48);
  v33 = v14;
  v34 = *(_OWORD *)(a3 + 80);
  v15 = *(_QWORD *)(a3 + 128);
  v16 = *(_QWORD *)(a3 + 136);
  v35 = *(_QWORD *)(a3 + 96);
  v36 = v16;
  if (!v15)
    v15 = llvm::ConstantInt::get();
  v37 = v15;
  v20 = 257;
  v17 = AGCLLVMBuilder::tryDeducePointeeType(a4, v13);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v17, (uint64_t)a4, 0, (uint64_t)v19);
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.intersection_query.reset", 28, v9, (uint64_t)&PointerCast, 0x10uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildNextIntersectionQuery(_QWORD *a1, uint64_t a2, llvm::Type **a3, llvm::Type **a4, uint64_t a5, char a6)
{
  llvm::Type *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  llvm::Type **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::Type *v21;
  _BYTE v24[32];
  __int16 v25;
  _BYTE v26[32];
  __int16 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  _QWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v28 = *(_OWORD *)a2;
  v29 = *(_QWORD *)(a2 + 16);
  if (v29)
    llvm::MetadataTracking::track();
  v30 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v28);
  if (v29)
    llvm::MetadataTracking::untrack();
  v11 = (llvm::Type *)llvm::PointerType::get();
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 952))(a1);
  v31[0] = "vrid";
  LOWORD(v32) = 259;
  llvm::Value::setName();
  v13 = a1[25];
  LOWORD(v32) = 257;
  *(_QWORD *)&v35 = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a3, v11, (const llvm::Twine *)v31);
  *((_QWORD *)&v35 + 1) = llvm::ConstantInt::get();
  v14 = a6 & 1;
  if ((a6 & 1) != 0)
    v15 = 6;
  else
    v15 = 5;
  *(_QWORD *)&v36 = llvm::ConstantInt::get();
  if ((a6 & 0x40) != 0)
  {
    v15 = 7;
    v14 = 2;
  }
  *((_QWORD *)&v36 + 1) = llvm::ConstantInt::get();
  v16 = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.get_instance_levels_intersection_query", 42, v13, (uint64_t)&v35, 4uLL);
  v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(&v35, (uint64_t)a1, a5, v12, 0x100000000, v16, 1);
  v17 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a5, v12, (llvm::Value **)&v35, v15, 0, 0);
  v18 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a5, v12, (llvm::Value **)&v35, v14, 0, 0);
  v19 = a1[22];
  v27 = 257;
  v31[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a3, v11, (const llvm::Twine *)v26);
  v31[1] = v17;
  v31[2] = v18;
  v25 = 257;
  v21 = AGCLLVMBuilder::tryDeducePointeeType(a4, v20);
  v31[3] = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v21, (uint64_t)a4, 0, (uint64_t)v24);
  v32 = v12;
  v33 = llvm::ConstantInt::get();
  v34 = llvm::ConstantInt::get();
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.intersection_query.next", 27, v19, (uint64_t)v31, 7uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildAbortIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  llvm::Type *v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Type *)llvm::PointerType::get();
  v7 = *(_QWORD *)(a1 + 144);
  v10 = 257;
  v14[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v9);
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersection_query.abort", 28, v7, (uint64_t)v14, 1uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitTriangleIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  llvm::Type *v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *result;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Type *)llvm::PointerType::get();
  v7 = *(_QWORD *)(a1 + 168);
  v14 = 257;
  v18[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v13);
  v18[1] = llvm::ConstantInt::get();
  v18[2] = llvm::ConstantInt::get();
  v18[3] = llvm::ConstantInt::get();
  v8 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.get_candidate_triangle_distance_intersection_query", 54, v7, (uint64_t)v18, 4uLL);
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v12 = *(_DWORD *)(a1 + 104);
  result = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitIntersectionQuery(a1, (uint64_t)&v10, a3, (uint64_t)v8);
  if (v11)
    return (llvm::Value *)llvm::MetadataTracking::untrack();
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitBoundingBoxIntersectionQuery(uint64_t a1, __int128 *a2, llvm::Type **a3, uint64_t a4)
{
  llvm::Value *result;
  __int128 v9;
  uint64_t v10;
  int v11;

  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  if (v10)
    llvm::MetadataTracking::track();
  v11 = *((_DWORD *)a2 + 6);
  result = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitIntersectionQuery(a1, (uint64_t)&v9, a3, a4);
  if (v10)
    return (llvm::Value *)llvm::MetadataTracking::untrack();
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDeallocateIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  llvm::Type *v6;
  uint64_t v7;
  _BYTE v9[32];
  __int16 v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v11 = *(_OWORD *)a2;
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
    llvm::MetadataTracking::track();
  v13 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v11);
  if (v12)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Type *)llvm::PointerType::get();
  v7 = *(_QWORD *)(a1 + 144);
  v10 = 257;
  v14[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v9);
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersection_query.deallocate", 33, v7, (uint64_t)v14, 1uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitCurveIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3)
{
  llvm::Type *v6;
  uint64_t v7;
  llvm::Value *v8;
  llvm::Value *result;
  __int128 v10;
  uint64_t v11;
  int v12;
  _BYTE v13[32];
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  v6 = (llvm::Type *)llvm::PointerType::get();
  v7 = *(_QWORD *)(a1 + 168);
  v14 = 257;
  v18[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v6, (const llvm::Twine *)v13);
  v18[1] = llvm::ConstantInt::get();
  v18[2] = llvm::ConstantInt::get();
  v18[3] = llvm::ConstantInt::get();
  v8 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.get_candidate_curve_distance_intersection_query", 51, v7, (uint64_t)v18, 4uLL);
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v12 = *(_DWORD *)(a1 + 104);
  result = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitIntersectionQuery(a1, (uint64_t)&v10, a3, (uint64_t)v8);
  if (v11)
    return (llvm::Value *)llvm::MetadataTracking::untrack();
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildIntersectionQueryAccessor(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, std::string::size_type a8)
{
  llvm::Type *v15;
  uint64_t v16;
  std::string::size_type v17;
  std::string *p_str;
  std::string *v19;
  int v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  std::string::size_type v25;
  void **v26;
  uint64_t v27;
  llvm::Value *v28;
  int v30;
  std::string v31;
  __int16 v32;
  void *__p[2];
  uint64_t v34;
  std::string v35;
  std::string __str;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  std::string v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v40 = a5;
  v41 = a6;
  v37 = *(_OWORD *)a2;
  v38 = *(_QWORD *)(a2 + 16);
  if (v38)
    llvm::MetadataTracking::track();
  v39 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v37);
  if (v38)
    llvm::MetadataTracking::untrack();
  v15 = (llvm::Type *)llvm::PointerType::get();
  if (a5)
  {
    v16 = 4;
    if (a6 < 4)
      v16 = a6;
    std::string::basic_string[abi:nn180100](&__str, (void *)(a5 + v16), a6 - v16);
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
  }
  v17 = std::string::find(&__str, 46, 0);
  if (v17 != -1)
  {
    std::string::basic_string(&v31, &__str, 0, v17, (std::allocator<char> *)&v42);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v31;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__str.__r_.__value_.__l.__size_ != 42)
      goto LABEL_22;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 42)
      goto LABEL_22;
    p_str = &__str;
  }
  if (!memcmp(p_str, "get_intersection_params_intersection_query", 0x2AuLL) && llvm::StringRef::find() != -1)
    std::string::append(&__str, "_instancing");
LABEL_22:
  std::string::basic_string[abi:nn180100]<0>(&v35, "_preCurves");
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 42)
    {
      if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 53)
      {
        v19 = &__str;
        goto LABEL_29;
      }
LABEL_35:
      std::operator+<char>();
      goto LABEL_36;
    }
    v21 = &__str;
LABEL_34:
    if (!memcmp(v21, "get_intersection_params_intersection_query", 0x2AuLL))
    {
      v30 = *(_DWORD *)(a7 + 12);
      std::operator+<char>();
      if (v30 == 7)
        goto LABEL_61;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (__str.__r_.__value_.__l.__size_ == 42)
  {
    v21 = (std::string *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_34;
  }
  if (__str.__r_.__value_.__l.__size_ != 53)
    goto LABEL_35;
  v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_29:
  if (memcmp(v19, "get_intersection_params_intersection_query_instancing", 0x35uLL))
    goto LABEL_35;
  v20 = *(_DWORD *)(a7 + 12);
  std::operator+<char>();
  if (v20 == 8)
  {
LABEL_61:
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v42, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    else
      v42 = v35;
    goto LABEL_37;
  }
LABEL_36:
  std::string::basic_string[abi:nn180100]<0>(&v42, (char *)&unk_1C3E4D9BB);
LABEL_37:
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v42;
  else
    v22 = (std::string *)v42.__r_.__value_.__r.__words[0];
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  else
    size = v42.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v31, (const std::string::value_type *)v22, size);
  v25 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v34 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (v34 >= 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  if (v34 >= 0)
    v27 = HIBYTE(v34);
  else
    v27 = (uint64_t)__p[1];
  v32 = 257;
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v15, (const llvm::Twine *)&v31);
  v42.__r_.__value_.__l.__size_ = a8;
  v42.__r_.__value_.__r.__words[2] = llvm::ConstantInt::get();
  v43 = llvm::ConstantInt::get();
  v28 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v26, v27, a7, (uint64_t)&v42, 4uLL);
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v28;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildTriangleIntersectionTest@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, unsigned int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::ArrayType *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  llvm::Type *v29;
  uint64_t AllocaInEntryBlock;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  llvm::Type **v35;
  uint64_t result;
  __int128 v37;
  _OWORD v38[3];
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v39 = *(_OWORD *)a2;
  v40 = *(_QWORD *)(a2 + 16);
  if (v40)
    llvm::MetadataTracking::track();
  v41 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v39);
  if (v40)
    llvm::MetadataTracking::untrack();
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 944))(a1);
  memset(v38, 0, sizeof(v38));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v38, (uint64_t)a1, a3, v12, 0, 0, 0);
  v13 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v12, (llvm::Value **)v38, a4, a5, 1);
  v15 = v14;
  v16 = a1[21];
  v17 = a1[25];
  v18 = llvm::PointerType::get();
  v19 = a1[28];
  v20 = a1[23];
  v42 = v16;
  v43 = v17;
  *(_QWORD *)&v44 = v17;
  *((_QWORD *)&v44 + 1) = v18;
  v45 = v19;
  v46 = v20;
  v21 = (llvm::ArrayType *)llvm::StructType::get();
  v22 = llvm::ArrayType::get(v21, (llvm::Type *)2);
  v24 = a1[24];
  v23 = a1[25];
  v25 = a1[23];
  v42 = v22;
  v43 = v23;
  *(_QWORD *)&v44 = v23;
  *((_QWORD *)&v44 + 1) = v24;
  v45 = v24;
  v46 = v25;
  v26 = llvm::StructType::get();
  v37 = *((_OWORD *)a1 + 12);
  v27 = llvm::PointerType::get();
  v28 = a1[23];
  v42 = v26;
  v43 = v37;
  v44 = v37;
  v45 = v27;
  v46 = v28;
  v29 = (llvm::Type *)llvm::StructType::get();
  AllocaInEntryBlock = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, v29);
  v31 = *((unsigned __int8 *)a1 + 1810);
  v42 = v13;
  v43 = llvm::ConstantInt::get();
  *(_QWORD *)&v44 = llvm::ConstantInt::get();
  v32 = llvm::ConstantInt::get();
  if (v31)
    v33 = 24;
  else
    v33 = 17;
  *((_QWORD *)&v44 + 1) = v32;
  if (v31)
    v34 = "agx.triangle_test_legacy";
  else
    v34 = "agx.triangle_test";
  v35 = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v34, v33, (uint64_t)v29, (uint64_t)&v42, 4uLL);
  result = llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v35, AllocaInEntryBlock, 0);
  *(_DWORD *)a6 = 1;
  *(_QWORD *)(a6 + 8) = v13;
  *(_QWORD *)(a6 + 16) = v15;
  *(_QWORD *)(a6 + 24) = AllocaInEntryBlock;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildBoundingBoxIntersectionTest@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, unsigned int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Type *v24;
  uint64_t AllocaInEntryBlock;
  int v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  llvm::Type **v30;
  uint64_t result;
  __int128 v32;
  _OWORD v33[3];
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v34 = *(_OWORD *)a2;
  v35 = *(_QWORD *)(a2 + 16);
  if (v35)
    llvm::MetadataTracking::track();
  v36 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v34);
  if (v35)
    llvm::MetadataTracking::untrack();
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 944))(a1);
  memset(v33, 0, sizeof(v33));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v33, (uint64_t)a1, a3, v12, 0, 0, 0);
  v13 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v12, (llvm::Value **)v33, a4, a5, 1);
  v15 = v14;
  v16 = a1[21];
  v17 = a1[25];
  v18 = a1[23];
  v19 = llvm::PointerType::get();
  v20 = a1[24];
  v37 = v16;
  v38 = v16;
  *(_QWORD *)&v39 = v17;
  *((_QWORD *)&v39 + 1) = v18;
  v40 = v17;
  v41 = v17;
  v42 = v19;
  v43 = v20;
  v44 = v20;
  v21 = llvm::StructType::get();
  v32 = *((_OWORD *)a1 + 12);
  v22 = llvm::PointerType::get();
  v23 = a1[23];
  v37 = v21;
  v38 = v32;
  v39 = v32;
  v40 = v22;
  v41 = v23;
  v24 = (llvm::Type *)llvm::StructType::get();
  AllocaInEntryBlock = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, v24);
  v26 = *((unsigned __int8 *)a1 + 1810);
  v37 = v13;
  v27 = llvm::ConstantInt::get();
  if (v26)
    v28 = 28;
  else
    v28 = 21;
  v38 = v27;
  if (v26)
    v29 = "agx.bounding_box_test_legacy";
  else
    v29 = "agx.bounding_box_test";
  v30 = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v29, v28, (uint64_t)v24, (uint64_t)&v37, 2uLL);
  result = llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v30, AllocaInEntryBlock, 0);
  *(_DWORD *)a6 = 2;
  *(_QWORD *)(a6 + 8) = v13;
  *(_QWORD *)(a6 + 16) = v15;
  *(_QWORD *)(a6 + 24) = AllocaInEntryBlock;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCurveIntersectionTest@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W4>, unsigned int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::Type *v24;
  uint64_t AllocaInEntryBlock;
  int v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  llvm::Type **v30;
  uint64_t result;
  __int128 v32;
  _OWORD v33[3];
  __int128 v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v34 = *(_OWORD *)a2;
  v35 = *(_QWORD *)(a2 + 16);
  if (v35)
    llvm::MetadataTracking::track();
  v36 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v34);
  if (v35)
    llvm::MetadataTracking::untrack();
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 944))(a1);
  memset(v33, 0, sizeof(v33));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v33, (uint64_t)a1, a3, v12, 0, 0, 0);
  v13 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v12, (llvm::Value **)v33, a4, a5, 1);
  v15 = v14;
  v16 = a1[21];
  v17 = a1[25];
  v18 = a1[23];
  v19 = llvm::PointerType::get();
  v20 = a1[24];
  v37 = v16;
  v38 = v16;
  *(_QWORD *)&v39 = v17;
  *((_QWORD *)&v39 + 1) = v18;
  v40 = v17;
  v41 = v17;
  v42 = v19;
  v43 = v20;
  v44 = v20;
  v21 = llvm::StructType::get();
  v32 = *((_OWORD *)a1 + 12);
  v22 = llvm::PointerType::get();
  v23 = a1[23];
  v37 = v21;
  v38 = v32;
  v39 = v32;
  v40 = v22;
  v41 = v23;
  v24 = (llvm::Type *)llvm::StructType::get();
  AllocaInEntryBlock = AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, v24);
  v26 = *((unsigned __int8 *)a1 + 1810);
  v37 = v13;
  v27 = llvm::ConstantInt::get();
  if (v26)
    v28 = 21;
  else
    v28 = 14;
  v38 = v27;
  if (v26)
    v29 = "agx.curve_test_legacy";
  else
    v29 = "agx.curve_test";
  v30 = (llvm::Type **)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v29, v28, (uint64_t)v24, (uint64_t)&v37, 2uLL);
  result = llvm::IRBuilderBase::CreateAlignedStore(a1 + 1, v30, AllocaInEntryBlock, 0);
  *(_DWORD *)a6 = 3;
  *(_QWORD *)(a6 + 8) = v13;
  *(_QWORD *)(a6 + 16) = v15;
  *(_QWORD *)(a6 + 24) = AllocaInEntryBlock;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDriverIntersectionTest(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;

  v37 = *(_OWORD *)a2;
  v38 = *(_QWORD *)(a2 + 16);
  if (v38)
    llvm::MetadataTracking::track();
  v39 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v37);
  if (v38)
    llvm::MetadataTracking::untrack();
  switch(a4)
  {
    case 8:
      v24 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v26 = *(_DWORD *)(a1 + 104);
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1136))(&v33, a1, &v24, a3, a5, a6, 1, a7);
      v35 = v33;
      v36 = v34;
      if (!v25)
        break;
      goto LABEL_11;
    case 1:
      v27 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v29 = *(_DWORD *)(a1 + 104);
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1144))(&v33, a1, &v27, a3, a5, a6, 1, a7);
      v35 = v33;
      v36 = v34;
      if (!v28)
        break;
LABEL_11:
      llvm::MetadataTracking::untrack();
      break;
    case 0:
      v30 = *(_OWORD *)(a1 + 56);
      llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
      v32 = *(_DWORD *)(a1 + 104);
      (*(void (**)(__int128 *__return_ptr, uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL))(*(_QWORD *)a1 + 1128))(&v33, a1, &v30, a3, a5, a6, 1, a7, (a6 - 8) < 0xFDu);
      v35 = v33;
      v36 = v34;
      if (v31)
        goto LABEL_11;
      break;
  }
  v21 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v23 = *(_DWORD *)(a1 + 104);
  v14 = llvm::ConstantInt::get();
  v15 = llvm::ConstantInt::get();
  v16 = llvm::ConstantFP::get();
  (*(void (**)(uint64_t, __int128 *, __int128 *, uint64_t, uint64_t, uint64_t, BOOL, _QWORD))(*(_QWORD *)a1 + 1184))(a1, &v21, &v35, v14, v15, v16, (a6 - 5) < 3, 0);
  if (v22)
    llvm::MetadataTracking::untrack();
  v18 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v20 = *(_DWORD *)(a1 + 104);
  result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 1200))(a1, &v18);
  if (v19)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDriverIntersectionMiss(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  _OWORD v11[3];
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[4];

  v15[3] = *MEMORY[0x1E0C80C00];
  v12 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13)
    llvm::MetadataTracking::untrack();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
  memset(v11, 0, sizeof(v11));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v11, a1, a3, v6, 0, 0, 0);
  v15[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a3, v6, (llvm::Value **)v11, 8u, 1u, 1);
  v15[1] = v6;
  v15[2] = llvm::ConstantInt::get();
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.commit_parallel_miss", 24, *(_QWORD *)(a1 + 144), (uint64_t)v15, 3uLL);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v10 = *(_DWORD *)(a1 + 104);
  result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 1200))(a1, &v8);
  if (v9)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDriverIntersectionEarlyTermination(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  uint64_t v11;
  int v12;
  _OWORD v13[3];
  __int128 v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
    llvm::MetadataTracking::track();
  v16 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v14);
  if (v15)
    llvm::MetadataTracking::untrack();
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
  memset(v13, 0, sizeof(v13));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v13, a1, a3, v8, 0, 0, 0);
  v17[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a3, v8, (llvm::Value **)v13, a4, 1u, 1);
  v17[1] = v8;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.commit_early_termination", 28, *(_QWORD *)(a1 + 144), (uint64_t)v17, 2uLL);
  v10 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v12 = *(_DWORD *)(a1 + 104);
  result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 1200))(a1, &v10);
  if (v11)
    return llvm::MetadataTracking::untrack();
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildDriverIntersectionGin1122SWWA(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  int v10;
  _OWORD v11[3];
  __int128 v12;
  uint64_t v13;
  int v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  v12 = *(_OWORD *)a2;
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
    llvm::MetadataTracking::track();
  v14 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v12);
  if (v13)
    llvm::MetadataTracking::untrack();
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 944))(a1);
  memset(v11, 0, sizeof(v11));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v11, a1, a3, v6, 0, 0, 0);
  v15[0] = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(a1, a3, v6, (llvm::Value **)v11, 8u, 1u, 1);
  v15[1] = v6;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.commit_parallel_gin1122swwa", 31, *(_QWORD *)(a1 + 144), (uint64_t)v15, 2uLL);
  v8 = *(_OWORD *)(a1 + 56);
  llvm::IRBuilderBase::getCurrentDebugLocation((llvm::IRBuilderBase *)(a1 + 8));
  v10 = *(_DWORD *)(a1 + 104);
  result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 1200))(a1, &v8);
  if (v9)
    return llvm::MetadataTracking::untrack();
  return result;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::commitIntersectionTestParallel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  void **v13;
  uint64_t v14;
  llvm::Value *v15;
  void *v17[2];
  char v18;
  void *__p[2];
  unsigned __int8 v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  _QWORD v24[8];

  v24[7] = *MEMORY[0x1E0C80C00];
  v21 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a2 + 16);
  if (v22)
    llvm::MetadataTracking::track();
  v23 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v21);
  if (v22)
    llvm::MetadataTracking::untrack();
  v12 = *(_QWORD *)(a3 + 8);
  v24[0] = *(_QWORD *)(a3 + 24);
  v24[1] = v12;
  v24[2] = a4;
  v24[3] = a5;
  v24[4] = a6;
  v24[5] = llvm::ConstantInt::get();
  v24[6] = llvm::ConstantInt::get();
  std::string::basic_string[abi:nn180100]<0>(v17, "agx.commit_parallel");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v17, (_DWORD *)a3);
  if ((v20 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v14 = v20;
  else
    v14 = (uint64_t)__p[1];
  v15 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v13, v14, *(_QWORD *)(a1 + 176), (uint64_t)v24, 7uLL);
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  return v15;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::commitIntersectionTestSerial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Value *v16;
  void *v18[2];
  char v19;
  void *__p[2];
  unsigned __int8 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  _QWORD v25[6];

  v25[5] = *MEMORY[0x1E0C80C00];
  v22 = *(_OWORD *)a2;
  v23 = *(_QWORD *)(a2 + 16);
  if (v23)
    llvm::MetadataTracking::track();
  v24 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v22);
  if (v23)
    llvm::MetadataTracking::untrack();
  std::string::basic_string[abi:nn180100]<0>(v18, "agx.commit_serial");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v18, (_DWORD *)a3);
  if ((v21 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v13 = v21;
  else
    v13 = (uint64_t)__p[1];
  v14 = *(_QWORD *)(a1 + 192);
  v15 = *(_QWORD *)(a3 + 8);
  v25[0] = *(_QWORD *)(a3 + 24);
  v25[1] = v15;
  v25[2] = a4;
  v25[3] = a5;
  v25[4] = a6;
  v16 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v12, v13, v14, (uint64_t)v25, 5uLL);
  if ((char)v21 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  return v16;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRiaCliqueEnd(uint64_t a1, uint64_t a2)
{
  __int128 v5;
  uint64_t v6;
  int v7;

  v5 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
    llvm::MetadataTracking::track();
  v7 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v5);
  if (v6)
    llvm::MetadataTracking::untrack();
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.ria_clique_end", 18, *(_QWORD *)(a1 + 144), 0, 0);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayHasTerminated(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  void *v13[2];
  char v14;
  void *__p[2];
  unsigned __int8 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v17 = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  if (v18)
    llvm::MetadataTracking::track();
  v19 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v17);
  if (v18)
    llvm::MetadataTracking::untrack();
  std::string::basic_string[abi:nn180100]<0>(v13, "agx.ray_has_terminated");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v13, (_DWORD *)a3);
  if ((v16 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v9 = v16;
  else
    v9 = (uint64_t)__p[1];
  v10 = *(_QWORD *)(a1 + 176);
  v20[0] = *(_QWORD *)(a3 + 24);
  v20[1] = a4;
  v11 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v8, v9, v10, (uint64_t)v20, 2uLL);
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  return v11;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayEndSerial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  char v13;
  void *__p[2];
  unsigned __int8 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  std::string::basic_string[abi:nn180100]<0>(v12, "agx.end_serial");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v12, (_DWORD *)a3);
  if ((v15 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v15 & 0x80u) == 0)
    v9 = v15;
  else
    v9 = (uint64_t)__p[1];
  v10 = *(_QWORD *)(a1 + 144);
  v11 = *(_QWORD *)(a3 + 8);
  v19[0] = *(_QWORD *)(a3 + 24);
  v19[1] = v11;
  v19[2] = a4;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v8, v9, v10, (uint64_t)v19, 3uLL);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayRunThisThread(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Value *v10;
  void *v12[2];
  char v13;
  void *__p[2];
  unsigned __int8 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v16);
  if (v17)
    llvm::MetadataTracking::untrack();
  std::string::basic_string[abi:nn180100]<0>(v12, "agx.ray_run_this_thread");
  v6 = __p;
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v12, (_DWORD *)a3);
  if ((v15 & 0x80u) == 0)
  {
    v7 = v15;
  }
  else
  {
    v6 = (void **)__p[0];
    v7 = (uint64_t)__p[1];
  }
  v19 = *(_QWORD *)(a1 + 184);
  v20 = v19;
  v8 = llvm::StructType::get();
  v9 = *(_QWORD *)(a3 + 8);
  v19 = *(_QWORD *)(a3 + 24);
  v20 = v9;
  v10 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v6, v7, v8, (uint64_t)&v19, 2uLL);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return v10;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayHasMoreResults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  void *v11[2];
  char v12;
  void *__p[2];
  unsigned __int8 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  _QWORD v18[2];

  v18[1] = *MEMORY[0x1E0C80C00];
  v15 = *(_OWORD *)a2;
  v16 = *(_QWORD *)(a2 + 16);
  if (v16)
    llvm::MetadataTracking::track();
  v17 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v15);
  if (v16)
    llvm::MetadataTracking::untrack();
  std::string::basic_string[abi:nn180100]<0>(v11, "agx.ray_has_more_results");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v11, (_DWORD *)a3);
  if ((v14 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v7 = v14;
  else
    v7 = (uint64_t)__p[1];
  v8 = *(_QWORD *)(a1 + 176);
  v18[0] = *(_QWORD *)(a3 + 24);
  v9 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v6, v7, v8, (uint64_t)v18, 1uLL);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return v9;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayDriverTestHit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value *v11;
  void *v13[2];
  char v14;
  void *__p[2];
  unsigned __int8 v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  v17 = *(_OWORD *)a2;
  v18 = *(_QWORD *)(a2 + 16);
  if (v18)
    llvm::MetadataTracking::track();
  v19 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v17);
  if (v18)
    llvm::MetadataTracking::untrack();
  std::string::basic_string[abi:nn180100]<0>(v13, "agx.ray_driver_test_hit");
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName((uint64_t)__p, (const void **)v13, (_DWORD *)a3);
  if ((v16 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v9 = v16;
  else
    v9 = (uint64_t)__p[1];
  v10 = *(_QWORD *)(a1 + 176);
  v20[0] = *(_QWORD *)(a3 + 24);
  v20[1] = a4;
  v11 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)v8, v9, v10, (uint64_t)v20, 2uLL);
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  return v11;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCliqueSPush(uint64_t *a1, __int128 *a2, uint64_t a3, llvm::Type **a4, uint64_t a5, unsigned int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  llvm::Type *v15;
  _BYTE v17[32];
  __int16 v18;
  _OWORD v19[3];
  __int128 v20;
  uint64_t v21;
  int v22;
  _QWORD v23[8];

  v23[7] = *MEMORY[0x1E0C80C00];
  v20 = *a2;
  v21 = *((_QWORD *)a2 + 2);
  if (v21)
    llvm::MetadataTracking::track();
  v22 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v20, (uint64_t)(a1 + 1));
  if (v21)
    llvm::MetadataTracking::untrack();
  v11 = (*(uint64_t (**)(uint64_t *))(*a1 + 944))(a1);
  memset(v19, 0, sizeof(v19));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v19, (uint64_t)a1, a3, v11, 0, 0, 0);
  v12 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v11, (llvm::Value **)v19, a6, 1u, 1);
  v13 = a1[18];
  v23[0] = v12;
  v18 = 257;
  v15 = AGCLLVMBuilder::tryDeducePointeeType(a4, v14);
  v23[1] = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v15, (uint64_t)a4, 0, (uint64_t)v17);
  v23[2] = v11;
  v23[3] = llvm::ConstantInt::get();
  v23[4] = llvm::ConstantInt::get();
  v23[5] = llvm::ConstantInt::get();
  v23[6] = llvm::ConstantInt::get();
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.cliqueS_transform_and_commit", 32, v13, (uint64_t)v23, 7uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCliqueSPop(_QWORD *a1, __int128 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[3];
  __int128 v13;
  uint64_t v14;
  int v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  if (v14)
    llvm::MetadataTracking::track();
  v15 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v13, (uint64_t)(a1 + 1));
  if (v14)
    llvm::MetadataTracking::untrack();
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 944))(a1);
  memset(v12, 0, sizeof(v12));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v12, (uint64_t)a1, a3, v8, 0, 0, 0);
  v9 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v8, (llvm::Value **)v12, a4, 1u, 1);
  v10 = a1[18];
  v16[0] = v9;
  v16[1] = v8;
  v16[2] = llvm::ConstantInt::get();
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.cliqueS_pop_commit_end", 26, v10, (uint64_t)v16, 3uLL);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCliqueSGeneral(_QWORD *a1, __int128 *a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  uint64_t v16;
  _OWORD v18[3];
  __int128 v19;
  uint64_t v20;
  int v21;
  _QWORD v22[4];

  v22[3] = *MEMORY[0x1E0C80C00];
  v19 = *a2;
  v20 = *((_QWORD *)a2 + 2);
  if (v20)
    llvm::MetadataTracking::track();
  v21 = *((_DWORD *)a2 + 6);
  AGCLLVMBuilder::InsertPoint::restoreIP((uint64_t)&v19, (uint64_t)(a1 + 1));
  if (v20)
    llvm::MetadataTracking::untrack();
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 944))(a1);
  v12 = v11;
  memset(v18, 0, sizeof(v18));
  AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(v18, (uint64_t)a1, a3, v10, 0, 0, 0);
  v13 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers((uint64_t)a1, a3, v10, (llvm::Value **)v18, a4, 1u, 1);
  v14 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCliqueSGeneral(AGCLLVMBuilder::InsertPoint,std::array<llvm::GlobalVariable *,6ul> const&,unsigned char,unsigned char)::functionNames[a5];
  v15 = strlen(v14);
  v16 = a1[18];
  v22[0] = v13;
  v22[1] = v10;
  v22[2] = v12;
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)v14, v15, v16, (uint64_t)v22, 3uLL);
}

unint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSizeAndUserPayloadSize(unsigned __int8 *a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  unsigned int v6;
  char v8;
  unsigned __int8 v9;

  v6 = a4;
  if (a3)
  {
    if ((a4 & 1) != 0)
      v8 = 6;
    else
      v8 = 5;
    if ((a4 & 0x40) != 0)
      v9 = 7;
    else
      v9 = v8;
  }
  else
  {
    v9 = (*(uint64_t (**)(unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 1384))(a1, a4);
  }
  return (AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSize(a1, v9, a5, (v6 >> 5) & 1) + 3) & 0xFFFFFFFFFFFFFFFCLL;
}

std::string *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getIntersectionMainFunctionName@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  unsigned int v5;
  int v7;
  char *v9;
  std::string *result;
  const std::string::value_type *v11;
  const std::string::value_type *v12;
  char **v13;

  v5 = a4;
  v7 = a2;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1352))(a1, a2, a4) == 4)
    v9 = "agc.intersection";
  else
    v9 = "agc.cliqueS";
  result = (std::string *)std::string::basic_string[abi:nn180100]<0>(a5, v9);
  if (a3 <= 7)
    result = std::string::append(a5, off_1E7ECDE70[a3]);
  v11 = ".miss";
  switch(v7)
  {
    case 0:
      v12 = ".triangle";
      goto LABEL_23;
    case 1:
      result = std::string::append(a5, ".curve");
      if (v5)
      {
        if (v5 != 1)
          return result;
        v11 = ".curve_motion_leaf";
      }
      else
      {
        v11 = ".curve_leaf";
      }
      return std::string::append(a5, v11);
    case 7:
      v11 = ".gin1122SWWA";
      return std::string::append(a5, v11);
    case 8:
      result = std::string::append(a5, ".box");
      if (v5)
      {
        if (v5 != 1)
          return result;
        v11 = ".box_motion_leaf";
      }
      else
      {
        v11 = ".box_leaf";
      }
      return std::string::append(a5, v11);
    case 9:
      if (v5)
      {
        if (v5 != 1)
          return result;
        v11 = ".pop";
      }
      else
      {
        v11 = ".push";
      }
      return std::string::append(a5, v11);
    case 10:
      if (v5 >= 4)
        return result;
      v13 = off_1E7ECDEB0;
      goto LABEL_25;
    case 11:
      if (v5 >= 4)
        return result;
      v13 = off_1E7ECDED0;
      goto LABEL_25;
    case 12:
      v12 = ".early_termination";
LABEL_23:
      result = std::string::append(a5, v12);
      if (v5 >= 4)
        return result;
      v13 = off_1E7ECDEF0;
LABEL_25:
      v11 = v13[v5];
      return std::string::append(a5, v11);
    case 13:
      return std::string::append(a5, v11);
    default:
      return result;
  }
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::createDriverParameterShaderCoreBinding(uint64_t a1)
{
  uint64_t v1;
  llvm::NamedMDNode *inserted;
  uint64_t v4[4];
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 192);
  llvm::StructType::create();
  v1 = llvm::User::operator new((llvm::User *)0x58);
  v4[0] = (uint64_t)"agc.ria.driver_parameters";
  v5 = 259;
  llvm::GlobalVariable::GlobalVariable();
  llvm::GlobalObject::setSection();
  llvm::GlobalObject::setAlignment();
  inserted = (llvm::NamedMDNode *)llvm::Module::getOrInsertNamedMetadata();
  if (!llvm::NamedMDNode::getNumOperands(inserted))
  {
    v4[0] = 0x1000000;
    RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(v4, 1);
    llvm::ConstantInt::get();
    v6 = llvm::ValueAsMetadata::get();
    llvm::MDTuple::getImpl();
    llvm::NamedMDNode::addOperand();
  }
  return v1;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildGetSizeIntersectionFunctionTable(uint64_t a1, uint64_t a2, llvm::Type **a3, llvm::Type **a4)
{
  llvm::Value *v8;
  llvm::Type *v9;
  uint64_t AlignedLoad;
  uint64_t v11;
  llvm::Type *v12;
  uint64_t v13;
  _WORD v15[20];
  _BYTE v16[32];
  __int16 v17;
  __int128 v18;
  llvm::Value *v19;
  int v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v18 = *(_OWORD *)a2;
  v19 = *(llvm::Value **)(a2 + 16);
  if (v19)
    llvm::MetadataTracking::track();
  v20 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v18);
  v8 = v19;
  if (v19)
    llvm::MetadataTracking::untrack();
  v17 = 257;
  v9 = AGCLLVMBuilder::tryDeducePointeeType(a4, v8);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v9, (uint64_t)a4, 0, (uint64_t)v16);
  v11 = *(_QWORD *)(a1 + 200);
  v12 = (llvm::Type *)llvm::PointerType::get();
  v17 = 257;
  v21[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v12, (const llvm::Twine *)v16);
  v13 = llvm::PointerType::get();
  v15[16] = 257;
  v21[1] = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, AlignedLoad, v13, (uint64_t)v15);
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.get_size_intersection_function_table", 40, v11, (uint64_t)v21, 2uLL);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildGetBufferIntersectionFunctionTable(uint64_t a1, uint64_t a2, llvm::Type **a3, llvm::Type **a4, uint64_t a5, uint64_t a6)
{
  llvm::Value *v12;
  llvm::Type *v13;
  uint64_t AlignedLoad;
  uint64_t v15;
  llvm::Type *v16;
  uint64_t v17;
  llvm::Value *v18;
  _BYTE v20[32];
  __int16 v21;
  _BYTE v22[32];
  __int16 v23;
  _BYTE v24[32];
  __int16 v25;
  __int128 v26;
  llvm::Value *v27;
  int v28;
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  v26 = *(_OWORD *)a2;
  v27 = *(llvm::Value **)(a2 + 16);
  if (v27)
    llvm::MetadataTracking::track();
  v28 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v26);
  v12 = v27;
  if (v27)
    llvm::MetadataTracking::untrack();
  v25 = 257;
  v13 = AGCLLVMBuilder::tryDeducePointeeType(a4, v12);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a1 + 8), v13, (uint64_t)a4, 0, (uint64_t)v24);
  v15 = *(_QWORD *)(a1 + 208);
  v16 = (llvm::Type *)llvm::PointerType::get();
  v25 = 257;
  v29[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v16, (const llvm::Twine *)v24);
  v17 = llvm::PointerType::get();
  v23 = 257;
  v29[1] = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, AlignedLoad, v17, (uint64_t)v22);
  v29[2] = a5;
  v18 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.get_buffer_intersection_function_table", 42, v15, (uint64_t)v29, 3uLL);
  v21 = 257;
  return llvm::IRBuilderBase::CreateCast(a1 + 8, 48, (uint64_t)v18, a6, (uint64_t)v20);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSetBufferIntersectionFunctionTable(uint64_t *a1, uint64_t a2, llvm::Type **a3, llvm::Type **a4, uint64_t a5, uint64_t a6)
{
  llvm::Value *v12;
  llvm::Type *v13;
  uint64_t AlignedLoad;
  uint64_t v15;
  llvm::Type *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[32];
  __int16 v21;
  _BYTE v22[32];
  __int16 v23;
  _BYTE v24[32];
  __int16 v25;
  __int128 v26;
  llvm::Value *v27;
  int v28;
  _QWORD v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  v26 = *(_OWORD *)a2;
  v27 = *(llvm::Value **)(a2 + 16);
  if (v27)
    llvm::MetadataTracking::track();
  v28 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP((uint64_t)a1, &v26);
  v12 = v27;
  if (v27)
    llvm::MetadataTracking::untrack();
  v25 = 257;
  v13 = AGCLLVMBuilder::tryDeducePointeeType(a4, v12);
  AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(a1 + 1, v13, (uint64_t)a4, 0, (uint64_t)v24);
  v15 = a1[18];
  v16 = (llvm::Type *)llvm::PointerType::get();
  v25 = 257;
  v29[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 1), a3, v16, (const llvm::Twine *)v24);
  v17 = llvm::PointerType::get();
  v23 = 257;
  v29[1] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 48, AlignedLoad, v17, (uint64_t)v22);
  v18 = a1[26];
  v21 = 257;
  v29[2] = llvm::IRBuilderBase::CreateCast((uint64_t)(a1 + 1), 47, a5, v18, (uint64_t)v20);
  v29[3] = a6;
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction((uint64_t)a1, (uint64_t)"agx.set_buffer_intersection_function_table", 42, v15, (uint64_t)v29, 4uLL);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSDoneRayTraceSCSFlagRead(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Type **v6;
  uint64_t *v7;
  llvm::Type *v8;
  llvm::Value *PointerCast;
  uint64_t v10;
  uint64_t v11;
  uint64_t Cast;
  llvm::Value *PerVridSetDataPtr;
  llvm::Type *v14;
  llvm::Value *v15;
  llvm::Type **GEP;
  llvm::Value *v17;
  llvm::Type *v18;
  _WORD v20[20];
  _QWORD v21[4];
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  int v25;

  v23 = *(_OWORD *)a2;
  v24 = *(_QWORD *)(a2 + 16);
  if (v24)
    llvm::MetadataTracking::track();
  v25 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v23);
  if (v24)
    llvm::MetadataTracking::untrack();
  v6 = *(llvm::Type ***)(a3 + 16);
  v7 = (uint64_t *)(a1 + 8);
  v8 = (llvm::Type *)llvm::PointerType::get();
  v22 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v6, v8, (const llvm::Twine *)v21);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
  v11 = *(_QWORD *)(a1 + 200);
  v21[0] = "vrid";
  v22 = 259;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v10, v11, (uint64_t)v21);
  PerVridSetDataPtr = (llvm::Value *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, Cast, PointerCast);
  v14 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 952))(*(_QWORD *)(a1 + 824));
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v14, PerVridSetDataPtr, v15, (const llvm::Twine *)v21);
  v20[16] = 257;
  v18 = AGCLLVMBuilder::tryDeducePointeeType(GEP, v17);
  return llvm::IRBuilderBase::CreateAlignedLoad(v7, v18, (uint64_t)GEP, 0, (uint64_t)v20);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSCSDoneRayTraceSCSFlagSet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::Type **v6;
  llvm::Type *v7;
  llvm::Value *PointerCast;
  uint64_t v9;
  uint64_t v10;
  uint64_t Cast;
  llvm::Value *PerVridSetDataPtr;
  llvm::Type **v13;
  llvm::Type *v14;
  llvm::Value *v15;
  uint64_t GEP;
  _QWORD v18[4];
  __int16 v19;
  __int128 v20;
  uint64_t v21;
  int v22;

  v20 = *(_OWORD *)a2;
  v21 = *(_QWORD *)(a2 + 16);
  if (v21)
    llvm::MetadataTracking::track();
  v22 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v20);
  if (v21)
    llvm::MetadataTracking::untrack();
  v6 = *(llvm::Type ***)(a3 + 16);
  v7 = (llvm::Type *)llvm::PointerType::get();
  v19 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), v6, v7, (const llvm::Twine *)v18);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 952))(a1);
  v10 = *(_QWORD *)(a1 + 200);
  v18[0] = "vrid";
  v19 = 259;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 39, v9, v10, (uint64_t)v18);
  PerVridSetDataPtr = (llvm::Value *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a1, Cast, PointerCast);
  v13 = (llvm::Type **)llvm::ConstantInt::get();
  v14 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 952))(*(_QWORD *)(a1 + 824));
  v15 = (llvm::Value *)llvm::ConstantInt::get();
  v19 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a1 + 8), v14, PerVridSetDataPtr, v15, (const llvm::Twine *)v18);
  return llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a1 + 8), v13, GEP, 0);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getRaytracingShaderType(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  BOOL v4;

  result = 3;
  switch(a2)
  {
    case 7:
      result = 7;
      break;
    case 9:
      v4 = a3 == 0;
      goto LABEL_6;
    case 10:
      v4 = (a3 & 0xFFFFFFFD) == 0;
LABEL_6:
      result = !v4;
      break;
    case 11:
      return result;
    case 12:
      result = 6;
      break;
    case 13:
      result = 5;
      break;
    default:
      result = 4;
      break;
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::replacePayloadSupportFunctions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  llvm::Function *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Instruction *v10;

  result = llvm::Module::getFunction();
  if (result)
  {
    v7 = (llvm::Function *)result;
    v8 = *(_QWORD *)(result + 8);
    if (v8)
    {
      do
      {
        v9 = *(_QWORD *)(v8 + 8);
        v10 = *(llvm::Instruction **)(v8 + 24);
        llvm::ConstantInt::get();
        llvm::Value::replaceAllUsesWith();
        llvm::Instruction::eraseFromParent(v10);
        v8 = v9;
      }
      while (v9);
    }
    llvm::Function::eraseFromParent(v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1368))(a1, a2, a3);
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPayloadVariant(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;

  if ((~a2 & 0x44) != 0)
    v2 = 3;
  else
    v2 = 4;
  v3 = a2 & 1;
  if ((a2 & 0x40) != 0)
    v3 = 2;
  if ((a2 & 4) != 0)
    return v2;
  else
    return v3;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::analyseIntersectionQueryUsage@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, char a4@<W4>, char a5@<W5>, uint64_t *a6@<X8>)
{
  uint64_t result;
  const llvm::Function *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  AGCLLVMUserObject *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  const llvm::Function *v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t j;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  BOOL v70;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t **v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  int v79;
  BOOL v80;
  BOOL v81;
  uint64_t v82;
  uint64_t **v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[24];
  char v89;
  uint64_t v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t Name;
  uint64_t v95;
  _QWORD v96[11];

  result = operator new();
  v13 = result;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_DWORD *)(result + 40) = 1065353216;
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)result = &off_1E7ECD7F0;
  *(_BYTE *)(result + 52) = a3;
  *(_BYTE *)(result + 53) = a4;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_QWORD *)(result + 56) = a2;
  *(_QWORD *)(result + 64) = result + 72;
  v84 = (uint64_t **)(result + 72);
  if ((a5 & 1) != 0)
    goto LABEL_168;
  if ((a4 & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 32);
    if (v15 == a1 + 24)
    {
      v14 = 1;
    }
    else
    {
      do
      {
        if (v15)
          v16 = (AGCLLVMUserObject *)(v15 - 56);
        else
          v16 = 0;
        result = AGCLLVMUserObject::functionIsUserExternDeclaration(v16, v12);
        if ((result & 1) != 0)
          break;
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15 != a1 + 24);
      v14 = result ^ 1;
      a3 = *(unsigned __int8 *)(v13 + 52);
    }
  }
  v85 = a3 ^ 1;
  if (!a3)
  {
    MEMORY[0x1CAA2CE94](&Name, a1);
    v17 = (_QWORD *)v96[0];
    if (!v96[0])
      goto LABEL_23;
    v18 = *(_QWORD *)(v13 + 56);
    v19 = v96;
    do
    {
      v20 = v17;
      v21 = v19;
      v22 = v17[4];
      if (v22 >= v18)
        v19 = v17;
      else
        ++v17;
      v17 = (_QWORD *)*v17;
    }
    while (v17);
    if (v19 == v96)
      goto LABEL_23;
    if (v22 < v18)
      v20 = v21;
    if (v20[4] > v18)
LABEL_23:
      v19 = v96;
    v23 = v19[5];
    v25 = (char *)operator new(8uLL);
    *(_QWORD *)v25 = v23;
    v92 = 0;
    v93 = 0;
    v91 = &v92;
    if (!v85)
    {
      v26 = 0;
      v55 = 0;
      goto LABEL_87;
    }
    v86 = a1;
    v26 = 0;
    v27 = v25 + 8;
    v28 = v25 + 8;
    while (1)
    {
      v30 = *((_QWORD *)v28 - 1);
      v28 -= 8;
      v29 = v30;
      v31 = *(_QWORD *)(v30 + 8);
      if (v26)
      {
        v32 = v26;
        do
        {
          v33 = v32[4];
          if (v29 >= v33)
          {
            if (v33 >= v29)
              goto LABEL_82;
            ++v32;
          }
          v32 = (uint64_t *)*v32;
        }
        while (v32);
        if (v31)
        {
          while (1)
          {
            while (1)
            {
              v34 = (uint64_t **)v26;
              v35 = v26[4];
              if (v29 >= v35)
                break;
              v26 = (uint64_t *)*v26;
              v36 = v34;
              if (!*v34)
                goto LABEL_40;
            }
            if (v35 >= v29)
              goto LABEL_44;
            v26 = (uint64_t *)v26[1];
            if (!v26)
            {
              v36 = v34 + 1;
              goto LABEL_40;
            }
          }
        }
      }
      else
      {
        v36 = &v92;
        v34 = &v92;
        if (v31)
        {
LABEL_40:
          v37 = (uint64_t *)operator new(0x28uLL);
          v37[4] = v29;
          *v37 = 0;
          v37[1] = 0;
          v37[2] = (uint64_t)v34;
          *v36 = v37;
          if (*v91)
          {
            v91 = (uint64_t **)*v91;
            v38 = *v36;
          }
          else
          {
            v38 = v37;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v92, v38);
          ++v93;
LABEL_44:
          v39 = v31 + 72;
          v40 = *(_QWORD *)(v31 + 80);
LABEL_45:
          if (v40 != v39)
          {
            v41 = v40 - 24;
            if (!v40)
              v41 = 0;
            v42 = v41 + 40;
            for (i = *(_QWORD *)(v41 + 48); ; i = *(_QWORD *)(i + 8))
            {
              if (i == v42)
              {
                v40 = *(_QWORD *)(v40 + 8);
                goto LABEL_45;
              }
              v44 = i ? i - 24 : 0;
              if ((AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::IntersectionQueryAnalysisGen6::instructionIsIndirectOrExternCall(v44, v24) & 1) != 0)break;
            }
            std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v92);
            v55 = 0;
            v85 = 0;
            a1 = v86;
            if (!v25)
              goto LABEL_89;
            goto LABEL_88;
          }
          v45 = *(_QWORD *)(v29 + 16);
          v46 = *(_QWORD *)(v29 + 24);
          if (v45 != v46)
          {
            while (1)
            {
              v88[0] = 0;
              v89 = 0;
              if (*(_BYTE *)(v45 + 24))
              {
                llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::reset((uint64_t)v88);
                llvm::ValueHandleBase::ValueHandleBase((llvm::ValueHandleBase *)v88, 3u, (_QWORD *)v45);
                v89 = 1;
              }
              v47 = *(_QWORD *)(v45 + 32);
              v90 = v47;
              if (v28 >= v27)
                break;
              *(_QWORD *)v28 = v47;
              v48 = v28 + 8;
LABEL_78:
              llvm::optional_detail::OptionalStorage<llvm::WeakTrackingVH,false>::reset((uint64_t)v88);
              v45 += 40;
              v28 = v48;
              if (v45 == v46)
                goto LABEL_81;
            }
            v49 = (v28 - v25) >> 3;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 61)
              abort();
            if ((v27 - v25) >> 2 > v50)
              v50 = (v27 - v25) >> 2;
            if ((unint64_t)(v27 - v25) >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            if (v51)
            {
              if (v51 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v52 = (char *)operator new(8 * v51);
            }
            else
            {
              v52 = 0;
            }
            v53 = &v52[8 * v49];
            v27 = &v52[8 * v51];
            *(_QWORD *)v53 = v47;
            v48 = v53 + 8;
            if (v28 == v25)
            {
              v25 = v28;
            }
            else
            {
              do
              {
                v54 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v53 - 1) = v54;
                v53 -= 8;
              }
              while (v28 != v25);
              if (!v25)
                goto LABEL_77;
            }
            operator delete(v25);
LABEL_77:
            v25 = v53;
            goto LABEL_78;
          }
          v48 = v28;
LABEL_81:
          v26 = v92;
          v28 = v48;
        }
      }
LABEL_82:
      if (v28 == v25)
      {
        v55 = 1;
        v25 = v28;
        a1 = v86;
LABEL_87:
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v26);
LABEL_88:
        operator delete(v25);
        v85 = v55;
LABEL_89:
        result = MEMORY[0x1CAA2CEA0](&Name);
        break;
      }
    }
  }
  v56 = *(_QWORD *)(a1 + 32);
  if (v56 != a1 + 24)
  {
    while (1)
    {
      v57 = v56 - 56;
      v87 = v56;
      if (!v56)
        v57 = 0;
      if (!v85 || v57 == *(_QWORD *)(v13 + 56) || *(_QWORD *)(v57 + 8))
        break;
LABEL_167:
      v56 = *(_QWORD *)(v87 + 8);
      if (v56 == a1 + 24)
        goto LABEL_168;
    }
    v58 = v57 + 72;
    v59 = *(_QWORD *)(v57 + 80);
LABEL_97:
    if (v59 == v58)
      goto LABEL_167;
    v60 = v59 - 24;
    if (!v59)
      v60 = 0;
    v61 = v60 + 40;
    for (j = *(_QWORD *)(v60 + 48); ; j = *(_QWORD *)(j + 8))
    {
      if (j == v61)
      {
        v59 = *(_QWORD *)(v59 + 8);
        goto LABEL_97;
      }
      if (j)
        v63 = j - 24;
      else
        v63 = 0;
      if (*(_BYTE *)(v63 + 16) != 84)
      {
LABEL_146:
        result = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::IntersectionQueryAnalysisGen6::instructionIsIndirectOrExternCall(v63, v12);
        if (((v14 | result ^ 1) & 1) == 0)
        {
          if (*(_BYTE *)(v63 + 16) != 84
            || (result = *(_QWORD *)(v63 - 32)) == 0
            || *(_BYTE *)(result + 16)
            || *(_QWORD *)(result + 24) != *(_QWORD *)(v63 + 72)
            || (result = llvm::Value::getName((llvm::Value *)result), (unint64_t)v12 < 0xF)
            || (*(_QWORD *)result == 0x5F6E69672E636761
              ? (v81 = *(_QWORD *)(result + 7) == 0x61775F323231315FLL)
              : (v81 = 0),
                !v81))
          {
            *(_BYTE *)(v13 + 51) = 1;
          }
        }
        continue;
      }
      v64 = *(_QWORD *)(v63 - 32);
      if (v64 && !*(_BYTE *)(v64 + 16) && *(_QWORD *)(v64 + 24) == *(_QWORD *)(v63 + 72))
      {
        result = llvm::Value::getName((llvm::Value *)v64);
        if ((unint64_t)v12 > 0xC)
        {
          v80 = *(_QWORD *)result == 0x65746E692E726961 && *(_QWORD *)(result + 5) == 0x746365737265746ELL;
          v79 = *(unsigned __int8 *)(v63 + 16);
          if (v80)
          {
            *(_BYTE *)(v13 + 48) = 1;
            if (v79 == 84)
            {
              result = *(_QWORD *)(v63 - 32);
              if (result)
              {
                if (!*(_BYTE *)(result + 16) && *(_QWORD *)(result + 24) == *(_QWORD *)(v63 + 72))
                {
                  Name = llvm::Value::getName((llvm::Value *)result);
                  v95 = v82;
                  result = llvm::StringRef::find();
                  if (result != -1)
                    *(_BYTE *)(v13 + 49) = 1;
                }
              }
            }
            continue;
          }
        }
        else
        {
          v79 = *(unsigned __int8 *)(v63 + 16);
        }
        if (v79 != 84)
          goto LABEL_146;
      }
      v65 = *(_QWORD *)(v63 - 32);
      if (!v65)
        goto LABEL_146;
      if (*(_BYTE *)(v65 + 16))
        goto LABEL_146;
      if (*(_QWORD *)(v65 + 24) != *(_QWORD *)(v63 + 72))
        goto LABEL_146;
      v66 = (_DWORD *)llvm::Value::getName(*(llvm::Value **)(v63 - 32));
      if ((unint64_t)v12 <= 3)
        goto LABEL_146;
      if (*v66 != 779250017)
        goto LABEL_146;
      Name = llvm::Value::getName((llvm::Value *)v65);
      v95 = v67;
      if (llvm::StringRef::find() == -1)
        goto LABEL_146;
      *(_BYTE *)(v13 + 50) = 1;
      v68 = *(_QWORD *)(v63 - 32);
      if (!v68 || *(_BYTE *)(v68 + 16) || *(_QWORD *)(v68 + 24) != *(_QWORD *)(v63 + 72))
        v68 = 0;
      result = llvm::Value::getName((llvm::Value *)v68);
      if ((unint64_t)v12 >= 0x1F)
      {
        v69 = *(_QWORD *)result == 0x6F6C6C612E726961 && *(_QWORD *)(result + 8) == 0x746E695F65746163;
        v70 = v69 && *(_QWORD *)(result + 16) == 0x6F69746365737265;
        if (v70 && *(_QWORD *)(result + 23) == 0x79726575715F6E6FLL)
        {
          v72 = v84;
          while (1)
          {
            v73 = *v72;
            v74 = v72;
            if (!*v72)
              break;
            while (1)
            {
              v72 = (uint64_t **)v73;
              v75 = v73[4];
              if (v63 < v75)
                break;
              if (v75 >= v63)
                goto LABEL_157;
              v73 = v72[1];
              if (!v73)
              {
                v74 = v72 + 1;
                goto LABEL_137;
              }
            }
          }
LABEL_137:
          v76 = (uint64_t *)operator new(0x28uLL);
          v76[4] = v63;
          *v76 = 0;
          v76[1] = 0;
          v76[2] = (uint64_t)v72;
          *v74 = v76;
          v77 = **(_QWORD **)(v13 + 64);
          if (v77)
          {
            *(_QWORD *)(v13 + 64) = v77;
            v78 = *v74;
          }
          else
          {
            v78 = v76;
          }
          result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v13 + 72), v78);
          ++*(_QWORD *)(v13 + 80);
        }
      }
LABEL_157:
      ;
    }
  }
LABEL_168:
  *a6 = v13;
  return result;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildWriteImageBlockIntrinsic(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, int a5)
{
  llvm::Value *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Cast;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Type **v18;
  llvm::Type *v19;
  const std::string::value_type *v20;
  llvm::Value *ZExtOrBitCast;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  llvm::Value *v35;
  llvm::Value *v36;
  uint64_t Element;
  llvm::Value *v38;
  llvm::Value *v39;
  uint64_t v40;
  std::string *v41;
  uint64_t v42;
  _BYTE v43[32];
  __int16 v44;
  std::string v45;
  void *v46;
  uint64_t v47;
  _BYTE v48[128];
  void *v49[2];
  _QWORD v50[17];

  v50[16] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&v45, *(char **)(a1 + 1920));
  if (a5)
    std::string::append(&v45, ".subset");
  std::string::append(&v45, ".coords");
  v49[0] = v50;
  v49[1] = (void *)0x1000000000;
  v46 = v48;
  v47 = 0x1000000000;
  if (*(_BYTE *)(a1 + 1815) && *(_BYTE *)(a2 + 26))
  {
    v10 = (llvm::Value *)llvm::ConstantInt::get();
    v44 = 257;
    a3 = (llvm::Value *)llvm::IRBuilderBase::CreateOr((llvm::IRBuilderBase *)(a1 + 8), a3, v10, (const llvm::Twine *)v43);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, (uint64_t)a3);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 192));
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, a4);
  v11 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, v11);
  v12 = *(_QWORD *)(a2 + 56);
  v13 = llvm::PointerType::get();
  v44 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 49, v12, v13, (uint64_t)v43);
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, Cast);
  v15 = llvm::PointerType::get();
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, v15);
  v16 = *(_QWORD *)(a2 + 32);
  if (!v16)
  {
    v17 = llvm::ConstantInt::get();
    v44 = 257;
    v16 = llvm::IRBuilderBase::CreateCast(a1 + 8, 48, v17, v15, (uint64_t)v43);
  }
  llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v16);
  switch(*(_DWORD *)(a2 + 4))
  {
    case 0:
      std::string::append(&v45, ".1d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 200));
      v18 = *(llvm::Type ***)(a2 + 136);
      v19 = *(llvm::Type **)(a1 + 200);
      goto LABEL_14;
    case 1:
      v20 = ".2d";
      goto LABEL_12;
    case 2:
      v20 = ".cubestf";
LABEL_12:
      std::string::append(&v45, v20);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 248));
      v18 = *(llvm::Type ***)(a2 + 136);
      v19 = *(llvm::Type **)(a1 + 248);
      goto LABEL_14;
    case 3:
      std::string::append(&v45, ".3d");
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 312));
      v18 = *(llvm::Type ***)(a2 + 136);
      v19 = *(llvm::Type **)(a1 + 312);
LABEL_14:
      v44 = 257;
      ZExtOrBitCast = llvm::IRBuilderBase::CreateZExtOrBitCast((llvm::IRBuilderBase *)(a1 + 8), v18, v19, (const llvm::Twine *)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, (uint64_t)ZExtOrBitCast);
      break;
    default:
      break;
  }
  if (*(_QWORD *)(a2 + 152))
  {
    std::string::append(&v45, ".array");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 192));
    v22 = *(_QWORD *)(a2 + 152);
    v23 = *(_QWORD *)(a1 + 192);
    v44 = 257;
    v24 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v22, v23, (uint64_t)v43);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v24);
  }
  if (*(_QWORD *)(a2 + 232))
  {
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 192));
    v25 = *(_QWORD *)(a2 + 232);
    v26 = *(_QWORD *)(a1 + 192);
    v44 = 257;
    v27 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v25, v26, (uint64_t)v43);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v27);
  }
  if (*(_QWORD *)(a2 + 168))
  {
    std::string::append(&v45, ".lod");
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 192));
    v28 = *(_QWORD *)(a2 + 168);
    v29 = *(_QWORD *)(a1 + 192);
    v44 = 257;
    v30 = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, v28, v29, (uint64_t)v43);
    llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v30);
  }
  if (a5)
  {
    v31 = **(_QWORD **)(a2 + 120);
    if ((*(_DWORD *)(v31 + 8) & 0xFE) == 0x12)
    {
      v32 = *(_DWORD *)(v31 + 32);
      if (!v32)
        goto LABEL_28;
    }
    else
    {
      v32 = 1;
    }
    v33 = 0;
    v34 = v32;
    do
    {
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 192));
      v35 = *(llvm::Value **)(a2 + 120);
      v44 = 257;
      v36 = (llvm::Value *)llvm::ConstantInt::get();
      Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v35, v36, (const llvm::Twine *)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, Element);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)v49, *(_QWORD *)(a1 + 192));
      v38 = *(llvm::Value **)(a2 + 128);
      v44 = 257;
      v39 = (llvm::Value *)llvm::ConstantInt::get();
      v40 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v38, v39, (const llvm::Twine *)v43);
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v46, v40);
      ++v33;
    }
    while (v34 != v33);
  }
LABEL_28:
  if (*(_DWORD *)(a2 + 16) == 1)
    std::string::append(&v45, ".rtz");
  llvm::FunctionType::get();
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v41 = &v45;
LABEL_33:
    strlen((const char *)v41);
    goto LABEL_34;
  }
  v41 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if (v45.__r_.__value_.__r.__words[0])
    goto LABEL_33;
LABEL_34:
  llvm::Module::getOrInsertFunction();
  v44 = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v42 + 24), v42, (uint64_t)v46, v47, (uint64_t)v43);
  if (v46 != v48)
    free(v46);
  if (v49[0] != v50)
    free(v49[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMemoryCacheCtlFromCoherenceScope()
{
  return llvm::ConstantInt::get();
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildQuadShuffleUp(uint64_t a1, __int128 *a2, llvm::Type **a3, llvm::Value *a4)
{
  uint64_t v8;
  llvm::CmpInst **v9;
  _BYTE v11[32];
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *((_DWORD *)a2 + 6);
  v8 = AGCLLVMGen3TargetLowerer::buildQuadShuffleUp((char **)a1, (uint64_t)&v16, a3, a4);
  if (v17)
    llvm::MetadataTracking::untrack();
  if (*(_BYTE *)(a1 + 1792))
  {
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 2);
    if (v14)
      llvm::MetadataTracking::track();
    v15 = *((_DWORD *)a2 + 6);
    v9 = (llvm::CmpInst **)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v13, *(_QWORD *)(a1 + 192));
    if (v14)
      llvm::MetadataTracking::untrack();
    v12 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 40, v9, (uint64_t)a4, (uint64_t)v11);
    v12 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v8;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildQuadShuffleDown(uint64_t a1, __int128 *a2, llvm::Type **a3, llvm::Value *a4)
{
  uint64_t v8;
  uint64_t *v9;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::CmpInst **Sub;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v19 = *a2;
  v20 = *((_QWORD *)a2 + 2);
  if (v20)
    llvm::MetadataTracking::track();
  v21 = *((_DWORD *)a2 + 6);
  v8 = AGCLLVMGen3TargetLowerer::buildQuadShuffleDown((char **)a1, (uint64_t)&v19, a3, a4);
  if (v20)
    llvm::MetadataTracking::untrack();
  if (*(_BYTE *)(a1 + 1792))
  {
    v9 = (uint64_t *)(a1 + 8);
    v10 = (llvm::Value *)llvm::ConstantInt::get();
    v16 = *a2;
    v17 = *((_QWORD *)a2 + 2);
    if (v17)
      llvm::MetadataTracking::track();
    v18 = *((_DWORD *)a2 + 6);
    v11 = (llvm::Value *)AGCLLVMGen3TargetLowerer::buildQuadElement(a1, (uint64_t)&v16, *(_QWORD *)(a1 + 192));
    v15 = 257;
    Sub = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v10, v11, (const llvm::Twine *)v14);
    if (v17)
      llvm::MetadataTracking::untrack();
    v15 = 257;
    llvm::IRBuilderBase::CreateICmp(v9, 40, Sub, (uint64_t)a4, (uint64_t)v14);
    v15 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v8;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdShuffleUp(uint64_t a1, __int128 *a2, llvm::Type **a3, llvm::Value *a4)
{
  uint64_t v8;
  llvm::CmpInst **v9;
  _BYTE v11[32];
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v16 = *a2;
  v17 = *((_QWORD *)a2 + 2);
  if (v17)
    llvm::MetadataTracking::track();
  v18 = *((_DWORD *)a2 + 6);
  v8 = AGCLLVMGen5TargetLowerer::buildSimdShuffleUp((char **)a1, (uint64_t)&v16, a3, a4);
  if (v17)
    llvm::MetadataTracking::untrack();
  if (*(_BYTE *)(a1 + 1792))
  {
    v13 = *a2;
    v14 = *((_QWORD *)a2 + 2);
    if (v14)
      llvm::MetadataTracking::track();
    v15 = *((_DWORD *)a2 + 6);
    v9 = (llvm::CmpInst **)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 1536))(a1, &v13, *(_QWORD *)(a1 + 192));
    if (v14)
      llvm::MetadataTracking::untrack();
    v12 = 257;
    llvm::IRBuilderBase::CreateICmp((uint64_t *)(a1 + 8), 40, v9, (uint64_t)a4, (uint64_t)v11);
    v12 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v8;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdShuffleDown(uint64_t a1, __int128 *a2, llvm::Type **a3, llvm::Value *a4)
{
  uint64_t v8;
  uint64_t *v9;
  llvm::Value *v10;
  llvm::Value *v11;
  llvm::CmpInst **Sub;
  _BYTE v14[32];
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  v19 = *a2;
  v20 = *((_QWORD *)a2 + 2);
  if (v20)
    llvm::MetadataTracking::track();
  v21 = *((_DWORD *)a2 + 6);
  v8 = AGCLLVMGen5TargetLowerer::buildSimdShuffleDown((char **)a1, (uint64_t)&v19, a3, a4);
  if (v20)
    llvm::MetadataTracking::untrack();
  if (*(_BYTE *)(a1 + 1792))
  {
    v9 = (uint64_t *)(a1 + 8);
    v10 = (llvm::Value *)llvm::ConstantInt::get();
    v16 = *a2;
    v17 = *((_QWORD *)a2 + 2);
    if (v17)
      llvm::MetadataTracking::track();
    v18 = *((_DWORD *)a2 + 6);
    v11 = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, _QWORD))(*(_QWORD *)a1 + 1536))(a1, &v16, *(_QWORD *)(a1 + 192));
    v15 = 257;
    Sub = (llvm::CmpInst **)llvm::IRBuilderBase::CreateSub((llvm::IRBuilderBase *)(a1 + 8), v10, v11, (const llvm::Twine *)v14);
    if (v17)
      llvm::MetadataTracking::untrack();
    v15 = 257;
    llvm::IRBuilderBase::CreateICmp(v9, 40, Sub, (uint64_t)a4, (uint64_t)v14);
    v15 = 257;
    return llvm::IRBuilderBase::CreateSelect();
  }
  return v8;
}

std::string *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getImageBlockWriteIntrinsicFromDimension@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  std::string *result;
  const std::string::value_type *v7;
  const std::string::value_type *v8;
  int v9;

  *a3 = 0;
  result = (std::string *)std::string::basic_string[abi:nn180100]<0>(a4, *(char **)(a1 + 1920));
  switch(a2)
  {
    case 0:
      v7 = ".coords.1d";
      goto LABEL_10;
    case 1:
      v7 = ".coords.1d.array";
      goto LABEL_10;
    case 2:
      v7 = ".coords.2d";
      goto LABEL_10;
    case 3:
      v8 = ".coords.2d.array";
      goto LABEL_12;
    case 4:
      v7 = ".coords.2d.msaa";
      goto LABEL_10;
    case 5:
      result = std::string::append(result, ".coords.3d");
      v9 = 2;
      goto LABEL_13;
    case 6:
      v7 = ".coords.cubestf";
      goto LABEL_10;
    case 7:
      v7 = ".coords.cubestf.array";
LABEL_10:
      result = std::string::append(result, v7);
      break;
    case 8:
      v8 = ".coords.2d.msaa.array";
LABEL_12:
      result = std::string::append(result, v8);
      v9 = 1;
LABEL_13:
      *a3 = v9;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::programTypeSpecialRegisterValueForShaderType(uint64_t a1, int a2)
{
  uint64_t result;

  result = 0;
  switch(a2)
  {
    case 0:
      result = 2;
      break;
    case 1:
      result = 4;
      break;
    case 2:
      result = 5;
      break;
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
      return result;
    case 7:
      result = 3;
      break;
    case 9:
      result = 1;
      break;
    default:
      if ((a2 - 29) >= 2)
        result = 0;
      else
        result = 6;
      break;
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getFreeSpaceInRayCore()
{
  return 0;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildMemCpy2DConditionalLoadStoreExpansion(uint64_t a1, unsigned int *a2)
{
  __int128 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  llvm::Value *v8;
  uint64_t v9;
  llvm::Value *v10;
  uint64_t v11;
  llvm::APInt *v12;
  unsigned int v13;
  llvm::APInt *v14;
  unsigned int v15;
  BOOL v16;
  llvm::Value *v17;
  uint64_t Element;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  llvm::Value *v23;
  uint64_t v24;
  llvm::Value *v25;
  llvm::Value *v26;
  llvm::Value *v27;
  llvm::Value *v28;
  int v29;
  const std::string::value_type *v31;
  std::string *v32;
  std::string::size_type v33;
  llvm::APInt *v34;
  unsigned int v35;
  llvm::Value *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t Mul;
  uint64_t v42;
  void *v43;
  _QWORD *v45;
  int v46;
  _QWORD *v47;
  int v48;
  int v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type size;
  uint64_t v55;
  uint64_t **v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  llvm::Value *v64;
  uint64_t v65;
  uint64_t v66;
  std::string::size_type v67;
  __int128 v68;
  int v69;
  std::string v70;
  std::string v71;
  __int16 v72;
  std::string __src;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v4 = *(__int128 **)a2;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 64);
  v6 = *(unsigned __int8 **)(*(_QWORD *)a2 + 80);
  v67 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v7 = *(_DWORD *)(*(_QWORD *)v67 + 8);
  if ((v7 & 0xFE) == 0x12)
    v7 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v67 + 16) + 8);
  v68 = *v4;
  v8 = (llvm::Value *)*((_QWORD *)v4 + 9);
  v9 = *((_QWORD *)v4 + 11);
  v10 = (llvm::Value *)*((_QWORD *)v4 + 5);
  v65 = *((_QWORD *)v4 + 3);
  v66 = *((_QWORD *)v4 + 6);
  v64 = (llvm::Value *)*((_QWORD *)v4 + 7);
  if (*(_BYTE *)(v5 + 16) != 16)
    goto LABEL_11;
  v11 = *((_QWORD *)v4 + 4);
  v12 = (llvm::APInt *)(v5 + 24);
  v13 = *(_DWORD *)(v5 + 32);
  if (v13 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v12) != v13 - 1)
    {
LABEL_11:
      v69 = 0;
      goto LABEL_12;
    }
  }
  else if (*(_QWORD *)v12 != 1)
  {
    goto LABEL_11;
  }
  if (*(_BYTE *)(v11 + 16) != 16)
    goto LABEL_11;
  v14 = (llvm::APInt *)(v11 + 24);
  v15 = *(_DWORD *)(v11 + 32);
  if (v15 > 0x40)
    v16 = llvm::APInt::countLeadingZerosSlowCase(v14) == v15 - 1;
  else
    v16 = *(_QWORD *)v14 == 1;
  v63 = v16;
  v69 = v63;
LABEL_12:
  if (v6[16] > 0x14u)
  {
LABEL_18:
    v21 = 0;
    goto LABEL_19;
  }
  v72 = 257;
  v17 = (llvm::Value *)llvm::ConstantInt::get();
  Element = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v6, v17, (const llvm::Twine *)&v71);
  if (*(_BYTE *)(Element + 16) == 16)
    v19 = Element;
  else
    v19 = 0;
  v20 = *(_DWORD *)(v19 + 32);
  if (v20 > 0x40)
  {
    if (**(_QWORD **)(v19 + 24))
      goto LABEL_18;
  }
  else if ((uint64_t)(*(_QWORD *)(v19 + 24) << -(char)v20) >> -(char)v20)
  {
    goto LABEL_18;
  }
  v72 = 257;
  v36 = (llvm::Value *)llvm::ConstantInt::get();
  v37 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), (llvm::Value *)v6, v36, (const llvm::Twine *)&v71);
  if (*(_BYTE *)(v37 + 16) == 16)
    v38 = v37;
  else
    v38 = 0;
  v39 = *(_DWORD *)(v38 + 32);
  if (v39 > 0x40)
    v40 = **(_QWORD **)(v38 + 24);
  else
    v40 = (uint64_t)(*(_QWORD *)(v38 + 24) << -(char)v39) >> -(char)v39;
  if (v40)
    v62 = 0;
  else
    v62 = v10 == v8;
  v21 = v62;
LABEL_19:
  v22 = v7 & 0xFFFFFF00;
  v72 = 257;
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v24 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v10, v23, (const llvm::Twine *)&v71);
  v72 = 257;
  v25 = (llvm::Value *)llvm::ConstantInt::get();
  v26 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v8, v25, (const llvm::Twine *)&v71);
  v72 = 257;
  v27 = (llvm::Value *)llvm::ConstantInt::get();
  v28 = (llvm::Value *)llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a1 + 8), v8, v27, (const llvm::Twine *)&v71);
  v29 = 0;
  if (v21)
  {
    if (v24 == v65 && v26 == v64)
      v29 = v69;
    else
      v29 = 0;
  }
  std::string::basic_string[abi:nn180100]<0>(&v71, *(char **)(a1 + 2544));
  if (v22 == 768)
    v31 = ".read";
  else
    v31 = ".write";
  v32 = std::string::append(&v71, v31);
  v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(v9 + 16) == 16)
  {
    v34 = (llvm::APInt *)(v9 + 24);
    v35 = *(_DWORD *)(v9 + 32);
    if (v35 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v34) != v35 - 1)
        goto LABEL_43;
    }
    else if (*(_QWORD *)v34 != 1)
    {
      goto LABEL_43;
    }
    std::string::append(&v70, ".edgeclamped");
  }
LABEL_43:
  if (v29)
  {
    v72 = 257;
    Mul = llvm::IRBuilderBase::CreateMul((llvm::IRBuilderBase *)(a1 + 8), v26, v28, (const llvm::Twine *)&v71);
    *(_OWORD *)&__src.__r_.__value_.__l.__data_ = v68;
    __src.__r_.__value_.__r.__words[2] = v67;
    v74 = v66;
    v75 = Mul;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__r_.__value_.__r.__words[2];
    v71.__r_.__value_.__l.__size_ = 0x500000000;
    llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&v71, &__src, &v76);
    v42 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 1848))(a1, &v71);
    v43 = (void *)v71.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v71.__r_.__value_.__l.__data_ == &v71.__r_.__value_.__r.__words[2])
      goto LABEL_46;
    goto LABEL_45;
  }
  if (v69)
  {
    std::string::append(&v70, ".noholes");
  }
  else
  {
    v45 = (_QWORD *)(v68 + 24);
    if (*(_DWORD *)(v68 + 32) >= 0x41u)
      v45 = (_QWORD *)*v45;
    v46 = *(_DWORD *)v45;
    v47 = (_QWORD *)(*((_QWORD *)&v68 + 1) + 24);
    if (*(_DWORD *)(*((_QWORD *)&v68 + 1) + 32) >= 0x41u)
      v47 = (_QWORD *)*v47;
    v48 = *(_DWORD *)v47;
    if (v48 > 4 && v46 == v48)
      v50 = v48 >> 2;
    else
      v50 = v46 / v48;
    std::to_string(&__src, v50);
    v51 = std::string::insert(&__src, 0, ".withholes.v");
    v52 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v53 = &v71;
    else
      v53 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      size = v71.__r_.__value_.__l.__size_;
    std::string::append(&v70, (const std::string::value_type *)v53, size);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__src.__r_.__value_.__l.__data_);
  }
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__r_.__value_.__r.__words[2];
  v71.__r_.__value_.__l.__size_ = 0xC00000000;
  v55 = a2[2];
  if ((_DWORD)v55)
  {
    v56 = *(uint64_t ***)a2;
    v57 = 8 * v55;
    do
    {
      v58 = *v56++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&v71, *v58);
      v57 -= 8;
    }
    while (v57);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v59 = *(_QWORD *)a2;
  v60 = a2[2];
  LOWORD(v75) = 257;
  llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v61 + 24), v61, v59, v60, (uint64_t)&__src);
  v42 = *(_QWORD *)(a1 + 2576);
  v43 = (void *)v71.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v71.__r_.__value_.__l.__data_ != &v71.__r_.__value_.__r.__words[2])
LABEL_45:
    free(v43);
LABEL_46:
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  return v42;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::IntersectionQueryAnalysisGen6::intersectionQueryResidencyForQueryAtInstruction(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;

  v2 = a1[2];
  if (!*(_QWORD *)&v2)
    goto LABEL_17;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*(_QWORD *)&a1[1] + 8 * v7);
  if (!v8)
    goto LABEL_17;
  v9 = (_QWORD *)*v8;
  if (!v9)
    goto LABEL_17;
  while (1)
  {
    v10 = v9[1];
    if (v5 == v10)
      break;
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *(_QWORD *)&v2)
        v10 %= *(_QWORD *)&v2;
    }
    else
    {
      v10 &= *(_QWORD *)&v2 - 1;
    }
    if (v10 != v7)
      goto LABEL_17;
LABEL_16:
    v9 = (_QWORD *)*v9;
    if (!v9)
      goto LABEL_17;
  }
  if (v9[2] != a2)
    goto LABEL_16;
  a2 = v9[3];
LABEL_17:
  if (*(_QWORD *)&a1[10] != 1)
    return 2;
  v11 = (_QWORD *)a1[9];
  if (!v11)
    return 2;
  while (2)
  {
    v12 = v11[4];
    if (a2 < v12)
    {
LABEL_22:
      v11 = (_QWORD *)*v11;
      if (!v11)
        return 2;
      continue;
    }
    break;
  }
  if (v12 < a2)
  {
    ++v11;
    goto LABEL_22;
  }
  if (a1[6].i8[3] || a1[6].i8[0] || a1[6].i8[4])
    return 2;
  return 0;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::computeDriverPayloadSize(unsigned __int8 *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int i;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a4;
  v6 = a2;
  v8 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 1880))(a1, a2, a4);
  v9 = 0;
  v10 = a1[1810];
  for (i = 2; i != 22; ++i)
  {
    if (RaytracingConstantsGen1::payloadHasSegment(i, v6, v4, v10 != 0))
    {
      v12 = RaytracingConstantsGen1::payloadSegmentSize(i, a1[2800]);
      if ((i - 13) <= 6)
      {
        v13 = 0x2010101010101uLL >> (8 * (i - 13));
        if (a3 >= (v13 & 3))
          v14 = (a3 - (v13 & 3)) / ((((v13 & 3) << 8) | ((v13 & 3) << 16)) >> 16) + 1;
        else
          v14 = 0;
        v12 *= v14;
      }
      if (v12 - 1 >= v8)
        v15 = 0;
      else
        v15 = v12;
      if (v12 - 1 >= v8)
        v16 = v12;
      else
        v16 = 0;
      v8 -= v15;
      v9 += v16;
    }
  }
  return v9;
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::Value *v12;
  _WORD v14[20];
  void *v15;
  uint64_t v16;
  _QWORD v17[21];

  v17[20] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x1400000000;
  if (a6)
  {
    if (a6 < 0x15)
    {
      v9 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
      v9 = v16;
    }
    if (v9 != a6)
      bzero((char *)v15 + 8 * v9, 8 * a6 - 8 * v9);
    v10 = 0;
    LODWORD(v16) = a6;
    do
    {
      *((_QWORD *)v15 + v10) = **(_QWORD **)(a5 + 8 * v10);
      ++v10;
    }
    while (a6 != v10);
  }
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v14[16] = 257;
  v12 = llvm::IRBuilderBase::CreateCall(a1 + 8, *(_QWORD *)(v11 + 24), v11, a5, a6, (uint64_t)v14);
  if (v15 != v17)
    free(v15);
  return v12;
}

uint64_t RaytracingConstantsGen1::payloadHasSegment(int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;

  result = 1;
  switch(a1)
  {
    case 8:
    case 9:
      v6 = a2 - 5 >= 3;
      goto LABEL_5;
    case 10:
      v7 = a2 >= 8;
      v8 = 222;
      goto LABEL_10;
    case 11:
      return a4;
    case 12:
      return a4 ^ 1;
    case 13:
    case 16:
      v7 = a2 >= 8;
      v8 = 198;
LABEL_10:
      v9 = (v8 >> a2) & 1;
      if (v7)
        result = 0;
      else
        result = v9;
      break;
    case 14:
    case 15:
    case 17:
    case 18:
      v6 = a2 - 3 >= 2;
LABEL_5:
      result = !v6;
      break;
    case 20:
    case 22:
      result = 0;
      break;
    case 21:
      if (a2 - 8 < 0xFFFFFFFD)
        result = a3;
      else
        result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RaytracingConstantsGen1::payloadSegmentSize(int a1, unsigned int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 1:
      result = 512;
      break;
    case 2:
    case 3:
    case 4:
    case 10:
      result = 8;
      break;
    case 5:
    case 6:
    case 8:
    case 21:
      result = 4;
      break;
    case 7:
    case 13:
    case 14:
    case 16:
    case 17:
      result = 6;
      break;
    case 9:
      result = 20 * a2;
      break;
    case 11:
    case 12:
      result = 12;
      break;
    case 15:
    case 18:
      result = 100;
      break;
    case 19:
      result = 64;
      break;
    case 20:
    case 22:
      result = 0;
      break;
    default:
      result = 32;
      break;
  }
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(uint64_t a1, uint64_t a2, llvm::Value *a3)
{
  llvm::IRBuilderBase *v5;
  uint64_t v6;
  llvm::Value *Cast;
  llvm::Value *v8;
  llvm::Value *LShr;
  llvm::Type *v10;
  llvm::Value *v11;
  llvm::Type **GEP;
  llvm::Type *v13;
  llvm::Value *PointerCast;
  llvm::Type *v15;
  llvm::Value *v16;
  llvm::Value *Mul;
  _BYTE v19[32];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v5 = (llvm::IRBuilderBase *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 200);
  v21[0] = "vrid_ext";
  v22 = 259;
  Cast = (llvm::Value *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, a2, v6, (uint64_t)v21);
  v8 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v5, Cast, v8, (const llvm::Twine *)v21);
  v10 = *(llvm::Type **)(a1 + 208);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 832))(*(_QWORD *)(a1 + 824));
  v11 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP(v5, v10, a3, v11, (const llvm::Twine *)v21);
  v13 = (llvm::Type *)llvm::PointerType::get();
  v20 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v5, GEP, v13, (const llvm::Twine *)v19);
  v15 = *(llvm::Type **)(a1 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 824) + 976))(*(_QWORD *)(a1 + 824));
  v16 = (llvm::Value *)llvm::ConstantInt::get();
  v22 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v5, LShr, v16, (const llvm::Twine *)v21);
  v20 = 257;
  return llvm::IRBuilderBase::CreateGEP(v5, v15, PointerCast, Mul, (const llvm::Twine *)v19);
}

uint64_t RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(_DWORD *a1, int a2)
{
  int SectionEnd;
  int v4;

  SectionEnd = 0;
  v4 = 0;
  switch(a2)
  {
    case 1:
      SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 7);
      v4 = 24576;
      break;
    case 2:
      SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 1);
      v4 = 0x2000;
      break;
    case 3:
      SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 2);
      v4 = 0x40000;
      break;
    case 4:
      SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 3);
      v4 = 0x10000;
      break;
    case 5:
      SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 4);
      v4 = 8 * (unsigned __int16)*a1 * ((*a1 >> 19) & 0x1FE0);
      break;
    case 6:
      SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 8);
      v4 = 0;
      break;
    case 7:
      return (v4 + SectionEnd);
    case 8:
      SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 5);
      v4 = ((*(_QWORD *)a1 >> 19) & 0x1FE0) * HIWORD(*(_QWORD *)a1);
      break;
    default:
      v4 = 0;
      break;
  }
  return (v4 + SectionEnd);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildPayloadStridesFromSCS(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::Type **a6, char a7)
{
  llvm::Type *v13;
  llvm::Type **v14;
  llvm::Value *PointerCast;
  llvm::Type **v16;
  llvm::Value *v17;
  llvm::Type *v18;
  llvm::Value *AlignedLoad;
  llvm::Value *v20;
  llvm::Value *PerVridSetDataPtr;
  llvm::Type *v22;
  llvm::Value *v23;
  uint64_t GEP;
  llvm::Type *v25;
  llvm::Value *v26;
  uint64_t v27;
  llvm::Type *v28;
  llvm::Value *v29;
  uint64_t v30;
  llvm::Type *v31;
  llvm::Type *v32;
  llvm::Type **Cast;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  llvm::Type *v37;
  _QWORD v39[4];
  __int16 v40;
  _BYTE v41[32];
  __int16 v42;

  llvm::PointerType::get();
  v13 = (llvm::Type *)llvm::PointerType::get();
  v14 = *(llvm::Type ***)(a3 + 16);
  v42 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a2 + 8), v14, v13, (const llvm::Twine *)v41);
  v16 = *(llvm::Type ***)(a3 + 32);
  v42 = 257;
  v18 = AGCLLVMBuilder::tryDeducePointeeType(v16, v17);
  AlignedLoad = (llvm::Value *)llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a2 + 8), v18, (uint64_t)v16, 0, (uint64_t)v41);
  v39[0] = "global_ray_stride";
  v40 = 259;
  v20 = (llvm::Value *)llvm::ConstantInt::get();
  *a1 = llvm::IRBuilderBase::CreateExtractElement((llvm::IRBuilderBase *)(a2 + 8), AlignedLoad, v20, (const llvm::Twine *)v39);
  PerVridSetDataPtr = (llvm::Value *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getPerVridSetDataPtr(a2, a4, PointerCast);
  v22 = *(llvm::Type **)(a2 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 824) + 928))(*(_QWORD *)(a2 + 824));
  v23 = (llvm::Value *)llvm::ConstantInt::get();
  v42 = 257;
  GEP = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a2 + 8), v22, PerVridSetDataPtr, v23, (const llvm::Twine *)v41);
  v25 = *(llvm::Type **)(a2 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 824) + 936))(*(_QWORD *)(a2 + 824));
  v26 = (llvm::Value *)llvm::ConstantInt::get();
  v42 = 257;
  v27 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a2 + 8), v25, PerVridSetDataPtr, v26, (const llvm::Twine *)v41);
  v28 = *(llvm::Type **)(a2 + 200);
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 824) + 944))(*(_QWORD *)(a2 + 824));
  v29 = (llvm::Value *)llvm::ConstantInt::get();
  v42 = 257;
  v30 = llvm::IRBuilderBase::CreateGEP((llvm::IRBuilderBase *)(a2 + 8), v28, PerVridSetDataPtr, v29, (const llvm::Twine *)v41);
  v31 = *(llvm::Type **)(a2 + 200);
  v42 = 257;
  a1[2] = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a2 + 8), v31, v30, 0, (uint64_t)v41);
  v32 = *(llvm::Type **)(a2 + 200);
  if ((a5 & 0xFF00000000) != 0)
  {
    Cast = (llvm::Type **)llvm::ConstantInt::get();
    llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a2 + 8), Cast, GEP, 0);
  }
  else
  {
    v42 = 257;
    v34 = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a2 + 8), v32, GEP, 0, (uint64_t)v41);
    v35 = *(_QWORD *)(a2 + 200);
    v40 = 257;
    Cast = (llvm::Type **)llvm::IRBuilderBase::CreateCast(a2 + 8, 38, v34, v35, (uint64_t)v39);
  }
  a1[1] = Cast;
  if (a7)
  {
    result = llvm::IRBuilderBase::CreateAlignedStore((uint64_t *)(a2 + 8), a6, v27, 0);
  }
  else
  {
    v37 = *(llvm::Type **)(a2 + 200);
    v42 = 257;
    result = llvm::IRBuilderBase::CreateAlignedLoad((uint64_t *)(a2 + 8), v37, v27, 0, (uint64_t)v41);
    a6 = (llvm::Type **)result;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = a6;
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildRayPointers(uint64_t a1, uint64_t a2, uint64_t a3, llvm::Value **a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t *v10;
  llvm::IRBuilderBase *v11;
  uint64_t v12;
  uint64_t *Cast;
  uint64_t v14;
  llvm::Type **GEP;
  llvm::Type *v16;
  llvm::Value *PointerCast;
  llvm::Value *v18;
  llvm::Value *v19;
  uint64_t v20;
  uint64_t InsertValue;
  uint64_t *v22;
  uint64_t v23;
  llvm::Value *v24;
  uint64_t v25;
  uint64_t v26;
  llvm::Type **v27;
  llvm::Value *v28;
  llvm::Value *v29;
  llvm::Value *v30;
  llvm::Value *v31;
  llvm::Value *LShr;
  unint64_t v33;
  llvm::Type *v34;
  llvm::Value *Mul;
  llvm::Type *v36;
  unsigned int v37;
  llvm::Type *v38;
  unsigned int v39;
  llvm::Value *v40;
  llvm::Value *v41;
  int i;
  unint64_t v43;
  unint64_t v44;
  llvm::Value *v45;
  uint64_t v46;
  llvm::Value *v47;
  uint64_t Sub;
  llvm::Value *v49;
  llvm::Value *v50;
  llvm::Value *UDiv;
  llvm::Value *v52;
  llvm::Value *Select;
  llvm::Value *v54;
  llvm::Type *v55;
  uint64_t v56;
  llvm::Type *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  llvm::Type *v60;
  llvm::Value *v61;
  llvm::Value *v62;
  llvm::Value *v63;
  llvm::Value *v64;
  llvm::Value *v65;
  llvm::Value *v66;
  llvm::Value *v67;
  llvm::Value *Add;
  uint64_t v69;
  llvm::Type *v70;
  llvm::Value *v72;
  llvm::Value *v73;
  llvm::Type *v74;
  llvm::Type *v75;
  llvm::Value *v76;
  llvm::CmpInst **v78;
  llvm::Value *v80;
  llvm::Type **v82;
  llvm::Type **v83;
  llvm::Value *v84;
  uint64_t v85;
  _DWORD v86[8];
  __int16 v87;
  _QWORD v88[4];
  __int16 v89;
  uint64_t *v90[4];
  __int16 v91;
  uint64_t *v92[4];

  v92[2] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v10 = *(uint64_t **)(a2 + 8);
  v82 = *(llvm::Type ***)(a2 + 24);
  v83 = *(llvm::Type ***)(a2 + 40);
  v11 = (llvm::IRBuilderBase *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 200);
  v88[0] = "vrid_ext";
  v89 = 259;
  Cast = (uint64_t *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, a3, v12, (uint64_t)v88);
  v92[0] = (uint64_t *)llvm::ConstantInt::get();
  v92[1] = Cast;
  v14 = v10[3];
  v88[0] = "ray_core";
  v89 = 259;
  GEP = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v11, v14, v10, v92, 2, (uint64_t)v88);
  v16 = (llvm::Type *)llvm::PointerType::get();
  v74 = (llvm::Type *)llvm::PointerType::get();
  v89 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast(v11, GEP, v16, (const llvm::Twine *)v88);
  v18 = (llvm::Value *)llvm::ConstantInt::get();
  v88[0] = "vrid_level_1";
  v89 = 259;
  v76 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v11, (llvm::Value *)Cast, v18, (const llvm::Twine *)v88);
  v19 = (llvm::Value *)llvm::ConstantInt::get();
  v88[0] = "vrid_level_2";
  v89 = 259;
  v80 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v11, (llvm::Value *)Cast, v19, (const llvm::Twine *)v88);
  llvm::ArrayType::get(v16, (llvm::Type *)0x16);
  v20 = llvm::UndefValue::get();
  LODWORD(v90[0]) = 0;
  v89 = 257;
  InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v11, v20, (uint64_t)PointerCast, (uint64_t)v90, 1, (uint64_t)v88);
  if (a7)
  {
    v22 = *(uint64_t **)a2;
    v23 = InsertValue;
    v24 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.ria.token.id", 22, *(_QWORD *)(a1 + 192), 0, 0);
    v90[0] = (uint64_t *)llvm::ConstantInt::get();
    v25 = *(_QWORD *)(a1 + 200);
    v89 = 257;
    v90[1] = (uint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v11, 39, (uint64_t)v24, v25, (uint64_t)v88);
    v26 = v22[3];
    v88[0] = "token_buffer";
    v89 = 259;
    v27 = (llvm::Type **)llvm::IRBuilderBase::CreateGEP((uint64_t)v11, v26, v22, v90, 2, (uint64_t)v88);
    v89 = 257;
    v28 = llvm::IRBuilderBase::CreatePointerCast(v11, v27, v16, (const llvm::Twine *)v88);
    v86[0] = 1;
    v89 = 257;
    InsertValue = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v11, v23, (uint64_t)v28, (uint64_t)v86, 1, (uint64_t)v88);
  }
  v85 = InsertValue;
  if (a5 <= 6 && (((1 << a5) & 0x4A) != 0 || ((1 << a5) & 0x21) != 0))
  {
    v78 = (llvm::CmpInst **)llvm::ConstantInt::get();
    llvm::ConstantInt::get();
  }
  else
  {
    v72 = a4[3];
    v73 = (llvm::Value *)llvm::ConstantInt::get();
    v89 = 257;
    v78 = (llvm::CmpInst **)v72;
    llvm::IRBuilderBase::CreateAdd(v11, v72, v73, (const llvm::Twine *)v88);
  }
  v89 = 257;
  v29 = llvm::IRBuilderBase::CreatePointerCast(v11, v82, v16, (const llvm::Twine *)v88);
  v89 = 257;
  v75 = llvm::IRBuilderBase::CreatePointerCast(v11, v83, v74, (const llvm::Twine *)v88);
  v30 = *a4;
  v88[0] = "global_vrid_size";
  v89 = 259;
  v31 = (llvm::Value *)llvm::ConstantInt::get();
  LShr = (llvm::Value *)llvm::IRBuilderBase::CreateLShr(v11, v30, v31, (const llvm::Twine *)v88);
  v33 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1880))(a1, a5, a6);
  v34 = *(llvm::Type **)(a1 + 184);
  v89 = 257;
  Mul = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v76, LShr, (const llvm::Twine *)v88);
  v90[0] = (uint64_t *)"segment_start";
  v91 = 259;
  v36 = v34;
  v37 = a6;
  v84 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v11, v36, v29, Mul, (const llvm::Twine *)v90);
  v38 = *(llvm::Type **)(a1 + 184);
  v39 = a5;
  v40 = (llvm::Value *)llvm::ConstantInt::get();
  v89 = 257;
  v41 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v11, v38, PointerCast, v40, (const llvm::Twine *)v88);
  for (i = 2; i != 22; ++i)
  {
    if (RaytracingConstantsGen1::payloadHasSegment(i, v39, v37, *(unsigned __int8 *)(a1 + 1810)))
    {
      v43 = RaytracingConstantsGen1::payloadSegmentSize(i, *(unsigned __int8 *)(a1 + 2800));
      if (v43)
      {
        v44 = v33 - v43;
        if (v33 >= v43)
        {
          LODWORD(v90[0]) = i;
          v89 = 257;
          v85 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v11, v85, (uint64_t)v41, (uint64_t)v90, 1, (uint64_t)v88);
          v60 = *(llvm::Type **)(a1 + 184);
          v61 = (llvm::Value *)llvm::ConstantInt::get();
          v89 = 257;
          v41 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v11, v60, v41, v61, (const llvm::Twine *)v88);
          v33 = v44;
        }
        else
        {
          v45 = (llvm::Value *)llvm::ConstantInt::get();
          if ((i - 13) <= 6)
          {
            v46 = llvm::ConstantInt::get();
            v89 = 257;
            llvm::IRBuilderBase::CreateICmp((uint64_t *)v11, 35, v78, v46, (uint64_t)v88);
            v47 = (llvm::Value *)llvm::ConstantInt::get();
            v89 = 257;
            Sub = llvm::IRBuilderBase::CreateSub(v11, (llvm::Value *)v78, v47, (const llvm::Twine *)v88);
            v49 = (llvm::Value *)llvm::ConstantInt::get();
            v91 = 257;
            v50 = (llvm::Value *)Sub;
            v37 = a6;
            UDiv = (llvm::Value *)llvm::IRBuilderBase::CreateUDiv(v11, v50, v49, (const llvm::Twine *)v90);
            v52 = (llvm::Value *)llvm::ConstantInt::get();
            v87 = 257;
            llvm::IRBuilderBase::CreateAdd(v11, UDiv, v52, (const llvm::Twine *)v86);
            llvm::ConstantInt::get();
            Select = (llvm::Value *)llvm::IRBuilderBase::CreateSelect();
            v89 = 257;
            v45 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v45, Select, (const llvm::Twine *)v88);
          }
          v89 = 257;
          v54 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v80, v45, (const llvm::Twine *)v88);
          v55 = *(llvm::Type **)(a1 + 184);
          v89 = 257;
          v56 = llvm::IRBuilderBase::CreateGEP(v11, v55, v84, v54, (const llvm::Twine *)v88);
          v86[0] = i;
          v91 = 257;
          v85 = llvm::IRBuilderBase::CreateInsertValue((uint64_t)v11, v85, v56, (uint64_t)v86, 1, (uint64_t)v90);
          v57 = *(llvm::Type **)(a1 + 184);
          v58 = (llvm::Value *)llvm::ConstantInt::get();
          v89 = 257;
          v59 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v45, v58, (const llvm::Twine *)v88);
          v91 = 257;
          v84 = (llvm::Value *)llvm::IRBuilderBase::CreateGEP(v11, v57, v84, v59, (const llvm::Twine *)v90);
          v39 = a5;
        }
      }
    }
  }
  if (a4[1])
  {
    v62 = *a4;
    v63 = (llvm::Value *)llvm::ConstantInt::get();
    v89 = 257;
    v64 = (llvm::Value *)llvm::IRBuilderBase::CreateAnd(v11, v62, v63, (const llvm::Twine *)v88);
    v91 = 257;
    v65 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v76, v64, (const llvm::Twine *)v90);
    v66 = a4[1];
    v89 = 257;
    v67 = (llvm::Value *)llvm::IRBuilderBase::CreateMul(v11, v80, v66, (const llvm::Twine *)v88);
    v89 = 257;
    Add = (llvm::Value *)llvm::IRBuilderBase::CreateAdd(v11, v65, v67, (const llvm::Twine *)v88);
    v69 = *(_QWORD *)v75;
    v70 = *(llvm::Type **)(a1 + 184);
    v88[0] = "ray_user_data_as_i8";
    v89 = 259;
    v90[0] = (uint64_t *)llvm::IRBuilderBase::CreateGEP(v11, v70, v75, Add, (const llvm::Twine *)v88);
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"llvm.agx3.in.user.payload.section.bounds", 40, v69, (uint64_t)v90, 1uLL);
  }
  return v85;
}

void AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::getTestResultsFunctionName(uint64_t a1, const void **a2, _DWORD *a3)
{
  unsigned int v6;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:nn180100]<0>(__p, (char *)&unk_1C3E4D9BB);
  v6 = *a3 - 1;
  if (v6 <= 2)
    MEMORY[0x1CAA2D494](__p, off_1E7ECDE58[v6]);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a2, (const void **)__p);
  if (v8 < 0)
    operator delete(__p[0]);
}

llvm::Value *AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildCommitIntersectionQuery(uint64_t a1, uint64_t a2, llvm::Type **a3, uint64_t a4)
{
  llvm::Type *v8;
  uint64_t v9;
  _BYTE v11[32];
  __int16 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v13 = *(_OWORD *)a2;
  v14 = *(_QWORD *)(a2 + 16);
  if (v14)
    llvm::MetadataTracking::track();
  v15 = *(_DWORD *)(a2 + 24);
  AGCLLVMTargetLowerer::SetIP(a1, &v13);
  if (v14)
    llvm::MetadataTracking::untrack();
  v8 = (llvm::Type *)llvm::PointerType::get();
  v9 = *(_QWORD *)(a1 + 144);
  v12 = 257;
  v16[0] = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)(a1 + 8), a3, v8, (const llvm::Twine *)v11);
  v16[1] = a4;
  return AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::callFunction(a1, (uint64_t)"agx.intersection_query.commit", 29, v9, (uint64_t)v16, 2uLL);
}

uint64_t llvm::IRBuilderBase::CreateMemCpy(uint64_t a1, llvm::LLVMContext *a2)
{
  llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), a2);
  llvm::ConstantInt::get();
  return llvm::IRBuilderBase::CreateMemTransferInst();
}

uint64_t std::__tree<std::__value_type<std::string,llvm::Type *>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::Type *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,llvm::Type *>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,llvm::Type *> const&>(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t **v17;
  uint64_t *v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t **v23;

  v7 = result;
  v8 = (uint64_t **)(result + 8);
  if ((_QWORD *)(result + 8) != a2)
  {
    result = std::less<std::string>::operator()[abi:nn180100](a3, a2 + 4);
    if (!(_DWORD)result)
    {
      result = std::less<std::string>::operator()[abi:nn180100](a2 + 4, a3);
      if (!(_DWORD)result)
      {
        v22 = a2;
        v23 = (uint64_t **)a2;
        v14 = &v22;
        if (a2)
          return result;
        goto LABEL_31;
      }
      v12 = a2[1];
      if (v12)
      {
        v13 = (uint64_t *)a2[1];
        do
        {
          v14 = (uint64_t **)v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        v17 = (uint64_t **)a2;
        do
        {
          v14 = (uint64_t **)v17[2];
          v16 = *v14 == (uint64_t *)v17;
          v17 = v14;
        }
        while (!v16);
      }
      if (v14 == v8 || (result = std::less<std::string>::operator()[abi:nn180100](a3, v14 + 4), (_DWORD)result))
      {
        if (v12)
        {
          v23 = v14;
        }
        else
        {
          v23 = (uint64_t **)a2;
          v14 = (uint64_t **)(a2 + 1);
        }
LABEL_30:
        if (*v14)
          return result;
        goto LABEL_31;
      }
LABEL_29:
      result = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v7, &v23, a3);
      v14 = (uint64_t **)result;
      goto LABEL_30;
    }
  }
  v9 = *a2;
  if (*(_QWORD **)v7 != a2)
  {
    if (v9)
    {
      v10 = (_QWORD *)*a2;
      do
      {
        v11 = v10;
        v10 = (_QWORD *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (_QWORD *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    result = std::less<std::string>::operator()[abi:nn180100](v11 + 4, a3);
    if ((_DWORD)result)
      goto LABEL_17;
    goto LABEL_29;
  }
  v11 = a2;
LABEL_17:
  if (v9)
  {
    v23 = (uint64_t **)v11;
    v14 = (uint64_t **)(v11 + 1);
    goto LABEL_30;
  }
  v23 = (uint64_t **)a2;
  v14 = (uint64_t **)a2;
LABEL_31:
  v18 = (uint64_t *)operator new(0x40uLL);
  v19 = (std::string *)(v18 + 4);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v18[6] = *(_QWORD *)(a4 + 16);
  }
  v18[7] = *(_QWORD *)(a4 + 24);
  v20 = (uint64_t)v23;
  *v18 = 0;
  v18[1] = 0;
  v18[2] = v20;
  *v14 = v18;
  v21 = **(_QWORD **)v7;
  if (v21)
  {
    *(_QWORD *)v7 = v21;
    v18 = *v14;
  }
  result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v18);
  ++*(_QWORD *)(v7 + 16);
  return result;
}

uint64_t std::map<std::string,llvm::Type *>::at(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2)
    abort();
  return v2 + 56;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrixLoadStoreImpl(uint64_t a1, int a2, uint64_t a3, llvm::Type **a4, llvm::Type **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v14;
  uint64_t v15;
  uint64_t Cast;
  uint64_t v17;
  uint64_t v18;
  llvm::Type *v19;
  llvm::Type **AllocaInEntryBlock;
  uint64_t v21;
  llvm::LLVMContext *v22;
  unsigned int v23;
  llvm::Type *v24;
  llvm::Value *PointerCast;
  llvm::Type *v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  const std::string::value_type *v31;
  std::string *v32;
  std::string::size_type v33;
  void **v34;
  std::string::size_type v35;
  unsigned int v36;
  const std::string::value_type *v37;
  const std::string::value_type *v38;
  uint64_t v39;
  uint64_t AlignedLoad;
  int v43;
  int v44;
  llvm::Value *v45;
  void *__p[2];
  uint64_t v47;
  __int16 v48;
  std::string v49;
  std::string v50;
  void *__src;
  uint64_t v52;
  _QWORD v53[3];
  _BYTE v54[16];
  uint64_t **PrimitiveSizeInBits;
  uint64_t v56;
  _BYTE v57[16];
  __int16 v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v14 = (uint64_t *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 200);
  v58 = 257;
  Cast = llvm::IRBuilderBase::CreateCast(a1 + 8, 38, a6, v15, (uint64_t)&PrimitiveSizeInBits);
  v17 = *(_QWORD *)(a1 + 248);
  v58 = 257;
  v18 = llvm::IRBuilderBase::CreateCast((uint64_t)v14, 38, a7, v17, (uint64_t)&PrimitiveSizeInBits);
  v43 = *(_DWORD *)(a3 + 32);
  v19 = **(llvm::Type ***)(a3 + 16);
  AllocaInEntryBlock = (llvm::Type **)AGCLLVMBuilder::createAllocaInEntryBlock((AGCLLVMBuilder *)a1, (llvm::Type *)a3);
  v44 = a2;
  if (a2)
    llvm::IRBuilderBase::CreateAlignedStore(v14, a4, (uint64_t)AllocaInEntryBlock, 0);
  PrimitiveSizeInBits = (uint64_t **)llvm::Type::getPrimitiveSizeInBits(v19);
  v56 = v21;
  v22 = (llvm::LLVMContext *)llvm::TypeSize::operator unsigned long long();
  v23 = v22;
  llvm::Type::getIntNTy(*(llvm::Type **)(a1 + 72), v22);
  v45 = (llvm::Value *)AllocaInEntryBlock;
  v24 = (llvm::Type *)llvm::PointerType::get();
  v58 = 257;
  PointerCast = llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)v14, AllocaInEntryBlock, v24, (const llvm::Twine *)&PrimitiveSizeInBits);
  v26 = (llvm::Type *)llvm::PointerType::get();
  v58 = 257;
  __src = PointerCast;
  v52 = (uint64_t)llvm::IRBuilderBase::CreatePointerCast((llvm::IRBuilderBase *)v14, a5, v26, (const llvm::Twine *)&PrimitiveSizeInBits);
  v53[0] = Cast;
  v53[1] = v18;
  v53[2] = a8;
  PrimitiveSizeInBits = (uint64_t **)v57;
  v56 = 0x500000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)&PrimitiveSizeInBits, &__src, v54);
  __src = v53;
  v52 = 0x500000000;
  if ((_DWORD)v56)
  {
    v27 = PrimitiveSizeInBits;
    v28 = 8 * v56;
    do
    {
      v29 = *v27++;
      llvm::SmallVectorTemplateBase<llvm::Metadata *,true>::push_back((uint64_t)&__src, *v29);
      v28 -= 8;
    }
    while (v28);
  }
  std::string::basic_string[abi:nn180100]<0>(&v50, "agx.simd_matrix_");
  v30 = *((_DWORD *)*a5 + 2);
  if ((v30 & 0xFE) == 0x12)
    v30 = *(_DWORD *)(**((_QWORD **)*a5 + 2) + 8);
  if (v43 == 256)
    v31 = "16x16_";
  else
    v31 = "8x8_";
  std::string::append(&v50, v31);
  std::to_string(&v49, v23);
  v32 = std::string::insert(&v49, 0, "sz");
  v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v47 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0)
    v34 = __p;
  else
    v34 = (void **)__p[0];
  if (v47 >= 0)
    v35 = HIBYTE(v47);
  else
    v35 = (std::string::size_type)__p[1];
  std::string::append(&v50, (const std::string::value_type *)v34, v35);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  v36 = v30 & 0xFFFFFF00;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (v36 == 768)
    v37 = "_threadgroup";
  else
    v37 = "_device";
  std::string::append(&v50, v37);
  if (v44)
    v38 = "_store";
  else
    v38 = "_load";
  std::string::append(&v50, v38);
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v48 = 257;
  llvm::IRBuilderBase::CreateCall((uint64_t)v14, *(_QWORD *)(v39 + 24), v39, (uint64_t)PrimitiveSizeInBits, v56, (uint64_t)__p);
  if ((v44 & 1) != 0)
  {
    AlignedLoad = 0;
  }
  else
  {
    v48 = 257;
    AlignedLoad = llvm::IRBuilderBase::CreateAlignedLoad(v14, (llvm::Type *)a3, (uint64_t)v45, 0, (uint64_t)__p);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (__src != v53)
    free(__src);
  if (PrimitiveSizeInBits != (uint64_t **)v57)
    free(PrimitiveSizeInBits);
  return AlignedLoad;
}

char *std::vector<llvm::StringRef>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 60)
    abort();
  result = (char *)operator new(16 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * a2];
  return result;
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::buildSimdMatrix16x16MultiplyAccumulateImpl(uint64_t a1, uint64_t a2, llvm::Value *a3, uint64_t a4, llvm::Value *a5, uint64_t a6, llvm::Value *a7, int a8, char a9, char a10, char a11, uint64_t *a12)
{
  llvm::IRBuilderBase *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  unint64_t *v24;
  llvm::Value *FPExt;
  llvm::Type *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t **v38;
  void **v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t **v42;
  BOOL v43;
  void *v44;
  uint64_t **v45;
  uint64_t **v46;
  _OWORD *v47;
  uint64_t *v48;
  unint64_t v49;
  const std::string::value_type *v50;
  const std::string::value_type **v51;
  const std::string::value_type **v52;
  unint64_t *v53;
  llvm::IRBuilderBase *v54;
  uint64_t *v55;
  uint64_t *v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  llvm::Value *v61;
  llvm::Value *v62;
  llvm::Value *PHI;
  llvm::BasicBlock *v64;
  llvm::BasicBlock *v65;
  _QWORD *v66;
  llvm::Instruction *v67;
  _QWORD *v68;
  llvm::Instruction *v69;
  llvm::Value *v70;
  llvm::Value *Shl;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  llvm::Value *v75;
  llvm::Value *v76;
  llvm::Value *v77;
  llvm::Value *v78;
  uint64_t FirstInsertionPt;
  llvm::Type *v80;
  uint64_t i;
  llvm::Value *v82;
  uint64_t v83;
  llvm::Type *v84;
  uint64_t v85;
  uint64_t j;
  llvm::Value *v87;
  uint64_t v88;
  _BYTE *Cast;
  llvm::Value *v92;
  uint64_t v93;
  uint64_t v94;
  llvm::Value *v95;
  unint64_t *ShuffleVector;
  llvm::IRBuilderBase *v97;
  void *v99[2];
  uint64_t v100;
  void *v101[2];
  char v102;
  __int128 v103;
  uint64_t v104;
  int v105;
  std::string v106;
  void *v107[2];
  char v108;
  void *v109[2];
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  int v113;
  void *v114[2];
  char v115;
  void *v116[2];
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  int v120;
  void *__p[2];
  char v122;
  void *__dst[2];
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  void *v128[2];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  _OWORD v160[2];
  _OWORD v161[2];
  uint64_t **__src;
  uint64_t *v163;
  unint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v18 = (llvm::IRBuilderBase *)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 200);
  LOWORD(v130) = 257;
  Cast = (_BYTE *)llvm::IRBuilderBase::CreateCast(a1 + 8, 39, a4, v19, (uint64_t)v128);
  v20 = *(_QWORD *)(a1 + 200);
  LOWORD(v130) = 257;
  v97 = v18;
  v92 = (llvm::Value *)llvm::IRBuilderBase::CreateCast((uint64_t)v18, 39, a6, v20, (uint64_t)v128);
  v21 = llvm::FixedVectorType::get();
  v94 = llvm::FixedVectorType::get();
  v93 = llvm::FixedVectorType::get();
  llvm::FixedVectorType::get();
  v22 = 0;
  v130 = 0u;
  v131 = 0u;
  *(_OWORD *)v128 = 0u;
  v129 = 0u;
  do
    v128[v22++] = (void *)llvm::ConstantInt::get();
  while (v22 != 8);
  v23 = (llvm::Value *)llvm::ConstantVector::get();
  LOWORD(v166) = 257;
  ShuffleVector = (unint64_t *)llvm::IRBuilderBase::CreateShuffleVector(v18, a3, a3, v23, (const llvm::Twine *)&__src);
  LOWORD(v166) = 257;
  v24 = (unint64_t *)llvm::IRBuilderBase::CreateShuffleVector(v18, a5, a5, v23, (const llvm::Twine *)&__src);
  LOWORD(v166) = 257;
  FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateShuffleVector(v18, a7, a7, v23, (const llvm::Twine *)&__src);
  if (*a12 == a12[1])
  {
    v26 = (llvm::Type *)v21;
  }
  else
  {
    *(_OWORD *)v128 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(v18);
    DWORD2(v129) = *(_DWORD *)(a1 + 104);
    if ((unint64_t)(a12[1] - *a12) <= 0x10)
      goto LABEL_143;
    v26 = (llvm::Type *)v21;
    if (llvm::StringRef::find() != -1)
    {
      v125 = *(_OWORD *)v128;
      v126 = v129;
      if ((_QWORD)v129)
        llvm::MetadataTracking::track();
      v127 = DWORD2(v129);
      v27 = *a12;
      if ((unint64_t)(a12[1] - *a12) <= 0x10)
        goto LABEL_143;
      v28 = *(void **)(v27 + 16);
      if (v28)
      {
        std::string::basic_string[abi:nn180100](__dst, v28, *(_QWORD *)(v27 + 24));
      }
      else
      {
        __dst[0] = 0;
        __dst[1] = 0;
        v124 = 0;
      }
      std::string::basic_string[abi:nn180100]<0>(__p, "bf16");
      ShuffleVector = (unint64_t *)(*(uint64_t (**)(uint64_t, __int128 *, unint64_t *, void **, void **, _QWORD))(*(_QWORD *)a1 + 808))(a1, &v125, ShuffleVector, __dst, __p, 0);
      if (v122 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v124) < 0)
        operator delete(__dst[0]);
      if (v126)
        llvm::MetadataTracking::untrack();
    }
    if ((unint64_t)(a12[1] - *a12) <= 0x20)
      goto LABEL_143;
    if (llvm::StringRef::find() != -1)
    {
      v118 = *(_OWORD *)v128;
      v119 = v129;
      if ((_QWORD)v129)
        llvm::MetadataTracking::track();
      v120 = DWORD2(v129);
      v29 = *a12;
      if ((unint64_t)(a12[1] - *a12) <= 0x20)
        goto LABEL_143;
      v30 = *(void **)(v29 + 32);
      if (v30)
      {
        std::string::basic_string[abi:nn180100](v116, v30, *(_QWORD *)(v29 + 40));
      }
      else
      {
        v116[0] = 0;
        v116[1] = 0;
        v117 = 0;
      }
      std::string::basic_string[abi:nn180100]<0>(v114, "bf16");
      v24 = (unint64_t *)(*(uint64_t (**)(uint64_t, __int128 *, unint64_t *, void **, void **, _QWORD))(*(_QWORD *)a1 + 808))(a1, &v118, v24, v116, v114, 0);
      if (v115 < 0)
        operator delete(v114[0]);
      if (SHIBYTE(v117) < 0)
        operator delete(v116[0]);
      if (v119)
        llvm::MetadataTracking::untrack();
    }
    if ((unint64_t)(a12[1] - *a12) <= 0x30)
      goto LABEL_143;
    if (llvm::StringRef::find() != -1)
    {
      v111 = *(_OWORD *)v128;
      v112 = v129;
      if ((_QWORD)v129)
        llvm::MetadataTracking::track();
      v113 = DWORD2(v129);
      v31 = *a12;
      if ((unint64_t)(a12[1] - *a12) <= 0x30)
        goto LABEL_143;
      v32 = *(void **)(v31 + 48);
      if (v32)
      {
        std::string::basic_string[abi:nn180100](v109, v32, *(_QWORD *)(v31 + 56));
      }
      else
      {
        v109[0] = 0;
        v109[1] = 0;
        v110 = 0;
      }
      std::string::basic_string[abi:nn180100]<0>(v107, "f32");
      FPExt = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, void **, void **, _QWORD))(*(_QWORD *)a1 + 808))(a1, &v111, FPExt, v109, v107, 0);
      if (v108 < 0)
        operator delete(v107[0]);
      if (SHIBYTE(v110) < 0)
        operator delete(v109[0]);
      if (v112)
        llvm::MetadataTracking::untrack();
    }
    if ((_QWORD)v129)
      llvm::MetadataTracking::untrack();
  }
  if ((a8 & 1) != 0)
  {
    v33 = *(_QWORD *)(a1 + 208);
    LOWORD(v130) = 257;
    ShuffleVector = (unint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v97, 49, (uint64_t)ShuffleVector, v33, (uint64_t)v128);
    v34 = *(_QWORD *)(a1 + 208);
    LOWORD(v130) = 257;
    v24 = (unint64_t *)llvm::IRBuilderBase::CreateCast((uint64_t)v97, 49, (uint64_t)v24, v34, (uint64_t)v128);
  }
  else if (*(llvm::Type **)FPExt != v26)
  {
    LOWORD(v130) = 257;
    FPExt = (llvm::Value *)llvm::IRBuilderBase::CreateFPExt(v97, FPExt, v26, (const llvm::Twine *)v128);
  }
  v35 = (void *)v94;
  v95 = FPExt;
  v36 = 0;
  v37 = 0;
  memset(&v106, 0, sizeof(v106));
  v128[0] = v35;
  v128[1] = ".v8f16";
  *(_QWORD *)&v129 = v26;
  *((_QWORD *)&v129 + 1) = ".v8f32";
  *(_QWORD *)&v130 = v93;
  *((_QWORD *)&v130 + 1) = ".v8bf16";
  v163 = 0;
  v164 = 0;
  v38 = &v163;
  __src = &v163;
  while (1)
  {
    v39 = &v128[2 * v37];
    v40 = &v163;
    if (v38 == &v163)
      goto LABEL_60;
    v41 = v36;
    v42 = &v163;
    if (v36)
    {
      do
      {
        v40 = (uint64_t **)v41;
        v41 = (uint64_t *)v41[1];
      }
      while (v41);
    }
    else
    {
      do
      {
        v40 = (uint64_t **)v42[2];
        v43 = *v40 == (uint64_t *)v42;
        v42 = v40;
      }
      while (v43);
    }
    v44 = *v39;
    if (v40[4] < *v39)
    {
LABEL_60:
      v45 = v36 ? v40 : &v163;
      v46 = v36 ? v40 + 1 : &v163;
    }
    else
    {
      v45 = &v163;
      v46 = &v163;
      if (v36)
      {
        v46 = &v163;
        while (1)
        {
          while (1)
          {
            v45 = (uint64_t **)v36;
            v49 = v36[4];
            if ((unint64_t)v44 >= v49)
              break;
            v36 = *v45;
            v46 = v45;
            if (!*v45)
              goto LABEL_67;
          }
          if (v49 >= (unint64_t)v44)
            break;
          v46 = v45 + 1;
          v36 = v45[1];
          if (!v36)
            goto LABEL_67;
        }
      }
    }
    if (!*v46)
    {
LABEL_67:
      v47 = operator new(0x30uLL);
      v47[2] = *(_OWORD *)v39;
      *(_QWORD *)v47 = 0;
      *((_QWORD *)v47 + 1) = 0;
      *((_QWORD *)v47 + 2) = v45;
      *v46 = (uint64_t *)v47;
      if (*__src)
      {
        __src = (uint64_t **)*__src;
        v48 = *v46;
      }
      else
      {
        v48 = (uint64_t *)v47;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v163, v48);
      ++v164;
    }
    if (++v37 == 3)
      break;
    v38 = __src;
    v36 = v163;
  }
  if ((a8 & 1) != 0)
  {
    MEMORY[0x1CAA2D494](&v106, "llvm.agx3.igemm16x16x16");
    if (a11)
      v50 = ".sat";
    else
      v50 = (const std::string::value_type *)&unk_1C3E4D9BB;
    std::string::append(&v106, v50);
  }
  else
  {
    MEMORY[0x1CAA2D494](&v106, "llvm.agx3.fgemm16x16x16");
    v51 = (const std::string::value_type **)std::map<llvm::Type * const,char const*>::at(v163, *ShuffleVector);
    std::string::append(&v106, *v51);
    v52 = (const std::string::value_type **)std::map<llvm::Type * const,char const*>::at(v163, *v24);
    std::string::append(&v106, *v52);
  }
  v53 = v24;
  v54 = v97;
  v55 = a12;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v163);
  v56 = *(uint64_t **)(a1 + 200);
  __src = (uint64_t **)*ShuffleVector;
  v163 = v56;
  v164 = *v53;
  v165 = v56;
  v166 = *(_QWORD *)v95;
  v128[0] = &v129;
  v128[1] = (void *)0x500000000;
  llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v128, &__src, &v167);
  if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v57 = &v106;
LABEL_90:
    strlen((const char *)v57);
    goto LABEL_91;
  }
  v57 = (std::string *)v106.__r_.__value_.__r.__words[0];
  if (v106.__r_.__value_.__r.__words[0])
    goto LABEL_90;
LABEL_91:
  llvm::FunctionType::get();
  llvm::Module::getOrInsertFunction();
  v59 = v58;
  if (v128[0] != &v129)
    free(v128[0]);
  v60 = Cast;
  if (Cast[16] == 16 && *((_BYTE *)v92 + 16) == 16)
  {
    if (a8)
    {
      if (a9)
      {
        v61 = (llvm::Value *)llvm::ConstantInt::get();
        LOWORD(v130) = 257;
        v60 = (void *)llvm::IRBuilderBase::CreateOr(v97, (llvm::Value *)Cast, v61, (const llvm::Twine *)v128);
      }
      if (a10)
      {
        v62 = (llvm::Value *)llvm::ConstantInt::get();
        LOWORD(v130) = 257;
        v92 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v97, v92, v62, (const llvm::Twine *)v128);
      }
    }
    v128[0] = ShuffleVector;
    v128[1] = v60;
    *(_QWORD *)&v129 = v53;
    *((_QWORD *)&v129 + 1) = v92;
    *(_QWORD *)&v130 = v95;
    LOWORD(v166) = 257;
    PHI = llvm::IRBuilderBase::CreateCall((uint64_t)v97, *(_QWORD *)(v59 + 24), v59, (uint64_t)v128, 5, (uint64_t)&__src);
  }
  else
  {
    v64 = *(llvm::BasicBlock **)(a1 + 56);
    v128[0] = "gemm.switch.merge";
    LOWORD(v130) = 259;
    v65 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock();
    v66 = (_QWORD *)*((_QWORD *)v64 + 5);
    if (v66 == (_QWORD *)((char *)v64 + 40))
    {
      v69 = 0;
    }
    else
    {
      v67 = (llvm::Instruction *)(v66 - 3);
      if (v66)
        v68 = v66 - 3;
      else
        v68 = 0;
      if (*((unsigned __int8 *)v68 + 16) - 29 >= 0xB)
        v69 = 0;
      else
        v69 = v67;
    }
    llvm::Instruction::eraseFromParent(v69);
    *(_QWORD *)(a1 + 56) = v64;
    *(_QWORD *)(a1 + 64) = (char *)v64 + 40;
    LOWORD(v130) = 257;
    v70 = (llvm::Value *)llvm::ConstantInt::get();
    Shl = (llvm::Value *)llvm::IRBuilderBase::CreateShl(v97, (llvm::Value *)Cast, v70, (const llvm::Twine *)v128);
    LOWORD(v166) = 257;
    v72 = llvm::IRBuilderBase::CreateOr(v97, v92, Shl, (const llvm::Twine *)&__src);
    llvm::IRBuilderBase::CreateSwitch((uint64_t *)v97, v72, (uint64_t)v65, 4);
    v73 = 0;
    memset(v161, 0, sizeof(v161));
    memset(v160, 0, sizeof(v160));
    do
    {
      v128[0] = "gemm.switch";
      *(_QWORD *)&v129 = v73;
      LOWORD(v130) = 2307;
      v74 = operator new();
      *((_QWORD *)v161 + v73) = llvm::BasicBlock::BasicBlock();
      llvm::ConstantInt::get();
      llvm::SwitchInst::addCase();
      *(_QWORD *)(a1 + 56) = v74;
      *(_QWORD *)(a1 + 64) = v74 + 40;
      v75 = (llvm::Value *)llvm::ConstantInt::get();
      v76 = (llvm::Value *)llvm::ConstantInt::get();
      if (a8)
      {
        v54 = v97;
        if (a9)
        {
          v77 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v130) = 257;
          v75 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v97, v75, v77, (const llvm::Twine *)v128);
        }
        if (a10)
        {
          v78 = (llvm::Value *)llvm::ConstantInt::get();
          LOWORD(v130) = 257;
          v76 = (llvm::Value *)llvm::IRBuilderBase::CreateOr(v97, v76, v78, (const llvm::Twine *)v128);
        }
      }
      else
      {
        v54 = v97;
      }
      v128[0] = ShuffleVector;
      v128[1] = v75;
      *(_QWORD *)&v129 = v53;
      *((_QWORD *)&v129 + 1) = v76;
      *(_QWORD *)&v130 = v95;
      LOWORD(v166) = 257;
      *((_QWORD *)v160 + v73) = llvm::IRBuilderBase::CreateCall((uint64_t)v54, *(_QWORD *)(v59 + 24), v59, (uint64_t)v128, 5, (uint64_t)&__src);
      llvm::IRBuilderBase::CreateBr(v54, v65);
      ++v73;
    }
    while (v73 != 4);
    FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v65);
    llvm::IRBuilderBase::SetInsertPoint((uint64_t)v54, (uint64_t)v65, FirstInsertionPt);
    v80 = **(llvm::Type ***)(*(_QWORD *)(v59 + 24) + 16);
    LOWORD(v130) = 257;
    PHI = llvm::IRBuilderBase::CreatePHI(v54, v80, 4, (const llvm::Twine *)v128);
    for (i = 0; i != 32; i += 8)
      llvm::PHINode::addIncoming(PHI, *(llvm::Value **)((char *)v160 + i), *(llvm::BasicBlock **)((char *)v161 + i));
    v82 = (llvm::Value *)llvm::UndefValue::get();
    llvm::PHINode::addIncoming(PHI, v82, v64);
    v55 = a12;
  }
  if ((a8 & 1) == 0 && **(_QWORD **)(a2 + 16) != *(_QWORD *)(a1 + 168))
  {
    if (*v55 == v55[1] || llvm::StringRef::find() == -1)
    {
      v84 = (llvm::Type *)llvm::FixedVectorType::get();
      LOWORD(v130) = 257;
      PHI = (llvm::Value *)llvm::IRBuilderBase::CreateFPTrunc(v54, PHI, v84, (const llvm::Twine *)v128);
      goto LABEL_136;
    }
    v103 = *(_OWORD *)(a1 + 56);
    llvm::IRBuilderBase::getCurrentDebugLocation(v54);
    v105 = *(_DWORD *)(a1 + 104);
    std::string::basic_string[abi:nn180100]<0>(v101, "f32");
    v83 = *v55;
    if (v55[1] != *v55)
    {
      if (*(_QWORD *)v83)
      {
        std::string::basic_string[abi:nn180100](v99, *(void **)v83, *(_QWORD *)(v83 + 8));
      }
      else
      {
        v99[0] = 0;
        v99[1] = 0;
        v100 = 0;
      }
      PHI = (llvm::Value *)(*(uint64_t (**)(uint64_t, __int128 *, llvm::Value *, void **, void **, uint64_t))(*(_QWORD *)a1 + 808))(a1, &v103, PHI, v101, v99, 1);
      if (SHIBYTE(v100) < 0)
        operator delete(v99[0]);
      if (v102 < 0)
        operator delete(v101[0]);
      if (v104)
        llvm::MetadataTracking::untrack();
      goto LABEL_136;
    }
LABEL_143:
    abort();
  }
LABEL_136:
  v85 = 0;
  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  *(_OWORD *)v128 = 0u;
  v129 = 0u;
  do
    v128[v85++] = (void *)llvm::ConstantInt::get();
  while (v85 != 8);
  for (j = 8; j != 256; ++j)
    v128[j] = (void *)llvm::UndefValue::get();
  v87 = (llvm::Value *)llvm::ConstantVector::get();
  LOWORD(v166) = 257;
  v88 = llvm::IRBuilderBase::CreateShuffleVector(v54, PHI, PHI, v87, (const llvm::Twine *)&__src);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  return v88;
}

_QWORD *std::map<llvm::Type * const,char const*>::at(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  if (!a1)
LABEL_7:
    abort();
  while (1)
  {
    while (1)
    {
      v2 = a1[4];
      if (v2 <= a2)
        break;
      a1 = (_QWORD *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (_QWORD *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

void std::__hash_table<std::__hash_value_type<AIR::MemoryOrder,char const*>,std::__unordered_map_hasher<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::hash<AIR::MemoryOrder>,std::equal_to<AIR::MemoryOrder>,true>,std::__unordered_map_equal<AIR::MemoryOrder,std::__hash_value_type<AIR::MemoryOrder,char const*>,std::equal_to<AIR::MemoryOrder>,std::hash<AIR::MemoryOrder>,true>,std::allocator<std::__hash_value_type<AIR::MemoryOrder,char const*>>>::__emplace_unique_key_args<AIR::MemoryOrder,std::pair<AIR::MemoryOrder const,char const*> const&>(uint64_t a1, int a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x20uLL);
  v12[1] = v6;
  *((_OWORD *)v12 + 1) = *a3;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *v12 = *v20;
LABEL_38:
    *v20 = v12;
    goto LABEL_39;
  }
  v21 = *(_QWORD *)(a1 + 16);
  *v12 = v21;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v19 + 8 * v3) = a1 + 16;
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7)
        v22 %= v7;
    }
    else
    {
      v22 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void std::__hash_table<std::__hash_value_type<BOOL,char const*>,std::__unordered_map_hasher<BOOL,std::__hash_value_type<BOOL,char const*>,std::hash<BOOL>,std::equal_to<BOOL>,true>,std::__unordered_map_equal<BOOL,std::__hash_value_type<BOOL,char const*>,std::equal_to<BOOL>,std::hash<BOOL>,true>,std::allocator<std::__hash_value_type<BOOL,char const*>>>::__emplace_unique_key_args<BOOL,std::pair<BOOL const,char const*> const&>(uint64_t a1, unsigned __int8 a2, _OWORD *a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ***v11;
  uint64_t **i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v7 <= a2 ? *(_QWORD *)(a1 + 8) : 0;
    v10 = a2 - v9;
    v3 = v8.u32[0] <= 1uLL ? ((_DWORD)v7 + 1) & a2 : v10;
    v11 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t **)*i)
      {
        v13 = (unint64_t)i[1];
        if (v13 == a2)
        {
          if (*((unsigned __int8 *)i + 16) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v13 >= v7)
              v13 %= v7;
          }
          else
          {
            v13 &= v7 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  v14 = operator new(0x20uLL);
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 <= v6)
      v21 = 0;
    else
      v21 = v6;
    if ((v7 & (v7 - 1)) != 0)
      v3 = v21;
    else
      v3 = ((_DWORD)v7 + 1) & v6;
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *v14 = *v23;
LABEL_40:
    *v23 = v14;
    goto LABEL_41;
  }
  v24 = *(_QWORD *)(a1 + 16);
  *v14 = v24;
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v3) = a1 + 16;
  if (v24)
  {
    v25 = *(_QWORD *)(v24 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7)
        v25 %= v7;
    }
    else
    {
      v25 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
}

uint64_t AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(_QWORD *a1, char *__s, float a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  size_t v8;
  size_t v9;
  void **v10;
  uint64_t *v11;
  char *v12;
  uint64_t inserted;
  uint64_t v14;
  unint64_t v15;
  void **v16;
  char *v17;
  _BYTE *v18;
  unsigned __int8 v19;
  void **v20;
  const char *v21;
  size_t v22;
  size_t v23;
  void **v24;
  uint64_t *v25;
  char *v26;
  const char *v27;
  AGCEnv *v28;
  char *Value;
  int v30;
  int v31;
  uint64_t v32;
  llvm::Value *v33;
  uint64_t v35;
  std::string v36;
  _QWORD v37[4];
  __int16 v38;
  void *__p;
  char v40;
  uint64_t v41;
  float v42;
  void *v43[2];
  char v44;
  void *v45[2];
  unsigned __int8 v46;

  if ((v6 & 1) == 0
  {
    std::string::basic_string[abi:nn180100]<0>(&AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix, "translator.agx3.simdgroup_atomic_wait.get_");
    __cxa_atexit(MEMORY[0x1E0DE44D0], &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix, &dword_1C3C54000);
  }
  if ((v7 & 1) == 0
  {
    v35 = byte_1EF8EA647;
    if (byte_1EF8EA647 < 0)
      v35 = qword_1EF8EA638;
    AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix_length = v35;
  }
  if (byte_1EF8EA647 >= 0)
    v8 = byte_1EF8EA647;
  else
    v8 = qword_1EF8EA638;
  v9 = strlen(__s);
  v10 = v45;
  std::string::basic_string[abi:nn180100]((uint64_t)v45, v8 + v9);
  if ((v46 & 0x80u) != 0)
    v10 = (void **)v45[0];
  if (v8)
  {
    if (byte_1EF8EA647 >= 0)
      v11 = &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix;
    else
      v11 = (uint64_t *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix;
    memmove(v10, v11, v8);
  }
  v12 = (char *)v10 + v8;
  if (v9)
    memmove(v12, __s, v9);
  v12[v9] = 0;
  inserted = AGCLLVMBuilder::getOrInsertFunction<>();
  *(_WORD *)(inserted + 18) &= 0xC00Fu;
  v37[0] = "entry";
  v38 = 259;
  operator new();
  v14 = llvm::BasicBlock::BasicBlock();
  a1[7] = v14;
  a1[8] = v14 + 40;
  v15 = v46;
  if ((v46 & 0x80u) == 0)
    v16 = v45;
  else
    v16 = (void **)v45[0];
  if ((v46 & 0x80u) != 0)
    v15 = (unint64_t)v45[1];
  v17 = (char *)(v15
               - AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix_length);
  if (v15 != AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix_length)
  {
    v18 = (char *)v16
        + AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix_length;
    do
    {
      *v18 = __toupper(*v18);
      ++v18;
      --v17;
    }
    while (v17);
  }
  if ((v19 & 1) == 0
  {
    std::string::basic_string[abi:nn180100]<0>(&AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::ev_prefix, "AGC_YIELD_");
    __cxa_atexit(MEMORY[0x1E0DE44D0], &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::ev_prefix, &dword_1C3C54000);
  }
  v20 = v45;
  if ((v46 & 0x80u) != 0)
    v20 = (void **)v45[0];
  v21 = (char *)v20
      + AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::prefix_length;
  if (byte_1EF8EA677 >= 0)
    v22 = byte_1EF8EA677;
  else
    v22 = qword_1EF8EA668;
  v23 = strlen(v21);
  v24 = v43;
  std::string::basic_string[abi:nn180100]((uint64_t)v43, v22 + v23);
  if (v44 < 0)
    v24 = (void **)v43[0];
  if (v22)
  {
    if (byte_1EF8EA677 >= 0)
      v25 = &AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::ev_prefix;
    else
      v25 = (uint64_t *)AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::addYieldLoopParameter(char const*,float)::ev_prefix;
    memmove(v24, v25, v22);
  }
  v26 = (char *)v24 + v22;
  if (v23)
    memmove(v26, v21, v23);
  v26[v23] = 0;
  if ((MGGetBoolAnswer() & 1) != 0)
  {
    if (v44 >= 0)
      v28 = (AGCEnv *)v43;
    else
      v28 = (AGCEnv *)v43[0];
    Value = (char *)AGCEnv::getValue(v28, v27);
    v42 = a3;
    if (Value)
    {
      std::string::basic_string[abi:nn180100]<0>(&v36, Value);
      std::istringstream::basic_istringstream[abi:nn180100]((uint64_t)v37, &v36);
      MEMORY[0x1CAA2D53C](v37, &v42);
      v30 = *(_DWORD *)((char *)&v37[4] + *(_QWORD *)(v37[0] - 24));
      v37[0] = *MEMORY[0x1E0DE4F58];
      *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
      v37[2] = MEMORY[0x1E0DE4FB8] + 16;
      if (v40 < 0)
        operator delete(__p);
      v31 = v30 & 5;
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x1CAA2D638](&v41);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v36.__r_.__value_.__l.__data_);
        if (v31)
          goto LABEL_47;
      }
      else if (v31)
      {
LABEL_47:
        v32 = 0;
        goto LABEL_50;
      }
    }
  }
  else
  {
    v42 = a3;
  }
  v33 = (llvm::Value *)llvm::ConstantFP::get();
  llvm::IRBuilderBase::CreateRet((llvm::IRBuilderBase *)(a1 + 1), v33);
  v32 = 1;
LABEL_50:
  if (v44 < 0)
    operator delete(v43[0]);
  if ((char)v46 < 0)
    operator delete(v45[0]);
  return v32;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getGOTIndex()
{
  return 0;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getTextureHeapReadIndex()
{
  return 1;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getTextureHeapWriteIndex()
{
  return 2;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getTextureHeapLengthIndex()
{
  return 3;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getSamplerHeapIndex()
{
  return 4;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getPerEncoderIndirectionTableIndex()
{
  return 5;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getIntersectionFunctionTableHeapIndex()
{
  return 6;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getVisibleFunctionTableHeapIndex()
{
  return 7;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getGlobalBindingTableIndex()
{
  return 9;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getAccelerationStructureHeapIndex()
{
  return 8;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getIFTHeapAddressIndex()
{
  return 10;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getRayUserDataBoundsIndex()
{
  return 11;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getRayStridesIndex()
{
  return 12;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getRayDriverDataStartIndex()
{
  return 13;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getStageSpecificBindpoint0()
{
  return 14;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getStageSpecificBindpoint1()
{
  return 15;
}

uint64_t AGCDylibBindPointLayoutT<AGX::DylibBindPointLayout<true>>::getCount()
{
  return 16;
}

void AGCLLVMHAL200TargetLowerer::AGCLLVMHAL200TargetLowerer(AGCLLVMHAL200TargetLowerer *this, llvm::LLVMContext *a2, const AGCLLVMTargetConfig *a3)
{
  uint64_t v4;
  int v5;

  v4 = AGCLLVMGen6TargetLowerer<RaytracingConstantsGen1>::AGCLLVMGen6TargetLowerer((uint64_t)this, a2, (uint64_t)a3);
  *(_QWORD *)v4 = &off_1E7ECDF20;
  v5 = *((_DWORD *)a3 + 6);
  if (v5 == 65568 || v5 == 196640 || v5 == 65570)
  {
    *(_DWORD *)(v4 + 884) = 96;
    *(_BYTE *)(v4 + 1785) = 1;
  }
  *(_BYTE *)(v4 + 1792) = 1;
}

uint64_t AddCandidate(uint64_t result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  llvm::BasicBlock *v21;
  uint64_t FirstInsertionPt;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t **v31;
  char v32;
  unint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t *v36;
  uint64_t **v37;
  uint64_t **v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(result + 8);
  if (!v4)
    return result;
  v6 = result;
  v56 = **(_QWORD **)(*(_QWORD *)result + 16);
  if ((*(_DWORD *)(v56 + 8) & 0xFE) != 0x10)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = a3 + 1;
    v32 = 1;
    do
    {
      v33 = *(_QWORD *)(v4 + 24);
      v34 = *(unsigned __int8 *)(v33 + 16);
      if (v33)
        v35 = v34 >= 0x1C;
      else
        v35 = 0;
      if (!v35)
        return result;
      if (v34 == 84)
      {
        v36 = *v31;
        v37 = a3 + 1;
        v38 = a3 + 1;
        if (*v31)
        {
          while (1)
          {
            while (1)
            {
              v38 = (uint64_t **)v36;
              v39 = v36[4];
              if (v33 >= v39)
                break;
              v36 = *v38;
              v37 = v38;
              if (!*v38)
                goto LABEL_62;
            }
            if (v39 >= v33)
              break;
            v36 = v38[1];
            if (!v36)
            {
              v37 = v38 + 1;
              goto LABEL_62;
            }
          }
        }
        else
        {
LABEL_62:
          v40 = (uint64_t *)operator new(0x28uLL);
          v40[4] = v33;
          *v40 = 0;
          v40[1] = 0;
          v40[2] = (uint64_t)v38;
          *v37 = v40;
          v41 = (uint64_t *)**a3;
          if (v41)
          {
            *a3 = v41;
            v42 = *v37;
          }
          else
          {
            v42 = v40;
          }
          result = (uint64_t)std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a3[1], v42);
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
        }
        v28 = 1;
      }
      else if (v34 == 61)
      {
        if (*(_QWORD *)(v33 - 32) != v6 || (*(_WORD *)(v33 + 18) & 1) != 0)
          return result;
      }
      else
      {
        if (v34 != 60 || *(_QWORD *)(v33 - 32) != v6 || (*(_WORD *)(v33 + 18) & 1) != 0)
          return result;
        ++v30;
      }
      v43 = v29 == 0;
      if (v29)
        v44 = v29;
      else
        v44 = *(_QWORD *)(v33 + 40);
      if (v29 == *(_QWORD *)(v33 + 40))
        v43 = 1;
      v32 &= v43;
      v4 = *(_QWORD *)(v4 + 8);
      v29 = v44;
    }
    while (v4);
    v45 = *(unsigned __int8 *)(v6 + 16);
    if (v45 == 62)
      v45 = *(unsigned __int8 *)(*(_QWORD *)(v6 - 32 * (*(_DWORD *)(v6 + 20) & 0x7FFFFFF)) + 16);
    if (v45 == 59)
    {
      v46 = llvm::UndefValue::get();
      v47 = (v28 & 1) == 0;
    }
    else
    {
      v46 = 0;
      v47 = 0;
      v32 = 0;
    }
    *(_QWORD *)&v57[0] = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v6, v57);
    v48 = *(_QWORD *)&v57[0];
    if ((result & 1) != 0)
    {
LABEL_87:
      *(_QWORD *)(v48 + 8) = v46;
      *(_DWORD *)(v48 + 16) = 0;
      *(_BYTE *)(v48 + 20) = v47;
      *(_BYTE *)(v48 + 21) = v32;
      *(_DWORD *)(v48 + 24) = v30;
      return result;
    }
    v49 = *(_DWORD *)(a2 + 8);
    v50 = *(_DWORD *)(a2 + 16);
    if (4 * v49 + 4 >= 3 * v50)
    {
      v50 *= 2;
    }
    else if (v50 + ~v49 - *(_DWORD *)(a2 + 12) > v50 >> 3)
    {
LABEL_84:
      ++*(_DWORD *)(a2 + 8);
      if (*(_QWORD *)v48 != -4096)
        --*(_DWORD *)(a2 + 12);
      *(_DWORD *)(v48 + 24) = 0;
      *(_QWORD *)v48 = v6;
      *(_QWORD *)(v48 + 8) = 0;
      *(_QWORD *)(v48 + 14) = 0;
      goto LABEL_87;
    }
    llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::grow(a2, v50);
    *(_QWORD *)&v57[0] = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v6, v57);
    v48 = *(_QWORD *)&v57[0];
    goto LABEL_84;
  }
  if (*(_DWORD *)(v56 + 8) == 17
    && (*(_DWORD *)(**(_QWORD **)(v56 + 16) + 8) & 0xFE) != 0x10
    && *(_QWORD *)(v56 + 32) <= 4uLL)
  {
    memset(v57, 0, sizeof(v57));
    while (1)
    {
      v8 = *(_QWORD *)(v4 + 24);
      if (!v8)
        return result;
      if (*(_BYTE *)(v8 + 16) != 62)
        return result;
      v4 = *(_QWORD *)(v4 + 8);
      result = llvm::GetElementPtrInst::hasAllConstantIndices((llvm::GetElementPtrInst *)v8);
      if (!(_DWORD)result || (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3)
        return result;
      v9 = *(_QWORD *)(v8 - 64);
      result = v9 + 24;
      v10 = *(_DWORD *)(v9 + 32);
      if (v10 > 0x40)
      {
        result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
        if ((_DWORD)result != v10)
          return result;
      }
      else if (*(_QWORD *)result)
      {
        return result;
      }
      v11 = *(_QWORD *)(v8 - 32);
      v12 = (_QWORD *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u)
        v12 = (_QWORD *)*v12;
      v13 = (_QWORD *)*v12;
      if (v13 >= *(_DWORD *)(v56 + 32))
        return result;
      if (!*((_QWORD *)v57 + v13))
      {
        *((_QWORD *)v57 + v13) = llvm::Instruction::clone((llvm::Instruction *)v8);
        --*(_DWORD *)(a4 + 16);
        v14 = *(unsigned __int8 *)(v6 + 16);
        if (v14 == 21)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 80);
          if (v20)
            v21 = (llvm::BasicBlock *)(v20 - 24);
          else
            v21 = 0;
          FirstInsertionPt = llvm::BasicBlock::getFirstInsertionPt(v21);
          v23 = FirstInsertionPt - 24;
          v24 = FirstInsertionPt == 0;
          while (1)
          {
            v25 = v24 ? 0 : v23;
            if (*(_BYTE *)(v25 + 16) != 59)
              break;
            v26 = *(_QWORD *)(v23 + 32);
            v27 = *(_QWORD *)(v23 + 40) + 40;
            v23 = v26 - 24;
            if (v26)
              v24 = v26 == v27;
            else
              v24 = 1;
          }
          goto LABEL_29;
        }
        if (v14 == 59)
        {
          v15 = v6;
          do
          {
            v16 = *(_QWORD *)(v15 + 32);
            v17 = *(_QWORD *)(v15 + 40) + 40;
            v15 = v16 - 24;
            if (v16)
              v18 = v16 == v17;
            else
              v18 = 1;
            if (v18)
              v19 = 0;
            else
              v19 = v16 - 24;
          }
          while (*(_BYTE *)(v19 + 16) == 59);
LABEL_29:
          llvm::Instruction::insertBefore();
        }
      }
      ++*(_DWORD *)(a4 + 16);
      llvm::Value::replaceAllUsesWith();
      result = llvm::Instruction::eraseFromParent((llvm::Instruction *)v8);
      if (!v4)
      {
        v51 = *(_QWORD *)(v56 + 32);
        if (v51)
        {
          v52 = 0;
          v53 = 1;
          do
          {
            result = *((_QWORD *)v57 + v52);
            if (result)
            {
              result = AddCandidate(result, a2, a3, a4);
              v51 = *(_QWORD *)(v56 + 32);
            }
            v52 = v53;
          }
          while (v51 > v53++);
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

_QWORD *llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  llvm *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(llvm **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (_QWORD *)MEMORY[0x1CAA2C6C0](32 * v8, 8);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    v12 = (void *)(32 * v3);
    if ((_DWORD)v3)
    {
      v13 = 32 * v3;
      v14 = v4;
      do
      {
        v15 = *(_QWORD *)v14;
        if ((*(_QWORD *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>,llvm::Value *,PointerInfo,llvm::DenseMapInfo<llvm::Value *,void>,llvm::detail::DenseMapPair<llvm::Value *,PointerInfo>>::LookupBucketFor<llvm::Value const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v15, &v20);
          v16 = v20;
          *v20 = *(_QWORD *)v14;
          v17 = *(_OWORD *)((char *)v14 + 8);
          v16[3] = *((_QWORD *)v14 + 3);
          *(_OWORD *)(v16 + 1) = v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v14 = (llvm *)((char *)v14 + 32);
        v13 -= 32;
      }
      while (v13);
    }
    return (_QWORD *)llvm::deallocate_buffer(v4, v12);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v18)
    {
      v19 = 32 * v18;
      do
      {
        *result = -4096;
        result += 4;
        v19 -= 32;
      }
      while (v19);
    }
  }
  return result;
}

uint64_t *std::__tree<llvm::Instruction *>::__emplace_unique_key_args<llvm::Instruction *,llvm::Instruction * const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t *MarkInvariants::addSeed(uint64_t *this, llvm::Value *a2, int a3)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;

  if (*((unsigned __int8 *)a2 + 16) >= 0x1Cu && a2 != 0)
  {
    v6 = this;
    v8 = this + 4;
    v7 = (_QWORD *)this[4];
    if (!v7)
      goto LABEL_18;
    v9 = this + 4;
    do
    {
      v10 = v7[4];
      v11 = v10 >= (unint64_t)a2;
      if (v10 >= (unint64_t)a2)
        v12 = v7;
      else
        v12 = v7 + 1;
      if (v11)
        v9 = v7;
      v7 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 == v8 || v9[4] > (unint64_t)a2)
    {
LABEL_18:
      v14 = (_DWORD *)this[1];
      v13 = this[2];
      if ((unint64_t)v14 >= v13)
      {
        v16 = (_DWORD *)*this;
        v17 = ((uint64_t)v14 - *this) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          abort();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          if (v20 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v21 = (char *)operator new(16 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[16 * v17];
        *(_QWORD *)v22 = a2;
        *((_DWORD *)v22 + 2) = a3;
        v15 = v22 + 16;
        if (v14 != v16)
        {
          do
          {
            v23 = *((_QWORD *)v14 - 2);
            v14 -= 4;
            v24 = v14[2];
            *((_QWORD *)v22 - 2) = v23;
            v22 -= 16;
            *((_DWORD *)v22 + 2) = v24;
          }
          while (v14 != v16);
          v14 = (_DWORD *)*v6;
        }
        *v6 = (uint64_t)v22;
        v6[1] = (uint64_t)v15;
        v6[2] = (uint64_t)&v21[16 * v20];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v14 = a2;
        v14[2] = a3;
        v15 = v14 + 4;
      }
      v6[1] = (uint64_t)v15;
      return std::__tree<llvm::Instruction *>::__emplace_unique_key_args<llvm::Instruction *,llvm::Instruction * const&>(v8 - 1, (unint64_t)a2, (uint64_t)a2);
    }
  }
  return this;
}

uint64_t MarkInvariants::markInvariant(MarkInvariants *this, llvm::Type **a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  llvm::Value **v15;
  int v16;
  llvm::Value *v18;
  llvm::Value *InsertElement;
  llvm::Value *v20;
  int v21;
  llvm::Value **v22;
  BOOL v23;
  llvm::Value *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  llvm::Value **v29;
  llvm::Value *v30;
  llvm::LLVMContext *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::Value *v34;
  int v35;
  llvm::Value **v36;
  llvm::Value *v37;
  llvm::Value *v38;
  llvm::LLVMContext *v39;
  int v40;
  char *v41;
  llvm::Value *v42;
  llvm::Value *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  _QWORD **v51;
  _QWORD *v52;
  _QWORD **v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t j;
  uint64_t v59;
  uint64_t v60;
  uint64_t k;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  llvm::Value *v71;
  uint64_t *v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t **v75;
  uint64_t *v76;
  uint64_t **v77;
  unint64_t v78;
  uint64_t **v79;
  llvm::Value *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  llvm::Value *v84;
  llvm **v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  int v89;
  const std::string::value_type *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  int v94;
  uint64_t v95;
  llvm::Value **v96;
  llvm::Value *v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  llvm::Value *v105;
  BOOL v106;
  uint64_t ii;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  unint64_t v111;
  BOOL v112;
  _QWORD *v113;
  uint64_t v114;
  llvm::Value *v115;
  uint64_t *v116;
  uint64_t **m;
  uint64_t **v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t n;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v131;
  llvm::Value *v132;
  uint64_t v133;
  uint64_t v135;
  llvm::IRBuilderBase *v137;
  std::string v138;
  uint64_t **v139;
  uint64_t *v140;
  uint64_t v141;
  _QWORD **v142;
  _QWORD *v143[2];
  llvm *v144[2];
  unsigned int v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148[3];
  _QWORD v149[3];
  llvm::Value *__src;
  llvm::Value *v151;
  uint64_t v152;
  llvm::Value *v153[2];
  __int128 v154;
  __int16 v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v143[0] = 0;
  v143[1] = 0;
  v141 = 0;
  v142 = v143;
  v139 = &v140;
  v140 = 0;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v2)
  {
    v137 = (llvm::IRBuilderBase *)(a2 + 1);
    v4 = (_QWORD *)((char *)this + 32);
    do
    {
      v7 = *(_QWORD *)(v2 - 16);
      v5 = v2 - 16;
      v6 = v7;
      v8 = *(_DWORD *)(v5 + 8);
      *((_QWORD *)this + 1) = v5;
      if (llvm::FPMathOperator::classof(v7))
        llvm::Instruction::setFast((llvm::Instruction *)v6);
      if (!*((_BYTE *)this + 56) || *(_BYTE *)(v6 + 16) != 42)
      {
LABEL_58:
        v24 = (llvm::Value *)v6;
        goto LABEL_59;
      }
      v9 = *(_DWORD *)(v6 + 20);
      if ((v9 & 0x40000000) != 0)
        v10 = *(uint64_t **)(v6 - 8);
      else
        v10 = (uint64_t *)(v6 - 32 * (v9 & 0x7FFFFFF));
      v11 = *v10;
      v12 = v10[4];
      v13 = *(unsigned __int8 *)(v11 + 16);
      if (v11 && v13 == 46)
      {
        v14 = *(_DWORD *)(v11 + 20);
        if ((v14 & 0x40000000) != 0)
          v15 = *(llvm::Value ***)(v11 - 8);
        else
          v15 = (llvm::Value **)(v11 - 32 * (v14 & 0x7FFFFFF));
        InsertElement = *v15;
        v20 = v15[4];
        v11 = v12;
        if (!*v15)
          goto LABEL_58;
      }
      else
      {
        v16 = *(unsigned __int8 *)(v12 + 16);
        if (v16 != 46 || v12 == 0)
        {
          if (v11 && v13 == 90)
          {
            v18 = (llvm::Value *)v11;
            v11 = v12;
          }
          else
          {
            v23 = v16 != 90 || v12 == 0;
            v18 = (llvm::Value *)v12;
            if (v23)
            {
              v24 = (llvm::Value *)v6;
              goto LABEL_59;
            }
          }
          *(_OWORD *)v153 = 0u;
          v154 = 0u;
          llvm::IRBuilderBase::SetInsertPoint(v137, (llvm::Instruction *)v6);
          v25 = AGCLLVMBuilder::unboxVector((AGCLLVMBuilder *)a2, v18, v153);
          v26 = v25;
          v135 = v11;
          if (!v25)
            goto LABEL_39;
          v27 = v25;
          v28 = 1;
          v29 = v153;
          do
          {
            v30 = *v29;
            if (*v29)
              LOBYTE(v30) = *((_BYTE *)v30 + 16) == 46;
            v28 &= v30;
            ++v29;
            --v27;
          }
          while (v27);
          if ((v28 & 1) == 0)
          {
            v20 = 0;
            InsertElement = 0;
          }
          else
          {
LABEL_39:
            InsertElement = (llvm::Value *)llvm::UndefValue::get();
            v20 = (llvm::Value *)llvm::UndefValue::get();
            if (v26)
            {
              v32 = 0;
              v33 = v26;
              do
              {
                v34 = v153[v32];
                v35 = *((_DWORD *)v34 + 5);
                if ((v35 & 0x40000000) != 0)
                  v36 = (llvm::Value **)*((_QWORD *)v34 - 1);
                else
                  v36 = (llvm::Value **)((char *)v34 - 32 * (v35 & 0x7FFFFFF));
                v37 = *v36;
                llvm::Type::getInt32Ty(a2[9], v31);
                v38 = (llvm::Value *)llvm::ConstantInt::get();
                v147 = 257;
                InsertElement = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v137, InsertElement, v37, v38, (const llvm::Twine *)v144);
                v40 = *((_DWORD *)v34 + 5);
                if ((v40 & 0x40000000) != 0)
                  v41 = (char *)*((_QWORD *)v34 - 1);
                else
                  v41 = (char *)v34 - 32 * (v40 & 0x7FFFFFF);
                v42 = (llvm::Value *)*((_QWORD *)v41 + 4);
                llvm::Type::getInt32Ty(a2[9], v39);
                v43 = (llvm::Value *)llvm::ConstantInt::get();
                v147 = 257;
                v20 = (llvm::Value *)llvm::IRBuilderBase::CreateInsertElement(v137, v20, v42, v43, (const llvm::Twine *)v144);
                ++v32;
              }
              while (v33 != v32);
            }
          }
          v11 = v135;
          if (!InsertElement)
            goto LABEL_58;
        }
        else
        {
          v21 = *(_DWORD *)(v12 + 20);
          if ((v21 & 0x40000000) != 0)
            v22 = *(llvm::Value ***)(v12 - 8);
          else
            v22 = (llvm::Value **)(v12 - 32 * (v21 & 0x7FFFFFF));
          InsertElement = *v22;
          v20 = v22[4];
          if (!*v22)
            goto LABEL_58;
        }
      }
      if (!v20 || !v11)
        goto LABEL_58;
      v44 = *(_QWORD *)v6;
      if ((*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12)
        v45 = *(_DWORD *)(v44 + 32);
      else
        v45 = 1;
      std::string::basic_string[abi:nn180100]<0>(v144, ".");
      std::string::basic_string[abi:nn180100]<0>(&v146, ".v2");
      std::string::basic_string[abi:nn180100]<0>(v148, ".v3");
      std::string::basic_string[abi:nn180100]<0>(v149, ".v4");
      std::string::basic_string[abi:nn180100]<0>(&v138, "air.fma");
      v85 = &v144[3 * (v45 - 1)];
      v86 = *((char *)v85 + 23);
      if (v86 >= 0)
        v87 = (const std::string::value_type *)&v144[3 * (v45 - 1)];
      else
        v87 = (const std::string::value_type *)*v85;
      if (v86 >= 0)
        v88 = *((unsigned __int8 *)v85 + 23);
      else
        v88 = (std::string::size_type)v85[1];
      std::string::append(&v138, v87, v88);
      if ((*(_DWORD *)(v44 + 8) & 0xFE) == 0x12)
        v89 = *(unsigned __int8 *)(**(_QWORD **)(v44 + 16) + 8);
      else
        v89 = *(_DWORD *)(v44 + 8);
      if (v89 == 2)
        v90 = ".f32";
      else
        v90 = ".f16";
      std::string::append(&v138, v90);
      __src = (llvm::Value *)v44;
      v151 = (llvm::Value *)v44;
      v152 = v44;
      v153[0] = (llvm::Value *)&v154;
      v153[1] = (llvm::Value *)0x300000000;
      llvm::SmallVectorImpl<llvm::Type *>::append<llvm::Type * const*,void>((uint64_t)v153, &__src, v153);
      llvm::FunctionType::get();
      llvm::Module::getOrInsertFunction();
      v92 = v91;
      if ((__int128 *)v153[0] != &v154)
        free(v153[0]);
      llvm::IRBuilderBase::SetInsertPoint(v137, (llvm::Instruction *)v6);
      __src = InsertElement;
      v151 = v20;
      v152 = v11;
      v155 = 257;
      v24 = llvm::IRBuilderBase::CreateCall((uint64_t)v137, *(_QWORD *)(v92 + 24), v92, (uint64_t)&__src, 3, (uint64_t)v153);
      llvm::Value::replaceAllUsesWith();
      llvm::Instruction::eraseFromParent((llvm::Instruction *)v6);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v138.__r_.__value_.__l.__data_);
      for (i = 0; i != -12; i -= 3)
      {
        if (SHIBYTE(v149[i + 2]) < 0)
          operator delete((void *)v149[i]);
      }
LABEL_59:
      v46 = *((unsigned __int8 *)v24 + 16);
      if (v24 && v46 == 60)
      {
        v47 = **((_QWORD **)v24 - 4);
        v48 = *(_DWORD *)(v47 + 8);
        if ((v48 & 0xFE) == 0x12)
          v48 = *(_DWORD *)(**(_QWORD **)(v47 + 16) + 8);
        v49 = v48 >> 8;
        v50 = v143[0];
        if (!v143[0])
          goto LABEL_72;
        v51 = v143;
        do
        {
          v52 = v50;
          v53 = v51;
          v54 = *((_DWORD *)v50 + 7);
          v55 = v50 + 1;
          if (v54 >= v49)
          {
            v55 = v52;
            v51 = (_QWORD **)v52;
          }
          v50 = (_QWORD *)*v55;
        }
        while (v50);
        if (v51 == v143)
          goto LABEL_72;
        if (v54 < v49)
          v52 = v53;
        if (v49 < *((_DWORD *)v52 + 7))
        {
LABEL_72:
          v56 = *((_QWORD *)this + 6);
          v57 = v56 + 24;
          for (j = *(_QWORD *)(v56 + 32); j != v57; j = *(_QWORD *)(j + 8))
          {
            v59 = j - 56;
            if (!j)
              v59 = 0;
            v60 = v59 + 72;
            for (k = *(_QWORD *)(v59 + 80); k != v60; k = *(_QWORD *)(k + 8))
            {
              v62 = k - 24;
              if (!k)
                v62 = 0;
              v63 = *(_QWORD *)(v62 + 48);
              if (v63 != v62 + 40)
              {
LABEL_99:
                while (k != v60)
                {
                  v64 = v63 - 24;
                  if (!v63)
                    v64 = 0;
                  v65 = *(unsigned __int8 *)(v64 + 16);
                  if (v65 != 61)
                    v64 = 0;
                  if (v63 && v65 == 61)
                  {
                    v66 = **(_QWORD **)(v64 - 32);
                    v67 = *(_DWORD *)(v66 + 8);
                    if ((v67 & 0xFE) == 0x12)
                      v67 = *(_DWORD *)(**(_QWORD **)(v66 + 16) + 8);
                    if (v49 == v67 >> 8)
                      MarkInvariants::addSeed((uint64_t *)this, *(llvm::Value **)(v64 - 64), 0);
                  }
                  v63 = *(_QWORD *)(v63 + 8);
                  v68 = k - 24;
                  if (!k)
                    v68 = 0;
                  if (v63 == v68 + 40)
                  {
                    while (1)
                    {
                      k = *(_QWORD *)(k + 8);
                      if (k == v60)
                        goto LABEL_100;
                      v69 = k - 24;
                      if (!k)
                        v69 = 0;
                      v63 = *(_QWORD *)(v69 + 48);
                      if (v63 != v69 + 40)
                        goto LABEL_99;
                    }
                  }
                }
                break;
              }
            }
LABEL_100:
            ;
          }
          std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v142, v49, v49);
        }
        goto LABEL_107;
      }
      if (v24 && v46 == 92)
      {
        if (*((_DWORD *)v24 + 18) != 1)
          goto LABEL_231;
        v70 = **((_DWORD **)v24 + 8);
        v71 = (llvm::Value *)*((_QWORD *)v24 - 4);
        v72 = (uint64_t *)this;
LABEL_105:
        MarkInvariants::addSeed(v72, v71, v70);
        goto LABEL_107;
      }
      if (!v24 || v46 != 93)
      {
        if (!v24 || v46 != 84)
        {
          v94 = *((_DWORD *)v24 + 5);
          if ((v94 & 0x40000000) != 0)
          {
            v96 = (llvm::Value **)*((_QWORD *)v24 - 1);
            v95 = v94 & 0x7FFFFFF;
            if (!v95)
              goto LABEL_107;
          }
          else
          {
            v95 = v94 & 0x7FFFFFF;
            v96 = (llvm::Value **)((char *)v24 - 32 * v95);
            if (!v95)
              goto LABEL_107;
          }
          v114 = 32 * v95;
          do
          {
            v115 = *v96;
            v96 += 4;
            MarkInvariants::addSeed((uint64_t *)this, v115, v8);
            v114 -= 32;
          }
          while (v114);
          goto LABEL_107;
        }
        v81 = *((_QWORD *)v24 - 4);
        if (!v81 || *(_BYTE *)(v81 + 16) || *(_QWORD *)(v81 + 24) != *((_QWORD *)v24 + 9))
        {
LABEL_231:
          v133 = 0;
          goto LABEL_232;
        }
        if (llvm::GlobalValue::isDeclaration(*((llvm::GlobalValue **)v24 - 4)))
        {
          v82 = *((_DWORD *)v24 + 5) & 0x7FFFFFF;
          if ((_DWORD)v82)
          {
            v83 = -32 * v82;
            do
            {
              MarkInvariants::addSeed((uint64_t *)this, *(llvm::Value **)((char *)v24 + v83), v8);
              v83 += 32;
            }
            while (v83);
          }
        }
        else
        {
          v116 = v140;
          for (m = &v140; ; v116 = *m)
          {
            v118 = m;
            if (!v116)
              break;
            while (1)
            {
              m = (uint64_t **)v116;
              v119 = v116[4];
              if (v81 < v119)
                break;
              if (v119 >= v81)
                goto LABEL_208;
              v116 = m[1];
              if (!v116)
              {
                v118 = m + 1;
                goto LABEL_204;
              }
            }
          }
LABEL_204:
          v120 = (uint64_t *)operator new(0x28uLL);
          v120[4] = v81;
          *v120 = 0;
          v120[1] = 0;
          v120[2] = (uint64_t)m;
          *v118 = v120;
          if (*v139)
          {
            v139 = (uint64_t **)*v139;
            v121 = *v118;
          }
          else
          {
            v121 = v120;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v140, v121);
          ++v141;
LABEL_208:
          for (n = *(_QWORD *)(v81 + 80); n != v81 + 72; n = *(_QWORD *)(n + 8))
          {
            if (n)
              v123 = n - 24;
            else
              v123 = 0;
            v124 = *(_QWORD *)(v123 + 40);
            if (v124 != v123 + 40)
            {
              v125 = v124 - 24;
              v126 = v124 ? v124 - 24 : 0;
              v127 = *(unsigned __int8 *)(v126 + 16) - 40;
              v128 = __CFADD__(v127, 11);
              v129 = v127 >= 0xFFFFFFF5 ? v125 : 0;
              if (v128 && *(_BYTE *)(v129 + 16) == 29)
              {
                v131 = *(_DWORD *)(v129 + 20) & 0x7FFFFFF;
                if ((_DWORD)v131)
                  v132 = *(llvm::Value **)(v129 - 32 * v131);
                else
                  v132 = 0;
                MarkInvariants::addSeed((uint64_t *)this, v132, v8);
              }
            }
          }
        }
LABEL_107:
        v73 = v140;
        if (!v140)
          goto LABEL_191;
        v74 = *(_QWORD *)(*((_QWORD *)v24 + 5) + 56);
        v75 = &v140;
        do
        {
          v76 = v73;
          v77 = v75;
          v78 = v73[4];
          v79 = (uint64_t **)(v73 + 1);
          if (v78 >= v74)
          {
            v79 = (uint64_t **)v76;
            v75 = (uint64_t **)v76;
          }
          v73 = *v79;
        }
        while (v73);
        if (v75 == &v140)
          goto LABEL_191;
        if (v78 < v74)
          v76 = (uint64_t *)v77;
        if (v74 < v76[4])
          goto LABEL_191;
        v145 = 128;
        v144[0] = (llvm *)MEMORY[0x1CAA2C6C0](6144, 8);
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>,llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,unsigned int>>::initEmpty((uint64_t)v144);
        LOBYTE(v146) = 0;
        LOBYTE(v148[0]) = 0;
        if ((*(_WORD *)(v74 + 18) & 1) == 0)
        {
          v80 = *(llvm::Value **)(v74 + 88);
          goto LABEL_134;
        }
        llvm::Function::BuildLazyArguments((llvm::Function *)v74);
        v80 = *(llvm::Value **)(v74 + 88);
        if ((*(_WORD *)(v74 + 18) & 1) != 0)
        {
          llvm::Function::BuildLazyArguments((llvm::Function *)v74);
          v84 = *(llvm::Value **)(v74 + 88);
        }
        else
        {
LABEL_134:
          v84 = v80;
        }
        v97 = (llvm::Value *)((char *)v84 + 40 * *(_QWORD *)(v74 + 96));
        if (v80 != v97)
        {
          v98 = 0;
          do
          {
            *(_DWORD *)llvm::ValueMap<llvm::Value *,unsigned int,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>::operator[]((uint64_t)v144, v80) = v98;
            v80 = (llvm::Value *)((char *)v80 + 40);
            ++v98;
          }
          while (v80 != v97);
        }
        v99 = *((_DWORD *)v24 + 5);
        if ((v99 & 0x40000000) != 0)
        {
          v101 = (uint64_t *)*((_QWORD *)v24 - 1);
          v100 = v99 & 0x7FFFFFF;
        }
        else
        {
          v100 = v99 & 0x7FFFFFF;
          v101 = (uint64_t *)((char *)v24 - 32 * v100);
        }
        v102 = &v101[4 * v100];
        if (v100)
        {
          do
          {
            v103 = *v101;
            v153[0] = 0;
            v104 = llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>,llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>,llvm::BasicBlock*>>::LookupBucketFor<llvm::ValueMapCallbackVH<llvm::BasicBlock const*,llvm::BasicBlock*,llvm::ValueMapConfig<llvm::BasicBlock const*,llvm::sys::SmartMutex<false>>>>((uint64_t)v144[0], v145, v103, v153);
            v105 = v153[0];
            if (v104)
              v106 = v153[0] == (llvm *)((char *)v144[0] + 48 * v145);
            else
              v106 = 1;
            if (!v106)
            {
              for (ii = *(_QWORD *)(v74 + 8); ii; ii = *(_QWORD *)(ii + 8))
              {
                v108 = *(_QWORD *)(ii + 24);
                if (*(_BYTE *)(v108 + 16) != 84)
                  v108 = 0;
                v109 = (_QWORD *)*v4;
                if (*v4)
                {
                  v110 = v4;
                  do
                  {
                    v111 = v109[4];
                    v112 = v111 >= v108;
                    if (v111 >= v108)
                      v113 = v109;
                    else
                      v113 = v109 + 1;
                    if (v112)
                      v110 = v109;
                    v109 = (_QWORD *)*v113;
                  }
                  while (*v113);
                  if (v110 != v4 && v108 >= v110[4])
                    MarkInvariants::addSeed((uint64_t *)this, *(llvm::Value **)(v108- 32 * (*(_DWORD *)(v108 + 20) & 0x7FFFFFF)+ 32 * *((unsigned int *)v105 + 10)), v8);
                }
              }
            }
            v101 += 4;
          }
          while (v101 != v102);
        }
        llvm::optional_detail::OptionalStorage<llvm::DenseMap<llvm::Metadata const*,llvm::TrackingMDRef,llvm::DenseMapInfo<llvm::Metadata const*,void>,llvm::detail::DenseMapPair<llvm::Metadata const*,llvm::TrackingMDRef>>,false>::reset((uint64_t)&v146);
        llvm::DenseMapBase<llvm::DenseMap<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>,llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *,llvm::DenseMapInfo<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,void>,llvm::detail::DenseMapPair<llvm::ValueMapCallbackVH<llvm::Value *,llvm::GlobalVariable *,llvm::ValueMapConfig<llvm::Value *,llvm::sys::SmartMutex<false>>>,llvm::GlobalVariable *>>::destroyAll((uint64_t)v144);
        llvm::deallocate_buffer(v144[0], (void *)(48 * v145));
        goto LABEL_191;
      }
      if (*((_DWORD *)v24 + 18) != 1)
        goto LABEL_231;
      if (**((_DWORD **)v24 + 8) == v8)
      {
        v71 = (llvm::Value *)*((_QWORD *)v24 - 4);
        v72 = (uint64_t *)this;
        v70 = 0;
        goto LABEL_105;
      }
      MarkInvariants::addSeed((uint64_t *)this, *((llvm::Value **)v24 - 8), v8);
LABEL_191:
      v2 = *((_QWORD *)this + 1);
    }
    while (*(_QWORD *)this != v2);
  }
  v133 = 1;
LABEL_232:
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v140);
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v143[0]);
  return v133;
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

uint64_t AIRNTGetLLVMVersion()
{
  return 0;
}

uint64_t AIRNTInit(AGCEnv *a1)
{
  AGCEnv *v1;
  NSObject *OSLog;
  _BOOL8 v3;
  AGCEnv *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  const std::string::value_type *v10;
  NSObject *v11;
  pid_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  uint64_t v19;
  NSObject *v20;
  AGCLLVMUserShader *v21;
  uint64_t v22;
  char *v23;
  std::string v25;
  std::string v26;
  std::string v27;
  _BYTE buffer[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  AGCEnv::load(a1);
  memset(&v25, 0, sizeof(v25));
  v1 = (AGCEnv *)MGGetBoolAnswer();
  if ((_DWORD)v1)
  {
    OSLog = AGCEnv::getOSLog(v1);
    v3 = os_log_type_enabled(OSLog, OS_LOG_TYPE_DEBUG);
    if (v3)
    {
      *(_DWORD *)buffer = 136315138;
      *(_QWORD *)&buffer[4] = "serialize";
      _os_log_debug_impl(&dword_1C3C54000, OSLog, OS_LOG_TYPE_DEBUG, "%s(){\n", buffer, 0xCu);
    }
    AGCEnv::getStatusVariables((AGCEnv *)v3);
    v4 = (AGCEnv *)std::string::basic_string[abi:nn180100]<0>(&v27, "AGC_ENABLE_STATUS_FILE");
    v6 = AGCEnv::getStatusVariables(void)::status_vars;
    v5 = qword_1ED839C38;
    if (qword_1ED839C38 != AGCEnv::getStatusVariables(void)::status_vars)
    {
      v7 = 0;
      v8 = 0;
      v9 = MEMORY[0x1E0C80978];
      do
      {
        v4 = (AGCEnv *)getenv(*(const char **)(v6 + 8 * v7));
        if (v4)
        {
          v10 = (const std::string::value_type *)v4;
          v11 = AGCEnv::getOSLog(v4);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            v19 = *(_QWORD *)(AGCEnv::getStatusVariables(void)::status_vars + 8 * v7);
            *(_DWORD *)buffer = 136315394;
            *(_QWORD *)&buffer[4] = v19;
            *(_WORD *)&buffer[12] = 2080;
            *(_QWORD *)&buffer[14] = v10;
            _os_log_debug_impl(&dword_1C3C54000, v11, OS_LOG_TYPE_DEBUG, "%s = %s\n", buffer, 0x16u);
          }
          if (!std::string::compare(&v27, *(const std::string::value_type **)(AGCEnv::getStatusVariables(void)::status_vars + 8 * v7)))
          {
            std::string::append(&v25, "AGC_CLIENT_PROCESS_NAME");
            std::string::push_back(&v25, 10);
            std::string::basic_string[abi:nn180100]<0>(&v26, "agc_status_");
            v12 = getpid();
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            v29 = 0u;
            v30 = 0u;
            memset(buffer, 0, sizeof(buffer));
            v13 = proc_name(v12, buffer, 0x80u);
            if (v13)
            {
              v14 = v13;
              v15 = buffer;
              while (1)
              {
                v16 = (char)*v15;
                if ((v16 & 0x80000000) != 0)
                  break;
                if ((*(_DWORD *)(v9 + 4 * v16 + 60) & 0x500) == 0)
                  goto LABEL_14;
LABEL_15:
                ++v15;
                if (!--v14)
                  goto LABEL_19;
              }
              if (__maskrune(v16, 0x500uLL))
                goto LABEL_15;
LABEL_14:
              *v15 = 95;
              goto LABEL_15;
            }
LABEL_19:
            std::string::append(&v26, buffer);
            *(std::string *)buffer = v26;
            memset(&v26, 0, sizeof(v26));
            if (buffer[23] >= 0)
              v17 = buffer;
            else
              v17 = *(const std::string::value_type **)buffer;
            if (buffer[23] >= 0)
              v18 = HIBYTE(*(_QWORD *)&buffer[16]);
            else
              v18 = *(_QWORD *)&buffer[8];
            std::string::append(&v25, v17, v18);
            if ((buffer[23] & 0x80000000) != 0)
              operator delete(*(void **)buffer);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v26.__r_.__value_.__l.__data_);
            std::string::push_back(&v25, 10);
          }
          std::string::append(&v25, *(const std::string::value_type **)(AGCEnv::getStatusVariables(void)::status_vars + 8 * v7));
          std::string::push_back(&v25, 10);
          std::string::append(&v25, v10);
          std::string::push_back(&v25, 10);
          v6 = AGCEnv::getStatusVariables(void)::status_vars;
          v5 = qword_1ED839C38;
        }
        v7 = ++v8;
      }
      while (v8 < (unint64_t)((v5 - v6) >> 3));
    }
    v20 = AGCEnv::getOSLog(v4);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buffer = 0;
      _os_log_debug_impl(&dword_1C3C54000, v20, OS_LOG_TYPE_DEBUG, "}\n", buffer, 2u);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
  AGCEnv::deserialize((uint64_t)&v25);
  AGCLLVMCtx::initialize(v21);
  v22 = operator new();
  v23 = (char *)operator new(0x40uLL);
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *(_QWORD *)v23 = &off_1E7ECE6D8;
  *(_OWORD *)(v23 + 40) = 0u;
  *((_DWORD *)v23 + 14) = 1065353216;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_QWORD *)v22 = v23 + 24;
  *(_QWORD *)(v22 + 8) = v23;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)(v22 + 16) = v22 + 24;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_DWORD *)(v22 + 72) = 1065353216;
  *(_QWORD *)(v22 + 88) = 0;
  *(_QWORD *)(v22 + 96) = 0;
  *(_QWORD *)(v22 + 80) = 0;
  AGCNativeTranslator::init((AGCNativeTranslator *)v22);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v22;
}

uint64_t *AGCNativeTranslator::init(AGCNativeTranslator *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t *result;
  int v9;

  v1 = 0;
  v2 = (uint64_t *)((char *)this + 16);
  v3 = (uint64_t *)((char *)this + 40);
  do
  {
    v4 = AGCTarget::TargetArchToCPUSubtypeImpl(AGCActiveTargets[v1]);
    v5 = v4;
    v6 = HIDWORD(v4);
    v9 = v4;
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v2, v5, v5);
    v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, v5, &v9);
    result = std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v7 + 3, v6, v6);
    ++v1;
  }
  while (v1 != 25);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v6 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 2;
  v10 = operator new(0x30uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[5] = 0;
  v10[4] = 0;
  v10[3] = v10 + 4;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = a1[1];
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v3);
  if (v31)
  {
    *v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    v32 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void std::__shared_ptr_emplace<std::unordered_map<AGCTargetArch,std::unique_ptr<AGCTargetContext>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7ECE6D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<AGCTargetArch,std::unique_ptr<AGCTargetContext>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7ECE6D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1CAA2D68CLL);
}

void std::__shared_ptr_emplace<std::unordered_map<AGCTargetArch,std::unique_ptr<AGCTargetContext>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t **v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (uint64_t **)v2[3];
      v2[3] = 0;
      if (v4)
        std::default_delete<AGCTargetContext>::operator()[abi:nn180100](v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    operator delete(v5);
}

void std::default_delete<AGCTargetContext>::operator()[abi:nn180100](uint64_t **a1)
{
  AGCLLVMCtx *v2;
  uint64_t *v3;

  std::__tree<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::__map_value_compare<std::array<unsigned char,32ul>,std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::less<std::array<unsigned char,32ul>>,true>,std::allocator<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>>>::destroy((char *)a1[4]);
  v2 = (AGCLLVMCtx *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    AGCLLVMCtx::~AGCLLVMCtx(v2);
    MEMORY[0x1CAA2D68C]();
  }
  std::unique_ptr<AGCTargetPrinter>::reset[abi:nn180100](a1 + 1, 0);
  v3 = *a1;
  *a1 = 0;
  if (v3)
    (*(void (**)(uint64_t *))(*v3 + 8))(v3);
  JUMPOUT(0x1CAA2D68CLL);
}

void std::__tree<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::__map_value_compare<std::array<unsigned char,32ul>,std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::less<std::array<unsigned char,32ul>>,true>,std::allocator<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>>>::destroy(char *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::__map_value_compare<std::array<unsigned char,32ul>,std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::less<std::array<unsigned char,32ul>>,true>,std::allocator<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::__map_value_compare<std::array<unsigned char,32ul>,std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>,std::less<std::array<unsigned char,32ul>>,true>,std::allocator<std::__value_type<std::array<unsigned char,32ul>,AGCManagedCompilationResult>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (void *)*((_QWORD *)a1 + 8);
    if (v2)
      free(v2);
    if (a1[183] < 0)
      operator delete(*((void **)a1 + 20));
    if (a1[159] < 0)
      operator delete(*((void **)a1 + 17));
    if (a1[127] < 0)
      operator delete(*((void **)a1 + 13));
    if (a1[103] < 0)
      operator delete(*((void **)a1 + 10));
    operator delete(a1);
  }
}

uint64_t **std::unique_ptr<AGCTargetPrinter>::reset[abi:nn180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  BOOL v4;
  unsigned __int8 v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    if (*v2)
      v4 = v3 == MEMORY[0x1E0DE4A50];
    else
      v4 = 1;
    if (!v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      *v2 = 0;
      {
        getFilePath(void)::file_path = 0;
        qword_1EF8EA780 = 0;
        unk_1EF8EA788 = 0;
        __cxa_atexit(MEMORY[0x1E0DE44D0], &getFilePath(void)::file_path, &dword_1C3C54000);
      }
      if (byte_1EF8EA78F < 0)
      {
        *(_BYTE *)getFilePath(void)::file_path = 0;
        qword_1EF8EA780 = 0;
      }
      else
      {
        LOBYTE(getFilePath(void)::file_path) = 0;
        byte_1EF8EA78F = 0;
      }
    }
    JUMPOUT(0x1CAA2D68CLL);
  }
  return result;
}

uint64_t AIRNTDispose(uint64_t result)
{
  uint64_t v1;
  _QWORD **v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (result)
  {
    v1 = result;
    if (*(char *)(result + 103) < 0)
      operator delete(*(void **)(result + 80));
    v2 = *(_QWORD ***)(v1 + 56);
    if (v2)
    {
      do
      {
        v3 = *v2;
        std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v2[4]);
        operator delete(v2);
        v2 = (_QWORD **)v3;
      }
      while (v3);
    }
    v4 = *(void **)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v4)
      operator delete(v4);
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(*(_QWORD **)(v1 + 24));
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    JUMPOUT(0x1CAA2D68CLL);
  }
  return result;
}

uint64_t AIRNTClone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = operator new();
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v2 = *(_QWORD *)a1;
  *(_QWORD *)(v2 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 16) = v2 + 24;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_DWORD *)(v2 + 72) = 1065353216;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  AGCNativeTranslator::init((AGCNativeTranslator *)v2);
  std::string::operator=((std::string *)(v3 + 80), (const std::string *)(a1 + 80));
  return v3;
}

uint64_t AIRNTInitCompilationContext(char *a1)
{
  uint64_t v2;
  char v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  char *v8;
  int v9;
  size_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  char v24;
  std::string::size_type v25;
  std::string::size_type v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type __sz;
  std::string::size_type size;
  std::string v33;
  std::string __dst;
  _DWORD v35[4];
  _QWORD v36[2];
  _QWORD v37[3];

  v37[2] = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = 0;
  v4 = 0;
  __sz = 0;
  size = 0;
  v5 = 0;
  v6 = 0;
  *(_BYTE *)(v2 + 48) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_WORD *)(v2 + 72) = 0;
  memset(&v35[2], 0, 7);
  v7 = a1;
  memset(v35, 0, 7);
  do
  {
    v8 = &a1[((unint64_t)*(unsigned int *)v7 >> 6) & 0x3FFFFFC];
    v9 = *(_DWORD *)v7;
    v10 = v8 - v7 - 4;
    switch(*(_DWORD *)v7)
    {
      case '<':
        v11 = *((_DWORD *)v7 + 4);
        *(_BYTE *)(v2 + 56) = (v11 & 0x4000000) != 0;
        *(_BYTE *)(v2 + 57) = BYTE1(v11) & 1;
        v12 = *(_QWORD *)(v7 + 20);
        *(_BYTE *)(v2 + 63) = (v12 & 0x800000) != 0;
        *(_BYTE *)(v2 + 64) = BYTE3(v12) & 1;
        *(_BYTE *)(v2 + 65) = (v12 & 0x8000000) != 0;
        *(_BYTE *)(v2 + 59) = (v12 & 0x20000000000) != 0;
        *(_BYTE *)(v2 + 70) = v11 & 1;
        *(_BYTE *)(v2 + 71) = (v11 & 2) != 0;
        *(_BYTE *)(v2 + 72) = (v11 & 8) != 0;
        v13 = (v12 >> 26) & 1;
        goto LABEL_17;
      case '=':
        v15 = *((_DWORD *)v7 + 4);
        v14 = *((_DWORD *)v7 + 5);
        *(_BYTE *)(v2 + 56) = (v15 & 0x4000000) != 0;
        *(_BYTE *)(v2 + 57) = BYTE1(v15) & 1;
        v16 = (v14 >> 7) & 1;
        goto LABEL_8;
      case '>':
        v15 = *((_DWORD *)v7 + 4);
        v17 = *((_DWORD *)v7 + 5);
        *(_BYTE *)(v2 + 56) = (v15 & 0x4000000) != 0;
        *(_BYTE *)(v2 + 57) = BYTE1(v15) & 1;
        v16 = (v17 >> 9) & 1;
LABEL_8:
        *(_BYTE *)(v2 + 59) = v16;
        *(_BYTE *)(v2 + 70) = v15 & 1;
        *(_BYTE *)(v2 + 71) = (v15 & 2) != 0;
        *(_BYTE *)(v2 + 72) = (v15 & 8) != 0;
        break;
      case '?':
        v19 = *((_DWORD *)v7 + 16);
        v18 = *((_DWORD *)v7 + 17);
        *(_BYTE *)(v2 + 56) = (v19 & 0x4000000) != 0;
        *(_BYTE *)(v2 + 57) = BYTE1(v19) & 1;
        *(_BYTE *)(v2 + 66) = (v18 & 8) != 0;
        *(_BYTE *)(v2 + 59) = (v18 & 0x800) != 0;
        *(_BYTE *)(v2 + 70) = v19 & 1;
        *(_BYTE *)(v2 + 71) = (v19 & 2) != 0;
        *(_BYTE *)(v2 + 72) = (v19 & 8) != 0;
        v13 = (v18 >> 7) & 1;
        goto LABEL_17;
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'M':
        break;
      case 'K':
        std::string::basic_string[abi:nn180100](&__dst, v7 + 4, v10);
        if (v3 < 0)
          operator delete(v6);
        __sz = __dst.__r_.__value_.__l.__size_;
        v6 = (void *)__dst.__r_.__value_.__r.__words[0];
        v35[2] = __dst.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)&v35[2] + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
        v3 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        break;
      case 'L':
        std::string::basic_string[abi:nn180100](&__dst, v7 + 4, v10);
        if (v5 < 0)
          operator delete(v4);
        size = __dst.__r_.__value_.__l.__size_;
        v4 = (void *)__dst.__r_.__value_.__r.__words[0];
        v35[0] = __dst.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
        v5 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        break;
      case 'N':
        v21 = *((_DWORD *)v7 + 4);
        v20 = *((_DWORD *)v7 + 5);
        *(_BYTE *)(v2 + 56) = (v21 & 0x4000000) != 0;
        *(_BYTE *)(v2 + 57) = BYTE1(v21) & 1;
        *(_BYTE *)(v2 + 67) = (v20 & 4) != 0;
        *(_BYTE *)(v2 + 68) = (v20 & 0x40) != 0;
        *(_BYTE *)(v2 + 69) = (v20 & 0x80) != 0;
        *(_BYTE *)(v2 + 59) = (v20 & 0x800) != 0;
        *(_BYTE *)(v2 + 70) = v21 & 1;
        *(_BYTE *)(v2 + 71) = (v21 & 2) != 0;
        *(_BYTE *)(v2 + 72) = (v21 & 8) != 0;
        v13 = (v20 >> 8) & 1;
LABEL_17:
        *(_BYTE *)(v2 + 73) = v13;
        break;
      case 'O':
        v22 = *((_DWORD *)v7 + 1);
        *(_BYTE *)(v2 + 56) = (v22 & 0x4000000) != 0;
        *(_BYTE *)(v2 + 57) = BYTE1(v22) & 1;
        break;
      default:
        if (v9 == 84)
          *(_BYTE *)(v2 + 59) = (*((_DWORD *)v7 + 1) & 0x20000) != 0;
        break;
    }
    v7 = v8;
  }
  while (v9 != 96);
  if (v3 < 0)
  {
    v23 = v6;
    std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v6, __sz);
    if ((v5 & 0x80) == 0)
      goto LABEL_22;
  }
  else
  {
    v23 = v6;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    __dst.__r_.__value_.__l.__size_ = __sz;
    LODWORD(__dst.__r_.__value_.__r.__words[2]) = v35[2];
    *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v35[2] + 3);
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v3;
    if ((v5 & 0x80) == 0)
    {
LABEL_22:
      v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
      v33.__r_.__value_.__l.__size_ = size;
      LODWORD(v33.__r_.__value_.__r.__words[2]) = v35[0];
      *(_DWORD *)((char *)&v33.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v35 + 3);
      v24 = v5;
      v25 = (std::string::size_type)v4;
      goto LABEL_25;
    }
  }
  std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)v4, size);
  v25 = v33.__r_.__value_.__r.__words[0];
  v24 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
LABEL_25:
  v37[0] = __dst.__r_.__value_.__l.__size_;
  v26 = __dst.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v37 + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
  v27 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  v36[0] = v33.__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&v33.__r_.__value_.__r.__words[1] + 7);
  memset(&__dst, 0, sizeof(__dst));
  memset(&v33, 0, sizeof(v33));
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  v28 = v37[0];
  *(_QWORD *)v2 = v26;
  *(_QWORD *)(v2 + 8) = v28;
  *(_QWORD *)(v2 + 15) = *(_QWORD *)((char *)v37 + 7);
  *(_BYTE *)(v2 + 23) = v27;
  if (*(char *)(v2 + 47) < 0)
    operator delete(*(void **)(v2 + 24));
  v29 = v36[0];
  *(_QWORD *)(v2 + 24) = v25;
  *(_QWORD *)(v2 + 32) = v29;
  *(_QWORD *)(v2 + 39) = *(_QWORD *)((char *)v36 + 7);
  *(_BYTE *)(v2 + 47) = v24;
  *(_BYTE *)(v2 + 48) = 0;
  if (v5 < 0)
  {
    operator delete(v4);
    if ((v3 & 0x80) == 0)
      return v2;
LABEL_33:
    operator delete(v23);
    return v2;
  }
  if (v3 < 0)
    goto LABEL_33;
  return v2;
}

uint64_t AIRNTDisposeCompilationContext(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(char *)(result + 47) < 0)
      operator delete(*(void **)(result + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1CAA2D68CLL);
  }
  return result;
}

void AIRNTGetVersion(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  *a2 = 2;
  *a3 = 0;
  *a4 = 0;
}

const char *AIRNTGetVendorName()
{
  return "Apple";
}

void AIRNTGetDefaultArch(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = 16777235;
  *a3 = 65;
}

void AIRNTGetSupportedArchs(uint64_t a1, void **a2, _QWORD *a3, _QWORD *a4)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  _QWORD *v12;
  _QWORD **v13;
  BOOL v14;
  _QWORD **v15;
  _QWORD *v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v15 = &v16;
  std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v15, *(_QWORD **)(a1 + 16), (_QWORD *)(a1 + 24));
  *a2 = malloc_type_malloc(4 * v17, 0x100004052888210uLL);
  v7 = malloc_type_malloc(4 * v17, 0x100004052888210uLL);
  *a3 = v7;
  v8 = (uint64_t)v15;
  if (v15 == &v16)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = *a2;
    do
    {
      v11 = *(_DWORD *)(v8 + 28);
      v10[v9] = 16777235;
      v7[v9] = v11;
      v12 = *(_QWORD **)(v8 + 8);
      if (v12)
      {
        do
        {
          v13 = (_QWORD **)v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = *(_QWORD ***)(v8 + 16);
          v14 = *v13 == (_QWORD *)v8;
          v8 = (uint64_t)v13;
        }
        while (!v14);
      }
      ++v9;
      v8 = (uint64_t)v13;
    }
    while (v13 != &v16);
    v9 = v9;
  }
  *a4 = v9;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v16);
}

uint64_t *std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_9;
      v9 = v5[1];
      v10 = v6;
      if (v7)
      {
        do
        {
          v8 = (uint64_t *)v9;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *((_DWORD *)v4 + 7);
      if (*((_DWORD *)v8 + 7) < v12)
      {
LABEL_9:
        if (v7)
          v13 = (uint64_t **)v8;
        else
          v13 = (uint64_t **)v6;
        if (v7)
          v14 = (uint64_t **)(v8 + 1);
        else
          v14 = (uint64_t **)v6;
      }
      else
      {
        v13 = (uint64_t **)v6;
        v14 = (uint64_t **)v6;
        if (v7)
        {
          v14 = (uint64_t **)v6;
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v18 = *((_DWORD *)v7 + 7);
              if (v12 >= v18)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_16;
            }
            if (v18 >= v12)
              break;
            v14 = v13 + 1;
            v7 = v13[1];
            if (!v7)
              goto LABEL_16;
          }
        }
      }
      if (!*v14)
      {
LABEL_16:
        v15 = (uint64_t *)operator new(0x20uLL);
        *((_DWORD *)v15 + 7) = *((_DWORD *)v4 + 7);
        result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__insert_node_at((uint64_t **)v5, (uint64_t)v13, v14, v15);
      }
      v16 = (_QWORD *)v4[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v4[2];
          v11 = *v17 == (_QWORD)v4;
          v4 = v17;
        }
        while (!v11);
      }
      v4 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void AIRNTGetSupportedImpls(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD **v12;
  BOOL v13;
  _QWORD **v14;
  _QWORD *v15;
  uint64_t v16;

  LODWORD(v14) = a3;
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)(a1 + 40), a3, &v14);
  v15 = 0;
  v16 = 0;
  v14 = &v15;
  std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v14, (_QWORD *)v7[3], v7 + 4);
  v8 = malloc_type_malloc(4 * v16, 0x100004052888210uLL);
  *a4 = v8;
  v9 = (uint64_t)v14;
  if (v14 == &v15)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v8[v10] = *(_DWORD *)(v9 + 28);
      v11 = *(_QWORD **)(v9 + 8);
      if (v11)
      {
        do
        {
          v12 = (_QWORD **)v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = *(_QWORD ***)(v9 + 16);
          v13 = *v12 == (_QWORD *)v9;
          v9 = (uint64_t)v12;
        }
        while (!v13);
      }
      ++v10;
      v9 = (uint64_t)v12;
    }
    while (v12 != &v15);
    v10 = v10;
  }
  *a5 = v10;
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v15);
}

uint64_t AIRNTSupportsArch(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD **v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD **v14;
  BOOL v15;
  uint64_t v16;
  _QWORD **v18;
  _QWORD *v19[2];
  _QWORD **v20;
  _QWORD *v21[2];
  unsigned int v22;

  if (a2 != 16777235)
    return 0;
  v21[0] = 0;
  v21[1] = 0;
  v20 = v21;
  std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v20, *(_QWORD **)(a1 + 16), (_QWORD *)(a1 + 24));
  v5 = (uint64_t)v20;
  if (v20 == v21)
  {
LABEL_20:
    v16 = 0;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v22 = *(_DWORD *)(v5 + 28);
      v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<unsigned int>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, v22, &v22);
      v19[0] = 0;
      v19[1] = 0;
      v18 = v19;
      std::set<unsigned int>::insert[abi:nn180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t *)&v18, (_QWORD *)v7[3], v7 + 4);
      if (v19[0])
      {
        v8 = v19;
        v9 = v19[0];
        do
        {
          v10 = v9;
          v11 = v8;
          v12 = *((_DWORD *)v9 + 7);
          if (v12 >= a3)
            v8 = (_QWORD **)v9;
          else
            ++v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
        if (v8 != v19)
        {
          if (v12 < a3)
            v10 = v11;
          if (*((_DWORD *)v10 + 7) <= a3)
            break;
        }
      }
      std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v19[0]);
      v13 = *(_QWORD **)(v5 + 8);
      if (v13)
      {
        do
        {
          v14 = (_QWORD **)v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = *(_QWORD ***)(v5 + 16);
          v15 = *v14 == (_QWORD *)v5;
          v5 = (uint64_t)v14;
        }
        while (!v15);
      }
      v5 = (uint64_t)v14;
      if (v14 == v21)
        goto LABEL_20;
    }
    std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v19[0]);
    v16 = 1;
  }
  std::__tree<std::pair<unsigned long,unsigned long>,flexbuffers::Builder::StringOffsetCompare,std::allocator<std::pair<unsigned long,unsigned long>>>::destroy(v21[0]);
  return v16;
}

uint64_t AIRNTSupportsTarget(uint64_t a1, int a2, AGCTarget *a3, unsigned int a4, __int16 a5, __int16 a6, __int16 a7)
{
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  const char *v12;
  unsigned __int16 v13;
  _BOOL4 v15;
  BOOL v16;

  if (a2 != 16777235)
    return 0;
  v9 = (unsigned __int16)((16 * a6) | (a5 << 8) | a7);
  result = pluginSupportsOSVersion(a4 | (unint64_t)(v9 << 32));
  if (!(_DWORD)result)
    return result;
  v13 = AGCTarget::CPUSubtypeToTargetArch(a3, v11, v12);
  result = 0;
  switch(a4)
  {
    case 1u:
      result = 0;
      switch(v13)
      {
        case 0x10u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
          return v9 > 0xCFF;
        case 0x15u:
          return v9 > 0xD3F;
        case 0x18u:
          return v9 > 0xD4F;
        default:
          return result;
      }
      return result;
    case 2u:
      result = 0;
      switch(v13)
      {
        case 4u:
        case 8u:
          return (v9 & 0xFF00) == 4096;
        case 6u:
        case 9u:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0x10u:
        case 0x11u:
        case 0x16u:
          return v9 > 0xFFF;
        case 0x12u:
          return v9 >> 4 > 0x100;
        case 0x13u:
        case 0x15u:
        case 0x20u:
        case 0x22u:
          result = (_DWORD)v9 != 0;
          break;
        case 0x1Fu:
          return v9 >> 8 > 0x10;
        default:
          return result;
      }
      return result;
    case 3u:
      if (v13 > 9u)
      {
        if (v13 != 10 && v13 != 17)
        {
          v15 = v9 != 0;
          v16 = v13 == 34;
          return v16 && v15;
        }
        return v9 > 0xFFF;
      }
      if (v13 == 7)
        return v9 > 0xFFF;
      v15 = v9 > 0xFFF;
      v16 = v13 == 9;
      return v16 && v15;
    case 4u:
      if (v13 == 22)
        return v9 > 0x9FF;
      else
        return v13 == 10 && v9 > 0x8FF;
    case 0xBu:
      return v9 > 0xFF && v13 == 18;
    default:
      return result;
  }
}

uint64_t pluginSupportsOSVersion(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = 0;
  switch((int)a1)
  {
    case 1:
      v3 = WORD2(a1) > 0xEFFu;
      goto LABEL_6;
    case 2:
    case 3:
      v3 = WORD2(a1) >> 9 > 8u;
      goto LABEL_6;
    case 4:
      v3 = WORD2(a1) > 0xAFFu;
      goto LABEL_6;
    case 11:
      v3 = WORD2(a1) > 0x1FFu;
LABEL_6:
      result = v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t AIRNTGetSupportedBitcodeVersion()
{
  return 32023;
}

BOOL AIRNTParseCommandLineOptions(uint64_t a1, uint64_t a2, unint64_t a3, AGCError *a4)
{
  BOOL v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  __n128 v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  __n128 v22;
  unint64_t v23;
  size_t v24;
  __int16 v25;
  __n128 v26;
  void *__p[2];
  char v28;

  if (a3 >= 2)
  {
    v4 = 0;
    v8 = a1 + 80;
    v9 = 1;
    while (1)
    {
      v10 = *(_QWORD *)(a2 + 8 * v9);
      v26.n128_u64[0] = v10;
      if (!v10)
        break;
      v11 = strlen((const char *)v10);
      v26.n128_u64[1] = v11;
      if (v11 < 6)
        goto LABEL_14;
      if (*(_DWORD *)v10 != 1885564205 || *(_WORD *)(v10 + 4) != 15733)
        goto LABEL_14;
      LOBYTE(__p[0]) = 61;
      v13 = llvm::StringRef::split(&v22, &v26, (uint64_t)__p, 1);
      MEMORY[0x1CAA2D4A0](v8, v23, v24, v13);
      v4 = ++v9 >= a3;
      if (a3 == v9)
        return 1;
    }
    v11 = 0;
    v26.n128_u64[1] = 0;
LABEL_14:
    v25 = 1283;
    v22.n128_u64[0] = (unint64_t)"Unsupported translator option: ";
    v23 = v10;
    v24 = v11;
    llvm::Twine::str((llvm::Twine *)&v22);
    if (v28 >= 0)
      v20 = __p;
    else
      v20 = (void **)__p[0];
    AGCError::logError(a4, (char **)v20, v14, v15, v16, v17, v18, v19);
    if (v28 < 0)
      operator delete(__p[0]);
  }
  else
  {
    return 1;
  }
  return v4;
}

void AGCError::logError(AGCError *this, char **a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;

  if (a2 && *(_BYTE *)a2)
  {
    printMessage((char **)&AGCPrinter, "** Compilation failed with error: %s **", (uint64_t)a3, a4, a5, a6, a7, a8, (char)a2);
    if (!this)
      return;
    v10 = (const char *)a2;
  }
  else
  {
    if (!this)
      return;
    v10 = "Internal compiler error.";
  }
  *(_QWORD *)this = strdup(v10);
}

uint64_t AIRNTSupportsEmitExecutableImage()
{
  return 1;
}

uint64_t AIRNTSupportsEmitBuiltinExecutableImage()
{
  return 1;
}

uint64_t AIRNTSupportsThreads()
{
  return 0;
}

uint64_t AIRNTEmitAssembly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, AGCError *a11)
{
  std::string *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  void **v19;
  std::string v21;
  void *__p[2];
  uint64_t v23;

  std::string::basic_string[abi:nn180100]<0>(&v21, "[AGX] Plugin interface not implemented: ");
  v11 = std::string::append(&v21, "AIRNTEmitAssembly");
  v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23 = v18;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  AGCError::logError(a11, (char **)v19, v12, v13, v14, v15, v16, v17);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t AIRNTEmitObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, AGCError *a11)
{
  std::string *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  void **v19;
  std::string v21;
  void *__p[2];
  uint64_t v23;

  std::string::basic_string[abi:nn180100]<0>(&v21, "[AGX] Plugin interface not implemented: ");
  v11 = std::string::append(&v21, "AIRNTEmitObject");
  v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v23 = v18;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v23 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  AGCError::logError(a11, (char **)v19, v12, v13, v14, v15, v16, v17);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  return 0;
}

uint64_t AIRNTEmitDylibImage(uint64_t *a1, uint64_t a2, const char *a3, int a4, int a5, AGCTarget *this, int a7, int a8, _QWORD *a9, char **a10, AGCError *a11)
{
  unsigned int v11;
  int v15;
  uint64_t TargetContext;
  uint64_t v17;
  std::string *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  void **v26;
  void *v28[2];
  uint64_t v29;
  void *__p;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  const char *v35;
  void *v36;
  std::string v37;

  v11 = this;
  v15 = AGCTarget::CPUSubtypeToTargetArch(this, a2, a3);
  if (v15)
  {
    TargetContext = AGCNativeTranslator::getTargetContext(a1, v15);
    LODWORD(v29) = 8;
    v31 = 0;
    v32 = 0;
    __p = 0;
    v33 = 512;
    v34 = a2;
    v35 = a3;
    v36 = &unk_1C3E4D9BB;
    v28[0] = &off_1E7ECE710;
    v28[1] = off_1E7ECE770;
    v17 = AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject((uint64_t)v28, TargetContext, a9, a10, a11);
    v28[0] = &unk_1E7ECE740;
    v28[1] = off_1E7ECE7B0;
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
  }
  else
  {
    std::to_string(&v37, v11);
    v18 = std::string::insert(&v37, 0, "Unknown AGC target for CPU subtype: ");
    v25 = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)v28 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v29 = v25;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (v29 >= 0)
      v26 = v28;
    else
      v26 = (void **)v28[0];
    AGCError::logError(a11, (char **)v26, v19, v20, v21, v22, v23, v24);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    return 0;
  }
  return v17;
}

uint64_t AGCNativeTranslator::getTargetContext(uint64_t *a1, int a2)
{
  unint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;
  uint64_t **v15;
  uint64_t *TargetConfig;
  unsigned __int8 v17;
  const std::string::value_type *v18;
  std::string::size_type size;
  char *v20;
  unint64_t v21;
  llvm *LastDiagnostics;
  uint64_t j;
  uint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  const char *v27;
  llvm *v28;
  uint64_t v29;
  uint64_t k;
  _BYTE *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  uint8x8_t v55;
  uint64_t **v56;
  uint64_t *m;
  unint64_t v58;
  float v59;
  float v60;
  _BOOL8 v61;
  unint64_t v62;
  unint64_t v63;
  size_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint8x8_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  float v72;
  float v73;
  _BOOL8 v74;
  unint64_t v75;
  unint64_t v76;
  size_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  const char *v83;
  _QWORD *Value;
  uint64_t v85;
  uint64_t *v86;
  void *__src;
  unsigned int v88;
  std::string v89;
  _BYTE v90[16];
  uint64_t v91;
  std::string v92;
  void *__p[2];
  std::string::size_type v94;
  _BYTE __dst[28];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = a2;
  v7 = *(_QWORD *)(*a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = a2;
      if (v7 <= a2)
        v9 = a2 % v7;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & a2;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)v5 + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            goto LABEL_175;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7)
              v12 %= v7;
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9)
            break;
        }
      }
    }
  }
  v13 = operator new();
  v14 = AGCTarget::Get(a2);
  (*(void (**)(_UNKNOWN **))*v14)(v14);
  *(_QWORD *)(v13 + 8) = 0;
  v15 = (uint64_t **)(v13 + 8);
  TargetConfig = AGCLLVMTargetConfig::createTargetConfig(a2);
  (*(void (**)(std::string *__return_ptr))(*TargetConfig + 216))(&v92);
  v86 = a1;
  if ((v17 & 1) == 0
  {
    if (MGGetBoolAnswer())
      Value = AGCEnv::getValue((AGCEnv *)"AGX_EXTRA_LLVM_ATTRIB", v83);
    else
      Value = 0;
    AGCTargetContext::createLLVMCtx(AGCTargetArch)::agx_extra_llvm_attrib = (uint64_t)Value;
  }
  v18 = (const std::string::value_type *)AGCTargetContext::createLLVMCtx(AGCTargetArch)::agx_extra_llvm_attrib;
  if (AGCTargetContext::createLLVMCtx(AGCTargetArch)::agx_extra_llvm_attrib)
  {
    size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v92.__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::append(&v92, ",");
      v18 = (const std::string::value_type *)AGCTargetContext::createLLVMCtx(AGCTargetArch)::agx_extra_llvm_attrib;
    }
    std::string::append(&v92, v18);
  }
  if (a2 <= 196615)
  {
    switch(a2)
    {
      case 65542:
      case 65543:
        v20 = "g9p-a0";
        goto LABEL_66;
      case 65545:
        v20 = "g11p-a0";
        goto LABEL_66;
      case 65546:
        v20 = "g11m-a0";
        goto LABEL_66;
      case 65547:
      case 65559:
        v20 = "g11g-a0";
        goto LABEL_66;
      case 65548:
        v20 = "g12p-a0";
        goto LABEL_66;
      case 65550:
        v20 = "g13p-a0";
        goto LABEL_66;
      case 65552:
        v20 = "g13g-a0";
        goto LABEL_66;
      case 65553:
        goto LABEL_29;
      case 65554:
        goto LABEL_36;
      case 65555:
        goto LABEL_34;
      case 65556:
        v20 = "g14c-a0";
        goto LABEL_66;
      case 65557:
        v20 = "g14d-a0";
        goto LABEL_66;
      case 65560:
        v20 = "g15g-a0";
        goto LABEL_66;
      case 65561:
        v20 = "g13s-a0";
        goto LABEL_66;
      case 65562:
        v20 = "g13c-a0";
        goto LABEL_66;
      case 65563:
        v20 = "g13d-a0";
        goto LABEL_66;
      case 65567:
        v20 = "g16p-a0";
        goto LABEL_66;
      case 65568:
        v20 = "g16g-a0";
        goto LABEL_66;
      case 65570:
        v20 = "g17p-a0";
        goto LABEL_66;
      default:
        goto LABEL_93;
    }
  }
  if (a2 <= 262174)
  {
    switch(a2)
    {
      case 196616:
        v20 = "g10p-b0";
        goto LABEL_66;
      case 196617:
        v20 = "g11p-b0";
        goto LABEL_66;
      case 196618:
        v20 = "g11m-b0";
        goto LABEL_66;
      case 196620:
        v20 = "g12p-b0";
        goto LABEL_66;
      case 196622:
        v20 = "g13p-b0";
        goto LABEL_66;
      case 196624:
        v20 = "g13g-b0";
        goto LABEL_66;
      case 196625:
      case 196630:
LABEL_29:
        v20 = "g14p";
        goto LABEL_66;
      case 196626:
LABEL_36:
        v20 = "g14g";
        goto LABEL_66;
      case 196627:
      case 196628:
LABEL_34:
        v20 = "g14s";
        goto LABEL_66;
      case 196629:
        v20 = "g14d";
        goto LABEL_66;
      case 196632:
        v20 = "g15g-b0";
        goto LABEL_66;
      case 196633:
        v20 = "g13s-b0";
        goto LABEL_66;
      case 196634:
        v20 = "g13c-b0";
        goto LABEL_66;
      case 196635:
        v20 = "g13d-b0";
        goto LABEL_66;
      case 196639:
        v20 = "g16p-b0";
        goto LABEL_66;
      case 196640:
        v20 = "g16g-b0";
        goto LABEL_66;
      default:
        goto LABEL_93;
    }
  }
  switch(a2)
  {
    case 262175:
      v20 = "g16p-b1";
      goto LABEL_66;
    case 327684:
      v20 = "g5p-b0";
      goto LABEL_66;
    case 327704:
      v20 = "g15g-c0";
LABEL_66:
      std::string::basic_string[abi:nn180100]<0>(__p, v20);
      goto LABEL_67;
  }
LABEL_93:
  std::to_string((std::string *)__dst, a2);
  v32 = std::string::insert((std::string *)__dst, 0, "agc-target-");
  v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v94 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
LABEL_67:
  llvm::AGX::AGXCompiler::create();
  if (SHIBYTE(v94) < 0)
    operator delete(__p[0]);
  v90[8] = 1;
  v21 = (unint64_t)&v91;
  if ((llvm::AGX::AGXCompiler::isValid((llvm::AGX::AGXCompiler *)&v91) & 1) != 0)
  {
    v85 = (uint64_t)TargetConfig;
    llvm::AGX::AGXCompiler::AGXCompiler();
    LastDiagnostics = (llvm *)llvm::AGX::AGXCompiler::getLastDiagnostics((llvm::AGX::AGXCompiler *)v90);
    v24 = *(_QWORD *)&__dst[8];
    for (j = *(_QWORD *)__dst; j != v24; j += 8)
    {
      llvm::errs(LastDiagnostics);
      LastDiagnostics = (llvm *)llvm::AGX::operator<<();
      v25 = (_BYTE *)*((_QWORD *)LastDiagnostics + 4);
      if (*((_BYTE **)LastDiagnostics + 3) == v25)
      {
        LastDiagnostics = (llvm *)llvm::raw_ostream::write(LastDiagnostics, "\n");
      }
      else
      {
        *v25 = 10;
        ++*((_QWORD *)LastDiagnostics + 4);
      }
    }
    __p[0] = __dst;
    std::vector<std::unique_ptr<llvm::AGX::Diagnostic>>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
    __p[0] = 0;
    __p[1] = 0;
    v94 = 0;
    if (a2 <= 262174)
    {
      v26 = v86;
      v15 = (uint64_t **)(v13 + 8);
      switch(a2)
      {
        case 196616:
          v27 = "AGXMetalA11";
          goto LABEL_112;
        case 196617:
          v27 = "AGXMetalA12";
          goto LABEL_112;
        case 196618:
          v27 = "AGXMetalS4";
          goto LABEL_112;
        case 196619:
        case 196621:
        case 196623:
        case 196631:
        case 196636:
        case 196637:
        case 196638:
          goto LABEL_220;
        case 196620:
          v27 = "AGXMetalA13";
          goto LABEL_112;
        case 196622:
          v27 = "AGXMetalA14";
          goto LABEL_112;
        case 196624:
          v27 = "AGXMetal13_3";
          goto LABEL_112;
        case 196625:
          v27 = "AGXMetalG14";
          goto LABEL_112;
        case 196626:
LABEL_96:
          v27 = "AGXMetalG14G";
          goto LABEL_112;
        case 196627:
        case 196628:
        case 196629:
LABEL_91:
          v27 = "AGXMetalG14X";
          goto LABEL_112;
        case 196630:
          v27 = "AGXMetalG15";
          goto LABEL_112;
        case 196632:
          v27 = "AGXMetalG15G_B0";
          goto LABEL_112;
        case 196633:
        case 196634:
        case 196635:
LABEL_92:
          v27 = "AGXMetalG13X";
          goto LABEL_112;
        case 196639:
          goto LABEL_88;
        case 196640:
          v27 = "AGXMetalG16G_B0";
          goto LABEL_112;
        default:
          v26 = v86;
          v15 = (uint64_t **)(v13 + 8);
          switch(a2)
          {
            case 65542:
            case 65543:
              v27 = "AGXMetalA10";
              goto LABEL_112;
            case 65550:
              v27 = "AGXMetalG13_A0";
              goto LABEL_112;
            case 65554:
              goto LABEL_96;
            case 65555:
            case 65556:
            case 65557:
              goto LABEL_91;
            case 65560:
              v27 = "AGXMetalG15G_A0";
              goto LABEL_112;
            case 65561:
              v27 = "AGXMetalG13S_A0";
              goto LABEL_112;
            case 65562:
            case 65563:
              goto LABEL_92;
            case 65567:
              v27 = "AGXMetalG16P_A0";
              goto LABEL_112;
            case 65568:
              v27 = "AGXMetalG16G_A0";
              goto LABEL_112;
            case 65570:
              v27 = "AGXMetalG17P";
              goto LABEL_112;
            default:
              goto LABEL_220;
          }
      }
    }
    v26 = v86;
    v15 = (uint64_t **)(v13 + 8);
    switch(a2)
    {
      case 262175:
LABEL_88:
        v27 = "AGXMetalG16P_B0";
        break;
      case 327684:
        v27 = "AGXMetalA9";
        break;
      case 327704:
        v27 = "AGXMetalG15G_C0";
        break;
      default:
LABEL_220:
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "AGC: %s:%d:%s: !!! Unsupported AGCTargetArch\n", "agc_target.cpp", 520, "static std::string AGCTarget::GetRuntimeLibraryPath(AGCTargetArch)");
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__dst = 136315650;
          *(_QWORD *)&__dst[4] = "agc_target.cpp";
          *(_WORD *)&__dst[12] = 1024;
          *(_DWORD *)&__dst[14] = 520;
          *(_WORD *)&__dst[18] = 2080;
          *(_QWORD *)&__dst[20] = "static std::string AGCTarget::GetRuntimeLibraryPath(AGCTargetArch)";
          _os_log_error_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "AGC: AGC: %s:%d:%s: !!! Unsupported AGCTargetArch\n", __dst, 0x1Cu);
        }
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__dst = 136315650;
          *(_QWORD *)&__dst[4] = "agc_target.cpp";
          *(_WORD *)&__dst[12] = 1024;
          *(_DWORD *)&__dst[14] = 520;
          *(_WORD *)&__dst[18] = 2080;
          *(_QWORD *)&__dst[20] = "static std::string AGCTarget::GetRuntimeLibraryPath(AGCTargetArch)";
          _os_log_impl(&dword_1C3C54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "AGC: AGC: %s:%d:%s: !!! Unsupported AGCTargetArch\n", __dst, 0x1Cu);
        }
        abort();
    }
LABEL_112:
    MEMORY[0x1CAA2D494](__p, v27);
    std::operator+<char>();
    v34 = std::string::append((std::string *)__dst, ".bundle");
    v89 = *v34;
    v34->__r_.__value_.__r.__words[0] = 0;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    if (SHIBYTE(v94) < 0)
      operator delete(__p[0]);
    v88 = 0;
    (*((void (**)(void **__return_ptr, _UNKNOWN **, unsigned int *))*v14 + 1))(&__src, v14, &v88);
    std::string::basic_string[abi:nn180100](__dst, __src, 4 * v88);
    v35 = operator new();
    llvm::AGX::AGXCompiler::AGXCompiler();
    AGCLLVMCtx::AGCLLVMCtx(v35, v85, (uint64_t)__p, 2, (__int128 *)&v89, (const void **)__dst);
    *(_QWORD *)(v13 + 16) = v35;
    llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)__p);
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
    v36 = __src;
    __src = 0;
    if (v36)
      MEMORY[0x1CAA2D674](v36, 0x1000C8052888210);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)v90);
  }
  else
  {
    llvm::AGX::AGXCompiler::AGXCompiler();
    v28 = (llvm *)llvm::AGX::AGXCompiler::getLastDiagnostics((llvm::AGX::AGXCompiler *)&v89);
    v29 = *(_QWORD *)&__dst[8];
    for (k = *(_QWORD *)__dst; k != v29; k += 8)
    {
      llvm::errs(v28);
      v28 = (llvm *)llvm::AGX::operator<<();
      v31 = (_BYTE *)*((_QWORD *)v28 + 4);
      if (*((_BYTE **)v28 + 3) == v31)
      {
        v28 = (llvm *)llvm::raw_ostream::write(v28, "\n");
      }
      else
      {
        *v31 = 10;
        ++*((_QWORD *)v28 + 4);
      }
    }
    __p[0] = __dst;
    std::vector<std::unique_ptr<llvm::AGX::Diagnostic>>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
    *(_QWORD *)(v13 + 16) = 0;
    llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)&v89);
    v26 = v86;
  }
  llvm::AGX::AGXCompiler::~AGXCompiler((llvm::AGX::AGXCompiler *)&v91);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(v13 + 24) = v13 + 32;
  if (!AGCPrinter)
  {
    v37 = (uint64_t *)operator new();
    *v37 = 0;
    if (MGGetBoolAnswer())
    {
      v39 = (const char *)AGCEnv::getValue((AGCEnv *)"AGC_ENABLE_STATUS_FILE", v38);
      if (v39)
      {
        if (*v39 != 48 && atoi(v39))
          initPrinter(v37, 0);
      }
    }
    std::unique_ptr<AGCTargetPrinter>::reset[abi:nn180100](v15, v37);
    printMessage((char **)*v15, "Running LLVM version %d (and AGC version %d.%d.%d).", v40, v41, v42, v43, v44, v45, 23);
    AGCEnv::getVarValuesString((std::string *)__dst);
    if (__dst[23] >= 0)
      v52 = __dst;
    else
      LOBYTE(v52) = __dst[0];
    printMessage((char **)*v15, "%s", v46, v47, v48, v49, v50, v51, (char)v52);
    AGCPrinter = **v15;
    if ((__dst[23] & 0x80000000) != 0)
      operator delete(*(void **)__dst);
  }
  v53 = *v26;
  v54 = *(_QWORD *)(*v26 + 8);
  if (v54)
  {
    v55 = (uint8x8_t)vcnt_s8((int8x8_t)v54);
    v55.i16[0] = vaddlv_u8(v55);
    if (v55.u32[0] > 1uLL)
    {
      v21 = v6;
      if (v54 <= v6)
        v21 = v6 % v54;
    }
    else
    {
      v21 = ((_DWORD)v54 - 1) & v6;
    }
    v56 = *(uint64_t ***)(*(_QWORD *)v53 + 8 * v21);
    if (v56)
    {
      for (m = *v56; m; m = (uint64_t *)*m)
      {
        v58 = m[1];
        if (v58 == v6)
        {
          if (*((_DWORD *)m + 4) == a2)
            std::default_delete<AGCTargetContext>::operator()[abi:nn180100]((uint64_t **)v13);
        }
        else
        {
          if (v55.u32[0] > 1uLL)
          {
            if (v58 >= v54)
              v58 %= v54;
          }
          else
          {
            v58 &= v54 - 1;
          }
          if (v58 != v21)
            break;
        }
      }
    }
  }
  v2 = (unint64_t)operator new(0x20uLL);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = v6;
  *(_DWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = v13;
  v59 = (float)(unint64_t)(*(_QWORD *)(v53 + 24) + 1);
  v60 = *(float *)(v53 + 32);
  if (!v54 || (float)(v60 * (float)v54) < v59)
  {
    v61 = 1;
    if (v54 >= 3)
      v61 = (v54 & (v54 - 1)) != 0;
    v62 = v61 | (2 * v54);
    v63 = vcvtps_u32_f32(v59 / v60);
    if (v62 <= v63)
      v64 = v63;
    else
      v64 = v62;
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(v53, v64);
    v54 = *(_QWORD *)(v53 + 8);
    if ((v54 & (v54 - 1)) != 0)
    {
      if (v54 <= v6)
        v21 = v6 % v54;
      else
        v21 = v6;
    }
    else
    {
      v21 = ((_DWORD)v54 - 1) & v6;
    }
  }
  v65 = *(_QWORD *)v53;
  v66 = *(unint64_t **)(*(_QWORD *)v53 + 8 * v21);
  if (v66)
  {
    *(_QWORD *)v2 = *v66;
LABEL_173:
    *v66 = v2;
    goto LABEL_174;
  }
  *(_QWORD *)v2 = *(_QWORD *)(v53 + 16);
  *(_QWORD *)(v53 + 16) = v2;
  *(_QWORD *)(v65 + 8 * v21) = v53 + 16;
  if (*(_QWORD *)v2)
  {
    v67 = *(_QWORD *)(*(_QWORD *)v2 + 8);
    if ((v54 & (v54 - 1)) != 0)
    {
      if (v67 >= v54)
        v67 %= v54;
    }
    else
    {
      v67 &= v54 - 1;
    }
    v66 = (unint64_t *)(*(_QWORD *)v53 + 8 * v67);
    goto LABEL_173;
  }
LABEL_174:
  ++*(_QWORD *)(v53 + 24);
  v5 = *v26;
  v7 = *(_QWORD *)(*v26 + 8);
LABEL_175:
  if (v7)
  {
    v68 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v68.i16[0] = vaddlv_u8(v68);
    if (v68.u32[0] > 1uLL)
    {
      v2 = v6;
      if (v7 <= v6)
        v2 = v6 % v7;
    }
    else
    {
      v2 = ((_DWORD)v7 - 1) & v6;
    }
    v69 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v2);
    if (v69)
    {
      v70 = (_QWORD *)*v69;
      if (*v69)
      {
        do
        {
          v71 = v70[1];
          if (v71 == v6)
          {
            if (*((_DWORD *)v70 + 4) == a2)
              return v70[3];
          }
          else
          {
            if (v68.u32[0] > 1uLL)
            {
              if (v71 >= v7)
                v71 %= v7;
            }
            else
            {
              v71 &= v7 - 1;
            }
            if (v71 != v2)
              break;
          }
          v70 = (_QWORD *)*v70;
        }
        while (v70);
      }
    }
  }
  v70 = operator new(0x20uLL);
  v70[1] = v6;
  *((_DWORD *)v70 + 4) = a2;
  v70[3] = 0;
  v72 = (float)(unint64_t)(*(_QWORD *)(v5 + 24) + 1);
  v73 = *(float *)(v5 + 32);
  if (!v7 || (float)(v73 * (float)v7) < v72)
  {
    v74 = 1;
    if (v7 >= 3)
      v74 = (v7 & (v7 - 1)) != 0;
    v75 = v74 | (2 * v7);
    v76 = vcvtps_u32_f32(v72 / v73);
    if (v75 <= v76)
      v77 = v76;
    else
      v77 = v75;
    std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__rehash<true>(v5, v77);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v2 = v6 % v7;
      else
        v2 = v6;
    }
    else
    {
      v2 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v78 = *(_QWORD *)v5;
  v79 = *(_QWORD **)(*(_QWORD *)v5 + 8 * v2);
  if (v79)
  {
    *v70 = *v79;
LABEL_212:
    *v79 = v70;
    goto LABEL_213;
  }
  v80 = *(_QWORD *)(v5 + 16);
  *v70 = v80;
  *(_QWORD *)(v5 + 16) = v70;
  *(_QWORD *)(v78 + 8 * v2) = v5 + 16;
  if (v80)
  {
    v81 = *(_QWORD *)(v80 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v81 >= v7)
        v81 %= v7;
    }
    else
    {
      v81 &= v7 - 1;
    }
    v79 = (_QWORD *)(*(_QWORD *)v5 + 8 * v81);
    goto LABEL_212;
  }
LABEL_213:
  ++*(_QWORD *)(v5 + 24);
  return v70[3];
}

uint64_t AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(uint64_t a1, uint64_t a2, _QWORD *a3, char **a4, AGCError *a5)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  AGCLLVMCtx *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *p_p;
  int v28;
  uint64_t (***v29)(_QWORD);
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (***v36)(_QWORD);
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  std::string *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string::size_type v59;
  void **v60;
  char **v61;
  std::string __p;
  __int16 v64;
  void *v65[2];
  __int128 v66;
  int v67;
  char *v68;
  _BYTE v69[15];
  _QWORD v70[3];
  _QWORD *v71;
  char *v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  mach_absolute_time();
  v16 = *(AGCLLVMCtx **)(a2 + 16);
  if (v16)
  {
    *((_BYTE *)v16 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v16);
    MEMORY[0x1CAA2C330](v69);
    v17 = *(_QWORD *)(a1 + 56);
    if (!v17)
      goto LABEL_22;
    if (*(_QWORD *)(a1 + 72))
      strlen(*(const char **)(a1 + 72));
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    v19 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v19)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v19 + 8))(v19);
    if ((v73 & 1) != 0)
    {
      v51 = v72;
      v72 = 0;
      v68 = v51;
      llvm::toString(&__p, &v68);
      v52 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      v59 = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)v65 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      *(_QWORD *)&v66 = v59;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v66) & 0x80u) == 0)
        v60 = v65;
      else
        v60 = (void **)v65[0];
      AGCError::logError(a5, (char **)v60, v53, v54, v55, v56, v57, v58);
      if (SBYTE7(v66) < 0)
        operator delete(v65[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v68)
        (*(void (**)(char *))(*(_QWORD *)v68 + 8))(v68);
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v72);
      goto LABEL_38;
    }
    v17 = (uint64_t)v72;
    v72 = 0;
    v64 = 260;
    __p.__r_.__value_.__r.__words[0] = v17 + 216;
    MEMORY[0x1CAA2CCA8](v65, &__p);
    if (DWORD2(v66) == 49
      && v67 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v65),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v65), !v20))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v65);
      v28 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v21, v22, v23, v24, v25, v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v28 = 0;
    }
    if (SBYTE7(v66) < 0)
      operator delete(v65[0]);
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v72);
    if (v28)
    {
LABEL_22:
      v29 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, _BYTE *, uint64_t))a1)(a1, v16, v69, v17);
      if (v29)
      {
        v36 = v29;
        if (((**v29)(v29) & 1) == 0)
        {
          if (*((char *)v36 + 31) >= 0)
            v61 = (char **)(v36 + 1);
          else
            v61 = (char **)v36[1];
          AGCError::logError(a5, v61, v37, v38, v39, v40, v41, v42);
          v18 = 0;
          goto LABEL_48;
        }
        __p.__r_.__value_.__r.__words[0] = 0;
        v72 = 0;
        *(_OWORD *)v65 = 0u;
        v66 = 0u;
        v70[0] = &off_1E7ECEFF8;
        v70[1] = a1;
        v71 = v70;
        v18 = ((uint64_t (*)(uint64_t (***)(_QWORD), std::string *, char **, void **, _QWORD *))(*v36)[1])(v36, &__p, &v72, v65, v70);
        v49 = v71;
        if (v71 == v70)
        {
          v50 = 4;
          v49 = v70;
        }
        else
        {
          if (!v71)
            goto LABEL_45;
          v50 = 5;
        }
        (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_45:
        if ((v18 & 1) != 0)
        {
          *a3 = __p.__r_.__value_.__r.__words[0];
          *a4 = v72;
        }
        else
        {
          AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v43, v44, v45, v46, v47, v48);
        }
LABEL_48:
        (*v36)[4](v36);
        goto LABEL_49;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v30, v31, v32, v33, v34, v35);
    }
LABEL_38:
    v18 = 0;
LABEL_49:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v69);
    return v18;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v10, v11, v12, v13, v14, v15);
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream(uint64_t a1)
{
  int *v2;
  int v3;
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;

  v2 = *(int **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v2;
  v3 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  v4 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)v2 >= v4)
  {
    v6 = v4 - (_QWORD)v2;
    v7 = v6 >> 1;
    if ((unint64_t)(v6 >> 1) <= 1)
      v7 = 1;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v8 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v8 = v7;
    v9 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v8);
    v10 = *(char **)(a1 + 16);
    v11 = *(char **)(a1 + 24);
    v13 = &v9[v12];
    *v9 = v3;
    v5 = v9 + 1;
    while (v11 != v10)
    {
      v14 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *--v9 = v14;
    }
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v13;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *v2 = v3;
    v5 = v2 + 1;
  }
  *(_QWORD *)(a1 + 24) = v5;
}

void ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  _DWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  int v14;

  v3 = (char *)a1[3];
  v2 = a1[4];
  if ((unint64_t)v3 >= v2)
  {
    v5 = (char *)a1[2];
    v6 = (v3 - v5) >> 2;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 62)
      abort();
    v8 = v2 - (_QWORD)v5;
    if (v8 >> 1 > v7)
      v7 = v8 >> 1;
    v9 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v10 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v9)
      v10 = v7;
    if (v10)
    {
      v10 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v10);
      v5 = (char *)a1[2];
      v3 = (char *)a1[3];
    }
    else
    {
      v11 = 0;
    }
    v12 = (_DWORD *)(v10 + 4 * v6);
    v13 = v10 + 4 * v11;
    *v12 = 96;
    v4 = v12 + 1;
    while (v3 != v5)
    {
      v14 = *((_DWORD *)v3 - 1);
      v3 -= 4;
      *--v12 = v14;
    }
    a1[2] = v12;
    a1[3] = v4;
    a1[4] = v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_DWORD *)v3 = 96;
    v4 = v3 + 4;
  }
  a1[3] = v4;
}

void llvm::toString(std::string *this, char **a2)
{
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  int64x2_t *v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  int64x2_t v73;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  int64x2_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  int64x2_t v91;
  char *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  __int128 v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  std::string::size_type v105;
  uint64_t v106;
  int v107;
  const std::string::value_type *v108;
  std::string::size_type v109;
  char *v110;
  uint64_t v111;
  int v112;
  const std::string::value_type *v113;
  std::string::size_type v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  void **v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  char *v124;
  __int128 v125;
  char *v126;
  _QWORD *v127;
  char *v128;
  int64x2_t v129;
  unint64_t v130;
  _QWORD *v131;
  void *v132;
  uint64_t v133;
  _QWORD v134[8];

  v134[6] = *MEMORY[0x1E0C80C00];
  v132 = v134;
  v133 = 0x200000000;
  v3 = *a2;
  *a2 = 0;
  v120 = &v132;
  if (!v3)
  {
    v121 = 0;
    goto LABEL_115;
  }
  if (!(*(unsigned int (**)(char *, _QWORD))(*(_QWORD *)v3 + 48))(v3, MEMORY[0x1E0DE1F88]))
  {
    v128 = v3;
    llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v121, &v128, (uint64_t *)&v120);
    if (v128)
      (*(void (**)(char *))(*(_QWORD *)v128 + 8))(v128);
    goto LABEL_115;
  }
  v121 = 0;
  v4 = (uint64_t *)*((_QWORD *)v3 + 1);
  v5 = (uint64_t *)*((_QWORD *)v3 + 2);
  if (v4 == v5)
    goto LABEL_111;
  v117 = v3;
  v6 = 0;
  v7 = MEMORY[0x1E0DE1F88];
  v8 = v121;
  v118 = (uint64_t *)*((_QWORD *)v3 + 2);
  v119 = MEMORY[0x1E0DE2B00] + 16;
  do
  {
    v9 = *v4;
    *v4 = 0;
    v122 = v9;
    llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v123, &v122, (uint64_t *)&v120);
    v10 = v123;
    if (v6)
    {
      if (!v123)
        goto LABEL_89;
      v11 = (*(uint64_t (**)(_QWORD *, uint64_t))(*v6 + 48))(v6, v7);
      v10 = v123;
      if (v11)
      {
        if (v123 && (*(unsigned int (**)(_QWORD *, uint64_t))(*v123 + 48))(v123, v7))
        {
          v123 = 0;
          v12 = (uint64_t *)v10[1];
          v13 = (uint64_t *)v10[2];
          if (v12 != v13)
          {
            v14 = v6 + 3;
            v15 = (_QWORD *)v6[2];
            do
            {
              if ((unint64_t)v15 >= *v14)
              {
                v17 = v6[1];
                v18 = ((uint64_t)v15 - v17) >> 3;
                if ((unint64_t)(v18 + 1) >> 61)
                  goto LABEL_145;
                v19 = *v14 - v17;
                v20 = v19 >> 2;
                if (v19 >> 2 <= (unint64_t)(v18 + 1))
                  v20 = v18 + 1;
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
                  v21 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v21 = v20;
                v131 = v6 + 3;
                if (v21)
                  v21 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v21);
                else
                  v22 = 0;
                v23 = (_QWORD *)(v21 + 8 * v18);
                v24 = v21 + 8 * v22;
                v130 = v24;
                v25 = *v12;
                *v12 = 0;
                *v23 = v25;
                v15 = v23 + 1;
                v129.i64[1] = (uint64_t)(v23 + 1);
                v27 = (_QWORD *)v6[1];
                v26 = (_QWORD *)v6[2];
                if (v26 == v27)
                {
                  v29 = vdupq_n_s64((unint64_t)v26);
                }
                else
                {
                  do
                  {
                    v28 = *--v26;
                    *v26 = 0;
                    *--v23 = v28;
                  }
                  while (v26 != v27);
                  v29 = *(int64x2_t *)(v6 + 1);
                  v15 = (_QWORD *)v129.i64[1];
                  v24 = v130;
                }
                v6[1] = v23;
                v6[2] = v15;
                v129 = v29;
                v30 = v6[3];
                v6[3] = v24;
                v130 = v30;
                v128 = (char *)v29.i64[0];
                std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v128);
              }
              else
              {
                v16 = *v12;
                *v12 = 0;
                *v15++ = v16;
              }
              v6[2] = v15;
              ++v12;
            }
            while (v12 != v13);
          }
          (*(void (**)(_QWORD *))(*v10 + 8))(v10);
          v7 = MEMORY[0x1E0DE1F88];
        }
        else
        {
          v123 = 0;
          v43 = v6[3];
          v44 = (_QWORD *)v6[2];
          if ((unint64_t)v44 >= v43)
          {
            v51 = v6[1];
            v52 = ((uint64_t)v44 - v51) >> 3;
            if ((unint64_t)(v52 + 1) >> 61)
              goto LABEL_145;
            v53 = v43 - v51;
            v54 = v53 >> 2;
            if (v53 >> 2 <= (unint64_t)(v52 + 1))
              v54 = v52 + 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            v131 = v6 + 3;
            if (v55)
              v55 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v55);
            else
              v56 = 0;
            v68 = (_QWORD *)(v55 + 8 * v52);
            v69 = v55 + 8 * v56;
            v130 = v69;
            *v68 = v10;
            v45 = v68 + 1;
            v129.i64[1] = (uint64_t)(v68 + 1);
            v71 = (_QWORD *)v6[1];
            v70 = (_QWORD *)v6[2];
            if (v70 == v71)
            {
              v73 = vdupq_n_s64((unint64_t)v70);
            }
            else
            {
              do
              {
                v72 = *--v70;
                *v70 = 0;
                *--v68 = v72;
              }
              while (v70 != v71);
              v73 = *(int64x2_t *)(v6 + 1);
              v45 = (_QWORD *)v129.i64[1];
              v69 = v130;
            }
            v6[1] = v68;
            v6[2] = v45;
            v129 = v73;
            v80 = v6[3];
            v6[3] = v69;
            v130 = v80;
            v128 = (char *)v73.i64[0];
            std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v128);
          }
          else
          {
            *v44 = v10;
            v45 = v44 + 1;
          }
          v6[2] = v45;
        }
LABEL_87:
        if (v123)
          (*(void (**)(_QWORD *))(*v123 + 8))(v123);
LABEL_89:
        v8 = v6;
        goto LABEL_107;
      }
      if (!v123 || !(*(unsigned int (**)(_QWORD *, uint64_t))(*v123 + 48))(v123, v7))
      {
        v46 = (_QWORD *)operator new();
        v123 = 0;
        v46[1] = 0;
        v47 = (int64x2_t *)(v46 + 1);
        *v46 = v119;
        v46[2] = 0;
        v46[3] = 0;
        v131 = v46 + 3;
        v48 = operator new(8uLL);
        *v48 = v6;
        v46[1] = v48;
        v46[2] = v48 + 1;
        v46[3] = v48 + 1;
        v130 = 0;
        v128 = 0;
        v129 = 0uLL;
        std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v128);
        v49 = v46[3];
        v46[2] = v48 + 1;
        if ((unint64_t)(v48 + 1) >= v49)
        {
          v57 = ((uint64_t)v48 - v47->i64[0] + 8) >> 3;
          if ((unint64_t)(v57 + 1) >> 61)
            goto LABEL_145;
          v58 = v49 - v47->i64[0];
          v59 = v58 >> 2;
          if (v58 >> 2 <= (unint64_t)(v57 + 1))
            v59 = v57 + 1;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
            v60 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v60 = v59;
          v131 = v46 + 3;
          v5 = v118;
          v7 = MEMORY[0x1E0DE1F88];
          if (v60)
            v60 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v60);
          else
            v61 = 0;
          v74 = (_QWORD *)(v60 + 8 * v57);
          v75 = v60 + 8 * v61;
          v130 = v75;
          *v74 = v10;
          v50 = v74 + 1;
          v129.i64[1] = (uint64_t)(v74 + 1);
          v77 = (_QWORD *)v46[1];
          v76 = (_QWORD *)v46[2];
          if (v76 == v77)
          {
            v79 = vdupq_n_s64((unint64_t)v76);
          }
          else
          {
            do
            {
              v78 = *--v76;
              *v76 = 0;
              *--v74 = v78;
            }
            while (v76 != v77);
            v79 = *v47;
            v50 = (_QWORD *)v129.i64[1];
            v75 = v130;
          }
          v46[1] = v74;
          v46[2] = v50;
          v129 = v79;
          v81 = v46[3];
          v46[3] = v75;
          v130 = v81;
          v128 = (char *)v79.i64[0];
          std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v128);
        }
        else
        {
          v48[1] = v10;
          v50 = v48 + 2;
          v5 = v118;
          v7 = MEMORY[0x1E0DE1F88];
        }
        v46[2] = v50;
        v6 = v46;
        goto LABEL_87;
      }
      v31 = v10[3];
      v33 = (_QWORD *)v10[1];
      v32 = v10[2];
      if (v32 >= v31)
      {
        v62 = ((uint64_t)(v32 - (_QWORD)v33) >> 3) + 1;
        if (v62 >> 61)
        {
LABEL_145:
          v121 = v8;
          abort();
        }
        v63 = v31 - (_QWORD)v33;
        if (v63 >> 2 > v62)
          v62 = v63 >> 2;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
          v64 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        v127 = v10 + 3;
        if (v64)
        {
          v65 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(v64);
          v124 = v65;
          *(_QWORD *)&v125 = v65;
          *((_QWORD *)&v125 + 1) = v65;
          v126 = &v65[8 * v66];
          v67 = v65;
          if (!v66)
          {
LABEL_92:
            v131 = v127;
            v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::User *>>(1uLL);
            v84 = (uint64_t *)v125;
            v85 = *((_QWORD *)&v125 + 1) - v125;
            if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
            {
              v91 = vdupq_n_s64(v125);
              v87 = v82;
            }
            else
            {
              v86 = v85 >> 3;
              v87 = &v82[v85 & 0xFFFFFFFFFFFFFFF8];
              v88 = 8 * v86;
              v89 = v82;
              do
              {
                v90 = *v84;
                *v84++ = 0;
                *(_QWORD *)v89 = v90;
                v89 += 8;
                v88 -= 8;
              }
              while (v88);
              v91 = (int64x2_t)v125;
            }
            v92 = v126;
            v128 = v124;
            v124 = v82;
            *(_QWORD *)&v125 = v82;
            v129 = v91;
            *((_QWORD *)&v125 + 1) = v87;
            v126 = &v82[8 * v83];
            v130 = (unint64_t)v92;
            std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v128);
            v67 = (_QWORD *)*((_QWORD *)&v125 + 1);
            v65 = (char *)v125;
          }
          *v67 = v6;
          v93 = v67 + 1;
          *((_QWORD *)&v125 + 1) = v93;
          v94 = (_QWORD *)v10[1];
          if (v94 != v33)
          {
            v95 = v33;
            do
            {
              v96 = *--v95;
              *v95 = 0;
              *((_QWORD *)v65 - 1) = v96;
              v65 -= 8;
            }
            while (v95 != v94);
            v93 = (_QWORD *)*((_QWORD *)&v125 + 1);
          }
          *(_QWORD *)&v125 = v65;
          v97 = (_QWORD *)v10[2];
          if (v97 != v33)
          {
            do
            {
              v98 = *v33;
              *v33++ = 0;
              *v93++ = v98;
            }
            while (v33 != v97);
            v65 = (char *)v125;
          }
          *((_QWORD *)&v125 + 1) = v93;
          v99 = *(_OWORD *)(v10 + 1);
          v10[1] = v65;
          v10[2] = *((_QWORD *)&v125 + 1);
          v125 = v99;
          v100 = (char *)v10[3];
          v10[3] = v126;
          v126 = v100;
          v124 = (char *)v99;
          std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer((uint64_t)&v124);
          goto LABEL_106;
        }
        v124 = 0;
        v125 = 0uLL;
        v126 = 0;
        goto LABEL_92;
      }
      if (v33 == (_QWORD *)v32)
      {
        *v33 = v6;
        v10[2] = v33 + 1;
      }
      else
      {
        v34 = (uint64_t *)(v32 - 8);
        v35 = (_QWORD *)v10[2];
        v36 = (uint64_t *)(v32 - 8);
        if (v32 >= 8)
        {
          do
          {
            v37 = *v36;
            *v36++ = 0;
            *v35++ = v37;
          }
          while ((unint64_t)v36 < v32);
        }
        v10[2] = v35;
        if ((_QWORD *)v32 != v33 + 1)
        {
          v38 = (uint64_t)(v32 - (_QWORD)(v33 + 1)) >> 3;
          v39 = v33 - 1;
          do
          {
            v40 = v39[v38];
            v39[v38] = 0;
            v41 = *v34;
            *v34 = v40;
            if (v41)
              (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
            --v34;
            --v38;
          }
          while (v38 * 8);
        }
        v42 = *v33;
        *v33 = v6;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        v7 = MEMORY[0x1E0DE1F88];
      }
    }
LABEL_106:
    v123 = 0;
    v8 = v10;
LABEL_107:
    v101 = v122;
    v122 = 0;
    if (v101)
      (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
    ++v4;
    v6 = v8;
  }
  while (v4 != v5);
  v121 = v8;
  v3 = v117;
LABEL_111:
  (*(void (**)(char *))(*(_QWORD *)v3 + 8))(v3);
LABEL_115:
  v102 = v132;
  v103 = v133;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  if ((_DWORD)v103)
  {
    v104 = 0;
    v105 = v103 - 1;
    do
    {
      if (SHIBYTE(v102[v104 + 2]) < 0)
        v106 = v102[v104 + 1];
      else
        v106 = HIBYTE(v102[v104 + 2]);
      v105 += v106;
      v104 += 3;
    }
    while (3 * v103 != v104);
    std::string::reserve(this, v105);
    v107 = *((char *)v102 + 23);
    v108 = v107 >= 0 ? (const std::string::value_type *)v102 : (const std::string::value_type *)*v102;
    v109 = v107 >= 0 ? *((unsigned __int8 *)v102 + 23) : v102[1];
    std::string::append(this, v108, v109);
    if ((_DWORD)v103 != 1)
    {
      v110 = (char *)(v102 + 3);
      v111 = 24 * v103 - 24;
      do
      {
        std::string::append(this, "\n", 1uLL);
        v112 = v110[23];
        if (v112 >= 0)
          v113 = v110;
        else
          v113 = *(const std::string::value_type **)v110;
        if (v112 >= 0)
          v114 = v110[23];
        else
          v114 = *((_QWORD *)v110 + 1);
        std::string::append(this, v113, v114);
        v110 += 24;
        v111 -= 24;
      }
      while (v111);
    }
  }
  v115 = (char *)v132;
  if ((_DWORD)v133)
  {
    v116 = 24 * v133;
    do
    {
      if (v115[v116 - 1] < 0)
        operator delete(*(void **)&v115[v116 - 24]);
      v116 -= 24;
    }
    while (v116);
    v115 = (char *)v132;
  }
  if (v115 != (char *)v134)
    free(v115);
}

void std::__function::__func<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECEFF8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECEFF8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

void AGCOSVersion::AGCOSVersion(AGCOSVersion *this, const llvm::Triple *a2)
{
  uint64_t OSVersion;
  int v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  int v9;

  *(_DWORD *)this = 0;
  OSVersion = llvm::Triple::getOSVersion(a2);
  v6 = ((unint64_t)OSVersion >> 28) & 0xFFF0;
  if (v5 < 0)
    v7 = v5;
  else
    v7 = 0;
  if (OSVersion >= 0)
    LOWORD(v6) = 0;
  *((_WORD *)this + 2) = v7 | ((_WORD)OSVersion << 8) | v6;
  v8 = *((_DWORD *)a2 + 9);
  if (v8 <= 27)
  {
    if (v8 == 7)
    {
      v9 = 2;
    }
    else
    {
      if (v8 != 11)
        return;
      v9 = 1;
    }
  }
  else
  {
    switch(v8)
    {
      case 33:
        v9 = 11;
        break;
      case 29:
        v9 = 4;
        break;
      case 28:
        v9 = 3;
        break;
      default:
        return;
    }
  }
  *(_DWORD *)this = v9;
}

uint64_t llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  BOOL v14;
  char *v15;
  void *__p[2];
  char v17;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 48))(*a2, MEMORY[0x1E0DE0AA8]);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v8 = *a3;
    v9 = __p;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 24))(__p, v7);
    v10 = *(_DWORD *)(v8 + 8);
    v11 = *(_QWORD *)v8;
    if (v10 >= *(_DWORD *)(v8 + 12))
    {
      v14 = v11 + 24 * v10 > (unint64_t)__p;
      if (v11 <= (unint64_t)__p && v14)
      {
        v15 = (char *)__p - v11;
        llvm::SmallVectorTemplateBase<std::string,false>::grow(v8);
        v11 = *(_QWORD *)v8;
        v9 = (void **)&v15[*(_QWORD *)v8];
      }
      else
      {
        llvm::SmallVectorTemplateBase<std::string,false>::grow(v8);
        v11 = *(_QWORD *)v8;
        v9 = __p;
      }
    }
    v12 = v11 + 24 * *(unsigned int *)(v8 + 8);
    v13 = *(_OWORD *)v9;
    *(_QWORD *)(v12 + 16) = v9[2];
    *(_OWORD *)v12 = v13;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    ++*(_DWORD *)(v8 + 8);
    if (v17 < 0)
      operator delete(__p[0]);
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t AGCDylib::createLLVMObject(AGCDylib *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::LLVMContext **a4)
{
  uint64_t v7;
  _QWORD *v8;

  v7 = operator new();
  v8 = (_QWORD *)AGCLLVMUserDynamicLibrary::AGCLLVMUserDynamicLibrary(v7, a2, a4, (uint64_t)this + 48);
  return (uint64_t)v8 + *(_QWORD *)(*v8 - 24);
}

void AGX::DynamicLibraryKey::serialize(AGX::DynamicLibraryKey *this, const void **a2, unint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;

  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  v6 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 2);
  v7 = (unsigned int *)(*((_QWORD *)this + 2) + v6);
  *v7 = ((*((_DWORD *)this + 6) - *((_QWORD *)this + 2)) >> 2 << 8) | 0x4F;
  v7[1] = *((_DWORD *)this + 10);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((_QWORD *)this + 2);
  *a3 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
}

uint64_t AIRNTEmitExecutableImage(uint64_t *a1, void *a2, const char *a3, int a4, int a5, AGCTarget *this, int *a7, int a8, _QWORD *a9, char **a10, AGCError *a11)
{
  unsigned int v12;
  int v16;
  unsigned __int16 v17;
  uint64_t TargetContext;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  std::string *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  void **v37;
  uint64_t v38;
  _UNKNOWN **v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string::size_type v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  int v57;
  uint64_t (***LLVMObject)(_QWORD);
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (***v65)(_QWORD);
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  std::string *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::string::size_type v89;
  char **v90;
  char **v91;
  void *__p[2];
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  int v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  const char *v102;
  void *v103;
  std::string v104;
  __int16 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  char *v109;
  _BYTE v110[15];
  _QWORD v111[3];
  _QWORD *v112;
  char *v113;
  char v114;
  uint64_t v115;

  v12 = this;
  v115 = *MEMORY[0x1E0C80C00];
  v16 = AGCTarget::CPUSubtypeToTargetArch(this, a2, a3);
  if (!v16)
  {
    std::to_string((std::string *)&v106, v12);
    v29 = std::string::insert((std::string *)&v106, 0, "Unknown AGC target for CPU subtype: ");
    v36 = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v93 = v36;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (v93 >= 0)
      v37 = __p;
    else
      v37 = (void **)__p[0];
    AGCError::logError(a11, (char **)v37, v30, v31, v32, v33, v34, v35);
    if (SHIBYTE(v93) < 0)
      operator delete(__p[0]);
    if (SBYTE7(v107) < 0)
      operator delete((void *)v106);
    return 0;
  }
  v17 = v16;
  TargetContext = AGCNativeTranslator::getTargetContext(a1, v16);
  v25 = (unsigned __int16 *)((char *)a7 - *a7);
  if (*v25 < 9u || (v26 = v25[4]) == 0)
  {
LABEL_6:
    AGCError::logError(a11, (char **)"Unsupported function script.", v19, v20, v21, v22, v23, v24);
    return 0;
  }
  v27 = TargetContext;
  v28 = *((unsigned __int8 *)a7 + v26);
  if (v28 != 6)
  {
    if (v28 != 5)
      goto LABEL_6;
    goto LABEL_17;
  }
  v40 = AGCTarget::Get(v17);
  if ((*((unsigned int (**)(_UNKNOWN **))*v40 + 3))(v40))
  {
LABEL_17:
    LODWORD(v93) = 8;
    v95 = 0;
    v96 = 0;
    v94 = 0;
    v97 = 512;
    v98 = a2;
    v99 = (void *)a3;
    v100 = &unk_1C3E4D9BB;
    __p[0] = &off_1E7ECE710;
    __p[1] = off_1E7ECE770;
    v38 = AGCModule<AGX::DynamicLibraryKey>::compileLLVMObject((uint64_t)__p, v27, a9, a10, a11);
    __p[0] = &unk_1E7ECE740;
    __p[1] = off_1E7ECE7B0;
    goto LABEL_68;
  }
  LODWORD(v93) = 7;
  v95 = 0;
  v96 = 0;
  v94 = 0;
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = a2;
  v102 = a3;
  v103 = &unk_1C3E4D9BB;
  __p[0] = &off_1E7ECE7F0;
  __p[1] = off_1E7ECE850;
  mach_absolute_time();
  v38 = *(_QWORD *)(v27 + 16);
  if (v38)
  {
    *(_BYTE *)(v38 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v38);
    MEMORY[0x1CAA2C330](v110);
    if (a2)
    {
      llvm::MemoryBuffer::getMemBuffer();
      llvm::MemoryBufferRef::MemoryBufferRef();
      llvm::parseBitcodeFile();
      v47 = v104.__r_.__value_.__r.__words[0];
      v104.__r_.__value_.__r.__words[0] = 0;
      if (v47)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v47 + 8))(v47);
      if ((v114 & 1) != 0)
      {
        v81 = v113;
        v113 = 0;
        v109 = v81;
        llvm::toString(&v104, &v109);
        v82 = std::string::insert(&v104, 0, "Error parsing bitcode file: ");
        v89 = v82->__r_.__value_.__r.__words[2];
        v106 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
        *(_QWORD *)&v107 = v89;
        v82->__r_.__value_.__l.__size_ = 0;
        v82->__r_.__value_.__r.__words[2] = 0;
        v82->__r_.__value_.__r.__words[0] = 0;
        if ((SBYTE7(v107) & 0x80u) == 0)
          v90 = (char **)&v106;
        else
          v90 = (char **)v106;
        AGCError::logError(a11, v90, v83, v84, v85, v86, v87, v88);
        if (SBYTE7(v107) < 0)
          operator delete((void *)v106);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (v109)
          (*(void (**)(char *))(*(_QWORD *)v109 + 8))(v109);
        llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v113);
        goto LABEL_54;
      }
      v48 = (uint64_t)v113;
      v113 = 0;
      v105 = 260;
      v104.__r_.__value_.__r.__words[0] = v48 + 216;
      MEMORY[0x1CAA2CCA8](&v106, &v104);
      if (DWORD2(v107) == 49
        && v108 == 1
        && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&v104, (const llvm::Triple *)&v106),
            pluginSupportsOSVersion((uint64_t)v104.__r_.__value_.__l.__data_))
        && (llvm::Triple::getEnvironmentName((llvm::Triple *)&v106), !v49))
      {
        AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v104, (const llvm::Triple *)&v106);
        v57 = 1;
      }
      else
      {
        std::operator+<char>();
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v56 = &v104;
        else
          v56 = (std::string *)v104.__r_.__value_.__r.__words[0];
        AGCError::logError(a11, &v56->__r_.__value_.__l.__data_, v50, v51, v52, v53, v54, v55);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        v57 = 0;
      }
      if (SBYTE7(v107) < 0)
        operator delete((void *)v106);
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v113);
      if (!v57)
      {
LABEL_54:
        v38 = 0;
        goto LABEL_65;
      }
    }
    LLVMObject = (uint64_t (***)(_QWORD))AGCIntersectionFunction::createLLVMObject((uint64_t)__p, v38);
    if (!LLVMObject)
    {
      AGCError::logError(a11, (char **)"Cannot create AGC LLVM object.", v59, v60, v61, v62, v63, v64);
      goto LABEL_54;
    }
    v65 = LLVMObject;
    if (((**LLVMObject)(LLVMObject) & 1) == 0)
    {
      if (*((char *)v65 + 31) >= 0)
        v91 = (char **)(v65 + 1);
      else
        v91 = (char **)v65[1];
      AGCError::logError(a11, v91, v66, v67, v68, v69, v70, v71);
      v38 = 0;
      goto LABEL_64;
    }
    v104.__r_.__value_.__r.__words[0] = 0;
    v106 = 0u;
    v107 = 0u;
    v111[0] = &off_1E7ECF040;
    v111[1] = __p;
    v112 = v111;
    v113 = 0;
    v38 = ((uint64_t (*)(uint64_t (***)(_QWORD), std::string *, char **, __int128 *, _QWORD *))(*v65)[1])(v65, &v104, &v113, &v106, v111);
    v79 = v112;
    if (v112 == v111)
    {
      v80 = 4;
      v79 = v111;
    }
    else
    {
      if (!v112)
        goto LABEL_61;
      v80 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, const char *))(*v79 + 8 * v80))(v79, v72, v73);
LABEL_61:
    if ((v38 & 1) != 0)
    {
      *a9 = v104.__r_.__value_.__r.__words[0];
      *a10 = v113;
    }
    else
    {
      AGCError::logError(a11, (char **)"Error occurred composing compiler reply.", v73, v74, v75, v76, v77, v78);
    }
LABEL_64:
    (*v65)[4](v65);
LABEL_65:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v110);
    __p[0] = &unk_1E7ECE820;
    __p[1] = off_1E7ECE850;
    if (v98)
    {
      v99 = v98;
      operator delete(v98);
    }
    goto LABEL_67;
  }
  AGCError::logError(a11, (char **)"Failed to initialize AGX backend for target architecture.", v41, v42, v43, v44, v45, v46);
  __p[0] = &unk_1E7ECE820;
  __p[1] = off_1E7ECE850;
LABEL_67:
  __p[1] = off_1E7ECE890;
LABEL_68:
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  return v38;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void std::__function::__func<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECF040;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECF040;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::UserIntersectionProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t AGCIntersectionFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 208))(*(_QWORD *)(a2 + 32));
}

void AGX::Impl::UserIntersectionProgramKey::serialize(AGX::Impl::UserIntersectionProgramKey *this, const void **a2, unint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;

  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  v6 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 2);
  v7 = (unsigned int *)(*((_QWORD *)this + 2) + v6);
  *v7 = ((*((_DWORD *)this + 6) - *((_QWORD *)this + 2)) >> 2 << 8) | 0x54;
  v7[1] = *((_DWORD *)this + 10);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((_QWORD *)this + 2);
  *a3 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
}

uint64_t AIRNTEmitBuiltinExecutableImage(uint64_t *a1, unsigned int a2, AGCTarget *this, int *a4, uint64_t a5, _QWORD *a6, _QWORD *a7, AGCError *a8)
{
  unsigned int v12;
  int v14;
  int v15;
  uint64_t TargetContext;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unsigned int v25;
  BOOL v26;
  std::string *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  void **v35;
  char *v36;
  BOOL v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  int v41;
  int64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v47;
  _BYTE *v48;
  int64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (***v70)();
  uint64_t v71;
  char **v72;
  _BYTE *v73;
  _BYTE *v74;
  int64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (***v96)();
  uint64_t v97;
  char **v98;
  void *v99;
  uint64_t (**v100)();
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (***LLVMObject)(_QWORD);
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (***v114)(_QWORD);
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t (***v127)();
  uint64_t v128;
  char **v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE v134[22];
  void *__p[2];
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[22];
  uint64_t v145;
  uint64_t v146;
  void *v147;
  std::string v148;
  _BYTE *v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _BYTE v155[22];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  char v163[8];
  uint64_t (**v164)();
  void **v165;
  uint64_t (***v166)();
  uint64_t v167;

  v12 = this;
  v167 = *MEMORY[0x1E0C80C00];
  v14 = AGCTarget::CPUSubtypeToTargetArch(this, a2, (const char *)this);
  if (!v14)
  {
    std::to_string(&v148, v12);
    v27 = std::string::insert(&v148, 0, "Unknown AGC target for CPU subtype: ");
    v34 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v136 = v34;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v136 >= 0)
      v35 = __p;
    else
      v35 = (void **)__p[0];
    AGCError::logError(a8, (char **)v35, v28, v29, v30, v31, v32, v33);
    if (SHIBYTE(v136) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v148.__r_.__value_.__l.__data_);
    return 0;
  }
  v15 = v14;
  TargetContext = AGCNativeTranslator::getTargetContext(a1, v14);
  v17 = *(_QWORD *)AGCNativeTranslator::getTargetContext(a1, v15);
  if (!v17)
  {
    v36 = "AGX key factory does not exist for target architecture.";
LABEL_35:
    AGCError::logError(a8, (char **)v36, v18, v19, v20, v21, v22, v23);
    return 0;
  }
  v24 = (unsigned __int16 *)((char *)a4 - *a4);
  v25 = *v24;
  if (v25 < 9 || !v24[4])
    goto LABEL_34;
  v26 = v25 >= 0xB && *((_BYTE *)a4 + v24[4]) == 1;
  if (!v26 || !v24[5])
  {
    if (v24[4])
    {
      v37 = v25 >= 0xB && *((_BYTE *)a4 + v24[4]) == 2;
      if (!v37 || !v24[5])
      {
        if (v24[4])
        {
          if (v25 >= 0xB && *((_BYTE *)a4 + v24[4]) == 3)
          {
            v38 = v24[5];
            if (v38)
            {
              (*(void (**)(std::string *__return_ptr, uint64_t, char *))(*(_QWORD *)v17 + 80))(&v148, v17, (char *)a4 + v38 + *(unsigned int *)((char *)a4 + v38));
              v40 = (_BYTE *)v148.__r_.__value_.__r.__words[2];
              v39 = v149;
              v149 = 0;
              v150 = 0;
              v148.__r_.__value_.__r.__words[2] = 0;
              v41 = v151;
              LODWORD(v136) = v148.__r_.__value_.__r.__words[1];
              v138 = 0;
              v139 = 0;
              v137 = 0;
              v42 = v39 - v40;
              if (v39 == v40)
              {
                v43 = 0;
              }
              else
              {
                if (v39 - v40 < 0)
                  goto LABEL_111;
                v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v42 >> 2);
                v137 = v43;
                v139 = &v43[4 * v44];
                memmove(v43, v40, v42);
                v138 = &v43[v42];
              }
              LODWORD(v140) = v41;
              *((_QWORD *)&v140 + 1) = 0;
              *(_QWORD *)&v141 = 0;
              *((_QWORD *)&v141 + 1) = &unk_1C3E4D9BB;
              __p[0] = &off_1E7ECEA10;
              __p[1] = off_1E7ECFB68;
              if (v40)
                operator delete(v40);
              mach_absolute_time();
              v45 = *(_QWORD *)(TargetContext + 16);
              if (!v45)
              {
                AGCError::logError(a8, (char **)"Failed to initialize AGX backend for target architecture.", v101, v102, v103, v104, v105, v106);
LABEL_106:
                v99 = &unk_1E7ECEA40;
                v100 = off_1E7ECE9D0;
                goto LABEL_107;
              }
              *(_BYTE *)(v45 + 377) = 0;
              AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v45);
              MEMORY[0x1CAA2C330](v163);
              LLVMObject = (uint64_t (***)(_QWORD))AGCBVHBuilderDriverShader::createLLVMObject((uint64_t)__p, v45);
              if (!LLVMObject)
              {
                AGCError::logError(a8, (char **)"Cannot create AGC LLVM object.", v108, v109, v110, v111, v112, v113);
                v45 = 0;
LABEL_105:
                llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v163);
                v43 = v137;
                goto LABEL_106;
              }
              v114 = LLVMObject;
              if (((**LLVMObject)(LLVMObject) & 1) == 0)
              {
                if (*((char *)v114 + 31) >= 0)
                  v129 = (char **)(v114 + 1);
                else
                  v129 = (char **)v114[1];
                AGCError::logError(a8, v129, v115, v116, v117, v118, v119, v120);
                v45 = 0;
                goto LABEL_104;
              }
              v161 = 0;
              v162 = 0;
              v159 = 0u;
              v160 = 0u;
              v164 = &off_1E7ECF118;
              v165 = __p;
              v166 = &v164;
              v45 = ((uint64_t (*)(uint64_t (***)(_QWORD), uint64_t *, uint64_t *, __int128 *, uint64_t (***)()))(*v114)[1])(v114, &v162, &v161, &v159, &v164);
              v127 = v166;
              if (v166 == &v164)
              {
                v128 = 4;
                v127 = &v164;
              }
              else
              {
                if (!v166)
                  goto LABEL_101;
                v128 = 5;
              }
              (*v127)[v128]();
LABEL_101:
              if ((v45 & 1) != 0)
              {
                *a6 = v162;
                *a7 = v161;
              }
              else
              {
                AGCError::logError(a8, (char **)"Error occurred composing compiler reply.", v121, v122, v123, v124, v125, v126);
              }
LABEL_104:
              (*v114)[4](v114);
              goto LABEL_105;
            }
          }
        }
        goto LABEL_34;
      }
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v17 + 72))(&v148);
      v74 = (_BYTE *)v148.__r_.__value_.__r.__words[2];
      v73 = v149;
      v149 = 0;
      v150 = 0;
      v148.__r_.__value_.__r.__words[2] = 0;
      v132 = v153;
      v133 = v154;
      *(_OWORD *)v134 = *(_OWORD *)v155;
      *(_QWORD *)&v134[14] = *(_QWORD *)&v155[14];
      v130 = v151;
      v131 = v152;
      LODWORD(v136) = v148.__r_.__value_.__r.__words[1];
      v137 = 0;
      v138 = 0;
      v139 = 0;
      v75 = v73 - v74;
      if (v73 == v74)
      {
        v43 = 0;
      }
      else
      {
        if (v73 - v74 < 0)
          goto LABEL_111;
        v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v75 >> 2);
        v137 = v43;
        v139 = &v43[4 * v76];
        memmove(v43, v74, v75);
        v138 = &v43[v75];
      }
      v143 = v133;
      *(_OWORD *)v144 = *(_OWORD *)v134;
      *(_QWORD *)&v144[14] = *(_QWORD *)&v134[14];
      v141 = v131;
      v142 = v132;
      v140 = v130;
      v145 = 0;
      v146 = 0;
      v147 = &unk_1C3E4D9BB;
      __p[0] = &off_1E7ECE970;
      __p[1] = off_1E7ECFAE8;
      if (v74)
        operator delete(v74);
      mach_absolute_time();
      v45 = *(_QWORD *)(TargetContext + 16);
      if (!v45)
      {
        AGCError::logError(a8, (char **)"Failed to initialize AGX backend for target architecture.", v77, v78, v79, v80, v81, v82);
LABEL_93:
        v99 = &unk_1E7ECE9A0;
        v100 = off_1E7ECFB28;
        goto LABEL_107;
      }
      *(_BYTE *)(v45 + 377) = 0;
      AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v45);
      MEMORY[0x1CAA2C330](v163);
      v83 = AGCEndOfTileDriverShader::createLLVMObject((AGCEndOfTileDriverShader *)__p, (AGCLLVMCtx *)v45, (llvm::LLVMContext *)v163, 0);
      if (((**(uint64_t (***)(uint64_t))v83)(v83) & 1) == 0)
      {
        if (*(char *)(v83 + 31) >= 0)
          v98 = (char **)(v83 + 8);
        else
          v98 = *(char ***)(v83 + 8);
        AGCError::logError(a8, v98, v84, v85, v86, v87, v88, v89);
        v45 = 0;
        goto LABEL_92;
      }
      v161 = 0;
      v162 = 0;
      v159 = 0u;
      v160 = 0u;
      v164 = &off_1E7ECF0D0;
      v165 = __p;
      v166 = &v164;
      v45 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, __int128 *, uint64_t (***)()))(*(_QWORD *)v83 + 8))(v83, &v162, &v161, &v159, &v164);
      v96 = v166;
      if (v166 == &v164)
      {
        v97 = 4;
        v96 = &v164;
      }
      else
      {
        if (!v166)
          goto LABEL_89;
        v97 = 5;
      }
      (*v96)[v97]();
LABEL_89:
      if ((v45 & 1) != 0)
      {
        *a6 = v162;
        *a7 = v161;
      }
      else
      {
        AGCError::logError(a8, (char **)"Error occurred composing compiler reply.", v90, v91, v92, v93, v94, v95);
      }
LABEL_92:
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 32))(v83);
      llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v163);
      v43 = v137;
      goto LABEL_93;
    }
LABEL_34:
    v36 = "Unsupported driver shader script.";
    goto LABEL_35;
  }
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v17 + 64))(&v148);
  v48 = (_BYTE *)v148.__r_.__value_.__r.__words[2];
  v47 = v149;
  v149 = 0;
  v150 = 0;
  v148.__r_.__value_.__r.__words[2] = 0;
  v156 = v151;
  v157 = v152;
  v158 = v153;
  LODWORD(v136) = v148.__r_.__value_.__r.__words[1];
  v138 = 0;
  v139 = 0;
  v137 = 0;
  v49 = v47 - v48;
  if (v47 != v48)
  {
    if (v47 - v48 >= 0)
    {
      v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v49 >> 2);
      v137 = v43;
      v139 = &v43[4 * v50];
      memmove(v43, v48, v49);
      v138 = &v43[v49];
      goto LABEL_42;
    }
LABEL_111:
    abort();
  }
  v43 = 0;
LABEL_42:
  v140 = v156;
  v141 = v157;
  v142 = v158;
  v143 = 0uLL;
  *(_QWORD *)v144 = &unk_1C3E4D9BB;
  __p[0] = &off_1E7ECE910;
  __p[1] = off_1E7ECFAA8;
  if (v48)
    operator delete(v48);
  mach_absolute_time();
  v45 = *(_QWORD *)(TargetContext + 16);
  if (v45)
  {
    *(_BYTE *)(v45 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v45);
    MEMORY[0x1CAA2C330](v163);
    v57 = AGCBackgroundObjectDriverShader::createLLVMObject((AGCBackgroundObjectDriverShader *)__p, (AGCLLVMCtx *)v45, (llvm::LLVMContext *)v163, 0);
    if (((**(uint64_t (***)(uint64_t))v57)(v57) & 1) == 0)
    {
      if (*(char *)(v57 + 31) >= 0)
        v72 = (char **)(v57 + 8);
      else
        v72 = *(char ***)(v57 + 8);
      AGCError::logError(a8, v72, v58, v59, v60, v61, v62, v63);
      v45 = 0;
      goto LABEL_75;
    }
    v161 = 0;
    v162 = 0;
    v159 = 0u;
    v160 = 0u;
    v164 = &off_1E7ECF088;
    v165 = __p;
    v166 = &v164;
    v45 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, __int128 *, uint64_t (***)()))(*(_QWORD *)v57 + 8))(v57, &v162, &v161, &v159, &v164);
    v70 = v166;
    if (v166 == &v164)
    {
      v71 = 4;
      v70 = &v164;
    }
    else
    {
      if (!v166)
        goto LABEL_72;
      v71 = 5;
    }
    (*v70)[v71]();
LABEL_72:
    if ((v45 & 1) != 0)
    {
      *a6 = v162;
      *a7 = v161;
    }
    else
    {
      AGCError::logError(a8, (char **)"Error occurred composing compiler reply.", v64, v65, v66, v67, v68, v69);
    }
LABEL_75:
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 32))(v57);
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v163);
    v43 = v137;
    goto LABEL_76;
  }
  AGCError::logError(a8, (char **)"Failed to initialize AGX backend for target architecture.", v51, v52, v53, v54, v55, v56);
LABEL_76:
  v99 = &unk_1E7ECE940;
  v100 = off_1E7ECE8D0;
LABEL_107:
  __p[0] = v99;
  __p[1] = v100;
  if (v43)
  {
    v138 = v43;
    operator delete(v43);
  }
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
  if (v148.__r_.__value_.__r.__words[2])
  {
    v149 = (_BYTE *)v148.__r_.__value_.__r.__words[2];
    operator delete((void *)v148.__r_.__value_.__r.__words[2]);
  }
  return v45;
}

void std::__function::__func<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECF118;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECF118;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BVHBuilderProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t AGCBVHBuilderDriverShader::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 176))(*(_QWORD *)(a2 + 32));
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void AGX::BVHBuilderProgramKey::serialize(AGX::BVHBuilderProgramKey *this, const void **a2, unint64_t *a3)
{
  uint64_t v6;
  unsigned int *v7;

  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  v6 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 2);
  v7 = (unsigned int *)(*((_QWORD *)this + 2) + v6);
  *v7 = ((*((_DWORD *)this + 6) - *((_QWORD *)this + 2)) >> 2 << 8) | 0x55;
  v7[1] = *((_DWORD *)this + 10);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((_QWORD *)this + 2);
  *a3 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
}

BOOL AGX::BVHBuilderProgramKey::isPrecompiledToPipelineCache(AGX::BVHBuilderProgramKey *this)
{
  return (*((_BYTE *)this + 43) & 0x40) == 0;
}

uint64_t AGX::BVHBuilderProgramKey::isPrecompiledToBinaryArchive(AGX::BVHBuilderProgramKey *this)
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

void std::__function::__func<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECF0D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECF0D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::EndOfTileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t AGCEndOfTileDriverShader::createLLVMObject(AGCEndOfTileDriverShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::Module *a4)
{
  uint64_t v7;
  _QWORD *v8;

  v7 = operator new();
  v8 = (_QWORD *)AGCLLVMEndOfTileProgram::AGCLLVMEndOfTileProgram(v7, a2, a3, (uint64_t)this + 48);
  return (uint64_t)v8 + *(_QWORD *)(*v8 - 24);
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void AGX::EndOfTileProgramKey::serialize(AGX::EndOfTileProgramKey *this, const void **a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  v6 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 22);
  v7 = *((_QWORD *)this + 2) + v6;
  *(_DWORD *)v7 = ((*((_DWORD *)this + 6) - *((_QWORD *)this + 2)) >> 2 << 8) | 0x45;
  *(_OWORD *)(v7 + 4) = *(_OWORD *)((char *)this + 40);
  v8 = *(_OWORD *)((char *)this + 56);
  v9 = *(_OWORD *)((char *)this + 72);
  v10 = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)(v7 + 68) = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)(v7 + 52) = v10;
  *(_OWORD *)(v7 + 36) = v9;
  *(_OWORD *)(v7 + 20) = v8;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((_QWORD *)this + 2);
  *a3 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
}

BOOL AGX::EndOfTileProgramKey::isPrecompiledToPipelineCache(AGX::EndOfTileProgramKey *this)
{
  char v3;
  uint64_t i;
  int v5;
  uint64_t j;
  uint64_t (**v7)();
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[22];
  uint64_t (**v17)();
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[2];

  v8 = 19;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  v7 = off_1E7ECFAE8;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  if (AGX::EndOfTileProgramKey::operator==((uint64_t)this, (uint64_t)&v7))
    return 1;
  v3 = 0;
  for (i = 40; i != 108; i += 4)
    v3 |= *((_BYTE *)this + i) != 0;
  LOBYTE(v5) = 0;
  for (j = 40; j != 108; j += 4)
    v5 = v5 & 1 | ((*(_DWORD *)((_BYTE *)this + j) & 0x2000000) != 0);
  v18 = 19;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v17 = off_1E7ECFAE8;
  v26 = 0;
  *(_QWORD *)((char *)v27 + 6) = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v27[0] = 0x200000000000000;
  LODWORD(v22) = v3 & 1 | (v5 << 25);
  return AGX::EndOfTileProgramKey::operator==((uint64_t)&v17, (uint64_t)this);
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

BOOL AGX::EndOfTileProgramKey::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = 0;
  for (i = 40; i != 108; i += 4)
    v2 |= (*(_DWORD *)(a2 + i) ^ *(_DWORD *)(a1 + i));
  return (*(_QWORD *)(a2 + 112) ^ *(_QWORD *)(a1 + 112) | (unsigned __int16)(*(_WORD *)(a2 + 120) ^ *(_WORD *)(a1 + 120)) | (unsigned __int16)(*(_WORD *)(a2 + 122) ^ *(_WORD *)(a1 + 122)) | (unint64_t)(unsigned __int16)(*(_WORD *)(a2 + 124) ^ *(_WORD *)(a1 + 124)) | v2) == 0;
}

void ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void std::__function::__func<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECF088;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECF088;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::BackgroundObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t AGCBackgroundObjectDriverShader::createLLVMObject(AGCBackgroundObjectDriverShader *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::Module *a4)
{
  uint64_t v7;
  _QWORD *v8;

  v7 = operator new();
  v8 = (_QWORD *)AGCLLVMBackgroundObjectFragmentShader::AGCLLVMBackgroundObjectFragmentShader(v7, a2, a3, (uint64_t)this + 48, (unsigned int *)this + 22);
  return (uint64_t)v8 + *(_QWORD *)(*v8 - 24);
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void AGX::BackgroundObjectProgramKey::serialize(AGX::BackgroundObjectProgramKey *this, const void **a2, unint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)this);
  v6 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v6 >> 2) + 4);
  v7 = *((_QWORD *)this + 2) + v6;
  *(_DWORD *)v7 = ((*((_DWORD *)this + 6) - *((_QWORD *)this + 2)) >> 2 << 8) | 0x44;
  *(_QWORD *)(v7 + 4) = *((_QWORD *)this + 10);
  v8 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)((char *)this + 16), (v8 >> 2) + 12);
  v9 = *((_QWORD *)this + 2) + v8;
  *(_DWORD *)v9 = ((*((_DWORD *)this + 6) - *((_QWORD *)this + 2)) >> 2 << 8) | 0x42;
  v10 = *(_OWORD *)((char *)this + 40);
  v11 = *(_OWORD *)((char *)this + 56);
  *(_QWORD *)(v9 + 36) = *((_QWORD *)this + 9);
  *(_OWORD *)(v9 + 20) = v11;
  *(_OWORD *)(v9 + 4) = v10;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = (const void *)*((_QWORD *)this + 2);
  *a3 = *((_QWORD *)this + 3) - *((_QWORD *)this + 2);
}

uint64_t AGX::BackgroundObjectProgramKey::isPrecompiledToPipelineCache(AGX::BackgroundObjectProgramKey *this)
{
  int v1;
  char v2;
  uint64_t i;
  uint64_t v4;
  char v6;
  unsigned int v8;
  uint64_t j;
  BOOL v10;
  _BYTE v11[40];
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v1 = *((_DWORD *)this + 18);
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  WORD6(v14) = 256;
  DWORD2(v14) = 0;
  LODWORD(v14) = v1 & 0xF000;
  v2 = 1;
  for (i = 40; i != 72; i += 4)
    v2 &= *(_DWORD *)&v11[i] == *(_DWORD *)((char *)this + i);
  v4 = *((_QWORD *)this + 10);
  if ((v1 & 0xF000) == v1 && *((_QWORD *)&v14 + 1) == v4)
    v6 = v2;
  else
    v6 = 0;
  if ((v6 & 1) != 0)
    return 1;
  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  LOBYTE(v8) = 1;
  for (j = 40; j != 72; j += 4)
    v8 = v8 & (*(_DWORD *)((char *)this + j) == *(_DWORD *)&v11[j]);
  if (v1)
    v10 = 0;
  else
    v10 = v4 == 0;
  if (v10)
    return v8;
  else
    return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t AIRNTEmitPipelineImage(uint64_t *a1, uint64_t a2, const char *a3, const char *a4, uint64_t a5, int a6, int a7, AGCTarget *this, int *a9, uint64_t a10, _QWORD *a11, char **a12, void **a13, _QWORD *a14, AGCError *a15)
{
  unsigned int v15;
  int v20;
  int v21;
  uint64_t TargetContext;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 *v30;
  unsigned int v31;
  BOOL v32;
  uint64_t v33;
  std::string *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string::size_type v41;
  void **v42;
  char *v43;
  BOOL v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  void *__p[2];
  uint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  char v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char v90;
  void *v91;
  void *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  std::string v97;
  std::string::size_type v98;
  unsigned int v99;
  unint64_t v100;
  void *v101;
  char v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  char v109;
  void *v110;
  void *v111;
  char v112;
  char v113;
  void *v114;
  char v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  uint64_t v122;
  void *v123;
  void *v124;
  uint64_t v125;
  std::string v126;
  std::string v127;
  char v128;

  v15 = this;
  v20 = AGCTarget::CPUSubtypeToTargetArch(this, a2, a3);
  if (!v20)
  {
    std::to_string(&v97, v15);
    v34 = std::string::insert(&v97, 0, "Unknown AGC target for CPU subtype: ");
    v41 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v68 = v41;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if (v68 >= 0)
      v42 = __p;
    else
      v42 = (void **)__p[0];
    AGCError::logError(a15, (char **)v42, v35, v36, v37, v38, v39, v40);
    if (SHIBYTE(v68) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    return 0;
  }
  v21 = v20;
  TargetContext = AGCNativeTranslator::getTargetContext(a1, v20);
  v29 = *(_QWORD *)AGCNativeTranslator::getTargetContext(a1, v21);
  if (!v29)
  {
    v43 = "AGX key factory does not exist for target architecture.";
LABEL_82:
    AGCError::logError(a15, (char **)v43, v23, v24, v25, v26, v27, v28);
    return 0;
  }
  v30 = (unsigned __int16 *)((char *)a9 - *a9);
  v31 = *v30;
  if (v31 < 9 || !v30[4])
    goto LABEL_81;
  v32 = v31 >= 0xB && *((_BYTE *)a9 + v30[4]) == 1;
  if (v32 && v30[5])
  {
    v33 = (uint64_t)a9 + v30[5] + *(unsigned int *)((char *)a9 + v30[5]);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v126 = *(std::string *)a2;
    if (*(char *)(a2 + 47) < 0)
      std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    else
      v127 = *(std::string *)(a2 + 24);
    v128 = *(_BYTE *)(a2 + 48);
    v124 = 0;
    v125 = 0;
    v122 = 0;
    v123 = 0;
    v120 = 0;
    v121 = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, std::string *, _QWORD, void **, void **, _QWORD))(*(_QWORD *)v29 + 16))(&v97, v29, v33, &v126, 0, &v123, &v120, 0);
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
    if (v123)
    {
      v124 = v123;
      operator delete(v123);
    }
    if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v127.__r_.__value_.__l.__data_);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions((uint64_t)&v97, (unsigned __int8 *)(a2 + 56));
    v99 = v99 & 0xFFFFFFF4 | *(unsigned __int8 *)(a2 + 70) | (2 * *(unsigned __int8 *)(a2 + 71)) | (8
                                                                                                  * *(unsigned __int8 *)(a2 + 72));
    v100 = v100 & 0xFFFFFFFFFBFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(a2 + 73) << 26);
    AGX::Impl::VertexProgramKey::VertexProgramKey((AGX::Impl::VertexProgramKey *)&__p[1], (const AGX::Impl::VertexProgramKey *)&v97);
    v82 = a5;
    v83 = &unk_1C3E4D9BB;
    v81 = a4;
    __p[0] = &off_1E7ECEA70;
    v47 = AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject((uint64_t)__p, TargetContext, a11, a12, a15, a13, a14);
    __p[0] = &unk_1E7ECEAA0;
    __p[1] = &off_1E7ED3720;
    if (v80 < 0)
      operator delete(v79);
    if (v78 < 0)
      operator delete(v77);
    __p[1] = off_1E7ECEAD0;
    if (v75)
    {
      v76 = v75;
      operator delete(v75);
    }
    if (v73)
    {
      v74 = v73;
      operator delete(v73);
    }
    if (v72 < 0)
      operator delete(v71);
    __p[1] = off_1E7ECEB18;
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ED3720;
    if (v112 < 0)
      operator delete(v110);
    if (v109 < 0)
      operator delete(v107);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7ECEAD0;
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    if (v103)
    {
      v104 = v103;
      operator delete(v103);
    }
    if (v102 < 0)
      operator delete(v101);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7ECEB18;
LABEL_120:
    if (v97.__r_.__value_.__r.__words[2])
    {
      v98 = v97.__r_.__value_.__r.__words[2];
      operator delete((void *)v97.__r_.__value_.__r.__words[2]);
    }
    return v47;
  }
  if (!v30[4])
    goto LABEL_81;
  v44 = v31 >= 0xB && *((_BYTE *)a9 + v30[4]) == 2;
  if (v44 && v30[5])
  {
    v45 = (uint64_t)a9 + v30[5] + *(unsigned int *)((char *)a9 + v30[5]);
    v96 = 0;
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v91 = 0;
    v92 = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, _QWORD, _QWORD, void **, void **))(*(_QWORD *)v29 + 40))(&v97, v29, v45, 0, 0, &v94, &v91);
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
    AGX::Impl::FragmentProgramKey::setDeviceOptions((uint64_t)&v97, (unsigned __int8 *)(a2 + 56));
    v46 = v104 & 0xFFFFFF7F | (*(unsigned __int8 *)(a2 + 73) << 7);
    HIDWORD(v103) = HIDWORD(v103) & 0xFFFFFFF4 | *(unsigned __int8 *)(a2 + 70) | (2 * *(unsigned __int8 *)(a2 + 71)) | (8 * *(unsigned __int8 *)(a2 + 72));
    LODWORD(v104) = v46;
    AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&__p[1], (const AGX::Impl::FragmentProgramKey *)&v97);
    v85 = a5;
    v86 = &unk_1C3E4D9BB;
    v84 = a4;
    __p[0] = &off_1E7ECEB58;
    v87 = 0u;
    v88 = 0u;
    v89 = 0u;
    v90 = 0;
    v47 = AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject((uint64_t)__p, TargetContext, a11, a12, a15, a13, a14);
    AGCFragmentFunction::~AGCFragmentFunction(__p);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ED37F8;
    if (v118)
    {
      v119 = v118;
      operator delete(v118);
    }
    if (v116)
    {
      v117 = v116;
      operator delete(v116);
    }
    if (v115 < 0)
      operator delete(v114);
    if (v113 < 0)
      operator delete(v111);
    if (SHIBYTE(v110) < 0)
      operator delete(v108);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7ECEBB8;
    goto LABEL_120;
  }
  if (!v30[4])
    goto LABEL_81;
  v48 = v31 >= 0xB && *((_BYTE *)a9 + v30[4]) == 3;
  if (v48 && v30[5])
  {
    v49 = (uint64_t)a9 + v30[5] + *(unsigned int *)((char *)a9 + v30[5]);
    v65 = 0;
    v66 = 0;
    v63 = 0;
    v64 = 0;
    v61 = 0;
    v62 = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, _QWORD, void **, void **))(*(_QWORD *)v29 + 48))(&v97, v29, v49, 0, &v64, &v61);
    if (v61)
    {
      v62 = v61;
      operator delete(v61);
    }
    if (v64)
    {
      v65 = v64;
      operator delete(v64);
    }
    AGX::Impl::ComputeProgramKey::setDeviceOptions((uint64_t)&v97, (unsigned __int8 *)(a2 + 56));
    v50 = v100 & 0xFFFFFEFF | (*(unsigned __int8 *)(a2 + 73) << 8);
    v99 = v99 & 0xFFFFFFF4 | *(unsigned __int8 *)(a2 + 70) | (2 * *(unsigned __int8 *)(a2 + 71)) | (8
                                                                                                  * *(unsigned __int8 *)(a2 + 72));
    LODWORD(v100) = v50;
    AGCModule<AGX::Impl::ComputeProgramKey>::AGCModule((uint64_t)__p, (uint64_t)a4, a5, (uint64_t)&v97);
    __p[0] = &off_1E7ECEC10;
    v47 = AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject((uint64_t)__p, TargetContext, a11, a12, a15, a13, a14);
    __p[0] = &unk_1E7ECEC40;
    __p[1] = &off_1E7ED3878;
    if (v75)
    {
      v76 = v75;
      operator delete(v75);
    }
    if (v73)
    {
      v74 = v73;
      operator delete(v73);
    }
    if (v72 < 0)
      operator delete(v71);
    __p[1] = off_1E7ECEC70;
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ED3878;
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    if (v103)
    {
      v104 = v103;
      operator delete(v103);
    }
    if (v102 < 0)
      operator delete(v101);
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7ECEC70;
    goto LABEL_120;
  }
  if (!v30[4] || (v31 >= 0xB ? (v51 = *((_BYTE *)a9 + v30[4]) == 4) : (v51 = 0), !v51 || (v52 = v30[5]) == 0))
  {
LABEL_81:
    v43 = "Unsupported function script.";
    goto LABEL_82;
  }
  v53 = (uint64_t)a9 + v52 + *(unsigned int *)((char *)a9 + v52);
  v59 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  v55 = 0;
  v56 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **, void **))(*(_QWORD *)v29 + 56))(&v97, v29, v53, &v58, &v55);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  AGX::Impl::FragmentProgramKey::setDeviceOptions((uint64_t)&v97, (unsigned __int8 *)(a2 + 56));
  AGX::Impl::TileProgramKey::setCompileOptions((uint64_t)&v97, (unsigned __int8 *)(a2 + 70));
  AGCTileFunction::AGCTileFunction((AGCTileFunction *)__p, a4, a5, (const AGX::Impl::TileProgramKey *)&v97);
  v47 = AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject((uint64_t)__p, TargetContext, a11, a12, a15, a13, a14);
  AGCTileFunction::~AGCTileFunction((AGCTileFunction *)__p);
  AGX::Impl::TileProgramKey::~TileProgramKey((AGX::Impl::TileProgramKey *)&v97);
  return v47;
}

uint64_t AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::setDeviceOptions(uint64_t result, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *(_DWORD *)(result + 52) & 0xFBFFFFFF | (*a2 << 26);
  *(_DWORD *)(result + 52) = v2;
  v3 = v2 & 0xFFFFFEFF | (a2[1] << 8);
  *(_DWORD *)(result + 52) = v3;
  v4 = v3 & 0xEFFFFFFF | (a2[2] << 28);
  *(_DWORD *)(result + 52) = v4;
  v5 = v4 & 0xDFFFFFFF | (a2[4] << 29);
  *(_DWORD *)(result + 52) = v5;
  *(_DWORD *)(result + 52) = v5 & 0xBFFFFFFF | (a2[6] << 30);
  v6 = *(_QWORD *)(result + 56) & 0xFFFFFFFFFF7FFFFFLL | ((unint64_t)a2[7] << 23);
  *(_QWORD *)(result + 56) = v6;
  v7 = v6 & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)a2[8] << 24);
  *(_QWORD *)(result + 56) = v7;
  v8 = v7 & 0xFFFFFFFFF7FFFFFFLL | ((unint64_t)a2[9] << 27);
  *(_QWORD *)(result + 56) = v8;
  *(_QWORD *)(result + 56) = v8 & 0xFFFFFDFFFFFFFFFFLL | ((unint64_t)a2[3] << 41);
  return result;
}

AGX::Impl::VertexProgramKey *AGX::Impl::VertexProgramKey::VertexProgramKey(AGX::Impl::VertexProgramKey *this, const AGX::Impl::VertexProgramKey *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_QWORD *)this = off_1E7ECEB18;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)((char *)this + 16), (const std::vector<unsigned int> *)((char *)a2 + 16));
  *(_QWORD *)this = off_1E7ECEAD0;
  v4 = *(_OWORD *)((char *)a2 + 40);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *(_OWORD *)((char *)this + 40) = v4;
  v5 = (std::string *)((char *)this + 64);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  std::vector<MTLUINT256_t>::vector((_QWORD *)this + 12, (uint64_t)a2 + 96);
  std::vector<MTLUINT256_t>::vector((_QWORD *)this + 15, (uint64_t)a2 + 120);
  *(_QWORD *)this = &off_1E7ED3720;
  v7 = (std::string *)((char *)this + 144);
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 9);
    *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = (std::string *)((char *)this + 168);
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 168);
    *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *((_BYTE *)this + 192) = *((_BYTE *)a2 + 192);
  return this;
}

uint64_t AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, _QWORD *a3, char **a4, AGCError *a5, void **a6, _QWORD *a7)
{
  BOOL v14;
  int v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  AGCLLVMCtx *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *p_p;
  int v36;
  uint64_t (***v37)(_QWORD);
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (***v44)(_QWORD);
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char **v58;
  uint64_t v59;
  char *v60;
  std::string *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::string::size_type v68;
  void **v69;
  char **v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  char **v75;
  std::string __p;
  __int16 v77;
  void *v78[2];
  __int128 v79;
  int v80;
  char *v81;
  _BYTE v82[15];
  _QWORD v83[3];
  _QWORD *v84;
  char *v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (a6)
    v14 = a7 == 0;
  else
    v14 = 1;
  v15 = !v14;
  v16 = mach_absolute_time();
  v23 = *(AGCLLVMCtx **)(a2 + 16);
  if (v23)
  {
    v24 = v16;
    v75 = a4;
    *((_BYTE *)v23 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v23);
    MEMORY[0x1CAA2C330](v82);
    v25 = *(_QWORD *)(a1 + 208);
    if (!v25)
      goto LABEL_28;
    if (*(_QWORD *)(a1 + 224))
      strlen(*(const char **)(a1 + 224));
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    v27 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v27)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v27 + 8))(v27);
    if ((v86 & 1) != 0)
    {
      v60 = v85;
      v85 = 0;
      v81 = v60;
      llvm::toString(&__p, &v81);
      v61 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      v68 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)v78 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      *(_QWORD *)&v79 = v68;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v79) & 0x80u) == 0)
        v69 = v78;
      else
        v69 = (void **)v78[0];
      AGCError::logError(a5, (char **)v69, v62, v63, v64, v65, v66, v67);
      if (SBYTE7(v79) < 0)
        operator delete(v78[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v81)
        (*(void (**)(char *))(*(_QWORD *)v81 + 8))(v81);
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v85);
      goto LABEL_44;
    }
    v25 = (uint64_t)v85;
    v85 = 0;
    v77 = 260;
    __p.__r_.__value_.__r.__words[0] = v25 + 216;
    MEMORY[0x1CAA2CCA8](v78, &__p);
    if (DWORD2(v79) == 49
      && v80 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v78),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v78), !v28))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v78);
      v36 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v29, v30, v31, v32, v33, v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v36 = 0;
    }
    if (SBYTE7(v79) < 0)
      operator delete(v78[0]);
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v85);
    if (v36)
    {
LABEL_28:
      v37 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, _BYTE *, uint64_t))a1)(a1, v23, v82, v25);
      if (v37)
      {
        v44 = v37;
        if (((**v37)(v37) & 1) == 0)
        {
          if (*((char *)v44 + 31) >= 0)
            v70 = (char **)(v44 + 1);
          else
            v70 = (char **)v44[1];
          AGCError::logError(a5, v70, v45, v46, v47, v48, v49, v50);
          v26 = 0;
LABEL_58:
          (*v44)[4](v44);
          goto LABEL_59;
        }
        __p.__r_.__value_.__r.__words[0] = 0;
        v85 = 0;
        *(_OWORD *)v78 = 0u;
        v79 = 0u;
        v83[0] = &off_1E7ECF160;
        v83[1] = a1;
        v84 = v83;
        v26 = ((uint64_t (*)(uint64_t (***)(_QWORD), std::string *, char **, void **, _QWORD *))(*v44)[1])(v44, &__p, &v85, v78, v83);
        v57 = v84;
        if (v84 == v83)
        {
          v59 = 4;
          v57 = v83;
          v58 = v75;
        }
        else
        {
          v58 = v75;
          if (!v84)
          {
LABEL_51:
            if (v15)
            {
              *a6 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
              *a7 = 32;
              v71 = mach_absolute_time() - v24;
              if (getTimebaseInfo(void)::once != -1)
                dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_10005);
              v78[1] = (void *)(v71
                              * getTimebaseInfo(void)::sTimebaseInfo
                              / *(unsigned int *)algn_1ED839B44);
              *(_QWORD *)&v79 = (char *)v78[1] - *((_QWORD *)&v79 + 1);
              v72 = *a6;
              v73 = v79;
              *v72 = *(_OWORD *)v78;
              v72[1] = v73;
            }
            if ((v26 & 1) != 0)
            {
              *a3 = __p.__r_.__value_.__r.__words[0];
              *v58 = v85;
            }
            else
            {
              AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v51, v52, v53, v54, v55, v56);
            }
            goto LABEL_58;
          }
          v59 = 5;
        }
        (*(void (**)(void))(*v57 + 8 * v59))();
        goto LABEL_51;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v38, v39, v40, v41, v42, v43);
    }
LABEL_44:
    v26 = 0;
LABEL_59:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v82);
    return v26;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v17, v18, v19, v20, v21, v22);
  return 0;
}

uint64_t AGX::Impl::FragmentProgramKey::setDeviceOptions(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *(_DWORD *)(result + 104);
  v3 = *(_DWORD *)(result + 100) & 0xFBFFFFFF | (*a2 << 26);
  *(_DWORD *)(result + 100) = v3;
  v4 = v3 & 0xFFFFFEFF | (a2[1] << 8);
  *(_DWORD *)(result + 100) = v4;
  v5 = v4 & 0xEFFFFFFF | (a2[2] << 28);
  *(_DWORD *)(result + 100) = v5;
  v6 = v5 & 0xDFFFFFFF | (a2[4] << 29);
  *(_DWORD *)(result + 100) = v6;
  *(_DWORD *)(result + 100) = v6 & 0xBFFFFFFF | (a2[6] << 30);
  v7 = v2 & 0xFFFFFFF7 | (8 * a2[10]);
  *(_DWORD *)(result + 104) = v7;
  *(_DWORD *)(result + 104) = v7 & 0xFFFFF7FF | (a2[3] << 11);
  return result;
}

AGX::Impl::FragmentProgramKey *AGX::Impl::FragmentProgramKey::FragmentProgramKey(AGX::Impl::FragmentProgramKey *this, const AGX::Impl::FragmentProgramKey *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;

  *(_QWORD *)this = off_1E7ECEBB8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)((char *)this + 16), (const std::vector<unsigned int> *)((char *)a2 + 16));
  *(_QWORD *)this = &off_1E7ED37F8;
  v4 = *(_OWORD *)((char *)a2 + 40);
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 56) = v5;
  *(_OWORD *)((char *)this + 40) = v4;
  v6 = *(_OWORD *)((char *)a2 + 88);
  v7 = *(_OWORD *)((char *)a2 + 104);
  v8 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v8;
  *(_OWORD *)((char *)this + 104) = v7;
  *(_OWORD *)((char *)this + 88) = v6;
  v9 = (std::string *)((char *)this + 152);
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 152);
    *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  v11 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v12 = *((_OWORD *)a2 + 11);
    *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = (std::string *)((char *)this + 200);
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v14 = *(_OWORD *)((char *)a2 + 200);
    *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  *((_BYTE *)this + 224) = *((_BYTE *)a2 + 224);
  std::vector<MTLUINT256_t>::vector((_QWORD *)this + 29, (uint64_t)a2 + 232);
  std::vector<MTLUINT256_t>::vector((_QWORD *)this + 32, (uint64_t)a2 + 256);
  return this;
}

uint64_t AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, _QWORD *a3, char **a4, AGCError *a5, void **a6, _QWORD *a7)
{
  BOOL v14;
  int v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  AGCLLVMCtx *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *p_p;
  int v36;
  uint64_t (***v37)(_QWORD);
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (***v44)(_QWORD);
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char **v58;
  uint64_t v59;
  char *v60;
  std::string *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::string::size_type v68;
  void **v69;
  char **v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  uint64_t i;
  int8x8_t v76;
  int32x2_t v77;
  char **v78;
  std::string __p;
  __int16 v80;
  void *v81[2];
  __int128 v82;
  int v83;
  char *v84;
  _BYTE v85[15];
  _QWORD v86[3];
  _QWORD *v87;
  char *v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (a6)
    v14 = a7 == 0;
  else
    v14 = 1;
  v15 = !v14;
  v16 = mach_absolute_time();
  v23 = *(AGCLLVMCtx **)(a2 + 16);
  if (v23)
  {
    v24 = v16;
    v78 = a4;
    *((_BYTE *)v23 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v23);
    MEMORY[0x1CAA2C330](v85);
    v25 = *(_QWORD *)(a1 + 288);
    if (!v25)
      goto LABEL_28;
    if (*(_QWORD *)(a1 + 304))
      strlen(*(const char **)(a1 + 304));
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    v27 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v27)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v27 + 8))(v27);
    if ((v89 & 1) != 0)
    {
      v60 = v88;
      v88 = 0;
      v84 = v60;
      llvm::toString(&__p, &v84);
      v61 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      v68 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)v81 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      *(_QWORD *)&v82 = v68;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v82) & 0x80u) == 0)
        v69 = v81;
      else
        v69 = (void **)v81[0];
      AGCError::logError(a5, (char **)v69, v62, v63, v64, v65, v66, v67);
      if (SBYTE7(v82) < 0)
        operator delete(v81[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v84)
        (*(void (**)(char *))(*(_QWORD *)v84 + 8))(v84);
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v88);
      goto LABEL_44;
    }
    v25 = (uint64_t)v88;
    v88 = 0;
    v80 = 260;
    __p.__r_.__value_.__r.__words[0] = v25 + 216;
    MEMORY[0x1CAA2CCA8](v81, &__p);
    if (DWORD2(v82) == 49
      && v83 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v81),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v81), !v28))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v81);
      if ((__p.__r_.__value_.__l.__size_ & 0x1000A0011000E00) != 0
        && (__p.__r_.__value_.__r.__words[0] & __p.__r_.__value_.__l.__size_) < (__p.__r_.__value_.__l.__size_ & 0x1000A0011000E00))
      {
        for (i = 0; i != 32; i += 8)
        {
          v76 = *(int8x8_t *)(a1 + i + 120);
          v77 = vceq_s32((int32x2_t)vand_s8(v76, (int8x8_t)0x1F0000001FLL), (int32x2_t)0x1600000016);
          if ((v77.i8[0] & 1) != 0)
            *(_DWORD *)(a1 + i + 120) = v76.i32[0] & 0xFFFFFFE0 | 0xF;
          if ((v77.i8[4] & 1) != 0)
            *(_DWORD *)(a1 + i + 124) = v76.i32[1] & 0xFFFFFFE0 | 0xF;
        }
      }
      v36 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v29, v30, v31, v32, v33, v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v36 = 0;
    }
    if (SBYTE7(v82) < 0)
      operator delete(v81[0]);
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v88);
    if (v36)
    {
LABEL_28:
      v37 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, _BYTE *, uint64_t))a1)(a1, v23, v85, v25);
      if (v37)
      {
        v44 = v37;
        if (((**v37)(v37) & 1) == 0)
        {
          if (*((char *)v44 + 31) >= 0)
            v70 = (char **)(v44 + 1);
          else
            v70 = (char **)v44[1];
          AGCError::logError(a5, v70, v45, v46, v47, v48, v49, v50);
          v26 = 0;
LABEL_58:
          (*v44)[4](v44);
          goto LABEL_59;
        }
        __p.__r_.__value_.__r.__words[0] = 0;
        v88 = 0;
        *(_OWORD *)v81 = 0u;
        v82 = 0u;
        v86[0] = &off_1E7ECEFB0;
        v86[1] = a1;
        v87 = v86;
        v26 = ((uint64_t (*)(uint64_t (***)(_QWORD), std::string *, char **, void **, _QWORD *))(*v44)[1])(v44, &__p, &v88, v81, v86);
        v57 = v87;
        if (v87 == v86)
        {
          v59 = 4;
          v57 = v86;
          v58 = v78;
        }
        else
        {
          v58 = v78;
          if (!v87)
          {
LABEL_51:
            if (v15)
            {
              *a6 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
              *a7 = 32;
              v71 = mach_absolute_time() - v24;
              if (getTimebaseInfo(void)::once != -1)
                dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_10005);
              v81[1] = (void *)(v71
                              * getTimebaseInfo(void)::sTimebaseInfo
                              / *(unsigned int *)algn_1ED839B44);
              *(_QWORD *)&v82 = (char *)v81[1] - *((_QWORD *)&v82 + 1);
              v72 = *a6;
              v73 = v82;
              *v72 = *(_OWORD *)v81;
              v72[1] = v73;
            }
            if ((v26 & 1) != 0)
            {
              *a3 = __p.__r_.__value_.__r.__words[0];
              *v58 = v88;
            }
            else
            {
              AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v51, v52, v53, v54, v55, v56);
            }
            goto LABEL_58;
          }
          v59 = 5;
        }
        (*(void (**)(void))(*v57 + 8 * v59))();
        goto LABEL_51;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v38, v39, v40, v41, v42, v43);
    }
LABEL_44:
    v26 = 0;
LABEL_59:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v85);
    return v26;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v17, v18, v19, v20, v21, v22);
  return 0;
}

void AGCFragmentFunction::~AGCFragmentFunction(void **this)
{
  void *v2;
  void *v3;
  void *v4;

  *this = &off_1E7ECEB58;
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  *this = &unk_1E7ECEB88;
  this[1] = &off_1E7ED37F8;
  v2 = this[33];
  if (v2)
  {
    this[34] = v2;
    operator delete(v2);
  }
  v3 = this[30];
  if (v3)
  {
    this[31] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  this[1] = off_1E7ECEBB8;
  v4 = this[3];
  if (v4)
  {
    this[4] = v4;
    operator delete(v4);
  }
}

uint64_t AGX::Impl::ComputeProgramKey::setDeviceOptions(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_DWORD *)(result + 56);
  v3 = *(_DWORD *)(result + 52) & 0xFBFFFFFF | (*a2 << 26);
  *(_DWORD *)(result + 52) = v3;
  v4 = v3 & 0xFFFFFEFF | (a2[1] << 8);
  *(_DWORD *)(result + 52) = v4;
  v5 = v4 & 0xEFFFFFFF | (a2[2] << 28);
  *(_DWORD *)(result + 52) = v5;
  v6 = v5 & 0xDFFFFFFF | (a2[4] << 29);
  *(_DWORD *)(result + 52) = v6;
  *(_DWORD *)(result + 52) = v6 & 0xBFFFFFFF | (a2[6] << 30);
  v7 = v2 & 0xFFFFFFFB | (4 * a2[11]);
  *(_DWORD *)(result + 56) = v7;
  v8 = v7 & 0xFFFFFFBF | (a2[12] << 6);
  *(_DWORD *)(result + 56) = v8;
  v9 = v8 & 0xFFFFFF7F | (a2[13] << 7);
  *(_DWORD *)(result + 56) = v9;
  *(_DWORD *)(result + 56) = v9 & 0xFFFFF7FF | (a2[3] << 11);
  return result;
}

uint64_t AGCModule<AGX::Impl::ComputeProgramKey>::AGCModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_QWORD *)a1 = &unk_1E7ECEC40;
  *(_QWORD *)(a1 + 8) = off_1E7ECEC70;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a4 + 8);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)(a1 + 24), (const std::vector<unsigned int> *)(a4 + 16));
  *(_QWORD *)(a1 + 8) = &off_1E7ED3878;
  v8 = *(_OWORD *)(a4 + 40);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a4 + 56);
  *(_OWORD *)(a1 + 48) = v8;
  v9 = (std::string *)(a1 + 72);
  if (*(char *)(a4 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a4 + 64), *(_QWORD *)(a4 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a4 + 64);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a4 + 80);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a4 + 88);
  std::vector<MTLUINT256_t>::vector((_QWORD *)(a1 + 104), a4 + 96);
  std::vector<MTLUINT256_t>::vector((_QWORD *)(a1 + 128), a4 + 120);
  *(_QWORD *)(a1 + 152) = a2;
  *(_QWORD *)(a1 + 160) = a3;
  *(_QWORD *)(a1 + 168) = &unk_1C3E4D9BB;
  return a1;
}

uint64_t AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, _QWORD *a3, char **a4, AGCError *a5, void **a6, _QWORD *a7)
{
  BOOL v14;
  int v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  AGCLLVMCtx *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *p_p;
  int v36;
  uint64_t (***v37)(_QWORD);
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (***v44)(_QWORD);
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char **v58;
  uint64_t v59;
  char *v60;
  std::string *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  std::string::size_type v68;
  void **v69;
  char **v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  char **v75;
  std::string __p;
  __int16 v77;
  void *v78[2];
  __int128 v79;
  int v80;
  char *v81;
  _BYTE v82[15];
  _QWORD v83[3];
  _QWORD *v84;
  char *v85;
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (a6)
    v14 = a7 == 0;
  else
    v14 = 1;
  v15 = !v14;
  v16 = mach_absolute_time();
  v23 = *(AGCLLVMCtx **)(a2 + 16);
  if (v23)
  {
    v24 = v16;
    v75 = a4;
    *((_BYTE *)v23 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v23);
    MEMORY[0x1CAA2C330](v82);
    v25 = *(_QWORD *)(a1 + 152);
    if (!v25)
      goto LABEL_28;
    if (*(_QWORD *)(a1 + 168))
      strlen(*(const char **)(a1 + 168));
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    v27 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v27)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v27 + 8))(v27);
    if ((v86 & 1) != 0)
    {
      v60 = v85;
      v85 = 0;
      v81 = v60;
      llvm::toString(&__p, &v81);
      v61 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      v68 = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)v78 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      *(_QWORD *)&v79 = v68;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v79) & 0x80u) == 0)
        v69 = v78;
      else
        v69 = (void **)v78[0];
      AGCError::logError(a5, (char **)v69, v62, v63, v64, v65, v66, v67);
      if (SBYTE7(v79) < 0)
        operator delete(v78[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v81)
        (*(void (**)(char *))(*(_QWORD *)v81 + 8))(v81);
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v85);
      goto LABEL_44;
    }
    v25 = (uint64_t)v85;
    v85 = 0;
    v77 = 260;
    __p.__r_.__value_.__r.__words[0] = v25 + 216;
    MEMORY[0x1CAA2CCA8](v78, &__p);
    if (DWORD2(v79) == 49
      && v80 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v78),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v78), !v28))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v78);
      v36 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v29, v30, v31, v32, v33, v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v36 = 0;
    }
    if (SBYTE7(v79) < 0)
      operator delete(v78[0]);
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v85);
    if (v36)
    {
LABEL_28:
      v37 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, _BYTE *, uint64_t))a1)(a1, v23, v82, v25);
      if (v37)
      {
        v44 = v37;
        if (((**v37)(v37) & 1) == 0)
        {
          if (*((char *)v44 + 31) >= 0)
            v70 = (char **)(v44 + 1);
          else
            v70 = (char **)v44[1];
          AGCError::logError(a5, v70, v45, v46, v47, v48, v49, v50);
          v26 = 0;
LABEL_58:
          (*v44)[4](v44);
          goto LABEL_59;
        }
        __p.__r_.__value_.__r.__words[0] = 0;
        v85 = 0;
        *(_OWORD *)v78 = 0u;
        v79 = 0u;
        v83[0] = &off_1E7ECF1A8;
        v83[1] = a1;
        v84 = v83;
        v26 = ((uint64_t (*)(uint64_t (***)(_QWORD), std::string *, char **, void **, _QWORD *))(*v44)[1])(v44, &__p, &v85, v78, v83);
        v57 = v84;
        if (v84 == v83)
        {
          v59 = 4;
          v57 = v83;
          v58 = v75;
        }
        else
        {
          v58 = v75;
          if (!v84)
          {
LABEL_51:
            if (v15)
            {
              *a6 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
              *a7 = 32;
              v71 = mach_absolute_time() - v24;
              if (getTimebaseInfo(void)::once != -1)
                dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_10005);
              v78[1] = (void *)(v71
                              * getTimebaseInfo(void)::sTimebaseInfo
                              / *(unsigned int *)algn_1ED839B44);
              *(_QWORD *)&v79 = (char *)v78[1] - *((_QWORD *)&v79 + 1);
              v72 = *a6;
              v73 = v79;
              *v72 = *(_OWORD *)v78;
              v72[1] = v73;
            }
            if ((v26 & 1) != 0)
            {
              *a3 = __p.__r_.__value_.__r.__words[0];
              *v58 = v85;
            }
            else
            {
              AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v51, v52, v53, v54, v55, v56);
            }
            goto LABEL_58;
          }
          v59 = 5;
        }
        (*(void (**)(void))(*v57 + 8 * v59))();
        goto LABEL_51;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v38, v39, v40, v41, v42, v43);
    }
LABEL_44:
    v26 = 0;
LABEL_59:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v82);
    return v26;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v17, v18, v19, v20, v21, v22);
  return 0;
}

uint64_t AGX::Impl::TileProgramKey::setCompileOptions(uint64_t result, unsigned __int8 *a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(_DWORD *)(result + 104);
  v3 = *(_DWORD *)(result + 100) & 0xFFFFFFFE | *a2;
  *(_DWORD *)(result + 100) = v3;
  v4 = v3 & 0xFFFFFFFD | (2 * a2[1]);
  *(_DWORD *)(result + 100) = v4;
  *(_DWORD *)(result + 100) = v4 & 0xFFFFFFF7 | (8 * a2[2]);
  *(_DWORD *)(result + 104) = v2 & 0xFFFFFF7F | (a2[3] << 7);
  return result;
}

void AGCTileFunction::AGCTileFunction(AGCTileFunction *this, const char *a2, uint64_t a3, const AGX::Impl::TileProgramKey *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  const char *v14;
  __int16 v15;
  _BYTE v16[8];
  llvm::Module *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &unk_1E7ECECE0;
  *((_QWORD *)this + 1) = off_1E7ECED10;
  *((_DWORD *)this + 4) = *((_DWORD *)a4 + 2);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)this + 1, (const std::vector<unsigned int> *)((char *)a4 + 16));
  *((_QWORD *)this + 1) = &off_1E7ED3838;
  v8 = *(_OWORD *)((char *)a4 + 40);
  v9 = *(_OWORD *)((char *)a4 + 56);
  v10 = *(_OWORD *)((char *)a4 + 88);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a4 + 72);
  *((_OWORD *)this + 6) = v10;
  *((_OWORD *)this + 3) = v8;
  *((_OWORD *)this + 4) = v9;
  v11 = *(_OWORD *)((char *)a4 + 104);
  v12 = *(_OWORD *)((char *)a4 + 120);
  v13 = *(_OWORD *)((char *)a4 + 136);
  *((_QWORD *)this + 20) = *((_QWORD *)a4 + 19);
  *((_OWORD *)this + 8) = v12;
  *((_OWORD *)this + 9) = v13;
  *((_OWORD *)this + 7) = v11;
  std::vector<MTLUINT256_t>::vector((_QWORD *)this + 21, (uint64_t)a4 + 160);
  std::vector<MTLUINT256_t>::vector((_QWORD *)this + 24, (uint64_t)a4 + 184);
  *((_QWORD *)this + 27) = a2;
  *((_QWORD *)this + 28) = a3;
  *((_QWORD *)this + 29) = &unk_1C3E4D9BB;
  *(_QWORD *)this = &off_1E7ECECB0;
  MEMORY[0x1CAA2C330](v16);
  AGCModule<AGX::Impl::TileProgramKey>::getLLVMModule((uint64_t)&v17, (uint64_t)this);
  if ((v18 & 1) == 0)
  {
    v14 = "air.kernel";
    v15 = 259;
    if (llvm::Module::getNamedMetadata(v17, (const llvm::Twine *)&v14))
      *((_DWORD *)this + 38) = *((_DWORD *)this + 38) & 0xFFFFF0FF | ((unsigned __int16)*((_DWORD *)this + 38) >> 12 << 8);
  }
  llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v17);
  llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v16);
}

uint64_t AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, _QWORD *a3, char **a4, AGCError *a5, void **a6, _QWORD *a7)
{
  BOOL v14;
  int v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  AGCLLVMCtx *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *p_p;
  int v34;
  uint64_t v35;
  uint64_t (***v36)(_QWORD);
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (***v43)(_QWORD);
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  char **v57;
  uint64_t v58;
  char *v59;
  std::string *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::string::size_type v67;
  void **v68;
  char **v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 v72;
  char **v74;
  std::string __p;
  __int16 v76;
  void *v77[2];
  __int128 v78;
  int v79;
  char *v80;
  char v81[8];
  _QWORD v82[3];
  _QWORD *v83;
  char *v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (a6)
    v14 = a7 == 0;
  else
    v14 = 1;
  v15 = !v14;
  v16 = mach_absolute_time();
  v23 = *(AGCLLVMCtx **)(a2 + 16);
  if (v23)
  {
    v24 = v16;
    *((_BYTE *)v23 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v23);
    MEMORY[0x1CAA2C330](v81);
    if (*(_QWORD *)(a1 + 216))
    {
      AGCModule<AGX::Impl::TileProgramKey>::getLLVMModule((uint64_t)&v84, a1);
      if ((v85 & 1) != 0)
      {
        v59 = v84;
        v84 = 0;
        v80 = v59;
        llvm::toString(&__p, &v80);
        v60 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
        v67 = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)v77 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        *(_QWORD *)&v78 = v67;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        if ((SBYTE7(v78) & 0x80u) == 0)
          v68 = v77;
        else
          v68 = (void **)v77[0];
        AGCError::logError(a5, (char **)v68, v61, v62, v63, v64, v65, v66);
        if (SBYTE7(v78) < 0)
          operator delete(v77[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v80)
          (*(void (**)(char *))(*(_QWORD *)v80 + 8))(v80);
        llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v84);
        goto LABEL_42;
      }
      v25 = (uint64_t)v84;
      v84 = 0;
      v76 = 260;
      v74 = a4;
      __p.__r_.__value_.__r.__words[0] = v25 + 216;
      MEMORY[0x1CAA2CCA8](v77, &__p);
      if (DWORD2(v78) == 49
        && v79 == 1
        && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v77),
            pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
        && (llvm::Triple::getEnvironmentName((llvm::Triple *)v77), !v26))
      {
        AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v77);
        v34 = 1;
      }
      else
      {
        std::operator+<char>();
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v27, v28, v29, v30, v31, v32);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v34 = 0;
      }
      if (SBYTE7(v78) < 0)
        operator delete(v77[0]);
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v84);
      if (!v34)
      {
LABEL_42:
        v35 = 0;
LABEL_57:
        llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v81);
        return v35;
      }
    }
    else
    {
      v74 = a4;
      v25 = 0;
    }
    v36 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, char *, uint64_t))a1)(a1, v23, v81, v25);
    if (!v36)
    {
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v37, v38, v39, v40, v41, v42);
      goto LABEL_42;
    }
    v43 = v36;
    if (((**v36)(v36) & 1) == 0)
    {
      if (*((char *)v43 + 31) >= 0)
        v69 = (char **)(v43 + 1);
      else
        v69 = (char **)v43[1];
      AGCError::logError(a5, v69, v44, v45, v46, v47, v48, v49);
      v35 = 0;
LABEL_56:
      (*v43)[4](v43);
      goto LABEL_57;
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    v84 = 0;
    *(_OWORD *)v77 = 0u;
    v78 = 0u;
    v82[0] = &off_1E7ECF1F0;
    v82[1] = a1;
    v83 = v82;
    v35 = ((uint64_t (*)(uint64_t (***)(_QWORD), std::string *, char **, void **, _QWORD *))(*v43)[1])(v43, &__p, &v84, v77, v82);
    v56 = v83;
    if (v83 == v82)
    {
      v58 = 4;
      v56 = v82;
      v57 = v74;
    }
    else
    {
      v57 = v74;
      if (!v83)
      {
LABEL_49:
        if (v15)
        {
          *a6 = malloc_type_malloc(0x20uLL, 0x1000040E0EAB150uLL);
          *a7 = 32;
          v70 = mach_absolute_time() - v24;
          if (getTimebaseInfo(void)::once != -1)
            dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_10005);
          v77[1] = (void *)(v70 * getTimebaseInfo(void)::sTimebaseInfo / *(unsigned int *)algn_1ED839B44);
          *(_QWORD *)&v78 = (char *)v77[1] - *((_QWORD *)&v78 + 1);
          v71 = *a6;
          v72 = v78;
          *v71 = *(_OWORD *)v77;
          v71[1] = v72;
        }
        if ((v35 & 1) != 0)
        {
          *a3 = __p.__r_.__value_.__r.__words[0];
          *v57 = v84;
        }
        else
        {
          AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v50, v51, v52, v53, v54, v55);
        }
        goto LABEL_56;
      }
      v58 = 5;
    }
    (*(void (**)(void))(*v56 + 8 * v58))();
    goto LABEL_49;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v17, v18, v19, v20, v21, v22);
  return 0;
}

void AGCTileFunction::~AGCTileFunction(AGCTileFunction *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &unk_1E7ECECE0;
  *((_QWORD *)this + 1) = &off_1E7ED3838;
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {
    *((_QWORD *)this + 25) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 22) = v3;
    operator delete(v3);
  }
  *((_QWORD *)this + 1) = off_1E7ECED10;
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

void AGX::Impl::TileProgramKey::~TileProgramKey(AGX::Impl::TileProgramKey *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E7ED3838;
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 20);
  if (v3)
  {
    *((_QWORD *)this + 21) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = off_1E7ECED10;
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t AGCModule<AGX::Impl::TileProgramKey>::getLLVMModule(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  if (*(_QWORD *)(a2 + 232))
    strlen(*(const char **)(a2 + 232));
  llvm::MemoryBuffer::getMemBuffer();
  llvm::MemoryBufferRef::MemoryBufferRef();
  llvm::parseBitcodeFile();
  result = v3;
  if (v3)
    return (*(uint64_t (**)())(*(_QWORD *)v3 + 8))();
  return result;
}

void std::__function::__func<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECF1F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECF1F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t AGCTileFunction::createLLVMObject(AGCTileFunction *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::Module *a4)
{
  uint64_t NamedMetadata;
  uint64_t *v6;
  uint64_t v7;
  const char *v9;
  __int16 v10;
  uint64_t (**v11)(AGCLLVMFragmentContextState *__hidden);
  char *v12;
  char *v13;
  uint64_t v14;

  v11 = &off_1E7ECEBF8;
  v12 = (char *)this + 48;
  v13 = (char *)this + 48;
  v14 = 0;
  v9 = "air.kernel";
  v10 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a4, (const llvm::Twine *)&v9);
  v6 = (uint64_t *)*((_QWORD *)a2 + 4);
  v7 = *v6;
  if (NamedMetadata)
    return (*(uint64_t (**)(void))(v7 + 56))();
  else
    return (*(uint64_t (**)(uint64_t *))(v7 + 64))(v6);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, const std::vector<unsigned int> *__x)
{
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  int64_t v5;
  unsigned int *v6;
  uint64_t v7;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begin = __x->__begin_;
  end = __x->__end_;
  v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    if ((char *)end - (char *)__x->__begin_ < 0)
      abort();
    v6 = (unsigned int *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(v5 >> 2);
    this->__begin_ = v6;
    this->__end_ = v6;
    this->__end_cap_.__value_ = &v6[v7];
    memmove(v6, begin, v5);
    this->__end_ = (unsigned int *)((char *)v6 + v5);
  }
  return this;
}

_QWORD *std::vector<MTLUINT256_t>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<MTLUINT256_t>::__vallocate[abi:nn180100](a1, v5 >> 5);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<MTLUINT256_t>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 59)
    abort();
  result = (char *)operator new(32 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * a2];
  return result;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void std::__function::__func<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECF1A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECF1A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t AGCComputeFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 48))(*(_QWORD *)(a2 + 32));
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void std::__function::__func<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECEFB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECEFB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t AGCFragmentFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 64))(*(_QWORD *)(a2 + 32));
}

void AGCFragmentFunction::extractMetadata(uint64_t a1, uint64_t a2)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  BOOL v6;
  int *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[15];
  char v28;
  _QWORD v29[2];
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  v30[0] = 0;
  *(_QWORD *)((char *)v30 + 7) = 0;
  v29[0] = 0;
  *(_QWORD *)((char *)v29 + 7) = 0;
  if (*(_QWORD *)(a2 + 464))
  {
    v3 = (unsigned int **)(a2 + 464);
    if (!*(_QWORD *)(a2 + 472))
      v3 = (unsigned int **)(a2 + 1024);
  }
  else
  {
    v3 = (unsigned int **)(a2 + 1024);
  }
  v5 = *v3;
  v4 = v3[1];
  if (v5)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (v6)
    v7 = 0;
  else
    v7 = (int *)((char *)v5 + *v5);
  v8 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v8 >= 0xFu && (v9 = v8[7]) != 0)
    v10 = (int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9));
  else
    v10 = 0;
  v11 = (unsigned __int16 *)((char *)v10 - *v10);
  v12 = *v11;
  if (v12 < 5)
    goto LABEL_23;
  if (v11[2])
    v13 = (unsigned int *)((char *)v10 + v11[2] + *(unsigned int *)((char *)v10 + v11[2]));
  else
    v13 = 0;
  if (v12 >= 7 && (v14 = v11[3]) != 0)
  {
    v15 = (unsigned int *)((char *)v10 + v14 + *(unsigned int *)((char *)v10 + v14));
    if (!v13)
    {
LABEL_23:
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
LABEL_24:
      v20 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    v15 = 0;
    if (!v13)
      goto LABEL_23;
  }
  std::string::basic_string[abi:nn180100](&v26, v13 + 1, *v13);
  v16 = v28;
  v19 = v26;
  v30[0] = *(_QWORD *)v27;
  *(_QWORD *)((char *)v30 + 7) = *(_QWORD *)&v27[7];
  std::string::basic_string[abi:nn180100](&v26, v15 + 1, *v15);
  v18 = v28;
  v23 = *v10;
  v17 = v26;
  v29[0] = *(_QWORD *)v27;
  *(_QWORD *)((char *)v29 + 7) = *(_QWORD *)&v27[7];
  v24 = (unsigned __int16 *)((char *)v10 - v23);
  if (*v24 < 0x17u)
    goto LABEL_24;
  v25 = v24[11];
  if (!v25)
    goto LABEL_24;
  v20 = *((_BYTE *)v10 + v25) != 0;
LABEL_25:
  if (*(char *)(a1 + 335) < 0)
    operator delete(*(void **)(a1 + 312));
  v21 = v30[0];
  *(_QWORD *)(a1 + 312) = v19;
  *(_QWORD *)(a1 + 320) = v21;
  *(_QWORD *)(a1 + 327) = *(_QWORD *)((char *)v30 + 7);
  *(_BYTE *)(a1 + 335) = v16;
  if (*(char *)(a1 + 359) < 0)
    operator delete(*(void **)(a1 + 336));
  v22 = v29[0];
  *(_QWORD *)(a1 + 336) = v17;
  *(_QWORD *)(a1 + 344) = v22;
  *(_QWORD *)(a1 + 351) = *(_QWORD *)((char *)v29 + 7);
  *(_BYTE *)(a1 + 359) = v18;
  *(_BYTE *)(a1 + 360) = v20;
}

std::string *AGCFragmentFunction::extractMetadata(std::string *a1, uint64_t a2)
{
  std::string *result;

  std::string::operator=(a1 + 13, (const std::string *)(a2 + 16));
  result = std::string::operator=(a1 + 14, (const std::string *)(a2 + 40));
  a1[15].__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 64);
  return result;
}

std::string *AGCFragmentFunction::cacheMetadata(const std::string *a1, uint64_t a2)
{
  std::string *result;

  std::string::operator=((std::string *)(a2 + 16), a1 + 13);
  result = std::string::operator=((std::string *)(a2 + 40), a1 + 14);
  *(_BYTE *)(a2 + 64) = a1[15].__r_.__value_.__s.__data_[0];
  return result;
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  v6 = a1[3] - a1[2];
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 2), (v6 >> 2) + 8);
  v7 = a1[2] + v6;
  *(_DWORD *)v7 = ((*((_DWORD *)a1 + 6) - a1[2]) >> 2 << 8) | 0x3C;
  v8 = *(_OWORD *)(a1 + 5);
  *(_QWORD *)(v7 + 20) = a1[7];
  *(_OWORD *)(v7 + 4) = v8;
  (*(void (**)(_QWORD *))(*a1 + 48))(a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 88) & 1;
}

void std::__function::__func<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECF160;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECF160;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

_QWORD *AGCVertexFunction::createLLVMObject(AGCVertexFunction *this, AGCLLVMCtx *a2, llvm::LLVMContext *a3, llvm::Module *a4)
{
  char *v5;
  char *v6;

  if (*((char *)this + 175) < 0)
  {
    if (*((_QWORD *)this + 20))
      v5 = (char *)*((_QWORD *)this + 19);
    else
      v5 = 0;
  }
  else if (*((_BYTE *)this + 175))
  {
    v5 = (char *)this + 152;
  }
  else
  {
    v5 = 0;
  }
  if (*((char *)this + 199) < 0)
  {
    if (*((_QWORD *)this + 23))
      v6 = (char *)*((_QWORD *)this + 22);
    else
      v6 = 0;
  }
  else if (*((_BYTE *)this + 199))
  {
    v6 = (char *)this + 176;
  }
  else
  {
    v6 = 0;
  }
  return AGCLLVMAGPVertexShader::createAGPVertexShaderObject((uint64_t)a2, a4, (uint64_t)this + 48, (uint64_t)v5, (uint64_t)v6);
}

uint64_t AIRNTEmitPipelineImages(uint64_t *a1, uint64_t *a2, const char *a3, int a4, int a5, AGCTarget *this, Air::PipelineScript *a7, int a8, _QWORD *a9, char **a10, AGCError *a11)
{
  unsigned int v12;
  int v16;
  int v17;
  uint64_t *TargetContext;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unsigned int v27;
  BOOL v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  char *v34;
  std::string *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  void **v43;
  char *v44;
  BOOL v45;
  int *v46;
  unsigned __int16 *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  int *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  char *v54;
  int *v55;
  unsigned __int16 *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t (**v60)();
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  std::string v88;
  std::string v89;
  char v90;
  void *__p[2];
  int *v92;
  void *v93;
  void *v94;
  AGCError *v95;
  _QWORD *v96;
  char **v97;
  uint64_t v98;
  void *v99;
  __int128 v100;
  void *v101[2];
  __int128 v102;
  void *v103[2];
  void *v104[2];
  void *v105[4];
  void *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  std::string v114[2];
  char v115;
  void *v116;
  void *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  uint64_t v121;
  std::string v122;
  std::string::size_type v123;
  void *v124;
  char v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  char v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  std::string v143[2];
  char v144;

  v12 = this;
  v16 = AGCTarget::CPUSubtypeToTargetArch(this, a2, a3);
  if (!v16)
  {
    std::to_string(&v122, v12);
    v35 = std::string::insert(&v122, 0, "Unknown AGC target for CPU subtype: ");
    v42 = (int *)v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v92 = v42;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v92) >= 0)
      v43 = __p;
    else
      v43 = (void **)__p[0];
    AGCError::logError(a11, (char **)v43, v36, v37, v38, v39, v40, v41);
    if (SHIBYTE(v92) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v122.__r_.__value_.__l.__data_);
    return 0;
  }
  v17 = v16;
  TargetContext = (uint64_t *)AGCNativeTranslator::getTargetContext(a1, v16);
  v25 = *(_QWORD *)AGCNativeTranslator::getTargetContext(a1, v17);
  if (!v25)
  {
    v44 = "AGX key factory does not exist for target architecture.";
LABEL_45:
    AGCError::logError(a11, (char **)v44, v19, v20, v21, v22, v23, v24);
    return 0;
  }
  v26 = (unsigned __int16 *)((char *)a7 - *(int *)a7);
  v27 = *v26;
  if (v27 < 9 || !v26[4])
    goto LABEL_41;
  v28 = v27 >= 0xB && *((_BYTE *)a7 + v26[4]) == 1;
  if (v28 && v26[5])
  {
    v29 = (int *)((char *)a7 + v26[5] + *(unsigned int *)((char *)a7 + v26[5]));
    v144 = 0;
    memset(v143, 0, sizeof(v143));
    v30 = *v29;
    v31 = -v30;
    v32 = (char *)v29 - v30;
    v33 = *(unsigned __int16 *)((char *)v29 - v30);
    if (v33 >= 7)
    {
      if (!*((_WORD *)v32 + 3))
      {
LABEL_89:
        v65 = (char *)v29 + v31;
        if (!*((_WORD *)v65 + 2))
          goto LABEL_164;
        if (v33 >= 9 && *((_WORD *)v65 + 4))
          v66 = (char *)v29
              + *((unsigned __int16 *)v65 + 4)
              + *(unsigned int *)((char *)v29 + *((unsigned __int16 *)v65 + 4));
        else
          v66 = 0;
        if (SHIBYTE(v143[0].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v88, v143[0].__r_.__value_.__l.__data_, v143[0].__r_.__value_.__l.__size_);
        else
          v88 = v143[0];
        if (SHIBYTE(v143[1].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v89, v143[1].__r_.__value_.__l.__data_, v143[1].__r_.__value_.__l.__size_);
        else
          v89 = v143[1];
        v90 = v144;
        v86 = 0;
        v87 = 0;
        v84 = 0;
        v85 = 0;
        v82 = 0;
        v83 = 0;
        (*(void (**)(std::string *__return_ptr, uint64_t, char *, std::string *, _QWORD, void **, void **, _QWORD))(*(_QWORD *)v25 + 16))(&v122, v25, v66, &v88, 0, &v85, &v82, 0);
        if (v82)
        {
          v83 = v82;
          operator delete(v82);
        }
        if (v85)
        {
          v86 = v85;
          operator delete(v85);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        v68 = *a2;
        v69 = *(_QWORD *)a3;
        __p[0] = &unk_1E7ECEAA0;
        AGX::Impl::VertexProgramKey::VertexProgramKey((AGX::Impl::VertexProgramKey *)&__p[1], (const AGX::Impl::VertexProgramKey *)&v122);
        v109 = v69;
        v110 = &unk_1C3E4D9BB;
        v108 = v68;
        __p[0] = &off_1E7ECEA70;
        v58 = AGCModule<AGX::Impl::VertexProgramKey>::compileLLVMObject((uint64_t)__p, (uint64_t)TargetContext, a9, a10, a11, 0, 0);
        __p[0] = &unk_1E7ECEAA0;
        __p[1] = &off_1E7ED3720;
        if (SHIBYTE(v106) < 0)
          operator delete(v105[2]);
        if (SHIBYTE(v105[1]) < 0)
          operator delete(v104[1]);
        __p[1] = off_1E7ECEAD0;
        if (v103[0])
        {
          v103[1] = v103[0];
          operator delete(v103[0]);
        }
        if (v101[1])
        {
          *(void **)&v102 = v101[1];
          operator delete(v101[1]);
        }
        if (SHIBYTE(v100) < 0)
          operator delete(v99);
        __p[1] = off_1E7ECEB18;
        if (v93)
        {
          v94 = v93;
          operator delete(v93);
        }
        v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ED3720;
        if (SHIBYTE(v135) < 0)
          operator delete(v133);
        if (SHIBYTE(v132) < 0)
          operator delete(v130);
        v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7ECEAD0;
        if (v128)
        {
          v129 = v128;
          operator delete(v128);
        }
        if (v126)
        {
          v127 = v126;
          operator delete(v126);
        }
        if (v125 < 0)
          operator delete(v124);
        v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7ECEB18;
        if (v122.__r_.__value_.__r.__words[2])
        {
          v123 = v122.__r_.__value_.__r.__words[2];
          operator delete((void *)v122.__r_.__value_.__r.__words[2]);
        }
        if ((_DWORD)v58)
          goto LABEL_164;
LABEL_165:
        if (SHIBYTE(v143[1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143[1].__r_.__value_.__l.__data_);
        if (SHIBYTE(v143[0].__r_.__value_.__r.__words[2]) < 0)
        {
          v67 = (void *)v143[0].__r_.__value_.__r.__words[0];
          goto LABEL_169;
        }
        return v58;
      }
      if (v33 >= 0xB && *((_WORD *)v32 + 5))
        v34 = (char *)v29
            + *((unsigned __int16 *)v32 + 5)
            + *(unsigned int *)((char *)v29 + *((unsigned __int16 *)v32 + 5));
      else
        v34 = 0;
      v120 = 0;
      v119 = 0;
      v121 = 0;
      v118 = 0;
      v116 = 0;
      v117 = 0;
      (*(void (**)(std::string *__return_ptr, uint64_t, char *, _QWORD, _QWORD, void **, void **))(*(_QWORD *)v25 + 40))(&v122, v25, v34, 0, 0, &v119, &v116);
      if (v116)
      {
        v117 = v116;
        operator delete(v116);
      }
      if (v119)
      {
        v120 = v119;
        operator delete(v119);
      }
      v62 = a2[1];
      v63 = *((_QWORD *)a3 + 1);
      AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&__p[1], (const AGX::Impl::FragmentProgramKey *)&v122);
      v112 = v63;
      v113 = &unk_1C3E4D9BB;
      v111 = v62;
      __p[0] = &off_1E7ECEB58;
      memset(v114, 0, sizeof(v114));
      v115 = 0;
      if (!AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject((uint64_t)__p, (uint64_t)TargetContext, a9 + 1, a10 + 1, a11, 0, 0))
      {
        AGCFragmentFunction::~AGCFragmentFunction(__p);
        v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ED37F8;
        if (v141)
        {
          v142 = v141;
          operator delete(v141);
        }
        if (v139)
        {
          v140 = v139;
          operator delete(v139);
        }
        if (v138 < 0)
          operator delete(v137);
        if (SHIBYTE(v136) < 0)
          operator delete(v134);
        if (SHIBYTE(v133) < 0)
          operator delete(v131);
        v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7ECEBB8;
        if (v122.__r_.__value_.__r.__words[2])
        {
          v123 = v122.__r_.__value_.__r.__words[2];
          operator delete((void *)v122.__r_.__value_.__r.__words[2]);
        }
        v58 = 0;
        goto LABEL_165;
      }
      std::string::operator=(v143, v114);
      std::string::operator=(&v143[1], &v114[1]);
      v144 = v115;
      AGCFragmentFunction::~AGCFragmentFunction(__p);
      v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ED37F8;
      if (v141)
      {
        v142 = v141;
        operator delete(v141);
      }
      if (v139)
      {
        v140 = v139;
        operator delete(v139);
      }
      if (v138 < 0)
        operator delete(v137);
      if (SHIBYTE(v136) < 0)
        operator delete(v134);
      if (SHIBYTE(v133) < 0)
        operator delete(v131);
      v122.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7ECEBB8;
      if (v122.__r_.__value_.__r.__words[2])
      {
        v123 = v122.__r_.__value_.__r.__words[2];
        operator delete((void *)v122.__r_.__value_.__r.__words[2]);
      }
      v64 = *v29;
      v31 = -v64;
      v33 = *(unsigned __int16 *)((char *)v29 - v64);
    }
    if (v33 < 5)
    {
LABEL_164:
      v58 = 1;
      goto LABEL_165;
    }
    goto LABEL_89;
  }
  if (!v26[4])
    goto LABEL_41;
  v45 = v27 >= 0xB && *((_BYTE *)a7 + v26[4]) == 2;
  if (v45 && v26[5])
  {
    v46 = (int *)((char *)a7 + v26[5] + *(unsigned int *)((char *)a7 + v26[5]));
    v47 = (unsigned __int16 *)((char *)v46 - *v46);
    if (*v47 >= 7u && (v48 = v47[3]) != 0)
      v49 = (char *)v46 + v48 + *(unsigned int *)((char *)v46 + v48);
    else
      v49 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    v77 = 0;
    v78 = 0;
    v76 = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, char *, _QWORD, void **, void **))(*(_QWORD *)v25 + 48))(&v122, v25, v49, 0, &v79, &v76);
    if (v76)
    {
      v77 = v76;
      operator delete(v76);
    }
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
    }
    AGCModule<AGX::Impl::ComputeProgramKey>::AGCModule((uint64_t)__p, *a2, *(_QWORD *)a3, (uint64_t)&v122);
    __p[0] = &off_1E7ECEC10;
    v58 = AGCModule<AGX::Impl::ComputeProgramKey>::compileLLVMObject((uint64_t)__p, (uint64_t)TargetContext, a9, a10, a11, 0, 0);
    __p[0] = &unk_1E7ECEC40;
    __p[1] = &off_1E7ED3878;
    if (v103[0])
    {
      v103[1] = v103[0];
      operator delete(v103[0]);
    }
    if (v101[1])
    {
      *(void **)&v102 = v101[1];
      operator delete(v101[1]);
    }
    if (SHIBYTE(v100) < 0)
      operator delete(v99);
    v60 = off_1E7ECEC70;
    __p[1] = off_1E7ECEC70;
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
    v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ED3878;
    if (v128)
    {
      v129 = v128;
      operator delete(v128);
    }
    if (v126)
    {
      v127 = v126;
      operator delete(v126);
    }
    if (v125 < 0)
    {
      v61 = v124;
LABEL_124:
      operator delete(v61);
      goto LABEL_125;
    }
    goto LABEL_125;
  }
  if (!v26[4] || v27 < 0xB || *((_BYTE *)a7 + v26[4]) != 3 || (v50 = v26[5]) == 0)
  {
LABEL_41:
    v55 = (int *)Air::PipelineScript::pipeline_as_mesh_render(a7);
    if (v55)
    {
      __p[0] = TargetContext;
      __p[1] = a7;
      v92 = v55;
      v93 = a2;
      v94 = (void *)a3;
      v95 = a11;
      v96 = a9;
      v97 = a10;
      v100 = 0u;
      *(_OWORD *)v101 = 0u;
      v102 = 0u;
      *(_OWORD *)v103 = 0u;
      *(_OWORD *)v104 = 0u;
      memset(v105, 0, 26);
      v98 = *TargetContext;
      v56 = (unsigned __int16 *)((char *)v55 - *v55);
      v57 = *v56 < 5u || v56[2] == 0;
      LOBYTE(v99) = v57;
      v58 = AGCMeshPipeline::compile((AGCMeshPipeline *)__p);
      AGCMeshPipeline::~AGCMeshPipeline(__p);
      return v58;
    }
    v44 = "Unsupported pipeline script.";
    goto LABEL_45;
  }
  v51 = (int *)((char *)a7 + v50 + *(unsigned int *)((char *)a7 + v50));
  v52 = (unsigned __int16 *)((char *)v51 - *v51);
  if (*v52 >= 7u && (v53 = v52[3]) != 0)
    v54 = (char *)v51 + v53 + *(unsigned int *)((char *)v51 + v53);
  else
    v54 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, char *, void **, void **))(*(_QWORD *)v25 + 56))(&v122, v25, v54, &v73, &v70);
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  AGCTileFunction::AGCTileFunction((AGCTileFunction *)__p, (const char *)*a2, *(_QWORD *)a3, (const AGX::Impl::TileProgramKey *)&v122);
  v58 = AGCModule<AGX::Impl::TileProgramKey>::compileLLVMObject((uint64_t)__p, (uint64_t)TargetContext, a9, a10, a11, 0, 0);
  __p[0] = &unk_1E7ECECE0;
  __p[1] = &off_1E7ED3838;
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if (v105[1])
  {
    v105[2] = v105[1];
    operator delete(v105[1]);
  }
  v60 = off_1E7ECED10;
  __p[1] = off_1E7ECED10;
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ED3838;
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  v61 = v132;
  if (v132)
  {
    v133 = v132;
    goto LABEL_124;
  }
LABEL_125:
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
  v67 = (void *)v122.__r_.__value_.__r.__words[2];
  if (v122.__r_.__value_.__r.__words[2])
  {
    v123 = v122.__r_.__value_.__r.__words[2];
LABEL_169:
    operator delete(v67);
  }
  return v58;
}

uint64_t Air::PipelineScript::pipeline_as_mesh_render(Air::PipelineScript *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;

  v1 = (unsigned __int16 *)((char *)this - *(int *)this);
  v2 = *v1;
  if (v2 >= 9 && v1[4] && (v2 >= 0xB ? (v3 = *((_BYTE *)this + v1[4]) == 4) : (v3 = 0), v3 && (v4 = v1[5]) != 0))
    return (uint64_t)this + v4 + *(unsigned int *)((char *)this + v4);
  else
    return 0;
}

uint64_t AGCMeshPipeline::compile(AGCMeshPipeline *this)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v8;
  int64_t v9;
  char *v10;
  void *v11;
  int64_t v12;
  char *v13;
  int *v14;
  _QWORD *v15;
  char **v16;
  AGCError *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  int v35;
  uint64_t (***v36)(_QWORD);
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (***v43)(_QWORD);
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::string *v56;
  uint64_t v57;
  char *v58;
  std::string *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  void **v67;
  char **v68;
  void *v69[2];
  std::vector<unsigned int> v70;
  __int128 v71;
  __int128 v72;
  std::string v73;
  int v74;
  void *v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;
  void *__p;
  uint64_t (**v80)();
  uint64_t v81;
  std::vector<unsigned int> v82;
  __int128 v83;
  __int128 v84;
  std::string v85;
  int v86;
  void *v87;
  void *__dst;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  char *v96;
  char v97[8];
  std::string v98;
  std::string *v99;
  __int16 v100;
  char *v101;
  char v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int16 *)(*((_QWORD *)this + 2) - **((int **)this + 2));
  if (*v2 >= 5u && v2[2])
  {
    v3 = **((_QWORD **)this + 3);
    v4 = **((_QWORD **)this + 4);
    AGCMeshPipeline::compileMeshStage(this);
    v5 = *((_QWORD *)this + 8);
    v80 = 0;
    v81 = 0;
    __p = 0;
    memset(&v98, 0, sizeof(v98));
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v5 + 24))(v69);
    if (v98.__r_.__value_.__r.__words[0])
    {
      v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (__p)
    {
      v80 = (uint64_t (**)())__p;
      operator delete(__p);
    }
    __p = &unk_1E7ECEEB0;
    v80 = off_1E7ECEF28;
    LODWORD(v81) = v69[1];
    std::vector<unsigned int>::vector(&v82, &v70);
    v80 = off_1E7ECEEE0;
    v83 = v71;
    v84 = v72;
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v85, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
    else
      v85 = v73;
    v86 = v74;
    __dst = 0;
    v89 = 0;
    v87 = 0;
    v8 = v75;
    v9 = v76 - (_BYTE *)v75;
    if (v76 != v75)
    {
      std::vector<MTLUINT256_t>::__vallocate[abi:nn180100](&v87, v9 >> 5);
      v10 = (char *)__dst;
      memmove(__dst, v8, v9);
      __dst = &v10[v9];
    }
    v90 = 0;
    v91 = 0;
    v92 = 0;
    v11 = v77;
    v12 = v78 - v77;
    if (v78 != v77)
    {
      std::vector<MTLUINT256_t>::__vallocate[abi:nn180100](&v90, v12 >> 5);
      v13 = (char *)v91;
      memmove(v91, v11, v12);
      v91 = &v13[v12];
      v11 = v77;
    }
    v93 = v3;
    v94 = v4;
    v95 = (const char *)&unk_1C3E4D9BB;
    __p = &off_1E7ECEE80;
    v80 = (uint64_t (**)())&off_1E7ED37B0;
    v69[0] = off_1E7ECEEE0;
    if (v11)
    {
      v78 = v11;
      operator delete(v11);
    }
    if (v75)
    {
      v76 = v75;
      operator delete(v75);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    v69[0] = off_1E7ECEF28;
    if (v70.__begin_)
    {
      v70.__end_ = v70.__begin_;
      operator delete(v70.__begin_);
    }
    v14 = *(int **)this;
    v16 = (char **)*((_QWORD *)this + 6);
    v15 = (_QWORD *)*((_QWORD *)this + 7);
    v17 = (AGCError *)*((_QWORD *)this + 5);
    mach_absolute_time();
    v24 = *((_QWORD *)v14 + 2);
    if (!v24)
    {
      AGCError::logError(v17, (char **)"Failed to initialize AGX backend for target architecture.", v18, v19, v20, v21, v22, v23);
LABEL_76:
      __p = &unk_1E7ECEEB0;
      v80 = off_1E7ECEEE0;
      if (v90)
      {
        v91 = v90;
        operator delete(v90);
      }
      if (v87)
      {
        __dst = v87;
        operator delete(v87);
      }
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      v80 = off_1E7ECEF28;
      if (v82.__begin_)
      {
        v82.__end_ = v82.__begin_;
        operator delete(v82.__begin_);
      }
      return v24;
    }
    *(_BYTE *)(v24 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses((AGCLLVMCtx *)v24);
    MEMORY[0x1CAA2C330](v97);
    v25 = v93;
    if (!v93)
      goto LABEL_48;
    if (v95)
      strlen(v95);
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    v26 = v98.__r_.__value_.__r.__words[0];
    v98.__r_.__value_.__r.__words[0] = 0;
    if (v26)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v26 + 8))(v26);
    if ((v102 & 1) != 0)
    {
      v58 = v101;
      v101 = 0;
      v96 = v58;
      llvm::toString(&v98, &v96);
      v59 = std::string::insert(&v98, 0, "Error parsing bitcode file: ");
      v66 = (unsigned int *)v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)v69 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v70.__begin_ = v66;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v70.__begin_) >= 0)
        v67 = v69;
      else
        v67 = (void **)v69[0];
      AGCError::logError(v17, (char **)v67, v60, v61, v62, v63, v64, v65);
      if (SHIBYTE(v70.__begin_) < 0)
        operator delete(v69[0]);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (v96)
        (*(void (**)(char *))(*(_QWORD *)v96 + 8))(v96);
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v101);
      goto LABEL_64;
    }
    v25 = (uint64_t)v101;
    v101 = 0;
    v100 = 260;
    v98.__r_.__value_.__r.__words[0] = v25 + 216;
    MEMORY[0x1CAA2CCA8](v69, &v98);
    if (LODWORD(v70.__end_) == 49
      && LODWORD(v70.__end_cap_.__value_) == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&v98, (const llvm::Triple *)v69),
          pluginSupportsOSVersion((uint64_t)v98.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v69), !v27))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&v98, (const llvm::Triple *)v69);
      v35 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v98;
      else
        v34 = (std::string *)v98.__r_.__value_.__r.__words[0];
      AGCError::logError(v17, &v34->__r_.__value_.__l.__data_, v28, v29, v30, v31, v32, v33);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      v35 = 0;
    }
    if (SHIBYTE(v70.__begin_) < 0)
      operator delete(v69[0]);
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v101);
    if (v35)
    {
LABEL_48:
      v36 = (uint64_t (***)(_QWORD))(*(uint64_t (**)(void **, uint64_t, char *, uint64_t))__p)(&__p, v24, v97, v25);
      if (v36)
      {
        v43 = v36;
        if (((**v36)(v36) & 1) == 0)
        {
          if (*((char *)v43 + 31) >= 0)
            v68 = (char **)(v43 + 1);
          else
            v68 = (char **)v43[1];
          AGCError::logError(v17, v68, v44, v45, v46, v47, v48, v49);
          v24 = 0;
          goto LABEL_74;
        }
        v101 = 0;
        v96 = 0;
        *(_OWORD *)v69 = 0u;
        *(_OWORD *)&v70.__begin_ = 0u;
        v98.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ECEF68;
        v98.__r_.__value_.__l.__size_ = (std::string::size_type)&__p;
        v99 = &v98;
        v24 = ((uint64_t (*)(uint64_t (***)(_QWORD), char **, char **, void **, std::string *))(*v43)[1])(v43, &v101, &v96, v69, &v98);
        v56 = v99;
        if (v99 == &v98)
        {
          v57 = 4;
          v56 = &v98;
        }
        else
        {
          if (!v99)
            goto LABEL_71;
          v57 = 5;
        }
        (*(void (**)(void))(v56->__r_.__value_.__r.__words[0] + 8 * v57))();
LABEL_71:
        if ((v24 & 1) != 0)
        {
          *v16 = v101;
          *v15 = v96;
        }
        else
        {
          AGCError::logError(v17, (char **)"Error occurred composing compiler reply.", v50, v51, v52, v53, v54, v55);
        }
LABEL_74:
        (*v43)[4](v43);
        goto LABEL_75;
      }
      AGCError::logError(v17, (char **)"Cannot create AGC LLVM object.", v37, v38, v39, v40, v41, v42);
    }
LABEL_64:
    v24 = 0;
LABEL_75:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v97);
    goto LABEL_76;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 6);
  if (v6 && *((_QWORD *)this + 7))
  {
    *v6 = 0;
    **((_QWORD **)this + 7) = 0;
  }
  return AGCMeshPipeline::compileMeshStage(this);
}

void AGCMeshPipeline::~AGCMeshPipeline(void **this)
{
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
}

uint64_t AGCMeshPipeline::compileMeshStage(AGCMeshPipeline *this)
{
  unsigned __int16 *v1;
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char **v18;
  int *v19;
  unsigned __int16 *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char **v28;
  uint64_t v30;
  _QWORD v31[2];
  void *v32;
  void *v33;
  void *v34;
  char v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  std::string v40;
  std::string __p;
  void *v42;
  char v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  std::string v48;
  std::string v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  std::string v60[2];
  char v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v1 = (unsigned __int16 *)(*((_QWORD *)this + 2) - **((int **)this + 2));
  v2 = *v1;
  if (v2 < 7 || !v1[3])
    return 0;
  v4 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 4);
  v6 = *(_QWORD *)(v4 + 8);
  v7 = *(_QWORD *)(v5 + 8);
  if (v2 >= 9 && v1[4])
  {
    v8 = *((_QWORD *)this + 8);
    v30 = *(_QWORD *)(v4 + 16);
    v11 = *(_QWORD *)(v5 + 16);
    v71 = 0;
    v69 = 0u;
    v70 = 0u;
    v68 = 0u;
    v66 = 0;
    v67 = 0;
    v64 = 0;
    v65 = 0;
    v62 = 0;
    v63 = 0;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v8 + 32))(v31);
    if (v62)
    {
      v63 = v62;
      operator delete(v62);
    }
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (SHIBYTE(v70) < 0)
      operator delete(*((void **)&v69 + 1));
    if (SBYTE7(v69) < 0)
      operator delete((void *)v68);
    v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    v13 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E7ECED80;
    AGX::Impl::MeshProgramKey::MeshProgramKey((AGX::Impl::MeshProgramKey *)&v48.__r_.__value_.__r.__words[1], (const AGX::Impl::MeshProgramKey *)v31);
    v52 = v13;
    v53 = &unk_1C3E4D9BB;
    v51 = v12;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ECED50;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    LOWORD(v57) = 0;
    if (AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject((uint64_t)&v48, *(_QWORD *)this, 0, 0, *((AGCError **)this + 5)))
    {
      std::string::operator=((std::string *)((char *)this + 80), (const std::string *)&v54);
      std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)&v55 + 8));
    }
    AGCMeshFunction::~AGCMeshFunction((void **)&v48.__r_.__value_.__l.__data_);
    v31[0] = &off_1E7ED3768;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v31[0] = off_1E7ECEDB0;
    if (v38)
    {
      v39 = v38;
      operator delete(v38);
    }
    if (v36)
    {
      v37 = v36;
      operator delete(v36);
    }
    if (v35 < 0)
      operator delete(v34);
    v31[0] = off_1E7ECEDF8;
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    v14 = *((_QWORD *)this + 8);
    v68 = 0uLL;
    *(_QWORD *)&v69 = 0;
    v66 = 0;
    v67 = 0;
    v65 = 0;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v14 + 40))(v31);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if ((_QWORD)v68)
    {
      *((_QWORD *)&v68 + 1) = v68;
      operator delete((void *)v68);
    }
    if (*((char *)this + 103) < 0)
      std::string::__init_copy_ctor_external(&v48, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    else
      v48 = *(std::string *)((char *)this + 80);
    if (*((char *)this + 127) < 0)
      std::string::__init_copy_ctor_external(&v49, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
    else
      v49 = *(std::string *)((char *)this + 104);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v40 = v48;
    *((_BYTE *)&v48.__r_.__value_.__s + 23) = 0;
    v48.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v49;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E7ECEB88;
    AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v48.__r_.__value_.__r.__words[1], (const AGX::Impl::FragmentProgramKey *)v31);
    v58 = v11;
    v59 = &unk_1C3E4D9BB;
    v57 = v30;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ECEB58;
    memset(v60, 0, sizeof(v60));
    v61 = 0;
    v31[0] = &off_1E7ED37F8;
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v43 < 0)
      operator delete(v42);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v31[0] = off_1E7ECEBB8;
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    v15 = *((_QWORD *)this + 6);
    if (v15)
      v16 = (_QWORD *)(v15 + 16);
    else
      v16 = 0;
    v17 = *((_QWORD *)this + 7);
    if (v17)
      v18 = (char **)(v17 + 16);
    else
      v18 = 0;
    if (AGCModule<AGX::Impl::FragmentProgramKey>::compileLLVMObject((uint64_t)&v48, *(_QWORD *)this, v16, v18, *((AGCError **)this + 5), 0, 0))
    {
      std::string::operator=((std::string *)((char *)this + 128), v60);
      std::string::operator=((std::string *)((char *)this + 152), &v60[1]);
      *((_BYTE *)this + 176) = v61;
    }
    AGCFragmentFunction::~AGCFragmentFunction((void **)&v48.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = *((_QWORD *)this + 6);
    if (v10 && *((_QWORD *)this + 7))
    {
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)(*((_QWORD *)this + 7) + 16) = 0;
    }
  }
  v19 = (int *)*((_QWORD *)this + 2);
  v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0xDu && (v21 = v20[6]) != 0)
    v22 = (char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21);
  else
    v22 = 0;
  v23 = *((_QWORD *)this + 8);
  if (*((char *)this + 151) < 0)
    std::string::__init_copy_ctor_external(&v48, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  else
    v48 = *(std::string *)((char *)this + 128);
  if (*((char *)this + 175) < 0)
    std::string::__init_copy_ctor_external(&v49, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
  else
    v49 = *(std::string *)((char *)this + 152);
  v50 = *((_BYTE *)this + 176);
  v24 = *((unsigned __int8 *)this + 72);
  *(_QWORD *)&v69 = 0;
  v67 = 0;
  v68 = 0uLL;
  v65 = 0;
  v66 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, char *, std::string *, _QWORD, uint64_t, _QWORD, __int128 *, void **, _BYTE))(*(_QWORD *)v23 + 32))(v31, v23, v22, &v48, 0, v24, 0, &v68, &v65, 0);
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if ((_QWORD)v68)
  {
    *((_QWORD *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E7ECED80;
  AGX::Impl::MeshProgramKey::MeshProgramKey((AGX::Impl::MeshProgramKey *)&v48.__r_.__value_.__r.__words[1], (const AGX::Impl::MeshProgramKey *)v31);
  v52 = v7;
  v53 = &unk_1C3E4D9BB;
  v51 = v6;
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7ECED50;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  LOWORD(v57) = 0;
  v31[0] = &off_1E7ED3768;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  v31[0] = off_1E7ECEDB0;
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v35 < 0)
    operator delete(v34);
  v31[0] = off_1E7ECEDF8;
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  v25 = *((_QWORD *)this + 6);
  if (v25)
    v26 = (_QWORD *)(v25 + 8);
  else
    v26 = 0;
  v27 = *((_QWORD *)this + 7);
  if (v27)
    v28 = (char **)(v27 + 8);
  else
    v28 = 0;
  v9 = AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject((uint64_t)&v48, *(_QWORD *)this, v26, v28, *((AGCError **)this + 5));
  if ((_DWORD)v9)
    *((_WORD *)this + 92) = v57;
  AGCMeshFunction::~AGCMeshFunction((void **)&v48.__r_.__value_.__l.__data_);
  return v9;
}

void std::__function::__func<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECEF68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECEF68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::ObjectProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  v6 = a1[3] - a1[2];
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 2), (v6 >> 2) + 10);
  v7 = a1[2] + v6;
  *(_DWORD *)v7 = ((*((_DWORD *)a1 + 6) - a1[2]) >> 2 << 8) | 0x3D;
  v8 = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v7 + 20) = *(_OWORD *)(a1 + 7);
  *(_OWORD *)(v7 + 4) = v8;
  (*(void (**)(_QWORD *))(*a1 + 48))(a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) & 1;
}

uint64_t AGCObjectFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 96))(*(_QWORD *)(a2 + 32));
}

AGX::Impl::MeshProgramKey *AGX::Impl::MeshProgramKey::MeshProgramKey(AGX::Impl::MeshProgramKey *this, const AGX::Impl::MeshProgramKey *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_QWORD *)this = off_1E7ECEDF8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  std::vector<unsigned int>::vector((std::vector<unsigned int> *)((char *)this + 16), (const std::vector<unsigned int> *)((char *)a2 + 16));
  *(_QWORD *)this = off_1E7ECEDB0;
  v4 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v4;
  v5 = (std::string *)((char *)this + 72);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 72);
    *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  std::vector<MTLUINT256_t>::vector((_QWORD *)this + 13, (uint64_t)a2 + 104);
  std::vector<MTLUINT256_t>::vector((_QWORD *)this + 16, (uint64_t)a2 + 128);
  *(_QWORD *)this = &off_1E7ED3768;
  v7 = (std::string *)((char *)this + 152);
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 152);
    *((_QWORD *)this + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 11);
    *((_QWORD *)this + 24) = *((_QWORD *)a2 + 24);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *((_BYTE *)this + 200) = *((_BYTE *)a2 + 200);
  return this;
}

uint64_t AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(uint64_t a1, uint64_t a2, _QWORD *a3, char **a4, AGCError *a5)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  AGCLLVMCtx *v16;
  uint64_t v17;
  uint64_t v18;
  std::string::size_type v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string *p_p;
  int v28;
  uint64_t (***v29)(_QWORD);
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (***v36)(_QWORD);
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  std::string *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string::size_type v59;
  void **v60;
  char **v61;
  std::string __p;
  __int16 v64;
  void *v65[2];
  __int128 v66;
  int v67;
  char *v68;
  _BYTE v69[15];
  _QWORD v70[3];
  _QWORD *v71;
  char *v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  mach_absolute_time();
  v16 = *(AGCLLVMCtx **)(a2 + 16);
  if (v16)
  {
    *((_BYTE *)v16 + 377) = 0;
    AGCLLVMCtx::createGraphicsPasses(v16);
    MEMORY[0x1CAA2C330](v69);
    v17 = *(_QWORD *)(a1 + 216);
    if (!v17)
      goto LABEL_22;
    if (*(_QWORD *)(a1 + 232))
      strlen(*(const char **)(a1 + 232));
    llvm::MemoryBuffer::getMemBuffer();
    llvm::MemoryBufferRef::MemoryBufferRef();
    llvm::parseBitcodeFile();
    v19 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v19)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v19 + 8))(v19);
    if ((v73 & 1) != 0)
    {
      v51 = v72;
      v72 = 0;
      v68 = v51;
      llvm::toString(&__p, &v68);
      v52 = std::string::insert(&__p, 0, "Error parsing bitcode file: ");
      v59 = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)v65 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      *(_QWORD *)&v66 = v59;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      if ((SBYTE7(v66) & 0x80u) == 0)
        v60 = v65;
      else
        v60 = (void **)v65[0];
      AGCError::logError(a5, (char **)v60, v53, v54, v55, v56, v57, v58);
      if (SBYTE7(v66) < 0)
        operator delete(v65[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v68)
        (*(void (**)(char *))(*(_QWORD *)v68 + 8))(v68);
      llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v72);
      goto LABEL_38;
    }
    v17 = (uint64_t)v72;
    v72 = 0;
    v64 = 260;
    __p.__r_.__value_.__r.__words[0] = v17 + 216;
    MEMORY[0x1CAA2CCA8](v65, &__p);
    if (DWORD2(v66) == 49
      && v67 == 1
      && (AGCOSVersion::AGCOSVersion((AGCOSVersion *)&__p, (const llvm::Triple *)v65),
          pluginSupportsOSVersion((uint64_t)__p.__r_.__value_.__l.__data_))
      && (llvm::Triple::getEnvironmentName((llvm::Triple *)v65), !v20))
    {
      AGCTargetOS::AGCTargetOS((AGCTargetOS *)&__p, (const llvm::Triple *)v65);
      v28 = 1;
    }
    else
    {
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      AGCError::logError(a5, &p_p->__r_.__value_.__l.__data_, v21, v22, v23, v24, v25, v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v28 = 0;
    }
    if (SBYTE7(v66) < 0)
      operator delete(v65[0]);
    llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected((uint64_t *)&v72);
    if (v28)
    {
LABEL_22:
      v29 = (uint64_t (***)(_QWORD))(**(uint64_t (***)(uint64_t, AGCLLVMCtx *, _BYTE *, uint64_t))a1)(a1, v16, v69, v17);
      if (v29)
      {
        v36 = v29;
        if (((**v29)(v29) & 1) == 0)
        {
          if (*((char *)v36 + 31) >= 0)
            v61 = (char **)(v36 + 1);
          else
            v61 = (char **)v36[1];
          AGCError::logError(a5, v61, v37, v38, v39, v40, v41, v42);
          v18 = 0;
          goto LABEL_48;
        }
        __p.__r_.__value_.__r.__words[0] = 0;
        v72 = 0;
        *(_OWORD *)v65 = 0u;
        v66 = 0u;
        v70[0] = &off_1E7ECEE38;
        v70[1] = a1;
        v71 = v70;
        v18 = ((uint64_t (*)(uint64_t (***)(_QWORD), std::string *, char **, void **, _QWORD *))(*v36)[1])(v36, &__p, &v72, v65, v70);
        v49 = v71;
        if (v71 == v70)
        {
          v50 = 4;
          v49 = v70;
        }
        else
        {
          if (!v71)
            goto LABEL_45;
          v50 = 5;
        }
        (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_45:
        if ((v18 & 1) != 0)
        {
          *a3 = __p.__r_.__value_.__r.__words[0];
          *a4 = v72;
        }
        else
        {
          AGCError::logError(a5, (char **)"Error occurred composing compiler reply.", v43, v44, v45, v46, v47, v48);
        }
LABEL_48:
        (*v36)[4](v36);
        goto LABEL_49;
      }
      AGCError::logError(a5, (char **)"Cannot create AGC LLVM object.", v30, v31, v32, v33, v34, v35);
    }
LABEL_38:
    v18 = 0;
LABEL_49:
    llvm::LLVMContext::~LLVMContext((llvm::LLVMContext *)v69);
    return v18;
  }
  AGCError::logError(a5, (char **)"Failed to initialize AGX backend for target architecture.", v10, v11, v12, v13, v14, v15);
  return 0;
}

void AGCMeshFunction::~AGCMeshFunction(void **this)
{
  void *v2;
  void *v3;
  void *v4;

  *this = &off_1E7ECED50;
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  if (*((char *)this + 263) < 0)
    operator delete(this[30]);
  *this = &unk_1E7ECED80;
  this[1] = &off_1E7ED3768;
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  this[1] = off_1E7ECEDB0;
  v2 = this[17];
  if (v2)
  {
    this[18] = v2;
    operator delete(v2);
  }
  v3 = this[14];
  if (v3)
  {
    this[15] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  this[1] = off_1E7ECEDF8;
  v4 = this[3];
  if (v4)
  {
    this[4] = v4;
    operator delete(v4);
  }
}

void std::__function::__func<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::~__func()
{
  JUMPOUT(0x1CAA2D68CLL);
}

_QWORD *std::__function::__func<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7ECEE38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7ECEE38;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1},std::allocator<AGCModule<AGX::Impl::MeshProgramKey>::compileLLVMObject(AGCTargetContext *,char **,unsigned long *,char **,char **,unsigned long *)::{lambda(AGCDeserializedReply const&)#1}>,void ()(AGCDeserializedReply const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

void AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::serialize(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::initializeStream((uint64_t)a1);
  v6 = a1[3] - a1[2];
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(a1 + 2), (v6 >> 2) + 10);
  v7 = a1[2] + v6;
  *(_DWORD *)v7 = ((*((_DWORD *)a1 + 6) - a1[2]) >> 2 << 8) | 0x3E;
  v8 = *(_OWORD *)(a1 + 5);
  *(_OWORD *)(v7 + 20) = *(_OWORD *)(a1 + 7);
  *(_OWORD *)(v7 + 4) = v8;
  (*(void (**)(_QWORD *))(*a1 + 48))(a1);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(a1);
  *a2 = a1[2];
  *a3 = a1[3] - a1[2];
}

uint64_t AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) & 1;
}

uint64_t AGCMeshFunction::createLLVMObject(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 32);
  if ((*(_BYTE *)(a1 + 64) & 0x80) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 120))(v3);
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
}

void AGCMeshFunction::extractMetadata(uint64_t a1, uint64_t a2)
{
  unsigned int **v4;
  unsigned int *v5;
  unsigned int *v6;
  BOOL v7;
  int *v8;
  unsigned __int16 *v9;
  uint64_t v10;
  int *v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int *v25;
  BOOL v26;
  int *v27;
  unsigned __int16 *v28;
  uint64_t v29;
  int *v30;
  unsigned __int16 *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  _BYTE v37[15];
  char v38;
  _QWORD v39[2];
  _QWORD v40[3];

  v40[2] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 64) & 0x80) == 0)
    goto LABEL_32;
  v40[0] = 0;
  *(_QWORD *)((char *)v40 + 7) = 0;
  v39[0] = 0;
  *(_QWORD *)((char *)v39 + 7) = 0;
  if (*(_QWORD *)(a2 + 464))
  {
    v4 = (unsigned int **)(a2 + 464);
    if (!*(_QWORD *)(a2 + 472))
      v4 = (unsigned int **)(a2 + 1024);
  }
  else
  {
    v4 = (unsigned int **)(a2 + 1024);
  }
  v6 = *v4;
  v5 = v4[1];
  if (v6)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7)
    v8 = 0;
  else
    v8 = (int *)((char *)v6 + *v6);
  v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0xDu && (v10 = v9[6]) != 0)
    v11 = (int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10));
  else
    v11 = 0;
  v12 = (unsigned __int16 *)((char *)v11 - *v11);
  v13 = *v12;
  if (v13 < 0xB)
    goto LABEL_24;
  if (v12[5])
    v14 = (unsigned int *)((char *)v11 + v12[5] + *(unsigned int *)((char *)v11 + v12[5]));
  else
    v14 = 0;
  if (v13 < 0xD || (v15 = v12[6]) == 0)
  {
    v16 = 0;
    if (!v14)
      goto LABEL_24;
LABEL_26:
    std::string::basic_string[abi:nn180100](&v36, v14 + 1, *v14);
    v18 = v38;
    v17 = v36;
    v40[0] = *(_QWORD *)v37;
    *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)&v37[7];
    std::string::basic_string[abi:nn180100](&v36, v16 + 1, *v16);
    v20 = v38;
    v19 = v36;
    v39[0] = *(_QWORD *)v37;
    *(_QWORD *)((char *)v39 + 7) = *(_QWORD *)&v37[7];
    goto LABEL_27;
  }
  v16 = (unsigned int *)((char *)v11 + v15 + *(unsigned int *)((char *)v11 + v15));
  if (v14)
    goto LABEL_26;
LABEL_24:
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
LABEL_27:
  if (*(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  v21 = v40[0];
  *(_QWORD *)(a1 + 240) = v17;
  *(_QWORD *)(a1 + 248) = v21;
  *(_QWORD *)(a1 + 255) = *(_QWORD *)((char *)v40 + 7);
  *(_BYTE *)(a1 + 263) = v18;
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  v22 = v39[0];
  *(_QWORD *)(a1 + 264) = v19;
  *(_QWORD *)(a1 + 272) = v22;
  *(_QWORD *)(a1 + 279) = *(_QWORD *)((char *)v39 + 7);
  *(_BYTE *)(a1 + 287) = v20;
LABEL_32:
  if (*(_QWORD *)(a2 + 464))
  {
    v23 = (unsigned int **)(a2 + 464);
    if (!*(_QWORD *)(a2 + 472))
      v23 = (unsigned int **)(a2 + 1024);
  }
  else
  {
    v23 = (unsigned int **)(a2 + 1024);
  }
  v25 = *v23;
  v24 = v23[1];
  if (v25)
    v26 = v24 == 0;
  else
    v26 = 1;
  if (v26)
    v27 = 0;
  else
    v27 = (int *)((char *)v25 + *v25);
  v28 = (unsigned __int16 *)((char *)v27 - *v27);
  if (*v28 >= 0x17u && (v29 = v28[11]) != 0)
    v30 = (int *)((char *)v27 + v29 + *(unsigned int *)((char *)v27 + v29));
  else
    v30 = 0;
  v31 = (unsigned __int16 *)((char *)v30 - *v30);
  v32 = *v31;
  if (v32 <= 0x32)
  {
    v35 = 0;
    *(_BYTE *)(a1 + 288) = 0;
  }
  else
  {
    v33 = v31[25];
    if (v31[25])
      LOBYTE(v33) = *((_BYTE *)v30 + v33) != 0;
    *(_BYTE *)(a1 + 288) = v33;
    v35 = v32 >= 0x3B && (v34 = v31[29]) != 0 && *((_BYTE *)v30 + v34) != 0;
  }
  *(_BYTE *)(a1 + 289) = v35;
}

std::string *AGCMeshFunction::extractMetadata(uint64_t a1, uint64_t a2)
{
  std::string *result;

  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 72));
  result = std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a2 + 96));
  *(_WORD *)(a1 + 288) = *(_WORD *)(a2 + 120);
  return result;
}

std::string *AGCMeshFunction::cacheMetadata(uint64_t a1, uint64_t a2)
{
  std::string *result;

  std::string::operator=((std::string *)(a2 + 72), (const std::string *)(a1 + 240));
  result = std::string::operator=((std::string *)(a2 + 96), (const std::string *)(a1 + 264));
  *(_WORD *)(a2 + 120) = *(_WORD *)(a1 + 288);
  return result;
}

_QWORD *AIRNTGetLegalizationPasses(int a1, unsigned int a2, AGCTarget *this, _QWORD *a4, _QWORD *a5)
{
  unsigned __int16 v7;
  _UNKNOWN **v8;
  _QWORD *result;
  uint64_t v10;
  unsigned int v11;

  v7 = AGCTarget::CPUSubtypeToTargetArch(this, a2, (const char *)this);
  v11 = 0;
  v8 = AGCTarget::Get(v7);
  result = (*((_QWORD *(**)(uint64_t *__return_ptr, _UNKNOWN **, unsigned int *))*v8 + 2))(&v10, v8, &v11);
  *a4 = v10;
  *a5 = v11;
  return result;
}

_UNKNOWN **AGCTarget::Get(unsigned __int16 a1)
{
  int v2;
  _UNKNOWN **result;

  v2 = a1;
  result = &AGCTarget::Get(AGCTargetArch)::target;
  switch(v2)
  {
    case 4:
      result = &AGCTargetG5::Get(void)::target;
      break;
    case 6:
    case 7:
      result = &AGCTargetG9::Get(void)::target;
      break;
    case 8:
      result = &AGCTargetG10::Get(void)::target;
      break;
    case 9:
    case 10:
    case 11:
    case 23:
      result = &AGCTargetG11::Get(void)::target;
      break;
    case 12:
      result = &AGCTargetG12::Get(void)::target;
      break;
    case 14:
    case 16:
    case 25:
    case 26:
    case 27:
      result = &AGCTargetG13::Get(void)::target;
      break;
    case 17:
    case 18:
      result = &AGCTargetG14::Get(void)::target;
      break;
    case 19:
    case 20:
    case 21:
      result = &AGCTargetG14X::Get(void)::target;
      break;
    case 22:
      result = &AGCTargetG15_AGX2::Get(void)::target;
      break;
    case 24:
      if (a1 == 22)
        result = &AGCTargetG15::Get(AGCTargetArch)::target;
      else
        result = &AGCTargetG15::Get(AGCTargetArch)::target;
      break;
    case 31:
      result = &AGCTargetG16::Get(void)::target;
      break;
    case 32:
    case 34:
      result = &AGCTargetHAL200::Get(void)::target;
      break;
    default:
      return result;
  }
  return result;
}

void AGCNullTarget::CreateProgramKeyFactory(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void AGCNullTarget::CreateTGSizeToTempTable(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  *a1 = 0;
  *a2 = 0;
}

void AGCTarget::GetLegalizationPasses(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AGCTarget::requiresRayTracingEmulation(AGCTarget *this)
{
  return 0;
}

uint64_t AGCNullTarget::maxMSAASampleCount(AGCNullTarget *this)
{
  return 0;
}

uint64_t AGCTarget::TargetArchToCPUSubtypeImpl(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((unsigned __int16)(a1 - 4) < 0x18u && ((0xEBF5FDu >> (a1 - 4)) & 1) != 0)
  {
    v3 = (unsigned __int16)(a1 - 4);
    v2 = qword_1C3DF8A80[v3];
    v1 = qword_1C3DF8B40[v3];
    return v1 | v2;
  }
  if (a1 > 196631)
  {
    if (a1 <= 196639)
    {
      if (a1 != 196632)
      {
        if (a1 != 196639)
          goto LABEL_30;
        v1 = 0xF300000000;
        goto LABEL_26;
      }
      v1 = 0x5300000000;
    }
    else
    {
      if (a1 == 196640)
      {
        v1 = 0x19300000000;
        goto LABEL_24;
      }
      if (a1 == 262175)
      {
        v1 = 0x1B300000000;
        goto LABEL_26;
      }
      if (a1 != 327704)
        goto LABEL_30;
      v1 = 0x11300000000;
    }
LABEL_29:
    v2 = 275;
    return v1 | v2;
  }
  if (a1 <= 65567)
  {
    if (a1 != 65560)
    {
      if (a1 != 65567)
        goto LABEL_30;
      v1 = 0xE300000000;
LABEL_26:
      v2 = 435;
      return v1 | v2;
    }
    v1 = 0x4300000000;
    goto LABEL_29;
  }
  if (a1 == 65568)
  {
    v1 = 0x10300000000;
LABEL_24:
    v2 = 403;
    return v1 | v2;
  }
  if (a1 == 65570)
  {
    v1 = 0x14300000000;
    v2 = 323;
    return v1 | v2;
  }
  if (a1 != 196630)
  {
LABEL_30:
    v2 = 0;
    v1 = 0;
    return v1 | v2;
  }
  v1 = 0x26200000000;
  v2 = 610;
  return v1 | v2;
}

uint64_t AGCTarget::CPUSubtypeToTargetArch(AGCTarget *this, unsigned int a2, const char *a3)
{
  int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;

  v3 = (int)this;
  if ((int)this > 289)
  {
    if ((int)this <= 433)
    {
      if ((int)this > 369)
      {
        switch((_DWORD)this)
        {
          case 0x172:
            return 196625;
          case 0x192:
            return 196626;
          case 0x193:
            return 196640;
        }
      }
      else
      {
        switch((_DWORD)this)
        {
          case 0x122:
            return 196622;
          case 0x142:
            return 196624;
          case 0x143:
            return 65570;
        }
      }
    }
    else if ((int)this <= 529)
    {
      switch((_DWORD)this)
      {
        case 0x1B2:
          return 196627;
        case 0x1B3:
          return 262175;
        case 0x1F2:
          return 196629;
      }
    }
    else if ((int)this > 593)
    {
      if ((_DWORD)this == 594)
      {
        v5 = 19;
        goto LABEL_62;
      }
      if ((_DWORD)this == 610)
        return 196630;
    }
    else
    {
      if ((_DWORD)this == 530)
      {
        v5 = 17;
        goto LABEL_62;
      }
      if ((_DWORD)this == 562)
      {
        v5 = 18;
        goto LABEL_62;
      }
    }
  }
  else
  {
    result = 327684;
    if (v3 <= 96)
    {
      if (v3 > 80)
      {
        switch(v3)
        {
          case 'Q':
            return 65542;
          case 'R':
            return 196618;
          case 'S':
            return 196632;
        }
      }
      else
      {
        switch(v3)
        {
          case '"':
            return 196616;
          case 'A':
            return result;
          case 'C':
            return 65560;
        }
      }
      return 0;
    }
    if (v3 <= 226)
    {
      switch(v3)
      {
        case 97:
          v7 = 65542;
          break;
        case 114:
          v7 = 196616;
          break;
        case 210:
          return 196620;
        default:
          return 0;
      }
      return v7 | 1u;
    }
    if (v3 > 258)
    {
      if (v3 == 259)
        return 65568;
      if (v3 == 275)
        return 327704;
    }
    else
    {
      if (v3 == 227)
      {
        v5 = 25;
        v6 = 65542;
        return v6 | v5;
      }
      if (v3 == 243)
      {
        v5 = 23;
LABEL_62:
        v6 = 196616;
        return v6 | v5;
      }
    }
  }
  return 0;
}

uint64_t AGX::FramebufferCompilerConfig<AGX::G10::Encoders,AGX::G10::Classes,AGX::G10::ObjClasses>::FramebufferCompilerConfig(uint64_t a1, int *a2)
{
  MTLPixelFormat v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  __int32 v24;
  int v25;
  uint64_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  char v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  int32x2_t v36;
  int v37;
  char *v38;
  uint64_t v39;
  char v40;
  int v41;
  char *v42;
  char v43;
  char v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 *v49;
  unsigned int v50;
  char v51;
  char v52;
  uint64_t v53;

  *(_OWORD *)(a1 + 63) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 80) = 1;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  bzero((void *)a1, 0x28uLL);
  if (a2)
  {
    v5 = *a2;
    v6 = (char *)a2 - v5;
    v7 = *(unsigned __int16 *)((char *)a2 - v5);
    if (v7 < 5)
      goto LABEL_71;
    v8 = -v5;
    v9 = *((unsigned __int16 *)v6 + 2);
    if (*((_WORD *)v6 + 2))
    {
      v10 = (char *)a2 + v9;
      v11 = *(unsigned int *)((char *)a2 + v9);
      v12 = *(unsigned int *)((char *)a2 + v9 + v11);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = 0;
        v15 = v9 + v11;
        while (1)
        {
          v16 = *(unsigned int *)((char *)a2 + v15 + 4);
          v17 = (char *)a2 + v15 + v16;
          v18 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v18 + 2) >= 5u)
          {
            v19 = *((unsigned __int16 *)v18 + 4);
            if (v19)
            {
              v20 = (char *)a2 + v15 + v16 + v19;
              if (*((_WORD *)v20 + 2))
                break;
            }
          }
LABEL_46:
          if (v14 <= 6)
          {
            ++v14;
            v13 += 2;
            v15 += 4;
            if (v14 < v12)
              continue;
          }
          v47 = *a2;
          v8 = -v47;
          v7 = *(unsigned __int16 *)((char *)a2 - v47);
          goto LABEL_66;
        }
        *(_QWORD *)(a1 + 8 * v14 + 96) = AGX::G10::TextureFormatTable::chooseTextureFormatCPP((AGX::G10::TextureFormatTable *)*((unsigned __int16 *)v20 + 2), v4);
        v21 = 1 << v14;
        *(_DWORD *)(a1 + 40) |= 1 << v14;
        v22 = v16 - *((int *)v17 + 1);
        v23 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 4);
        if (v23 < 0x19)
        {
          v25 = 0;
          v24 = 0;
          if (v23 < 0xF)
          {
LABEL_34:
            v25 = 0;
            v34 = 1 << v14;
LABEL_35:
            *(_DWORD *)(a1 + 52) |= v34;
            v36.i32[0] = v24;
            v36.i32[1] = v25 & 0xFFFFFFFD;
            *(int8x8_t *)(a1 + 60) = vorr_s8(*(int8x8_t *)(a1 + 60), vand_s8((int8x8_t)vdup_n_s32(v21), (int8x8_t)vceq_s32(v36, (int32x2_t)0x100000001)));
            if (v25 == 4)
              v37 = 1 << v14;
            else
              v37 = 0;
            *(_DWORD *)(a1 + 72) |= v37;
            v38 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
            if (*((unsigned __int16 *)v38 + 2) >= 7u && (v39 = *((unsigned __int16 *)v38 + 5)) != 0)
            {
              v40 = 0;
              v41 = *((unsigned __int8 *)a2 + v15 + v16 + v39 + 4);
              v42 = (char *)(a1 + v13 + 160);
              v43 = 2;
              v44 = 1;
              switch(v41)
              {
                case 0:
                case 1:
                  v43 = 1;
                  v40 = v41;
                  goto LABEL_52;
                case 3:
                  goto LABEL_57;
                case 4:
                  v45 = 2;
                  goto LABEL_43;
                case 5:
                  goto LABEL_51;
                case 6:
                  v40 = 1;
LABEL_51:
                  v43 = 4;
                  goto LABEL_52;
                case 7:
                  *v42 = 3;
                  *(_BYTE *)(a1 + v13 + 161) = 0;
LABEL_55:
                  v46 = 3;
                  break;
                case 8:
                  v44 = 3;
LABEL_57:
                  *v42 = 2;
                  *(_BYTE *)(a1 + v13 + 161) = v44;
LABEL_58:
                  *(_BYTE *)(a1 + 78) |= v21;
                  goto LABEL_44;
                default:
LABEL_52:
                  *v42 = v43;
                  *(_BYTE *)(a1 + v13 + 161) = v40;
                  v46 = 1;
                  switch(v41)
                  {
                    case 0:
                      goto LABEL_45;
                    case 1:
                      *(_BYTE *)(a1 + 78) |= v21;
                      v46 = 1;
                      break;
                    case 3:
                    case 5:
                    case 6:
                    case 8:
                      goto LABEL_58;
                    case 7:
                      goto LABEL_55;
                    default:
                      goto LABEL_44;
                  }
                  break;
              }
            }
            else
            {
              v45 = 0;
              v42 = (char *)(a1 + 2 * v14 + 160);
LABEL_43:
              *v42 = 2;
              *(_BYTE *)(a1 + v13 + 161) = v45;
LABEL_44:
              v46 = 2;
            }
LABEL_45:
            *(_WORD *)(a1 + 76) |= v46 << v13;
            v12 = *(unsigned int *)&v10[v11];
            goto LABEL_46;
          }
        }
        else
        {
          if (*(_WORD *)((char *)a2 + v15 + v22 + 28))
            v24 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 28) + 4);
          else
            v24 = 0;
          if (v23 >= 0x1B && *(_WORD *)((char *)a2 + v15 + v22 + 30))
            v25 = *((unsigned __int8 *)a2 + v15 + v16 + *(unsigned __int16 *)((char *)a2 + v15 + v22 + 30) + 4);
          else
            v25 = 0;
        }
        v26 = *(unsigned __int16 *)((char *)a2 + v15 + v22 + 18);
        if (v26 && *(_WORD *)((char *)a2 + v15 + v16 + v26 + 4))
        {
          *(_DWORD *)(a1 + 48) |= v21;
          if ((v25 & 0xFE) == 2)
            v27 = 1 << v14;
          else
            v27 = 0;
          *(_DWORD *)(a1 + 68) |= v27;
          v28 = (char *)a2 + v15 + v16 - *((int *)v17 + 1);
          if (*((unsigned __int16 *)v28 + 2) >= 0x11u && (v29 = *((unsigned __int16 *)v28 + 10), *((_WORD *)v28 + 10)))
          {
            v30 = 0;
            v31 = *((unsigned __int8 *)a2 + v15 + v16 + v29 + 4);
            v32 = 2;
            switch(v31)
            {
              case 0:
              case 1:
                v32 = 1;
                v30 = v31;
                break;
              case 3:
                v30 = 1;
                break;
              case 4:
                v30 = 2;
                break;
              case 5:
                goto LABEL_61;
              case 6:
                v30 = 1;
LABEL_61:
                v32 = 4;
                break;
              case 7:
                v30 = 0;
                v32 = 3;
                break;
              case 8:
                v30 = 3;
                break;
              default:
                break;
            }
          }
          else
          {
            v30 = 0;
            v32 = 2;
          }
          v33 = a1 + v13;
          *(_BYTE *)(v33 + 176) = v32;
          *(_BYTE *)(v33 + 177) = v30;
        }
        v34 = 0;
        if (v24 == 2)
          v35 = 1 << v14;
        else
          v35 = 0;
        *(_DWORD *)(a1 + 56) |= v35;
        if (v25)
          goto LABEL_35;
        goto LABEL_34;
      }
    }
LABEL_66:
    if (v7 >= 7
      && *(_WORD *)((char *)a2 + v8 + 6)
      && (v48 = *(_QWORD *)((char *)a2 + *(unsigned __int16 *)((char *)a2 + v8 + 6)), (v48 & 0xFFFFFFFE) != 0))
    {
      if (v48 > 0x7FF)
        LODWORD(v48) = 2048;
    }
    else
    {
LABEL_71:
      LODWORD(v48) = 1;
    }
    *(_DWORD *)(a1 + 80) = v48;
    v49 = (unsigned __int16 *)((char *)a2 - *a2);
    v50 = *v49;
    if (v50 < 0xB)
    {
      v52 = 1;
      *(_BYTE *)(a1 + 84) = 1;
      if (v50 < 9)
      {
LABEL_82:
        *(_BYTE *)(a1 + 85) = v52;
        return a1;
      }
    }
    else
    {
      if (v49[5])
        v51 = *((_BYTE *)a2 + v49[5]);
      else
        v51 = 1;
      *(_BYTE *)(a1 + 84) = v51;
    }
    v53 = v49[4];
    if (v53)
      v52 = *((_BYTE *)a2 + v53);
    else
      v52 = 1;
    goto LABEL_82;
  }
  return a1;
}

