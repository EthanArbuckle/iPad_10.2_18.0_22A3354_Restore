void sub_239987FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  void *v17;

  if (__p)
  {
    operator delete(__p);
    v17 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v17 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23998803C(_QWORD *a1, _QWORD *a2, unsigned int *a3, _BYTE *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v6;
  _QWORD *v8;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  char *v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  int v73;
  char *v74;
  _DWORD *v75;
  _DWORD *v76;
  char *v77;
  char v78;
  char *v79;
  uint64_t v80;
  char *v81;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  char *v90;
  char *v91;
  unsigned int *v92;
  unsigned int *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t v111;
  _DWORD *v112;
  unsigned int *v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  _DWORD *v128;
  unsigned int *v129;
  uint64_t v130;
  unsigned int *v131;
  uint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  _DWORD *v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int *v147;
  uint64_t *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int *v161;
  unsigned int *v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  unsigned int v166;
  unsigned int v167;
  void *__p;
  char *v169;
  char *v170;
  void *v171;
  void *v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  _DWORD *v177;
  _DWORD *v178;
  char *v179;

  v6 = *a2;
  if (*a2 == a2[1])
    return 0;
  v8 = a2;
  v10 = operator new(0xCuLL);
  v11 = 0;
  v12 = 0;
  v178 = v10 + 3;
  v179 = (char *)(v10 + 3);
  *(_QWORD *)v10 = -1;
  v10[2] = -1;
  v176 = 0;
  v177 = v10;
  v13 = a3 + 1;
  v174 = 0;
  v175 = 0;
  v14 = a3 + 2;
  v162 = a3 + 1;
  v164 = a1;
  v160 = a3;
  v161 = a3 + 2;
  while (2)
  {
    v157 = v12;
    sub_23996389C((uint64_t)a1, (unsigned int *)(v6 + 4 * v11), (uint64_t)&v177);
    v15 = 0;
    v165 = v11;
    do
    {
      if (sub_23997D1DC((uint64_t)a1, &v177[v15], v13, v14))
      {
        v17 = *(_DWORD *)(*v8 + 4 * v11);
        v18 = (uint64_t *)(a1[7] + 16 * *v14);
        v19 = *v18;
        v20 = (std::__shared_weak_count *)v18[1];
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v24 = *(unsigned int *)(*(_QWORD *)(v19 + 40) + 12 * v17 + 4 * v15);
        v11 = v165;
        v25 = *(_DWORD *)(*v8 + 4 * v165);
        v26 = (uint64_t *)(a1[7] + 16 * *v14);
        v27 = *v26;
        v28 = (std::__shared_weak_count *)v26[1];
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          do
            v31 = __ldaxr(v29);
          while (__stlxr(v31 - 1, v29));
          if (!v31)
          {
            v32 = v8;
            v33 = a3;
            v34 = v24;
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
            v24 = v34;
            a3 = v33;
            v8 = v32;
          }
        }
        if ((unsigned __int16)v15 == 2)
          v35 = 0;
        else
          v35 = (unsigned __int16)v15 + 1;
        v36 = *(unsigned int *)(*(_QWORD *)(v27 + 40) + 12 * v25 + 4 * v35);
        v37 = (uint64_t *)(a1[10] + 16 * a3[3]);
        v38 = *v37;
        v39 = (std::__shared_weak_count *)v37[1];
        if (!v39)
          goto LABEL_29;
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        do
          v42 = __ldaxr(v40);
        while (__stlxr(v42 - 1, v40));
        if (!v42)
        {
          v51 = v8;
          v52 = a3;
          v53 = v24;
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
          v24 = v53;
          v54 = v52;
          v8 = v51;
          v43 = *(_QWORD *)(v38 + 40);
          v55 = (uint64_t *)(a1[10] + 16 * v54[3]);
          v45 = *v55;
          v46 = (std::__shared_weak_count *)v55[1];
          if (!v46)
            goto LABEL_36;
        }
        else
        {
LABEL_29:
          v43 = *(_QWORD *)(v38 + 40);
          v44 = (uint64_t *)(a1[10] + 16 * a3[3]);
          v45 = *v44;
          v46 = (std::__shared_weak_count *)v44[1];
          if (!v46)
            goto LABEL_36;
        }
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        do
          v49 = __ldaxr(v47);
        while (__stlxr(v49 - 1, v47));
        if (!v49)
        {
          v50 = v24;
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
          v24 = v50;
        }
LABEL_36:
        v56 = *(_QWORD *)(v45 + 40);
        v57 = *(_DWORD *)(*v8 + 4 * v165);
        *(_QWORD *)&v58 = *(_QWORD *)(v43 + 8 * v24);
        v59 = *(_QWORD *)(v56 + 8 * v36);
        v60 = v177[v15];
        v61 = v175;
        if (v175 < v176)
        {
          *((_QWORD *)&v58 + 1) = *(_QWORD *)(v56 + 8 * v36);
          *(_OWORD *)v175 = v58;
          *((_DWORD *)v61 + 4) = v24;
          *((_DWORD *)v61 + 5) = v36;
          *((_DWORD *)v61 + 6) = v57;
          *((_DWORD *)v61 + 7) = v60;
          v16 = v61 + 32;
          a3 = v160;
          v14 = v161;
          v13 = v162;
LABEL_6:
          v175 = v16;
          goto LABEL_7;
        }
        v62 = v8;
        v63 = v174;
        v64 = (v175 - v174) >> 5;
        v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 59)
          sub_2394189F8();
        v66 = v176 - v174;
        if ((v176 - v174) >> 4 > v65)
          v65 = v66 >> 4;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0)
          v67 = 0x7FFFFFFFFFFFFFFLL;
        else
          v67 = v65;
        if (v67 >> 59)
          sub_239418A80();
        v158 = v59;
        v159 = v58;
        v68 = v24;
        v69 = (char *)operator new(32 * v67);
        *(_QWORD *)&v70 = v159;
        *((_QWORD *)&v70 + 1) = v158;
        v71 = &v69[32 * v64];
        *(_OWORD *)v71 = v70;
        *((_DWORD *)v71 + 4) = v68;
        *((_DWORD *)v71 + 5) = v36;
        *((_DWORD *)v71 + 6) = v57;
        *((_DWORD *)v71 + 7) = v60;
        v72 = v71;
        if (v61 == v63)
        {
          a3 = v160;
          v14 = v161;
          v8 = v62;
          v11 = v165;
          v13 = v162;
          v16 = v71 + 32;
          v174 = v71;
          v176 = &v69[32 * v67];
          if (!v61)
            goto LABEL_49;
        }
        else
        {
          a3 = v160;
          v8 = v62;
          v13 = v162;
          do
          {
            v73 = *((_DWORD *)v61 - 8);
            v61 -= 32;
            *((_DWORD *)v72 - 8) = v73;
            v72 -= 32;
            *((_DWORD *)v72 + 1) = *((_DWORD *)v61 + 1);
            *((_DWORD *)v72 + 2) = *((_DWORD *)v61 + 2);
            *((_DWORD *)v72 + 3) = *((_DWORD *)v61 + 3);
            *((_OWORD *)v72 + 1) = *((_OWORD *)v61 + 1);
          }
          while (v61 != v63);
          v61 = v63;
          v11 = v165;
          v14 = v161;
          v16 = v71 + 32;
          v174 = v72;
          v176 = &v69[32 * v67];
          if (!v61)
            goto LABEL_49;
        }
        operator delete(v61);
LABEL_49:
        a1 = v164;
        goto LABEL_6;
      }
LABEL_7:
      ++v15;
    }
    while (v15 != 3);
    v11 = (v157 + 1);
    v6 = *v8;
    v12 = v157 + 1;
    if (v11 < (uint64_t)(v8[1] - *v8) >> 2)
      continue;
    break;
  }
  v74 = v174;
  if (v174 == v175)
    goto LABEL_61;
  v75 = operator new(0xCuLL);
  v172 = v75 + 3;
  v173 = (char *)(v75 + 3);
  *(_QWORD *)v75 = -1;
  v75[2] = -1;
  v171 = v75;
  v76 = operator new(0xCuLL);
  v169 = (char *)(v76 + 3);
  v170 = (char *)(v76 + 3);
  *(_QWORD *)v76 = -1;
  v76[2] = -1;
  __p = v76;
  v77 = v175;
  if (v175 - v74 == 32)
  {
LABEL_54:
    v78 = 0;
    v79 = (char *)__p;
    if (__p)
      goto LABEL_55;
  }
  else
  {
    v83 = 0;
    v84 = 0;
    v85 = (uint64_t)(a1 + 13);
    while (1)
    {
      v86 = v83;
      v83 = ++v84;
      v87 = (v77 - v74) >> 5;
      if (v87 > v84)
        break;
LABEL_68:
      if (v87 - 1 <= v83)
        goto LABEL_54;
    }
    v88 = v84;
    v89 = v84;
    while (1)
    {
      v90 = &v74[32 * v86];
      v91 = &v74[32 * v88];
      v92 = (unsigned int *)(v90 + 24);
      v93 = (unsigned int *)(v91 + 24);
      if (*((_DWORD *)v90 + 6) != *((_DWORD *)v91 + 6))
      {
        v94 = *((_DWORD *)v90 + 4);
        v95 = *((_DWORD *)v91 + 4);
        if (v94 != v95)
        {
          v96 = *(_DWORD *)&v74[32 * v88 + 20];
          if (v94 != v96)
          {
            v97 = *(_DWORD *)&v74[32 * v86 + 20];
            if (v97 != v95 && v97 != v96 && sub_23998182C((float *)v90, (float *)v91))
            {
              if (!*a4 || a3[4] == -1)
                break;
              v167 = *v92;
              sub_23996389C((uint64_t)a1, &v167, (uint64_t)&v171);
              v163 = v83;
              v166 = v84;
              v167 = *v93;
              sub_23996389C((uint64_t)a1, &v167, (uint64_t)&__p);
              v98 = 0;
              v99 = 0;
              do
              {
                v100 = (uint64_t *)(a1[4] + 16 * a3[4]);
                v101 = *v100;
                v102 = (std::__shared_weak_count *)v100[1];
                if (v102)
                {
                  v103 = (unint64_t *)&v102->__shared_owners_;
                  do
                    v104 = __ldxr(v103);
                  while (__stxr(v104 + 1, v103));
                  do
                    v105 = __ldaxr(v103);
                  while (__stlxr(v105 - 1, v103));
                  if (!v105)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
                if (((*(_QWORD *)(*(_QWORD *)(v101 + 40)
                                 + (((unint64_t)*((unsigned int *)v171 + v98) >> 3) & 0x1FFFFFF8)) >> *((_DWORD *)v171 + v98)) & 1) != 0)
                {
                  v106 = (uint64_t *)(v164[4] + 16 * a3[4]);
                  v107 = *v106;
                  v108 = (std::__shared_weak_count *)v106[1];
                  if (v108)
                  {
                    v109 = (unint64_t *)&v108->__shared_owners_;
                    do
                      v110 = __ldxr(v109);
                    while (__stxr(v110 + 1, v109));
                    do
                      v111 = __ldaxr(v109);
                    while (__stlxr(v111 - 1, v109));
                    if (!v111)
                    {
                      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                      std::__shared_weak_count::__release_weak(v108);
                    }
                  }
                  if (((*(_QWORD *)(*(_QWORD *)(v107 + 40)
                                   + (((unint64_t)*(unsigned int *)__p >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)__p) & 1) != 0)
                  {
                    v112 = (_DWORD *)sub_239962518(v85, (unsigned int *)v171 + v98);
                    if (*v112 == *(_DWORD *)__p
                      || (v113 = (unsigned int *)sub_239962518(v85, (unsigned int *)v171 + v98),
                          v114 = sub_239962518(v85, v113),
                          v115 = (unsigned int *)sub_239962518(v85, (unsigned int *)__p),
                          *(_DWORD *)(v114 + 16) == *(_DWORD *)(sub_239962518(v85, v115) + 16)))
                    {
                      v116 = (uint64_t *)(v164[4] + 16 * a3[4]);
                      v117 = *v116;
                      v118 = (std::__shared_weak_count *)v116[1];
                      if (v118)
                      {
                        v119 = (unint64_t *)&v118->__shared_owners_;
                        do
                          v120 = __ldxr(v119);
                        while (__stxr(v120 + 1, v119));
                        do
                          v121 = __ldaxr(v119);
                        while (__stlxr(v121 - 1, v119));
                        if (!v121)
                        {
                          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
                          std::__shared_weak_count::__release_weak(v118);
                        }
                      }
                      v99 |= *(_QWORD *)(*(_QWORD *)(v117 + 40)
                                       + (((unint64_t)*((unsigned int *)v171 + v98) >> 3) & 0x1FFFFFF8)) >> *((_DWORD *)v171 + v98);
                    }
                  }
                  v122 = (uint64_t *)(v164[4] + 16 * a3[4]);
                  v123 = *v122;
                  v124 = (std::__shared_weak_count *)v122[1];
                  if (v124)
                  {
                    v125 = (unint64_t *)&v124->__shared_owners_;
                    do
                      v126 = __ldxr(v125);
                    while (__stxr(v126 + 1, v125));
                    do
                      v127 = __ldaxr(v125);
                    while (__stlxr(v127 - 1, v125));
                    if (!v127)
                    {
                      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                      std::__shared_weak_count::__release_weak(v124);
                    }
                  }
                  if (((*(_QWORD *)(*(_QWORD *)(v123 + 40)
                                   + (((unint64_t)*((unsigned int *)__p + 1) >> 3) & 0x1FFFFFF8)) >> *((_DWORD *)__p + 1)) & 1) != 0)
                  {
                    v128 = (_DWORD *)sub_239962518(v85, (unsigned int *)v171 + v98);
                    if (*v128 == *((_DWORD *)__p + 1)
                      || (v129 = (unsigned int *)sub_239962518(v85, (unsigned int *)v171 + v98),
                          v130 = sub_239962518(v85, v129),
                          v131 = (unsigned int *)sub_239962518(v85, (unsigned int *)__p + 1),
                          *(_DWORD *)(v130 + 16) == *(_DWORD *)(sub_239962518(v85, v131) + 16)))
                    {
                      v132 = (uint64_t *)(v164[4] + 16 * a3[4]);
                      v133 = *v132;
                      v134 = (std::__shared_weak_count *)v132[1];
                      if (v134)
                      {
                        v135 = (unint64_t *)&v134->__shared_owners_;
                        do
                          v136 = __ldxr(v135);
                        while (__stxr(v136 + 1, v135));
                        do
                          v137 = __ldaxr(v135);
                        while (__stlxr(v137 - 1, v135));
                        if (!v137)
                        {
                          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                          std::__shared_weak_count::__release_weak(v134);
                        }
                      }
                      v99 |= *(_QWORD *)(*(_QWORD *)(v133 + 40)
                                       + (((unint64_t)*((unsigned int *)v171 + v98) >> 3) & 0x1FFFFFF8)) >> *((_DWORD *)v171 + v98);
                    }
                  }
                  v138 = (uint64_t *)(v164[4] + 16 * a3[4]);
                  v139 = *v138;
                  v140 = (std::__shared_weak_count *)v138[1];
                  if (v140)
                  {
                    v141 = (unint64_t *)&v140->__shared_owners_;
                    do
                      v142 = __ldxr(v141);
                    while (__stxr(v142 + 1, v141));
                    do
                      v143 = __ldaxr(v141);
                    while (__stlxr(v143 - 1, v141));
                    if (!v143)
                    {
                      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                      std::__shared_weak_count::__release_weak(v140);
                    }
                  }
                  if (((*(_QWORD *)(*(_QWORD *)(v139 + 40)
                                   + (((unint64_t)*((unsigned int *)__p + 2) >> 3) & 0x1FFFFFF8)) >> *((_DWORD *)__p + 2)) & 1) != 0)
                  {
                    v144 = (_DWORD *)sub_239962518(v85, (unsigned int *)v171 + v98);
                    if (*v144 == *((_DWORD *)__p + 2)
                      || (v145 = (unsigned int *)sub_239962518(v85, (unsigned int *)v171 + v98),
                          v146 = sub_239962518(v85, v145),
                          v147 = (unsigned int *)sub_239962518(v85, (unsigned int *)__p + 2),
                          *(_DWORD *)(v146 + 16) == *(_DWORD *)(sub_239962518(v85, v147) + 16)))
                    {
                      v148 = (uint64_t *)(v164[4] + 16 * a3[4]);
                      v149 = *v148;
                      v150 = (std::__shared_weak_count *)v148[1];
                      if (v150)
                      {
                        v151 = (unint64_t *)&v150->__shared_owners_;
                        do
                          v152 = __ldxr(v151);
                        while (__stxr(v152 + 1, v151));
                        do
                          v153 = __ldaxr(v151);
                        while (__stlxr(v153 - 1, v151));
                        if (!v153)
                        {
                          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                          std::__shared_weak_count::__release_weak(v150);
                        }
                      }
                      v99 |= *(_QWORD *)(*(_QWORD *)(v149 + 40)
                                       + (((unint64_t)*((unsigned int *)v171 + v98) >> 3) & 0x1FFFFFF8)) >> *((_DWORD *)v171 + v98);
                    }
                  }
                }
                a1 = v164;
                ++v98;
              }
              while (v98 != 3);
              v84 = v166;
              v83 = v163;
              if ((v99 & 1) == 0)
                break;
            }
          }
        }
      }
      v74 = v174;
      v77 = v175;
      v87 = (v175 - v174) >> 5;
      v88 = ++v89;
      if (v87 <= v89)
        goto LABEL_68;
    }
    *a5 = *v92;
    *a6 = *v93;
    v78 = 1;
    v79 = (char *)__p;
    if (__p)
    {
LABEL_55:
      v169 = v79;
      operator delete(v79);
    }
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if ((v78 & 1) == 0)
  {
LABEL_61:
    v80 = 0;
    v81 = v174;
    if (v174)
      goto LABEL_62;
  }
  else
  {
    v80 = 1;
    v81 = v174;
    if (!v174)
      goto LABEL_63;
LABEL_62:
    operator delete(v81);
  }
LABEL_63:
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  return v80;
}

void sub_239988B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;

  if (__p)
  {
    operator delete(__p);
    v30 = *(void **)(v28 - 136);
    if (!v30)
    {
LABEL_3:
      v31 = *(void **)(v28 - 112);
      if (!v31)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v30 = *(void **)(v28 - 136);
    if (!v30)
      goto LABEL_3;
  }
  *(_QWORD *)(v28 - 128) = v30;
  operator delete(v30);
  v31 = *(void **)(v28 - 112);
  if (!v31)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v28 - 104) = v31;
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239988BF8(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int *a4, _DWORD *a5, _DWORD *a6, _BYTE *a7, _QWORD *a8, _QWORD *a9)
{
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int *v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int *v76;
  unint64_t v77;
  int v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unsigned int *v86;
  unint64_t v87;
  int v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int *v96;
  unint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  _DWORD *v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  _BYTE *v129;
  _DWORD *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  _OWORD *v136;
  char *v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _OWORD *v145;
  char *v146;
  uint64_t v147;
  __int128 v148;
  int v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  _OWORD *v154;
  char *v155;
  uint64_t v156;
  __int128 v157;
  int v158;
  void **v159;
  void **v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  void *v164;
  void **v165;
  void **v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  void *v170;
  _BYTE *v173;
  _QWORD *v175;
  unsigned int v177;
  void *__p;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  void *v182;
  char *v183;
  void *v184[2];
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;

  v189 = 0u;
  v187 = 0u;
  v188 = 0u;
  v185 = 0u;
  v186 = 0u;
  *(_OWORD *)v184 = 0u;
  sub_239931BC8((uint64_t)&v187);
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v187 + 1) + (((*((_QWORD *)&v189 + 1) + (_QWORD)v189) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((*((_QWORD *)&v189 + 1) + v189) & 0x3FF)) = *a5;
  v14 = (char *)v184[1];
  v15 = (((_QWORD)v185 - (unint64_t)v184[1]) << 7) - 1;
  ++*((_QWORD *)&v189 + 1);
  if ((void *)v185 == v184[1])
    v15 = 0;
  v16 = *((_QWORD *)&v186 + 1) + v186;
  if (v15 == *((_QWORD *)&v186 + 1) + (_QWORD)v186)
  {
    sub_239931BC8((uint64_t)v184);
    v14 = (char *)v184[1];
    v16 = *((_QWORD *)&v186 + 1) + v186;
  }
  *(_DWORD *)(*(_QWORD *)&v14[(v16 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v16 & 0x3FF)) = *a6;
  ++*((_QWORD *)&v186 + 1);
  v18 = *(_QWORD *)(a1 + 152);
  v17 = *(_QWORD *)(a1 + 160);
  v19 = v17 - v18;
  v175 = a8;
  v173 = a7;
  if (v17 == v18)
  {
    v20 = 0;
  }
  else
  {
    if (v19 < 0)
      sub_2394189F8();
    v20 = operator new(v17 - v18);
    bzero(v20, v19 & 0xFFFFFFFFFFFFFFFCLL);
  }
  *((_DWORD *)v20 + *a5) = 1;
  *((_DWORD *)v20 + *a6) = 2;
  v21 = a4 + 1;
  v22 = a4 + 2;
  while (*((_QWORD *)&v189 + 1))
  {
    LODWORD(v181) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v187 + 1)
                                          + (((unint64_t)v189 >> 7) & 0x1FFFFFFFFFFFFF8))
                              + 4 * (v189 & 0x3FF));
    *(_QWORD *)&v189 = v189 + 1;
    --*((_QWORD *)&v189 + 1);
    if ((unint64_t)v189 >= 0x800)
    {
      operator delete(**((void ***)&v187 + 1));
      *((_QWORD *)&v187 + 1) += 8;
      *(_QWORD *)&v189 = v189 - 1024;
    }
    v23 = *(_DWORD *)sub_23996252C(a1 + 104, (unsigned int *)&v181);
    LODWORD(__p) = v23;
    do
    {
      LODWORD(__p) = *(_DWORD *)(sub_239962518(a1 + 104, (unsigned int *)&__p) + 8);
      if (!sub_23997D1DC(a1, (unsigned int *)&__p, v21, v22))
      {
        v24 = (unsigned int *)sub_239962518(a1 + 104, (unsigned int *)&__p);
        v25 = *(unsigned int *)(sub_239962518(a1 + 104, v24) + 16);
        if (!*((_DWORD *)v20 + v25))
        {
          v26 = *((_QWORD *)&v187 + 1);
          v27 = (((_QWORD)v188 - *((_QWORD *)&v187 + 1)) << 7) - 1;
          if ((_QWORD)v188 == *((_QWORD *)&v187 + 1))
            v27 = 0;
          v28 = *((_QWORD *)&v189 + 1) + v189;
          if (v27 == *((_QWORD *)&v189 + 1) + (_QWORD)v189)
          {
            sub_239931BC8((uint64_t)&v187);
            v26 = *((_QWORD *)&v187 + 1);
            v28 = *((_QWORD *)&v189 + 1) + v189;
          }
          *(_DWORD *)(*(_QWORD *)(v26 + ((v28 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v28 & 0x3FF)) = v25;
          ++*((_QWORD *)&v189 + 1);
          *((_DWORD *)v20 + v25) = 1;
        }
      }
    }
    while ((_DWORD)__p != v23);
    v29 = *((_QWORD *)&v186 + 1);
    if (*((_QWORD *)&v186 + 1))
    {
LABEL_25:
      LODWORD(v181) = *(_DWORD *)(*(_QWORD *)((char *)v184[1] + (((unint64_t)v186 >> 7) & 0x1FFFFFFFFFFFFF8))
                                + 4 * (v186 & 0x3FF));
      *(_QWORD *)&v186 = v186 + 1;
      *((_QWORD *)&v186 + 1) = v29 - 1;
      if ((unint64_t)v186 >= 0x800)
      {
        operator delete(*(void **)v184[1]);
        v184[1] = (char *)v184[1] + 8;
        *(_QWORD *)&v186 = v186 - 1024;
      }
      v30 = *(_DWORD *)sub_23996252C(a1 + 104, (unsigned int *)&v181);
      LODWORD(__p) = v30;
      do
      {
        LODWORD(__p) = *(_DWORD *)(sub_239962518(a1 + 104, (unsigned int *)&__p) + 8);
        if (!sub_23997D1DC(a1, (unsigned int *)&__p, v21, v22))
        {
          v31 = (unsigned int *)sub_239962518(a1 + 104, (unsigned int *)&__p);
          v32 = *(unsigned int *)(sub_239962518(a1 + 104, v31) + 16);
          if (!*((_DWORD *)v20 + v32))
          {
            v33 = (char *)v184[1];
            v34 = (((_QWORD)v185 - (unint64_t)v184[1]) << 7) - 1;
            if ((void *)v185 == v184[1])
              v34 = 0;
            v35 = *((_QWORD *)&v186 + 1) + v186;
            if (v34 == *((_QWORD *)&v186 + 1) + (_QWORD)v186)
            {
              sub_239931BC8((uint64_t)v184);
              v33 = (char *)v184[1];
              v35 = *((_QWORD *)&v186 + 1) + v186;
            }
            *(_DWORD *)(*(_QWORD *)&v33[(v35 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v35 & 0x3FF)) = v32;
            ++*((_QWORD *)&v186 + 1);
            *((_DWORD *)v20 + v32) = 2;
          }
        }
      }
      while ((_DWORD)__p != v30);
    }
  }
  v29 = *((_QWORD *)&v186 + 1);
  if (*((_QWORD *)&v186 + 1))
    goto LABEL_25;
  v36 = v175;
  v37 = a9;
  if (*v173 && a4[4] != -1)
  {
    v38 = operator new(0xCuLL);
    v182 = v38 + 3;
    v183 = (char *)(v38 + 3);
    *(_QWORD *)v38 = -1;
    v38[2] = -1;
    v180 = 0;
    v181 = v38;
    v40 = *(_QWORD *)(a1 + 152);
    v39 = *(_QWORD *)(a1 + 160);
    __p = 0;
    v179 = 0;
    v41 = v39 - v40;
    if (v41)
    {
      if (v41 < 0)
        sub_2394189F8();
      v42 = v41 >> 2;
      v43 = ((unint64_t)((v41 >> 2) - 1) >> 6) + 1;
      __p = operator new(8 * v43);
      v179 = 0;
      v180 = v43;
      sub_23942D8C8(&__p, v42, 0);
      v45 = *(_QWORD *)(a1 + 152);
      v44 = *(_QWORD *)(a1 + 160);
      if (v44 != v45)
      {
        v46 = 0;
        v47 = 0;
        while (1)
        {
          v48 = *((_QWORD *)__p + (v46 >> 6));
          if ((v48 & (1 << v46)) == 0)
          {
            *((_QWORD *)__p + (v46 >> 6)) = v48 | (1 << v46);
            if (*((_DWORD *)v20 + v46))
              break;
          }
LABEL_44:
          v46 = ++v47;
          if (v47 >= (unint64_t)((v44 - v45) >> 2))
            goto LABEL_103;
        }
        v177 = v47;
        sub_23996389C(a1, &v177, (uint64_t)&v181);
        v49 = *(unsigned int *)sub_239962518(a1 + 104, (unsigned int *)v181);
        v50 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
        v51 = *v50;
        v52 = (std::__shared_weak_count *)v50[1];
        if (!v52)
          goto LABEL_52;
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(p_shared_owners);
        while (__stxr(v54 + 1, p_shared_owners));
        do
          v55 = __ldaxr(p_shared_owners);
        while (__stlxr(v55 - 1, p_shared_owners));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
          if (((*(_QWORD *)(*(_QWORD *)(v51 + 40) + ((v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) != 0)
            goto LABEL_53;
        }
        else
        {
LABEL_52:
          if (((*(_QWORD *)(*(_QWORD *)(v51 + 40) + ((v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) != 0)
            goto LABEL_53;
        }
        v80 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * a4[4]);
        v81 = *v80;
        v82 = (std::__shared_weak_count *)v80[1];
        if (v82)
        {
          v83 = (unint64_t *)&v82->__shared_owners_;
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
          do
            v85 = __ldaxr(v83);
          while (__stlxr(v85 - 1, v83));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
        if (((*(_QWORD *)(*(_QWORD *)(v81 + 40) + (((unint64_t)*(unsigned int *)v181 >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)v181) & 1) != 0)
        {
          v86 = (unsigned int *)sub_239962518(a1 + 104, (unsigned int *)v181);
          v87 = *(unsigned int *)(sub_239962518(a1 + 104, v86) + 16);
          v88 = *((_DWORD *)v20 + v87);
          if (v88)
          {
            v89 = *((_DWORD *)v20 + v46);
            if (v88 != v89)
            {
              if (*(_BYTE *)(*a3 + v87) == 2)
              {
                *((_DWORD *)v20 + v46) = v88;
              }
              else
              {
                *((_DWORD *)v20 + v87) = v89;
                *(_QWORD *)((char *)__p + ((v87 >> 3) & 0x1FFFFFF8)) |= 1 << v87;
              }
            }
          }
        }
LABEL_53:
        v56 = *(unsigned int *)sub_239962518(a1 + 104, (unsigned int *)v181 + 1);
        v57 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
        v58 = *v57;
        v59 = (std::__shared_weak_count *)v57[1];
        if (!v59)
          goto LABEL_58;
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
        do
          v62 = __ldaxr(v60);
        while (__stlxr(v62 - 1, v60));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          if (((*(_QWORD *)(*(_QWORD *)(v58 + 40) + ((v56 >> 3) & 0x1FFFFFF8)) >> v56) & 1) != 0)
          {
LABEL_59:
            v63 = *(unsigned int *)sub_239962518(a1 + 104, (unsigned int *)v181 + 2);
            v64 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
            v65 = *v64;
            v66 = (std::__shared_weak_count *)v64[1];
            if (v66)
            {
              v67 = (unint64_t *)&v66->__shared_owners_;
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
              do
                v69 = __ldaxr(v67);
              while (__stlxr(v69 - 1, v67));
              if (!v69)
              {
                ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                std::__shared_weak_count::__release_weak(v66);
              }
            }
            if (((*(_QWORD *)(*(_QWORD *)(v65 + 40) + ((v63 >> 3) & 0x1FFFFFF8)) >> v63) & 1) == 0)
            {
              v70 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * a4[4]);
              v71 = *v70;
              v72 = (std::__shared_weak_count *)v70[1];
              if (v72)
              {
                v73 = (unint64_t *)&v72->__shared_owners_;
                do
                  v74 = __ldxr(v73);
                while (__stxr(v74 + 1, v73));
                do
                  v75 = __ldaxr(v73);
                while (__stlxr(v75 - 1, v73));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              if (((*(_QWORD *)(*(_QWORD *)(v71 + 40)
                               + (((unint64_t)*((unsigned int *)v181 + 2) >> 3) & 0x1FFFFFF8)) >> *((_DWORD *)v181 + 2)) & 1) != 0)
              {
                v76 = (unsigned int *)sub_239962518(a1 + 104, (unsigned int *)v181 + 2);
                v77 = *(unsigned int *)(sub_239962518(a1 + 104, v76) + 16);
                v78 = *((_DWORD *)v20 + v77);
                if (v78)
                {
                  v79 = *((_DWORD *)v20 + v46);
                  if (v78 != v79)
                  {
                    if (*(_BYTE *)(*a3 + v77) == 2)
                    {
                      *((_DWORD *)v20 + v46) = v78;
                    }
                    else
                    {
                      *((_DWORD *)v20 + v77) = v79;
                      *(_QWORD *)((char *)__p + ((v77 >> 3) & 0x1FFFFFF8)) |= 1 << v77;
                    }
                  }
                }
              }
            }
            v45 = *(_QWORD *)(a1 + 152);
            v44 = *(_QWORD *)(a1 + 160);
            goto LABEL_44;
          }
        }
        else
        {
LABEL_58:
          if (((*(_QWORD *)(*(_QWORD *)(v58 + 40) + ((v56 >> 3) & 0x1FFFFFF8)) >> v56) & 1) != 0)
            goto LABEL_59;
        }
        v90 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * a4[4]);
        v91 = *v90;
        v92 = (std::__shared_weak_count *)v90[1];
        if (v92)
        {
          v93 = (unint64_t *)&v92->__shared_owners_;
          do
            v94 = __ldxr(v93);
          while (__stxr(v94 + 1, v93));
          do
            v95 = __ldaxr(v93);
          while (__stlxr(v95 - 1, v93));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
        if (((*(_QWORD *)(*(_QWORD *)(v91 + 40) + (((unint64_t)*((unsigned int *)v181 + 1) >> 3) & 0x1FFFFFF8)) >> *((_DWORD *)v181 + 1)) & 1) != 0)
        {
          v96 = (unsigned int *)sub_239962518(a1 + 104, (unsigned int *)v181 + 1);
          v97 = *(unsigned int *)(sub_239962518(a1 + 104, v96) + 16);
          v98 = *((_DWORD *)v20 + v97);
          if (v98)
          {
            v99 = *((_DWORD *)v20 + v46);
            if (v98 != v99)
            {
              if (*(_BYTE *)(*a3 + v97) == 2)
              {
                *((_DWORD *)v20 + v46) = v98;
              }
              else
              {
                *((_DWORD *)v20 + v97) = v99;
                *(_QWORD *)((char *)__p + ((v97 >> 3) & 0x1FFFFFF8)) |= 1 << v97;
              }
            }
          }
        }
        goto LABEL_59;
      }
LABEL_103:
      v36 = v175;
      v37 = a9;
      if (__p)
        operator delete(__p);
    }
    if (v181)
    {
      v182 = v181;
      operator delete(v181);
    }
  }
  v36[1] = *v36;
  v37[1] = *v37;
  v100 = *a2;
  if (a2[1] != *a2)
  {
    v101 = 0;
    while (1)
    {
      v103 = *(unsigned int *)(v100 + 4 * v101);
      v104 = *((_DWORD *)v20 + v103);
      if (v104 != 2)
        break;
      v116 = (char *)v37[1];
      v115 = v37[2];
      if ((unint64_t)v116 >= v115)
      {
        v123 = (char *)*v37;
        v124 = (uint64_t)&v116[-*v37];
        v125 = v124 >> 2;
        v126 = (v124 >> 2) + 1;
        if (v126 >> 62)
LABEL_209:
          sub_2394189F8();
        v127 = v115 - (_QWORD)v123;
        if (v127 >> 1 > v126)
          v126 = v127 >> 1;
        if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
          v128 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v128 = v126;
        if (v128)
        {
          if (v128 >> 62)
LABEL_210:
            sub_239418A80();
          v129 = operator new(4 * v128);
          v130 = &v129[4 * v125];
          *v130 = *(_DWORD *)(v100 + 4 * v101);
          v131 = (uint64_t)(v130 + 1);
          if (v116 != v123)
          {
LABEL_147:
            v132 = v116 - 4 - v123;
            if (v132 < 0x2C)
              goto LABEL_215;
            if ((unint64_t)(v116 - &v129[v124]) < 0x20)
              goto LABEL_215;
            v133 = (v132 >> 2) + 1;
            v134 = 4 * (v133 & 0x7FFFFFFFFFFFFFF8);
            v135 = &v116[-v134];
            v130 = (_DWORD *)((char *)v130 - v134);
            v136 = &v129[4 * v125 - 16];
            v137 = v116 - 16;
            v138 = v133 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v139 = *(_OWORD *)v137;
              *(v136 - 1) = *((_OWORD *)v137 - 1);
              *v136 = v139;
              v136 -= 2;
              v137 -= 32;
              v138 -= 8;
            }
            while (v138);
            v116 = v135;
            if (v133 != (v133 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_215:
              do
              {
                v140 = *((_DWORD *)v116 - 1);
                v116 -= 4;
                *--v130 = v140;
              }
              while (v116 != v123);
            }
            v37 = a9;
            v116 = (char *)*a9;
            *a9 = v130;
            a9[1] = v131;
            a9[2] = &v129[4 * v128];
            if (v116)
LABEL_154:
              operator delete(v116);
LABEL_155:
            v36 = v175;
            v37[1] = v131;
            goto LABEL_111;
          }
        }
        else
        {
          v129 = 0;
          v130 = (_DWORD *)(4 * v125);
          *(_DWORD *)(4 * v125) = v103;
          v131 = 4 * v125 + 4;
          if (v116 != v123)
            goto LABEL_147;
        }
        v37 = a9;
        *a9 = v130;
        a9[1] = v131;
        a9[2] = &v129[4 * v128];
        if (v116)
          goto LABEL_154;
        goto LABEL_155;
      }
      *(_DWORD *)v116 = v103;
      v37[1] = v116 + 4;
LABEL_111:
      ++v101;
      v100 = *a2;
      if (v101 >= (a2[1] - *a2) >> 2)
        goto LABEL_179;
    }
    if (v104 == 1)
    {
      v106 = (char *)v36[1];
      v105 = v36[2];
      if ((unint64_t)v106 >= v105)
      {
        v107 = (char *)*v36;
        v108 = (uint64_t)&v106[-*v36];
        v109 = v108 >> 2;
        v110 = (v108 >> 2) + 1;
        if (v110 >> 62)
          goto LABEL_209;
        v111 = v105 - (_QWORD)v107;
        if (v111 >> 1 > v110)
          v110 = v111 >> 1;
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
          v112 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v112 = v110;
        if (v112)
        {
          if (v112 >> 62)
            goto LABEL_210;
          v113 = operator new(4 * v112);
          v114 = &v113[4 * v109];
          *v114 = *(_DWORD *)(v100 + 4 * v101);
          v102 = (uint64_t)(v114 + 1);
          if (v106 == v107)
            goto LABEL_177;
        }
        else
        {
          v113 = 0;
          v114 = (_DWORD *)(4 * v109);
          *(_DWORD *)(4 * v109) = v103;
          v102 = 4 * v109 + 4;
          if (v106 == v107)
            goto LABEL_177;
        }
        v141 = v106 - 4 - v107;
        if (v141 < 0x2C)
          goto LABEL_216;
        if ((unint64_t)(v106 - &v113[v108]) < 0x20)
          goto LABEL_216;
        v142 = (v141 >> 2) + 1;
        v143 = 4 * (v142 & 0x7FFFFFFFFFFFFFF8);
        v144 = &v106[-v143];
        v114 = (_DWORD *)((char *)v114 - v143);
        v145 = &v113[4 * v109 - 16];
        v146 = v106 - 16;
        v147 = v142 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v148 = *(_OWORD *)v146;
          *(v145 - 1) = *((_OWORD *)v146 - 1);
          *v145 = v148;
          v145 -= 2;
          v146 -= 32;
          v147 -= 8;
        }
        while (v147);
        v106 = v144;
        if (v142 != (v142 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_216:
          do
          {
            v149 = *((_DWORD *)v106 - 1);
            v106 -= 4;
            *--v114 = v149;
          }
          while (v106 != v107);
        }
        goto LABEL_174;
      }
    }
    else
    {
      v106 = (char *)v36[1];
      v117 = v36[2];
      if ((unint64_t)v106 >= v117)
      {
        v118 = (char *)*v36;
        v119 = (uint64_t)&v106[-*v36];
        v120 = v119 >> 2;
        v121 = (v119 >> 2) + 1;
        if (v121 >> 62)
          goto LABEL_209;
        v122 = v117 - (_QWORD)v118;
        if (v122 >> 1 > v121)
          v121 = v122 >> 1;
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
          v112 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v112 = v121;
        if (v112)
        {
          if (v112 >> 62)
            goto LABEL_210;
          v113 = operator new(4 * v112);
          v114 = &v113[4 * v120];
          *v114 = *(_DWORD *)(v100 + 4 * v101);
          v102 = (uint64_t)(v114 + 1);
          if (v106 == v118)
          {
LABEL_177:
            v36 = v175;
            *v175 = v114;
            v175[1] = v102;
            v175[2] = &v113[4 * v112];
            if (!v106)
              goto LABEL_176;
            goto LABEL_175;
          }
        }
        else
        {
          v113 = 0;
          v114 = (_DWORD *)(4 * v120);
          *(_DWORD *)(4 * v120) = v103;
          v102 = 4 * v120 + 4;
          if (v106 == v118)
            goto LABEL_177;
        }
        v150 = v106 - 4 - v118;
        if (v150 < 0x2C)
          goto LABEL_217;
        if ((unint64_t)(v106 - &v113[v119]) < 0x20)
          goto LABEL_217;
        v151 = (v150 >> 2) + 1;
        v152 = 4 * (v151 & 0x7FFFFFFFFFFFFFF8);
        v153 = &v106[-v152];
        v114 = (_DWORD *)((char *)v114 - v152);
        v154 = &v113[4 * v120 - 16];
        v155 = v106 - 16;
        v156 = v151 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v157 = *(_OWORD *)v155;
          *(v154 - 1) = *((_OWORD *)v155 - 1);
          *v154 = v157;
          v154 -= 2;
          v155 -= 32;
          v156 -= 8;
        }
        while (v156);
        v106 = v153;
        if (v151 != (v151 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_217:
          do
          {
            v158 = *((_DWORD *)v106 - 1);
            v106 -= 4;
            *--v114 = v158;
          }
          while (v106 != v118);
        }
LABEL_174:
        v36 = v175;
        v106 = (char *)*v175;
        *v175 = v114;
        v175[1] = v102;
        v175[2] = &v113[4 * v112];
        if (!v106)
        {
LABEL_176:
          v37 = a9;
          goto LABEL_110;
        }
LABEL_175:
        operator delete(v106);
        goto LABEL_176;
      }
    }
    *(_DWORD *)v106 = v103;
    v102 = (uint64_t)(v106 + 4);
LABEL_110:
    v36[1] = v102;
    goto LABEL_111;
  }
LABEL_179:
  if (v20)
    operator delete(v20);
  v159 = (void **)v184[1];
  v160 = (void **)v185;
  *((_QWORD *)&v186 + 1) = 0;
  v161 = v185 - (unint64_t)v184[1];
  if ((unint64_t)v185 - (unint64_t)v184[1] >= 0x11)
  {
    do
    {
      operator delete(*v159);
      v160 = (void **)v185;
      v159 = (void **)((char *)v184[1] + 8);
      v184[1] = v159;
      v161 = v185 - (_QWORD)v159;
    }
    while ((_QWORD)v185 - (_QWORD)v159 > 0x10uLL);
  }
  v162 = v161 >> 3;
  if (v162 == 1)
  {
    v163 = 512;
    goto LABEL_187;
  }
  if (v162 == 2)
  {
    v163 = 1024;
LABEL_187:
    *(_QWORD *)&v186 = v163;
  }
  if (v159 != v160)
  {
    do
    {
      v164 = *v159++;
      operator delete(v164);
    }
    while (v159 != v160);
    if ((void *)v185 != v184[1])
      *(_QWORD *)&v185 = v185 + (((unint64_t)v184[1] - v185 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v184[0])
    operator delete(v184[0]);
  v165 = (void **)*((_QWORD *)&v187 + 1);
  v166 = (void **)v188;
  *((_QWORD *)&v189 + 1) = 0;
  v167 = v188 - *((_QWORD *)&v187 + 1);
  if ((_QWORD)v188 - *((_QWORD *)&v187 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v165);
      v166 = (void **)v188;
      v165 = (void **)(*((_QWORD *)&v187 + 1) + 8);
      *((_QWORD *)&v187 + 1) = v165;
      v167 = v188 - (_QWORD)v165;
    }
    while ((_QWORD)v188 - (_QWORD)v165 > 0x10uLL);
  }
  v168 = v167 >> 3;
  if (v168 == 1)
  {
    v169 = 512;
    goto LABEL_200;
  }
  if (v168 == 2)
  {
    v169 = 1024;
LABEL_200:
    *(_QWORD *)&v189 = v169;
  }
  if (v165 != v166)
  {
    do
    {
      v170 = *v165++;
      operator delete(v170);
    }
    while (v165 != v166);
    if ((_QWORD)v188 != *((_QWORD *)&v187 + 1))
      *(_QWORD *)&v188 = v188 + ((*((_QWORD *)&v187 + 1) - v188 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)v187)
    operator delete((void *)v187);
  return 1;
}

void sub_239989B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  uint64_t v24;

  if (!v23)
  {
    sub_23953439C((uint64_t)&a23);
    sub_23953439C(v24 - 144);
    _Unwind_Resume(a1);
  }
  operator delete(v23);
  sub_23953439C((uint64_t)&a23);
  sub_23953439C(v24 - 144);
  _Unwind_Resume(a1);
}

uint64_t *sub_239989BE0(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (uint64_t *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *((_DWORD *)v15 + 5) = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v4;
  }
  else
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        v22 = std::__next_prime(v22);
      }
      else
      {
        v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2)
          v22 = v24;
      }
      if (prime <= v22)
        prime = v22;
      if (prime < v8)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v7 %= v8;
    }
    else
    {
      v7 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
  if (v26)
  {
    *v15 = *v26;
LABEL_59:
    *v26 = v15;
    goto LABEL_60;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8)
        v27 %= v8;
    }
    else
    {
      v27 &= v8 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_239989ED0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_239989EE4(unint64_t *result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  int32x4_t v12;
  unint64_t v13;
  float *v14;
  int32x2_t v15;
  unint64_t v16;
  int32x2_t *v17;
  float32x4x3_t v18;
  float32x4x3_t v19;

  v2 = *result;
  *(_OWORD *)v2 = xmmword_239F03400;
  *(_OWORD *)(v2 + 16) = xmmword_239F03410;
  *(_OWORD *)(v2 + 32) = xmmword_239F03420;
  *(_OWORD *)(v2 + 48) = xmmword_239F03430;
  *(_OWORD *)(v2 + 64) = xmmword_239F03440;
  *(_OWORD *)(v2 + 80) = xmmword_239F03450;
  *(_OWORD *)(v2 + 96) = xmmword_239F03460;
  *(_OWORD *)(v2 + 112) = xmmword_239F03470;
  *(_OWORD *)(v2 + 128) = xmmword_239F03480;
  *(_OWORD *)(v2 + 144) = xmmword_239F03490;
  *(_OWORD *)(v2 + 160) = xmmword_239F034A0;
  *(_OWORD *)(v2 + 176) = xmmword_239F034B0;
  *(_OWORD *)(v2 + 192) = xmmword_239F034C0;
  *(_OWORD *)(v2 + 208) = xmmword_239F034D0;
  *(_OWORD *)(v2 + 224) = xmmword_239F034E0;
  *(_OWORD *)(v2 + 240) = xmmword_239F034F0;
  *(_OWORD *)(v2 + 256) = xmmword_239F03500;
  *(_OWORD *)(v2 + 272) = xmmword_239F03510;
  *(_OWORD *)(v2 + 288) = xmmword_239F03520;
  *(_OWORD *)(v2 + 304) = xmmword_239F03530;
  *(_OWORD *)(v2 + 320) = xmmword_239F03540;
  *(_OWORD *)(v2 + 336) = xmmword_239F03550;
  *(_OWORD *)(v2 + 352) = xmmword_239F03560;
  *(_OWORD *)(v2 + 368) = xmmword_239F03570;
  *(_OWORD *)(v2 + 384) = xmmword_239F03580;
  *(_QWORD *)(v2 + 400) = 0x1A00000019;
  v3 = *result;
  v4 = result[1];
  v5 = (_OWORD *)(*result + 696);
  v6 = (_OWORD *)(*result + 408);
  *v6 = xmmword_239F03590;
  v6[1] = xmmword_239F035A0;
  v6[2] = xmmword_239F035B0;
  v6[3] = xmmword_239F035C0;
  v6[4] = xmmword_239F035D0;
  v6[5] = xmmword_239F035E0;
  v6[6] = xmmword_239F035F0;
  v6[7] = xmmword_239F03600;
  v6[8] = xmmword_239F03610;
  v6[9] = xmmword_239F03620;
  v6[10] = xmmword_239F03630;
  v6[11] = xmmword_239F03640;
  v6[12] = xmmword_239F03650;
  v6[13] = xmmword_239F03660;
  v6[14] = xmmword_239F03670;
  v6[15] = xmmword_239F03680;
  v6[16] = xmmword_239F03690;
  v6[17] = xmmword_239F036A0;
  *v5 = xmmword_239F036B0;
  v5[1] = xmmword_239F036C0;
  v5[2] = xmmword_239F036D0;
  v5[3] = xmmword_239F036E0;
  *(_QWORD *)(v3 + 760) = 0x2C0000002BLL;
  v7 = v4 - v3;
  if (v7)
  {
    v8 = v7 / 12;
    if (v8 <= 1)
      v8 = 1;
    if (v8 < 0x10)
    {
      v9 = 0;
LABEL_13:
      v15 = vdup_n_s32(a2);
      v16 = v8 - v9;
      v17 = (int32x2_t *)(v3 + 12 * v9 + 8);
      do
      {
        v17[-1] = vadd_s32(v17[-1], v15);
        v17->i32[0] += a2;
        v17 = (int32x2_t *)((char *)v17 + 12);
        --v16;
      }
      while (v16);
      return result;
    }
    v9 = 0;
    v10 = !is_mul_ok(v8 - 1, 0xCuLL);
    v11 = 12 * (v8 - 1);
    if (v3 + 4 + v11 < v3 + 4)
      goto LABEL_13;
    if (v3 + 8 + v11 < v3 + 8)
      goto LABEL_13;
    if (v3 + v11 < v3)
      goto LABEL_13;
    if (v10)
      goto LABEL_13;
    v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = vdupq_n_s32(a2);
    v13 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v14 = (float *)v3;
    do
    {
      v18 = vld3q_f32(v14);
      v19.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v18.val[0], v12);
      v19.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v18.val[1], v12);
      v19.val[2] = (float32x4_t)vaddq_s32((int32x4_t)v18.val[2], v12);
      vst3q_f32(v14, v19);
      v14 += 12;
      v13 -= 4;
    }
    while (v13);
    if (v8 != v9)
      goto LABEL_13;
  }
  return result;
}

float sub_23998A1D8(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int *v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;

  v6 = *a2;
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * *a3);
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (!v8)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v13 = *(_QWORD *)(v9 + 40);
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 16 * *a4);
    v16 = *v20;
    v15 = (std::__shared_weak_count *)v20[1];
    if (!v15)
      goto LABEL_13;
  }
  else
  {
LABEL_6:
    v13 = *(_QWORD *)(v9 + 40);
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 16 * *a4);
    v16 = *v14;
    v15 = (std::__shared_weak_count *)v14[1];
    if (!v15)
      goto LABEL_13;
  }
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_13:
  v21 = (unsigned int *)(v13 + 12 * v6);
  v22 = *(_QWORD *)(v16 + 40);
  v23 = (float *)(v22 + 8 * *v21);
  v24 = (float *)(v22 + 8 * v21[1]);
  v25 = (float *)(v22 + 8 * v21[2]);
  return fabsf((float)((float)((float)(*v24 - *v23) * (float)(v25[1] - v23[1]))- (float)((float)(v24[1] - v23[1]) * (float)(*v25 - *v23)))* 0.5);
}

uint64_t sub_23998A324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unsigned int v7;
  unint64_t i;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unint64_t v30;
  uint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  uint64_t v64;
  uint64_t v65;
  float32x4_t v66;
  uint64_t v67;
  float32x4_t v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72;
  float32x4_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float32x4_t v77;
  uint64_t v78;
  float32x4_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  uint64_t v93;
  float32x4_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float32x4_t v111;
  uint64_t v112;
  float32x4_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float v123;
  float v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int64_t v129;
  char *v130;
  size_t v131;
  size_t v132;
  void **p_dst;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  size_t v142;
  size_t v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v150;
  uint64_t v151;
  int64_t v152;
  void **v153;
  void *v154;
  unint64_t v155;
  float v156;
  unsigned int v157;
  float v158;
  float v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  float v163;
  uint64_t v164;
  float v165;
  float v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  size_t v173;
  void **v174;
  uint64_t v175;
  unsigned int *v176;
  float *v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  _QWORD *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  float32x4_t v188;
  float v189;
  float32x4_t v190;
  uint64_t *v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  char *v208;
  char *v209;
  char *v210;
  void **__dst;
  char *v212;
  unint64_t v213;
  unsigned int v214;
  unsigned int v215;
  void *__p;
  char *v217;
  char *v218;
  void *v219;
  void *v220;
  uint64_t v221;
  void *v222;
  void *v223;
  uint64_t v224;
  float32x4_t v225[2];
  uint64_t v226;
  unsigned int *v227;
  unsigned int *v228;
  char *v229;
  char *v230;
  char *v231;
  char *v232;
  char *v233;
  char *v234;
  char *v235;
  unsigned int v236;

  v236 = -1;
  HIBYTE(v235) = 5;
  strcpy((char *)&v233, "f:imt");
  v6 = (_QWORD *)(a1 + 56);
  v230 = 0;
  v231 = 0;
  v7 = sub_2394E5F40((uint64_t **)(a1 + 56), (uint64_t)&v230, (unsigned __int8 *)&v233);
  v236 = v7;
  if (SHIBYTE(v235) < 0)
  {
    operator delete(v233);
    if (v236 != -1)
      goto LABEL_7;
  }
  else if (v7 != -1)
  {
    goto LABEL_7;
  }
  HIBYTE(v235) = 5;
  strcpy((char *)&v233, "f:imt");
  sub_23994E3E8((_QWORD *)a1, &v236, (uint64_t)&v233);
  if (SHIBYTE(v235) < 0)
    operator delete(v233);
LABEL_7:
  for (i = 0; ; ++i)
  {
    v10 = (uint64_t *)(*v6 + 16 * v236);
    v11 = *v10;
    v12 = (std::__shared_weak_count *)v10[1];
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (i >= (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
      break;
    v16 = (uint64_t *)(*v6 + 16 * v236);
    v18 = *v16;
    v17 = (std::__shared_weak_count *)v16[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v9 = (_QWORD *)(*(_QWORD *)(v18 + 40) + 16 * i);
    *v9 = 0;
    v9[1] = 0;
  }
  v23 = *(_QWORD *)(a1 + 152);
  v22 = *(_QWORD *)(a1 + 160);
  v234 = 0;
  v235 = 0;
  v233 = 0;
  if (v22 == v23)
  {
    v230 = 0;
    v231 = 0;
    v232 = 0;
  }
  else
  {
    v24 = (v22 - v23) >> 2;
    v25 = 45 * v24;
    if ((unint64_t)(45 * v24) >> 60)
      sub_2394189F8();
    v26 = 720 * v24;
    v27 = (char *)operator new(720 * v24);
    v233 = v27;
    v235 = &v27[16 * v25];
    bzero(v27, v26);
    v234 = &v27[v26];
    v28 = (char *)operator new(v26);
    v230 = v28;
    v232 = &v28[16 * v25];
    bzero(v28, v26);
    v231 = &v28[v26];
  }
  v29 = (unsigned int *)operator new(0xCuLL);
  v228 = v29 + 3;
  v229 = (char *)(v29 + 3);
  *(_QWORD *)v29 = -1;
  v29[2] = -1;
  v227 = v29;
  if (v22 != v23)
  {
    v30 = 0;
    __asm
    {
      FMOV            V1.4S, #3.0
      FMOV            V0.4S, #4.0
    }
    v201 = _Q0;
    v202 = _Q1;
    __asm
    {
      FMOV            V1.4S, #5.0
      FMOV            V0.4S, #6.0
    }
    v199 = _Q0;
    v200 = _Q1;
    __asm { FMOV            V0.4S, #7.0 }
    v198 = _Q0;
    do
    {
      v225[0].i32[0] = v30;
      sub_23996362C(a1, (unsigned int *)v225, (uint64_t)&v227);
      v38 = *v227;
      v39 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v41 = *v39;
      v40 = (std::__shared_weak_count *)v39[1];
      if (v40)
      {
        v42 = (unint64_t *)&v40->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        do
          v44 = __ldaxr(v42);
        while (__stlxr(v44 - 1, v42));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v206 = *(float32x4_t *)(*(_QWORD *)(v41 + 40) + 16 * v38);
      v45 = v227[1];
      v46 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v48 = *v46;
      v47 = (std::__shared_weak_count *)v46[1];
      if (v47)
      {
        v49 = (unint64_t *)&v47->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        do
          v51 = __ldaxr(v49);
        while (__stlxr(v51 - 1, v49));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      v204 = *(float32x4_t *)(*(_QWORD *)(v48 + 40) + 16 * v45);
      v52 = v227[2];
      v53 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v55 = *v53;
      v54 = (std::__shared_weak_count *)v53[1];
      if (v54)
      {
        v56 = (unint64_t *)&v54->__shared_owners_;
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
        do
          v58 = __ldaxr(v56);
        while (__stlxr(v58 - 1, v56));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v203 = *(float32x4_t *)(*(_QWORD *)(v55 + 40) + 16 * v52);
      sub_23995E494(a1, v30, v225);
      v59.i64[0] = 0x3E0000003E000000;
      v59.i64[1] = 0x3E0000003E000000;
      v60 = vmulq_f32(vsubq_f32(v203, v206), v59);
      v61 = vmulq_f32(vsubq_f32(v204, v206), v59);
      v62 = vaddq_f32(v206, vmulq_f32(v61, (float32x4_t)0));
      v63 = vmulq_f32(v60, (float32x4_t)0);
      v64 = 16 * (45 * v30);
      *(float32x4_t *)&v233[v64] = vaddq_f32(v63, v62);
      *(float32x4_t *)&v230[v64] = v225[0];
      v65 = 16 * (45 * v30 + 1);
      *(float32x4_t *)&v233[v65] = vaddq_f32(v60, v62);
      *(float32x4_t *)&v230[v65] = v225[0];
      v66 = vaddq_f32(v206, v61);
      v67 = 16 * (45 * v30 + 2);
      *(float32x4_t *)&v233[v67] = vaddq_f32(v63, v66);
      *(float32x4_t *)&v230[v67] = v225[0];
      v68 = vaddq_f32(v60, v60);
      v69 = 16 * (45 * v30 + 3);
      *(float32x4_t *)&v233[v69] = vaddq_f32(v68, v62);
      *(float32x4_t *)&v230[v69] = v225[0];
      v70 = 16 * (45 * v30 + 4);
      *(float32x4_t *)&v233[v70] = vaddq_f32(v60, v66);
      *(float32x4_t *)&v230[v70] = v225[0];
      v71 = vaddq_f32(v206, vaddq_f32(v61, v61));
      v72 = 16 * (45 * v30 + 5);
      *(float32x4_t *)&v233[v72] = vaddq_f32(v63, v71);
      *(float32x4_t *)&v230[v72] = v225[0];
      v73 = vmulq_f32(v60, v202);
      v74 = 16 * (45 * v30 + 6);
      *(float32x4_t *)&v233[v74] = vaddq_f32(v73, v62);
      *(float32x4_t *)&v230[v74] = v225[0];
      v75 = 16 * (45 * v30 + 7);
      *(float32x4_t *)&v233[v75] = vaddq_f32(v68, v66);
      *(float32x4_t *)&v230[v75] = v225[0];
      v76 = 16 * (45 * v30 + 8);
      *(float32x4_t *)&v233[v76] = vaddq_f32(v60, v71);
      *(float32x4_t *)&v230[v76] = v225[0];
      v77 = vaddq_f32(v206, vmulq_f32(v61, v202));
      v78 = 16 * (45 * v30 + 9);
      *(float32x4_t *)&v233[v78] = vaddq_f32(v63, v77);
      *(float32x4_t *)&v230[v78] = v225[0];
      v79 = vmulq_f32(v60, v201);
      v80 = 16 * (45 * v30 + 10);
      *(float32x4_t *)&v233[v80] = vaddq_f32(v79, v62);
      *(float32x4_t *)&v230[v80] = v225[0];
      v81 = 16 * (45 * v30 + 11);
      *(float32x4_t *)&v233[v81] = vaddq_f32(v73, v66);
      *(float32x4_t *)&v230[v81] = v225[0];
      v82 = 16 * (45 * v30 + 12);
      *(float32x4_t *)&v233[v82] = vaddq_f32(v68, v71);
      *(float32x4_t *)&v230[v82] = v225[0];
      v83 = 16 * (45 * v30 + 13);
      *(float32x4_t *)&v233[v83] = vaddq_f32(v60, v77);
      *(float32x4_t *)&v230[v83] = v225[0];
      v84 = vaddq_f32(v206, vmulq_f32(v61, v201));
      v85 = 16 * (45 * v30 + 14);
      *(float32x4_t *)&v233[v85] = vaddq_f32(v63, v84);
      *(float32x4_t *)&v230[v85] = v225[0];
      v86 = vmulq_f32(v60, v200);
      v87 = 16 * (45 * v30 + 15);
      *(float32x4_t *)&v233[v87] = vaddq_f32(v86, v62);
      *(float32x4_t *)&v230[v87] = v225[0];
      v88 = 16 * (45 * v30 + 16);
      *(float32x4_t *)&v233[v88] = vaddq_f32(v79, v66);
      *(float32x4_t *)&v230[v88] = v225[0];
      v89 = 16 * (45 * v30 + 17);
      *(float32x4_t *)&v233[v89] = vaddq_f32(v73, v71);
      *(float32x4_t *)&v230[v89] = v225[0];
      v90 = 16 * (45 * v30 + 18);
      *(float32x4_t *)&v233[v90] = vaddq_f32(v68, v77);
      *(float32x4_t *)&v230[v90] = v225[0];
      v91 = 16 * (45 * v30 + 19);
      *(float32x4_t *)&v233[v91] = vaddq_f32(v60, v84);
      *(float32x4_t *)&v230[v91] = v225[0];
      v92 = vaddq_f32(v206, vmulq_f32(v61, v200));
      v93 = 16 * (45 * v30 + 20);
      *(float32x4_t *)&v233[v93] = vaddq_f32(v63, v92);
      *(float32x4_t *)&v230[v93] = v225[0];
      v94 = vmulq_f32(v60, v199);
      v95 = 16 * (45 * v30 + 21);
      *(float32x4_t *)&v233[v95] = vaddq_f32(v94, v62);
      *(float32x4_t *)&v230[v95] = v225[0];
      v96 = 16 * (45 * v30 + 22);
      *(float32x4_t *)&v233[v96] = vaddq_f32(v86, v66);
      *(float32x4_t *)&v230[v96] = v225[0];
      v97 = 16 * (45 * v30 + 23);
      *(float32x4_t *)&v233[v97] = vaddq_f32(v79, v71);
      *(float32x4_t *)&v230[v97] = v225[0];
      v98 = 16 * (45 * v30 + 24);
      *(float32x4_t *)&v233[v98] = vaddq_f32(v73, v77);
      *(float32x4_t *)&v230[v98] = v225[0];
      v99 = 16 * (45 * v30 + 25);
      *(float32x4_t *)&v233[v99] = vaddq_f32(v68, v84);
      *(float32x4_t *)&v230[v99] = v225[0];
      v100 = 16 * (45 * v30 + 26);
      *(float32x4_t *)&v233[v100] = vaddq_f32(v60, v92);
      *(float32x4_t *)&v230[v100] = v225[0];
      v101 = vaddq_f32(v206, vmulq_f32(v61, v199));
      v102 = 16 * (45 * v30 + 27);
      *(float32x4_t *)&v233[v102] = vaddq_f32(v63, v101);
      *(float32x4_t *)&v230[v102] = v225[0];
      v103 = vmulq_f32(v60, v198);
      v104 = 16 * (45 * v30 + 28);
      *(float32x4_t *)&v233[v104] = vaddq_f32(v103, v62);
      *(float32x4_t *)&v230[v104] = v225[0];
      v105 = 16 * (45 * v30 + 29);
      *(float32x4_t *)&v233[v105] = vaddq_f32(v94, v66);
      *(float32x4_t *)&v230[v105] = v225[0];
      v106 = 16 * (45 * v30 + 30);
      *(float32x4_t *)&v233[v106] = vaddq_f32(v86, v71);
      *(float32x4_t *)&v230[v106] = v225[0];
      v107 = 16 * (45 * v30 + 31);
      *(float32x4_t *)&v233[v107] = vaddq_f32(v79, v77);
      *(float32x4_t *)&v230[v107] = v225[0];
      v108 = 16 * (45 * v30 + 32);
      *(float32x4_t *)&v233[v108] = vaddq_f32(v73, v84);
      *(float32x4_t *)&v230[v108] = v225[0];
      v109 = 16 * (45 * v30 + 33);
      *(float32x4_t *)&v233[v109] = vaddq_f32(v68, v92);
      *(float32x4_t *)&v230[v109] = v225[0];
      v110 = 16 * (45 * v30 + 34);
      *(float32x4_t *)&v233[v110] = vaddq_f32(v60, v101);
      *(float32x4_t *)&v230[v110] = v225[0];
      v111 = vaddq_f32(v206, vmulq_f32(v61, v198));
      v112 = 16 * (45 * v30 + 35);
      *(float32x4_t *)&v233[v112] = vaddq_f32(v63, v111);
      *(float32x4_t *)&v230[v112] = v225[0];
      v113.i64[0] = 0x4100000041000000;
      v113.i64[1] = 0x4100000041000000;
      v114 = 16 * (45 * v30 + 36);
      *(float32x4_t *)&v233[v114] = vaddq_f32(vmulq_f32(v60, v113), v62);
      *(float32x4_t *)&v230[v114] = v225[0];
      v115 = 16 * (45 * v30 + 37);
      *(float32x4_t *)&v233[v115] = vaddq_f32(v103, v66);
      *(float32x4_t *)&v230[v115] = v225[0];
      v116 = 16 * (45 * v30 + 38);
      *(float32x4_t *)&v233[v116] = vaddq_f32(v94, v71);
      *(float32x4_t *)&v230[v116] = v225[0];
      v117 = 16 * (45 * v30 + 39);
      *(float32x4_t *)&v233[v117] = vaddq_f32(v86, v77);
      *(float32x4_t *)&v230[v117] = v225[0];
      v118 = 16 * (45 * v30 + 40);
      *(float32x4_t *)&v233[v118] = vaddq_f32(v79, v84);
      *(float32x4_t *)&v230[v118] = v225[0];
      v119 = 16 * (45 * v30 + 41);
      *(float32x4_t *)&v233[v119] = vaddq_f32(v73, v92);
      *(float32x4_t *)&v230[v119] = v225[0];
      v120 = 16 * (45 * v30 + 42);
      *(float32x4_t *)&v233[v120] = vaddq_f32(v68, v101);
      *(float32x4_t *)&v230[v120] = v225[0];
      v121 = 16 * (45 * v30 + 43);
      *(float32x4_t *)&v233[v121] = vaddq_f32(v60, v111);
      *(float32x4_t *)&v230[v121] = v225[0];
      v122 = 16 * (45 * v30 + 44);
      *(float32x4_t *)&v233[v122] = vaddq_f32(v63, vaddq_f32(v206, vmulq_f32(v61, v113)));
      *(float32x4_t *)&v230[v122] = v225[0];
      ++v30;
    }
    while (v30 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  }
  sub_23992DD40(a1);
  v124 = v123;
  v226 = 0;
  v125 = sub_23993C8E0(v225, a2, &v226, a3);
  if ((sub_23993C9D4(v125) & 1) != 0)
  {
    v126 = (*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2;
    v222 = 0;
    v223 = 0;
    v224 = 0;
    v219 = 0;
    v220 = 0;
    v221 = 0;
    sub_2399F8BD4(&v233, (uint64_t)&v230, v225, v126, (uint64_t)&v222, (uint64_t)&v219, v124);
    v231 = v230;
    v128 = *(_QWORD *)(a2 + 152);
    v127 = *(_QWORD *)(a2 + 160);
    v217 = 0;
    v218 = 0;
    __p = 0;
    v129 = v127 - v128;
    if (v127 != v128)
    {
      if (v129 < 0)
        sub_2394189F8();
      __p = operator new(v127 - v128);
      v218 = (char *)__p + 4 * (v129 >> 2);
      bzero(__p, v129);
      v217 = (char *)__p + v129;
    }
    v214 = -1;
    v130 = off_256934418[0];
    v131 = strlen(off_256934418[0]);
    if (v131 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v132 = v131;
    if (v131 >= 0x17)
    {
      v139 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v131 | 7) != 0x17)
        v139 = v131 | 7;
      v140 = v139 + 1;
      p_dst = (void **)operator new(v139 + 1);
      v212 = (char *)v132;
      v213 = v140 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v213) = v131;
      p_dst = (void **)&__dst;
      if (!v131)
      {
LABEL_66:
        *((_BYTE *)p_dst + v132) = 0;
        LODWORD(v209) = 0;
        v208 = 0;
        v215 = sub_2394E5DE4((uint64_t **)(a2 + 56), (uint64_t)&v208, (unsigned __int8 *)&__dst);
        if (SHIBYTE(v213) < 0)
          operator delete(__dst);
        v141 = off_256934438[0];
        v142 = strlen(off_256934438[0]);
        if (v142 > 0x7FFFFFFFFFFFFFF7)
          sub_23941A5AC();
        v143 = v142;
        if (v142 >= 0x17)
        {
          v145 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v142 | 7) != 0x17)
            v145 = v142 | 7;
          v146 = v145 + 1;
          v144 = (void **)operator new(v145 + 1);
          v212 = (char *)v143;
          v213 = v146 | 0x8000000000000000;
          __dst = v144;
        }
        else
        {
          HIBYTE(v213) = v142;
          v144 = (void **)&__dst;
          if (!v142)
          {
LABEL_76:
            *((_BYTE *)v144 + v143) = 0;
            v208 = 0;
            v147 = sub_2394E5C88((uint64_t **)(a2 + 80), (uint64_t)&v208, (unsigned __int8 *)&__dst);
            v148 = v147;
            v214 = v147;
            if (SHIBYTE(v213) < 0)
            {
              operator delete(__dst);
              v180 = v215 == -1 || v148 == -1;
              v138 = !v180;
              if (!v180)
              {
LABEL_84:
                v151 = *(_QWORD *)(a2 + 152);
                v150 = *(_QWORD *)(a2 + 160);
                v212 = 0;
                v213 = 0;
                __dst = 0;
                v152 = v150 - v151;
                if (v150 == v151)
                {
                  v163 = 1.0;
                  v169 = *(_QWORD *)(a1 + 152);
                  v168 = *(_QWORD *)(a1 + 160);
                  __dst = 0;
                  v212 = 0;
                  v213 = 0;
                  v170 = v168 - v169;
                  if (v168 == v169)
                  {
LABEL_126:
                    v185 = (char *)operator new(0x300uLL);
                    v208 = v185;
                    v210 = v185 + 768;
                    bzero(v185, 0x300uLL);
                    v209 = v185 + 768;
                    if (v168 == v169)
                      goto LABEL_138;
                    v186 = 0;
                    v207 = (float32x4_t)vdupq_n_s32(0x3C800000u);
                    do
                    {
                      sub_239989EE4((unint64_t *)&v208, 45 * v186);
                      v187 = 0;
                      v188 = 0uLL;
                      do
                      {
                        v189 = (float)((float)(*((float *)__dst + *(unsigned int *)&v208[v187])
                                             + *((float *)__dst + *(unsigned int *)&v208[v187 + 4]))
                                     + *((float *)__dst + *(unsigned int *)&v208[v187 + 8]))
                             / 3.0;
                        v190.i32[1] = 0;
                        v190.i32[3] = 0;
                        v190.f32[0] = v189 * v189;
                        v190.f32[2] = v189 * v189;
                        v188 = vaddq_f32(v188, vmulq_f32(v190, v207));
                        v187 += 12;
                      }
                      while (v187 != 768);
                      v191 = (uint64_t *)(*v6 + 16 * v236);
                      v193 = *v191;
                      v192 = (std::__shared_weak_count *)v191[1];
                      if (v192)
                      {
                        v194 = (unint64_t *)&v192->__shared_owners_;
                        do
                          v195 = __ldxr(v194);
                        while (__stxr(v195 + 1, v194));
                        do
                          v196 = __ldaxr(v194);
                        while (__stlxr(v196 - 1, v194));
                        if (!v196)
                        {
                          v205 = v188;
                          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                          std::__shared_weak_count::__release_weak(v192);
                          v188 = v205;
                        }
                      }
                      *(float32x4_t *)(*(_QWORD *)(v193 + 40) + 16 * v186++) = v188;
                    }
                    while (v186 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
                    v185 = v208;
                    if (v208)
LABEL_138:
                      operator delete(v185);
                    if (__dst)
                      operator delete(__dst);
LABEL_141:
                    if (__p)
                      operator delete(__p);
                    if (v219)
                    {
                      v220 = v219;
                      operator delete(v219);
                    }
                    if (v222)
                    {
                      v223 = v222;
                      operator delete(v222);
                    }
                    goto LABEL_147;
                  }
                }
                else
                {
                  if (v152 < 0)
                    sub_2394189F8();
                  v153 = (void **)operator new(v150 - v151);
                  __dst = v153;
                  v213 = (unint64_t)v153 + 4 * (v152 >> 2);
                  bzero(v153, v152);
                  v154 = operator new(v152);
                  bzero(v154, v152);
                  v155 = 0;
                  v156 = 0.0;
                  v157 = 1;
                  v158 = 0.0;
                  do
                  {
                    LODWORD(v208) = v157 - 1;
                    *((float *)v153 + v155) = sub_23998A1D8(a2, (unsigned int *)&v208, &v215, &v214);
                    LODWORD(v208) = v157 - 1;
                    v159 = sub_239932994(a2, (unsigned int *)&v208);
                    *((float *)v154 + v155) = v159;
                    v158 = v158 + *((float *)v153 + v155);
                    v156 = v156 + v159;
                    v155 = v157;
                    v161 = *(_QWORD *)(a2 + 152);
                    v160 = *(_QWORD *)(a2 + 160);
                    v162 = (v160 - v161) >> 2;
                    ++v157;
                  }
                  while (v162 > v155);
                  if (v156 <= 1.0e-16)
                    v163 = 1.0;
                  else
                    v163 = v158 / v156;
                  if (v160 != v161)
                  {
                    v164 = 0;
                    do
                    {
                      while (1)
                      {
                        v165 = *((float *)v154 + v164);
                        if (v165 > 1.0e-16)
                          break;
                        *((float *)__p + v164++) = v163;
                        if (v162 <= v164)
                          goto LABEL_101;
                      }
                      v166 = *((float *)v153 + v164) / v165;
                      if (v163 * 0.001 > v166 || v163 * 1000.0 < v166)
                        v166 = v163;
                      *((float *)__p + v164++) = v166;
                    }
                    while (v162 > v164);
                  }
LABEL_101:
                  operator delete(v154);
                  v212 = (char *)v153;
                  operator delete(v153);
                  v169 = *(_QWORD *)(a1 + 152);
                  v168 = *(_QWORD *)(a1 + 160);
                  __dst = 0;
                  v212 = 0;
                  v213 = 0;
                  v170 = v168 - v169;
                  if (v168 == v169)
                    goto LABEL_126;
                }
                v171 = v170 >> 2;
                v172 = 45 * v171;
                if ((unint64_t)(45 * v171) >> 62)
                  sub_2394189F8();
                v173 = 180 * v171;
                v174 = (void **)operator new(180 * v171);
                __dst = v174;
                v213 = (unint64_t)v174 + 4 * v172;
                bzero(v174, v173);
                v175 = 0;
                v212 = (char *)v174 + v173;
                v176 = (unsigned int *)v222;
                v177 = (float *)__p;
                if (v172 <= 1)
                  v178 = 1;
                else
                  v178 = v172;
                do
                {
                  while (1)
                  {
                    v179 = v176[v175];
                    if ((_DWORD)v179 != -1)
                      break;
                    *((float *)v174 + v175++) = 1.0;
                    if (v178 == v175)
                      goto LABEL_126;
                  }
                  *((float *)v174 + v175++) = v177[v179] / v163;
                }
                while (v178 != v175);
                goto LABEL_126;
              }
            }
            else
            {
              _ZF = v215 == -1 || v147 == -1;
              v138 = !_ZF;
              if (!_ZF)
                goto LABEL_84;
            }
            if (v236 != -1)
            {
              v181 = (_QWORD *)(*v6 + 16 * v236);
              v182 = (std::__shared_weak_count *)v181[1];
              *v181 = 0;
              v181[1] = 0;
              if (v182)
              {
                v183 = (unint64_t *)&v182->__shared_owners_;
                do
                  v184 = __ldaxr(v183);
                while (__stlxr(v184 - 1, v183));
                if (!v184)
                {
                  ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                  std::__shared_weak_count::__release_weak(v182);
                }
              }
            }
            v236 = -1;
            goto LABEL_141;
          }
        }
        memmove(v144, v141, v143);
        goto LABEL_76;
      }
    }
    memmove(p_dst, v130, v132);
    goto LABEL_66;
  }
  if (v236 != -1)
  {
    v134 = (_QWORD *)(*v6 + 16 * v236);
    v135 = (std::__shared_weak_count *)v134[1];
    *v134 = 0;
    v134[1] = 0;
    if (v135)
    {
      v136 = (unint64_t *)&v135->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
  }
  v138 = 0;
  v236 = -1;
LABEL_147:
  sub_23993C9C4(v225);
  if (v227)
  {
    v228 = v227;
    operator delete(v227);
  }
  if (v230)
  {
    v231 = v230;
    operator delete(v230);
  }
  if (v233)
  {
    v234 = v233;
    operator delete(v233);
  }
  return v138;
}

void sub_23998B4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  void *v42;
  uint64_t v43;
  void *v45;
  void *v46;
  void *v47;

  operator delete(v42);
  if (__p)
    operator delete(__p);
  if (a38)
    operator delete(a38);
  if (a41)
    operator delete(a41);
  sub_23993C9C4(v43 - 224);
  v45 = *(void **)(v43 - 184);
  if (v45)
  {
    *(_QWORD *)(v43 - 176) = v45;
    operator delete(v45);
    v46 = *(void **)(v43 - 160);
    if (!v46)
    {
LABEL_9:
      v47 = *(void **)(v43 - 128);
      if (!v47)
LABEL_14:
        _Unwind_Resume(a1);
LABEL_13:
      *(_QWORD *)(v43 - 120) = v47;
      operator delete(v47);
      goto LABEL_14;
    }
  }
  else
  {
    v46 = *(void **)(v43 - 160);
    if (!v46)
      goto LABEL_9;
  }
  *(_QWORD *)(v43 - 152) = v46;
  operator delete(v46);
  v47 = *(void **)(v43 - 128);
  if (!v47)
    goto LABEL_14;
  goto LABEL_13;
}

float sub_23998B620(uint64_t a1, unsigned int *a2, uint64_t *a3, unsigned int *a4)
{
  unint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  float32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float *v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  uint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  float32x4_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  float *v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  unsigned int *v92;
  unsigned int v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  void *__p;
  void *v99;
  char *v100;
  unsigned int v101;
  unsigned int v102;

  v101 = -1;
  v102 = -1;
  v8 = *a2;
  v9 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
  v11 = *v9;
  v10 = (std::__shared_weak_count *)v9[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (((*(_QWORD *)(*(_QWORD *)(v11 + 40) + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) != 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  if (((*(_QWORD *)(*(_QWORD *)(v11 + 40) + ((v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1) == 0)
LABEL_7:
    v102 = *(_DWORD *)(sub_239962518(a1 + 104, a2) + 16);
LABEL_8:
  v15 = *(unsigned int *)sub_239962518(a1 + 104, a2);
  v16 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
  v18 = *v16;
  v17 = (std::__shared_weak_count *)v16[1];
  if (!v17)
    goto LABEL_13;
  v19 = (unint64_t *)&v17->__shared_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 - 1, v19));
  if (v21)
  {
LABEL_13:
    if (((*(_QWORD *)(*(_QWORD *)(v18 + 40) + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) != 0)
      goto LABEL_14;
LABEL_59:
    v92 = (unsigned int *)sub_239962518(a1 + 104, a2);
    v101 = *(_DWORD *)(sub_239962518(a1 + 104, v92) + 16);
    if (v102 != -1)
      goto LABEL_15;
LABEL_60:
    v93 = v101;
    v101 = -1;
    v102 = v93;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
  std::__shared_weak_count::__release_weak(v17);
  if (((*(_QWORD *)(*(_QWORD *)(v18 + 40) + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) == 0)
    goto LABEL_59;
LABEL_14:
  if (v102 == -1)
    goto LABEL_60;
LABEL_15:
  v22 = *(unsigned int *)(sub_239962518(a1 + 104, a2) + 12);
  v23 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
  v25 = *v23;
  v24 = (std::__shared_weak_count *)v23[1];
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 - 1, v26));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v97 = *(float32x4_t *)(*(_QWORD *)(v25 + 40) + 16 * v22);
  v29 = (unsigned int *)sub_239962518(a1 + 104, a2);
  v30 = *(unsigned int *)(sub_239962518(a1 + 104, v29) + 12);
  v31 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v96 = *(float32x4_t *)(*(_QWORD *)(v33 + 40) + 16 * v30);
  v37 = operator new(0xCuLL);
  v99 = v37 + 3;
  v100 = (char *)(v37 + 3);
  *(_QWORD *)v37 = -1;
  v37[2] = -1;
  __p = v37;
  sub_23996362C(a1, &v102, (uint64_t)&__p);
  v38 = *(unsigned int *)__p;
  v39 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
  v41 = *v39;
  v40 = (std::__shared_weak_count *)v39[1];
  if (v40)
  {
    v42 = (unint64_t *)&v40->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v45 = *(float32x4_t *)(*(_QWORD *)(v41 + 40) + 16 * v38);
  v46 = 2 * v102;
  v47 = *a3;
  v48 = (2 * v102) | 1;
  v49 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * *a4);
  v51 = *v49;
  v50 = (std::__shared_weak_count *)v49[1];
  if (v50)
  {
    v52 = (unint64_t *)&v50->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
    do
      v54 = __ldaxr(v52);
    while (__stlxr(v54 - 1, v52));
    if (!v54)
    {
      v94 = v45;
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
      v45 = v94;
    }
  }
  v55 = vsubq_f32(v97, v45);
  v56 = *(float32x4_t *)(v47 + 16 * v46);
  v57 = vmulq_f32(v55, v56);
  v57.i32[3] = 0;
  v58 = (float *)(*(_QWORD *)(v51 + 40) + 16 * v102);
  v59 = *(float32x4_t *)(v47 + 16 * v48);
  v60 = vmulq_f32(v55, v59);
  v60.i32[3] = 0;
  v61 = vsubq_f32(v96, v45);
  v62 = vmulq_f32(v61, v56);
  v62.i32[3] = 0;
  v63 = vmulq_f32(v61, v59);
  v63.i32[3] = 0;
  v62.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v62, v62))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v57, v57));
  v60.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v63, v63))
             - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v60, v60));
  v64 = sqrtf((float)((float)(v60.f32[0] * (float)(v60.f32[0] * v58[2])) + (float)((float)(v62.f32[0] * *v58) * v62.f32[0]))+ (float)((float)(v62.f32[0] * (float)(v58[1] + v58[1])) * v60.f32[0]));
  if (v101 != -1)
  {
    sub_23996362C(a1, &v101, (uint64_t)&__p);
    v65 = *(unsigned int *)__p;
    v66 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
    v68 = *v66;
    v67 = (std::__shared_weak_count *)v66[1];
    if (v67)
    {
      v69 = (unint64_t *)&v67->__shared_owners_;
      do
        v70 = __ldxr(v69);
      while (__stxr(v70 + 1, v69));
      do
        v71 = __ldaxr(v69);
      while (__stlxr(v71 - 1, v69));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v72 = *(float32x4_t *)(*(_QWORD *)(v68 + 40) + 16 * v65);
    v73 = 2 * v101;
    v74 = *a3;
    v75 = (2 * v101) | 1;
    v76 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * *a4);
    v78 = *v76;
    v77 = (std::__shared_weak_count *)v76[1];
    if (v77)
    {
      v79 = (unint64_t *)&v77->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
      do
        v81 = __ldaxr(v79);
      while (__stlxr(v81 - 1, v79));
      if (!v81)
      {
        v95 = v72;
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
        v72 = v95;
      }
    }
    v82 = (float *)(*(_QWORD *)(v78 + 40) + 16 * v101);
    v83 = vsubq_f32(v97, v72);
    v84 = *(float32x4_t *)(v74 + 16 * v73);
    v85 = vmulq_f32(v83, v84);
    v85.i32[3] = 0;
    v86 = *(float32x4_t *)(v74 + 16 * v75);
    v87 = vmulq_f32(v83, v86);
    v87.i32[3] = 0;
    v88 = vsubq_f32(v96, v72);
    v89 = vmulq_f32(v88, v84);
    v89.i32[3] = 0;
    v90 = vmulq_f32(v88, v86);
    v90.i32[3] = 0;
    v89.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v89, v89))
               - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v85, v85));
    v87.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v90, v90))
               - vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v87, v87));
    v64 = (float)(v64
                + sqrtf((float)((float)(v87.f32[0] * (float)(v87.f32[0] * v82[2]))+ (float)((float)(v89.f32[0] * *v82) * v89.f32[0]))+ (float)((float)(v89.f32[0] * (float)(v82[1] + v82[1])) * v87.f32[0])))* 0.5;
  }
  if (__p)
  {
    v99 = __p;
    operator delete(__p);
  }
  return v64;
}

void sub_23998BC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23998BC34(_QWORD *a1, float *a2, float *a3, float *a4)
{
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  void *__p[2];
  char v30;
  int v31;

  v30 = 6;
  strcpy((char *)__p, "f:area");
  v8 = a1 + 7;
  v31 = 0;
  v9 = sub_23998EE84((uint64_t **)a1 + 7, (uint64_t)&v31, (unsigned __int8 *)__p);
  v10 = v9;
  if (v30 < 0)
  {
    operator delete(__p[0]);
    if (v10 == -1)
    {
LABEL_15:
      v22 = *a3;
      goto LABEL_27;
    }
  }
  else if (v9 == -1)
  {
    goto LABEL_15;
  }
  v11 = a1[20] - a1[19];
  if (!v11)
    goto LABEL_15;
  v12 = v10;
  if (*(_QWORD *)(*v8 + 16 * v10 + 8))
  {
    v13 = 0;
    v14 = 0.0;
    do
    {
      v16 = (uint64_t *)(*v8 + 16 * v12);
      v18 = *v16;
      v17 = (std::__shared_weak_count *)v16[1];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v14 = v14 + *(float *)(*(_QWORD *)(v18 + 40) + 4 * v13++);
      v15 = (uint64_t)(a1[20] - a1[19]) >> 2;
    }
    while (v13 < v15);
  }
  else
  {
    v15 = v11 >> 2;
    v23 = *(_QWORD *)(*(_QWORD *)(*v8 + 16 * v10) + 40);
    if (v15 <= 1)
      v24 = 1;
    else
      v24 = v15;
    if ((unint64_t)(v24 - 0x100000001) >= 0xFFFFFFFF00000007)
    {
      v26 = 0;
      v25 = v24 & 0xFFFFFFFFFFFFFFF8;
      v14 = 0.0;
      do
      {
        v27 = v23 + 4 * (v26 & 0xFFFFFFF8);
        v14 = (float)((float)((float)((float)((float)((float)((float)(v14 + COERCE_FLOAT(*(_OWORD *)v27))
                                                            + COERCE_FLOAT(HIDWORD(*(_QWORD *)v27)))
                                                    + COERCE_FLOAT(*(_QWORD *)(v27 + 8)))
                                            + COERCE_FLOAT(HIDWORD(*(_OWORD *)v27)))
                                    + COERCE_FLOAT(*(_OWORD *)(v27 + 16)))
                            + COERCE_FLOAT(HIDWORD(*(_QWORD *)(v27 + 16))))
                    + COERCE_FLOAT(*(_QWORD *)(v27 + 24)))
            + COERCE_FLOAT(HIDWORD(*(_OWORD *)(v27 + 16)));
        v26 += 8;
      }
      while (v25 != v26);
      goto LABEL_25;
    }
    v25 = 0;
    v14 = 0.0;
    do
    {
      v14 = v14 + *(float *)(v23 + 4 * v25++);
LABEL_25:
      ;
    }
    while (v24 != v25);
  }
  v28 = *a2 * 100.0 * v14 / (float)v15;
  *a4 = v28;
  v22 = *a3 * 0.333 + v28 * 0.667;
LABEL_27:
  *a4 = v22;
}

uint64_t sub_23998BEC0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  float *v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int64x2_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[8];
  _QWORD v41[45];

  v41[44] = *MEMORY[0x24BDAC8D0];
  sub_239994FB8((uint64_t)v40, *(_QWORD *)(a1 + 80), a1 + 96, a1 + 112, *(_BYTE *)(a1 + 152));
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    if (v6 == a1 + 16)
    {
      v28.i64[1] = (uint64_t)v27;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16, v27);
    }
    else
    {
      v28.i64[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
    sub_2394D9710(v27, v41);
    v7 = (_QWORD *)v28.i64[1];
    if ((_QWORD *)v28.i64[1] == v27)
    {
      v8 = 4;
      v7 = v27;
      goto LABEL_9;
    }
    if (v28.i64[1])
    {
      v8 = 5;
LABEL_9:
      (*(void (**)(void))(*v7 + 8 * v8))();
    }
  }
  if (!sub_239994FBC((uint64_t)v40))
    return sub_23998E424((uint64_t)v40);
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9) & 1) != 0)
      return sub_23998E424((uint64_t)v40);
  }
  v10 = 0;
  *(_WORD *)((char *)v27 + 1) = 257;
  v28 = vdupq_n_s64(0xAuLL);
  v29 = 20;
  v30 = xmmword_239F03720;
  v31 = 0x7F7FFFFFFF7FFFFFLL;
  v32 = -1;
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  LOBYTE(v27[0]) = *(_BYTE *)(a1 + 152);
  if (*(_BYTE *)(a1 + 120))
  {
    v11 = *(_QWORD *)(a1 + 40);
    if (!v11)
    {
LABEL_18:
      if (v10)
      {
        v12 = (float *)*((_QWORD *)&v38 + 1);
        if ((_QWORD)v39 != *((_QWORD *)&v38 + 1))
        {
          v13 = 0;
          v14 = (uint64_t)(v39 - *((_QWORD *)&v38 + 1)) >> 2;
          if (v14 <= 1)
            v14 = 1;
          do
          {
            v15 = *v12;
            if (*v12 < 3.4028e38)
            {
              if (*(float *)a1 < v15)
              {
                *(float *)a1 = v15;
                v15 = *v12;
              }
              *(float *)(a1 + 4) = v15 + *(float *)(a1 + 4);
              ++v13;
            }
            ++v12;
            --v14;
          }
          while (v14);
          if (v13)
            *(float *)(a1 + 4) = *(float *)(a1 + 4) / (float)v13;
        }
        sub_2399A0D04(*(_QWORD *)(a1 + 80));
      }
      else
      {
        sub_239997520((uint64_t)v40, a2, a3, (_DWORD *)(a1 + 116), *(unsigned __int8 *)(a1 + 152));
        v16 = *(_QWORD *)(a1 + 40);
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 48))(v16);
      }
      goto LABEL_33;
    }
  }
  else
  {
    v10 = sub_2399B4E84((uint64_t)v40, (uint64_t)v27, (float *)&v26 + 1, (float *)&v26, &v25, (float *)&v24, 1);
    v11 = *(_QWORD *)(a1 + 40);
    if (!v11)
      goto LABEL_18;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) & 1) == 0)
    goto LABEL_18;
LABEL_33:
  if (*((_QWORD *)&v38 + 1))
  {
    *(_QWORD *)&v39 = *((_QWORD *)&v38 + 1);
    operator delete(*((void **)&v38 + 1));
  }
  if ((_QWORD)v37)
  {
    *((_QWORD *)&v37 + 1) = v37;
    operator delete((void *)v37);
  }
  v17 = *((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v18 = v36;
    v19 = (void *)*((_QWORD *)&v35 + 1);
    if ((_QWORD)v36 != *((_QWORD *)&v35 + 1))
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)&v35 + 1);
    }
    *(_QWORD *)&v36 = v17;
    operator delete(v19);
  }
  sub_23998E148((uint64_t)v33);
  return sub_23998E424((uint64_t)v40);
}

void sub_23998C20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_23998C244(&a12);
  sub_23998E424((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_23998C230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_23998E424((uint64_t)&a35);
  _Unwind_Resume(a1);
}

_QWORD *sub_23998C244(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  v4 = a1[14];
  if (v4)
  {
    v5 = a1[15];
    v6 = (void *)a1[14];
    if (v5 != v4)
    {
      do
      {
        v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = (void *)a1[14];
    }
    a1[15] = v4;
    operator delete(v6);
  }
  sub_23998E148((uint64_t)(a1 + 9));
  return a1;
}

void sub_23998C304(_QWORD *a1, uint64_t a2, char a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  unint64_t v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32[2];
  void *__p[3];
  void *v34;
  char *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  memset(__p, 0, sizeof(__p));
  v5 = *(std::__shared_weak_count **)(a2 + 8);
  v32[0] = *(_QWORD *)a2;
  v32[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_23998C588((uint64_t)a1, v32, a3, &v34, __p);
  if (!v5)
    goto LABEL_8;
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v11 = a1[5];
    if (v11)
    {
LABEL_9:
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) & 1) != 0)
        goto LABEL_31;
    }
  }
  else
  {
LABEL_8:
    v11 = a1[5];
    if (v11)
      goto LABEL_9;
  }
  if ((v8 & 1) != 0)
  {
    v12 = (_QWORD *)a1[24];
    if ((unint64_t)v12 >= a1[25])
    {
      v16 = sub_23951E0F0((uint64_t)(a1 + 23), (__int128 *)a2);
    }
    else
    {
      *v12 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v12[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = v12 + 2;
    }
    a1[24] = v16;
  }
  else
  {
    v17 = v34;
    if (v35 != v34)
    {
      v18 = 0;
      do
      {
        v19 = v17[v18];
        v31 = v19;
        if (*((_QWORD *)&v19 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        sub_23998C304(a1, &v31, (*(_QWORD *)((char *)__p[0] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1);
        v22 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
        if (*((_QWORD *)&v31 + 1))
        {
          v23 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        ++v18;
        v17 = v34;
      }
      while (v18 < (v35 - (_BYTE *)v34) >> 4);
    }
  }
LABEL_31:
  if (__p[0])
    operator delete(__p[0]);
  v25 = (char *)v34;
  if (v34)
  {
    v26 = v35;
    v27 = v34;
    if (v35 != v34)
    {
      do
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)v26 - 1);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v26 -= 16;
      }
      while (v26 != v25);
      v27 = v34;
    }
    v35 = v25;
    operator delete(v27);
  }
}

void sub_23998C54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16)
{
  if (__p)
    operator delete(__p);
  sub_2394631DC(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_23998C588(uint64_t a1, uint64_t *a2, char a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  _QWORD v32[2];
  int64x2_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[8];
  _QWORD v46[46];

  v46[44] = *MEMORY[0x24BDAC8D0];
  v31 = 0;
  sub_23998BC34((_QWORD *)*a2, *(float **)(a1 + 104), (float *)(a1 + 112), (float *)&v31);
  sub_239994FB8((uint64_t)v45, *a2, a1 + 96, (uint64_t)&v31, *(_BYTE *)(a1 + 152));
  v10 = *(_QWORD *)(a1 + 40);
  if (v10)
  {
    if (v10 == a1 + 16)
    {
      v33.i64[1] = (uint64_t)v32;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)(a1 + 16) + 24))(a1 + 16, v32);
    }
    else
    {
      v33.i64[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
    sub_2394D9710(v32, v46);
    v11 = (_QWORD *)v33.i64[1];
    if ((_QWORD *)v33.i64[1] == v32)
    {
      v12 = 4;
      v11 = v32;
      goto LABEL_9;
    }
    if (v33.i64[1])
    {
      v12 = 5;
LABEL_9:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
  }
  v13 = sub_239994FBC((uint64_t)v45);
  v14 = *(_QWORD *)(a1 + 40);
  if (v14 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14) & 1) != 0)
  {
LABEL_38:
    v15 = 0;
    goto LABEL_42;
  }
  if (!v13)
    goto LABEL_35;
  *(_WORD *)((char *)v32 + 1) = 257;
  v33 = vdupq_n_s64(0xAuLL);
  v34 = 20;
  v35 = xmmword_239F03720;
  v36 = 0x7F7FFFFFFF7FFFFFLL;
  v37 = -1;
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v27 = 0;
  LOBYTE(v32[0]) = *(_BYTE *)(a1 + 152);
  if ((a3 & 1) != 0)
  {
    v15 = 1;
    v16 = 1;
  }
  else
  {
    v17 = sub_2399B4E84((uint64_t)v45, (uint64_t)v32, (float *)&v30, (float *)&v29, &v28, (float *)&v27, 0);
    v18 = *(_QWORD *)(a1 + 40);
    if (v18 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 48))(v18) & 1) != 0)
    {
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v16 = !v17;
      v15 = 1;
    }
  }
  if (*((_QWORD *)&v43 + 1))
  {
    *(_QWORD *)&v44 = *((_QWORD *)&v43 + 1);
    operator delete(*((void **)&v43 + 1));
  }
  if ((_QWORD)v42)
  {
    *((_QWORD *)&v42 + 1) = v42;
    operator delete((void *)v42);
  }
  v19 = *((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v20 = v41;
    v21 = (void *)*((_QWORD *)&v40 + 1);
    if ((_QWORD)v41 != *((_QWORD *)&v40 + 1))
    {
      do
      {
        v22 = *(std::__shared_weak_count **)(v20 - 8);
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v20 -= 16;
      }
      while (v20 != v19);
      v21 = (void *)*((_QWORD *)&v40 + 1);
    }
    *(_QWORD *)&v41 = v19;
    operator delete(v21);
  }
  sub_23998E148((uint64_t)v38);
  if (v16)
  {
LABEL_35:
    sub_239997520((uint64_t)v45, (uint64_t)a4, a5, (_DWORD *)(a1 + 116), *(unsigned __int8 *)(a1 + 152));
    v25 = *(_QWORD *)(a1 + 40);
    if (v25 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25) & 1) != 0 || a4[1] - *a4 > 0x10uLL)
      goto LABEL_38;
    if (v46[22] <= 2uLL)
    {
      LOBYTE(v32[0]) = 0;
      sub_23999A3E8((uint64_t)v45, (char *)v32);
    }
    v15 = 1;
  }
LABEL_42:
  sub_23998E424((uint64_t)v45);
  return v15;
}

void sub_23998C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_23998E424((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_23998C8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_23998C244(&a13);
  sub_23998E424((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_23998C900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_23998E424((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_23998C918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_23998E424((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_23998C92C(uint64_t a1)
{
  std::chrono::system_clock::time_point v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  std::chrono::system_clock::time_point v13;
  unsigned int v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  pthread_t *p_t;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  std::thread *v25;
  char *v26;
  std::thread *v27;
  std::thread *v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  std::thread *v34;
  char *v35;
  std::thread *v36;
  uint64_t v37;
  __int128 v38;
  _opaque_pthread_t *t;
  std::thread *v40;
  std::thread *v41;
  std::thread *v42;
  std::thread *v43;
  std::thread *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t **v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t *v59;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t **v64;
  unint64_t v65;
  void **v66;
  void **v67;
  void **v68;
  void *v69;
  _QWORD *v70;
  uint64_t *v71;
  _OWORD *v72;
  unint64_t v73;
  __int128 v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  std::chrono::system_clock::time_point v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  float v92;
  float v93;
  void *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  size_t v103;
  size_t v104;
  std::thread *p_dst;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  uint64_t *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float v121;
  float v122;
  void **v123;
  unint64_t v124;
  BOOL v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char v132;
  uint64_t *v133;
  uint64_t *i;
  void **v135;
  void **v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  void *v140;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v141;
  uint64_t v142;
  char *v143;
  size_t v144;
  size_t v145;
  __int128 *v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t *v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::chrono::system_clock::time_point v161;
  uint64_t v162;
  _DWORD *v163;
  uint64_t v164;
  uint64_t v165;
  qos_class_t *v166;
  uint64_t v167;
  std::chrono::system_clock::time_point v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  void *v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v179;
  uint64_t v180;
  __int128 v181;
  _QWORD v182[2];
  qos_class_t v183;
  void *__p[3];
  std::thread *__dst;
  std::thread *v186;
  unint64_t v187;
  void *v188;
  uint64_t v189;
  unint64_t v190;
  void *v191;
  uint64_t *v192;
  uint64_t v193;
  void *v194[2];
  __int128 v195;
  __int128 v196;
  _QWORD v197[3];
  _QWORD *v198;
  __int128 v199;
  char *v200;
  qos_class_t *v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v2.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3) & 1) != 0)
    return;
  sub_23998DD4C(a1);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4) & 1) != 0)
      return;
  }
  v191 = 0;
  v192 = 0;
  v193 = 0;
  sub_23999DFFC(*(_QWORD *)(a1 + 80), (uint64_t)&v191);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) & 1) != 0)
    goto LABEL_242;
  rep = v2.__d_.__rep_;
  v189 = 0;
  v190 = 0;
  v188 = 0;
  v6 = (char *)v192 - (_BYTE *)v191;
  if (v192 == v191)
    goto LABEL_12;
  if (v6 < 0)
    sub_2394189F8();
  v7 = v6 >> 4;
  v8 = ((unint64_t)((v6 >> 4) - 1) >> 6) + 1;
  v188 = operator new(8 * v8);
  v189 = 0;
  v190 = v8;
  sub_23942D8C8(&v188, v7, 0);
  v9 = (uint64_t *)v191;
  v10 = v192;
  if (v191 == v192)
  {
LABEL_12:
    sub_23998BEC0(a1, (uint64_t)&v191, &v188);
    v11 = *(_QWORD *)(a1 + 40);
    if (v11 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) & 1) != 0)
      goto LABEL_240;
  }
  else
  {
    do
    {
      sub_239992894(*v9);
      v9 += 2;
    }
    while (v9 != v10);
  }
  if (v192 != v191)
  {
    LODWORD(v12) = 0;
    do
    {
      sub_239997DA8((char **)&v191, v12, 1, *(float *)(a1 + 96), 0.0005);
      v12 = (v12 + 1);
    }
    while (v12 < ((char *)v192 - (_BYTE *)v191) >> 4);
  }
  v177 = a1 + 16;
  *(double *)(*(_QWORD *)(a1 + 208) + 8) = (double)(std::chrono::system_clock::now().__d_.__rep_ - rep) / 1000000.0;
  if (v191 == v192)
  {
    sub_23999DB10(*(_QWORD **)(a1 + 80));
    goto LABEL_194;
  }
  v13.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if (*(_BYTE *)(a1 + 232))
  {
    v195 = 0u;
    v196 = 0u;
    *(_OWORD *)v194 = 0u;
    __dst = 0;
    v186 = 0;
    v187 = 0;
    v14 = std::thread::hardware_concurrency();
    if (v14 <= 2)
      v15 = 2;
    else
      v15 = v14;
    __p[0] = operator new(8 * (((v15 - 1) >> 6) + 1));
    __p[1] = 0;
    __p[2] = (void *)(((v15 - 1) >> 6) + 1);
    sub_23942D8C8(__p, v15, 0);
    v179 = v13.__d_.__rep_;
    v183 = qos_class_self();
    *(_QWORD *)&v199 = a1;
    *((_QWORD *)&v199 + 1) = v194;
    v200 = (char *)__p;
    v201 = &v183;
    std::mutex::lock((std::mutex *)(a1 + 240));
    v16 = (char *)v191;
    if (v192 != v191)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        v182[0] = (char *)v188 + 8 * (v18 >> 6);
        v182[1] = 1 << v18;
        sub_23998E55C(v194, (uint64_t *)&v16[v17], (uint64_t)v182);
        ++v18;
        v16 = (char *)v191;
        v17 += 16;
      }
      while (v18 < ((char *)v192 - (_BYTE *)v191) >> 4);
    }
    std::mutex::unlock((std::mutex *)(a1 + 240));
    v182[0] = 0;
    p_t = &v186->__t_;
    while (1)
    {
      if ((unint64_t)p_t < v187)
      {
        sub_23998EFEC(p_t++, &v199, v182);
      }
      else
      {
        v20 = (char *)p_t - (char *)__dst;
        v21 = ((char *)p_t - (char *)__dst) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_2394189F8();
        v22 = (uint64_t)(v187 - (_QWORD)__dst) >> 2;
        if (v22 <= v21 + 1)
          v22 = v21 + 1;
        if (v187 - (unint64_t)__dst >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          if (v23 >> 61)
            sub_239418A80();
          v24 = (char *)operator new(8 * v23);
        }
        else
        {
          v24 = 0;
        }
        v25 = (std::thread *)&v24[8 * v21];
        sub_23998EFEC(&v25->__t_, &v199, v182);
        v26 = &v24[8 * v23];
        p_t = &v25[1].__t_;
        v27 = __dst;
        v28 = v186;
        v29 = (char *)v186 - (char *)__dst;
        if (v186 != __dst)
        {
          v30 = v29 - 8;
          if ((unint64_t)(v29 - 8) < 0x78)
            goto LABEL_262;
          v31 = v30 >> 3;
          if (&v24[v20 - (v30 & 0xFFFFFFFFFFFFFFF8) - 8] < (char *)v186 && &v186[-v31 - 1] < v25)
            goto LABEL_262;
          v32 = v31 + 1;
          v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
          v34 = &v186[v33 / 0xFFFFFFFFFFFFFFF8];
          v25 = (std::thread *)((char *)v25 - v33);
          v35 = &v24[8 * v21 - 16];
          v36 = v186 - 2;
          v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v38 = *(_OWORD *)&v36->__t_;
            *((_OWORD *)v35 - 1) = *(_OWORD *)&v36[-2].__t_;
            *(_OWORD *)v35 = v38;
            *(_OWORD *)&v36[-2].__t_ = 0uLL;
            *(_OWORD *)&v36->__t_ = 0uLL;
            v35 -= 32;
            v36 -= 4;
            v37 -= 4;
          }
          while (v37);
          v28 = v34;
          if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_262:
            do
            {
              t = v28[-1].__t_;
              --v28;
              v25[-1].__t_ = t;
              --v25;
              v28->__t_ = 0;
            }
            while (v28 != v27);
          }
          v28 = __dst;
          v40 = v186;
          __dst = v25;
          v186 = (std::thread *)p_t;
          v187 = (unint64_t)v26;
          while (v40 != v28)
            std::thread::~thread(v40 - 1);
          if (!v28)
            goto LABEL_27;
LABEL_52:
          operator delete(v28);
          goto LABEL_27;
        }
        __dst = (std::thread *)&v24[8 * v21];
        v186 = v25 + 1;
        v187 = (unint64_t)v26;
        if (v28)
          goto LABEL_52;
      }
LABEL_27:
      v186 = (std::thread *)p_t;
      if (++v182[0] >= v15)
      {
        v41 = __dst;
        for (v13.__d_.__rep_ = v179; v41 != (std::thread *)p_t; ++v41)
          std::thread::join(v41);
        if (__p[0])
          operator delete(__p[0]);
        v42 = __dst;
        if (__dst)
        {
          v43 = v186;
          v44 = __dst;
          if (v186 != __dst)
          {
            do
              std::thread::~thread(v43 - 1);
            while (v43 != v42);
            v44 = __dst;
          }
          v186 = v42;
          operator delete(v44);
        }
        sub_23998ECBC((uint64_t)v194);
        goto LABEL_63;
      }
    }
  }
  v72 = v191;
  if (v192 != v191)
  {
    v73 = 0;
    do
    {
      v74 = v72[v73];
      v181 = v74;
      if (*((_QWORD *)&v74 + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
        do
          v76 = __ldxr(v75);
        while (__stxr(v76 + 1, v75));
      }
      sub_23998C304((_QWORD *)a1, (uint64_t)&v181, (*(_QWORD *)((char *)v188 + ((v73 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v73) & 1);
      v77 = (std::__shared_weak_count *)*((_QWORD *)&v181 + 1);
      if (*((_QWORD *)&v181 + 1))
      {
        v78 = (unint64_t *)(*((_QWORD *)&v181 + 1) + 8);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v80 = *(_QWORD *)(a1 + 40);
      if (v80 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v80 + 48))(v80) & 1) != 0)
        goto LABEL_240;
      ++v73;
      v72 = v191;
    }
    while (v73 < ((char *)v192 - (_BYTE *)v191) >> 4);
  }
LABEL_63:
  *(double *)(*(_QWORD *)(a1 + 208) + 16) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v13.__d_.__rep_)
                                            / 1000000.0;
  v45 = *(_QWORD *)(a1 + 40);
  if (v45 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 48))(v45) & 1) != 0)
    goto LABEL_240;
  v194[1] = 0;
  *(_QWORD *)&v195 = 0;
  v194[0] = &v194[1];
  v46 = *(unint64_t **)(a1 + 184);
  v47 = *(unint64_t **)(a1 + 192);
  v48 = (unint64_t **)(a1 + 184);
  if (v47 != v46)
  {
    v49 = 0;
    v50 = 0;
    while (1)
    {
      v52 = 2 * v49;
      v53 = v46[2 * v49];
      HIBYTE(v200) = 15;
      strcpy((char *)&v199, "f:index_in_root");
      LODWORD(__dst) = -1;
      v54 = sub_23998FA20((uint64_t **)(v53 + 56), (uint64_t)&__dst, (unsigned __int8 *)&v199);
      v55 = v54;
      if (SHIBYTE(v200) < 0)
      {
        operator delete((void *)v199);
        v59 = (uint64_t *)(*(_QWORD *)((*v48)[v52] + 56) + 16 * v55);
        v57 = *v59;
        v58 = (std::__shared_weak_count *)v59[1];
        if (v58)
        {
LABEL_73:
          p_shared_owners = (unint64_t *)&v58->__shared_owners_;
          do
            v61 = __ldxr(p_shared_owners);
          while (__stxr(v61 + 1, p_shared_owners));
          do
            v62 = __ldaxr(p_shared_owners);
          while (__stlxr(v62 - 1, p_shared_owners));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
      }
      else
      {
        v56 = (uint64_t *)(*(_QWORD *)((*v48)[v52] + 56) + 16 * v54);
        v57 = *v56;
        v58 = (std::__shared_weak_count *)v56[1];
        if (v58)
          goto LABEL_73;
      }
      v63 = **(_DWORD **)(v57 + 40);
      v64 = v48;
      v46 = *v48;
      v65 = (*v48)[v52];
      v66 = (void **)v194[1];
      v67 = &v194[1];
      v68 = &v194[1];
      if (v194[1])
      {
        while (1)
        {
          while (1)
          {
            v68 = v66;
            v69 = v66[4];
            if (v65 >= (unint64_t)v69)
              break;
            v66 = (void **)*v68;
            v67 = v68;
            if (!*v68)
              goto LABEL_85;
          }
          if ((unint64_t)v69 >= v65)
            break;
          v66 = (void **)v68[1];
          if (!v66)
          {
            v67 = v68 + 1;
            goto LABEL_85;
          }
        }
        v70 = v68;
        v48 = v64;
      }
      else
      {
LABEL_85:
        v70 = operator new(0x30uLL);
        v70[4] = v65;
        *((_DWORD *)v70 + 10) = 0;
        *v70 = 0;
        v70[1] = 0;
        v70[2] = v68;
        *v67 = v70;
        v71 = v70;
        if (*(_QWORD *)v194[0])
        {
          v194[0] = *(void **)v194[0];
          v71 = (uint64_t *)*v67;
        }
        sub_2394213B8((uint64_t *)v194[1], v71);
        *(_QWORD *)&v195 = v195 + 1;
        v48 = v64;
        v46 = *v64;
      }
      *((_DWORD *)v70 + 10) = v63;
      v47 = *(unint64_t **)(a1 + 192);
      v51 = ((char *)v47 - (char *)v46) >> 4;
      v49 = ++v50;
      if (v51 <= v50)
        goto LABEL_105;
    }
  }
  v51 = ((char *)v47 - (char *)v46) >> 4;
  v46 = *(unint64_t **)(a1 + 192);
LABEL_105:
  v176 = (uint64_t *)v48;
  *(_QWORD *)&v199 = v194;
  v81 = 126 - 2 * __clz(v51);
  if (v47 == v46)
    v82 = 0;
  else
    v82 = v81;
  sub_23998FB88(v46, v47, (uint64_t *)&v199, v82, 1);
  sub_239421038((uint64_t)v194, (_QWORD *)v194[1]);
  v83.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  v84 = **(_QWORD **)(a1 + 88);
  if (v84 >= (uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 4)
    goto LABEL_121;
  v85 = *(_QWORD *)(a1 + 80);
  v86 = *(_QWORD *)(a1 + 40);
  if (!v86)
    goto LABEL_112;
  if (v86 != v177)
  {
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v86 + 16))(v86);
LABEL_112:
    v198 = (_QWORD *)v86;
    goto LABEL_114;
  }
  v198 = v197;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v177 + 24))(v177, v197);
LABEL_114:
  sub_2399A6588(v176, v84, v85, a1 + 96, a1 + 112, v197, *(_BYTE *)(a1 + 152), *(_BYTE *)(a1 + 232));
  v87 = v198;
  if (v198 == v197)
  {
    v88 = 4;
    v87 = v197;
    goto LABEL_118;
  }
  if (v198)
  {
    v88 = 5;
LABEL_118:
    (*(void (**)(void))(*v87 + 8 * v88))();
  }
  v89 = *(_QWORD *)(a1 + 40);
  if (v89 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 48))(v89) & 1) != 0)
    goto LABEL_240;
LABEL_121:
  *(double *)(*(_QWORD *)(a1 + 208) + 24) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v83.__d_.__rep_)
                                            / 1000000.0;
  v195 = 0u;
  v196 = 0u;
  *(_OWORD *)v194 = 0u;
  v90 = *(uint64_t **)(a1 + 192);
  if (v90 == *(uint64_t **)(a1 + 184))
  {
    v92 = 0.0;
    v95 = *(uint64_t **)(a1 + 192);
    v130 = v176;
    if (*((_QWORD *)&v196 + 1) >= 5uLL)
      goto LABEL_170;
LABEL_165:
    *(float *)(a1 + 8) = v92 / *(float *)(a1 + 96);
    v131 = *(_QWORD *)(a1 + 40);
    if (v131)
      goto LABEL_171;
    goto LABEL_175;
  }
  v91 = 0;
  v92 = 0.0;
  v90 = *(uint64_t **)(a1 + 184);
  v93 = 0.0;
  do
  {
    v180 = v91;
    v96 = &v90[2 * v91];
    v98 = *(_QWORD *)(*v96 + 152);
    v97 = *(_QWORD *)(*v96 + 160);
    v199 = 0uLL;
    v200 = 0;
    v99 = v97 - v98;
    if (v97 != v98)
    {
      if (v99 < 0)
        sub_2394189F8();
      v100 = (char *)operator new(v97 - v98);
      *(_QWORD *)&v199 = v100;
      v200 = &v100[4 * ((v97 - v98) >> 2)];
      bzero(v100, v97 - v98);
      *((_QWORD *)&v199 + 1) = &v100[v99];
    }
    v101 = *v96;
    v102 = off_256934438[0];
    v103 = strlen(off_256934438[0]);
    if (v103 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v104 = v103;
    if (v103 >= 0x17)
    {
      v106 = (v103 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v103 | 7) != 0x17)
        v106 = v103 | 7;
      v107 = v106 + 1;
      p_dst = (std::thread *)operator new(v106 + 1);
      v186 = (std::thread *)v104;
      v187 = v107 | 0x8000000000000000;
      __dst = p_dst;
LABEL_136:
      memmove(p_dst, v102, v104);
      goto LABEL_137;
    }
    HIBYTE(v187) = v103;
    p_dst = (std::thread *)&__dst;
    if (v103)
      goto LABEL_136;
LABEL_137:
    *((_BYTE *)&p_dst->__t_ + v104) = 0;
    __p[0] = 0;
    v108 = sub_2394E5C88((uint64_t **)(v101 + 80), (uint64_t)__p, (unsigned __int8 *)&__dst);
    v109 = v108;
    if (SHIBYTE(v187) < 0)
    {
      operator delete(__dst);
      v113 = (uint64_t *)(*(_QWORD *)(*v96 + 80) + 16 * v109);
      v111 = *v113;
      v112 = (std::__shared_weak_count *)v113[1];
      if (!v112)
        goto LABEL_146;
    }
    else
    {
      v110 = (uint64_t *)(*(_QWORD *)(*v96 + 80) + 16 * v108);
      v111 = *v110;
      v112 = (std::__shared_weak_count *)v110[1];
      if (!v112)
        goto LABEL_146;
    }
    v114 = (unint64_t *)&v112->__shared_owners_;
    do
      v115 = __ldxr(v114);
    while (__stxr(v115 + 1, v114));
    do
      v116 = __ldaxr(v114);
    while (__stlxr(v116 - 1, v114));
    if (!v116)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
LABEL_146:
    v117 = *v96;
    LODWORD(__dst) = -1;
    sub_2399B3DCC(v117, v111, &v199, 0, (unsigned int *)&__dst);
    if (v97 == v98)
    {
      v94 = (void *)v199;
      if (!(_QWORD)v199)
        goto LABEL_125;
    }
    else
    {
      v118 = 0;
      if ((unint64_t)((v97 - v98) >> 2) <= 1)
        v119 = 1;
      else
        v119 = (v97 - v98) >> 2;
      do
      {
        while (1)
        {
          v120 = *v96;
          LODWORD(__dst) = v118;
          v121 = sub_239932994(v120, (unsigned int *)&__dst);
          v94 = (void *)v199;
          v122 = *(float *)(v199 + 4 * v118);
          if (v122 < 3.4028e38)
            break;
          v92 = v92 + v121;
          if (v119 == ++v118)
            goto LABEL_124;
        }
        if (*(float *)a1 < v122)
        {
          v123 = (void **)v194[1];
          v124 = (((_QWORD)v195 - (unint64_t)v194[1]) << 7) - 1;
          v125 = (void *)v195 == v194[1];
          *(float *)a1 = v122;
          if (v125)
            v126 = 0;
          else
            v126 = v124;
          v127 = *((_QWORD *)&v196 + 1);
          v128 = v196;
          v129 = *((_QWORD *)&v196 + 1) + v196;
          if (v126 == *((_QWORD *)&v196 + 1) + (_QWORD)v196)
          {
            sub_2399922D8((uint64_t)v194);
            v127 = *((_QWORD *)&v196 + 1);
            v128 = v196;
            v123 = (void **)v194[1];
            v129 = v196 + *((_QWORD *)&v196 + 1);
            v122 = *(float *)a1;
          }
          (*(float **)((char *)v123 + ((v129 >> 7) & 0x1FFFFFFFFFFFFF8)))[v129 & 0x3FF] = v122;
          *((_QWORD *)&v196 + 1) = v127 + 1;
          if ((unint64_t)(v127 + 1) >= 6)
          {
            *(_QWORD *)&v196 = v128 + 1;
            *((_QWORD *)&v196 + 1) = v127;
            if ((unint64_t)(v128 + 1) >= 0x800)
            {
              operator delete(*v123);
              v194[1] = (char *)v194[1] + 8;
              *(_QWORD *)&v196 = v196 - 1024;
            }
          }
        }
        v94 = (void *)v199;
        *(float *)(a1 + 4) = *(float *)(a1 + 4) + (float)(*(float *)(v199 + 4 * v118) * v121);
        v93 = v93 + v121;
        ++v118;
      }
      while (v119 != v118);
    }
LABEL_124:
    *((_QWORD *)&v199 + 1) = v94;
    operator delete(v94);
LABEL_125:
    v91 = v180 + 1;
    v90 = *(uint64_t **)(a1 + 184);
    v95 = *(uint64_t **)(a1 + 192);
  }
  while (v180 + 1 < (unint64_t)(((char *)v95 - (char *)v90) >> 4));
  v130 = v176;
  if (v93 > 0.0)
  {
    *(float *)(a1 + 4) = *(float *)(a1 + 4) / v93;
    if (*((_QWORD *)&v196 + 1) >= 5uLL)
      goto LABEL_170;
    goto LABEL_165;
  }
  if (*((_QWORD *)&v196 + 1) < 5uLL)
    goto LABEL_165;
LABEL_170:
  *(_DWORD *)a1 = *(_DWORD *)(*(_QWORD *)((char *)v194[1] + (((unint64_t)v196 >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * (v196 & 0x3FF));
  *(float *)(a1 + 8) = v92 / *(float *)(a1 + 96);
  v131 = *(_QWORD *)(a1 + 40);
  if (v131)
  {
LABEL_171:
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 48))(v131) & 1) != 0)
    {
      v132 = 0;
      goto LABEL_180;
    }
    v90 = *(uint64_t **)(a1 + 184);
    v95 = *(uint64_t **)(a1 + 192);
  }
LABEL_175:
  while (v90 != v95)
  {
    sub_2399A0D04(*v90);
    v90 += 2;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v133 = *(uint64_t **)(a1 + 184);
    for (i = *(uint64_t **)(a1 + 192); v133 != i; v133 += 2)
      sub_2399A0838(*v133);
  }
  sub_23999C9D0(v130, *(_QWORD *)(a1 + 80));
  sub_239933ADC(*(_QWORD *)(a1 + 80));
  v132 = 1;
LABEL_180:
  v135 = (void **)v194[1];
  v136 = (void **)v195;
  *((_QWORD *)&v196 + 1) = 0;
  v137 = v195 - (unint64_t)v194[1];
  if ((unint64_t)v195 - (unint64_t)v194[1] >= 0x11)
  {
    do
    {
      operator delete(*v135);
      v136 = (void **)v195;
      v135 = (void **)((char *)v194[1] + 8);
      v194[1] = v135;
      v137 = v195 - (_QWORD)v135;
    }
    while ((_QWORD)v195 - (_QWORD)v135 > 0x10uLL);
  }
  v138 = v137 >> 3;
  if (v138 == 1)
  {
    v139 = 512;
LABEL_186:
    *(_QWORD *)&v196 = v139;
  }
  else if (v138 == 2)
  {
    v139 = 1024;
    goto LABEL_186;
  }
  if (v135 != v136)
  {
    do
    {
      v140 = *v135++;
      operator delete(v140);
    }
    while (v135 != v136);
    if ((void *)v195 != v194[1])
      *(_QWORD *)&v195 = v195 + (((unint64_t)v194[1] - v195 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v194[0])
    operator delete(v194[0]);
  if ((v132 & 1) == 0)
    goto LABEL_240;
LABEL_194:
  if (*(_BYTE *)(a1 + 121))
  {
    v141 = std::chrono::system_clock::now().__d_.__rep_;
    sub_2399A264C(*(_QWORD **)(a1 + 80));
    *(double *)(*(_QWORD *)(a1 + 208) + 32) = (double)(std::chrono::system_clock::now().__d_.__rep_ - v141)
                                              / 1000000.0;
  }
  **(double **)(a1 + 208) = (double)(std::chrono::system_clock::now().__d_.__rep_ - rep) / 1000000.0;
  v142 = *(_QWORD *)(a1 + 80);
  v143 = off_256934448[0];
  v144 = strlen(off_256934448[0]);
  if (v144 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v145 = v144;
  if (v144 >= 0x17)
  {
    v147 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v144 | 7) != 0x17)
      v147 = v144 | 7;
    v148 = v147 + 1;
    v146 = (__int128 *)operator new(v147 + 1);
    *((_QWORD *)&v199 + 1) = v145;
    v200 = (char *)(v148 | 0x8000000000000000);
    *(_QWORD *)&v199 = v146;
    goto LABEL_203;
  }
  HIBYTE(v200) = v144;
  v146 = &v199;
  if (v144)
LABEL_203:
    memmove(v146, v143, v145);
  *((_BYTE *)v146 + v145) = 0;
  v194[0] = 0;
  v194[1] = 0;
  *(_QWORD *)&v195 = 0;
  v149 = sub_23958C0D8((uint64_t **)(v142 + 80), (uint64_t)v194, (unsigned __int8 *)&v199);
  if (SBYTE7(v195) < 0)
  {
    operator delete(v194[0]);
    if (SHIBYTE(v200) < 0)
      goto LABEL_219;
LABEL_206:
    if (v149 != -1)
      goto LABEL_207;
LABEL_220:
    v159 = *(_QWORD *)(a1 + 184);
    if ((unint64_t)((*(_QWORD *)(a1 + 192) - v159) >> 4) <= 1)
      v160 = 1;
    else
      v160 = (*(_QWORD *)(a1 + 192) - v159) >> 4;
    *(_QWORD *)(*(_QWORD *)(a1 + 208) + 40) = v160;
    v158 = *(_QWORD *)(a1 + 40);
    if (v158)
      goto LABEL_224;
LABEL_225:
    v161.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (**(_DWORD **)(a1 + 216) == 2)
    {
      v162 = *(_QWORD *)(a1 + 80);
      v163 = *(_DWORD **)(a1 + 128);
      LODWORD(v194[0]) = **(unsigned __int8 **)(a1 + 136);
      sub_2399C684C(v162, v163, (unsigned int *)v194, *(float **)(a1 + 144), **(_DWORD **)(a1 + 224));
      v164 = *(_QWORD *)(a1 + 40);
      if (!v164)
        goto LABEL_239;
LABEL_238:
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v164 + 48))(v164) & 1) != 0)
        goto LABEL_240;
LABEL_239:
      v168.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v169 = *(_QWORD *)(a1 + 208);
      *(double *)(v169 + 48) = (double)(v168.__d_.__rep_ - v161.__d_.__rep_) / 1000000.0;
      *(_QWORD *)(v169 + 56) = **(unsigned __int8 **)(a1 + 136);
      *(float32x2_t *)(v169 + 64) = vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)a1), (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 96)* 100.0/ (float)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 160)- *(_QWORD *)(*(_QWORD *)(a1 + 80) + 152)) >> 2)), 0)));
      *(_DWORD *)(v169 + 72) = *(_DWORD *)(a1 + 8);
      goto LABEL_240;
    }
    sub_2399BC210(v194, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 208), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(unsigned __int8 *)(a1 + 232), **(unsigned int **)(a1 + 224));
    v165 = *(_QWORD *)(a1 + 40);
    if (v165)
    {
      if (v165 == v177)
      {
        v201 = (qos_class_t *)&v199;
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v177 + 24))(v177, &v199);
      }
      else
      {
        v201 = (qos_class_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v165 + 16))(v165);
      }
      sub_2394D9710(&v199, v194);
      v166 = v201;
      if (v201 == (qos_class_t *)&v199)
      {
        v167 = 4;
        v166 = (qos_class_t *)&v199;
      }
      else
      {
        if (!v201)
          goto LABEL_237;
        v167 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v166 + 8 * v167))();
    }
LABEL_237:
    sub_2399BC214((uint64_t)v194);
    sub_239934420(v194);
    v164 = *(_QWORD *)(a1 + 40);
    if (!v164)
      goto LABEL_239;
    goto LABEL_238;
  }
  if ((SHIBYTE(v200) & 0x80000000) == 0)
    goto LABEL_206;
LABEL_219:
  operator delete((void *)v199);
  if (v149 == -1)
    goto LABEL_220;
LABEL_207:
  v150 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 80) + 16 * v149);
  v151 = *v150;
  v152 = (std::__shared_weak_count *)v150[1];
  if (v152)
  {
    v153 = (unint64_t *)&v152->__shared_owners_;
    do
      v154 = __ldxr(v153);
    while (__stxr(v154 + 1, v153));
    do
      v155 = __ldaxr(v153);
    while (__stlxr(v155 - 1, v153));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  v156 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v151 + 16))(v151);
  if (v156 <= 1)
    v157 = 1;
  else
    v157 = v156;
  *(_QWORD *)(*(_QWORD *)(a1 + 208) + 40) = v157;
  v158 = *(_QWORD *)(a1 + 40);
  if (!v158)
    goto LABEL_225;
LABEL_224:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 48))(v158) & 1) == 0)
    goto LABEL_225;
LABEL_240:
  if (v188)
    operator delete(v188);
LABEL_242:
  v170 = (uint64_t *)v191;
  if (v191)
  {
    v171 = v192;
    v172 = v191;
    if (v192 != v191)
    {
      do
      {
        v173 = (std::__shared_weak_count *)*(v171 - 1);
        if (v173)
        {
          v174 = (unint64_t *)&v173->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        v171 -= 2;
      }
      while (v171 != v170);
      v172 = v191;
    }
    v192 = v170;
    operator delete(v172);
  }
}

void sub_23998DB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (__p)
    operator delete(__p);
  sub_2394631DC(&a33);
  _Unwind_Resume(a1);
}

void sub_23998DD4C(uint64_t a1)
{
  uint64_t v2;
  float v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  float *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  void *__p;
  void *v39;
  char *v40;
  void *v41;
  char *v42;
  char *v43;

  sub_23999C600(*(_QWORD **)(a1 + 80));
  *(float *)(a1 + 96) = sub_2399A13D8(*(_QWORD *)(a1 + 80));
  sub_2399A1590(*(_QWORD *)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 80);
  v3 = **(float **)(a1 + 104)
     * 100.0
     * *(float *)(a1 + 96)
     / (float)(unint64_t)((uint64_t)(*(_QWORD *)(v2 + 160) - *(_QWORD *)(v2 + 152)) >> 2);
  *(float *)(a1 + 112) = v3;
  if (!*(_BYTE *)(a1 + 152))
    return;
  HIBYTE(v43) = 5;
  strcpy((char *)&v41, "f:imt");
  __p = 0;
  v39 = 0;
  v4 = sub_2394E5F40((uint64_t **)(v2 + 56), (uint64_t)&__p, (unsigned __int8 *)&v41);
  v5 = v4;
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    if (v4 != -1)
      goto LABEL_4;
LABEL_34:
    *(_BYTE *)(a1 + 152) = 0;
    return;
  }
  operator delete(v41);
  if (v5 == -1)
    goto LABEL_34;
LABEL_4:
  if (*(_BYTE *)(a1 + 152))
  {
    v6 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(v6 + 152);
    v7 = *(_QWORD *)(v6 + 160);
    v42 = 0;
    v43 = 0;
    v41 = 0;
    v9 = v7 - v8;
    if (v7 != v8)
    {
      if ((unint64_t)v9 >= 0x1FFFFFFFFFFFFFFFLL)
        sub_2394189F8();
      v10 = (char *)operator new(8 * v9);
      v41 = v10;
      v43 = &v10[16 * (v9 >> 1)];
      bzero(v10, 8 * v9);
      v42 = &v10[8 * v9];
    }
    v11 = operator new(0xCuLL);
    v39 = v11 + 3;
    v40 = (char *)(v11 + 3);
    *(_QWORD *)v11 = -1;
    v11[2] = -1;
    __p = v11;
    v12 = (float *)operator new(0x18uLL);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    if (*(_QWORD *)(v6 + 160) != *(_QWORD *)(v6 + 152))
    {
      v13 = 0;
      do
      {
        v37.i32[0] = v13;
        sub_23996362C(v6, (unsigned int *)&v37, (uint64_t)&__p);
        v14 = *(unsigned int *)__p;
        v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)
                        + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 80) + 176));
        v17 = *v15;
        v16 = (std::__shared_weak_count *)v15[1];
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v37 = *(float32x4_t *)(*(_QWORD *)(v17 + 40) + 16 * v14);
        v21 = *((unsigned int *)__p + 1);
        v22 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)
                        + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 80) + 176));
        v24 = *v22;
        v23 = (std::__shared_weak_count *)v22[1];
        if (v23)
        {
          v25 = (unint64_t *)&v23->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
          do
            v27 = __ldaxr(v25);
          while (__stlxr(v27 - 1, v25));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v36 = *(float32x4_t *)(*(_QWORD *)(v24 + 40) + 16 * v21);
        v28 = *((unsigned int *)__p + 2);
        v29 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8)
                        + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 80) + 176));
        v31 = *v29;
        v30 = (std::__shared_weak_count *)v29[1];
        if (v30)
        {
          v32 = (unint64_t *)&v30->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
          do
            v34 = __ldaxr(v32);
          while (__stlxr(v34 - 1, v32));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v35 = *(float32x4_t *)(*(_QWORD *)(v31 + 40) + 16 * v28);
        sub_2399A24B4(&v37, &v36, &v35, v12, (uint64_t)(v12 + 2), v12 + 4, (int32x4_t *)v41 + 2 * v13, (float32x4_t *)v41 + 2 * v13 + 1);
        ++v13;
        v6 = *(_QWORD *)(a1 + 80);
      }
      while (v13 < (uint64_t)(*(_QWORD *)(v6 + 160) - *(_QWORD *)(v6 + 152)) >> 2);
    }
    sub_2399A19D8(v6, (uint64_t *)&v41, v5);
    operator delete(v12);
    if (__p)
    {
      v39 = __p;
      operator delete(__p);
    }
    if (v41)
    {
      v42 = (char *)v41;
      operator delete(v41);
    }
  }
}

void sub_23998E0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  operator delete(v23);
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t sub_23998E148(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (*(_BYTE *)(a1 + 24))
  {
    while (*(_QWORD *)(a1 + 32))
    {
      sub_23998E248((uint64_t *)a1, 0, &v12);
      v2 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
    }
  }
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(void **)a1;
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *(void **)a1;
    }
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t *sub_23998E248@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float **v21;
  float *v22;
  float **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = result[4];
  if (v3 <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v4 = v3 - 1;
    v5 = *result;
    if (v4 == a2)
    {
      v6 = *(_QWORD *)(v5 + 16 * a2);
      v7 = v6;
    }
    else
    {
      v8 = *(_OWORD *)(v5 + 16 * a2);
      *(_OWORD *)(v5 + 16 * a2) = *(_OWORD *)(v5 + 16 * v4);
      *(_OWORD *)(v5 + 16 * v4) = v8;
      v5 = *result;
      v6 = *(_QWORD *)(*result + 16 * a2);
      *(_QWORD *)(v6 + 8) = a2;
      v7 = *(_QWORD *)(v5 + 16 * v4);
      *(_QWORD *)(v7 + 8) = v4;
    }
    result[4] = v4;
    *(_QWORD *)(v7 + 8) = -1;
    if (*(float *)v6 >= *(float *)v7)
    {
      if (a2)
      {
        do
        {
          v19 = a2 - 1;
          v20 = (a2 - 1) >> 1;
          v21 = (float **)(v5 + 16 * a2);
          v22 = *v21;
          v23 = (float **)(v5 + 16 * v20);
          if (**v21 <= **v23)
            break;
          if (a2 != v20)
          {
            *v21 = *v23;
            *v23 = v22;
            v24 = v5 + 16 * a2;
            v25 = v5 + 16 * v20;
            v26 = *(_QWORD *)(v24 + 8);
            *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(v25 + 8) = v26;
            v5 = *result;
            *(_QWORD *)(*(_QWORD *)(*result + 16 * a2) + 8) = a2;
            *(_QWORD *)(*(_QWORD *)(v5 + 16 * v20) + 8) = v20;
          }
          a2 = (a2 - 1) >> 1;
        }
        while (v19 > 1);
      }
    }
    else if (v4 > a2)
    {
      do
      {
        v9 = (2 * a2) | 1;
        v10 = *(float *)v6;
        if (v9 >= v4)
        {
          v11 = a2;
        }
        else
        {
          v11 = a2;
          if (**(float **)(v5 + 16 * v9) > v10)
          {
            v11 = (2 * a2) | 1;
            v10 = **(float **)(v5 + 16 * v9);
          }
        }
        v12 = 2 * a2 + 2;
        if (v12 < v4 && **(float **)(v5 + 16 * v12) > v10)
          v11 = 2 * a2 + 2;
        if (v11 == a2)
          break;
        v13 = v5 + 16 * v11;
        v14 = v5 + 16 * a2;
        v15 = *(_QWORD *)(v14 + 8);
        *(_OWORD *)v14 = *(_OWORD *)v13;
        *(_QWORD *)v13 = v6;
        *(_QWORD *)(v13 + 8) = v15;
        v5 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 16 * a2) + 8) = a2;
        v6 = *(_QWORD *)(v5 + 16 * v11);
        *(_QWORD *)(v6 + 8) = v11;
        a2 = v11;
      }
      while (v11 < v4);
    }
    v16 = *(_OWORD *)(v5 + 16 * v4);
    *(_OWORD *)a3 = v16;
    if (*((_QWORD *)&v16 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  return result;
}

uint64_t sub_23998E424(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;

  v2 = *(void **)(a1 + 336);
  if (v2)
  {
    *(_QWORD *)(a1 + 344) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 312);
  if (v3)
  {
    *(_QWORD *)(a1 + 320) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 288);
  if (v4)
  {
    *(_QWORD *)(a1 + 296) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 256);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 264);
    v7 = *(void **)(a1 + 256);
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 256);
    }
    *(_QWORD *)(a1 + 264) = v5;
    operator delete(v7);
  }
  v11 = *(void **)(a1 + 232);
  if (v11)
  {
    *(_QWORD *)(a1 + 240) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 208);
  if (v12)
    operator delete(v12);
  sub_2399A406C(a1 + 120);
  sub_239421038(a1 + 96, *(_QWORD **)(a1 + 104));
  v13 = *(void **)(a1 + 72);
  if (v13)
  {
    *(_QWORD *)(a1 + 80) = v13;
    operator delete(v13);
  }
  v14 = *(_QWORD **)(a1 + 32);
  if (v14 == (_QWORD *)(a1 + 8))
  {
    v15 = 4;
    v14 = (_QWORD *)(a1 + 8);
    goto LABEL_28;
  }
  if (v14)
  {
    v15 = 5;
LABEL_28:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return a1;
}

uint64_t sub_23998E55C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    sub_23998E700((uint64_t)a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
    v11 = *a2;
    v12 = (std::__shared_weak_count *)a2[1];
    if (!v12)
      goto LABEL_11;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = *(_QWORD *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA);
    v11 = *a2;
    v12 = (std::__shared_weak_count *)a2[1];
    if (!v12)
      goto LABEL_11;
  }
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
LABEL_11:
  v15 = *(_QWORD *)(a3 + 8) & **(_QWORD **)a3;
  *(_QWORD *)v10 = v11;
  *(_QWORD *)(v10 + 8) = v12;
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *(_BYTE *)(v10 + 16) = v15 != 0;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    *(_BYTE *)(v10 + 16) = v15 != 0;
  }
  v19 = a1[4];
  v20 = a1[5] + 1;
  a1[5] = v20;
  v21 = v19 + v20;
  v22 = a1[1];
  v23 = (_QWORD *)(v22 + 8 * (v21 / 0xAA));
  v24 = *v23 + 24 * (v21 % 0xAA);
  if (a1[2] == v22)
    v24 = 0;
  if (v24 == *v23)
    return *(v23 - 1) + 4056;
  else
    return v24 - 24;
}

void sub_23998E700(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0xFF0uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0xFF0uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFF0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_23998EC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_23998EC78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23998EC8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23998ECA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_23998ECBC(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 40) = 0;
    v12 = 0;
    goto LABEL_16;
  }
  v4 = *(_QWORD *)(a1 + 32);
  v5 = &v2[v4 / 0xAA];
  v6 = (unint64_t)*v5 + 24 * (v4 % 0xAA);
  v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0xAA] + 24 * ((*(_QWORD *)(a1 + 40) + v4) % 0xAA);
  if (v6 == v7)
    goto LABEL_14;
  do
  {
    v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (!v8)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_9:
      v6 += 24;
      if (v6 - (_QWORD)*v5 != 4080)
        continue;
LABEL_10:
      v11 = (unint64_t)v5[1];
      ++v5;
      v6 = v11;
      continue;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v6 += 24;
    if (v6 - (_QWORD)*v5 == 4080)
      goto LABEL_10;
  }
  while (v6 != v7);
  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
LABEL_14:
  *(_QWORD *)(a1 + 40) = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
LABEL_16:
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 85;
LABEL_21:
    *(_QWORD *)(a1 + 32) = v14;
  }
  else if (v13 == 2)
  {
    v14 = 170;
    goto LABEL_21;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_23998EE84(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *__s1[2];
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      if (*(char *)(v8 + 31) < 0)
      {
        sub_23941A7F8(__s1, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v20 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)__s1 = v9;
      }
      v10 = HIBYTE(v20);
      if (v20 >= 0)
        v11 = (void *)HIBYTE(v20);
      else
        v11 = __s1[1];
      v12 = (void *)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (void *)*((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if (v20 < 0)
        {
          v17 = __s1[0];
          if (memcmp(__s1[0], v14, (size_t)__s1[1]))
          {
            operator delete(v17);
            goto LABEL_5;
          }
LABEL_27:
          v7 = *(_QWORD *)(*v3 + 32) == (_QWORD)sub_23998EFE0;
          if ((v10 & 0x80) == 0)
          {
LABEL_4:
            if (v7)
              return v6;
            goto LABEL_5;
          }
          goto LABEL_28;
        }
        if (!HIBYTE(v20))
          goto LABEL_27;
        v15 = __s1;
        v16 = HIBYTE(v20);
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v16)
            goto LABEL_27;
        }
      }
      v7 = 0;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_28:
      operator delete(__s1[0]);
      if (v7)
        return v6;
LABEL_5:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*sub_23998EFE0())()
{
  return sub_23998EFE0;
}

uint64_t sub_23998EFEC(pthread_t *a1, _OWORD *a2, _QWORD *a3)
{
  std::__thread_struct *v6;
  char *v7;
  __int128 v8;
  uint64_t result;

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = (char *)operator new();
  *(_QWORD *)v7 = v6;
  v8 = a2[1];
  *(_OWORD *)(v7 + 8) = *a2;
  *(_OWORD *)(v7 + 24) = v8;
  *((_QWORD *)v7 + 5) = *a3;
  result = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_23998F108, v7);
  if ((_DWORD)result)
  {
    std::__throw_system_error(result, "thread constructor failed");
    __break(1u);
    JUMPOUT(0x23998F0A0);
  }
  return result;
}

uint64_t sub_23998F108(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int64x2_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _OWORD *v48;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v49;
  unint64_t i;
  BOOL v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unint64_t v71;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v72;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  char v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  const void *v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v89;
  void *__p[3];
  std::chrono::nanoseconds __ns;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v92;
  uint64_t v93;
  __int128 v94;
  char v95;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 40);
  pthread_set_qos_class_self_np(**(qos_class_t **)(a1 + 32), 0);
  v85 = 1 << v5;
  v87 = ~(1 << v5);
  v6 = 8 * (v5 >> 6);
  v86 = v6;
  do
  {
    v7 = *(_QWORD *)(v4 + 40);
    if (v7)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7) & 1) != 0)
        break;
    }
    v94 = 0uLL;
    v95 = 0;
    std::mutex::lock((std::mutex *)(v4 + 240));
    v8 = *(_QWORD **)(a1 + 16);
    if (v8[5])
    {
      v9 = v8[1];
      v10 = v8[4];
      v11 = *(_QWORD *)(v9 + 8 * (v10 / 0xAA));
      v12 = v10 % 0xAA;
      v13 = (uint64_t *)(v11 + 24 * (v10 % 0xAA));
      v15 = *v13;
      v14 = v13[1];
      if (v14)
      {
        v16 = (unint64_t *)(v14 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      *(_QWORD *)&v94 = v15;
      *((_QWORD *)&v94 + 1) = v14;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v95 = *(_BYTE *)(v11 + 24 * v12 + 16);
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(std::__shared_weak_count **)(*(_QWORD *)(*(_QWORD *)(v21 + 8) + 8 * (*(_QWORD *)(v21 + 32) / 0xAAuLL))
                                         + 24 * (*(_QWORD *)(v21 + 32) % 0xAAuLL)
                                         + 8);
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = vaddq_s64(*(int64x2_t *)(v21 + 32), (int64x2_t)xmmword_239EC65F0);
      *(int64x2_t *)(v21 + 32) = v25;
      if (v25.i64[0] >= 0x154uLL)
      {
        operator delete(**(void ***)(v21 + 8));
        *(_QWORD *)(v21 + 8) += 8;
        *(_QWORD *)(v21 + 32) -= 170;
      }
      *(_QWORD *)(**(_QWORD **)(a1 + 24) + v6) &= v87;
    }
    std::mutex::unlock((std::mutex *)(v4 + 240));
    if ((_QWORD)v94)
    {
      __ns.__rep_ = 0;
      v92 = 0;
      v93 = 0;
      memset(__p, 0, sizeof(__p));
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      v89 = v94;
      if (*((_QWORD *)&v94 + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = sub_23998C588(v4, (uint64_t *)&v89, v95, &__ns, __p);
      if (!v26)
        goto LABEL_30;
      v30 = (unint64_t *)&v26->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v32 = *(_QWORD *)(v4 + 40);
        if (!v32)
          goto LABEL_47;
LABEL_31:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 48))(v32) & 1) == 0)
          goto LABEL_47;
        if (__p[0])
          operator delete(__p[0]);
        rep = __ns.__rep_;
        if (__ns.__rep_)
        {
          v34 = v92;
          v35 = (void *)__ns.__rep_;
          if (v92 != __ns.__rep_)
          {
            do
            {
              v36 = *(std::__shared_weak_count **)(v34 - 8);
              if (v36)
              {
                v37 = (unint64_t *)&v36->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
              }
              v34 -= 16;
            }
            while (v34 != rep);
            v35 = (void *)__ns.__rep_;
          }
          v92 = rep;
          operator delete(v35);
        }
        v78 = 0;
        v79 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
        if (!*((_QWORD *)&v94 + 1))
          continue;
      }
      else
      {
LABEL_30:
        v32 = *(_QWORD *)(v4 + 40);
        if (v32)
          goto LABEL_31;
LABEL_47:
        if (v29)
        {
          std::mutex::lock((std::mutex *)(v4 + 240));
          v44 = *(_QWORD **)(v4 + 192);
          if ((unint64_t)v44 >= *(_QWORD *)(v4 + 200))
          {
            v48 = sub_23951E0F0(v4 + 184, &v94);
          }
          else
          {
            *v44 = v94;
            v45 = *((_QWORD *)&v94 + 1);
            v44[1] = *((_QWORD *)&v94 + 1);
            if (v45)
            {
              v46 = (unint64_t *)(v45 + 8);
              do
                v47 = __ldxr(v46);
              while (__stxr(v47 + 1, v46));
            }
            v48 = v44 + 2;
          }
          *(_QWORD *)(v4 + 192) = v48;
          goto LABEL_78;
        }
        std::mutex::lock((std::mutex *)(v4 + 240));
        v49 = __ns.__rep_;
        if (v92 != __ns.__rep_)
        {
          for (i = 0; i < (v92 - __ns.__rep_) >> 4; ++i)
          {
            v52 = *(_QWORD **)(a1 + 16);
            v53 = v52[1];
            v54 = v52[2];
            v55 = 170 * ((v54 - v53) >> 3) - 1;
            v56 = __p[0];
            if (v54 == v53)
              v55 = 0;
            if (v55 == v52[5] + v52[4])
            {
              sub_23998E700(*(_QWORD *)(a1 + 16));
              v53 = v52[1];
              v54 = v52[2];
            }
            if (v54 == v53)
            {
              v58 = 0;
              v59 = i >> 6;
              v60 = 1 << i;
              v61 = *(_OWORD *)(v49 + 16 * i);
              v62 = *(std::__shared_weak_count **)(v49 + 16 * i + 8);
              if (v62)
              {
LABEL_65:
                v63 = (unint64_t *)&v62->__shared_owners_;
                do
                  v64 = __ldxr(v63);
                while (__stxr(v64 + 1, v63));
                v65 = v56[v59] & v60;
                *(_OWORD *)v58 = v61;
                do
                  v66 = __ldxr(v63);
                while (__stxr(v66 + 1, v63));
                *(_BYTE *)(v58 + 16) = v65 != 0;
                do
                  v67 = __ldaxr(v63);
                while (__stlxr(v67 - 1, v63));
                if (!v67)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
                goto LABEL_56;
              }
            }
            else
            {
              v57 = v52[5] + v52[4];
              v58 = *(_QWORD *)(v53 + 8 * (v57 / 0xAA)) + 24 * (v57 % 0xAA);
              v59 = i >> 6;
              v60 = 1 << i;
              v61 = *(_OWORD *)(v49 + 16 * i);
              v62 = *(std::__shared_weak_count **)(v49 + 16 * i + 8);
              if (v62)
                goto LABEL_65;
            }
            v51 = (v56[v59] & v60) != 0;
            *(_QWORD *)v58 = v61;
            *(_QWORD *)(v58 + 8) = 0;
            *(_BYTE *)(v58 + 16) = v51;
LABEL_56:
            ++v52[5];
            v49 = __ns.__rep_;
          }
        }
LABEL_78:
        std::mutex::unlock((std::mutex *)(v4 + 240));
        if (__p[0])
          operator delete(__p[0]);
        v72 = __ns.__rep_;
        v6 = v86;
        if (__ns.__rep_)
        {
          v73 = v92;
          v74 = (void *)__ns.__rep_;
          if (v92 != __ns.__rep_)
          {
            do
            {
              v75 = *(std::__shared_weak_count **)(v73 - 8);
              if (v75)
              {
                v76 = (unint64_t *)&v75->__shared_owners_;
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              v73 -= 16;
            }
            while (v73 != v72);
            v74 = (void *)__ns.__rep_;
          }
          v92 = v72;
          operator delete(v74);
        }
        v78 = 1;
        v79 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
        if (!*((_QWORD *)&v94 + 1))
          continue;
      }
LABEL_104:
      v80 = (unint64_t *)&v79->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
      continue;
    }
    __ns.__rep_ = 100000000;
    std::this_thread::sleep_for (&__ns);
    std::mutex::lock((std::mutex *)(v4 + 240));
    *(_QWORD *)(**(_QWORD **)(a1 + 24) + v6) |= v85;
    std::mutex::unlock((std::mutex *)(v4 + 240));
    std::mutex::lock((std::mutex *)(v4 + 240));
    v39 = *(uint64_t **)(a1 + 24);
    v40 = v39[1];
    if (v40)
    {
      v41 = *v39;
      if (v40 == 1)
      {
        v42 = 0;
        v43 = 1;
        goto LABEL_97;
      }
      v68 = 0;
      v42 = v40 & 0xFFFFFFFFFFFFFFFELL;
      v69 = 1;
      v70 = 1;
      do
      {
        v71 = *(_QWORD *)(v41 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8));
        v69 &= v71 >> (v68 & 0x3E);
        v70 &= v71 >> (v68 & 0x3E | 1);
        v68 += 2;
      }
      while (v42 != v68);
      v43 = v70 & v69;
      while (v40 != v42)
      {
LABEL_97:
        v43 &= *(_QWORD *)(v41 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v42;
        ++v42;
      }
      if ((v43 & 1) == 0)
        goto LABEL_101;
    }
    if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40))
    {
LABEL_101:
      std::mutex::unlock((std::mutex *)(v4 + 240));
      v78 = 1;
      v79 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
        goto LABEL_104;
    }
    else
    {
      std::mutex::unlock((std::mutex *)(v4 + 240));
      v78 = 0;
      v79 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
      if (*((_QWORD *)&v94 + 1))
        goto LABEL_104;
    }
  }
  while ((v78 & 1) != 0);
  if (a1)
  {
    v82 = *(const void **)a1;
    *(_QWORD *)a1 = 0;
    if (v82)
    {
      v83 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v83, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](a1, 0x1030C408CF434AALL);
  }
  return 0;
}

void sub_23998F840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  std::mutex *v23;
  uint64_t v24;
  void *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;

  std::mutex::unlock(v23);
  if (__p)
  {
    operator delete(__p);
    v26 = a22;
    if (!a22)
    {
LABEL_3:
      v27 = *(std::__shared_weak_count **)(v24 - 104);
      if (!v27)
        goto LABEL_20;
      goto LABEL_16;
    }
  }
  else
  {
    v26 = a22;
    if (!a22)
      goto LABEL_3;
  }
  v28 = (uint64_t)a23;
  v29 = v26;
  if (a23 != v26)
  {
    do
    {
      v30 = *(std::__shared_weak_count **)(v28 - 8);
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v28 -= 16;
    }
    while ((void *)v28 != v26);
    v29 = a22;
  }
  a23 = v26;
  operator delete(v29);
  v27 = *(std::__shared_weak_count **)(v24 - 104);
  if (!v27)
  {
LABEL_20:
    sub_23998F9B8(&a16);
    _Unwind_Resume(a1);
  }
LABEL_16:
  v33 = (unint64_t *)&v27->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  goto LABEL_20;
}

uint64_t **sub_23998F9B8(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x23B83DE84]();
      MEMORY[0x23B83E31C](v4, 0x20C4093837F09);
    }
    MEMORY[0x23B83E31C](v2, 0x1030C408CF434AALL);
  }
  return a1;
}

uint64_t sub_23998FA20(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *__s1[2];
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      if (*(char *)(v8 + 31) < 0)
      {
        sub_23941A7F8(__s1, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v20 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)__s1 = v9;
      }
      v10 = HIBYTE(v20);
      if (v20 >= 0)
        v11 = (void *)HIBYTE(v20);
      else
        v11 = __s1[1];
      v12 = (void *)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (void *)*((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if (v20 < 0)
        {
          v17 = __s1[0];
          if (memcmp(__s1[0], v14, (size_t)__s1[1]))
          {
            operator delete(v17);
            goto LABEL_5;
          }
LABEL_27:
          v7 = *(_QWORD *)(*v3 + 32) == (_QWORD)sub_23998FB7C;
          if ((v10 & 0x80) == 0)
          {
LABEL_4:
            if (v7)
              return v6;
            goto LABEL_5;
          }
          goto LABEL_28;
        }
        if (!HIBYTE(v20))
          goto LABEL_27;
        v15 = __s1;
        v16 = HIBYTE(v20);
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v16)
            goto LABEL_27;
        }
      }
      v7 = 0;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_28:
      operator delete(__s1[0]);
      if (v7)
        return v6;
LABEL_5:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*sub_23998FB7C())()
{
  return sub_23998FB7C;
}

void sub_23998FB88(unint64_t *j, unint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *i;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;
  unsigned int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  BOOL v83;
  BOOL v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  unint64_t v109;
  unsigned int v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t *k;
  unint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  unint64_t v117;
  unsigned int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  unint64_t v130;
  unsigned int v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  unint64_t v137;
  unsigned int v138;
  unint64_t v139;
  unint64_t *v140;
  __int128 v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t *v153;
  BOOL v155;
  unint64_t *v156;
  unint64_t *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *p_shared_owners;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  unint64_t v173;
  unsigned int v174;
  unint64_t v175;
  uint64_t *v176;
  uint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  int64_t v184;
  int64_t v185;
  int64_t v186;
  uint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t *v194;
  uint64_t *v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  unint64_t v206;
  unsigned int v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t *v222;
  uint64_t *v223;
  unint64_t v224;
  unsigned int v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  BOOL v229;
  uint64_t *v230;
  uint64_t *v231;
  unint64_t v232;
  unsigned int v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t *v239;
  uint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t *v253;
  uint64_t *v254;
  unint64_t v255;
  unsigned int v256;
  unint64_t v257;
  __int128 v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  __int128 v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  std::__shared_weak_count *v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t *v285;
  uint64_t *v286;
  unint64_t v287;
  unsigned int v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  unint64_t *v293;
  uint64_t *v294;
  uint64_t *v295;
  unint64_t v296;
  unsigned int v297;
  unint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  unint64_t v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t *v316;
  uint64_t *v317;
  unint64_t v318;
  unsigned int v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t *v325;
  unint64_t v326;
  unsigned int v327;
  unint64_t v328;
  unsigned int v329;
  unint64_t v330;
  unint64_t *v331;
  unint64_t *v332;
  unint64_t v334;
  unint64_t *v335;

void sub_239991448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_239991554(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  unint64_t *result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;

  result = sub_239992054(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = (uint64_t)(*(_QWORD *)(*a5 + 160) - *(_QWORD *)(*a5 + 152)) >> 2;
  v16 = (uint64_t)(*(_QWORD *)(*a4 + 160) - *(_QWORD *)(*a4 + 152)) >> 2;
  if (v15 >= v16)
  {
    if (v15 != v16)
      return result;
    v33 = *(uint64_t **)(*a6 + 8);
    if (!v33)
      goto LABEL_67;
    v34 = *(uint64_t **)(*a6 + 8);
    while (1)
    {
      while (1)
      {
        v35 = v34[4];
        if (v35 <= v13)
          break;
        v34 = (uint64_t *)*v34;
        if (!v34)
          goto LABEL_67;
      }
      if (v35 >= v13)
        break;
      v34 = (uint64_t *)v34[1];
      if (!v34)
        goto LABEL_67;
    }
    v39 = *((_DWORD *)v34 + 10);
    while (1)
    {
      while (1)
      {
        v40 = v33[4];
        if (v40 <= v14)
          break;
        v33 = (uint64_t *)*v33;
        if (!v33)
          goto LABEL_67;
      }
      if (v40 >= v14)
        break;
      v33 = (uint64_t *)v33[1];
      if (!v33)
        goto LABEL_67;
    }
    if (v39 >= *((_DWORD *)v33 + 10))
      return result;
  }
  *a4 = v13;
  *a5 = v14;
  v17 = a4[1];
  a4[1] = a5[1];
  a5[1] = v17;
  v18 = *a4;
  v19 = *a3;
  v20 = (uint64_t)(*(_QWORD *)(*a4 + 160) - *(_QWORD *)(*a4 + 152)) >> 2;
  v21 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  if (v20 >= v21)
  {
    if (v20 != v21)
      return result;
    v36 = *(uint64_t **)(*a6 + 8);
    if (!v36)
      goto LABEL_67;
    v37 = *(uint64_t **)(*a6 + 8);
    while (1)
    {
      while (1)
      {
        v38 = v37[4];
        if (v38 <= v18)
          break;
        v37 = (uint64_t *)*v37;
        if (!v37)
          goto LABEL_67;
      }
      if (v38 >= v18)
        break;
      v37 = (uint64_t *)v37[1];
      if (!v37)
        goto LABEL_67;
    }
    v44 = *((_DWORD *)v37 + 10);
    while (1)
    {
      while (1)
      {
        v45 = v36[4];
        if (v45 <= v19)
          break;
        v36 = (uint64_t *)*v36;
        if (!v36)
          goto LABEL_67;
      }
      if (v45 >= v19)
        break;
      v36 = (uint64_t *)v36[1];
      if (!v36)
        goto LABEL_67;
    }
    if (v44 >= *((_DWORD *)v36 + 10))
      return result;
  }
  *a3 = v18;
  *a4 = v19;
  v22 = a3[1];
  a3[1] = a4[1];
  a4[1] = v22;
  v23 = *a3;
  v24 = *a2;
  v25 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  v26 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
  if (v25 >= v26)
  {
    if (v25 != v26)
      return result;
    v41 = *(uint64_t **)(*a6 + 8);
    if (!v41)
      goto LABEL_67;
    v42 = *(uint64_t **)(*a6 + 8);
    while (1)
    {
      while (1)
      {
        v43 = v42[4];
        if (v43 <= v23)
          break;
        v42 = (uint64_t *)*v42;
        if (!v42)
          goto LABEL_67;
      }
      if (v43 >= v23)
        break;
      v42 = (uint64_t *)v42[1];
      if (!v42)
        goto LABEL_67;
    }
    v49 = *((_DWORD *)v42 + 10);
    while (1)
    {
      while (1)
      {
        v50 = v41[4];
        if (v50 <= v24)
          break;
        v41 = (uint64_t *)*v41;
        if (!v41)
          goto LABEL_67;
      }
      if (v50 >= v24)
        break;
      v41 = (uint64_t *)v41[1];
      if (!v41)
        goto LABEL_67;
    }
    if (v49 >= *((_DWORD *)v41 + 10))
      return result;
  }
  *a2 = v23;
  *a3 = v24;
  v27 = a2[1];
  a2[1] = a3[1];
  a3[1] = v27;
  v28 = *a2;
  v29 = *a1;
  v30 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
  v31 = (uint64_t)(*(_QWORD *)(*a1 + 160) - *(_QWORD *)(*a1 + 152)) >> 2;
  if (v30 < v31)
  {
LABEL_5:
    *a1 = v28;
    *a2 = v29;
    v32 = a1[1];
    a1[1] = a2[1];
    a2[1] = v32;
    return result;
  }
  if (v30 == v31)
  {
    v46 = *(uint64_t **)(*a6 + 8);
    if (v46)
    {
      v47 = *(uint64_t **)(*a6 + 8);
      while (1)
      {
        while (1)
        {
          v48 = v47[4];
          if (v48 <= v28)
            break;
          v47 = (uint64_t *)*v47;
          if (!v47)
            goto LABEL_67;
        }
        if (v48 >= v28)
          break;
        v47 = (uint64_t *)v47[1];
        if (!v47)
          goto LABEL_67;
      }
      v51 = *((_DWORD *)v47 + 10);
      while (1)
      {
        while (1)
        {
          v52 = v46[4];
          if (v52 <= v29)
            break;
          v46 = (uint64_t *)*v46;
          if (!v46)
            goto LABEL_67;
        }
        if (v52 >= v29)
          break;
        v46 = (uint64_t *)v46[1];
        if (!v46)
          goto LABEL_67;
      }
      if (v51 < *((_DWORD *)v46 + 10))
        goto LABEL_5;
      return result;
    }
LABEL_67:
    sub_23941D898("map::at:  key not found");
  }
  return result;
}

unint64_t *sub_239991894(unint64_t *result, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;

  v4 = *a4;
  v5 = *a2;
  v6 = *result;
  v7 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
  v8 = (uint64_t)(*(_QWORD *)(*result + 160) - *(_QWORD *)(*result + 152)) >> 2;
  if (v7 >= v8)
  {
    if (v7 != v8)
      goto LABEL_27;
    v12 = *(uint64_t **)(v4 + 8);
    if (!v12)
      goto LABEL_85;
    v13 = *(uint64_t **)(v4 + 8);
    while (1)
    {
      while (1)
      {
        v14 = v13[4];
        if (v14 <= v5)
          break;
        v13 = (uint64_t *)*v13;
        if (!v13)
          goto LABEL_85;
      }
      if (v14 >= v5)
        break;
      v13 = (uint64_t *)v13[1];
      if (!v13)
        goto LABEL_85;
    }
    v18 = *((_DWORD *)v13 + 10);
    while (1)
    {
      while (1)
      {
        v19 = v12[4];
        if (v19 <= v6)
          break;
        v12 = (uint64_t *)*v12;
        if (!v12)
          goto LABEL_85;
      }
      if (v19 >= v6)
        break;
      v12 = (uint64_t *)v12[1];
      if (!v12)
        goto LABEL_85;
    }
    if (v18 >= *((_DWORD *)v12 + 10))
    {
LABEL_27:
      v20 = *a3;
      v21 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
      if (v21 >= v7)
      {
        if (v21 != v7)
          return result;
        v28 = *(uint64_t **)(v4 + 8);
        if (!v28)
          goto LABEL_85;
        v29 = v28;
        while (1)
        {
          while (1)
          {
            v30 = v29[4];
            if (v30 <= v20)
              break;
            v29 = (uint64_t *)*v29;
            if (!v29)
              goto LABEL_85;
          }
          if (v30 >= v20)
            break;
          v29 = (uint64_t *)v29[1];
          if (!v29)
            goto LABEL_85;
        }
        v45 = *((_DWORD *)v29 + 10);
        while (1)
        {
          while (1)
          {
            v46 = v28[4];
            if (v46 <= v5)
              break;
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_85;
          }
          if (v46 >= v5)
            break;
          v28 = (uint64_t *)v28[1];
          if (!v28)
            goto LABEL_85;
        }
        if (v45 >= *((_DWORD *)v28 + 10))
          return result;
      }
      *a2 = v20;
      *a3 = v5;
      v22 = a2 + 1;
      v23 = a2[1];
      a2[1] = a3[1];
      a3[1] = v23;
      v24 = *a2;
      v25 = *result;
      v26 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
      v27 = (uint64_t)(*(_QWORD *)(*result + 160) - *(_QWORD *)(*result + 152)) >> 2;
      if (v26 < v27)
        goto LABEL_29;
      if (v26 != v27)
        return result;
      v39 = *(uint64_t **)(*a4 + 8);
      if (v39)
      {
        v40 = *(uint64_t **)(*a4 + 8);
        while (1)
        {
          while (1)
          {
            v41 = v40[4];
            if (v41 <= v24)
              break;
            v40 = (uint64_t *)*v40;
            if (!v40)
              goto LABEL_85;
          }
          if (v41 >= v24)
            break;
          v40 = (uint64_t *)v40[1];
          if (!v40)
            goto LABEL_85;
        }
        v47 = *((_DWORD *)v40 + 10);
        while (1)
        {
          while (1)
          {
            v48 = v39[4];
            if (v48 <= v25)
              break;
            v39 = (uint64_t *)*v39;
            if (!v39)
              goto LABEL_85;
          }
          if (v48 >= v25)
            break;
          v39 = (uint64_t *)v39[1];
          if (!v39)
            goto LABEL_85;
        }
        if (v47 >= *((_DWORD *)v39 + 10))
          return result;
LABEL_29:
        *result++ = v24;
        *a2 = v25;
LABEL_48:
        v38 = *result;
        *result = *v22;
        *v22 = v38;
        return result;
      }
LABEL_85:
      sub_23941D898("map::at:  key not found");
    }
  }
  v9 = *a3;
  v10 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  if (v10 < v7)
  {
LABEL_3:
    *result++ = v9;
    *a3 = v6;
    v11 = a3 + 1;
LABEL_47:
    v22 = v11;
    goto LABEL_48;
  }
  if (v10 == v7)
  {
    v15 = *(uint64_t **)(v4 + 8);
    if (!v15)
      goto LABEL_85;
    v16 = v15;
    while (1)
    {
      while (1)
      {
        v17 = v16[4];
        if (v17 <= v9)
          break;
        v16 = (uint64_t *)*v16;
        if (!v16)
          goto LABEL_85;
      }
      if (v17 >= v9)
        break;
      v16 = (uint64_t *)v16[1];
      if (!v16)
        goto LABEL_85;
    }
    v31 = *((_DWORD *)v16 + 10);
    while (1)
    {
      while (1)
      {
        v32 = v15[4];
        if (v32 <= v5)
          break;
        v15 = (uint64_t *)*v15;
        if (!v15)
          goto LABEL_85;
      }
      if (v32 >= v5)
        break;
      v15 = (uint64_t *)v15[1];
      if (!v15)
        goto LABEL_85;
    }
    if (v31 < *((_DWORD *)v15 + 10))
      goto LABEL_3;
  }
  *result = v5;
  *a2 = v6;
  v33 = result[1];
  result[1] = a2[1];
  a2[1] = v33;
  v34 = *a3;
  v35 = *a2;
  v36 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  v37 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
  if (v36 < v37)
  {
LABEL_46:
    *a2 = v34;
    *a3 = v35;
    v11 = a3 + 1;
    result = a2 + 1;
    goto LABEL_47;
  }
  if (v36 == v37)
  {
    v42 = *(uint64_t **)(*a4 + 8);
    if (v42)
    {
      v43 = *(uint64_t **)(*a4 + 8);
      while (1)
      {
        while (1)
        {
          v44 = v43[4];
          if (v44 <= v34)
            break;
          v43 = (uint64_t *)*v43;
          if (!v43)
            goto LABEL_85;
        }
        if (v44 >= v34)
          break;
        v43 = (uint64_t *)v43[1];
        if (!v43)
          goto LABEL_85;
      }
      v49 = *((_DWORD *)v43 + 10);
      while (1)
      {
        while (1)
        {
          v50 = v42[4];
          if (v50 <= v35)
            break;
          v42 = (uint64_t *)*v42;
          if (!v42)
            goto LABEL_85;
        }
        if (v50 >= v35)
          break;
        v42 = (uint64_t *)v42[1];
        if (!v42)
          goto LABEL_85;
      }
      if (v49 < *((_DWORD *)v42 + 10))
        goto LABEL_46;
      return result;
    }
    goto LABEL_85;
  }
  return result;
}

BOOL sub_239991C0C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 2);
      v9 = *a1;
      v10 = (uint64_t)(*(_QWORD *)(v8 + 160) - *(_QWORD *)(v8 + 152)) >> 2;
      v11 = (uint64_t)(*(_QWORD *)(*a1 + 160) - *(_QWORD *)(*a1 + 152)) >> 2;
      if (v10 < v11)
        goto LABEL_3;
      if (v10 != v11)
        return result;
      v42 = *(uint64_t **)(*a3 + 8);
      if (!v42)
        goto LABEL_71;
      v43 = *(uint64_t **)(*a3 + 8);
      while (1)
      {
        while (1)
        {
          v44 = v43[4];
          if (v44 <= v8)
            break;
          v43 = (uint64_t *)*v43;
          if (!v43)
            goto LABEL_71;
        }
        if (v44 >= v8)
          break;
        v43 = (uint64_t *)v43[1];
        if (!v43)
          goto LABEL_71;
      }
      v45 = *((_DWORD *)v43 + 10);
      while (1)
      {
        while (1)
        {
          v46 = v42[4];
          if (v46 <= v9)
            break;
          v42 = (uint64_t *)*v42;
          if (!v42)
            goto LABEL_71;
        }
        if (v46 >= v9)
          break;
        v42 = (uint64_t *)v42[1];
        if (!v42)
          goto LABEL_71;
      }
      if (v45 >= *((_DWORD *)v42 + 10))
        return 1;
LABEL_3:
      *a1 = v8;
      *(a2 - 2) = v9;
      v12 = a1[1];
      a1[1] = *(a2 - 1);
      *(a2 - 1) = v12;
      return 1;
    case 3:
      sub_239991894(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      sub_239992054(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      sub_239991554(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v13 = a1 + 4;
      sub_239991894(a1, a1 + 2, a1 + 4, a3);
      v14 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v15 = 0;
      break;
  }
  while (1)
  {
    v16 = *v14;
    v17 = *v13;
    v18 = (uint64_t)(*(_QWORD *)(*v14 + 160) - *(_QWORD *)(*v14 + 152)) >> 2;
    v19 = (uint64_t)(*(_QWORD *)(*v13 + 160) - *(_QWORD *)(*v13 + 152)) >> 2;
    if (v18 < v19)
      goto LABEL_79;
    if (v18 == v19)
    {
      v34 = *(uint64_t **)(*a3 + 8);
      if (!v34)
LABEL_71:
        sub_23941D898("map::at:  key not found");
      v35 = *(uint64_t **)(*a3 + 8);
      while (1)
      {
        while (1)
        {
          v36 = v35[4];
          if (v36 <= v16)
            break;
          v35 = (uint64_t *)*v35;
          if (!v35)
            goto LABEL_71;
        }
        if (v36 >= v16)
          break;
        v35 = (uint64_t *)v35[1];
        if (!v35)
          goto LABEL_71;
      }
      v40 = *((_DWORD *)v35 + 10);
      while (1)
      {
        while (1)
        {
          v41 = v34[4];
          if (v41 <= v17)
            break;
          v34 = (uint64_t *)*v34;
          if (!v34)
            goto LABEL_71;
        }
        if (v41 >= v17)
          break;
        v34 = (uint64_t *)v34[1];
        if (!v34)
          goto LABEL_71;
      }
      if (v40 < *((_DWORD *)v34 + 10))
      {
LABEL_79:
        v47 = *v14;
        v48 = v14[1];
        *v14 = 0;
        v14[1] = 0;
        v20 = *v13;
        v21 = v14;
        while (1)
        {
          v22 = v21;
          v21 = v13;
          v23 = v13[1];
          *v13 = 0;
          v13[1] = 0;
          v24 = (std::__shared_weak_count *)v22[1];
          *v22 = v20;
          v22[1] = v23;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v26 = __ldaxr(p_shared_owners);
            while (__stlxr(v26 - 1, p_shared_owners));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          if (v21 == a1)
            break;
          v13 = v21 - 2;
          v20 = *(v21 - 2);
          v27 = (uint64_t)(*(_QWORD *)(v47 + 160) - *(_QWORD *)(v47 + 152)) >> 2;
          v28 = (uint64_t)(*(_QWORD *)(v20 + 160) - *(_QWORD *)(v20 + 152)) >> 2;
          if (v27 >= v28)
          {
            if (v27 != v28)
              goto LABEL_43;
            v29 = *(uint64_t **)(*a3 + 8);
            if (!v29)
LABEL_76:
              sub_23941D898("map::at:  key not found");
            v30 = *(uint64_t **)(*a3 + 8);
            while (1)
            {
              while (1)
              {
                v31 = v30[4];
                if (v31 <= v47)
                  break;
                v30 = (uint64_t *)*v30;
                if (!v30)
                  goto LABEL_76;
              }
              if (v31 >= v47)
                break;
              v30 = (uint64_t *)v30[1];
              if (!v30)
                goto LABEL_76;
            }
            v32 = *((_DWORD *)v30 + 10);
            while (1)
            {
              while (1)
              {
                v33 = v29[4];
                if (v33 <= v20)
                  break;
                v29 = (uint64_t *)*v29;
                if (!v29)
                  goto LABEL_76;
              }
              if (v33 >= v20)
                break;
              v29 = (uint64_t *)v29[1];
              if (!v29)
                goto LABEL_76;
            }
            if (v32 >= *((_DWORD *)v29 + 10))
              goto LABEL_43;
          }
        }
        v21 = a1;
LABEL_43:
        v37 = (std::__shared_weak_count *)v21[1];
        *v21 = v47;
        v21[1] = v48;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        if (++v15 == 8)
          return v14 + 2 == a2;
      }
    }
    v13 = v14;
    v14 += 2;
    if (v14 == a2)
      return 1;
  }
}

void sub_239992040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t *sub_239992054(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;

  result = sub_239991894(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = (uint64_t)(*(_QWORD *)(*a4 + 160) - *(_QWORD *)(*a4 + 152)) >> 2;
  v14 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  if (v13 >= v14)
  {
    if (v13 != v14)
      return result;
    v26 = *(uint64_t **)(*a5 + 8);
    if (!v26)
      goto LABEL_50;
    v27 = *(uint64_t **)(*a5 + 8);
    while (1)
    {
      while (1)
      {
        v28 = v27[4];
        if (v28 <= v11)
          break;
        v27 = (uint64_t *)*v27;
        if (!v27)
          goto LABEL_50;
      }
      if (v28 >= v11)
        break;
      v27 = (uint64_t *)v27[1];
      if (!v27)
        goto LABEL_50;
    }
    v32 = *((_DWORD *)v27 + 10);
    while (1)
    {
      while (1)
      {
        v33 = v26[4];
        if (v33 <= v12)
          break;
        v26 = (uint64_t *)*v26;
        if (!v26)
          goto LABEL_50;
      }
      if (v33 >= v12)
        break;
      v26 = (uint64_t *)v26[1];
      if (!v26)
        goto LABEL_50;
    }
    if (v32 >= *((_DWORD *)v26 + 10))
      return result;
  }
  *a3 = v11;
  *a4 = v12;
  v15 = a3[1];
  a3[1] = a4[1];
  a4[1] = v15;
  v16 = *a3;
  v17 = *a2;
  v18 = (uint64_t)(*(_QWORD *)(*a3 + 160) - *(_QWORD *)(*a3 + 152)) >> 2;
  v19 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
  if (v18 >= v19)
  {
    if (v18 != v19)
      return result;
    v29 = *(uint64_t **)(*a5 + 8);
    if (!v29)
      goto LABEL_50;
    v30 = *(uint64_t **)(*a5 + 8);
    while (1)
    {
      while (1)
      {
        v31 = v30[4];
        if (v31 <= v16)
          break;
        v30 = (uint64_t *)*v30;
        if (!v30)
          goto LABEL_50;
      }
      if (v31 >= v16)
        break;
      v30 = (uint64_t *)v30[1];
      if (!v30)
        goto LABEL_50;
    }
    v37 = *((_DWORD *)v30 + 10);
    while (1)
    {
      while (1)
      {
        v38 = v29[4];
        if (v38 <= v17)
          break;
        v29 = (uint64_t *)*v29;
        if (!v29)
          goto LABEL_50;
      }
      if (v38 >= v17)
        break;
      v29 = (uint64_t *)v29[1];
      if (!v29)
        goto LABEL_50;
    }
    if (v37 >= *((_DWORD *)v29 + 10))
      return result;
  }
  *a2 = v16;
  *a3 = v17;
  v20 = a2[1];
  a2[1] = a3[1];
  a3[1] = v20;
  v21 = *a2;
  v22 = *a1;
  v23 = (uint64_t)(*(_QWORD *)(*a2 + 160) - *(_QWORD *)(*a2 + 152)) >> 2;
  v24 = (uint64_t)(*(_QWORD *)(*a1 + 160) - *(_QWORD *)(*a1 + 152)) >> 2;
  if (v23 < v24)
  {
LABEL_4:
    *a1 = v21;
    *a2 = v22;
    v25 = a1[1];
    a1[1] = a2[1];
    a2[1] = v25;
    return result;
  }
  if (v23 == v24)
  {
    v34 = *(uint64_t **)(*a5 + 8);
    if (v34)
    {
      v35 = *(uint64_t **)(*a5 + 8);
      while (1)
      {
        while (1)
        {
          v36 = v35[4];
          if (v36 <= v21)
            break;
          v35 = (uint64_t *)*v35;
          if (!v35)
            goto LABEL_50;
        }
        if (v36 >= v21)
          break;
        v35 = (uint64_t *)v35[1];
        if (!v35)
          goto LABEL_50;
      }
      v39 = *((_DWORD *)v35 + 10);
      while (1)
      {
        while (1)
        {
          v40 = v34[4];
          if (v40 <= v22)
            break;
          v34 = (uint64_t *)*v34;
          if (!v34)
            goto LABEL_50;
        }
        if (v40 >= v22)
          break;
        v34 = (uint64_t *)v34[1];
        if (!v34)
          goto LABEL_50;
      }
      if (v39 < *((_DWORD *)v34 + 10))
        goto LABEL_4;
      return result;
    }
LABEL_50:
    sub_23941D898("map::at:  key not found");
  }
  return result;
}

void sub_2399922D8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_239992834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_239992850(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239992864(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_23999287C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_239992894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *__p[2];
  char v21;
  unsigned int v22;
  int v23;
  char v24;
  int v25;
  __int16 v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  int v29;
  _QWORD v30[36];

  v30[35] = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 112);
  v4 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250ADED90;
  sub_23996301C((uint64_t)&v4[1]);
  v27 = v4 + 1;
  v28 = v4;
  sub_23995F9AC((char **)&v4[1], a1);
  v25 = 1065353216;
  v24 = 0;
  v26 = 1;
  v23 = 1065353216;
  sub_2399F765C(v30, &v4[1], &v23);
  sub_2399F7660((uint64_t)v30);
  v21 = 12;
  strcpy((char *)__p, "v:importance");
  v5 = (_QWORD *)(a1 + 8);
  v29 = 0;
  v6 = sub_2399346C0((uint64_t **)(a1 + 8), (uint64_t)&v29, (unsigned __int8 *)__p);
  v7 = v6;
  v22 = v6;
  if (v21 < 0)
  {
    operator delete(__p[0]);
    if (v7 != -1)
      goto LABEL_6;
  }
  else if (v6 != -1)
  {
    goto LABEL_6;
  }
  v21 = 12;
  strcpy((char *)__p, "v:importance");
  sub_239992B6C((_QWORD *)a1, &v22, (uint64_t)__p);
  if (v21 < 0)
  {
    operator delete(__p[0]);
    v8 = v2 - v3;
    if (((v2 - v3) & 0x3FFFFFFFCLL) != 0)
      goto LABEL_7;
LABEL_18:
    sub_239941D94((uint64_t)v30);
LABEL_19:
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    return;
  }
LABEL_6:
  v8 = v2 - v3;
  if (((v2 - v3) & 0x3FFFFFFFCLL) == 0)
    goto LABEL_18;
LABEL_7:
  v9 = 0;
  v10 = (v8 >> 2);
  do
  {
    v11 = *(_DWORD *)(v30[0] + 4 * v9);
    v12 = (uint64_t *)(*v5 + 16 * v22);
    v14 = *v12;
    v13 = (std::__shared_weak_count *)v12[1];
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v17 = __ldaxr(v15);
      while (__stlxr(v17 - 1, v15));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    *(_DWORD *)(*(_QWORD *)(v14 + 40) + 4 * v9++) = v11;
  }
  while (v9 != v10);
  v4 = v28;
  sub_239941D94((uint64_t)v30);
  if (v4)
    goto LABEL_19;
}

void sub_239992AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  sub_239941D94((uint64_t)&a22);
  sub_239416DA0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_239992B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239992B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_239992B54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_239992B6C(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;

  v14 = 0;
  *a2 = sub_2394E60A8((uint64_t)(a1 + 1), (uint64_t)&v14, a3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v5 = (uint64_t *)a1[1];
  v6 = (uint64_t *)a1[2];
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      v8 = *v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v7);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_239992C48(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    sub_239EC2FF0(v1);
  _Unwind_Resume(exception_object);
}

void sub_239992C60(uint64_t a1, _WORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;

  v7 = *(_QWORD *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 160);
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v11 = 0;
  }
  else
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (unint64_t)((v8 >> 2) - 1) >> 6;
    v10 = (char *)operator new(8 * (v9 + 1));
    v11 = v10;
    v15 = v8 >> 2;
    v16 = v9 + 1;
    v14 = v10;
    if ((unint64_t)v8 >= 0x104)
      v12 = (unint64_t)((v8 >> 2) - 1) >> 6;
    else
      v12 = 0;
    *(_QWORD *)&v10[8 * v12] = 0;
    v13 = 8 * ((unint64_t)(v8 >> 2) >> 6);
    if ((unint64_t)v8 >= 0x100)
      bzero(v10, v13);
    if (v8 >> 2)
      *(_QWORD *)&v11[v13] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v8 >> 2));
  }
  sub_239992D88(a1, a2, &v14, a3);
  if (v11)
    operator delete(v11);
}

void sub_239992D70(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_239992D88(uint64_t a1, _WORD *a2, _QWORD *a3, _QWORD *a4)
{
  unsigned int v4;
  uint64_t **v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  float32x4_t v44;
  unint64_t v45;
  float32x4_t v46;
  float v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  uint64_t *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  float32x4_t v58;
  uint64_t v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  float32x4_t v66;
  float32x4_t v67;
  unint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _BYTE *v78;
  _DWORD *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  _OWORD *v84;
  unsigned int *v85;
  uint64_t v86;
  __int128 v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  _DWORD *v102;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _OWORD *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  int v112;
  unint64_t v114;
  float32x4_t v115;
  uint64_t v116;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  __int128 __p;
  unint64_t v122;
  int v123;

  HIBYTE(v122) = 12;
  strcpy((char *)&__p, "v:importance");
  v7 = (uint64_t **)(a1 + 8);
  v123 = 0;
  v8 = sub_2399346C0((uint64_t **)(a1 + 8), (uint64_t)&v123, (unsigned __int8 *)&__p);
  v9 = v8;
  if (SHIBYTE(v122) < 0)
  {
    operator delete((void *)__p);
    if (v9 != -1)
      goto LABEL_6;
  }
  else if (v8 != -1)
  {
    goto LABEL_6;
  }
  sub_239992894(a1);
  HIBYTE(v122) = 12;
  strcpy((char *)&__p, "v:importance");
  v123 = 0;
  v9 = sub_2399346C0(v7, (uint64_t)&v123, (unsigned __int8 *)&__p);
  if ((SHIBYTE(v122) & 0x80000000) == 0)
  {
LABEL_6:
    v10 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
    v11 = (v10 >> 2);
    if ((v10 >> 2))
      goto LABEL_7;
LABEL_21:
    v13 = 0;
    v14 = 0;
    goto LABEL_22;
  }
  operator delete((void *)__p);
  v29 = *(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104);
  v11 = (v29 >> 2);
  if (!(v29 >> 2))
    goto LABEL_21;
LABEL_7:
  v12 = (unsigned int *)operator new(8 * v11);
  v13 = (char *)v12;
  v14 = (char *)&v12[2 * v11];
  v15 = (v11 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  v16 = (char *)v12;
  if (v15 < 7)
    goto LABEL_127;
  v17 = v15 + 1;
  v16 = (char *)&v12[2 * (v17 & 0x3FFFFFFFFFFFFFF8)];
  v18 = v12 + 8;
  *(_QWORD *)&v19 = 0xFFFFFFFFLL;
  *((_QWORD *)&v19 + 1) = 0xFFFFFFFFLL;
  v20 = v17 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    *(v18 - 2) = v19;
    *(v18 - 1) = v19;
    *v18 = v19;
    v18[1] = v19;
    v18 += 4;
    v20 -= 8;
  }
  while (v20);
  if (v17 != (v17 & 0x3FFFFFFFFFFFFFF8))
  {
LABEL_127:
    do
    {
      *(_QWORD *)v16 = 0xFFFFFFFFLL;
      v16 += 8;
    }
    while (v16 != v14);
  }
  v21 = 0;
  v22 = v9;
  do
  {
    *(_DWORD *)&v13[8 * v21] = v21;
    v23 = &(*v7)[2 * v22];
    v25 = *v23;
    v24 = (std::__shared_weak_count *)v23[1];
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    *(_DWORD *)&v13[8 * v21 + 4] = *(_DWORD *)(*(_QWORD *)(v25 + 40) + 4 * v21);
    ++v21;
  }
  while (v21 != v11);
LABEL_22:
  v30 = (v14 - v13) >> 3;
  v31 = 126 - 2 * __clz(v30);
  if (v14 == v13)
    v32 = 0;
  else
    v32 = v31;
  sub_239993670((unint64_t)v13, v14, v32, 1);
  a4[1] = *a4;
  if (*(_QWORD *)(a1 + 112) == *(_QWORD *)(a1 + 104))
  {
    v44.i64[0] = 0x7F0000007FLL;
    v44.i64[1] = 0x7F0000007FLL;
    LOWORD(v4) = *a2;
    __p = 0uLL;
    v122 = 0;
    if (v14 == v13)
      goto LABEL_83;
    goto LABEL_35;
  }
  v33 = 0;
  v34 = 0;
  v35 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v36.i64[0] = 0x80000000800000;
  v36.i64[1] = 0x80000000800000;
  do
  {
    v38 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
    v40 = *v38;
    v39 = (std::__shared_weak_count *)v38[1];
    if (v39)
    {
      v41 = (unint64_t *)&v39->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
      if (!v43)
      {
        v118 = v35;
        v115 = v36;
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        v36 = v115;
        v35 = v118;
      }
    }
    v37 = *(float32x4_t *)(*(_QWORD *)(v40 + 40) + 16 * v33);
    v35 = vminq_f32(v35, v37);
    v36 = vmaxq_f32(v36, v37);
    v33 = ++v34;
  }
  while (v34 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2));
  v44 = vsubq_f32(v36, v35);
  LOWORD(v4) = *a2;
  __p = 0uLL;
  v122 = 0;
  if (v14 != v13)
  {
LABEL_35:
    v119 = v44;
    if (v14 - v13 < 0)
      sub_2394189F8();
    __p = (unint64_t)operator new(8 * (((v30 - 1) >> 6) + 1));
    v122 = ((v30 - 1) >> 6) + 1;
    sub_23942D8C8(&__p, (v14 - v13) >> 3, 0);
    v45 = 0;
    v46 = vmulq_f32(v119, v119);
    v46.i32[3] = 0;
    v47 = (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46))) / (float)v4) * 0.3;
    if (v30 <= 1)
      v48 = 1;
    else
      v48 = (v14 - v13) >> 3;
    v114 = (v14 - v13) >> 3;
    v116 = v48;
    v49 = *(unsigned int *)v13;
    v50 = (unsigned int *)*a4;
    v51 = (unsigned int *)a4[1];
    if ((unsigned int *)*a4 != v51)
    {
      do
      {
LABEL_43:
        v52 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
        v53 = *v52;
        v54 = (std::__shared_weak_count *)v52[1];
        if (v54)
        {
          v55 = (unint64_t *)&v54->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
          do
            v57 = __ldaxr(v55);
          while (__stlxr(v57 - 1, v55));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v58 = *(float32x4_t *)(*(_QWORD *)(v53 + 40) + 16 * v49);
        v59 = *v50;
        v60 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
        v62 = *v60;
        v61 = (std::__shared_weak_count *)v60[1];
        if (v61)
        {
          v63 = (unint64_t *)&v61->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
          do
            v65 = __ldaxr(v63);
          while (__stlxr(v65 - 1, v63));
          if (!v65)
          {
            v120 = v58;
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
            v58 = v120;
          }
        }
        v66 = vsubq_f32(v58, *(float32x4_t *)(*(_QWORD *)(v62 + 40) + 16 * v59));
        v67 = vmulq_f32(v66, v66);
        v67.i32[3] = 0;
        if (sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v67, v67))) < v47)
          goto LABEL_41;
        ++v50;
      }
      while (v50 != v51);
    }
    while (1)
    {
      if (((*(_QWORD *)(*a3 + ((v49 >> 3) & 0x1FFFFFF8)) >> v49) & 1) != 0)
        goto LABEL_41;
      v69 = (unsigned int *)a4[1];
      v68 = a4[2];
      if ((unint64_t)v69 < v68)
      {
        *v69 = v49;
        v70 = (uint64_t)(v69 + 1);
        goto LABEL_80;
      }
      v71 = (unsigned int *)*a4;
      v72 = (uint64_t)v69 - *a4;
      v73 = v72 >> 2;
      v74 = (v72 >> 2) + 1;
      if (v74 >> 62)
        sub_2394189F8();
      v75 = v68 - (_QWORD)v71;
      if (v75 >> 1 > v74)
        v74 = v75 >> 1;
      v76 = (unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v74;
      if (v76)
        break;
      v78 = 0;
      v79 = (_DWORD *)(4 * v73);
      *(_DWORD *)(4 * v73) = v49;
      v70 = 4 * v73 + 4;
      if (v69 != v71)
        goto LABEL_71;
LABEL_78:
      *a4 = v79;
      a4[1] = v70;
      a4[2] = &v78[4 * v76];
      if (v69)
        operator delete(v69);
LABEL_80:
      a4[1] = v70;
      *(_QWORD *)(__p + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v45;
      if ((unsigned __int16)*a2 <= (unint64_t)((v70 - *a4) >> 2))
      {
LABEL_81:
        if ((_QWORD)__p)
          operator delete((void *)__p);
        goto LABEL_83;
      }
LABEL_41:
      if (++v45 == v116)
      {
        v89 = 0;
        while (1)
        {
          while (1)
          {
            if (((*(_QWORD *)(__p + ((v89 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v89) & 1) == 0)
            {
              v90 = *(unsigned int *)&v13[8 * v89];
              if (((*(_QWORD *)(*a3 + ((v90 >> 3) & 0x1FFFFFF8)) >> v90) & 1) == 0)
                break;
            }
            if (++v89 >= v114)
              goto LABEL_81;
          }
          v92 = (char *)a4[1];
          v91 = a4[2];
          if ((unint64_t)v92 >= v91)
          {
            v95 = (unsigned int *)*a4;
            v96 = (uint64_t)&v92[-*a4];
            v97 = v96 >> 2;
            v98 = (v96 >> 2) + 1;
            if (v98 >> 62)
              sub_2394189F8();
            v99 = v91 - (_QWORD)v95;
            if (v99 >> 1 > v98)
              v98 = v99 >> 1;
            if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
              v100 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v100 = v98;
            if (v100)
            {
              if (v100 >> 62)
                sub_239418A80();
              v101 = operator new(4 * v100);
              v102 = &v101[4 * v97];
              *v102 = v90;
              v93 = (uint64_t)(v102 + 1);
              if (v92 != (char *)v95)
              {
LABEL_110:
                v104 = v92 - 4 - (char *)v95;
                if (v104 < 0x2C)
                  goto LABEL_128;
                if ((unint64_t)(v92 - &v101[v96]) < 0x20)
                  goto LABEL_128;
                v105 = (v104 >> 2) + 1;
                v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
                v107 = &v92[-v106];
                v102 = (_DWORD *)((char *)v102 - v106);
                v108 = &v101[4 * v97 - 16];
                v109 = v92 - 16;
                v110 = v105 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v111 = *(_OWORD *)v109;
                  *(v108 - 1) = *((_OWORD *)v109 - 1);
                  *v108 = v111;
                  v108 -= 2;
                  v109 -= 32;
                  v110 -= 8;
                }
                while (v110);
                v92 = v107;
                if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_128:
                  do
                  {
                    v112 = *((_DWORD *)v92 - 1);
                    v92 -= 4;
                    *--v102 = v112;
                  }
                  while (v92 != (char *)v95);
                }
                v92 = (char *)*a4;
                *a4 = v102;
                a4[1] = v93;
                a4[2] = &v101[4 * v100];
                v94 = v114;
                if (!v92)
                  goto LABEL_103;
LABEL_102:
                operator delete(v92);
                goto LABEL_103;
              }
            }
            else
            {
              v101 = 0;
              v102 = (_DWORD *)(4 * v97);
              *(_DWORD *)(4 * v97) = v90;
              v93 = 4 * v97 + 4;
              if (v92 != (char *)v95)
                goto LABEL_110;
            }
            *a4 = v102;
            a4[1] = v93;
            a4[2] = &v101[4 * v100];
            v94 = v114;
            if (v92)
              goto LABEL_102;
          }
          else
          {
            *(_DWORD *)v92 = v90;
            v93 = (uint64_t)(v92 + 4);
            v94 = v114;
          }
LABEL_103:
          a4[1] = v93;
          ++v89;
          if ((unsigned __int16)*a2 <= (unint64_t)((v93 - *a4) >> 2) || v89 >= v94)
            goto LABEL_81;
        }
      }
      v49 = *(unsigned int *)&v13[8 * v45];
      v50 = (unsigned int *)*a4;
      v51 = (unsigned int *)a4[1];
      if ((unsigned int *)*a4 != v51)
        goto LABEL_43;
    }
    if (v76 >> 62)
      sub_239418A80();
    v77 = v76;
    v78 = operator new(4 * v76);
    v76 = v77;
    v79 = &v78[4 * v73];
    *v79 = v49;
    v70 = (uint64_t)(v79 + 1);
    if (v69 == v71)
      goto LABEL_78;
LABEL_71:
    v80 = (char *)(v69 - 1) - (char *)v71;
    if (v80 < 0x2C)
      goto LABEL_129;
    if ((unint64_t)((char *)v69 - &v78[v72]) < 0x20)
      goto LABEL_129;
    v81 = (v80 >> 2) + 1;
    v82 = 4 * (v81 & 0x7FFFFFFFFFFFFFF8);
    v83 = &v69[v82 / 0xFFFFFFFFFFFFFFFCLL];
    v79 = (_DWORD *)((char *)v79 - v82);
    v84 = &v78[4 * v73 - 16];
    v85 = v69 - 4;
    v86 = v81 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v87 = *(_OWORD *)v85;
      *(v84 - 1) = *((_OWORD *)v85 - 1);
      *v84 = v87;
      v84 -= 2;
      v85 -= 8;
      v86 -= 8;
    }
    while (v86);
    v69 = v83;
    if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_129:
      do
      {
        v88 = *--v69;
        *--v79 = v88;
      }
      while (v69 != v71);
    }
    v69 = (unsigned int *)*a4;
    goto LABEL_78;
  }
LABEL_83:
  if (v13)
    operator delete(v13);
}

void sub_239993620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_239993670(unint64_t result, char *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int *v24;
  unint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  int *v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int *v44;
  unint64_t v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int *v66;
  unint64_t v67;
  char *v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unint64_t v76;
  _DWORD *v77;
  unint64_t v78;
  _DWORD *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  unsigned int v88;
  char *v89;
  unsigned int v90;
  int v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  BOOL v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unsigned int v101;
  char *v102;
  char *v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  BOOL v132;
  uint64_t v133;
  uint64_t *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int64_t v141;
  int64_t v142;
  BOOL v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  uint64_t v171;
  uint64_t v172;
  _DWORD *v173;
  _DWORD *v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = a2 - 4;
  v9 = (unint64_t)v7;
  while (2)
  {
    v7 = (uint64_t *)v9;
    v10 = (uint64_t)&a2[-v9];
    v11 = (uint64_t)&a2[-v9] >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v110 = *((_QWORD *)a2 - 1);
        v111 = *(_QWORD *)v9;
        if (HIDWORD(*(_QWORD *)v9) < HIDWORD(v110))
        {
          *(_DWORD *)v9 = v110;
          *((_DWORD *)a2 - 2) = v111;
          v112 = *(_DWORD *)(v9 + 4);
          *(_DWORD *)(v9 + 4) = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v112;
        }
        return result;
      case 3:
        v113 = *(_DWORD *)(v9 + 8);
        v114 = *(_DWORD *)(v9 + 12);
        v115 = *(_DWORD *)(v9 + 4);
        v116 = *((_QWORD *)a2 - 1);
        if (v115 < v114)
        {
          v117 = *(_DWORD *)v9;
          if (v114 >= HIDWORD(v116))
          {
            *(_DWORD *)(v9 + 4) = v114;
            *(_DWORD *)(v9 + 8) = v117;
            *(_DWORD *)(v9 + 12) = v115;
            *(_DWORD *)v9 = v113;
            v176 = *((_QWORD *)a2 - 1);
            v177 = *(_QWORD *)(v9 + 8);
            if (HIDWORD(v177) >= HIDWORD(v176))
              return result;
            *(_DWORD *)(v9 + 8) = v176;
            *((_DWORD *)a2 - 2) = v177;
            v118 = (int *)(v9 + 12);
          }
          else
          {
            *(_DWORD *)v9 = v116;
            v118 = (int *)(v9 + 4);
            *((_DWORD *)a2 - 2) = v117;
          }
          goto LABEL_181;
        }
        if (v114 < HIDWORD(v116))
        {
          *(_DWORD *)(v9 + 8) = v116;
          *((_DWORD *)a2 - 2) = v113;
          v8 = (char *)(v9 + 12);
          v167 = *(_DWORD *)(v9 + 12);
          *(_DWORD *)(v9 + 12) = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v167;
          v168 = *(_QWORD *)v9;
          v169 = *(_QWORD *)(v9 + 8);
          if (HIDWORD(*(_QWORD *)v9) < HIDWORD(v169))
          {
            *(_DWORD *)v9 = v169;
            *(_DWORD *)(v9 + 8) = v168;
            v118 = (int *)(v9 + 4);
LABEL_181:
            v178 = *v118;
            *v118 = *(_DWORD *)v8;
            *(_DWORD *)v8 = v178;
            return result;
          }
        }
        return result;
      case 4:
        return (unint64_t)sub_2399945FC((uint64_t *)v9, (int *)(v9 + 8), (uint64_t *)(v9 + 16), (uint64_t)(a2 - 8));
      case 5:
        result = (unint64_t)sub_2399945FC((uint64_t *)v9, (int *)(v9 + 8), (uint64_t *)(v9 + 16), v9 + 24);
        v119 = *((_QWORD *)a2 - 1);
        v120 = *(_QWORD *)(v9 + 24);
        if (HIDWORD(v120) < HIDWORD(v119))
        {
          *(_DWORD *)(v9 + 24) = v119;
          *((_DWORD *)a2 - 2) = v120;
          v121 = *(_DWORD *)(v9 + 28);
          *(_DWORD *)(v9 + 28) = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v121;
          v122 = *(_QWORD *)(v9 + 16);
          v123 = *(_QWORD *)(v9 + 24);
          v124 = HIDWORD(v123);
          if (HIDWORD(v122) < HIDWORD(v123))
          {
            *(_QWORD *)(v9 + 16) = v123;
            *(_QWORD *)(v9 + 24) = v122;
            v125 = *(_QWORD *)(v9 + 8);
            v126 = *(_QWORD *)(v9 + 16);
            if (HIDWORD(v125) < HIDWORD(v126))
            {
              *(_DWORD *)(v9 + 8) = v126;
              *(_DWORD *)(v9 + 12) = v124;
              *(_QWORD *)(v9 + 16) = v125;
              v127 = *(_QWORD *)v9;
              v128 = *(_QWORD *)(v9 + 8);
              v129 = HIDWORD(*(_QWORD *)v9);
              if (v129 < HIDWORD(v128))
              {
                *(_DWORD *)v9 = v128;
                *(_DWORD *)(v9 + 4) = v124;
                *(_DWORD *)(v9 + 8) = v127;
                *(_DWORD *)(v9 + 12) = v129;
              }
            }
          }
        }
        return result;
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if ((char *)v9 != a2)
            {
              v141 = (unint64_t)(v11 - 2) >> 1;
              v142 = v141;
              do
              {
                if (v141 >= v142)
                {
                  v144 = (2 * v142) | 1;
                  v145 = v9 + 8 * v144;
                  v146 = *(_QWORD *)v145;
                  if (2 * v142 + 2 < v11)
                  {
                    result = HIDWORD(v146);
                    if (HIDWORD(*(_QWORD *)(v145 + 8)) < HIDWORD(v146))
                    {
                      v146 = *(_QWORD *)(v145 + 8);
                      v145 += 8;
                      v144 = 2 * v142 + 2;
                    }
                  }
                  v147 = v9 + 8 * v142;
                  v148 = *(_QWORD *)v147;
                  v149 = HIDWORD(v146);
                  v150 = HIDWORD(*(_QWORD *)v147);
                  if (v150 >= v149)
                  {
                    LODWORD(v151) = *(_DWORD *)v145;
                    while (1)
                    {
                      result = v147;
                      v147 = v145;
                      *(_DWORD *)result = v151;
                      *(_DWORD *)(result + 4) = *(_DWORD *)(v145 + 4);
                      if (v141 < v144)
                        break;
                      v152 = (2 * v144) | 1;
                      v145 = v9 + 8 * v152;
                      v144 = 2 * v144 + 2;
                      v151 = *(_QWORD *)v145;
                      if (v144 < v11)
                      {
                        if (HIDWORD(*(_QWORD *)(v145 + 8)) >= HIDWORD(v151))
                        {
                          v144 = v152;
                        }
                        else
                        {
                          v151 = *(_QWORD *)(v145 + 8);
                          v145 += 8;
                        }
                        result = HIDWORD(v151);
                        if (v150 < HIDWORD(v151))
                          break;
                      }
                      else
                      {
                        v144 = v152;
                        result = HIDWORD(v151);
                        if (v150 < HIDWORD(v151))
                          break;
                      }
                    }
                    *(_DWORD *)v147 = v148;
                    *(_DWORD *)(v147 + 4) = v150;
                  }
                }
                v143 = v142-- <= 0;
              }
              while (!v143);
              v153 = (unint64_t)v10 >> 3;
              do
              {
                v154 = 0;
                v155 = *(_QWORD *)v9;
                v156 = (_DWORD *)v9;
                do
                {
                  v157 = (char *)&v156[2 * v154 + 2];
                  v158 = (2 * v154) | 1;
                  v159 = 2 * v154 + 2;
                  if (v159 < v153 && *((_DWORD *)v157 + 3) < *((_DWORD *)v157 + 1))
                  {
                    v157 += 8;
                    v158 = v159;
                  }
                  *v156 = *(_DWORD *)v157;
                  v156[1] = *((_DWORD *)v157 + 1);
                  v156 = v157;
                  v154 = v158;
                }
                while (v158 <= (uint64_t)((unint64_t)(v153 - 2) >> 1));
                if (v157 == a2 - 8)
                {
                  *(_QWORD *)v157 = v155;
                }
                else
                {
                  *(_DWORD *)v157 = *((_DWORD *)a2 - 2);
                  *((_DWORD *)v157 + 1) = *((_DWORD *)a2 - 1);
                  *((_QWORD *)a2 - 1) = v155;
                  v160 = (uint64_t)&v157[-v9 + 8];
                  if (v160 >= 9)
                  {
                    v161 = (((unint64_t)v160 >> 3) - 2) >> 1;
                    v162 = (char *)(v9 + 8 * v161);
                    v163 = *(_QWORD *)v162;
                    v164 = *(_QWORD *)v157;
                    v165 = HIDWORD(*(_QWORD *)v157);
                    if (v165 < HIDWORD(*(_QWORD *)v162))
                    {
                      do
                      {
                        v166 = v157;
                        v157 = v162;
                        *(_DWORD *)v166 = v163;
                        *((_DWORD *)v166 + 1) = *((_DWORD *)v162 + 1);
                        if (!v161)
                          break;
                        v161 = (v161 - 1) >> 1;
                        v162 = (char *)(v9 + 8 * v161);
                        v163 = *(_QWORD *)v162;
                      }
                      while (v165 < HIDWORD(*(_QWORD *)v162));
                      *(_DWORD *)v157 = v164;
                      *((_DWORD *)v157 + 1) = v165;
                    }
                  }
                }
                a2 -= 8;
                v143 = v153-- <= 2;
              }
              while (!v143);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = (int *)(v9 + 8 * ((unint64_t)v11 >> 1));
          v14 = *((_QWORD *)a2 - 1);
          if ((unint64_t)v10 < 0x401)
          {
            v20 = *(_DWORD *)v9;
            v21 = *(_DWORD *)(v9 + 4);
            v22 = v13[1];
            if (v22 < v21)
            {
              v23 = *v13;
              if (v21 >= HIDWORD(v14))
              {
                *v13 = v20;
                *(_DWORD *)(v9 + 8 * v12 + 4) = v21;
                *(_DWORD *)(v9 + 4) = v22;
                v24 = (int *)(v9 + 4);
                *(_DWORD *)v9 = v23;
                v50 = *((_QWORD *)a2 - 1);
                v51 = *(_QWORD *)v9;
                if (HIDWORD(*(_QWORD *)v9) >= HIDWORD(v50))
                  goto LABEL_33;
                *(_DWORD *)v9 = v50;
                *((_DWORD *)a2 - 2) = v51;
              }
              else
              {
                *v13 = v14;
                *((_DWORD *)a2 - 2) = v23;
                v24 = (int *)(v9 + 8 * v12 + 4);
              }
              v30 = a2 - 4;
              goto LABEL_32;
            }
            if (v21 < HIDWORD(v14))
            {
              *(_DWORD *)v9 = v14;
              *((_DWORD *)a2 - 2) = v20;
              v30 = (char *)(v9 + 4);
              v31 = *(_DWORD *)(v9 + 4);
              *(_DWORD *)(v9 + 4) = *((_DWORD *)a2 - 1);
              *((_DWORD *)a2 - 1) = v31;
              v32 = *(_QWORD *)v13;
              if (HIDWORD(*(_QWORD *)v13) < HIDWORD(*(_QWORD *)v9))
              {
                *v13 = *(_QWORD *)v9;
                *(_DWORD *)v9 = v32;
                v24 = (int *)(v9 + 8 * v12 + 4);
LABEL_32:
                v52 = *v24;
                *v24 = *(_DWORD *)v30;
                *(_DWORD *)v30 = v52;
              }
            }
LABEL_33:
            --a3;
            v53 = *(_QWORD *)v9;
            if ((a4 & 1) != 0)
              goto LABEL_34;
LABEL_60:
            v54 = HIDWORD(v53);
            if (HIDWORD(v53) < *(_DWORD *)(v9 - 4))
              goto LABEL_61;
            if (*((_DWORD *)a2 - 1) >= HIDWORD(v53))
            {
              v100 = v9 + 8;
              do
              {
                v9 = v100;
                if (v100 >= (unint64_t)a2)
                  break;
                v101 = *(_DWORD *)(v100 + 4);
                v100 += 8;
              }
              while (v101 >= HIDWORD(v53));
            }
            else
            {
              v98 = v9;
              do
              {
                v9 = v98 + 8;
                v99 = *(_DWORD *)(v98 + 12);
                v98 += 8;
              }
              while (v99 >= HIDWORD(v53));
            }
            v102 = a2;
            if (v9 < (unint64_t)a2)
            {
              v103 = a2;
              do
              {
                v102 = v103 - 8;
                v104 = *((_DWORD *)v103 - 1);
                v103 -= 8;
              }
              while (v104 < HIDWORD(v53));
            }
            if (v9 < (unint64_t)v102)
            {
              v105 = *(_DWORD *)v9;
              v106 = *(_DWORD *)v102;
              do
              {
                *(_DWORD *)v9 = v106;
                *(_DWORD *)v102 = v105;
                v107 = *(_DWORD *)(v9 + 4);
                *(_DWORD *)(v9 + 4) = *((_DWORD *)v102 + 1);
                *((_DWORD *)v102 + 1) = v107;
                do
                {
                  v108 = *(_QWORD *)(v9 + 8);
                  v9 += 8;
                  v105 = v108;
                }
                while (HIDWORD(v108) >= HIDWORD(v53));
                do
                {
                  v109 = *((_QWORD *)v102 - 1);
                  v102 -= 8;
                  v106 = v109;
                }
                while (HIDWORD(v109) < HIDWORD(v53));
              }
              while (v9 < (unint64_t)v102);
            }
            if ((uint64_t *)(v9 - 8) != v7)
            {
              *(_DWORD *)v7 = *(_DWORD *)(v9 - 8);
              *((_DWORD *)v7 + 1) = *(_DWORD *)(v9 - 4);
            }
            a4 = 0;
            *(_QWORD *)(v9 - 8) = v53;
            continue;
          }
          v15 = *v13;
          v16 = v13[1];
          v17 = *(_DWORD *)(v9 + 4);
          if (v17 < v16)
          {
            v18 = *(_DWORD *)v9;
            if (v16 >= HIDWORD(v14))
            {
              *(_DWORD *)v9 = v15;
              *(_DWORD *)(v9 + 4) = v16;
              *v13 = v18;
              v33 = v9 + 8 * v12;
              *(_DWORD *)(v33 + 4) = v17;
              v19 = (int *)(v33 + 4);
              v34 = *((_QWORD *)a2 - 1);
              v35 = *(_QWORD *)(v9 + 8 * v12);
              if (HIDWORD(v35) >= HIDWORD(v34))
                goto LABEL_23;
              *v13 = v34;
              *((_DWORD *)a2 - 2) = v35;
            }
            else
            {
              *(_DWORD *)v9 = v14;
              v19 = (int *)(v9 + 4);
              *((_DWORD *)a2 - 2) = v18;
            }
            v26 = a2 - 4;
            goto LABEL_22;
          }
          if (v16 < HIDWORD(v14))
          {
            *v13 = v14;
            *((_DWORD *)a2 - 2) = v15;
            v25 = v9 + 8 * v12;
            v27 = *(_DWORD *)(v25 + 4);
            v26 = (char *)(v25 + 4);
            *(_DWORD *)v26 = *((_DWORD *)a2 - 1);
            *((_DWORD *)a2 - 1) = v27;
            v28 = *(_QWORD *)(v9 + 8 * v12);
            v29 = *(_QWORD *)v9;
            if (HIDWORD(*(_QWORD *)v9) < HIDWORD(v28))
            {
              *(_DWORD *)v9 = v28;
              v19 = (int *)(v9 + 4);
              *v13 = v29;
LABEL_22:
              v36 = *v19;
              *v19 = *(_DWORD *)v26;
              *(_DWORD *)v26 = v36;
            }
          }
LABEL_23:
          v37 = v12 - 1;
          v38 = (int *)(v9 + 8 * (v12 - 1));
          v39 = *v38;
          v40 = v38[1];
          v41 = *(_DWORD *)(v9 + 12);
          v42 = *((_QWORD *)a2 - 2);
          if (v41 < v40)
          {
            v43 = *(_DWORD *)(v9 + 8);
            if (v40 >= HIDWORD(v42))
            {
              *(_DWORD *)(v9 + 8) = v39;
              *(_DWORD *)(v9 + 12) = v40;
              *v38 = v43;
              v55 = v9 + 8 * v37;
              *(_DWORD *)(v55 + 4) = v41;
              v44 = (int *)(v55 + 4);
              v56 = *((_QWORD *)a2 - 2);
              v57 = *(_QWORD *)(v9 + 8 * v37);
              if (HIDWORD(v57) >= HIDWORD(v56))
                goto LABEL_39;
              *v38 = v56;
              *((_DWORD *)a2 - 4) = v57;
            }
            else
            {
              *(_DWORD *)(v9 + 8) = v42;
              *((_DWORD *)a2 - 4) = v43;
              v44 = (int *)(v9 + 12);
            }
            v46 = a2 - 12;
            goto LABEL_38;
          }
          if (v40 < HIDWORD(v42))
          {
            *v38 = v42;
            *((_DWORD *)a2 - 4) = v39;
            v45 = v9 + 8 * v37;
            v47 = *(_DWORD *)(v45 + 4);
            v46 = (char *)(v45 + 4);
            *(_DWORD *)v46 = *((_DWORD *)a2 - 3);
            *((_DWORD *)a2 - 3) = v47;
            v48 = *(_QWORD *)(v9 + 8 * v37);
            v49 = *(_QWORD *)(v9 + 8);
            if (HIDWORD(v49) < HIDWORD(v48))
            {
              *(_DWORD *)(v9 + 8) = v48;
              *v38 = v49;
              v44 = (int *)(v9 + 12);
LABEL_38:
              v58 = *v44;
              *v44 = *(_DWORD *)v46;
              *(_DWORD *)v46 = v58;
            }
          }
LABEL_39:
          v59 = v12 + 1;
          v60 = (unint64_t *)(v9 + 8 * (v12 + 1));
          v61 = *v60;
          v62 = *(_DWORD *)(v9 + 20);
          v63 = (uint64_t *)HIDWORD(*v60);
          v64 = *((_QWORD *)a2 - 3);
          if (v62 < v63)
          {
            v65 = *(_DWORD *)(v9 + 16);
            if (v63 >= HIDWORD(v64))
            {
              *(_DWORD *)(v9 + 16) = v61;
              *(_DWORD *)(v9 + 20) = (_DWORD)v63;
              *(_DWORD *)v60 = v65;
              v71 = v9 + 8 * v59;
              *(_DWORD *)(v71 + 4) = v62;
              v66 = (int *)(v71 + 4);
              v72 = *((_QWORD *)a2 - 3);
              v61 = *(_QWORD *)(v9 + 8 * v59);
              v63 = (uint64_t *)HIDWORD(v61);
              if (HIDWORD(v61) >= HIDWORD(v72))
                goto LABEL_49;
              *(_DWORD *)v60 = v72;
              *((_DWORD *)a2 - 6) = v61;
            }
            else
            {
              *(_DWORD *)(v9 + 16) = v64;
              *((_DWORD *)a2 - 6) = v65;
              v66 = (int *)(v9 + 20);
            }
            v68 = a2 - 20;
            goto LABEL_48;
          }
          if (v63 < HIDWORD(v64))
          {
            *(_DWORD *)v60 = v64;
            *((_DWORD *)a2 - 6) = v61;
            v67 = v9 + 8 * v59;
            v69 = *(_DWORD *)(v67 + 4);
            v68 = (char *)(v67 + 4);
            *(_DWORD *)v68 = *((_DWORD *)a2 - 5);
            *((_DWORD *)a2 - 5) = v69;
            v61 = *(_QWORD *)(v9 + 8 * v59);
            v70 = *(_QWORD *)(v9 + 16);
            v63 = (uint64_t *)HIDWORD(v61);
            if (HIDWORD(v70) < HIDWORD(v61))
            {
              *(_DWORD *)(v9 + 16) = v61;
              *(_DWORD *)v60 = v70;
              v66 = (int *)(v9 + 20);
LABEL_48:
              v73 = *v66;
              *v66 = *(_DWORD *)v68;
              *(_DWORD *)v68 = v73;
              v61 = *v60;
              v63 = (uint64_t *)HIDWORD(*v60);
            }
          }
LABEL_49:
          v74 = *v13;
          result = v13[1];
          v75 = *v38;
          v76 = v38[1];
          if (v76 >= result)
          {
            if (v63 <= result)
              goto LABEL_59;
            *v13 = v61;
            v78 = v9 + 8 * v12;
            *(_DWORD *)(v78 + 4) = (_DWORD)v63;
            v79 = (_DWORD *)(v78 + 4);
            *(_DWORD *)v60 = v74;
            *(_DWORD *)(v9 + 8 * v59 + 4) = result;
            v74 = *(_DWORD *)(v9 + 8 * v12);
            if (v76 < v63)
            {
              *v38 = v74;
              *v13 = v75;
              v77 = (_DWORD *)(v9 + 8 * v37 + 4);
LABEL_58:
              *v77 = (_DWORD)v63;
              *v79 = v76;
              v74 = *v13;
              result = *(unsigned int *)(v9 + 8 * v12 + 4);
              goto LABEL_59;
            }
            result = (unint64_t)v63;
          }
          else
          {
            if (v63 > result)
            {
              *v38 = v61;
              *(_DWORD *)v60 = v75;
              v77 = (_DWORD *)(v9 + 8 * v37 + 4);
LABEL_57:
              v79 = (_DWORD *)(v9 + 8 * v59 + 4);
              goto LABEL_58;
            }
            *v38 = v74;
            *v13 = v75;
            v80 = v9 + 8 * v37;
            v81 = v9 + 8 * v12;
            *(_DWORD *)(v81 + 4) = v76;
            v77 = (_DWORD *)(v81 + 4);
            *(_DWORD *)(v80 + 4) = result;
            v74 = *(_DWORD *)(v9 + 8 * v12);
            if (v63 > v76)
            {
              *v13 = v61;
              *(_DWORD *)v60 = v74;
              goto LABEL_57;
            }
            result = v76;
          }
LABEL_59:
          v82 = *(_QWORD *)v9;
          *(_DWORD *)v9 = v74;
          *(_DWORD *)(v9 + 4) = result;
          *(_QWORD *)v13 = v82;
          --a3;
          v53 = *(_QWORD *)v9;
          if ((a4 & 1) == 0)
            goto LABEL_60;
LABEL_34:
          v54 = HIDWORD(v53);
LABEL_61:
          v83 = 0;
          do
          {
            v84 = *(_QWORD *)(v9 + v83 + 8);
            v83 += 8;
          }
          while (v54 < HIDWORD(v84));
          v85 = v9 + v83;
          v86 = a2;
          if (v83 == 8)
          {
            v89 = a2;
            while (v85 < (unint64_t)v89)
            {
              v87 = v89 - 8;
              v90 = *((_DWORD *)v89 - 1);
              v89 -= 8;
              if (v54 < v90)
                goto LABEL_69;
            }
            v87 = v89;
LABEL_82:
            v9 = v85;
            v96 = (char *)(v85 - 8);
            if ((uint64_t *)(v85 - 8) == v7)
              goto LABEL_77;
            goto LABEL_76;
          }
          do
          {
            v87 = v86 - 8;
            v88 = *((_DWORD *)v86 - 1);
            v86 -= 8;
          }
          while (v54 >= v88);
LABEL_69:
          if (v85 >= (unint64_t)v87)
            goto LABEL_82;
          v91 = *(_DWORD *)v87;
          v9 = v85;
          v92 = v87;
          do
          {
            *(_DWORD *)v9 = v91;
            *(_DWORD *)v92 = v84;
            v93 = *(_DWORD *)(v9 + 4);
            *(_DWORD *)(v9 + 4) = *((_DWORD *)v92 + 1);
            *((_DWORD *)v92 + 1) = v93;
            do
            {
              v94 = *(_QWORD *)(v9 + 8);
              v9 += 8;
              LODWORD(v84) = v94;
            }
            while (v54 < HIDWORD(v94));
            do
            {
              v95 = *((_QWORD *)v92 - 1);
              v92 -= 8;
              v91 = v95;
            }
            while (v54 >= HIDWORD(v95));
          }
          while (v9 < (unint64_t)v92);
          v96 = (char *)(v9 - 8);
          if ((uint64_t *)(v9 - 8) == v7)
            goto LABEL_77;
LABEL_76:
          *(_DWORD *)v7 = *(_DWORD *)(v9 - 8);
          *((_DWORD *)v7 + 1) = *(_DWORD *)(v9 - 4);
LABEL_77:
          *(_DWORD *)(v9 - 8) = v53;
          *(_DWORD *)(v9 - 4) = v54;
          if (v85 < (unint64_t)v87)
            goto LABEL_80;
          v97 = sub_239994270((int *)v7, v96);
          result = sub_239994270((int *)v9, a2);
          if (!(_DWORD)result)
          {
            if (v97)
              continue;
LABEL_80:
            result = sub_239993670(v7, v96, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v96;
          if (v97)
            return result;
          goto LABEL_2;
        }
        v130 = (char *)(v9 + 8);
        v132 = (char *)v9 == a2 || v130 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v132)
          {
            v133 = 0;
            v134 = (uint64_t *)v9;
            do
            {
              v137 = *v134;
              v136 = v134[1];
              v134 = (uint64_t *)v130;
              if (HIDWORD(v137) < HIDWORD(v136))
              {
                v138 = v133;
                do
                {
                  v139 = v9 + v138;
                  v140 = *(_DWORD *)(v9 + v138 + 4);
                  *(_DWORD *)(v139 + 8) = v137;
                  *(_DWORD *)(v139 + 12) = v140;
                  if (!v138)
                  {
                    v135 = (_QWORD *)v9;
                    goto LABEL_129;
                  }
                  v137 = *(_QWORD *)(v139 - 8);
                  v138 -= 8;
                }
                while (HIDWORD(v137) < HIDWORD(v136));
                v135 = (_QWORD *)(v9 + v138 + 8);
LABEL_129:
                *v135 = v136;
              }
              v130 += 8;
              v133 += 8;
            }
            while (v134 + 1 != (uint64_t *)a2);
          }
        }
        else if (!v132)
        {
          v170 = (_DWORD *)(v9 + 12);
          do
          {
            v172 = *v7;
            v171 = v7[1];
            v7 = (uint64_t *)v130;
            if (HIDWORD(v172) < HIDWORD(v171))
            {
              v173 = v170;
              do
              {
                v174 = v173;
                *(v173 - 1) = v172;
                v175 = *(v173 - 2);
                v173 -= 2;
                *v174 = v175;
                v172 = *(_QWORD *)(v174 - 5);
              }
              while (HIDWORD(v172) < HIDWORD(v171));
              *(_QWORD *)(v173 - 1) = v171;
            }
            v130 += 8;
            v170 += 2;
          }
          while (v7 + 1 != (uint64_t *)a2);
        }
        return result;
    }
  }
}

BOOL sub_239994270(int *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;

  v4 = (a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 1);
      v7 = *(_QWORD *)a1;
      if (HIDWORD(*(_QWORD *)a1) < HIDWORD(v6))
      {
        *a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      v9 = a1[2];
      v10 = a1[3];
      v11 = a1[1];
      v12 = *((_QWORD *)a2 - 1);
      if (v11 < v10)
      {
        v13 = *a1;
        if (v10 >= HIDWORD(v12))
        {
          a1[1] = v10;
          a1[2] = v13;
          a1[3] = v11;
          *a1 = v9;
          v40 = *((_QWORD *)a2 - 1);
          v41 = *((_QWORD *)a1 + 1);
          if (HIDWORD(v41) >= HIDWORD(v40))
            return result;
          a1[2] = v40;
          *((_DWORD *)a2 - 2) = v41;
          v15 = (int *)(a2 - 4);
          v14 = a1 + 3;
        }
        else
        {
          *a1 = v12;
          v14 = a1 + 1;
          *((_DWORD *)a2 - 2) = v13;
          v15 = (int *)(a2 - 4);
        }
        goto LABEL_25;
      }
      if (v10 < HIDWORD(v12))
      {
        a1[2] = v12;
        *((_DWORD *)a2 - 2) = v9;
        v15 = a1 + 3;
        v35 = a1[3];
        a1[3] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v35;
        v36 = *(_QWORD *)a1;
        v37 = *((_QWORD *)a1 + 1);
        if (HIDWORD(*(_QWORD *)a1) < HIDWORD(v37))
        {
          *a1 = v37;
          a1[2] = v36;
          v14 = a1 + 1;
LABEL_25:
          v42 = *v14;
          *v14 = *v15;
          *v15 = v42;
          return result;
        }
      }
      return result;
    case 4:
      sub_2399945FC((uint64_t *)a1, a1 + 2, (uint64_t *)a1 + 2, (uint64_t)(a2 - 8));
      return 1;
    case 5:
      sub_2399945FC((uint64_t *)a1, a1 + 2, (uint64_t *)a1 + 2, (uint64_t)(a1 + 6));
      v24 = *((_QWORD *)a2 - 1);
      v25 = *((_QWORD *)a1 + 3);
      if (HIDWORD(v25) >= HIDWORD(v24))
        return 1;
      a1[6] = v24;
      *((_DWORD *)a2 - 2) = v25;
      v26 = a1[7];
      a1[7] = *((_DWORD *)a2 - 1);
      *((_DWORD *)a2 - 1) = v26;
      v27 = *((_QWORD *)a1 + 2);
      v28 = *((_QWORD *)a1 + 3);
      v29 = HIDWORD(v28);
      if (HIDWORD(v27) >= HIDWORD(v28))
        return 1;
      *((_QWORD *)a1 + 2) = v28;
      *((_QWORD *)a1 + 3) = v27;
      v30 = *((_QWORD *)a1 + 1);
      v31 = *((_QWORD *)a1 + 2);
      if (HIDWORD(v30) >= HIDWORD(v31))
        return 1;
      a1[2] = v31;
      a1[3] = v29;
      *((_QWORD *)a1 + 2) = v30;
      v32 = *(_QWORD *)a1;
      v33 = *((_QWORD *)a1 + 1);
      v34 = HIDWORD(*(_QWORD *)a1);
      if (v34 >= HIDWORD(v33))
        return 1;
      *a1 = v33;
      a1[1] = v29;
      result = 1;
      a1[2] = v32;
      a1[3] = v34;
      return result;
    default:
      v16 = (uint64_t *)(a1 + 4);
      v17 = *((_QWORD *)a1 + 2);
      v19 = a1[2];
      v18 = a1[3];
      v21 = *a1;
      LODWORD(v20) = a1[1];
      v22 = HIDWORD(v17);
      if (v20 < v18)
      {
        if (v18 >= HIDWORD(v17))
        {
          a1[3] = v20;
          v23 = a1 + 3;
          a1[1] = v18;
          a1[2] = v21;
          *a1 = v19;
          v43 = *((_QWORD *)a1 + 1);
          v20 = HIDWORD(v43);
          if (HIDWORD(v43) >= HIDWORD(v17))
            goto LABEL_30;
          a1[2] = v17;
          a1[4] = v43;
        }
        else
        {
          *a1 = v17;
          a1[4] = v21;
          v23 = a1 + 1;
        }
        v38 = a1 + 5;
        goto LABEL_29;
      }
      if (v18 < HIDWORD(v17))
      {
        *((_QWORD *)a1 + 1) = v17;
        v38 = a1 + 3;
        a1[4] = v19;
        a1[5] = v18;
        v39 = *((_QWORD *)a1 + 1);
        v22 = HIDWORD(v39);
        if (v20 < HIDWORD(v39))
        {
          *a1 = v39;
          a1[2] = v21;
          v23 = a1 + 1;
LABEL_29:
          *v23 = v22;
          *v38 = v20;
        }
      }
LABEL_30:
      v44 = (uint64_t *)(a1 + 6);
      if (a1 + 6 == (int *)a2)
        return 1;
      v45 = 0;
      v46 = 0;
      while (1)
      {
        v47 = *v44;
        v48 = *v16;
        v49 = HIDWORD(*v44);
        if (HIDWORD(v48) < v49)
          break;
LABEL_39:
        v16 = v44;
        v45 += 8;
        if (++v44 == (uint64_t *)a2)
          return 1;
      }
      v50 = v45;
      do
      {
        v51 = (uint64_t)a1 + v50;
        v52 = *(int *)((char *)a1 + v50 + 20);
        *(_DWORD *)(v51 + 24) = v48;
        *(_DWORD *)(v51 + 28) = v52;
        if (v50 == -16)
        {
          *a1 = v47;
          a1[1] = v49;
          if (++v46 != 8)
            goto LABEL_39;
          return v44 + 1 == (uint64_t *)a2;
        }
        v48 = *(_QWORD *)(v51 + 8);
        v50 -= 8;
      }
      while (HIDWORD(v48) < v49);
      v53 = (uint64_t)a1 + v50;
      *(_DWORD *)(v53 + 24) = v47;
      *(_DWORD *)(v53 + 28) = v49;
      if (++v46 != 8)
        goto LABEL_39;
      return v44 + 1 == (uint64_t *)a2;
  }
}

uint64_t *sub_2399945FC(uint64_t *result, int *a2, uint64_t *a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int *v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  int v21;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a3;
  v7 = HIDWORD(*a3);
  if (*((_DWORD *)result + 1) >= v5)
  {
    if (v5 < v7)
    {
      *a2 = v6;
      *(_DWORD *)a3 = v4;
      v10 = a2 + 1;
      v11 = a2[1];
      a2[1] = *((_DWORD *)a3 + 1);
      *((_DWORD *)a3 + 1) = v11;
      v12 = *result;
      if (HIDWORD(*result) < HIDWORD(*(_QWORD *)a2))
      {
        *(_DWORD *)result = *(_QWORD *)a2;
        v9 = (int *)result + 1;
        *a2 = v12;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v8 = *(_DWORD *)result;
    if (v5 < v7)
    {
      *(_DWORD *)result = v6;
      v9 = (int *)result + 1;
      *(_DWORD *)a3 = v8;
      v10 = (int *)a3 + 1;
LABEL_9:
      v15 = *v9;
      *v9 = *v10;
      *v10 = v15;
      goto LABEL_10;
    }
    *(_DWORD *)result = v4;
    *a2 = v8;
    v9 = a2 + 1;
    v13 = *((_DWORD *)result + 1);
    *((_DWORD *)result + 1) = a2[1];
    a2[1] = v13;
    v14 = *(_QWORD *)a2;
    if (HIDWORD(*(_QWORD *)a2) < HIDWORD(*a3))
    {
      *a2 = *a3;
      *(_DWORD *)a3 = v14;
      v10 = (int *)a3 + 1;
      goto LABEL_9;
    }
  }
LABEL_10:
  v16 = *a3;
  if (HIDWORD(*a3) < HIDWORD(*(_QWORD *)a4))
  {
    *(_DWORD *)a3 = *(_QWORD *)a4;
    *(_DWORD *)a4 = v16;
    v17 = *((_DWORD *)a3 + 1);
    *((_DWORD *)a3 + 1) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v17;
    v18 = *(_QWORD *)a2;
    if (HIDWORD(*(_QWORD *)a2) < HIDWORD(*a3))
    {
      *a2 = *a3;
      *(_DWORD *)a3 = v18;
      v19 = a2[1];
      a2[1] = *((_DWORD *)a3 + 1);
      *((_DWORD *)a3 + 1) = v19;
      v20 = *result;
      if (HIDWORD(*result) < HIDWORD(*(_QWORD *)a2))
      {
        *(_DWORD *)result = *(_QWORD *)a2;
        *a2 = v20;
        v21 = *((_DWORD *)result + 1);
        *((_DWORD *)result + 1) = a2[1];
        a2[1] = v21;
      }
    }
  }
  return result;
}

uint64_t sub_239994764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  void *v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  void *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  void *__dst[2];
  unint64_t v45;
  _QWORD v46[2];

  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  *(_BYTE *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 68) = -1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 112) = 0;
  sub_2399A4058((_OWORD *)(a1 + 120));
  *(_QWORD *)(a1 + 192) = -1;
  v6 = (_DWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = -1;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = off_256934438[0];
  v9 = strlen(off_256934438[0]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = (void **)operator new(v12 + 1);
    __dst[1] = v10;
    v45 = v13 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_8;
  }
  HIBYTE(v45) = v9;
  v11 = __dst;
  if (v9)
LABEL_8:
    memmove(v11, v8, (size_t)v10);
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  v46[0] = 0;
  v14 = sub_2394E5C88((uint64_t **)(v7 + 80), (uint64_t)v46, (unsigned __int8 *)__dst);
  v15 = v14;
  *v6 = v14;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(__dst[0]);
    if (v15 != -1)
      goto LABEL_23;
  }
  else if (v14 != -1)
  {
    goto LABEL_23;
  }
  v16 = *(_QWORD *)(a1 + 40);
  v17 = off_256934438[0];
  v18 = strlen(off_256934438[0]);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = (void **)operator new(v21 + 1);
    __dst[1] = v19;
    v45 = v22 | 0x8000000000000000;
    __dst[0] = v20;
    goto LABEL_20;
  }
  HIBYTE(v45) = v18;
  v20 = __dst;
  if (v18)
LABEL_20:
    memmove(v20, v17, (size_t)v19);
  *((_BYTE *)v19 + (_QWORD)v20) = 0;
  v46[0] = 0;
  *v6 = sub_2394E4504(v16 + 80, (uint64_t)v46, (uint64_t)__dst);
  if (SHIBYTE(v45) < 0)
    operator delete(__dst[0]);
LABEL_23:
  v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
  v24 = *v23;
  v25 = (std::__shared_weak_count *)v23[1];
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2);
  v29 = *(_QWORD *)(a1 + 40);
  HIBYTE(v45) = 6;
  strcpy((char *)__dst, "f:area");
  LODWORD(v46[0]) = 0;
  v30 = sub_23998EE84((uint64_t **)(v29 + 56), (uint64_t)v46, (unsigned __int8 *)__dst);
  v31 = v30;
  *(_DWORD *)(a1 + 196) = v30;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(__dst[0]);
    if (v31 != -1)
      goto LABEL_35;
  }
  else if (v30 != -1)
  {
    goto LABEL_35;
  }
  v32 = *(_QWORD **)(a1 + 40);
  HIBYTE(v45) = 6;
  strcpy((char *)__dst, "f:area");
  sub_239994DD0(v32, (_DWORD *)(a1 + 196), (uint64_t)__dst);
  if (SHIBYTE(v45) < 0)
    operator delete(__dst[0]);
LABEL_35:
  v33 = *(_QWORD *)(a1 + 40);
  HIBYTE(v45) = 8;
  strcpy((char *)__dst, "h:length");
  LODWORD(v46[0]) = 0;
  v34 = sub_23998EE84((uint64_t **)(v33 + 32), (uint64_t)v46, (unsigned __int8 *)__dst);
  v35 = v34;
  *(_DWORD *)(a1 + 200) = v34;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(__dst[0]);
    if (v35 != -1)
      goto LABEL_41;
  }
  else if (v34 != -1)
  {
    goto LABEL_41;
  }
  v36 = *(_QWORD **)(a1 + 40);
  HIBYTE(v45) = 8;
  strcpy((char *)__dst, "h:length");
  sub_239994EC4(v36, (_DWORD *)(a1 + 200), (uint64_t)__dst);
  if (SHIBYTE(v45) < 0)
    operator delete(__dst[0]);
LABEL_41:
  v37 = *(_QWORD *)(a1 + 40);
  HIBYTE(v45) = 15;
  strcpy((char *)__dst, "h:signal_length");
  LODWORD(v46[0]) = 0;
  v38 = sub_23998EE84((uint64_t **)(v37 + 32), (uint64_t)v46, (unsigned __int8 *)__dst);
  v39 = v38;
  *(_DWORD *)(a1 + 204) = v38;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(__dst[0]);
    if (v39 != -1)
      goto LABEL_46;
  }
  else if (v38 != -1)
  {
    goto LABEL_46;
  }
  v40 = *(_QWORD **)(a1 + 40);
  HIBYTE(v45) = 15;
  strcpy((char *)__dst, "h:signal_length");
  sub_239994EC4(v40, (_DWORD *)(a1 + 204), (uint64_t)__dst);
  if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
LABEL_46:
    if (!*(_BYTE *)(a1 + 64))
      return a1;
    goto LABEL_47;
  }
  operator delete(__dst[0]);
  if (!*(_BYTE *)(a1 + 64))
    return a1;
LABEL_47:
  v41 = *(_QWORD *)(a1 + 40);
  HIBYTE(v45) = 5;
  strcpy((char *)__dst, "f:imt");
  v46[0] = 0;
  v46[1] = 0;
  v42 = sub_2394E5F40((uint64_t **)(v41 + 56), (uint64_t)v46, (unsigned __int8 *)__dst);
  *(_DWORD *)(a1 + 68) = v42;
  if (SHIBYTE(v45) < 0)
  {
    operator delete(__dst[0]);
    if (*(_DWORD *)(a1 + 68) == -1)
LABEL_51:
      *(_BYTE *)(a1 + 64) = 0;
  }
  else if (v42 == -1)
  {
    goto LABEL_51;
  }
  return a1;
}

void sub_239994C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, uint64_t a12, uint64_t a13, _QWORD **a14, void **a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _QWORD *v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  uint64_t v30;

  if (a21 < 0)
  {
    operator delete(__p);
    v23 = (void *)v21[42];
    if (!v23)
    {
LABEL_3:
      v24 = (void *)v21[39];
      if (!v24)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else
  {
    v23 = (void *)v21[42];
    if (!v23)
      goto LABEL_3;
  }
  v21[43] = v23;
  operator delete(v23);
  v24 = (void *)v21[39];
  if (!v24)
  {
LABEL_4:
    v25 = (void *)v21[36];
    if (!v25)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  v21[40] = v24;
  operator delete(v24);
  v25 = (void *)v21[36];
  if (!v25)
  {
LABEL_5:
    sub_2394631DC(a10);
    v26 = (void *)v21[29];
    if (!v26)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  v21[37] = v25;
  operator delete(v25);
  sub_2394631DC(a10);
  v26 = (void *)v21[29];
  if (!v26)
  {
LABEL_6:
    v27 = *a11;
    if (!*a11)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_20:
  v21[30] = v26;
  operator delete(v26);
  v27 = *a11;
  if (!*a11)
  {
LABEL_8:
    sub_2399A406C(a12);
    sub_239421038(a13, *a14);
    v28 = *a15;
    if (*a15)
    {
      v21[10] = v28;
      operator delete(v28);
    }
    v29 = (_QWORD *)v21[4];
    if (v29 == v21 + 1)
    {
      v30 = 4;
      v29 = v21 + 1;
    }
    else
    {
      if (!v29)
        goto LABEL_15;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_15:
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v27);
  goto LABEL_8;
}

void sub_239994DD0(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;

  v14 = 0;
  *a2 = sub_23999BB88((uint64_t)(a1 + 7), (uint64_t)&v14, a3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v5 = (uint64_t *)a1[7];
  v6 = (uint64_t *)a1[8];
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      v8 = *v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v7);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_239994EAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_239EBEB78();
  _Unwind_Resume(exception_object);
}

void sub_239994EC4(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;

  v14 = 0;
  *a2 = sub_23999BB88((uint64_t)(a1 + 4), (uint64_t)&v14, a3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v5 = (uint64_t *)a1[4];
  v6 = (uint64_t *)a1[5];
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      v8 = *v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v7);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_239994FA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_239EBEB78();
  _Unwind_Resume(exception_object);
}

uint64_t sub_239994FBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float32x2_t **v9;
  float32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  float32x2_t *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int *v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  double v32;
  double v33;
  int32x2_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD v41[4];

  sub_239992C60(*(_QWORD *)(a1 + 40), word_239F03760, (_QWORD *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  if ((unint64_t)v2 < 8)
    return 0;
  v3 = v2 >> 2;
  v4 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2;
  *(_QWORD *)(a1 + 216) = 0;
  sub_23941C5D8(a1 + 208, v4, 0);
  v5 = *(unsigned int **)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 208);
  if (v3 <= 1)
    v7 = 1;
  else
    v7 = v3;
  do
  {
    v8 = *v5++;
    *(_QWORD *)(v6 + (((unint64_t)v8 >> 3) & 0x1FFFFFF8)) |= 1 << v8;
    --v7;
  }
  while (v7);
  v9 = (float32x2_t **)(a1 + 312);
  v10 = *(float32x2_t **)(a1 + 312);
  *(_QWORD *)(a1 + 320) = v10;
  if (v4 * v3)
  {
    sub_2394807B4(a1 + 312, v4 * v3);
    v10 = *v9;
  }
  sub_2399952B0(a1, (unsigned int **)(a1 + 72), v10);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) & 1) != 0)
      return 0;
  }
  v13 = v3 * v3;
  memset(&v41[1], 0, 24);
  if (!(v3 * v3))
  {
    v15 = 0;
    v16 = *(char **)(a1 + 72);
    v19 = *(char **)(a1 + 80);
    v18 = v19 - v16;
    if (v19 == v16)
      goto LABEL_23;
    goto LABEL_16;
  }
  if (v13 >> 62)
    sub_2394189F8();
  v14 = 4 * v13;
  v15 = operator new(4 * v13);
  bzero(v15, v14);
  v16 = *(char **)(a1 + 72);
  v17 = *(char **)(a1 + 80);
  v18 = v17 - v16;
  if (v17 != v16)
  {
LABEL_16:
    v20 = 0;
    v21 = v18 >> 2;
    v22 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2;
    v23 = *v9;
    if (v21 <= 1)
      v24 = 1;
    else
      v24 = v21;
    v25 = 4 * v21;
    v26 = v15;
    do
    {
      v27 = (unsigned int *)v16;
      v28 = v26;
      v29 = v24;
      do
      {
        v30 = *v27++;
        *v28++ = v23->i32[v20 * v22 + v30];
        --v29;
      }
      while (v29);
      ++v20;
      v26 = (_DWORD *)((char *)v26 + v25);
    }
    while (v20 != v24);
  }
LABEL_23:
  v41[0] = 0;
  sub_2399A40F8(a1 + 120, v3, (float *)v15);
  if (v3 >= 0x19)
    v31 = 25;
  else
    v31 = v3;
  sub_2399A4D1C(a1 + 120, v31, v41);
  v35 = *(_QWORD *)(a1 + 32);
  if (v35 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35) & 1) != 0
    || (v36 = (unint64_t *)(a1 + 184),
        sub_2399A6078((char *)(a1 + 120), (unint64_t *)(a1 + 184), 0.9, v32, v33, v34),
        (v37 = *(_QWORD *)(a1 + 32)) != 0)
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37) & 1) != 0
    || (v38 = *v36) == 0)
  {
    v12 = 0;
    if (!v15)
      return v12;
LABEL_41:
    operator delete(v15);
    return v12;
  }
  if (v38 <= 2 && v41[0] >= 3uLL)
  {
    v38 = 3;
    *v36 = 3;
  }
  v39 = *(_QWORD *)(a1 + 336);
  if (v39 != *(_QWORD *)(a1 + 344))
    *(_QWORD *)(a1 + 344) = v39;
  if (v38 * v4)
    sub_2394807B4(a1 + 336, v38 * v4);
  sub_23999583C(a1);
  v12 = 1;
  if (v15)
    goto LABEL_41;
  return v12;
}

void sub_23999526C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_239995298(uint64_t a1)
{
  sub_239992C60(*(_QWORD *)(a1 + 40), word_239F03760, (_QWORD *)(a1 + 72));
}

void sub_2399952B0(uint64_t a1, unsigned int **a2, float32x2_t *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  float32x2_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  float32x2_t *v31;
  __int128 *v32;
  __int128 v33;
  unint64_t v34;
  _DWORD *v35;
  char *v36;
  int v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  __int128 *v45;
  _OWORD *v46;
  unint64_t v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  float v52;
  float v53;
  float *v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  float *v59;
  float *v60;
  float v61;
  float v62;
  float v63;
  float v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  float *v68;
  float *v69;
  float v70;
  float v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  float *v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int v78;
  unint64_t v79;
  float v80;
  float32x4_t v81;
  float64x2_t v82;
  unint64_t v83;
  float32x4_t *v84;
  float32x2_t *v85;
  float32x4_t v86;
  float32x4_t v87;
  unsigned int *v88;
  unsigned int *v89;
  unint64_t v90;
  unint64_t v91;
  __int128 *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *__p;
  char *v99;
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;

  v6 = *a2;
  v5 = a2[1];
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v96 = v8;
  v95 = v7;
  v9 = v8 - v7;
  v10 = (v8 - v7) >> 2;
  if (v8 == v7)
  {
    v11 = 0;
  }
  else
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v11 = (char *)operator new(v8 - v7);
    v104 = v11;
    v106 = &v11[4 * v10];
    bzero(v11, v9);
    v105 = &v11[v9];
  }
  v12 = v5 - v6;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  __p = 0;
  v99 = 0;
  v100 = 0;
  v93 = v11;
  if (*(_BYTE *)(a1 + 64))
  {
    if (v9 >= 4)
    {
      sub_2394807B4((uint64_t)&v101, v10);
      v13 = (char *)__p;
      v14 = v10 * v12;
      v17 = (v99 - (_BYTE *)__p) >> 2;
      v15 = v10 * v12 >= v17;
      v16 = v10 * v12 - v17;
      if (v10 * v12 > v17)
        goto LABEL_8;
    }
    else
    {
      v13 = 0;
      v14 = v10 * v12;
      v15 = 1;
      v16 = v10 * v12;
      if (v10 * v12)
      {
LABEL_8:
        sub_2394807B4((uint64_t)&__p, v16);
        goto LABEL_12;
      }
    }
    if (!v15)
      v99 = &v13[4 * v14];
  }
LABEL_12:
  v18 = 4 * v10;
  v88 = v6;
  v89 = v5;
  v90 = v5 - v6;
  if (v5 != v6)
  {
    v19 = 0;
    v20 = 0;
    if (v10 <= 1)
      v21 = 1;
    else
      v21 = v10;
    if (v12 <= 1)
      v22 = 1;
    else
      v22 = v12;
    v94 = v22;
    v23 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    v24 = v21 & 0xFFFFFFFFFFFFFFF8;
    v91 = v23;
    v92 = (__int128 *)(v11 + 16);
    v25 = a3 + 2;
    v26 = 16;
    while (1)
    {
      v28 = *(_QWORD *)(a1 + 32);
      if (v28 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 48))(v28) & 1) != 0)
        goto LABEL_68;
      sub_2399960EC(a1, &(*a2)[v20], (uint64_t)&v104, (uint64_t)&v101);
      if (v96 == v95)
      {
        v27 = *(unsigned __int8 *)(a1 + 64);
        goto LABEL_21;
      }
      if (v21 < 8)
        break;
      v30 = v21 & 0xFFFFFFFFFFFFFFF8;
      v31 = v25;
      v32 = v92;
      do
      {
        v33 = *v32;
        *(_OWORD *)v31[-2].f32 = *(v32 - 1);
        *(_OWORD *)v31->f32 = v33;
        v32 += 2;
        v31 += 4;
        v30 -= 8;
      }
      while (v30);
      v29 = v21 & 0xFFFFFFFFFFFFFFF8;
      if (v21 != v24)
        goto LABEL_30;
LABEL_32:
      v27 = *(unsigned __int8 *)(a1 + 64);
      if (*(_BYTE *)(a1 + 64))
      {
        v38 = (char *)v101;
        v39 = (char *)__p;
        if (v21 >= 8 && (unint64_t)((_BYTE *)__p + v91 * v20 - (_BYTE *)v101) >= 0x20)
        {
          v45 = (__int128 *)((char *)v101 + 16);
          v46 = (char *)__p + v26;
          v47 = v21 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v48 = *v45;
            *(v46 - 1) = *(v45 - 1);
            *v46 = v48;
            v45 += 2;
            v46 += 2;
            v47 -= 8;
          }
          while (v47);
          v40 = v21 & 0xFFFFFFFFFFFFFFF8;
          if (v21 == v24)
            goto LABEL_21;
        }
        else
        {
          v40 = 0;
        }
        v41 = v21 - v40;
        v42 = &v39[4 * v40 + 4 * v19];
        v43 = &v38[4 * v40];
        do
        {
          v44 = *(_DWORD *)v43;
          v43 += 4;
          *(_DWORD *)v42 = v44;
          v42 += 4;
          --v41;
        }
        while (v41);
      }
LABEL_21:
      ++v20;
      v25 = (float32x2_t *)((char *)v25 + v18);
      v19 += v10;
      v26 += v18;
      if (v20 == v94)
        goto LABEL_44;
    }
    v29 = 0;
LABEL_30:
    v34 = v21 - v29;
    v35 = (_DWORD *)a3 + v29 + v19;
    v36 = &v93[4 * v29];
    do
    {
      v37 = *(_DWORD *)v36;
      v36 += 4;
      *v35++ = v37;
      --v34;
    }
    while (v34);
    goto LABEL_32;
  }
  v27 = *(unsigned __int8 *)(a1 + 64);
LABEL_44:
  if (!v27)
    goto LABEL_60;
  v49 = v10 * v90;
  if (!(v10 * v90))
    goto LABEL_60;
  v50 = (char *)__p;
  if (v49 == 1)
  {
    v51 = 0;
    v52 = 0.0;
    v53 = 0.0;
  }
  else
  {
    v51 = v49 & 0xFFFFFFFFFFFFFFFELL;
    v54 = (float *)((char *)__p + 4);
    v55 = (float *)a3 + 1;
    v52 = 0.0;
    v56 = v49 & 0xFFFFFFFFFFFFFFFELL;
    v53 = 0.0;
    do
    {
      v52 = (float)(v52 + *(v55 - 1)) + *v55;
      v53 = (float)(v53 + *(v54 - 1)) + *v54;
      v54 += 2;
      v55 += 2;
      v56 -= 2;
    }
    while (v56);
    if (v49 == v51)
      goto LABEL_53;
  }
  v57 = v49 - v51;
  v58 = 4 * v51;
  v59 = (float *)a3 + v51;
  v60 = (float *)((char *)__p + v58);
  do
  {
    v61 = *v60++;
    v53 = v53 + v61;
    v62 = *v59++;
    v52 = v52 + v62;
    --v57;
  }
  while (v57);
LABEL_53:
  v63 = v53 / (float)v49;
  if (v63 <= 0.00000001)
    goto LABEL_60;
  v64 = (float)(v52 / (float)v49) / v63;
  if (v49 < 4 || (char *)__p + 4 * v49 > (char *)a3 && __p < &a3->f32[v49])
  {
    v65 = 0;
LABEL_58:
    v66 = v49 - v65;
    v67 = 4 * v65;
    v68 = (float *)&v50[v67];
    v69 = (float *)((char *)a3 + v67);
    do
    {
      v70 = *v68++;
      v71 = (float)((float)(v64 * v70) * 0.3) + *v69 * 0.699999988;
      *v69++ = v71;
      --v66;
    }
    while (v66);
    goto LABEL_60;
  }
  v65 = v49 & 0xFFFFFFFFFFFFFFFCLL;
  v81 = (float32x4_t)vdupq_n_s32(0x3E99999Au);
  v82 = (float64x2_t)vdupq_n_s64(0x3FE6666660000000uLL);
  v83 = v49 & 0xFFFFFFFFFFFFFFFCLL;
  v84 = (float32x4_t *)__p;
  v85 = a3;
  do
  {
    v86 = *v84++;
    v87 = vmulq_f32(vmulq_n_f32(v86, v64), v81);
    *(float32x4_t *)v85->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(*(float32x2_t *)v87.f32), v82, vcvtq_f64_f32(*v85))), vmlaq_f64(vcvt_hight_f64_f32(v87), v82, vcvt_hight_f64_f32(*(float32x4_t *)v85->f32)));
    v85 += 2;
    v83 -= 4;
  }
  while (v83);
  if (v49 != v65)
    goto LABEL_58;
LABEL_60:
  if (v89 != v88)
  {
    v72 = 0;
    v73 = *a2;
    v74 = v90;
    if (v90 <= 1)
      v74 = 1;
    do
    {
      v75 = (float *)a3 + v73[v72];
      v76 = v73;
      v77 = v74;
      do
      {
        v78 = *v76++;
        v79 = v72 * v10 + v78;
        v80 = *v75;
        if (*v75 >= a3->f32[v79])
          v80 = a3->f32[v79];
        *v75 = v80;
        a3->f32[v79] = v80;
        v75 = (float *)((char *)v75 + v18);
        --v77;
      }
      while (v77);
      ++v72;
    }
    while (v72 != v74);
  }
LABEL_68:
  if (__p)
  {
    v99 = (char *)__p;
    operator delete(__p);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v93)
    operator delete(v93);
}

void sub_2399957D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  if (__p)
  {
    operator delete(__p);
    v25 = a22;
    if (!a22)
    {
LABEL_3:
      if (!a14)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      *(_QWORD *)(v23 - 104) = a14;
      operator delete(a14);
      goto LABEL_8;
    }
  }
  else
  {
    v25 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v25);
  if (!a14)
    goto LABEL_8;
  goto LABEL_7;
}

float *sub_23999583C(uint64_t a1)
{
  _QWORD *v2;
  size_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  float *result;
  float *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  unint64_t v31;
  unsigned int v32;
  __int128 v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float *v42;
  float *v43;
  float *v44;
  uint64_t v45;
  float v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  float *v52;
  float *v53;
  float v54;
  float *v55;
  float *v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  BOOL v65;
  unint64_t v66;
  int8x16_t *v67;
  float32x4_t *v68;
  unint64_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  uint64_t v76;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  float *v85;
  float *v86;
  float v87;
  float v88;
  float v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  __n128 v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  float *v106;
  uint64_t v107;
  uint64_t v108;
  float32x2_t v109;
  int32x4_t v110;
  int8x16_t v111;
  float32x4_t v112;
  uint64_t v113;
  unint64_t v114;
  BOOL v115;
  unint64_t v116;
  unint64_t v117;
  float *v118;
  float *v119;
  unint64_t v120;
  float v121;
  float *v122;
  int8x16_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float *v127;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  void *__p;
  void *v132;
  char *v133;
  void *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;

  v2 = *(_QWORD **)(a1 + 40);
  v125 = v2[13];
  v126 = v2[14];
  v128 = *(_QWORD *)(a1 + 72);
  v129 = *(_QWORD *)(a1 + 80);
  v3 = v129 - v128;
  v4 = (v129 - v128) >> 2;
  v5 = (uint64_t *)(v2[10] + 16 * *(unsigned int *)(a1 + 192));
  v6 = *v5;
  v7 = (std::__shared_weak_count *)v5[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, (v126 - v125) >> 2);
  v11 = *(_QWORD *)(a1 + 184);
  if ((v11 * v4) >> 62)
    v12 = -1;
  else
    v12 = 4 * v11 * v4;
  result = (float *)operator new[](v12, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    v14 = result;
    v124 = (v126 - v125) >> 2;
    v122 = result;
    sub_2399A6368((unint64_t *)(a1 + 120), v11, result);
    v15 = *(_QWORD *)(a1 + 184);
    v138 = 0;
    v139 = 0;
    v137 = 0;
    if (v15)
    {
      if (v15 >> 62)
        sub_2394189F8();
      v137 = (char *)operator new(4 * v15);
      v139 = &v137[4 * v15];
      bzero(v137, 4 * v15);
      v138 = v139;
    }
    if (v129 == v128)
    {
      v127 = *(float **)(a1 + 168);
      v134 = 0;
      v135 = 0;
      v136 = 0;
      if (v126 == v125)
        goto LABEL_86;
      goto LABEL_41;
    }
    v16 = 0;
    if (v4 <= 1)
      v17 = 1;
    else
      v17 = (v129 - v128) >> 2;
    while (1)
    {
      v18 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v16);
      if (v15)
        break;
LABEL_23:
      v23 = *(_QWORD *)v14;
      v24 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
      v26 = *v24;
      v25 = (std::__shared_weak_count *)v24[1];
      if (v25)
      {
        v27 = (unint64_t *)&v25->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
        do
          v29 = __ldaxr(v27);
        while (__stlxr(v29 - 1, v27));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      *(_QWORD *)(*(_QWORD *)(v26 + 40) + 8 * v18) = v23;
      v15 = *(_QWORD *)(a1 + 184);
      v14 += v15;
      if (++v16 == v17)
      {
        v127 = *(float **)(a1 + 168);
        v134 = 0;
        v135 = 0;
        v136 = 0;
        if ((v3 & 0x8000000000000000) != 0)
          sub_2394189F8();
        v134 = operator new(v3);
        v136 = (char *)v134 + 4 * v4;
        bzero(v134, v3);
        v135 = (char *)v134 + v3;
        if (v126 == v125)
        {
LABEL_86:
          v90 = *(_QWORD **)(a1 + 40);
          v92 = v90[19];
          v91 = v90[20];
          v93 = operator new(0xCuLL);
          v95 = v91 - v92;
          v132 = v93 + 3;
          v133 = (char *)(v93 + 3);
          *(_QWORD *)v93 = -1;
          v93[2] = -1;
          __p = v93;
          v96 = (uint64_t *)(v90[10] + 16 * *(unsigned int *)(a1 + 192));
          v97 = *v96;
          v98 = (std::__shared_weak_count *)v96[1];
          if (!v98)
            goto LABEL_91;
          v99 = (unint64_t *)&v98->__shared_owners_;
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
          do
            v101 = __ldaxr(v99);
          while (__stlxr(v101 - 1, v99));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
            v102 = v95 >> 2;
            if (v91 != v92)
              goto LABEL_92;
          }
          else
          {
LABEL_91:
            v102 = v95 >> 2;
            if (v91 != v92)
            {
LABEL_92:
              v103 = 0;
              v104 = 0;
              if (v102 <= 1)
                v105 = 1;
              else
                v105 = v102;
              v106 = v122;
              do
              {
                v107 = *(_QWORD *)(a1 + 40);
                v130 = v103;
                sub_23996362C(v107, &v130, (uint64_t)&__p);
                v108 = *(_QWORD *)(v97 + 40);
                v109 = *(float32x2_t *)(v108 + 8 * *(unsigned int *)__p);
                *(float32x2_t *)v110.i8 = vsub_f32(*(float32x2_t *)(v108 + 8 * *((unsigned int *)__p + 1)), v109);
                *(float32x2_t *)v111.i8 = vsub_f32(*(float32x2_t *)(v108 + 8 * *((unsigned int *)__p + 2)), v109);
                v112 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(v111, v111, 4uLL), (int32x4_t)v111);
                v94 = (__n128)vzip2q_s32(vzip1q_s32((int32x4_t)v111, (int32x4_t)vextq_s8(v111, v111, 0xCuLL)), (int32x4_t)v111);
                v94.n128_f32[0] = COERCE_FLOAT(vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v110, (int32x4_t)vextq_s8(*(int8x16_t *)&v110, *(int8x16_t *)&v110, 0xCuLL)), v110), v112), *(float32x4_t *)&v94, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v110, *(int8x16_t *)&v110, 4uLL), v110)).i32[2]);
                if (v94.n128_f32[0] >= 0.0)
                  ++v104;
                ++v103;
              }
              while (v105 != v103);
              if (v104 >= v102 - v104)
              {
LABEL_115:
                if (__p)
                {
                  v132 = __p;
                  operator delete(__p);
                }
                if (v134)
                {
                  v135 = (char *)v134;
                  operator delete(v134);
                }
                if (v137)
                  operator delete(v137);
                return (float *)MEMORY[0x23B83E2F8](v106, 0x1000C8052888210, v94);
              }
LABEL_103:
              if (v126 == v125)
                goto LABEL_115;
              v113 = *(_QWORD *)(v97 + 40);
              if (v124 <= 1)
                v114 = 1;
              else
                v114 = (v126 - v125) >> 2;
              if (v114 >= 2
                && (v113 + 4 + 8 * (v114 - 1) >= v113 + 4 ? (v115 = (v114 - 1) >> 61 == 0) : (v115 = 0), v115))
              {
                v116 = v114 & 0xFFFFFFFFFFFFFFFELL;
                v119 = (float *)(v113 + 12);
                v120 = v114 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  v94.n128_f32[0] = -*(v119 - 2);
                  v121 = -*v119;
                  *(v119 - 2) = v94.n128_f32[0];
                  *v119 = v121;
                  v119 += 4;
                  v120 -= 2;
                }
                while (v120);
                if (v114 == v116)
                  goto LABEL_115;
              }
              else
              {
                v116 = 0;
              }
              v117 = v114 - v116;
              v118 = (float *)(v113 + 8 * v116 + 4);
              do
              {
                v94.n128_f32[0] = -*v118;
                *v118 = v94.n128_f32[0];
                v118 += 2;
                --v117;
              }
              while (v117);
              goto LABEL_115;
            }
          }
          v106 = v122;
          if (!v102)
            goto LABEL_115;
          goto LABEL_103;
        }
LABEL_41:
        v35 = 0;
        v36 = 0;
        if (v4 <= 1)
          v37 = 1;
        else
          v37 = (v129 - v128) >> 2;
        if (v124 <= 1)
          v38 = 1;
        else
          v38 = (v126 - v125) >> 2;
        v39 = 4 * v4;
        v40 = 0uLL;
        v41 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
        v123 = v41;
        while (2)
        {
          if (((*(_QWORD *)(*(_QWORD *)(a1 + 208) + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
          {
            if (v129 != v128)
            {
              v42 = (float *)v134;
              v43 = (float *)(*(_QWORD *)(a1 + 312) + v35);
              v44 = v127;
              v45 = v37;
              do
              {
                v46 = *v44++;
                *v42++ = v46 - (float)(*v43 * *v43);
                v43 += v124;
                --v45;
              }
              while (v45);
            }
            v47 = *(_QWORD *)(a1 + 184);
            v48 = *(_QWORD *)(a1 + 336);
            v49 = (_QWORD *)(v48 + 4 * v47 * v36);
            if (v47)
            {
              v50 = *(_QWORD *)(a1 + 152);
              if (v129 == v128)
              {
                if (v47 >= 8
                  && ((unint64_t)v49 < v50 + 4 * v47 ? (v65 = v50 >= v48 + v47 * (4 * v36 + 4)) : (v65 = 1), v65))
                {
                  v66 = v47 & 0xFFFFFFFFFFFFFFF8;
                  v67 = (int8x16_t *)(v48 + v47 * v35 + 16);
                  v68 = (float32x4_t *)(v50 + 16);
                  v69 = v47 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    v70 = v68[-1];
                    v71 = (int8x16_t)vcgtzq_f32(v70);
                    v72 = (int8x16_t)vcltzq_f32(v70);
                    v73 = vsqrtq_f32(v70);
                    v74 = vsqrtq_f32(*v68);
                    v75 = vandq_s8(vbslq_s8((int8x16_t)vcltzq_f32(*v68), v41, (int8x16_t)vdivq_f32(v40, vaddq_f32(v74, v74))), (int8x16_t)vcgtzq_f32(*v68));
                    v67[-1] = vandq_s8(vbslq_s8(v72, v41, (int8x16_t)vdivq_f32(v40, vaddq_f32(v73, v73))), v71);
                    *v67 = v75;
                    v67 += 2;
                    v68 += 2;
                    v69 -= 8;
                  }
                  while (v69);
                  if (v47 == v66)
                    goto LABEL_73;
                }
                else
                {
                  v66 = 0;
                }
                v83 = v47 - v66;
                v84 = 4 * v66;
                v85 = (float *)(v50 + v84);
                v86 = (float *)(v48 + v84 + v47 * v35);
                do
                {
                  *v86 = 0.0;
                  v87 = *v85;
                  v88 = 0.0;
                  if (*v85 > 0.0)
                  {
                    v89 = sqrtf(v87);
                    v88 = 0.0 / (float)(v89 + v89);
                    if (v87 < 0.0)
                      v88 = NAN;
                  }
                  *v86++ = v88;
                  ++v85;
                  --v83;
                }
                while (v83);
              }
              else
              {
                v51 = 0;
                v52 = *(float **)(a1 + 160);
                v53 = (float *)v134;
                do
                {
                  *((_DWORD *)v49 + v51) = 0;
                  v54 = 0.0;
                  v55 = v53;
                  v56 = v52;
                  v57 = v37;
                  do
                  {
                    v58 = *v55++;
                    v59 = v58;
                    v60 = *v56++;
                    v54 = v54 + (float)(v59 * v60);
                    *((float *)v49 + v51) = v54;
                    --v57;
                  }
                  while (v57);
                  v61 = *(float *)(v50 + 4 * v51);
                  v62 = 0.0;
                  if (v61 > 0.0)
                  {
                    v63 = sqrtf(v61);
                    v64 = v63 + v63;
                    if (v61 < 0.0)
                      v64 = 0.0;
                    v62 = v54 / v64;
                  }
                  *((float *)v49 + v51++) = v62;
                  v52 = (float *)((char *)v52 + v39);
                }
                while (v51 != v47);
              }
            }
LABEL_73:
            v76 = *v49;
            v77 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
            v79 = *v77;
            v78 = (std::__shared_weak_count *)v77[1];
            if (v78)
            {
              v80 = (unint64_t *)&v78->__shared_owners_;
              do
                v81 = __ldxr(v80);
              while (__stxr(v81 + 1, v80));
              do
                v82 = __ldaxr(v80);
              while (__stlxr(v82 - 1, v80));
              if (!v82)
              {
                ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                std::__shared_weak_count::__release_weak(v78);
                v41 = v123;
                v40 = 0uLL;
              }
            }
            *(_QWORD *)(*(_QWORD *)(v79 + 40) + 8 * v36) = v76;
          }
          ++v36;
          v35 += 4;
          if (v36 == v38)
            goto LABEL_86;
          continue;
        }
      }
    }
    v19 = v18 * v15;
    v20 = *(_QWORD *)(a1 + 336);
    if (v15 >= 0x14)
    {
      v22 = 0;
      v21 = 0;
      if (__CFADD__(v19, v15 - 1) || (unsigned __int16)(v15 - 1) == 0xFFFFLL || (v15 - 1) >> 16)
        goto LABEL_22;
      if (v20 + 4 * (unint64_t)v19 - (unint64_t)v14 >= 0x20)
      {
        v21 = v15 & 0xFFFFFFFFFFFFFFF8;
        v22 = v15 & 0xFFFFFFF8;
        v30 = (__int128 *)(v14 + 4);
        v31 = v15 & 0xFFFFFFFFFFFFFFF8;
        v32 = v18 * v15;
        do
        {
          v33 = *v30;
          v34 = (_OWORD *)(v20 + 4 * v32);
          *v34 = *(v30 - 1);
          v34[1] = v33;
          v32 += 8;
          v30 += 2;
          v31 -= 8;
        }
        while (v31);
        if (v15 == v21)
          goto LABEL_23;
        goto LABEL_22;
      }
    }
    v21 = 0;
    v22 = 0;
    do
    {
LABEL_22:
      *(float *)(v20 + 4 * (v19 + (unsigned __int16)v22++)) = v14[v21];
      v21 = (unsigned __int16)v22;
    }
    while (v15 > (unsigned __int16)v22);
    goto LABEL_23;
  }
  return result;
}

void sub_239996030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    v27 = *(void **)(v25 - 128);
    if (!v27)
    {
LABEL_4:
      MEMORY[0x23B83E2F8](a10, 0x1000C8052888210);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v27 = *(void **)(v25 - 128);
    if (!v27)
      goto LABEL_4;
  }
  operator delete(v27);
  goto LABEL_4;
}

void sub_2399960D0(uint64_t a1, _QWORD *a2)
{
  sub_239992D88(*(_QWORD *)(a1 + 40), word_239F03760, a2, (_QWORD *)(a1 + 72));
}

void sub_2399960EC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  _DWORD *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  _OWORD *v42;
  uint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  float v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _OWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  float **v80;
  float *v81;
  float **v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  float **v92;
  float *v93;
  float **v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _OWORD *v102;
  _OWORD *v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  unsigned int v112[5];
  unsigned int v113;
  _DWORD v114[5];
  unsigned int v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  __int128 v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  _OWORD *v124;
  _OWORD *v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112);
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v109 = v7;
  v110 = v8;
  v9 = v8 - v7;
  v10 = (v8 - v7) >> 2;
  if (v8 != v7)
  {
    if ((v9 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v11 = (v10 - 1) >> 6;
    v12 = operator new(8 * (v11 + 1));
    v13 = v12;
    v127 = v10;
    v128 = v11 + 1;
    v126 = (char *)v12;
    if (v9 >= 0x104)
      v14 = (v10 - 1) >> 6;
    else
      v14 = 0;
    v12[v14] = 0;
    if (v9 >= 0x100)
      bzero(v12, 8 * (v10 >> 6));
    if (v9 >> 2)
      v13[v10 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v9 >> 2));
  }
  sub_239996A30(&v124, v10);
  if (v110 != v109)
  {
    v15 = 0;
    if (v10 <= 1)
      v16 = 1;
    else
      v16 = v10;
    do
    {
      v17 = operator new(0x28uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = &off_250AF0F38;
      *((_DWORD *)v17 + 6) = 0;
      v17[4] = -1;
      v18 = &v124[v15];
      v19 = (std::__shared_weak_count *)v18[1];
      *v18 = v17 + 3;
      v18[1] = v17;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
  v123 = 0;
  v120 = 0;
  v121 = 0;
  v119 = 0;
  v122 = 0;
  if (v9 >= 4)
    sub_23942D080((uint64_t)&v119, v10);
  v22 = *(_DWORD **)a3;
  v23 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v23 >= 1)
    memset_pattern16(*(void **)a3, &unk_239ECEF60, 4 * (((unint64_t)v23 >> 2) - ((unint64_t)v23 > 3)) + 4);
  v24 = *(unsigned __int8 *)(a1 + 64);
  if (*(_BYTE *)(a1 + 64))
  {
    v25 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
    if (v25 >= 1)
      memset_pattern16(*(void **)a4, &unk_239ECEF60, 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
  }
  v26 = *a2;
  *(_QWORD *)&v126[(v26 >> 3) & 0x1FFFFFF8] |= 1 << v26;
  v22[v26] = 0;
  if (v24)
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v26) = 0;
  v27 = v124[v26];
  v28 = *(_DWORD **)&v124[v26];
  *v28 = 0;
  v28[1] = v26;
  v118 = v27;
  if (*((_QWORD *)&v27 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  sub_239996AC8(&v119, &v118);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
  if (!*((_QWORD *)&v118 + 1))
    goto LABEL_37;
  v32 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    if (v110 != v109)
    {
LABEL_38:
      v34 = 0;
      if (v10 <= 1)
        v35 = 1;
      else
        v35 = v10;
      do
      {
        sub_23998E248(&v119, 0, &v116);
        v115 = *(_DWORD *)(v116 + 4);
        v36 = v126;
        *(_QWORD *)&v126[((unint64_t)v115 >> 3) & 0x1FFFFFF8] |= 1 << v115;
        sub_239962B1C((uint64_t)v114, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v115);
        v113 = -1;
        while (1)
        {
          v113 = sub_239962B44(v114);
          if (v113 == -1)
            break;
          v37 = *(_QWORD *)(a1 + 40) + 104;
          v38 = (unsigned int *)sub_239962518(v37, &v113);
          v112[0] = *(_DWORD *)(sub_239962518(v37, v38) + 12);
          if (((*(_QWORD *)&v36[((unint64_t)v112[0] >> 3) & 0x1FFFFFF8] >> SLOBYTE(v112[0])) & 1) == 0)
            sub_239996C6C(a1, &v115, v112, &v113, &v126, (_QWORD *)a3, (_QWORD *)a4);
        }
        sub_239962B1C((uint64_t)v112, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v115);
        while (1)
        {
          v113 = sub_239962B44(v112);
          if (v113 == -1)
            break;
          v39 = *(_QWORD *)(a1 + 40) + 104;
          v40 = (unsigned int *)sub_239962518(v39, &v113);
          v41 = *(unsigned int *)(sub_239962518(v39, v40) + 12);
          if (((*(_QWORD *)&v126[(v41 >> 3) & 0x1FFFFFF8] >> v41) & 1) == 0)
          {
            v42 = v124;
            v43 = *(_QWORD *)&v124[v41];
            v44 = *(_QWORD *)(v43 + 8);
            if (v44 == -1)
            {
              *(_DWORD *)(v43 + 4) = v41;
              *(float *)v43 = -*(float *)(*(_QWORD *)a3 + 4 * v41);
              *(_QWORD *)&v111 = v43;
              v60 = *((_QWORD *)&v42[v41] + 1);
              *((_QWORD *)&v111 + 1) = v60;
              if (v60)
              {
                v61 = (unint64_t *)(v60 + 8);
                do
                  v62 = __ldxr(v61);
                while (__stxr(v62 + 1, v61));
              }
              v64 = v119;
              v63 = v120;
              v65 = v123;
              if (v123 >= ((uint64_t)v120 - v119) >> 4)
              {
                if ((unint64_t)v120 >= v121)
                {
                  v76 = sub_23951E0F0((uint64_t)&v119, &v111);
                }
                else
                {
                  *v120 = v43;
                  v73 = *((_QWORD *)&v111 + 1);
                  v63[1] = *((_QWORD *)&v111 + 1);
                  if (v73)
                  {
                    v74 = (unint64_t *)(v73 + 8);
                    do
                      v75 = __ldxr(v74);
                    while (__stxr(v75 + 1, v74));
                  }
                  v76 = v63 + 2;
                }
                v120 = v76;
              }
              else
              {
                v66 = *((_QWORD *)&v111 + 1);
                if (*((_QWORD *)&v111 + 1))
                {
                  v67 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
                  do
                    v68 = __ldxr(v67);
                  while (__stxr(v68 + 1, v67));
                }
                v69 = (_QWORD *)(v64 + 16 * v65);
                v70 = (std::__shared_weak_count *)v69[1];
                *v69 = v43;
                v69[1] = v66;
                if (v70)
                {
                  v71 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
              }
              v88 = v123;
              *(_QWORD *)(v111 + 8) = v123;
              v123 = v88 + 1;
              if (v88)
              {
                v89 = v119;
                do
                {
                  v90 = v88 - 1;
                  v91 = (v88 - 1) >> 1;
                  v92 = (float **)(v89 + 16 * v88);
                  v93 = *v92;
                  v94 = (float **)(v89 + 16 * v91);
                  if (**v92 <= **v94)
                    break;
                  if (v88 != v91)
                  {
                    *v92 = *v94;
                    *v94 = v93;
                    v95 = v89 + 16 * v88;
                    v96 = v89 + 16 * v91;
                    v97 = *(_QWORD *)(v95 + 8);
                    *(_QWORD *)(v95 + 8) = *(_QWORD *)(v96 + 8);
                    *(_QWORD *)(v96 + 8) = v97;
                    v89 = v119;
                    *(_QWORD *)(*(_QWORD *)(v119 + 16 * v88) + 8) = v88;
                    *(_QWORD *)(*(_QWORD *)(v89 + 16 * v91) + 8) = v91;
                  }
                  v88 = (v88 - 1) >> 1;
                }
                while (v90 > 1);
              }
              v45 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
              if (*((_QWORD *)&v111 + 1))
              {
                v98 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
                do
                  v87 = __ldaxr(v98);
                while (__stlxr(v87 - 1, v98));
                goto LABEL_106;
              }
            }
            else
            {
              v45 = (std::__shared_weak_count *)*((_QWORD *)&v124[v41] + 1);
              if (v45)
              {
                v46 = (unint64_t *)&v45->__shared_owners_;
                do
                  v47 = __ldxr(v46);
                while (__stxr(v47 + 1, v46));
                v44 = *(_QWORD *)(v43 + 8);
              }
              v48 = v123;
              if (v44 < v123)
              {
                v49 = -*(float *)(*(_QWORD *)a3 + 4 * v41);
                v50 = *(float *)v43;
                *(float *)v43 = v49;
                if (v50 <= v49)
                {
                  if (v44)
                  {
                    v77 = v119;
                    do
                    {
                      v78 = v44 - 1;
                      v79 = (v44 - 1) >> 1;
                      v80 = (float **)(v77 + 16 * v44);
                      v81 = *v80;
                      v82 = (float **)(v77 + 16 * v79);
                      if (**v80 <= **v82)
                        break;
                      if (v44 != v79)
                      {
                        *v80 = *v82;
                        *v82 = v81;
                        v83 = v77 + 16 * v44;
                        v84 = v77 + 16 * v79;
                        v85 = *(_QWORD *)(v83 + 8);
                        *(_QWORD *)(v83 + 8) = *(_QWORD *)(v84 + 8);
                        *(_QWORD *)(v84 + 8) = v85;
                        v77 = v119;
                        *(_QWORD *)(*(_QWORD *)(v119 + 16 * v44) + 8) = v44;
                        *(_QWORD *)(*(_QWORD *)(v77 + 16 * v79) + 8) = v79;
                      }
                      v44 = (v44 - 1) >> 1;
                    }
                    while (v78 > 1);
                  }
                }
                else
                {
                  v51 = v119;
                  v52 = *(_QWORD *)(v119 + 16 * v44);
                  do
                  {
                    v53 = (2 * v44) | 1;
                    v54 = *(float *)v52;
                    if (v53 >= v48)
                    {
                      v55 = v44;
                    }
                    else
                    {
                      v55 = v44;
                      if (**(float **)(v51 + 16 * v53) > v54)
                      {
                        v55 = (2 * v44) | 1;
                        v54 = **(float **)(v51 + 16 * v53);
                      }
                    }
                    v56 = 2 * v44 + 2;
                    if (v56 < v48 && **(float **)(v51 + 16 * v56) > v54)
                      v55 = 2 * v44 + 2;
                    if (v55 == v44)
                      break;
                    v57 = v51 + 16 * v55;
                    v58 = v51 + 16 * v44;
                    v59 = *(_QWORD *)(v58 + 8);
                    *(_OWORD *)v58 = *(_OWORD *)v57;
                    *(_QWORD *)v57 = v52;
                    *(_QWORD *)(v57 + 8) = v59;
                    v51 = v119;
                    *(_QWORD *)(*(_QWORD *)(v119 + 16 * v44) + 8) = v44;
                    v52 = *(_QWORD *)(v51 + 16 * v55);
                    *(_QWORD *)(v52 + 8) = v55;
                    v44 = v55;
                  }
                  while (v55 < v48);
                }
              }
              if (v45)
              {
                v86 = (unint64_t *)&v45->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
LABEL_106:
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                  std::__shared_weak_count::__release_weak(v45);
                }
              }
            }
          }
        }
        v99 = v117;
        if (v117)
        {
          v100 = (unint64_t *)&v117->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        ++v34;
      }
      while (v34 != v35);
    }
  }
  else
  {
LABEL_37:
    if (v110 != v109)
      goto LABEL_38;
  }
  sub_23999C398((uint64_t)&v119);
  v102 = v124;
  if (v124)
  {
    v103 = v125;
    v104 = v124;
    if (v125 != v124)
    {
      do
      {
        v105 = (std::__shared_weak_count *)*((_QWORD *)v103 - 1);
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        --v103;
      }
      while (v103 != v102);
      v104 = v124;
    }
    v125 = v102;
    operator delete(v104);
  }
  if (v126)
    operator delete(v126);
}

_QWORD *sub_239996A30(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_2394189F8();
    v4 = 16 * a2;
    v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_239996AA8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC3204((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_239996AC8(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float **v22;
  float *v23;
  float **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v5 = (_QWORD *)a1[1];
  v6 = a1[4];
  if (v6 >= ((uint64_t)v5 - *a1) >> 4)
  {
    if ((unint64_t)v5 >= a1[2])
    {
      v17 = sub_23951E0F0((uint64_t)a1, a2);
    }
    else
    {
      v14 = *((_QWORD *)a2 + 1);
      *v5 = v2;
      v5[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = v5 + 2;
    }
    a1[1] = (uint64_t)v17;
  }
  else
  {
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *((_QWORD *)a2 + 1);
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = (std::__shared_weak_count *)v7[1];
    *v7 = v2;
    v7[1] = v8;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v18 = a1[4];
  *(_QWORD *)(*(_QWORD *)a2 + 8) = v18;
  a1[4] = v18 + 1;
  if (v18)
  {
    v19 = *a1;
    do
    {
      v20 = v18 - 1;
      v21 = (v18 - 1) >> 1;
      v22 = (float **)(v19 + 16 * v18);
      v23 = *v22;
      v24 = (float **)(v19 + 16 * v21);
      if (**v22 <= **v24)
        break;
      if (v18 != v21)
      {
        *v22 = *v24;
        *v24 = v23;
        v25 = v19 + 16 * v18;
        v26 = v19 + 16 * v21;
        v27 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
        *(_QWORD *)(v26 + 8) = v27;
        v19 = *a1;
        *(_QWORD *)(*(_QWORD *)(*a1 + 16 * v18) + 8) = v18;
        *(_QWORD *)(*(_QWORD *)(v19 + 16 * v21) + 8) = v21;
      }
      v18 = (v18 - 1) >> 1;
    }
    while (v20 > 1);
  }
  return 1;
}

void sub_239996C6C(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v61;

  v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
  v14 = *v13;
  v15 = (std::__shared_weak_count *)v13[1];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v19 = *a4;
  v20 = *(_QWORD *)(v14 + 40);
  v21 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 204));
  v23 = *v21;
  v22 = (std::__shared_weak_count *)v21[1];
  if (v22)
  {
    v24 = (unint64_t *)&v22->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v27 = *a3;
  v28 = *a2;
  v29 = *(float *)(*a6 + 4 * v28) + *(float *)(v20 + 4 * v19);
  if (*(float *)(*a6 + 4 * v27) > v29)
  {
    v30 = *a4;
    v31 = *(_QWORD *)(v23 + 40);
    *(float *)(*a6 + 4 * v27) = v29;
    if (*(_BYTE *)(a1 + 64))
      *(float *)(*a7 + 4 * v27) = *(float *)(*a7 + 4 * v28) + *(float *)(v31 + 4 * v30);
  }
  v61 = -1;
  v32 = *a4;
  v33 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
  v35 = *v33;
  v34 = (std::__shared_weak_count *)v33[1];
  if (!v34)
    goto LABEL_21;
  v36 = (unint64_t *)&v34->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  do
    v38 = __ldaxr(v36);
  while (__stlxr(v38 - 1, v36));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if (((*(_QWORD *)(*(_QWORD *)(v35 + 40) + ((v32 >> 3) & 0x1FFFFFF8)) >> v32) & 1) != 0)
      goto LABEL_29;
  }
  else
  {
LABEL_21:
    if (((*(_QWORD *)(*(_QWORD *)(v35 + 40) + ((v32 >> 3) & 0x1FFFFFF8)) >> v32) & 1) != 0)
      goto LABEL_29;
  }
  v39 = *(_QWORD *)(a1 + 40) + 104;
  v40 = sub_239962518(v39, a4);
  v41 = (unsigned int *)sub_239962518(v39, (unsigned int *)(v40 + 8));
  v61 = *(_DWORD *)(sub_239962518(v39, v41) + 12);
  if (((*(_QWORD *)(*a5 + (((unint64_t)v61 >> 3) & 0x1FFFFFF8)) >> v61) & 1) != 0)
  {
    if (*(float *)(*a6 + 4 * v61) <= *(float *)(*a6 + 4 * *a2))
    {
      v44 = &v61;
      v43 = a1;
      v42 = a2;
    }
    else
    {
      v42 = &v61;
      v43 = a1;
      v44 = a2;
    }
    sub_23999719C(v43, v44, v42, a3, a6);
  }
LABEL_29:
  v45 = *(_QWORD *)(a1 + 40);
  v46 = *(unsigned int *)sub_239962518(v45 + 104, a4);
  v47 = (uint64_t *)(*(_QWORD *)(v45 + 32) + 16 * *(unsigned int *)(v45 + 180));
  v49 = *v47;
  v48 = (std::__shared_weak_count *)v47[1];
  if (!v48)
    goto LABEL_34;
  v50 = (unint64_t *)&v48->__shared_owners_;
  do
    v51 = __ldxr(v50);
  while (__stxr(v51 + 1, v50));
  do
    v52 = __ldaxr(v50);
  while (__stlxr(v52 - 1, v50));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    if (((*(_QWORD *)(*(_QWORD *)(v49 + 40) + ((v46 >> 3) & 0x1FFFFFF8)) >> v46) & 1) != 0)
      return;
  }
  else
  {
LABEL_34:
    if (((*(_QWORD *)(*(_QWORD *)(v49 + 40) + ((v46 >> 3) & 0x1FFFFFF8)) >> v46) & 1) != 0)
      return;
  }
  v53 = *(_QWORD *)(a1 + 40) + 104;
  v54 = (unsigned int *)sub_239962518(v53, a4);
  v55 = sub_239962518(v53, v54);
  v56 = (unsigned int *)sub_239962518(v53, (unsigned int *)(v55 + 8));
  v61 = *(_DWORD *)(sub_239962518(v53, v56) + 12);
  if (((*(_QWORD *)(*a5 + (((unint64_t)v61 >> 3) & 0x1FFFFFF8)) >> v61) & 1) != 0)
  {
    if (*(float *)(*a6 + 4 * v61) <= *(float *)(*a6 + 4 * *a2))
    {
      v59 = &v61;
      v58 = a1;
      v57 = a2;
    }
    else
    {
      v57 = &v61;
      v58 = a1;
      v59 = a2;
    }
    sub_23999719C(v58, v59, v57, a3, a6);
  }
}

float sub_23999702C(uint64_t *a1, uint64_t *a2, __n128 a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int32 **v18;
  unsigned __int32 *v19;
  float **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *a2;
  if (*a2)
  {
    v4 = *(_QWORD *)(v3 + 8);
    v5 = a1[4];
    if (v4 < v5)
    {
      v6 = *(float *)v3;
      *(_DWORD *)v3 = a3.n128_u32[0];
      if (v6 <= a3.n128_f32[0])
      {
        if (v4)
        {
          v15 = *a1;
          do
          {
            v16 = v4 - 1;
            v17 = (v4 - 1) >> 1;
            v18 = (unsigned __int32 **)(v15 + 16 * v4);
            v19 = *v18;
            a3.n128_u32[0] = **v18;
            v20 = (float **)(v15 + 16 * v17);
            if (a3.n128_f32[0] <= **v20)
              break;
            if (v4 != v17)
            {
              *v18 = (unsigned __int32 *)*v20;
              *v20 = (float *)v19;
              v21 = v15 + 16 * v4;
              v22 = v15 + 16 * v17;
              v23 = *(_QWORD *)(v21 + 8);
              *(_QWORD *)(v21 + 8) = *(_QWORD *)(v22 + 8);
              *(_QWORD *)(v22 + 8) = v23;
              v15 = *a1;
              *(_QWORD *)(*(_QWORD *)(*a1 + 16 * v4) + 8) = v4;
              *(_QWORD *)(*(_QWORD *)(v15 + 16 * v17) + 8) = v17;
            }
            v4 = (v4 - 1) >> 1;
          }
          while (v16 > 1);
        }
      }
      else
      {
        v7 = *a1;
        v8 = *(_QWORD *)(*a1 + 16 * v4);
        do
        {
          v9 = (2 * v4) | 1;
          a3.n128_u32[0] = *(_DWORD *)v8;
          if (v9 >= v5)
          {
            v10 = v4;
          }
          else
          {
            v10 = v4;
            if (**(float **)(v7 + 16 * v9) > a3.n128_f32[0])
            {
              v10 = (2 * v4) | 1;
              a3.n128_u32[0] = **(_DWORD **)(v7 + 16 * v9);
            }
          }
          v11 = 2 * v4 + 2;
          if (v11 < v5 && **(float **)(v7 + 16 * v11) > a3.n128_f32[0])
            v10 = 2 * v4 + 2;
          if (v10 == v4)
            break;
          v12 = (__n128 *)(v7 + 16 * v10);
          v13 = (__n128 *)(v7 + 16 * v4);
          v14 = v13->n128_u64[1];
          a3 = *v12;
          *v13 = *v12;
          v12->n128_u64[0] = v8;
          v12->n128_u64[1] = v14;
          v7 = *a1;
          *(_QWORD *)(*(_QWORD *)(*a1 + 16 * v4) + 8) = v4;
          v8 = *(_QWORD *)(v7 + 16 * v10);
          *(_QWORD *)(v8 + 8) = v10;
          v4 = v10;
        }
        while (v10 < v5);
      }
    }
  }
  return a3.n128_f32[0];
}

void sub_23999719C(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, _QWORD *a5)
{
  uint64_t v9;
  float v10;
  float v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float32x4_t v46;
  float v47;
  float v48;
  float v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v59;
  float v60;
  float v62;
  BOOL v63;
  float v64;
  uint64_t v66;
  float v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;

  v9 = *a3;
  v10 = *(float *)(*a5 + 4 * v9);
  v11 = *(float *)(*a5 + 4 * *a2);
  v12 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v18 = *(float32x4_t *)(*(_QWORD *)(v14 + 40) + 16 * v9);
  v19 = *a4;
  v20 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v22 = *v20;
  v21 = (std::__shared_weak_count *)v20[1];
  if (v21)
  {
    v23 = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    do
      v25 = __ldaxr(v23);
    while (__stlxr(v25 - 1, v23));
    if (!v25)
    {
      v70 = v18;
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      v18 = v70;
    }
  }
  v26 = *(float32x4_t *)(*(_QWORD *)(v22 + 40) + 16 * v19);
  v27 = *a2;
  v28 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v30 = *v28;
  v29 = (std::__shared_weak_count *)v28[1];
  if (v29)
  {
    v31 = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
    do
      v33 = __ldaxr(v31);
    while (__stlxr(v33 - 1, v31));
    if (!v33)
    {
      v68 = v26;
      v71 = v18;
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v26 = v68;
      v18 = v71;
    }
  }
  v34 = vsubq_f32(v18, v26);
  v35 = *(float32x4_t *)(*(_QWORD *)(v30 + 40) + 16 * v27);
  v36 = *a4;
  v37 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v39 = *v37;
  v38 = (std::__shared_weak_count *)v37[1];
  if (v38)
  {
    v40 = (unint64_t *)&v38->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    do
      v42 = __ldaxr(v40);
    while (__stlxr(v42 - 1, v40));
    if (!v42)
    {
      v69 = v35;
      v72 = v34;
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      v35 = v69;
      v34 = v72;
    }
  }
  v43 = vsubq_f32(v35, *(float32x4_t *)(*(_QWORD *)(v39 + 40) + 16 * v36));
  v44 = vmulq_f32(v34, v34);
  v44.i32[3] = 0;
  v45 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v44, v44)));
  v46 = vmulq_f32(v43, v43);
  v46.i32[3] = 0;
  v47 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46)));
  v48 = v45 * v47;
  if (fabsf(v45 * v47) >= 0.00000001)
  {
    v49 = v10 - v11;
    v50 = vmulq_f32(v43, v34);
    v50.i32[3] = 0;
    v51 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v50, v50)) / v48;
    v52 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL), (int32x4_t)v43), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v34, (int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 0xCuLL)), (int32x4_t)v34)), (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v43, (int32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 0xCuLL)), (int32x4_t)v43), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL), (int32x4_t)v34));
    v53 = vmulq_f32(v52, v52);
    v53.i32[3] = 0;
    v52.f32[0] = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v53, v53))) / v48;
    v54 = (float)((float)(v47 * v47) + (float)(v45 * v45)) + (float)((float)((float)(v45 * -2.0) * v47) * v51);
    v55 = (float)((float)(v10 - v11) * (float)(v47 + v47)) * (float)-(float)(v47 - (float)(v45 * v51));
    v56 = (float)((float)(v54 * -4.0)
                * (float)((float)(v47 * v47)
                        * (float)((float)(v52.f32[0] * (float)((float)-(float)(v45 * v45) * v52.f32[0]))
                                + (float)(v49 * v49))))
        + (float)(v55 * v55);
    v57 = fabsf(v54);
    if (v56 >= 0.0 && v57 >= 0.00000001)
    {
      v59 = (float)(sqrtf(v56) - v55) / (float)(v54 + v54);
      v60 = fabsf(v59);
      if (v59 >= v49 && v60 >= 0.00000001)
      {
        v62 = (float)(v47 * (float)(v59 - v49)) / v59;
        v63 = v62 <= (float)(v45 / v51) || v51 <= 0.00000001;
        v64 = v45 * v51;
        if (v63 && v62 >= v64)
        {
          v66 = *a4;
          v67 = v59 + *(float *)(*a5 + 4 * *a2);
          if (*(float *)(*a5 + 4 * v66) > v67)
            *(float *)(*a5 + 4 * v66) = v67;
        }
      }
    }
  }
}

void sub_239997520(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  __int128 v45;
  char *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  std::__shared_weak_count *v61;
  _QWORD *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  size_t v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  char v80;
  void *__p;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  uint64_t v86;

  v9 = a1;
  sub_239997BC0(a1);
  v10 = *(_QWORD *)(v9 + 32);
  if (!v10 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10) & 1) == 0)
  {
    v80 = 0;
    LODWORD(v84) = a5;
    sub_2399B8A48((uint64_t *)v9, (void **)a2, (unsigned int *)&v84, *a4 != 0, (BOOL *)&v80);
    v11 = *(_QWORD *)(v9 + 32);
    if (!v11 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11) & 1) == 0)
    {
      if (!v80)
      {
        v59 = *(char **)a2;
        v60 = *(char **)(a2 + 8);
        if (*(char **)a2 != v60)
        {
          do
          {
            v62 = *(_QWORD **)v59;
            v61 = (std::__shared_weak_count *)*((_QWORD *)v59 + 1);
            v84 = *(void **)v59;
            v85 = v61;
            if (v61)
            {
              p_shared_owners = (unint64_t *)&v61->__shared_owners_;
              do
                v64 = __ldxr(p_shared_owners);
              while (__stxr(v64 + 1, p_shared_owners));
            }
            if (!sub_2399A1DC4((uint64_t)v62))
            {
              sub_23993F8A0(v62);
              v80 = 1;
            }
            if (v61)
            {
              v65 = (unint64_t *)&v61->__shared_owners_;
              do
                v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
            v59 += 16;
          }
          while (v59 != v60);
        }
      }
      v12 = *(_QWORD *)(v9 + 32);
      if (!v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12) & 1) == 0)
      {
        sub_23999BAC8(&v84, a2);
        v13 = v85;
        if (v85 != v84)
        {
          v77 = v9;
          v78 = a3;
          v79 = a5;
          v14 = ((char *)v85 - (_BYTE *)v84) >> 4;
          do
          {
            __p = 0;
            v82 = 0;
            v83 = 0;
            v16 = v14 - 1;
            sub_23999DFFC(*((_QWORD *)v84 + 2 * v14 - 2), (uint64_t)&__p);
            v17 = __p;
            if (__p != v82)
            {
              v18 = *(_QWORD *)(a2 + 8);
              v19 = *(_QWORD *)a2 + 16 * v14;
              v20 = (char *)(v19 - 16);
              if (v19 != v18)
              {
                do
                {
                  v21 = *(_OWORD *)v19;
                  *(_QWORD *)v19 = 0;
                  *(_QWORD *)(v19 + 8) = 0;
                  v22 = (std::__shared_weak_count *)*((_QWORD *)v20 + 1);
                  *(_OWORD *)v20 = v21;
                  if (v22)
                  {
                    v23 = (unint64_t *)&v22->__shared_owners_;
                    do
                      v24 = __ldaxr(v23);
                    while (__stlxr(v24 - 1, v23));
                    if (!v24)
                    {
                      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                      std::__shared_weak_count::__release_weak(v22);
                    }
                  }
                  v19 += 16;
                  v20 += 16;
                }
                while (v19 != v18);
                v19 = *(_QWORD *)(a2 + 8);
              }
              while ((char *)v19 != v20)
              {
                v25 = *(std::__shared_weak_count **)(v19 - 8);
                if (v25)
                {
                  v26 = (unint64_t *)&v25->__shared_owners_;
                  do
                    v27 = __ldaxr(v26);
                  while (__stlxr(v27 - 1, v26));
                  if (!v27)
                  {
                    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                    std::__shared_weak_count::__release_weak(v25);
                  }
                }
                v19 -= 16;
              }
              *(_QWORD *)(a2 + 8) = v20;
              v17 = __p;
              v28 = v82;
              if (__p != v82)
              {
                do
                {
                  v30 = *(_QWORD *)(a2 + 16);
                  if ((unint64_t)v20 >= v30)
                  {
                    v34 = *(char **)a2;
                    v35 = (uint64_t)&v20[-*(_QWORD *)a2] >> 4;
                    v36 = v35 + 1;
                    if ((unint64_t)(v35 + 1) >> 60)
                      sub_2394189F8();
                    v37 = v30 - (_QWORD)v34;
                    if (v37 >> 3 > v36)
                      v36 = v37 >> 3;
                    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
                      v38 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v38 = v36;
                    if (v38 >> 60)
                      sub_239418A80();
                    v39 = (char *)operator new(16 * v38);
                    v40 = &v39[16 * v35];
                    v41 = *(_OWORD *)v17;
                    *(_OWORD *)v40 = *(_OWORD *)v17;
                    if (*((_QWORD *)&v41 + 1))
                    {
                      v42 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
                      do
                        v43 = __ldxr(v42);
                      while (__stxr(v43 + 1, v42));
                      v34 = *(char **)a2;
                      v20 = *(char **)(a2 + 8);
                    }
                    v44 = &v39[16 * v38];
                    v29 = v40 + 16;
                    if (v20 == v34)
                    {
                      *(_QWORD *)a2 = v40;
                      *(_QWORD *)(a2 + 8) = v29;
                      *(_QWORD *)(a2 + 16) = v44;
                    }
                    else
                    {
                      do
                      {
                        v45 = *((_OWORD *)v20 - 1);
                        v20 -= 16;
                        *((_OWORD *)v40 - 1) = v45;
                        v40 -= 16;
                        *(_QWORD *)v20 = 0;
                        *((_QWORD *)v20 + 1) = 0;
                      }
                      while (v20 != v34);
                      v34 = *(char **)a2;
                      v46 = *(char **)(a2 + 8);
                      *(_QWORD *)a2 = v40;
                      *(_QWORD *)(a2 + 8) = v29;
                      *(_QWORD *)(a2 + 16) = v44;
                      while (v46 != v34)
                      {
                        v47 = (std::__shared_weak_count *)*((_QWORD *)v46 - 1);
                        if (v47)
                        {
                          v48 = (unint64_t *)&v47->__shared_owners_;
                          do
                            v49 = __ldaxr(v48);
                          while (__stlxr(v49 - 1, v48));
                          if (!v49)
                          {
                            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                            std::__shared_weak_count::__release_weak(v47);
                          }
                        }
                        v46 -= 16;
                      }
                    }
                    if (v34)
                      operator delete(v34);
                  }
                  else
                  {
                    *(_QWORD *)v20 = *v17;
                    v31 = v17[1];
                    *((_QWORD *)v20 + 1) = v31;
                    if (v31)
                    {
                      v32 = (unint64_t *)(v31 + 8);
                      do
                        v33 = __ldxr(v32);
                      while (__stxr(v33 + 1, v32));
                    }
                    v29 = v20 + 16;
                  }
                  *(_QWORD *)(a2 + 8) = v29;
                  v17 += 2;
                  v20 = v29;
                }
                while (v17 != v28);
                v17 = __p;
              }
            }
            if (v17)
            {
              v50 = v82;
              v15 = v17;
              if (v82 != v17)
              {
                do
                {
                  v51 = (std::__shared_weak_count *)*(v50 - 1);
                  if (v51)
                  {
                    v52 = (unint64_t *)&v51->__shared_owners_;
                    do
                      v53 = __ldaxr(v52);
                    while (__stlxr(v53 - 1, v52));
                    if (!v53)
                    {
                      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                      std::__shared_weak_count::__release_weak(v51);
                    }
                  }
                  v50 -= 2;
                }
                while (v50 != v17);
                v15 = __p;
              }
              v82 = v17;
              operator delete(v15);
            }
            v14 = v16;
          }
          while (v16);
          v13 = (std::__shared_weak_count *)v84;
          LOBYTE(a5) = v79;
          v9 = v77;
          a3 = v78;
        }
        if (v13)
        {
          v54 = v85;
          v55 = v13;
          if (v85 != v13)
          {
            do
            {
              shared_weak_owners = (std::__shared_weak_count *)v54[-1].__shared_weak_owners_;
              if (shared_weak_owners)
              {
                v57 = (unint64_t *)&shared_weak_owners->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                  std::__shared_weak_count::__release_weak(shared_weak_owners);
                }
              }
              v54 = (std::__shared_weak_count *)((char *)v54 - 16);
            }
            while (v54 != v13);
            v55 = v84;
          }
          v85 = v13;
          operator delete(v55);
        }
        v67 = *(_QWORD *)(v9 + 32);
        if (!v67 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 48))(v67) & 1) == 0)
        {
          a3[1] = 0;
          sub_23941C5D8((uint64_t)a3, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4, 0);
          v69 = *(char **)a2;
          v68 = *(_QWORD *)(a2 + 8);
          v85 = 0;
          v86 = 0;
          v84 = 0;
          v70 = v68 - (_QWORD)v69;
          if (v70)
          {
            if ((v70 & 0x8000000000000000) != 0)
              sub_2394189F8();
            v71 = v70 >> 2;
            v72 = operator new(v70 >> 2);
            bzero(v72, v71);
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = sub_2399A0FC8(*(_QWORD *)&v69[v73]);
              *((_DWORD *)v72 + v74) = v75;
              if ((int)sub_2399A12E0(*(_QWORD **)(*(_QWORD *)a2 + v73), 1, v75) >= 1)
                *(_QWORD *)(*a3 + ((v74 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v74;
              if (*((_DWORD *)v72 + v74) >= 2u)
              {
                sub_239997DA8((char **)a2, v74, a5, **(float **)(v9 + 48), 0.0005);
                v76 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
                if (a3[1] != v76)
                  sub_23941C5D8((uint64_t)a3, v76, 0);
              }
              ++v74;
              v69 = *(char **)a2;
              v73 += 16;
            }
            while (v74 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
            operator delete(v72);
          }
        }
      }
    }
  }
}

void sub_239997B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_239997B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, void *);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2394631DC((void **)va);
  sub_2394631DC((void **)va1);
  _Unwind_Resume(a1);
}

void sub_239997BC0(uint64_t a1)
{
  uint64_t **v2;
  _QWORD **v3;
  unint64_t v4;
  unint64_t i;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  float v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  float v17;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  unsigned int v23;
  _DWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  unsigned int v29;
  _DWORD *v30;
  _QWORD *v31;

  v2 = (uint64_t **)(a1 + 104);
  v3 = (_QWORD **)(a1 + 96);
  sub_239421038(a1 + 96, *(_QWORD **)(a1 + 104));
  *(v2 - 1) = (uint64_t *)v2;
  *v2 = 0;
  v2[1] = 0;
  v4 = (unint64_t)v2[10];
  if (v4)
  {
    for (i = 0; i < v4; ++i)
    {
      v7 = *(unsigned int **)(a1 + 72);
      v8 = *(unsigned int **)(a1 + 80);
      if (v7 != v8)
      {
        v10 = -1;
        v11 = 3.4028e38;
        v12 = -3.4028e38;
        v13 = -1;
        do
        {
          v15 = *v7++;
          v14 = v15;
          v16 = i + v4 * v15;
          v9 = *(_QWORD *)(a1 + 336);
          v17 = *(float *)(v9 + 4 * v16);
          if (v17 > v12)
          {
            v10 = v14;
            v12 = *(float *)(v9 + 4 * v16);
          }
          if (v17 < v11)
          {
            v13 = v14;
            v11 = *(float *)(v9 + 4 * v16);
          }
        }
        while (v7 != v8);
        if (v10 != -1 && v13 != -1)
        {
          v19 = *v2;
          v20 = v2;
          v21 = v2;
          if (*v2)
          {
            v22 = *v2;
            while (1)
            {
              while (1)
              {
                v21 = (uint64_t **)v22;
                v23 = *((_DWORD *)v22 + 7);
                if (v10 >= v23)
                  break;
                v22 = *v21;
                v20 = v21;
                if (!*v21)
                  goto LABEL_24;
              }
              if (v23 >= v10)
                break;
              v22 = v21[1];
              if (!v22)
              {
                v20 = v21 + 1;
                goto LABEL_24;
              }
            }
          }
          else
          {
LABEL_24:
            v24 = operator new(0x20uLL);
            v24[7] = v10;
            *(_QWORD *)v24 = 0;
            *((_QWORD *)v24 + 1) = 0;
            *((_QWORD *)v24 + 2) = v21;
            *v20 = (uint64_t *)v24;
            v25 = (_QWORD *)**v3;
            if (v25)
            {
              *v3 = v25;
              v26 = *v20;
            }
            else
            {
              v26 = (uint64_t *)v24;
            }
            sub_2394213B8(*(uint64_t **)(a1 + 104), v26);
            v19 = *(uint64_t **)(a1 + 104);
            ++*(_QWORD *)(a1 + 112);
          }
          v27 = v2;
          v28 = v2;
          if (v19)
          {
            while (1)
            {
              while (1)
              {
                v28 = (uint64_t **)v19;
                v29 = *((_DWORD *)v19 + 7);
                if (v13 >= v29)
                  break;
                v19 = *v28;
                v27 = v28;
                if (!*v28)
                  goto LABEL_35;
              }
              if (v29 >= v13)
                break;
              v19 = v28[1];
              if (!v19)
              {
                v27 = v28 + 1;
                goto LABEL_35;
              }
            }
          }
          else
          {
LABEL_35:
            v30 = operator new(0x20uLL);
            v30[7] = v13;
            *(_QWORD *)v30 = 0;
            *((_QWORD *)v30 + 1) = 0;
            *((_QWORD *)v30 + 2) = v28;
            *v27 = (uint64_t *)v30;
            v31 = (_QWORD *)**v3;
            if (v31)
            {
              *v3 = v31;
              v6 = *v27;
            }
            else
            {
              v6 = (uint64_t *)v30;
            }
            sub_2394213B8(*(uint64_t **)(a1 + 104), v6);
            ++*(_QWORD *)(a1 + 112);
          }
        }
      }
      v4 = *(_QWORD *)(a1 + 184);
    }
  }
}

uint64_t sub_239997DA8(char **a1, unsigned int a2, char a3, float a4, float a5)
{
  char v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  __int128 v39;
  char *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  char *v48;
  char *v49;
  char *v50;
  void *v51;
  char *v52;
  void *v53;
  void *v54;
  char *v55;
  char *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  void *exception;
  uint64_t v63;
  void *v64;
  char *v65;
  char *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  void *__p;
  char *v71;
  uint64_t v72;
  unsigned int v73;
  float v74;
  float v75;
  _BYTE v76[360];
  uint64_t v77;

  v5 = a3;
  v77 = *MEMORY[0x24BDAC8D0];
  v74 = a5;
  v75 = a4;
  v73 = 0;
  v7 = a2;
  v8 = 16 * a2;
  v63 = v8;
  do
  {
    sub_239994764((uint64_t)v76, *(_QWORD *)&(*a1)[v8], (uint64_t)&v75, (uint64_t)&v74, v5);
    if ((sub_2399982D4((uint64_t)v76, &v73) & 1) != 0)
      goto LABEL_5;
    __p = 0;
    v71 = 0;
    v72 = 0;
    sub_23999DFFC(*(_QWORD *)&(*a1)[v8], (uint64_t)&__p);
    if (v71 == __p || (unint64_t)(v71 - (_BYTE *)__p) < 0x11)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x23B83DB6C](exception, "Unexpected boundary status.");
      __cxa_throw(exception, (struct type_info *)&unk_250ADB1A8, (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v10 = *a1;
    v12 = *(_QWORD *)__p;
    v11 = *((_QWORD *)__p + 1);
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = &v10[16 * v7];
    v16 = (std::__shared_weak_count *)*((_QWORD *)v15 + 1);
    *(_QWORD *)v15 = v12;
    *((_QWORD *)v15 + 1) = v11;
    if (!v16)
      goto LABEL_16;
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      v19 = v7;
      v20 = __p;
      if ((unint64_t)(v71 - (_BYTE *)__p) >= 0x11)
      {
LABEL_17:
        v21 = a1[1];
        v22 = 1;
        do
        {
          v24 = (unint64_t)a1[2];
          if ((unint64_t)v21 >= v24)
          {
            v28 = *a1;
            v29 = (v21 - *a1) >> 4;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 60)
              sub_2394189F8();
            v31 = v24 - (_QWORD)v28;
            if (v31 >> 3 > v30)
              v30 = v31 >> 3;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
              v32 = 0xFFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32 >> 60)
              sub_239418A80();
            v33 = (char *)operator new(16 * v32);
            v34 = &v33[16 * v29];
            v35 = v20[v22];
            *(_OWORD *)v34 = v35;
            if (*((_QWORD *)&v35 + 1))
            {
              v36 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
              v28 = *a1;
              v21 = a1[1];
            }
            v38 = &v33[16 * v32];
            v23 = v34 + 16;
            if (v21 == v28)
            {
              *a1 = v34;
              a1[1] = v23;
              a1[2] = v38;
            }
            else
            {
              do
              {
                v39 = *((_OWORD *)v21 - 1);
                v21 -= 16;
                *((_OWORD *)v34 - 1) = v39;
                v34 -= 16;
                *(_QWORD *)v21 = 0;
                *((_QWORD *)v21 + 1) = 0;
              }
              while (v21 != v28);
              v28 = *a1;
              v40 = a1[1];
              *a1 = v34;
              a1[1] = v23;
              a1[2] = v38;
              while (v40 != v28)
              {
                v41 = (std::__shared_weak_count *)*((_QWORD *)v40 - 1);
                if (v41)
                {
                  v42 = (unint64_t *)&v41->__shared_owners_;
                  do
                    v43 = __ldaxr(v42);
                  while (__stlxr(v43 - 1, v42));
                  if (!v43)
                  {
                    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                    std::__shared_weak_count::__release_weak(v41);
                  }
                }
                v40 -= 16;
              }
            }
            if (v28)
              operator delete(v28);
          }
          else
          {
            v25 = v20[v22];
            *(_OWORD *)v21 = v25;
            if (*((_QWORD *)&v25 + 1))
            {
              v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            v23 = v21 + 16;
          }
          a1[1] = v23;
          v22 = (v22 + 1);
          v20 = __p;
          v21 = v23;
        }
        while (v22 < (v71 - (_BYTE *)__p) >> 4);
      }
    }
    else
    {
LABEL_16:
      v19 = v7;
      v20 = __p;
      if ((unint64_t)(v71 - (_BYTE *)__p) >= 0x11)
        goto LABEL_17;
    }
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v7 = v19;
    v44 = (uint64_t *)&(*a1)[16 * v19];
    v45 = *(_QWORD *)(*v44 + 104);
    v46 = *(_QWORD *)(*v44 + 112);
    v65 = 0;
    v66 = 0;
    v64 = 0;
    v47 = v46 - v45;
    if (v46 != v45)
    {
      if (v47 < 0)
        sub_2394189F8();
      v48 = (char *)operator new(v46 - v45);
      v64 = v48;
      v66 = &v48[4 * (v47 >> 2)];
      bzero(v48, v47);
      v65 = &v48[v47];
    }
    v8 = v63;
    v73 = sub_2399A03BC(*v44, (uint64_t)&v67, &v64);
    if (v64)
    {
      v65 = (char *)v64;
      operator delete(v64);
    }
    v49 = (char *)v67;
    if (v67)
    {
      v50 = v68;
      v51 = v67;
      if (v68 != v67)
      {
        v52 = v68;
        do
        {
          v54 = (void *)*((_QWORD *)v52 - 3);
          v52 -= 24;
          v53 = v54;
          if (v54)
          {
            *((_QWORD *)v50 - 2) = v53;
            operator delete(v53);
          }
          v50 = v52;
        }
        while (v52 != v49);
        v51 = v67;
      }
      v68 = v49;
      operator delete(v51);
    }
    v55 = (char *)__p;
    if (__p)
    {
      v56 = v71;
      v9 = __p;
      if (v71 != __p)
      {
        do
        {
          v57 = (std::__shared_weak_count *)*((_QWORD *)v56 - 1);
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v56 -= 16;
        }
        while (v56 != v55);
        v9 = __p;
      }
      v71 = v55;
      operator delete(v9);
    }
    v5 = a3;
LABEL_5:
    sub_23998E424((uint64_t)v76);
  }
  while (v73 > 1);
  return 1;
}

void sub_239998230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_2394631DC(&a17);
  sub_23998E424((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_2399982D4(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  void *v19;
  void *v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  uint64_t v26;
  void *__p;
  void *v28;
  uint64_t v29;

  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(v4 + 104);
  v5 = *(_QWORD *)(v4 + 112);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_2394189F8();
    v8 = (char *)operator new(v5 - v6);
    v9 = &v8[4 * (v7 >> 2)];
    v21 = v8;
    v23 = v9;
    memset(v8, 255, v7 & 0xFFFFFFFFFFFFFFFCLL);
    v22 = v9;
  }
  v10 = sub_2399A03BC(v4, (uint64_t)&v24, &v21);
  *a2 = v10;
  if (v10 < 2)
  {
LABEL_13:
    v12 = 1;
    v13 = (char *)v21;
    if (!v21)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v25 - (_BYTE *)v24) >> 3) < 2)
  {
LABEL_12:
    *a2 = v10 - 1;
    goto LABEL_13;
  }
  __p = 0;
  v28 = 0;
  v29 = 0;
  v11 = sub_239999160(a1, &v24, &v21, (uint64_t)&__p);
  if ((v11 & 1) != 0)
    sub_2399992F8(a1, (uint64_t *)&__p);
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v10 = *a2;
    goto LABEL_12;
  }
  v12 = 0;
  v13 = (char *)v21;
  if (v21)
  {
LABEL_14:
    v22 = v13;
    operator delete(v13);
  }
LABEL_15:
  v14 = (char *)v24;
  if (v24)
  {
    v15 = v25;
    v16 = v24;
    if (v25 != v24)
    {
      v17 = v25;
      do
      {
        v19 = (void *)*((_QWORD *)v17 - 3);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *((_QWORD *)v15 - 2) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = v24;
    }
    v25 = v14;
    operator delete(v16);
  }
  return v12;
}

void sub_239998468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v18;

  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
    v18 = a10;
    if (!a10)
    {
LABEL_3:
      sub_23942A16C(&a13);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v18 = a10;
    if (!a10)
      goto LABEL_3;
  }
  operator delete(v18);
  sub_23942A16C(&a13);
  _Unwind_Resume(a1);
}

void sub_2399984C8(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  _DWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  int v46;
  char *v47;
  int64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  _DWORD *v54;
  unint64_t v55;
  char *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  unsigned int *v65;
  uint64_t v66;
  unsigned int *v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  float v75;
  unsigned int v76;
  float v77;
  float v78;
  uint64_t v79;
  int v80;
  std::__shared_weak_count *v81;
  unint64_t i;
  uint64_t v83;
  unsigned int *v84;
  unint64_t v85;
  __n128 v86;
  _OWORD *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  __n128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t *v100;
  unint64_t v101;
  _OWORD *v102;
  _OWORD *v103;
  void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  int v111;
  uint64_t v114;
  __int128 v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  void *__p;
  _BYTE *v120;
  char *v121;
  _DWORD v122[5];
  unsigned int v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  void *v127;
  void *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  uint64_t v134;
  _OWORD *v135;
  _OWORD *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;

  v8 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(v8 + 104);
  v9 = *(_QWORD *)(v8 + 112);
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v11 = v9 - v10;
  v12 = (v9 - v10) >> 2;
  if (v9 != v10)
  {
    if ((v11 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v13 = (v12 - 1) >> 6;
    v14 = operator new(8 * (v13 + 1));
    v15 = v14;
    v138 = (v9 - v10) >> 2;
    v139 = v13 + 1;
    v137 = (char *)v14;
    if (v11 >= 0x104)
      v16 = (v12 - 1) >> 6;
    else
      v16 = 0;
    v14[v16] = 0;
    if (v11 >= 0x100)
      bzero(v14, 8 * (v12 >> 6));
    if (v11 >> 2)
      v15[v12 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v11 >> 2));
  }
  sub_239996A30(&v135, (v9 - v10) >> 2);
  if (v9 != v10)
  {
    v17 = 0;
    if (v12 <= 1)
      v18 = 1;
    else
      v18 = (v9 - v10) >> 2;
    do
    {
      v19 = operator new(0x28uLL);
      v19[1] = 0;
      v19[2] = 0;
      *v19 = &off_250AF0F38;
      *((_DWORD *)v19 + 6) = 0;
      v19[4] = -1;
      v20 = &v135[v17];
      v21 = (std::__shared_weak_count *)v20[1];
      *v20 = v19 + 3;
      v20[1] = v19;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      ++v17;
    }
    while (v17 != v18);
    v134 = 0;
    v131 = 0;
    v132 = 0;
    v130 = 0;
    v133 = 0;
    if (v11 < 4)
    {
      v127 = 0;
      v128 = 0;
      v129 = 0;
      goto LABEL_26;
    }
LABEL_25:
    sub_23942D080((uint64_t)&v130, (v9 - v10) >> 2);
    v127 = 0;
    v128 = 0;
    v129 = 0;
    if ((v11 & 0x8000000000000000) != 0)
      sub_2394189F8();
LABEL_26:
    v26 = (char *)operator new(v9 - v10);
    v27 = &v26[4 * v12];
    v127 = v26;
    v129 = v27;
    memset_pattern16(v26, &unk_239ECEF60, v11 & 0xFFFFFFFFFFFFFFFCLL);
    v128 = v27;
    v24 = *(void **)a5;
    v25 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
    if (v25 < 1)
      goto LABEL_28;
    goto LABEL_27;
  }
  v134 = 0;
  v131 = 0;
  v132 = 0;
  v130 = 0;
  v133 = 0;
  if (v11 > 3)
    goto LABEL_25;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v24 = *(void **)a5;
  v25 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v25 >= 1)
LABEL_27:
    memset(v24, 255, 4 * (((unint64_t)v25 >> 2) - ((unint64_t)v25 > 3)) + 4);
LABEL_28:
  v28 = *a2 + 24 * a3;
  v29 = *(unsigned int **)(v28 + 8);
  if (v29 != *(unsigned int **)v28)
  {
    v30 = 0;
    v29 = *(unsigned int **)v28;
    do
    {
      v31 = *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v29[v30]) + 12);
      *(_QWORD *)&v137[(v31 >> 3) & 0x1FFFFFF8] |= 1 << v31;
      *((_DWORD *)v127 + v31) = 0;
      v32 = v135[v31];
      v33 = *(_DWORD **)&v135[v31];
      *v33 = 0x80000000;
      v33[1] = v31;
      v126 = v32;
      if (*((_QWORD *)&v32 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      sub_239996AC8(&v130, &v126);
      v36 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
      if (*((_QWORD *)&v126 + 1))
      {
        v37 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      ++v30;
      v29 = *(unsigned int **)v28;
    }
    while (v30 < (uint64_t)(*(_QWORD *)(v28 + 8) - *(_QWORD *)v28) >> 2);
  }
  v39 = sub_239962518(*(_QWORD *)(a1 + 40) + 104, v29);
  if (v9 != v10)
  {
    v40 = 0;
    v111 = *(_DWORD *)(*a4 + 4 * *(unsigned int *)(v39 + 12));
    if (v12 <= 1)
      v41 = 1;
    else
      v41 = (v9 - v10) >> 2;
    v114 = v41;
    while (1)
    {
      sub_23998E248(&v130, 0, &v124);
      if (v124)
      {
        v123 = *(_DWORD *)(v124 + 4);
        *(_QWORD *)&v137[((unint64_t)v123 >> 3) & 0x1FFFFFF8] |= 1 << v123;
        if (sub_2399423C8(*(_QWORD *)(a1 + 40), &v123) && (v42 = v123, *(_DWORD *)(*a4 + 4 * v123) != v111))
        {
          *a6 = v123;
          *a7 = *((_DWORD *)v127 + v42);
          v80 = 1;
          v81 = v125;
          if (v125)
            goto LABEL_120;
        }
        else
        {
          sub_239962B1C((uint64_t)v122, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v123);
          v43 = 0;
          __p = 0;
          v120 = 0;
          v121 = 0;
          while (1)
          {
            v45 = sub_239962B44(v122);
            v46 = v45;
            if (v45 == -1)
              break;
            if (v43 < v121)
            {
              *(_DWORD *)v43 = v45;
              v44 = (uint64_t)(v43 + 4);
              goto LABEL_49;
            }
            v47 = (char *)__p;
            v48 = v43 - (_BYTE *)__p;
            v49 = (v43 - (_BYTE *)__p) >> 2;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62)
              sub_2394189F8();
            v51 = v121 - (_BYTE *)__p;
            if ((v121 - (_BYTE *)__p) >> 1 > v50)
              v50 = v51 >> 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
              v52 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
            {
              if (v52 >> 62)
                sub_239418A80();
              v53 = operator new(4 * v52);
              v54 = &v53[4 * v49];
              *v54 = v46;
              v44 = (uint64_t)(v54 + 1);
              if (v43 == v47)
              {
LABEL_67:
                __p = v54;
                v120 = (_BYTE *)v44;
                v121 = &v53[4 * v52];
                if (!v43)
                  goto LABEL_49;
LABEL_68:
                operator delete(v43);
                goto LABEL_49;
              }
            }
            else
            {
              v53 = 0;
              v54 = (_DWORD *)(4 * v49);
              *(_DWORD *)(4 * v49) = v46;
              v44 = 4 * v49 + 4;
              if (v43 == v47)
                goto LABEL_67;
            }
            v55 = v43 - 4 - v47;
            if (v55 < 0xBC)
            {
              v56 = v43;
              goto LABEL_63;
            }
            if (&v53[v48 - 4 - (v55 & 0xFFFFFFFFFFFFFFFCLL)] > &v53[v48 - 4])
            {
              v56 = v43;
              do
              {
LABEL_63:
                v57 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *--v54 = v57;
              }
              while (v56 != v47);
              goto LABEL_64;
            }
            if (&v43[-(v55 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v43 - 4)
            {
              v56 = v43;
              goto LABEL_63;
            }
            if ((unint64_t)(v43 - v53 - v48) < 0x20)
            {
              v56 = v43;
              goto LABEL_63;
            }
            v58 = (v55 >> 2) + 1;
            v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
            v56 = &v43[-v59];
            v54 = (_DWORD *)((char *)v54 - v59);
            v60 = &v53[4 * v49 - 16];
            v61 = v43 - 16;
            v62 = v58 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v63 = *(_OWORD *)v61;
              *(v60 - 1) = *((_OWORD *)v61 - 1);
              *v60 = v63;
              v60 -= 2;
              v61 -= 32;
              v62 -= 8;
            }
            while (v62);
            if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_63;
LABEL_64:
            v43 = (char *)__p;
            __p = v54;
            v120 = (_BYTE *)v44;
            v121 = &v53[4 * v52];
            if (v43)
              goto LABEL_68;
LABEL_49:
            v120 = (_BYTE *)v44;
            v43 = (char *)v44;
          }
          if (v43 != __p)
          {
            v64 = 0;
            v43 = (char *)__p;
            do
            {
              v65 = (unsigned int *)&v43[4 * v64];
              v66 = *(_QWORD *)(a1 + 40) + 104;
              v67 = (unsigned int *)sub_239962518(v66, v65);
              v68 = *(unsigned int *)(sub_239962518(v66, v67) + 12);
              if (((*(_QWORD *)&v137[(v68 >> 3) & 0x1FFFFFF8] >> v68) & 1) == 0)
              {
                v69 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
                v70 = *v69;
                v71 = (std::__shared_weak_count *)v69[1];
                if (v71)
                {
                  v72 = (unint64_t *)&v71->__shared_owners_;
                  do
                    v73 = __ldxr(v72);
                  while (__stxr(v73 + 1, v72));
                  do
                    v74 = __ldaxr(v72);
                  while (__stlxr(v74 - 1, v72));
                  if (!v74)
                  {
                    ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                    std::__shared_weak_count::__release_weak(v71);
                  }
                }
                v75 = *(float *)(*(_QWORD *)(v70 + 40) + 4 * *v65);
                v76 = v123;
                v77 = *((float *)v127 + v123);
                if (v75 < (float)(v77 * 0.0000001))
                  v75 = v77 * 0.0000001;
                v78 = v77 + v75;
                if (*((float *)v127 + v68) > v78)
                {
                  v79 = 4 * v68;
                  *(float *)((char *)v127 + v79) = v78;
                  *(_DWORD *)(*(_QWORD *)a5 + v79) = v76;
                }
              }
              ++v64;
              v43 = (char *)__p;
            }
            while (v64 < (v120 - (_BYTE *)__p) >> 2);
            if (v120 != __p)
            {
              for (i = 0; i < (v120 - (_BYTE *)__p) >> 2; ++i)
              {
                v83 = *(_QWORD *)(a1 + 40) + 104;
                v84 = (unsigned int *)sub_239962518(v83, (unsigned int *)&v43[4 * i]);
                v85 = *(unsigned int *)(sub_239962518(v83, v84) + 12);
                if (((*(_QWORD *)&v137[(v85 >> 3) & 0x1FFFFFF8] >> v85) & 1) == 0)
                {
                  v87 = v135;
                  v88 = *(_QWORD *)&v135[v85];
                  if (*(_QWORD *)(v88 + 8) == -1)
                  {
                    *(_DWORD *)(v88 + 4) = v85;
                    *(float *)v88 = -*((float *)v127 + v85);
                    *(_QWORD *)&v116 = v88;
                    v96 = *((_QWORD *)&v87[v85] + 1);
                    *((_QWORD *)&v116 + 1) = v96;
                    if (v96)
                    {
                      v97 = (unint64_t *)(v96 + 8);
                      do
                        v98 = __ldxr(v97);
                      while (__stxr(v98 + 1, v97));
                    }
                    sub_239996AC8(&v130, &v116);
                    v93 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
                    if (!*((_QWORD *)&v116 + 1))
                      goto LABEL_97;
                    v99 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                    do
                      v95 = __ldaxr(v99);
                    while (__stlxr(v95 - 1, v99));
                  }
                  else
                  {
                    v117 = *(_QWORD *)&v135[v85];
                    v89 = (std::__shared_weak_count *)*((_QWORD *)&v135[v85] + 1);
                    v118 = v89;
                    if (v89)
                    {
                      v90 = (unint64_t *)&v89->__shared_owners_;
                      do
                        v91 = __ldxr(v90);
                      while (__stxr(v91 + 1, v90));
                    }
                    v86.n128_f32[0] = -*((float *)v127 + v85);
                    v92.n128_f32[0] = sub_23999702C(&v130, &v117, v86);
                    v93 = v118;
                    if (!v118)
                      goto LABEL_97;
                    v94 = (unint64_t *)&v118->__shared_owners_;
                    do
                      v95 = __ldaxr(v94);
                    while (__stlxr(v95 - 1, v94));
                  }
                  if (!v95)
                  {
                    ((void (*)(std::__shared_weak_count *, __n128))v93->__on_zero_shared)(v93, v92);
                    std::__shared_weak_count::__release_weak(v93);
                  }
                }
LABEL_97:
                v43 = (char *)__p;
              }
            }
          }
          if (v43)
          {
            v120 = v43;
            operator delete(v43);
          }
          v80 = 0;
          v81 = v125;
          if (v125)
          {
LABEL_120:
            v100 = (unint64_t *)&v81->__shared_owners_;
            do
              v101 = __ldaxr(v100);
            while (__stlxr(v101 - 1, v100));
            if (!v101)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
      }
      else
      {
        v80 = 8;
        v81 = v125;
        if (v125)
          goto LABEL_120;
      }
      if (!v80 && ++v40 != v114)
        continue;
      break;
    }
  }
  if (v127)
  {
    v128 = v127;
    operator delete(v127);
  }
  sub_23999C398((uint64_t)&v130);
  v102 = v135;
  if (v135)
  {
    v103 = v136;
    v104 = v135;
    if (v136 != v135)
    {
      do
      {
        v105 = (std::__shared_weak_count *)*((_QWORD *)v103 - 1);
        if (v105)
        {
          v106 = (unint64_t *)&v105->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
            std::__shared_weak_count::__release_weak(v105);
          }
        }
        --v103;
      }
      while (v103 != v102);
      v104 = v135;
    }
    v136 = v102;
    operator delete(v104);
  }
  if (v137)
    operator delete(v137);
}

void sub_239998F34(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;

  v6 = a3;
  v7 = *(char **)a4;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  do
  {
    while (1)
    {
      v8 = *(_QWORD *)(a4 + 16);
      if ((unint64_t)v7 >= v8)
        break;
      *(_DWORD *)v7 = v6;
      v7 += 4;
      *(_QWORD *)(a4 + 8) = v7;
      v6 = *(unsigned int *)(*a2 + 4 * v6);
      if ((_DWORD)v6 == -1)
        goto LABEL_30;
    }
    v9 = *(char **)a4;
    v10 = (uint64_t)&v7[-*(_QWORD *)a4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_2394189F8();
    v13 = v8 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_239418A80();
      v15 = operator new(4 * v14);
      v16 = &v15[4 * v11];
      *v16 = v6;
      v17 = (uint64_t)(v16 + 1);
      if (v7 == v9)
        goto LABEL_27;
    }
    else
    {
      v15 = 0;
      v16 = (_DWORD *)(4 * v11);
      *(_DWORD *)(4 * v11) = v6;
      v17 = 4 * v11 + 4;
      if (v7 == v9)
        goto LABEL_27;
    }
    v18 = v7 - 4 - v9;
    if (v18 < 0xBC)
    {
      v19 = v7;
      goto LABEL_26;
    }
    if (&v15[v10 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v10 - 4])
    {
      v19 = v7;
      goto LABEL_26;
    }
    if (&v7[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v7 - 4)
    {
      v19 = v7;
      do
      {
LABEL_26:
        v26 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *--v16 = v26;
      }
      while (v19 != v9);
      goto LABEL_27;
    }
    if ((unint64_t)(v7 - v15 - v10) < 0x20)
    {
      v19 = v7;
      goto LABEL_26;
    }
    v20 = (v18 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v19 = &v7[-v21];
    v16 = (_DWORD *)((char *)v16 - v21);
    v22 = &v15[4 * v11 - 16];
    v23 = v7 - 16;
    v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_26;
LABEL_27:
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 8) = v17;
    *(_QWORD *)(a4 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
    v7 = (char *)v17;
    *(_QWORD *)(a4 + 8) = v17;
    v6 = *(unsigned int *)(*a2 + 4 * v6);
  }
  while ((_DWORD)v6 != -1);
LABEL_30:
  v27 = *(char **)a4;
  v28 = ((uint64_t)&v7[-*(_QWORD *)a4] >> 2) - 1;
  if ((uint64_t)&v7[-*(_QWORD *)a4] >> 2 != 1)
  {
    v29 = 0;
    do
    {
      v30 = *(_DWORD *)&v27[4 * v29];
      *(_DWORD *)&v27[4 * v29] = *(_DWORD *)&v27[4 * v28];
      *(_DWORD *)&v27[4 * v28] = v30;
      ++v29;
      --v28;
    }
    while (v29 < v28);
  }
}

uint64_t sub_239999160(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  unsigned int v18;
  float v19;
  char *v20;
  char *v21;
  char *v22;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112);
  v21 = 0;
  v22 = 0;
  v20 = 0;
  v10 = v9 - v8;
  if (v9 == v8)
  {
    v11 = 0;
    if (a2[1] == *a2)
      goto LABEL_11;
LABEL_6:
    v12 = 0;
    v13 = 3.4028e38;
    while (1)
    {
      v18 = -1;
      v19 = 0.0;
      sub_2399984C8(a1, a2, v12, a3, (uint64_t)&v20, &v18, &v19);
      if (v18 == -1)
        break;
      v15 = v19;
      if (v19 < v13)
      {
        sub_239998F34(v14, &v20, v18, a4);
        v13 = v15;
      }
      if (++v12 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3))
        goto LABEL_11;
    }
    v16 = 0;
    if (v11)
      goto LABEL_12;
    return v16;
  }
  if (v10 < 0)
    sub_2394189F8();
  v11 = (char *)operator new(v9 - v8);
  v20 = v11;
  v22 = &v11[4 * (v10 >> 2)];
  bzero(v11, v10);
  v21 = &v11[v10];
  if (a2[1] != *a2)
    goto LABEL_6;
LABEL_11:
  v16 = 1;
  if (v11)
LABEL_12:
    operator delete(v11);
  return v16;
}

void sub_2399992CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399992F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  unsigned int *v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  __int128 *v46;
  uint64_t v47;
  __int128 v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  unsigned int *v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  unsigned int *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  _DWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99[2];
  char v100;
  unsigned int v101[4];
  __int128 v102;
  unsigned int *v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  void *__p;
  char *v112;
  char *v113;
  unsigned int *v114;
  unsigned int *v115;
  uint64_t v116;
  _DWORD v117[3];

  v114 = 0;
  v115 = 0;
  v116 = 0;
  sub_239999D90(a1, a2, (uint64_t)&v114);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v3 + 104);
  v4 = *(_QWORD *)(v3 + 112);
  v6 = v114;
  if ((char *)v115 - (char *)v114 == 4)
  {
    v7 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      v101[0] = v6[v8++];
      v117[0] = v6[v8];
      __p = 0;
      v112 = 0;
      v113 = 0;
      v99[0] = (void *)-1;
      sub_23999A020(a1, v101, v117, (char **)&__p, v99);
      v9 = *(_QWORD *)(a1 + 40);
      v10 = v101[0];
      v11 = (uint64_t *)(*(_QWORD *)(v9 + 8) + 16 * *(unsigned int *)(v9 + 176));
      v13 = *v11;
      v12 = (std::__shared_weak_count *)v11[1];
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v102 = *(_OWORD *)(*(_QWORD *)(v13 + 40) + 16 * v10);
      v109 = -1;
      v110 = sub_23992B920(v9, &v102, &v109);
      v17 = *(_QWORD *)(a1 + 40);
      LODWORD(v103) = -1;
      *(_QWORD *)&v102 = -1;
      *((_QWORD *)&v102 + 1) = -1;
      v109 = sub_23996142C(v17, 1, &v102);
      v18 = *(_QWORD *)(a1 + 40);
      LODWORD(v103) = -1;
      *(_QWORD *)&v102 = -1;
      *((_QWORD *)&v102 + 1) = -1;
      v108 = sub_23996142C(v18, 1, &v102);
      LODWORD(v102) = *((_DWORD *)v112 - 1);
      v107 = *(_DWORD *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, (unsigned int *)&v102) + 4);
      v19 = (unint64_t)v99[0];
      v106 = *((_DWORD *)__p + (uint64_t)v99[0]);
      v105 = *(_DWORD *)sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v106);
      v20 = *(_QWORD *)(a1 + 40) + 104;
      v21 = (unsigned int *)sub_239962518(v20, (unsigned int *)__p);
      v104 = *(_DWORD *)(sub_239962518(v20, v21) + 12);
      sub_23996253C(*(_QWORD *)(a1 + 40) + 104, &v107, &v108);
      sub_23996253C(*(_QWORD *)(a1 + 40) + 104, &v108, &v109);
      sub_23996253C(*(_QWORD *)(a1 + 40) + 104, &v109, &v102);
      sub_23996256C(*(_QWORD *)(a1 + 40) + 104, &v106, &v109);
      sub_23996256C(*(_QWORD *)(a1 + 40) + 104, &v105, &v108);
      v22 = (char *)__p;
      if (v19 < (v112 - (_BYTE *)__p) >> 2)
      {
        v23 = 4 * v19;
        do
        {
          sub_2399625C8((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v22[v23], &v110);
          ++v19;
          v22 = (char *)__p;
          v23 += 4;
        }
        while (v19 < (v112 - (_BYTE *)__p) >> 2);
      }
      sub_2399625C8((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v109, v117);
      sub_2399625C8((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v108, v101);
      sub_2399625C8((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v107, &v104);
      if (__p)
      {
        v112 = (char *)__p;
        operator delete(__p);
      }
      v6 = v114;
      v7 = v115 - v114 - 1;
    }
    while (v8 < v7);
    v3 = *(_QWORD *)(a1 + 40);
  }
  v110 = v6[v7];
  __p = 0;
  v112 = 0;
  v113 = 0;
  v102 = 0uLL;
  v103 = 0;
  sub_239962B1C((uint64_t)v101, (_QWORD *)(v3 + 104), &v110);
  v24 = sub_239962B88(v101);
  v109 = v24;
  v98 = (unint64_t)(v4 - v5) >> 2;
  v108 = *(_DWORD *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v109) + 4);
  do
  {
    v25 = v112;
    if (v112 < v113)
    {
      *(_DWORD *)v112 = v24;
      v26 = (uint64_t)(v25 + 4);
      goto LABEL_31;
    }
    v27 = __p;
    v28 = v112 - (_BYTE *)__p;
    v29 = (v112 - (_BYTE *)__p) >> 2;
    v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 62)
      sub_2394189F8();
    v31 = v113 - (_BYTE *)__p;
    if ((v113 - (_BYTE *)__p) >> 1 > v30)
      v30 = v31 >> 1;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
      v32 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 62)
        sub_239418A80();
      v33 = operator new(4 * v32);
      v34 = (unsigned int *)&v33[4 * v29];
      *v34 = v24;
      v26 = (uint64_t)(v34 + 1);
      if (v25 == v27)
      {
LABEL_29:
        __p = v34;
        v113 = &v33[4 * v32];
        if (v25)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    else
    {
      v33 = 0;
      v34 = (unsigned int *)(4 * v29);
      *(_DWORD *)(4 * v29) = v24;
      v26 = 4 * v29 + 4;
      if (v25 == v27)
        goto LABEL_29;
    }
    v41 = v25 - 4 - v27;
    if (v41 < 0x2C)
      goto LABEL_122;
    if ((unint64_t)(v25 - &v33[v28]) < 0x20)
      goto LABEL_122;
    v42 = (v41 >> 2) + 1;
    v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
    v44 = &v25[-v43];
    v34 = (unsigned int *)((char *)v34 - v43);
    v45 = &v33[4 * v29 - 16];
    v46 = (__int128 *)(v25 - 16);
    v47 = v42 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v48 = *v46;
      *(v45 - 1) = *(v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 2;
      v47 -= 8;
    }
    while (v47);
    v25 = v44;
    if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_122:
      do
      {
        v49 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *--v34 = v49;
      }
      while (v25 != v27);
    }
    v25 = __p;
    __p = v34;
    v113 = &v33[4 * v32];
    if (v25)
LABEL_30:
      operator delete(v25);
LABEL_31:
    v112 = (char *)v26;
    v24 = sub_239962B88(v101);
    v35 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
    v37 = *v35;
    v36 = (std::__shared_weak_count *)v35[1];
    if (v36)
    {
      v38 = (unint64_t *)&v36->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      do
        v40 = __ldaxr(v38);
      while (__stlxr(v40 - 1, v38));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  while (((*(_QWORD *)(*(_QWORD *)(v37 + 40) + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) == 0
       && v24 != -1);
  v107 = v24;
  v106 = *(_DWORD *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v107) + 4);
  v50 = (unsigned int *)*((_QWORD *)&v102 + 1);
  do
  {
    if (v50 < v103)
    {
      *v50++ = v24;
      goto LABEL_64;
    }
    v51 = (unsigned int *)v102;
    v52 = (char *)v50 - v102;
    v53 = (uint64_t)((uint64_t)v50 - v102) >> 2;
    v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 62)
      sub_2394189F8();
    v55 = (uint64_t)v103 - v102;
    if ((uint64_t)((uint64_t)v103 - v102) >> 1 > v54)
      v54 = v55 >> 1;
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
      v56 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v56 = v54;
    if (v56)
    {
      if (v56 >> 62)
        sub_239418A80();
      v57 = operator new(4 * v56);
      v58 = (unsigned int *)&v57[4 * v53];
      *v58 = v24;
      v59 = (uint64_t)(v58 + 1);
      if (v50 == v51)
        goto LABEL_61;
LABEL_67:
      v60 = (char *)(v50 - 1) - (char *)v51;
      if (v60 >= 0xBC)
      {
        if (&v52[(_QWORD)v57 - 4 - (v60 & 0xFFFFFFFFFFFFFFFCLL)] > &v52[(_QWORD)v57 - 4])
        {
          v61 = v50;
        }
        else if ((unsigned int *)((char *)v50 - (v60 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v50 - 1)
        {
          v61 = v50;
        }
        else if ((unint64_t)((char *)v50 - v57 - (_QWORD)v52) >= 0x20)
        {
          v63 = (v60 >> 2) + 1;
          v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
          v61 = &v50[v64 / 0xFFFFFFFFFFFFFFFCLL];
          v58 = (unsigned int *)((char *)v58 - v64);
          v65 = &v57[4 * v53 - 16];
          v66 = v50 - 4;
          v67 = v63 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v68 = *(_OWORD *)v66;
            *(v65 - 1) = *((_OWORD *)v66 - 1);
            *v65 = v68;
            v65 -= 2;
            v66 -= 8;
            v67 -= 8;
          }
          while (v67);
          if (v63 == (v63 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_70:
            v50 = (unsigned int *)v102;
            *(_QWORD *)&v102 = v58;
            *((_QWORD *)&v102 + 1) = v59;
            v103 = (unsigned int *)&v57[4 * v56];
            if (!v50)
              goto LABEL_63;
LABEL_62:
            operator delete(v50);
            goto LABEL_63;
          }
        }
        else
        {
          v61 = v50;
        }
      }
      else
      {
        v61 = v50;
      }
      do
      {
        v62 = *--v61;
        *--v58 = v62;
      }
      while (v61 != v51);
      goto LABEL_70;
    }
    v57 = 0;
    v58 = (unsigned int *)(4 * v53);
    *(_DWORD *)(4 * v53) = v24;
    v59 = 4 * v53 + 4;
    if (v50 != v51)
      goto LABEL_67;
LABEL_61:
    *(_QWORD *)&v102 = v58;
    *((_QWORD *)&v102 + 1) = v59;
    v103 = (unsigned int *)&v57[4 * v56];
    if (v50)
      goto LABEL_62;
LABEL_63:
    v50 = (unsigned int *)v59;
LABEL_64:
    *((_QWORD *)&v102 + 1) = v50;
    v24 = sub_239962B88(v101);
  }
  while (v24 != -1);
  v69 = *(_QWORD *)(a1 + 40);
  v70 = v110;
  v71 = (uint64_t *)(*(_QWORD *)(v69 + 8) + 16 * *(unsigned int *)(v69 + 176));
  v73 = *v71;
  v72 = (std::__shared_weak_count *)v71[1];
  if (v72)
  {
    v74 = (unint64_t *)&v72->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
    do
      v76 = __ldaxr(v74);
    while (__stlxr(v76 - 1, v74));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  *(_OWORD *)v99 = *(_OWORD *)(*(_QWORD *)(v73 + 40) + 16 * v70);
  v117[0] = -1;
  v105 = sub_23992B920(v69, v99, v117);
  sub_23996253C(*(_QWORD *)(a1 + 40) + 104, &v106, &v109);
  sub_23996253C(*(_QWORD *)(a1 + 40) + 104, &v108, &v107);
  v78 = (_DWORD *)*((_QWORD *)&v102 + 1);
  v77 = (void *)v102;
  if ((_QWORD)v102 != *((_QWORD *)&v102 + 1))
  {
    v79 = (_DWORD *)v102;
    do
      sub_2399625C8((_QWORD *)(*(_QWORD *)(a1 + 40) + 104), v79++, &v105);
    while (v79 != v78);
  }
  v80 = *(_QWORD *)(a1 + 40);
  v100 = 15;
  strcpy((char *)v99, "v:index_in_root");
  v117[0] = -1;
  v81 = sub_23999C498((uint64_t **)(v80 + 8), (uint64_t)v117, (unsigned __int8 *)v99);
  if (v100 < 0)
    operator delete(v99[0]);
  if (v115 != v114)
  {
    v82 = 0;
    v83 = 0;
    do
    {
      v84 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * v81);
      v86 = *v84;
      v85 = (std::__shared_weak_count *)v84[1];
      if (v85)
      {
        v87 = (unint64_t *)&v85->__shared_owners_;
        do
          v88 = __ldxr(v87);
        while (__stxr(v88 + 1, v87));
        do
          v89 = __ldaxr(v87);
        while (__stlxr(v89 - 1, v87));
        if (!v89)
        {
          ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
          std::__shared_weak_count::__release_weak(v85);
        }
      }
      v90 = v114[v82];
      v91 = *(_QWORD *)(v86 + 40);
      v92 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * v81);
      v94 = *v92;
      v93 = (std::__shared_weak_count *)v92[1];
      if (v93)
      {
        v95 = (unint64_t *)&v93->__shared_owners_;
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
        do
          v97 = __ldaxr(v95);
        while (__stlxr(v97 - 1, v95));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v94 + 40) + 4 * (v83 + v98)) = *(_DWORD *)(v91 + 4 * v90);
      v82 = ++v83;
    }
    while (v83 < (unint64_t)(v115 - v114));
    v77 = (void *)v102;
  }
  if (v77)
    operator delete(v77);
  if (__p)
    operator delete(__p);
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
}

void sub_239999C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  void *v32;
  void *v33;

  if (a16 < 0)
  {
    operator delete(__p);
    v31 = a20;
    if (!a20)
    {
LABEL_3:
      v32 = a28;
      if (!a28)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v31 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v31);
  v32 = a28;
  if (!a28)
  {
LABEL_4:
    v33 = *(void **)(v29 - 120);
    if (!v33)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v32);
  v33 = *(void **)(v29 - 120);
  if (!v33)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v29 - 112) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_239999D90(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;

  v7 = *a2;
  v6 = a2[1];
  if (v6 - *a2 == 4)
  {
    v8 = 0xFFFFFFFFLL;
    if ((unint64_t)((v6 - v7) >> 2) <= 0xFFFFFFFF)
      return;
    goto LABEL_10;
  }
  v9 = 0;
  LODWORD(v10) = 0;
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 40);
    v39 = *(_DWORD *)(v7 + 4 * v9);
    if (!sub_2399423C8(v11, &v39))
      break;
    v10 = (v10 + 1);
    v7 = *a2;
    v12 = a2[1];
    v9 = v10;
    if (((v12 - *a2) >> 2) - 1 <= v10)
    {
      v8 = (v10 - 1);
      if (v8 >= (v12 - v7) >> 2)
        return;
LABEL_10:
      v13 = v8;
      while (2)
      {
        v15 = *(char **)(a3 + 8);
        v14 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v15 < v14)
        {
          *(_DWORD *)v15 = *(_DWORD *)(v7 + 4 * v13);
          v16 = (uint64_t)(v15 + 4);
          goto LABEL_33;
        }
        v17 = v8;
        v18 = a1;
        v19 = *(char **)a3;
        v20 = (uint64_t)&v15[-*(_QWORD *)a3];
        v21 = v20 >> 2;
        v22 = (v20 >> 2) + 1;
        if (v22 >> 62)
          sub_2394189F8();
        v23 = v14 - (_QWORD)v19;
        if (v23 >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        v37 = v22;
        if (v22)
        {
          if (v22 >> 62)
            sub_239418A80();
          v24 = operator new(4 * v22);
          v25 = &v24[4 * v21];
          *v25 = *(_DWORD *)(v7 + 4 * v13);
          v16 = (uint64_t)(v25 + 1);
          if (v15 != v19)
          {
LABEL_22:
            v26 = v15 - 4 - v19;
            if (v26 < 0x2C)
            {
              a1 = v18;
              v8 = v17;
              goto LABEL_30;
            }
            v27 = v15 - &v24[v20];
            a1 = v18;
            v8 = v17;
            if (v27 < 0x20)
              goto LABEL_40;
            v28 = (v26 >> 2) + 1;
            v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
            v30 = &v15[-v29];
            v25 = (_DWORD *)((char *)v25 - v29);
            v31 = &v24[4 * v21 - 16];
            v32 = v15 - 16;
            v33 = v28 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v34 = *(_OWORD *)v32;
              *(v31 - 1) = *((_OWORD *)v32 - 1);
              *v31 = v34;
              v31 -= 2;
              v32 -= 32;
              v33 -= 8;
            }
            while (v33);
            v15 = v30;
            if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_40:
              do
              {
LABEL_30:
                v35 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *--v25 = v35;
              }
              while (v15 != v19);
            }
LABEL_31:
            *(_QWORD *)a3 = v25;
            *(_QWORD *)(a3 + 8) = v16;
            *(_QWORD *)(a3 + 16) = &v24[4 * v37];
            if (v19)
              operator delete(v19);
LABEL_33:
            *(_QWORD *)(a3 + 8) = v16;
            if (v13 != v8)
            {
              v36 = *(_QWORD *)(a1 + 40);
              v38 = *(_DWORD *)(*a2 + 4 * v13);
              if (sub_2399423C8(v36, &v38))
                return;
            }
            ++v13;
            v7 = *a2;
            if (v13 >= (a2[1] - *a2) >> 2)
              return;
            continue;
          }
        }
        else
        {
          v24 = 0;
          v25 = (_DWORD *)(4 * v21);
          *(_DWORD *)(4 * v21) = *(_DWORD *)(v7 + 4 * v13);
          v16 = 4 * v21 + 4;
          if (v15 != v19)
            goto LABEL_22;
        }
        break;
      }
      a1 = v18;
      v8 = v17;
      goto LABEL_31;
    }
  }
  v7 = *a2;
  v8 = (v10 - 1);
  if (v8 < (a2[1] - *a2) >> 2)
    goto LABEL_10;
}

void sub_23999A020(uint64_t a1, unsigned int *a2, _DWORD *a3, char **a4, _QWORD *a5)
{
  int v8;
  int v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  _DWORD v52[4];
  void *__p;
  char *v54;
  uint64_t v55;

  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_239962B1C((uint64_t)v52, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), a2);
  while (1)
  {
    v8 = sub_239962B44(v52);
    v9 = v8;
    v10 = a4[1];
    if (v8 == -1)
      break;
    v11 = (unint64_t)a4[2];
    if ((unint64_t)v10 < v11)
    {
      *(_DWORD *)v10 = v8;
      a4[1] = v10 + 4;
    }
    else
    {
      v12 = *a4;
      v13 = v10 - *a4;
      v14 = v13 >> 2;
      v15 = (v13 >> 2) + 1;
      if (v15 >> 62)
        sub_2394189F8();
      v16 = v11 - (_QWORD)v12;
      if (v16 >> 1 > v15)
        v15 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 62)
          sub_239418A80();
        v18 = operator new(4 * v17);
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v9;
        v20 = (uint64_t)(v19 + 4);
        if (v10 == v12)
        {
LABEL_14:
          *a4 = v19;
          a4[1] = (char *)v20;
          a4[2] = &v18[4 * v17];
          if (!v10)
            goto LABEL_16;
LABEL_15:
          operator delete(v10);
          goto LABEL_16;
        }
      }
      else
      {
        v18 = 0;
        v19 = (char *)(4 * v14);
        *(_DWORD *)(4 * v14) = v9;
        v20 = 4 * v14 + 4;
        if (v10 == v12)
          goto LABEL_14;
      }
      v21 = v10 - 4 - v12;
      if (v21 < 0x2C)
        goto LABEL_60;
      if ((unint64_t)(v10 - &v18[v13]) < 0x20)
        goto LABEL_60;
      v22 = (v21 >> 2) + 1;
      v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      v24 = &v10[-v23];
      v19 -= v23;
      v25 = &v18[4 * v14 - 16];
      v26 = (__int128 *)(v10 - 16);
      v27 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v28 = *v26;
        *(v25 - 1) = *(v26 - 1);
        *v25 = v28;
        v25 -= 2;
        v26 -= 2;
        v27 -= 8;
      }
      while (v27);
      v10 = v24;
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_60:
        do
        {
          v29 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v19 - 1) = v29;
          v19 -= 4;
        }
        while (v10 != v12);
      }
      v10 = *a4;
      *a4 = v19;
      a4[1] = (char *)v20;
      a4[2] = &v18[4 * v17];
      if (v10)
        goto LABEL_15;
LABEL_16:
      a4[1] = (char *)v20;
    }
  }
  v30 = *a4;
  v31 = v10 - *a4;
  v32 = (v54 - (_BYTE *)__p) >> 2;
  if (v31 >> 1 <= v32)
  {
    if (v31 >> 1 < v32)
      v54 = (char *)__p + 4 * (v31 >> 1);
  }
  else
  {
    sub_2394EE834(&__p, (v31 >> 1) - v32);
  }
  v33 = v31 >> 2;
  if (v10 != v30)
  {
    v34 = 0;
    if (v33 <= 1)
      v35 = 1;
    else
      v35 = v31 >> 2;
    do
    {
      v36 = 4 * v34;
      *(_DWORD *)((char *)__p + v36) = *(_DWORD *)&(*a4)[4 * v34];
      *(_DWORD *)((char *)__p + 4 * v33 + v36) = *(_DWORD *)&(*a4)[4 * v34++];
    }
    while (v35 != v34);
  }
  v37 = (unsigned int *)__p;
  if (v54 == __p)
  {
LABEL_45:
    v38 = -1;
  }
  else
  {
    v38 = 0;
    while (1)
    {
      v39 = v37[v38];
      v40 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16
                                                                 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
      v42 = *v40;
      v41 = (std::__shared_weak_count *)v40[1];
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v44 = __ldxr(p_shared_owners);
        while (__stxr(v44 + 1, p_shared_owners));
        do
          v45 = __ldaxr(p_shared_owners);
        while (__stlxr(v45 - 1, p_shared_owners));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (((*(_QWORD *)(*(_QWORD *)(v42 + 40) + ((v39 >> 3) & 0x1FFFFFF8)) >> v39) & 1) != 0)
        break;
      ++v38;
      v37 = (unsigned int *)__p;
      if (v38 >= (v54 - (_BYTE *)__p) >> 2)
        goto LABEL_45;
    }
  }
  if (v10 != v30)
  {
    v46 = 0;
    v47 = v38 + 1;
    if (v33 <= 1)
      v48 = 1;
    else
      v48 = v33;
    do
    {
      *(_DWORD *)&(*a4)[4 * v46] = *((_DWORD *)__p + v47 + v46);
      v49 = *(_QWORD *)(a1 + 40) + 104;
      v50 = (unsigned int *)sub_239962518(v49, (unsigned int *)&(*a4)[4 * v46]);
      if (*(_DWORD *)(sub_239962518(v49, v50) + 12) == *a3)
        *a5 = v46;
      ++v46;
    }
    while (v46 != v48);
  }
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
}

void sub_23999A3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23999A3E8(uint64_t a1, char *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float v49;
  unsigned int v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  uint64_t v74;
  unsigned int v75;
  float32x4_t v76;
  float32x4_t v77;
  unsigned int v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int i;
  unint64_t v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t *v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  float32x4_t v109;
  float32x4_t v110;
  uint64_t *v111;
  std::__shared_weak_count *v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  _DWORD *v130;
  uint64_t v131;
  int32x4_t v132;
  int32x4_t v133;
  float v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int8 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  std::__shared_weak_count *v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float v166;
  float32x4_t v167;
  float32x4_t v168;
  float v169;
  uint64_t *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  std::__shared_weak_count *v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t v182;
  _DWORD *v183;
  _DWORD *v184;
  float32x4_t v185;
  float v186;
  float v188;
  float v189;
  float v190;
  uint64_t *v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  std::__shared_weak_count *v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  float32x2_t v204;
  float v206;
  float32x4_t *v212;
  int32x4_t v213;
  int32x4_t v214;
  char v215;
  float v216;
  float v217;
  float v218;
  float v219;
  uint64_t *v220;
  std::__shared_weak_count *v221;
  uint64_t v222;
  unint64_t *v223;
  unint64_t v224;
  unint64_t v225;
  float v226;
  uint64_t *v227;
  std::__shared_weak_count *v228;
  uint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t *v233;
  std::__shared_weak_count *v234;
  uint64_t v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t v238;
  float v239;
  uint64_t *v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t *v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t *v252;
  std::__shared_weak_count *v253;
  uint64_t v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  _DWORD *v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  _QWORD *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  _QWORD *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  BOOL v278;
  char v279;
  char *v280;
  char *v281;
  void *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  void **v286;
  void **v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  void *v291;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  uint64_t v299;
  float32x4_t v300;
  float32x4_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  void *__p;
  char *v306;
  int64x2_t v307;
  uint64_t v308;
  __int128 v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD v312[3];
  char v313;
  void *v314[2];
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  unsigned int v319;
  void *v320;
  void *v321;
  char *v322;
  void *v323;
  void *v324;
  char *v325;
  unsigned int v326;
  void *v327;
  uint64_t v328;
  unint64_t v329;
  void *v330;
  uint64_t v331;
  unint64_t v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  uint64_t v342;

  v342 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  v2 = *(_QWORD **)(a1 + 40);
  v3 = v2[20] - v2[19];
  if ((v3 & 0x3FFFFFFFCLL) == 0)
    return;
  v5 = 0;
  v6 = v2[14] - v2[13];
  v7 = (v3 >> 2);
  while (1)
  {
    v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 16 * *(unsigned int *)(a1 + 196));
    v10 = *v8;
    v9 = (std::__shared_weak_count *)v8[1];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (*(float *)(*(_QWORD *)(v10 + 40) + 4 * v5) > 1.0e-16)
      break;
    if (++v5 == v7)
      return;
  }
  v340 = 0u;
  v341 = 0u;
  v339 = 0u;
  v334 = 0u;
  v335 = 0u;
  v333 = 0u;
  v14 = (v6 >> 2);
  v330 = 0;
  v331 = 0;
  v332 = 0;
  if ((v6 >> 2))
  {
    v330 = operator new(8 * (((v14 - 1) >> 6) + 1));
    v331 = 0;
    v332 = ((v14 - 1) >> 6) + 1;
    sub_23942D8C8(&v330, v14, 0);
  }
  v327 = 0;
  v328 = 0;
  v329 = 0;
  if (v7)
  {
    v327 = operator new(8 * (((v7 - 1) >> 6) + 1));
    v328 = 0;
    v329 = ((v7 - 1) >> 6) + 1;
    sub_23942D8C8(&v327, v7, 0);
  }
  v337 = 0u;
  v338 = 0u;
  v336 = 0u;
  v326 = v5;
  v15 = operator new(0xCuLL);
  v324 = v15 + 3;
  v325 = (char *)(v15 + 3);
  *(_QWORD *)v15 = -1;
  v15[2] = -1;
  v323 = v15;
  sub_23996362C(*(_QWORD *)(a1 + 40), &v326, (uint64_t)&v323);
  v16 = *(unsigned int *)v323;
  v17 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    do
      v22 = __ldaxr(v20);
    while (__stlxr(v22 - 1, v20));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v336 = *(float32x4_t *)(*(_QWORD *)(v19 + 40) + 16 * v16);
  v23 = *((unsigned int *)v323 + 1);
  v24 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v26 = *v24;
  v25 = (std::__shared_weak_count *)v24[1];
  if (v25)
  {
    v27 = (unint64_t *)&v25->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    do
      v29 = __ldaxr(v27);
    while (__stlxr(v29 - 1, v27));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v337 = *(float32x4_t *)(*(_QWORD *)(v26 + 40) + 16 * v23);
  v30 = *((unsigned int *)v323 + 2);
  v31 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v37 = *(float32x4_t *)(*(_QWORD *)(v33 + 40) + 16 * v30);
  v338 = v37;
  v38 = vsubq_f32(v337, v336);
  v39 = vsubq_f32(v37, v336);
  v40 = vmulq_f32(v38, v38);
  v40.i32[3] = 0;
  v41 = vpaddq_f32(v40, v40);
  v42 = vpaddq_f32(v41, v41);
  v43 = (float32x4_t)xmmword_239F02850;
  v300 = (float32x4_t)xmmword_239F02850;
  if (v42.f32[0] > 0.0)
    v43 = vdivq_f32(v38, vsqrtq_f32(v42));
  v44 = vmulq_f32(v39, v39);
  v44.i32[3] = 0;
  v45 = vpaddq_f32(v44, v44);
  v46 = vpaddq_f32(v45, v45);
  v47 = (float32x4_t)xmmword_239F02850;
  if (v46.f32[0] > 0.0)
    v47 = vdivq_f32(v39, vsqrtq_f32(v46));
  v48 = vmulq_f32(v43, v47);
  v48.i32[3] = 0;
  v49 = fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v48, v48)));
  if (v49 < 3.4028e38)
    v50 = 0;
  else
    v50 = -1;
  if (v49 >= 3.4028e38)
    v49 = 3.4028e38;
  v51 = vsubq_f32(v37, v337);
  v52 = vsubq_f32(v336, v337);
  v53 = vmulq_f32(v51, v51);
  v53.i32[3] = 0;
  v54 = vpaddq_f32(v53, v53);
  v55 = vpaddq_f32(v54, v54);
  v56 = (float32x4_t)xmmword_239F02850;
  if (v55.f32[0] > 0.0)
    v56 = vdivq_f32(v51, vsqrtq_f32(v55));
  v57 = vmulq_f32(v52, v52);
  v57.i32[3] = 0;
  v58 = vpaddq_f32(v57, v57);
  v59 = vpaddq_f32(v58, v58);
  v60 = (float32x4_t)xmmword_239F02850;
  if (v59.f32[0] > 0.0)
    v60 = vdivq_f32(v52, vsqrtq_f32(v59));
  v61 = vmulq_f32(v56, v60);
  v61.i32[3] = 0;
  v62 = fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v61, v61)));
  if (v49 > v62)
  {
    v50 = 1;
    v49 = v62;
  }
  v63 = vsubq_f32(v336, v37);
  v64 = vsubq_f32(v337, v37);
  v65 = vmulq_f32(v63, v63);
  v65.i32[3] = 0;
  v66 = vpaddq_f32(v65, v65);
  v67 = vpaddq_f32(v66, v66);
  v68 = (float32x4_t)xmmword_239F02850;
  if (v67.f32[0] > 0.0)
    v68 = vdivq_f32(v63, vsqrtq_f32(v67));
  v69 = vmulq_f32(v64, v64);
  v69.i32[3] = 0;
  v70 = vpaddq_f32(v69, v69);
  v71 = vpaddq_f32(v70, v70);
  v72 = (float32x4_t)xmmword_239F02850;
  if (v71.f32[0] > 0.0)
    v72 = vdivq_f32(v64, vsqrtq_f32(v71));
  v73 = vmulq_f32(v68, v72);
  v73.i32[3] = 0;
  if (v49 <= fabsf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v73, v73))))
    v74 = v50;
  else
    v74 = 2;
  if ((v74 + 1) < 3)
    v75 = v74 + 1;
  else
    v75 = v74 - 2;
  v76 = *(&v336 + v74);
  v77 = vsubq_f32(*(&v336 + v75), v76);
  v78 = v74 + 2;
  if ((v74 + 2) >= 3)
    v78 = v74 - 1;
  v79 = (int32x4_t)vsubq_f32(*(&v336 + v78), v76);
  v80 = (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v77, (int32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 0xCuLL)), (int32x4_t)v77);
  v81 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL), (int32x4_t)v77);
  v82 = (int32x4_t)vmlsq_f32(vmulq_f32(v80, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 4uLL), v79)), (float32x4_t)vzip2q_s32(vzip1q_s32(v79, (int32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 0xCuLL)), v79), v81);
  v83 = vmlsq_f32(vmulq_f32(v81, (float32x4_t)vzip2q_s32(vzip1q_s32(v82, (int32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 0xCuLL)), v82)), v80, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL), v82));
  v84 = vmulq_f32(v77, v77);
  v84.i32[3] = 0;
  v85 = vpaddq_f32(v84, v84);
  v86 = vpaddq_f32(v85, v85);
  v297 = (float32x4_t)xmmword_239F02850;
  if (v86.f32[0] > 0.0)
    v297 = vdivq_f32(v77, vsqrtq_f32(v86));
  v87 = vmulq_f32(v83, v83);
  v87.i32[3] = 0;
  v88 = vpaddq_f32(v87, v87);
  v89 = vpaddq_f32(v88, v88);
  if (v89.f32[0] > 0.0)
    v300 = vdivq_f32(v83, vsqrtq_f32(v89));
  for (i = 0; i != 3; ++i)
  {
    v92 = ((int)v74 + i) % 3u;
    v93 = *(&v336 + v74);
    v94 = *(&v336 + v92);
    v95 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
    v97 = *v95;
    v96 = (std::__shared_weak_count *)v95[1];
    if (v96)
    {
      v98 = (unint64_t *)&v96->__shared_owners_;
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
      do
        v100 = __ldaxr(v98);
      while (__stlxr(v100 - 1, v98));
      if (!v100)
      {
        v293 = v94;
        v294 = v93;
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
        v94 = v293;
        v93 = v294;
      }
    }
    v101 = vsubq_f32(v94, v93);
    v102 = vmulq_f32(v297, v101);
    v102.i32[3] = 0;
    *(float *)(*(_QWORD *)(v97 + 40) + 8 * *((unsigned int *)v323 + v92)) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v102, v102));
    v103 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
    v105 = *v103;
    v104 = (std::__shared_weak_count *)v103[1];
    if (v104)
    {
      v106 = (unint64_t *)&v104->__shared_owners_;
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
      do
        v108 = __ldaxr(v106);
      while (__stlxr(v108 - 1, v106));
      if (!v108)
      {
        v295 = v101;
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
        v101 = v295;
      }
    }
    v109 = vmulq_f32(v300, v101);
    v109.i32[3] = 0;
    v110 = vpaddq_f32(v109, v109);
    *(float *)(*(_QWORD *)(v105 + 40) + 8 * *((unsigned int *)v323 + v92) + 4) = vaddv_f32(*(float32x2_t *)v110.f32);
    v111 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
    v113 = *v111;
    v112 = (std::__shared_weak_count *)v111[1];
    if (v112)
    {
      v114 = (unint64_t *)&v112->__shared_owners_;
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 1, v114));
      do
        v116 = __ldaxr(v114);
      while (__stlxr(v116 - 1, v114));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v117 = *((unsigned int *)v323 + v92);
    v118 = *(_QWORD *)(v113 + 40);
    v119 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
    v121 = *v119;
    v120 = (std::__shared_weak_count *)v119[1];
    if (v120)
    {
      v122 = (unint64_t *)&v120->__shared_owners_;
      do
        v123 = __ldxr(v122);
      while (__stxr(v123 + 1, v122));
      do
        v124 = __ldaxr(v122);
      while (__stlxr(v124 - 1, v122));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    v91 = *((unsigned int *)v323 + v92);
    v110.i32[0] = *(_DWORD *)(v118 + 8 * v117);
    v110.i32[1] = *(_DWORD *)(*(_QWORD *)(v121 + 40) + 8 * v91 + 4);
    *(&v339 + v92) = v110;
    *(_QWORD *)((char *)v330 + ((v91 >> 3) & 0x1FFFFFF8)) |= 1 << v91;
  }
  v125 = *((_QWORD *)&v333 + 1);
  v298 = v340;
  v301 = v339;
  v296 = v341;
  v126 = v326;
  if ((_QWORD)v334 == *((_QWORD *)&v333 + 1))
    v127 = 0;
  else
    v127 = (((_QWORD)v334 - *((_QWORD *)&v333 + 1)) << 7) - 1;
  v128 = *((_QWORD *)&v335 + 1);
  v129 = *((_QWORD *)&v335 + 1) + v335;
  if (v127 == *((_QWORD *)&v335 + 1) + (_QWORD)v335)
  {
    sub_2394F0374((uint64_t)&v333);
    v128 = *((_QWORD *)&v335 + 1);
    v125 = *((_QWORD *)&v333 + 1);
    v129 = v335 + *((_QWORD *)&v335 + 1);
  }
  *(_DWORD *)(*(_QWORD *)(v125 + ((v129 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v129 & 0x3FF)) = v126;
  *((_QWORD *)&v335 + 1) = v128 + 1;
  *(_QWORD *)((char *)v327 + (((unint64_t)v326 >> 3) & 0x1FFFFFF8)) |= 1 << v326;
  v130 = operator new(0xCuLL);
  v321 = v130 + 3;
  v322 = (char *)(v130 + 3);
  *(_QWORD *)v130 = -1;
  v130[2] = -1;
  v320 = v130;
  v131 = *((_QWORD *)&v335 + 1);
  if (*((_QWORD *)&v335 + 1))
  {
    v132 = (int32x4_t)vsubq_f32(v298, v301);
    v133 = (int32x4_t)vsubq_f32(v296, v301);
    LODWORD(v134) = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v132, (int32x4_t)vextq_s8(*(int8x16_t *)&v132, *(int8x16_t *)&v132, 0xCuLL)), v132), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v133, *(int8x16_t *)&v133, 4uLL), v133)), (float32x4_t)vzip2q_s32(vzip1q_s32(v133, (int32x4_t)vextq_s8(*(int8x16_t *)&v133, *(int8x16_t *)&v133, 0xCuLL)), v133), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v132, *(int8x16_t *)&v132, 4uLL), v132)).i32[2];
    do
    {
      v135 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v333 + 1) + (((unint64_t)v335 >> 7) & 0x1FFFFFFFFFFFFF8))
                       + 4 * (v335 & 0x3FF));
      *(_QWORD *)&v335 = v335 + 1;
      *((_QWORD *)&v335 + 1) = v131 - 1;
      if ((unint64_t)v335 >= 0x800)
      {
        operator delete(**((void ***)&v333 + 1));
        *((_QWORD *)&v333 + 1) += 8;
        *(_QWORD *)&v335 = v335 - 1024;
      }
      LODWORD(v303) = v135;
      sub_23996362C(*(_QWORD *)(a1 + 40), (unsigned int *)&v303, (uint64_t)&v320);
      v136 = *(unsigned int *)v320;
      v137 = v136 >> 6;
      v138 = 1 << v136;
      if (((1 << v136) & *((_QWORD *)v330 + (v136 >> 6))) != 0)
      {
        v136 = *((unsigned int *)v320 + 1);
        v137 = v136 >> 6;
        v138 = 1 << v136;
        if (((1 << v136) & *((_QWORD *)v330 + (v136 >> 6))) != 0)
        {
          v136 = *((unsigned int *)v320 + 2);
          v137 = v136 >> 6;
          v138 = 1 << v136;
          if (((1 << v136) & *((_QWORD *)v330 + (v136 >> 6))) != 0)
            goto LABEL_211;
          v139 = 2;
        }
        else
        {
          v139 = 1;
        }
      }
      else
      {
        v139 = 0;
      }
      v140 = v139 - 2;
      if (v139 <= 1)
        v140 = v139 + 1;
      v141 = v140;
      v142 = *((unsigned int *)v320 + v140);
      v143 = (v139 - 1);
      if (!(_DWORD)v139)
        v143 = 2;
      v299 = v143;
      v144 = *((unsigned int *)v320 + v143);
      v145 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16
                                                                 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
      v147 = *v145;
      v146 = (std::__shared_weak_count *)v145[1];
      v302 = v142;
      if (v146)
      {
        v148 = (unint64_t *)&v146->__shared_owners_;
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
        do
          v150 = __ldaxr(v148);
        while (__stlxr(v150 - 1, v148));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
          std::__shared_weak_count::__release_weak(v146);
          v142 = v302;
        }
      }
      v336 = *(float32x4_t *)(*(_QWORD *)(v147 + 40) + 16 * v142);
      v151 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16
                                                                 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
      v153 = *v151;
      v152 = (std::__shared_weak_count *)v151[1];
      if (v152)
      {
        v154 = (unint64_t *)&v152->__shared_owners_;
        do
          v155 = __ldxr(v154);
        while (__stxr(v155 + 1, v154));
        do
          v156 = __ldaxr(v154);
        while (__stlxr(v156 - 1, v154));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
          v142 = v302;
        }
      }
      v337 = *(float32x4_t *)(*(_QWORD *)(v153 + 40) + 16 * v144);
      v157 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16
                                                                 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 176));
      v159 = *v157;
      v158 = (std::__shared_weak_count *)v157[1];
      if (v158)
      {
        v160 = (unint64_t *)&v158->__shared_owners_;
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
        do
          v162 = __ldaxr(v160);
        while (__stlxr(v162 - 1, v160));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
          v142 = v302;
        }
      }
      v163 = *(float32x4_t *)(*(_QWORD *)(v159 + 40) + 16 * v136);
      v338 = v163;
      v164 = vsubq_f32(v337, v336);
      v165 = vmulq_f32(v164, v164);
      v165.i32[3] = 0;
      v166 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v165, v165)));
      if (fabsf(v166) < 0.00000001)
        goto LABEL_257;
      v167 = vsubq_f32(v163, v336);
      v168 = vmulq_f32(v167, v167);
      v168.i32[3] = 0;
      v169 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v168, v168)));
      if (fabsf(v169) >= 0.00000001)
      {
        v185 = vmulq_f32(v167, v164);
        v185.i32[3] = 0;
        v186 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v185, v185)) / (float)(v166 * v169);
        if (v186 < -1.0)
          v186 = -1.0;
        if (v186 <= 1.0)
          _S14 = v186;
        else
          _S14 = 1.0;
        v188 = 1.0 - (float)(_S14 * _S14);
        v189 = sqrtf(v188);
        if (v188 >= 0.0)
          v190 = v189;
        else
          v190 = 0.0;
        v191 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v193 = *v191;
        v192 = (std::__shared_weak_count *)v191[1];
        if (v192)
        {
          v194 = (unint64_t *)&v192->__shared_owners_;
          do
            v195 = __ldxr(v194);
          while (__stxr(v195 + 1, v194));
          do
            v196 = __ldaxr(v194);
          while (__stlxr(v196 - 1, v194));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
            v142 = v302;
          }
        }
        v197 = *(_QWORD *)(v193 + 40);
        v198 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v200 = *v198;
        v199 = (std::__shared_weak_count *)v198[1];
        if (v199)
        {
          v201 = (unint64_t *)&v199->__shared_owners_;
          do
            v202 = __ldxr(v201);
          while (__stxr(v202 + 1, v201));
          do
            v203 = __ldaxr(v201);
          while (__stlxr(v203 - 1, v201));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
            std::__shared_weak_count::__release_weak(v199);
            v142 = v302;
          }
        }
        v204 = vsub_f32(*(float32x2_t *)(v197 + 8 * v144), *(float32x2_t *)(*(_QWORD *)(v200 + 40) + 8 * v142));
        v167.f32[0] = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v204, v204).i32[1]), v204.f32[0], v204.f32[0]));
        _D0 = (float32x2_t)1065353216;
        if (v167.f32[0] > 0.0)
          _D0 = vdiv_f32(v204, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v167.f32, 0));
        v206 = vmlas_n_f32(-(float)(_D0.f32[1] * v190), _S14, _D0.f32[0]);
        __asm { FMLA            S3, S14, V0.S[1] }
        *((_OWORD *)&v339 + v139) = __PAIR64__(LODWORD(_S3), LODWORD(v206));
        v212 = &v339 + v141;
        v212->i64[0] = 0;
        v212->i64[1] = 0;
        *((_OWORD *)&v339 + v299) = (unint64_t)_D0;
        v213 = (int32x4_t)vsubq_f32(v340, v339);
        v214 = (int32x4_t)vsubq_f32(v341, v339);
        v215 = (v134 < 0.0) ^ (COERCE_FLOAT(vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v213, (int32x4_t)vextq_s8(*(int8x16_t *)&v213, *(int8x16_t *)&v213, 0xCuLL)), v213), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v214, *(int8x16_t *)&v214, 4uLL), v214)), (float32x4_t)vzip2q_s32(vzip1q_s32(v214, (int32x4_t)vextq_s8(
                                                                            *(int8x16_t *)&v214,
                                                                            *(int8x16_t *)&v214,
                                                                            0xCuLL)),
                                                             v214),
                                              (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8(*(int8x16_t *)&v213, *(int8x16_t *)&v213, 4uLL), v213)).i32[2]) >= 0.0);
        v216 = (float)(v190 * _D0.f32[1]) + (float)(_D0.f32[0] * _S14);
        v217 = (float)(_D0.f32[1] * _S14) - (float)(v190 * _D0.f32[0]);
        if ((v215 & 1) != 0)
          v218 = _S3;
        else
          v218 = v217;
        if ((v215 & 1) != 0)
          v219 = v206;
        else
          v219 = v216;
        v220 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v222 = *v220;
        v221 = (std::__shared_weak_count *)v220[1];
        if (v221)
        {
          v223 = (unint64_t *)&v221->__shared_owners_;
          do
            v224 = __ldxr(v223);
          while (__stxr(v224 + 1, v223));
          do
            v225 = __ldaxr(v223);
          while (__stlxr(v225 - 1, v223));
          if (!v225)
          {
            ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
            std::__shared_weak_count::__release_weak(v221);
            v142 = v302;
          }
        }
        v226 = *(float *)(*(_QWORD *)(v222 + 40) + 8 * v142);
        v227 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v229 = *v227;
        v228 = (std::__shared_weak_count *)v227[1];
        if (v228)
        {
          v230 = (unint64_t *)&v228->__shared_owners_;
          do
            v231 = __ldxr(v230);
          while (__stxr(v231 + 1, v230));
          do
            v232 = __ldaxr(v230);
          while (__stlxr(v232 - 1, v230));
          if (!v232)
          {
            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
            std::__shared_weak_count::__release_weak(v228);
            v142 = v302;
          }
        }
        *(float *)(*(_QWORD *)(v229 + 40) + 8 * v136) = v226 + (float)(v169 * v219);
        v233 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v235 = *v233;
        v234 = (std::__shared_weak_count *)v233[1];
        if (v234)
        {
          v236 = (unint64_t *)&v234->__shared_owners_;
          do
            v237 = __ldxr(v236);
          while (__stxr(v237 + 1, v236));
          do
            v238 = __ldaxr(v236);
          while (__stlxr(v238 - 1, v236));
          if (!v238)
          {
            ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
            std::__shared_weak_count::__release_weak(v234);
            v142 = v302;
          }
        }
        v239 = *(float *)(*(_QWORD *)(v235 + 40) + 8 * v142 + 4);
        v240 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v242 = *v240;
        v241 = (std::__shared_weak_count *)v240[1];
        if (v241)
        {
          v243 = (unint64_t *)&v241->__shared_owners_;
          do
            v244 = __ldxr(v243);
          while (__stxr(v244 + 1, v243));
          do
            v245 = __ldaxr(v243);
          while (__stlxr(v245 - 1, v243));
          if (!v245)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
        }
        *(float *)(*(_QWORD *)(v242 + 40) + 8 * v136 + 4) = v239 + (float)(v169 * v218);
        v246 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v248 = *v246;
        v247 = (std::__shared_weak_count *)v246[1];
        if (v247)
        {
          v249 = (unint64_t *)&v247->__shared_owners_;
          do
            v250 = __ldxr(v249);
          while (__stxr(v250 + 1, v249));
          do
            v251 = __ldaxr(v249);
          while (__stlxr(v251 - 1, v249));
          if (!v251)
          {
            ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
            std::__shared_weak_count::__release_weak(v247);
          }
        }
        if (fabsf(*(float *)(*(_QWORD *)(v248 + 40) + 8 * v136)) == INFINITY)
          goto LABEL_257;
        v252 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v254 = *v252;
        v253 = (std::__shared_weak_count *)v252[1];
        if (v253)
        {
          v255 = (unint64_t *)&v253->__shared_owners_;
          do
            v256 = __ldxr(v255);
          while (__stxr(v256 + 1, v255));
          do
            v257 = __ldaxr(v255);
          while (__stlxr(v257 - 1, v255));
          if (!v257)
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
        }
        if (fabsf(*(float *)(*(_QWORD *)(v254 + 40) + 8 * v136 + 4)) == INFINITY)
          goto LABEL_257;
      }
      else
      {
        v170 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v172 = *v170;
        v171 = (std::__shared_weak_count *)v170[1];
        if (v171)
        {
          v173 = (unint64_t *)&v171->__shared_owners_;
          do
            v174 = __ldxr(v173);
          while (__stxr(v174 + 1, v173));
          do
            v175 = __ldaxr(v173);
          while (__stlxr(v175 - 1, v173));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
            v142 = v302;
          }
        }
        v176 = *(_QWORD *)(v172 + 40);
        v177 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
        v179 = *v177;
        v178 = (std::__shared_weak_count *)v177[1];
        if (v178)
        {
          v180 = (unint64_t *)&v178->__shared_owners_;
          do
            v181 = __ldxr(v180);
          while (__stxr(v181 + 1, v180));
          do
            v182 = __ldaxr(v180);
          while (__stlxr(v182 - 1, v180));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
            std::__shared_weak_count::__release_weak(v178);
            v142 = v302;
          }
        }
        v183 = (_DWORD *)(v176 + 8 * v142);
        v184 = (_DWORD *)(*(_QWORD *)(v179 + 40) + 8 * v136);
        *v184 = *v183;
        v184[1] = v183[1];
      }
      *((_QWORD *)v330 + v137) |= v138;
LABEL_211:
      v258 = operator new(0xCuLL);
      v306 = (char *)(v258 + 3);
      v307.i64[0] = (uint64_t)(v258 + 3);
      *(_QWORD *)v258 = -1;
      v258[2] = -1;
      __p = v258;
      sub_23996389C(*(_QWORD *)(a1 + 40), (unsigned int *)&v303, (uint64_t)&__p);
      v319 = *(_DWORD *)sub_239962518(*(_QWORD *)(a1 + 40) + 104, (unsigned int *)__p);
      v259 = *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v319) + 16);
      if ((_DWORD)v259 != -1)
      {
        v260 = v327;
        if ((*((_QWORD *)v327 + (v259 >> 6)) & (1 << v259)) == 0)
        {
          v261 = *((_QWORD *)&v333 + 1);
          if ((_QWORD)v334 == *((_QWORD *)&v333 + 1))
            v262 = 0;
          else
            v262 = (((_QWORD)v334 - *((_QWORD *)&v333 + 1)) << 7) - 1;
          v263 = *((_QWORD *)&v335 + 1);
          v264 = *((_QWORD *)&v335 + 1) + v335;
          if (v262 == *((_QWORD *)&v335 + 1) + (_QWORD)v335)
          {
            sub_2394F0374((uint64_t)&v333);
            v263 = *((_QWORD *)&v335 + 1);
            v261 = *((_QWORD *)&v333 + 1);
            v264 = v335 + *((_QWORD *)&v335 + 1);
            v260 = v327;
          }
          *(_DWORD *)(*(_QWORD *)(v261 + ((v264 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v264 & 0x3FF)) = v259;
          *((_QWORD *)&v335 + 1) = v263 + 1;
          v260[v259 >> 6] |= 1 << v259;
        }
      }
      v319 = *(_DWORD *)sub_239962518(*(_QWORD *)(a1 + 40) + 104, (unsigned int *)__p + 1);
      v265 = *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v319) + 16);
      if ((_DWORD)v265 != -1)
      {
        v266 = v327;
        if ((*((_QWORD *)v327 + (v265 >> 6)) & (1 << v265)) == 0)
        {
          v267 = *((_QWORD *)&v333 + 1);
          if ((_QWORD)v334 == *((_QWORD *)&v333 + 1))
            v268 = 0;
          else
            v268 = (((_QWORD)v334 - *((_QWORD *)&v333 + 1)) << 7) - 1;
          v269 = *((_QWORD *)&v335 + 1);
          v270 = *((_QWORD *)&v335 + 1) + v335;
          if (v268 == *((_QWORD *)&v335 + 1) + (_QWORD)v335)
          {
            sub_2394F0374((uint64_t)&v333);
            v269 = *((_QWORD *)&v335 + 1);
            v267 = *((_QWORD *)&v333 + 1);
            v270 = v335 + *((_QWORD *)&v335 + 1);
            v266 = v327;
          }
          *(_DWORD *)(*(_QWORD *)(v267 + ((v270 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v270 & 0x3FF)) = v265;
          *((_QWORD *)&v335 + 1) = v269 + 1;
          v266[v265 >> 6] |= 1 << v265;
        }
      }
      v319 = *(_DWORD *)sub_239962518(*(_QWORD *)(a1 + 40) + 104, (unsigned int *)__p + 2);
      v271 = *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v319) + 16);
      if ((_DWORD)v271 != -1)
      {
        v272 = v327;
        if ((*((_QWORD *)v327 + (v271 >> 6)) & (1 << v271)) == 0)
        {
          v274 = *((_QWORD *)&v333 + 1);
          if ((_QWORD)v334 == *((_QWORD *)&v333 + 1))
            v275 = 0;
          else
            v275 = (((_QWORD)v334 - *((_QWORD *)&v333 + 1)) << 7) - 1;
          v276 = *((_QWORD *)&v335 + 1);
          v277 = *((_QWORD *)&v335 + 1) + v335;
          if (v275 == *((_QWORD *)&v335 + 1) + (_QWORD)v335)
          {
            sub_2394F0374((uint64_t)&v333);
            v276 = *((_QWORD *)&v335 + 1);
            v274 = *((_QWORD *)&v333 + 1);
            v277 = v335 + *((_QWORD *)&v335 + 1);
            v272 = v327;
          }
          *(_DWORD *)(*(_QWORD *)(v274 + ((v277 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v277 & 0x3FF)) = v271;
          *((_QWORD *)&v335 + 1) = v276 + 1;
          v272[v271 >> 6] |= 1 << v271;
          v273 = (char *)__p;
          if (!__p)
            goto LABEL_98;
LABEL_230:
          v306 = v273;
          operator delete(v273);
          goto LABEL_98;
        }
      }
      v273 = (char *)__p;
      if (__p)
        goto LABEL_230;
LABEL_98:
      v131 = *((_QWORD *)&v335 + 1);
    }
    while (*((_QWORD *)&v335 + 1));
  }
  LOWORD(__p) = 256;
  BYTE2(__p) = 1;
  v307 = vdupq_n_s64(0xAuLL);
  v308 = 20;
  v309 = xmmword_239F03720;
  v310 = 0x7F7FFFFFFF7FFFFFLL;
  v311 = -1;
  memset(v312, 0, sizeof(v312));
  v313 = 0;
  *(_OWORD *)v314 = 0u;
  v315 = 0u;
  v316 = 0u;
  v317 = 0u;
  v318 = 0u;
  v319 = 0;
  v303 = 0;
  v304 = 0;
  v278 = sub_2399B4E84(a1, (uint64_t)&__p, (float *)&v319, (float *)&v304 + 1, &v303, (float *)&v304, 0);
  if (v303)
    v279 = v278;
  else
    v279 = 1;
  *a2 = v279;
  if (*((_QWORD *)&v317 + 1))
  {
    *(_QWORD *)&v318 = *((_QWORD *)&v317 + 1);
    operator delete(*((void **)&v317 + 1));
  }
  if ((_QWORD)v316)
  {
    *((_QWORD *)&v316 + 1) = v316;
    operator delete((void *)v316);
  }
  v280 = (char *)v314[1];
  if (v314[1])
  {
    v281 = (char *)v315;
    v282 = v314[1];
    if ((void *)v315 != v314[1])
    {
      do
      {
        v283 = (std::__shared_weak_count *)*((_QWORD *)v281 - 1);
        if (v283)
        {
          v284 = (unint64_t *)&v283->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
          }
        }
        v281 -= 16;
      }
      while (v281 != v280);
      v282 = v314[1];
    }
    *(_QWORD *)&v315 = v280;
    operator delete(v282);
  }
  sub_23998E148((uint64_t)v312);
LABEL_257:
  if (v320)
  {
    v321 = v320;
    operator delete(v320);
  }
  if (v323)
  {
    v324 = v323;
    operator delete(v323);
  }
  if (v327)
    operator delete(v327);
  if (v330)
    operator delete(v330);
  v286 = (void **)*((_QWORD *)&v333 + 1);
  v287 = (void **)v334;
  *((_QWORD *)&v335 + 1) = 0;
  v288 = v334 - *((_QWORD *)&v333 + 1);
  if ((_QWORD)v334 - *((_QWORD *)&v333 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v286);
      v287 = (void **)v334;
      v286 = (void **)(*((_QWORD *)&v333 + 1) + 8);
      *((_QWORD *)&v333 + 1) = v286;
      v288 = v334 - (_QWORD)v286;
    }
    while ((_QWORD)v334 - (_QWORD)v286 > 0x10uLL);
  }
  v289 = v288 >> 3;
  if (v289 == 1)
  {
    v290 = 512;
    goto LABEL_271;
  }
  if (v289 == 2)
  {
    v290 = 1024;
LABEL_271:
    *(_QWORD *)&v335 = v290;
  }
  if (v286 != v287)
  {
    do
    {
      v291 = *v286++;
      operator delete(v291);
    }
    while (v286 != v287);
    if ((_QWORD)v334 != *((_QWORD *)&v333 + 1))
      *(_QWORD *)&v334 = v334 + ((*((_QWORD *)&v333 + 1) - v334 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((_QWORD)v333)
    operator delete((void *)v333);
}

void sub_23999B9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,uint64_t a58,char a59)
{
  void *v60;
  void *v61;

  if (a49)
  {
    operator delete(a49);
    v60 = a53;
    if (!a53)
    {
LABEL_3:
      v61 = __p;
      if (!__p)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v60 = a53;
    if (!a53)
      goto LABEL_3;
  }
  operator delete(v60);
  v61 = __p;
  if (!__p)
  {
LABEL_5:
    sub_23953439C((uint64_t)&a59);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(v61);
  goto LABEL_5;
}

_QWORD *sub_23999BAC8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_2394189F8();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_23999BB68(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC3204((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23999BB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250AF0E58;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = &off_250AF0E90;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_23998EFE0;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_23999BD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_23999BD28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_23999BD40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF0E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23999BD50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF0E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23999BD80(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_23999BD90(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF0E90;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_23999BDCC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF0E90;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23999BE1C(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
}

void sub_23999BE2C(_QWORD *a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;

  v3 = (_BYTE *)a1[5];
  if (a2 > (uint64_t)(a1[7] - (_QWORD)v3) >> 2)
  {
    if (a2 >> 62)
      sub_2394189F8();
    v4 = (_BYTE *)a1[6];
    v5 = 4 * a2;
    v6 = (char *)operator new(4 * a2);
    v7 = v4 - v3;
    v8 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    v9 = v8;
    if (v4 == v3)
      goto LABEL_11;
    if ((unint64_t)(v7 - 4) >= 0x2C)
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
      if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v10 = v7 >> 2;
        v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
        v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
        v13 = &v4[-v12];
        v9 = &v8[-v12];
        v14 = &v6[4 * v10 - 16];
        v15 = (__int128 *)(v4 - 16);
        v16 = v11 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v17 = *v15;
          *((_OWORD *)v14 - 1) = *(v15 - 1);
          *(_OWORD *)v14 = v17;
          v14 -= 32;
          v15 -= 2;
          v16 -= 8;
        }
        while (v16);
        v4 = v13;
        if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_11;
      }
    }
    else
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v18 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v9 - 1) = v18;
      v9 -= 4;
    }
    while (v4 != v3);
LABEL_11:
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = &v6[v5];
    if (v3)
      operator delete(v3);
  }
}

void sub_23999BF44(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(_QWORD *)(a1 + 48) - v2) >> 2;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_2394807B4(a1 + 40, v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 48) = v2 + 4 * a2;
  }
}

void sub_23999BF78(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void sub_23999BF94(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _DWORD *v12;
  char *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  int v22;

  v3 = (char *)a1[6];
  v2 = a1[7];
  v4 = v3;
  if ((unint64_t)v3 < v2)
  {
    *(_DWORD *)v3 = 0;
    v5 = (uint64_t)(v3 + 4);
    goto LABEL_22;
  }
  v6 = (char *)a1[5];
  v7 = (v3 - v6) >> 2;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 62)
    sub_2394189F8();
  v9 = v2 - (_QWORD)v6;
  if (v9 >> 1 > v8)
    v8 = v9 >> 1;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
    v10 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
  {
    if (v10 >> 62)
      sub_239418A80();
    v11 = operator new(4 * v10);
    v12 = &v11[4 * v7];
    v13 = &v11[4 * v10];
    *v12 = 0;
    v5 = (uint64_t)(v12 + 1);
    v14 = v3 - v6;
    if (v3 == v6)
      goto LABEL_20;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = (_DWORD *)(4 * v7);
  v13 = 0;
  *(_DWORD *)(4 * v7) = 0;
  v5 = 4 * v7 + 4;
  v14 = v3 - v6;
  if (v3 != v6)
  {
LABEL_14:
    v15 = v14 - 4;
    if (v15 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v6 - v11) < 0x20)
      goto LABEL_27;
    v16 = (v15 >> 2) + 1;
    v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    v4 = &v3[-v17];
    v12 = (_DWORD *)((char *)v12 - v17);
    v18 = &v11[4 * v7 - 16];
    v19 = v3 - 16;
    v20 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v21 = *(_OWORD *)v19;
      *(v18 - 1) = *((_OWORD *)v19 - 1);
      *v18 = v21;
      v18 -= 2;
      v19 -= 32;
      v20 -= 8;
    }
    while (v20);
    if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v22 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *--v12 = v22;
      }
      while (v4 != v6);
    }
  }
LABEL_20:
  a1[5] = v12;
  a1[6] = v5;
  a1[7] = v13;
  if (v6)
    operator delete(v6);
LABEL_22:
  a1[6] = v5;
}

float sub_23999C100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(float *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(float *)(v3 + 4 * a3) = result;
  return result;
}

float sub_23999C120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 40);
  result = *(float *)(v3 + 4 * a2);
  *(float *)(v3 + 4 * a3) = result;
  return result;
}

float sub_23999C130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float result;

  v3 = *(_QWORD *)(a1 + 40);
  result = (float)(*(float *)(v3 + 4 * a2) + *(float *)(v3 + 4 * a3)) * 0.5;
  *(float *)(v3 + 4 * a2) = result;
  return result;
}

_QWORD *sub_23999C154@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  sub_23999C220(v4, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250AF0F00;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = result;
  return result;
}

void sub_23999C1D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_23999C1EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x1093C40855A9725);
  _Unwind_Resume(a1);
}

uint64_t sub_23999C210(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

_QWORD *sub_23999C220(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;

  *a1 = off_250AF0C30;
  v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = 0;
  *a1 = &off_250AF0E90;
  a1[6] = 0;
  a1[7] = 0;
  v7 = *(_BYTE **)(a2 + 40);
  v6 = *(_BYTE **)(a2 + 48);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    v10 = &v9[4 * (v8 >> 2)];
    a1[7] = v10;
    memcpy(v9, v7, v8);
    a1[6] = v10;
  }
  return a1;
}

void sub_23999C2E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23995E4A4(v1);
  _Unwind_Resume(a1);
}

void sub_23999C310(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23999C334(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_23999C350(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF0F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_23999C360(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF0F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_23999C398(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (*(_BYTE *)(a1 + 24))
  {
    while (*(_QWORD *)(a1 + 32))
    {
      sub_23998E248((uint64_t *)a1, 0, &v12);
      v2 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
    }
  }
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(void **)a1;
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *(void **)a1;
    }
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_23999C498(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  void *v17;
  void *__s1[2];
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v6 = 0;
    do
    {
      v8 = *v3;
      if (!*v3)
        goto LABEL_5;
      if (*(char *)(v8 + 31) < 0)
      {
        sub_23941A7F8(__s1, *(void **)(v8 + 8), *(_QWORD *)(v8 + 16));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v20 = *(_QWORD *)(v8 + 24);
        *(_OWORD *)__s1 = v9;
      }
      v10 = HIBYTE(v20);
      if (v20 >= 0)
        v11 = (void *)HIBYTE(v20);
      else
        v11 = __s1[1];
      v12 = (void *)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (void *)*((_QWORD *)a3 + 1);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a3;
        else
          v14 = *(unsigned __int8 **)a3;
        if (v20 < 0)
        {
          v17 = __s1[0];
          if (memcmp(__s1[0], v14, (size_t)__s1[1]))
          {
            operator delete(v17);
            goto LABEL_5;
          }
LABEL_27:
          v7 = *(_QWORD *)(*v3 + 32) == (_QWORD)sub_23999C5F4;
          if ((v10 & 0x80) == 0)
          {
LABEL_4:
            if (v7)
              return v6;
            goto LABEL_5;
          }
          goto LABEL_28;
        }
        if (!HIBYTE(v20))
          goto LABEL_27;
        v15 = __s1;
        v16 = HIBYTE(v20);
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v16)
            goto LABEL_27;
        }
      }
      v7 = 0;
      if ((v20 & 0x8000000000000000) == 0)
        goto LABEL_4;
LABEL_28:
      operator delete(__s1[0]);
      if (v7)
        return v6;
LABEL_5:
      v3 += 2;
      v6 = (v6 + 1);
    }
    while (v3 != v4);
  }
  return 0xFFFFFFFFLL;
}

uint64_t (*sub_23999C5F4())()
{
  return sub_23999C5F4;
}

void sub_23999C600(_QWORD *a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  void *__p[2];
  char v22;
  unsigned int v23;

  v23 = -1;
  v22 = 15;
  strcpy((char *)__p, "v:index_in_root");
  sub_23999C7E0(a1, &v23, (uint64_t)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v2 = (uint64_t *)(a1[1] + 16 * v23);
  v4 = *v2;
  v3 = (std::__shared_weak_count *)v2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = a1[14] - a1[13];
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    v9 = 0;
    v10 = (v8 >> 2);
    do
    {
      *(_DWORD *)(*(_QWORD *)(v4 + 40) + 4 * v9) = v9;
      ++v9;
    }
    while (v10 != v9);
  }
  v20 = -1;
  v22 = 15;
  strcpy((char *)__p, "f:index_in_root");
  sub_23999C8D8(a1, &v20, (uint64_t)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v11 = (uint64_t *)(a1[7] + 16 * v20);
  v13 = *v11;
  v12 = (std::__shared_weak_count *)v11[1];
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = a1[20] - a1[19];
  if ((v17 & 0x3FFFFFFFCLL) != 0)
  {
    v18 = 0;
    v19 = (v17 >> 2);
    do
    {
      *(_DWORD *)(*(_QWORD *)(v13 + 40) + 4 * v18) = v18;
      ++v18;
    }
    while (v19 != v18);
  }
}

void sub_23999C7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_23999C7E0(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;

  v14 = -1;
  *a2 = sub_2399A3110((uint64_t)(a1 + 1), (uint64_t)&v14, a3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v5 = (uint64_t *)a1[1];
  v6 = (uint64_t *)a1[2];
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      v8 = *v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v7);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_23999C8C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_239EBED3C();
  _Unwind_Resume(exception_object);
}

void sub_23999C8D8(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;

  v14 = -1;
  *a2 = sub_2399A38B4((uint64_t)(a1 + 7), (uint64_t)&v14, a3);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v5 = (uint64_t *)a1[7];
  v6 = (uint64_t *)a1[8];
  if (v5 != v6)
  {
    v7 = v4;
    do
    {
      v8 = *v5;
      v9 = (std::__shared_weak_count *)v5[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v7);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
}

void sub_23999C9B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_239EBED3C();
  _Unwind_Resume(exception_object);
}

void sub_23999C9D0(uint64_t *a1, uint64_t a2)
{
  char *v3;
  size_t v4;
  size_t v5;
  __int128 *p_dst;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  size_t v11;
  size_t v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  std::string::size_type v35;
  std::string *p_p;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  size_t v45;
  std::string::size_type v46;
  std::string *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  std::string::size_type v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  char *v61;
  size_t v62;
  std::string::size_type v63;
  std::string *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  size_t v68;
  std::string::size_type v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  char *v78;
  size_t v79;
  std::string::size_type v80;
  std::string *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  std::__shared_weak_count *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  size_t v112;
  std::string::size_type v113;
  std::string *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  char *v118;
  size_t v119;
  std::string::size_type v120;
  std::string *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  unsigned int v125;
  uint64_t *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  uint64_t *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t i;
  _DWORD *v148;
  _DWORD *v149;
  uint64_t *v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t *v157;
  std::__shared_weak_count *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int32x2_t v168;
  int32x2_t *v169;
  uint64_t *v170;
  std::__shared_weak_count *v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  int32x2_t v177;
  int v178;
  uint64_t *v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t *v186;
  std::__shared_weak_count *v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t *v192;
  _QWORD v193[2];
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  unint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t **v202;
  uint64_t **v203;
  unsigned int v204;
  unsigned int v205;
  std::string __p;
  __int128 __dst;
  unint64_t v208;
  uint64_t v209;

  v198 = a1;
  v209 = *MEMORY[0x24BDAC8D0];
  v3 = off_256934448[0];
  v4 = strlen(off_256934448[0]);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = v5;
    v208 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v208) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v3, v5);
  *((_BYTE *)p_dst + v5) = 0;
  memset(&__p, 0, sizeof(__p));
  v202 = (uint64_t **)(a2 + 80);
  v9 = sub_23958C0D8((uint64_t **)(a2 + 80), (uint64_t)&__p, (unsigned __int8 *)&__dst);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v208) & 0x80000000) == 0)
    {
LABEL_11:
      if (v9 != -1)
        goto LABEL_25;
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v208) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete((void *)__dst);
  if (v9 != -1)
    goto LABEL_25;
LABEL_15:
  v10 = off_256934448[0];
  v11 = strlen(off_256934448[0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    v208 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = v13;
    goto LABEL_22;
  }
  HIBYTE(v208) = v11;
  v13 = &__dst;
  if (v11)
LABEL_22:
    memmove(v13, v10, v12);
  *((_BYTE *)v13 + v12) = 0;
  memset(&__p, 0, sizeof(__p));
  v9 = sub_23958964C((uint64_t)v202, (uint64_t)&__p, (uint64_t)&__dst);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v208) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_237:
    operator delete((void *)__dst);
    v192 = &(*v202)[2 * v9];
    v18 = *v192;
    v17 = (std::__shared_weak_count *)v192[1];
    if (!v17)
      goto LABEL_31;
    goto LABEL_26;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v208) < 0)
    goto LABEL_237;
LABEL_25:
  v16 = &(*v202)[2 * v9];
  v18 = *v16;
  v17 = (std::__shared_weak_count *)v16[1];
  if (!v17)
    goto LABEL_31;
LABEL_26:
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_31:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, (v198[1] - *v198) >> 4);
  if (v198[1] != *v198)
  {
    v22 = 0;
    while (1)
    {
      std::to_string(&__p, v22);
      v23 = std::string::insert(&__p, 0, "g");
      v24 = v23->__r_.__value_.__r.__words[0];
      *(_QWORD *)&__dst = v23->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&__dst + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
      v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v26 = &(*v202)[2 * v9];
      v28 = *v26;
      v27 = (std::__shared_weak_count *)v26[1];
      if (v27)
      {
        v29 = (unint64_t *)&v27->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        do
          v31 = __ldaxr(v29);
        while (__stlxr(v31 - 1, v29));
        if (!v31)
          break;
      }
      v32 = *(_QWORD *)(v28 + 40) + 24 * v22;
      if (*(char *)(v32 + 23) < 0)
        goto LABEL_40;
LABEL_41:
      *(_QWORD *)v32 = v24;
      *(_QWORD *)(v32 + 8) = __dst;
      *(_QWORD *)(v32 + 15) = *(_QWORD *)((char *)&__dst + 7);
      *(_BYTE *)(v32 + 23) = v25;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (++v22 >= (v198[1] - *v198) >> 4)
        goto LABEL_45;
    }
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    v32 = *(_QWORD *)(v28 + 40) + 24 * v22;
    if ((*(char *)(v32 + 23) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_40:
    operator delete(*(void **)v32);
    goto LABEL_41;
  }
LABEL_45:
  v205 = -1;
  v33 = off_256934428[0];
  v34 = strlen(off_256934428[0]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v35 = v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    p_p = (std::string *)operator new(v37 + 1);
    __p.__r_.__value_.__l.__size_ = v35;
    __p.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_52;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v34;
  p_p = &__p;
  if (v34)
LABEL_52:
    memmove(p_p, v33, v35);
  p_p->__r_.__value_.__s.__data_[v35] = 0;
  LODWORD(__dst) = 0;
  v203 = (uint64_t **)(a2 + 56);
  v39 = sub_2399346C0((uint64_t **)(a2 + 56), (uint64_t)&__dst, (unsigned __int8 *)&__p);
  v205 = v39;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v39 != -1)
  {
    if (v205 != -1)
    {
      v40 = &(*v203)[2 * v205];
      v41 = (std::__shared_weak_count *)v40[1];
      *v40 = 0;
      v40[1] = 0;
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
    v205 = -1;
  }
  v44 = off_256934428[0];
  v45 = strlen(off_256934428[0]);
  if (v45 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v46 = v45;
  if (v45 >= 0x17)
  {
    v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v45 | 7) != 0x17)
      v48 = v45 | 7;
    v49 = v48 + 1;
    v47 = (std::string *)operator new(v48 + 1);
    __p.__r_.__value_.__l.__size_ = v46;
    __p.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    goto LABEL_70;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v45;
  v47 = &__p;
  if (v45)
LABEL_70:
    memmove(v47, v44, v46);
  v47->__r_.__value_.__s.__data_[v46] = 0;
  sub_2394E43DC((_QWORD *)a2, &v205, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v204 = -1;
  v50 = off_256934418[0];
  v51 = strlen(off_256934418[0]);
  if (v51 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v52 = v51;
  if (v51 >= 0x17)
  {
    v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v54 = v51 | 7;
    v55 = v54 + 1;
    v53 = (std::string *)operator new(v54 + 1);
    __p.__r_.__value_.__l.__size_ = v52;
    __p.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    goto LABEL_80;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v51;
  v53 = &__p;
  if (v51)
LABEL_80:
    memmove(v53, v50, v52);
  v53->__r_.__value_.__s.__data_[v52] = 0;
  DWORD2(__dst) = 0;
  *(_QWORD *)&__dst = 0;
  v56 = sub_2394E5DE4(v203, (uint64_t)&__dst, (unsigned __int8 *)&__p);
  v204 = v56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v56 != -1)
  {
    if (v204 != -1)
    {
      v57 = &(*v203)[2 * v204];
      v58 = (std::__shared_weak_count *)v57[1];
      *v57 = 0;
      v57[1] = 0;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
    }
    v204 = -1;
  }
  v61 = off_256934418[0];
  v62 = strlen(off_256934418[0]);
  if (v62 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v63 = v62;
  if (v62 >= 0x17)
  {
    v65 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v62 | 7) != 0x17)
      v65 = v62 | 7;
    v66 = v65 + 1;
    v64 = (std::string *)operator new(v65 + 1);
    __p.__r_.__value_.__l.__size_ = v63;
    __p.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
    goto LABEL_98;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v62;
  v64 = &__p;
  if (v62)
LABEL_98:
    memmove(v64, v61, v63);
  v64->__r_.__value_.__s.__data_[v63] = 0;
  sub_2394E42E4((_QWORD *)a2, &v204, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v67 = off_256934438[0];
  v68 = strlen(off_256934438[0]);
  if (v68 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v69 = v68;
  if (v68 >= 0x17)
  {
    v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17)
      v71 = v68 | 7;
    v72 = v71 + 1;
    v70 = (std::string *)operator new(v71 + 1);
    __p.__r_.__value_.__l.__size_ = v69;
    __p.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
    goto LABEL_108;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v68;
  v70 = &__p;
  if (v68)
LABEL_108:
    memmove(v70, v67, v69);
  v70->__r_.__value_.__s.__data_[v69] = 0;
  *(_QWORD *)&__dst = 0;
  v73 = sub_2394E5C88(v202, (uint64_t)&__dst, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v73 != -1)
  {
    v74 = &(*v202)[2 * v73];
    v75 = (std::__shared_weak_count *)v74[1];
    *v74 = 0;
    v74[1] = 0;
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
  }
  v78 = off_256934438[0];
  v79 = strlen(off_256934438[0]);
  if (v79 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v80 = v79;
  if (v79 >= 0x17)
  {
    v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17)
      v82 = v79 | 7;
    v83 = v82 + 1;
    v81 = (std::string *)operator new(v82 + 1);
    __p.__r_.__value_.__l.__size_ = v80;
    __p.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
    goto LABEL_124;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v79;
  v81 = &__p;
  if (v79)
LABEL_124:
    memmove(v81, v78, v80);
  v81->__r_.__value_.__s.__data_[v80] = 0;
  *(_QWORD *)&__dst = 0;
  v84 = sub_2394E4504((uint64_t)v202, (uint64_t)&__dst, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v85 = &(*v202)[2 * v84];
  v86 = *v85;
  v87 = (std::__shared_weak_count *)v85[1];
  if (v87)
  {
    v88 = (unint64_t *)&v87->__shared_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    do
      v90 = __ldaxr(v88);
    while (__stlxr(v90 - 1, v88));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v86 + 40))(v86);
  v91 = *v198;
  if (v198[1] != *v198)
  {
    v92 = 0;
    v201 = v84;
    qmemcpy(v193, "_in_rootf:index_", sizeof(v193));
    do
    {
      v93 = *(_QWORD **)(v91 + 16 * v92);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
      __p.__r_.__value_.__r.__words[0] = v193[1];
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7) = v193[0];
      __p.__r_.__value_.__s.__data_[15] = 0;
      v94 = v93 + 7;
      LODWORD(__dst) = -1;
      v200 = sub_23998FA20((uint64_t **)v93 + 7, (uint64_t)&__dst, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v196 = v93[19];
        v197 = v93[20];
        v199 = (v197 - v196) >> 2;
        if (v197 == v196)
          goto LABEL_156;
      }
      else
      {
        v196 = v93[19];
        v197 = v93[20];
        v199 = (v197 - v196) >> 2;
        if (v197 == v196)
          goto LABEL_156;
      }
      v95 = 0;
      v96 = v200;
      if (v199 <= 1)
        v97 = 1;
      else
        v97 = v199;
      do
      {
        v98 = (uint64_t *)(*v94 + 16 * v96);
        v100 = *v98;
        v99 = (std::__shared_weak_count *)v98[1];
        if (v99)
        {
          v101 = (unint64_t *)&v99->__shared_owners_;
          do
            v102 = __ldxr(v101);
          while (__stxr(v102 + 1, v101));
          do
            v103 = __ldaxr(v101);
          while (__stlxr(v103 - 1, v101));
          if (!v103)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v104 = *(unsigned int *)(*(_QWORD *)(v100 + 40) + 4 * v95);
        v105 = &(*v203)[2 * v205];
        v107 = *v105;
        v106 = (std::__shared_weak_count *)v105[1];
        if (v106)
        {
          v108 = (unint64_t *)&v106->__shared_owners_;
          do
            v109 = __ldxr(v108);
          while (__stxr(v109 + 1, v108));
          do
            v110 = __ldaxr(v108);
          while (__stlxr(v110 - 1, v108));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        *(_DWORD *)(*(_QWORD *)(v107 + 40) + 4 * v104) = v92;
        ++v95;
      }
      while (v95 != v97);
LABEL_156:
      v111 = off_256934418[0];
      v112 = strlen(off_256934418[0]);
      if (v112 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v113 = v112;
      if (v112 >= 0x17)
      {
        v115 = (v112 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v112 | 7) != 0x17)
          v115 = v112 | 7;
        v116 = v115 + 1;
        v114 = (std::string *)operator new(v115 + 1);
        __p.__r_.__value_.__l.__size_ = v113;
        __p.__r_.__value_.__r.__words[2] = v116 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
LABEL_163:
        memmove(v114, v111, v113);
        goto LABEL_164;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v112;
      v114 = &__p;
      if (v112)
        goto LABEL_163;
LABEL_164:
      v114->__r_.__value_.__s.__data_[v113] = 0;
      DWORD2(__dst) = 0;
      *(_QWORD *)&__dst = 0;
      v117 = sub_2394E5DE4((uint64_t **)v93 + 7, (uint64_t)&__dst, (unsigned __int8 *)&__p);
      v195 = v92;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v118 = off_256934438[0];
      v119 = strlen(off_256934438[0]);
      if (v119 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v120 = v119;
      v194 = v117;
      if (v119 >= 0x17)
      {
        v122 = (v119 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v119 | 7) != 0x17)
          v122 = v119 | 7;
        v123 = v122 + 1;
        v121 = (std::string *)operator new(v122 + 1);
        __p.__r_.__value_.__l.__size_ = v120;
        __p.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
LABEL_173:
        memmove(v121, v118, v120);
        goto LABEL_174;
      }
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v119;
      v121 = &__p;
      if (v119)
        goto LABEL_173;
LABEL_174:
      v121->__r_.__value_.__s.__data_[v120] = 0;
      v124 = v93 + 10;
      *(_QWORD *)&__dst = 0;
      v125 = sub_2394E5C88((uint64_t **)v93 + 10, (uint64_t)&__dst, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v129 = &(*v202)[2 * v201];
        v127 = *v129;
        v128 = (std::__shared_weak_count *)v129[1];
        if (!v128)
          goto LABEL_183;
      }
      else
      {
        v126 = &(*v202)[2 * v201];
        v127 = *v126;
        v128 = (std::__shared_weak_count *)v126[1];
        if (!v128)
          goto LABEL_183;
      }
      v130 = (unint64_t *)&v128->__shared_owners_;
      do
        v131 = __ldxr(v130);
      while (__stxr(v131 + 1, v130));
      do
        v132 = __ldaxr(v130);
      while (__stlxr(v132 - 1, v130));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
LABEL_183:
      v133 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 16))(v127);
      v134 = (uint64_t *)(*v124 + 16 * v125);
      v135 = *v134;
      v136 = (std::__shared_weak_count *)v134[1];
      if (v136)
      {
        v137 = (unint64_t *)&v136->__shared_owners_;
        do
          v138 = __ldxr(v137);
        while (__stxr(v138 + 1, v137));
        do
          v139 = __ldaxr(v137);
        while (__stlxr(v139 - 1, v137));
        if (!v139)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      v140 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 16))(v135);
      v141 = &(*v202)[2 * v201];
      v142 = *v141;
      v143 = (std::__shared_weak_count *)v141[1];
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
        do
          v146 = __ldaxr(v144);
        while (__stlxr(v146 - 1, v144));
        if (!v146)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v142 + 32))(v142, v140 + v133);
      if (v140)
      {
        for (i = 0; i != v140; ++i)
        {
          v150 = (uint64_t *)(*v124 + 16 * v125);
          v152 = *v150;
          v151 = (std::__shared_weak_count *)v150[1];
          if (!v151)
            goto LABEL_203;
          v153 = (unint64_t *)&v151->__shared_owners_;
          do
            v154 = __ldxr(v153);
          while (__stxr(v154 + 1, v153));
          do
            v155 = __ldaxr(v153);
          while (__stlxr(v155 - 1, v153));
          if (!v155)
          {
            ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
            std::__shared_weak_count::__release_weak(v151);
            v156 = *(_QWORD *)(v152 + 40);
            v163 = &(*v202)[2 * v201];
            v159 = *v163;
            v158 = (std::__shared_weak_count *)v163[1];
            if (v158)
            {
LABEL_204:
              v160 = (unint64_t *)&v158->__shared_owners_;
              do
                v161 = __ldxr(v160);
              while (__stxr(v161 + 1, v160));
              do
                v162 = __ldaxr(v160);
              while (__stlxr(v162 - 1, v160));
              if (!v162)
              {
                ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                std::__shared_weak_count::__release_weak(v158);
              }
            }
          }
          else
          {
LABEL_203:
            v156 = *(_QWORD *)(v152 + 40);
            v157 = &(*v202)[2 * v201];
            v159 = *v157;
            v158 = (std::__shared_weak_count *)v157[1];
            if (v158)
              goto LABEL_204;
          }
          v148 = (_DWORD *)(v156 + 8 * i);
          v149 = (_DWORD *)(*(_QWORD *)(v159 + 40) + 8 * (i + v133));
          *v149 = *v148;
          v149[1] = v148[1];
        }
      }
      if (v197 != v196)
      {
        v164 = 0;
        v165 = v194;
        v166 = v200;
        if (v199 <= 1)
          v167 = 1;
        else
          v167 = v199;
        v168 = vdup_n_s32(v133);
        do
        {
          v170 = (uint64_t *)(*v94 + 16 * v165);
          v172 = *v170;
          v171 = (std::__shared_weak_count *)v170[1];
          if (v171)
          {
            v173 = (unint64_t *)&v171->__shared_owners_;
            do
              v174 = __ldxr(v173);
            while (__stxr(v174 + 1, v173));
            do
              v175 = __ldaxr(v173);
            while (__stlxr(v175 - 1, v173));
            if (!v175)
            {
              ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
              std::__shared_weak_count::__release_weak(v171);
            }
          }
          v176 = *(_QWORD *)(v172 + 40) + 12 * v164;
          v177 = *(int32x2_t *)v176;
          v178 = *(_DWORD *)(v176 + 8);
          v179 = (uint64_t *)(*v94 + 16 * v166);
          v181 = *v179;
          v180 = (std::__shared_weak_count *)v179[1];
          if (v180)
          {
            v182 = (unint64_t *)&v180->__shared_owners_;
            do
              v183 = __ldxr(v182);
            while (__stxr(v183 + 1, v182));
            do
              v184 = __ldaxr(v182);
            while (__stlxr(v184 - 1, v182));
            if (!v184)
            {
              ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
              std::__shared_weak_count::__release_weak(v180);
            }
          }
          v185 = *(_DWORD *)(*(_QWORD *)(v181 + 40) + 4 * v164);
          v186 = &(*v203)[2 * v204];
          v188 = *v186;
          v187 = (std::__shared_weak_count *)v186[1];
          if (v187)
          {
            v189 = (unint64_t *)&v187->__shared_owners_;
            do
              v190 = __ldxr(v189);
            while (__stxr(v190 + 1, v189));
            do
              v191 = __ldaxr(v189);
            while (__stlxr(v191 - 1, v189));
            if (!v191)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
          v169 = (int32x2_t *)(*(_QWORD *)(v188 + 40) + 12 * v185);
          *v169 = vadd_s32(v177, v168);
          v169[1].i32[0] = v178 + v133;
          ++v164;
        }
        while (v164 != v167);
      }
      v92 = v195 + 1;
      v91 = *v198;
    }
    while (v195 + 1 < (unint64_t)((v198[1] - *v198) >> 4));
  }
}

void sub_23999DA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
  {
    operator delete(a29);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23999DB10(_QWORD *a1)
{
  char *v2;
  size_t v3;
  size_t v4;
  void **p_dst;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  char *v10;
  size_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  size_t v33;
  void *p_p;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  size_t v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unsigned int v54;
  void **__dst;
  size_t v56;
  unint64_t v57;
  void *__p;
  size_t v59;
  unint64_t v60;

  v2 = off_256934448[0];
  v3 = strlen(off_256934448[0]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
LABEL_72:
    sub_23941A5AC();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (void **)operator new(v6 + 1);
    v56 = v4;
    v57 = v7 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v57) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v8 = a1 + 10;
  __p = 0;
  v59 = 0;
  v60 = 0;
  v9 = sub_23958C0D8((uint64_t **)a1 + 10, (uint64_t)&__p, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v60) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v57) & 0x80000000) == 0)
    {
LABEL_11:
      if (v9 != -1)
        goto LABEL_25;
      goto LABEL_15;
    }
  }
  else if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(__dst);
  if (v9 != -1)
    goto LABEL_25;
LABEL_15:
  v10 = off_256934448[0];
  v11 = strlen(off_256934448[0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_72;
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    v56 = v12;
    v57 = v15 | 0x8000000000000000;
    __dst = v13;
    goto LABEL_22;
  }
  HIBYTE(v57) = v11;
  v13 = (void **)&__dst;
  if (v11)
LABEL_22:
    memmove(v13, v10, v12);
  *((_BYTE *)v13 + v12) = 0;
  __p = 0;
  v59 = 0;
  v60 = 0;
  v9 = sub_23958964C((uint64_t)(a1 + 10), (uint64_t)&__p, (uint64_t)&__dst);
  if (SHIBYTE(v60) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v57) & 0x80000000) == 0)
    {
LABEL_25:
      v16 = v9;
      v17 = (uint64_t *)(*v8 + 16 * v9);
      v18 = *v17;
      v19 = (std::__shared_weak_count *)v17[1];
      if (!v19)
        goto LABEL_31;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v57) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__dst);
  v16 = v9;
  v53 = (uint64_t *)(*v8 + 16 * v9);
  v18 = *v53;
  v19 = (std::__shared_weak_count *)v53[1];
  if (!v19)
    goto LABEL_31;
LABEL_26:
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_31:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, 1);
  v23 = (uint64_t *)(*v8 + 16 * v16);
  v25 = *v23;
  v24 = (std::__shared_weak_count *)v23[1];
  if (v24)
  {
    v26 = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    do
      v28 = __ldaxr(v26);
    while (__stlxr(v28 - 1, v26));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  MEMORY[0x23B83DBFC](*(_QWORD *)(v25 + 40), "g0");
  v30 = a1[19];
  v29 = a1[20];
  v31 = off_256934428[0];
  v32 = strlen(off_256934428[0]);
  if (v32 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_73;
  v33 = v32;
  if (v32 >= 0x17)
  {
    v35 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17)
      v35 = v32 | 7;
    v36 = v35 + 1;
    p_p = operator new(v35 + 1);
    v59 = v33;
    v60 = v36 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_44;
  }
  HIBYTE(v60) = v32;
  p_p = &__p;
  if (v32)
LABEL_44:
    memmove(p_p, v31, v33);
  *((_BYTE *)p_p + v33) = 0;
  v37 = a1 + 7;
  LODWORD(__dst) = 0;
  v38 = sub_2399346C0((uint64_t **)a1 + 7, (uint64_t)&__dst, (unsigned __int8 *)&__p);
  v39 = v38;
  v54 = v38;
  if (SHIBYTE(v60) < 0)
  {
    operator delete(__p);
    if (v39 != -1)
      goto LABEL_59;
  }
  else if (v38 != -1)
  {
    goto LABEL_59;
  }
  v40 = off_256934428[0];
  v41 = strlen(off_256934428[0]);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
LABEL_73:
    sub_23941A5AC();
  v42 = v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    v43 = operator new(v44 + 1);
    v59 = v42;
    v60 = v45 | 0x8000000000000000;
    __p = v43;
    goto LABEL_56;
  }
  HIBYTE(v60) = v41;
  v43 = &__p;
  if (v41)
LABEL_56:
    memmove(v43, v40, v42);
  *((_BYTE *)v43 + v42) = 0;
  sub_2394E43DC(a1, &v54, (uint64_t)&__p);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
LABEL_59:
  if (((unint64_t)(v29 - v30) >> 2))
  {
    v46 = 0;
    do
    {
      v47 = (uint64_t *)(*v37 + 16 * v54);
      v49 = *v47;
      v48 = (std::__shared_weak_count *)v47[1];
      if (v48)
      {
        v50 = (unint64_t *)&v48->__shared_owners_;
        do
          v51 = __ldxr(v50);
        while (__stxr(v51 + 1, v50));
        do
          v52 = __ldaxr(v50);
        while (__stlxr(v52 - 1, v50));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v49 + 40) + 4 * v46++) = 0;
    }
    while (v46 != ((unint64_t)(v29 - v30) >> 2));
  }
}

void sub_23999DFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_23999DFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _DWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _OWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  __int128 v72;
  unsigned int v73;
  void *__p;
  char *v75;
  char *v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;

  v3 = *(_QWORD *)(a1 + 152);
  v2 = *(_QWORD *)(a1 + 160);
  v78 = 0;
  v79 = 0;
  v77 = 0;
  v4 = v2 - v3;
  if (v2 == v3)
    return 0;
  if (v4 < 0)
    sub_2394189F8();
  v5 = a1;
  v6 = (unint64_t)((v4 >> 2) - 1) >> 6;
  v7 = (char *)operator new(8 * (v6 + 1));
  v8 = v7;
  v78 = v4 >> 2;
  v79 = v6 + 1;
  v77 = v7;
  if ((unint64_t)v4 >= 0x104)
    v9 = (unint64_t)((v4 >> 2) - 1) >> 6;
  else
    v9 = 0;
  *(_QWORD *)&v7[8 * v9] = 0;
  v10 = 8 * ((unint64_t)(v4 >> 2) >> 6);
  if ((unint64_t)v4 >= 0x100)
    bzero(v7, v10);
  if (v4 >> 2)
    *(_QWORD *)&v8[v10] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v4 >> 2));
  v11 = 0;
  v12 = 0;
  v70 = 0;
  v13 = v5 + 104;
  while (1)
  {
    v14 = v11 >> 6;
    v15 = 1 << v11;
    v16 = *((_QWORD *)v77 + v14);
    if ((v16 & v15) == 0)
      break;
LABEL_13:
    v11 = ++v12;
    if (v12 >= (unint64_t)((v2 - v3) >> 2))
      goto LABEL_68;
  }
  v69 = v12;
  *((_QWORD *)v77 + v14) = v16 | v15;
  __p = 0;
  v75 = 0;
  v76 = 0;
  v17 = (char *)operator new(4uLL);
  v18 = 0;
  *(_DWORD *)v17 = v69;
  v75 = v17 + 4;
  v76 = v17 + 4;
  ++v70;
  __p = v17;
  while (2)
  {
    LODWORD(v72) = *(_DWORD *)&v17[4 * v18];
    v71 = *(_DWORD *)sub_23996252C(v13, (unsigned int *)&v72);
    v73 = v71;
    do
    {
      v73 = *(_DWORD *)(sub_239962518(v13, &v73) + 4);
      v20 = *(unsigned int *)sub_239962518(v13, &v73);
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 32) + 16 * *(unsigned int *)(v5 + 180));
      v23 = *v21;
      v22 = (std::__shared_weak_count *)v21[1];
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (((*(_QWORD *)(*(_QWORD *)(v23 + 40) + ((v20 >> 3) & 0x1FFFFFF8)) >> v20) & 1) == 0)
      {
        v27 = v5;
        v28 = v18;
        v29 = (unsigned int *)sub_239962518(v13, &v73);
        v30 = *(unsigned int *)(sub_239962518(v13, v29) + 16);
        v31 = v30 >> 6;
        v32 = 1 << v30;
        if (((1 << v30) & *((_QWORD *)v77 + (v30 >> 6))) == 0)
        {
          v33 = v75;
          if (v75 < v76)
          {
            *(_DWORD *)v75 = v30;
            v34 = (uint64_t)(v33 + 4);
LABEL_50:
            v75 = (char *)v34;
            *((_QWORD *)v77 + v31) |= v32;
            continue;
          }
          v35 = (char *)__p;
          v36 = v75 - (_BYTE *)__p;
          v37 = (v75 - (_BYTE *)__p) >> 2;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62)
            sub_2394189F8();
          v39 = v76 - (_BYTE *)__p;
          if ((v76 - (_BYTE *)__p) >> 1 > v38)
            v38 = v39 >> 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            if (v40 >> 62)
              sub_239418A80();
            v41 = v75 - (_BYTE *)__p;
            v42 = (v75 - (_BYTE *)__p) >> 2;
            v43 = v40;
            v44 = operator new(4 * v40);
            v40 = v43;
            v37 = v42;
            v36 = v41;
            v31 = v30 >> 6;
            v32 = 1 << v30;
            v45 = &v44[4 * v42];
            *v45 = v30;
            v34 = (uint64_t)(v45 + 1);
            if (v33 != v35)
            {
LABEL_38:
              v46 = v33 - 4 - v35;
              if (v46 >= 0x2C)
              {
                v18 = v28;
                if ((unint64_t)(v33 - &v44[v36]) >= 0x20)
                {
                  v47 = (v46 >> 2) + 1;
                  v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
                  v49 = &v33[-v48];
                  v45 = (_DWORD *)((char *)v45 - v48);
                  v50 = &v44[4 * v37 - 16];
                  v51 = v33 - 16;
                  v52 = v47 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v53 = *(_OWORD *)v51;
                    *(v50 - 1) = *((_OWORD *)v51 - 1);
                    *v50 = v53;
                    v50 -= 2;
                    v51 -= 32;
                    v52 -= 8;
                  }
                  while (v52);
                  v33 = v49;
                  if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_48:
                    v33 = (char *)__p;
                    __p = v45;
                    v76 = &v44[4 * v40];
                    v5 = v27;
                    if (!v33)
                      goto LABEL_50;
LABEL_49:
                    operator delete(v33);
                    goto LABEL_50;
                  }
                }
              }
              else
              {
                v18 = v28;
              }
              do
              {
                v54 = *((_DWORD *)v33 - 1);
                v33 -= 4;
                *--v45 = v54;
              }
              while (v33 != v35);
              goto LABEL_48;
            }
          }
          else
          {
            v44 = 0;
            v45 = (_DWORD *)(4 * v37);
            *(_DWORD *)(4 * v37) = v30;
            v34 = 4 * v37 + 4;
            if (v33 != v35)
              goto LABEL_38;
          }
          v18 = v28;
          __p = v45;
          v76 = &v44[4 * v40];
          v5 = v27;
          if (!v33)
            goto LABEL_50;
          goto LABEL_49;
        }
      }
    }
    while (v73 != v71);
    ++v18;
    v17 = (char *)__p;
    v19 = v75 - (_BYTE *)__p;
    if (v18 < ((unint64_t)(v75 - (_BYTE *)__p) >> 2))
      continue;
    break;
  }
  v55 = *(_QWORD *)(v5 + 160) - *(_QWORD *)(v5 + 152);
  v56 = v70;
  if (v19 < v55)
  {
    v57 = operator new(0xD0uLL);
    v57[1] = 0;
    v57[2] = 0;
    *v57 = &off_250ADED90;
    sub_23996301C((uint64_t)(v57 + 3));
    *(_QWORD *)&v72 = v57 + 3;
    *((_QWORD *)&v72 + 1) = v57;
    sub_23999E62C(v5, (unsigned int **)&__p, (uint64_t)(v57 + 3));
    v58 = *(_QWORD **)(a2 + 8);
    if ((unint64_t)v58 >= *(_QWORD *)(a2 + 16))
    {
      v62 = sub_23951E0F0(a2, &v72);
    }
    else
    {
      *v58 = v72;
      v59 = *((_QWORD *)&v72 + 1);
      v58[1] = *((_QWORD *)&v72 + 1);
      if (v59)
      {
        v60 = (unint64_t *)(v59 + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      v62 = v58 + 2;
    }
    *(_QWORD *)(a2 + 8) = v62;
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v17 = (char *)__p;
    v56 = v68;
  }
  if (v17)
    operator delete(v17);
  if (v19 < v55)
  {
    v3 = *(_QWORD *)(v5 + 152);
    v2 = *(_QWORD *)(v5 + 160);
    v68 = v56;
    v12 = v69;
    goto LABEL_13;
  }
  v70 = v56;
LABEL_68:
  if (v77)
    operator delete(v77);
  return v70;
}

void sub_23999E54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20)
{
  void *v21;

  sub_239416DA0((uint64_t)&a14);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    v21 = a20;
    if (!a20)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v21 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_23999E59C()
{
  __cxa_end_catch();
  JUMPOUT(0x23999E5B4);
}

void sub_23999E5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  std::__shared_weak_count *v20;
  void *v22;
  void *v23;

  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  if (a17)
  {
    operator delete(a17);
    v23 = a20;
    if (!a20)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v23 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void sub_23999E5D8()
{
  JUMPOUT(0x23999E5F8);
}

void sub_23999E62C(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  _DWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  _OWORD *v77;
  __int128 *v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _BYTE *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD *v94;
  __int128 *v95;
  uint64_t v96;
  __int128 v97;
  int v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  _BYTE *v105;
  char *v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  __int128 *v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _OWORD *v123;
  __int128 *v124;
  uint64_t v125;
  __int128 v126;
  int v127;
  unsigned int *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _BYTE *v133;
  unsigned int *v134;
  unint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  char *v141;
  uint64_t v142;
  __int128 v143;
  uint64_t *v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int v150;
  uint64_t *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned int *v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unsigned int v169;
  uint64_t *v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int *v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int *v183;
  uint64_t *v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  std::__shared_weak_count *v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  _QWORD *v223;
  unsigned int v224;
  unsigned int v225;
  _QWORD *v226;
  unsigned int v227;
  _DWORD *v228;
  _DWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  uint64_t *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t i;
  uint64_t *v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  uint64_t *v253;
  std::__shared_weak_count *v254;
  uint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  unint64_t v258;
  unsigned int *v259;
  uint64_t *v260;
  std::__shared_weak_count *v261;
  uint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  int v266;
  uint64_t *v267;
  std::__shared_weak_count *v268;
  uint64_t v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t *v280;
  std::__shared_weak_count *v281;
  uint64_t v282;
  unint64_t *v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  uint64_t *v287;
  std::__shared_weak_count *v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t *v293;
  std::__shared_weak_count *v294;
  uint64_t v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t v298;
  int v299;
  uint64_t *v300;
  std::__shared_weak_count *v301;
  uint64_t v302;
  unint64_t *v303;
  unint64_t v304;
  unint64_t v305;
  unsigned int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  std::__shared_weak_count *v310;
  uint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  unint64_t v314;
  int v315;
  uint64_t *v316;
  uint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t v321;
  unsigned int v322;
  uint64_t v323;
  int v324;
  uint64_t **v325;
  uint64_t v326;
  unsigned int *v327;
  uint64_t **v328;
  __int128 v330;
  uint64_t v331;
  uint64_t v332;
  void *v334[2];
  char v335;
  unsigned int v336;
  void *v337;
  void *v338;
  char *v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  void *__p[3];
  unsigned int v348;
  void *v349;
  unsigned int *v350;
  char *v351;
  char *v352;
  char *v353;
  char *v354;
  char *v355;
  char *v356;
  char *v357;
  unsigned int *v358;
  char *v359;
  char *v360;
  char *v361;
  char *v362;
  char *v363;
  unsigned int *v364;
  char *v365;
  char *v366;
  int v367[3];

  v364 = 0;
  v365 = 0;
  v366 = 0;
  v5 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v362 = 0;
  v363 = 0;
  v361 = 0;
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      sub_2394189F8();
    v361 = (char *)operator new(v4 - v5);
    v363 = &v361[4 * (v6 >> 2)];
    memset(v361, 255, v6);
    v362 = &v361[v6];
  }
  v358 = 0;
  v359 = 0;
  v360 = 0;
  v355 = 0;
  v356 = 0;
  v357 = 0;
  v352 = 0;
  v353 = 0;
  v354 = 0;
  v7 = operator new(0xCuLL);
  v350 = v7 + 3;
  v351 = (char *)(v7 + 3);
  *(_QWORD *)v7 = -1;
  v7[2] = -1;
  v349 = v7;
  v9 = *a2;
  v8 = a2[1];
  v10 = (char *)v8 - (char *)*a2;
  if (v8 != *a2)
  {
    v11 = (v10 >> 2) + (v10 >> 1);
    if (v11 >> 62)
      sub_2394189F8();
    v12 = 0;
    v352 = (char *)operator new(12 * (v10 >> 2));
    v353 = v352;
    v354 = &v352[4 * v11];
    v327 = v8;
LABEL_9:
    sub_23996362C(a1, v9, (uint64_t)&v349);
    v14 = (unsigned int *)v349;
    v15 = v350;
    if (v349 == v350)
    {
      v16 = v360;
      if (v12 < v360)
        goto LABEL_7;
LABEL_150:
      v128 = v358;
      v129 = (v12 - (char *)v358) >> 2;
      v130 = v129 + 1;
      if ((unint64_t)(v129 + 1) >> 62)
        sub_2394189F8();
      v131 = v16 - (char *)v358;
      if (v131 >> 1 > v130)
        v130 = v131 >> 1;
      if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL)
        v132 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v132 = v130;
      if (v132)
      {
        if (v132 >> 62)
          sub_239418A80();
        v133 = operator new(4 * v132);
        v134 = (unsigned int *)&v133[4 * v129];
        *v134 = *v9;
        v13 = (uint64_t)(v134 + 1);
        if (v12 == (char *)v128)
          goto LABEL_159;
LABEL_162:
        v135 = v12 - 4 - (char *)v128;
        if (v135 < 0xBC)
        {
          v136 = (unsigned int *)v12;
          goto LABEL_164;
        }
        if (&v133[v12 - (char *)v128 - 4 - (v135 & 0xFFFFFFFFFFFFFFFCLL)] > &v133[v12 - (char *)v128 - 4])
        {
          v136 = (unsigned int *)v12;
          goto LABEL_164;
        }
        if (&v12[-(v135 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v12 - 4)
        {
          v136 = (unsigned int *)v12;
          goto LABEL_164;
        }
        if ((unint64_t)((char *)v128 - v133) < 0x20)
        {
          v136 = (unsigned int *)v12;
          goto LABEL_164;
        }
        v138 = (v135 >> 2) + 1;
        v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
        v136 = (unsigned int *)&v12[-v139];
        v134 = (unsigned int *)((char *)v134 - v139);
        v140 = &v133[4 * v129 - 16];
        v141 = v12 - 16;
        v142 = v138 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v143 = *(_OWORD *)v141;
          *(v140 - 1) = *((_OWORD *)v141 - 1);
          *v140 = v143;
          v140 -= 2;
          v141 -= 32;
          v142 -= 8;
        }
        while (v142);
        if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_164:
            v137 = *--v136;
            *--v134 = v137;
          }
          while (v136 != v128);
        }
        v12 = (char *)v358;
        v358 = v134;
        v359 = (char *)v13;
        v360 = &v133[4 * v132];
        if (!v12)
          goto LABEL_8;
      }
      else
      {
        v133 = 0;
        v134 = (unsigned int *)(4 * v129);
        *(_DWORD *)(4 * v129) = *v9;
        v13 = 4 * v129 + 4;
        if (v12 != (char *)v128)
          goto LABEL_162;
LABEL_159:
        v358 = v134;
        v359 = (char *)v13;
        v360 = &v133[4 * v132];
        if (!v12)
          goto LABEL_8;
      }
      operator delete(v12);
      goto LABEL_8;
    }
    while (1)
    {
      v18 = *v14;
      v19 = *(_DWORD *)&v361[4 * v18];
      if (v19 != -1)
      {
        v20 = v353;
        if (v353 >= v354)
        {
          v21 = v352;
          v22 = (v353 - v352) >> 2;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 62)
            sub_2394189F8();
          v24 = v354 - v352;
          if ((v354 - v352) >> 1 > v23)
            v23 = v24 >> 1;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
            v25 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
          {
            if (v25 >> 62)
              sub_239418A80();
            v26 = operator new(4 * v25);
            v27 = &v26[4 * v22];
            *(_DWORD *)v27 = v19;
            v17 = (uint64_t)(v27 + 4);
            if (v20 == v21)
              goto LABEL_147;
          }
          else
          {
            v26 = 0;
            v27 = (char *)(4 * v22);
            *(_DWORD *)(4 * v22) = v19;
            v17 = 4 * v22 + 4;
            if (v20 == v21)
              goto LABEL_147;
          }
          v37 = v20 - 4 - v21;
          if (v37 < 0x2C)
            goto LABEL_410;
          if ((unint64_t)(v21 - v26) < 0x20)
            goto LABEL_410;
          v38 = (v37 >> 2) + 1;
          v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
          v40 = &v20[-v39];
          v27 -= v39;
          v41 = &v26[4 * v22 - 16];
          v42 = (__int128 *)(v20 - 16);
          v43 = v38 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v44 = *v42;
            *(v41 - 1) = *(v42 - 1);
            *v41 = v44;
            v41 -= 2;
            v42 -= 2;
            v43 -= 8;
          }
          while (v43);
          v20 = v40;
          if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_410:
            do
            {
              v45 = *((_DWORD *)v20 - 1);
              v20 -= 4;
              *((_DWORD *)v27 - 1) = v45;
              v27 -= 4;
            }
            while (v20 != v21);
          }
          goto LABEL_147;
        }
        goto LABEL_12;
      }
      v28 = v365;
      if (v365 < v366)
      {
        *(_DWORD *)v365 = v18;
        v29 = v364;
        v30 = (uint64_t)(v28 + 4);
        goto LABEL_56;
      }
      v31 = (char *)v364;
      v32 = (v365 - (char *)v364) >> 2;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 62)
        sub_2394189F8();
      v34 = v366 - (char *)v364;
      if ((v366 - (char *)v364) >> 1 > v33)
        v33 = v34 >> 1;
      v35 = (unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v33;
      if (v35)
        break;
      v36 = 0;
      v29 = (unsigned int *)(4 * v32);
      *(_DWORD *)(4 * v32) = v18;
      v30 = 4 * v32 + 4;
      if (v28 != v31)
        goto LABEL_47;
LABEL_54:
      v364 = v29;
      v366 = &v36[4 * v35];
      if (v28)
        operator delete(v28);
LABEL_56:
      v365 = (char *)v30;
      v19 = ((unint64_t)(v30 - (_QWORD)v29) >> 2) - 1;
      *(_DWORD *)&v361[4 * *v14] = v19;
      v55 = *v14;
      v56 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v57 = *v56;
      v58 = (std::__shared_weak_count *)v56[1];
      if (!v58)
        goto LABEL_61;
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(p_shared_owners);
      while (__stxr(v60 + 1, p_shared_owners));
      do
        v61 = __ldaxr(p_shared_owners);
      while (__stlxr(v61 - 1, p_shared_owners));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
        v62 = *(_OWORD *)(*(_QWORD *)(v57 + 40) + 16 * v55);
        v64 = v356;
        v63 = v357;
        v330 = v62;
        if (v356 < v357)
        {
LABEL_62:
          *(_DWORD *)v64 = v62;
          v65 = v64 + 4;
          goto LABEL_83;
        }
      }
      else
      {
LABEL_61:
        v62 = *(_OWORD *)(*(_QWORD *)(v57 + 40) + 16 * v55);
        v64 = v356;
        v63 = v357;
        v330 = v62;
        if (v356 < v357)
          goto LABEL_62;
      }
      v66 = v355;
      v67 = (v64 - v355) >> 2;
      v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 62)
        goto LABEL_396;
      v69 = v63 - v355;
      if (v69 >> 1 > v68)
        v68 = v69 >> 1;
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
        v70 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v70 = v68;
      if (v70)
      {
        if (v70 >> 62)
          goto LABEL_397;
        v71 = operator new(4 * v70);
        v62 = v330;
        v72 = &v71[4 * v67];
        *(_DWORD *)v72 = v330;
        v65 = v72 + 4;
        if (v64 == v66)
          goto LABEL_81;
LABEL_75:
        v73 = v64 - 4 - v66;
        if (v73 < 0x2C)
          goto LABEL_411;
        if ((unint64_t)(v66 - v71) < 0x20)
          goto LABEL_411;
        v74 = (v73 >> 2) + 1;
        v75 = 4 * (v74 & 0x7FFFFFFFFFFFFFF8);
        v76 = &v64[-v75];
        v72 -= v75;
        v77 = &v71[4 * v67 - 16];
        v78 = (__int128 *)(v64 - 16);
        v79 = v74 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v80 = *v78;
          *(v77 - 1) = *(v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 2;
          v79 -= 8;
        }
        while (v79);
        v64 = v76;
        if (v74 != (v74 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_411:
          do
          {
            v81 = *((_DWORD *)v64 - 1);
            v64 -= 4;
            *((_DWORD *)v72 - 1) = v81;
            v72 -= 4;
          }
          while (v64 != v66);
        }
        goto LABEL_81;
      }
      v71 = 0;
      v72 = (char *)(4 * v67);
      *(_DWORD *)(4 * v67) = v62;
      v65 = (char *)(4 * v67 + 4);
      if (v64 != v66)
        goto LABEL_75;
LABEL_81:
      v63 = &v71[4 * v70];
      v355 = v72;
      v356 = v65;
      v357 = v63;
      if (v66)
      {
        operator delete(v66);
        v62 = v330;
        v63 = v357;
      }
LABEL_83:
      v356 = v65;
      if (v65 < v63)
      {
        *(_DWORD *)v65 = DWORD1(v62);
        v82 = v65 + 4;
        goto LABEL_106;
      }
      v83 = v355;
      v84 = (v65 - v355) >> 2;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 62)
        goto LABEL_396;
      v86 = v63 - v355;
      if (v86 >> 1 > v85)
        v85 = v86 >> 1;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
        v87 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      if (v87)
      {
        if (v87 >> 62)
          goto LABEL_397;
        v88 = operator new(4 * v87);
        DWORD2(v62) = DWORD2(v330);
        v89 = &v88[4 * v84];
        *(_DWORD *)v89 = DWORD1(v330);
        v82 = v89 + 4;
        if (v65 == v83)
          goto LABEL_104;
      }
      else
      {
        v88 = 0;
        v89 = (char *)(4 * v84);
        *(_DWORD *)(4 * v84) = DWORD1(v62);
        v82 = (char *)(4 * v84 + 4);
        if (v65 == v83)
          goto LABEL_104;
      }
      v90 = v65 - 4 - v83;
      if (v90 < 0x2C)
      {
        v91 = v65;
        goto LABEL_103;
      }
      if ((unint64_t)(v83 - v88) < 0x20)
      {
        v91 = v65;
        do
        {
LABEL_103:
          v98 = *((_DWORD *)v91 - 1);
          v91 -= 4;
          *((_DWORD *)v89 - 1) = v98;
          v89 -= 4;
        }
        while (v91 != v83);
        goto LABEL_104;
      }
      v92 = (v90 >> 2) + 1;
      v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
      v91 = &v65[-v93];
      v89 -= v93;
      v94 = &v88[4 * v84 - 16];
      v95 = (__int128 *)(v65 - 16);
      v96 = v92 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v97 = *v95;
        *(v94 - 1) = *(v95 - 1);
        *v94 = v97;
        v94 -= 2;
        v95 -= 2;
        v96 -= 8;
      }
      while (v96);
      if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_103;
LABEL_104:
      v63 = &v88[4 * v87];
      v355 = v89;
      v356 = v82;
      v357 = v63;
      if (v83)
      {
        operator delete(v83);
        DWORD2(v62) = DWORD2(v330);
        v63 = v357;
      }
LABEL_106:
      v356 = v82;
      if (v82 < v63)
      {
        *(_DWORD *)v82 = DWORD2(v62);
        v99 = (uint64_t)(v82 + 4);
        goto LABEL_129;
      }
      v100 = v355;
      v101 = (v82 - v355) >> 2;
      v102 = v101 + 1;
      if ((unint64_t)(v101 + 1) >> 62)
LABEL_396:
        sub_2394189F8();
      v103 = v63 - v355;
      if (v103 >> 1 > v102)
        v102 = v103 >> 1;
      if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
        v104 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v104 = v102;
      if (v104)
      {
        if (v104 >> 62)
LABEL_397:
          sub_239418A80();
        v105 = operator new(4 * v104);
        v106 = &v105[4 * v101];
        *(_DWORD *)v106 = DWORD2(v330);
        v99 = (uint64_t)(v106 + 4);
        if (v82 == v100)
          goto LABEL_127;
      }
      else
      {
        v105 = 0;
        v106 = (char *)(4 * v101);
        *(_DWORD *)(4 * v101) = DWORD2(v62);
        v99 = 4 * v101 + 4;
        if (v82 == v100)
          goto LABEL_127;
      }
      v107 = v82 - 4 - v100;
      if (v107 < 0x2C)
      {
        v108 = v82;
        goto LABEL_126;
      }
      if ((unint64_t)(v100 - v105) < 0x20)
      {
        v108 = v82;
        do
        {
LABEL_126:
          v115 = *((_DWORD *)v108 - 1);
          v108 -= 4;
          *((_DWORD *)v106 - 1) = v115;
          v106 -= 4;
        }
        while (v108 != v100);
        goto LABEL_127;
      }
      v109 = (v107 >> 2) + 1;
      v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
      v108 = &v82[-v110];
      v106 -= v110;
      v111 = &v105[4 * v101 - 16];
      v112 = (__int128 *)(v82 - 16);
      v113 = v109 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v114 = *v112;
        *(v111 - 1) = *(v112 - 1);
        *v111 = v114;
        v111 -= 2;
        v112 -= 2;
        v113 -= 8;
      }
      while (v113);
      if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_126;
LABEL_127:
      v355 = v106;
      v356 = (char *)v99;
      v357 = &v105[4 * v104];
      if (v100)
        operator delete(v100);
LABEL_129:
      v356 = (char *)v99;
      v20 = v353;
      if (v353 >= v354)
      {
        v21 = v352;
        v116 = (v353 - v352) >> 2;
        v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 62)
          sub_2394189F8();
        v118 = v354 - v352;
        if ((v354 - v352) >> 1 > v117)
          v117 = v118 >> 1;
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v117;
        if (v25)
        {
          if (v25 >> 62)
            sub_239418A80();
          v26 = operator new(4 * v25);
          v27 = &v26[4 * v116];
          *(_DWORD *)v27 = v19;
          v17 = (uint64_t)(v27 + 4);
          if (v20 == v21)
            goto LABEL_147;
LABEL_141:
          v119 = v20 - 4 - v21;
          if (v119 < 0x2C)
            goto LABEL_412;
          if ((unint64_t)(v21 - v26) < 0x20)
            goto LABEL_412;
          v120 = (v119 >> 2) + 1;
          v121 = 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
          v122 = &v20[-v121];
          v27 -= v121;
          v123 = &v26[4 * v116 - 16];
          v124 = (__int128 *)(v20 - 16);
          v125 = v120 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v126 = *v124;
            *(v123 - 1) = *(v124 - 1);
            *v123 = v126;
            v123 -= 2;
            v124 -= 2;
            v125 -= 8;
          }
          while (v125);
          v20 = v122;
          if (v120 != (v120 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_412:
            do
            {
              v127 = *((_DWORD *)v20 - 1);
              v20 -= 4;
              *((_DWORD *)v27 - 1) = v127;
              v27 -= 4;
            }
            while (v20 != v21);
          }
        }
        else
        {
          v26 = 0;
          v27 = (char *)(4 * v116);
          *(_DWORD *)(4 * v116) = v19;
          v17 = 4 * v116 + 4;
          if (v20 != v21)
            goto LABEL_141;
        }
LABEL_147:
        v352 = v27;
        v353 = (char *)v17;
        v354 = &v26[4 * v25];
        if (v21)
          operator delete(v21);
        goto LABEL_13;
      }
LABEL_12:
      *(_DWORD *)v20 = v19;
      v17 = (uint64_t)(v20 + 4);
LABEL_13:
      v353 = (char *)v17;
      if (++v14 == v15)
      {
        v12 = v359;
        v16 = v360;
        if (v359 >= v360)
          goto LABEL_150;
LABEL_7:
        *(_DWORD *)v12 = *v9;
        v13 = (uint64_t)(v12 + 4);
LABEL_8:
        v359 = (char *)v13;
        ++v9;
        v12 = (char *)v13;
        if (v9 == v327)
          goto LABEL_177;
        goto LABEL_9;
      }
    }
    if (v35 >> 62)
      sub_239418A80();
    v36 = operator new(4 * v35);
    v29 = (unsigned int *)&v36[4 * v32];
    *v29 = *v14;
    v30 = (uint64_t)(v29 + 1);
    if (v28 == v31)
      goto LABEL_54;
LABEL_47:
    v46 = v28 - 4 - v31;
    if (v46 < 0x2C)
      goto LABEL_413;
    if ((unint64_t)(v31 - v36) < 0x20)
      goto LABEL_413;
    v47 = (v46 >> 2) + 1;
    v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    v49 = &v28[-v48];
    v29 = (unsigned int *)((char *)v29 - v48);
    v50 = &v36[4 * v32 - 16];
    v51 = v28 - 16;
    v52 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 8;
    }
    while (v52);
    v28 = v49;
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_413:
      do
      {
        v54 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *--v29 = v54;
      }
      while (v28 != v31);
    }
    v28 = (char *)v364;
    goto LABEL_54;
  }
LABEL_177:
  sub_239946A18(a3, &v355, (uint64_t *)&v352);
  v348 = -1;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "v:index_in_root");
  sub_23999C7E0((_QWORD *)a3, &v348, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v144 = (uint64_t *)(*(_QWORD *)(a3 + 8) + 16 * v348);
  v146 = *v144;
  v145 = (std::__shared_weak_count *)v144[1];
  if (v145)
  {
    v147 = (unint64_t *)&v145->__shared_owners_;
    do
      v148 = __ldxr(v147);
    while (__stxr(v148 + 1, v147));
    do
      v149 = __ldaxr(v147);
    while (__stlxr(v149 - 1, v147));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "v:index_in_root");
  LODWORD(v337) = -1;
  v150 = sub_23999C498((uint64_t **)(a1 + 8), (uint64_t)&v337, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v151 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * v150);
  v152 = *v151;
  v153 = (std::__shared_weak_count *)v151[1];
  if (v153)
  {
    v154 = (unint64_t *)&v153->__shared_owners_;
    do
      v155 = __ldxr(v154);
    while (__stxr(v155 + 1, v154));
    do
      v156 = __ldaxr(v154);
    while (__stlxr(v156 - 1, v154));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
      std::__shared_weak_count::__release_weak(v153);
    }
  }
  v157 = a3 + 104;
  v158 = *(_QWORD *)(a3 + 112) - *(_QWORD *)(a3 + 104);
  v159 = v158 >> 2;
  if ((v158 >> 2))
  {
    v160 = 0;
    v161 = v364;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v146 + 40) + v160) = *(_DWORD *)(*(_QWORD *)(v152 + 40) + 4 * v161[v160 / 4]);
      v160 += 4;
    }
    while ((v158 & 0x3FFFFFFFCLL) != v160);
  }
  v346 = -1;
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "f:index_in_root");
  sub_23999C8D8((_QWORD *)a3, &v346, (uint64_t)__p);
  v325 = (uint64_t **)(a1 + 8);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v162 = (uint64_t **)(a3 + 56);
  v163 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v346);
  v164 = *v163;
  v165 = (std::__shared_weak_count *)v163[1];
  if (v165)
  {
    v166 = (unint64_t *)&v165->__shared_owners_;
    do
      v167 = __ldxr(v166);
    while (__stxr(v167 + 1, v166));
    do
      v168 = __ldaxr(v166);
    while (__stlxr(v168 - 1, v166));
    if (!v168)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "f:index_in_root");
  LODWORD(v337) = -1;
  v328 = (uint64_t **)(a1 + 56);
  v169 = sub_23998FA20((uint64_t **)(a1 + 56), (uint64_t)&v337, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v170 = &(*v328)[2 * v169];
  v171 = *v170;
  v172 = (std::__shared_weak_count *)v170[1];
  if (v172)
  {
    v173 = (unint64_t *)&v172->__shared_owners_;
    do
      v174 = __ldxr(v173);
    while (__stxr(v174 + 1, v173));
    do
      v175 = __ldaxr(v173);
    while (__stlxr(v175 - 1, v173));
    if (!v175)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v176 = *(_QWORD *)(a3 + 160) - *(_QWORD *)(a3 + 152);
  v177 = (v176 >> 2);
  v178 = v176 & 0x3FFFFFFFCLL;
  if ((v176 & 0x3FFFFFFFCLL) != 0)
  {
    v179 = 0;
    v180 = v358;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v164 + 40) + 4 * v179) = *(_DWORD *)(*(_QWORD *)(v171 + 40) + 4 * v180[v179]);
      ++v179;
    }
    while (v177 != v179);
  }
  v345 = -1;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "v:index_in_father");
  sub_23999C7E0((_QWORD *)a3, &v345, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v181 = (v158 >> 2);
  if ((_DWORD)v159)
  {
    v182 = 0;
    do
    {
      v183 = v364;
      v184 = (uint64_t *)(*(_QWORD *)(a3 + 8) + 16 * v345);
      v185 = *v184;
      v186 = (std::__shared_weak_count *)v184[1];
      if (v186)
      {
        v187 = (unint64_t *)&v186->__shared_owners_;
        do
          v188 = __ldxr(v187);
        while (__stxr(v188 + 1, v187));
        do
          v189 = __ldaxr(v187);
        while (__stlxr(v189 - 1, v187));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v185 + 40) + 4 * v182) = v183[v182];
      ++v182;
    }
    while (v182 != v181);
  }
  v344 = -1;
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "f:index_in_father");
  sub_23999C8D8((_QWORD *)a3, &v344, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (v178)
  {
    v190 = 0;
    do
    {
      v191 = v358;
      v192 = &(*v162)[2 * v344];
      v193 = *v192;
      v194 = (std::__shared_weak_count *)v192[1];
      if (v194)
      {
        v195 = (unint64_t *)&v194->__shared_owners_;
        do
          v196 = __ldxr(v195);
        while (__stxr(v196 + 1, v195));
        do
          v197 = __ldaxr(v195);
        while (__stlxr(v197 - 1, v195));
        if (!v197)
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v193 + 40) + 4 * v190) = v191[v190];
      ++v190;
    }
    while (v190 != v177);
  }
  v342 = -1;
  v343 = -1;
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "f:imt");
  v337 = 0;
  v338 = 0;
  v198 = sub_2394E5F40(v328, (uint64_t)&v337, (unsigned __int8 *)__p);
  v199 = v198;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v326 = v177;
    v324 = v159;
    v331 = v178;
    if (v199 == -1)
      goto LABEL_264;
  }
  else
  {
    v326 = v177;
    v324 = v159;
    v331 = v178;
    if (v198 == -1)
      goto LABEL_264;
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "h:signal_length");
  LODWORD(v337) = 0;
  v200 = sub_23998EE84((uint64_t **)(a1 + 32), (uint64_t)&v337, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    v219 = v200;
    operator delete(__p[0]);
    v200 = v219;
    if (v219 != -1)
      goto LABEL_243;
LABEL_264:
    v218 = 0;
    v322 = -1;
    goto LABEL_265;
  }
  if (v200 == -1)
    goto LABEL_264;
LABEL_243:
  v322 = v200;
  HIBYTE(__p[2]) = 5;
  strcpy((char *)__p, "f:imt");
  sub_23994E3E8((_QWORD *)a3, &v343, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "h:signal_length");
  sub_239994EC4((_QWORD *)a3, &v342, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (v178)
  {
    v201 = 0;
    v202 = v199;
    do
    {
      v203 = &(*v328)[2 * v202];
      v205 = *v203;
      v204 = (std::__shared_weak_count *)v203[1];
      if (v204)
      {
        v206 = (unint64_t *)&v204->__shared_owners_;
        do
          v207 = __ldxr(v206);
        while (__stxr(v207 + 1, v206));
        do
          v208 = __ldaxr(v206);
        while (__stlxr(v208 - 1, v206));
        if (!v208)
        {
          ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
          std::__shared_weak_count::__release_weak(v204);
        }
      }
      v209 = v181;
      v210 = v358[v201];
      v211 = *(_QWORD *)(v205 + 40);
      v212 = &(*v162)[2 * v343];
      v214 = *v212;
      v213 = (std::__shared_weak_count *)v212[1];
      if (v213)
      {
        v215 = (unint64_t *)&v213->__shared_owners_;
        do
          v216 = __ldxr(v215);
        while (__stxr(v216 + 1, v215));
        do
          v217 = __ldaxr(v215);
        while (__stlxr(v217 - 1, v215));
        if (!v217)
        {
          ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
          std::__shared_weak_count::__release_weak(v213);
        }
      }
      *(_OWORD *)(*(_QWORD *)(v214 + 40) + 16 * v201++) = *(_OWORD *)(v211 + 16 * v210);
      v181 = v209;
    }
    while (v201 != v326);
  }
  v218 = 1;
LABEL_265:
  v341 = -1;
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "f:area");
  LODWORD(v337) = 0;
  v220 = sub_23998EE84(v162, (uint64_t)&v337, (unsigned __int8 *)__p);
  v221 = v220;
  v341 = v220;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v221 != -1)
      goto LABEL_271;
  }
  else if (v220 != -1)
  {
    goto LABEL_271;
  }
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "f:area");
  sub_239994DD0((_QWORD *)a3, &v341, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
LABEL_271:
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "f:area");
  LODWORD(v337) = 0;
  v222 = sub_23998EE84(v328, (uint64_t)&v337, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v340 = -1;
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "h:length");
  v223 = (_QWORD *)(a3 + 32);
  LODWORD(v337) = 0;
  v224 = sub_23998EE84((uint64_t **)(a3 + 32), (uint64_t)&v337, (unsigned __int8 *)__p);
  v225 = v224;
  v340 = v224;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v225 == -1)
      goto LABEL_277;
  }
  else if (v224 == -1)
  {
LABEL_277:
    HIBYTE(__p[2]) = 8;
    strcpy((char *)__p, "h:length");
    sub_239994EC4((_QWORD *)a3, &v340, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  v323 = v181;
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "h:length");
  v226 = (_QWORD *)(a1 + 32);
  LODWORD(v337) = 0;
  v227 = sub_23998EE84((uint64_t **)(a1 + 32), (uint64_t)&v337, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v228 = operator new(0xCuLL);
  __p[1] = v228 + 3;
  __p[2] = v228 + 3;
  *(_QWORD *)v228 = -1;
  v228[2] = -1;
  __p[0] = v228;
  v229 = operator new(0xCuLL);
  v338 = v229 + 3;
  v339 = (char *)(v229 + 3);
  *(_QWORD *)v229 = -1;
  v229[2] = -1;
  v337 = v229;
  if (!v331)
    goto LABEL_359;
  v230 = 0;
  v231 = v227;
  while (2)
  {
    v332 = v230;
    v232 = &(*v328)[2 * v222];
    v233 = *v232;
    v234 = (std::__shared_weak_count *)v232[1];
    if (v234)
    {
      v235 = (unint64_t *)&v234->__shared_owners_;
      do
        v236 = __ldxr(v235);
      while (__stxr(v236 + 1, v235));
      do
        v237 = __ldaxr(v235);
      while (__stlxr(v237 - 1, v235));
      if (!v237)
      {
        ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
        std::__shared_weak_count::__release_weak(v234);
      }
    }
    v238 = *(_DWORD *)(*(_QWORD *)(v233 + 40) + 4 * v358[v332]);
    v239 = &(*v162)[2 * v341];
    v240 = *v239;
    v241 = (std::__shared_weak_count *)v239[1];
    if (v241)
    {
      v242 = (unint64_t *)&v241->__shared_owners_;
      do
        v243 = __ldxr(v242);
      while (__stxr(v243 + 1, v242));
      do
        v244 = __ldaxr(v242);
      while (__stlxr(v244 - 1, v242));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
        std::__shared_weak_count::__release_weak(v241);
      }
    }
    *(_DWORD *)(*(_QWORD *)(v240 + 40) + 4 * v332) = v238;
    LODWORD(v334[0]) = v332;
    sub_23996389C(a3, (unsigned int *)v334, (uint64_t)__p);
    sub_23996389C(a1, &v358[v332], (uint64_t)&v337);
    for (i = 0; i != 3; ++i)
    {
      v246 = (uint64_t *)(*v226 + 16 * v231);
      v248 = *v246;
      v247 = (std::__shared_weak_count *)v246[1];
      if (v247)
      {
        v249 = (unint64_t *)&v247->__shared_owners_;
        do
          v250 = __ldxr(v249);
        while (__stxr(v250 + 1, v249));
        do
          v251 = __ldaxr(v249);
        while (__stlxr(v251 - 1, v249));
        if (!v251)
        {
          ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
          std::__shared_weak_count::__release_weak(v247);
        }
      }
      v252 = *(_DWORD *)(*(_QWORD *)(v248 + 40) + 4 * *((unsigned int *)v337 + i));
      v253 = (uint64_t *)(*v223 + 16 * v340);
      v255 = *v253;
      v254 = (std::__shared_weak_count *)v253[1];
      if (!v254)
        goto LABEL_310;
      v256 = (unint64_t *)&v254->__shared_owners_;
      do
        v257 = __ldxr(v256);
      while (__stxr(v257 + 1, v256));
      do
        v258 = __ldaxr(v256);
      while (__stlxr(v258 - 1, v256));
      if (!v258)
      {
        ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
        std::__shared_weak_count::__release_weak(v254);
        v259 = (unsigned int *)__p[0];
        *(_DWORD *)(*(_QWORD *)(v255 + 40) + 4 * *((unsigned int *)__p[0] + i)) = v252;
        if (!v218)
          goto LABEL_324;
      }
      else
      {
LABEL_310:
        v259 = (unsigned int *)__p[0];
        *(_DWORD *)(*(_QWORD *)(v255 + 40) + 4 * *((unsigned int *)__p[0] + i)) = v252;
        if (!v218)
          goto LABEL_324;
      }
      v260 = (uint64_t *)(*v226 + 16 * v322);
      v262 = *v260;
      v261 = (std::__shared_weak_count *)v260[1];
      if (v261)
      {
        v263 = (unint64_t *)&v261->__shared_owners_;
        do
          v264 = __ldxr(v263);
        while (__stxr(v264 + 1, v263));
        do
          v265 = __ldaxr(v263);
        while (__stlxr(v265 - 1, v263));
        if (!v265)
        {
          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
          std::__shared_weak_count::__release_weak(v261);
        }
      }
      v266 = *(_DWORD *)(*(_QWORD *)(v262 + 40) + 4 * *((unsigned int *)v337 + i));
      v267 = (uint64_t *)(*v223 + 16 * v342);
      v269 = *v267;
      v268 = (std::__shared_weak_count *)v267[1];
      if (v268)
      {
        v270 = (unint64_t *)&v268->__shared_owners_;
        do
          v271 = __ldxr(v270);
        while (__stxr(v271 + 1, v270));
        do
          v272 = __ldaxr(v270);
        while (__stlxr(v272 - 1, v270));
        if (!v272)
        {
          ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
          std::__shared_weak_count::__release_weak(v268);
        }
      }
      v259 = (unsigned int *)__p[0];
      *(_DWORD *)(*(_QWORD *)(v269 + 40) + 4 * *((unsigned int *)__p[0] + i)) = v266;
LABEL_324:
      v273 = *(unsigned int *)sub_239962518(v157, &v259[i]);
      v274 = (uint64_t *)(*(_QWORD *)(a3 + 32) + 16 * *(unsigned int *)(a3 + 180));
      v275 = *v274;
      v276 = (std::__shared_weak_count *)v274[1];
      if (!v276)
        goto LABEL_329;
      v277 = (unint64_t *)&v276->__shared_owners_;
      do
        v278 = __ldxr(v277);
      while (__stxr(v278 + 1, v277));
      do
        v279 = __ldaxr(v277);
      while (__stlxr(v279 - 1, v277));
      if (!v279)
      {
        ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
        std::__shared_weak_count::__release_weak(v276);
        if (((*(_QWORD *)(*(_QWORD *)(v275 + 40) + ((v273 >> 3) & 0x1FFFFFF8)) >> v273) & 1) == 0)
          continue;
      }
      else
      {
LABEL_329:
        if (((*(_QWORD *)(*(_QWORD *)(v275 + 40) + ((v273 >> 3) & 0x1FFFFFF8)) >> v273) & 1) == 0)
          continue;
      }
      v280 = (uint64_t *)(*v223 + 16 * v340);
      v282 = *v280;
      v281 = (std::__shared_weak_count *)v280[1];
      if (v281)
      {
        v283 = (unint64_t *)&v281->__shared_owners_;
        do
          v284 = __ldxr(v283);
        while (__stxr(v284 + 1, v283));
        do
          v285 = __ldaxr(v283);
        while (__stlxr(v285 - 1, v283));
        if (!v285)
        {
          ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
          std::__shared_weak_count::__release_weak(v281);
        }
      }
      v286 = *(_DWORD *)(*(_QWORD *)(v282 + 40) + 4 * *((unsigned int *)__p[0] + i));
      v287 = (uint64_t *)(*v223 + 16 * v340);
      v289 = *v287;
      v288 = (std::__shared_weak_count *)v287[1];
      if (v288)
      {
        v290 = (unint64_t *)&v288->__shared_owners_;
        do
          v291 = __ldxr(v290);
        while (__stxr(v291 + 1, v290));
        do
          v292 = __ldaxr(v290);
        while (__stlxr(v292 - 1, v290));
        if (!v292)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v289 + 40) + 4 * *(unsigned int *)sub_239962518(v157, (unsigned int *)__p[0] + i)) = v286;
      if (v218)
      {
        v293 = (uint64_t *)(*v223 + 16 * v342);
        v295 = *v293;
        v294 = (std::__shared_weak_count *)v293[1];
        if (v294)
        {
          v296 = (unint64_t *)&v294->__shared_owners_;
          do
            v297 = __ldxr(v296);
          while (__stxr(v297 + 1, v296));
          do
            v298 = __ldaxr(v296);
          while (__stlxr(v298 - 1, v296));
          if (!v298)
          {
            ((void (*)(std::__shared_weak_count *))v294->__on_zero_shared)(v294);
            std::__shared_weak_count::__release_weak(v294);
          }
        }
        v299 = *(_DWORD *)(*(_QWORD *)(v295 + 40) + 4 * *((unsigned int *)__p[0] + i));
        v300 = (uint64_t *)(*v223 + 16 * v342);
        v302 = *v300;
        v301 = (std::__shared_weak_count *)v300[1];
        if (v301)
        {
          v303 = (unint64_t *)&v301->__shared_owners_;
          do
            v304 = __ldxr(v303);
          while (__stxr(v304 + 1, v303));
          do
            v305 = __ldaxr(v303);
          while (__stlxr(v305 - 1, v303));
          if (!v305)
          {
            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
            std::__shared_weak_count::__release_weak(v301);
          }
        }
        *(_DWORD *)(*(_QWORD *)(v302 + 40) + 4 * *(unsigned int *)sub_239962518(v157, (unsigned int *)__p[0] + i)) = v299;
      }
    }
    v230 = v332 + 1;
    v162 = (uint64_t **)(a3 + 56);
    if (v332 + 1 != v326)
      continue;
    break;
  }
LABEL_359:
  v336 = -1;
  v335 = 12;
  strcpy((char *)v334, "v:importance");
  sub_239992B6C((_QWORD *)a3, &v336, (uint64_t)v334);
  if (v335 < 0)
    operator delete(v334[0]);
  v335 = 12;
  strcpy((char *)v334, "v:importance");
  v367[0] = 0;
  v306 = sub_2399346C0(v325, (uint64_t)v367, (unsigned __int8 *)v334);
  if (v335 < 0)
    operator delete(v334[0]);
  if (v306 != -1 && v324)
  {
    v307 = 0;
    v308 = v306;
    do
    {
      v309 = &(*v325)[2 * v308];
      v311 = *v309;
      v310 = (std::__shared_weak_count *)v309[1];
      if (v310)
      {
        v312 = (unint64_t *)&v310->__shared_owners_;
        do
          v313 = __ldxr(v312);
        while (__stxr(v313 + 1, v312));
        do
          v314 = __ldaxr(v312);
        while (__stlxr(v314 - 1, v312));
        if (!v314)
        {
          ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
          std::__shared_weak_count::__release_weak(v310);
        }
      }
      v315 = *(_DWORD *)(*(_QWORD *)(v311 + 40) + 4 * v364[v307]);
      v316 = (uint64_t *)(*(_QWORD *)(a3 + 8) + 16 * v336);
      v317 = *v316;
      v318 = (std::__shared_weak_count *)v316[1];
      if (v318)
      {
        v319 = (unint64_t *)&v318->__shared_owners_;
        do
          v320 = __ldxr(v319);
        while (__stxr(v320 + 1, v319));
        do
          v321 = __ldaxr(v319);
        while (__stlxr(v321 - 1, v319));
        if (!v321)
        {
          ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
          std::__shared_weak_count::__release_weak(v318);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v317 + 40) + 4 * v307++) = v315;
    }
    while (v307 != v323);
  }
  if (v337)
  {
    v338 = v337;
    operator delete(v337);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v349)
  {
    v350 = (unsigned int *)v349;
    operator delete(v349);
  }
  if (v352)
  {
    v353 = v352;
    operator delete(v352);
  }
  if (v355)
  {
    v356 = v355;
    operator delete(v355);
  }
  if (v358)
    operator delete(v358);
  if (v361)
    operator delete(v361);
  if (v364)
    operator delete(v364);
}

void sub_2399A01D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46)
{
  uint64_t v46;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;

  if (a43 < 0)
    operator delete(__p);
  if (a45)
  {
    operator delete(a45);
    v48 = *(void **)(v46 - 232);
    if (!v48)
    {
LABEL_5:
      v49 = *(void **)(v46 - 208);
      if (!v49)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else
  {
    v48 = *(void **)(v46 - 232);
    if (!v48)
      goto LABEL_5;
  }
  *(_QWORD *)(v46 - 224) = v48;
  operator delete(v48);
  v49 = *(void **)(v46 - 208);
  if (!v49)
  {
LABEL_6:
    v50 = *(void **)(v46 - 184);
    if (!v50)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  *(_QWORD *)(v46 - 200) = v49;
  operator delete(v49);
  v50 = *(void **)(v46 - 184);
  if (!v50)
  {
LABEL_7:
    v51 = *(void **)(v46 - 160);
    if (!v51)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_15:
  *(_QWORD *)(v46 - 176) = v50;
  operator delete(v50);
  v51 = *(void **)(v46 - 160);
  if (!v51)
  {
LABEL_9:
    v52 = *(void **)(v46 - 136);
    if (v52)
    {
      *(_QWORD *)(v46 - 128) = v52;
      operator delete(v52);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  operator delete(v51);
  goto LABEL_9;
}

uint64_t sub_2399A03BC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  char v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  char *v25;
  void *v26;
  unint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _DWORD *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  int v51;
  char *v52;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v58;
  unsigned int v59;
  char *v60;
  char *v61;
  void *__p[2];
  uint64_t v63;

  v5 = (uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2;
  v6 = -51 * v5;
  v7 = (-858993459 * v5);
  if (-858993459 * (_DWORD)v5)
  {
    v8 = operator new(8 * ((v7 - 1) >> 6) + 8);
    v9 = v8;
    if (v7 >= 0x41)
      v10 = (v7 - 1) >> 6;
    else
      v10 = 0;
    v8[v10] = 0;
    if (v7 >= 0x40)
      bzero(v8, 8 * (v7 >> 6));
    if ((v6 & 0x3F) != 0)
      v9[v7 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
    if (v7)
    {
      v11 = 0;
      v12 = 0;
      v13 = a1 + 104;
      v55 = v7;
      v56 = a2;
      while (1)
      {
        v15 = v11 >> 6;
        v16 = 1 << v11;
        if ((v9[v11 >> 6] & (1 << v11)) != 0)
        {
          v14 = v12;
          goto LABEL_12;
        }
        v59 = v12;
        v17 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
        v19 = *v17;
        v18 = (std::__shared_weak_count *)v17[1];
        if (!v18)
          goto LABEL_19;
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (v22)
        {
LABEL_19:
          if ((*(_QWORD *)(*(_QWORD *)(v19 + 40) + 8 * v15) & v16) != 0)
            break;
          goto LABEL_56;
        }
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
        if ((*(_QWORD *)(*(_QWORD *)(v19 + 40) + 8 * v15) & v16) != 0)
          break;
LABEL_56:
        v14 = v59;
LABEL_12:
        ++v11;
        v12 = v14;
        if (v11 == v7)
          goto LABEL_59;
      }
      __p[0] = 0;
      __p[1] = 0;
      v63 = 0;
      v23 = *(_QWORD **)(a2 + 8);
      v24 = v59;
      if ((unint64_t)v23 >= *(_QWORD *)(a2 + 16))
      {
        v25 = sub_2396C8920((char **)a2, (uint64_t)__p);
        v26 = __p[0];
        *(_QWORD *)(a2 + 8) = v25;
        if (v26)
        {
          __p[1] = v26;
          operator delete(v26);
          v25 = *(char **)(a2 + 8);
        }
      }
      else
      {
        *v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        *(_OWORD *)v23 = *(_OWORD *)__p;
        v23[2] = v63;
        v25 = (char *)(v23 + 3);
        *(_QWORD *)(a2 + 8) = v23 + 3;
      }
      v27 = v11;
      LODWORD(__p[0]) = v11;
      v28 = (uint64_t *)(v25 - 16);
      v60 = v25 - 24;
      v61 = v25 - 8;
      v58 = (uint64_t *)(v25 - 16);
      while (1)
      {
        *(_QWORD *)((char *)v9 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
        v29 = (char *)*v28;
        if ((unint64_t)*v28 >= *(_QWORD *)v61)
          break;
        *(_DWORD *)v29 = v27;
        v30 = (uint64_t)(v29 + 4);
LABEL_49:
        *v28 = v30;
        *(_DWORD *)(*a3 + 4 * *(unsigned int *)(sub_239962518(v13, (unsigned int *)__p) + 12)) = v24;
        v27 = *(unsigned int *)(sub_239962518(v13, (unsigned int *)__p) + 8);
        LODWORD(__p[0]) = v27;
        if ((_DWORD)v27 == -1 || v11 == v27)
        {
          v7 = v55;
          a2 = v56;
          v14 = v59 + 1;
          goto LABEL_12;
        }
      }
      v31 = v11;
      v32 = v9;
      v33 = *(char **)v60;
      v34 = (uint64_t)&v29[-*(_QWORD *)v60];
      v35 = v34 >> 2;
      v36 = (v34 >> 2) + 1;
      if (v36 >> 62)
        sub_2394189F8();
      v37 = *(_QWORD *)v61 - (_QWORD)v33;
      if (v37 >> 1 > v36)
        v36 = v37 >> 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
        v38 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 >> 62)
          sub_239418A80();
        v39 = operator new(4 * v38);
        v40 = &v39[4 * v35];
        *v40 = v27;
        v30 = (uint64_t)(v40 + 1);
        if (v29 != v33)
        {
LABEL_36:
          v41 = v29 - 4 - v33;
          if (v41 >= 0x2C)
          {
            v43 = v29 - &v39[v34];
            v9 = v32;
            if (v43 >= 0x20)
            {
              v44 = (v41 >> 2) + 1;
              v45 = 4 * (v44 & 0x7FFFFFFFFFFFFFF8);
              v46 = &v29[-v45];
              v40 = (_DWORD *)((char *)v40 - v45);
              v47 = &v39[4 * v35 - 16];
              v48 = v29 - 16;
              v49 = v44 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v50 = *(_OWORD *)v48;
                *(v47 - 1) = *((_OWORD *)v48 - 1);
                *v47 = v50;
                v47 -= 2;
                v48 -= 32;
                v49 -= 8;
              }
              while (v49);
              v29 = v46;
              if (v44 == (v44 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_45;
            }
          }
          else
          {
            v9 = v32;
          }
          do
          {
            v51 = *((_DWORD *)v29 - 1);
            v29 -= 4;
            *--v40 = v51;
          }
          while (v29 != v33);
LABEL_45:
          v42 = v60;
          v29 = *(char **)v60;
          goto LABEL_46;
        }
      }
      else
      {
        v39 = 0;
        v40 = (_DWORD *)(4 * v35);
        *(_DWORD *)(4 * v35) = v27;
        v30 = 4 * v35 + 4;
        if (v29 != v33)
          goto LABEL_36;
      }
      v9 = v32;
      v42 = v60;
LABEL_46:
      *(_QWORD *)v42 = v40;
      v52 = &v39[4 * v38];
      v28 = v58;
      *v58 = v30;
      *(_QWORD *)v61 = v52;
      v11 = v31;
      if (v29)
        operator delete(v29);
      v13 = a1 + 104;
      v24 = v59;
      goto LABEL_49;
    }
  }
  else
  {
    v9 = 0;
  }
  v14 = 0;
LABEL_59:
  if (v9)
    operator delete(v9);
  return v14;
}

void sub_2399A07F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (__p)
    operator delete(__p);
  operator delete(v20);
  _Unwind_Resume(a1);
}

unint64_t sub_2399A0838(uint64_t a1)
{
  char *v2;
  size_t v3;
  size_t v4;
  void **p_dst;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  char *v10;
  size_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  float *v36;
  float *v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  uint64_t *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  float v51;
  unint64_t result;
  unint64_t i;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  float v61;
  float v62;
  void **__dst;
  size_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = off_256934438[0];
  v3 = strlen(off_256934438[0]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_57;
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (void **)operator new(v6 + 1);
    v64 = v4;
    v65 = v7 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v65) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v8 = (_QWORD *)(a1 + 80);
  v66 = 0;
  v9 = sub_2394E5C88((uint64_t **)(a1 + 80), (uint64_t)&v66, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v65) < 0)
    operator delete(__dst);
  v10 = off_256934418[0];
  v11 = strlen(off_256934418[0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
LABEL_57:
    sub_23941A5AC();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    v64 = v12;
    v65 = v15 | 0x8000000000000000;
    __dst = v13;
    goto LABEL_18;
  }
  HIBYTE(v65) = v11;
  v13 = (void **)&__dst;
  if (v11)
LABEL_18:
    memmove(v13, v10, v12);
  *((_BYTE *)v13 + v12) = 0;
  LODWORD(v67) = 0;
  v66 = 0;
  v16 = sub_2394E5DE4((uint64_t **)(a1 + 56), (uint64_t)&v66, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v65) < 0)
    operator delete(__dst);
  HIBYTE(v65) = 5;
  strcpy((char *)&__dst, "f:imt");
  v66 = 0;
  v67 = 0;
  v17 = sub_2394E5F40((uint64_t **)(a1 + 56), (uint64_t)&v66, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v65) < 0)
    operator delete(__dst);
  v18 = *v8 + 16 * v9;
  v19 = *(_QWORD **)v18;
  v20 = *(std::__shared_weak_count **)(v18 + 8);
  if (!v20)
    goto LABEL_28;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (v23)
  {
LABEL_28:
    v60 = v9;
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
      goto LABEL_29;
LABEL_44:
    v27 = 0.0;
    v26 = 0.0;
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  v60 = v9;
  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152))
    goto LABEL_44;
LABEL_29:
  v24 = 0;
  v25 = v16;
  v26 = 0.0;
  v27 = 0.0;
  do
  {
    v28 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v25);
    v29 = *v28;
    v30 = (std::__shared_weak_count *)v28[1];
    if (v30)
    {
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      do
        v33 = __ldaxr(v31);
      while (__stlxr(v33 - 1, v31));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v34 = (unsigned int *)(*(_QWORD *)(v29 + 40) + 12 * v24);
    v35 = v19[5];
    v36 = (float *)(v35 + 8 * *v34);
    v37 = (float *)(v35 + 8 * v34[1]);
    v38 = (float *)(v35 + 8 * v34[2]);
    v39 = *v37;
    v40 = v37[1];
    v42 = *v36;
    v41 = v36[1];
    v44 = *v38;
    v43 = v38[1];
    LODWORD(__dst) = v24;
    v61 = sub_239932994(a1, (unsigned int *)&__dst);
    v45 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v17);
    v46 = *v45;
    v47 = (std::__shared_weak_count *)v45[1];
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      do
        v50 = __ldaxr(v48);
      while (__stlxr(v50 - 1, v48));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v26 = v26
        + fabsf((float)((float)((float)(v39 - v42) * (float)(v43 - v41)) - (float)((float)(v40 - v41) * (float)(v44 - v42)))* 0.5);
    v27 = v27 + (float)(v61 * powf(*(float *)(*(_QWORD *)(v46 + 40) + 16 * v24++), 0.25));
  }
  while (v24 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
LABEL_45:
  v51 = v27 / v26;
  if (v26 <= 0.00000001)
    v51 = 1.0;
  v62 = v51;
  result = (*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      v54 = (uint64_t *)(*v8 + 16 * v60);
      v56 = *v54;
      v55 = (std::__shared_weak_count *)v54[1];
      if (v55)
      {
        v57 = (unint64_t *)&v55->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
        do
          v59 = __ldaxr(v57);
        while (__stlxr(v59 - 1, v57));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      *(float32x2_t *)(*(_QWORD *)(v56 + 40) + 8 * i) = vmul_n_f32(*(float32x2_t *)(*(_QWORD *)(v56 + 40) + 8 * i), v62);
      result = (*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19);
    }
  }
  return result;
}

void sub_2399A0CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399A0D04(uint64_t a1)
{
  char *v2;
  size_t v3;
  size_t v4;
  void *p_p;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  size_t v11;
  size_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  void *__p;
  char *v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;

  v2 = off_256934418[0];
  v3 = strlen(off_256934418[0]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_35;
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_p = operator new(v6 + 1);
    v28 = (char *)v4;
    v29 = v7 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v29) = v3;
  p_p = &__p;
  if (v3)
LABEL_8:
    memmove(p_p, v2, v4);
  *((_BYTE *)p_p + v4) = 0;
  v32 = 0;
  v31 = 0;
  v8 = sub_2394E5DE4((uint64_t **)(a1 + 56), (uint64_t)&v31, (unsigned __int8 *)&__p);
  v9 = v8;
  v30 = v8;
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__p);
    if (v9 != -1)
      goto LABEL_23;
  }
  else if (v8 != -1)
  {
    goto LABEL_23;
  }
  v10 = off_256934418[0];
  v11 = strlen(off_256934418[0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
LABEL_35:
    sub_23941A5AC();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    v28 = (char *)v12;
    v29 = v15 | 0x8000000000000000;
    __p = v13;
    goto LABEL_20;
  }
  HIBYTE(v29) = v11;
  v13 = &__p;
  if (v11)
LABEL_20:
    memmove(v13, v10, v12);
  *((_BYTE *)v13 + v12) = 0;
  sub_2394E42E4((_QWORD *)a1, &v30, (uint64_t)&__p);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
LABEL_23:
  v16 = operator new(0xCuLL);
  v28 = (char *)(v16 + 3);
  v29 = (unint64_t)(v16 + 3);
  *(_QWORD *)v16 = -1;
  v16[2] = -1;
  __p = v16;
  if (*(_QWORD *)(a1 + 160) == *(_QWORD *)(a1 + 152))
    goto LABEL_33;
  v17 = 0;
  do
  {
    LODWORD(v31) = v17;
    sub_23996362C(a1, (unsigned int *)&v31, (uint64_t)&__p);
    v19 = *(_QWORD *)__p;
    v20 = *((_DWORD *)__p + 2);
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v30);
    v23 = *v21;
    v22 = (std::__shared_weak_count *)v21[1];
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v18 = *(_QWORD *)(v23 + 40) + 12 * v17;
    *(_QWORD *)v18 = v19;
    *(_DWORD *)(v18 + 8) = v20;
    ++v17;
  }
  while (v17 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  v16 = __p;
  if (__p)
  {
LABEL_33:
    v28 = (char *)v16;
    operator delete(v16);
  }
}

void sub_2399A0F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399A0FC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unsigned int v34;
  unsigned int v37;
  void *__p;
  unint64_t v39;
  unint64_t v40;

  v2 = *(_QWORD *)(a1 + 128);
  v1 = *(_QWORD *)(a1 + 136);
  v39 = 0;
  v40 = 0;
  __p = 0;
  v3 = v1 - v2;
  if (!v3)
    return 0;
  if (v3 < 0)
    sub_2394189F8();
  v5 = 0xCCCCCCCCCCCCCCCDLL * (v3 >> 2);
  v6 = (v5 - 1) >> 6;
  v7 = operator new(8 * (v6 + 1));
  v8 = v7;
  v39 = v5;
  v40 = v6 + 1;
  __p = v7;
  if (v5 >= 0x41)
    v9 = (v5 - 1) >> 6;
  else
    v9 = 0;
  v7[v9] = 0;
  if (v5 >= 0x40)
    bzero(v7, 8 * (v5 >> 6));
  if ((v5 & 0x3F) != 0)
    v8[v5 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
  v10 = 0;
  v11 = 0;
  do
  {
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
    v16 = *v14;
    v15 = (std::__shared_weak_count *)v14[1];
    if (!v15)
      goto LABEL_17;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (v19)
    {
LABEL_17:
      v20 = v10 >> 6;
      v21 = 1 << v10;
      if ((*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8 * (v10 >> 6)) & (1 << v10)) == 0)
        goto LABEL_11;
LABEL_18:
      *((_QWORD *)__p + v20) &= ~v21;
      goto LABEL_11;
    }
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v20 = v10 >> 6;
    v21 = 1 << v10;
    if ((*(_QWORD *)(*(_QWORD *)(v16 + 40) + 8 * (v10 >> 6)) & (1 << v10)) != 0)
      goto LABEL_18;
LABEL_11:
    v13 = *(_QWORD *)(a1 + 128);
    v12 = *(_QWORD *)(a1 + 136);
    v10 = ++v11;
  }
  while (0xCCCCCCCCCCCCCCCDLL * ((v12 - v13) >> 2) > v11);
  if (v12 != v13)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
      v27 = *v25;
      v26 = (std::__shared_weak_count *)v25[1];
      if (!v26)
        goto LABEL_29;
      v28 = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
        v31 = v22 >> 6;
        v32 = 1 << v22;
        if ((*(_QWORD *)(*(_QWORD *)(v27 + 40) + 8 * (v22 >> 6)) & (1 << v22)) != 0)
        {
LABEL_30:
          v33 = (char *)__p;
          if ((*((_QWORD *)__p + v31) & v32) == 0)
          {
            v24 = (v24 + 1);
            v37 = v23;
            v34 = v23;
            do
            {
              *(_QWORD *)&v33[((unint64_t)v34 >> 3) & 0x1FFFFFF8] |= 1 << v34;
              v34 = *(_DWORD *)(sub_239962518(a1 + 104, &v37) + 8);
              v37 = v34;
            }
            while (v34 != -1 && v34 != v23);
          }
        }
      }
      else
      {
LABEL_29:
        v31 = v22 >> 6;
        v32 = 1 << v22;
        if ((*(_QWORD *)(*(_QWORD *)(v27 + 40) + 8 * (v22 >> 6)) & (1 << v22)) != 0)
          goto LABEL_30;
      }
      v22 = ++v23;
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 2) <= v23)
        goto LABEL_42;
    }
  }
  v24 = 0;
LABEL_42:
  if (__p)
    operator delete(__p);
  return v24;
}

void sub_2399A12CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2399A12E0(_QWORD *a1, int a2, int a3)
{
  int v3;

  v3 = ((a1[14] - a1[13]) >> 2) + a3 - (int)(-858993459 * ((a1[17] - a1[16]) >> 2)) / 2 + ((a1[20] - a1[19]) >> 2);
  return (a2 - v3 / 2) & ~((a2 - v3 / 2) >> 31);
}

uint64_t sub_2399A1338(uint64_t a1, float *a2, float *a3, _QWORD *a4)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float v9;
  float v10;

  *a4 = 0;
  *a2 = -3.4028e38;
  *a3 = 0.0;
  v4 = *(float **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = v5 - *(_QWORD *)a1;
  if (v5 == *(_QWORD *)a1)
    return 0;
  v7 = 0;
  v8 = v6 >> 2;
  if (v8 <= 1)
    v8 = 1;
  v9 = 0.0;
  do
  {
    v10 = *v4;
    if (*v4 < 3.4028e38)
    {
      if (*a2 < v10)
      {
        *a2 = v10;
        v10 = *v4;
        v9 = *a3;
      }
      v9 = v10 + v9;
      *a3 = v9;
      *a4 = ++v7;
    }
    ++v4;
    --v8;
  }
  while (v8);
  if (!v7)
    return 0;
  *a3 = v9 / (float)v7;
  return 1;
}

float sub_2399A13D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  void *__p[2];
  char v18;
  unsigned int v19;
  int v20;

  v3 = *(_QWORD *)(a1 + 152);
  v2 = *(_QWORD *)(a1 + 160);
  v18 = 6;
  strcpy((char *)__p, "f:area");
  v20 = 0;
  v4 = sub_23998EE84((uint64_t **)(a1 + 56), (uint64_t)&v20, (unsigned __int8 *)__p);
  v5 = v4;
  v19 = v4;
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (v5 != -1)
      goto LABEL_6;
  }
  else if (v4 != -1)
  {
    goto LABEL_6;
  }
  v18 = 6;
  strcpy((char *)__p, "f:area");
  sub_239994DD0((_QWORD *)a1, &v19, (uint64_t)__p);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_6:
    if (v2 != v3)
      goto LABEL_7;
    return 0.0;
  }
  operator delete(__p[0]);
  if (v2 == v3)
    return 0.0;
LABEL_7:
  v6 = 0;
  if ((unint64_t)((v2 - v3) >> 2) <= 1)
    v7 = 1;
  else
    v7 = (v2 - v3) >> 2;
  v8 = 0.0;
  do
  {
    LODWORD(__p[0]) = v6;
    v9 = sub_239932994(a1, (unsigned int *)__p);
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v19);
    v12 = *v10;
    v11 = (std::__shared_weak_count *)v10[1];
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(float *)(*(_QWORD *)(v12 + 40) + 4 * v6) = v9;
    v8 = v8 + v9;
    ++v6;
  }
  while (v6 != v7);
  return v8;
}

void sub_2399A1570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399A1590(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  float32x4_t v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  _QWORD *v47;
  void *__p[2];
  char v49;
  unsigned int v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;

  v3 = *(_QWORD *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 136);
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v4 = (v2 - v3) / 20;
  if (v2 == v3)
  {
    v7 = 0;
  }
  else
  {
    if (v2 - v3 < 0)
      sub_2394189F8();
    v5 = (v4 - 1) >> 6;
    v6 = operator new(8 * (v5 + 1));
    v7 = v6;
    v52 = (v2 - v3) / 20;
    v53 = v5 + 1;
    v51 = v6;
    if (v4 >= 0x41)
      v8 = (v4 - 1) >> 6;
    else
      v8 = 0;
    v6[v8] = 0;
    if (v4 >= 0x40)
      bzero(v6, 8 * (v4 >> 6));
    if ((v4 & 0x3F) != 0)
      v7[v4 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v4 & 0x3F));
  }
  v49 = 8;
  v54 = 0;
  v47 = (_QWORD *)(a1 + 32);
  strcpy((char *)__p, "h:length");
  v9 = sub_23998EE84((uint64_t **)(a1 + 32), (uint64_t)&v54, (unsigned __int8 *)__p);
  v10 = v9;
  v50 = v9;
  if (v49 < 0)
  {
    operator delete(__p[0]);
    if (v10 != -1)
      goto LABEL_16;
  }
  else if (v9 != -1)
  {
    goto LABEL_16;
  }
  v49 = 8;
  strcpy((char *)__p, "h:length");
  sub_239994EC4((_QWORD *)a1, &v50, (uint64_t)__p);
  if (v49 < 0)
  {
    operator delete(__p[0]);
    if (v2 != v3)
      goto LABEL_17;
LABEL_48:
    if (!v7)
      return;
    goto LABEL_49;
  }
LABEL_16:
  if (v2 == v3)
    goto LABEL_48;
LABEL_17:
  v11 = 0;
  if (v4 <= 1)
    v12 = 1;
  else
    v12 = v4;
  do
  {
    if ((v7[v11 >> 6] & (1 << v11)) == 0)
    {
      LODWORD(__p[0]) = v11;
      v13 = *(unsigned int *)sub_239962518(a1 + 104, (unsigned int *)__p);
      LODWORD(__p[0]) = v11;
      v14 = (unsigned int *)sub_239962518(a1 + 104, (unsigned int *)__p);
      v15 = *(unsigned int *)(sub_239962518(a1 + 104, v14) + 12);
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v18 = *v16;
      v17 = (std::__shared_weak_count *)v16[1];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v46 = *(float32x4_t *)(*(_QWORD *)(v18 + 40) + 16 * v15);
      v22 = *(unsigned int *)(sub_239962518(a1 + 104, (unsigned int *)__p) + 12);
      v23 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v25 = *v23;
      v24 = (std::__shared_weak_count *)v23[1];
      if (v24)
      {
        v26 = (unint64_t *)&v24->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v29 = *(float32x4_t *)(*(_QWORD *)(v25 + 40) + 16 * v22);
      v30 = (uint64_t *)(*v47 + 16 * v50);
      v31 = *v30;
      v32 = (std::__shared_weak_count *)v30[1];
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        do
          v35 = __ldaxr(v33);
        while (__stlxr(v35 - 1, v33));
        if (!v35)
        {
          v45 = v29;
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          v29 = v45;
        }
      }
      v36 = vsubq_f32(v46, v29);
      v37 = vmulq_f32(v36, v36);
      v37.i32[3] = 0;
      v38 = sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v37, v37)));
      *(float *)(*(_QWORD *)(v31 + 40) + 4 * v11) = v38;
      v39 = (uint64_t *)(*v47 + 16 * v50);
      v40 = *v39;
      v41 = (std::__shared_weak_count *)v39[1];
      if (v41)
      {
        v42 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
        do
          v44 = __ldaxr(v42);
        while (__stlxr(v44 - 1, v42));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      *(float *)(*(_QWORD *)(v40 + 40) + 4 * v13) = v38;
      v7 = v51;
      *((_QWORD *)v51 + (v11 >> 6)) |= 1 << v11;
      *(_QWORD *)((char *)v7 + ((v13 >> 3) & 0x1FFFFFF8)) |= 1 << v13;
    }
    ++v11;
  }
  while (v11 != v12);
LABEL_49:
  operator delete(v7);
}

void sub_2399A197C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  void *v22;

  if (a20 < 0)
  {
    operator delete(__p);
    if (!v22)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v22)
  {
    goto LABEL_3;
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_2399A19D8(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  float v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *__p[2];
  char v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;

  v37 = a3;
  v4 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 136);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v5 = (v3 - v4) / 20;
  if (v3 == v4)
  {
    v8 = 0;
  }
  else
  {
    if (v3 - v4 < 0)
      sub_2394189F8();
    v6 = (v5 - 1) >> 6;
    v7 = operator new(8 * (v6 + 1));
    v8 = v7;
    v35 = (v3 - v4) / 20;
    v36 = v6 + 1;
    v34 = v7;
    if (v5 >= 0x41)
      v9 = (v5 - 1) >> 6;
    else
      v9 = 0;
    v7[v9] = 0;
    if (v5 >= 0x40)
      bzero(v7, 8 * (v5 >> 6));
    if ((v5 & 0x3F) != 0)
      v8[v5 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
  }
  v32 = 15;
  strcpy((char *)__p, "h:signal_length");
  v10 = (_QWORD *)(a1 + 32);
  v38 = 0;
  v11 = sub_23998EE84((uint64_t **)(a1 + 32), (uint64_t)&v38, (unsigned __int8 *)__p);
  v12 = v11;
  v33 = v11;
  if (v32 < 0)
  {
    operator delete(__p[0]);
    if (v12 != -1)
      goto LABEL_16;
  }
  else if (v11 != -1)
  {
    goto LABEL_16;
  }
  v32 = 15;
  strcpy((char *)__p, "h:signal_length");
  sub_239994EC4((_QWORD *)a1, &v33, (uint64_t)__p);
  if (v32 < 0)
  {
    operator delete(__p[0]);
    if (v3 != v4)
      goto LABEL_17;
LABEL_36:
    if (!v8)
      return;
    goto LABEL_37;
  }
LABEL_16:
  if (v3 == v4)
    goto LABEL_36;
LABEL_17:
  v13 = 0;
  if (v5 <= 1)
    v14 = 1;
  else
    v14 = v5;
  do
  {
    if ((v8[v13 >> 6] & (1 << v13)) == 0)
    {
      LODWORD(__p[0]) = v13;
      v15 = *(unsigned int *)sub_239962518(a1 + 104, (unsigned int *)__p);
      LODWORD(__p[0]) = v13;
      v16 = sub_23998B620(a1, (unsigned int *)__p, a2, &v37);
      v17 = (uint64_t *)(*v10 + 16 * v33);
      v18 = *v17;
      v19 = (std::__shared_weak_count *)v17[1];
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      *(float *)(*(_QWORD *)(v18 + 40) + 4 * v13) = v16;
      v23 = (uint64_t *)(*v10 + 16 * v33);
      v24 = *v23;
      v25 = (std::__shared_weak_count *)v23[1];
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      *(float *)(*(_QWORD *)(v24 + 40) + 4 * v15) = v16;
      v8 = v34;
      *((_QWORD *)v34 + (v13 >> 6)) |= 1 << v13;
      *(_QWORD *)((char *)v8 + ((v15 >> 3) & 0x1FFFFFF8)) |= 1 << v15;
    }
    ++v13;
  }
  while (v13 != v14);
LABEL_37:
  operator delete(v8);
}

void sub_2399A1CD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
  {
    operator delete(__p);
    if (!v16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

float sub_2399A1D1C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  unsigned int v10;

  v2 = *(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152);
  if (!v2)
    return 0.0;
  v5 = 0;
  v6 = v2 >> 2;
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  v8 = 0.0;
  do
  {
    if (*(float *)(*a2 + 4 * v5) >= 3.4028e38)
    {
      v10 = v5;
      v8 = v8 + sub_239932994(a1, &v10);
    }
    ++v5;
  }
  while (v7 != v5);
  return v8;
}

BOOL sub_2399A1DC4(uint64_t a1)
{
  void *v1;
  void *v2;
  void *__p;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  __p = 0;
  v5 = 0;
  v6 = 0;
  sub_23992FFA4(a1, &v10, (unsigned int **)&v7, (unsigned int **)&__p);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  v1 = v10;
  v2 = v11;
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  return v1 == v2;
}

void sub_2399A1E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_239EC3264((uint64_t)&__p, (uint64_t)&a13, v13 - 40);
  _Unwind_Resume(a1);
}

float sub_2399A1E74(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8;
  float result;
  float v10;
  float v11;
  float32x4_t v13;
  BOOL v14;
  float32x4_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float32_t v29;
  float32_t v30;
  float v31;
  float v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;

  v8 = *a7;
  result = 0.0;
  if (fabsf(*a7) >= 1.0e-16)
  {
    v10 = *a8;
    if (*a8 < 0.0)
      return 3.4028e38;
    v11 = fabsf(v10);
    if (v11 < 0.00000001 && v10 < (float)(v8 * 0.5))
    {
      return 3.4028e38;
    }
    else
    {
      v13 = 0uLL;
      v14 = v11 > 1.0e-16;
      v15 = 0uLL;
      if (v14)
      {
        v16 = v10 + v10;
        v17 = a6[1];
        v18 = a5[1];
        v19 = v18 - v17;
        v20 = a4[1];
        v21 = v17 - v20;
        v22 = a2[1];
        v23 = a1[1];
        v24 = v20 - v18;
        v25 = *a6 - *a5;
        v26 = *a4 - *a6;
        v27 = a3[1];
        v28 = *a5 - *a4;
        v29 = (float)((float)((float)(v21 * v22) + (float)(v23 * v19)) + (float)(v27 * v24)) / v16;
        v30 = (float)((float)((float)(v26 * v22) + (float)(v23 * v25)) + (float)(v27 * v28)) / v16;
        v31 = a1[2];
        v32 = a2[2];
        v33 = a3[2];
        v15.i32[3] = 0;
        v13.i32[3] = 0;
        v13.f32[0] = (float)((float)((float)(*a2 * v21) + (float)(*a1 * v19)) + (float)(*a3 * v24)) / v16;
        v13.f32[1] = v29;
        v13.f32[2] = (float)((float)((float)(v21 * v32) + (float)(v31 * v19)) + (float)(v33 * v24)) / v16;
        v15.f32[0] = (float)((float)((float)(*a2 * v26) + (float)(*a1 * v25)) + (float)(*a3 * v28)) / v16;
        v15.f32[1] = v30;
        v15.f32[2] = (float)((float)((float)(v26 * v32) + (float)(v31 * v25)) + (float)(v33 * v28)) / v16;
      }
      v34 = vmulq_f32(v13, v13);
      v34.i32[3] = 0;
      v35 = vmulq_f32(v15, v15);
      v35.i32[3] = 0;
      return (float)(v8
                   * (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v34, v34))
                           + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v35, v35))))
           * 0.5;
    }
  }
  return result;
}

float sub_2399A1FE0(float *a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  float v7;
  float result;
  float v9;
  float v10[4];
  uint64_t __b;
  uint64_t v12;

  v7 = *a4;
  result = 0.0;
  if (fabsf(*a4) >= 1.0e-16)
  {
    v9 = *a5;
    if (*a5 >= 0.0 && fabsf(v9) >= 1.0e-16)
    {
      __b = 0;
      v12 = 0;
      sub_2399A20A0(a1, a2, a3, (float *)&__b, a6, a6 + 2, a6 + 4, a7, v9, v10);
      return (float)(*(float *)&__b + *(float *)&v12) * 0.5 * v7;
    }
    else
    {
      return 3.4028e38;
    }
  }
  return result;
}

float sub_2399A20A0(float *a1, float *a2, float *a3, float *__b, float *a5, float *a6, float *a7, float *a8, float a9, float *a10)
{
  float v10;
  float result;
  float v12;
  BOOL v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;

  v10 = fabsf(a9);
  if (v10 >= 1.0e-16)
  {
    v12 = 0.0;
    v13 = v10 > 1.0e-16;
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    if (v13)
    {
      v17 = a3[1];
      v18 = a2[1];
      v19 = v18 - v17;
      v20 = a1[1];
      v21 = v17 - v20;
      v22 = a6[1];
      v23 = a5[1];
      v24 = v20 - v18;
      v25 = *a3 - *a2;
      v26 = *a1 - *a3;
      v27 = *a2 - *a1;
      v28 = a7[1];
      v29 = a9 + a9;
      v14 = (float)((float)((float)(*a6 * v21) + (float)(*a5 * v19)) + (float)(*a7 * v24)) / v29;
      v16 = (float)((float)((float)(*a6 * v26) + (float)(*a5 * v25)) + (float)(*a7 * v27)) / v29;
      v12 = (float)((float)((float)(v21 * v22) + (float)(v23 * v19)) + (float)(v28 * v24)) / v29;
      v15 = (float)((float)((float)(v26 * v22) + (float)(v23 * v25)) + (float)(v28 * v27)) / v29;
    }
    *a10 = (float)(v12 * v12) + (float)(v14 * v14);
    a10[1] = (float)(v12 * v15) + (float)(v14 * v16);
    a10[2] = (float)(v15 * v15) + (float)(v16 * v16);
    *__b = (float)((float)((float)(v12 * v12) * a8[2]) + (float)((float)(v14 * v14) * *a8))
         + (float)((float)(v12 * (float)(v14 + v14)) * a8[1]);
    __b[2] = (float)((float)((float)(v15 * v15) * a8[2]) + (float)((float)(v16 * v16) * *a8))
           + (float)((float)(v15 * (float)(v16 + v16)) * a8[1]);
    result = (float)((float)((float)(v12 * v15) * a8[2]) + (float)((float)(v14 * v16) * *a8))
           + (float)((float)((float)(v12 * v16) + (float)(v14 * v15)) * a8[1]);
    __b[1] = result;
  }
  else
  {
    memset_pattern16(__b, &unk_239ECEF60, 0xCuLL);
  }
  return result;
}

float32x4_t sub_2399A21F8(uint64_t a1, uint64_t a2, float32x4_t result)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  uint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;

  v6 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v7 = (v5 - v6) >> 2;
  v8 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  if (v7 <= v8)
  {
    if (v7 < v8)
      *(_QWORD *)(a2 + 8) = *(_QWORD *)a2 + 16 * v7;
  }
  else
  {
    sub_239932734((char **)a2, v7 - v8);
    v6 = *(_QWORD *)(a1 + 104);
    v5 = *(_QWORD *)(a1 + 112);
  }
  if (v5 != v6)
  {
    v9 = 0;
    v10 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v11.i64[0] = 0x80000000800000;
    v11.i64[1] = 0x80000000800000;
    do
    {
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v16 = *v14;
      v15 = (std::__shared_weak_count *)v14[1];
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          v45 = v11;
          v48 = v10;
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v11 = v45;
          v10 = v48;
        }
      }
      *(_OWORD *)(*(_QWORD *)a2 + 16 * v9) = *(_OWORD *)(*(_QWORD *)(v16 + 40) + 16 * v9);
      v20 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
      v22 = *v20;
      v21 = (std::__shared_weak_count *)v20[1];
      if (v21)
      {
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
        do
          v25 = __ldaxr(v23);
        while (__stlxr(v25 - 1, v23));
        if (!v25)
        {
          v46 = v11;
          v49 = v10;
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
          v11 = v46;
          v10 = v49;
        }
      }
      result = *(float32x4_t *)(*(_QWORD *)(v22 + 40) + 16 * v9);
      v10 = vminq_f32(v10, result);
      v11 = vmaxq_f32(v11, result);
      ++v9;
      v13 = *(_QWORD *)(a1 + 104);
      v12 = *(_QWORD *)(a1 + 112);
    }
    while (v9 < (v12 - v13) >> 2);
    if (v12 != v13)
    {
      v26 = 0;
      v27.i64[0] = 0x3F0000003F000000;
      v27.i64[1] = 0x3F0000003F000000;
      v28 = vmulq_f32(vaddq_f32(v10, v11), v27);
      v29 = vsubq_f32(v11, v10);
      v30 = v29.f32[1];
      if (v29.f32[0] >= v29.f32[1])
        v30 = v29.f32[0];
      v29.i32[0] = v29.i32[2];
      if (v30 >= v29.f32[2])
        v29.f32[0] = v30;
      v31 = 2.0;
      if (v29.f32[0] > 0.0)
        v31 = 2.0 / v29.f32[0];
      v47 = v31;
      v50 = v28;
      do
      {
        v33 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
        v35 = *v33;
        v34 = (std::__shared_weak_count *)v33[1];
        if (v34)
        {
          v36 = (unint64_t *)&v34->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
          do
            v38 = __ldaxr(v36);
          while (__stlxr(v38 - 1, v36));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
            v31 = v47;
            v28 = v50;
          }
        }
        *(float32x4_t *)(*(_QWORD *)(v35 + 40) + 16 * v26) = vsubq_f32(*(float32x4_t *)(*(_QWORD *)(v35 + 40) + 16 * v26), v28);
        v39 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
        v41 = *v39;
        v40 = (std::__shared_weak_count *)v39[1];
        if (v40)
        {
          v42 = (unint64_t *)&v40->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
          do
            v44 = __ldaxr(v42);
          while (__stlxr(v44 - 1, v42));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
            v31 = v47;
            v28 = v50;
          }
        }
        v32 = *(_QWORD *)(v41 + 40);
        result = vmulq_n_f32(*(float32x4_t *)(v32 + 16 * v26), v31);
        *(float32x4_t *)(v32 + 16 * v26++) = result;
      }
      while (v26 < (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2);
    }
  }
  return result;
}

float32x4_t *sub_2399A24B4(float32x4_t *result, float32x4_t *a2, float32x4_t *a3, _QWORD *a4, uint64_t a5, float *a6, int32x4_t *a7, float32x4_t *a8)
{
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;

  *(float32x4_t *)a7 = vsubq_f32(*a2, *result);
  v8 = (int32x4_t)vsubq_f32(*a3, *result);
  *a8 = (float32x4_t)v8;
  v9 = *(float32x4_t *)a7;
  v10 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 4uLL), v8), (float32x4_t)vzip2q_s32(vzip1q_s32(*a7, (int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 0xCuLL)), *a7)), (float32x4_t)vzip2q_s32(vzip1q_s32(v8, (int32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 0xCuLL)), v8), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 4uLL), *a7));
  v11 = vmulq_f32(v10, v10);
  v11.i32[3] = 0;
  v12 = vpaddq_f32(v11, v11);
  v13 = vpaddq_f32(v12, v12);
  v14 = (float32x4_t)xmmword_239F02850;
  v15 = (int32x4_t)xmmword_239F02850;
  if (v13.f32[0] > 0.0)
    v15 = (int32x4_t)vdivq_f32(v10, vsqrtq_f32(v13));
  v16 = vmulq_f32(v9, v9);
  v16.i32[3] = 0;
  v17 = vpaddq_f32(v16, v16);
  v18 = vpaddq_f32(v17, v17);
  v19 = (int32x4_t)xmmword_239F02850;
  if (v18.f32[0] > 0.0)
    v19 = (int32x4_t)vdivq_f32(v9, vsqrtq_f32(v18));
  *a7 = v19;
  v20 = vmlsq_f32(vmulq_f32((float32x4_t)vzip2q_s32(vzip1q_s32(v15, (int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL)), v15), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL), v19)), (float32x4_t)vzip2q_s32(vzip1q_s32(v19, (int32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 0xCuLL)), v19), (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 4uLL), v15));
  v21 = vmulq_f32(v20, v20);
  v21.i32[3] = 0;
  v22 = vpaddq_f32(v21, v21);
  v23 = vpaddq_f32(v22, v22);
  if (v23.f32[0] > 0.0)
    v14 = vdivq_f32(v20, vsqrtq_f32(v23));
  *a8 = v14;
  *a4 = 0;
  v24 = vmulq_f32(vsubq_f32(*a2, *result), *(float32x4_t *)a7);
  v24.i32[3] = 0;
  *(float *)a5 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24));
  *(_DWORD *)(a5 + 4) = 0;
  v25 = vsubq_f32(*a3, *result);
  v26 = vmulq_f32(v25, *(float32x4_t *)a7);
  v26.i32[3] = 0;
  v27 = vmulq_f32(v25, *a8);
  v27.i32[3] = 0;
  *a6 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26));
  a6[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v27, v27));
  v28 = vsubq_f32(*a3, *a2);
  v29 = vmulq_f32(v28, v28);
  v29.i32[3] = 0;
  if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29)) < 1.0e-16)
    a6[1] = 0.0;
  return result;
}

uint64_t sub_2399A264C(_QWORD *a1)
{
  char *v2;
  size_t v3;
  size_t v4;
  void **p_dst;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  size_t v12;
  size_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  size_t v20;
  size_t v21;
  void *p_p;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  unsigned int v26;
  char *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void **v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t *v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  _QWORD *v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  size_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t *v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  size_t __sz;
  char v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t **v136;
  char *v137;
  _QWORD *v138;
  _QWORD *v139;
  int v140;
  unsigned int v141;
  unsigned int v142[4];
  void *__p;
  char *v144;
  unint64_t v145;
  void **__dst;
  char *v147;
  unint64_t v148;

  v2 = off_256934418[0];
  v3 = strlen(off_256934418[0]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_156;
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (void **)operator new(v6 + 1);
    v147 = (char *)v4;
    v148 = v7 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v148) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_8:
    memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v8 = a1 + 7;
  LODWORD(v144) = 0;
  __p = 0;
  v9 = sub_2394E5DE4((uint64_t **)a1 + 7, (uint64_t)&__p, (unsigned __int8 *)&__dst);
  v10 = v9;
  if (SHIBYTE(v148) < 0)
  {
    operator delete(__dst);
    if (v10 == -1)
      return 0;
  }
  else if (v9 == -1)
  {
    return 0;
  }
  v11 = off_256934428[0];
  v12 = strlen(off_256934428[0]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
LABEL_156:
    sub_23941A5AC();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    v147 = (char *)v13;
    v148 = v16 | 0x8000000000000000;
    __dst = v14;
    goto LABEL_20;
  }
  HIBYTE(v148) = v12;
  v14 = (void **)&__dst;
  if (v12)
LABEL_20:
    memmove(v14, v11, v13);
  *((_BYTE *)v14 + v13) = 0;
  LODWORD(__p) = 0;
  v17 = sub_2399346C0((uint64_t **)a1 + 7, (uint64_t)&__p, (unsigned __int8 *)&__dst);
  v18 = v17;
  if (SHIBYTE(v148) < 0)
  {
    operator delete(__dst);
    if (v18 == -1)
      return 0;
  }
  else if (v17 == -1)
  {
    return 0;
  }
  v19 = off_256934448[0];
  v20 = strlen(off_256934448[0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    p_p = operator new(v23 + 1);
    v144 = (char *)v21;
    v145 = v24 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_32;
  }
  HIBYTE(v145) = v20;
  p_p = &__p;
  if (v20)
LABEL_32:
    memmove(p_p, v19, v21);
  *((_BYTE *)p_p + v21) = 0;
  v25 = (uint64_t **)(a1 + 10);
  __dst = 0;
  v147 = 0;
  v148 = 0;
  v26 = sub_23958C0D8((uint64_t **)a1 + 10, (uint64_t)&__dst, (unsigned __int8 *)&__p);
  if (SHIBYTE(v148) < 0)
  {
    operator delete(__dst);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
    {
LABEL_35:
      if (v26 == -1)
        return 0;
      goto LABEL_39;
    }
  }
  else if ((SHIBYTE(v145) & 0x80000000) == 0)
  {
    goto LABEL_35;
  }
  operator delete(__p);
  if (v26 == -1)
    return 0;
LABEL_39:
  v27 = off_256934438[0];
  v28 = strlen(off_256934438[0]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_156;
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v33 = v32 | 0x8000000000000000;
    v8 = a1 + 7;
    v25 = (uint64_t **)(a1 + 10);
    v147 = (char *)v29;
    v148 = v33;
    __dst = v30;
    goto LABEL_46;
  }
  HIBYTE(v148) = v28;
  v30 = (void **)&__dst;
  if (v28)
LABEL_46:
    memmove(v30, v27, v29);
  *((_BYTE *)v30 + v29) = 0;
  __p = 0;
  v34 = sub_2394E5C88(v25, (uint64_t)&__p, (unsigned __int8 *)&__dst);
  v35 = v34;
  if (SHIBYTE(v148) < 0)
  {
    operator delete(__dst);
    if (v35 != -1)
      goto LABEL_49;
    return 0;
  }
  if (v34 == -1)
    return 0;
LABEL_49:
  v142[0] = v26;
  v142[1] = v18;
  v142[2] = v10;
  v142[3] = v35;
  v36 = &(*v25)[2 * v26];
  v37 = *v36;
  v38 = (std::__shared_weak_count *)v36[1];
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
  v147 = 0;
  v148 = 0;
  __dst = 0;
  if (v42)
  {
    v43 = v42;
    if (v42 >> 62)
      sub_2394189F8();
    v44 = 4 * v42;
    v45 = (void **)operator new(4 * v42);
    __dst = v45;
    v148 = (unint64_t)v45 + 4 * v43;
    bzero(v45, 4 * v43);
    v46 = (char *)v45 + v44;
    v147 = (char *)v45 + v44;
    v48 = a1[19];
    v47 = a1[20];
    v49 = v47 - v48;
    v136 = v25;
    if (v47 == v48)
      goto LABEL_75;
  }
  else
  {
    v46 = 0;
    v45 = 0;
    v52 = a1[19];
    v51 = a1[20];
    v49 = v51 - v52;
    v136 = v25;
    if (v51 == v52)
      goto LABEL_75;
  }
  v53 = *(_QWORD *)(*v8 + 16 * v18 + 8);
  if (v53)
  {
    v54 = 0;
    v55 = 0;
    v56 = 0;
    while (1)
    {
      v57 = (uint64_t *)(*v8 + 16 * v18);
      v59 = *v57;
      v58 = (std::__shared_weak_count *)v57[1];
      if (v58)
      {
        v60 = (unint64_t *)&v58->__shared_owners_;
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
        do
          v62 = __ldaxr(v60);
        while (__stlxr(v62 - 1, v60));
        if (!v62)
          break;
      }
      if (v56 == *(_DWORD *)(*(_QWORD *)(v59 + 40) + 4 * v54))
        goto LABEL_71;
LABEL_64:
      v54 = ++v55;
      if (v55 >= (unint64_t)((uint64_t)(a1[20] - a1[19]) >> 2))
      {
        v45 = __dst;
        v46 = v147;
        goto LABEL_75;
      }
    }
    ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
    std::__shared_weak_count::__release_weak(v58);
    if (v56 != *(_DWORD *)(*(_QWORD *)(v59 + 40) + 4 * v54))
      goto LABEL_64;
LABEL_71:
    *((_DWORD *)__dst + v56++) = v55;
    goto LABEL_64;
  }
  v105 = 0;
  v106 = *(_QWORD *)(*(_QWORD *)(*v8 + 16 * v18) + 40);
  v107 = v49 >> 2;
  do
  {
    if (v105 == *(_DWORD *)(v106 + 4 * v53))
      *((_DWORD *)v45 + v105++) = v53;
    ++v53;
  }
  while (v107 > v53);
LABEL_75:
  v63 = v46 - (char *)v45;
  if (v46 == (char *)v45)
    goto LABEL_153;
  v135 = v18;
  v138 = v8;
  v139 = a1;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = v63 >> 2;
  v68 = (v63 >> 2) - 1;
  do
  {
    v141 = 0;
    v69 = *((_DWORD *)v45 + v64);
    v141 = v69;
    if (v68 <= v64)
    {
      v70 = (a1[20] - a1[19]) >> 2;
      __p = 0;
      v144 = 0;
      v145 = 0;
      v71 = v70 - v69;
      if ((_DWORD)v70 == v69)
        goto LABEL_83;
LABEL_82:
      v72 = (char *)operator new(4 * v71);
      __p = v72;
      v145 = (unint64_t)&v72[4 * v71];
      memset(v72, 255, 4 * v71);
      v144 = &v72[4 * v71];
      goto LABEL_83;
    }
    LODWORD(v70) = *((_DWORD *)v45 + v65 + 1);
    __p = 0;
    v144 = 0;
    v145 = 0;
    v71 = v70 - v69;
    if ((_DWORD)v70 != v69)
      goto LABEL_82;
LABEL_83:
    if (v70 > v69)
    {
      do
      {
        *((_DWORD *)__p + v69 - v141) = v69;
        ++v69;
      }
      while ((_DWORD)v70 != v69);
    }
    a1 = v139;
    v73 = sub_23998166C(v139, (unsigned int **)&__p, v142);
    if (v73)
    {
      v140 = v70 - 1;
      sub_23993418C((size_t)v139, (int *)&v141, &v140);
    }
    if (__p)
    {
      v144 = (char *)__p;
      operator delete(__p);
    }
    v66 |= v73;
    v64 = ++v65;
  }
  while (v67 > v65);
  v74 = v138;
  v75 = v135;
  if ((v66 & 1) == 0)
    goto LABEL_153;
  v76 = &(*v136)[2 * v142[0]];
  v77 = *v76;
  v78 = (std::__shared_weak_count *)v76[1];
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    do
      v81 = __ldaxr(v79);
    while (__stlxr(v81 - 1, v79));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
  v83 = v82;
  v84 = v82;
  v85 = 4 * v82;
  if (!v82)
  {
    v86 = 0;
    v87 = v139[20];
    if (v87 == v139[19])
      goto LABEL_122;
LABEL_98:
    __sz = v85;
    v133 = v83;
    v134 = v84;
    v137 = v86;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = -1;
    while (1)
    {
      v93 = (uint64_t *)(*v138 + 16 * v135);
      v94 = *v93;
      v95 = (std::__shared_weak_count *)v93[1];
      if (!v95)
        goto LABEL_106;
      v96 = (unint64_t *)&v95->__shared_owners_;
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
      do
        v98 = __ldaxr(v96);
      while (__stlxr(v98 - 1, v96));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
        if (v91 != *(_DWORD *)(*(_QWORD *)(v94 + 40) + 4 * v88))
        {
LABEL_107:
          v99 = (uint64_t *)(*v138 + 16 * v135);
          v100 = *v99;
          v101 = (std::__shared_weak_count *)v99[1];
          if (v101)
          {
            v102 = (unint64_t *)&v101->__shared_owners_;
            do
              v103 = __ldxr(v102);
            while (__stxr(v103 + 1, v102));
            do
              v104 = __ldaxr(v102);
            while (__stlxr(v104 - 1, v102));
            if (!v104)
            {
              ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
              std::__shared_weak_count::__release_weak(v101);
            }
          }
          v91 = *(_DWORD *)(*(_QWORD *)(v100 + 40) + 4 * v88);
          *(_DWORD *)&v137[4 * v90++] = v91;
        }
      }
      else
      {
LABEL_106:
        if (v91 != *(_DWORD *)(*(_QWORD *)(v94 + 40) + 4 * v88))
          goto LABEL_107;
      }
      v87 = v139[19];
      v92 = v139[20];
      v88 = ++v89;
      if (v89 >= (unint64_t)((v92 - v87) >> 2))
      {
        v86 = v137;
        v74 = v138;
        v75 = v135;
        v83 = v133;
        v84 = v134;
        v85 = __sz;
        if (v134)
          goto LABEL_120;
LABEL_123:
        v108 = 0;
        goto LABEL_124;
      }
    }
  }
  v86 = (char *)operator new(4 * v82);
  bzero(v86, v85);
  v87 = v139[20];
  if (v87 != v139[19])
    goto LABEL_98;
LABEL_122:
  v92 = v87;
  if (!v84)
    goto LABEL_123;
LABEL_120:
  v108 = operator new(v85);
  bzero(v108, v85);
LABEL_124:
  if (v84)
  {
    if (v84 == 1)
    {
      v109 = 0;
      goto LABEL_130;
    }
    v110 = 0;
    v109 = v84 - (v83 & 1);
    do
    {
      v111 = &v86[4 * v110];
      v113 = *(unsigned int *)v111;
      v112 = *((unsigned int *)v111 + 1);
      *((_DWORD *)v108 + v113) = v110;
      *((_DWORD *)v108 + v112) = v110 + 1;
      v110 += 2;
    }
    while (v109 != v110);
    if ((v83 & 1) != 0)
    {
      do
      {
LABEL_130:
        *((_DWORD *)v108 + *(unsigned int *)&v86[4 * v109]) = v109;
        ++v109;
      }
      while (v84 != v109);
    }
  }
  if (v92 != v87)
  {
    v114 = 0;
    v115 = 0;
    v116 = v75;
    while (1)
    {
      v117 = (uint64_t *)(*v74 + 16 * v116);
      v118 = *v117;
      v119 = (std::__shared_weak_count *)v117[1];
      if (!v119)
        goto LABEL_140;
      v120 = (unint64_t *)&v119->__shared_owners_;
      do
        v121 = __ldxr(v120);
      while (__stxr(v121 + 1, v120));
      do
        v122 = __ldaxr(v120);
      while (__stlxr(v122 - 1, v120));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
        v131 = *(unsigned int *)(*(_QWORD *)(v118 + 40) + 4 * v114);
        v124 = *((_DWORD *)v108 + v131);
        if (v124 != (_DWORD)v131)
        {
LABEL_141:
          v125 = (uint64_t *)(*v74 + 16 * v116);
          v127 = *v125;
          v126 = (std::__shared_weak_count *)v125[1];
          if (v126)
          {
            v128 = (unint64_t *)&v126->__shared_owners_;
            do
              v129 = __ldxr(v128);
            while (__stxr(v129 + 1, v128));
            do
              v130 = __ldaxr(v128);
            while (__stlxr(v130 - 1, v128));
            if (!v130)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }
          *(_DWORD *)(*(_QWORD *)(v127 + 40) + 4 * v114) = v124;
        }
      }
      else
      {
LABEL_140:
        v123 = *(unsigned int *)(*(_QWORD *)(v118 + 40) + 4 * v114);
        v124 = *((_DWORD *)v108 + v123);
        if (v124 != (_DWORD)v123)
          goto LABEL_141;
      }
      v114 = ++v115;
      if (v115 >= (unint64_t)((uint64_t)(v139[20] - v139[19]) >> 2))
        goto LABEL_150;
    }
  }
  if (v108)
LABEL_150:
    operator delete(v108);
  if (v86)
    operator delete(v86);
LABEL_153:
  if (__dst)
    operator delete(__dst);
  return 1;
}

void sub_2399A3070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  if (v30)
    operator delete(v30);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399A3110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250AF0F70;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = &off_250AF0FA8;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_23999C5F4;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_2399A329C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2399A32B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2399A32C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF0F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399A32D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF0F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399A3308(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2399A3318(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF0FA8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_2399A3354(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF0FA8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399A33A4(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
}

void sub_2399A33B4(_QWORD *a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;

  v3 = (_BYTE *)a1[5];
  if (a2 > (uint64_t)(a1[7] - (_QWORD)v3) >> 2)
  {
    if (a2 >> 62)
      sub_2394189F8();
    v4 = (_BYTE *)a1[6];
    v5 = 4 * a2;
    v6 = (char *)operator new(4 * a2);
    v7 = v4 - v3;
    v8 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    v9 = v8;
    if (v4 == v3)
      goto LABEL_11;
    if ((unint64_t)(v7 - 4) >= 0x2C)
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
      if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v10 = v7 >> 2;
        v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
        v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
        v13 = &v4[-v12];
        v9 = &v8[-v12];
        v14 = &v6[4 * v10 - 16];
        v15 = (__int128 *)(v4 - 16);
        v16 = v11 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v17 = *v15;
          *((_OWORD *)v14 - 1) = *(v15 - 1);
          *(_OWORD *)v14 = v17;
          v14 -= 32;
          v15 -= 2;
          v16 -= 8;
        }
        while (v16);
        v4 = v13;
        if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_11;
      }
    }
    else
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v18 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v9 - 1) = v18;
      v9 -= 4;
    }
    while (v4 != v3);
LABEL_11:
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = &v6[v5];
    if (v3)
      operator delete(v3);
  }
}

void sub_2399A34CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(_QWORD *)(a1 + 48) - v2) >> 2;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_2394EE834((void **)(a1 + 40), v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 48) = v2 + 4 * a2;
  }
}

void sub_2399A3500(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void sub_2399A351C(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _DWORD *v5;
  void **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  int v22;

  v3 = (char *)a1[6];
  v2 = a1[7];
  v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    v6 = (void **)(a1 + 5);
    v7 = (char *)a1[5];
    v8 = (v3 - v7) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      sub_2394189F8();
    v10 = v2 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 62)
        sub_239418A80();
      v12 = (char *)operator new(4 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = -1;
    v5 = v13 + 4;
    if (v3 != v7)
    {
      v15 = v3 - v7 - 4;
      if (v15 < 0x2C)
        goto LABEL_28;
      if ((unint64_t)(v7 - v12) < 0x20)
        goto LABEL_28;
      v16 = (v15 >> 2) + 1;
      v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
      v4 = &v3[-v17];
      v13 -= v17;
      v18 = &v12[4 * v8 - 16];
      v19 = (__int128 *)(v3 - 16);
      v20 = v16 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v21 = *v19;
        *((_OWORD *)v18 - 1) = *(v19 - 1);
        *(_OWORD *)v18 = v21;
        v18 -= 32;
        v19 -= 2;
        v20 -= 8;
      }
      while (v20);
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_28:
        do
        {
          v22 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v13 - 1) = v22;
          v13 -= 4;
        }
        while (v4 != v7);
      }
      v4 = (char *)*v6;
    }
    a1[5] = v13;
    a1[6] = v5;
    a1[7] = v14;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_DWORD *)v3 = -1;
    v5 = v3 + 4;
  }
  a1[6] = v5;
}

uint64_t sub_2399A3680(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = v4;
  return result;
}

uint64_t sub_2399A36A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2);
  return result;
}

_QWORD *sub_2399A36B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  sub_2399A3784(v4, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250AF1018;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = result;
  return result;
}

void sub_2399A3734(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2399A3750(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t sub_2399A3774(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

_QWORD *sub_2399A3784(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;

  *a1 = off_250AF0C30;
  v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = 0;
  *a1 = &off_250AF0FA8;
  a1[6] = 0;
  a1[7] = 0;
  v7 = *(_BYTE **)(a2 + 40);
  v6 = *(_BYTE **)(a2 + 48);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    v10 = &v9[4 * (v8 >> 2)];
    a1[7] = v10;
    memcpy(v9, v7, v8);
    a1[6] = v10;
  }
  return a1;
}

void sub_2399A384C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23995E4A4(v1);
  _Unwind_Resume(a1);
}

void sub_2399A3874(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399A3898(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_2399A38B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v6 = *(char **)a1;
  v5 = *(char **)(a1 + 8);
  if (*(char **)a1 == v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    while (*(_QWORD *)v6)
    {
      v6 += 16;
      v7 = (v7 + 1);
      if (v6 == v5)
        goto LABEL_8;
    }
  }
  if (v6 == v5)
  {
LABEL_8:
    v19 = 0;
    v20 = 0;
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
    {
      v8 = sub_2394E46BC((char **)a1, (uint64_t)&v19);
      v9 = v20;
      *(_QWORD *)(a1 + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      *(_QWORD *)(a1 + 8) = v5 + 16;
    }
  }
  v12 = operator new(0x58uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_250AF1050;
  v13 = v12 + 4;
  v12[3] = off_250AF0C30;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_23941A7F8(v13, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)a3;
    v12[6] = *(_QWORD *)(a3 + 16);
  }
  v12[3] = &off_250AF1088;
  v12[9] = 0;
  v12[10] = 0;
  v12[7] = sub_23998FB7C;
  v12[8] = 0;
  v14 = (_QWORD *)(*(_QWORD *)a1 + 16 * v7);
  v15 = (std::__shared_weak_count *)v14[1];
  *v14 = v12 + 3;
  v14[1] = v12;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v7;
}

void sub_2399A3A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2399A3A54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2399A3A6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399A3A7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399A3AAC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_2399A3ABC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF1088;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return sub_23995E4A4((uint64_t)a1);
}

void sub_2399A3AF8(_QWORD *a1)
{
  void *v2;

  *a1 = &off_250AF1088;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_23995E4A4((uint64_t)a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399A3B48(uint64_t a1)
{
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2;
}

void sub_2399A3B58(_QWORD *a1, unint64_t a2)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  int v18;

  v3 = (_BYTE *)a1[5];
  if (a2 > (uint64_t)(a1[7] - (_QWORD)v3) >> 2)
  {
    if (a2 >> 62)
      sub_2394189F8();
    v4 = (_BYTE *)a1[6];
    v5 = 4 * a2;
    v6 = (char *)operator new(4 * a2);
    v7 = v4 - v3;
    v8 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    v9 = v8;
    if (v4 == v3)
      goto LABEL_11;
    if ((unint64_t)(v7 - 4) >= 0x2C)
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
      if (v4 - v6 - (v7 & 0xFFFFFFFFFFFFFFFCLL) >= 0x20)
      {
        v10 = v7 >> 2;
        v11 = ((unint64_t)(v7 - 4) >> 2) + 1;
        v12 = 4 * (v11 & 0x7FFFFFFFFFFFFFF8);
        v13 = &v4[-v12];
        v9 = &v8[-v12];
        v14 = &v6[4 * v10 - 16];
        v15 = (__int128 *)(v4 - 16);
        v16 = v11 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v17 = *v15;
          *((_OWORD *)v14 - 1) = *(v15 - 1);
          *(_OWORD *)v14 = v17;
          v14 -= 32;
          v15 -= 2;
          v16 -= 8;
        }
        while (v16);
        v4 = v13;
        if (v11 == (v11 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_11;
      }
    }
    else
    {
      v9 = &v6[(v4 - v3) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v18 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *((_DWORD *)v9 - 1) = v18;
      v9 -= 4;
    }
    while (v4 != v3);
LABEL_11:
    a1[5] = v9;
    a1[6] = v8;
    a1[7] = &v6[v5];
    if (v3)
      operator delete(v3);
  }
}

void sub_2399A3C70(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (*(_QWORD *)(a1 + 48) - v2) >> 2;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_2394EE834((void **)(a1 + 40), v5);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 48) = v2 + 4 * a2;
  }
}

void sub_2399A3CA4(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[5];
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  if (v2)
    operator delete(v2);
}

void sub_2399A3CC0(_QWORD *a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _DWORD *v5;
  void **v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  int v22;

  v3 = (char *)a1[6];
  v2 = a1[7];
  v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    v6 = (void **)(a1 + 5);
    v7 = (char *)a1[5];
    v8 = (v3 - v7) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      sub_2394189F8();
    v10 = v2 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 62)
        sub_239418A80();
      v12 = (char *)operator new(4 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = -1;
    v5 = v13 + 4;
    if (v3 != v7)
    {
      v15 = v3 - v7 - 4;
      if (v15 < 0x2C)
        goto LABEL_28;
      if ((unint64_t)(v7 - v12) < 0x20)
        goto LABEL_28;
      v16 = (v15 >> 2) + 1;
      v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
      v4 = &v3[-v17];
      v13 -= v17;
      v18 = &v12[4 * v8 - 16];
      v19 = (__int128 *)(v3 - 16);
      v20 = v16 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v21 = *v19;
        *((_OWORD *)v18 - 1) = *(v19 - 1);
        *(_OWORD *)v18 = v21;
        v18 -= 32;
        v19 -= 2;
        v20 -= 8;
      }
      while (v20);
      if (v16 != (v16 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_28:
        do
        {
          v22 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v13 - 1) = v22;
          v13 -= 4;
        }
        while (v4 != v7);
      }
      v4 = (char *)*v6;
    }
    a1[5] = v13;
    a1[6] = v5;
    a1[7] = v14;
    if (v4)
      operator delete(v4);
  }
  else
  {
    *(_DWORD *)v3 = -1;
    v5 = v3 + 4;
  }
  a1[6] = v5;
}

uint64_t sub_2399A3E24(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  *(_DWORD *)(v3 + 4 * a2) = *(_DWORD *)(v3 + 4 * a3);
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = v4;
  return result;
}

uint64_t sub_2399A3E48(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a3) = *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * a2);
  return result;
}

_QWORD *sub_2399A3E5C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  sub_2399A3F28(v4, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_250AF10F8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = result;
  return result;
}

void sub_2399A3ED8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2399A3EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B83E31C](v1, 0x10B3C402F26E7C1);
  _Unwind_Resume(a1);
}

uint64_t sub_2399A3F18(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 40);
}

_QWORD *sub_2399A3F28(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;

  *a1 = off_250AF0C30;
  v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_23941A7F8(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = 0;
  *a1 = &off_250AF1088;
  a1[6] = 0;
  a1[7] = 0;
  v7 = *(_BYTE **)(a2 + 40);
  v6 = *(_BYTE **)(a2 + 48);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_2394189F8();
    v9 = (char *)operator new(v6 - v7);
    a1[5] = v9;
    a1[6] = v9;
    v10 = &v9[4 * (v8 >> 2)];
    a1[7] = v10;
    memcpy(v9, v7, v8);
    a1[6] = v10;
  }
  return a1;
}

void sub_2399A3FF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  sub_23995E4A4(v1);
  _Unwind_Resume(a1);
}

void sub_2399A4018(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399A403C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

double sub_2399A4058(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 44) = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_2399A406C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    MEMORY[0x23B83E2F8](v2, 0x1000C8052888210);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    MEMORY[0x23B83E2F8](v3, 0x1000C8052888210);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    MEMORY[0x23B83E2F8](v4, 0x1000C8052888210);
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return a1;
}

char *sub_2399A40F8(uint64_t a1, unint64_t a2, float *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t *v19;
  unint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t *v23;
  float *v24;
  unint64_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  unint64_t v28;
  size_t v29;
  char *result;
  char *v31;
  void *v32;
  uint64_t v33;
  float v34;
  float *v35;
  float v36;
  float *v37;
  unint64_t v38;
  float32x4_t v39;
  uint64_t v40;
  unint64_t v41;
  float *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  uint64_t v48;
  float *v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float32x4_t *v53;
  float *v54;
  unint64_t v55;
  float32x4_t v56;
  unint64_t v57;
  float32x4_t *v58;
  float32x4_t v59;
  float *v60;
  float v61;
  float *v62;
  float *v63;
  float *v64;
  float *v65;
  float *v66;
  uint64_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  unint64_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  unint64_t v73;

  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    MEMORY[0x23B83E2F8](v6, 0x1000C8052888210);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    MEMORY[0x23B83E2F8](v7, 0x1000C8052888210);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
  {
    MEMORY[0x23B83E2F8](v8, 0x1000C8052888210);
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  v9 = 4 * a2;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  if (a2)
  {
    if (a2 > 7)
    {
      if ((a2 & 0xFFFFFFFFFFFFFFF8) == a2)
      {
        v17 = 0;
        v18 = (float32x4_t *)(a3 + 4);
        do
        {
          v19 = v18;
          v20 = a2 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v21 = vmulq_f32(*v19, *v19);
            v19[-1] = vmulq_f32(v19[-1], v19[-1]);
            *v19 = v21;
            v19 += 2;
            v20 -= 8;
          }
          while (v20);
          ++v17;
          v18 = (float32x4_t *)((char *)v18 + v9);
        }
        while (v17 != a2);
      }
      else
      {
        v22 = 0;
        v23 = (float32x4_t *)(a3 + 4);
        v24 = a3;
        do
        {
          v25 = a2 & 0xFFFFFFFFFFFFFFF8;
          v26 = v23;
          do
          {
            v27 = vmulq_f32(*v26, *v26);
            v26[-1] = vmulq_f32(v26[-1], v26[-1]);
            *v26 = v27;
            v26 += 2;
            v25 -= 8;
          }
          while (v25);
          v28 = a2 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v24[v28] = v24[v28] * v24[v28];
            ++v28;
          }
          while (a2 != v28);
          ++v22;
          v23 = (float32x4_t *)((char *)v23 + v9);
          v24 = (float *)((char *)v24 + v9);
        }
        while (v22 != a2);
      }
    }
    else
    {
      *a3 = *a3 * *a3;
      if (a2 != 1)
      {
        a3[1] = a3[1] * a3[1];
        if (a2 != 2)
        {
          a3[2] = a3[2] * a3[2];
          if (a2 != 3)
          {
            a3[3] = a3[3] * a3[3];
            if (a2 != 4)
            {
              a3[4] = a3[4] * a3[4];
              if (a2 != 5)
              {
                a3[5] = a3[5] * a3[5];
                if (a2 != 6)
                  a3[6] = a3[6] * a3[6];
              }
            }
          }
        }
      }
      if (a2 != 1)
      {
        v10 = &a3[a2];
        v11 = v10[1] * v10[1];
        *v10 = *v10 * *v10;
        v10[1] = v11;
        if (a2 != 2)
        {
          v10[2] = v10[2] * v10[2];
          if (a2 != 3)
          {
            v10[3] = v10[3] * v10[3];
            if (a2 != 4)
            {
              v10[4] = v10[4] * v10[4];
              if (a2 != 5)
              {
                v10[5] = v10[5] * v10[5];
                if (a2 != 6)
                  v10[6] = v10[6] * v10[6];
              }
            }
          }
        }
        if (a2 != 2)
        {
          v12 = &v10[a2];
          *v12 = *v12 * *v12;
          v12[1] = v12[1] * v12[1];
          v12[2] = v12[2] * v12[2];
          if (a2 != 3)
          {
            v12[3] = v12[3] * v12[3];
            if (a2 != 4)
            {
              v12[4] = v12[4] * v12[4];
              if (a2 != 5)
              {
                v12[5] = v12[5] * v12[5];
                if (a2 != 6)
                  v12[6] = v12[6] * v12[6];
              }
            }
          }
          if (a2 != 3)
          {
            v13 = &v12[a2];
            *v13 = *v13 * *v13;
            v13[1] = v13[1] * v13[1];
            v13[2] = v13[2] * v13[2];
            v13[3] = v13[3] * v13[3];
            if (a2 != 4)
            {
              v13[4] = v13[4] * v13[4];
              if (a2 != 5)
              {
                v13[5] = v13[5] * v13[5];
                if (a2 != 6)
                  v13[6] = v13[6] * v13[6];
              }
            }
            if (a2 != 4)
            {
              v14 = &v13[a2];
              *v14 = *v14 * *v14;
              v14[1] = v14[1] * v14[1];
              v14[2] = v14[2] * v14[2];
              v14[3] = v14[3] * v14[3];
              v14[4] = v14[4] * v14[4];
              if (a2 != 5)
              {
                v14[5] = v14[5] * v14[5];
                if (a2 != 6)
                  v14[6] = v14[6] * v14[6];
              }
              if (a2 != 5)
              {
                v15 = &v14[a2];
                *v15 = *v15 * *v15;
                v15[1] = v15[1] * v15[1];
                v15[2] = v15[2] * v15[2];
                v15[3] = v15[3] * v15[3];
                v15[4] = v15[4] * v15[4];
                v15[5] = v15[5] * v15[5];
                if (a2 != 6)
                {
                  v15[6] = v15[6] * v15[6];
                  v16 = &v15[a2];
                  *v16 = *v16 * *v16;
                  v16[1] = v16[1] * v16[1];
                  v16[2] = v16[2] * v16[2];
                  v16[3] = v16[3] * v16[3];
                  v16[4] = v16[4] * v16[4];
                  v16[5] = v16[5] * v16[5];
                  v16[6] = v16[6] * v16[6];
                }
              }
            }
          }
        }
      }
    }
  }
  if (a2 >> 62)
    v29 = -1;
  else
    v29 = 4 * a2;
  result = (char *)operator new[](v29, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    v31 = result;
    v32 = operator new[](v29, MEMORY[0x24BEDB6B8]);
    *(_QWORD *)(a1 + 48) = v32;
    if (!v32)
      goto LABEL_129;
    if (!a2)
    {
      memcpy(v32, v31, v9);
      goto LABEL_129;
    }
    v33 = 0;
    v34 = (float)a2;
    v35 = a3;
    do
    {
      v36 = 0.0;
      v37 = v35;
      v38 = a2;
      do
      {
        v36 = *v37 + v36;
        v37 = (float *)((char *)v37 + v9);
        --v38;
      }
      while (v38);
      *(float *)&v31[4 * v33++] = v36 / v34;
      ++v35;
    }
    while (v33 != a2);
    memcpy(v32, v31, 4 * a2);
    v40 = 0;
    v41 = a2 & 0xFFFFFFFFFFFFFFF8;
    v42 = a3;
    while (1)
    {
      if (a2 >= 8)
      {
        v44 = 0;
        v45 = a2 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v46 = (float32x4_t *)&v42[v44];
          v39 = vsubq_f32(*(float32x4_t *)&v42[v44], *(float32x4_t *)&v31[v44 * 4]);
          v47 = vsubq_f32(*(float32x4_t *)&v42[v44 + 4], *(float32x4_t *)&v31[v44 * 4 + 16]);
          *v46 = v39;
          v46[1] = v47;
          v44 += 8;
          v45 -= 8;
        }
        while (v45);
        v43 = a2 & 0xFFFFFFFFFFFFFFF8;
        if (v41 == a2)
          goto LABEL_64;
      }
      else
      {
        v43 = 0;
      }
      do
      {
        v42[v43] = v42[v43] - *(float *)&v31[4 * v43];
        ++v43;
      }
      while (a2 != v43);
LABEL_64:
      ++v40;
      v42 = (float *)((char *)v42 + v9);
      if (v40 == a2)
      {
        v48 = 0;
        v49 = a3;
        do
        {
          v50 = 0;
          v51 = 0.0;
          do
            v51 = v49[v50++] + v51;
          while (a2 != v50);
          *(float *)&v31[4 * v48++] = v51 / v34;
          v49 = (float *)((char *)v49 + v9);
        }
        while (v48 != a2);
        v52 = 0;
        v53 = (float32x4_t *)(a3 + 4);
        v54 = a3;
        while (1)
        {
          v39.i32[0] = *(_DWORD *)&v31[4 * v52];
          if (a2 >= 8)
          {
            v56 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0);
            v57 = a2 & 0xFFFFFFFFFFFFFFF8;
            v58 = v53;
            do
            {
              v59 = vsubq_f32(*v58, v56);
              v58[-1] = vsubq_f32(v58[-1], v56);
              *v58 = v59;
              v58 += 2;
              v57 -= 8;
            }
            while (v57);
            v55 = a2 & 0xFFFFFFFFFFFFFFF8;
            if (v41 == a2)
              goto LABEL_78;
          }
          else
          {
            v55 = 0;
          }
          do
          {
            v54[v55] = v54[v55] - v39.f32[0];
            ++v55;
          }
          while (a2 != v55);
LABEL_78:
          ++v52;
          v53 = (float32x4_t *)((char *)v53 + v9);
          v54 = (float *)((char *)v54 + v9);
          if (v52 == a2)
          {
            if (a2 >= 8)
            {
              v67 = 0;
              v68 = (float32x4_t *)(a3 + 4);
              v69.i64[0] = 0xBF000000BF000000;
              v69.i64[1] = 0xBF000000BF000000;
              do
              {
                v70 = a2 & 0xFFFFFFFFFFFFFFF8;
                v71 = v68;
                do
                {
                  v72 = vmulq_f32(*v71, v69);
                  v71[-1] = vmulq_f32(v71[-1], v69);
                  *v71 = v72;
                  v71 += 2;
                  v70 -= 8;
                }
                while (v70);
                if (v41 != a2)
                {
                  v73 = a2 & 0xFFFFFFFFFFFFFFF8;
                  do
                  {
                    a3[v73] = a3[v73] * -0.5;
                    ++v73;
                  }
                  while (a2 != v73);
                }
                ++v67;
                v68 = (float32x4_t *)((char *)v68 + v9);
                a3 = (float *)((char *)a3 + v9);
              }
              while (v67 != a2);
            }
            else
            {
              *a3 = *a3 * -0.5;
              if (a2 != 1)
              {
                a3[1] = a3[1] * -0.5;
                if (a2 != 2)
                {
                  a3[2] = a3[2] * -0.5;
                  if (a2 != 3)
                  {
                    a3[3] = a3[3] * -0.5;
                    if (a2 != 4)
                    {
                      a3[4] = a3[4] * -0.5;
                      if (a2 != 5)
                      {
                        a3[5] = a3[5] * -0.5;
                        if (a2 != 6)
                          a3[6] = a3[6] * -0.5;
                      }
                    }
                  }
                }
              }
              if (a2 != 1)
              {
                v60 = &a3[a2];
                v61 = v60[1] * -0.5;
                *v60 = *v60 * -0.5;
                v60[1] = v61;
                if (a2 != 2)
                {
                  v60[2] = v60[2] * -0.5;
                  if (a2 != 3)
                  {
                    v60[3] = v60[3] * -0.5;
                    if (a2 != 4)
                    {
                      v60[4] = v60[4] * -0.5;
                      if (a2 != 5)
                      {
                        v60[5] = v60[5] * -0.5;
                        if (a2 != 6)
                          v60[6] = v60[6] * -0.5;
                      }
                    }
                  }
                }
                if (a2 != 2)
                {
                  v62 = &v60[a2];
                  *v62 = *v62 * -0.5;
                  v62[1] = v62[1] * -0.5;
                  v62[2] = v62[2] * -0.5;
                  if (a2 != 3)
                  {
                    v62[3] = v62[3] * -0.5;
                    if (a2 != 4)
                    {
                      v62[4] = v62[4] * -0.5;
                      if (a2 != 5)
                      {
                        v62[5] = v62[5] * -0.5;
                        if (a2 != 6)
                          v62[6] = v62[6] * -0.5;
                      }
                    }
                  }
                  if (a2 != 3)
                  {
                    v63 = &v62[a2];
                    *v63 = *v63 * -0.5;
                    v63[1] = v63[1] * -0.5;
                    v63[2] = v63[2] * -0.5;
                    v63[3] = v63[3] * -0.5;
                    if (a2 != 4)
                    {
                      v63[4] = v63[4] * -0.5;
                      if (a2 != 5)
                      {
                        v63[5] = v63[5] * -0.5;
                        if (a2 != 6)
                          v63[6] = v63[6] * -0.5;
                      }
                    }
                    if (a2 != 4)
                    {
                      v64 = &v63[a2];
                      *v64 = *v64 * -0.5;
                      v64[1] = v64[1] * -0.5;
                      v64[2] = v64[2] * -0.5;
                      v64[3] = v64[3] * -0.5;
                      v64[4] = v64[4] * -0.5;
                      if (a2 != 5)
                      {
                        v64[5] = v64[5] * -0.5;
                        if (a2 != 6)
                          v64[6] = v64[6] * -0.5;
                      }
                      if (a2 != 5)
                      {
                        v65 = &v64[a2];
                        *v65 = *v65 * -0.5;
                        v65[1] = v65[1] * -0.5;
                        v65[2] = v65[2] * -0.5;
                        v65[3] = v65[3] * -0.5;
                        v65[4] = v65[4] * -0.5;
                        v65[5] = v65[5] * -0.5;
                        if (a2 != 6)
                        {
                          v65[6] = v65[6] * -0.5;
                          v66 = &v65[a2];
                          *v66 = *v66 * -0.5;
                          v66[1] = v66[1] * -0.5;
                          v66[2] = v66[2] * -0.5;
                          v66[3] = v66[3] * -0.5;
                          v66[4] = v66[4] * -0.5;
                          v66[5] = v66[5] * -0.5;
                          v66[6] = v66[6] * -0.5;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_129:
            JUMPOUT(0x23B83E2F8);
          }
        }
      }
    }
  }
  return result;
}

void sub_2399A4D1C(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  size_t v7;
  const std::nothrow_t *v8;
  float64x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  _QWORD *v15;
  size_t v16;
  const std::nothrow_t *v17;
  void *v18;
  size_t v19;
  void *v20;
  _QWORD *v21;
  float64x2_t *v22;
  float32x2_t *v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  float32x4_t *v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  float32_t v31;
  unint64_t v32;
  float32x4_t *v33;
  BOOL v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  float32_t v38;
  float *v39;
  uint64_t v40;
  float32x2_t *v41;
  float64x2_t *v42;
  unint64_t v43;
  float32x4_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t *v47;
  float32x4_t *v48;
  unint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float v54;
  uint64_t v55;
  float v56;
  float64x2_t *v58;
  float32x4_t *v59;
  unint64_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t *v65;

  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 >> 61)
    v7 = -1;
  else
    v7 = 8 * *(_QWORD *)a1;
  v8 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v9 = (float64x2_t *)operator new[](v7, MEMORY[0x24BEDB6B8]);
  v10 = v6 * v6;
  v11 = (v6 * v6) >> 61;
  if (v11)
    v12 = -1;
  else
    v12 = 8 * v6 * v6;
  v13 = (float64x2_t *)operator new[](v12, v8);
  v14 = v13;
  v65 = v13;
  if (!v9)
  {
LABEL_70:
    if (!v14)
      goto LABEL_72;
    goto LABEL_71;
  }
  if (!v13)
    goto LABEL_80;
  v15 = a3;
  if (a2 >> 62)
    v16 = -1;
  else
    v16 = 4 * a2;
  v17 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v18 = operator new[](v16, MEMORY[0x24BEDB6B8]);
  *(_QWORD *)(a1 + 32) = v18;
  if ((v6 * a2) >> 62)
    v19 = -1;
  else
    v19 = 4 * v6 * a2;
  v20 = operator new[](v19, v17);
  *(_QWORD *)(a1 + 40) = v20;
  if (v18 && v20)
  {
    if (!v10)
    {
      v22 = 0;
      v21 = v15;
      v14 = v65;
      goto LABEL_25;
    }
    if (v11)
      sub_2394189F8();
    v21 = v15;
    v14 = v65;
    v22 = (float64x2_t *)operator new(8 * v6 * v6);
    bzero(v22, 8 * v6 * v6);
    v23 = *(float32x2_t **)(a1 + 24);
    if (v10 >= 8)
    {
      v25 = 0;
      v24 = 0;
      if ((_DWORD)v10)
      {
        if (!((v10 - 1) >> 32))
        {
          v24 = v10 & 0xFFFFFFFFFFFFFFF8;
          v25 = v10 & 0xFFFFFFF8;
          v41 = v23 + 2;
          v42 = v22 + 2;
          v43 = v10 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v44 = *(float32x4_t *)v41[-2].f32;
            v45 = vcvtq_f64_f32(*v41);
            v46 = vcvt_hight_f64_f32(*(float32x4_t *)v41->f32);
            v42[-2] = vcvtq_f64_f32(*(float32x2_t *)v44.f32);
            v42[-1] = vcvt_hight_f64_f32(v44);
            *v42 = v45;
            v42[1] = v46;
            v42 += 4;
            v41 += 4;
            v43 -= 8;
          }
          while (v43);
          if (v10 == v24)
          {
LABEL_25:
            if (!sub_2399A51E0(v6, v22, v9, v14, a2, 0.000000999999997))
              goto LABEL_68;
            if (a2)
            {
              v27 = *(float32x4_t **)(a1 + 32);
              if (a2 < 8)
              {
                v28 = 0;
                v29 = 0;
LABEL_29:
                v30 = v29 + 1;
                do
                {
                  v31 = v9->f64[v28];
                  v27->f32[v28] = v31;
                  v28 = v30++;
                }
                while (v28 < a2);
                goto LABEL_31;
              }
              v29 = 0;
              v28 = 0;
              if (!(_DWORD)a2)
                goto LABEL_29;
              if ((a2 - 1) >> 32)
                goto LABEL_29;
              v28 = a2 & 0xFFFFFFFFFFFFFFF8;
              v29 = a2 & 0xFFFFFFF8;
              v47 = v9 + 2;
              v48 = v27 + 1;
              v49 = a2 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v51 = v47[-2];
                v50 = v47[-1];
                v53 = *v47;
                v52 = v47[1];
                v47 += 4;
                v48[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v51), v50);
                *v48 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v53), v52);
                v48 += 2;
                v49 -= 8;
              }
              while (v49);
              if (v28 != a2)
                goto LABEL_29;
            }
LABEL_31:
            v32 = *(_QWORD *)a1 * a2;
            if (!v32)
              goto LABEL_40;
            v33 = *(float32x4_t **)(a1 + 40);
            if (v32 >= 8 && ((_DWORD)v32 ? (v34 = (v32 - 1) >> 32 == 0) : (v34 = 0), v34))
            {
              v35 = v32 & 0xFFFFFFFFFFFFFFF8;
              v36 = v32 & 0xFFFFFFF8;
              v58 = v14 + 2;
              v59 = v33 + 1;
              v60 = v32 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v62 = v58[-2];
                v61 = v58[-1];
                v64 = *v58;
                v63 = v58[1];
                v58 += 4;
                v59[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v62), v61);
                *v59 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v64), v63);
                v59 += 2;
                v60 -= 8;
              }
              while (v60);
              if (v32 == v35)
              {
LABEL_40:
                *(_DWORD *)(a1 + 56) = 0;
                *v21 = 0;
                if (a2)
                {
                  v39 = *(float **)(a1 + 32);
                  if (*v39 < 0.00000001)
                  {
                    v40 = 0;
LABEL_65:
                    if (a2 == 2)
                    {
                      v40 = 2;
                      *v21 = 2;
                    }
                    goto LABEL_67;
                  }
                  v54 = *v39 + 0.0;
                  *(float *)(a1 + 56) = v54;
                  v40 = 1;
                  *v21 = 1;
                  if (a2 != 1)
                  {
                    v55 = 0;
                    v40 = 1;
                    while (1)
                    {
                      v56 = v39[v55 + 1];
                      if (v56 < 0.00000001)
                        goto LABEL_65;
                      if (v56 == 0.0 || v56 >= (float)(v39[v55] * 0.00000001))
                      {
                        v54 = v56 + v54;
                        *(float *)(a1 + 56) = v54;
                        ++v40;
                        *v21 = v55 + 2;
                        if (a2 - 1 != ++v55)
                          continue;
                      }
                      v40 = v55 + 1;
                      goto LABEL_65;
                    }
                  }
                }
                else
                {
                  v40 = 0;
                }
LABEL_67:
                *(_QWORD *)(a1 + 8) = v40;
LABEL_68:
                if (v22)
                  operator delete(v22);
                goto LABEL_70;
              }
            }
            else
            {
              v35 = 0;
              v36 = 0;
            }
            v37 = v36 + 1;
            do
            {
              v38 = v14->f64[v35];
              v33->f32[v35] = v38;
              v35 = v37++;
            }
            while (v32 > v35);
            goto LABEL_40;
          }
        }
      }
    }
    else
    {
      v24 = 0;
      v25 = 0;
    }
    v26 = v25 + 1;
    do
    {
      v22->f64[v24] = v23->f32[v24];
      v24 = v26++;
    }
    while (v10 > v24);
    goto LABEL_25;
  }
LABEL_71:
  MEMORY[0x23B83E2F8](v65, 0x1000C8000313F17);
LABEL_72:
  if (v9)
LABEL_80:
    JUMPOUT(0x23B83E2F8);
}

void sub_2399A5184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  MEMORY[0x23B83E2F8](a10, 0x1000C8000313F17);
  MEMORY[0x23B83E2F8](a11, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

uint64_t sub_2399A51E0(unint64_t a1, const void *a2, float64x2_t *a3, _QWORD *a4, uint64_t a5, double a6)
{
  uint64_t v6;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  char **v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  float64x2_t *v33;
  unint64_t v34;
  unint64_t v35;
  double v36;
  unint64_t v37;
  float64x2_t *v38;
  float64x2_t v39;
  float64x2_t v40;
  unint64_t v41;
  double *v42;
  double v43;
  unint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  char *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  unint64_t v53;
  unint64_t v54;
  float64x2_t *v55;
  float64x2_t v56;
  unint64_t v57;
  double *v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  float64x2_t *v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  uint64_t i;
  uint64_t v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  unint64_t v79;
  unint64_t v80;
  float64x2_t *v81;
  float64x2_t v82;
  unint64_t v83;
  double *v84;
  unint64_t v85;
  double v86;
  unint64_t v87;
  float64x2_t *v88;
  float64x2_t *v89;
  float64x2_t v90;
  float64x2_t v91;
  unint64_t v92;
  uint64_t v93;
  double *v94;
  double *v95;
  double v96;
  double v97;
  double v98;
  double v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  double *v103;
  double *v104;
  double *v105;
  double v106;
  double v107;
  double v108;
  unint64_t v109;
  double *v110;
  double *v111;
  unint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  double v116;
  float64x2_t *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t *v124;
  uint64_t v125;
  float64x2_t *v126;
  _OWORD *v127;
  unint64_t v128;
  float64x2_t *v129;
  float64x2_t v130;
  unint64_t v131;
  float64x2_t *v132;
  float64x2_t *v133;
  float64x2_t *v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  double *v143;
  uint64_t v144;
  double v145;
  double v146;
  double v147;
  double v148;
  uint64_t v149;
  double v150;
  double *v151;
  uint64_t v152;
  double v153;
  double v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  size_t v159;
  _QWORD *v160;
  float64x2_t *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  float64x2_t *v165;
  float64x2_t *v166;
  unint64_t v167;
  double v168;
  double v169;
  unint64_t v170;
  double v171;
  unint64_t v172;
  double v173;
  double v174;
  unint64_t v175;
  unint64_t v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  unint64_t v186;
  float64x2_t v187;
  float64x2_t *v188;
  float64x2_t *v189;
  unint64_t v190;
  float64x2_t v191;
  float64x2_t v192;
  float64x2_t v193;
  float64x2_t v194;
  float64x2_t v195;
  float64x2_t v196;
  uint64_t v197;
  double v198;
  double v199;
  double v200;
  unint64_t v201;
  uint64_t v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  double v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  double v214;
  double v215;
  double v216;
  double v217;
  unint64_t v218;
  uint64_t v219;
  double v220;
  double v221;
  double v222;
  uint64_t v223;
  double v224;
  double v225;
  double v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  double v230;
  double v231;
  _QWORD *v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  double v236;
  double v237;
  uint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t j;
  uint64_t *v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v248;
  uint64_t v249;
  _BOOL4 v250;
  char *v251;
  float64x2_t *v252;
  float64x2_t *v253;
  unint64_t v254;
  uint64_t v255;
  float64x2_t *v256;
  void *__p;
  float64x2_t *v258;
  unint64_t v259;

  v6 = 0;
  if (!a2 || !a3 || !a4 || a5 - 1 >= a1)
    return v6;
  v13 = (a1 + 3) * a1;
  if (v13 >> 61)
    v14 = -1;
  else
    v14 = 8 * v13;
  v15 = (char *)operator new[](v14, MEMORY[0x24BEDB6B8]);
  if (!v15)
    return 0;
  v16 = v15;
  v17 = 8 * a1;
  v254 = a1 >> 61;
  if (a1 >> 61)
    v18 = -1;
  else
    v18 = 8 * a1;
  v19 = (uint64_t *)operator new[](v18, MEMORY[0x24BEDB6B8]);
  v6 = v19 != 0;
  if (!v19)
    goto LABEL_176;
  v20 = v19;
  v248 = a4;
  v249 = a5;
  v250 = v19 != 0;
  v21 = a1 * a1;
  v22 = &v16[8 * a1 * a1];
  v23 = v16;
  v24 = (unint64_t)&v22[v17];
  bzero(v22, 8 * a1);
  memcpy(v23, a2, 8 * a1 * a1);
  v251 = v23;
  if (a1 >= 2)
  {
    v25 = a1 & 0xFFFFFFFFFFFFFFFELL;
    v26 = v20 + 1;
    v27 = a1 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v26 - 1) = v23;
      *v26 = &v23[v17];
      v23 += 16 * a1;
      v26 += 2;
      v27 -= 2;
    }
    while (v27);
    if (v25 == a1)
      goto LABEL_21;
  }
  else
  {
    v25 = 0;
  }
  v28 = a1 - v25;
  v29 = (char **)&v20[v25];
  v30 = &v251[8 * v25 * a1];
  do
  {
    *v29++ = v30;
    v30 += v17;
    --v28;
  }
  while (v28);
LABEL_21:
  memcpy(&v22[v17], (const void *)v20[a1 - 1], 8 * a1);
  if (v21)
  {
    if (v21 >> 61)
      sub_2394189F8();
    __p = operator new(8 * v21);
    bzero(__p, 8 * v21);
    v31 = a1 - 1;
    if (a1 == 1)
      goto LABEL_119;
  }
  else
  {
    __p = 0;
    v31 = a1 - 1;
    if (a1 == 1)
      goto LABEL_119;
  }
  v32 = v24 + v17;
  v33 = (float64x2_t *)&v251[a1 * (v17 + 8)];
  v258 = v33 + 1;
  v252 = (float64x2_t *)&v251[a1 * (v17 + 16)];
  v253 = v33;
  v34 = v31;
  v256 = v33;
  do
  {
    while (1)
    {
      if (v34 < 4)
      {
        v35 = 0;
        v36 = 0.0;
LABEL_32:
        v41 = v34 - v35;
        v42 = &v33->f64[v35];
        do
        {
          v43 = *v42++;
          v36 = v36 + fabs(v43);
          --v41;
        }
        while (v41);
        goto LABEL_34;
      }
      v35 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v36 = 0.0;
      v37 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v38 = v258;
      do
      {
        v39 = vabsq_f64(v38[-1]);
        v40 = vabsq_f64(*v38);
        v36 = v36 + v39.f64[0] + v39.f64[1] + v40.f64[0] + v40.f64[1];
        v38 += 2;
        v37 -= 4;
      }
      while (v37);
      if (v34 != v35)
        goto LABEL_32;
LABEL_34:
      if (v36 < a6)
        break;
      v52 = 1.0 / v36;
      if (v34 < 4)
      {
        v53 = 0;
LABEL_44:
        v57 = v34 - v53;
        v58 = &v33->f64[v53];
        do
        {
          *v58 = v52 * *v58;
          ++v58;
          --v57;
        }
        while (v57);
        goto LABEL_46;
      }
      v53 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v54 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v55 = v258;
      do
      {
        v56 = vmulq_n_f64(*v55, v52);
        v55[-1] = vmulq_n_f64(v55[-1], v52);
        *v55 = v56;
        v55 += 2;
        v54 -= 4;
      }
      while (v54);
      if (v34 != v53)
        goto LABEL_44;
LABEL_46:
      v59 = 0;
      v60 = 0.0;
      do
      {
        v60 = v60 + *(double *)(v24 + 8 * v59) * *(double *)(v24 + 8 * v59);
        ++v59;
      }
      while (v34 != v59);
      v259 = v34 - 1;
      v61 = 8 * (v34 - 1);
      v62 = sqrt(v60);
      if (v60 < 0.0)
        v62 = 0.0;
      if (*(double *)(v24 + v61) >= 0.0)
        v63 = v62;
      else
        v63 = -v62;
      *(double *)&v22[8 * v34] = -(v36 * v63);
      v64 = *(double *)(v24 + v61);
      *(double *)(v24 + v61) = v63 + v64;
      v255 = 8 * v34;
      bzero((void *)(v24 + v17), 8 * v34);
      if (v254)
        sub_2394189F8();
      v65 = (float64x2_t *)operator new(8 * a1);
      v66 = v60 + v64 * v63;
      bzero(v65, 8 * a1);
      v67 = 0;
      do
      {
        v68 = v67;
        v69 = v20[v67];
        *(_QWORD *)(v69 + 8 * v34) = *(_QWORD *)(v24 + 8 * v67);
        v70 = *(double *)(v69 + 8 * v67) * *(double *)(v24 + 8 * v67) - v65->f64[v67];
        v71 = *(double *)(v32 + 8 * v67);
        v65->f64[v68] = v71 + v70 - v71 - v70;
        *(double *)(v32 + v68 * 8) = v71 + v70;
        if (v67)
        {
          for (i = 0; i != v67; ++i)
          {
            v73 = i;
            v74 = *(double *)(v69 + 8 * i) * *(double *)(v24 + 8 * i) - v65->f64[v67];
            v75 = *(double *)(v32 + 8 * v67);
            v65->f64[v67] = v75 + v74 - v75 - v74;
            *(double *)(v32 + 8 * v67) = v75 + v74;
            v76 = *(double *)(v69 + 8 * i) * *(double *)(v24 + 8 * v67) - v65->f64[i];
            v77 = *(double *)(v32 + 8 * i);
            v65->f64[v73] = v77 + v76 - v77 - v76;
            *(double *)(v32 + v73 * 8) = v77 + v76;
          }
        }
        ++v67;
      }
      while (v67 != v34);
      v78 = 1.0 / v66;
      if (v34 < 4)
      {
        v79 = 0;
LABEL_65:
        v83 = v34 - v79;
        v84 = &v252->f64[v79];
        do
        {
          *v84 = v78 * *v84;
          ++v84;
          --v83;
        }
        while (v83);
        goto LABEL_67;
      }
      v79 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v80 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v81 = v252 + 1;
      do
      {
        v82 = vmulq_n_f64(*v81, v78);
        v81[-1] = vmulq_n_f64(v81[-1], v78);
        *v81 = v82;
        v81 += 2;
        v80 -= 4;
      }
      while (v80);
      if (v34 != v79)
        goto LABEL_65;
LABEL_67:
      if (v34 < 4)
      {
        v85 = 0;
        v86 = 0.0;
LABEL_72:
        v92 = v34 - v85;
        v93 = v85;
        v94 = &v252->f64[v85];
        v95 = &v256->f64[v93];
        do
        {
          v96 = *v95++;
          v97 = v96;
          v98 = *v94++;
          v86 = v86 + v97 * v98;
          --v92;
        }
        while (v92);
        goto LABEL_74;
      }
      v85 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v86 = 0.0;
      v87 = v34 & 0xFFFFFFFFFFFFFFFCLL;
      v88 = v252 + 1;
      v89 = v258;
      do
      {
        v90 = vmulq_f64(v89[-1], v88[-1]);
        v91 = vmulq_f64(*v89, *v88);
        v86 = v86 + v90.f64[0] + v90.f64[1] + v91.f64[0] + v91.f64[1];
        v89 += 2;
        v88 += 2;
        v87 -= 4;
      }
      while (v87);
      if (v34 != v85)
        goto LABEL_72;
LABEL_74:
      v99 = -v86 / (v66 + v66);
      if (v34 >= 4 && (v32 >= (unint64_t)v253 + v255 || v24 >= (unint64_t)&v251[(v17 + 16) * a1 + v255]))
      {
        v100 = v34 & 0xFFFFFFFFFFFFFFFELL;
        v131 = v34 & 0xFFFFFFFFFFFFFFFELL;
        v132 = v65;
        v133 = (float64x2_t *)&v22[v17];
        v134 = (float64x2_t *)(v24 + v17);
        do
        {
          v135 = *v133++;
          v136 = vsubq_f64(vmulq_n_f64(v135, v99), *v132);
          v137 = vaddq_f64(*v134, v136);
          *v132++ = vsubq_f64(vsubq_f64(v137, *v134), v136);
          *v134++ = v137;
          v131 -= 2;
        }
        while (v131);
        if (v34 == v100)
          goto LABEL_80;
      }
      else
      {
        v100 = 0;
      }
      v101 = v34 - v100;
      v102 = v100;
      v103 = &v256->f64[v100];
      v104 = &v252->f64[v102];
      v105 = &v65->f64[v102];
      do
      {
        v106 = *v103++;
        v107 = v99 * v106 - *v105;
        v108 = *v104 + v107;
        *v105++ = v108 - *v104 - v107;
        *v104++ = v108;
        --v101;
      }
      while (v101);
LABEL_80:
      v109 = 0;
      v110 = (double *)__p;
      do
      {
        v111 = v110;
        v112 = v109;
        do
        {
          v113 = v20[v112];
          v114 = -(*(double *)(v32 + 8 * v109) * *(double *)(v24 + 8 * v112)
                 + *(double *)(v32 + 8 * v112) * *(double *)(v24 + 8 * v109))
               - *v111;
          v115 = *(double *)(v113 + 8 * v109);
          *v111 = v115 + v114 - v115 - v114;
          if (fabs(v115 + v114) >= a6)
            v116 = v115 + v114;
          else
            v116 = 0.0;
          *(double *)(v113 + 8 * v109) = v116;
          ++v112;
          v111 = (double *)((char *)v111 + v17);
        }
        while (v112 < v34);
        ++v109;
        v110 = (double *)((char *)v110 + v17 + 8);
      }
      while (v109 != v34);
      v117 = (float64x2_t *)v20[v259];
      v118 = v20[v34];
      if (v34 >= 0xA)
      {
        v119 = 0;
        if ((unint64_t)(v118 - (_QWORD)v253) >= 0x20
          && (unint64_t)((char *)v253 - (char *)v117) >= 0x20
          && (unint64_t)(v118 - (_QWORD)v117) >= 0x20)
        {
          v119 = v34 & 0xFFFFFFFFFFFFFFFCLL;
          v126 = v117 + 1;
          v127 = (_OWORD *)(v118 + 16);
          v128 = v34 & 0xFFFFFFFFFFFFFFFCLL;
          v129 = v258;
          do
          {
            v130 = *v126;
            v129[-1] = v126[-1];
            *v129 = v130;
            *(v127 - 1) = 0uLL;
            *v127 = 0uLL;
            v126 += 2;
            v129 += 2;
            v127 += 2;
            v128 -= 4;
          }
          while (v128);
          if (v34 == v119)
            goto LABEL_91;
        }
      }
      else
      {
        v119 = 0;
      }
      v120 = v34 - v119;
      v121 = 8 * v119;
      v122 = (_QWORD *)(v118 + 8 * v119);
      v123 = (_QWORD *)&v256->f64[v119];
      v124 = (uint64_t *)((char *)v117 + v121);
      do
      {
        v125 = *v124++;
        *v123++ = v125;
        *v122++ = 0;
        --v120;
      }
      while (v120);
LABEL_91:
      operator delete(v65);
      v33 = (float64x2_t *)&v251[a1 * (v17 + 8)];
      v31 = a1 - 1;
      *(double *)(v24 + 8 * v34--) = v66;
      if (!v259)
        goto LABEL_104;
    }
    *(_QWORD *)(v24 + 8 * v34) = 0;
    v44 = v34 - 1;
    v45 = (uint64_t *)v20[v34 - 1];
    v46 = (_QWORD *)v20[v34];
    v47 = &v22[v17];
    v48 = v20;
    v49 = v34;
    do
    {
      v50 = *v45++;
      *(_QWORD *)v47 = v50;
      v47 += 8;
      *v46++ = 0;
      v51 = *v48++;
      *(_QWORD *)(v51 + 8 * v34) = 0;
      --v49;
    }
    while (v49);
    *(_QWORD *)(v24 + 8 * v34--) = 0;
  }
  while (v44);
LABEL_104:
  v138 = 0;
  v139 = 1;
  do
  {
    v140 = v138;
    v141 = v20[v138];
    a3->f64[v140] = *(float64_t *)(v141 + 8 * v138);
    *(_QWORD *)(v141 + v140 * 8) = 0x3FF0000000000000;
    ++v138;
    if (fabs(*(double *)(v24 + 8 * v138)) > a6)
    {
      v142 = 0;
      v143 = (double *)__p;
      do
      {
        v144 = 0;
        v145 = 0.0;
        v146 = 0.0;
        do
        {
          v147 = v145;
          v148 = *(double *)(v20[v144] + 8 * v142) * *(double *)(v20[v144] + 8 * v138) - v146;
          v145 = v145 + v148;
          v146 = v145 - v147 - v148;
          ++v144;
        }
        while (v139 != v144);
        v149 = 0;
        v150 = -v145;
        v151 = v143;
        do
        {
          v152 = v20[v149];
          v153 = *(double *)(v152 + 8 * v138) * v150 / *(double *)(v24 + 8 * v138) - *v151;
          v154 = *(double *)(v152 + 8 * v142);
          *v151 = v154 + v153 - v154 - v153;
          *(double *)(v152 + 8 * v142) = v154 + v153;
          ++v149;
          v151 = (double *)((char *)v151 + v17);
        }
        while (v139 != v149);
        ++v142;
        ++v143;
      }
      while (v142 != v139);
    }
    if (v139 < 2)
    {
      v155 = 0;
      goto LABEL_118;
    }
    v156 = v139 & 0xFFFFFFFFFFFFFFFELL;
    v155 = v139 & 0xFFFFFFFFFFFFFFFELL;
    v157 = v20 + 1;
    do
    {
      v158 = *v157;
      *(_QWORD *)(*(v157 - 1) + 8 * v138) = 0;
      *(_QWORD *)(v158 + 8 * v138) = 0;
      v157 += 2;
      v156 -= 2;
    }
    while (v156);
    while (v139 != v155)
LABEL_118:
      *(_QWORD *)(v20[v155++] + 8 * v138) = 0;
    ++v139;
  }
  while (v138 != v31);
LABEL_119:
  v159 = v31;
  v160 = (_QWORD *)v20[v31];
  *(_QWORD *)&a3->f64[v159] = v160[v31];
  v160[v159] = 0x3FF0000000000000;
  bzero(v160, 8 * v31);
  memmove(v22, v22 + 8, v159 * 8);
  *(_QWORD *)&v22[v159 * 8] = 0;
  if (v254)
    sub_2394189F8();
  v161 = (float64x2_t *)operator new(8 * a1);
  bzero(v161, 8 * a1);
  v162 = 0;
  v163 = 0;
  if (a1 <= 1)
    v164 = 1;
  else
    v164 = a1;
  v165 = a3 + 1;
  v166 = v161 + 1;
  v167 = 1;
  v168 = 0.0;
  v169 = 0.0;
  do
  {
    if (a1 <= v167)
      v170 = v167;
    else
      v170 = a1;
    v171 = a3->f64[v163];
    v172 = v170 - v163;
    v173 = fabs(v171) + fabs(*(double *)&v22[8 * v163]);
    if (v168 < v173)
      v168 = v173;
    v174 = v168 * a6;
    v175 = v163 + 1;
    while (1)
    {
      v176 = v163;
      while (1)
      {
        v177 = fabs(*(double *)&v22[8 * v176]);
        if (v177 <= v174)
          break;
        if (++v176 >= a1)
        {
          v176 = v170;
          break;
        }
      }
      if (v176 == v163)
        break;
      v178 = a3->f64[v175];
      v179 = v171 + v178;
      v180 = (v171 * v178 - *(double *)&v22[8 * v163] * *(double *)&v22[8 * v163]) * -4.0 + v179 * v179;
      v181 = sqrt(v180);
      if (v180 >= 0.0)
        v182 = v181;
      else
        v182 = 0.0;
      v183 = (v179 + v182) * 0.5;
      v184 = (v179 - v182) * 0.5;
      if (vabdd_f64(v171, v183) <= vabdd_f64(v171, v184))
        v184 = v183;
      v185 = -v184;
      v186 = v163;
      if (v172 < 4)
        goto LABEL_183;
      v187 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v185, 0);
      v188 = v166;
      v189 = v165;
      v190 = (v170 + v162) & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v191 = vsubq_f64(v187, v188[-1]);
        v192 = vsubq_f64(v187, *v188);
        v193 = v189[-1];
        v194 = vaddq_f64(v193, v191);
        v195 = vaddq_f64(*v189, v192);
        v196 = vsubq_f64(vsubq_f64(v195, *v189), v192);
        v188[-1] = vsubq_f64(vsubq_f64(v194, v193), v191);
        *v188 = v196;
        v189[-1] = v194;
        *v189 = v195;
        v189 += 2;
        v188 += 2;
        v190 -= 4;
      }
      while (v190);
      v186 = v163 + (v172 & 0xFFFFFFFFFFFFFFFCLL);
      if (v172 != (v172 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_183:
        do
        {
          v197 = v186;
          v198 = v185 - v161->f64[v186];
          v199 = a3->f64[v186];
          v161->f64[v197] = v199 + v198 - v199 - v198;
          a3->f64[v197] = v199 + v198;
          ++v186;
        }
        while (v186 < a1);
      }
      v200 = a3->f64[v176];
      v201 = v176 - 1;
      v202 = 8 * (v176 - 1);
      v203 = *(double *)&v22[v202];
      v204 = sqrt(v203 * v203 + v200 * v200);
      v205 = v200 / v204;
      v206 = v203 / v204;
      v207 = a3->f64[(unint64_t)v202 / 8];
      v208 = v200 * (v205 * v205) + v206 * v206 * v207 + v205 * (v206 + v206) * v203;
      v209 = v207 * (v205 * v205);
      v210 = (v207 - v200) * (v206 * v205);
      a3->f64[v176] = v208;
      v211 = v20;
      v212 = v164;
      do
      {
        v213 = *v211++;
        v214 = *(double *)(v213 + 8 * v176);
        v215 = *(double *)(v213 + v202);
        *(double *)(v213 + 8 * v176) = v205 * v214 + v206 * v215;
        *(double *)(v213 + v202) = v214 * -v206 + v205 * v215;
        --v212;
      }
      while (v212);
      v171 = v209 + v206 * v206 * v200 + -(v205 * (v206 + v206)) * v203;
      v216 = v210 + (v205 * v205 - v206 * v206) * v203;
      if (v176 > v175 && v201 > v163)
      {
        v217 = v206 * *(double *)&v22[8 * v176 - 16];
        do
        {
          v218 = v201 - 1;
          v219 = 8 * (v201 - 1);
          v220 = v205 * *(double *)&v22[v219];
          *(double *)&v22[v219] = v220;
          v221 = sqrt(v217 * v217 + v216 * v216);
          v205 = v216 / v221;
          v222 = v217 / v221;
          v223 = 8 * v201;
          *(double *)&v22[v223] = v217 * v222 + v205 * v216;
          v224 = v222 * v222;
          v225 = a3->f64[(unint64_t)v219 / 8];
          v226 = v205 * (v222 + v222);
          a3->f64[(unint64_t)v223 / 8] = v171 * (v205 * v205) + v222 * v222 * v225 + v226 * v220;
          if (v201 != 1)
            v217 = v222 * *(double *)&v22[8 * v201 - 16];
          --v201;
          v216 = v222 * v205 * (v225 - v171) + -(v224 - v205 * v205) * v220;
          v171 = v205 * v205 * v225 + v224 * v171 - v226 * v220;
          v227 = v20;
          v228 = v164;
          do
          {
            v229 = *v227++;
            v230 = *(double *)(v229 + v223);
            v231 = *(double *)(v229 + v219);
            *(double *)(v229 + v223) = v205 * v230 + v222 * v231;
            *(double *)(v229 + v219) = v230 * -v222 + v205 * v231;
            --v228;
          }
          while (v228);
        }
        while (v218 > v163);
      }
      v169 = v169 + v184;
      a3->f64[v163] = v171;
      *(double *)&v22[8 * v163] = v216;
      if (v177 <= v174)
        *(_QWORD *)&v22[8 * v176] = 0;
    }
    a3->f64[v163] = v169 + v171;
    *(_QWORD *)&v22[8 * v163] = 0;
    ++v167;
    --v162;
    v165 = (float64x2_t *)((char *)v165 + 8);
    v166 = (float64x2_t *)((char *)v166 + 8);
    ++v163;
  }
  while (v175 != v164);
  v6 = v250;
  v232 = v248;
  if (a1 != 1)
  {
    v233 = 0;
    do
    {
      v234 = v233++;
      if (v233 < a1)
      {
        v235 = v233;
        do
        {
          v236 = a3->f64[v235];
          v237 = a3->f64[v234];
          if (v236 > v237)
          {
            a3->f64[v234] = v236;
            a3->f64[v235] = v237;
            v238 = v20;
            v239 = a1;
            do
            {
              v240 = *v238++;
              v241 = *(_QWORD *)(v240 + 8 * v234);
              *(_QWORD *)(v240 + 8 * v234) = *(_QWORD *)(v240 + 8 * v235);
              *(_QWORD *)(v240 + 8 * v235) = v241;
              --v239;
            }
            while (v239);
          }
          ++v235;
        }
        while (v235 != a1);
      }
    }
    while (v233 != a1 - 1);
  }
  if (v249)
  {
    for (j = 0; j != v249; ++j)
    {
      v243 = v20;
      v244 = v232;
      v245 = v164;
      do
      {
        v246 = *v243++;
        *v244++ = *(_QWORD *)(v246 + 8 * j);
        --v245;
      }
      while (v245);
      v232 = (_QWORD *)((char *)v232 + v17);
    }
  }
  operator delete(v161);
  if (__p)
    operator delete(__p);
  MEMORY[0x23B83E2F8](v20, 0x80C80B8603338);
  v16 = v251;
LABEL_176:
  MEMORY[0x23B83E2F8](v16, 0x1000C8000313F17);
  return v6;
}

void sub_2399A5FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  uint64_t v30;

  if (__p)
    operator delete(__p);
  MEMORY[0x23B83E2F8](v30, 0x80C80B8603338);
  MEMORY[0x23B83E2F8](a13, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

char *sub_2399A6078(char *result, unint64_t *a2, float a3, double a4, double a5, int32x2_t a6)
{
  float v8;
  float *v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  float v17;
  unint64_t v18;
  int8x16_t v19;
  float32x4_t *v20;
  float32x4_t *v21;
  unint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  float *v28;
  unint64_t v29;
  float *v30;
  float v31;
  float v32;
  float v33;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  float v40;
  int32x2_t v41;

  v8 = *((float *)result + 14);
  if (fabsf(v8) < 0.00000001)
  {
    *a2 = 0;
    return result;
  }
  if (a3 >= 1.0)
    *a2 = *((_QWORD *)result + 1);
  v9 = (float *)*((_QWORD *)result + 4);
  v10 = *v9 + v9[1];
  if (v10 >= (float)(v8 * 0.99))
  {
    v12 = 2;
  }
  else
  {
    v11 = *((_QWORD *)result + 1);
    v12 = 2;
    if (v11 <= 2)
      v11 = 2;
    v13 = *v9 + v9[1];
    while (v11 != v12)
    {
      v13 = v13 + v9[v12++];
      if (v13 >= (float)(v8 * 0.99))
        goto LABEL_14;
    }
    v12 = v11;
  }
LABEL_14:
  a6.i32[0] = *(__int32 *)v9;
  v41 = a6;
  *((_QWORD *)result + 2) = v12;
  v14 = v12 - 1;
  if ((v12 - 1) >> 62)
    v15 = -1;
  else
    v15 = 4 * (v12 - 1);
  result = (char *)operator new[](v15, MEMORY[0x24BEDB6B8]);
  if (result)
  {
    if (v12 == 1)
    {
      v18 = 2;
LABEL_43:
      if (a3 >= 0.91)
      {
        if (v18 <= 2)
          v18 = 2;
LABEL_58:
        *a2 = v18;
        JUMPOUT(0x23B83E2F8);
      }
      v35 = v18 - 1;
      if (v18 - 1 <= v14)
      {
LABEL_57:
        v18 = 2;
        goto LABEL_58;
      }
      v36 = 0;
      v37 = 0;
      v38 = (uint64_t)&result[4 * v18 - 4];
      v39 = 0.0;
      while (1)
      {
        if (v36)
        {
          v40 = *(float *)(v38 + 4 * v36);
          if (v39 >= v40)
            goto LABEL_48;
        }
        else
        {
          v40 = *(float *)&result[4 * v35];
        }
        v37 = v35 + v36;
        v39 = v40;
LABEL_48:
        ++v36;
        if (v35 + v36 <= v14)
        {
          if (v37)
          {
            v18 = v37 + 1;
            goto LABEL_58;
          }
          goto LABEL_57;
        }
      }
    }
    if (v14 >= 8)
    {
      v17 = *(float *)v41.i32;
      if ((unint64_t)(result - (char *)v9 - 4) >= 0x20)
      {
        v16 = v14 & 0xFFFFFFFFFFFFFFF8;
        v19 = (int8x16_t)vdupq_lane_s32(v41, 0);
        v20 = (float32x4_t *)(v9 + 5);
        v21 = (float32x4_t *)(result + 16);
        v22 = v14 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v23 = v20[-1];
          v24 = (float32x4_t)vextq_s8(v19, (int8x16_t)v23, 0xCuLL);
          v25 = *v20;
          v20 += 2;
          v19 = (int8x16_t)v25;
          v26 = (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v25, 0xCuLL);
          v21[-1] = vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vsqrtq_f32(v24), (int8x16_t)vcltzq_f32(v24)), (float32x4_t)vbicq_s8((int8x16_t)vsqrtq_f32(v23), (int8x16_t)vcltzq_f32(v23)));
          *v21 = vsubq_f32((float32x4_t)vbicq_s8((int8x16_t)vsqrtq_f32(v26), (int8x16_t)vcltzq_f32(v26)), (float32x4_t)vbicq_s8((int8x16_t)vsqrtq_f32(v25), (int8x16_t)vcltzq_f32(v25)));
          v21 += 2;
          v22 -= 8;
        }
        while (v22);
        if (v14 == v16)
        {
LABEL_35:
          v18 = 2;
          if (v10 < (float)(v8 * a3) && v12 >= 3)
          {
            v18 = 2;
            do
              v10 = v10 + v9[v18++];
            while (v10 < (float)(v8 * a3) && v18 < v12);
          }
          goto LABEL_43;
        }
        v17 = *(float *)&v19.i32[3];
      }
      else
      {
        v16 = 0;
      }
    }
    else
    {
      v16 = 0;
      v17 = *(float *)v41.i32;
    }
    v27 = v16;
    v28 = (float *)&result[4 * v16];
    v29 = ~v16 + v12;
    v30 = &v9[v27 + 1];
    do
    {
      v31 = sqrtf(v17);
      if (v17 < 0.0)
        v31 = 0.0;
      v32 = *v30++;
      v17 = v32;
      v33 = sqrtf(v32);
      if (v32 < 0.0)
        v33 = 0.0;
      *v28++ = v31 - v33;
      --v29;
    }
    while (v29);
    goto LABEL_35;
  }
  return result;
}

BOOL sub_2399A6368(unint64_t *a1, unint64_t a2, float *a3)
{
  unint64_t v3;
  float *v4;
  float *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float *v11;
  unint64_t v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  unint64_t v17;
  float v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  float32x4_t *v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  unint64_t v32;
  float32x4_t v33;
  unint64_t v34;
  float *v35;
  float *v36;
  float v37;

  v3 = *a1;
  if (a2 - 1 < *a1)
  {
    v5 = (float *)a1[4];
    v4 = (float *)a1[5];
    if (v3 > 7)
    {
      if (a2 == 1)
      {
        v12 = v3 & 0xFFFFFFFFFFFFFFF8;
        v13 = *v5;
        if (v3 == (v3 & 0xFFFFFFFFFFFFFFF8))
        {
          if (v13 < 0.0)
          {
            *v5 = 0.0;
            v13 = 0.0;
          }
          v14 = sqrtf(v13);
          v15 = v13 < 0.0;
          v16 = 0.0;
          if (!v15)
            v16 = v14;
          if ((unint64_t)((char *)a3 - (char *)v4) > 0x1F)
          {
            v27 = (float32x4_t *)(a3 + 4);
            v28 = (float32x4_t *)(v4 + 4);
            do
            {
              v29 = vmulq_n_f32(*v28, v16);
              v27[-1] = vmulq_n_f32(v28[-1], v16);
              *v27 = v29;
              v27 += 2;
              v28 += 2;
              v12 -= 8;
            }
            while (v12);
          }
          else
          {
            v17 = v3;
            do
            {
              v18 = *v4++;
              *a3++ = v16 * v18;
              --v17;
            }
            while (v17);
          }
        }
        else
        {
          if (v13 < 0.0)
          {
            *v5 = 0.0;
            v13 = 0.0;
          }
          v25 = sqrtf(v13);
          v15 = v13 < 0.0;
          v26 = 0.0;
          if (!v15)
            v26 = v25;
          if ((unint64_t)((char *)a3 - (char *)v4) > 0x1F)
          {
            v30 = (float32x4_t *)(a3 + 4);
            v31 = (float32x4_t *)(v4 + 4);
            v32 = v3 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v33 = vmulq_n_f32(*v31, v26);
              v30[-1] = vmulq_n_f32(v31[-1], v26);
              *v30 = v33;
              v30 += 2;
              v31 += 2;
              v32 -= 8;
            }
            while (v32);
          }
          else
          {
            v12 = 0;
          }
          v34 = v3 - v12;
          v35 = &a3[v12];
          v36 = &v4[v12];
          do
          {
            v37 = *v36++;
            *v35++ = v26 * v37;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        v19 = 0;
        do
        {
          v20 = v5[v19];
          if (v20 < 0.0)
          {
            v5[v19] = 0.0;
            v20 = 0.0;
          }
          v21 = 0;
          v22 = sqrtf(v20);
          if (v20 >= 0.0)
            v23 = v22;
          else
            v23 = 0.0;
          v24 = a3;
          do
          {
            *v24 = v23 * v4[v21++];
            v24 += a2;
          }
          while (v3 != v21);
          ++v19;
          ++a3;
          v4 += v3;
        }
        while (v19 != a2);
      }
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = v5[v6];
        if (v7 < 0.0)
        {
          v5[v6] = 0.0;
          v7 = 0.0;
        }
        v8 = 0;
        v9 = sqrtf(v7);
        if (v7 >= 0.0)
          v10 = v9;
        else
          v10 = 0.0;
        v11 = a3;
        do
        {
          *v11 = v10 * v4[v8++];
          v11 += a2;
        }
        while (v3 != v8);
        ++v6;
        ++a3;
        v4 += v3;
      }
      while (v6 != a2);
    }
  }
  return v3 >= a2;
}

void sub_2399A6588(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, char a7, char a8)
{
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  void *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  void *__p;
  char *v87;
  void *v88;
  char *v89;
  _BYTE v90[24];
  _BYTE *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)(a1[1] - *a1) < 0x50)
    return;
  sub_23999BAC8(&v88, (uint64_t)a1);
  v85 = a8;
  v84 = *(_QWORD *)(a3 + 160);
  v82 = a2;
  v83 = *(_QWORD *)(a3 + 152);
  sub_2399A6B9C(&__p, (a1[1] - *a1) >> 4);
  v16 = v88;
  if (v89 != v88)
  {
    v17 = 0;
    do
    {
      v18 = v16[2 * v17];
      v19 = operator new(0x180uLL);
      v19[2] = 0;
      *v19 = &off_250AF1130;
      v19[1] = 0;
      v20 = sub_239994FB8((uint64_t)(v19 + 3), v18, a4, a5, a7);
      v21 = (uint64_t *)((char *)__p + 16 * v17);
      v22 = (std::__shared_weak_count *)v21[1];
      *v21 = v20;
      v21[1] = (uint64_t)v19;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      ++v17;
      v16 = v88;
    }
    while (v17 < (v89 - (_BYTE *)v88) >> 4);
  }
  sub_2399A6C34((uint64_t *)&__p, a3, (v84 - v83) >> 2);
  v25 = a6[3];
  if (v25 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 48))(v25) & 1) != 0)
    goto LABEL_75;
  v26 = *a1;
  for (i = a1[1]; i != v26; i -= 16)
  {
    v28 = *(std::__shared_weak_count **)(i - 8);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  a1[1] = v26;
  v31 = a6[3];
  if (!v31)
    goto LABEL_23;
  if ((_QWORD *)v31 != a6)
  {
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
LABEL_23:
    v91 = (_BYTE *)v31;
    goto LABEL_25;
  }
  v91 = v90;
  (*(void (**)(_QWORD *, _BYTE *))(*a6 + 24))(a6, v90);
LABEL_25:
  sub_2399A6ED0(&__p, &v88, v82, (v84 - v83) >> 2, a4, a5, (uint64_t)v90, a7, v85);
  v33 = v91;
  if (v91 == v90)
  {
    v34 = 4;
    v33 = v90;
    goto LABEL_29;
  }
  if (v91)
  {
    v34 = 5;
LABEL_29:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  v35 = a6[3];
  if (!v35 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 48))(v35) & 1) == 0)
  {
    v36 = v87 - (_BYTE *)__p;
    if (v87 == __p)
    {
      v40 = *a1;
      v41 = a1[1];
      v42 = (v41 - *a1) >> 4;
      goto LABEL_52;
    }
    v37 = v36 >> 4;
    if (v37 <= 1)
      v38 = 1;
    else
      v38 = v37;
    if (v38 >= 2)
    {
      v43 = 0;
      v44 = 0;
      v39 = v38 & 0xFFFFFFFFFFFFFFFELL;
      v45 = (uint64_t *)((char *)__p + 16);
      v46 = v38 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v47 = *(v45 - 2);
        v49 = *v45;
        v45 += 4;
        v48 = v49;
        if (v47)
          ++v43;
        if (v48)
          ++v44;
        v46 -= 2;
      }
      while (v46);
      v36 = v44 + v43;
      if (v38 == v39)
      {
LABEL_50:
        v40 = *a1;
        v41 = a1[1];
        v42 = (v41 - *a1) >> 4;
        v32 = v36 - v42;
        if (v36 > v42)
        {
          sub_23942D080((uint64_t)a1, v32);
LABEL_62:
          v58 = (char *)v88;
          v57 = v89;
          if (v89 != v88)
          {
            v59 = 0;
            v60 = 0;
            do
            {
              v61 = *(_QWORD *)&v58[16 * v59];
              if (v61)
              {
                v62 = *a1;
                v63 = *(_QWORD *)&v58[16 * v59 + 8];
                if (v63)
                {
                  v64 = (unint64_t *)(v63 + 8);
                  do
                    v65 = __ldxr(v64);
                  while (__stxr(v65 + 1, v64));
                }
                v66 = (_QWORD *)(v62 + 16 * v60);
                v67 = (std::__shared_weak_count *)v66[1];
                *v66 = v61;
                v66[1] = v63;
                if (v67)
                {
                  v68 = (unint64_t *)&v67->__shared_owners_;
                  do
                    v69 = __ldaxr(v68);
                  while (__stlxr(v69 - 1, v68));
                  if (!v69)
                  {
                    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                    std::__shared_weak_count::__release_weak(v67);
                  }
                }
                ++v60;
                v58 = (char *)v88;
                v57 = v89;
              }
              ++v59;
            }
            while (v59 < (v57 - v58) >> 4);
          }
          goto LABEL_75;
        }
LABEL_52:
        if (v42 > v36)
        {
          v53 = v40 + 16 * v36;
          while (v41 != v53)
          {
            v54 = *(std::__shared_weak_count **)(v41 - 8);
            if (v54)
            {
              v55 = (unint64_t *)&v54->__shared_owners_;
              do
                v56 = __ldaxr(v55);
              while (__stlxr(v56 - 1, v55));
              if (!v56)
              {
                ((void (*)(std::__shared_weak_count *, unint64_t))v54->__on_zero_shared)(v54, v32);
                std::__shared_weak_count::__release_weak(v54);
              }
            }
            v41 -= 16;
          }
          a1[1] = v53;
        }
        goto LABEL_62;
      }
    }
    else
    {
      v39 = 0;
      v36 = 0;
    }
    v50 = v38 - v39;
    v51 = (uint64_t *)((char *)__p + 16 * v39);
    do
    {
      v52 = *v51;
      v51 += 2;
      if (v52)
        ++v36;
      --v50;
    }
    while (v50);
    goto LABEL_50;
  }
LABEL_75:
  v70 = (char *)__p;
  if (__p)
  {
    v71 = v87;
    v72 = __p;
    if (v87 != __p)
    {
      do
      {
        v73 = (std::__shared_weak_count *)*((_QWORD *)v71 - 1);
        if (v73)
        {
          v74 = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v71 -= 16;
      }
      while (v71 != v70);
      v72 = __p;
    }
    v87 = v70;
    operator delete(v72);
  }
  v76 = (char *)v88;
  if (v88)
  {
    v77 = v89;
    v78 = v88;
    if (v89 != v88)
    {
      do
      {
        v79 = (std::__shared_weak_count *)*((_QWORD *)v77 - 1);
        if (v79)
        {
          v80 = (unint64_t *)&v79->__shared_owners_;
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v77 -= 16;
      }
      while (v77 != v76);
      v78 = v88;
    }
    v89 = v76;
    operator delete(v78);
  }
}

void sub_2399A6AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2394631DC((void **)va);
  sub_2394631DC((void **)va1);
  _Unwind_Resume(a1);
}

void sub_2399A6B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  std::__shared_weak_count *v17;
  void *v19;

  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  sub_2394631DC(&a14);
  sub_2394631DC(&a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_2399A6B9C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_2394189F8();
    v4 = 16 * a2;
    v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_2399A6C14(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC329C((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

void sub_2399A6C34(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  void *__p[2];
  char v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  if (!a3)
  {
    v7 = 0;
    v8 = *a1;
    if (a1[1] == *a1)
      goto LABEL_23;
    goto LABEL_6;
  }
  if (a3 >> 62)
    sub_2394189F8();
  v6 = 4 * a3;
  v7 = (char *)operator new(4 * a3);
  v28 = v7;
  v30 = &v7[4 * a3];
  bzero(v7, 4 * a3);
  v29 = &v7[v6];
  v8 = *a1;
  if (a1[1] != *a1)
  {
LABEL_6:
    v25 = a2;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v12 = 16 * v9;
      v13 = *(_QWORD *)(*(_QWORD *)(v8 + 16 * v9) + 40);
      v27 = 15;
      strcpy((char *)__p, "f:index_in_root");
      v31 = -1;
      v14 = sub_23998FA20((uint64_t **)(v13 + 56), (uint64_t)&v31, (unsigned __int8 *)__p);
      if (v27 < 0)
      {
        operator delete(__p[0]);
        v8 = *a1;
        v15 = *(_QWORD **)(*(_QWORD *)(*a1 + v12) + 40);
        if (v15[20] != v15[19])
        {
LABEL_12:
          v16 = 0;
          do
          {
            v17 = (uint64_t *)(v15[7] + 16 * v14);
            v19 = *v17;
            v18 = (std::__shared_weak_count *)v17[1];
            if (v18)
            {
              p_shared_owners = (unint64_t *)&v18->__shared_owners_;
              do
                v21 = __ldxr(p_shared_owners);
              while (__stxr(v21 + 1, p_shared_owners));
              do
                v22 = __ldaxr(p_shared_owners);
              while (__stlxr(v22 - 1, p_shared_owners));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            v7 = v28;
            *(_DWORD *)&v28[4 * *(unsigned int *)(*(_QWORD *)(v19 + 40) + 4 * v16)] = v10;
            v8 = *a1;
            ++v16;
            v15 = *(_QWORD **)(*(_QWORD *)(*a1 + v12) + 40);
          }
          while (v16 < (uint64_t)(v15[20] - v15[19]) >> 2);
        }
      }
      else
      {
        v8 = *a1;
        v15 = *(_QWORD **)(*(_QWORD *)(*a1 + v12) + 40);
        if (v15[20] != v15[19])
          goto LABEL_12;
      }
      v11 = a1[1];
      v9 = ++v10;
      if (v10 >= (unint64_t)((v11 - v8) >> 4))
      {
        if (v11 != v8)
        {
          v23 = 0;
          v24 = 0;
          do
          {
            sub_2399A8B88(*(_QWORD **)(v8 + 16 * v23), v24, &v28, v25);
            v8 = *a1;
            v23 = ++v24;
          }
          while (v24 < (unint64_t)((a1[1] - *a1) >> 4));
        }
        break;
      }
    }
  }
LABEL_23:
  if (v7)
  {
    v29 = v7;
    operator delete(v7);
  }
}

void sub_2399A6E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399A6ED0(_QWORD *a1, _QWORD *a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char *i;
  char *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  BOOL v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t *j;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  _OWORD *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  float **v102;
  float *v103;
  float **v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  __int128 *v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  NSObject *v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  __int32 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  __int32 *v134;
  void **v135;
  __int32 *v136;
  __int32 *v137;
  __int32 *v138;
  __int32 *v140;
  __int32 *v141;
  __int32 *v142;
  uint64_t v143;
  __int32 *v144;
  __int32 *v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  __int32 *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  _DWORD *v156;
  unint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t *v161;
  std::__shared_weak_count *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _OWORD *v175;
  __int32 *v176;
  uint64_t v177;
  __int128 v178;
  int v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  _OWORD *v185;
  char *v186;
  uint64_t v187;
  __int128 v188;
  int v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  _BYTE *v195;
  char *v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  _OWORD *v202;
  char *v203;
  uint64_t v204;
  __int128 v205;
  int v206;
  uint64_t *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  __int32 v217;
  __int32 *v218;
  __int32 *v219;
  __int32 *v220;
  __int32 *v221;
  _QWORD *v223;
  __int32 *v224;
  __int32 **v225;
  __int32 v226;
  char *v227;
  __int32 *v228;
  char *v229;
  char *v230;
  unint64_t v231;
  __int32 *v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  _BYTE *v238;
  __int32 *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _OWORD *v244;
  __int32 *v245;
  uint64_t v246;
  __int128 v247;
  __int32 v248;
  int v249;
  __int128 *p_context;
  uint64_t v251;
  __int32 *v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  void *v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  uint64_t *v260;
  float v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  __int128 v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  __int32 *v274;
  __int32 v275;
  __int32 *v276;
  __int32 *v277;
  __int32 *v278;
  unint64_t *v280;
  unint64_t v281;
  int v282;
  std::__shared_weak_count *v283;
  float v284;
  uint64_t sig;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  char *v293;
  char *v294;
  void *v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  uint64_t *v299;
  uint64_t *v300;
  void *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  char *v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  char *v309;
  char *v310;
  void *v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  unsigned int v320;
  uint64_t v322;
  std::__shared_weak_count *v323;
  __int32 __c[2];
  float32x4_t v325;
  unsigned int v326;
  unsigned int v327;
  char *__p;
  char *v329;
  char *v330;
  char *v331;
  char *v332;
  char *v333;
  void *v334;
  char *v335;
  uint64_t v336;
  __int128 v337;
  void *v338;
  uint64_t *v339;
  unint64_t v340;
  void *v341;
  char *v342;
  unint64_t v343;
  unsigned __int128 v344;
  __int128 v345;
  void *v346;
  uint64_t v347;
  unint64_t v348;
  void *v349;
  char *v350;
  char *v351;
  void *v352;
  char *v353;
  int v354;
  uint64_t v355;
  _QWORD *v356;
  unint64_t v357;
  char v358;
  unint64_t v359;
  char v360;
  unint64_t v361;
  __int128 context;
  __int128 *v363;
  void **v364;
  __int32 v365[6];
  __int32 *v366;
  std::mutex v367;
  std::mutex v368;
  uint64_t v369;

  v369 = *MEMORY[0x24BDAC8D0];
  v361 = a4;
  v360 = a8;
  v359 = 0;
  v356 = 0;
  v357 = 0;
  v355 = 0;
  v358 = 0;
  v354 = 0x7FFFFFFF;
  v10 = *a1;
  v9 = a1[1];
  v11 = v9 - *a1;
  v12 = v11 >> 4;
  if (a3 && v12 > a3)
    v354 = ((unint64_t)v11 >> 4) - a3;
  if (v9 != v10)
    sub_23942D080((uint64_t)&v355, v11 >> 4);
  v13 = *(_QWORD *)(a7 + 24);
  if (!v13 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13) & 1) == 0)
  {
    sub_239996A30(&v352, v11 >> 4);
    v349 = 0;
    v350 = 0;
    v351 = 0;
    if (v9 == v10)
    {
      v346 = 0;
      v347 = 0;
      v348 = 0;
    }
    else
    {
      if (v11 < 0)
        sub_2394189F8();
      v349 = operator new(v11);
      v351 = (char *)v349 + 16 * v12;
      bzero(v349, v11);
      v350 = (char *)v349 + v11;
      v14 = (v12 - 1) >> 6;
      v15 = operator new(8 * (v14 + 1));
      v16 = v15;
      v347 = v11 >> 4;
      v348 = v14 + 1;
      v346 = v15;
      if ((unint64_t)v11 >= 0x410)
        v17 = (v12 - 1) >> 6;
      else
        v17 = 0;
      v15[v17] = 0;
      if ((unint64_t)v11 >= 0x400)
        memset(v15, 255, 8 * (v12 >> 6));
      v18 = ((unint64_t)v11 >> 4) & 0x3F;
      if (v18)
        v16[v12 >> 6] |= 0xFFFFFFFFFFFFFFFFLL >> -(char)v18;
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = *a1 + 16 * v19;
        v22 = *(_QWORD *)v21;
        v23 = (float32x4_t *)v349;
        v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 40) + 160)
            - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 40) + 152);
        if (v24)
        {
          v25 = 0;
          v26 = v24 >> 2;
          if (v26 <= 1)
            v27 = 1;
          else
            v27 = v26;
          v28 = 0uLL;
          do
          {
            v325 = v28;
            sub_23995E494(*(_QWORD *)(v22 + 40), v25, (float32x4_t *)&v368);
            v28 = vaddq_f32(v325, *(float32x4_t *)&v368.__m_.__sig);
            ++v25;
          }
          while (v27 != v25);
        }
        else
        {
          v28 = 0uLL;
        }
        v29 = vmulq_f32(v28, v28);
        v29.i32[3] = 0;
        v29.i64[0] = vpaddq_f32(v29, v29).u64[0];
        v29.f32[0] = sqrtf(vaddv_f32(*(float32x2_t *)v29.f32));
        v23[v19] = vdivq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0));
        if (*(_QWORD *)(*(_QWORD *)v21 + 232) != *(_QWORD *)(*(_QWORD *)v21 + 240)
          && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 40) + 160) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 40)
                                                                                  + 152))
        {
          v30 = operator new(0x28uLL);
          v30[1] = 0;
          v30[2] = 0;
          *v30 = &off_250AF0F38;
          *((_DWORD *)v30 + 6) = 0;
          v30[4] = -1;
          v31 = (char *)v352 + 16 * v19;
          v32 = (std::__shared_weak_count *)v31[1];
          *v31 = v30 + 3;
          v31[1] = v30;
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v35 = *((_OWORD *)v352 + v19);
          v36 = *((_QWORD *)v352 + 2 * v19);
          *(float *)v36 = -(float)((float)((float)v20 / (float)v12)
                                 + (float)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 40)
                                                                                 + 160)
                                                                     - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v21 + 40)
                                                                                 + 152)) >> 2));
          *(_DWORD *)(v36 + 4) = v20;
          v345 = v35;
          if (*((_QWORD *)&v35 + 1))
          {
            v37 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          sub_239996AC8(&v355, &v345);
          v39 = (std::__shared_weak_count *)*((_QWORD *)&v345 + 1);
          if (*((_QWORD *)&v345 + 1))
          {
            v40 = (unint64_t *)(*((_QWORD *)&v345 + 1) + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 - 1, v40));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
        }
        v19 = ++v20;
      }
      while (v12 > v20);
    }
    v42 = *(_QWORD *)(a7 + 24);
    if (v42 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 48))(v42) & 1) != 0)
      goto LABEL_420;
    memset(v368.__m_.__opaque, 0, sizeof(v368.__m_.__opaque));
    v368.__m_.__sig = 850045863;
    if ((a9 & 1) != 0)
    {
      v341 = 0;
      v342 = 0;
      v343 = 0;
      v338 = 0;
      v339 = 0;
      v340 = 0;
      memset(v367.__m_.__opaque, 0, sizeof(v367.__m_.__opaque));
      v367.__m_.__sig = 850045863;
      if (v359)
      {
        while (1)
        {
          v43 = *(_QWORD *)(a7 + 24);
          if (v43)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 48))(v43) & 1) != 0)
              break;
          }
          v44 = std::thread::hardware_concurrency();
          if (v44 <= 2)
            v45 = 2;
          else
            v45 = v44;
          v47 = (char *)v341;
          for (i = v342; i != v47; i -= 16)
          {
            v48 = (std::__shared_weak_count *)*((_QWORD *)i - 1);
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
          }
          v342 = v47;
          v51 = (uint64_t *)v338;
          v52 = v339;
          if (v339 != v338)
          {
            do
            {
              v55 = (std::__shared_weak_count *)*(v52 - 1);
              if (v55)
              {
                v56 = (unint64_t *)&v55->__shared_owners_;
                do
                  v57 = __ldaxr(v56);
                while (__stlxr(v57 - 1, v56));
                if (!v57)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v52 -= 2;
            }
            while (v52 != v51);
            v339 = v51;
            v54 = a1;
            if (v45 <= (v342 - (_BYTE *)v341) >> 4)
              goto LABEL_108;
LABEL_72:
            while (2)
            {
              v51 = v339;
              if (v45 < ((char *)v339 - (_BYTE *)v338) >> 4 || v359 == 0)
                goto LABEL_108;
              sub_23998E248(&v355, 0, &context);
              v59 = *(unsigned int *)(context + 4);
              v60 = *(_QWORD *)(*v54 + 16 * v59);
              if (v60)
              {
                v62 = (char *)v341;
                v61 = v342;
                if (v341 != v342)
                {
                  while (2)
                  {
                    v63 = *(_QWORD *)(*v54 + 16 * *(unsigned int *)(*(_QWORD *)v62 + 4));
                    v64 = *(_DWORD **)(v63 + 232);
                    v65 = *(_DWORD **)(v63 + 240);
                    while (v64 != v65)
                    {
                      if (*v64 == (_DWORD)v59)
                        goto LABEL_93;
                      v67 = *(_DWORD **)(v60 + 232);
                      v66 = *(_DWORD **)(v60 + 240);
                      if (v67 != v66)
                      {
                        while (*v64 != *v67)
                        {
                          if (++v67 == v66)
                            goto LABEL_79;
                        }
LABEL_93:
                        v72 = v339;
                        if ((unint64_t)v339 >= v340)
                        {
                          v76 = (uint64_t *)sub_23951E0F0((uint64_t)&v338, &context);
                        }
                        else
                        {
                          *v339 = context;
                          v73 = *((_QWORD *)&context + 1);
                          v72[1] = *((_QWORD *)&context + 1);
                          if (v73)
                          {
                            v74 = (unint64_t *)(v73 + 8);
                            do
                              v75 = __ldxr(v74);
                            while (__stxr(v75 + 1, v74));
                          }
                          v76 = v72 + 2;
                        }
                        v339 = v76;
                        goto LABEL_100;
                      }
LABEL_79:
                      ++v64;
                    }
                    v62 += 16;
                    if (v62 != v342)
                      continue;
                    break;
                  }
                }
                if ((unint64_t)v342 >= v343)
                {
                  v342 = (char *)sub_23951E0F0((uint64_t)&v341, &context);
                  v71 = (std::__shared_weak_count *)*((_QWORD *)&context + 1);
                  if (!*((_QWORD *)&context + 1))
                    goto LABEL_71;
                }
                else
                {
                  *(_QWORD *)v342 = context;
                  v68 = *((_QWORD *)&context + 1);
                  *((_QWORD *)v61 + 1) = *((_QWORD *)&context + 1);
                  if (v68)
                  {
                    v69 = (unint64_t *)(v68 + 8);
                    do
                      v70 = __ldxr(v69);
                    while (__stxr(v70 + 1, v69));
                  }
                  v342 = v61 + 16;
                  v71 = (std::__shared_weak_count *)*((_QWORD *)&context + 1);
                  if (!*((_QWORD *)&context + 1))
                  {
LABEL_71:
                    if (v45 <= (v342 - (_BYTE *)v341) >> 4)
                    {
                      v51 = v339;
                      goto LABEL_108;
                    }
                    continue;
                  }
                }
              }
              else
              {
LABEL_100:
                v71 = (std::__shared_weak_count *)*((_QWORD *)&context + 1);
                if (!*((_QWORD *)&context + 1))
                  goto LABEL_71;
              }
              break;
            }
            v77 = (unint64_t *)&v71->__shared_owners_;
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
            goto LABEL_71;
          }
          v339 = (uint64_t *)v338;
          v53 = v45 > (v47 - (_BYTE *)v341) >> 4;
          v54 = a1;
          if (v53)
            goto LABEL_72;
LABEL_108:
          for (j = (uint64_t *)v338; j != v51; j += 2)
          {
            v80 = *j;
            v81 = j[1];
            *(_QWORD *)&v337 = *j;
            *((_QWORD *)&v337 + 1) = v81;
            if (v81)
            {
              v82 = (unint64_t *)(v81 + 8);
              do
                v83 = __ldxr(v82);
              while (__stxr(v83 + 1, v82));
            }
            if (v80)
            {
              v85 = v355;
              v84 = v356;
              v86 = v359;
              if (v359 >= ((uint64_t)v356 - v355) >> 4)
              {
                if ((unint64_t)v356 >= v357)
                {
                  v97 = sub_23951E0F0((uint64_t)&v355, &v337);
                }
                else
                {
                  *v356 = v80;
                  v94 = *((_QWORD *)&v337 + 1);
                  v84[1] = *((_QWORD *)&v337 + 1);
                  if (v94)
                  {
                    v95 = (unint64_t *)(v94 + 8);
                    do
                      v96 = __ldxr(v95);
                    while (__stxr(v96 + 1, v95));
                  }
                  v97 = v84 + 2;
                }
                v356 = v97;
              }
              else
              {
                v87 = *((_QWORD *)&v337 + 1);
                if (*((_QWORD *)&v337 + 1))
                {
                  v88 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
                  do
                    v89 = __ldxr(v88);
                  while (__stxr(v89 + 1, v88));
                }
                v90 = (_QWORD *)(v85 + 16 * v86);
                v91 = (std::__shared_weak_count *)v90[1];
                *v90 = v80;
                v90[1] = v87;
                if (v91)
                {
                  v92 = (unint64_t *)&v91->__shared_owners_;
                  do
                    v93 = __ldaxr(v92);
                  while (__stlxr(v93 - 1, v92));
                  if (!v93)
                  {
                    ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                    std::__shared_weak_count::__release_weak(v91);
                  }
                }
              }
              v98 = v359;
              *(_QWORD *)(v337 + 8) = v359;
              v359 = v98 + 1;
              if (v98)
              {
                v99 = v355;
                do
                {
                  v100 = v98 - 1;
                  v101 = (v98 - 1) >> 1;
                  v102 = (float **)(v99 + 16 * v98);
                  v103 = *v102;
                  v104 = (float **)(v99 + 16 * v101);
                  if (**v102 <= **v104)
                    break;
                  if (v98 != v101)
                  {
                    *v102 = *v104;
                    *v104 = v103;
                    v105 = v99 + 16 * v98;
                    v106 = v99 + 16 * v101;
                    v107 = *(_QWORD *)(v105 + 8);
                    *(_QWORD *)(v105 + 8) = *(_QWORD *)(v106 + 8);
                    *(_QWORD *)(v106 + 8) = v107;
                    v99 = v355;
                    *(_QWORD *)(*(_QWORD *)(v355 + 16 * v98) + 8) = v98;
                    *(_QWORD *)(*(_QWORD *)(v99 + 16 * v101) + 8) = v101;
                  }
                  v98 = (v98 - 1) >> 1;
                }
                while (v100 > 1);
              }
            }
            v108 = (std::__shared_weak_count *)*((_QWORD *)&v337 + 1);
            if (*((_QWORD *)&v337 + 1))
            {
              v109 = (unint64_t *)(*((_QWORD *)&v337 + 1) + 8);
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
          }
          v334 = 0;
          v335 = 0;
          v336 = 0;
          v111 = operator new(0x68uLL);
          *v111 = &off_250AF1168;
          v111[1] = v54;
          v112 = (__int128 *)(v111 + 1);
          v111[2] = a2;
          v111[3] = &v361;
          v111[4] = &v346;
          v111[5] = &v349;
          v111[6] = a5;
          v111[7] = a6;
          v111[8] = &v355;
          v111[9] = &v354;
          v111[10] = &v367;
          v111[11] = &v360;
          v111[12] = &v334;
          v366 = (__int32 *)v111;
          v113 = (__int128 *)operator new(0x68uLL);
          v114 = v112[3];
          *(__int128 *)((char *)v113 + 40) = v112[2];
          *(__int128 *)((char *)v113 + 56) = v114;
          v115 = v112[5];
          *(__int128 *)((char *)v113 + 72) = v112[4];
          *(__int128 *)((char *)v113 + 88) = v115;
          v116 = v112[1];
          *(__int128 *)((char *)v113 + 8) = *v112;
          *(_QWORD *)v113 = &off_250AF1168;
          *(__int128 *)((char *)v113 + 24) = v116;
          v363 = v113;
          v364 = &v341;
          v117 = dispatch_queue_create("com.gcd.task1", MEMORY[0x24BDAC9C0]);
          dispatch_apply_f((v342 - (_BYTE *)v341) >> 4, v117, &context, (void (__cdecl *)(void *, size_t))sub_2399AE288);
          dispatch_release(v117);
          v118 = 126 - 2 * __clz((v335 - (_BYTE *)v334) >> 3);
          if (v335 == v334)
            v119 = 0;
          else
            v119 = v118;
          sub_2399AE8C0((uint64_t)v334, v335, v119, 1);
          v120 = (char *)v334;
          if (v335 != v334)
          {
            v121 = 0;
            v320 = 0;
            do
            {
              v122 = &v120[8 * v121];
              v123 = *((_DWORD *)v122 + 1);
              *(_QWORD *)__c = *(unsigned int *)v122;
              v124 = *v54 + 16 * *(_QWORD *)__c;
              v331 = 0;
              v332 = 0;
              v333 = 0;
              __p = 0;
              v329 = 0;
              v330 = 0;
              v125 = *(_QWORD *)(*(_QWORD *)v124 + 232);
              if (*(_QWORD *)(*(_QWORD *)v124 + 240) == v125)
              {
                v212 = 0;
                goto LABEL_305;
              }
              v126 = 0;
              v127 = 0;
              v322 = *v54 + 16 * *(_QWORD *)__c;
              do
              {
                v128 = *(unsigned int *)(v125 + 4 * v126);
                v129 = (uint64_t *)(*v54 + 16 * v128);
                v130 = *v129;
                v131 = (std::__shared_weak_count *)v129[1];
                if (v131)
                {
                  v132 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v133 = __ldxr(v132);
                  while (__stxr(v133 + 1, v132));
                }
                if (!v130)
                {
                  v146 = (char *)v334;
                  if (v334 == v335)
                    goto LABEL_216;
                  while (*((_DWORD *)v146 + 1) != (_DWORD)v128)
                  {
                    v146 += 8;
                    if (v146 == v335)
                      goto LABEL_216;
                  }
                  v158 = v332;
                  v327 = v127;
                  if (v332 < v333)
                  {
                    *(_DWORD *)v332 = v128;
                    v332 += 4;
                    v160 = v329;
                    v159 = v330;
                    if (v329 < v330)
                      goto LABEL_192;
LABEL_231:
                    v190 = __p;
                    v191 = (v160 - __p) >> 2;
                    v192 = v191 + 1;
                    if ((unint64_t)(v191 + 1) >> 62)
LABEL_441:
                      sub_2394189F8();
                    v193 = v159 - __p;
                    if (v193 >> 1 > v192)
                      v192 = v193 >> 1;
                    if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
                      v194 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v194 = v192;
                    if (v194)
                    {
                      if (v194 >> 62)
LABEL_439:
                        sub_239418A80();
                      v195 = operator new(4 * v194);
                      v196 = &v195[4 * v191];
                      *(_DWORD *)v196 = *(_DWORD *)v146;
                      v197 = (uint64_t)(v196 + 4);
                      if (v160 != __p)
                      {
LABEL_240:
                        v198 = v160 - 4 - __p;
                        if (v198 < 0x2C)
                        {
                          v54 = a1;
                          goto LABEL_248;
                        }
                        v54 = a1;
                        if ((unint64_t)(__p - v195) < 0x20)
                          goto LABEL_445;
                        v199 = (v198 >> 2) + 1;
                        v200 = 4 * (v199 & 0x7FFFFFFFFFFFFFF8);
                        v201 = &v160[-v200];
                        v196 -= v200;
                        v202 = &v195[4 * v191 - 16];
                        v203 = v160 - 16;
                        v204 = v199 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v205 = *(_OWORD *)v203;
                          *(v202 - 1) = *((_OWORD *)v203 - 1);
                          *v202 = v205;
                          v202 -= 2;
                          v203 -= 32;
                          v204 -= 8;
                        }
                        while (v204);
                        v160 = v201;
                        if (v199 != (v199 & 0x7FFFFFFFFFFFFFF8))
                        {
LABEL_445:
                          do
                          {
LABEL_248:
                            v206 = *((_DWORD *)v160 - 1);
                            v160 -= 4;
                            *((_DWORD *)v196 - 1) = v206;
                            v196 -= 4;
                          }
                          while (v160 != __p);
                        }
LABEL_249:
                        __p = v196;
                        v330 = &v195[4 * v194];
                        if (v190)
                          operator delete(v190);
                        v127 = v327;
                        v329 = (char *)v197;
                        v207 = (uint64_t *)(*v54 + 16 * *(unsigned int *)v146);
                        v130 = *v207;
                        v162 = (std::__shared_weak_count *)v207[1];
                        if (v162)
                        {
LABEL_252:
                          v208 = (unint64_t *)&v162->__shared_owners_;
                          do
                            v209 = __ldxr(v208);
                          while (__stxr(v209 + 1, v208));
                        }
                        if (!v131)
                          goto LABEL_258;
LABEL_254:
                        v210 = (unint64_t *)&v131->__shared_owners_;
                        do
                          v211 = __ldaxr(v210);
                        while (__stlxr(v211 - 1, v210));
                        if (!v211)
                        {
                          ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                          std::__shared_weak_count::__release_weak(v131);
                          v131 = v162;
                          if (!v130)
                            goto LABEL_216;
                        }
                        else
                        {
LABEL_258:
                          v131 = v162;
                          if (!v130)
                            goto LABEL_216;
                        }
                        goto LABEL_155;
                      }
                    }
                    else
                    {
                      v195 = 0;
                      v196 = (char *)(4 * v191);
                      *(_DWORD *)(4 * v191) = *(_DWORD *)v146;
                      v197 = 4 * v191 + 4;
                      if (v160 != __p)
                        goto LABEL_240;
                    }
                    v54 = a1;
                    goto LABEL_249;
                  }
                  v163 = v331;
                  v164 = (v332 - v331) >> 2;
                  v165 = v164 + 1;
                  if ((unint64_t)(v164 + 1) >> 62)
                    goto LABEL_441;
                  v166 = v333 - v331;
                  if ((v333 - v331) >> 1 > v165)
                    v165 = v166 >> 1;
                  if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
                    v167 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v167 = v165;
                  if (v167)
                  {
                    if (v167 >> 62)
                      goto LABEL_439;
                    v168 = operator new(4 * v167);
                    v169 = &v168[4 * v164];
                    *(_DWORD *)v169 = *((_DWORD *)v146 + 1);
                    v170 = (uint64_t)(v169 + 4);
                    if (v332 != v331)
                    {
LABEL_203:
                      v171 = v332 - 4 - v331;
                      if (v171 < 0x2C)
                      {
                        v54 = a1;
                        goto LABEL_227;
                      }
                      v54 = a1;
                      if ((unint64_t)(v331 - v168) < 0x20)
                        goto LABEL_446;
                      v182 = (v171 >> 2) + 1;
                      v183 = 4 * (v182 & 0x7FFFFFFFFFFFFFF8);
                      v184 = &v332[-v183];
                      v169 -= v183;
                      v185 = &v168[4 * v164 - 16];
                      v186 = v332 - 16;
                      v187 = v182 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v188 = *(_OWORD *)v186;
                        *(v185 - 1) = *((_OWORD *)v186 - 1);
                        *v185 = v188;
                        v185 -= 2;
                        v186 -= 32;
                        v187 -= 8;
                      }
                      while (v187);
                      v158 = v184;
                      if (v182 != (v182 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_446:
                        do
                        {
LABEL_227:
                          v189 = *((_DWORD *)v158 - 1);
                          v158 -= 4;
                          *((_DWORD *)v169 - 1) = v189;
                          v169 -= 4;
                        }
                        while (v158 != v331);
                      }
LABEL_228:
                      v331 = v169;
                      v333 = &v168[4 * v167];
                      if (v163)
                        operator delete(v163);
                      v127 = v327;
                      v332 = (char *)v170;
                      v160 = v329;
                      v159 = v330;
                      if (v329 >= v330)
                        goto LABEL_231;
LABEL_192:
                      *(_DWORD *)v160 = *(_DWORD *)v146;
                      v329 = v160 + 4;
                      v161 = (uint64_t *)(*v54 + 16 * *(unsigned int *)v146);
                      v130 = *v161;
                      v162 = (std::__shared_weak_count *)v161[1];
                      if (v162)
                        goto LABEL_252;
                      goto LABEL_254;
                    }
                  }
                  else
                  {
                    v168 = 0;
                    v169 = (char *)(4 * v164);
                    *(_DWORD *)(4 * v164) = v128;
                    v170 = 4 * v164 + 4;
                    if (v332 != v331)
                      goto LABEL_203;
                  }
                  v54 = a1;
                  goto LABEL_228;
                }
LABEL_155:
                v134 = *(__int32 **)(v130 + 240);
                v135 = (void **)(v130 + 232);
                v136 = wmemchr(*(__int32 **)(v130 + 232), v123, ((uint64_t)v134 - *(_QWORD *)(v130 + 232)) >> 2);
                if (v136)
                  v137 = v136;
                else
                  v137 = v134;
                v138 = v137 + 1;
                if (v137 != v134 && v138 != v134)
                {
                  do
                  {
                    if (*v138 != v123)
                      *v137++ = *v138;
                    ++v138;
                  }
                  while (v138 != v134);
                }
                v326 = v127;
                v140 = *(__int32 **)(v130 + 232);
                if (v137 != *(__int32 **)(v130 + 240))
                  *(_QWORD *)(v130 + 240) = v137;
                v141 = wmemchr(v140, __c[0], v137 - v140);
                if (v141)
                  v142 = v141;
                else
                  v142 = v137;
                v143 = (char *)v142 - (char *)v140;
                v144 = v142;
                v145 = *(__int32 **)(v130 + 240);
                if (v142 == v145)
                {
                  v147 = *(_QWORD *)(v130 + 248);
                  v323 = v131;
                  if ((unint64_t)v144 < v147)
                  {
                    *v144 = __c[0];
                    v148 = (uint64_t)(v144 + 1);
LABEL_215:
                    v127 = v326;
                    *(_QWORD *)(v130 + 240) = v148;
                    v131 = v323;
                    goto LABEL_216;
                  }
                  v149 = (__int32 *)*v135;
                  v150 = (char *)v145 - (_BYTE *)*v135;
                  v151 = v150 >> 2;
                  v152 = (v150 >> 2) + 1;
                  if (v152 >> 62)
                    sub_2394189F8();
                  v153 = v147 - (_QWORD)v149;
                  if (v153 >> 1 > v152)
                    v152 = v153 >> 1;
                  if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
                    v154 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v154 = v152;
                  if (v154)
                  {
                    if (v154 >> 62)
                      sub_239418A80();
                    v155 = operator new(4 * v154);
                    v156 = &v155[4 * v151];
                    *v156 = __c[0];
                    v148 = (uint64_t)(v156 + 1);
                    if (v144 != v149)
                    {
LABEL_188:
                      v157 = (char *)v140 + v143 - 4 - (char *)v149;
                      if (v157 < 0x3C)
                      {
                        v124 = v322;
                        goto LABEL_211;
                      }
                      v172 = (char *)v140 + v143 - &v155[v150];
                      v124 = v322;
                      if (v172 < 0x20)
                        goto LABEL_447;
                      v173 = (v157 >> 2) + 1;
                      v174 = 4 * (v173 & 0x7FFFFFFFFFFFFFF8);
                      v144 = (__int32 *)((char *)v144 - v174);
                      v156 = (_DWORD *)((char *)v156 - v174);
                      v175 = &v155[4 * v151 - 16];
                      v176 = &v140[(v143 >> 2) - 4];
                      v177 = v173 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v178 = *(_OWORD *)v176;
                        *(v175 - 1) = *((_OWORD *)v176 - 1);
                        *v175 = v178;
                        v175 -= 2;
                        v176 -= 8;
                        v177 -= 8;
                      }
                      while (v177);
                      if (v173 != (v173 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_447:
                        do
                        {
LABEL_211:
                          v179 = *--v144;
                          *--v156 = v179;
                        }
                        while (v144 != v149);
                      }
LABEL_212:
                      *(_QWORD *)(v130 + 232) = v156;
                      *(_QWORD *)(v130 + 240) = v148;
                      *(_QWORD *)(v130 + 248) = &v155[4 * v154];
                      if (v149)
                        operator delete(v149);
                      v54 = a1;
                      goto LABEL_215;
                    }
                  }
                  else
                  {
                    v155 = 0;
                    v156 = (_DWORD *)(4 * v151);
                    *(_DWORD *)(4 * v151) = __c[0];
                    v148 = 4 * v151 + 4;
                    if (v144 != v149)
                      goto LABEL_188;
                  }
                  v124 = v322;
                  goto LABEL_212;
                }
                v127 = v326;
LABEL_216:
                if (v131)
                {
                  v180 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v181 = __ldaxr(v180);
                  while (__stlxr(v181 - 1, v180));
                  if (!v181)
                  {
                    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                    std::__shared_weak_count::__release_weak(v131);
                  }
                }
                v125 = *(_QWORD *)(*(_QWORD *)v124 + 232);
                v126 = ++v127;
              }
              while (v127 < (unint64_t)((*(_QWORD *)(*(_QWORD *)v124 + 240) - v125) >> 2));
              v212 = v332;
              if (v332 != v331)
              {
                v213 = 0;
                v214 = 0;
                v212 = v331;
                while (2)
                {
                  v216 = *(_QWORD *)v124;
                  v217 = *(_DWORD *)&v212[4 * v213];
                  v218 = *(__int32 **)(*(_QWORD *)v124 + 240);
                  v219 = wmemchr(*(__int32 **)(*(_QWORD *)v124 + 232), v217, ((uint64_t)v218 - *(_QWORD *)(*(_QWORD *)v124 + 232)) >> 2);
                  if (v219)
                    v220 = v219;
                  else
                    v220 = v218;
                  v221 = v220 + 1;
                  if (v220 != v218 && v221 != v218)
                  {
                    do
                    {
                      if (*v221 != v217)
                        *v220++ = *v221;
                      ++v221;
                    }
                    while (v221 != v218);
                  }
                  if (v220 != *(__int32 **)(v216 + 240))
                    *(_QWORD *)(v216 + 240) = v220;
                  v223 = *(_QWORD **)v124;
                  v225 = (__int32 **)(*(_QWORD *)v124 + 232);
                  v224 = *v225;
                  v226 = *(_DWORD *)&__p[4 * v213];
                  v227 = *(char **)(*(_QWORD *)v124 + 240);
                  v228 = wmemchr(*v225, v226, (v227 - (char *)*v225) >> 2);
                  if (v228)
                    v229 = (char *)v228;
                  else
                    v229 = v227;
                  v230 = (char *)v223[30];
                  if (v229 != v230)
                    goto LABEL_266;
                  v231 = v223[31];
                  if ((unint64_t)v229 >= v231)
                  {
                    v232 = *v225;
                    v233 = v230 - (char *)*v225;
                    v234 = v233 >> 2;
                    v235 = (v233 >> 2) + 1;
                    if (v235 >> 62)
                      sub_2394189F8();
                    v236 = v231 - (_QWORD)v232;
                    if (v236 >> 1 > v235)
                      v235 = v236 >> 1;
                    if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL)
                      v237 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v237 = v235;
                    if (v237)
                    {
                      if (v237 >> 62)
                        sub_239418A80();
                      v238 = operator new(4 * v237);
                      v239 = (__int32 *)&v238[4 * v234];
                      *v239 = v226;
                      v215 = (uint64_t)(v239 + 1);
                      if (v229 == (char *)v232)
                      {
LABEL_302:
                        v223[29] = v239;
                        v223[30] = v215;
                        v223[31] = &v238[4 * v237];
                        if (v232)
                          operator delete(v232);
LABEL_265:
                        v223[30] = v215;
                        v124 = v322;
LABEL_266:
                        v212 = v331;
                        v213 = ++v214;
                        if (v214 >= (unint64_t)((v332 - v331) >> 2))
                          goto LABEL_305;
                        continue;
                      }
                    }
                    else
                    {
                      v238 = 0;
                      v239 = (__int32 *)(4 * v234);
                      *(_DWORD *)(4 * v234) = v226;
                      v215 = 4 * v234 + 4;
                      if (v229 == (char *)v232)
                        goto LABEL_302;
                    }
                    v240 = v229 - 4 - (char *)v232;
                    if (v240 < 0x3C)
                      goto LABEL_448;
                    if ((unint64_t)(v229 - &v238[v233]) < 0x20)
                      goto LABEL_448;
                    v241 = (v229 - (char *)v224) >> 2;
                    v242 = (v240 >> 2) + 1;
                    v243 = 4 * (v242 & 0x7FFFFFFFFFFFFFF8);
                    v229 -= v243;
                    v239 = (__int32 *)((char *)v239 - v243);
                    v244 = &v238[4 * v234 - 16];
                    v245 = &v224[v241 - 4];
                    v246 = v242 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v247 = *(_OWORD *)v245;
                      *(v244 - 1) = *((_OWORD *)v245 - 1);
                      *v244 = v247;
                      v244 -= 2;
                      v245 -= 8;
                      v246 -= 8;
                    }
                    while (v246);
                    if (v242 != (v242 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_448:
                      do
                      {
                        v248 = *((_DWORD *)v229 - 1);
                        v229 -= 4;
                        *--v239 = v248;
                      }
                      while (v229 != (char *)v232);
                    }
                    goto LABEL_302;
                  }
                  break;
                }
                *(_DWORD *)v229 = v226;
                v215 = (uint64_t)(v229 + 4);
                goto LABEL_265;
              }
LABEL_305:
              if (__p)
              {
                operator delete(__p);
                v212 = v331;
              }
              v54 = a1;
              if (v212)
                operator delete(v212);
              v120 = (char *)v334;
              v121 = ++v320;
            }
            while (v320 < (unint64_t)((v335 - (_BYTE *)v334) >> 3));
          }
          v249 = v354;
          p_context = v363;
          if (v363 == &context)
          {
            p_context = &context;
            v251 = 4;
          }
          else
          {
            if (!v363)
              goto LABEL_314;
            v251 = 5;
          }
          (*(void (**)(void))(*(_QWORD *)p_context + 8 * v251))();
LABEL_314:
          v252 = v366;
          if (v366 == v365)
          {
            v252 = v365;
            v253 = 4;
            goto LABEL_318;
          }
          if (v366)
          {
            v253 = 5;
LABEL_318:
            (*(void (**)(void))(*(_QWORD *)v252 + 8 * v253))();
          }
          if (v334)
          {
            v335 = (char *)v334;
            operator delete(v334);
          }
          if (v249 < 1 || !v359)
            goto LABEL_323;
        }
        std::mutex::~mutex(&v367);
        v299 = (uint64_t *)v338;
        if (v338)
        {
          v300 = v339;
          v301 = v338;
          if (v339 != v338)
          {
            do
            {
              v302 = (std::__shared_weak_count *)*(v300 - 1);
              if (v302)
              {
                v303 = (unint64_t *)&v302->__shared_owners_;
                do
                  v304 = __ldaxr(v303);
                while (__stlxr(v304 - 1, v303));
                if (!v304)
                {
                  ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
                  std::__shared_weak_count::__release_weak(v302);
                }
              }
              v300 -= 2;
            }
            while (v300 != v299);
            v301 = v338;
          }
          v339 = v299;
          operator delete(v301);
        }
        v293 = (char *)v341;
        if (!v341)
          goto LABEL_419;
        v305 = v342;
        v295 = v341;
        if (v342 == v341)
          goto LABEL_418;
        do
        {
          v306 = (std::__shared_weak_count *)*((_QWORD *)v305 - 1);
          if (v306)
          {
            v307 = (unint64_t *)&v306->__shared_owners_;
            do
              v308 = __ldaxr(v307);
            while (__stlxr(v308 - 1, v307));
            if (!v308)
            {
              ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
              std::__shared_weak_count::__release_weak(v306);
            }
          }
          v305 -= 16;
        }
        while (v305 != v293);
      }
      else
      {
LABEL_323:
        std::mutex::~mutex(&v367);
        v254 = (uint64_t *)v338;
        if (v338)
        {
          v255 = v339;
          v256 = v338;
          if (v339 != v338)
          {
            do
            {
              v257 = (std::__shared_weak_count *)*(v255 - 1);
              if (v257)
              {
                v258 = (unint64_t *)&v257->__shared_owners_;
                do
                  v259 = __ldaxr(v258);
                while (__stlxr(v259 - 1, v258));
                if (!v259)
                {
                  ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
                  std::__shared_weak_count::__release_weak(v257);
                }
              }
              v255 -= 2;
            }
            while (v255 != v254);
            v256 = v338;
          }
          v339 = v254;
          operator delete(v256);
        }
        v293 = (char *)v341;
        if (!v341)
          goto LABEL_419;
        v294 = v342;
        v295 = v341;
        if (v342 == v341)
          goto LABEL_418;
        do
        {
          v296 = (std::__shared_weak_count *)*((_QWORD *)v294 - 1);
          if (v296)
          {
            v297 = (unint64_t *)&v296->__shared_owners_;
            do
              v298 = __ldaxr(v297);
            while (__stlxr(v298 - 1, v297));
            if (!v298)
            {
              ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
              std::__shared_weak_count::__release_weak(v296);
            }
          }
          v294 -= 16;
        }
        while (v294 != v293);
      }
      v295 = v341;
LABEL_418:
      v342 = v293;
      operator delete(v295);
      goto LABEL_419;
    }
    v260 = a1;
    if (!v359)
    {
LABEL_419:
      std::mutex::~mutex(&v368);
LABEL_420:
      if (v346)
        operator delete(v346);
      if (v349)
      {
        v350 = (char *)v349;
        operator delete(v349);
      }
      v309 = (char *)v352;
      if (v352)
      {
        v310 = v353;
        v311 = v352;
        if (v353 != v352)
        {
          do
          {
            v312 = (std::__shared_weak_count *)*((_QWORD *)v310 - 1);
            if (v312)
            {
              v313 = (unint64_t *)&v312->__shared_owners_;
              do
                v314 = __ldaxr(v313);
              while (__stlxr(v314 - 1, v313));
              if (!v314)
              {
                ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
                std::__shared_weak_count::__release_weak(v312);
              }
            }
            v310 -= 16;
          }
          while (v310 != v309);
          v311 = v352;
        }
        v353 = v309;
        operator delete(v311);
      }
      return sub_23999C398((uint64_t)&v355);
    }
    v261 = (float)v12;
    while (1)
    {
      v262 = *(_QWORD *)(a7 + 24);
      if (v262 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v262 + 48))(v262) & 1) != 0)
        goto LABEL_419;
      sub_23998E248(&v355, 0, &v367);
      v263 = *(unsigned int *)(v367.__m_.__sig + 4);
      if (!*(_QWORD *)(*v260 + 16 * v263))
      {
        v282 = 5;
        v283 = *(std::__shared_weak_count **)v367.__m_.__opaque;
        if (*(_QWORD *)v367.__m_.__opaque)
          goto LABEL_379;
        goto LABEL_383;
      }
      LOBYTE(v341) = 0;
      v365[0] = 0;
      sub_2399A9450(v260, a2, v263, v361, &v346, (uint64_t *)&v349, &v341, v365, &v368, a5, a6, v360);
      if (!(_BYTE)v341)
        break;
      v264 = *v260 + 16 * v263;
      v265 = *(_QWORD *)v264;
      v266 = *(_QWORD *)(*(_QWORD *)v264 + 232);
      if (*(_QWORD *)(*(_QWORD *)v264 + 240) != v266)
      {
        v267 = 0;
        v268 = 0;
        do
        {
          v269 = *(_OWORD *)(*a1 + 16 * *(unsigned int *)(v266 + 4 * v267));
          context = v269;
          v270 = (std::__shared_weak_count *)*((_QWORD *)&v269 + 1);
          if (*((_QWORD *)&v269 + 1))
          {
            v271 = (unint64_t *)(*((_QWORD *)&v269 + 1) + 8);
            do
              v272 = __ldxr(v271);
            while (__stxr(v272 + 1, v271));
          }
          v273 = v269;
          if ((_QWORD)v269)
          {
            v274 = *(__int32 **)(v269 + 240);
            v275 = v365[0];
            v276 = wmemchr(*(__int32 **)(v269 + 232), v365[0], ((uint64_t)v274 - *(_QWORD *)(v269 + 232)) >> 2);
            if (v276)
              v277 = v276;
            else
              v277 = v274;
            v278 = v277 + 1;
            if (v277 != v274 && v278 != v274)
            {
              do
              {
                if (*v278 != v275)
                  *v277++ = *v278;
                ++v278;
              }
              while (v278 != v274);
            }
            if (v277 != *(__int32 **)(v273 + 240))
              *(_QWORD *)(v273 + 240) = v277;
            sub_2399A92AC(v273 + 232, v263);
          }
          if (v270)
          {
            v280 = (unint64_t *)&v270->__shared_owners_;
            do
              v281 = __ldaxr(v280);
            while (__stlxr(v281 - 1, v280));
            if (!v281)
            {
              ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
              std::__shared_weak_count::__release_weak(v270);
            }
          }
          v266 = *(_QWORD *)(*(_QWORD *)v264 + 232);
          v267 = ++v268;
        }
        while (v268 < (unint64_t)((*(_QWORD *)(*(_QWORD *)v264 + 240) - v266) >> 2));
        v260 = a1;
        v265 = *(_QWORD *)(*a1 + 16 * v263);
      }
      v284 = -(float)((float)((float)v263 / v261)
                    + (float)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(v265 + 40) + 160)
                                                        - *(_QWORD *)(*(_QWORD *)(v265 + 40) + 152)) >> 2));
      sig = v367.__m_.__sig;
      *(float *)v367.__m_.__sig = v284;
      v344 = __PAIR128__(*(unint64_t *)v367.__m_.__opaque, sig);
      if (*(_QWORD *)v367.__m_.__opaque)
      {
        v286 = (unint64_t *)(*(_QWORD *)v367.__m_.__opaque + 8);
        do
          v287 = __ldxr(v286);
        while (__stxr(v287 + 1, v286));
      }
      sub_239996AC8(&v355, (__int128 *)&v344);
      v288 = (std::__shared_weak_count *)*((_QWORD *)&v344 + 1);
      if (!*((_QWORD *)&v344 + 1))
        goto LABEL_374;
      v289 = (unint64_t *)(*((_QWORD *)&v344 + 1) + 8);
      do
        v290 = __ldaxr(v289);
      while (__stlxr(v290 - 1, v289));
      if (!v290)
      {
        ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
        std::__shared_weak_count::__release_weak(v288);
        if (--v354)
          break;
      }
      else
      {
LABEL_374:
        if (--v354)
          break;
      }
      v282 = 6;
      v283 = *(std::__shared_weak_count **)v367.__m_.__opaque;
      if (*(_QWORD *)v367.__m_.__opaque)
      {
LABEL_379:
        v291 = (unint64_t *)&v283->__shared_owners_;
        do
          v292 = __ldaxr(v291);
        while (__stlxr(v292 - 1, v291));
        if (!v292)
        {
          ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
          std::__shared_weak_count::__release_weak(v283);
        }
      }
LABEL_383:
      if (v282 == 6 || !v359)
        goto LABEL_419;
    }
    v282 = 0;
    v283 = *(std::__shared_weak_count **)v367.__m_.__opaque;
    if (*(_QWORD *)v367.__m_.__opaque)
      goto LABEL_379;
    goto LABEL_383;
  }
  return sub_23999C398((uint64_t)&v355);
}

void sub_2399A87D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  if (a51)
    JUMPOUT(0x2399A8B00);
  JUMPOUT(0x2399A8AE8);
}

void sub_2399A8870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  char *v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;

  sub_239416DA0((uint64_t)&a65);
  std::mutex::~mutex((std::mutex *)(v65 - 256));
  if (a37)
  {
    v67 = v78;
    v68 = a37;
    if (v78 != a37)
    {
      do
      {
        v69 = (std::__shared_weak_count *)*((_QWORD *)v67 - 1);
        if (v69)
        {
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(p_shared_owners);
          while (__stlxr(v71 - 1, p_shared_owners));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v67 -= 16;
      }
      while (v67 != a37);
      v68 = v77;
    }
    operator delete(v68);
    v66 = v79;
    if (!v79)
    {
LABEL_24:
      std::mutex::~mutex((std::mutex *)(v65 - 192));
      JUMPOUT(0x2399A8AD8);
    }
  }
  else
  {
    v66 = v79;
    if (!v79)
      goto LABEL_24;
  }
  v72 = v80;
  v73 = v66;
  if (v80 != v66)
  {
    do
    {
      v74 = (std::__shared_weak_count *)*((_QWORD *)v72 - 1);
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v72 -= 16;
    }
    while (v72 != v66);
    v73 = v79;
  }
  operator delete(v73);
  goto LABEL_24;
}

void sub_2399A8890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  sub_239416DA0((uint64_t)&a65);
  sub_239416DA0(v65 - 256);
  JUMPOUT(0x2399A8AC8);
}

void sub_2399A8B88(_QWORD *a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  __int32 v26;
  __int32 *v27;
  __int32 *v28;
  __int32 *v29;
  __int32 *v30;
  __int32 *v31;
  unint64_t v32;
  uint64_t v33;
  __int32 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  __int32 *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int32 *v49;
  uint64_t v50;
  __int128 v51;
  __int32 v52;
  unsigned int *v53;
  uint64_t v54;
  __int32 v55;
  __int32 *v56;
  __int32 *v57;
  __int32 *v58;
  __int32 *v59;
  __int32 *v60;
  unint64_t v61;
  uint64_t v62;
  __int32 *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  __int32 *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int32 *v78;
  uint64_t v79;
  __int128 v80;
  __int32 v81;
  unsigned int *v82;
  uint64_t v83;
  __int32 v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  char *v88;
  char *v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  __int32 *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _OWORD *v105;
  __int32 *v106;
  uint64_t v107;
  __int128 v108;
  __int32 v109;
  int v110;
  _QWORD *v111;
  uint64_t v112;
  void **v113;
  unint64_t v114;
  uint64_t v115;
  void *__p[2];
  char *v117;
  int v118;

  a1[30] = a1[29];
  v113 = (void **)(a1 + 29);
  v8 = a1[5];
  HIBYTE(v117) = 15;
  strcpy((char *)__p, "f:index_in_root");
  v118 = -1;
  v9 = sub_23998FA20((uint64_t **)(v8 + 56), (uint64_t)&v118, (unsigned __int8 *)__p);
  if (SHIBYTE(v117) < 0)
    operator delete(__p[0]);
  v10 = (uint64_t *)(*(_QWORD *)(a1[5] + 56) + 16 * v9);
  v11 = (std::__shared_weak_count *)v10[1];
  v115 = *v10;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v15 = a1[5];
  v17 = *(_QWORD *)(v15 + 152);
  v16 = *(_QWORD *)(v15 + 160);
  v18 = operator new(0xCuLL);
  __p[1] = v18 + 3;
  v117 = (char *)(v18 + 3);
  *(_QWORD *)v18 = -1;
  v18[2] = -1;
  __p[0] = v18;
  v19 = v16 - v17;
  if (v16 == v17)
  {
LABEL_105:
    __p[1] = v18;
    operator delete(v18);
    return;
  }
  v20 = 0;
  v21 = v19 >> 2;
  v22 = a4 + 104;
  if (v21 <= 1)
    v21 = 1;
  v114 = v21;
  v111 = a3;
  v112 = a4;
  v110 = a2;
  do
  {
    sub_23996389C(a4, (unsigned int *)(*(_QWORD *)(v115 + 40) + 4 * v20), (uint64_t)__p);
    v24 = (unsigned int *)sub_239962518(v22, (unsigned int *)__p[0]);
    v25 = *(unsigned int *)(sub_239962518(v22, v24) + 16);
    if ((_DWORD)v25 != -1)
    {
      v26 = *(_DWORD *)(*a3 + 4 * v25);
      if (v26 != a2)
      {
        v28 = (__int32 *)a1[29];
        v27 = (__int32 *)a1[30];
        v29 = wmemchr(v28, v26, v27 - v28);
        v30 = v29 ? v29 : v27;
        v31 = (__int32 *)a1[30];
        if (v30 == v31)
        {
          v32 = a1[31];
          if ((unint64_t)v30 < v32)
          {
            *v30 = v26;
            v33 = (uint64_t)(v30 + 1);
LABEL_45:
            a1[30] = v33;
            goto LABEL_46;
          }
          v34 = (__int32 *)*v113;
          v35 = (char *)v31 - (_BYTE *)*v113;
          v36 = v35 >> 2;
          v37 = (v35 >> 2) + 1;
          if (v37 >> 62)
            goto LABEL_107;
          v38 = v32 - (_QWORD)v34;
          if (v38 >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            if (v39 >> 62)
              goto LABEL_108;
            v40 = v39;
            v41 = operator new(4 * v39);
            v39 = v40;
            v42 = (__int32 *)&v41[4 * v36];
            *v42 = v26;
            v33 = (uint64_t)(v42 + 1);
            if (v30 != v34)
              goto LABEL_33;
          }
          else
          {
            v41 = 0;
            v42 = (__int32 *)(4 * v36);
            *(_DWORD *)(4 * v36) = v26;
            v33 = 4 * v36 + 4;
            if (v30 != v34)
            {
LABEL_33:
              v43 = (char *)(v30 - 1) - (char *)v34;
              if (v43 >= 0x3C)
              {
                v44 = (char *)v30 - &v41[v35];
                a4 = v112;
                if (v44 >= 0x20)
                {
                  v45 = v30 - v28;
                  v46 = (v43 >> 2) + 1;
                  v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
                  v30 = (__int32 *)((char *)v30 - v47);
                  v42 = (__int32 *)((char *)v42 - v47);
                  v48 = &v41[4 * v36 - 16];
                  v49 = &v28[v45 - 4];
                  v50 = v46 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v51 = *(_OWORD *)v49;
                    *(v48 - 1) = *((_OWORD *)v49 - 1);
                    *v48 = v51;
                    v48 -= 2;
                    v49 -= 8;
                    v50 -= 8;
                  }
                  while (v50);
                  if (v46 == (v46 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_42;
                }
              }
              else
              {
                a4 = v112;
              }
              do
              {
                v52 = *--v30;
                *--v42 = v52;
              }
              while (v30 != v34);
LABEL_42:
              a1[29] = v42;
              a1[30] = v33;
              a1[31] = &v41[4 * v39];
              if (v34)
                operator delete(v34);
              a3 = v111;
              a2 = v110;
              goto LABEL_45;
            }
          }
          a4 = v112;
          goto LABEL_42;
        }
      }
    }
LABEL_46:
    v53 = (unsigned int *)sub_239962518(v22, (unsigned int *)__p[0] + 1);
    v54 = *(unsigned int *)(sub_239962518(v22, v53) + 16);
    if ((_DWORD)v54 != -1)
    {
      v55 = *(_DWORD *)(*a3 + 4 * v54);
      if (v55 != a2)
      {
        v57 = (__int32 *)a1[29];
        v56 = (__int32 *)a1[30];
        v58 = wmemchr(v57, v55, v56 - v57);
        v59 = v58 ? v58 : v56;
        v60 = (__int32 *)a1[30];
        if (v59 == v60)
        {
          v61 = a1[31];
          if ((unint64_t)v59 < v61)
          {
            *v59 = v55;
            v62 = (uint64_t)(v59 + 1);
LABEL_75:
            a1[30] = v62;
            goto LABEL_76;
          }
          v63 = (__int32 *)*v113;
          v64 = (char *)v60 - (_BYTE *)*v113;
          v65 = v64 >> 2;
          v66 = (v64 >> 2) + 1;
          if (v66 >> 62)
            goto LABEL_107;
          v67 = v61 - (_QWORD)v63;
          if (v67 >> 1 > v66)
            v66 = v67 >> 1;
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
            v68 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v68 = v66;
          if (v68)
          {
            if (v68 >> 62)
              goto LABEL_108;
            v69 = v68;
            v70 = operator new(4 * v68);
            v68 = v69;
            v71 = (__int32 *)&v70[4 * v65];
            *v71 = v55;
            v62 = (uint64_t)(v71 + 1);
            if (v59 != v63)
              goto LABEL_63;
          }
          else
          {
            v70 = 0;
            v71 = (__int32 *)(4 * v65);
            *(_DWORD *)(4 * v65) = v55;
            v62 = 4 * v65 + 4;
            if (v59 != v63)
            {
LABEL_63:
              v72 = (char *)(v59 - 1) - (char *)v63;
              if (v72 >= 0x3C)
              {
                v73 = (char *)v59 - &v70[v64];
                a4 = v112;
                if (v73 >= 0x20)
                {
                  v74 = v59 - v57;
                  v75 = (v72 >> 2) + 1;
                  v76 = 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
                  v59 = (__int32 *)((char *)v59 - v76);
                  v71 = (__int32 *)((char *)v71 - v76);
                  v77 = &v70[4 * v65 - 16];
                  v78 = &v57[v74 - 4];
                  v79 = v75 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v80 = *(_OWORD *)v78;
                    *(v77 - 1) = *((_OWORD *)v78 - 1);
                    *v77 = v80;
                    v77 -= 2;
                    v78 -= 8;
                    v79 -= 8;
                  }
                  while (v79);
                  if (v75 == (v75 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_72;
                }
              }
              else
              {
                a4 = v112;
              }
              do
              {
                v81 = *--v59;
                *--v71 = v81;
              }
              while (v59 != v63);
LABEL_72:
              a1[29] = v71;
              a1[30] = v62;
              a1[31] = &v70[4 * v68];
              if (v63)
                operator delete(v63);
              a3 = v111;
              a2 = v110;
              goto LABEL_75;
            }
          }
          a4 = v112;
          goto LABEL_72;
        }
      }
    }
LABEL_76:
    v82 = (unsigned int *)sub_239962518(v22, (unsigned int *)__p[0] + 2);
    v83 = *(unsigned int *)(sub_239962518(v22, v82) + 16);
    if ((_DWORD)v83 != -1)
    {
      v84 = *(_DWORD *)(*a3 + 4 * v83);
      if (v84 != a2)
      {
        v86 = (__int32 *)a1[29];
        v85 = (__int32 *)a1[30];
        v87 = wmemchr(v86, v84, v85 - v86);
        v88 = (char *)(v87 ? v87 : v85);
        v89 = (char *)a1[30];
        if (v88 == v89)
        {
          v90 = a1[31];
          if ((unint64_t)v88 >= v90)
          {
            v91 = (char *)*v113;
            v92 = v89 - (_BYTE *)*v113;
            v93 = v92 >> 2;
            v94 = (v92 >> 2) + 1;
            if (v94 >> 62)
LABEL_107:
              sub_2394189F8();
            v95 = v90 - (_QWORD)v91;
            if (v95 >> 1 > v94)
              v94 = v95 >> 1;
            if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
              v96 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v96 = v94;
            if (v96)
            {
              if (v96 >> 62)
LABEL_108:
                sub_239418A80();
              v97 = v96;
              v98 = operator new(4 * v96);
              v96 = v97;
              v99 = (__int32 *)&v98[4 * v93];
              *v99 = v84;
              v23 = (uint64_t)(v99 + 1);
              if (v88 != v91)
              {
LABEL_92:
                v100 = v88 - 4 - v91;
                if (v100 < 0x3C)
                {
                  a4 = v112;
                  goto LABEL_100;
                }
                v101 = v88 - &v98[v92];
                a4 = v112;
                if (v101 < 0x20)
                  goto LABEL_111;
                v102 = (v88 - (char *)v86) >> 2;
                v103 = (v100 >> 2) + 1;
                v104 = 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
                v88 -= v104;
                v99 = (__int32 *)((char *)v99 - v104);
                v105 = &v98[4 * v93 - 16];
                v106 = &v86[v102 - 4];
                v107 = v103 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v108 = *(_OWORD *)v106;
                  *(v105 - 1) = *((_OWORD *)v106 - 1);
                  *v105 = v108;
                  v105 -= 2;
                  v106 -= 8;
                  v107 -= 8;
                }
                while (v107);
                if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_111:
                  do
                  {
LABEL_100:
                    v109 = *((_DWORD *)v88 - 1);
                    v88 -= 4;
                    *--v99 = v109;
                  }
                  while (v88 != v91);
                }
LABEL_101:
                a1[29] = v99;
                a1[30] = v23;
                a1[31] = &v98[4 * v96];
                if (v91)
                  operator delete(v91);
                a3 = v111;
                a2 = v110;
LABEL_14:
                a1[30] = v23;
                goto LABEL_15;
              }
            }
            else
            {
              v98 = 0;
              v99 = (__int32 *)(4 * v93);
              *(_DWORD *)(4 * v93) = v84;
              v23 = 4 * v93 + 4;
              if (v88 != v91)
                goto LABEL_92;
            }
            a4 = v112;
            goto LABEL_101;
          }
          *(_DWORD *)v88 = v84;
          v23 = (uint64_t)(v88 + 4);
          goto LABEL_14;
        }
      }
    }
LABEL_15:
    ++v20;
  }
  while (v20 != v114);
  v18 = __p[0];
  if (__p[0])
    goto LABEL_105;
}

void sub_2399A9270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399A92AC(uint64_t a1, __int32 a2)
{
  char *v4;
  __int32 *v5;
  __int32 *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  __int32 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  __int32 *v18;
  char *v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int32 *v26;
  uint64_t v27;
  __int128 v28;
  __int32 v29;

  v5 = *(__int32 **)a1;
  v4 = *(char **)(a1 + 8);
  v6 = wmemchr(*(__int32 **)a1, a2, (uint64_t)&v4[-*(_QWORD *)a1] >> 2);
  if (v6)
    v7 = (char *)v6;
  else
    v7 = v4;
  v8 = *(char **)(a1 + 8);
  if (v7 == v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)v7 < v9)
    {
      *(_DWORD *)v7 = a2;
      v10 = (uint64_t)(v7 + 4);
LABEL_26:
      *(_QWORD *)(a1 + 8) = v10;
      return 1;
    }
    v11 = *(__int32 **)a1;
    v12 = (uint64_t)&v8[-*(_QWORD *)a1];
    v13 = v12 >> 2;
    v14 = (v12 >> 2) + 1;
    if (v14 >> 62)
      sub_2394189F8();
    v15 = v9 - (_QWORD)v11;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        sub_239418A80();
      v17 = operator new(4 * v16);
      v18 = (__int32 *)&v17[4 * v13];
      v19 = &v17[4 * v16];
      *v18 = a2;
      v10 = (uint64_t)(v18 + 1);
      v20 = v7 - (char *)v11;
      if (v7 == (char *)v11)
        goto LABEL_24;
    }
    else
    {
      v17 = 0;
      v18 = (__int32 *)(4 * v13);
      v19 = 0;
      *(_DWORD *)(4 * v13) = a2;
      v10 = 4 * v13 + 4;
      v20 = v7 - (char *)v11;
      if (v7 == (char *)v11)
      {
LABEL_24:
        *(_QWORD *)a1 = v18;
        *(_QWORD *)(a1 + 8) = v10;
        *(_QWORD *)(a1 + 16) = v19;
        if (v11)
          operator delete(v11);
        goto LABEL_26;
      }
    }
    v21 = v20 - 4;
    if (v21 < 0x3C)
      goto LABEL_32;
    if ((unint64_t)(v7 - &v17[v12]) < 0x20)
      goto LABEL_32;
    v22 = (v7 - (char *)v5) >> 2;
    v23 = (v21 >> 2) + 1;
    v24 = 4 * (v23 & 0x7FFFFFFFFFFFFFF8);
    v7 -= v24;
    v18 = (__int32 *)((char *)v18 - v24);
    v25 = &v17[4 * v13 - 16];
    v26 = &v5[v22 - 4];
    v27 = v23 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 8;
      v27 -= 8;
    }
    while (v27);
    if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_32:
      do
      {
        v29 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--v18 = v29;
      }
      while (v7 != (char *)v11);
    }
    goto LABEL_24;
  }
  return 1;
}

void sub_2399A9450(uint64_t *a1, _QWORD *a2, unsigned int a3, unint64_t a4, _QWORD *a5, uint64_t *a6, _BYTE *a7, _DWORD *a8, std::mutex *a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  BOOL v98;
  __int128 v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;

  *a7 = 0;
  v12 = *a1;
  v13 = (uint64_t *)(*a1 + 16 * a3);
  v14 = *v13;
  v15 = *(_QWORD *)(*v13 + 232);
  v16 = *(_QWORD *)(*v13 + 240) - v15;
  if (!v16)
    return;
  v19 = a3;
  v20 = v16 >> 2;
  if (v20 != 1)
  {
    v21 = 0;
    v22 = (_DWORD *)(v15 + 4);
    v23 = v20 - 1;
    do
    {
      v24 = v21 + 1;
      if (*(_QWORD *)(v12 + 16 * *(unsigned int *)(v15 + 4 * v21)))
        v25 = v24 >= v20;
      else
        v25 = 1;
      if (!v25)
      {
        v26 = *a6;
        v27 = v22;
        v28 = v23;
        do
        {
          v29 = *v27;
          if (*(_QWORD *)(v12 + 16 * v29))
          {
            v30 = *(unsigned int *)(v15 + 4 * v21);
            v31 = *(float32x4_t *)(v26 + 16 * v19);
            v32 = vmulq_f32(v31, *(float32x4_t *)(v26 + 16 * v30));
            v32.i32[3] = 0;
            v33 = vmulq_f32(v31, *(float32x4_t *)(v26 + 16 * v29));
            v33.i32[3] = 0;
            if (vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32)) < vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v33, v33)))
            {
              *(_DWORD *)(v15 + 4 * v21) = v29;
              *v27 = v30;
            }
          }
          ++v27;
          --v28;
        }
        while (v28);
      }
      --v23;
      ++v22;
      ++v21;
    }
    while (v24 != v20 - 1);
  }
  v34 = 0;
  v35 = (float)a4 * 0.7;
  *a8 = -1;
  if ((unint64_t)v35 <= 0x2BC)
    v36 = 700;
  else
    v36 = (unint64_t)v35;
  v102 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  v99 = 0uLL;
  if (v20 <= 1)
    v37 = 1;
  else
    v37 = v20;
  do
  {
    v38 = *(unsigned int *)(*(_QWORD *)(v14 + 232) + 4 * v34);
    if (((*(_QWORD *)(*a5 + ((v38 >> 3) & 0x1FFFFFF8)) >> v38) & 1) == 0)
      goto LABEL_20;
    v39 = *(_OWORD *)(*a1 + 16 * v38);
    v40 = *(_QWORD *)(*a1 + 16 * v38 + 8);
    if (v40)
    {
      v41 = (unint64_t *)(v40 + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    v99 = v39;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
      v46 = v99;
      if (!(_QWORD)v99)
        goto LABEL_20;
    }
    else
    {
      v46 = v39;
      if (!(_QWORD)v39)
        goto LABEL_20;
    }
    v47 = *(_QWORD *)(*(_QWORD *)(v46 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(v46 + 40) + 152);
    if (v47)
    {
      if (((uint64_t)(*(_QWORD *)(*(_QWORD *)(*v13 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*v13 + 40) + 152)) >> 2)
         + (v47 >> 2) <= v36)
      {
        sub_2399A9A84(a1, v13, (uint64_t *)&v99, &v102, &v100, a10, a11, a12);
        if (v102)
        {
          v98 = 0;
          sub_2399AA1B4(v102, &v98);
          if (v98)
          {
            *a8 = v38;
            goto LABEL_48;
          }
          v48 = v103;
          v102 = 0;
          v103 = 0;
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v51 = v101;
          v100 = 0;
          v101 = 0;
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
        }
      }
    }
LABEL_20:
    ++v34;
  }
  while (v34 != v37);
  if (!v102)
  {
    std::mutex::lock(a9);
    *(_QWORD *)(*a5 + ((v19 >> 3) & 0x1FFFFFF8)) &= ~(1 << v19);
    *a7 = 0;
    std::mutex::unlock(a9);
    v86 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
    if (!*((_QWORD *)&v99 + 1))
      goto LABEL_91;
    goto LABEL_87;
  }
LABEL_48:
  v54 = (_QWORD *)(*a1 + 16 * *a8);
  v55 = (std::__shared_weak_count *)v54[1];
  *v54 = 0;
  v54[1] = 0;
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = (_QWORD *)(*a1 + 16 * v19);
  v59 = (std::__shared_weak_count *)v58[1];
  *v58 = 0;
  v58[1] = 0;
  if (v59)
  {
    v60 = (unint64_t *)&v59->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = (_QWORD *)(*a2 + 16 * *a8);
  v63 = (std::__shared_weak_count *)v62[1];
  *v62 = 0;
  v62[1] = 0;
  if (v63)
  {
    v64 = (unint64_t *)&v63->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (_QWORD *)(*a2 + 16 * v19);
  v67 = (std::__shared_weak_count *)v66[1];
  *v66 = 0;
  v66[1] = 0;
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (uint64_t *)(*a1 + 16 * v19);
  v72 = v102;
  v71 = v103;
  if (v103)
  {
    v73 = (unint64_t *)&v103->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  v75 = (std::__shared_weak_count *)v70[1];
  *v70 = v72;
  v70[1] = (uint64_t)v71;
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (uint64_t *)(*a2 + 16 * v19);
  v80 = v100;
  v79 = v101;
  if (v101)
  {
    v81 = (unint64_t *)&v101->__shared_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
  }
  v83 = (std::__shared_weak_count *)v78[1];
  *v78 = v80;
  v78[1] = (uint64_t)v79;
  if (v83)
  {
    v84 = (unint64_t *)&v83->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  *a7 = 1;
  v86 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
LABEL_87:
    v87 = (unint64_t *)&v86->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
      std::__shared_weak_count::__release_weak(v86);
    }
  }
LABEL_91:
  v89 = v101;
  if (v101)
  {
    v90 = (unint64_t *)&v101->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v103;
  if (v103)
  {
    v93 = (unint64_t *)&v103->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
}

void sub_2399A9A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_239416DA0((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2399A9A84(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7, char a8)
{
  _QWORD *v11;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  size_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  _QWORD *v88;
  _QWORD *v89;
  char **v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  _QWORD *v94;
  std::__shared_weak_count *v95;
  char v96;
  char v97;
  void *__p;
  void *v99;
  uint64_t v100;
  void *v101;
  _BYTE *v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;

  v11 = a4;
  v15 = (std::__shared_weak_count *)a4[1];
  *a4 = 0;
  a4[1] = 0;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = *a2;
  v19 = *(_QWORD *)(*(_QWORD *)(*a2 + 40) + 104);
  v20 = *(_QWORD *)(*(_QWORD *)(*a2 + 40) + 112);
  v108 = 0;
  v109 = 0;
  v107 = 0;
  v21 = v20 - v19;
  if (v20 == v19)
  {
    v104 = 0;
    v105 = 0;
    v106 = 0;
  }
  else
  {
    if (v21 < 0)
      sub_2394189F8();
    v107 = (char *)operator new(v20 - v19);
    v109 = &v107[4 * (v21 >> 2)];
    bzero(v107, v21);
    v108 = &v107[v21];
    v22 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 104);
    v23 = *(_QWORD *)(*(_QWORD *)(v18 + 40) + 112);
    v104 = 0;
    v105 = 0;
    v106 = 0;
    v24 = v23 - v22;
    if (v23 != v22)
    {
      v88 = v11;
      if (v24 < 0)
        sub_2394189F8();
      v25 = a3;
      v26 = a7;
      v27 = a6;
      v28 = a1;
      v29 = a5;
      v30 = (unint64_t)((v24 >> 2) - 1) >> 6;
      v31 = (char *)operator new(8 * (v30 + 1));
      v105 = v24 >> 2;
      v106 = v30 + 1;
      v104 = v31;
      if ((unint64_t)v24 >= 0x104)
        v32 = (unint64_t)((v24 >> 2) - 1) >> 6;
      else
        v32 = 0;
      *(_QWORD *)&v31[8 * v32] = 0;
      v33 = 8 * ((unint64_t)(v24 >> 2) >> 6);
      v34 = v31;
      if ((unint64_t)v24 >= 0x100)
        bzero(v31, v33);
      if (v24 >> 2)
        *(_QWORD *)&v34[v33] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v24 >> 2));
      a5 = v29;
      a1 = v28;
      a6 = v27;
      a7 = v26;
      a3 = v25;
      v11 = v88;
    }
  }
  v101 = 0;
  v102 = 0;
  v103 = 0;
  __p = 0;
  v99 = 0;
  v100 = 0;
  v97 = 0;
  sub_2399AA36C((uint64_t)a2, a3, &v107, &v104, &v101, (int **)&__p, &v97);
  if (v97)
  {
    v35 = v102 - (_BYTE *)v101;
    if ((unint64_t)(v102 - (_BYTE *)v101) >= 8)
    {
      v96 = 0;
      sub_2399AAB4C((unsigned int **)&v101, *(_QWORD *)(*a2 + 40), &v96);
      if (v96)
      {
        sub_2399AAB4C((unsigned int **)&__p, *(_QWORD *)(*a3 + 40), &v96);
        if (v96)
        {
          v86 = a5;
          v94 = 0;
          v95 = 0;
          v92 = 0;
          v93 = 0;
          sub_2399AAE74(a2, a3, (uint64_t *)&v107, &v104, v35 >> 2, (uint64_t *)&v94, &v92, a6, a7, a8);
          v36 = v92;
          if (sub_2399A1DC4(v92) && sub_2399A0FC8(v36) <= 1)
          {
            v37 = v94;
            v38 = (char **)(v94 + 29);
            v39 = *a3;
            v40 = *(_QWORD *)(*a3 + 232);
            if (*(_QWORD *)(*a3 + 240) != v40)
            {
              v41 = 0;
              v91 = (char **)(v94 + 29);
              v87 = a2;
              v89 = v11;
              while (1)
              {
                v43 = *(unsigned int *)(v40 + 4 * v41);
                if (*(_QWORD *)(*a1 + 16 * v43) == *a2)
                  goto LABEL_29;
                v45 = (char *)v37[30];
                v44 = v37[31];
                if ((unint64_t)v45 >= v44)
                  break;
                *(_DWORD *)v45 = v43;
                v42 = (uint64_t)(v45 + 4);
LABEL_28:
                v37[30] = v42;
                v39 = *a3;
LABEL_29:
                ++v41;
                v40 = *(_QWORD *)(v39 + 232);
                if (v41 >= (*(_QWORD *)(v39 + 240) - v40) >> 2)
                  goto LABEL_53;
              }
              v46 = *v38;
              v47 = (v45 - v46) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                sub_2394189F8();
              v49 = v44 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                if (v50 >> 62)
                  sub_239418A80();
                v51 = v50;
                v52 = operator new(4 * v50);
                v50 = v51;
                v53 = &v52[4 * v47];
                *v53 = *(_DWORD *)(v40 + 4 * v41);
                v42 = (uint64_t)(v53 + 1);
                if (v45 != v46)
                  goto LABEL_41;
              }
              else
              {
                v52 = 0;
                v53 = (_DWORD *)(4 * v47);
                *(_DWORD *)(4 * v47) = v43;
                v42 = 4 * v47 + 4;
                if (v45 != v46)
                {
LABEL_41:
                  v54 = v45 - 4 - v46;
                  if (v54 >= 0x2C)
                  {
                    a2 = v87;
                    v11 = v89;
                    if ((unint64_t)(v46 - v52) >= 0x20)
                    {
                      v55 = (v54 >> 2) + 1;
                      v56 = 4 * (v55 & 0x7FFFFFFFFFFFFFF8);
                      v57 = &v45[-v56];
                      v53 = (_DWORD *)((char *)v53 - v56);
                      v58 = &v52[4 * v47 - 16];
                      v59 = v45 - 16;
                      v60 = v55 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v61 = *(_OWORD *)v59;
                        *(v58 - 1) = *((_OWORD *)v59 - 1);
                        *v58 = v61;
                        v58 -= 2;
                        v59 -= 32;
                        v60 -= 8;
                      }
                      while (v60);
                      v45 = v57;
                      if (v55 == (v55 & 0x7FFFFFFFFFFFFFF8))
                        goto LABEL_50;
                    }
                  }
                  else
                  {
                    a2 = v87;
                    v11 = v89;
                  }
                  do
                  {
                    v62 = *((_DWORD *)v45 - 1);
                    v45 -= 4;
                    *--v53 = v62;
                  }
                  while (v45 != v46);
LABEL_50:
                  v37[29] = v53;
                  v37[30] = v42;
                  v37[31] = &v52[4 * v50];
                  if (v46)
                    operator delete(v46);
                  v38 = v91;
                  goto LABEL_28;
                }
              }
              a2 = v87;
              v11 = v89;
              goto LABEL_50;
            }
LABEL_53:
            v63 = *a2;
            v64 = *(_QWORD *)(*a2 + 232);
            if (*(_QWORD *)(*a2 + 240) != v64)
            {
              v65 = 0;
              do
              {
                v66 = *(unsigned int *)(v64 + 4 * v65);
                if (*(_QWORD *)(*a1 + 16 * v66) != *a3)
                {
                  sub_2399A92AC((uint64_t)v38, v66);
                  v63 = *a2;
                }
                ++v65;
                v64 = *(_QWORD *)(v63 + 232);
              }
              while (v65 < (*(_QWORD *)(v63 + 240) - v64) >> 2);
            }
            v67 = v95;
            if (v95)
            {
              v68 = (unint64_t *)&v95->__shared_owners_;
              do
                v69 = __ldxr(v68);
              while (__stxr(v69 + 1, v68));
            }
            v70 = (std::__shared_weak_count *)v11[1];
            *v11 = v37;
            v11[1] = v67;
            if (v70)
            {
              v71 = (unint64_t *)&v70->__shared_owners_;
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                std::__shared_weak_count::__release_weak(v70);
              }
            }
            v74 = v92;
            v73 = v93;
            if (v93)
            {
              v75 = (unint64_t *)&v93->__shared_owners_;
              do
                v76 = __ldxr(v75);
              while (__stxr(v76 + 1, v75));
            }
            v77 = (std::__shared_weak_count *)v86[1];
            *v86 = v74;
            v86[1] = (uint64_t)v73;
            if (v77)
            {
              v78 = (unint64_t *)&v77->__shared_owners_;
              do
                v79 = __ldaxr(v78);
              while (__stlxr(v79 - 1, v78));
              if (!v79)
              {
                ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                std::__shared_weak_count::__release_weak(v77);
              }
            }
          }
          v80 = v93;
          if (v93)
          {
            v81 = (unint64_t *)&v93->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v83 = v95;
          if (v95)
          {
            v84 = (unint64_t *)&v95->__shared_owners_;
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
              std::__shared_weak_count::__release_weak(v83);
            }
          }
        }
      }
    }
  }
  if (__p)
  {
    v99 = __p;
    operator delete(__p);
  }
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  if (v104)
    operator delete(v104);
  if (v107)
    operator delete(v107);
}

void sub_2399AA0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;
  void *v27;
  uint64_t v28;
  void *v30;

  sub_239416DA0((uint64_t)&a17);
  sub_239416DA0((uint64_t)&a19);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
    v30 = a25;
    if (!a25)
    {
LABEL_3:
      if (!v26)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v30 = a25;
    if (!a25)
      goto LABEL_3;
  }
  a26 = (uint64_t)v30;
  operator delete(v30);
  if (!v26)
  {
LABEL_4:
    if (!v27)
LABEL_10:
      _Unwind_Resume(a1);
LABEL_9:
    *(_QWORD *)(v28 - 104) = v27;
    operator delete(v27);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(v26);
  if (!v27)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_2399AA1B4(uint64_t a1, BOOL *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  int64x2_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *a2 = 0;
  result = sub_239994FBC(a1);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5), (result & 1) == 0))
    {
      v16 = 256;
      v17 = 1;
      v18 = vdupq_n_s64(0xAuLL);
      v19 = 20;
      v20 = xmmword_239F03720;
      v21 = 0x7F7FFFFFFF7FFFFFLL;
      v22 = -1;
      memset(v23, 0, sizeof(v23));
      v24 = 0;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v14 = 0;
      v15 = 0;
      v13 = 0;
      *a2 = sub_2399B4E84(a1, (uint64_t)&v16, (float *)&v15 + 1, (float *)&v15, &v14, (float *)&v13, 0);
      v6 = *(_QWORD *)(a1 + 32);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
      if (*((_QWORD *)&v28 + 1))
      {
        *(_QWORD *)&v29 = *((_QWORD *)&v28 + 1);
        operator delete(*((void **)&v28 + 1));
      }
      if ((_QWORD)v27)
      {
        *((_QWORD *)&v27 + 1) = v27;
        operator delete((void *)v27);
      }
      v7 = *((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1))
      {
        v8 = v26;
        v9 = (void *)*((_QWORD *)&v25 + 1);
        if ((_QWORD)v26 != *((_QWORD *)&v25 + 1))
        {
          do
          {
            v10 = *(std::__shared_weak_count **)(v8 - 8);
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                v12 = __ldaxr(p_shared_owners);
              while (__stlxr(v12 - 1, p_shared_owners));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }
            }
            v8 -= 16;
          }
          while (v8 != v7);
          v9 = (void *)*((_QWORD *)&v25 + 1);
        }
        *(_QWORD *)&v26 = v7;
        operator delete(v9);
      }
      return sub_23998E148((uint64_t)v23);
    }
  }
  return result;
}

void sub_2399AA358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_23998C244((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2399AA36C(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, int **a6, _BYTE *a7)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t i;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unsigned int v50;
  _QWORD *v51;
  int *v52;
  int *v53;
  int *v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  int *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  _OWORD *v73;
  int *v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  _DWORD *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _OWORD *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  _BYTE *v100;
  int **v101;
  _QWORD *v103;
  void *__p[2];
  unint64_t v107;
  unsigned int v108;

  *a7 = 0;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  HIBYTE(v107) = 15;
  strcpy((char *)__p, "v:index_in_root");
  v108 = -1;
  v12 = sub_23999C498((uint64_t **)(v11 + 8), (uint64_t)&v108, (unsigned __int8 *)__p);
  if (SHIBYTE(v107) < 0)
    operator delete(__p[0]);
  v13 = *(_QWORD *)(*a2 + 40);
  HIBYTE(v107) = 15;
  strcpy((char *)__p, "v:index_in_root");
  v108 = -1;
  v14 = sub_23999C498((uint64_t **)(v13 + 8), (uint64_t)&v108, (unsigned __int8 *)__p);
  if (SHIBYTE(v107) < 0)
    operator delete(__p[0]);
  v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 8) + 16 * v12);
  v17 = *v15;
  v16 = (std::__shared_weak_count *)v15[1];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v21 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*a2 + 40) + 8) + 16 * v14);
  v22 = *v21;
  v23 = (std::__shared_weak_count *)v21[1];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    do
      v26 = __ldaxr(v24);
    while (__stlxr(v26 - 1, v24));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v100 = a7;
  v101 = a6;
  v27 = *a2;
  v28 = *(_QWORD *)(*(_QWORD *)(*a2 + 40) + 104);
  v29 = *(_QWORD *)(*(_QWORD *)(*a2 + 40) + 112);
  __p[0] = 0;
  __p[1] = 0;
  v107 = 0;
  v30 = v29 - v28;
  v31 = (v29 - v28) >> 2;
  v103 = a4;
  if (v29 == v28)
  {
    v34 = 0;
    v36 = *(_QWORD *)(v27 + 40);
    if (*(_QWORD *)(v36 + 112) == *(_QWORD *)(v36 + 104))
      goto LABEL_34;
    goto LABEL_29;
  }
  if ((v30 & 0x8000000000000000) != 0)
    sub_2394189F8();
  v32 = (v31 - 1) >> 6;
  v33 = operator new(8 * (v32 + 1));
  v34 = v33;
  __p[1] = (void *)v31;
  v107 = v32 + 1;
  __p[0] = v33;
  if (v30 >= 0x104)
    v35 = (v31 - 1) >> 6;
  else
    v35 = 0;
  v33[v35] = 0;
  if (v30 >= 0x100)
    bzero(v33, 8 * (v31 >> 6));
  a4 = v103;
  if (v30 >> 2)
    v34[v31 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v30 >> 2));
  v36 = *(_QWORD *)(v27 + 40);
  if (*(_QWORD *)(v36 + 112) != *(_QWORD *)(v36 + 104))
  {
LABEL_29:
    v37 = 0;
    do
    {
      v108 = v37;
      v39 = sub_2399423C8(v36, &v108);
      v40 = v37 >> 6;
      v41 = 1 << v37;
      if (v39)
        v38 = v34[v40] | v41;
      else
        v38 = v34[v40] & ~v41;
      v34[v40] = v38;
      ++v37;
      v36 = *(_QWORD *)(*a2 + 40);
    }
    while (v37 < (uint64_t)(*(_QWORD *)(v36 + 112) - *(_QWORD *)(v36 + 104)) >> 2);
  }
LABEL_34:
  v42 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (*(_QWORD *)(v42 + 112) != *(_QWORD *)(v42 + 104))
  {
    for (i = 0; i < (uint64_t)(*(_QWORD *)(v42 + 112) - *(_QWORD *)(v42 + 104)) >> 2; ++i)
    {
      v108 = i;
      *(_QWORD *)(*a4 + 8 * (i >> 6)) |= 1 << i;
      if (sub_2399423C8(v42, &v108))
      {
        v44 = *(_QWORD *)(*(_QWORD *)(*a2 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(*a2 + 40) + 104);
        if (v44)
        {
          v45 = 0;
          v46 = 0;
          v47 = i >> 6;
          v48 = v44 >> 2;
          v49 = -1;
          v50 = 1;
          do
          {
            if (((*(_QWORD *)((char *)__p[0] + ((v45 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v45) & 1) != 0
              && *(_DWORD *)(*(_QWORD *)(v17 + 40) + 4 * v108) == *(_DWORD *)(*(_QWORD *)(v22 + 40) + 4 * v45))
            {
              if (v46)
                goto LABEL_104;
              v49 = v50 - 1;
              v46 = 1;
            }
            v45 = v50++;
          }
          while (v48 > v45);
          if (v46 == 1)
          {
            v53 = *a6;
            v52 = a6[1];
            v54 = *a6;
            if (*a6 != v52)
            {
              while (*v54 != v49)
              {
                if (++v54 == v52)
                {
                  v54 = a6[1];
                  break;
                }
              }
            }
            if (v54 != v52)
              goto LABEL_104;
            v55 = (unint64_t)a6[2];
            if ((unint64_t)v52 < v55)
            {
              *v52 = v49;
              a6[1] = v52 + 1;
              v56 = a5;
              v58 = (char *)a5[1];
              v57 = a5[2];
              if ((unint64_t)v58 < v57)
                goto LABEL_53;
LABEL_80:
              v79 = (char *)*v56;
              v80 = (uint64_t)&v58[-*v56];
              v81 = v80 >> 2;
              v82 = (v80 >> 2) + 1;
              if (v82 >> 62)
                sub_2394189F8();
              v83 = v57 - (_QWORD)v79;
              if (v83 >> 1 > v82)
                v82 = v83 >> 1;
              if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL)
                v84 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v84 = v82;
              if (v84)
              {
                v98 = &v58[-*v56];
                v99 = v80 >> 2;
                if (v84 >> 62)
                  sub_239418A80();
                v85 = v84;
                v86 = operator new(4 * v84);
                v56 = a5;
                v84 = v85;
                v80 = (uint64_t)v98;
                v81 = v99;
                v87 = &v86[4 * v99];
                *v87 = v108;
                v59 = (uint64_t)(v87 + 1);
                if (v58 != v79)
                {
LABEL_89:
                  v88 = v58 - 4 - v79;
                  if (v88 < 0x2C)
                  {
                    a6 = v101;
                    goto LABEL_98;
                  }
                  a6 = v101;
                  if ((unint64_t)(v58 - &v86[v80]) < 0x20)
                    goto LABEL_114;
                  v89 = (v88 >> 2) + 1;
                  v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
                  v91 = &v58[-v90];
                  v87 = (_DWORD *)((char *)v87 - v90);
                  v92 = &v86[4 * v81 - 16];
                  v93 = v58 - 16;
                  v94 = v89 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v95 = *(_OWORD *)v93;
                    *(v92 - 1) = *((_OWORD *)v93 - 1);
                    *v92 = v95;
                    v92 -= 2;
                    v93 -= 32;
                    v94 -= 8;
                  }
                  while (v94);
                  v58 = v91;
                  if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_114:
                    do
                    {
LABEL_98:
                      v96 = *((_DWORD *)v58 - 1);
                      v58 -= 4;
                      *--v87 = v96;
                    }
                    while (v58 != v79);
                  }
                  v56 = a5;
                  v58 = (char *)*a5;
                  *a5 = v87;
                  a5[1] = v59;
                  a5[2] = &v86[4 * v84];
                  if (v58)
                  {
LABEL_100:
                    v97 = v59;
                    operator delete(v58);
                    v59 = v97;
                    v56 = a5;
                  }
LABEL_101:
                  v47 = i >> 6;
LABEL_102:
                  v56[1] = v59;
                  *(_DWORD *)(*a3 + 4 * i) = v49;
                  a4 = v103;
                  *(_QWORD *)(*v103 + 8 * v47) &= ~(1 << i);
                  goto LABEL_56;
                }
              }
              else
              {
                v86 = 0;
                v56 = a5;
                v87 = (_DWORD *)(4 * v81);
                *(_DWORD *)(4 * v81) = v108;
                v59 = 4 * v81 + 4;
                if (v58 != v79)
                  goto LABEL_89;
              }
              a6 = v101;
              *v56 = v87;
              v56[1] = v59;
              v56[2] = &v86[4 * v84];
              if (v58)
                goto LABEL_100;
              goto LABEL_101;
            }
            v60 = (char *)v52 - (char *)v53;
            v61 = v52 - v53;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 62)
              sub_2394189F8();
            v63 = v55 - (_QWORD)v53;
            if (v63 >> 1 > v62)
              v62 = v63 >> 1;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
              v64 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v64 = v62;
            if (v64)
            {
              if (v64 >> 62)
                sub_239418A80();
              v65 = v64;
              v66 = operator new(4 * v64);
              v64 = v65;
              v60 = (char *)v52 - (char *)v53;
              v61 = v52 - v53;
              v67 = (int *)&v66[4 * v61];
              *v67 = v49;
              v68 = (uint64_t)(v67 + 1);
              if (v53 != v52)
              {
LABEL_67:
                v69 = (char *)(v52 - 1) - (char *)v53;
                if (v69 < 0x2C)
                {
                  a6 = v101;
                  goto LABEL_76;
                }
                a6 = v101;
                if ((unint64_t)((char *)v52 - &v66[v60]) < 0x20)
                  goto LABEL_115;
                v70 = (v69 >> 2) + 1;
                v71 = 4 * (v70 & 0x7FFFFFFFFFFFFFF8);
                v72 = &v52[v71 / 0xFFFFFFFFFFFFFFFCLL];
                v67 = (int *)((char *)v67 - v71);
                v73 = &v66[4 * v61 - 16];
                v74 = v52 - 4;
                v75 = v70 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v76 = *(_OWORD *)v74;
                  *(v73 - 1) = *((_OWORD *)v74 - 1);
                  *v73 = v76;
                  v73 -= 2;
                  v74 -= 8;
                  v75 -= 8;
                }
                while (v75);
                v52 = v72;
                if (v70 != (v70 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_115:
                  do
                  {
LABEL_76:
                    v77 = *--v52;
                    *--v67 = v77;
                  }
                  while (v52 != v53);
                }
                v53 = *a6;
                *a6 = v67;
                a6[1] = (int *)v68;
                a6[2] = (int *)&v66[4 * v64];
                if (v53)
                {
LABEL_78:
                  v78 = v68;
                  operator delete(v53);
                  v68 = v78;
                }
LABEL_79:
                v47 = i >> 6;
                a6[1] = (int *)v68;
                v56 = a5;
                v58 = (char *)a5[1];
                v57 = a5[2];
                if ((unint64_t)v58 >= v57)
                  goto LABEL_80;
LABEL_53:
                *(_DWORD *)v58 = v108;
                v59 = (uint64_t)(v58 + 4);
                goto LABEL_102;
              }
            }
            else
            {
              v66 = 0;
              v67 = (int *)(4 * v61);
              *(_DWORD *)(4 * v61) = v49;
              v68 = 4 * v61 + 4;
              if (v53 != v52)
                goto LABEL_67;
            }
            a6 = v101;
            *v101 = v67;
            v101[1] = (int *)v68;
            v101[2] = (int *)&v66[4 * v64];
            if (v53)
              goto LABEL_78;
            goto LABEL_79;
          }
        }
        a4 = v103;
        v51 = a3;
      }
      else
      {
        v51 = a3;
      }
      *(_DWORD *)(*v51 + 4 * i) = v31++;
LABEL_56:
      v42 = *(_QWORD *)(*(_QWORD *)a1 + 40);
    }
  }
  *v100 = 1;
LABEL_104:
  if (__p[0])
    operator delete(__p[0]);
}

void sub_2399AAB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399AAB4C(unsigned int **a1, uint64_t a2, _BYTE *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  unsigned int *v9;
  int64_t v10;
  int i;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  int64_t v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41[3];
  unsigned int v42;
  unsigned int *v43;
  char *v44;
  char *v45;

  *a3 = 0;
  v44 = 0;
  v5 = *a1;
  v6 = *a1 + 1;
  v42 = **a1;
  v7 = (unsigned int *)operator new(4uLL);
  *v7 = v42;
  v8 = (char *)(v7 + 1);
  v43 = v7;
  v45 = (char *)(v7 + 1);
  v9 = a1[1];
  v10 = (char *)v9 - (char *)v6;
  if (v9 != v6)
    memmove(v5, v6, (char *)v9 - (char *)v6);
  a1[1] = (unsigned int *)((char *)v5 + v10);
  v40 = (_QWORD *)(a2 + 104);
  while (2)
  {
    v42 = *v7;
    if (v8 != (char *)(v7 + 1))
      memmove(v7, v7 + 1, v8 - (char *)(v7 + 1));
    v44 = v8 - 4;
    sub_239962480((uint64_t)v41, v40, &v42);
    for (i = sub_2399624A8(v41); i != -1; i = sub_2399624A8(v41))
    {
      v12 = *a1;
      v13 = (char *)a1[1] - (char *)*a1;
      if (!v13)
        continue;
      v14 = 0;
      v15 = v13 >> 2;
      if (v15 <= 1)
        v15 = 1;
      while (v12[v14] != i)
      {
        ++v14;
        if (!--v15)
          goto LABEL_9;
      }
      v16 = (unsigned int *)v44;
      if (v44 >= v45)
      {
        v18 = v43;
        v19 = (char *)(v44 - (char *)v43);
        v20 = (v44 - (char *)v43) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          sub_2394189F8();
        v22 = v45 - (char *)v43;
        if ((v45 - (char *)v43) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 >> 62)
            sub_239418A80();
          v24 = operator new(4 * v23);
          v25 = (unsigned int *)((char *)v24 + 4 * v20);
          *v25 = v12[v14];
          v17 = (uint64_t)(v25 + 1);
          if (v16 == v18)
            goto LABEL_37;
LABEL_30:
          v26 = (char *)(v16 - 1) - (char *)v18;
          if (v26 < 0x2C)
            goto LABEL_50;
          if ((unint64_t)((char *)v16 - &v19[(_QWORD)v24]) < 0x20)
            goto LABEL_50;
          v27 = (v26 >> 2) + 1;
          v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
          v29 = (char *)&v16[v28 / 0xFFFFFFFFFFFFFFFCLL];
          v25 = (unsigned int *)((char *)v25 - v28);
          v30 = (char *)v24 + 4 * v20 - 16;
          v31 = (__int128 *)(v16 - 4);
          v32 = v27 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v33 = *v31;
            *(v30 - 1) = *(v31 - 1);
            *v30 = v33;
            v30 -= 2;
            v31 -= 2;
            v32 -= 8;
          }
          while (v32);
          v16 = (unsigned int *)v29;
          if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_50:
            do
            {
              v34 = *--v16;
              *--v25 = v34;
            }
            while (v16 != v18);
          }
          v16 = v43;
        }
        else
        {
          v24 = 0;
          v25 = (unsigned int *)(4 * v20);
          *(_DWORD *)(4 * v20) = i;
          v17 = 4 * v20 + 4;
          if (v16 != v18)
            goto LABEL_30;
        }
LABEL_37:
        v43 = v25;
        v45 = (char *)v24 + 4 * v23;
        if (v16)
          operator delete(v16);
        goto LABEL_39;
      }
      *(_DWORD *)v44 = i;
      v17 = (uint64_t)(v16 + 1);
LABEL_39:
      v44 = (char *)v17;
      v35 = a1[1];
      v36 = &(*a1)[v14];
      v37 = (char *)v35 - (char *)*a1 - v14 * 4;
      v38 = v37 - 4;
      if (v36 + 1 != v35)
        memmove(v36, v36 + 1, v37 - 4);
      a1[1] = (unsigned int *)((char *)v36 + (v38 & 0xFFFFFFFFFFFFFFFCLL));
LABEL_9:
      ;
    }
    v7 = v43;
    v8 = v44;
    if (v43 != (unsigned int *)v44)
      continue;
    break;
  }
  if (*a1 == a1[1])
    *a3 = 1;
  if (v7)
    operator delete(v7);
}

void sub_2399AAE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399AAE74(uint64_t *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, char a10)
{
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _BYTE *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  _DWORD *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _BYTE *v136;
  char *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  _OWORD *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  _BYTE *v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  _OWORD *v169;
  char *v170;
  uint64_t v171;
  __int128 v172;
  int v173;
  uint64_t *v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _BYTE *v189;
  char *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  _OWORD *v195;
  char *v196;
  uint64_t v197;
  __int128 v198;
  int v199;
  _DWORD *v200;
  _QWORD *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  _DWORD *v205;
  int v206;
  char *v207;
  char *v208;
  char *v209;
  char *v210;
  int64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  char *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  __int128 v225;
  int v226;
  int v227;
  char *v228;
  char *v229;
  int64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  _BYTE *v235;
  char *v236;
  unint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  _OWORD *v241;
  __int128 *v242;
  uint64_t v243;
  __int128 v244;
  int v245;
  int v246;
  char *v247;
  int64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  _BYTE *v253;
  _DWORD *v254;
  unint64_t v255;
  char *v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  _OWORD *v260;
  char *v261;
  uint64_t v262;
  __int128 v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unsigned int *v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  char *v273;
  int64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  char *v280;
  char *v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  char *v286;
  char *v287;
  uint64_t v288;
  __int128 v289;
  int v290;
  uint64_t v291;
  char *v292;
  char *v293;
  int64_t v294;
  uint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unint64_t v298;
  uint64_t v299;
  _BYTE *v300;
  char *v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  _OWORD *v306;
  __int128 *v307;
  uint64_t v308;
  __int128 v309;
  int v310;
  uint64_t v311;
  char *v312;
  int64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  _BYTE *v319;
  _DWORD *v320;
  unint64_t v321;
  char *v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  _OWORD *v326;
  char *v327;
  uint64_t v328;
  __int128 v329;
  _QWORD *v330;
  _QWORD *v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  unsigned int v339;
  _QWORD *v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  std::__shared_weak_count *v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  int v362;
  uint64_t *v363;
  uint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  _QWORD *v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t *v373;
  uint64_t v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  unint64_t v391;
  int v392;
  uint64_t *v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  unint64_t *v396;
  unint64_t v397;
  unint64_t v398;
  _QWORD *v399;
  uint64_t v400;
  unsigned int v401;
  uint64_t v402;
  unsigned int v403;
  _QWORD *v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t *v407;
  uint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  unint64_t v419;
  _QWORD *v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t *v423;
  uint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t *v430;
  uint64_t v431;
  std::__shared_weak_count *v432;
  unint64_t *v433;
  unint64_t v434;
  unint64_t v435;
  uint64_t v436;
  unsigned int v437;
  unsigned int v438;
  _QWORD *v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  _QWORD *v443;
  uint64_t v444;
  unsigned int v445;
  uint64_t v446;
  unsigned int v447;
  uint64_t v448;
  unsigned int v449;
  uint64_t v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t v457;
  _DWORD *v458;
  _DWORD *v459;
  _QWORD *v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  uint64_t v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  unint64_t v468;
  int v469;
  uint64_t *v470;
  uint64_t v471;
  std::__shared_weak_count *v472;
  unint64_t *v473;
  unint64_t v474;
  unint64_t v475;
  uint64_t *v476;
  uint64_t v477;
  std::__shared_weak_count *v478;
  unint64_t *v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t v484;
  std::__shared_weak_count *v485;
  unint64_t *v486;
  unint64_t v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t *v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  unint64_t *v495;
  unint64_t v496;
  unint64_t v497;
  int v498;
  uint64_t *v499;
  uint64_t v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  unint64_t v504;
  unsigned int *v505;
  uint64_t v506;
  unint64_t v507;
  uint64_t *v508;
  uint64_t v509;
  std::__shared_weak_count *v510;
  unint64_t *v511;
  unint64_t v512;
  unint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  std::__shared_weak_count *v516;
  unint64_t *v517;
  unint64_t v518;
  unint64_t v519;
  int v520;
  uint64_t *v521;
  uint64_t v522;
  std::__shared_weak_count *v523;
  unint64_t *v524;
  unint64_t v525;
  unint64_t v526;
  uint64_t *v527;
  uint64_t v528;
  std::__shared_weak_count *v529;
  unint64_t *v530;
  unint64_t v531;
  unint64_t v532;
  int v533;
  uint64_t *v534;
  uint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  unint64_t v539;
  unsigned int *v540;
  uint64_t v541;
  unint64_t v542;
  uint64_t *v543;
  uint64_t v544;
  std::__shared_weak_count *v545;
  unint64_t *v546;
  unint64_t v547;
  unint64_t v548;
  uint64_t *v549;
  uint64_t v550;
  std::__shared_weak_count *v551;
  unint64_t *v552;
  unint64_t v553;
  unint64_t v554;
  int v555;
  uint64_t *v556;
  uint64_t v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  unint64_t v561;
  _QWORD *v562;
  unint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  unint64_t v569;
  int v570;
  uint64_t *v571;
  uint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  unint64_t v576;
  unint64_t v577;
  uint64_t *v578;
  uint64_t v579;
  std::__shared_weak_count *v580;
  unint64_t *v581;
  unint64_t v582;
  unint64_t v583;
  uint64_t v584;
  uint64_t *v585;
  uint64_t v586;
  std::__shared_weak_count *v587;
  unint64_t *v588;
  unint64_t v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t *v594;
  uint64_t v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  unint64_t v599;
  int v600;
  uint64_t *v601;
  uint64_t v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  unint64_t v606;
  unsigned int *v607;
  uint64_t v608;
  unint64_t v609;
  uint64_t *v610;
  uint64_t v611;
  std::__shared_weak_count *v612;
  unint64_t *v613;
  unint64_t v614;
  unint64_t v615;
  uint64_t *v616;
  uint64_t v617;
  std::__shared_weak_count *v618;
  unint64_t *v619;
  unint64_t v620;
  unint64_t v621;
  int v622;
  uint64_t *v623;
  uint64_t v624;
  std::__shared_weak_count *v625;
  unint64_t *v626;
  unint64_t v627;
  unint64_t v628;
  uint64_t *v629;
  uint64_t v630;
  std::__shared_weak_count *v631;
  unint64_t *v632;
  unint64_t v633;
  unint64_t v634;
  int v635;
  uint64_t *v636;
  uint64_t v637;
  std::__shared_weak_count *v638;
  unint64_t *v639;
  unint64_t v640;
  unint64_t v641;
  unsigned int *v642;
  uint64_t v643;
  unint64_t v644;
  uint64_t *v645;
  uint64_t v646;
  std::__shared_weak_count *v647;
  unint64_t *v648;
  unint64_t v649;
  unint64_t v650;
  uint64_t *v651;
  uint64_t v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  unint64_t v656;
  int v657;
  uint64_t *v658;
  uint64_t v659;
  std::__shared_weak_count *v660;
  unint64_t *v661;
  unint64_t v662;
  unint64_t v663;
  unsigned int v664;
  unsigned int v665;
  unsigned int v666;
  unsigned int v667;
  uint64_t v669;
  uint64_t *v671;
  _QWORD *v672;
  unsigned int v673;
  void *v674;
  void *v675;
  char *v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  unsigned int v680;
  void *__p[2];
  char *v682;
  unsigned int v683;
  unsigned int v684;
  void *v685;
  void *v686;
  char *v687;
  void *v688;
  char *v689;
  char *v690;
  char *v691;
  char *v692;
  char *v693;
  unsigned int v694[5];

  v16 = operator new(0xD0uLL);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_250ADED90;
  v17 = sub_23996301C((uint64_t)(v16 + 3));
  v18 = (std::__shared_weak_count *)a7[1];
  *a7 = (uint64_t)v17;
  a7[1] = (uint64_t)v16;
  if (!v18)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v694[0] = -1;
    v21 = (_QWORD *)*a7;
    if (a10)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v694[0] = -1;
    v21 = (_QWORD *)*a7;
    if (a10)
    {
LABEL_6:
      HIBYTE(v693) = 5;
      strcpy((char *)&v691, "f:imt");
      sub_23994E3E8(v21, v694, (uint64_t)&v691);
      if (SHIBYTE(v693) < 0)
        operator delete(v691);
      v21 = (_QWORD *)*a7;
    }
  }
  v672 = a2;
  v22 = operator new(0x180uLL);
  v22[1] = 0;
  v22[2] = 0;
  *v22 = &off_250AF1130;
  v23 = sub_239994FB8((uint64_t)(v22 + 3), (uint64_t)v21, a8, a9, a10);
  v24 = (std::__shared_weak_count *)a6[1];
  *a6 = v23;
  a6[1] = (uint64_t)v22;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v691 = 0;
  v692 = 0;
  v693 = 0;
  v688 = 0;
  v689 = 0;
  v690 = 0;
  v27 = *a2;
  v28 = *(_QWORD *)(*v672 + 40);
  v29 = *a1;
  v30 = *(_QWORD **)(*a1 + 40);
  v31 = ((uint64_t)(*(_QWORD *)(v28 + 112) - *(_QWORD *)(v28 + 104)) >> 2) - a5 + ((uint64_t)(v30[14] - v30[13]) >> 2);
  if (v31)
  {
    v32 = 3 * v31;
    if ((unint64_t)(3 * v31) >> 62)
      sub_2394189F8();
    v691 = (char *)operator new(12 * v31);
    v692 = v691;
    v693 = &v691[4 * v32];
    v28 = *(_QWORD *)(v27 + 40);
    v30 = *(_QWORD **)(v29 + 40);
  }
  v33 = ((uint64_t)(v30[20] - v30[19]) >> 2) + ((uint64_t)(*(_QWORD *)(v28 + 160) - *(_QWORD *)(v28 + 152)) >> 2);
  if (v33)
  {
    v34 = 3 * v33;
    if ((unint64_t)(3 * v33) >> 62)
      sub_2394189F8();
    v688 = operator new(12 * v33);
    v689 = (char *)v688;
    v690 = (char *)v688 + 4 * v34;
    v28 = *(_QWORD *)(v27 + 40);
  }
  v671 = a1;
  if (*(_QWORD *)(v28 + 112) != *(_QWORD *)(v28 + 104))
  {
    v35 = 0;
    while (1)
    {
      v37 = (uint64_t *)(*(_QWORD *)(v28 + 8) + 16 * *(unsigned int *)(v28 + 176));
      v38 = *v37;
      v39 = (std::__shared_weak_count *)v37[1];
      if (!v39)
        goto LABEL_29;
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
        v43 = (_DWORD *)(*(_QWORD *)(v38 + 40) + 16 * v35);
        v45 = v692;
        v44 = v693;
        if (v692 < v693)
        {
LABEL_30:
          *(_DWORD *)v45 = *v43;
          v46 = (uint64_t)(v45 + 4);
          goto LABEL_51;
        }
      }
      else
      {
LABEL_29:
        v43 = (_DWORD *)(*(_QWORD *)(v38 + 40) + 16 * v35);
        v45 = v692;
        v44 = v693;
        if (v692 < v693)
          goto LABEL_30;
      }
      v47 = v691;
      v48 = v45 - v691;
      v49 = (v45 - v691) >> 2;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62)
        goto LABEL_682;
      v51 = v44 - v691;
      if (v51 >> 1 > v50)
        v50 = v51 >> 1;
      v52 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v50;
      if (v52)
        break;
      v53 = 0;
      v54 = (char *)(4 * v49);
      *(_DWORD *)(4 * v49) = *v43;
      v46 = 4 * v49 + 4;
      if (v45 != v47)
        goto LABEL_43;
LABEL_49:
      v691 = v54;
      v692 = (char *)v46;
      v693 = &v53[4 * v52];
      if (v47)
        operator delete(v47);
LABEL_51:
      v692 = (char *)v46;
      v64 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v672 + 40) + 8)
                      + 16 * *(unsigned int *)(*(_QWORD *)(*v672 + 40) + 176));
      v65 = *v64;
      v66 = (std::__shared_weak_count *)v64[1];
      if (!v66)
        goto LABEL_56;
      v67 = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(v67);
      while (__stxr(v68 + 1, v67));
      do
        v69 = __ldaxr(v67);
      while (__stlxr(v69 - 1, v67));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
        v70 = *(_QWORD *)(v65 + 40) + 16 * v35;
        v72 = v692;
        v71 = v693;
        if (v692 < v693)
        {
LABEL_57:
          *(_DWORD *)v72 = *(_DWORD *)(v70 + 4);
          v73 = (uint64_t)(v72 + 4);
          goto LABEL_78;
        }
      }
      else
      {
LABEL_56:
        v70 = *(_QWORD *)(v65 + 40) + 16 * v35;
        v72 = v692;
        v71 = v693;
        if (v692 < v693)
          goto LABEL_57;
      }
      v74 = v691;
      v75 = v72 - v691;
      v76 = (v72 - v691) >> 2;
      v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 62)
        goto LABEL_682;
      v78 = v71 - v691;
      if (v78 >> 1 > v77)
        v77 = v78 >> 1;
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
        v79 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v79 = v77;
      if (v79)
      {
        if (v79 >> 62)
          goto LABEL_685;
        v80 = operator new(4 * v79);
        v81 = &v80[4 * v76];
        *(_DWORD *)v81 = *(_DWORD *)(v70 + 4);
        v73 = (uint64_t)(v81 + 4);
        if (v72 == v74)
          goto LABEL_76;
LABEL_70:
        v82 = v72 - 4 - v74;
        if (v82 < 0x2C)
          goto LABEL_694;
        if ((unint64_t)(v72 - &v80[v75]) < 0x20)
          goto LABEL_694;
        v83 = (v82 >> 2) + 1;
        v84 = 4 * (v83 & 0x7FFFFFFFFFFFFFF8);
        v85 = &v72[-v84];
        v81 -= v84;
        v86 = &v80[4 * v76 - 16];
        v87 = v72 - 16;
        v88 = v83 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v89 = *(_OWORD *)v87;
          *(v86 - 1) = *((_OWORD *)v87 - 1);
          *v86 = v89;
          v86 -= 2;
          v87 -= 32;
          v88 -= 8;
        }
        while (v88);
        v72 = v85;
        if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_694:
          do
          {
            v90 = *((_DWORD *)v72 - 1);
            v72 -= 4;
            *((_DWORD *)v81 - 1) = v90;
            v81 -= 4;
          }
          while (v72 != v74);
        }
        goto LABEL_76;
      }
      v80 = 0;
      v81 = (char *)(4 * v76);
      *(_DWORD *)(4 * v76) = *(_DWORD *)(v70 + 4);
      v73 = 4 * v76 + 4;
      if (v72 != v74)
        goto LABEL_70;
LABEL_76:
      v691 = v81;
      v692 = (char *)v73;
      v693 = &v80[4 * v79];
      if (v74)
        operator delete(v74);
LABEL_78:
      v692 = (char *)v73;
      v91 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v672 + 40) + 8)
                      + 16 * *(unsigned int *)(*(_QWORD *)(*v672 + 40) + 176));
      v92 = *v91;
      v93 = (std::__shared_weak_count *)v91[1];
      if (!v93)
        goto LABEL_83;
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
      do
        v96 = __ldaxr(v94);
      while (__stlxr(v96 - 1, v94));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
        v97 = *(_QWORD *)(v92 + 40) + 16 * v35;
        v99 = v692;
        v98 = v693;
        if (v692 >= v693)
        {
LABEL_84:
          v100 = v691;
          v101 = v99 - v691;
          v102 = (v99 - v691) >> 2;
          v103 = v102 + 1;
          if ((unint64_t)(v102 + 1) >> 62)
LABEL_682:
            sub_2394189F8();
          v104 = v98 - v691;
          if (v104 >> 1 > v103)
            v103 = v104 >> 1;
          if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
            v105 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v105 = v103;
          if (v105)
          {
            if (v105 >> 62)
LABEL_685:
              sub_239418A80();
            v106 = operator new(4 * v105);
            v107 = &v106[4 * v102];
            *(_DWORD *)v107 = *(_DWORD *)(v97 + 8);
            v36 = (uint64_t)(v107 + 4);
            if (v99 == v100)
              goto LABEL_103;
LABEL_97:
            v108 = v99 - 4 - v100;
            if (v108 < 0x2C)
              goto LABEL_695;
            if ((unint64_t)(v99 - &v106[v101]) < 0x20)
              goto LABEL_695;
            v109 = (v108 >> 2) + 1;
            v110 = 4 * (v109 & 0x7FFFFFFFFFFFFFF8);
            v111 = &v99[-v110];
            v107 -= v110;
            v112 = &v106[4 * v102 - 16];
            v113 = v99 - 16;
            v114 = v109 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v115 = *(_OWORD *)v113;
              *(v112 - 1) = *((_OWORD *)v113 - 1);
              *v112 = v115;
              v112 -= 2;
              v113 -= 32;
              v114 -= 8;
            }
            while (v114);
            v99 = v111;
            if (v109 != (v109 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_695:
              do
              {
                v116 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *((_DWORD *)v107 - 1) = v116;
                v107 -= 4;
              }
              while (v99 != v100);
            }
          }
          else
          {
            v106 = 0;
            v107 = (char *)(4 * v102);
            *(_DWORD *)(4 * v102) = *(_DWORD *)(v97 + 8);
            v36 = 4 * v102 + 4;
            if (v99 != v100)
              goto LABEL_97;
          }
LABEL_103:
          v691 = v107;
          v692 = (char *)v36;
          v693 = &v106[4 * v105];
          if (v100)
            operator delete(v100);
          goto LABEL_23;
        }
      }
      else
      {
LABEL_83:
        v97 = *(_QWORD *)(v92 + 40) + 16 * v35;
        v99 = v692;
        v98 = v693;
        if (v692 >= v693)
          goto LABEL_84;
      }
      *(_DWORD *)v99 = *(_DWORD *)(v97 + 8);
      v36 = (uint64_t)(v99 + 4);
LABEL_23:
      a1 = v671;
      v692 = (char *)v36;
      ++v35;
      v28 = *(_QWORD *)(*v672 + 40);
      if (v35 >= (uint64_t)(*(_QWORD *)(v28 + 112) - *(_QWORD *)(v28 + 104)) >> 2)
      {
        v29 = *v671;
        goto LABEL_106;
      }
    }
    if (v52 >> 62)
      goto LABEL_685;
    v53 = operator new(4 * v52);
    v54 = &v53[4 * v49];
    *(_DWORD *)v54 = *v43;
    v46 = (uint64_t)(v54 + 4);
    if (v45 == v47)
      goto LABEL_49;
LABEL_43:
    v55 = v45 - 4 - v47;
    if (v55 < 0x2C)
      goto LABEL_696;
    if ((unint64_t)(v45 - &v53[v48]) < 0x20)
      goto LABEL_696;
    v56 = (v55 >> 2) + 1;
    v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
    v58 = &v45[-v57];
    v54 -= v57;
    v59 = &v53[4 * v49 - 16];
    v60 = v45 - 16;
    v61 = v56 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 8;
    }
    while (v61);
    v45 = v58;
    if (v56 != (v56 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_696:
      do
      {
        v63 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *((_DWORD *)v54 - 1) = v63;
        v54 -= 4;
      }
      while (v45 != v47);
    }
    goto LABEL_49;
  }
LABEL_106:
  v117 = *(_QWORD *)(v29 + 40);
  if (*(_QWORD *)(v117 + 112) != *(_QWORD *)(v117 + 104))
  {
    v118 = 0;
    while (1)
    {
      if (((*(_QWORD *)(*a4 + ((v118 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v118) & 1) == 0)
        goto LABEL_110;
      v120 = (uint64_t *)(*(_QWORD *)(v117 + 8) + 16 * *(unsigned int *)(v117 + 176));
      v121 = *v120;
      v122 = (std::__shared_weak_count *)v120[1];
      if (!v122)
        goto LABEL_117;
      v123 = (unint64_t *)&v122->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
      do
        v125 = __ldaxr(v123);
      while (__stlxr(v125 - 1, v123));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
        v126 = (_DWORD *)(*(_QWORD *)(v121 + 40) + 16 * v118);
        v128 = v692;
        v127 = v693;
        if (v692 < v693)
        {
LABEL_118:
          *(_DWORD *)v128 = *v126;
          v129 = (uint64_t)(v128 + 4);
          goto LABEL_139;
        }
      }
      else
      {
LABEL_117:
        v126 = (_DWORD *)(*(_QWORD *)(v121 + 40) + 16 * v118);
        v128 = v692;
        v127 = v693;
        if (v692 < v693)
          goto LABEL_118;
      }
      v130 = v691;
      v131 = v128 - v691;
      v132 = (v128 - v691) >> 2;
      v133 = v132 + 1;
      if ((unint64_t)(v132 + 1) >> 62)
        goto LABEL_686;
      v134 = v127 - v691;
      if (v134 >> 1 > v133)
        v133 = v134 >> 1;
      v135 = (unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v133;
      if (v135)
        break;
      v136 = 0;
      v137 = (char *)(4 * v132);
      *(_DWORD *)(4 * v132) = *v126;
      v129 = 4 * v132 + 4;
      if (v128 != v130)
        goto LABEL_131;
LABEL_137:
      v691 = v137;
      v692 = (char *)v129;
      v693 = &v136[4 * v135];
      if (v130)
        operator delete(v130);
LABEL_139:
      v692 = (char *)v129;
      v147 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v671 + 40) + 8)
                       + 16 * *(unsigned int *)(*(_QWORD *)(*v671 + 40) + 176));
      v148 = *v147;
      v149 = (std::__shared_weak_count *)v147[1];
      if (!v149)
        goto LABEL_144;
      v150 = (unint64_t *)&v149->__shared_owners_;
      do
        v151 = __ldxr(v150);
      while (__stxr(v151 + 1, v150));
      do
        v152 = __ldaxr(v150);
      while (__stlxr(v152 - 1, v150));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
        v153 = *(_QWORD *)(v148 + 40) + 16 * v118;
        v155 = v692;
        v154 = v693;
        if (v692 < v693)
        {
LABEL_145:
          *(_DWORD *)v155 = *(_DWORD *)(v153 + 4);
          v156 = (uint64_t)(v155 + 4);
          goto LABEL_166;
        }
      }
      else
      {
LABEL_144:
        v153 = *(_QWORD *)(v148 + 40) + 16 * v118;
        v155 = v692;
        v154 = v693;
        if (v692 < v693)
          goto LABEL_145;
      }
      v157 = v691;
      v158 = v155 - v691;
      v159 = (v155 - v691) >> 2;
      v160 = v159 + 1;
      if ((unint64_t)(v159 + 1) >> 62)
        goto LABEL_686;
      v161 = v154 - v691;
      if (v161 >> 1 > v160)
        v160 = v161 >> 1;
      if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL)
        v162 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v162 = v160;
      if (v162)
      {
        if (v162 >> 62)
          goto LABEL_689;
        v163 = operator new(4 * v162);
        v164 = &v163[4 * v159];
        *(_DWORD *)v164 = *(_DWORD *)(v153 + 4);
        v156 = (uint64_t)(v164 + 4);
        if (v155 == v157)
          goto LABEL_164;
LABEL_158:
        v165 = v155 - 4 - v157;
        if (v165 < 0x2C)
          goto LABEL_697;
        if ((unint64_t)(v155 - &v163[v158]) < 0x20)
          goto LABEL_697;
        v166 = (v165 >> 2) + 1;
        v167 = 4 * (v166 & 0x7FFFFFFFFFFFFFF8);
        v168 = &v155[-v167];
        v164 -= v167;
        v169 = &v163[4 * v159 - 16];
        v170 = v155 - 16;
        v171 = v166 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v172 = *(_OWORD *)v170;
          *(v169 - 1) = *((_OWORD *)v170 - 1);
          *v169 = v172;
          v169 -= 2;
          v170 -= 32;
          v171 -= 8;
        }
        while (v171);
        v155 = v168;
        if (v166 != (v166 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_697:
          do
          {
            v173 = *((_DWORD *)v155 - 1);
            v155 -= 4;
            *((_DWORD *)v164 - 1) = v173;
            v164 -= 4;
          }
          while (v155 != v157);
        }
        goto LABEL_164;
      }
      v163 = 0;
      v164 = (char *)(4 * v159);
      *(_DWORD *)(4 * v159) = *(_DWORD *)(v153 + 4);
      v156 = 4 * v159 + 4;
      if (v155 != v157)
        goto LABEL_158;
LABEL_164:
      v691 = v164;
      v692 = (char *)v156;
      v693 = &v163[4 * v162];
      if (v157)
        operator delete(v157);
LABEL_166:
      v692 = (char *)v156;
      v174 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v671 + 40) + 8)
                       + 16 * *(unsigned int *)(*(_QWORD *)(*v671 + 40) + 176));
      v175 = *v174;
      v176 = (std::__shared_weak_count *)v174[1];
      if (!v176)
        goto LABEL_171;
      v177 = (unint64_t *)&v176->__shared_owners_;
      do
        v178 = __ldxr(v177);
      while (__stxr(v178 + 1, v177));
      do
        v179 = __ldaxr(v177);
      while (__stlxr(v179 - 1, v177));
      if (!v179)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
        v180 = *(_QWORD *)(v175 + 40) + 16 * v118;
        v182 = v692;
        v181 = v693;
        if (v692 >= v693)
        {
LABEL_172:
          v183 = v691;
          v184 = v182 - v691;
          v185 = (v182 - v691) >> 2;
          v186 = v185 + 1;
          if ((unint64_t)(v185 + 1) >> 62)
LABEL_686:
            sub_2394189F8();
          v187 = v181 - v691;
          if (v187 >> 1 > v186)
            v186 = v187 >> 1;
          if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
            v188 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v188 = v186;
          if (v188)
          {
            if (v188 >> 62)
LABEL_689:
              sub_239418A80();
            v189 = operator new(4 * v188);
            v190 = &v189[4 * v185];
            *(_DWORD *)v190 = *(_DWORD *)(v180 + 8);
            v119 = (uint64_t)(v190 + 4);
            if (v182 == v183)
              goto LABEL_191;
LABEL_185:
            v191 = v182 - 4 - v183;
            if (v191 < 0x2C)
              goto LABEL_698;
            if ((unint64_t)(v182 - &v189[v184]) < 0x20)
              goto LABEL_698;
            v192 = (v191 >> 2) + 1;
            v193 = 4 * (v192 & 0x7FFFFFFFFFFFFFF8);
            v194 = &v182[-v193];
            v190 -= v193;
            v195 = &v189[4 * v185 - 16];
            v196 = v182 - 16;
            v197 = v192 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v198 = *(_OWORD *)v196;
              *(v195 - 1) = *((_OWORD *)v196 - 1);
              *v195 = v198;
              v195 -= 2;
              v196 -= 32;
              v197 -= 8;
            }
            while (v197);
            v182 = v194;
            if (v192 != (v192 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_698:
              do
              {
                v199 = *((_DWORD *)v182 - 1);
                v182 -= 4;
                *((_DWORD *)v190 - 1) = v199;
                v190 -= 4;
              }
              while (v182 != v183);
            }
          }
          else
          {
            v189 = 0;
            v190 = (char *)(4 * v185);
            *(_DWORD *)(4 * v185) = *(_DWORD *)(v180 + 8);
            v119 = 4 * v185 + 4;
            if (v182 != v183)
              goto LABEL_185;
          }
LABEL_191:
          v691 = v190;
          v692 = (char *)v119;
          v693 = &v189[4 * v188];
          if (v183)
            operator delete(v183);
          goto LABEL_109;
        }
      }
      else
      {
LABEL_171:
        v180 = *(_QWORD *)(v175 + 40) + 16 * v118;
        v182 = v692;
        v181 = v693;
        if (v692 >= v693)
          goto LABEL_172;
      }
      *(_DWORD *)v182 = *(_DWORD *)(v180 + 8);
      v119 = (uint64_t)(v182 + 4);
LABEL_109:
      a1 = v671;
      v692 = (char *)v119;
      v29 = *v671;
LABEL_110:
      ++v118;
      v117 = *(_QWORD *)(v29 + 40);
      if (v118 >= (uint64_t)(*(_QWORD *)(v117 + 112) - *(_QWORD *)(v117 + 104)) >> 2)
        goto LABEL_193;
    }
    if (v135 >> 62)
      goto LABEL_689;
    v136 = operator new(4 * v135);
    v137 = &v136[4 * v132];
    *(_DWORD *)v137 = *v126;
    v129 = (uint64_t)(v137 + 4);
    if (v128 == v130)
      goto LABEL_137;
LABEL_131:
    v138 = v128 - 4 - v130;
    if (v138 < 0x2C)
      goto LABEL_699;
    if ((unint64_t)(v128 - &v136[v131]) < 0x20)
      goto LABEL_699;
    v139 = (v138 >> 2) + 1;
    v140 = 4 * (v139 & 0x7FFFFFFFFFFFFFF8);
    v141 = &v128[-v140];
    v137 -= v140;
    v142 = &v136[4 * v132 - 16];
    v143 = v128 - 16;
    v144 = v139 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v145 = *(_OWORD *)v143;
      *(v142 - 1) = *((_OWORD *)v143 - 1);
      *v142 = v145;
      v142 -= 2;
      v143 -= 32;
      v144 -= 8;
    }
    while (v144);
    v128 = v141;
    if (v139 != (v139 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_699:
      do
      {
        v146 = *((_DWORD *)v128 - 1);
        v128 -= 4;
        *((_DWORD *)v137 - 1) = v146;
        v137 -= 4;
      }
      while (v128 != v130);
    }
    goto LABEL_137;
  }
LABEL_193:
  v200 = operator new(0xCuLL);
  v686 = v200 + 3;
  v687 = (char *)(v200 + 3);
  *(_QWORD *)v200 = -1;
  v200[2] = -1;
  v685 = v200;
  v201 = v672;
  v202 = *(_QWORD *)(*v672 + 40);
  if (*(_QWORD *)(v202 + 160) == *(_QWORD *)(v202 + 152))
    goto LABEL_265;
  v203 = 0;
  do
  {
    LODWORD(__p[0]) = v203;
    sub_23996362C(v202, (unsigned int *)__p, (uint64_t)&v685);
    v205 = v685;
    v206 = *(_DWORD *)v685;
    v208 = v689;
    v207 = v690;
    if (v689 < v690)
    {
      *(_DWORD *)v689 = v206;
      v209 = v208 + 4;
      goto LABEL_218;
    }
    v210 = (char *)v688;
    v211 = v689 - (_BYTE *)v688;
    v212 = (v689 - (_BYTE *)v688) >> 2;
    v213 = v212 + 1;
    if ((unint64_t)(v212 + 1) >> 62)
      goto LABEL_683;
    v214 = v690 - (_BYTE *)v688;
    if ((v690 - (_BYTE *)v688) >> 1 > v213)
      v213 = v214 >> 1;
    if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL)
      v215 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v215 = v213;
    if (v215)
    {
      if (v215 >> 62)
        goto LABEL_687;
      v216 = (char *)operator new(4 * v215);
      v217 = &v216[4 * v212];
      *(_DWORD *)v217 = v206;
      v209 = v217 + 4;
      if (v208 == v210)
        goto LABEL_216;
LABEL_210:
      v218 = v208 - 4 - v210;
      if (v218 < 0x2C)
        goto LABEL_700;
      if ((unint64_t)(v208 - &v216[v211]) < 0x20)
        goto LABEL_700;
      v219 = (v218 >> 2) + 1;
      v220 = 4 * (v219 & 0x7FFFFFFFFFFFFFF8);
      v221 = &v208[-v220];
      v217 -= v220;
      v222 = &v216[4 * v212 - 16];
      v223 = v208 - 16;
      v224 = v219 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v225 = *(_OWORD *)v223;
        *((_OWORD *)v222 - 1) = *((_OWORD *)v223 - 1);
        *(_OWORD *)v222 = v225;
        v222 -= 32;
        v223 -= 32;
        v224 -= 8;
      }
      while (v224);
      v208 = v221;
      if (v219 != (v219 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_700:
        do
        {
          v226 = *((_DWORD *)v208 - 1);
          v208 -= 4;
          *((_DWORD *)v217 - 1) = v226;
          v217 -= 4;
        }
        while (v208 != v210);
      }
      goto LABEL_216;
    }
    v216 = 0;
    v217 = (char *)(4 * v212);
    *(_DWORD *)(4 * v212) = v206;
    v209 = (char *)(4 * v212 + 4);
    if (v208 != v210)
      goto LABEL_210;
LABEL_216:
    v207 = &v216[4 * v215];
    v688 = v217;
    v689 = v209;
    v690 = v207;
    if (v210)
    {
      operator delete(v210);
      v205 = v685;
      v207 = v690;
    }
LABEL_218:
    v689 = v209;
    v227 = v205[1];
    if (v209 < v207)
    {
      *(_DWORD *)v209 = v227;
      v228 = v209 + 4;
      goto LABEL_241;
    }
    v229 = (char *)v688;
    v230 = v209 - (_BYTE *)v688;
    v231 = (v209 - (_BYTE *)v688) >> 2;
    v232 = v231 + 1;
    if ((unint64_t)(v231 + 1) >> 62)
      goto LABEL_683;
    v233 = v207 - (_BYTE *)v688;
    if (v233 >> 1 > v232)
      v232 = v233 >> 1;
    if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL)
      v234 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v234 = v232;
    if (v234)
    {
      if (v234 >> 62)
        goto LABEL_687;
      v235 = operator new(4 * v234);
      v236 = &v235[4 * v231];
      *(_DWORD *)v236 = v227;
      v228 = v236 + 4;
      if (v209 == v229)
        goto LABEL_239;
    }
    else
    {
      v235 = 0;
      v236 = (char *)(4 * v231);
      *(_DWORD *)(4 * v231) = v227;
      v228 = (char *)(4 * v231 + 4);
      if (v209 == v229)
        goto LABEL_239;
    }
    v237 = v209 - 4 - v229;
    if (v237 < 0x2C)
    {
      v238 = v209;
      goto LABEL_238;
    }
    if ((unint64_t)(v209 - v235 - v230) < 0x20)
    {
      v238 = v209;
      do
      {
LABEL_238:
        v245 = *((_DWORD *)v238 - 1);
        v238 -= 4;
        *((_DWORD *)v236 - 1) = v245;
        v236 -= 4;
      }
      while (v238 != v229);
      goto LABEL_239;
    }
    v239 = (v237 >> 2) + 1;
    v240 = 4 * (v239 & 0x7FFFFFFFFFFFFFF8);
    v238 = &v209[-v240];
    v236 -= v240;
    v241 = &v235[4 * v231 - 16];
    v242 = (__int128 *)(v209 - 16);
    v243 = v239 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v244 = *v242;
      *(v241 - 1) = *(v242 - 1);
      *v241 = v244;
      v241 -= 2;
      v242 -= 2;
      v243 -= 8;
    }
    while (v243);
    if (v239 != (v239 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_238;
LABEL_239:
    v207 = &v235[4 * v234];
    v688 = v236;
    v689 = v228;
    v690 = v207;
    if (v229)
    {
      operator delete(v229);
      v205 = v685;
      v207 = v690;
    }
LABEL_241:
    v689 = v228;
    v246 = v205[2];
    if (v228 < v207)
    {
      *(_DWORD *)v228 = v246;
      v204 = (uint64_t)(v228 + 4);
      a1 = v671;
      v201 = v672;
      goto LABEL_196;
    }
    v247 = (char *)v688;
    v248 = v228 - (_BYTE *)v688;
    v249 = (v228 - (_BYTE *)v688) >> 2;
    v250 = v249 + 1;
    if ((unint64_t)(v249 + 1) >> 62)
LABEL_683:
      sub_2394189F8();
    v251 = v207 - (_BYTE *)v688;
    if (v251 >> 1 > v250)
      v250 = v251 >> 1;
    if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL)
      v252 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v252 = v250;
    if (v252)
    {
      if (v252 >> 62)
LABEL_687:
        sub_239418A80();
      v253 = operator new(4 * v252);
      v254 = &v253[4 * v249];
      *v254 = v246;
      v204 = (uint64_t)(v254 + 1);
      if (v228 == v247)
      {
LABEL_258:
        a1 = v671;
        v201 = v672;
        v688 = v254;
        v689 = (char *)v204;
        v690 = &v253[4 * v252];
        if (!v247)
          goto LABEL_196;
LABEL_259:
        operator delete(v247);
        goto LABEL_196;
      }
    }
    else
    {
      v253 = 0;
      v254 = (_DWORD *)(4 * v249);
      *(_DWORD *)(4 * v249) = v246;
      v204 = 4 * v249 + 4;
      if (v228 == v247)
        goto LABEL_258;
    }
    v255 = v228 - 4 - v247;
    v201 = v672;
    if (v255 < 0x2C || (unint64_t)(v228 - v253 - v248) < 0x20)
    {
      v256 = v228;
      a1 = v671;
      do
      {
LABEL_254:
        v257 = *((_DWORD *)v256 - 1);
        v256 -= 4;
        *--v254 = v257;
      }
      while (v256 != v247);
      goto LABEL_255;
    }
    v258 = (v255 >> 2) + 1;
    v259 = 4 * (v258 & 0x7FFFFFFFFFFFFFF8);
    v256 = &v228[-v259];
    v254 = (_DWORD *)((char *)v254 - v259);
    v260 = &v253[4 * v249 - 16];
    v261 = v228 - 16;
    v262 = v258 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v263 = *(_OWORD *)v261;
      *(v260 - 1) = *((_OWORD *)v261 - 1);
      *v260 = v263;
      v260 -= 2;
      v261 -= 32;
      v262 -= 8;
    }
    while (v262);
    a1 = v671;
    if (v258 != (v258 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_254;
LABEL_255:
    v688 = v254;
    v689 = (char *)v204;
    v690 = &v253[4 * v252];
    if (v247)
      goto LABEL_259;
LABEL_196:
    v689 = (char *)v204;
    ++v203;
    v202 = *(_QWORD *)(*v201 + 40);
  }
  while (v203 < (uint64_t)(*(_QWORD *)(v202 + 160) - *(_QWORD *)(v202 + 152)) >> 2);
  v29 = *a1;
LABEL_265:
  v264 = *(_QWORD *)(v29 + 40);
  if (*(_QWORD *)(v264 + 160) != *(_QWORD *)(v264 + 152))
  {
    v265 = 0;
    while (1)
    {
      LODWORD(__p[0]) = v265;
      sub_23996362C(v264, (unsigned int *)__p, (uint64_t)&v685);
      v267 = (unsigned int *)v685;
      v268 = *(unsigned int *)v685;
      v269 = *a3;
      v271 = v689;
      v270 = v690;
      if (v689 < v690)
      {
        *(_DWORD *)v689 = *(_DWORD *)(v269 + 4 * v268);
        v272 = v271 + 4;
        goto LABEL_290;
      }
      v273 = (char *)v688;
      v274 = v689 - (_BYTE *)v688;
      v275 = (v689 - (_BYTE *)v688) >> 2;
      v276 = v275 + 1;
      if ((unint64_t)(v275 + 1) >> 62)
        goto LABEL_684;
      v277 = v690 - (_BYTE *)v688;
      if ((v690 - (_BYTE *)v688) >> 1 > v276)
        v276 = v277 >> 1;
      v278 = (unint64_t)v277 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v276;
      if (v278)
        break;
      v280 = 0;
      v281 = (char *)(4 * v275);
      *(_DWORD *)(4 * v275) = *(_DWORD *)(v269 + 4 * v268);
      v272 = (char *)(4 * v275 + 4);
      if (v271 != v273)
        goto LABEL_282;
LABEL_288:
      v270 = &v280[4 * v278];
      v688 = v281;
      v689 = v272;
      v690 = v270;
      if (v273)
      {
        operator delete(v273);
        v267 = (unsigned int *)v685;
        v269 = *a3;
        v270 = v690;
      }
LABEL_290:
      v689 = v272;
      v291 = v267[1];
      if (v272 < v270)
      {
        *(_DWORD *)v272 = *(_DWORD *)(v269 + 4 * v291);
        v292 = v272 + 4;
        goto LABEL_313;
      }
      v293 = (char *)v688;
      v294 = v272 - (_BYTE *)v688;
      v295 = (v272 - (_BYTE *)v688) >> 2;
      v296 = v295 + 1;
      if ((unint64_t)(v295 + 1) >> 62)
        goto LABEL_684;
      v297 = v270 - (_BYTE *)v688;
      if (v297 >> 1 > v296)
        v296 = v297 >> 1;
      if ((unint64_t)v297 >= 0x7FFFFFFFFFFFFFFCLL)
        v298 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v298 = v296;
      if (v298)
      {
        if (v298 >> 62)
          goto LABEL_688;
        v299 = v269;
        v300 = operator new(4 * v298);
        v269 = v299;
        v301 = &v300[4 * v295];
        *(_DWORD *)v301 = *(_DWORD *)(v299 + 4 * v291);
        v292 = v301 + 4;
        if (v272 == v293)
          goto LABEL_311;
      }
      else
      {
        v300 = 0;
        v301 = (char *)(4 * v295);
        *(_DWORD *)(4 * v295) = *(_DWORD *)(v269 + 4 * v291);
        v292 = (char *)(4 * v295 + 4);
        if (v272 == v293)
          goto LABEL_311;
      }
      v302 = v272 - 4 - v293;
      if (v302 < 0x2C)
      {
        v303 = v272;
        goto LABEL_310;
      }
      if ((unint64_t)(v272 - v300 - v294) < 0x20)
      {
        v303 = v272;
        do
        {
LABEL_310:
          v310 = *((_DWORD *)v303 - 1);
          v303 -= 4;
          *((_DWORD *)v301 - 1) = v310;
          v301 -= 4;
        }
        while (v303 != v293);
        goto LABEL_311;
      }
      v304 = (v302 >> 2) + 1;
      v305 = 4 * (v304 & 0x7FFFFFFFFFFFFFF8);
      v303 = &v272[-v305];
      v301 -= v305;
      v306 = &v300[4 * v295 - 16];
      v307 = (__int128 *)(v272 - 16);
      v308 = v304 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v309 = *v307;
        *(v306 - 1) = *(v307 - 1);
        *v306 = v309;
        v306 -= 2;
        v307 -= 2;
        v308 -= 8;
      }
      while (v308);
      if (v304 != (v304 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_310;
LABEL_311:
      v270 = &v300[4 * v298];
      v688 = v301;
      v689 = v292;
      v690 = v270;
      if (v293)
      {
        operator delete(v293);
        v267 = (unsigned int *)v685;
        v269 = *a3;
        v270 = v690;
      }
LABEL_313:
      v689 = v292;
      v311 = v267[2];
      if (v292 < v270)
      {
        *(_DWORD *)v292 = *(_DWORD *)(v269 + 4 * v311);
        v266 = (uint64_t)(v292 + 4);
        a1 = v671;
        v201 = v672;
      }
      else
      {
        v312 = (char *)v688;
        v313 = v292 - (_BYTE *)v688;
        v314 = (v292 - (_BYTE *)v688) >> 2;
        v315 = v314 + 1;
        if ((unint64_t)(v314 + 1) >> 62)
LABEL_684:
          sub_2394189F8();
        v316 = v270 - (_BYTE *)v688;
        if (v316 >> 1 > v315)
          v315 = v316 >> 1;
        if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFFCLL)
          v317 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v317 = v315;
        if (v317)
        {
          if (v317 >> 62)
LABEL_688:
            sub_239418A80();
          v318 = v269;
          v319 = operator new(4 * v317);
          v320 = &v319[4 * v314];
          *v320 = *(_DWORD *)(v318 + 4 * v311);
          v266 = (uint64_t)(v320 + 1);
          if (v292 != v312)
          {
LABEL_323:
            v321 = v292 - 4 - v312;
            v201 = v672;
            if (v321 < 0x2C || (unint64_t)(v292 - v319 - v313) < 0x20)
            {
              v322 = v292;
              a1 = v671;
              goto LABEL_326;
            }
            v324 = (v321 >> 2) + 1;
            v325 = 4 * (v324 & 0x7FFFFFFFFFFFFFF8);
            v322 = &v292[-v325];
            v320 = (_DWORD *)((char *)v320 - v325);
            v326 = &v319[4 * v314 - 16];
            v327 = v292 - 16;
            v328 = v324 & 0x7FFFFFFFFFFFFFF8;
            a1 = v671;
            do
            {
              v329 = *(_OWORD *)v327;
              *(v326 - 1) = *((_OWORD *)v327 - 1);
              *v326 = v329;
              v326 -= 2;
              v327 -= 32;
              v328 -= 8;
            }
            while (v328);
            if (v324 != (v324 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_326:
                v323 = *((_DWORD *)v322 - 1);
                v322 -= 4;
                *--v320 = v323;
              }
              while (v322 != v312);
            }
            v688 = v320;
            v689 = (char *)v266;
            v690 = &v319[4 * v317];
            if (!v312)
              goto LABEL_268;
LABEL_331:
            operator delete(v312);
            goto LABEL_268;
          }
        }
        else
        {
          v319 = 0;
          v320 = (_DWORD *)(4 * v314);
          *(_DWORD *)(4 * v314) = *(_DWORD *)(v269 + 4 * v311);
          v266 = 4 * v314 + 4;
          if (v292 != v312)
            goto LABEL_323;
        }
        a1 = v671;
        v201 = v672;
        v688 = v320;
        v689 = (char *)v266;
        v690 = &v319[4 * v317];
        if (v312)
          goto LABEL_331;
      }
LABEL_268:
      v689 = (char *)v266;
      ++v265;
      v264 = *(_QWORD *)(*a1 + 40);
      if (v265 >= (uint64_t)(*(_QWORD *)(v264 + 160) - *(_QWORD *)(v264 + 152)) >> 2)
        goto LABEL_336;
    }
    if (v278 >> 62)
      goto LABEL_688;
    v279 = *a3;
    v280 = (char *)operator new(4 * v278);
    v269 = v279;
    v281 = &v280[4 * v275];
    *(_DWORD *)v281 = *(_DWORD *)(v279 + 4 * v268);
    v272 = v281 + 4;
    if (v271 == v273)
      goto LABEL_288;
LABEL_282:
    v282 = v271 - 4 - v273;
    if (v282 < 0x2C)
      goto LABEL_701;
    if ((unint64_t)(v271 - &v280[v274]) < 0x20)
      goto LABEL_701;
    v283 = (v282 >> 2) + 1;
    v284 = 4 * (v283 & 0x7FFFFFFFFFFFFFF8);
    v285 = &v271[-v284];
    v281 -= v284;
    v286 = &v280[4 * v275 - 16];
    v287 = v271 - 16;
    v288 = v283 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v289 = *(_OWORD *)v287;
      *((_OWORD *)v286 - 1) = *((_OWORD *)v287 - 1);
      *(_OWORD *)v286 = v289;
      v286 -= 32;
      v287 -= 32;
      v288 -= 8;
    }
    while (v288);
    v271 = v285;
    if (v283 != (v283 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_701:
      do
      {
        v290 = *((_DWORD *)v271 - 1);
        v271 -= 4;
        *((_DWORD *)v281 - 1) = v290;
        v281 -= 4;
      }
      while (v271 != v273);
    }
    goto LABEL_288;
  }
LABEL_336:
  sub_239946A18(*a7, &v691, (uint64_t *)&v688);
  v683 = -1;
  v684 = -1;
  v330 = (_QWORD *)*a7;
  HIBYTE(v682) = 15;
  strcpy((char *)__p, "v:index_in_root");
  sub_23999C7E0(v330, &v684, (uint64_t)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v331 = (_QWORD *)*a7;
  HIBYTE(v682) = 12;
  strcpy((char *)__p, "v:importance");
  sub_239992B6C(v331, &v683, (uint64_t)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v332 = *(_QWORD *)(*a1 + 40);
  HIBYTE(v682) = 15;
  strcpy((char *)__p, "v:index_in_root");
  LODWORD(v674) = -1;
  v333 = sub_23999C498((uint64_t **)(v332 + 8), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v334 = *(_QWORD *)(*v201 + 40);
  HIBYTE(v682) = 15;
  strcpy((char *)__p, "v:index_in_root");
  LODWORD(v674) = -1;
  v335 = sub_23999C498((uint64_t **)(v334 + 8), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v336 = *(_QWORD *)(*a1 + 40);
  HIBYTE(v682) = 12;
  strcpy((char *)__p, "v:importance");
  LODWORD(v674) = 0;
  v337 = sub_2399346C0((uint64_t **)(v336 + 8), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v338 = *(_QWORD *)(*v201 + 40);
  HIBYTE(v682) = 12;
  strcpy((char *)__p, "v:importance");
  LODWORD(v674) = 0;
  v339 = sub_2399346C0((uint64_t **)(v338 + 8), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v340 = *(_QWORD **)(*v201 + 40);
  if (v340[14] != v340[13])
  {
    v341 = 0;
    v342 = v335;
    do
    {
      v343 = (uint64_t *)(v340[1] + 16 * v342);
      v344 = *v343;
      v345 = (std::__shared_weak_count *)v343[1];
      if (v345)
      {
        v346 = (unint64_t *)&v345->__shared_owners_;
        do
          v347 = __ldxr(v346);
        while (__stxr(v347 + 1, v346));
        do
          v348 = __ldaxr(v346);
        while (__stlxr(v348 - 1, v346));
        if (!v348)
        {
          ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
          std::__shared_weak_count::__release_weak(v345);
        }
      }
      v349 = *(_QWORD *)(v344 + 40);
      v350 = (uint64_t *)(*(_QWORD *)(*a7 + 8) + 16 * v684);
      v351 = *v350;
      v352 = (std::__shared_weak_count *)v350[1];
      if (v352)
      {
        v353 = (unint64_t *)&v352->__shared_owners_;
        do
          v354 = __ldxr(v353);
        while (__stxr(v354 + 1, v353));
        do
          v355 = __ldaxr(v353);
        while (__stlxr(v355 - 1, v353));
        if (!v355)
        {
          ((void (*)(std::__shared_weak_count *))v352->__on_zero_shared)(v352);
          std::__shared_weak_count::__release_weak(v352);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v351 + 40) + 4 * v341) = *(_DWORD *)(v349 + 4 * v341);
      v356 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v201 + 40) + 8) + 16 * v339);
      v357 = *v356;
      v358 = (std::__shared_weak_count *)v356[1];
      if (v358)
      {
        v359 = (unint64_t *)&v358->__shared_owners_;
        do
          v360 = __ldxr(v359);
        while (__stxr(v360 + 1, v359));
        do
          v361 = __ldaxr(v359);
        while (__stlxr(v361 - 1, v359));
        if (!v361)
        {
          ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
          std::__shared_weak_count::__release_weak(v358);
        }
      }
      v362 = *(_DWORD *)(*(_QWORD *)(v357 + 40) + 4 * v341);
      v363 = (uint64_t *)(*(_QWORD *)(*a7 + 8) + 16 * v683);
      v364 = *v363;
      v365 = (std::__shared_weak_count *)v363[1];
      if (v365)
      {
        v366 = (unint64_t *)&v365->__shared_owners_;
        do
          v367 = __ldxr(v366);
        while (__stxr(v367 + 1, v366));
        do
          v368 = __ldaxr(v366);
        while (__stlxr(v368 - 1, v366));
        if (!v368)
        {
          ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
          std::__shared_weak_count::__release_weak(v365);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v364 + 40) + 4 * v341++) = v362;
      v340 = *(_QWORD **)(*v201 + 40);
    }
    while (v341 < (uint64_t)(v340[14] - v340[13]) >> 2);
  }
  v369 = *v671;
  v370 = *(_QWORD **)(*v671 + 40);
  if (v370[14] != v370[13])
  {
    v371 = 0;
    v372 = v333;
    do
    {
      if (((*(_QWORD *)(*a4 + ((v371 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v371) & 1) != 0)
      {
        v373 = (uint64_t *)(v370[1] + 16 * v372);
        v374 = *v373;
        v375 = (std::__shared_weak_count *)v373[1];
        if (v375)
        {
          v376 = (unint64_t *)&v375->__shared_owners_;
          do
            v377 = __ldxr(v376);
          while (__stxr(v377 + 1, v376));
          do
            v378 = __ldaxr(v376);
          while (__stlxr(v378 - 1, v376));
          if (!v378)
          {
            ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
            std::__shared_weak_count::__release_weak(v375);
          }
        }
        v379 = *(_QWORD *)(v374 + 40);
        v380 = (uint64_t *)(*(_QWORD *)(*a7 + 8) + 16 * v684);
        v381 = *v380;
        v382 = (std::__shared_weak_count *)v380[1];
        if (v382)
        {
          v383 = (unint64_t *)&v382->__shared_owners_;
          do
            v384 = __ldxr(v383);
          while (__stxr(v384 + 1, v383));
          do
            v385 = __ldaxr(v383);
          while (__stlxr(v385 - 1, v383));
          if (!v385)
          {
            ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
            std::__shared_weak_count::__release_weak(v382);
          }
        }
        *(_DWORD *)(*(_QWORD *)(v381 + 40) + 4 * *(unsigned int *)(*a3 + 4 * v371)) = *(_DWORD *)(v379 + 4 * v371);
        v386 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v671 + 40) + 8) + 16 * v337);
        v387 = *v386;
        v388 = (std::__shared_weak_count *)v386[1];
        if (v388)
        {
          v389 = (unint64_t *)&v388->__shared_owners_;
          do
            v390 = __ldxr(v389);
          while (__stxr(v390 + 1, v389));
          do
            v391 = __ldaxr(v389);
          while (__stlxr(v391 - 1, v389));
          if (!v391)
          {
            ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
            std::__shared_weak_count::__release_weak(v388);
          }
        }
        v392 = *(_DWORD *)(*(_QWORD *)(v387 + 40) + 4 * v371);
        v393 = (uint64_t *)(*(_QWORD *)(*a7 + 8) + 16 * v683);
        v394 = *v393;
        v395 = (std::__shared_weak_count *)v393[1];
        if (v395)
        {
          v396 = (unint64_t *)&v395->__shared_owners_;
          do
            v397 = __ldxr(v396);
          while (__stxr(v397 + 1, v396));
          do
            v398 = __ldaxr(v396);
          while (__stlxr(v398 - 1, v396));
          if (!v398)
          {
            ((void (*)(std::__shared_weak_count *))v395->__on_zero_shared)(v395);
            std::__shared_weak_count::__release_weak(v395);
          }
        }
        *(_DWORD *)(*(_QWORD *)(v394 + 40) + 4 * *(unsigned int *)(*a3 + 4 * v371)) = v392;
        v369 = *v671;
      }
      ++v371;
      v370 = *(_QWORD **)(v369 + 40);
    }
    while (v371 < (uint64_t)(v370[14] - v370[13]) >> 2);
  }
  v680 = -1;
  v399 = (_QWORD *)*a7;
  HIBYTE(v682) = 15;
  strcpy((char *)__p, "f:index_in_root");
  sub_23999C8D8(v399, &v680, (uint64_t)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v400 = *(_QWORD *)(*v671 + 40);
  HIBYTE(v682) = 15;
  strcpy((char *)__p, "f:index_in_root");
  LODWORD(v674) = -1;
  v401 = sub_23998FA20((uint64_t **)(v400 + 56), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v402 = *(_QWORD *)(*v201 + 40);
  HIBYTE(v682) = 15;
  strcpy((char *)__p, "f:index_in_root");
  LODWORD(v674) = -1;
  v403 = sub_23998FA20((uint64_t **)(v402 + 56), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v404 = *(_QWORD **)(*v201 + 40);
  if (v404[20] != v404[19])
  {
    v405 = 0;
    v406 = v403;
    do
    {
      v407 = (uint64_t *)(v404[7] + 16 * v406);
      v408 = *v407;
      v409 = (std::__shared_weak_count *)v407[1];
      if (v409)
      {
        v410 = (unint64_t *)&v409->__shared_owners_;
        do
          v411 = __ldxr(v410);
        while (__stxr(v411 + 1, v410));
        do
          v412 = __ldaxr(v410);
        while (__stlxr(v412 - 1, v410));
        if (!v412)
        {
          ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
          std::__shared_weak_count::__release_weak(v409);
        }
      }
      v413 = *(_QWORD *)(v408 + 40);
      v414 = (uint64_t *)(*(_QWORD *)(*a7 + 56) + 16 * v680);
      v415 = *v414;
      v416 = (std::__shared_weak_count *)v414[1];
      if (v416)
      {
        v417 = (unint64_t *)&v416->__shared_owners_;
        do
          v418 = __ldxr(v417);
        while (__stxr(v418 + 1, v417));
        do
          v419 = __ldaxr(v417);
        while (__stlxr(v419 - 1, v417));
        if (!v419)
        {
          ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
          std::__shared_weak_count::__release_weak(v416);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v415 + 40) + 4 * v405) = *(_DWORD *)(v413 + 4 * v405);
      ++v405;
      v404 = *(_QWORD **)(*v672 + 40);
    }
    while (v405 < (uint64_t)(v404[20] - v404[19]) >> 2);
  }
  v420 = *(_QWORD **)(*v671 + 40);
  if (v420[20] != v420[19])
  {
    v421 = 0;
    v422 = v401;
    do
    {
      v423 = (uint64_t *)(v420[7] + 16 * v422);
      v424 = *v423;
      v425 = (std::__shared_weak_count *)v423[1];
      if (v425)
      {
        v426 = (unint64_t *)&v425->__shared_owners_;
        do
          v427 = __ldxr(v426);
        while (__stxr(v427 + 1, v426));
        do
          v428 = __ldaxr(v426);
        while (__stlxr(v428 - 1, v426));
        if (!v428)
        {
          ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
          std::__shared_weak_count::__release_weak(v425);
        }
      }
      v429 = *(_QWORD *)(v424 + 40);
      v430 = (uint64_t *)(*(_QWORD *)(*a7 + 56) + 16 * v680);
      v431 = *v430;
      v432 = (std::__shared_weak_count *)v430[1];
      if (v432)
      {
        v433 = (unint64_t *)&v432->__shared_owners_;
        do
          v434 = __ldxr(v433);
        while (__stxr(v434 + 1, v433));
        do
          v435 = __ldaxr(v433);
        while (__stlxr(v435 - 1, v433));
        if (!v435)
        {
          ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
          std::__shared_weak_count::__release_weak(v432);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v431 + 40)
                + 4
                * (v421
                 + ((*(_QWORD *)(*(_QWORD *)(*v672 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*v672 + 40) + 152)) >> 2))) = *(_DWORD *)(v429 + 4 * v421);
      ++v421;
      v420 = *(_QWORD **)(*v671 + 40);
    }
    while (v421 < (uint64_t)(v420[20] - v420[19]) >> 2);
  }
  v679 = -1;
  v436 = *a7;
  HIBYTE(v682) = 6;
  strcpy((char *)__p, "f:area");
  LODWORD(v674) = 0;
  v437 = sub_23998EE84((uint64_t **)(v436 + 56), (uint64_t)&v674, (unsigned __int8 *)__p);
  v438 = v437;
  v679 = v437;
  if (SHIBYTE(v682) < 0)
  {
    operator delete(__p[0]);
    if (v438 == -1)
    {
LABEL_444:
      v439 = (_QWORD *)*a7;
      HIBYTE(v682) = 6;
      strcpy((char *)__p, "f:area");
      sub_239994DD0(v439, &v679, (uint64_t)__p);
      if (SHIBYTE(v682) < 0)
        operator delete(__p[0]);
    }
  }
  else if (v437 == -1)
  {
    goto LABEL_444;
  }
  v678 = -1;
  v440 = *a7;
  HIBYTE(v682) = 8;
  strcpy((char *)__p, "h:length");
  LODWORD(v674) = 0;
  v441 = sub_23998EE84((uint64_t **)(v440 + 32), (uint64_t)&v674, (unsigned __int8 *)__p);
  v442 = v441;
  v678 = v441;
  if (SHIBYTE(v682) < 0)
  {
    operator delete(__p[0]);
    if (v442 == -1)
    {
LABEL_450:
      v443 = (_QWORD *)*a7;
      HIBYTE(v682) = 8;
      strcpy((char *)__p, "h:length");
      sub_239994EC4(v443, &v678, (uint64_t)__p);
      if (SHIBYTE(v682) < 0)
        operator delete(__p[0]);
    }
  }
  else if (v441 == -1)
  {
    goto LABEL_450;
  }
  v444 = *(_QWORD *)(*v671 + 40);
  HIBYTE(v682) = 6;
  strcpy((char *)__p, "f:area");
  LODWORD(v674) = 0;
  v445 = sub_23998EE84((uint64_t **)(v444 + 56), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v446 = *(_QWORD *)(*v672 + 40);
  HIBYTE(v682) = 6;
  strcpy((char *)__p, "f:area");
  LODWORD(v674) = 0;
  v447 = sub_23998EE84((uint64_t **)(v446 + 56), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v448 = *(_QWORD *)(*v671 + 40);
  HIBYTE(v682) = 5;
  strcpy((char *)__p, "f:imt");
  v674 = 0;
  v675 = 0;
  v449 = sub_2394E5F40((uint64_t **)(v448 + 56), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v450 = *(_QWORD *)(*v672 + 40);
  HIBYTE(v682) = 5;
  strcpy((char *)__p, "f:imt");
  v674 = 0;
  v675 = 0;
  v451 = sub_2394E5F40((uint64_t **)(v450 + 56), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v452 = *(_QWORD *)(*v671 + 40);
  HIBYTE(v682) = 8;
  strcpy((char *)__p, "h:length");
  LODWORD(v674) = 0;
  v664 = sub_23998EE84((uint64_t **)(v452 + 32), (uint64_t)&v674, (unsigned __int8 *)__p);
  v665 = v449;
  v666 = v445;
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v453 = *(_QWORD *)(*v672 + 40);
  HIBYTE(v682) = 8;
  strcpy((char *)__p, "h:length");
  LODWORD(v674) = 0;
  v454 = sub_23998EE84((uint64_t **)(v453 + 32), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
  {
    operator delete(__p[0]);
    v667 = -1;
    v677 = -1;
    if (!a10)
      goto LABEL_472;
  }
  else
  {
    v667 = -1;
    v677 = -1;
    if (!a10)
      goto LABEL_472;
  }
  v455 = (_QWORD *)*a7;
  HIBYTE(v682) = 15;
  strcpy((char *)__p, "h:signal_length");
  sub_239994EC4(v455, &v677, (uint64_t)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v456 = *(_QWORD *)(*v671 + 40);
  HIBYTE(v682) = 15;
  strcpy((char *)__p, "h:signal_length");
  LODWORD(v674) = 0;
  sub_23998EE84((uint64_t **)(v456 + 32), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
  v457 = *(_QWORD *)(*v672 + 40);
  HIBYTE(v682) = 15;
  strcpy((char *)__p, "h:signal_length");
  LODWORD(v674) = 0;
  v667 = sub_23998EE84((uint64_t **)(v457 + 32), (uint64_t)&v674, (unsigned __int8 *)__p);
  if (SHIBYTE(v682) < 0)
    operator delete(__p[0]);
LABEL_472:
  v458 = operator new(0xCuLL);
  __p[1] = v458 + 3;
  v682 = (char *)(v458 + 3);
  *(_QWORD *)v458 = -1;
  v458[2] = -1;
  __p[0] = v458;
  v459 = operator new(0xCuLL);
  v675 = v459 + 3;
  v676 = (char *)(v459 + 3);
  *(_QWORD *)v459 = -1;
  v459[2] = -1;
  v674 = v459;
  v460 = *(_QWORD **)(*v672 + 40);
  if (v460[20] == v460[19])
    goto LABEL_571;
  v461 = 0;
  v669 = v451;
  v462 = v454;
  while (2)
  {
    v463 = (uint64_t *)(v460[7] + 16 * v447);
    v464 = *v463;
    v465 = (std::__shared_weak_count *)v463[1];
    if (v465)
    {
      v466 = (unint64_t *)&v465->__shared_owners_;
      do
        v467 = __ldxr(v466);
      while (__stxr(v467 + 1, v466));
      do
        v468 = __ldaxr(v466);
      while (__stlxr(v468 - 1, v466));
      if (!v468)
      {
        ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
        std::__shared_weak_count::__release_weak(v465);
      }
    }
    v469 = *(_DWORD *)(*(_QWORD *)(v464 + 40) + 4 * v461);
    v470 = (uint64_t *)(*(_QWORD *)(*a7 + 56) + 16 * v679);
    v471 = *v470;
    v472 = (std::__shared_weak_count *)v470[1];
    if (!v472)
      goto LABEL_486;
    v473 = (unint64_t *)&v472->__shared_owners_;
    do
      v474 = __ldxr(v473);
    while (__stxr(v474 + 1, v473));
    do
      v475 = __ldaxr(v473);
    while (__stlxr(v475 - 1, v473));
    if (!v475)
    {
      ((void (*)(std::__shared_weak_count *))v472->__on_zero_shared)(v472);
      std::__shared_weak_count::__release_weak(v472);
      *(_DWORD *)(*(_QWORD *)(v471 + 40) + 4 * v461) = v469;
      if (v694[0] != -1)
        goto LABEL_487;
    }
    else
    {
LABEL_486:
      *(_DWORD *)(*(_QWORD *)(v471 + 40) + 4 * v461) = v469;
      if (v694[0] != -1)
      {
LABEL_487:
        v476 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v672 + 40) + 56) + 16 * v669);
        v477 = *v476;
        v478 = (std::__shared_weak_count *)v476[1];
        if (v478)
        {
          v479 = (unint64_t *)&v478->__shared_owners_;
          do
            v480 = __ldxr(v479);
          while (__stxr(v480 + 1, v479));
          do
            v481 = __ldaxr(v479);
          while (__stlxr(v481 - 1, v479));
          if (!v481)
          {
            ((void (*)(std::__shared_weak_count *))v478->__on_zero_shared)(v478);
            std::__shared_weak_count::__release_weak(v478);
          }
        }
        v482 = *(_QWORD *)(v477 + 40);
        v483 = (uint64_t *)(*(_QWORD *)(*a7 + 56) + 16 * v694[0]);
        v484 = *v483;
        v485 = (std::__shared_weak_count *)v483[1];
        if (v485)
        {
          v486 = (unint64_t *)&v485->__shared_owners_;
          do
            v487 = __ldxr(v486);
          while (__stxr(v487 + 1, v486));
          do
            v488 = __ldaxr(v486);
          while (__stlxr(v488 - 1, v486));
          if (!v488)
          {
            ((void (*)(std::__shared_weak_count *))v485->__on_zero_shared)(v485);
            std::__shared_weak_count::__release_weak(v485);
          }
        }
        *(_OWORD *)(*(_QWORD *)(v484 + 40) + 16 * v461) = *(_OWORD *)(v482 + 16 * v461);
      }
    }
    v489 = *a7;
    v673 = v461;
    sub_23996389C(v489, &v673, (uint64_t)__p);
    v490 = *(_QWORD *)(*v672 + 40);
    v673 = v461;
    sub_23996389C(v490, &v673, (uint64_t)&v674);
    v491 = 0;
    while (2)
    {
      v492 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v672 + 40) + 32) + 16 * v462);
      v493 = *v492;
      v494 = (std::__shared_weak_count *)v492[1];
      if (v494)
      {
        v495 = (unint64_t *)&v494->__shared_owners_;
        do
          v496 = __ldxr(v495);
        while (__stxr(v496 + 1, v495));
        do
          v497 = __ldaxr(v495);
        while (__stlxr(v497 - 1, v495));
        if (!v497)
        {
          ((void (*)(std::__shared_weak_count *))v494->__on_zero_shared)(v494);
          std::__shared_weak_count::__release_weak(v494);
        }
      }
      v498 = *(_DWORD *)(*(_QWORD *)(v493 + 40) + 4 * *((unsigned int *)v674 + v491));
      v499 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v678);
      v500 = *v499;
      v501 = (std::__shared_weak_count *)v499[1];
      if (v501)
      {
        v502 = (unint64_t *)&v501->__shared_owners_;
        do
          v503 = __ldxr(v502);
        while (__stxr(v503 + 1, v502));
        do
          v504 = __ldaxr(v502);
        while (__stlxr(v504 - 1, v502));
        if (!v504)
        {
          ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
          std::__shared_weak_count::__release_weak(v501);
        }
      }
      v505 = (unsigned int *)((char *)__p[0] + 4 * v491);
      *(_DWORD *)(*(_QWORD *)(v500 + 40) + 4 * *v505) = v498;
      v506 = *a7;
      v507 = *(unsigned int *)sub_239962518(*a7 + 104, v505);
      v508 = (uint64_t *)(*(_QWORD *)(v506 + 32) + 16 * *(unsigned int *)(v506 + 180));
      v509 = *v508;
      v510 = (std::__shared_weak_count *)v508[1];
      if (!v510)
        goto LABEL_519;
      v511 = (unint64_t *)&v510->__shared_owners_;
      do
        v512 = __ldxr(v511);
      while (__stxr(v512 + 1, v511));
      do
        v513 = __ldaxr(v511);
      while (__stlxr(v513 - 1, v511));
      if (!v513)
      {
        ((void (*)(std::__shared_weak_count *))v510->__on_zero_shared)(v510);
        std::__shared_weak_count::__release_weak(v510);
        if (((*(_QWORD *)(*(_QWORD *)(v509 + 40) + ((v507 >> 3) & 0x1FFFFFF8)) >> v507) & 1) != 0)
          goto LABEL_520;
      }
      else
      {
LABEL_519:
        if (((*(_QWORD *)(*(_QWORD *)(v509 + 40) + ((v507 >> 3) & 0x1FFFFFF8)) >> v507) & 1) != 0)
        {
LABEL_520:
          v514 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v678);
          v515 = *v514;
          v516 = (std::__shared_weak_count *)v514[1];
          if (v516)
          {
            v517 = (unint64_t *)&v516->__shared_owners_;
            do
              v518 = __ldxr(v517);
            while (__stxr(v518 + 1, v517));
            do
              v519 = __ldaxr(v517);
            while (__stlxr(v519 - 1, v517));
            if (!v519)
            {
              ((void (*)(std::__shared_weak_count *))v516->__on_zero_shared)(v516);
              std::__shared_weak_count::__release_weak(v516);
            }
          }
          v520 = *(_DWORD *)(*(_QWORD *)(v515 + 40) + 4 * *((unsigned int *)__p[0] + v491));
          v521 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v678);
          v522 = *v521;
          v523 = (std::__shared_weak_count *)v521[1];
          if (v523)
          {
            v524 = (unint64_t *)&v523->__shared_owners_;
            do
              v525 = __ldxr(v524);
            while (__stxr(v525 + 1, v524));
            do
              v526 = __ldaxr(v524);
            while (__stlxr(v526 - 1, v524));
            if (!v526)
            {
              ((void (*)(std::__shared_weak_count *))v523->__on_zero_shared)(v523);
              std::__shared_weak_count::__release_weak(v523);
            }
          }
          *(_DWORD *)(*(_QWORD *)(v522 + 40)
                    + 4 * *(unsigned int *)sub_239962518(*a7 + 104, (unsigned int *)__p[0] + v491)) = v520;
        }
      }
      if (a10)
      {
        v527 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v672 + 40) + 32) + 16 * v667);
        v528 = *v527;
        v529 = (std::__shared_weak_count *)v527[1];
        if (v529)
        {
          v530 = (unint64_t *)&v529->__shared_owners_;
          do
            v531 = __ldxr(v530);
          while (__stxr(v531 + 1, v530));
          do
            v532 = __ldaxr(v530);
          while (__stlxr(v532 - 1, v530));
          if (!v532)
          {
            ((void (*)(std::__shared_weak_count *))v529->__on_zero_shared)(v529);
            std::__shared_weak_count::__release_weak(v529);
          }
        }
        v533 = *(_DWORD *)(*(_QWORD *)(v528 + 40) + 4 * *((unsigned int *)v674 + v491));
        v534 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v677);
        v535 = *v534;
        v536 = (std::__shared_weak_count *)v534[1];
        if (v536)
        {
          v537 = (unint64_t *)&v536->__shared_owners_;
          do
            v538 = __ldxr(v537);
          while (__stxr(v538 + 1, v537));
          do
            v539 = __ldaxr(v537);
          while (__stlxr(v539 - 1, v537));
          if (!v539)
          {
            ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
            std::__shared_weak_count::__release_weak(v536);
          }
        }
        v540 = (unsigned int *)((char *)__p[0] + 4 * v491);
        *(_DWORD *)(*(_QWORD *)(v535 + 40) + 4 * *v540) = v533;
        v541 = *a7;
        v542 = *(unsigned int *)sub_239962518(*a7 + 104, v540);
        v543 = (uint64_t *)(*(_QWORD *)(v541 + 32) + 16 * *(unsigned int *)(v541 + 180));
        v544 = *v543;
        v545 = (std::__shared_weak_count *)v543[1];
        if (!v545)
          goto LABEL_551;
        v546 = (unint64_t *)&v545->__shared_owners_;
        do
          v547 = __ldxr(v546);
        while (__stxr(v547 + 1, v546));
        do
          v548 = __ldaxr(v546);
        while (__stlxr(v548 - 1, v546));
        if (!v548)
        {
          ((void (*)(std::__shared_weak_count *))v545->__on_zero_shared)(v545);
          std::__shared_weak_count::__release_weak(v545);
          if (((*(_QWORD *)(*(_QWORD *)(v544 + 40) + ((v542 >> 3) & 0x1FFFFFF8)) >> v542) & 1) != 0)
            goto LABEL_552;
        }
        else
        {
LABEL_551:
          if (((*(_QWORD *)(*(_QWORD *)(v544 + 40) + ((v542 >> 3) & 0x1FFFFFF8)) >> v542) & 1) != 0)
          {
LABEL_552:
            v549 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v677);
            v550 = *v549;
            v551 = (std::__shared_weak_count *)v549[1];
            if (v551)
            {
              v552 = (unint64_t *)&v551->__shared_owners_;
              do
                v553 = __ldxr(v552);
              while (__stxr(v553 + 1, v552));
              do
                v554 = __ldaxr(v552);
              while (__stlxr(v554 - 1, v552));
              if (!v554)
              {
                ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
                std::__shared_weak_count::__release_weak(v551);
              }
            }
            v555 = *(_DWORD *)(*(_QWORD *)(v550 + 40) + 4 * *((unsigned int *)__p[0] + v491));
            v556 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v677);
            v557 = *v556;
            v558 = (std::__shared_weak_count *)v556[1];
            if (v558)
            {
              v559 = (unint64_t *)&v558->__shared_owners_;
              do
                v560 = __ldxr(v559);
              while (__stxr(v560 + 1, v559));
              do
                v561 = __ldaxr(v559);
              while (__stlxr(v561 - 1, v559));
              if (!v561)
              {
                ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
                std::__shared_weak_count::__release_weak(v558);
              }
            }
            *(_DWORD *)(*(_QWORD *)(v557 + 40)
                      + 4 * *(unsigned int *)sub_239962518(*a7 + 104, (unsigned int *)__p[0] + v491)) = v555;
          }
        }
      }
      if (++v491 != 3)
        continue;
      break;
    }
    ++v461;
    v460 = *(_QWORD **)(*v672 + 40);
    if (v461 < (uint64_t)(v460[20] - v460[19]) >> 2)
      continue;
    break;
  }
LABEL_571:
  v562 = *(_QWORD **)(*v671 + 40);
  if (v562[20] == v562[19])
    goto LABEL_669;
  v563 = 0;
  while (2)
  {
    v564 = (uint64_t *)(v562[7] + 16 * v666);
    v565 = *v564;
    v566 = (std::__shared_weak_count *)v564[1];
    if (v566)
    {
      v567 = (unint64_t *)&v566->__shared_owners_;
      do
        v568 = __ldxr(v567);
      while (__stxr(v568 + 1, v567));
      do
        v569 = __ldaxr(v567);
      while (__stlxr(v569 - 1, v567));
      if (!v569)
      {
        ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
        std::__shared_weak_count::__release_weak(v566);
      }
    }
    v570 = *(_DWORD *)(*(_QWORD *)(v565 + 40) + 4 * v563);
    v571 = (uint64_t *)(*(_QWORD *)(*a7 + 56) + 16 * v679);
    v572 = *v571;
    v573 = (std::__shared_weak_count *)v571[1];
    if (v573)
    {
      v574 = (unint64_t *)&v573->__shared_owners_;
      do
        v575 = __ldxr(v574);
      while (__stxr(v575 + 1, v574));
      do
        v576 = __ldaxr(v574);
      while (__stlxr(v576 - 1, v574));
      if (!v576)
      {
        ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
        std::__shared_weak_count::__release_weak(v573);
      }
    }
    v577 = *(_QWORD *)(*(_QWORD *)(*v672 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*v672 + 40) + 152);
    *(_DWORD *)(*(_QWORD *)(v572 + 40) + 4 * (v563 + (v577 >> 2))) = v570;
    if (v694[0] != -1)
    {
      v578 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v671 + 40) + 56) + 16 * v665);
      v579 = *v578;
      v580 = (std::__shared_weak_count *)v578[1];
      if (v580)
      {
        v581 = (unint64_t *)&v580->__shared_owners_;
        do
          v582 = __ldxr(v581);
        while (__stxr(v582 + 1, v581));
        do
          v583 = __ldaxr(v581);
        while (__stlxr(v583 - 1, v581));
        if (!v583)
        {
          ((void (*)(std::__shared_weak_count *))v580->__on_zero_shared)(v580);
          std::__shared_weak_count::__release_weak(v580);
        }
      }
      v584 = *(_QWORD *)(v579 + 40);
      v585 = (uint64_t *)(*(_QWORD *)(*a7 + 56) + 16 * v694[0]);
      v586 = *v585;
      v587 = (std::__shared_weak_count *)v585[1];
      if (v587)
      {
        v588 = (unint64_t *)&v587->__shared_owners_;
        do
          v589 = __ldxr(v588);
        while (__stxr(v589 + 1, v588));
        do
          v590 = __ldaxr(v588);
        while (__stlxr(v590 - 1, v588));
        if (!v590)
        {
          ((void (*)(std::__shared_weak_count *))v587->__on_zero_shared)(v587);
          std::__shared_weak_count::__release_weak(v587);
        }
      }
      *(_OWORD *)(*(_QWORD *)(v586 + 40)
                + 16
                * (v563
                 + ((*(_QWORD *)(*(_QWORD *)(*v672 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*v672 + 40) + 152)) >> 2))) = *(_OWORD *)(v584 + 16 * v563);
      v577 = *(_QWORD *)(*(_QWORD *)(*v672 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*v672 + 40) + 152);
    }
    v591 = *a7;
    v673 = (v577 >> 2) + v563;
    sub_23996389C(v591, &v673, (uint64_t)__p);
    v592 = *(_QWORD *)(*v671 + 40);
    v673 = v563;
    sub_23996389C(v592, &v673, (uint64_t)&v674);
    v593 = 0;
    while (2)
    {
      v594 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v671 + 40) + 32) + 16 * v664);
      v595 = *v594;
      v596 = (std::__shared_weak_count *)v594[1];
      if (v596)
      {
        v597 = (unint64_t *)&v596->__shared_owners_;
        do
          v598 = __ldxr(v597);
        while (__stxr(v598 + 1, v597));
        do
          v599 = __ldaxr(v597);
        while (__stlxr(v599 - 1, v597));
        if (!v599)
        {
          ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
          std::__shared_weak_count::__release_weak(v596);
        }
      }
      v600 = *(_DWORD *)(*(_QWORD *)(v595 + 40) + 4 * *((unsigned int *)v674 + v593));
      v601 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v678);
      v602 = *v601;
      v603 = (std::__shared_weak_count *)v601[1];
      if (v603)
      {
        v604 = (unint64_t *)&v603->__shared_owners_;
        do
          v605 = __ldxr(v604);
        while (__stxr(v605 + 1, v604));
        do
          v606 = __ldaxr(v604);
        while (__stlxr(v606 - 1, v604));
        if (!v606)
        {
          ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
          std::__shared_weak_count::__release_weak(v603);
        }
      }
      v607 = (unsigned int *)((char *)__p[0] + 4 * v593);
      *(_DWORD *)(*(_QWORD *)(v602 + 40) + 4 * *v607) = v600;
      v608 = *a7;
      v609 = *(unsigned int *)sub_239962518(*a7 + 104, v607);
      v610 = (uint64_t *)(*(_QWORD *)(v608 + 32) + 16 * *(unsigned int *)(v608 + 180));
      v611 = *v610;
      v612 = (std::__shared_weak_count *)v610[1];
      if (!v612)
        goto LABEL_619;
      v613 = (unint64_t *)&v612->__shared_owners_;
      do
        v614 = __ldxr(v613);
      while (__stxr(v614 + 1, v613));
      do
        v615 = __ldaxr(v613);
      while (__stlxr(v615 - 1, v613));
      if (!v615)
      {
        ((void (*)(std::__shared_weak_count *))v612->__on_zero_shared)(v612);
        std::__shared_weak_count::__release_weak(v612);
        if (((*(_QWORD *)(*(_QWORD *)(v611 + 40) + ((v609 >> 3) & 0x1FFFFFF8)) >> v609) & 1) != 0)
          goto LABEL_620;
      }
      else
      {
LABEL_619:
        if (((*(_QWORD *)(*(_QWORD *)(v611 + 40) + ((v609 >> 3) & 0x1FFFFFF8)) >> v609) & 1) != 0)
        {
LABEL_620:
          v616 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v678);
          v617 = *v616;
          v618 = (std::__shared_weak_count *)v616[1];
          if (v618)
          {
            v619 = (unint64_t *)&v618->__shared_owners_;
            do
              v620 = __ldxr(v619);
            while (__stxr(v620 + 1, v619));
            do
              v621 = __ldaxr(v619);
            while (__stlxr(v621 - 1, v619));
            if (!v621)
            {
              ((void (*)(std::__shared_weak_count *))v618->__on_zero_shared)(v618);
              std::__shared_weak_count::__release_weak(v618);
            }
          }
          v622 = *(_DWORD *)(*(_QWORD *)(v617 + 40) + 4 * *((unsigned int *)__p[0] + v593));
          v623 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v678);
          v624 = *v623;
          v625 = (std::__shared_weak_count *)v623[1];
          if (v625)
          {
            v626 = (unint64_t *)&v625->__shared_owners_;
            do
              v627 = __ldxr(v626);
            while (__stxr(v627 + 1, v626));
            do
              v628 = __ldaxr(v626);
            while (__stlxr(v628 - 1, v626));
            if (!v628)
            {
              ((void (*)(std::__shared_weak_count *))v625->__on_zero_shared)(v625);
              std::__shared_weak_count::__release_weak(v625);
            }
          }
          *(_DWORD *)(*(_QWORD *)(v624 + 40)
                    + 4 * *(unsigned int *)sub_239962518(*a7 + 104, (unsigned int *)__p[0] + v593)) = v622;
        }
      }
      if (a10)
      {
        v629 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v671 + 40) + 32) + 16 * v667);
        v630 = *v629;
        v631 = (std::__shared_weak_count *)v629[1];
        if (v631)
        {
          v632 = (unint64_t *)&v631->__shared_owners_;
          do
            v633 = __ldxr(v632);
          while (__stxr(v633 + 1, v632));
          do
            v634 = __ldaxr(v632);
          while (__stlxr(v634 - 1, v632));
          if (!v634)
          {
            ((void (*)(std::__shared_weak_count *))v631->__on_zero_shared)(v631);
            std::__shared_weak_count::__release_weak(v631);
          }
        }
        v635 = *(_DWORD *)(*(_QWORD *)(v630 + 40) + 4 * *((unsigned int *)v674 + v593));
        v636 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v677);
        v637 = *v636;
        v638 = (std::__shared_weak_count *)v636[1];
        if (v638)
        {
          v639 = (unint64_t *)&v638->__shared_owners_;
          do
            v640 = __ldxr(v639);
          while (__stxr(v640 + 1, v639));
          do
            v641 = __ldaxr(v639);
          while (__stlxr(v641 - 1, v639));
          if (!v641)
          {
            ((void (*)(std::__shared_weak_count *))v638->__on_zero_shared)(v638);
            std::__shared_weak_count::__release_weak(v638);
          }
        }
        v642 = (unsigned int *)((char *)__p[0] + 4 * v593);
        *(_DWORD *)(*(_QWORD *)(v637 + 40) + 4 * *v642) = v635;
        v643 = *a7;
        v644 = *(unsigned int *)sub_239962518(*a7 + 104, v642);
        v645 = (uint64_t *)(*(_QWORD *)(v643 + 32) + 16 * *(unsigned int *)(v643 + 180));
        v646 = *v645;
        v647 = (std::__shared_weak_count *)v645[1];
        if (!v647)
          goto LABEL_651;
        v648 = (unint64_t *)&v647->__shared_owners_;
        do
          v649 = __ldxr(v648);
        while (__stxr(v649 + 1, v648));
        do
          v650 = __ldaxr(v648);
        while (__stlxr(v650 - 1, v648));
        if (!v650)
        {
          ((void (*)(std::__shared_weak_count *))v647->__on_zero_shared)(v647);
          std::__shared_weak_count::__release_weak(v647);
          if (((*(_QWORD *)(*(_QWORD *)(v646 + 40) + ((v644 >> 3) & 0x1FFFFFF8)) >> v644) & 1) != 0)
            goto LABEL_652;
        }
        else
        {
LABEL_651:
          if (((*(_QWORD *)(*(_QWORD *)(v646 + 40) + ((v644 >> 3) & 0x1FFFFFF8)) >> v644) & 1) != 0)
          {
LABEL_652:
            v651 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v677);
            v652 = *v651;
            v653 = (std::__shared_weak_count *)v651[1];
            if (v653)
            {
              v654 = (unint64_t *)&v653->__shared_owners_;
              do
                v655 = __ldxr(v654);
              while (__stxr(v655 + 1, v654));
              do
                v656 = __ldaxr(v654);
              while (__stlxr(v656 - 1, v654));
              if (!v656)
              {
                ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
                std::__shared_weak_count::__release_weak(v653);
              }
            }
            v657 = *(_DWORD *)(*(_QWORD *)(v652 + 40) + 4 * *((unsigned int *)__p[0] + v593));
            v658 = (uint64_t *)(*(_QWORD *)(*a7 + 32) + 16 * v677);
            v659 = *v658;
            v660 = (std::__shared_weak_count *)v658[1];
            if (v660)
            {
              v661 = (unint64_t *)&v660->__shared_owners_;
              do
                v662 = __ldxr(v661);
              while (__stxr(v662 + 1, v661));
              do
                v663 = __ldaxr(v661);
              while (__stlxr(v663 - 1, v661));
              if (!v663)
              {
                ((void (*)(std::__shared_weak_count *))v660->__on_zero_shared)(v660);
                std::__shared_weak_count::__release_weak(v660);
              }
            }
            *(_DWORD *)(*(_QWORD *)(v659 + 40)
                      + 4 * *(unsigned int *)sub_239962518(*a7 + 104, (unsigned int *)__p[0] + v593)) = v657;
          }
        }
      }
      if (++v593 != 3)
        continue;
      break;
    }
    ++v563;
    v562 = *(_QWORD **)(*v671 + 40);
    if (v563 < (uint64_t)(v562[20] - v562[19]) >> 2)
      continue;
    break;
  }
LABEL_669:
  if (v674)
  {
    v675 = v674;
    operator delete(v674);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v685)
  {
    v686 = v685;
    operator delete(v685);
  }
  if (v688)
  {
    v689 = (char *)v688;
    operator delete(v688);
  }
  if (v691)
  {
    v692 = v691;
    operator delete(v691);
  }
}

void sub_2399ADFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  uint64_t v34;
  void **v36;
  void *v37;
  void *v38;

  if (a28 < 0)
    operator delete(__p);
  v36 = (void **)(v34 - 144);
  if (a30)
  {
    operator delete(a30);
    v37 = a33;
    if (!a33)
    {
LABEL_5:
      v38 = *v36;
      if (!*v36)
LABEL_10:
        _Unwind_Resume(exception_object);
LABEL_9:
      *(_QWORD *)(v34 - 136) = v38;
      operator delete(v38);
      goto LABEL_10;
    }
  }
  else
  {
    v37 = a33;
    if (!a33)
      goto LABEL_5;
  }
  operator delete(v37);
  v38 = *v36;
  if (!*v36)
    goto LABEL_10;
  goto LABEL_9;
}

_QWORD *sub_2399AE288(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;
  __int128 v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    if (v4 == a1)
    {
      v15 = v14;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v14);
    }
    else
    {
      v15 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    }
  }
  else
  {
    v15 = 0;
  }
  v5 = *(_OWORD *)(**(_QWORD **)(a1 + 32) + 16 * a2);
  v13 = v5;
  if (*((_QWORD *)&v5 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (!v15)
    sub_2394172E0();
  (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v15 + 48))(v15, &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      result = v15;
      if (v15 != v14)
        goto LABEL_15;
LABEL_18:
      v12 = 4;
      result = v14;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v12))(result);
    }
  }
  result = v15;
  if (v15 == v14)
    goto LABEL_18;
LABEL_15:
  if (!result)
    return result;
  v12 = 5;
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v12))(result);
}

void sub_2399AE3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  if (a3)
    sub_239EBED3C();
  sub_239EC0548((uint64_t *)va1, (uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2399AE418(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399AE428(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF1130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399AE458(uint64_t a1)
{
  return sub_23998E424(a1 + 24);
}

void sub_2399AE468()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2399AE47C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x68uLL);
  *(_QWORD *)v2 = &off_250AF1168;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2399AE4DC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_250AF1168;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_2399AE524(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::mutex *v5;
  char **v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::mutex *v40;
  __int128 v41;
  unsigned int v42;
  char v43;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  v43 = 0;
  v42 = 0;
  sub_2399A9450(*(uint64_t **)(a1 + 8), *(_QWORD **)(a1 + 16), *(_DWORD *)(v4 + 4), **(_QWORD **)(a1 + 24), *(_QWORD **)(a1 + 32), *(uint64_t **)(a1 + 40), &v43, &v42, *(std::mutex **)(a1 + 80), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), **(_BYTE **)(a1 + 88));
  if (!v43)
    goto LABEL_34;
  v5 = *(std::mutex **)(a1 + 80);
  std::mutex::lock(v5);
  v6 = *(char ***)(a1 + 96);
  v7 = *(unsigned int *)(v4 + 4) | ((unint64_t)v42 << 32);
  v9 = v6[1];
  v8 = (unint64_t)v6[2];
  if ((unint64_t)v9 >= v8)
  {
    v40 = v5;
    v11 = *v6;
    v12 = v9 - *v6;
    v13 = v12 >> 3;
    v14 = (v12 >> 3) + 1;
    if (v14 >> 61)
      sub_2394189F8();
    v15 = v8 - (_QWORD)v11;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        sub_239418A80();
      v17 = operator new(8 * v16);
      v18 = (unint64_t *)&v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v7;
      v10 = (uint64_t)(v18 + 1);
      v20 = (char *)(v9 - v11);
      if (v9 != v11)
      {
LABEL_13:
        v21 = (unint64_t)(v20 - 8);
        if (v21 >= 0x58)
        {
          v22 = v9 - v17 - v12;
          v5 = v40;
          if (v22 >= 0x20)
          {
            v23 = (v21 >> 3) + 1;
            v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
            v25 = &v9[-v24];
            v18 = (unint64_t *)((char *)v18 - v24);
            v26 = &v17[8 * v13 - 16];
            v27 = v9 - 16;
            v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v29 = *(_OWORD *)v27;
              *(v26 - 1) = *((_OWORD *)v27 - 1);
              *v26 = v29;
              v26 -= 2;
              v27 -= 32;
              v28 -= 4;
            }
            while (v28);
            v9 = v25;
            if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_23:
              v9 = *v6;
              *v6 = (char *)v18;
              v6[1] = (char *)v10;
              v6[2] = v19;
              if (!v9)
                goto LABEL_25;
LABEL_24:
              operator delete(v9);
              goto LABEL_25;
            }
          }
        }
        else
        {
          v5 = v40;
        }
        do
        {
          v30 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *--v18 = v30;
        }
        while (v9 != v11);
        goto LABEL_23;
      }
    }
    else
    {
      v17 = 0;
      v18 = (unint64_t *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v7;
      v10 = 8 * v13 + 8;
      v20 = (char *)(v9 - v11);
      if (v9 != v11)
        goto LABEL_13;
    }
    v5 = v40;
    *v6 = (char *)v18;
    v6[1] = (char *)v10;
    v6[2] = v19;
    if (!v9)
      goto LABEL_25;
    goto LABEL_24;
  }
  *(_QWORD *)v9 = v7;
  v10 = (uint64_t)(v9 + 8);
LABEL_25:
  v6[1] = (char *)v10;
  v31 = *(_QWORD **)(a1 + 8);
  *(float *)v4 = -(float)((float)((float)*(unsigned int *)(v4 + 4)
                                / (float)(unint64_t)((uint64_t)(v31[1] - *v31) >> 4))
                        + (float)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v31
                                                                                                + 16
                                                                                                * *(unsigned int *)(v4 + 4))
                                                                                    + 40)
                                                                        + 160)
                                                            - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v31
                                                                                                + 16
                                                                                                * *(unsigned int *)(v4 + 4))
                                                                                    + 40)
                                                                        + 152)) >> 2));
  v32 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)&v41 = v4;
  *((_QWORD *)&v41 + 1) = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
  }
  sub_239996AC8(v32, &v41);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  --**(_DWORD **)(a1 + 72);
  std::mutex::unlock(v5);
LABEL_34:
  if (v3)
  {
    v38 = (unint64_t *)&v3->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_2399AE82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v15;
  std::mutex *v16;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  if (a15)
  {
    p_shared_owners = (unint64_t *)&a15->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  std::mutex::unlock(v16);
  if (v15)
  {
    v20 = (unint64_t *)&v15->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2399AE8C0(uint64_t result, char *a2, uint64_t a3, char a4)
{
  unsigned int *v7;
  char *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  char *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  char *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int *v54;
  unsigned int *v55;
  char *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  char *v80;
  char *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  char *v89;
  BOOL v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  unsigned int *v119;
  BOOL v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  char *v130;
  int v131;
  int64_t v132;
  int64_t v133;
  BOOL v134;
  uint64_t v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int64_t v146;
  _DWORD *v147;
  int v148;
  unsigned int v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  int v155;
  unsigned int v156;
  int v157;
  char *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  _DWORD *v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  _DWORD *v166;
  _DWORD *v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  int v172;

  v7 = (unsigned int *)result;
LABEL_2:
  v8 = a2 - 4;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - (char *)v9;
    v11 = (a2 - (char *)v9) >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v101 = *((_DWORD *)a2 - 2);
        v102 = *v9;
        if (v101 < *v9)
        {
          *v9 = v101;
          *((_DWORD *)a2 - 2) = v102;
          v103 = v9[1];
          v9[1] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v103;
        }
        return result;
      case 3:
        v104 = v9[2];
        v105 = *v9;
        v106 = *((_DWORD *)a2 - 2);
        if (v104 >= *v9)
        {
          if (v106 >= v104)
            return result;
          v9[2] = v106;
          *((_DWORD *)a2 - 2) = v104;
          v8 = (char *)(v9 + 3);
          v159 = v9[3];
          v9[3] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v159;
          v160 = v9[2];
          v161 = *v9;
          if (v160 >= *v9)
            return result;
          *v9 = v160;
          v9[2] = v161;
          v107 = (int *)(v9 + 1);
        }
        else
        {
          if (v106 >= v104)
          {
            v107 = (int *)(v9 + 3);
            v169 = v9[3];
            v170 = v9[1];
            *v9 = v104;
            v9[1] = v169;
            v9[2] = v105;
            v9[3] = v170;
            v171 = *((_DWORD *)a2 - 2);
            if (v171 >= v105)
              return result;
            v9[2] = v171;
          }
          else
          {
            v107 = (int *)(v9 + 1);
            *v9 = v106;
          }
          *((_DWORD *)a2 - 2) = v105;
        }
        v172 = *v107;
        *v107 = *(_DWORD *)v8;
        *(_DWORD *)v8 = v172;
        return result;
      case 4:
        return (uint64_t)sub_2399AF758((int *)v9, v9 + 2, v9 + 4, (unsigned int *)a2 - 2);
      case 5:
        result = (uint64_t)sub_2399AF758((int *)v9, v9 + 2, v9 + 4, v9 + 6);
        v108 = *((_DWORD *)a2 - 2);
        v109 = v9[6];
        if (v108 < v109)
        {
          v9[6] = v108;
          *((_DWORD *)a2 - 2) = v109;
          v110 = v9[7];
          v9[7] = *((_DWORD *)a2 - 1);
          *((_DWORD *)a2 - 1) = v110;
          v111 = v9[6];
          v112 = v9[4];
          if (v111 < v112)
          {
            v113 = v9[5];
            v114 = v9[7];
            v9[4] = v111;
            v9[5] = v114;
            v9[6] = v112;
            v9[7] = v113;
            v115 = v9[2];
            if (v111 < v115)
            {
              v116 = v9[3];
              v9[2] = v111;
              v9[3] = v114;
              v9[4] = v115;
              v9[5] = v116;
              v117 = *v9;
              if (v111 < *v9)
              {
                v118 = v9[1];
                *v9 = v111;
                v9[1] = v114;
                v9[2] = v117;
                v9[3] = v118;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 191)
        {
          v119 = v9 + 2;
          v121 = v9 == (unsigned int *)a2 || v119 == (unsigned int *)a2;
          if ((a4 & 1) == 0)
          {
            if (!v121)
            {
              v162 = v9 + 3;
              do
              {
                v163 = v7[2];
                v164 = *v7;
                v7 = v119;
                if (v163 < v164)
                {
                  v165 = *(_QWORD *)v119;
                  v166 = v162;
                  do
                  {
                    v167 = v166;
                    *(v166 - 1) = v164;
                    v168 = *(v166 - 2);
                    v166 -= 2;
                    *v167 = v168;
                    v164 = *(v167 - 5);
                  }
                  while (v164 > v165);
                  *(_QWORD *)(v166 - 1) = v165;
                }
                v119 = v7 + 2;
                v162 += 2;
              }
              while (v7 + 2 != (unsigned int *)a2);
            }
            return result;
          }
          if (v121)
            return result;
          v122 = 0;
          v123 = v9;
          while (1)
          {
            v125 = v123[2];
            v126 = *v123;
            v123 = v119;
            if (v125 < v126)
            {
              v128 = *v119;
              v127 = v119[1];
              v129 = v122;
              do
              {
                v130 = (char *)v9 + v129;
                v131 = *(unsigned int *)((char *)v9 + v129 + 4);
                *((_DWORD *)v130 + 2) = v126;
                *((_DWORD *)v130 + 3) = v131;
                if (!v129)
                {
                  v124 = v9;
                  goto LABEL_126;
                }
                v126 = *((_DWORD *)v130 - 2);
                v129 -= 8;
              }
              while (v126 > v128);
              v124 = (unsigned int *)((char *)v9 + v129 + 8);
LABEL_126:
              *v124 = v128;
              v124[1] = v127;
            }
            v119 = v123 + 2;
            v122 += 8;
            if (v123 + 2 == (unsigned int *)a2)
              return result;
          }
        }
        if (a3)
        {
          v12 = (unint64_t)v11 >> 1;
          v13 = &v9[2 * ((unint64_t)v11 >> 1)];
          v14 = *((_DWORD *)a2 - 2);
          if ((unint64_t)v10 >= 0x401)
          {
            v15 = *v13;
            v16 = *v9;
            if (*v13 >= *v9)
            {
              if (v14 >= v15)
                goto LABEL_23;
              *v13 = v14;
              *((_DWORD *)a2 - 2) = v15;
              v21 = &v9[2 * v12];
              v23 = v21[1];
              v22 = (char *)(v21 + 1);
              *(_DWORD *)v22 = *((_DWORD *)a2 - 1);
              *((_DWORD *)a2 - 1) = v23;
              v24 = *v9;
              if (*v13 >= *v9)
              {
LABEL_23:
                v31 = v12 - 1;
                v32 = &v9[2 * v12 - 2];
                v33 = *v32;
                v34 = v9[2];
                v35 = *((_DWORD *)a2 - 4);
                if (*v32 >= v34)
                {
                  if (v35 >= v33)
                    goto LABEL_36;
                  *v32 = v35;
                  *((_DWORD *)a2 - 4) = v33;
                  v37 = &v9[2 * v31];
                  v39 = v37[1];
                  v38 = (char *)(v37 + 1);
                  *(_DWORD *)v38 = *((_DWORD *)a2 - 3);
                  *((_DWORD *)a2 - 3) = v39;
                  v40 = v9[2];
                  if (*v32 >= v40)
                  {
LABEL_36:
                    v49 = v12 + 1;
                    v50 = &v9[2 * v12 + 2];
                    v51 = *v50;
                    v52 = v9[4];
                    v53 = *((_DWORD *)a2 - 6);
                    if (*v50 >= v52)
                    {
                      if (v53 >= v51)
                        goto LABEL_46;
                      *v50 = v53;
                      *((_DWORD *)a2 - 6) = v51;
                      v55 = &v9[2 * v49];
                      v57 = v55[1];
                      v56 = (char *)(v55 + 1);
                      *(_DWORD *)v56 = *((_DWORD *)a2 - 5);
                      *((_DWORD *)a2 - 5) = v57;
                      v51 = *v50;
                      v58 = v9[4];
                      if (*v50 >= v58)
                      {
LABEL_46:
                        v63 = *v13;
                        v64 = *v32;
                        if (*v13 < *v32)
                          goto LABEL_47;
                        goto LABEL_52;
                      }
                      v9[4] = v51;
                      *v50 = v58;
                      v54 = (int *)(v9 + 5);
                    }
                    else
                    {
                      if (v53 >= v51)
                      {
                        v59 = &v9[2 * v49];
                        v60 = v59[1];
                        v54 = (int *)(v59 + 1);
                        result = v9[5];
                        v9[4] = v51;
                        v9[5] = v60;
                        *v50 = v52;
                        *v54 = result;
                        v61 = *((_DWORD *)a2 - 6);
                        if (v61 >= v52)
                        {
                          v51 = v52;
                          v63 = *v13;
                          v64 = *v32;
                          if (*v13 < *v32)
                          {
LABEL_47:
                            v65 = &v9[2 * v31 + 1];
                            if (v51 >= v63)
                            {
                              *v32 = v63;
                              *v13 = v64;
                              v67 = &v9[2 * v12];
                              v69 = v67[1];
                              v68 = v67 + 1;
                              v70 = *v65;
                              *v65 = v69;
                              *v68 = v70;
                              if (v51 >= v64)
                              {
                                v63 = v64;
                                goto LABEL_56;
                              }
                              *v13 = v51;
                              *v50 = v64;
                              v66 = &v9[2 * v49 + 1];
                              v65 = v68;
                            }
                            else
                            {
                              *v32 = v51;
                              *v50 = v64;
                              v66 = &v9[2 * v49 + 1];
                            }
                            goto LABEL_55;
                          }
LABEL_52:
                          if (v51 >= v63)
                          {
LABEL_56:
                            v75 = *v9;
                            *v9 = v63;
                            v20 = v9 + 1;
                            *v13 = v75;
                            v26 = (char *)&v9[2 * v12 + 1];
                            goto LABEL_57;
                          }
                          *v13 = v51;
                          v71 = &v9[2 * v12];
                          v72 = v71[1];
                          v66 = v71 + 1;
                          result = v72;
                          *v50 = v63;
                          v73 = &v9[2 * v49];
                          *v66 = v73[1];
                          v73[1] = v72;
                          if (v51 >= v64)
                          {
                            v63 = v51;
                            goto LABEL_56;
                          }
                          *v32 = v51;
                          *v13 = v64;
                          v65 = &v9[2 * v31 + 1];
LABEL_55:
                          v74 = *v65;
                          *v65 = *v66;
                          *v66 = v74;
                          v63 = *v13;
                          goto LABEL_56;
                        }
                        *v50 = v61;
                      }
                      else
                      {
                        v54 = (int *)(v9 + 5);
                        v9[4] = v53;
                      }
                      *((_DWORD *)a2 - 6) = v52;
                      v56 = a2 - 20;
                    }
                    v62 = *v54;
                    *v54 = *(_DWORD *)v56;
                    *(_DWORD *)v56 = v62;
                    v51 = *v50;
                    goto LABEL_46;
                  }
                  v9[2] = *v32;
                  *v32 = v40;
                  v36 = v9 + 3;
                }
                else
                {
                  if (v35 >= v33)
                  {
                    v44 = &v9[2 * v31];
                    v45 = v44[1];
                    v36 = v44 + 1;
                    v46 = v9[3];
                    v9[2] = v33;
                    v9[3] = v45;
                    *v32 = v34;
                    *v36 = v46;
                    v47 = *((_DWORD *)a2 - 4);
                    if (v47 >= v34)
                      goto LABEL_36;
                    *v32 = v47;
                  }
                  else
                  {
                    v36 = v9 + 3;
                    v9[2] = v35;
                  }
                  *((_DWORD *)a2 - 4) = v34;
                  v38 = a2 - 12;
                }
                v48 = *v36;
                *v36 = *(_DWORD *)v38;
                *(_DWORD *)v38 = v48;
                goto LABEL_36;
              }
              *v9 = *v13;
              v17 = v9 + 1;
              *v13 = v24;
            }
            else
            {
              if (v14 >= v15)
              {
                *v9 = v15;
                *v13 = v16;
                v28 = v9[1];
                v17 = &v9[2 * v12 + 1];
                v9[1] = *v17;
                *v17 = v28;
                v29 = *((_DWORD *)a2 - 2);
                if (v29 >= v16)
                  goto LABEL_23;
                *v13 = v29;
              }
              else
              {
                v17 = v9 + 1;
                *v9 = v14;
              }
              *((_DWORD *)a2 - 2) = v16;
              v22 = a2 - 4;
            }
            v30 = *v17;
            *v17 = *(_DWORD *)v22;
            *(_DWORD *)v22 = v30;
            goto LABEL_23;
          }
          v18 = *v9;
          v19 = *v13;
          if (*v9 >= *v13)
          {
            if (v14 < v18)
            {
              *v9 = v14;
              *((_DWORD *)a2 - 2) = v18;
              v26 = (char *)(v9 + 1);
              v25 = v9[1];
              v9[1] = *((_DWORD *)a2 - 1);
              *((_DWORD *)a2 - 1) = v25;
              v27 = *v13;
              if (*v9 < *v13)
              {
                *v13 = *v9;
                *v9 = v27;
                v20 = &v9[2 * v12 + 1];
LABEL_57:
                v76 = *v20;
                *v20 = *(_DWORD *)v26;
                *(_DWORD *)v26 = v76;
              }
            }
          }
          else
          {
            v20 = &v9[2 * v12 + 1];
            if (v14 < v18)
            {
              *v13 = v14;
              *((_DWORD *)a2 - 2) = v19;
LABEL_31:
              v26 = a2 - 4;
              goto LABEL_57;
            }
            *v13 = v18;
            v41 = v9[1];
            *v9 = v19;
            v42 = *v20;
            *v20 = v41;
            v9[1] = v42;
            v43 = *((_DWORD *)a2 - 2);
            if (v43 < v19)
            {
              *v9 = v43;
              *((_DWORD *)a2 - 2) = v19;
              v20 = v9 + 1;
              goto LABEL_31;
            }
          }
          --a3;
          if ((a4 & 1) == 0 && *(v9 - 2) >= *v9)
          {
            v91 = *(_QWORD *)v9;
            if (*((_DWORD *)a2 - 2) <= *(_QWORD *)v9)
            {
              v93 = v9 + 2;
              do
              {
                v9 = v93;
                if (v93 >= (unsigned int *)a2)
                  break;
                v93 += 2;
              }
              while (*v9 <= v91);
            }
            else
            {
              do
              {
                v92 = v9[2];
                v9 += 2;
              }
              while (v92 <= v91);
            }
            v94 = (unsigned int *)a2;
            if (v9 < (unsigned int *)a2)
            {
              v94 = (unsigned int *)a2;
              do
              {
                v95 = *(v94 - 2);
                v94 -= 2;
              }
              while (v95 > v91);
            }
            if (v9 < v94)
            {
              v96 = *v9;
              v97 = *v94;
              do
              {
                *v9 = v97;
                *v94 = v96;
                v98 = v9[1];
                v9[1] = v94[1];
                v94[1] = v98;
                do
                {
                  v99 = v9[2];
                  v9 += 2;
                  v96 = v99;
                }
                while (v99 <= v91);
                do
                {
                  v100 = *(v94 - 2);
                  v94 -= 2;
                  v97 = v100;
                }
                while (v100 > v91);
              }
              while (v9 < v94);
            }
            if (v9 - 2 != v7)
            {
              *v7 = *(v9 - 2);
              v7[1] = *(v9 - 1);
            }
            a4 = 0;
            *((_QWORD *)v9 - 1) = v91;
            continue;
          }
          v77 = 0;
          v78 = *(_QWORD *)v9;
          do
          {
            v79 = v9[v77 + 2];
            v77 += 2;
          }
          while (v79 < v78);
          v80 = (char *)&v9[v77];
          v81 = a2;
          if (v77 == 2)
          {
            v81 = a2;
            do
            {
              if (v80 >= v81)
                break;
              v83 = *((_DWORD *)v81 - 2);
              v81 -= 8;
            }
            while (v83 >= v78);
          }
          else
          {
            do
            {
              v82 = *((_DWORD *)v81 - 2);
              v81 -= 8;
            }
            while (v82 >= v78);
          }
          if (v80 >= v81)
          {
            v9 = (unsigned int *)((char *)v9 + v77 * 4);
            v89 = v80 - 8;
            if (v80 - 8 != (char *)v7)
              goto LABEL_75;
          }
          else
          {
            v84 = *(_DWORD *)v81;
            v9 = (unsigned int *)((char *)v9 + v77 * 4);
            v85 = (unsigned int *)v81;
            do
            {
              *v9 = v84;
              *v85 = v79;
              v86 = v9[1];
              v9[1] = v85[1];
              v85[1] = v86;
              do
              {
                v87 = v9[2];
                v9 += 2;
                v79 = v87;
              }
              while (v87 < v78);
              do
              {
                v88 = *(v85 - 2);
                v85 -= 2;
                v84 = v88;
              }
              while (v88 >= v78);
            }
            while (v9 < v85);
            v89 = (char *)(v9 - 2);
            if (v9 - 2 != v7)
            {
LABEL_75:
              *v7 = *(v9 - 2);
              v7[1] = *(v9 - 1);
            }
          }
          *((_QWORD *)v9 - 1) = v78;
          if (v80 < v81)
            goto LABEL_79;
          v90 = sub_2399AF410(v7, v89);
          result = sub_2399AF410(v9, a2);
          if (!(_DWORD)result)
          {
            if (v90)
              continue;
LABEL_79:
            result = sub_2399AE8C0(v7, v89, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v89;
          if (v90)
            return result;
          goto LABEL_2;
        }
        if (v9 == (unsigned int *)a2)
          return result;
        v132 = (unint64_t)(v11 - 2) >> 1;
        v133 = v132;
        while (2)
        {
          if (v132 >= v133)
          {
            v135 = (2 * v133) | 1;
            v136 = &v9[2 * v135];
            if (2 * v133 + 2 >= v11)
            {
              v137 = *v136;
              v139 = &v9[2 * v133];
              if (*v136 >= *v139)
              {
LABEL_146:
                v140 = *v139;
                v141 = v139[1];
                while (1)
                {
                  result = (uint64_t)v139;
                  v139 = v136;
                  *(_DWORD *)result = v137;
                  *(_DWORD *)(result + 4) = v136[1];
                  if (v132 < v135)
                    break;
                  result = (2 * v135) | 1;
                  v136 = &v9[2 * result];
                  v135 = 2 * v135 + 2;
                  if (v135 < v11)
                  {
                    v137 = *v136;
                    v142 = v136[2];
                    if (*v136 <= v142)
                      v137 = v136[2];
                    if (*v136 >= v142)
                      v135 = result;
                    else
                      v136 += 2;
                    if (v137 < v140)
                      break;
                  }
                  else
                  {
                    v137 = *v136;
                    v135 = result;
                    if (*v136 < v140)
                      break;
                  }
                }
                *v139 = v140;
                v139[1] = v141;
              }
            }
            else
            {
              v137 = *v136;
              v138 = v136[2];
              if (*v136 <= v138)
                v137 = v136[2];
              if (*v136 < v138)
              {
                v136 += 2;
                v135 = 2 * v133 + 2;
              }
              v139 = &v9[2 * v133];
              if (v137 >= *v139)
                goto LABEL_146;
            }
          }
          v134 = v133-- <= 0;
          if (!v134)
            continue;
          break;
        }
        v143 = (unint64_t)v10 >> 3;
        do
        {
          v144 = 0;
          v145 = *(_QWORD *)v9;
          v146 = (unint64_t)(v143 - 2) >> 1;
          v147 = v9;
          do
          {
            while (1)
            {
              v150 = (char *)&v147[2 * v144 + 2];
              v151 = (2 * v144) | 1;
              v144 = 2 * v144 + 2;
              if (v144 < v143)
                break;
              v144 = v151;
              *v147 = *(_DWORD *)v150;
              v147[1] = *((_DWORD *)v150 + 1);
              v147 = v150;
              if (v151 > v146)
                goto LABEL_169;
            }
            v148 = *(_DWORD *)v150;
            v149 = *((_DWORD *)v150 + 2);
            if (*(_DWORD *)v150 <= v149)
              v148 = *((_DWORD *)v150 + 2);
            if (*(_DWORD *)v150 >= v149)
              v144 = v151;
            else
              v150 += 8;
            *v147 = v148;
            v147[1] = *((_DWORD *)v150 + 1);
            v147 = v150;
          }
          while (v144 <= v146);
LABEL_169:
          if (v150 == a2 - 8)
          {
            *(_QWORD *)v150 = v145;
          }
          else
          {
            *(_DWORD *)v150 = *((_DWORD *)a2 - 2);
            *((_DWORD *)v150 + 1) = *((_DWORD *)a2 - 1);
            *((_QWORD *)a2 - 1) = v145;
            v152 = v150 - (char *)v9 + 8;
            if (v152 >= 9)
            {
              v153 = (((unint64_t)v152 >> 3) - 2) >> 1;
              v154 = (char *)&v9[2 * v153];
              v155 = *(_DWORD *)v154;
              if (*(_DWORD *)v154 < *(_DWORD *)v150)
              {
                v156 = *(_DWORD *)v150;
                v157 = *((_DWORD *)v150 + 1);
                do
                {
                  v158 = v150;
                  v150 = v154;
                  *(_DWORD *)v158 = v155;
                  *((_DWORD *)v158 + 1) = *((_DWORD *)v154 + 1);
                  if (!v153)
                    break;
                  v153 = (v153 - 1) >> 1;
                  v154 = (char *)&v9[2 * v153];
                  v155 = *(_DWORD *)v154;
                }
                while (*(_DWORD *)v154 < v156);
                *(_DWORD *)v150 = v156;
                *((_DWORD *)v150 + 1) = v157;
              }
            }
          }
          a2 -= 8;
          v134 = v143-- <= 2;
        }
        while (!v134);
        return result;
    }
  }
}

BOOL sub_2399AF410(unsigned int *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int *v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  char *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  char *v52;

  v4 = (a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_DWORD *)a2 - 2);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *((_DWORD *)a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      v9 = a1[2];
      v10 = *a1;
      v11 = *((_DWORD *)a2 - 2);
      if (v9 < *a1)
      {
        if (v11 >= v9)
        {
          v12 = (int *)(a1 + 3);
          v36 = a1[3];
          v37 = a1[1];
          *a1 = v9;
          a1[1] = v36;
          a1[2] = v10;
          a1[3] = v37;
          v38 = *((_DWORD *)a2 - 2);
          if (v38 >= v10)
            return result;
          a1[2] = v38;
        }
        else
        {
          v12 = (int *)(a1 + 1);
          *a1 = v11;
        }
        *((_DWORD *)a2 - 2) = v10;
        v30 = a2 - 4;
        goto LABEL_27;
      }
      if (v11 < v9)
      {
        a1[2] = v11;
        *((_DWORD *)a2 - 2) = v9;
        v30 = (char *)(a1 + 3);
        v29 = a1[3];
        a1[3] = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v29;
        v31 = a1[2];
        v32 = *a1;
        if (v31 < *a1)
        {
          *a1 = v31;
          a1[2] = v32;
          v12 = (int *)(a1 + 1);
LABEL_27:
          v39 = *v12;
          *v12 = *(_DWORD *)v30;
          *(_DWORD *)v30 = v39;
          return result;
        }
      }
      return result;
    case 4:
      sub_2399AF758((int *)a1, a1 + 2, a1 + 4, (unsigned int *)a2 - 2);
      return 1;
    case 5:
      sub_2399AF758((int *)a1, a1 + 2, a1 + 4, a1 + 6);
      v18 = *((_DWORD *)a2 - 2);
      v19 = a1[6];
      if (v18 >= v19)
        return 1;
      a1[6] = v18;
      *((_DWORD *)a2 - 2) = v19;
      v20 = a1[7];
      a1[7] = *((_DWORD *)a2 - 1);
      *((_DWORD *)a2 - 1) = v20;
      v21 = a1[6];
      v22 = a1[4];
      if (v21 >= v22)
        return 1;
      v23 = a1[5];
      v24 = a1[7];
      a1[4] = v21;
      a1[5] = v24;
      a1[6] = v22;
      a1[7] = v23;
      v25 = a1[2];
      if (v21 >= v25)
        return 1;
      v26 = a1[3];
      a1[2] = v21;
      a1[3] = v24;
      a1[4] = v25;
      a1[5] = v26;
      v27 = *a1;
      if (v21 >= *a1)
        return 1;
      v28 = a1[1];
      *a1 = v21;
      a1[1] = v24;
      a1[2] = v27;
      a1[3] = v28;
      return 1;
    default:
      v13 = (char *)(a1 + 4);
      v14 = a1[4];
      v15 = a1[2];
      v16 = *a1;
      if (v15 < *a1)
      {
        if (v14 >= v15)
        {
          v17 = (int *)(a1 + 3);
          v40 = a1[3];
          v41 = a1[1];
          *a1 = v15;
          a1[1] = v40;
          a1[2] = v16;
          a1[3] = v41;
          if (v14 >= v16)
            goto LABEL_32;
          a1[2] = v14;
        }
        else
        {
          v17 = (int *)(a1 + 1);
          *a1 = v14;
        }
        a1[4] = v16;
        v34 = (int *)(a1 + 5);
        goto LABEL_31;
      }
      if (v14 < v15)
      {
        v34 = (int *)(a1 + 3);
        v33 = a1[3];
        v35 = a1[5];
        a1[4] = v15;
        a1[5] = v33;
        a1[2] = v14;
        a1[3] = v35;
        if (v14 < v16)
        {
          *a1 = v14;
          a1[2] = v16;
          v17 = (int *)(a1 + 1);
LABEL_31:
          v42 = *v17;
          *v17 = *v34;
          *v34 = v42;
        }
      }
LABEL_32:
      v43 = (char *)(a1 + 6);
      if (a1 + 6 == (unsigned int *)a2)
        return 1;
      v44 = 0;
      v45 = 0;
      while (1)
      {
        v46 = *(_DWORD *)v13;
        if (*(_DWORD *)v43 < *(_DWORD *)v13)
          break;
LABEL_41:
        v13 = v43;
        v44 += 8;
        v43 += 8;
        if (v43 == a2)
          return 1;
      }
      v48 = *(_DWORD *)v43;
      v47 = *((_DWORD *)v43 + 1);
      v49 = v44;
      do
      {
        v50 = (unsigned int *)((char *)a1 + v49);
        v51 = *(unsigned int *)((char *)a1 + v49 + 20);
        v50[6] = v46;
        v50[7] = v51;
        if (v49 == -16)
        {
          *a1 = v48;
          a1[1] = v47;
          if (++v45 != 8)
            goto LABEL_41;
          return v43 + 8 == a2;
        }
        v46 = v50[2];
        v49 -= 8;
      }
      while (v46 > v48);
      v52 = (char *)a1 + v49;
      *((_DWORD *)v52 + 6) = v48;
      *((_DWORD *)v52 + 7) = v47;
      if (++v45 != 8)
        goto LABEL_41;
      return v43 + 8 == a2;
  }
}

int *sub_2399AF758(int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  unsigned int v8;
  int *v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;

  v4 = *a2;
  v5 = *result;
  v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 < v4)
    {
      *a2 = v6;
      *a3 = v4;
      v9 = (int *)(a2 + 1);
      v8 = a2[1];
      a2[1] = a3[1];
      a3[1] = v8;
      v10 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        v7 = result + 1;
        *a2 = v10;
LABEL_10:
        v12 = *v7;
        *v7 = *v9;
        *v9 = v12;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      v7 = result + 1;
      *result = v6;
LABEL_9:
      *a3 = v5;
      v9 = (int *)(a3 + 1);
      goto LABEL_10;
    }
    *result = v4;
    *a2 = v5;
    v7 = (int *)(a2 + 1);
    v11 = result[1];
    result[1] = a2[1];
    a2[1] = v11;
    v5 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  v13 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v13;
    v14 = a3[1];
    a3[1] = a4[1];
    a4[1] = v14;
    v15 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v15;
      v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      v17 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v17;
        v18 = result[1];
        result[1] = a2[1];
        a2[1] = v18;
      }
    }
  }
  return result;
}

void sub_2399AF888()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

BOOL sub_2399AF890(uint64_t a1, uint64_t *a2, float *a3)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  float32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  _BOOL8 v35;
  unint64_t v38;
  uint64_t v39;
  float32x4_t v41;
  float32x4_t v42;
  unsigned int v43;

  *a3 = 0.0;
  v3 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 136) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 128)) >> 2;
  v4 = -51 * v3;
  v5 = (-858993459 * v3);
  if (!(-858993459 * (_DWORD)v3))
    return 0;
  v6 = a1;
  v7 = operator new(8 * ((v5 - 1) >> 6) + 8);
  v8 = v7;
  if (v5 >= 0x41)
    v9 = (v5 - 1) >> 6;
  else
    v9 = 0;
  v7[v9] = 0;
  if (v5 >= 0x40)
    bzero(v7, 8 * (v5 >> 6));
  if ((v4 & 0x3F) != 0)
    v8[v5 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v4 & 0x3F));
  v10 = 0;
  v38 = 0;
  v39 = v6;
  do
  {
    if ((v8[v10 >> 6] & (1 << v10)) == 0)
    {
      v43 = v10;
      v11 = *(unsigned int *)sub_239962518(*(_QWORD *)(v6 + 40) + 104, &v43);
      v12 = *a2;
      *(_DWORD *)(*a2 + 4 * v10) = 0;
      *(_DWORD *)(v12 + 4 * v11) = 0;
      v13 = *(_QWORD *)(v6 + 40);
      v14 = v43;
      v15 = (uint64_t *)(*(_QWORD *)(v13 + 32) + 16 * *(unsigned int *)(v13 + 180));
      v16 = *v15;
      v17 = (std::__shared_weak_count *)v15[1];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (((*(_QWORD *)(*(_QWORD *)(v16 + 40) + ((v14 >> 3) & 0x1FFFFFF8)) >> v14) & 1) != 0)
        goto LABEL_11;
      v21 = *(unsigned int *)sub_239962518(v13 + 104, &v43);
      v22 = (uint64_t *)(*(_QWORD *)(v13 + 32) + 16 * *(unsigned int *)(v13 + 180));
      v23 = *v22;
      v24 = (std::__shared_weak_count *)v22[1];
      if (!v24)
        goto LABEL_26;
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
        if (((*(_QWORD *)(*(_QWORD *)(v23 + 40) + ((v21 >> 3) & 0x1FFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_27;
      }
      else
      {
LABEL_26:
        if (((*(_QWORD *)(*(_QWORD *)(v23 + 40) + ((v21 >> 3) & 0x1FFFFFF8)) >> v21) & 1) == 0)
        {
LABEL_27:
          v6 = v39;
          v28 = *(_DWORD *)(sub_239962518(*(_QWORD *)(v39 + 40) + 104, &v43) + 16);
          v29 = *(_QWORD *)(v39 + 40) + 104;
          v30 = (unsigned int *)sub_239962518(v29, &v43);
          LODWORD(v29) = *(_DWORD *)(sub_239962518(v29, v30) + 16);
          sub_23995E494(*(_QWORD *)(v39 + 40), v28, &v42);
          sub_23995E494(*(_QWORD *)(v39 + 40), v29, &v41);
          v31 = vmulq_f32(v42, v41);
          v31.i32[3] = 0;
          v32 = *a2;
          v33 = 4 * v10;
          *(float *)(v32 + v33) = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31));
          v31.f32[0] = 1.0 - *(float *)(v32 + 4 * v10);
          *(_DWORD *)(v32 + v33) = v31.i32[0];
          *a3 = v31.f32[0] + *a3;
          ++v38;
          *(_DWORD *)(v32 + 4 * v11) = *(_DWORD *)(v32 + 4 * v10);
          goto LABEL_12;
        }
      }
LABEL_11:
      v6 = v39;
LABEL_12:
      v8[v10 >> 6] |= 1 << v10;
      *(_QWORD *)((char *)v8 + ((v11 >> 3) & 0x1FFFFFF8)) |= 1 << v11;
    }
    ++v10;
  }
  while (v10 != v5);
  if (v38)
  {
    v34 = *a3 / (float)v38;
    *a3 = v34;
    v35 = fabsf(v34) > 0.00000001;
  }
  else
  {
    v35 = 0;
  }
  operator delete(v8);
  return v35;
}

void sub_2399AFC0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2399AFC20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2399AFC34(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2399AFC48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2399AFC5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2399AFC70(uint64_t a1, void **a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  char *v33;
  void **v34;
  _QWORD *v35;
  void **v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  unsigned int *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  char __p[18];
  char v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;

  v62 = -1;
  v63 = -1;
  v6 = *(_QWORD *)(a1 + 40);
  v61 = 17;
  strcpy(__p, "v:index_in_father");
  v64 = -1;
  v7 = sub_23999C498((uint64_t **)(v6 + 8), (uint64_t)&v64, (unsigned __int8 *)__p);
  if (v61 < 0)
    operator delete(*(void **)__p);
  v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * v7);
  v9 = (std::__shared_weak_count *)v8[1];
  v57 = *v8;
  if (!v9)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
    if ((v13 & 0x3FFFFFFFCLL) != 0)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
    if ((v13 & 0x3FFFFFFFCLL) != 0)
    {
LABEL_9:
      v14 = 0;
      v56 = (v13 >> 2);
      while (1)
      {
        v63 = v14;
        sub_239962B1C((uint64_t)__p, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v63);
        v64 = -1;
        v16 = sub_239962B44(__p);
        if (v16 == -1)
        {
LABEL_23:
          if (v64 == -1)
            goto LABEL_12;
        }
        else
        {
          v17 = v16;
          while (1)
          {
            v18 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32)
                            + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
            v19 = *v18;
            v20 = (std::__shared_weak_count *)v18[1];
            if (v20)
            {
              v21 = (unint64_t *)&v20->__shared_owners_;
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
              do
                v23 = __ldaxr(v21);
              while (__stlxr(v23 - 1, v21));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
            if (((*(_QWORD *)(*(_QWORD *)(v19 + 40) + (((unint64_t)v17 >> 3) & 0x1FFFFFF8)) >> v17) & 1) != 0)
              break;
            v17 = sub_239962B44(__p);
            if (v17 == -1)
              goto LABEL_23;
          }
          v64 = v17;
        }
        v62 = *(_DWORD *)(*(_QWORD *)(v57 + 40) + 4 * v63);
        if (sub_2399423C8(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40), &v62))
        {
          v24 = *(_QWORD *)(a1 + 40) + 104;
          v25 = (unsigned int *)sub_239962518(v24, &v64);
          v26 = *(unsigned int *)(sub_239962518(v24, v25) + 12);
          v27 = *(_QWORD *)(a1 + 40) + 104;
          v28 = sub_239962518(v27, &v64);
          v29 = *(unsigned int *)(sub_239962518(v27, (unsigned int *)(v28 + 4)) + 12);
          v30 = *(_QWORD *)(v57 + 40);
          v59 = *(_DWORD *)(v30 + 4 * v26);
          v58 = *(_DWORD *)(v30 + 4 * v29);
          if (sub_2399423C8(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40), &v59)
            && sub_2399423C8(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40), &v58))
          {
            goto LABEL_12;
          }
        }
        *(_QWORD *)(*a3 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        v31 = v63;
        v33 = (char *)a2[1];
        v32 = (unint64_t)a2[2];
        if ((unint64_t)v33 >= v32)
          break;
        *(_DWORD *)v33 = v63;
        v15 = (uint64_t)(v33 + 4);
LABEL_11:
        a2[1] = (void *)v15;
LABEL_12:
        if (++v14 == v56)
          return;
      }
      v34 = a2;
      v35 = a3;
      v36 = v34;
      v37 = (char *)*v34;
      v38 = v33 - (_BYTE *)*v34;
      v39 = v38 >> 2;
      v40 = (v38 >> 2) + 1;
      if (v40 >> 62)
        sub_2394189F8();
      v41 = v32 - (_QWORD)v37;
      if (v41 >> 1 > v40)
        v40 = v41 >> 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
        v40 = 0x3FFFFFFFFFFFFFFFLL;
      v55 = v40;
      if (v40)
      {
        if (v40 >> 62)
          sub_239418A80();
        v42 = operator new(4 * v40);
        v43 = (unsigned int *)&v42[4 * v39];
        *v43 = v31;
        v15 = (uint64_t)(v43 + 1);
        if (v33 != v37)
          goto LABEL_38;
      }
      else
      {
        v42 = 0;
        v43 = (unsigned int *)(4 * v39);
        *(_DWORD *)(4 * v39) = v63;
        v15 = 4 * v39 + 4;
        if (v33 != v37)
        {
LABEL_38:
          v44 = v33 - 4 - v37;
          v45 = v55;
          if (v44 >= 0x2C)
          {
            v46 = v33 - &v42[v38];
            a3 = v35;
            a2 = v36;
            if (v46 >= 0x20)
            {
              v47 = (v44 >> 2) + 1;
              v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
              v49 = &v33[-v48];
              v43 = (unsigned int *)((char *)v43 - v48);
              v50 = &v42[4 * v39 - 16];
              v51 = v33 - 16;
              v52 = v47 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v53 = *(_OWORD *)v51;
                *(v50 - 1) = *((_OWORD *)v51 - 1);
                *v50 = v53;
                v50 -= 2;
                v51 -= 32;
                v52 -= 8;
              }
              while (v52);
              v33 = v49;
              if (v47 == (v47 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_47;
            }
          }
          else
          {
            a3 = v35;
            a2 = v36;
          }
          do
          {
            v54 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *--v43 = v54;
          }
          while (v33 != v37);
LABEL_47:
          *a2 = v43;
          a2[1] = (void *)v15;
          a2[2] = &v42[4 * v45];
          if (v37)
            operator delete(v37);
          goto LABEL_11;
        }
      }
      a3 = v35;
      a2 = v36;
      v45 = v55;
      goto LABEL_47;
    }
  }
}

void sub_2399B00C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399B00E0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  unsigned int *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  unsigned int v52;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58[3];
  unsigned int v59;

  v4 = a4;
  v5 = a3;
  v7 = 0;
  v8 = ((a2[1] - *a2) >> 2);
  v59 = -1;
  do
  {
    v9 = v8;
    v11 = (char *)v5[1];
    v10 = v5[2];
    v55 = v9;
    if ((unint64_t)v11 < v10)
    {
      *(_DWORD *)v11 = v9;
      v5[1] = v11 + 4;
      if (v7 < v9)
        goto LABEL_28;
      goto LABEL_2;
    }
    v12 = (char *)*v5;
    v13 = (uint64_t)&v11[-*v5];
    v14 = v13 >> 2;
    v15 = (v13 >> 2) + 1;
    if (v15 >> 62)
      sub_2394189F8();
    v16 = v10 - (_QWORD)v12;
    if (v16 >> 1 > v15)
      v15 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (!v17)
    {
      v18 = 0;
      v19 = (_DWORD *)(4 * v14);
      *(_DWORD *)(4 * v14) = v9;
      v20 = 4 * v14 + 4;
      if (v11 == v12)
        goto LABEL_23;
LABEL_17:
      v21 = v11 - 4 - v12;
      if (v21 < 0x2C)
        goto LABEL_61;
      if ((unint64_t)(v11 - &v18[v13]) < 0x20)
        goto LABEL_61;
      v22 = (v21 >> 2) + 1;
      v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
      v24 = &v11[-v23];
      v19 = (_DWORD *)((char *)v19 - v23);
      v25 = &v18[4 * v14 - 16];
      v26 = v11 - 16;
      v27 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 8;
      }
      while (v27);
      v11 = v24;
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_61:
        do
        {
          v29 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *--v19 = v29;
        }
        while (v11 != v12);
      }
      goto LABEL_23;
    }
    if (v17 >> 62)
LABEL_57:
      sub_239418A80();
    v18 = operator new(4 * v17);
    v9 = v55;
    v19 = &v18[4 * v14];
    *v19 = v55;
    v20 = (uint64_t)(v19 + 1);
    if (v11 != v12)
      goto LABEL_17;
LABEL_23:
    *a3 = v19;
    a3[1] = v20;
    a3[2] = &v18[4 * v17];
    if (v12)
    {
      operator delete(v12);
      v9 = v55;
    }
    a3[1] = v20;
    if (v7 < v9)
    {
LABEL_28:
      while (1)
      {
        v56 = v7;
        v59 = *(_DWORD *)(*a2 + 4 * v7);
        sub_239962480((uint64_t)v58, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v59);
        v30 = sub_2399624A8(v58);
        if (v30 != -1)
          break;
LABEL_27:
        v9 = v55;
        v7 = v56 + 1;
        if (v56 + 1 == v55)
          goto LABEL_2;
      }
      v31 = v30;
      while (2)
      {
        v33 = (unint64_t)v31 >> 6;
        if ((*(_QWORD *)(*v4 + 8 * v33) & (1 << v31)) != 0)
          goto LABEL_32;
        v35 = (char *)a2[1];
        v34 = a2[2];
        if ((unint64_t)v35 < v34)
        {
          *(_DWORD *)v35 = v31;
          v32 = (uint64_t)(v35 + 4);
          goto LABEL_31;
        }
        v36 = (char *)*a2;
        v37 = (uint64_t)&v35[-*a2];
        v38 = v37 >> 2;
        v39 = (v37 >> 2) + 1;
        if (v39 >> 62)
          sub_2394189F8();
        v40 = v34 - (_QWORD)v36;
        if (v40 >> 1 > v39)
          v39 = v40 >> 1;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 >> 62)
            goto LABEL_57;
          v42 = operator new(4 * v41);
          v43 = (unsigned int *)&v42[4 * v38];
          *v43 = v31;
          v32 = (uint64_t)(v43 + 1);
          if (v35 == v36)
          {
LABEL_52:
            *a2 = v43;
            a2[1] = v32;
            a2[2] = &v42[4 * v41];
            if (v36)
              operator delete(v36);
            v4 = a4;
LABEL_31:
            a2[1] = v32;
            *(_QWORD *)(*v4 + 8 * v33) |= 1 << v31;
LABEL_32:
            v31 = sub_2399624A8(v58);
            if (v31 == -1)
              goto LABEL_27;
            continue;
          }
        }
        else
        {
          v42 = 0;
          v43 = (unsigned int *)(4 * v38);
          *(_DWORD *)(4 * v38) = v31;
          v32 = 4 * v38 + 4;
          if (v35 == v36)
            goto LABEL_52;
        }
        break;
      }
      v44 = v35 - 4 - v36;
      if (v44 < 0x2C)
        goto LABEL_62;
      if ((unint64_t)(v35 - &v42[v37]) < 0x20)
        goto LABEL_62;
      v45 = (v44 >> 2) + 1;
      v46 = 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
      v47 = &v35[-v46];
      v43 = (unsigned int *)((char *)v43 - v46);
      v48 = &v42[4 * v38 - 16];
      v49 = v35 - 16;
      v50 = v45 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v51 = *(_OWORD *)v49;
        *(v48 - 1) = *((_OWORD *)v49 - 1);
        *v48 = v51;
        v48 -= 2;
        v49 -= 32;
        v50 -= 8;
      }
      while (v50);
      v35 = v47;
      if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_62:
        do
        {
          v52 = *((_DWORD *)v35 - 1);
          v35 -= 4;
          *--v43 = v52;
        }
        while (v35 != v36);
      }
      goto LABEL_52;
    }
LABEL_2:
    v8 = ((a2[1] - *a2) >> 2);
    v7 = v9;
    v5 = a3;
  }
  while (v9 != v8);
}

void sub_2399B04B0(_QWORD *a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  __int32 v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  __int32 *v25;
  __int32 *v26;
  unint64_t v27;
  __int32 *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  __int32 *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  __int32 *v42;
  uint64_t v43;
  __int128 v44;
  __int32 v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void **v49;
  uint64_t v50;
  unsigned int v51;
  char __p[18];
  char v53;
  unsigned int v54;

  a1[30] = a1[29];
  v49 = (void **)(a1 + 29);
  v6 = a1[5];
  v8 = *(_QWORD *)(v6 + 104);
  v7 = *(_QWORD *)(v6 + 112);
  v53 = 17;
  strcpy(__p, "v:index_in_father");
  v54 = -1;
  v9 = sub_23999C498((uint64_t **)(v6 + 8), (uint64_t)&v54, (unsigned __int8 *)__p);
  v10 = v7 - v8;
  if (v53 < 0)
  {
    operator delete(*(void **)__p);
    v47 = (v10 >> 2);
    if (!(v10 >> 2))
      return;
  }
  else
  {
    v47 = (v10 >> 2);
    if (!(v10 >> 2))
      return;
  }
  v11 = 0;
  v46 = v9;
  v48 = a3;
  while (2)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1[5] + 8) + 16 * v46);
    v13 = *v12;
    v14 = (std::__shared_weak_count *)v12[1];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v50 = v11;
    v54 = *(_DWORD *)(*(_QWORD *)(v13 + 40) + 4 * v11);
    sub_239962B1C((uint64_t)__p, (_QWORD *)(*(_QWORD *)(a1[35] + 40) + 104), &v54);
    while (1)
    {
      v51 = sub_239962B44(__p);
      if (v51 == -1)
        break;
      v18 = *(_QWORD *)(a1[35] + 40) + 104;
      v19 = (unsigned int *)sub_239962518(v18, &v51);
      v20 = *(unsigned int *)(sub_239962518(v18, v19) + 16);
      if ((_DWORD)v20 != -1)
      {
        v21 = *(_DWORD *)(*a3 + 4 * v20);
        if (v21 != a2)
        {
          v23 = (__int32 *)a1[29];
          v22 = (__int32 *)a1[30];
          v24 = wmemchr(v23, v21, v22 - v23);
          v25 = v24 ? v24 : v22;
          v26 = (__int32 *)a1[30];
          if (v25 == v26)
          {
            v27 = a1[31];
            if ((unint64_t)v25 < v27)
            {
              *v25 = v21;
              a1[30] = v25 + 1;
            }
            else
            {
              v28 = (__int32 *)*v49;
              v29 = (char *)v26 - (_BYTE *)*v49;
              v30 = v29 >> 2;
              v31 = (v29 >> 2) + 1;
              if (v31 >> 62)
                sub_2394189F8();
              v32 = v27 - (_QWORD)v28;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (!v33)
              {
                v34 = 0;
                v35 = (__int32 *)(4 * v30);
                *(_DWORD *)(4 * v30) = v21;
                v36 = 4 * v30 + 4;
                if (v25 == v28)
                  goto LABEL_40;
LABEL_34:
                v37 = (char *)(v25 - 1) - (char *)v28;
                if (v37 < 0x3C)
                  goto LABEL_48;
                if ((unint64_t)((char *)v25 - &v34[v29]) < 0x20)
                  goto LABEL_48;
                v38 = v25 - v23;
                v39 = (v37 >> 2) + 1;
                v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
                v25 = (__int32 *)((char *)v25 - v40);
                v35 = (__int32 *)((char *)v35 - v40);
                v41 = &v34[4 * v30 - 16];
                v42 = &v23[v38 - 4];
                v43 = v39 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v44 = *(_OWORD *)v42;
                  *(v41 - 1) = *((_OWORD *)v42 - 1);
                  *v41 = v44;
                  v41 -= 2;
                  v42 -= 8;
                  v43 -= 8;
                }
                while (v43);
                if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_48:
                  do
                  {
                    v45 = *--v25;
                    *--v35 = v45;
                  }
                  while (v25 != v28);
                }
                goto LABEL_40;
              }
              if (v33 >> 62)
                sub_239418A80();
              v34 = operator new(4 * v33);
              v35 = (__int32 *)&v34[4 * v30];
              *v35 = v21;
              v36 = (uint64_t)(v35 + 1);
              if (v25 != v28)
                goto LABEL_34;
LABEL_40:
              a1[29] = v35;
              a1[30] = v36;
              a1[31] = &v34[4 * v33];
              if (v28)
                operator delete(v28);
              a3 = v48;
              a1[30] = v36;
            }
          }
        }
      }
    }
    v11 = v50 + 1;
    if (v50 + 1 != v47)
      continue;
    break;
  }
}

void sub_2399B07FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399B0818(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4, BOOL *a5)
{
  unint64_t v6;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  const void *v22;
  int64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int *v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int *v43;
  int v44;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char v50;
  float v51;
  void *__p;
  char *v53;
  uint64_t v54;
  _OWORD *v55;
  char *v56;
  char *v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  unint64_t v70;

  *a5 = 0;
  if (a4 < 2)
    return;
  v6 = a1[33] - a1[32];
  if (v6 < 0x20)
    return;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v10 = (_QWORD *)a1[5];
  v11 = -858993459 * ((v10[17] - v10[16]) >> 2);
  v13 = v10[19];
  v12 = v10[20];
  v48 = v10[14];
  v47 = v10[13];
  v64 = 0;
  v65 = 0;
  v66 = 0;
  if ((_DWORD)v11)
  {
    v64 = (char *)operator new(4 * v11);
    v66 = &v64[4 * v11];
    bzero(v64, 4 * v11);
    v49 = v64;
    v65 = v66;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_17:
    sub_2394189F8();
  }
  v49 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  if ((v6 & 0x8000000000000000) != 0)
    goto LABEL_17;
LABEL_5:
  v14 = (char *)operator new(v6 >> 2);
  v15 = v12 - v13;
  v61 = v14;
  v63 = &v14[4 * ((uint64_t)v6 >> 4)];
  bzero(v14, v6 >> 2);
  v62 = &v14[v6 >> 2];
  v16 = (v15 >> 2);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  if ((v15 >> 2))
  {
    v17 = (v16 - 1) >> 6;
    v18 = operator new(8 * (v17 + 1));
    v19 = v18;
    v59 = (v15 >> 2);
    v60 = v17 + 1;
    v58 = v18;
    if (v16 >= 0x41)
      v20 = (v16 - 1) >> 6;
    else
      v20 = 0;
    v18[v20] = 0;
    if (v16 >= 0x40)
      bzero(v18, 8 * (v16 >> 6));
    if (v15 >> 2)
      v19[v16 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v15 >> 2));
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v22 = (const void *)*a3;
    v21 = a3[1];
    v23 = v21 - *a3;
    if (v21 != *a3)
      goto LABEL_14;
  }
  else
  {
    v19 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v22 = (const void *)*a3;
    v25 = a3[1];
    v23 = v25 - *a3;
    if (v25 != *a3)
    {
LABEL_14:
      if (v23 < 0)
        sub_2394189F8();
      v24 = operator new(v23);
      v55 = v24;
      v57 = (char *)v24 + 4 * (v23 >> 2);
      memcpy(v24, v22, v23);
      v56 = v57;
      goto LABEL_20;
    }
  }
  v24 = 0;
LABEL_20:
  __p = 0;
  v53 = 0;
  v54 = 0;
  v51 = 0.0;
  if (sub_2399AF890((uint64_t)a1, (uint64_t *)&v64, &v51))
  {
    sub_2399B0D00(a1, &v67, a3, &v58, &v61);
    v26 = ((v68 - v67) >> 2) * ((unint64_t)(v48 - v47) >> 2);
    v27 = (v53 - (_BYTE *)__p) >> 2;
    if (v26 <= v27)
    {
      if (v26 < v27)
        v53 = (char *)__p + 4 * v26;
    }
    else
    {
      sub_2394807B4((uint64_t)&__p, v26 - v27);
    }
    sub_2399B1258(a1, a2, (uint64_t *)&__p, &v67);
    v50 = 0;
    sub_2399B18B4(a1, (uint64_t *)&__p, (uint64_t *)&v67, &v50);
    if (v50)
    {
      sub_2399B1BC4(a1, (v68 - v67) >> 2, a3, &v58, &v61, 2uLL, (uint64_t *)&__p, &v64, v51);
      v70 = a4;
      *a5 = 1;
      v28 = *(_QWORD *)(a1[5] + 160) - *(_QWORD *)(a1[5] + 152);
      v29 = (v28 >> 2);
      if (v29 < 2)
      {
LABEL_30:
        if ((v28 >> 2))
        {
          v33 = 0;
          v34 = *a3;
          if (v29 < 8)
            goto LABEL_36;
          if ((unint64_t)v24 - v34 < 0x20)
            goto LABEL_36;
          v35 = (v28 >> 2) & 7;
          v33 = v29 - v35;
          v36 = (__int128 *)(v34 + 16);
          v37 = v24 + 1;
          v38 = v29 - v35;
          do
          {
            v39 = *v36;
            *(v37 - 1) = *(v36 - 1);
            *v37 = v39;
            v36 += 2;
            v37 += 2;
            v38 -= 8;
          }
          while (v38);
          if (v35)
          {
LABEL_36:
            v40 = v33 - v29;
            v41 = 4 * v33;
            v42 = (_DWORD *)v24 + v33;
            v43 = (int *)(v34 + v41);
            do
            {
              v44 = *v43++;
              *v42++ = v44;
            }
            while (!__CFADD__(v40++, 1));
          }
        }
      }
      else
      {
        v30 = (int *)(*a3 + 4);
        v31 = v29 - 1;
        while (1)
        {
          v32 = *v30++;
          if (*(_DWORD *)*a3 != v32)
            break;
          if (!--v31)
            goto LABEL_30;
        }
      }
      sub_2399BA370((uint64_t)a1, &v70, a3, a5);
    }
  }
  if (__p)
  {
    v53 = (char *)__p;
    operator delete(__p);
  }
  if (v24)
    operator delete(v24);
  if (v19)
    operator delete(v19);
  operator delete(v14);
  if (v49)
    operator delete(v49);
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
}

void sub_2399B0C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;

  if (__p)
    operator delete(__p);
  if (v26)
    operator delete(v26);
  if (v27)
    operator delete(v27);
  operator delete(v25);
  if (a13)
  {
    operator delete(a13);
    v29 = *(void **)(v28 - 120);
    if (v29)
    {
LABEL_12:
      *(_QWORD *)(v28 - 112) = v29;
      operator delete(v29);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v29 = *(void **)(v28 - 120);
    if (v29)
      goto LABEL_12;
  }
  _Unwind_Resume(a1);
}

void sub_2399B0D00(_QWORD *a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  _DWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  _QWORD *v66;
  uint64_t *v68;
  char __p[18];
  char v70;
  int v71;

  v5 = *(_QWORD *)(a1[5] + 112) - *(_QWORD *)(a1[5] + 104);
  v6 = (v5 >> 2);
  if (!(v5 >> 2))
  {
    v8 = 0;
    v10 = a1[32];
    if (a1[33] == v10)
      goto LABEL_64;
    goto LABEL_12;
  }
  v7 = operator new(8 * ((v6 - 1) >> 6) + 8);
  v8 = v7;
  if (v6 >= 0x41)
    v9 = (v6 - 1) >> 6;
  else
    v9 = 0;
  v7[v9] = 0;
  if (v6 >= 0x40)
    bzero(v7, 8 * (v6 >> 6));
  if (v5 >> 2)
    v8[v6 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 >> 2));
  v10 = a1[32];
  if (a1[33] != v10)
  {
LABEL_12:
    v11 = 0;
    v12 = 0;
    v66 = v8;
    do
    {
      v68 = (uint64_t *)(v10 + 16 * v11);
      v13 = *(_QWORD *)(*v68 + 40);
      v70 = 17;
      strcpy(__p, "f:index_in_father");
      v71 = -1;
      v14 = sub_23998FA20((uint64_t **)(v13 + 56), (uint64_t)&v71, (unsigned __int8 *)__p);
      if (v70 < 0)
        operator delete(*(void **)__p);
      v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v68 + 40) + 56) + 16 * v14);
      v16 = *v15;
      v17 = (std::__shared_weak_count *)v15[1];
      if (!v17)
        goto LABEL_21;
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
        v21 = *v68;
        v22 = *(_QWORD *)(*(_QWORD *)(*v68 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*v68 + 40) + 152);
        if (!v22)
          goto LABEL_25;
      }
      else
      {
LABEL_21:
        v21 = *v68;
        v22 = *(_QWORD *)(*(_QWORD *)(*v68 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(*v68 + 40) + 152);
        if (!v22)
          goto LABEL_25;
      }
      v23 = v22 >> 2;
      v24 = *(unsigned int **)(v16 + 40);
      v25 = *a3;
      if (v23 <= 1)
        v23 = 1;
      do
      {
        v26 = *v24++;
        *(_DWORD *)(v25 + 4 * v26) = v12;
        --v23;
      }
      while (v23);
LABEL_25:
      sub_2399B1FB8(v21, a4, (_DWORD *)(*a5 + 4 * v11));
      v27 = *(_QWORD *)(*v68 + 40);
      v70 = 17;
      strcpy(__p, "v:index_in_father");
      v71 = -1;
      v28 = a2;
      v29 = sub_23999C498((uint64_t **)(v27 + 8), (uint64_t)&v71, (unsigned __int8 *)__p);
      if (v70 < 0)
        operator delete(*(void **)__p);
      v30 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v68 + 40) + 8) + 16 * v29);
      v31 = *v30;
      v32 = (std::__shared_weak_count *)v30[1];
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        do
          v35 = __ldaxr(v33);
        while (__stlxr(v35 - 1, v33));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          v36 = *v68;
          v37 = *(_QWORD *)(*v68 + 72);
          if (*(_QWORD *)(*v68 + 80) == v37)
            goto LABEL_13;
LABEL_33:
          v38 = 0;
          while (2)
          {
            v40 = *(unsigned int *)(*(_QWORD *)(v31 + 40) + 4 * *(unsigned int *)(v37 + 4 * v38));
            if (((1 << v40) & v8[v40 >> 6]) != 0)
              goto LABEL_36;
            v42 = (char *)v28[1];
            v41 = v28[2];
            if ((unint64_t)v42 < v41)
            {
              *(_DWORD *)v42 = v40;
              v39 = (uint64_t)(v42 + 4);
              goto LABEL_35;
            }
            v43 = (char *)*v28;
            v44 = (uint64_t)&v42[-*v28];
            v45 = v44 >> 2;
            v46 = (v44 >> 2) + 1;
            if (v46 >> 62)
              sub_2394189F8();
            v47 = v41 - (_QWORD)v43;
            if (v47 >> 1 > v46)
              v46 = v47 >> 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              if (v48 >> 62)
                sub_239418A80();
              v49 = v48;
              v50 = operator new(4 * v48);
              v48 = v49;
              v51 = &v50[4 * v45];
              *v51 = v40;
              v39 = (uint64_t)(v51 + 1);
              if (v42 != v43)
              {
LABEL_48:
                v52 = v42 - 4 - v43;
                if (v52 < 0x2C)
                {
                  v8 = v66;
                  goto LABEL_56;
                }
                v53 = v42 - &v50[v44];
                v8 = v66;
                if (v53 < 0x20)
                  goto LABEL_71;
                v54 = (v52 >> 2) + 1;
                v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
                v56 = &v42[-v55];
                v51 = (_DWORD *)((char *)v51 - v55);
                v57 = &v50[4 * v45 - 16];
                v58 = v42 - 16;
                v59 = v54 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v60 = *(_OWORD *)v58;
                  *(v57 - 1) = *((_OWORD *)v58 - 1);
                  *v57 = v60;
                  v57 -= 2;
                  v58 -= 32;
                  v59 -= 8;
                }
                while (v59);
                v42 = v56;
                if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_71:
                  do
                  {
LABEL_56:
                    v61 = *((_DWORD *)v42 - 1);
                    v42 -= 4;
                    *--v51 = v61;
                  }
                  while (v42 != v43);
                }
LABEL_57:
                v28 = a2;
                *a2 = v51;
                a2[1] = v39;
                a2[2] = &v50[4 * v48];
                if (v43)
                  operator delete(v43);
LABEL_35:
                v28[1] = v39;
                v8[v40 >> 6] |= 1 << v40;
                v36 = *v68;
LABEL_36:
                ++v38;
                v37 = *(_QWORD *)(v36 + 72);
                if (v38 >= (*(_QWORD *)(v36 + 80) - v37) >> 2)
                  goto LABEL_13;
                continue;
              }
            }
            else
            {
              v50 = 0;
              v51 = (_DWORD *)(4 * v45);
              *(_DWORD *)(4 * v45) = v40;
              v39 = 4 * v45 + 4;
              if (v42 != v43)
                goto LABEL_48;
            }
            break;
          }
          v8 = v66;
          goto LABEL_57;
        }
      }
      v36 = *v68;
      v37 = *(_QWORD *)(*v68 + 72);
      if (*(_QWORD *)(*v68 + 80) != v37)
        goto LABEL_33;
LABEL_13:
      v10 = a1[32];
      v11 = ++v12;
    }
    while (v12 < (unint64_t)((a1[33] - v10) >> 4));
  }
LABEL_64:
  if (v8)
    operator delete(v8);
}

void sub_2399B11FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v28;

  if (a26 < 0)
  {
    operator delete(__p);
    v28 = v26;
    if (!v26)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v28 = v26;
    if (!v26)
      goto LABEL_3;
  }
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

void sub_2399B1258(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  _QWORD *v21;
  unsigned int *v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  int *v41;
  int v42;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int64_t v48;
  unint64_t v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  _OWORD *v57;
  unsigned int *v58;
  uint64_t v59;
  __int128 v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  __int128 *v71;
  _OWORD *v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 *v82;
  _OWORD *v83;
  unint64_t v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  int *v88;
  _DWORD *v89;
  int v90;
  unsigned int *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _DWORD *v97;
  unsigned int *v98;
  int v99;
  unsigned int *v100;
  _OWORD *v101;
  unint64_t v102;
  __int128 v103;
  uint64_t v104;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int *v111;
  char *v112;
  char *v113;
  char *v114;

  v4 = a4;
  v112 = 0;
  v113 = 0;
  v114 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v5 = *a4;
  if (a4[1] == *a4)
    goto LABEL_73;
  v6 = a1;
  v7 = 0;
  v8 = *(_QWORD *)(a1[5] + 112) - *(_QWORD *)(a1[5] + 104);
  v9 = (v8 >> 2);
  v10 = 4 * v9;
  v104 = (v8 >> 2) & 7;
  do
  {
    v12 = *(unsigned int *)(v5 + 4 * v7);
    if (((*(_QWORD *)(v6[26] + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) == 0)
    {
      v20 = v110;
      if (v110 < v111)
      {
        *v110 = v12;
        v11 = (uint64_t)(v20 + 1);
        goto LABEL_4;
      }
      v21 = v4;
      v22 = v109;
      v23 = (char *)v110 - (char *)v109;
      v24 = v110 - v109;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        sub_2394189F8();
      v26 = (char *)v111 - (char *)v109;
      if (((char *)v111 - (char *)v109) >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 62)
          sub_239418A80();
        v28 = v27;
        v29 = operator new(4 * v27);
        v27 = v28;
        v30 = (unsigned int *)&v29[4 * v24];
        *v30 = v12;
        v11 = (uint64_t)(v30 + 1);
        if (v20 != v22)
        {
LABEL_24:
          v31 = (char *)(v20 - 1) - (char *)v22;
          if (v31 >= 0x2C)
          {
            v53 = (char *)v20 - &v29[v23];
            v4 = v21;
            if (v53 >= 0x20)
            {
              v54 = (v31 >> 2) + 1;
              v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
              v56 = &v20[v55 / 0xFFFFFFFFFFFFFFFCLL];
              v30 = (unsigned int *)((char *)v30 - v55);
              v57 = &v29[4 * v24 - 16];
              v58 = v20 - 4;
              v59 = v54 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v60 = *(_OWORD *)v58;
                *(v57 - 1) = *((_OWORD *)v58 - 1);
                *v57 = v60;
                v57 -= 2;
                v58 -= 8;
                v59 -= 8;
              }
              while (v59);
              v20 = v56;
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_53:
                v6 = a1;
                v20 = v109;
                v109 = v30;
                v111 = (unsigned int *)&v29[4 * v27];
                if (v20)
LABEL_54:
                  operator delete(v20);
LABEL_4:
                v110 = (unsigned int *)v11;
                goto LABEL_5;
              }
            }
          }
          else
          {
            v4 = v21;
          }
          do
          {
            v61 = *--v20;
            *--v30 = v61;
          }
          while (v20 != v22);
          goto LABEL_53;
        }
      }
      else
      {
        v29 = 0;
        v30 = (unsigned int *)(4 * v24);
        *(_DWORD *)(4 * v24) = v12;
        v11 = 4 * v24 + 4;
        if (v20 != v22)
          goto LABEL_24;
      }
      v4 = v21;
      v109 = v30;
      v111 = (unsigned int *)&v29[4 * v27];
      v6 = a1;
      if (!v20)
        goto LABEL_4;
      goto LABEL_54;
    }
    v14 = v6[9];
    v13 = v6[10];
    v15 = v13 - v14;
    if (v13 == v14)
      goto LABEL_5;
    v16 = 0;
    v17 = 0;
    v18 = v15 >> 2;
    if (v18 <= 1)
      v18 = 1;
    v19 = 16;
    while (*(_DWORD *)(v14 + 4 * v17) != (_DWORD)v12)
    {
      ++v17;
      v19 += v10;
      v16 += v9;
      if (v17 == v18)
        goto LABEL_5;
    }
    v33 = v112;
    v32 = v113;
    v34 = v113 - v112;
    v35 = (v113 - v112) >> 2;
    if (v9)
    {
      v36 = *a2;
      v37 = *a3;
      if (v9 < 8 || (unint64_t)(v10 * v35 + v37 - (v36 + v10 * v17)) < 0x20)
      {
        v38 = 0;
LABEL_30:
        v39 = v38 - v9;
        v40 = (_DWORD *)(v37 + 4 * (v38 + v35 * v9));
        v41 = (int *)(v36 + 4 * (v38 + v16));
        do
        {
          v42 = *v41++;
          *v40++ = v42;
        }
        while (!__CFADD__(v39++, 1));
        goto LABEL_33;
      }
      v71 = (__int128 *)(v36 + v19);
      v72 = (_OWORD *)(v37 + v10 * v35 + 16);
      v73 = v9 - v104;
      do
      {
        v74 = *v71;
        *(v72 - 1) = *(v71 - 1);
        *v72 = v74;
        v71 += 2;
        v72 += 2;
        v73 -= 8;
      }
      while (v73);
      v38 = v9 - v104;
      if (v104)
        goto LABEL_30;
    }
LABEL_33:
    if (v32 < v114)
    {
      *(_DWORD *)v32 = v12;
      v113 = v32 + 4;
      goto LABEL_5;
    }
    v44 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62)
      sub_2394189F8();
    v45 = v114 - v33;
    if ((v114 - v33) >> 1 > v44)
      v44 = v45 >> 1;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
      v46 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (v46)
    {
      if (v46 >> 62)
        sub_239418A80();
      v47 = v35;
      v48 = v34;
      v49 = v46;
      v50 = operator new(4 * v46);
      v34 = v48;
      v46 = v49;
      v35 = v47;
      v4 = a4;
      v51 = &v50[4 * v35];
      *(_DWORD *)v51 = v12;
      v52 = (uint64_t)(v51 + 4);
      if (v32 == v33)
        goto LABEL_63;
LABEL_56:
      v62 = v32 - 4 - v33;
      if (v62 < 0x2C)
        goto LABEL_108;
      if ((unint64_t)(v32 - &v50[v34 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
        goto LABEL_108;
      v63 = (v62 >> 2) + 1;
      v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
      v65 = &v32[-v64];
      v51 -= v64;
      v66 = &v50[4 * v35 - 16];
      v67 = v32 - 16;
      v68 = v63 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v69 = *(_OWORD *)v67;
        *(v66 - 1) = *((_OWORD *)v67 - 1);
        *v66 = v69;
        v66 -= 2;
        v67 -= 32;
        v68 -= 8;
      }
      while (v68);
      v32 = v65;
      if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_108:
        do
        {
          v70 = *((_DWORD *)v32 - 1);
          v32 -= 4;
          *((_DWORD *)v51 - 1) = v70;
          v51 -= 4;
        }
        while (v32 != v33);
      }
      v32 = v112;
      goto LABEL_63;
    }
    v50 = 0;
    v51 = (char *)(4 * v35);
    *(_DWORD *)(4 * v35) = v12;
    v52 = 4 * v35 + 4;
    if (v32 != v33)
      goto LABEL_56;
LABEL_63:
    v112 = v51;
    v114 = &v50[4 * v46];
    if (v32)
      operator delete(v32);
    v113 = (char *)v52;
LABEL_5:
    ++v7;
    v5 = *v4;
  }
  while (v7 < (uint64_t)(v4[1] - *v4) >> 2);
  if (v109 != v110)
  {
    v75 = (uint64_t)v6;
    v77 = v112;
    v76 = v113;
    v78 = (v113 - v112) >> 2;
    sub_2399952B0(v75, &v109, (float32x2_t *)(*a3 + 4 * v78 * v9));
    if (v76 == v77)
      goto LABEL_84;
    goto LABEL_74;
  }
LABEL_73:
  v77 = v112;
  v78 = (v113 - v112) >> 2;
  if (v113 == v112)
    goto LABEL_84;
LABEL_74:
  v79 = 0;
  v80 = *v4;
  if (v78 <= 1)
    v81 = 1;
  else
    v81 = v78;
  if (v81 < 8)
    goto LABEL_82;
  if ((unint64_t)(v80 - (_QWORD)v77) < 0x20)
    goto LABEL_82;
  v79 = v81 & 0xFFFFFFFFFFFFFFF8;
  v82 = (__int128 *)(v77 + 16);
  v83 = (_OWORD *)(v80 + 16);
  v84 = v81 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v85 = *v82;
    *(v83 - 1) = *(v82 - 1);
    *v83 = v85;
    v82 += 2;
    v83 += 2;
    v84 -= 8;
  }
  while (v84);
  if (v81 != v79)
  {
LABEL_82:
    v86 = v81 - v79;
    v87 = 4 * v79;
    v88 = (int *)&v77[4 * v79];
    v89 = (_DWORD *)(v80 + v87);
    do
    {
      v90 = *v88++;
      *v89++ = v90;
      --v86;
    }
    while (v86);
  }
LABEL_84:
  v91 = v109;
  if (v110 != v109)
  {
    v92 = v110 - v109;
    v93 = *v4;
    if (v92 <= 1)
      v92 = 1;
    if (v92 < 8 || (v94 = 4 * v78 + v93, (unint64_t)(v94 - (_QWORD)v109) < 0x20))
    {
      v95 = 0;
      goto LABEL_90;
    }
    v95 = v92 & 0xFFFFFFFFFFFFFFF8;
    v100 = v109 + 4;
    v101 = (_OWORD *)(v94 + 16);
    v102 = v92 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v103 = *(_OWORD *)v100;
      *(v101 - 1) = *((_OWORD *)v100 - 1);
      *v101 = v103;
      v100 += 8;
      v101 += 2;
      v102 -= 8;
    }
    while (v102);
    if (v92 != v95)
    {
LABEL_90:
      v96 = v92 - v95;
      v97 = (_DWORD *)(v93 + 4 * (v95 + v78));
      v98 = &v91[v95];
      do
      {
        v99 = *v98++;
        *v97++ = v99;
        --v96;
      }
      while (v96);
    }
LABEL_100:
    v110 = v91;
    operator delete(v91);
    if (!v77)
      return;
LABEL_95:
    operator delete(v77);
    return;
  }
  if (v109)
    goto LABEL_100;
  if (v77)
    goto LABEL_95;
}

void sub_2399B1868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v22;

  if (__p)
  {
    operator delete(__p);
    v22 = a20;
    if (!a20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v22 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_2399B18B4(_QWORD *a1, uint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char __p[18];
  char v49;
  int v50;

  *a4 = 0;
  v8 = a1 + 36;
  v9 = a1[36];
  v10 = (a1[37] - v9) >> 2;
  v11 = ((*(_QWORD *)(a1[5] + 112) - *(_QWORD *)(a1[5] + 104)) >> 2);
  if (v11 != v10)
  {
    if (v11 <= v10)
    {
      if (v11 < v10)
        a1[37] = v9 + 4 * v11;
    }
    else
    {
      sub_23942CB44((uint64_t)(a1 + 36), v11 - v10);
    }
  }
  v12 = (uint64_t *)a1[32];
  for (i = (uint64_t *)a1[33]; v12 != i; v12 += 2)
  {
    while (1)
    {
      v42 = *v12;
      v43 = *(_QWORD *)(*v12 + 288);
      v44 = (*(_QWORD *)(*v12 + 296) - v43) >> 2;
      v45 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*v12 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(*v12 + 40) + 104)) >> 2;
      if (v45 != v44)
        break;
LABEL_29:
      v12 += 2;
      if (v12 == i)
        goto LABEL_7;
    }
    if (v45 <= v44)
    {
      if (v45 < v44)
        *(_QWORD *)(v42 + 296) = v43 + 4 * v45;
      goto LABEL_29;
    }
    sub_23942CB44(v42 + 288, v45 - v44);
  }
LABEL_7:
  v14 = *a3;
  v15 = a3[1];
  v16 = v15 - *a3;
  if (v15 != *a3)
  {
    v17 = 0;
    v18 = v16 >> 2;
    v19 = *v8;
    if (v18 <= 1)
      v18 = 1;
    do
    {
      *(_DWORD *)(v19 + 4 * *(unsigned int *)(v14 + 4 * v17)) = v17;
      ++v17;
    }
    while (v18 != v17);
  }
  v20 = a1[32];
  if (a1[33] == v20)
    goto LABEL_40;
  v21 = 0;
  do
  {
    v23 = (uint64_t *)(v20 + 16 * v21);
    v24 = *(_QWORD *)(*v23 + 40);
    v49 = 17;
    strcpy(__p, "v:index_in_father");
    v50 = -1;
    v25 = sub_23999C498((uint64_t **)(v24 + 8), (uint64_t)&v50, (unsigned __int8 *)__p);
    v26 = v25;
    if (v49 < 0)
    {
      operator delete(*(void **)__p);
      v30 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v23 + 40) + 8) + 16 * v26);
      v28 = *v30;
      v29 = (std::__shared_weak_count *)v30[1];
      if (!v29)
        goto LABEL_22;
    }
    else
    {
      v27 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*v23 + 40) + 8) + 16 * v25);
      v28 = *v27;
      v29 = (std::__shared_weak_count *)v27[1];
      if (!v29)
        goto LABEL_22;
    }
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(p_shared_owners);
    while (__stxr(v32 + 1, p_shared_owners));
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
      v34 = *v23;
      v35 = *(unsigned int **)(*v23 + 72);
      v36 = *(_QWORD *)(*v23 + 80) - (_QWORD)v35;
      if (!v36)
        goto LABEL_13;
      goto LABEL_23;
    }
LABEL_22:
    v34 = *v23;
    v35 = *(unsigned int **)(*v23 + 72);
    v36 = *(_QWORD *)(*v23 + 80) - (_QWORD)v35;
    if (!v36)
      goto LABEL_13;
LABEL_23:
    v37 = v36 >> 2;
    v38 = *(_QWORD *)(v28 + 40);
    v39 = *v8;
    v40 = *(_QWORD *)(v34 + 288);
    if (v37 <= 1)
      v37 = 1;
    do
    {
      v41 = *v35++;
      *(_DWORD *)(v40 + 4 * v41) = *(_DWORD *)(v39 + 4 * *(unsigned int *)(v38 + 4 * v41));
      --v37;
    }
    while (v37);
LABEL_13:
    ++v21;
    v20 = a1[32];
    v22 = a1[33];
  }
  while (v21 < (v22 - v20) >> 4);
  *(_QWORD *)__p = 0;
  if (v22 == v20)
  {
LABEL_40:
    *a4 = 1;
    return;
  }
  v46 = 0;
  v47 = 0;
  while (1)
  {
    sub_2399B265C(*(_QWORD *)(v20 + v46), a2, 2uLL, __p);
    if (*(_QWORD *)__p != 2)
      break;
    ++v47;
    v20 = a1[32];
    v46 += 16;
    if (v47 >= (a1[33] - v20) >> 4)
      goto LABEL_40;
  }
}

void sub_2399B1BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399B1BC4(_QWORD *a1, unint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unint64_t a6, uint64_t *a7, _QWORD *a8, float a9)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *__p;
  void *v46;
  float *v47;
  uint64_t v48;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  float *v58;
  float *v59;
  float *v60;
  _QWORD v61[25];

  sub_2399D4A44((uint64_t)v61);
  v16 = a1[32];
  v15 = a1[33];
  v48 = v15;
  if (v15 == v16)
    goto LABEL_19;
  v17 = (v15 - v16) >> 4;
  if (v17 <= 1)
    v17 = 1;
  if (v17 < 2)
  {
    v18 = 0;
LABEL_15:
    v26 = v17 - v18;
    v27 = (uint64_t *)(v16 + 16 * v18);
    do
    {
      v28 = *v27;
      v27 += 2;
      v29 = (uint64_t)(*(_QWORD *)(v28 + 80) - *(_QWORD *)(v28 + 72)) >> 2;
      if (a2 <= v29)
        a2 = v29;
      --v26;
    }
    while (v26);
    goto LABEL_19;
  }
  v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
  v19 = (uint64_t *)(v16 + 16);
  v20 = v17 & 0xFFFFFFFFFFFFFFFELL;
  v21 = a2;
  do
  {
    v22 = *(v19 - 2);
    v23 = *v19;
    v19 += 4;
    v24 = (uint64_t)(*(_QWORD *)(v22 + 80) - *(_QWORD *)(v22 + 72)) >> 2;
    v25 = (uint64_t)(*(_QWORD *)(v23 + 80) - *(_QWORD *)(v23 + 72)) >> 2;
    if (a2 <= v24)
      a2 = v24;
    if (v21 <= v25)
      v21 = v25;
    v20 -= 2;
  }
  while (v20);
  if (a2 <= v21)
    a2 = v21;
  if (v17 != v18)
    goto LABEL_15;
LABEL_19:
  v30 = a1[5];
  v32 = *(_QWORD *)(v30 + 152);
  v31 = *(_QWORD *)(v30 + 160);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  if (!a2)
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v47 = 0;
    if (v31 != v32)
      goto LABEL_22;
LABEL_26:
    __p = 0;
    v46 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    if (v48 == v16)
      goto LABEL_41;
    goto LABEL_27;
  }
  if (a2 >> 62)
    sub_2394189F8();
  v58 = (float *)operator new(4 * a2);
  v60 = &v58[a2];
  bzero(v58, 4 * a2);
  v59 = v60;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v47 = v58;
  if (v31 == v32)
    goto LABEL_26;
LABEL_22:
  v33 = v31 - v32;
  if (v31 - v32 < 0)
    sub_2394189F8();
  v55 = (char *)operator new(v31 - v32);
  v57 = &v55[4 * (v33 >> 2)];
  bzero(v55, v33);
  v56 = &v55[v33];
  v46 = v55;
  v52 = (char *)operator new(v33);
  v54 = &v52[4 * (v33 >> 2)];
  bzero(v52, v33);
  __p = v52;
  v53 = &v52[v33];
  if (v48 != v16)
  {
LABEL_27:
    v34 = 0;
    v35 = 0;
    do
    {
      sub_2399B04B0(*(_QWORD **)(v16 + 16 * v34), v35, a3);
      v16 = a1[32];
      v36 = a1[33];
      v34 = ++v35;
    }
    while (v35 < (unint64_t)((v36 - v16) >> 4));
    if (v36 != v16)
    {
      v37 = 0;
      v38 = 0;
      do
      {
        v39 = (uint64_t *)(v16 + 16 * v37);
        v40 = *v39;
        v41 = *(_QWORD *)(*v39 + 232);
        if (*(_QWORD *)(*v39 + 240) != v41)
        {
          v42 = 0;
          do
          {
            v43 = *(unsigned int *)(v41 + 4 * v42);
            if (v38 < v43 && (*(_DWORD *)(*a5 + 4 * v37) || *(_DWORD *)(*a5 + 4 * v43)))
            {
              sub_2399B2B54((uint64_t)a1, v38, v43, v61, (uint64_t *)&v52, a3, a4, a6, a9, a7, a8, &v58, &v55);
              v40 = *v39;
            }
            ++v42;
            v41 = *(_QWORD *)(v40 + 232);
          }
          while (v42 < (*(_QWORD *)(v40 + 240) - v41) >> 2);
          v16 = a1[32];
          v36 = a1[33];
        }
        v37 = ++v38;
      }
      while (v38 < (unint64_t)((v36 - v16) >> 4));
    }
  }
LABEL_41:
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  if (v46)
    operator delete(v46);
  if (v47)
    operator delete(v47);
  return sub_2399D4BAC(v61);
}

void sub_2399B1F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;

  operator delete(v30);
  if (__p)
    operator delete(__p);
  sub_2399D4BAC(&a30);
  _Unwind_Resume(a1);
}

void sub_2399B1FB8(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int64_t v18;
  float v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _DWORD *v51;
  uint64_t v52;
  unsigned int i;
  unint64_t v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  _DWORD v78[5];
  unsigned int v79;
  void *__p[4];
  void *v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  _BYTE *v85;
  uint64_t v86;

  sub_239995298(a1);
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v6 = *(_QWORD **)(a1 + 40);
  v7 = v6[14] - v6[13];
  v9 = v6[19];
  v8 = v6[20];
  v81 = 0;
  v82 = 0;
  v83 = 0;
  v10 = (v7 >> 2);
  if ((v7 >> 2))
  {
    v11 = (v10 - 1) >> 6;
    v12 = operator new(8 * (v11 + 1));
    v13 = v12;
    v82 = (v7 >> 2);
    v83 = v11 + 1;
    v81 = v12;
    if (v10 >= 0x41)
      v14 = (v10 - 1) >> 6;
    else
      v14 = 0;
    v12[v14] = 0;
    if (v10 >= 0x40)
      bzero(v12, 8 * (v10 >> 6));
    if (v7 >> 2)
      v13[v10 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v7 >> 2));
  }
  sub_2399AFC70(a1, &v84, &v81);
  v15 = *(_QWORD *)(a1 + 40);
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "f:index_in_father");
  v78[0] = -1;
  v16 = sub_23998FA20((uint64_t **)(v15 + 56), (uint64_t)v78, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v17 = v8 - v9;
    if (v84 != v85)
      goto LABEL_11;
  }
  else
  {
    v17 = v8 - v9;
    if (v84 != v85)
    {
LABEL_11:
      memset(__p, 0, 24);
      sub_2399B00E0(a1, &v84, __p, &v81);
      v18 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v19 = (float)((float)(unint64_t)v18 * 0.3) + 0.5;
      v20 = v18 - 1;
      if (v20 >= (unint64_t)v19)
        v21 = (unint64_t)v19;
      else
        v21 = v20;
      do
      {
        v22 = v21;
        v23 = *((unsigned int *)__p[0] + v21);
        v24 = (v7 >> 2) - v23;
        --v21;
      }
      while (v22 && v24 <= 0x18);
      if (v24 <= 0x18)
      {
        if ((v7 >> 2))
        {
          v40 = 0;
          v41 = (char *)v81;
          do
          {
            *(_QWORD *)&v41[(v40 >> 3) & 0x1FFFFFFFFFFFFFF8] &= ~(1 << v40);
            ++v40;
          }
          while (v10 != v40);
        }
      }
      else
      {
        v25 = (v85 - (_BYTE *)v84) >> 2;
        v26 = v25 > v23;
        v27 = v25 - v23;
        if (v26)
        {
          v28 = (char *)v81;
          v29 = (unsigned int *)((char *)v84 + 4 * v23);
          do
          {
            v30 = *v29++;
            *(_QWORD *)&v28[((unint64_t)v30 >> 3) & 0x1FFFFFF8] &= ~(1 << v30);
            --v27;
          }
          while (v27);
        }
      }
      sub_2399960D0(a1, &v81);
      if (v22)
      {
        *a3 = v21;
        if ((v17 >> 2))
        {
          v42 = 0;
          do
          {
            v44 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 16 * v16);
            v46 = *v44;
            v45 = (std::__shared_weak_count *)v44[1];
            if (v45)
            {
              p_shared_owners = (unint64_t *)&v45->__shared_owners_;
              do
                v48 = __ldxr(p_shared_owners);
              while (__stxr(v48 + 1, p_shared_owners));
              do
                v49 = __ldaxr(p_shared_owners);
              while (__stlxr(v49 - 1, p_shared_owners));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v43 = *(unsigned int *)(*(_QWORD *)(v46 + 40) + 4 * v42);
            *(_QWORD *)(*a2 + ((v43 >> 3) & 0x1FFFFFF8)) |= 1 << v43;
            ++v42;
          }
          while (v42 != (v17 >> 2));
        }
        v50 = *((unsigned int *)__p[0] + v21 + 1);
        v51 = v84;
        if (v50 < (v85 - (_BYTE *)v84) >> 2)
        {
          v52 = v16;
          do
          {
            v79 = v51[v50];
            sub_239962B1C((uint64_t)v78, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v79);
            for (i = sub_239962B44(v78); ; i = sub_239962B44(v78))
            {
              v77 = i;
              if (i == -1)
                break;
              v55 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32)
                              + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
              v57 = *v55;
              v56 = (std::__shared_weak_count *)v55[1];
              if (v56)
              {
                v58 = (unint64_t *)&v56->__shared_owners_;
                do
                  v59 = __ldxr(v58);
                while (__stxr(v59 + 1, v58));
                do
                  v60 = __ldaxr(v58);
                while (__stlxr(v60 - 1, v58));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                  std::__shared_weak_count::__release_weak(v56);
                }
              }
              if (((*(_QWORD *)(*(_QWORD *)(v57 + 40) + (((unint64_t)i >> 3) & 0x1FFFFFF8)) >> i) & 1) == 0)
              {
                v61 = *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v77) + 16);
                v62 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 16 * v52);
                v64 = *v62;
                v63 = (std::__shared_weak_count *)v62[1];
                if (v63)
                {
                  v65 = (unint64_t *)&v63->__shared_owners_;
                  do
                    v66 = __ldxr(v65);
                  while (__stxr(v66 + 1, v65));
                  do
                    v67 = __ldaxr(v65);
                  while (__stlxr(v67 - 1, v65));
                  if (!v67)
                  {
                    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                    std::__shared_weak_count::__release_weak(v63);
                  }
                }
                v54 = *(unsigned int *)(*(_QWORD *)(v64 + 40) + 4 * v61);
                *(_QWORD *)(*a2 + ((v54 >> 3) & 0x1FFFFFF8)) &= ~(1 << v54);
              }
            }
            ++v50;
            v51 = v84;
          }
          while (v50 < (v85 - (_BYTE *)v84) >> 2);
        }
      }
      else
      {
        *a3 = 0;
        v68 = (v17 >> 2);
        if ((v17 >> 2))
        {
          v69 = 0;
          do
          {
            v71 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 16 * v16);
            v73 = *v71;
            v72 = (std::__shared_weak_count *)v71[1];
            if (v72)
            {
              v74 = (unint64_t *)&v72->__shared_owners_;
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
              do
                v76 = __ldaxr(v74);
              while (__stlxr(v76 - 1, v74));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            v70 = *(unsigned int *)(*(_QWORD *)(v73 + 40) + 4 * v69);
            *(_QWORD *)(*a2 + ((v70 >> 3) & 0x1FFFFFF8)) &= ~(1 << v70);
            ++v69;
          }
          while (v69 != v68);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      goto LABEL_77;
    }
  }
  if ((v17 >> 2))
  {
    v31 = 0;
    v32 = v16;
    do
    {
      v34 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 16 * v32);
      v36 = *v34;
      v35 = (std::__shared_weak_count *)v34[1];
      if (v35)
      {
        v37 = (unint64_t *)&v35->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
        do
          v39 = __ldaxr(v37);
        while (__stlxr(v39 - 1, v37));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      v33 = *(unsigned int *)(*(_QWORD *)(v36 + 40) + 4 * v31);
      *(_QWORD *)(*a2 + ((v33 >> 3) & 0x1FFFFFF8)) &= ~(1 << v33);
      ++v31;
    }
    while (v31 != (v17 >> 2));
  }
  *a3 = 0;
LABEL_77:
  if (v81)
    operator delete(v81);
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
}

void sub_2399B25D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v27;

  if (__p)
    operator delete(__p);
  if (a22)
  {
    operator delete(a22);
    v27 = a25;
    if (!a25)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v27 = a25;
    if (!a25)
      goto LABEL_5;
  }
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

void sub_2399B265C(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  float *v26;
  uint64_t v27;
  float *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int *v37;
  float *v38;
  float *v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  float v43;
  unint64_t v44;
  int *v45;
  uint64_t *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  int *v70;
  int *v71;
  void *__p[4];

  v8 = *(_QWORD *)(a1 + 40);
  HIBYTE(__p[2]) = 17;
  strcpy((char *)__p, "v:index_in_father");
  LODWORD(v69) = -1;
  v9 = sub_23999C498((uint64_t **)(v8 + 8), (uint64_t)&v69, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * v9);
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v17 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  v18 = (v16 - v17) >> 2;
  v19 = v18 * v18;
  memset(__p, 0, 24);
  if (!(v18 * v18))
  {
    v20 = 0;
    if (v16 == v17)
      goto LABEL_25;
    goto LABEL_14;
  }
  if (v19 >> 62)
    sub_2394189F8();
  v20 = (float *)operator new(4 * v19);
  __p[0] = v20;
  __p[2] = &v20[v19];
  bzero(v20, 4 * v19);
  __p[1] = &v20[v19];
  if (v16 != v17)
  {
LABEL_14:
    v21 = 0;
    v22 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40) + 112)
         - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 40) + 104)) >> 2;
    v23 = *a2;
    v24 = v18 - 1;
    if (v18 <= 1)
      v25 = 1;
    else
      v25 = (v16 - v17) >> 2;
    v26 = v20 + 1;
    v27 = 4 * v18 + 4;
    v28 = &v20[v18];
    v29 = (unsigned int *)(v17 + 4);
    do
    {
      v30 = *(unsigned int *)(v17 + 4 * v21);
      v20[v21 + v21 * v18] = 0.0;
      if (++v21 < v18)
      {
        v31 = *(_QWORD *)(a1 + 288);
        v32 = 4 * v30;
        v33 = *(_DWORD *)(v31 + 4 * v30);
        v34 = *(_QWORD *)(v12 + 40);
        v35 = v33 * v22;
        v36 = *(_DWORD *)(v34 + v32);
        v37 = v29;
        v38 = v28;
        v39 = v26;
        v40 = v24;
        do
        {
          v41 = *v37++;
          v42 = 4 * v41;
          v43 = *(float *)(v23 + 4 * (v36 + *(_DWORD *)(v31 + v42) * v22));
          if (v43 >= *(float *)(v23 + 4 * (*(_DWORD *)(v34 + v42) + v35)))
            v43 = *(float *)(v23 + 4 * (*(_DWORD *)(v34 + v42) + v35));
          *v38 = v43;
          *v39++ = v43;
          v38 += v18;
          --v40;
        }
        while (v40);
      }
      --v24;
      v26 = (float *)((char *)v26 + v27);
      v28 = (float *)((char *)v28 + v27);
      ++v29;
    }
    while (v21 != v25);
  }
LABEL_25:
  sub_2399A40F8(a1 + 120, v18, v20);
  sub_2399A4D1C(a1 + 120, a3, a4);
  v44 = v18 * a3;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  if (v18 * a3)
  {
    if (v44 >> 62)
      sub_2394189F8();
    v45 = (int *)operator new(4 * v44);
    v69 = v45;
    v71 = &v45[v44];
    bzero(v45, 4 * v44);
    v70 = &v45[v44];
  }
  else
  {
    v45 = 0;
  }
  sub_2399A6368((unint64_t *)(a1 + 120), a3, (float *)v45);
  v46 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
  v47 = *v46;
  v48 = (std::__shared_weak_count *)v46[1];
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
    do
      v51 = __ldaxr(v49);
    while (__stlxr(v51 - 1, v49));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 32))(v47, (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2);
  if (v16 != v17)
  {
    v52 = 0;
    if (v18 <= 1)
      v53 = 1;
    else
      v53 = (v16 - v17) >> 2;
    do
    {
      v54 = *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * v52);
      v55 = *v45;
      v56 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
      v58 = *v56;
      v57 = (std::__shared_weak_count *)v56[1];
      if (v57)
      {
        v59 = (unint64_t *)&v57->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        do
          v61 = __ldaxr(v59);
        while (__stlxr(v61 - 1, v59));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v58 + 40) + 8 * v54) = v55;
      v62 = v45[1];
      v63 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
      v65 = *v63;
      v64 = (std::__shared_weak_count *)v63[1];
      if (v64)
      {
        v66 = (unint64_t *)&v64->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        do
          v68 = __ldaxr(v66);
        while (__stlxr(v68 - 1, v66));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v65 + 40) + 8 * v54 + 4) = v62;
      v45 += a3;
      ++v52;
    }
    while (v52 != v53);
  }
  if (v69)
    operator delete(v69);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_2399B2AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_2399B2B54(uint64_t a1, unsigned int a2, unsigned int a3, _QWORD *a4, uint64_t *a5, _QWORD *a6, _QWORD *a7, unint64_t a8, float a9, uint64_t *a10, _QWORD *a11, float **a12, _QWORD *a13)
{
  uint64_t v13;
  unint64_t v14;
  char *v19;
  unint64_t v20;
  char *v21;
  unsigned int *v22;
  uint64_t v23;
  float **v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int *v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  float v50;
  unsigned int v51;
  unint64_t v52;
  float v53;
  float v54;
  uint64_t v55;
  _DWORD *v56;
  float v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  float v62;
  float v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  float v79;
  unsigned int *v80;
  _DWORD *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v87;
  uint64_t v88;
  size_t __sz;
  size_t __sza;
  uint64_t *v91;
  uint64_t *v92;
  unsigned int v96;
  void *__p;
  void *v98;
  char *v99;
  unsigned int v100;
  _DWORD *v101;
  char *v102;
  _DWORD *v103;
  unsigned int *v104;
  _DWORD *v105;
  char *v106;

  v13 = *(_QWORD *)(a1 + 256);
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152);
  if ((v14 & 0x3FFFFFFFCLL) == 0)
    return;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = (v14 >> 2);
  v24 = a12;
  v25 = (uint64_t)v105;
  v92 = (uint64_t *)(v13 + 16 * a2);
  v91 = (uint64_t *)(v13 + 16 * a3);
  v88 = v23;
  __sz = a8;
  do
  {
    v26 = *a5;
    *(_DWORD *)(*a5 + 4 * v20) = -1;
    if (((*(_QWORD *)(*a7 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
    {
      v27 = *(_DWORD *)(*a6 + 4 * v20);
      if (v27 == a2 || v27 == a3)
      {
        v29 = v19 - (char *)v22;
        v30 = (v19 - (char *)v22) >> 2;
        *(_DWORD *)(v26 + 4 * v20) = v30;
        if (v19 < v21)
        {
          *(_DWORD *)v19 = v20;
          v19 += 4;
          v25 = (uint64_t)v19;
          v24 = a12;
          goto LABEL_4;
        }
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
        {
          v105 = (_DWORD *)v25;
          v106 = v21;
          v104 = v22;
          sub_2394189F8();
        }
        if ((v21 - (char *)v22) >> 1 > v31)
          v31 = (v21 - (char *)v22) >> 1;
        if ((unint64_t)(v21 - (char *)v22) >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v31;
        if (v32)
        {
          if (v32 >> 62)
          {
            v105 = (_DWORD *)v25;
            v106 = v21;
            v104 = v22;
            sub_239418A80();
          }
          v33 = a7;
          v34 = v32;
          v35 = operator new(4 * v32);
          v32 = v34;
          a7 = v33;
          v36 = (unsigned int *)&v35[4 * v30];
          *v36 = v20;
          v25 = (uint64_t)(v36 + 1);
          if (v19 != (char *)v22)
          {
LABEL_21:
            v37 = v19 - 4 - (char *)v22;
            if (v37 < 0xBC
              || (v42 = v29 & 0xFFFFFFFFFFFFFFFCLL,
                  &v35[(v29 & 0xFFFFFFFFFFFFFFFCLL) - 4 - (v37 & 0xFFFFFFFFFFFFFFFCLL)] > &v35[(v29 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                             - 4]))
            {
              v38 = (unsigned int *)v19;
              v24 = a12;
            }
            else
            {
              v24 = a12;
              if (&v19[-(v37 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v19 - 4)
              {
                v38 = (unsigned int *)v19;
              }
              else if (v19 - v35 - v42 >= 0x20)
              {
                v43 = (v37 >> 2) + 1;
                v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
                v38 = (unsigned int *)&v19[-v44];
                v36 = (unsigned int *)((char *)v36 - v44);
                v45 = &v35[4 * v30 - 16];
                v46 = v19 - 16;
                v47 = v43 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v48 = *(_OWORD *)v46;
                  *(v45 - 1) = *((_OWORD *)v46 - 1);
                  *v45 = v48;
                  v45 -= 2;
                  v46 -= 32;
                  v47 -= 8;
                }
                while (v47);
                if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_24:
                  v21 = &v35[4 * v32];
                  if (v22)
                  {
LABEL_25:
                    v40 = v22;
                    v41 = (char *)v25;
                    operator delete(v40);
                    v25 = (uint64_t)v41;
                    v19 = v41;
LABEL_29:
                    v22 = v36;
                    v23 = v88;
                    a8 = __sz;
                    goto LABEL_4;
                  }
LABEL_28:
                  v19 = (char *)v25;
                  goto LABEL_29;
                }
              }
              else
              {
                v38 = (unsigned int *)v19;
              }
            }
            do
            {
              v39 = *--v38;
              *--v36 = v39;
            }
            while (v38 != v22);
            goto LABEL_24;
          }
        }
        else
        {
          v35 = 0;
          v36 = (unsigned int *)(4 * v30);
          *(_DWORD *)(4 * v30) = v20;
          v25 = 4 * v30 + 4;
          if (v19 != (char *)v22)
            goto LABEL_21;
        }
        v24 = a12;
        v21 = &v35[4 * v32];
        if (v22)
          goto LABEL_25;
        goto LABEL_28;
      }
    }
LABEL_4:
    ++v20;
  }
  while (v20 != v23);
  v105 = (_DWORD *)v25;
  v106 = v21;
  v104 = v22;
  if (v22 == (unsigned int *)v19)
    goto LABEL_77;
  __sza = v19 - (char *)v22;
  v85 = (v19 - (char *)v22) >> 2;
  if (v85 <= 1)
    v49 = 1;
  else
    v49 = (v19 - (char *)v22) >> 2;
  v50 = 0.0;
  v87 = v49;
  do
  {
    v51 = *v22++;
    v52 = a8;
    v53 = sub_2399B32CC(a1, v51, *v92, v24, a8, a10);
    v54 = vabds_f32(v53, sub_2399B32CC(a1, v51, *v91, v24, v52, a10));
    *(float *)(*a13 + 4 * v51) = v54;
    v50 = v50 + v54;
    --v49;
    a8 = v52;
  }
  while (v49);
  v101 = 0;
  v102 = 0;
  v103 = 0;
  if ((__sza & 0x8000000000000000) != 0)
    sub_2394189F8();
  v55 = v87;
  v56 = operator new(__sza);
  v101 = v56;
  v103 = &v56[v85];
  bzero(v56, __sza);
  v102 = (char *)v56 + __sza;
  sub_2399D4B4C((uint64_t)a4);
  sub_2399D2838(a4, v85, 0, 6);
  v58 = v87;
  do
  {
    *v56++ = sub_2399D4BB0(a4);
    --v58;
  }
  while (v58);
  v59 = 0;
  while (2)
  {
    v100 = v104[v59];
    v60 = operator new(0xCuLL);
    v98 = v60 + 3;
    v99 = (char *)(v60 + 3);
    *(_QWORD *)v60 = -1;
    v60[2] = -1;
    __p = v60;
    sub_23996389C(*(_QWORD *)(a1 + 40), &v100, (uint64_t)&__p);
    v61 = 0;
    while (2)
    {
      v96 = *((_DWORD *)__p + v61);
      v64 = *(_QWORD *)(a1 + 40);
      v65 = *(unsigned int *)sub_239962518(v64 + 104, &v96);
      v66 = (uint64_t *)(*(_QWORD *)(v64 + 32) + 16 * *(unsigned int *)(v64 + 180));
      v68 = *v66;
      v67 = (std::__shared_weak_count *)v66[1];
      if (!v67)
        goto LABEL_63;
      p_shared_owners = (unint64_t *)&v67->__shared_owners_;
      do
        v70 = __ldxr(p_shared_owners);
      while (__stxr(v70 + 1, p_shared_owners));
      do
        v71 = __ldaxr(p_shared_owners);
      while (__stlxr(v71 - 1, p_shared_owners));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
        if (((*(_QWORD *)(*(_QWORD *)(v68 + 40) + ((v65 >> 3) & 0x1FFFFFF8)) >> v65) & 1) == 0)
          goto LABEL_64;
      }
      else
      {
LABEL_63:
        if (((*(_QWORD *)(*(_QWORD *)(v68 + 40) + ((v65 >> 3) & 0x1FFFFFF8)) >> v65) & 1) == 0)
        {
LABEL_64:
          v72 = *(_QWORD *)(a1 + 40) + 104;
          v73 = (unsigned int *)sub_239962518(v72, &v96);
          v74 = *(unsigned int *)(sub_239962518(v72, v73) + 16);
          if (((*(_QWORD *)(*a7 + ((v74 >> 3) & 0x1FFFFFF8)) >> v74) & 1) != 0)
          {
            v76 = *(unsigned int *)(*a5 + 4 * v74);
            if ((_DWORD)v76 != -1)
            {
              v77 = 4 * v100;
              v78 = 0.650000006 / ((float)(*(float *)(*a11 + 4 * v96) / a9) + 1.0);
              v57 = (v50 + v50) / (float)v85;
              v79 = v78 + (float)((float)((float)(*(float *)(*a13 + v77) + *(float *)(*a13 + 4 * v74)) / v57) * 0.35);
              sub_2399D4BB4(a4, v101[*(unsigned int *)(*a5 + v77)], v101[v76], v79, v79);
            }
          }
          else
          {
            v62 = 3.4028e38;
            if (*(_DWORD *)(*a6 + 4 * v74) == a2)
              v63 = 3.4028e38;
            else
              v63 = 0.0;
            if (*(_DWORD *)(*a6 + 4 * v74) == a2)
              v62 = 0.0;
            sub_2399D4BB8((uint64_t)a4, v101[*(unsigned int *)(*a5 + 4 * v100)], v63, v62, v75);
          }
        }
      }
      if (++v61 != 3)
        continue;
      break;
    }
    if (__p)
    {
      v98 = __p;
      operator delete(__p);
    }
    if (++v59 != v87)
      continue;
    break;
  }
  LODWORD(__p) = 0;
  sub_2399D4BBC((uint64_t)a4, (float *)&__p);
  v80 = v104;
  v81 = v101;
  do
  {
    v83 = *v80++;
    v82 = v83;
    if (sub_2399D4C10((uint64_t)a4, v81[*(unsigned int *)(*a5 + 4 * v83)]))
      v84 = a2;
    else
      v84 = a3;
    *(_DWORD *)(*a6 + 4 * v82) = v84;
    --v55;
  }
  while (v55);
  operator delete(v81);
  v19 = (char *)v104;
LABEL_77:
  if (v19)
  {
    v105 = v19;
    operator delete(v19);
  }
}

void sub_2399B3234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  if (__p)
    operator delete(__p);
  v31 = *(void **)(v29 - 160);
  if (v31)
  {
    *(_QWORD *)(v29 - 152) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

float sub_2399B32CC(uint64_t a1, unsigned int a2, uint64_t a3, float **a4, unint64_t a5, uint64_t *a6)
{
  char *v11;
  float32x4_t *v12;
  _DWORD *v13;
  int v14;
  unint64_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  unint64_t v18;
  float32x4_t v19;
  unint64_t v20;
  uint64_t v21;
  float *v22;
  float *v23;
  float v24;
  unint64_t v25;
  float32x4_t *v26;
  float32x4_t *v27;
  unint64_t v28;
  float32x4_t v29;
  unint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float v34;
  unint64_t v35;
  float32x4_t *v36;
  float32x4_t *v37;
  unint64_t v38;
  float32x4_t v39;
  unint64_t v40;
  uint64_t v41;
  float *v42;
  float *v43;
  float v44;
  unint64_t v45;
  float32x4_t *v46;
  unint64_t v52;
  float32x4_t v53;
  unint64_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  unsigned int *v67;
  uint64_t v68;
  uint64_t v69;
  float v70;
  unsigned int v71;
  float *v72;
  uint64_t v73;
  float v74;
  void *__p;
  unsigned int *v77;
  char *v78;
  void *v79[3];
  unsigned int v80;

  v80 = a2;
  v11 = (char *)operator new(0x64uLL);
  v79[1] = v11 + 100;
  v79[2] = v11 + 100;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_DWORD *)v11 + 24) = 0;
  v79[0] = v11;
  v12 = (float32x4_t *)operator new(0x64uLL);
  v12[6].i32[0] = 0;
  v12[4] = 0u;
  v12[5] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  *v12 = 0u;
  v12[1] = 0u;
  v13 = operator new(0xCuLL);
  v77 = v13 + 3;
  v78 = (char *)(v13 + 3);
  *(_QWORD *)v13 = -1;
  v13[2] = -1;
  __p = v13;
  sub_23996362C(*(_QWORD *)(a1 + 40), &v80, (uint64_t)&__p);
  v14 = *(_DWORD *)__p;
  if (!a5)
  {
    sub_2399B37CC(a1, (unint64_t *)v79, v14, (_QWORD *)a3, a4, 0, a6);
    sub_2399B37CC(a1, (unint64_t *)v79, *((_DWORD *)__p + 1), (_QWORD *)a3, a4, 0, a6);
    sub_2399B37CC(a1, (unint64_t *)v79, *((_DWORD *)__p + 2), (_QWORD *)a3, a4, 0, a6);
    goto LABEL_31;
  }
  sub_2399B37CC(a1, (unint64_t *)v79, v14, (_QWORD *)a3, a4, a5, a6);
  if (a5 < 8)
  {
    v15 = 0;
LABEL_8:
    v20 = a5 - v15;
    v21 = 4 * v15;
    v22 = &v12->f32[v15];
    v23 = (float *)&v11[v21];
    do
    {
      v24 = *v23++;
      *v22 = v24 + *v22;
      ++v22;
      --v20;
    }
    while (v20);
    goto LABEL_10;
  }
  v15 = a5 & 0xFFFFFFFFFFFFFFF8;
  v16 = (float32x4_t *)(v11 + 16);
  v17 = v12 + 1;
  v18 = a5 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v19 = vaddq_f32(*v16, *v17);
    v17[-1] = vaddq_f32(v16[-1], v17[-1]);
    *v17 = v19;
    v16 += 2;
    v17 += 2;
    v18 -= 8;
  }
  while (v18);
  if (v15 != a5)
    goto LABEL_8;
LABEL_10:
  sub_2399B37CC(a1, (unint64_t *)v79, *((_DWORD *)__p + 1), (_QWORD *)a3, a4, a5, a6);
  if (a5 < 8)
  {
    v25 = 0;
LABEL_15:
    v30 = a5 - v25;
    v31 = 4 * v25;
    v32 = &v12->f32[v25];
    v33 = (float *)&v11[v31];
    do
    {
      v34 = *v33++;
      *v32 = v34 + *v32;
      ++v32;
      --v30;
    }
    while (v30);
    goto LABEL_17;
  }
  v25 = a5 & 0xFFFFFFFFFFFFFFF8;
  v26 = (float32x4_t *)(v11 + 16);
  v27 = v12 + 1;
  v28 = a5 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v29 = vaddq_f32(*v26, *v27);
    v27[-1] = vaddq_f32(v26[-1], v27[-1]);
    *v27 = v29;
    v26 += 2;
    v27 += 2;
    v28 -= 8;
  }
  while (v28);
  if (v25 != a5)
    goto LABEL_15;
LABEL_17:
  sub_2399B37CC(a1, (unint64_t *)v79, *((_DWORD *)__p + 2), (_QWORD *)a3, a4, a5, a6);
  if (a5 < 8)
  {
    v35 = 0;
LABEL_22:
    v40 = a5 - v35;
    v41 = 4 * v35;
    v42 = &v12->f32[v35];
    v43 = (float *)&v11[v41];
    do
    {
      v44 = *v43++;
      *v42 = v44 + *v42;
      ++v42;
      --v40;
    }
    while (v40);
    goto LABEL_24;
  }
  v35 = a5 & 0xFFFFFFFFFFFFFFF8;
  v36 = (float32x4_t *)(v11 + 16);
  v37 = v12 + 1;
  v38 = a5 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v39 = vaddq_f32(*v36, *v37);
    v37[-1] = vaddq_f32(v36[-1], v37[-1]);
    *v37 = v39;
    v36 += 2;
    v37 += 2;
    v38 -= 8;
  }
  while (v38);
  if (v35 != a5)
    goto LABEL_22;
LABEL_24:
  if (a5 < 8)
  {
    v45 = 0;
LABEL_29:
    v54 = a5 - v45;
    v55 = &v12->f32[v45];
    do
    {
      *v55 = *v55 / 3.0;
      ++v55;
      --v54;
    }
    while (v54);
    goto LABEL_31;
  }
  v45 = a5 & 0xFFFFFFFFFFFFFFF8;
  v46 = v12 + 1;
  __asm { FMOV            V0.4S, #3.0 }
  v52 = a5 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v53 = vdivq_f32(*v46, _Q0);
    v46[-1] = vdivq_f32(v46[-1], _Q0);
    *v46 = v53;
    v46 += 2;
    v52 -= 8;
  }
  while (v52);
  if (v45 != a5)
    goto LABEL_29;
LABEL_31:
  v57 = *(_QWORD *)(a3 + 72);
  v56 = *(_QWORD *)(a3 + 80);
  v58 = v56 - v57;
  v59 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 80) + 16 * *(unsigned int *)(a3 + 192));
  v61 = *v59;
  v60 = (std::__shared_weak_count *)v59[1];
  if (!v60)
    goto LABEL_36;
  p_shared_owners = (unint64_t *)&v60->__shared_owners_;
  do
    v63 = __ldxr(p_shared_owners);
  while (__stxr(v63 + 1, p_shared_owners));
  do
    v64 = __ldaxr(p_shared_owners);
  while (__stlxr(v64 - 1, p_shared_owners));
  if (!v64)
  {
    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
    std::__shared_weak_count::__release_weak(v60);
    v65 = v58 >> 2;
    v66 = (unsigned int *)__p;
    if (v56 != v57)
    {
LABEL_37:
      v67 = *(unsigned int **)(a3 + 72);
      if (v65 <= 1)
        v69 = 1;
      else
        v69 = v65;
      v70 = 0.0;
      do
      {
        v71 = *v67++;
        v72 = (float *)(*(_QWORD *)(v61 + 40) + 8 * v71);
        v73 = ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104)) >> 2)
            * *(unsigned int *)(*(_QWORD *)(a3 + 288) + 4 * v71);
        v68 = *a6;
        v74 = sqrtf((float)((float)((float)(v12->f32[0] - *v72) * (float)(v12->f32[0] - *v72)) + 0.0)+ (float)((float)(v12->f32[1] - v72[1]) * (float)(v12->f32[1] - v72[1])))+ (float)((float)((float)((float)(*(float *)(v68 + 4 * (v73 + *v66)) + 0.0)+ *(float *)(v68 + 4 * (v73 + v66[1])))+ *(float *)(v68 + 4 * (v73 + v66[2])))/ -3.0);
        v70 = v70 + (float)(v74 * v74);
        --v69;
      }
      while (v69);
      if (!v66)
        goto LABEL_44;
      goto LABEL_43;
    }
  }
  else
  {
LABEL_36:
    v65 = v58 >> 2;
    v66 = (unsigned int *)__p;
    if (v56 != v57)
      goto LABEL_37;
  }
  v70 = 0.0;
  if (v66)
  {
LABEL_43:
    v77 = v66;
    operator delete(v66);
  }
LABEL_44:
  operator delete(v12);
  if (v79[0])
    operator delete(v79[0]);
  return v70 / (float)v65;
}

void sub_2399B3784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);
  operator delete(v11);
  operator delete(v12);
  _Unwind_Resume(a1);
}

void sub_2399B37B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2399B37CC(uint64_t result, unint64_t *a2, int a3, _QWORD *a4, float **a5, unint64_t a6, uint64_t *a7)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  unint64_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  int8x16_t *v42;
  float32x4_t *v43;
  int8x16_t v44;
  unint64_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  unint64_t v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float v55;
  float v56;
  float v57;
  float v58;

  v7 = (unsigned int *)a4[9];
  v8 = a4[10] - (_QWORD)v7;
  if (v8)
  {
    v9 = v8 >> 2;
    v10 = (float *)a4[21];
    v11 = (*(_QWORD *)(*(_QWORD *)(result + 40) + 112) - *(_QWORD *)(*(_QWORD *)(result + 40) + 104)) >> 2;
    v12 = *(_QWORD *)(result + 288);
    v13 = *a7;
    v14 = *a5;
    if ((unint64_t)(v8 >> 2) <= 1)
      v15 = 1;
    else
      v15 = v8 >> 2;
    v16 = v15;
    do
    {
      v17 = *v7++;
      v18 = a3 + *(_DWORD *)(v12 + 4 * v17) * v11;
      v19 = *(float *)(v13 + 4 * v18) * *(float *)(v13 + 4 * v18);
      *v14 = v19;
      v20 = *v10++;
      *v14++ = v20 - v19;
      --v16;
    }
    while (v16);
    if (a6)
    {
      v21 = 0;
      v22 = a4[19];
      v23 = (float *)a4[20];
      v24 = *a2;
      v25 = 4 * v9;
      v26 = *a5;
      do
      {
        *(_DWORD *)(v24 + 4 * v21) = 0;
        v27 = v26;
        v28 = v23;
        v29 = v15;
        v30 = 0.0;
        do
        {
          v31 = *v27++;
          v32 = v31;
          v33 = *v28++;
          v30 = v30 + (float)(v32 * v33);
          *(float *)(v24 + 4 * v21) = v30;
          --v29;
        }
        while (v29);
        v34 = *(float *)(v22 + 4 * v21);
        v35 = sqrtf(v34);
        v36 = v35 + v35;
        if (v34 >= 0.0)
          v37 = v36;
        else
          v37 = 0.0;
        *(float *)(v24 + 4 * v21++) = v30 / v37;
        v23 = (float *)((char *)v23 + v25);
      }
      while (v21 != a6);
    }
  }
  else
  {
    if (!a6)
      return result;
    v38 = a4[19];
    v39 = *a2;
    if (a6 >= 8 && (v39 < v38 + 4 * a6 ? (v40 = v38 >= v39 + 4 * a6) : (v40 = 1), v40))
    {
      v41 = a6 & 0xFFFFFFFFFFFFFFF8;
      v42 = (int8x16_t *)(v39 + 16);
      v43 = (float32x4_t *)(v38 + 16);
      v44 = (int8x16_t)vdupq_n_s32(0x7FC00000u);
      v45 = a6 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v46 = v43[-1];
        v47 = (int8x16_t)vcltzq_f32(v46);
        v48 = vsqrtq_f32(v46);
        v49 = vsqrtq_f32(*v43);
        v50 = vbslq_s8((int8x16_t)vcltzq_f32(*v43), v44, (int8x16_t)vdivq_f32((float32x4_t)0, vaddq_f32(v49, v49)));
        v42[-1] = vbslq_s8(v47, v44, (int8x16_t)vdivq_f32((float32x4_t)0, vaddq_f32(v48, v48)));
        *v42 = v50;
        v42 += 2;
        v43 += 2;
        v45 -= 8;
      }
      while (v45);
      if (v41 == a6)
        return result;
    }
    else
    {
      v41 = 0;
    }
    v51 = a6 - v41;
    v52 = 4 * v41;
    v53 = (float *)(v38 + v52);
    v54 = (float *)(v39 + v52);
    do
    {
      *v54 = 0.0;
      v55 = *v53++;
      v56 = sqrtf(v55);
      v57 = 0.0 / (float)(v56 + v56);
      v58 = NAN;
      if (v55 >= 0.0)
        v58 = v57;
      *v54++ = v58;
      --v51;
    }
    while (v51);
  }
  return result;
}

void sub_2399B3990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float32x2_t *v15;
  float32x2_t v16;
  uint64_t v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  char v46;
  int v47;
  float v48;
  char v49;
  uint64_t i;
  unint64_t v51;
  float v52;
  unsigned int v53;
  _QWORD *v56;
  unsigned int v57;
  char *v58;
  char *v59;
  uint64_t v60;

  v6 = *(_QWORD **)(a1 + 40);
  v7 = v6[14] - v6[13];
  v8 = (uint64_t *)(v6[10] + 16 * *(unsigned int *)(a1 + 192));
  v10 = *v8;
  v9 = (std::__shared_weak_count *)v8[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = (v7 >> 2);
  if ((v7 & 0x3FFFFFFFCLL) != 0)
  {
    v15 = *(float32x2_t **)(v10 + 40);
    v16 = *(float32x2_t *)(a2 + 44);
    v17 = (v7 >> 2);
    v18 = *(float32x2_t *)(a2 + 52);
    do
    {
      v16 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v16, *v15), (int8x8_t)*v15, (int8x8_t)v16);
      *(float32x2_t *)(a2 + 44) = v16;
      v19 = *v15++;
      v18 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v19, v18), (int8x8_t)v19, (int8x8_t)v18);
      *(float32x2_t *)(a2 + 52) = v18;
      --v17;
    }
    while (v17);
  }
  v20 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 168) = v20;
  v21 = (_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 112);
  v23 = *(_QWORD *)(a2 + 120);
  if (v23 == v22)
  {
    v24 = v20;
  }
  else
  {
    do
    {
      v25 = *(std::__shared_weak_count **)(v23 - 8);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v23 -= 16;
    }
    while (v23 != v22);
    v20 = *(_QWORD *)(a2 + 160);
    v24 = *(_QWORD *)(a2 + 168);
  }
  *(_QWORD *)(a2 + 120) = v22;
  v28 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152)) >> 2;
  v29 = (v24 - v20) >> 2;
  if (v28 <= v29)
  {
    if (v28 < v29)
      *(_QWORD *)(a2 + 168) = v20 + 4 * v28;
  }
  else
  {
    sub_2394807B4(a2 + 160, v28 - v29);
  }
  v30 = *(_QWORD *)(a2 + 136);
  v31 = (*(_QWORD *)(a2 + 144) - v30) >> 2;
  if (v14 <= v31)
  {
    if (v14 < v31)
      *(_QWORD *)(a2 + 144) = v30 + 4 * v14;
  }
  else
  {
    sub_2394807B4(a2 + 136, v14 - v31);
  }
  v56 = (_QWORD *)(a2 + 160);
  v32 = *(_QWORD *)(a2 + 112);
  v33 = *(_QWORD *)(a2 + 120);
  v34 = (v33 - v32) >> 4;
  v35 = v14 - v34;
  if (v14 <= v34)
  {
    if (v14 < v34)
    {
      v36 = v32 + 16 * v14;
      while (v33 != v36)
      {
        v37 = *(std::__shared_weak_count **)(v33 - 8);
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v37->__on_zero_shared)(v37, v35);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v33 -= 16;
      }
      *(_QWORD *)(a2 + 120) = v36;
    }
    if (!v14)
    {
      v46 = 1;
      goto LABEL_48;
    }
  }
  else
  {
    sub_23942D080(a2 + 112, v35);
  }
  v40 = 0;
  do
  {
    v41 = operator new(0x28uLL);
    v41[1] = 0;
    v41[2] = 0;
    *v41 = &off_250AF11B0;
    v41[3] = 0xFFFFFFFF00000000;
    v41[4] = -1;
    v42 = (_QWORD *)(*(_QWORD *)(a2 + 112) + 16 * v40);
    v43 = (std::__shared_weak_count *)v42[1];
    *v42 = v41 + 3;
    v42[1] = v41;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    ++v40;
  }
  while (v40 != v14);
  v46 = 0;
LABEL_48:
  sub_23992DD40(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(a2 + 4) = v47;
  *(_QWORD *)(a2 + 16) = a3;
  *(_QWORD *)(a2 + 24) = a4;
  *(_DWORD *)(a2 + 8) = 953267991;
  v48 = **(float **)(a1 + 56) * 0.2;
  *(float *)(a2 + 40) = v48;
  v49 = *(_BYTE *)(a1 + 64);
  *(_BYTE *)a2 = v49;
  sub_2399B3DCC(*(_QWORD *)(a1 + 40), v10, v56, v49, (unsigned int *)(a1 + 68));
  if ((v46 & 1) == 0)
  {
    for (i = 0; i != v14; ++i)
    {
      v57 = i;
      v58 = 0;
      v59 = 0;
      v60 = 0;
      sub_2399B5728(*(_QWORD *)(a1 + 40), &v57, &v58);
      if (v59 == v58)
      {
        v52 = 0.0;
        if (!v58)
          goto LABEL_52;
      }
      else
      {
        v51 = 0;
        v52 = 0.0;
        v53 = 1;
        while (fabsf(v52 + -3.4028e38) >= 0.00000001)
        {
          v52 = v52 + *(float *)(*v56 + 4 * *(unsigned int *)&v58[4 * v51]);
          v51 = v53++;
          if ((v59 - v58) >> 2 <= v51)
            goto LABEL_51;
        }
        v52 = 3.4028e38;
        if (!v58)
          goto LABEL_52;
      }
LABEL_51:
      v59 = v58;
      operator delete(v58);
LABEL_52:
      *(float *)(*v21 + 4 * i) = v52;
    }
  }
}

void sub_2399B3DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399B3DCC(uint64_t a1, uint64_t a2, _QWORD *a3, char a4, unsigned int *a5)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t i;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  float *v31;
  float v32;
  uint64_t j;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v51;
  void *__p;
  void *v53;
  char *v54;
  uint64_t v55;

  v6 = a3;
  v7 = a1;
  v8 = ((*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
  v9 = (uint64_t)(a3[1] - *a3) >> 2;
  if (v8 <= v9)
  {
    if (v8 < v9)
      a3[1] = *a3 + 4 * v8;
  }
  else
  {
    sub_2394807B4((uint64_t)a3, v8 - v9);
  }
  v55 = 0;
  HIBYTE(v54) = 6;
  strcpy((char *)&__p, "f:area");
  v51 = (_QWORD *)(v7 + 56);
  v10 = sub_23998EE84((uint64_t **)(v7 + 56), (uint64_t)&v55 + 4, (unsigned __int8 *)&__p);
  if (SHIBYTE(v54) < 0)
    operator delete(__p);
  v11 = operator new(0xCuLL);
  v53 = v11 + 3;
  v54 = (char *)(v11 + 3);
  *(_QWORD *)v11 = -1;
  v11[2] = -1;
  __p = v11;
  if (v8)
  {
    v48 = v10;
    v49 = v7;
    if ((a4 & 1) != 0)
    {
      for (i = 0; i != v8; ++i)
      {
        v13 = v6;
        HIDWORD(v55) = i;
        sub_23996362C(v7, (unsigned int *)&v55 + 1, (uint64_t)&__p);
        v14 = *(_QWORD *)(a2 + 40);
        v16 = *(unsigned int *)__p;
        v15 = *((unsigned int *)__p + 1);
        v17 = *((unsigned int *)__p + 2);
        v18 = (uint64_t *)(*v51 + 16 * v48);
        v19 = *v18;
        v20 = (std::__shared_weak_count *)v18[1];
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v24 = *(_QWORD *)(v19 + 40);
        v25 = (uint64_t *)(*v51 + 16 * *a5);
        v26 = *v25;
        v27 = (std::__shared_weak_count *)v25[1];
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
          do
            v30 = __ldaxr(v28);
          while (__stlxr(v30 - 1, v28));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v31 = (float *)(*(_QWORD *)(v26 + 40) + 16 * HIDWORD(v55));
        v7 = v49;
        v32 = sub_2399B5474(v49, (unsigned int *)&v55 + 1, (float *)(v14 + 8 * v16), (float *)(v14 + 8 * v15), (float *)(v14 + 8 * v17), (float *)(v24 + 4 * i), (float *)&v55, v31);
        v6 = v13;
        *(float *)(*v13 + 4 * i) = v32;
      }
    }
    else
    {
      for (j = 0; j != v8; ++j)
      {
        HIDWORD(v55) = j;
        sub_23996362C(v7, (unsigned int *)&v55 + 1, (uint64_t)&__p);
        v34 = *(_QWORD *)(a2 + 40);
        v36 = *(unsigned int *)__p;
        v35 = *((unsigned int *)__p + 1);
        v37 = *((unsigned int *)__p + 2);
        v38 = (uint64_t *)(*v51 + 16 * v48);
        v39 = *v38;
        v40 = (std::__shared_weak_count *)v38[1];
        if (v40)
        {
          v41 = (unint64_t *)&v40->__shared_owners_;
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
          do
            v43 = __ldaxr(v41);
          while (__stlxr(v43 - 1, v41));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v44 = (float *)(v34 + 8 * v36);
        v45 = (float *)(v34 + 8 * v35);
        v46 = (float *)(v34 + 8 * v37);
        v7 = v49;
        *(float *)(*v6 + 4 * j) = sub_2399B5220(v49, (unsigned int *)&v55 + 1, v44, v45, v46, (float *)(*(_QWORD *)(v39 + 40) + 4 * j), (float *)&v55);
      }
    }
  }
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
}

void sub_2399B40D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399B410C(uint64_t a1, uint64_t a2, BOOL *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _OWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  float **v37;
  float *v38;
  float **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t result;
  float32x4_t *v47;
  unint64_t v48;
  unint64_t v49;
  float32x4_t *v50;
  int64x2_t v51;
  unint64_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int8x16_t v60;
  int64x2_t v61;
  float *v62;
  unint64_t v63;
  float v64;
  BOOL v65;
  BOOL *v66;
  unint64_t v67;
  unint64_t v68;
  int8x16_t v70;
  float32x4_t v71;
  __int128 v72;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
  if ((v5 & 0x3FFFFFFFCLL) != 0)
  {
    v6 = 0;
    v7 = 0;
    v8 = (uint64_t *)(a2 + 72);
    v9 = (v5 >> 2);
    do
    {
      v10 = *(_DWORD **)(*(_QWORD *)(a2 + 112) + v6);
      *v10 = *(_DWORD *)(*(_QWORD *)(a2 + 136) + 4 * v7);
      v10[1] = v7++;
      v6 += 16;
    }
    while (v9 != v7);
    v11 = 0;
    v68 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a2 + 1) = 0;
    v12 = (v5 >> 2) & 7;
    v70 = (int8x16_t)vdupq_n_s64(1uLL);
    v71 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    while (1)
    {
      v13 = 0;
      do
      {
        if (*(float *)(*(_QWORD *)(a2 + 136) + 4 * v13) >= 3.4028e38)
        {
          v14 = *(_QWORD *)(a2 + 112);
          v15 = *(_QWORD *)(v14 + 16 * v13);
          if (*(_QWORD *)(v15 + 8) == -1)
          {
            v16 = *(_QWORD *)(v14 + 16 * v13 + 8);
            *(_QWORD *)&v72 = v15;
            *((_QWORD *)&v72 + 1) = v16;
            if (v16)
            {
              v17 = (unint64_t *)(v16 + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            v20 = *(_QWORD *)(a2 + 72);
            v19 = *(_QWORD **)(a2 + 80);
            v21 = *(_QWORD *)(a2 + 104);
            if (v21 >= ((uint64_t)v19 - v20) >> 4)
            {
              if ((unint64_t)v19 >= *(_QWORD *)(a2 + 88))
              {
                v32 = sub_23951E0F0(a2 + 72, &v72);
              }
              else
              {
                v29 = *((_QWORD *)&v72 + 1);
                *v19 = v15;
                v19[1] = v29;
                if (v29)
                {
                  v30 = (unint64_t *)(v29 + 8);
                  do
                    v31 = __ldxr(v30);
                  while (__stxr(v31 + 1, v30));
                }
                v32 = v19 + 2;
              }
              *(_QWORD *)(a2 + 80) = v32;
            }
            else
            {
              v22 = *((_QWORD *)&v72 + 1);
              if (*((_QWORD *)&v72 + 1))
              {
                v23 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
                do
                  v24 = __ldxr(v23);
                while (__stxr(v24 + 1, v23));
              }
              v25 = (_QWORD *)(v20 + 16 * v21);
              v26 = (std::__shared_weak_count *)v25[1];
              *v25 = v15;
              v25[1] = v22;
              if (v26)
              {
                p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                do
                  v28 = __ldaxr(p_shared_owners);
                while (__stlxr(v28 - 1, p_shared_owners));
                if (!v28)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
            }
            v33 = *(_QWORD *)(a2 + 104);
            *(_QWORD *)(v72 + 8) = v33;
            *(_QWORD *)(a2 + 104) = v33 + 1;
            if (v33)
            {
              v34 = *v8;
              do
              {
                v35 = v33 - 1;
                v36 = (v33 - 1) >> 1;
                v37 = (float **)(v34 + 16 * v33);
                v38 = *v37;
                v39 = (float **)(v34 + 16 * v36);
                if (**v37 <= **v39)
                  break;
                if (v33 != v36)
                {
                  *v37 = *v39;
                  *v39 = v38;
                  v40 = v34 + 16 * v33;
                  v41 = v34 + 16 * v36;
                  v42 = *(_QWORD *)(v40 + 8);
                  *(_QWORD *)(v40 + 8) = *(_QWORD *)(v41 + 8);
                  *(_QWORD *)(v41 + 8) = v42;
                  v34 = *v8;
                  *(_QWORD *)(*(_QWORD *)(*v8 + 16 * v33) + 8) = v33;
                  *(_QWORD *)(*(_QWORD *)(v34 + 16 * v36) + 8) = v36;
                }
                v33 = (v33 - 1) >> 1;
              }
              while (v35 > 1);
            }
            v43 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
            if (*((_QWORD *)&v72 + 1))
            {
              v44 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
              do
                v45 = __ldaxr(v44);
              while (__stlxr(v45 - 1, v44));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
          }
        }
        ++v13;
      }
      while (v13 != v9);
      sub_2399B455C(a1, a2);
      result = *(_QWORD *)(a1 + 32);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
        if ((result & 1) != 0)
          return result;
      }
      v47 = *(float32x4_t **)(a2 + 136);
      if (v9 >= 8)
      {
        v50 = v47 + 1;
        v51 = 0uLL;
        v52 = v9 - v12;
        v53 = 0uLL;
        v54 = 0uLL;
        v55 = 0uLL;
        do
        {
          v56 = vmvnq_s8((int8x16_t)vcgtq_f32(v71, v50[-1]));
          v57.i64[0] = v56.u32[0];
          v57.i64[1] = v56.u32[1];
          v58 = (int64x2_t)vandq_s8(v57, v70);
          v57.i64[0] = v56.u32[2];
          v57.i64[1] = v56.u32[3];
          v59 = (int64x2_t)vandq_s8(v57, v70);
          v60 = vmvnq_s8((int8x16_t)vcgtq_f32(v71, *v50));
          v57.i64[0] = v60.u32[0];
          v57.i64[1] = v60.u32[1];
          v61 = (int64x2_t)vandq_s8(v57, v70);
          v57.i64[0] = v60.u32[2];
          v57.i64[1] = v60.u32[3];
          v53 = vaddq_s64(v53, v59);
          v51 = vaddq_s64(v51, v58);
          v55 = vaddq_s64(v55, (int64x2_t)vandq_s8(v57, v70));
          v54 = vaddq_s64(v54, v61);
          v50 += 2;
          v52 -= 8;
        }
        while (v52);
        v49 = vaddvq_s64(vaddq_s64(vaddq_s64(v54, v51), vaddq_s64(v55, v53)));
        v48 = v9 - v12;
        if (!v12)
          goto LABEL_50;
      }
      else
      {
        v48 = 0;
        v49 = 0;
      }
      v62 = &v47->f32[v48];
      v63 = v9 - v48;
      do
      {
        v64 = *v62++;
        if (v64 >= 3.4028e38)
          ++v49;
        --v63;
      }
      while (v63);
LABEL_50:
      if (*(_QWORD *)(a2 + 64) <= v49)
      {
        v49 = *(_QWORD *)(a2 + 64);
LABEL_62:
        v67 = v68;
        v66 = a3;
        goto LABEL_63;
      }
      *(_QWORD *)(a2 + 64) = v49;
      if (v49)
        v65 = (unint64_t)++v11 >= *(_QWORD *)(a2 + 16);
      else
        v65 = 1;
      if (v65)
        goto LABEL_62;
    }
  }
  v66 = a3;
  v67 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a2 + 1) = 0;
  sub_2399B455C(a1, a2);
  result = *(_QWORD *)(a1 + 32);
  if (!result || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result), (result & 1) == 0))
  {
    v49 = 0;
    if (*(_QWORD *)(a2 + 64))
      *(_QWORD *)(a2 + 64) = 0;
LABEL_63:
    *v66 = v49 < v67;
  }
  return result;
}

void sub_2399B455C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  __n128 v6;
  unsigned int i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float **v29;
  float *v30;
  float **v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40[3];
  char v41;
  unsigned int v42;
  unsigned __int32 *v43;
  std::__shared_weak_count *v44;

  if (*(_QWORD *)(a2 + 104))
  {
    v4 = (uint64_t *)(a2 + 72);
    do
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (v5 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5) & 1) != 0)
        break;
      sub_23998E248(v4, 0, &v43);
      v6.n128_u32[0] = *v43;
      if (*(float *)v43 >= *(float *)(a2 + 40))
      {
        v42 = v43[1];
        if (*(_BYTE *)(a2 + 2) || !sub_2399423C8(*(_QWORD *)(a1 + 40), &v42))
        {
          v41 = 0;
          sub_2399B5984(a1, &v42, a2, &v41);
          if (v41)
          {
            **(_DWORD **)(*(_QWORD *)(a2 + 112) + 16 * v42) = *(_DWORD *)(*(_QWORD *)(a2 + 136) + 4 * v42);
            sub_239962480((uint64_t)v40, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), &v42);
            for (i = sub_2399624A8(v40); i != -1; i = sub_2399624A8(v40))
            {
              v8 = *(_QWORD *)(a2 + 112);
              v9 = *(_QWORD *)(v8 + 16 * i);
              v10 = *(_QWORD *)(v9 + 8);
              if (v10 == -1)
              {
                *(_DWORD *)v9 = *(_DWORD *)(*(_QWORD *)(a2 + 136) + 4 * i);
              }
              else
              {
                v11 = *(std::__shared_weak_count **)(v8 + 16 * i + 8);
                if (v11)
                {
                  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
                  do
                    v13 = __ldxr(p_shared_owners);
                  while (__stxr(v13 + 1, p_shared_owners));
                  v10 = *(_QWORD *)(v9 + 8);
                }
                v14 = *(_QWORD *)(a2 + 104);
                if (v10 < v14)
                {
                  v15 = *(float *)(*(_QWORD *)(a2 + 136) + 4 * i);
                  v16 = *(float *)v9;
                  *(float *)v9 = v15;
                  if (v16 <= v15)
                  {
                    if (v10)
                    {
                      v26 = *v4;
                      do
                      {
                        v27 = v10 - 1;
                        v28 = (v10 - 1) >> 1;
                        v29 = (float **)(v26 + 16 * v10);
                        v30 = *v29;
                        v31 = (float **)(v26 + 16 * v28);
                        if (**v29 <= **v31)
                          break;
                        if (v10 != v28)
                        {
                          *v29 = *v31;
                          *v31 = v30;
                          v32 = v26 + 16 * v10;
                          v33 = v26 + 16 * v28;
                          v34 = *(_QWORD *)(v32 + 8);
                          *(_QWORD *)(v32 + 8) = *(_QWORD *)(v33 + 8);
                          *(_QWORD *)(v33 + 8) = v34;
                          v26 = *v4;
                          *(_QWORD *)(*(_QWORD *)(*v4 + 16 * v10) + 8) = v10;
                          *(_QWORD *)(*(_QWORD *)(v26 + 16 * v28) + 8) = v28;
                        }
                        v10 = (v10 - 1) >> 1;
                      }
                      while (v27 > 1);
                    }
                  }
                  else
                  {
                    v17 = *v4;
                    v18 = *(_QWORD *)(*v4 + 16 * v10);
                    do
                    {
                      v19 = (2 * v10) | 1;
                      v20 = *(float *)v18;
                      if (v19 >= v14)
                      {
                        v21 = v10;
                      }
                      else
                      {
                        v21 = v10;
                        if (**(float **)(v17 + 16 * v19) > v20)
                        {
                          v21 = (2 * v10) | 1;
                          v20 = **(float **)(v17 + 16 * v19);
                        }
                      }
                      v22 = 2 * v10 + 2;
                      if (v22 < v14 && **(float **)(v17 + 16 * v22) > v20)
                        v21 = 2 * v10 + 2;
                      if (v21 == v10)
                        break;
                      v23 = v17 + 16 * v21;
                      v24 = v17 + 16 * v10;
                      v25 = *(_QWORD *)(v24 + 8);
                      *(_OWORD *)v24 = *(_OWORD *)v23;
                      *(_QWORD *)v23 = v18;
                      *(_QWORD *)(v23 + 8) = v25;
                      v17 = *v4;
                      *(_QWORD *)(*(_QWORD *)(*v4 + 16 * v10) + 8) = v10;
                      v18 = *(_QWORD *)(v17 + 16 * v21);
                      *(_QWORD *)(v18 + 8) = v21;
                      v10 = v21;
                    }
                    while (v21 < v14);
                  }
                }
                if (v11)
                {
                  v35 = (unint64_t *)&v11->__shared_owners_;
                  do
                    v36 = __ldaxr(v35);
                  while (__stlxr(v36 - 1, v35));
                  if (!v36)
                  {
                    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                    std::__shared_weak_count::__release_weak(v11);
                  }
                }
              }
            }
          }
        }
      }
      v37 = v44;
      if (v44)
      {
        v38 = (unint64_t *)&v44->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v37->__on_zero_shared)(v37, v6);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    while (*(_QWORD *)(a2 + 104));
  }
}

void sub_2399B4894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399B48A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399B48BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399B48D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2399B48E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_239416DA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2399B48F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  __int128 v38;
  char *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  float **v47;
  float *v48;
  float **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t result;
  unint64_t v56;
  float *v57;
  float v58;
  uint64_t v59;
  float v60;
  float v61;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  float *v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  unint64_t v72;
  uint64_t v74;
  uint64_t v75;
  unint64_t v77;
  __int128 v78;
  __int128 v79;

  v3 = *(_QWORD **)(a1 + 40);
  v4 = v3[14] - v3[13];
  v5 = v3[20] - v3[19];
  if ((v4 & 0x3FFFFFFFCLL) != 0)
  {
    v6 = 0;
    v7 = 0;
    v8 = (uint64_t *)(a2 + 72);
    v9 = (v4 >> 2);
    do
    {
      v10 = *(_DWORD **)(*(_QWORD *)(a2 + 112) + v6);
      *v10 = *(_DWORD *)(*(_QWORD *)(a2 + 136) + 4 * v7);
      v10[1] = v7++;
      v6 += 16;
    }
    while (v9 != v7);
    v77 = 0;
    v74 = (v5 >> 2);
    v75 = v5 & 0x3FFFFFFFCLL;
    do
    {
      v11 = 0;
      do
      {
        v12 = *(_OWORD *)(*(_QWORD *)(a2 + 112) + 16 * v11);
        v79 = v12;
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 112) + 16 * v11 + 8);
        if (*((_QWORD *)&v12 + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        if ((_QWORD)v12)
        {
          v16 = *(char **)(a2 + 72);
          v17 = *(char **)(a2 + 80);
          v18 = (v17 - v16) >> 4;
          v19 = *(_QWORD *)(a2 + 104);
          if (v18 <= v19)
          {
            v26 = *(_QWORD *)(a2 + 88);
            if ((unint64_t)v17 >= v26)
            {
              v30 = v18 + 1;
              if ((v18 + 1) >> 60)
                sub_2394189F8();
              v78 = v12;
              v31 = v26 - (_QWORD)v16;
              if (v31 >> 3 > v30)
                v30 = v31 >> 3;
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
                v32 = 0xFFFFFFFFFFFFFFFLL;
              else
                v32 = v30;
              if (v32 >> 60)
                sub_239418A80();
              v33 = (char *)operator new(16 * v32);
              v34 = &v33[16 * v18];
              *(_OWORD *)v34 = v78;
              if (v13)
              {
                v35 = (unint64_t *)(v13 + 8);
                do
                  v36 = __ldxr(v35);
                while (__stxr(v36 + 1, v35));
                v16 = *(char **)(a2 + 72);
                v17 = *(char **)(a2 + 80);
              }
              v37 = &v33[16 * v32];
              v29 = v34 + 16;
              if (v17 == v16)
              {
                *(_QWORD *)(a2 + 72) = v34;
                *(_QWORD *)(a2 + 80) = v29;
                *(_QWORD *)(a2 + 88) = v37;
              }
              else
              {
                do
                {
                  v38 = *((_OWORD *)v17 - 1);
                  v17 -= 16;
                  *((_OWORD *)v34 - 1) = v38;
                  v34 -= 16;
                  *(_QWORD *)v17 = 0;
                  *((_QWORD *)v17 + 1) = 0;
                }
                while (v17 != v16);
                v16 = *(char **)(a2 + 72);
                v39 = *(char **)(a2 + 80);
                *(_QWORD *)(a2 + 72) = v34;
                *(_QWORD *)(a2 + 80) = v29;
                *(_QWORD *)(a2 + 88) = v37;
                while (v39 != v16)
                {
                  v40 = (std::__shared_weak_count *)*((_QWORD *)v39 - 1);
                  if (v40)
                  {
                    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
                    do
                      v42 = __ldaxr(p_shared_owners);
                    while (__stlxr(v42 - 1, p_shared_owners));
                    if (!v42)
                    {
                      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                      std::__shared_weak_count::__release_weak(v40);
                    }
                  }
                  v39 -= 16;
                }
              }
              if (v16)
                operator delete(v16);
            }
            else
            {
              *(_OWORD *)v17 = v12;
              if (*((_QWORD *)&v12 + 1))
              {
                v27 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
                do
                  v28 = __ldxr(v27);
                while (__stxr(v28 + 1, v27));
              }
              v29 = v17 + 16;
            }
            *(_QWORD *)(a2 + 80) = v29;
          }
          else
          {
            if (*((_QWORD *)&v12 + 1))
            {
              v20 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v22 = &v16[16 * v19];
            v23 = (std::__shared_weak_count *)*((_QWORD *)v22 + 1);
            *(_OWORD *)v22 = v12;
            if (v23)
            {
              v24 = (unint64_t *)&v23->__shared_owners_;
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
          }
          v43 = *(_QWORD *)(a2 + 104);
          *(_QWORD *)(v79 + 8) = v43;
          *(_QWORD *)(a2 + 104) = v43 + 1;
          if (v43)
          {
            v44 = *v8;
            do
            {
              v45 = v43 - 1;
              v46 = (v43 - 1) >> 1;
              v47 = (float **)(v44 + 16 * v43);
              v48 = *v47;
              v49 = (float **)(v44 + 16 * v46);
              if (**v47 <= **v49)
                break;
              if (v43 != v46)
              {
                *v47 = *v49;
                *v49 = v48;
                v50 = v44 + 16 * v43;
                v51 = v44 + 16 * v46;
                v52 = *(_QWORD *)(v50 + 8);
                *(_QWORD *)(v50 + 8) = *(_QWORD *)(v51 + 8);
                *(_QWORD *)(v51 + 8) = v52;
                v44 = *v8;
                *(_QWORD *)(*(_QWORD *)(*v8 + 16 * v43) + 8) = v43;
                *(_QWORD *)(*(_QWORD *)(v44 + 16 * v46) + 8) = v46;
              }
              v43 = (v43 - 1) >> 1;
            }
            while (v45 > 1);
          }
        }
        if (*((_QWORD *)&v79 + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
          if (!v54)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v79 + 1) + 16))(*((_QWORD *)&v79 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v79 + 1));
          }
        }
        ++v11;
      }
      while (v11 != v9);
      sub_2399B455C(a1, a2);
      result = *(_QWORD *)(a1 + 32);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
        if ((result & 1) != 0)
          break;
      }
      v56 = v75;
      if (v75)
      {
        v56 = 0;
        v57 = *(float **)(a2 + 160);
        v58 = -3.4028e38;
        v59 = v74;
        do
        {
          v60 = *v57++;
          v61 = v60;
          if (v58 < v60)
            v58 = v61;
          if (v61 >= 3.4028e38)
            ++v56;
          --v59;
        }
        while (v59);
      }
      else
      {
        v58 = -3.4028e38;
      }
      if ((float)(*(float *)(a2 + 60) - v58) < 0.00004 && *(_QWORD *)(a2 + 64) <= v56)
        break;
      *(float *)(a2 + 60) = v58;
      *(_QWORD *)(a2 + 64) = v56;
      ++v77;
    }
    while (v77 < *(_QWORD *)(a2 + 16));
  }
  else if ((v5 & 0x3FFFFFFFCLL) != 0)
  {
    v63 = 0;
    v64 = (v5 >> 2);
    do
    {
      sub_2399B455C(a1, a2);
      result = *(_QWORD *)(a1 + 32);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
        if ((result & 1) != 0)
          break;
      }
      v65 = 0;
      v66 = *(float **)(a2 + 160);
      v67 = -3.4028e38;
      v68 = v64;
      do
      {
        v69 = *v66++;
        v70 = v69;
        if (v67 < v69)
          v67 = v70;
        if (v70 >= 3.4028e38)
          ++v65;
        --v68;
      }
      while (v68);
      if ((float)(*(float *)(a2 + 60) - v67) < 0.00004 && *(_QWORD *)(a2 + 64) <= v65)
        break;
      *(float *)(a2 + 60) = v67;
      *(_QWORD *)(a2 + 64) = v65;
      ++v63;
    }
    while (v63 < *(_QWORD *)(a2 + 16));
  }
  else
  {
    v72 = 0;
    do
    {
      sub_2399B455C(a1, a2);
      result = *(_QWORD *)(a1 + 32);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
        if ((result & 1) != 0)
          break;
      }
      if ((float)(*(float *)(a2 + 60) + 3.4028e38) < 0.00004 && *(_QWORD *)(a2 + 64) == 0)
        break;
      *(_DWORD *)(a2 + 60) = -8388609;
      *(_QWORD *)(a2 + 64) = 0;
      ++v72;
    }
    while (v72 < *(_QWORD *)(a2 + 16));
  }
  return result;
}

BOOL sub_2399B4E84(uint64_t a1, uint64_t a2, float *a3, float *a4, unint64_t *a5, float *a6, int a7)
{
  float v14;
  float *v15;
  float32x4_t *v16;
  unint64_t v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  float32x4_t *v21;
  int64x2_t v22;
  float32x4_t v23;
  int8x16_t v24;
  uint64_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int32x4_t v33;
  int64x2_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float32x4_t *v39;
  unint64_t v40;
  uint64_t v41;
  float *v42;
  _BOOL8 result;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  int64x2_t v47;
  float32x4_t v48;
  int8x16_t v49;
  uint64_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int32x4_t v58;
  int64x2_t v59;
  float v60;
  float v61;
  uint64_t v62;
  BOOL v63;

  sub_2399B3990(a1, a2, 10, 10);
  if (a7)
    v14 = 0.05;
  else
    v14 = 0.1;
  v16 = *(float32x4_t **)(a2 + 160);
  v15 = *(float **)(a2 + 168);
  if (v16 == (float32x4_t *)v15)
  {
    v18 = 0;
    goto LABEL_14;
  }
  v17 = (char *)v15 - (char *)v16 - 4;
  if (v17 >= 0x1C)
  {
    v20 = (v17 >> 2) + 1;
    v19 = &v16->f32[v20 & 0x7FFFFFFFFFFFFFF8];
    v21 = v16 + 1;
    v22 = 0uLL;
    v23 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v24 = (int8x16_t)vdupq_n_s64(1uLL);
    v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    v26 = 0uLL;
    v27 = 0uLL;
    v28 = 0uLL;
    do
    {
      v29 = vcgeq_f32(v21[-1], v23);
      v30.i64[0] = v29.u32[0];
      v30.i64[1] = v29.u32[1];
      v31 = (int64x2_t)vandq_s8(v30, v24);
      v30.i64[0] = v29.u32[2];
      v30.i64[1] = v29.u32[3];
      v32 = (int64x2_t)vandq_s8(v30, v24);
      v33 = vcgeq_f32(*v21, v23);
      v30.i64[0] = v33.u32[0];
      v30.i64[1] = v33.u32[1];
      v34 = (int64x2_t)vandq_s8(v30, v24);
      v30.i64[0] = v33.u32[2];
      v30.i64[1] = v33.u32[3];
      v26 = vaddq_s64(v26, v32);
      v22 = vaddq_s64(v22, v31);
      v28 = vaddq_s64(v28, (int64x2_t)vandq_s8(v30, v24));
      v27 = vaddq_s64(v27, v34);
      v21 += 2;
      v25 -= 8;
    }
    while (v25);
    v18 = vaddvq_s64(vaddq_s64(vaddq_s64(v27, v22), vaddq_s64(v28, v26)));
    if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_14;
  }
  else
  {
    v18 = 0;
    v19 = *(float **)(a2 + 160);
  }
  do
  {
    v35 = *v19++;
    if (v35 >= 3.4028e38)
      ++v18;
  }
  while (v19 != v15);
LABEL_14:
  *a5 = v18;
  v36 = *(_QWORD *)(a1 + 32);
  if (v36)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36) & 1) != 0)
      return 0;
    v18 = *a5;
  }
  if (v18 > 0x1F3
    || (float)(v14
             * (float)(unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 160)
                                                 - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152)) >> 2)) <= (float)v18)
  {
    result = 0;
    *a3 = 3.4028e38;
    return result;
  }
  *(_BYTE *)(a2 + 1) = 0;
  sub_2399B410C(a1, a2, &v63);
  v37 = *(_QWORD *)(a1 + 32);
  if (v37 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 48))(v37) & 1) != 0)
    return 0;
  if (!*(_QWORD *)(a2 + 64))
  {
    sub_2399B3990(a1, a2, 10, 10);
    *(_BYTE *)(a2 + 1) = 1;
    sub_2399B48F8(a1, a2);
    v44 = *(_QWORD *)(a1 + 32);
    if (v44)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 48))(v44) & 1) != 0)
        return 0;
    }
  }
  v62 = 0;
  sub_2399A1338(a2 + 160, a3, a4, &v62);
  v39 = *(float32x4_t **)(a2 + 160);
  v38 = *(float **)(a2 + 168);
  if (v39 == (float32x4_t *)v38)
  {
    *a5 = 0;
    goto LABEL_37;
  }
  v40 = (char *)v38 - (char *)v39 - 4;
  if (v40 >= 0x1C)
  {
    v45 = (v40 >> 2) + 1;
    v42 = &v39->f32[v45 & 0x7FFFFFFFFFFFFFF8];
    v46 = v39 + 1;
    v47 = 0uLL;
    v48 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v49 = (int8x16_t)vdupq_n_s64(1uLL);
    v50 = v45 & 0x7FFFFFFFFFFFFFF8;
    v51 = 0uLL;
    v52 = 0uLL;
    v53 = 0uLL;
    do
    {
      v54 = vcgeq_f32(v46[-1], v48);
      v55.i64[0] = v54.u32[0];
      v55.i64[1] = v54.u32[1];
      v56 = (int64x2_t)vandq_s8(v55, v49);
      v55.i64[0] = v54.u32[2];
      v55.i64[1] = v54.u32[3];
      v57 = (int64x2_t)vandq_s8(v55, v49);
      v58 = vcgeq_f32(*v46, v48);
      v55.i64[0] = v58.u32[0];
      v55.i64[1] = v58.u32[1];
      v59 = (int64x2_t)vandq_s8(v55, v49);
      v55.i64[0] = v58.u32[2];
      v55.i64[1] = v58.u32[3];
      v51 = vaddq_s64(v51, v57);
      v47 = vaddq_s64(v47, v56);
      v53 = vaddq_s64(v53, (int64x2_t)vandq_s8(v55, v49));
      v52 = vaddq_s64(v52, v59);
      v46 += 2;
      v50 -= 8;
    }
    while (v50);
    v41 = vaddvq_s64(vaddq_s64(vaddq_s64(v52, v47), vaddq_s64(v53, v51)));
    if (v45 == (v45 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_36;
  }
  else
  {
    v41 = 0;
    v42 = *(float **)(a2 + 160);
  }
  do
  {
    v60 = *v42++;
    if (v60 >= 3.4028e38)
      ++v41;
  }
  while (v42 != v38);
LABEL_36:
  *a5 = v41;
  if (v41)
    return 0;
LABEL_37:
  v61 = sub_2399A1D1C(*(_QWORD *)(a1 + 40), (_QWORD *)(a2 + 160));
  *a6 = v61;
  if (v61 > (float)(**(float **)(a1 + 48) * 1.0e-16))
    return 0;
  return *a3 <= **(float **)(a1 + 56);
}

float sub_2399B5220(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a7 = (float)((float)((float)(*a4 - *a3) * (float)(a5[1] - a3[1]))
              - (float)((float)(a4[1] - a3[1]) * (float)(*a5 - *a3)))
      * 0.5;
  v13 = a1 + 104;
  v14 = (unsigned int *)sub_23996252C(a1 + 104, a2);
  v15 = (unsigned int *)sub_239962518(v13, v14);
  v16 = sub_239962518(v13, v15);
  v17 = (unsigned int *)sub_23996252C(v13, a2);
  v18 = sub_239962518(v13, v17);
  v19 = (unsigned int *)sub_239962518(v13, (unsigned int *)(v18 + 8));
  v20 = sub_239962518(v13, v19);
  v21 = (unsigned int *)sub_23996252C(v13, a2);
  v22 = sub_239962518(v13, v21);
  v23 = *(unsigned int *)(v16 + 12);
  v24 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
  v25 = *v24;
  v26 = (std::__shared_weak_count *)v24[1];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v48 = *(_OWORD *)(*(_QWORD *)(v25 + 40) + 16 * v23);
  v30 = *(unsigned int *)(v20 + 12);
  v31 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
  v32 = *v31;
  v33 = (std::__shared_weak_count *)v31[1];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v47 = *(_OWORD *)(*(_QWORD *)(v32 + 40) + 16 * v30);
  v37 = *(unsigned int *)(v22 + 12);
  v38 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
  v39 = *v38;
  v40 = (std::__shared_weak_count *)v38[1];
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    do
      v43 = __ldaxr(v41);
    while (__stlxr(v43 - 1, v41));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v46 = *(_OWORD *)(*(_QWORD *)(v39 + 40) + 16 * v37);
  return sub_2399A1E74((float *)&v48, (float *)&v47, (float *)&v46, a3, a4, a5, a6, a7);
}

float sub_2399B5474(uint64_t a1, unsigned int *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];

  v55[1] = *MEMORY[0x24BDAC8D0];
  *a7 = (float)((float)((float)(*a4 - *a3) * (float)(a5[1] - a3[1]))
              - (float)((float)(a4[1] - a3[1]) * (float)(*a5 - *a3)))
      * 0.5;
  v14 = a1 + 104;
  v15 = (unsigned int *)sub_23996252C(a1 + 104, a2);
  v16 = (unsigned int *)sub_239962518(v14, v15);
  v17 = sub_239962518(v14, v16);
  v18 = (unsigned int *)sub_23996252C(v14, a2);
  v19 = sub_239962518(v14, v18);
  v20 = (unsigned int *)sub_239962518(v14, (unsigned int *)(v19 + 8));
  v21 = sub_239962518(v14, v20);
  v22 = (unsigned int *)sub_23996252C(v14, a2);
  v23 = sub_239962518(v14, v22);
  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  v51 = 0u;
  v52 = 0u;
  v24 = *(unsigned int *)(v17 + 12);
  v25 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
  v26 = *v25;
  v27 = (std::__shared_weak_count *)v25[1];
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v50 = *(float32x4_t *)(*(_QWORD *)(v26 + 40) + 16 * v24);
  v31 = *(unsigned int *)(v21 + 12);
  v32 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
  v33 = *v32;
  v34 = (std::__shared_weak_count *)v32[1];
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    do
      v37 = __ldaxr(v35);
    while (__stlxr(v37 - 1, v35));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v49 = *(float32x4_t *)(*(_QWORD *)(v33 + 40) + 16 * v31);
  v38 = *(unsigned int *)(v23 + 12);
  v39 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
  v40 = *v39;
  v41 = (std::__shared_weak_count *)v39[1];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v48 = *(float32x4_t *)(*(_QWORD *)(v40 + 40) + 16 * v38);
  sub_2399A24B4(&v50, &v49, &v48, &v53, (uint64_t)&v54, (float *)v55, &v52, &v51);
  return sub_2399A1FE0(a3, a4, a5, a6, a7, (float *)&v53, a8);
}

uint64_t sub_2399B5728(uint64_t a1, unsigned int *a2, char **a3)
{
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  __int128 *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  unsigned int v36;
  _DWORD v37[4];

  v5 = a1 + 104;
  sub_239962B1C((uint64_t)v37, (_QWORD *)(a1 + 104), a2);
  result = sub_239962B44(v37);
  v36 = result;
  if ((_DWORD)result != -1)
  {
    v7 = result;
    while (1)
    {
      v9 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
      v11 = *v9;
      v10 = (std::__shared_weak_count *)v9[1];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      if (((*(_QWORD *)(*(_QWORD *)(v11 + 40) + (((unint64_t)v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
        goto LABEL_5;
      v15 = sub_239962518(v5, &v36);
      v16 = v15;
      v18 = a3[1];
      v17 = (unint64_t)a3[2];
      if ((unint64_t)v18 >= v17)
        break;
      *(_DWORD *)v18 = *(_DWORD *)(v15 + 16);
      v8 = (uint64_t)(v18 + 4);
LABEL_4:
      a3[1] = (char *)v8;
LABEL_5:
      result = sub_239962B44(v37);
      v7 = result;
      v36 = result;
      if ((_DWORD)result == -1)
        return result;
    }
    v19 = *a3;
    v20 = v18 - *a3;
    v21 = v20 >> 2;
    v22 = (v20 >> 2) + 1;
    if (v22 >> 62)
      sub_2394189F8();
    v23 = v17 - (_QWORD)v19;
    if (v23 >> 1 > v22)
      v22 = v23 >> 1;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
      v24 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 62)
        sub_239418A80();
      v25 = operator new(4 * v24);
      v26 = &v25[4 * v21];
      *(_DWORD *)v26 = *(_DWORD *)(v16 + 16);
      v8 = (uint64_t)(v26 + 4);
      if (v18 == v19)
        goto LABEL_32;
    }
    else
    {
      v25 = 0;
      v26 = (char *)(4 * v21);
      *(_DWORD *)(4 * v21) = *(_DWORD *)(v16 + 16);
      v8 = 4 * v21 + 4;
      if (v18 == v19)
      {
LABEL_32:
        *a3 = v26;
        a3[1] = (char *)v8;
        a3[2] = &v25[4 * v24];
        if (v18)
          operator delete(v18);
        goto LABEL_4;
      }
    }
    v27 = v18 - 4 - v19;
    if (v27 < 0x2C)
      goto LABEL_39;
    if ((unint64_t)(v18 - &v25[v20]) < 0x20)
      goto LABEL_39;
    v28 = (v27 >> 2) + 1;
    v29 = 4 * (v28 & 0x7FFFFFFFFFFFFFF8);
    v30 = &v18[-v29];
    v26 -= v29;
    v31 = &v25[4 * v21 - 16];
    v32 = (__int128 *)(v18 - 16);
    v33 = v28 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *v32;
      *(v31 - 1) = *(v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 2;
      v33 -= 8;
    }
    while (v33);
    v18 = v30;
    if (v28 != (v28 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_39:
      do
      {
        v35 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v26 - 1) = v35;
        v26 -= 4;
      }
      while (v18 != v19);
    }
    v18 = *a3;
    goto LABEL_32;
  }
  return result;
}

void sub_2399B5984(uint64_t a1, unsigned int *a2, uint64_t a3, _BYTE *a4)
{
  _BYTE *v4;
  char *v8;
  int64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  unsigned int *v56;
  unsigned int v57;
  double v58;
  double v59;
  float v60;
  char v61;
  uint64_t v62;
  _BYTE *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  float v69;
  float v70;
  void *v71[2];
  void *v72[2];
  __int128 v73;
  void *v74[2];
  void *v75[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;

  v4 = a4;
  *a4 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  sub_2399B62A4(*(_QWORD *)(a1 + 40), a2, &v86);
  v8 = v86;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  v9 = v87 - v86;
  if (v87 != v86)
  {
    if (v9 < 0)
      sub_2394189F8();
    v62 = a3;
    v63 = v4;
    v83 = (char *)operator new(v87 - v86);
    v85 = &v83[4 * (v9 >> 2)];
    memset(v83, 255, v9);
    v10 = 0;
    v11 = 0;
    v84 = &v83[v9];
    v80 = 0;
    v81 = 0;
    v82 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(a1 + 40) + 104;
      v14 = (unsigned int *)sub_239962518(v13, (unsigned int *)&v8[4 * v10]);
      *(_DWORD *)&v83[4 * v10] = *(_DWORD *)(sub_239962518(v13, v14) + 12);
      v15 = *(unsigned int *)&v86[4 * v10];
      v16 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16
                                                                 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
      v18 = *v16;
      v17 = (std::__shared_weak_count *)v16[1];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v8 = v86;
      if (((*(_QWORD *)(*(_QWORD *)(v18 + 40) + ((v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) != 0)
        goto LABEL_6;
      v22 = sub_239962518(*(_QWORD *)(a1 + 40) + 104, (unsigned int *)&v86[4 * v10]);
      v23 = v22;
      v24 = v81;
      if (v81 < v82)
      {
        *(_DWORD *)v81 = *(_DWORD *)(v22 + 16);
        v12 = (uint64_t)(v24 + 4);
      }
      else
      {
        v25 = v80;
        v26 = (v81 - v80) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          sub_2394189F8();
        v28 = v82 - v80;
        if ((v82 - v80) >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          if (v29 >> 62)
            sub_239418A80();
          v30 = (char *)operator new(4 * v29);
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = *(_DWORD *)(v23 + 16);
          v12 = (uint64_t)(v31 + 4);
          if (v24 != v25)
          {
LABEL_24:
            v32 = v24 - 4 - v25;
            if (v32 < 0x2C)
              goto LABEL_108;
            if ((unint64_t)(v25 - v30) < 0x20)
              goto LABEL_108;
            v33 = (v32 >> 2) + 1;
            v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
            v35 = &v24[-v34];
            v31 -= v34;
            v36 = &v30[4 * v26 - 16];
            v37 = v24 - 16;
            v38 = v33 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v39 = *(_OWORD *)v37;
              *((_OWORD *)v36 - 1) = *((_OWORD *)v37 - 1);
              *(_OWORD *)v36 = v39;
              v36 -= 32;
              v37 -= 32;
              v38 -= 8;
            }
            while (v38);
            v24 = v35;
            if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_108:
              do
              {
                v40 = *((_DWORD *)v24 - 1);
                v24 -= 4;
                *((_DWORD *)v31 - 1) = v40;
                v31 -= 4;
              }
              while (v24 != v25);
            }
            v24 = v80;
            v80 = v31;
            v82 = &v30[4 * v29];
            if (!v24)
              goto LABEL_5;
LABEL_34:
            operator delete(v24);
            goto LABEL_5;
          }
        }
        else
        {
          v30 = 0;
          v31 = (char *)(4 * v26);
          *(_DWORD *)(4 * v26) = *(_DWORD *)(v23 + 16);
          v12 = 4 * v26 + 4;
          if (v24 != v25)
            goto LABEL_24;
        }
        v80 = v31;
        v82 = &v30[4 * v29];
        if (v24)
          goto LABEL_34;
      }
LABEL_5:
      v81 = (char *)v12;
      v8 = v86;
LABEL_6:
      v10 = ++v11;
      if (v11 >= (unint64_t)((v87 - v8) >> 2))
      {
        v9 = (int64_t)v80;
        v41 = v81;
        a3 = v62;
        v4 = v63;
        goto LABEL_37;
      }
    }
  }
  v41 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
LABEL_37:
  v66 = 0;
  v65 = 0;
  v67 = 0;
  *(_OWORD *)v71 = 0u;
  *(_OWORD *)v72 = 0u;
  v73 = 0u;
  *(_OWORD *)v74 = 0u;
  *(_OWORD *)v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v64 = *a2;
  sub_23942156C(&v75[1], (char *)v9, v41, (uint64_t)&v41[-v9] >> 2);
  sub_23942156C(&v77, v83, v84, (v84 - v83) >> 2);
  sub_23942156C((_QWORD *)&v78 + 1, v86, v87, (v87 - v86) >> 2);
  v42 = (uint64_t)&v81[-v9] >> 2;
  if (v42)
    sub_2394807B4((uint64_t)v71, v42);
  v43 = (uint64_t)(v73 - (unint64_t)v72[1]) >> 2;
  if (v42 <= v43)
  {
    if (v42 < v43)
      *(_QWORD *)&v73 = (char *)v72[1] + 4 * v42;
  }
  else
  {
    sub_2394807B4((uint64_t)&v72[1], v42 - v43);
  }
  v44 = ((char *)v74[1] - (char *)v74[0]) >> 2;
  if (v42 <= v44)
  {
    if (v42 < v44)
      v74[1] = (char *)v74[0] + 4 * v42;
  }
  else
  {
    sub_2394807B4((uint64_t)v74, v42 - v44);
  }
  v45 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
  v46 = *v45;
  v47 = (std::__shared_weak_count *)v45[1];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    do
      v50 = __ldaxr(v48);
    while (__stlxr(v50 - 1, v48));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v51 = *a2;
  v65 = *(_QWORD *)(*(_QWORD *)(v46 + 40) + 8 * v51);
  v68 = *(_DWORD *)(*(_QWORD *)(a3 + 136) + 4 * v51);
  v52 = v80;
  if (v81 != v80)
  {
    v53 = (v81 - v80) >> 2;
    v54 = *(_QWORD *)(a3 + 160);
    v55 = v71[0];
    if (v53 <= 1)
      v53 = 1;
    v56 = (unsigned int *)v80;
    do
    {
      v57 = *v56++;
      *v55++ = *(_DWORD *)(v54 + 4 * v57);
      --v53;
    }
    while (v53);
  }
  if (sub_2399423C8(*(_QWORD *)(a1 + 40), a2))
    sub_2399B6464(a1, a3, &v64);
  else
    sub_2399B6AAC(a1, (int *)&v64, v58, v59);
  if (fabsf(v70) <= 1.0e-16)
  {
    v61 = 0;
    goto LABEL_83;
  }
  *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
  v60 = v69;
  if (v69 >= 3.4028e38)
  {
    v70 = v70 * 1.1;
    *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
    if (v69 >= 3.4028e38 || v69 < v60)
    {
      v70 = v70 * 1.1;
      *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
      if (v69 >= 3.4028e38 || v69 < v60)
      {
        v70 = v70 * 1.1;
        *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
        if (v69 >= 3.4028e38 || v69 < v60)
        {
          v70 = v70 * 1.1;
          *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
          if (v69 >= 3.4028e38 || v69 < v60)
          {
            v70 = v70 * 1.1;
            *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
            if (v69 >= 3.4028e38 || v69 < v60)
            {
              v70 = v70 * 1.1;
              *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
              if (v69 >= 3.4028e38 || v69 < v60)
              {
                v70 = v70 * 1.1;
                *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
                if (v69 >= 3.4028e38 || v69 < v60)
                {
                  v70 = v70 * 1.1;
                  *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
                  if (v69 >= 3.4028e38 || v69 < v60)
                  {
                    v70 = v70 * 1.1;
                    *v4 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
                    if (v69 >= 3.4028e38 || v69 < v60)
                    {
                      v70 = v70 * 1.1;
                      v61 = sub_2399B6D10(a1, a3, (uint64_t)&v64);
LABEL_83:
                      *v4 = v61;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (*((_QWORD *)&v78 + 1))
  {
    *(_QWORD *)&v79 = *((_QWORD *)&v78 + 1);
    operator delete(*((void **)&v78 + 1));
  }
  if ((_QWORD)v77)
  {
    *((_QWORD *)&v77 + 1) = v77;
    operator delete((void *)v77);
  }
  if (v75[1])
  {
    *(void **)&v76 = v75[1];
    operator delete(v75[1]);
  }
  if (v74[0])
  {
    v74[1] = v74[0];
    operator delete(v74[0]);
  }
  if (v72[1])
  {
    *(void **)&v73 = v72[1];
    operator delete(v72[1]);
  }
  if (v71[0])
  {
    v71[1] = v71[0];
    operator delete(v71[0]);
  }
  if (v52)
    operator delete(v52);
  if (v83)
    operator delete(v83);
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
}

void sub_2399B6238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a4);
  sub_2399B76A8((uint64_t *)va);
  v6 = *(void **)(v4 - 176);
  if (v6)
  {
    *(_QWORD *)(v4 - 168) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v4 - 152);
  if (v7)
    operator delete(v7);
  v8 = *(void **)(v4 - 128);
  if (v8)
  {
    *(_QWORD *)(v4 - 120) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2399B62A4(uint64_t a1, unsigned int *a2, char **a3)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  _DWORD v26[4];

  sub_239962B1C((uint64_t)v26, (_QWORD *)(a1 + 104), a2);
  result = sub_239962B44(v26);
  if ((_DWORD)result != -1)
  {
    v5 = result;
    while (1)
    {
      v8 = a3[1];
      v7 = (unint64_t)a3[2];
      if ((unint64_t)v8 >= v7)
        break;
      *(_DWORD *)v8 = v5;
      v6 = (uint64_t)(v8 + 4);
LABEL_4:
      a3[1] = (char *)v6;
      result = sub_239962B44(v26);
      v5 = result;
      if ((_DWORD)result == -1)
        return result;
    }
    v9 = *a3;
    v10 = v8 - *a3;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_2394189F8();
    v13 = v7 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_239418A80();
      v15 = operator new(4 * v14);
      v16 = &v15[4 * v11];
      *(_DWORD *)v16 = v5;
      v6 = (uint64_t)(v16 + 4);
      if (v8 == v9)
        goto LABEL_24;
    }
    else
    {
      v15 = 0;
      v16 = (char *)(4 * v11);
      *(_DWORD *)(4 * v11) = v5;
      v6 = 4 * v11 + 4;
      if (v8 == v9)
      {
LABEL_24:
        *a3 = v16;
        a3[1] = (char *)v6;
        a3[2] = &v15[4 * v14];
        if (v8)
          operator delete(v8);
        goto LABEL_4;
      }
    }
    v17 = v8 - 4 - v9;
    if (v17 < 0x2C)
      goto LABEL_31;
    if ((unint64_t)(v8 - &v15[v10]) < 0x20)
      goto LABEL_31;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v8[-v19];
    v16 -= v19;
    v21 = &v15[4 * v11 - 16];
    v22 = (__int128 *)(v8 - 16);
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *v22;
      *(v21 - 1) = *(v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 2;
      v23 -= 8;
    }
    while (v23);
    v8 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_31:
      do
      {
        v25 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v16 - 1) = v25;
        v16 -= 4;
      }
      while (v8 != v9);
    }
    v8 = *a3;
    goto LABEL_24;
  }
  return result;
}

void sub_2399B6464(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  unsigned int v20;
  float v21;
  unsigned int *v22;
  unsigned int *v23;
  unint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int *j;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  unsigned int *k;
  uint64_t v62;
  uint64_t v64;
  float *v65;
  float *v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  double v74;
  float v75;
  float v76;
  float v77;
  float v78;
  BOOL v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  float *v86;
  float *v87;
  float *v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  double v95;
  float v96;
  float v97;
  unsigned int v98;
  int v99;
  unsigned int i;
  unsigned int v101;

  v6 = *a3;
  v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)a3 + 17);
  v14 = *((_QWORD *)a3 + 18);
  v15 = *(_QWORD *)(v9 + 40);
  v16 = (float *)(v15 + 8 * v6);
  a3[5] = *(_DWORD *)v16;
  a3[6] = *((_DWORD *)v16 + 1);
  a3[3] = *(_DWORD *)v16;
  a3[4] = *((_DWORD *)v16 + 1);
  a3[8] = *(_DWORD *)(*(_QWORD *)(a2 + 136) + 4 * v6);
  a3[9] = 2139095039;
  v17 = v14 - (_QWORD)v13;
  if (v17)
  {
    v18 = v17 >> 2;
    if (v18 <= 1)
      v18 = 1;
    v19 = 3.4028e38;
    do
    {
      v20 = *v13++;
      v21 = (float)((float)(v16[1] - *(float *)(v15 + 8 * v20 + 4)) * (float)(v16[1] - *(float *)(v15 + 8 * v20 + 4)))
          + (float)((float)(*v16 - *(float *)(v15 + 8 * v20)) * (float)(*v16 - *(float *)(v15 + 8 * v20)));
      if (v21 < v19)
      {
        *((float *)a3 + 9) = v21;
        v19 = v21;
      }
      --v18;
    }
    while (v18);
  }
  v101 = -1;
  v22 = (unsigned int *)*((_QWORD *)a3 + 20);
  v23 = (unsigned int *)*((_QWORD *)a3 + 21);
  if (v22 != v23)
  {
    while (1)
    {
      v24 = *v22;
      v25 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16
                                                                 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
      v27 = *v25;
      v26 = (std::__shared_weak_count *)v25[1];
      if (v26)
      {
        v28 = (unint64_t *)&v26->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        do
          v30 = __ldaxr(v28);
        while (__stlxr(v30 - 1, v28));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (((*(_QWORD *)(*(_QWORD *)(v27 + 40) + ((v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) != 0)
        break;
      if (++v22 == v23)
        goto LABEL_25;
    }
    v101 = *v22;
  }
LABEL_25:
  for (i = *(_DWORD *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v101) + 8);
        i != v101;
        i = *(_DWORD *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &i) + 8))
  {
    v81 = *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &i) + 12);
    v82 = *(_QWORD *)(a1 + 40) + 104;
    v83 = (unsigned int *)sub_239962518(v82, &i);
    v84 = *(unsigned int *)(sub_239962518(v82, v83) + 12);
    if ((_DWORD)v84 != (_DWORD)v6)
    {
      v85 = *(_QWORD *)(v9 + 40);
      v86 = (float *)(v85 + 8 * v6);
      v87 = (float *)(v85 + 8 * v81);
      v88 = (float *)(v85 + 8 * v84);
      v89 = v86[1];
      v90 = v87[1];
      v91 = *v86 - *v87;
      v92 = *v88 - *v87;
      v93 = v88[1] - v90;
      v94 = (float)(v93 * v93) + (float)(v92 * v92);
      v95 = fabsf(v94);
      v96 = (float)((float)((float)(v89 - v90) * v93) + (float)(v91 * v92)) / v94;
      if (v96 < 0.0)
        v96 = 0.0;
      if (v96 > 1.0)
        v96 = 1.0;
      v97 = (float)((float)((float)(v90 + (float)(v93 * v96)) - v89) * (float)((float)(v90 + (float)(v93 * v96)) - v89))
          + (float)((float)((float)(*v87 + (float)(v92 * v96)) - *v86)
                  * (float)((float)(*v87 + (float)(v92 * v96)) - *v86));
      if (v95 < 0.00000001)
        v97 = (float)((float)(v89 - v90) * (float)(v89 - v90)) + (float)(v91 * v91);
      if (*((float *)a3 + 9) > v97)
        *((float *)a3 + 9) = v97;
    }
  }
  v31 = (unsigned int *)*((_QWORD *)a3 + 20);
  for (j = (unsigned int *)*((_QWORD *)a3 + 21); v31 != j; ++v31)
  {
    v33 = *(_QWORD *)(a1 + 40);
    v34 = *v31;
    v35 = (uint64_t *)(*(_QWORD *)(v33 + 32) + 16 * *(unsigned int *)(v33 + 180));
    v37 = *v35;
    v36 = (std::__shared_weak_count *)v35[1];
    if (!v36)
      goto LABEL_34;
    v38 = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    do
      v40 = __ldaxr(v38);
    while (__stlxr(v40 - 1, v38));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if (((*(_QWORD *)(*(_QWORD *)(v37 + 40) + ((v34 >> 3) & 0x1FFFFFF8)) >> v34) & 1) != 0)
        goto LABEL_45;
    }
    else
    {
LABEL_34:
      if (((*(_QWORD *)(*(_QWORD *)(v37 + 40) + ((v34 >> 3) & 0x1FFFFFF8)) >> v34) & 1) != 0)
        goto LABEL_45;
    }
    v41 = *(unsigned int *)sub_239962518(v33 + 104, v31);
    v42 = (uint64_t *)(*(_QWORD *)(v33 + 32) + 16 * *(unsigned int *)(v33 + 180));
    v44 = *v42;
    v43 = (std::__shared_weak_count *)v42[1];
    if (!v43)
      goto LABEL_40;
    v45 = (unint64_t *)&v43->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    do
      v47 = __ldaxr(v45);
    while (__stlxr(v47 - 1, v45));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      if (((*(_QWORD *)(*(_QWORD *)(v44 + 40) + ((v41 >> 3) & 0x1FFFFFF8)) >> v41) & 1) != 0)
      {
LABEL_45:
        v48 = *(_QWORD *)(a1 + 40) + 104;
        v49 = (unsigned int *)sub_239962518(v48, v31);
        v50 = *(unsigned int *)(sub_239962518(v48, v49) + 12);
        v51 = *v31;
        v52 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32)
                        + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
        v54 = *v52;
        v53 = (std::__shared_weak_count *)v52[1];
        if (v53)
        {
          v55 = (unint64_t *)&v53->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
          do
            v57 = __ldaxr(v55);
          while (__stlxr(v57 - 1, v55));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v58 = *(_QWORD *)(a1 + 40);
        v59 = (int *)v31;
        if (((*(_QWORD *)(*(_QWORD *)(v54 + 40) + ((v51 >> 3) & 0x1FFFFFF8)) >> v51) & 1) == 0)
        {
          v59 = (int *)sub_239962518(v58 + 104, v31);
          v58 = *(_QWORD *)(a1 + 40);
        }
        v99 = *v59;
        v60 = v58 + 104;
        for (k = (unsigned int *)&v99; ; k = &v98)
        {
          v98 = *(_DWORD *)(sub_239962518(v60, k) + 8);
          if (v98 == v99)
            break;
          v62 = *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v98) + 12);
          if ((_DWORD)v62 != (_DWORD)v6 && (_DWORD)v62 != (_DWORD)v50)
          {
            v64 = *(_QWORD *)(v9 + 40);
            v65 = (float *)(v64 + 8 * v62);
            v66 = (float *)(v64 + 8 * v6);
            v67 = (float *)(v64 + 8 * v50);
            v68 = v65[1];
            v69 = v66[1];
            v70 = *v65 - *v66;
            v71 = *v67 - *v66;
            v72 = v67[1] - v69;
            v73 = (float)(v72 * v72) + (float)(v71 * v71);
            v74 = fabsf(v73);
            v75 = (float)((float)((float)(v68 - v69) * v72) + (float)(v70 * v71)) / v73;
            if (v75 < 0.0)
              v75 = 0.0;
            if (v75 > 1.0)
              v75 = 1.0;
            v76 = (float)((float)((float)(v69 + (float)(v72 * v75)) - v68)
                        * (float)((float)(v69 + (float)(v72 * v75)) - v68))
                + (float)((float)((float)(*v66 + (float)(v71 * v75)) - *v65)
                        * (float)((float)(*v66 + (float)(v71 * v75)) - *v65));
            if (v74 < 0.00000001)
              v76 = (float)((float)(v68 - v69) * (float)(v68 - v69)) + (float)(v70 * v70);
            if (*((float *)a3 + 9) > v76)
              *((float *)a3 + 9) = v76;
          }
          v60 = *(_QWORD *)(a1 + 40) + 104;
        }
      }
    }
    else
    {
LABEL_40:
      if (((*(_QWORD *)(*(_QWORD *)(v44 + 40) + ((v41 >> 3) & 0x1FFFFFF8)) >> v41) & 1) != 0)
        goto LABEL_45;
    }
  }
  v77 = *((float *)a3 + 9);
  v78 = sqrtf(v77) * 0.8;
  v79 = v77 < 0.0;
  v80 = 0.0;
  if (!v79)
    v80 = v78;
  *((float *)a3 + 9) = v80;
}

void sub_2399B6AAC(uint64_t a1, int *a2, double a3, double a4)
{
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  float32x2_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  uint64_t v22;
  float32x2_t v23;
  float32x2_t v24;
  int *v25;
  unsigned int *v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  unsigned int v31;
  float v32;
  float v33;
  BOOL v34;
  float v35;
  float v36;
  float32x2_t v37;
  int v38;

  v38 = *a2;
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
  v8 = *v6;
  v7 = (std::__shared_weak_count *)v6[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = 0;
  *(_QWORD *)(a2 + 3) = 0;
  v13 = (float *)(a2 + 3);
  v14 = *((_QWORD *)a2 + 18);
  v15 = *((_QWORD *)a2 + 17);
  v16 = (v14 - v15) >> 2;
  if (v14 != v15)
  {
    v17 = *(_QWORD *)(v8 + 40);
    if (v16 <= 1)
      v18 = 1;
    else
      v18 = (v14 - v15) >> 2;
    v19 = (unsigned int *)*((_QWORD *)a2 + 17);
    do
    {
      v20 = *v19++;
      a4 = *(double *)(v17 + 8 * v20);
      v12 = vadd_f32(v12, *(float32x2_t *)&a4);
      *(float32x2_t *)v13 = v12;
      --v18;
    }
    while (v18);
  }
  *(float *)&a4 = (float)v16;
  *(float32x2_t *)&v21 = vdiv_f32(v12, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a4, 0));
  *((_QWORD *)&v21 + 1) = v21;
  *(_OWORD *)(a2 + 3) = v21;
  sub_2399B7728(a1, &v38, v13, (float *)a2 + 8, (float **)a2 + 8, (uint64_t *)a2 + 14);
  v37 = 0;
  if (v14 == v15)
  {
    v25 = a2 + 9;
    v30 = 3.4028e38;
  }
  else
  {
    v22 = 0;
    if (v16 <= 1)
      v16 = 1;
    v23 = (float32x2_t)vdup_n_s32(0x3F4CCCCDu);
    v24 = (float32x2_t)vdup_n_s32(0x3E4CCCCCu);
    do
    {
      v37 = vadd_f32(vmul_f32(*(float32x2_t *)(*(_QWORD *)(v8 + 40) + 8 * *(unsigned int *)(*((_QWORD *)a2 + 17) + 4 * v22)), v23), vmul_f32(*(float32x2_t *)(a2 + 5), v24));
      v36 = 0.0;
      sub_2399B7728(a1, &v38, (float *)&v37, &v36, (float **)a2 + 11, (uint64_t *)a2 + 14);
      if (v36 < *((float *)a2 + 8))
      {
        *((float *)a2 + 8) = v36;
        sub_23942156C((_QWORD *)a2 + 8, *((char **)a2 + 11), *((char **)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 2);
        *(float32x2_t *)(a2 + 3) = v37;
      }
      ++v22;
    }
    while (v16 != v22);
    a2[9] = 2139095039;
    v25 = a2 + 9;
    v26 = *(unsigned int **)(v25 + 25);
    v27 = *(_QWORD *)(v8 + 40);
    v28 = *((float *)v25 - 4);
    v29 = *((float *)v25 - 3);
    v30 = 3.4028e38;
    do
    {
      v31 = *v26++;
      v32 = (float)((float)(*(float *)(v27 + 8 * v31 + 4) - v29) * (float)(*(float *)(v27 + 8 * v31 + 4) - v29))
          + (float)((float)(*(float *)(v27 + 8 * v31) - v28) * (float)(*(float *)(v27 + 8 * v31) - v28));
      if (v32 < v30)
      {
        *(float *)v25 = v32;
        v30 = v32;
      }
      --v16;
    }
    while (v16);
  }
  v33 = sqrtf(v30) * 0.8;
  v34 = v30 < 0.0;
  v35 = 0.0;
  if (!v34)
    v35 = v33;
  *(float *)v25 = v35;
}

uint64_t sub_2399B6D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  unsigned int v11;
  uint64_t i;
  uint64_t v13;
  char *v14;
  size_t v15;
  void *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  float *v55;
  uint64_t v56;
  uint64_t v57;
  float *v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  float v67;
  float v68;
  float v69;
  float v70;
  __float2 v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  double v80;
  float v81;
  double v82;
  BOOL v83;
  float v84;
  float v85;
  unint64_t v86;
  unsigned int v87;
  unsigned int v88;
  float v89;
  float v91;
  float v92;
  uint64_t v93;
  uint64_t v94;
  float *v95;
  float *v96;
  float *v97;
  unsigned int v98;
  void *__dst[2];
  unint64_t v100;
  _DWORD v101[624];
  unint64_t v102;
  uint64_t v103;
  float v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;

  v106 = *(_DWORD *)a3;
  v6 = *(float *)(a3 + 28);
  v7 = (float *)(a3 + 12);
  v105 = *(_QWORD *)(a3 + 12);
  v8 = (float *)(a3 + 32);
  v9 = *(float *)(a3 + 32);
  v10 = *(float *)(a2 + 8) * (float)((float)(*(float *)(a2 + 4) * *(float *)(a2 + 4)) * *(float *)(a2 + 8));
  v104 = 0.0;
  v103 = 0;
  v11 = 2;
  v101[0] = 2;
  for (i = 1; i != 624; ++i)
  {
    v11 = i + 1812433253 * (v11 ^ (v11 >> 30));
    v101[i] = v11;
  }
  v102 = 0;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = off_256934418[0];
  v15 = strlen(off_256934418[0]);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v17 = (void **)operator new(v18 + 1);
    __dst[1] = v16;
    v100 = v19 | 0x8000000000000000;
    __dst[0] = v17;
    goto LABEL_10;
  }
  HIBYTE(v100) = v15;
  v17 = __dst;
  if (v15)
LABEL_10:
    memmove(v17, v14, (size_t)v16);
  *((_BYTE *)v16 + (_QWORD)v17) = 0;
  v108 = 0;
  v107 = 0;
  sub_2394E5DE4((uint64_t **)(v13 + 56), (uint64_t)&v107, (unsigned __int8 *)__dst);
  v91 = v6;
  v92 = v9;
  if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
    v20 = 0.0;
    if (*(float *)(a3 + 28) < 3.4028e38)
      goto LABEL_13;
LABEL_16:
    v20 = sub_2399B79DC(*(_QWORD *)(a1 + 40), (float *)&v105, *(unsigned int **)(a3 + 160), *(unsigned int **)(a3 + 168), *(_DWORD *)(a1 + 192));
    if (!*(_QWORD *)(a2 + 24))
      goto LABEL_87;
    goto LABEL_17;
  }
  operator delete(__dst[0]);
  v20 = 0.0;
  if (*(float *)(a3 + 28) >= 3.4028e38)
    goto LABEL_16;
LABEL_13:
  if (*(_QWORD *)(a2 + 24))
  {
LABEL_17:
    v21 = 0;
    v22 = v10;
    v95 = (float *)(a3 + 4);
    v96 = v7;
    v97 = v8;
    do
    {
      if (*(float *)(a3 + 28) >= 3.4028e38)
      {
        sub_239962B1C((uint64_t)__dst, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), (unsigned int *)a3);
        v107 = -1;
        v23 = sub_239962B44(__dst);
        v98 = v23;
        if (v23 != -1)
        {
          v24 = v23;
          v25 = 0;
          do
          {
            v26 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32)
                            + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
            v27 = *v26;
            v28 = (std::__shared_weak_count *)v26[1];
            if (v28)
            {
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldxr(p_shared_owners);
              while (__stxr(v30 + 1, p_shared_owners));
              do
                v31 = __ldaxr(p_shared_owners);
              while (__stlxr(v31 - 1, p_shared_owners));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            if (((*(_QWORD *)(*(_QWORD *)(v27 + 40) + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) >> v24) & 1) == 0
              && *(float *)(*(_QWORD *)(a2 + 160)
                          + 4 * *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v98) + 16)) >= 3.4028e38)
            {
              ++v25;
              v107 = v98;
            }
            v24 = sub_239962B44(__dst);
            v98 = v24;
          }
          while (v24 != -1);
          v32 = v25 == 1;
          v7 = v96;
          if (v32)
          {
            v33 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
            v34 = *v33;
            v35 = (std::__shared_weak_count *)v33[1];
            if (v35)
            {
              v36 = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
              do
                v38 = __ldaxr(v36);
              while (__stlxr(v38 - 1, v36));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
            v39 = *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v107) + 12);
            v94 = *(_QWORD *)(v34 + 40);
            v40 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
            v41 = *v40;
            v42 = (std::__shared_weak_count *)v40[1];
            if (v42)
            {
              v43 = (unint64_t *)&v42->__shared_owners_;
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
              do
                v45 = __ldaxr(v43);
              while (__stlxr(v45 - 1, v43));
              if (!v45)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            v46 = *(_QWORD *)(a1 + 40) + 104;
            v47 = (unsigned int *)sub_239962518(v46, &v107);
            v48 = *(unsigned int *)(sub_239962518(v46, v47) + 12);
            v49 = *(_QWORD *)(v41 + 40);
            v50 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
            v51 = (std::__shared_weak_count *)v50[1];
            v93 = *v50;
            if (v51)
            {
              v52 = (unint64_t *)&v51->__shared_owners_;
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
              do
                v54 = __ldaxr(v52);
              while (__stlxr(v54 - 1, v52));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
            v55 = (float *)(v94 + 8 * v39);
            v56 = *(_QWORD *)(a1 + 40) + 104;
            v57 = sub_239962518(v56, &v107);
            v58 = (float *)(*(_QWORD *)(v93 + 40)
                          + 8 * *(unsigned int *)(sub_239962518(v56, (unsigned int *)(v57 + 4)) + 12));
            v59 = v55[1];
            v60 = *v58 - *v55;
            v61 = v58[1] - v59;
            v62 = atan2f(*(float *)(v49 + 8 * v48 + 4) - v59, *(float *)(v49 + 8 * v48) - *v55);
            v63 = atan2f(v61, v60);
            if (vabds_f32(v63, v62) <= 3.14159265)
            {
              v7 = v96;
              v8 = v97;
            }
            else
            {
              v7 = v96;
              v8 = v97;
              if (v63 >= v62)
                v62 = v62 + 6.28318531;
              else
                v63 = v63 + 6.28318531;
            }
            v86 = (v102 + 1) % 0x270;
            v87 = v101[(v102 + 397) % 0x270] ^ ((v101[v86] & 0x7FFFFFFE | v101[v102] & 0x80000000) >> 1) ^ ((int)(v101[v86] << 31) >> 31) & 0x9908B0DF;
            v101[v102] = v87;
            v102 = v86;
            v88 = ((v87 ^ (v87 >> 11)) << 7) & 0x9D2C5680 ^ v87 ^ (v87 >> 11);
            v68 = v62
                + (float)((float)((float)((v88 << 15) & 0xEFC60000 ^ v88 ^ (((v88 << 15) & 0xEFC60000 ^ v88) >> 18))
                                * 2.3283e-10)
                        * (float)(v63 - v62));
            goto LABEL_59;
          }
        }
        v8 = v97;
      }
      v64 = (v102 + 1) % 0x270;
      v65 = v101[(v102 + 397) % 0x270] ^ ((v101[v64] & 0x7FFFFFFE | v101[v102] & 0x80000000) >> 1) ^ ((int)(v101[v64] << 31) >> 31) & 0x9908B0DF;
      v101[v102] = v65;
      v102 = v64;
      v66 = ((v65 ^ (v65 >> 11)) << 7) & 0x9D2C5680 ^ v65 ^ (v65 >> 11);
      v67 = (float)((v66 << 15) & 0xEFC60000 ^ v66 ^ (((v66 << 15) & 0xEFC60000 ^ v66) >> 18));
      v68 = (float)(v67 + v67) * 3.14159265 * 2.32830644e-10;
LABEL_59:
      v69 = *(float *)(a3 + 20);
      v70 = *(float *)(a3 + 36);
      v71 = __sincosf_stret(v68);
      v72 = *(float *)(a3 + 24) + (float)(v70 * v71.__sinval);
      *(float *)(a3 + 12) = v69 + (float)(v70 * v71.__cosval);
      *(float *)(a3 + 16) = v72;
      if (*(_BYTE *)(a2 + 1) && sub_2399423C8(*(_QWORD *)(a1 + 40), &v106))
      {
        v73 = *(float *)(a2 + 52);
        v74 = *(float *)(a3 + 16);
        if (*(float *)(a3 + 12) < v73)
          v73 = *(float *)(a3 + 12);
        *(float *)(a3 + 12) = v73;
        if (*(float *)(a2 + 44) >= v73)
          v73 = *(float *)(a2 + 44);
        *(float *)(a3 + 12) = v73;
        v75 = *(float *)(a2 + 56);
        if (v74 < v75)
          v75 = v74;
        *(float *)(a3 + 16) = v75;
        if (*(float *)(a2 + 48) >= v75)
          v75 = *(float *)(a2 + 48);
        *(float *)(a3 + 16) = v75;
      }
      sub_2399B7728(a1, &v106, v7, v8, (float **)(a3 + 64), (uint64_t *)(a3 + 112));
      v76 = *(float *)(a3 + 4);
      v77 = *(float *)(a3 + 8);
      v79 = *(float *)(a3 + 12);
      v78 = *(float *)(a3 + 16);
      v80 = (float)((float)((float)(v77 - v78) * (float)(v77 - v78)) + (float)((float)(v76 - v79) * (float)(v76 - v79)));
      while (v80 > v22)
      {
        *(float *)&v103 = (float)(v76 + v79) * 0.5;
        *((float *)&v103 + 1) = (float)(v77 + v78) * 0.5;
        sub_2399B7728(a1, &v106, (float *)&v103, &v104, (float **)(a3 + 88), (uint64_t *)(a3 + 112));
        v81 = *(float *)(a3 + 28);
        v84 = *(float *)(a3 + 32);
        v85 = v104;
        if (v81 >= v84)
        {
          *(float *)(a3 + 28) = v104;
          v77 = *((float *)&v103 + 1);
          v76 = *(float *)&v103;
          *(_DWORD *)(a3 + 4) = v103;
          *(float *)(a3 + 8) = v77;
          v79 = *(float *)(a3 + 12);
          v78 = *(float *)(a3 + 16);
          v81 = v85;
        }
        else
        {
          *(float *)(a3 + 32) = v104;
          v78 = *((float *)&v103 + 1);
          v79 = *(float *)&v103;
          *(_DWORD *)(a3 + 12) = v103;
          *(float *)(a3 + 16) = v78;
          v76 = *(float *)(a3 + 4);
          v77 = *(float *)(a3 + 8);
          v84 = v85;
        }
        v82 = (float)((float)((float)(v77 - v78) * (float)(v77 - v78)) + (float)((float)(v76 - v79) * (float)(v76 - v79)));
        v83 = vabdd_f64(v80, v82) < 1.00000002e-16 || v80 < v82;
        v80 = (float)((float)((float)(v77 - v78) * (float)(v77 - v78)) + (float)((float)(v76 - v79) * (float)(v76 - v79)));
        if (v83)
          goto LABEL_80;
      }
      v81 = *(float *)(a3 + 28);
      v84 = *(float *)(a3 + 32);
LABEL_80:
      if (v81 > v84)
      {
        *(float *)(a3 + 4) = v79;
        *(float *)(a3 + 8) = v78;
      }
      else
      {
        if (v81 < 3.4028e38
          || sub_2399B79DC(*(_QWORD *)(a1 + 40), v95, *(unsigned int **)(a3 + 160), *(unsigned int **)(a3 + 168), *(_DWORD *)(a1 + 192)) <= v20)
        {
          goto LABEL_20;
        }
        *(_QWORD *)v95 = *(_QWORD *)v7;
        v84 = *v8;
      }
      *(float *)(a3 + 28) = v84;
LABEL_20:
      ++v21;
    }
    while (v21 < *(_QWORD *)(a2 + 24));
  }
LABEL_87:
  v89 = *(float *)(a3 + 28);
  if (v89 < v92)
  {
    *(float *)(a3 + 32) = v89;
    *(_QWORD *)(a3 + 12) = *(_QWORD *)(a3 + 4);
    if (v89 >= v91)
      return 0;
LABEL_96:
    sub_2399B7728(a1, &v106, v7, v8, (float **)(a3 + 64), (uint64_t *)(a3 + 112));
    sub_2399B7BC0(a1, a2, (unsigned int *)a3);
    return 1;
  }
  if (v89 < 3.4028e38)
  {
    *v8 = v92;
    *(_QWORD *)v7 = v105;
    if (v92 >= v91)
      return 0;
    goto LABEL_96;
  }
  if (sub_2399B79DC(*(_QWORD *)(a1 + 40), (float *)(a3 + 4), *(unsigned int **)(a3 + 160), *(unsigned int **)(a3 + 168), *(_DWORD *)(a1 + 192)) < v20)
  {
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a3 + 28);
    *(_QWORD *)(a3 + 12) = *(_QWORD *)(a3 + 4);
    goto LABEL_96;
  }
  if (*v8 < v91)
    goto LABEL_96;
  return 0;
}

void sub_2399B768C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2399B76A8(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[11];
  if (v5)
  {
    a1[12] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[8];
  if (v6)
  {
    a1[9] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[5];
  if (v7)
  {
    a1[6] = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_2399B7728(uint64_t a1, _DWORD *a2, float *a3, float *a4, float **a5, uint64_t *a6)
{
  float *v8;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  float *v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float *v38;
  uint64_t v39;
  unint64_t v40;
  float v41;
  char *v42;
  float *v43;
  void *__p;
  char *v45;
  char *v46;
  int v47;

  v8 = a4;
  *a4 = 0.0;
  v12 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v47 = 0;
  a5[1] = *a5;
  v18 = a6[1] - *a6;
  if (v18)
    sub_2394807B4((uint64_t)a5, v18 >> 2);
  v19 = operator new(0xCuLL);
  v45 = (char *)(v19 + 3);
  v46 = (char *)(v19 + 3);
  *(_QWORD *)v19 = -1;
  v19[2] = -1;
  __p = v19;
  v20 = *a6;
  if (a6[1] == *a6)
  {
    v38 = *a5;
    v39 = (char *)a5[1] - (char *)*a5;
    if (v39)
    {
LABEL_24:
      v40 = v39 >> 2;
      if (v40 <= 1)
        v40 = 1;
      v41 = 0.0;
      while (*v38 < 3.4028e38)
      {
        v41 = v41 + *v38++;
        if (!--v40)
          goto LABEL_32;
      }
      *v8 = 3.4028e38;
      v42 = (char *)__p;
      if (!__p)
        return;
LABEL_33:
      v45 = v42;
      operator delete(v42);
      return;
    }
  }
  else
  {
    v43 = v8;
    v21 = 0;
    v22 = 0;
    do
    {
      sub_23996362C(*(_QWORD *)(a1 + 40), (unsigned int *)(v20 + 4 * v21), (uint64_t)&__p);
      v23 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 16 * *(unsigned int *)(a1 + 196));
      v24 = *v23;
      v25 = (std::__shared_weak_count *)v23[1];
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        do
          v28 = __ldaxr(v26);
        while (__stlxr(v28 - 1, v26));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v29 = *(unsigned int *)__p;
      if ((_DWORD)v29 == *a2)
      {
        v30 = *(_QWORD *)(a1 + 40);
        v31 = *(_QWORD *)(v14 + 40);
        v32 = (float *)(v31 + 8 * *((unsigned int *)__p + 1));
        v33 = (float *)(v31 + 8 * *((unsigned int *)__p + 2));
        v34 = a3;
      }
      else
      {
        v35 = *((unsigned int *)__p + 1);
        v30 = *(_QWORD *)(a1 + 40);
        v36 = *(_QWORD *)(v14 + 40);
        v34 = (float *)(v36 + 8 * v29);
        if ((_DWORD)v35 == *a2)
        {
          v33 = (float *)(v36 + 8 * *((unsigned int *)__p + 2));
          v32 = a3;
        }
        else
        {
          v32 = (float *)(v36 + 8 * v35);
          v33 = a3;
        }
      }
      v37 = sub_2399B5220(v30, (unsigned int *)(*a6 + 4 * v21), v34, v32, v33, (float *)(*(_QWORD *)(v24 + 40) + 4 * *(unsigned int *)(*a6 + 4 * v21)), (float *)&v47);
      v38 = *a5;
      (*a5)[v21] = v37;
      v21 = ++v22;
      v20 = *a6;
    }
    while (v22 < (unint64_t)((a6[1] - *a6) >> 2));
    v8 = v43;
    v39 = (char *)a5[1] - (char *)v38;
    if (v39)
      goto LABEL_24;
  }
  v41 = 0.0;
LABEL_32:
  *v8 = v41;
  v42 = (char *)__p;
  if (__p)
    goto LABEL_33;
}

void sub_2399B79BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_2399B79DC(uint64_t a1, float *a2, unsigned int *a3, unsigned int *a4, unsigned int a5)
{
  unsigned int *v5;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;

  if (a3 != a4)
  {
    v5 = a3;
    v8 = a1 + 104;
    v9 = a5;
    v10 = 0.0;
    while (1)
    {
      v12 = (unsigned int *)sub_239962518(v8, v5);
      v13 = sub_239962518(v8, v12);
      v14 = sub_239962518(v8, v5);
      v15 = (unsigned int *)sub_239962518(v8, (unsigned int *)(v14 + 8));
      v16 = sub_239962518(v8, v15);
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 16 * v9);
      v18 = *v17;
      v19 = (std::__shared_weak_count *)v17[1];
      if (!v19)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
        v23 = *(unsigned int *)(v13 + 12);
        v24 = *(_QWORD *)(v18 + 40);
        v31 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 16 * v9);
        v27 = *v31;
        v26 = (std::__shared_weak_count *)v31[1];
        if (v26)
        {
LABEL_10:
          v28 = (unint64_t *)&v26->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
          do
            v30 = __ldaxr(v28);
          while (__stlxr(v30 - 1, v28));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      else
      {
LABEL_9:
        v23 = *(unsigned int *)(v13 + 12);
        v24 = *(_QWORD *)(v18 + 40);
        v25 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 16 * v9);
        v27 = *v25;
        v26 = (std::__shared_weak_count *)v25[1];
        if (v26)
          goto LABEL_10;
      }
      v11 = (float *)(*(_QWORD *)(v27 + 40) + 8 * *(unsigned int *)(v16 + 12));
      v10 = v10
          - fminf((float)((float)((float)(*(float *)(v24 + 8 * v23) - *a2) * (float)(v11[1] - a2[1]))- (float)((float)(*(float *)(v24 + 8 * v23 + 4) - a2[1]) * (float)(*v11 - *a2)))* 0.5, 0.0);
      if (++v5 == a4)
        return v10;
    }
  }
  return 0.0;
}

void sub_2399B7BC0(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  int *v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  float v29;
  unsigned int v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v7 = *((_QWORD *)a3 + 14);
  v6 = *((_QWORD *)a3 + 15);
  v9 = *((_QWORD *)a3 + 17);
  v8 = *((_QWORD *)a3 + 18);
  v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 80) + 16 * *(unsigned int *)(a1 + 192));
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v16 = *a3;
  v17 = (_DWORD *)(*(_QWORD *)(v12 + 40) + 8 * v16);
  *v17 = a3[3];
  v17[1] = a3[4];
  *(_DWORD *)(*(_QWORD *)(a2 + 136) + 4 * v16) = a3[8];
  if (v6 != v7)
  {
    v18 = (v6 - v7) >> 2;
    v19 = (int *)*((_QWORD *)a3 + 8);
    v20 = (unsigned int *)*((_QWORD *)a3 + 14);
    v21 = *(_QWORD *)(a2 + 160);
    if (v18 <= 1)
      v18 = 1;
    do
    {
      v22 = *v19++;
      v23 = v22;
      v24 = *v20++;
      *(_DWORD *)(v21 + 4 * v24) = v23;
      --v18;
    }
    while (v18);
  }
  if (v8 != v9)
  {
    v25 = 0;
    if ((unint64_t)((v8 - v9) >> 2) <= 1)
      v26 = 1;
    else
      v26 = (v8 - v9) >> 2;
    v27 = *((_QWORD *)a3 + 17);
    do
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      sub_2399B5728(*(_QWORD *)(a1 + 40), (unsigned int *)(v27 + 4 * v25), &v31);
      if (v32 == v31)
      {
        v29 = 0.0;
        if (!v31)
          goto LABEL_17;
      }
      else
      {
        v28 = 0;
        v29 = 0.0;
        v30 = 1;
        while (fabsf(v29 + -3.4028e38) >= 0.00000001)
        {
          v29 = v29 + *(float *)(*(_QWORD *)(a2 + 160) + 4 * *(unsigned int *)&v31[4 * v28]);
          v28 = v30++;
          if ((v32 - v31) >> 2 <= v28)
            goto LABEL_16;
        }
        v29 = 3.4028e38;
        if (!v31)
          goto LABEL_17;
      }
LABEL_16:
      v32 = v31;
      operator delete(v31);
LABEL_17:
      v27 = *((_QWORD *)a3 + 17);
      *(float *)(*(_QWORD *)(a2 + 136) + 4 * *(unsigned int *)(v27 + 4 * v25++)) = v29;
    }
    while (v25 != v26);
  }
}

void sub_2399B7DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399B7DD0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF11B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399B7DE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF11B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

void sub_2399B7E18(uint64_t *a1, _QWORD *a2, unint64_t *a3, uint64_t a4, char a5)
{
  unint64_t *v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _DWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  uint64_t i;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unsigned int **v40;
  unsigned int **v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  _OWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _OWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned int **v64;
  void *v65;
  unsigned int **v66;
  unsigned int *v67;
  unsigned int *v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t *v71;
  __int128 v74;
  __int128 v75;
  void *__p;
  unsigned int **v77;

  v5 = a3;
  v8 = *(_QWORD *)(a1[5] + 160) - *(_QWORD *)(a1[5] + 152);
  sub_2399B83C4(&__p, *a3);
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    v9 = 0;
    v10 = (v8 >> 2);
    v69 = v10;
    v70 = a2;
    v71 = v5;
    while (1)
    {
      v12 = *(unsigned int *)(*a2 + 4 * v9);
      if (*v5 <= v12)
        goto LABEL_5;
      v13 = (char *)__p + 24 * v12;
      v15 = v13 + 1;
      v14 = (char *)v13[1];
      v16 = v13[2];
      if ((unint64_t)v14 >= v16)
        break;
      *(_DWORD *)v14 = v9;
      v11 = (uint64_t)(v14 + 4);
LABEL_4:
      *v15 = v11;
LABEL_5:
      if (++v9 == v10)
        goto LABEL_29;
    }
    v17 = (char *)*v13;
    v18 = (uint64_t)&v14[-*v13];
    v19 = v18 >> 2;
    v20 = (v18 >> 2) + 1;
    if (v20 >> 62)
      sub_2394189F8();
    v21 = v16 - (_QWORD)v17;
    if (v21 >> 1 > v20)
      v20 = v21 >> 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
      v22 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 62)
        sub_239418A80();
      v23 = v22;
      v24 = operator new(4 * v22);
      v22 = v23;
      v25 = &v24[4 * v19];
      *v25 = v9;
      v11 = (uint64_t)(v25 + 1);
      if (v14 == v17)
        goto LABEL_26;
    }
    else
    {
      v24 = 0;
      v25 = (_DWORD *)(4 * v19);
      *(_DWORD *)(4 * v19) = v9;
      v11 = 4 * v19 + 4;
      if (v14 == v17)
      {
LABEL_26:
        *v13 = v25;
        *v15 = v11;
        v13[2] = &v24[4 * v22];
        a2 = v70;
        v5 = v71;
        if (v14)
          operator delete(v14);
        v10 = v69;
        goto LABEL_4;
      }
    }
    v26 = v14 - 4 - v17;
    if (v26 < 0x2C)
      goto LABEL_77;
    if ((unint64_t)(v14 - &v24[v18]) < 0x20)
      goto LABEL_77;
    v27 = (v26 >> 2) + 1;
    v28 = 4 * (v27 & 0x7FFFFFFFFFFFFFF8);
    v29 = &v14[-v28];
    v25 = (_DWORD *)((char *)v25 - v28);
    v30 = &v24[4 * v19 - 16];
    v31 = (__int128 *)(v14 - 16);
    v32 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v33 = *v31;
      *(v30 - 1) = *(v31 - 1);
      *v30 = v33;
      v30 -= 2;
      v31 -= 2;
      v32 -= 8;
    }
    while (v32);
    v14 = v29;
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_77:
      do
      {
        v34 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *--v25 = v34;
      }
      while (v14 != v17);
    }
    v14 = (char *)*v13;
    goto LABEL_26;
  }
LABEL_29:
  v35 = a1[32];
  for (i = a1[33]; i != v35; i -= 16)
  {
    v37 = *(std::__shared_weak_count **)(i - 8);
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  a1[33] = v35;
  v40 = (unsigned int **)__p;
  v41 = v77;
  if (__p != v77)
  {
    while (1)
    {
      if (v40[1] != *v40)
      {
        v42 = operator new(0xD0uLL);
        v42[1] = 0;
        v42[2] = 0;
        *v42 = &off_250ADED90;
        sub_23996301C((uint64_t)(v42 + 3));
        *(_QWORD *)&v75 = v42 + 3;
        *((_QWORD *)&v75 + 1) = v42;
        sub_23999E62C(a1[5], v40, (uint64_t)(v42 + 3));
        v43 = v75;
        v44 = a1[6];
        v45 = a1[7];
        v46 = operator new(0x180uLL);
        v46[1] = 0;
        v47 = v46 + 1;
        v46[2] = 0;
        *v46 = &off_250AF1130;
        v48 = sub_239994FB8((uint64_t)(v46 + 3), v43, v44, v45, a5);
        *(_QWORD *)&v74 = v48;
        *((_QWORD *)&v74 + 1) = v46;
        v49 = (uint64_t *)a1[33];
        if ((unint64_t)v49 >= a1[34])
        {
          v51 = sub_23951E0F0((uint64_t)(a1 + 32), &v74);
          v52 = a4;
        }
        else
        {
          *v49 = v48;
          v49[1] = (uint64_t)v46;
          do
            v50 = __ldxr(v47);
          while (__stxr(v50 + 1, v47));
          v51 = v49 + 2;
          v52 = a4;
        }
        a1[33] = (uint64_t)v51;
        *(_QWORD *)(v74 + 280) = a1;
        v53 = *(_QWORD **)(v52 + 8);
        if ((unint64_t)v53 >= *(_QWORD *)(v52 + 16))
        {
          v57 = sub_23951E0F0(v52, &v75);
        }
        else
        {
          *v53 = v75;
          v54 = *((_QWORD *)&v75 + 1);
          v53[1] = *((_QWORD *)&v75 + 1);
          if (v54)
          {
            v55 = (unint64_t *)(v54 + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v57 = v53 + 2;
        }
        *(_QWORD *)(v52 + 8) = v57;
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
        if (!*((_QWORD *)&v74 + 1))
          goto LABEL_56;
        v59 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
          if (*((_QWORD *)&v75 + 1))
          {
LABEL_57:
            v62 = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
        }
        else
        {
LABEL_56:
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
          if (*((_QWORD *)&v75 + 1))
            goto LABEL_57;
        }
      }
      v40 += 3;
      if (v40 == v41)
      {
        v40 = (unsigned int **)__p;
        break;
      }
    }
  }
  if (v40)
  {
    v64 = v77;
    v65 = v40;
    if (v77 != v40)
    {
      v66 = v77;
      do
      {
        v68 = *(v66 - 3);
        v66 -= 3;
        v67 = v68;
        if (v68)
        {
          *(v64 - 2) = v67;
          operator delete(v67);
        }
        v64 = v66;
      }
      while (v66 != v40);
      v65 = __p;
    }
    v77 = v40;
    operator delete(v65);
  }
}

void sub_2399B8298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_23942A16C((void **)va);
  _Unwind_Resume(a1);
}

void sub_2399B82AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_23942A16C((void **)va);
  _Unwind_Resume(a1);
}

void sub_2399B82C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_23942A16C((void **)va);
  _Unwind_Resume(a1);
}

void sub_2399B82D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_239416DA0((uint64_t)va);
  sub_239416DA0((uint64_t)va1);
  sub_23942A16C((void **)va2);
  _Unwind_Resume(a1);
}

void sub_2399B82F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  sub_23942A16C(&a18);
  _Unwind_Resume(a1);
}

void sub_2399B8360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  __cxa_end_catch();
  sub_239416DA0((uint64_t)va);
  sub_23942A16C((void **)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_2399B83C4(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2399B846C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC32F8((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399B848C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  char *v12;
  int32x2_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  int32x2_t *v17;
  uint64_t v18;
  int32x2_t v19;
  int32x2_t v20;
  void **v21;
  void **v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  void **v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v34[2];
  void *__p[2];
  __int128 v36;
  __int128 v37;
  void *v38[2];
  __int128 v39;
  __int128 v40;

  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  *(_OWORD *)__p = 0u;
  v36 = 0u;
  sub_2394F0374((uint64_t)v38);
  v8 = *((_QWORD *)&v40 + 1);
  *(_DWORD *)(*(_QWORD *)((char *)v38[1] + ((((_QWORD)v40 + *((_QWORD *)&v40 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((v40 + *((_QWORD *)&v40 + 1)) & 0x3FF)) = a2;
  *((_QWORD *)&v40 + 1) = v8 + 1;
  sub_2394F0374((uint64_t)__p);
  v9 = *((_QWORD *)&v37 + 1);
  *(_DWORD *)(*(_QWORD *)((char *)__p[1] + ((((_QWORD)v37 + *((_QWORD *)&v37 + 1)) >> 7) & 0x1FFFFFFFFFFFFF8))
            + 4 * ((v37 + *((_QWORD *)&v37 + 1)) & 0x3FF)) = a3;
  *((_QWORD *)&v37 + 1) = v9 + 1;
  v10 = *(_DWORD **)a4;
  v11 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v11 >= 1)
    memset(*(void **)a4, 255, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
  v10[a2] = 0;
  v10[a3] = 1;
  v34[0] = a1;
  v34[1] = a4;
  while (*((_QWORD *)&v40 + 1))
  {
    sub_2399B8838(v34, (int64x2_t *)v38, 0);
    if (*((_QWORD *)&v37 + 1))
LABEL_5:
      sub_2399B8838(v34, (int64x2_t *)__p, 1);
  }
  if (*((_QWORD *)&v37 + 1))
    goto LABEL_5;
  v13 = *(int32x2_t **)a4;
  v12 = *(char **)(a4 + 8);
  if (*(char **)a4 == v12)
    goto LABEL_23;
  v14 = v12 - (char *)v13 - 4;
  v15 = *(char **)a4;
  if (v14 >= 0xC)
  {
    v16 = (v14 >> 2) + 1;
    v15 = (char *)v13 + 4 * (v16 & 0x7FFFFFFFFFFFFFFCLL);
    v17 = v13 + 1;
    v18 = v16 & 0x7FFFFFFFFFFFFFFCLL;
    while (1)
    {
      v19 = v17[-1];
      if ((vceq_s32(v19, (int32x2_t)-1).u8[0] & 1) != 0)
      {
        v17[-1].i32[0] = 0;
        if ((vceq_s32(v19, (int32x2_t)-1).i32[1] & 1) == 0)
        {
LABEL_15:
          v20 = *v17;
          if ((vceq_s32(*v17, (int32x2_t)-1).u8[0] & 1) == 0)
            goto LABEL_16;
          goto LABEL_20;
        }
      }
      else if ((vceq_s32(v19, (int32x2_t)-1).i32[1] & 1) == 0)
      {
        goto LABEL_15;
      }
      v17[-1].i32[1] = 0;
      v20 = *v17;
      if ((vceq_s32(*v17, (int32x2_t)-1).u8[0] & 1) == 0)
      {
LABEL_16:
        if ((vceq_s32(v20, (int32x2_t)-1).i32[1] & 1) != 0)
          goto LABEL_21;
        goto LABEL_12;
      }
LABEL_20:
      v17->i32[0] = 0;
      if ((vceq_s32(v20, (int32x2_t)-1).i32[1] & 1) != 0)
LABEL_21:
        v17->i32[1] = 0;
LABEL_12:
      v17 += 2;
      v18 -= 4;
      if (!v18)
      {
        if (v16 == (v16 & 0x7FFFFFFFFFFFFFFCLL))
          goto LABEL_23;
        goto LABEL_29;
      }
    }
  }
  do
  {
LABEL_29:
    if (*(_DWORD *)v15 == -1)
      *(_DWORD *)v15 = 0;
    v15 += 4;
  }
  while (v15 != v12);
LABEL_23:
  v21 = (void **)__p[1];
  v22 = (void **)v36;
  *((_QWORD *)&v37 + 1) = 0;
  v23 = v36 - (unint64_t)__p[1];
  if ((unint64_t)v36 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v21);
      v22 = (void **)v36;
      v21 = (void **)((char *)__p[1] + 8);
      __p[1] = v21;
      v23 = v36 - (_QWORD)v21;
    }
    while ((_QWORD)v36 - (_QWORD)v21 > 0x10uLL);
  }
  v24 = v23 >> 3;
  if (v24 == 1)
  {
    v25 = 512;
    goto LABEL_32;
  }
  if (v24 == 2)
  {
    v25 = 1024;
LABEL_32:
    *(_QWORD *)&v37 = v25;
  }
  if (v21 != v22)
  {
    do
    {
      v26 = *v21++;
      operator delete(v26);
    }
    while (v21 != v22);
    if ((void *)v36 != __p[1])
      *(_QWORD *)&v36 = v36 + (((unint64_t)__p[1] - v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  v27 = (void **)v38[1];
  v28 = (void **)v39;
  *((_QWORD *)&v40 + 1) = 0;
  v29 = v39 - (unint64_t)v38[1];
  if ((unint64_t)v39 - (unint64_t)v38[1] >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v28 = (void **)v39;
      v27 = (void **)((char *)v38[1] + 8);
      v38[1] = v27;
      v29 = v39 - (_QWORD)v27;
    }
    while ((_QWORD)v39 - (_QWORD)v27 > 0x10uLL);
  }
  v30 = v29 >> 3;
  if (v30 == 1)
  {
    v31 = 512;
    goto LABEL_45;
  }
  if (v30 == 2)
  {
    v31 = 1024;
LABEL_45:
    *(_QWORD *)&v40 = v31;
  }
  if (v27 != v28)
  {
    do
    {
      v32 = *v27++;
      operator delete(v32);
    }
    while (v27 != v28);
    if ((void *)v39 != v38[1])
      *(_QWORD *)&v39 = v39 + (((unint64_t)v38[1] - v39 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v38[0])
    operator delete(v38[0]);
  return 1;
}

void sub_2399B8818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_23953439C((uint64_t)va);
  sub_23953439C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2399B8838(uint64_t *a1, int64x2_t *a2, int a3)
{
  void **v6;
  int64x2_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;

  v6 = (void **)a2->i64[1];
  v7 = vaddq_s64(a2[2], (int64x2_t)xmmword_239EC65F0);
  v8 = (*(_DWORD **)((char *)v6 + (((unint64_t)a2[2].i64[0] >> 7) & 0x1FFFFFFFFFFFFF8)))[a2[2].i64[0] & 0x3FF];
  a2[2] = v7;
  if (v7.i64[0] >= 0x800uLL)
  {
    operator delete(*v6);
    a2->i64[1] += 8;
    a2[2].i64[0] -= 1024;
  }
  v9 = *a1 + 104;
  v29 = v8;
  v10 = *(_DWORD *)sub_23996252C(v9, &v29);
  v28 = v10;
  do
  {
    v28 = *(_DWORD *)(sub_239962518(*a1 + 104, &v28) + 8);
    v11 = *a1;
    v12 = *(unsigned int *)sub_239962518(*a1 + 104, &v28);
    v13 = (uint64_t *)(*(_QWORD *)(v11 + 32) + 16 * *(unsigned int *)(v11 + 180));
    v15 = *v13;
    v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (((*(_QWORD *)(*(_QWORD *)(v15 + 40) + ((v12 >> 3) & 0x1FFFFFF8)) >> v12) & 1) == 0)
    {
      v19 = *a1 + 104;
      v20 = (unsigned int *)sub_239962518(v19, &v28);
      v21 = *(unsigned int *)(sub_239962518(v19, v20) + 16);
      v22 = *(_QWORD *)a1[1];
      if (*(_DWORD *)(v22 + 4 * v21) == -1)
      {
        v23 = a2[1].i64[0];
        v24 = a2->i64[1];
        if (v23 == v24)
          v25 = 0;
        else
          v25 = ((v23 - v24) << 7) - 1;
        v26 = a2[2].i64[1];
        v27 = v26 + a2[2].i64[0];
        if (v25 == v27)
        {
          sub_2394F0374((uint64_t)a2);
          v24 = a2->i64[1];
          v26 = a2[2].i64[1];
          v27 = a2[2].i64[0] + v26;
          v22 = *(_QWORD *)a1[1];
        }
        *(_DWORD *)(*(_QWORD *)(v24 + ((v27 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v27 & 0x3FF)) = v21;
        a2[2].i64[1] = v26 + 1;
        *(_DWORD *)(v22 + 4 * v21) = a3;
      }
    }
  }
  while (v28 != v10);
}

void sub_2399B8A48(uint64_t *a1, void **a2, unsigned int *a3, char a4, BOOL *a5)
{
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  int32x4_t *v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unsigned __int32 v16;
  __int8 *v19;
  __int8 *v20;
  int v21;
  __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  float v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *i;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  int32x4_t v42;
  int32x4_t *v43;
  int32x4_t v44;
  int32x4_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t j;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void **v58;
  BOOL v59;
  unint64_t v60;
  void *__p;
  char *v62;
  uint64_t v63;
  void *v64;
  __int8 *v65;
  __int8 *v66;

  if ((unint64_t)a1[14] >= 2)
  {
    v9 = *(_QWORD *)(a1[5] + 152);
    v8 = *(_QWORD *)(a1[5] + 160);
    v10 = v8 - v9;
    v11 = (v8 - v9) >> 2;
    if ((unint64_t)(v8 - v9) <= 0xF)
    {
      v64 = 0;
      v65 = 0;
      v66 = 0;
      if (v8 == v9)
      {
        v12 = 0;
      }
      else
      {
        v12 = (int32x4_t *)operator new(v8 - v9);
        v64 = v12;
        v66 = &v12->i8[4 * v11];
        bzero(v12, v10);
        v65 = &v12->i8[v10];
        if (v11 <= 1)
          v13 = 1;
        else
          v13 = v11;
        if (v13 >= 0x14 && ((_DWORD)v13 ? (v14 = (v13 - 1) >> 32 == 0) : (v14 = 0), v14))
        {
          v15 = v13 & 0xFFFFFFFFFFFFFFF8;
          v16 = v13 & 0xFFFFFFF8;
          v42 = (int32x4_t)xmmword_239EC6870;
          v43 = v12 + 1;
          v44.i64[0] = 0x400000004;
          v44.i64[1] = 0x400000004;
          v45.i64[0] = 0x800000008;
          v45.i64[1] = 0x800000008;
          v46 = v13 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v43[-1] = v42;
            *v43 = vaddq_s32(v42, v44);
            v42 = vaddq_s32(v42, v45);
            v43 += 2;
            v46 -= 8;
          }
          while (v46);
          if (v13 == v15)
            goto LABEL_36;
        }
        else
        {
          v15 = 0;
          v16 = 0;
        }
        do
        {
          v12->i32[v15] = v16++;
          v15 = v16;
        }
        while (v11 > v16);
      }
LABEL_36:
      __p = (void *)v11;
      sub_2399B7E18(a1, &v64, (unint64_t *)&__p, (uint64_t)a2, a4);
      if (!v12)
        return;
      v34 = v12;
      goto LABEL_82;
    }
    v64 = 0;
    v65 = 0;
    v66 = 0;
    if ((v10 & 0x8000000000000000) != 0)
      sub_2394189F8();
    v64 = operator new(v8 - v9);
    v66 = (char *)v64 + 4 * v11;
    bzero(v64, v10);
    v65 = (char *)v64 + v10;
    sub_2399B9018(a1, (uint64_t *)&v64);
    v19 = (__int8 *)v64;
    v20 = v65;
    if (v64 != v65)
    {
      v21 = *(_DWORD *)v64;
      v22 = (__int8 *)v64;
      do
      {
        if (*(_DWORD *)v22 != v21)
          goto LABEL_23;
        v22 += 4;
      }
      while (v22 != v65);
    }
    sub_239992894(a1[5]);
    sub_239994FBC((uint64_t)a1);
    sub_2399B9018(a1, (uint64_t *)&v64);
    v19 = (__int8 *)v64;
    v20 = v65;
    v21 = *(_DWORD *)v64;
    while (1)
    {
LABEL_23:
      if (v19 == v20)
      {
        v23 = a1[5];
        v25 = *(_QWORD *)(v23 + 152);
        v24 = *(_QWORD *)(v23 + 160);
        v62 = 0;
        v63 = 0;
        __p = 0;
        v26 = v24 - v25;
        if (v24 == v25)
        {
          v30 = 0;
          v31 = -1;
        }
        else
        {
          if ((v26 & 0x8000000000000000) != 0)
            sub_2394189F8();
          v58 = a2;
          v27 = operator new(v24 - v25);
          bzero(v27, v26);
          v28 = 0;
          v29 = 0;
          v30 = 0;
          v31 = -1;
          do
          {
            v32 = v30;
            LODWORD(v60) = v29;
            v33 = sub_239932994(v23, (unsigned int *)&v60);
            *((float *)v27 + v28) = v33;
            if (v29)
            {
              if (v33 <= *((float *)v27 + v30))
              {
                if (v31 == -1 || v33 > *((float *)v27 + v31))
                  v31 = v29;
              }
              else
              {
                v30 = v29;
                v31 = v32;
              }
            }
            v23 = a1[5];
            v28 = ++v29;
          }
          while (v29 < (unint64_t)((uint64_t)(*(_QWORD *)(v23 + 160) - *(_QWORD *)(v23 + 152)) >> 2));
          operator delete(v27);
          v23 = a1[5];
          a2 = v58;
        }
        sub_2399B848C(v23, v30, v31, (uint64_t)&v64);
        __p = (void *)2;
        sub_2399B7E18(a1, &v64, (unint64_t *)&__p, (uint64_t)a2, a4);
        *a5 = 0;
        goto LABEL_80;
      }
      if (*(_DWORD *)v19 != v21)
        break;
      v19 += 4;
    }
    v35 = a1[14];
    v60 = v35;
    if (*(_QWORD *)(a1[5] + 160) - *(_QWORD *)(a1[5] + 152) >= 0x4DuLL)
      sub_2399B9194((uint64_t)a1, &v60, (unsigned int **)&v64, a5);
    __p = 0;
    v62 = 0;
    v63 = 0;
    sub_2399B7E18(a1, &v64, &v60, (uint64_t)&__p, a4);
    v36 = a1[4];
    if (!v36 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 48))(v36) & 1) == 0)
    {
      v59 = 0;
      if (*a3 >= (unint64_t)((v65 - (_BYTE *)v64) >> 2))
      {
        sub_2399B0818(a1, a1 + 39, (uint64_t *)&v64, v35, &v59);
        if (v59)
        {
          v37 = (char *)__p;
          for (i = v62; i != v37; i -= 16)
          {
            v39 = (std::__shared_weak_count *)*((_QWORD *)i - 1);
            if (v39)
            {
              p_shared_owners = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(p_shared_owners);
              while (__stlxr(v41 - 1, p_shared_owners));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
          }
          v62 = v37;
          sub_2399B7E18(a1, &v64, &v60, (uint64_t)&__p, a4);
        }
      }
      v47 = a1[32];
      for (j = a1[33]; j != v47; j -= 16)
      {
        v49 = *(std::__shared_weak_count **)(j - 8);
        if (v49)
        {
          v50 = (unint64_t *)&v49->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      a1[33] = v47;
      *a5 |= v59;
      if (&__p != a2)
        sub_2399BB0FC((uint64_t)a2, __p, v62, (v62 - (_BYTE *)__p) >> 4);
    }
    v52 = (char *)__p;
    if (__p)
    {
      v53 = v62;
      v54 = __p;
      if (v62 != __p)
      {
        do
        {
          v55 = (std::__shared_weak_count *)*((_QWORD *)v53 - 1);
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldaxr(v56);
            while (__stlxr(v57 - 1, v56));
            if (!v57)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v53 -= 16;
        }
        while (v53 != v52);
        v54 = __p;
      }
      v62 = v52;
      operator delete(v54);
    }
LABEL_80:
    v34 = v64;
    if (v64)
    {
      v65 = (__int8 *)v64;
LABEL_82:
      operator delete(v34);
    }
  }
}

void sub_2399B8F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399B9018(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  int *v21;
  int v22;
  unsigned int v23;
  float v24;
  unsigned int v26;
  void *__p;
  int *v28;
  char *v29;

  v4 = (_QWORD *)a1[5];
  v5 = v4[20] - v4[19];
  v7 = v4[13];
  v6 = v4[14];
  v8 = operator new(0xCuLL);
  v28 = v8 + 3;
  v29 = (char *)(v8 + 3);
  *(_QWORD *)v8 = -1;
  v8[2] = -1;
  __p = v8;
  if ((v5 & 0x3FFFFFFFCLL) == 0)
    goto LABEL_18;
  v9 = 0;
  v10 = (unint64_t)(v6 - v7) >> 2;
  v11 = (v5 >> 2);
  do
  {
    v12 = a1[5];
    v26 = v9;
    sub_23996362C(v12, &v26, (uint64_t)&__p);
    v13 = *a2;
    *(_DWORD *)(*a2 + 4 * v9) = -1;
    v14 = a1[14];
    if (v14)
    {
      v15 = (int *)__p;
      v16 = v28;
      if (__p == v28)
      {
        v23 = 1;
        v24 = 3.4028e38;
        do
        {
          if (v24 > 0.0)
          {
            *(_DWORD *)(v13 + 4 * v9) = v23 - 1;
            v24 = 0.0;
          }
        }
        while (v14 > v23++);
      }
      else
      {
        LODWORD(v17) = 0;
        v18 = a1[39];
        v19 = 3.4028e38;
        do
        {
          v20 = 0.0;
          v21 = v15;
          do
          {
            v22 = *v21++;
            v20 = v20 + *(float *)(v18 + 4 * (v22 + v17 * v10));
          }
          while (v21 != v16);
          if (v20 < v19)
          {
            *(_DWORD *)(v13 + 4 * v9) = v17;
            v19 = v20;
          }
          v17 = (v17 + 1);
        }
        while (v14 > v17);
      }
    }
    ++v9;
  }
  while (v9 != v11);
  v8 = __p;
  if (__p)
  {
LABEL_18:
    v28 = v8;
    operator delete(v8);
  }
}

void sub_2399B9178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399B9194(uint64_t a1, unint64_t *a2, unsigned int **a3, BOOL *a4)
{
  unint64_t *v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  _DWORD **v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  _BYTE *v37;
  char **v38;
  _BYTE *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  char *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  _BYTE *v69;
  _DWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unsigned int v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  BOOL v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  unsigned __int8 v100;
  int v101;
  BOOL v102;
  char *v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;
  void *v108;
  char *v109;
  char *v110;
  void *v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  BOOL *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t *v120;
  unsigned int v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  void *__p;
  char *v125;
  __int128 v126;
  void *v127;
  char *v128;
  uint64_t v129[3];
  char v130;
  uint64_t v131;

  v6 = a2;
  v131 = 0;
  memset(v129, 0, sizeof(v129));
  v130 = 0;
  v8 = *a2;
  v120 = v6;
  if (v8)
    sub_23942D080((uint64_t)v129, v8);
  sub_2399B99EC(&v127, *v6);
  v9 = *v6;
  if (*v6)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = operator new(0x28uLL);
      v12[1] = 0;
      v12[2] = 0;
      *v12 = &off_250AF11E8;
      *((_DWORD *)v12 + 6) = 0;
      *((_DWORD *)v12 + 7) = v11;
      v12[4] = -1;
      v13 = (char *)v127 + 16 * v10;
      v14 = (std::__shared_weak_count *)v13[1];
      *v13 = v12 + 3;
      v13[1] = v12;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v9 = *v6;
      v10 = ++v11;
    }
    while (*v6 > v11);
  }
  v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 152);
  v119 = (v17 >> 2);
  v18 = v17 & 0x3FFFFFFFCLL;
  if ((v17 & 0x3FFFFFFFCLL) != 0)
  {
    v19 = *a3;
    v20 = (_DWORD **)v127;
    v21 = v119;
    do
    {
      v22 = *v19++;
      --*v20[2 * v22];
      --v21;
    }
    while (v21);
  }
  if (v9)
  {
    v23 = 0;
    do
    {
      v25 = *((_OWORD *)v127 + v23);
      v126 = v25;
      if (*((_QWORD *)&v25 + 1))
      {
        v26 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      sub_2399B9A84(v129, &v126);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v126 + 1);
      if (*((_QWORD *)&v126 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v126 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      ++v23;
      v24 = *v6;
    }
    while (v23 < *v6);
  }
  else
  {
    v24 = 0;
  }
  v116 = a4;
  v117 = v18;
  sub_2396DF70C(&__p, v24);
  v31 = *v6;
  if (*v6)
  {
    v32 = 0;
    while (1)
    {
      v33 = (char *)__p + 24 * v32;
      v34 = -**((_DWORD **)v127 + 2 * v32);
      v35 = *(_BYTE **)v33;
      if (v34 > (uint64_t)(*((_QWORD *)v33 + 2) - *(_QWORD *)v33) >> 2)
        break;
      v6 = v120;
LABEL_29:
      if (++v32 >= v31)
        goto LABEL_41;
    }
    v36 = (char *)__p + 24 * v32;
    v39 = (_BYTE *)*((_QWORD *)v36 + 1);
    v38 = (char **)(v36 + 8);
    v37 = v39;
    v40 = (char *)operator new(4 * v34);
    v41 = v39 - v35;
    v42 = &v40[(v39 - v35) & 0xFFFFFFFFFFFFFFFCLL];
    v43 = v42;
    if (v39 != v35)
    {
      v44 = v37 - 4 - v35;
      if (v44 < 0x2C)
      {
        v43 = &v40[(v37 - v35) & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
LABEL_38:
          v53 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v43 - 1) = v53;
          v43 -= 4;
        }
        while (v37 != v35);
        goto LABEL_39;
      }
      v43 = &v40[(v37 - v35) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v37[-(v41 & 0xFFFFFFFFFFFFFFFCLL)] - v40) < 0x20)
        goto LABEL_38;
      v45 = v41 >> 2;
      v46 = (v44 >> 2) + 1;
      v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
      v48 = &v37[-v47];
      v43 = &v42[-v47];
      v49 = &v40[4 * v45 - 16];
      v50 = (__int128 *)(v37 - 16);
      v51 = v46 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v52 = *v50;
        *((_OWORD *)v49 - 1) = *(v50 - 1);
        *(_OWORD *)v49 = v52;
        v49 -= 32;
        v50 -= 2;
        v51 -= 8;
      }
      while (v51);
      v37 = v48;
      if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_38;
    }
LABEL_39:
    *(_QWORD *)v33 = v43;
    *v38 = v42;
    *((_QWORD *)v33 + 2) = &v40[4 * v34];
    v6 = v120;
    if (v35)
    {
      operator delete(v35);
      v31 = *v120;
    }
    goto LABEL_29;
  }
LABEL_41:
  if (v117)
  {
    v54 = 0;
    while (1)
    {
      while (1)
      {
        v55 = (char *)__p + 24 * (*a3)[v54];
        v56 = (uint64_t *)(v55 + 8);
        v57 = (char *)*((_QWORD *)v55 + 1);
        v59 = v55 + 16;
        v58 = *((_QWORD *)v55 + 2);
        if ((unint64_t)v57 >= v58)
          break;
        *(_DWORD *)v57 = v54;
        v6 = v120;
        *v56 = (uint64_t)(v57 + 4);
        if (++v54 == v119)
          goto LABEL_65;
      }
      v60 = *(char **)v55;
      v61 = (uint64_t)&v57[-*(_QWORD *)v55];
      v62 = v61 >> 2;
      v63 = (v61 >> 2) + 1;
      if (v63 >> 62)
        sub_2394189F8();
      v64 = v58 - (_QWORD)v60;
      if (v64 >> 1 > v63)
        v63 = v64 >> 1;
      v65 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v63;
      if (v65)
        break;
      v69 = 0;
      v70 = (_DWORD *)(4 * v62);
      *(_DWORD *)(4 * v62) = v54;
      v71 = 4 * v62 + 4;
      if (v57 != v60)
        goto LABEL_56;
LABEL_62:
      *(_QWORD *)v55 = v70;
      *v56 = v71;
      *(_QWORD *)v59 = &v69[4 * v65];
      if (v60)
        operator delete(v60);
      v6 = v120;
      *v56 = v71;
      if (++v54 == v119)
        goto LABEL_65;
    }
    v118 = &v57[-*(_QWORD *)v55];
    if (v65 >> 62)
      sub_239418A80();
    v66 = (char *)__p + 24 * (*a3)[v54];
    v67 = v55 + 16;
    v68 = v65;
    v69 = operator new(4 * v65);
    v59 = v67;
    v65 = v68;
    v55 = v66;
    v61 = (uint64_t)v118;
    v70 = &v69[4 * v62];
    *v70 = v54;
    v71 = (uint64_t)(v70 + 1);
    if (v57 == v60)
      goto LABEL_62;
LABEL_56:
    v72 = v57 - 4 - v60;
    if (v72 < 0x2C)
      goto LABEL_125;
    if ((unint64_t)(v57 - &v69[v61]) < 0x20)
      goto LABEL_125;
    v73 = (v72 >> 2) + 1;
    v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
    v75 = &v57[-v74];
    v70 = (_DWORD *)((char *)v70 - v74);
    v76 = &v69[4 * v62 - 16];
    v77 = v57 - 16;
    v78 = v73 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v79 = *(_OWORD *)v77;
      *(v76 - 1) = *((_OWORD *)v77 - 1);
      *v76 = v79;
      v76 -= 2;
      v77 -= 32;
      v78 -= 8;
    }
    while (v78);
    v57 = v75;
    if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_125:
      do
      {
        v80 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *--v70 = v80;
      }
      while (v57 != v60);
    }
    goto LABEL_62;
  }
LABEL_65:
  while (v131)
  {
    sub_2399BB540(v129, 0, &v122);
    v81 = *((_QWORD *)__p + 3 * *(unsigned int *)(v122 + 4));
    v82 = *((_QWORD *)__p + 3 * *(unsigned int *)(v122 + 4) + 1);
    if ((unint64_t)(v82 - v81) >= 0x14 && v82 != v81)
    {
      v84 = 0;
      v85 = (v82 - v81) >> 2;
      do
      {
        v121 = *(_DWORD *)(v81 + 4 * v84);
        v87 = v121;
        sub_2399B9C28(a1, &v121, a3);
        v88 = *(_DWORD *)(v122 + 4);
        if ((*a3)[v87] != v88 && (unint64_t)--v85 < 5)
          break;
        ++v84;
        v86 = (uint64_t *)((char *)__p + 24 * v88);
        v81 = *v86;
      }
      while (v84 < (v86[1] - *v86) >> 2);
    }
    v89 = v123;
    if (v123)
    {
      v90 = (unint64_t *)&v123->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
  }
  v92 = 0;
  v93 = 0;
  *v116 = 0;
  do
  {
    if (v92)
    {
      v94 = 0;
      *v116 = v92;
LABEL_94:
      if (!v94)
        goto LABEL_101;
    }
    else
    {
      v94 = 0;
      v95 = 0;
      while (1)
      {
        v96 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
        v97 = (v96 >> 2);
        if (!(v96 >> 2))
          break;
        v98 = 0;
        v99 = 0;
        do
        {
          LOBYTE(v121) = 0;
          LODWORD(v122) = v98;
          sub_2399BA4C0(a1, (unsigned int *)&v122, a3, &v121);
          v100 = v121 | v99;
          v99 = v100 != 0;
          ++v98;
        }
        while (v97 != v98);
        v101 = v100;
        ++v95;
        v94 |= v100;
        v92 = v95 <= *v6;
        if (v101)
          v102 = v95 > *v6;
        else
          v102 = 1;
        if (v102)
        {
          *v116 = v92;
          if (!v92)
            goto LABEL_95;
          goto LABEL_94;
        }
      }
      v92 = v95 + 1 <= *v6;
      *v116 = v92;
      if (v92)
        goto LABEL_94;
    }
LABEL_95:
    if (!v94)
      break;
    v93 += 2;
  }
  while (v93 < *v6);
  *v116 = 0;
LABEL_101:
  v103 = (char *)__p;
  if (__p)
  {
    v104 = v125;
    v105 = __p;
    if (v125 != __p)
    {
      v106 = v125;
      do
      {
        v108 = (void *)*((_QWORD *)v106 - 3);
        v106 -= 24;
        v107 = v108;
        if (v108)
        {
          *((_QWORD *)v104 - 2) = v107;
          operator delete(v107);
        }
        v104 = v106;
      }
      while (v106 != v103);
      v105 = __p;
    }
    v125 = v103;
    operator delete(v105);
  }
  v109 = (char *)v127;
  if (v127)
  {
    v110 = v128;
    v111 = v127;
    if (v128 != v127)
    {
      do
      {
        v112 = (std::__shared_weak_count *)*((_QWORD *)v110 - 1);
        if (v112)
        {
          v113 = (unint64_t *)&v112->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v110 -= 16;
      }
      while (v110 != v109);
      v111 = v127;
    }
    v128 = v109;
    operator delete(v111);
  }
  return sub_2399BB440((uint64_t)v129);
}

_QWORD *sub_2399B99EC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      sub_2394189F8();
    v4 = 16 * a2;
    v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    a1[2] = &v5[16 * a2];
    bzero(v5, 16 * a2);
    a1[1] = &v5[v4];
  }
  return a1;
}

void sub_2399B9A64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_239EC3344((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399B9A84(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _DWORD *v23;
  _DWORD **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v5 = (_QWORD *)a1[1];
  v6 = a1[4];
  if (v6 >= ((uint64_t)v5 - *a1) >> 4)
  {
    if ((unint64_t)v5 >= a1[2])
    {
      v17 = sub_23951E0F0((uint64_t)a1, a2);
    }
    else
    {
      v14 = *((_QWORD *)a2 + 1);
      *v5 = v2;
      v5[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = v5 + 2;
    }
    a1[1] = (uint64_t)v17;
  }
  else
  {
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *((_QWORD *)a2 + 1);
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = (std::__shared_weak_count *)v7[1];
    *v7 = v2;
    v7[1] = v8;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v18 = a1[4];
  *(_QWORD *)(*(_QWORD *)a2 + 8) = v18;
  a1[4] = v18 + 1;
  if (v18)
  {
    v19 = *a1;
    do
    {
      v20 = v18 - 1;
      v21 = (v18 - 1) >> 1;
      v22 = (_QWORD *)(v19 + 16 * v18);
      v23 = (_DWORD *)*v22;
      v24 = (_DWORD **)(v19 + 16 * v21);
      if (*(_DWORD *)*v22 <= **v24)
        break;
      if (v18 != v21)
      {
        *v22 = *v24;
        *v24 = v23;
        v25 = v19 + 16 * v18;
        v26 = v19 + 16 * v21;
        v27 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
        *(_QWORD *)(v26 + 8) = v27;
        v19 = *a1;
        *(_QWORD *)(*(_QWORD *)(*a1 + 16 * v18) + 8) = v18;
        *(_QWORD *)(*(_QWORD *)(v19 + 16 * v21) + 8) = v21;
      }
      v18 = (v18 - 1) >> 1;
    }
    while (v20 > 1);
  }
  return 1;
}

void sub_2399B9C28(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  int v6;
  _DWORD *v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  unint64_t v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  float v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  float v47;
  _BOOL4 v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  float v55;
  uint64_t *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  float v69;
  uint64_t *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  float v76;
  uint64_t *v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  void *__p;
  void *v90;
  char *v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(*a3 + 4 * *a2);
  v7 = operator new(0xCuLL);
  v90 = v7 + 3;
  v91 = (char *)(v7 + 3);
  *(_QWORD *)v7 = -1;
  v7[2] = -1;
  __p = v7;
  sub_23996389C(*(_QWORD *)(a1 + 40), a2, (uint64_t)&__p);
  v88 = *(_DWORD *)__p;
  v8 = (unsigned int *)sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v88);
  v9 = *v8;
  v87 = *v8;
  v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (((*(_QWORD *)(*(_QWORD *)(v12 + 40) + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1) != 0)
        goto LABEL_7;
LABEL_9:
      v92 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v87) + 16));
      v16 = v92 != v6;
      goto LABEL_10;
    }
  }
  if (((*(_QWORD *)(*(_QWORD *)(v12 + 40) + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1) == 0)
    goto LABEL_9;
LABEL_7:
  v16 = 0;
  v92 = v6;
LABEL_10:
  v88 = *((_DWORD *)__p + 1);
  v17 = (unsigned int *)sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v88);
  v18 = *v17;
  v87 = *v17;
  v19 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
  v21 = *v19;
  v20 = (std::__shared_weak_count *)v19[1];
  if (!v20)
    goto LABEL_15;
  v22 = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (((*(_QWORD *)(*(_QWORD *)(v21 + 40) + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) != 0)
      goto LABEL_16;
  }
  else
  {
LABEL_15:
    if (((*(_QWORD *)(*(_QWORD *)(v21 + 40) + ((v18 >> 3) & 0x1FFFFFF8)) >> v18) & 1) != 0)
    {
LABEL_16:
      v93 = v6;
      goto LABEL_20;
    }
  }
  v93 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v87) + 16));
  if (v93 != v6)
    ++v16;
LABEL_20:
  v88 = *((_DWORD *)__p + 2);
  v25 = (unsigned int *)sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v88);
  v26 = *v25;
  v87 = *v25;
  v27 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
  v29 = *v27;
  v28 = (std::__shared_weak_count *)v27[1];
  if (!v28)
    goto LABEL_25;
  v30 = (unint64_t *)&v28->__shared_owners_;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  do
    v32 = __ldaxr(v30);
  while (__stlxr(v32 - 1, v30));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (((*(_QWORD *)(*(_QWORD *)(v29 + 40) + ((v26 >> 3) & 0x1FFFFFF8)) >> v26) & 1) != 0)
    {
LABEL_26:
      v94 = v6;
      v33 = v6;
      if (v16 != 2)
      {
LABEL_27:
        if (v16 != 3)
          goto LABEL_93;
        v34 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
        v36 = *v34;
        v35 = (std::__shared_weak_count *)v34[1];
        if (v35)
        {
          v37 = (unint64_t *)&v35->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          do
            v39 = __ldaxr(v37);
          while (__stlxr(v39 - 1, v37));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v40 = *(float *)(*(_QWORD *)(v36 + 40) + 4 * *(unsigned int *)__p);
        v41 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
        v43 = *v41;
        v42 = (std::__shared_weak_count *)v41[1];
        if (v42)
        {
          v44 = (unint64_t *)&v42->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
          do
            v46 = __ldaxr(v44);
          while (__stlxr(v46 - 1, v44));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v47 = *(float *)(*(_QWORD *)(v43 + 40) + 4 * *((unsigned int *)__p + 1));
        v48 = v40 < v47;
        v49 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
        v51 = *v49;
        v50 = (std::__shared_weak_count *)v49[1];
        if (v50)
        {
          v52 = (unint64_t *)&v50->__shared_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
          do
            v54 = __ldaxr(v52);
          while (__stlxr(v54 - 1, v52));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
        v55 = *(float *)(*(_QWORD *)(v51 + 40) + 4 * *((unsigned int *)__p + (v40 < v47)));
        v56 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
        v58 = *v56;
        v57 = (std::__shared_weak_count *)v56[1];
        if (!v57)
          goto LABEL_86;
        v59 = (unint64_t *)&v57->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
        do
          v61 = __ldaxr(v59);
        while (__stlxr(v61 - 1, v59));
        goto LABEL_84;
      }
      goto LABEL_55;
    }
  }
  else
  {
LABEL_25:
    if (((*(_QWORD *)(*(_QWORD *)(v29 + 40) + ((v26 >> 3) & 0x1FFFFFF8)) >> v26) & 1) != 0)
      goto LABEL_26;
  }
  v33 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)(sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v87) + 16));
  v94 = v33;
  if (v33 != v6)
    ++v16;
  if (v16 != 2)
    goto LABEL_27;
LABEL_55:
  v62 = v92;
  if (v92 != v6)
  {
    if (v92 == v93)
      goto LABEL_92;
    if (v92 == v33)
    {
LABEL_91:
      v62 = v33;
      goto LABEL_92;
    }
  }
  if (v93 == v6)
    goto LABEL_59;
  if (v93 == v33)
    goto LABEL_91;
  if (v93 != v92)
  {
LABEL_59:
    if (v33 == v6)
      goto LABEL_62;
    if (v33 == v92)
      goto LABEL_91;
    v62 = v33;
    if (v33 != v93)
    {
LABEL_62:
      v63 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
      v65 = *v63;
      v64 = (std::__shared_weak_count *)v63[1];
      if (v64)
      {
        v66 = (unint64_t *)&v64->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
        do
          v68 = __ldaxr(v66);
        while (__stlxr(v68 - 1, v66));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v69 = *(float *)(*(_QWORD *)(v65 + 40) + 4 * *(unsigned int *)__p);
      v70 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
      v72 = *v70;
      v71 = (std::__shared_weak_count *)v70[1];
      if (v71)
      {
        v73 = (unint64_t *)&v71->__shared_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
        do
          v75 = __ldaxr(v73);
        while (__stlxr(v75 - 1, v73));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v76 = *(float *)(*(_QWORD *)(v72 + 40) + 4 * *((unsigned int *)__p + 1));
      v48 = v69 < v76;
      v77 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
      v79 = *v77;
      v78 = (std::__shared_weak_count *)v77[1];
      if (v78)
      {
        v80 = (unint64_t *)&v78->__shared_owners_;
        do
          v81 = __ldxr(v80);
        while (__stxr(v81 + 1, v80));
        do
          v82 = __ldaxr(v80);
        while (__stlxr(v82 - 1, v80));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v55 = *(float *)(*(_QWORD *)(v79 + 40) + 4 * *((unsigned int *)__p + (v69 < v76)));
      v83 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(a1 + 200));
      v58 = *v83;
      v57 = (std::__shared_weak_count *)v83[1];
      if (!v57)
        goto LABEL_86;
      v84 = (unint64_t *)&v57->__shared_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
      do
        v61 = __ldaxr(v84);
      while (__stlxr(v61 - 1, v84));
LABEL_84:
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
LABEL_86:
      v86 = v48;
      if (v55 < *(float *)(*(_QWORD *)(v58 + 40) + 4 * *((unsigned int *)__p + 2)))
        v86 = 2;
      v62 = *(&v92 + v86);
    }
  }
LABEL_92:
  *(_DWORD *)(*a3 + 4 * *a2) = v62;
LABEL_93:
  if (__p)
  {
    v90 = __p;
    operator delete(__p);
  }
}

void sub_2399BA350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399BA370(uint64_t a1, unint64_t *a2, _QWORD *a3, BOOL *a4)
{
  BOOL v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned __int8 v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  char v20;

  v8 = 0;
  v9 = 0;
  *a4 = 0;
  do
  {
    if (v8)
    {
      v10 = 0;
      *a4 = v8;
LABEL_14:
      if (!v10)
        return;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112) - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
        v13 = (v12 >> 2);
        if (!(v12 >> 2))
          break;
        v14 = 0;
        v15 = 0;
        do
        {
          v20 = 0;
          v19 = v14;
          sub_2399BA4C0(a1, &v19, a3, &v20);
          v16 = v20 | v15;
          v15 = v16 != 0;
          ++v14;
        }
        while (v13 != v14);
        v17 = v16;
        ++v11;
        v10 |= v16;
        v8 = v11 <= *a2;
        if (v17)
          v18 = v11 > *a2;
        else
          v18 = 1;
        if (v18)
        {
          *a4 = v8;
          if (!v8)
            goto LABEL_15;
          goto LABEL_14;
        }
      }
      v8 = v11 + 1 <= *a2;
      *a4 = v8;
      if (v8)
        goto LABEL_14;
    }
LABEL_15:
    if (!v10)
      break;
    v9 += 2;
  }
  while (v9 < *a2);
  *a4 = 0;
}

void sub_2399BA4C0(uint64_t a1, unsigned int *a2, _QWORD *a3, _BYTE *a4)
{
  unsigned int i;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  char *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _DWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  int v64;
  char *v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  _DWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  char *v81;
  unint64_t v82;
  char *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  char *v88;
  uint64_t v89;
  __int128 v90;
  int v91;
  unint64_t v92;
  unsigned int *v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  char *v98;
  unsigned int v99;
  int v100;
  int v101;
  unint64_t v103;
  unint64_t v104;
  void *__p;
  _BYTE *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  void *v112;
  char *v113;
  char *v114;
  unsigned int v115;
  _DWORD v116[4];
  char *v117;
  char *v118;
  char *v119;

  *a4 = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  sub_239962B1C((uint64_t)v116, (_QWORD *)(*(_QWORD *)(a1 + 40) + 104), a2);
  for (i = sub_239962B44(v116); ; i = sub_239962B44(v116))
  {
    v115 = i;
    if (i == -1)
      break;
    v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 16 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 180));
    v8 = *v7;
    v9 = (std::__shared_weak_count *)v7[1];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (((*(_QWORD *)(*(_QWORD *)(v8 + 40) + (((unint64_t)i >> 3) & 0x1FFFFFF8)) >> i) & 1) == 0)
    {
      v13 = sub_239962518(*(_QWORD *)(a1 + 40) + 104, &v115);
      v14 = v13;
      v15 = v118;
      if (v118 >= v119)
      {
        v16 = v117;
        v17 = (v118 - v117) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          sub_2394189F8();
        v19 = v119 - v117;
        if ((v119 - v117) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          if (v20 >> 62)
            sub_239418A80();
          v21 = (char *)operator new(4 * v20);
          v22 = &v21[4 * v17];
          *(_DWORD *)v22 = *(_DWORD *)(v14 + 16);
          v6 = (uint64_t)(v22 + 4);
          if (v15 == v16)
          {
LABEL_23:
            v117 = v22;
            v119 = &v21[4 * v20];
            if (!v15)
              goto LABEL_3;
LABEL_33:
            operator delete(v15);
LABEL_3:
            v118 = (char *)v6;
            continue;
          }
        }
        else
        {
          v21 = 0;
          v22 = (char *)(4 * v17);
          *(_DWORD *)(4 * v17) = *(_DWORD *)(v14 + 16);
          v6 = 4 * v17 + 4;
          if (v15 == v16)
            goto LABEL_23;
        }
        v23 = v15 - 4 - v16;
        if (v23 < 0x2C)
          goto LABEL_151;
        if ((unint64_t)(v16 - v21) < 0x20)
          goto LABEL_151;
        v24 = (v23 >> 2) + 1;
        v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
        v26 = &v15[-v25];
        v22 -= v25;
        v27 = &v21[4 * v17 - 16];
        v28 = v15 - 16;
        v29 = v24 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v30 = *(_OWORD *)v28;
          *((_OWORD *)v27 - 1) = *((_OWORD *)v28 - 1);
          *(_OWORD *)v27 = v30;
          v27 -= 32;
          v28 -= 32;
          v29 -= 8;
        }
        while (v29);
        v15 = v26;
        if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_151:
          do
          {
            v31 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v22 - 1) = v31;
            v22 -= 4;
          }
          while (v15 != v16);
        }
        v15 = v117;
        v117 = v22;
        v119 = &v21[4 * v20];
        if (!v15)
          goto LABEL_3;
        goto LABEL_33;
      }
      *(_DWORD *)v118 = *(_DWORD *)(v13 + 16);
      v6 = (uint64_t)(v15 + 4);
      goto LABEL_3;
    }
  }
  v32 = v117;
  v33 = v118;
  v34 = v118 - v117;
  if (v118 == v117)
    goto LABEL_140;
  if ((unint64_t)v34 <= 7)
    goto LABEL_141;
  v35 = *a3;
  v36 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)v117);
  v37 = v34 >> 2;
  v38 = 2;
  if (v37 > 2)
    v38 = v37;
  v39 = *(_DWORD *)(v35 + 4 * *((unsigned int *)v117 + 1));
  if (v36 != v39)
    goto LABEL_43;
  v40 = 2;
  do
  {
    v41 = v40;
    if (v38 == v40)
    {
      v39 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)v117);
      if (v40 >= v37)
        goto LABEL_119;
LABEL_43:
      v100 = v39;
      v101 = *(_DWORD *)(*a3 + 4 * *(unsigned int *)v117);
      v42 = 0;
      v43 = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v109 = 0;
      v110 = 0;
      v111 = 0;
      __p = 0;
      v107 = 0;
      v108 = 0;
      while (1)
      {
        v103 = v43;
        v44 = *(unsigned int *)&v32[4 * v43];
        v45 = *(_DWORD *)(*a3 + 4 * v44);
        v46 = (char *)v112;
        v47 = v113;
        v48 = v112;
        if (v112 != v113)
        {
          while (*v48 != v45)
          {
            if (++v48 == (_DWORD *)v113)
              goto LABEL_49;
          }
          ++v43;
          goto LABEL_45;
        }
LABEL_49:
        if (v113 < v114)
        {
          *(_DWORD *)v113 = v45;
          v49 = (uint64_t)(v47 + 4);
          goto LABEL_70;
        }
        v50 = (v113 - (_BYTE *)v112) >> 2;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 62)
          sub_2394189F8();
        v52 = v114 - (_BYTE *)v112;
        if ((v114 - (_BYTE *)v112) >> 1 > v51)
          v51 = v52 >> 1;
        v53 = (unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v51;
        if (v53)
          break;
        v54 = 0;
        v55 = (_DWORD *)(4 * v50);
        *(_DWORD *)(4 * v50) = v45;
        v49 = 4 * v50 + 4;
        if (v46 != v47)
          goto LABEL_62;
LABEL_68:
        v112 = v55;
        v114 = &v54[4 * v53];
        if (v46)
          operator delete(v46);
LABEL_70:
        v113 = (char *)v49;
        v65 = (char *)__p;
        v107 = __p;
        if ((unint64_t)__p >= v108)
        {
          v67 = (uint64_t)(v108 - (_QWORD)__p) >> 1;
          if (v67 <= 1)
            v67 = 1;
          if (v108 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL)
            v68 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v68 = v67;
          if (v68 >> 62)
LABEL_147:
            sub_239418A80();
          v69 = operator new(4 * v68);
          *v69 = v44;
          v66 = v69 + 1;
          __p = v69;
          v107 = v69 + 1;
          v108 = (unint64_t)&v69[v68];
          if (v65)
            operator delete(v65);
        }
        else
        {
          *(_DWORD *)__p = v44;
          v66 = v65 + 4;
        }
        v70 = a3;
        v107 = v66;
        v110 = v42;
        v71 = v103 + 1;
        v32 = v117;
        v33 = v118;
        v104 = v103 + 1;
        if (v104 < (v118 - v117) >> 2)
        {
          while (1)
          {
            v73 = *(unsigned int *)&v32[4 * v71];
            if (*(_DWORD *)(*v70 + 4 * v73) != v45)
              goto LABEL_87;
            if (v42 >= v111)
              break;
            *(_DWORD *)v42 = v73;
            v72 = (uint64_t)(v42 + 4);
LABEL_86:
            v110 = (char *)v72;
            v42 = (char *)v72;
            v32 = v117;
            v33 = v118;
LABEL_87:
            if (++v71 >= (v33 - v32) >> 2)
              goto LABEL_81;
          }
          v74 = v109;
          v75 = (char *)(v42 - v109);
          v76 = (v42 - v109) >> 2;
          v77 = v76 + 1;
          if ((unint64_t)(v76 + 1) >> 62)
            sub_2394189F8();
          v78 = v111 - v109;
          if ((v111 - v109) >> 1 > v77)
            v77 = v78 >> 1;
          if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
            v79 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v79 = v77;
          if (v79)
          {
            if (v79 >> 62)
              sub_239418A80();
            v80 = operator new(4 * v79);
            v81 = (char *)v80 + 4 * v76;
            *(_DWORD *)v81 = v73;
            v72 = (uint64_t)(v81 + 4);
            if (v42 == v74)
            {
LABEL_99:
              v109 = v81;
              v110 = (char *)v72;
              v111 = (char *)v80 + 4 * v79;
              if (v42)
                goto LABEL_100;
              goto LABEL_101;
            }
          }
          else
          {
            v80 = 0;
            v81 = (char *)(4 * v76);
            *(_DWORD *)(4 * v76) = v73;
            v72 = 4 * v76 + 4;
            if (v42 == v74)
              goto LABEL_99;
          }
          v82 = v42 - 4 - v74;
          if (v82 < 0xBC)
          {
            v83 = v42;
            goto LABEL_105;
          }
          if (&v75[(_QWORD)v80 - 4 - (v82 & 0xFFFFFFFFFFFFFFFCLL)] > &v75[(_QWORD)v80 - 4])
          {
            v83 = v42;
            goto LABEL_105;
          }
          if (&v42[-(v82 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v42 - 4)
          {
            v83 = v42;
            goto LABEL_105;
          }
          if ((unint64_t)(v42 - &v75[(_QWORD)v80]) < 0x20)
          {
            v83 = v42;
            goto LABEL_105;
          }
          v85 = (v82 >> 2) + 1;
          v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
          v83 = &v42[-v86];
          v81 -= v86;
          v87 = (char *)v80 + 4 * v76 - 16;
          v88 = v42 - 16;
          v89 = v85 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v90 = *(_OWORD *)v88;
            *(v87 - 1) = *((_OWORD *)v88 - 1);
            *v87 = v90;
            v87 -= 2;
            v88 -= 32;
            v89 -= 8;
          }
          while (v89);
          if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_105:
              v84 = *((_DWORD *)v83 - 1);
              v83 -= 4;
              *((_DWORD *)v81 - 1) = v84;
              v81 -= 4;
            }
            while (v83 != v74);
          }
          v42 = v109;
          v109 = v81;
          v110 = (char *)v72;
          v111 = (char *)v80 + 4 * v79;
          if (v42)
LABEL_100:
            operator delete(v42);
LABEL_101:
          v70 = a3;
          goto LABEL_86;
        }
LABEL_81:
        if (v109 != v42)
        {
          sub_2399BAD64(a1, &v109, (char **)&__p);
          v42 = v109;
          if (v109 != v110)
          {
            v91 = v101;
            if (v101 == v45)
              v91 = v100;
            v92 = (v110 - v109) >> 2;
            v93 = (unsigned int *)__p;
            v94 = (v107 - (_BYTE *)__p) >> 2;
            if (v92 <= v94)
            {
              v97 = *a3;
              if (v92 <= 1)
                v92 = 1;
              v98 = v109;
              do
              {
                v99 = *(_DWORD *)v98;
                v98 += 4;
                *(_DWORD *)(v97 + 4 * v99) = v91;
                --v92;
              }
              while (v92);
            }
            else if (v107 != __p)
            {
              v95 = *a3;
              if (v94 <= 1)
                v94 = 1;
              do
              {
                v96 = *v93++;
                *(_DWORD *)(v95 + 4 * v96) = v91;
                --v94;
              }
              while (v94);
            }
            *a4 = 1;
LABEL_133:
            if (__p)
            {
              v107 = __p;
              operator delete(__p);
            }
            if (v42)
            {
              v110 = v42;
              operator delete(v42);
            }
            if (v112)
              operator delete(v112);
            v33 = v117;
            goto LABEL_140;
          }
        }
        v43 = v104;
        if (*a4)
          goto LABEL_133;
LABEL_45:
        if (v43 >= (v33 - v32) >> 2)
          goto LABEL_133;
      }
      if (v53 >> 62)
        goto LABEL_147;
      v54 = operator new(4 * v53);
      v55 = &v54[4 * v50];
      *v55 = v45;
      v49 = (uint64_t)(v55 + 1);
      if (v46 == v47)
        goto LABEL_68;
LABEL_62:
      v56 = v47 - 4 - v46;
      if (v56 < 0x2C)
        goto LABEL_152;
      if ((unint64_t)(v46 - v54) < 0x20)
        goto LABEL_152;
      v57 = (v56 >> 2) + 1;
      v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
      v59 = &v47[-v58];
      v55 = (_DWORD *)((char *)v55 - v58);
      v60 = &v54[4 * v50 - 16];
      v61 = v47 - 16;
      v62 = v57 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v63 = *(_OWORD *)v61;
        *(v60 - 1) = *((_OWORD *)v61 - 1);
        *v60 = v63;
        v60 -= 2;
        v61 -= 32;
        v62 -= 8;
      }
      while (v62);
      v47 = v59;
      if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_152:
        do
        {
          v64 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *--v55 = v64;
        }
        while (v47 != v46);
      }
      goto LABEL_68;
    }
    v39 = *(_DWORD *)(v35 + 4 * *(unsigned int *)&v117[4 * v40++]);
  }
  while (v36 == v39);
  if (v41 < v37)
    goto LABEL_43;
LABEL_119:
  v33 = v117;
LABEL_140:
  v32 = v33;
  if (v33)
  {
LABEL_141:
    v118 = v32;
    operator delete(v32);
  }
}

void sub_2399BACD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;
  void *v23;
  void *v24;

  if (__p)
  {
    operator delete(__p);
    v22 = a16;
    if (!a16)
    {
LABEL_3:
      v23 = a19;
      if (!a19)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v22 = a16;
    if (!a16)
      goto LABEL_3;
  }
  operator delete(v22);
  v23 = a19;
  if (!a19)
  {
LABEL_4:
    v24 = *(void **)(v20 - 112);
    if (!v24)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v23);
  v24 = *(void **)(v20 - 112);
  if (!v24)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  *(_QWORD *)(v20 - 104) = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void sub_2399BAD64(uint64_t a1, _QWORD *a2, char **a3)
{
  char *v3;
  char **v4;
  _QWORD *v5;
  uint64_t v7;
  _DWORD *v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  int v20;
  _DWORD *v21;
  _DWORD *v22;
  unint64_t v23;
  char *v24;
  const void *v25;
  char *v26;
  size_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  uint64_t v46;
  void *__p;
  void *v50;
  char *v51;
  unsigned int v52;

  v3 = *a3;
  if (a3[1] != *a3)
  {
    v4 = a3;
    v5 = a2;
    v7 = 0;
    do
    {
      if (*v5 == v5[1])
        return;
      v46 = v7;
      v52 = *(_DWORD *)&v3[4 * v7];
      v8 = operator new(0xCuLL);
      v50 = v8 + 3;
      v51 = (char *)(v8 + 3);
      *(_QWORD *)v8 = -1;
      v8[2] = -1;
      __p = v8;
      sub_23996389C(*(_QWORD *)(a1 + 40), &v52, (uint64_t)&__p);
      for (i = 0; i != 3; ++i)
      {
        v10 = *(_QWORD *)(a1 + 40);
        v11 = *(unsigned int *)sub_239962518(v10 + 104, (unsigned int *)__p + i);
        v12 = (uint64_t *)(*(_QWORD *)(v10 + 32) + 16 * *(unsigned int *)(v10 + 180));
        v13 = *v12;
        v14 = (std::__shared_weak_count *)v12[1];
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        if (((*(_QWORD *)(*(_QWORD *)(v13 + 40) + ((v11 >> 3) & 0x1FFFFFF8)) >> v11) & 1) == 0)
        {
          v18 = *(_QWORD *)(a1 + 40) + 104;
          v19 = (unsigned int *)sub_239962518(v18, (unsigned int *)__p + i);
          v20 = *(_DWORD *)(sub_239962518(v18, v19) + 16);
          v22 = (_DWORD *)*v5;
          v21 = (_DWORD *)v5[1];
          if ((_DWORD *)*v5 != v21)
          {
            while (*v22 != v20)
            {
              if (++v22 == v21)
              {
                v22 = (_DWORD *)v5[1];
                break;
              }
            }
          }
          if (v22 != v21)
          {
            v24 = v4[1];
            v23 = (unint64_t)v4[2];
            if ((unint64_t)v24 < v23)
            {
              *(_DWORD *)v24 = v20;
              v4[1] = v24 + 4;
              v25 = v22 + 1;
              v26 = (char *)v5[1];
              v27 = v26 - (char *)(v22 + 1);
              if (v26 != (char *)(v22 + 1))
                goto LABEL_21;
              goto LABEL_22;
            }
            v28 = *v4;
            v29 = (v24 - v28) >> 2;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 62)
              sub_2394189F8();
            v31 = v23 - (_QWORD)v28;
            if (v31 >> 1 > v30)
              v30 = v31 >> 1;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
              v32 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              if (v32 >> 62)
                sub_239418A80();
              v33 = (char *)operator new(4 * v32);
              v34 = &v33[4 * v29];
              *(_DWORD *)v34 = v20;
              v35 = (uint64_t)(v34 + 4);
              if (v24 != v28)
              {
LABEL_32:
                v36 = v24 - 4 - v28;
                if (v36 < 0x2C)
                  goto LABEL_52;
                if ((unint64_t)(v28 - v33) < 0x20)
                  goto LABEL_52;
                v37 = (v36 >> 2) + 1;
                v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
                v39 = &v24[-v38];
                v34 -= v38;
                v40 = &v33[4 * v29 - 16];
                v41 = (__int128 *)(v24 - 16);
                v42 = v37 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v43 = *v41;
                  *((_OWORD *)v40 - 1) = *(v41 - 1);
                  *(_OWORD *)v40 = v43;
                  v40 -= 32;
                  v41 -= 2;
                  v42 -= 8;
                }
                while (v42);
                v24 = v39;
                if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_52:
                  do
                  {
                    v44 = *((_DWORD *)v24 - 1);
                    v24 -= 4;
                    *((_DWORD *)v34 - 1) = v44;
                    v34 -= 4;
                  }
                  while (v24 != v28);
                }
                v4 = a3;
                v24 = *a3;
                *a3 = v34;
                a3[1] = (char *)v35;
                a3[2] = &v33[4 * v32];
                if (v24)
LABEL_39:
                  operator delete(v24);
LABEL_40:
                v5 = a2;
                v4[1] = (char *)v35;
                v25 = v22 + 1;
                v45 = (char *)a2[1];
                v27 = v45 - (char *)(v22 + 1);
                if (v45 != (char *)(v22 + 1))
LABEL_21:
                  memmove(v22, v25, v27);
LABEL_22:
                v5[1] = (char *)v22 + v27;
                continue;
              }
            }
            else
            {
              v33 = 0;
              v34 = (char *)(4 * v29);
              *(_DWORD *)(4 * v29) = v20;
              v35 = 4 * v29 + 4;
              if (v24 != v28)
                goto LABEL_32;
            }
            v4 = a3;
            *a3 = v34;
            a3[1] = (char *)v35;
            a3[2] = &v33[4 * v32];
            if (v24)
              goto LABEL_39;
            goto LABEL_40;
          }
        }
      }
      if (__p)
      {
        v50 = __p;
        operator delete(__p);
      }
      v7 = v46 + 1;
      v3 = *v4;
    }
    while (v46 + 1 < (unint64_t)((v4[1] - *v4) >> 2));
  }
}

void sub_2399BB0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2399BB0FC(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_68;
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
LABEL_68:
      sub_2394189F8();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_58:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_58;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_58;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

uint64_t sub_2399BB440(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (*(_BYTE *)(a1 + 24))
  {
    while (*(_QWORD *)(a1 + 32))
    {
      sub_2399BB540((uint64_t *)a1, 0, &v12);
      v2 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
    }
  }
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(void **)a1;
    if (v6 != v5)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v6 - 8);
        if (v8)
        {
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *(void **)a1;
    }
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v7);
  }
  return a1;
}

uint64_t *sub_2399BB540@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _DWORD *v23;
  _DWORD **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = result[4];
  if (v3 <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v4 = v3 - 1;
    v5 = *result;
    if (v4 == a2)
    {
      v6 = *(int **)(v5 + 16 * a2);
      v7 = v6;
    }
    else
    {
      v8 = *(_OWORD *)(v5 + 16 * a2);
      *(_OWORD *)(v5 + 16 * a2) = *(_OWORD *)(v5 + 16 * v4);
      *(_OWORD *)(v5 + 16 * v4) = v8;
      v5 = *result;
      v6 = *(int **)(*result + 16 * a2);
      *((_QWORD *)v6 + 1) = a2;
      v7 = *(int **)(v5 + 16 * v4);
      *((_QWORD *)v7 + 1) = v4;
    }
    result[4] = v4;
    *((_QWORD *)v7 + 1) = -1;
    if (*v6 >= *v7)
    {
      if (a2)
      {
        do
        {
          v20 = a2 - 1;
          v21 = (a2 - 1) >> 1;
          v22 = (_QWORD *)(v5 + 16 * a2);
          v23 = (_DWORD *)*v22;
          v24 = (_DWORD **)(v5 + 16 * v21);
          if (*(_DWORD *)*v22 <= **v24)
            break;
          if (a2 != v21)
          {
            *v22 = *v24;
            *v24 = v23;
            v25 = v5 + 16 * a2;
            v26 = v5 + 16 * v21;
            v27 = *(_QWORD *)(v25 + 8);
            *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
            *(_QWORD *)(v26 + 8) = v27;
            v5 = *result;
            *(_QWORD *)(*(_QWORD *)(*result + 16 * a2) + 8) = a2;
            *(_QWORD *)(*(_QWORD *)(v5 + 16 * v21) + 8) = v21;
          }
          a2 = (a2 - 1) >> 1;
        }
        while (v20 > 1);
      }
    }
    else if (v4 > a2)
    {
      v9 = a2;
      do
      {
        v10 = (2 * a2) | 1;
        v11 = *v6;
        if (v10 < v4)
        {
          v13 = **(_DWORD **)(v5 + 16 * v10);
          if (v13 <= v11)
            v9 = a2;
          else
            v9 = (2 * a2) | 1;
          if (v13 > v11)
            v11 = **(_DWORD **)(v5 + 16 * v10);
          v12 = 2 * a2 + 2;
          if (v12 >= v4)
          {
LABEL_11:
            if (v9 == a2)
              break;
            goto LABEL_22;
          }
        }
        else
        {
          v12 = 2 * a2 + 2;
          if (v12 >= v4)
            goto LABEL_11;
        }
        if (**(_DWORD **)(v5 + 16 * v12) > v11)
          v9 = v12;
        if (v9 == a2)
          break;
LABEL_22:
        v14 = v5 + 16 * v9;
        v15 = v5 + 16 * a2;
        v16 = *(_QWORD *)(v15 + 8);
        *(_OWORD *)v15 = *(_OWORD *)v14;
        *(_QWORD *)v14 = v6;
        *(_QWORD *)(v14 + 8) = v16;
        v5 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 16 * a2) + 8) = a2;
        v6 = *(int **)(v5 + 16 * v9);
        *((_QWORD *)v6 + 1) = v9;
        a2 = v9;
      }
      while (v9 < v4);
    }
    v17 = *(_OWORD *)(v5 + 16 * v4);
    *(_OWORD *)a3 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  return result;
}

void sub_2399BB728(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF11E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399BB738(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF11E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399BB770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, char a7, int a8)
{
  int v10;
  _DWORD *v11;
  char *v12;
  size_t v13;
  size_t v14;
  void **p_dst;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  size_t v21;
  void *p_p;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  size_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  _DWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _OWORD *v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  int v93;
  unsigned int v94;
  float v95;
  unsigned int v97;
  void **v98;
  void *__p;
  size_t v100;
  unint64_t v101;
  void **__dst;
  size_t v103;
  unint64_t v104;

  v10 = *a6;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a4;
  *(_QWORD *)(a1 + 64) = a5;
  *(_DWORD *)(a1 + 76) = v10;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = -1;
  v11 = (_DWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 112) = -1;
  *(_DWORD *)(a1 + 120) = 1058642330;
  *(_WORD *)(a1 + 124) = 1;
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_BYTE *)(a1 + 752) = a7;
  v98 = (void **)(a1 + 80);
  *(_DWORD *)(a1 + 756) = a8;
  v12 = off_256934438[0];
  v13 = strlen(off_256934438[0]);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dst = (void **)operator new(v16 + 1);
    v103 = v14;
    v104 = v17 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v104) = v13;
  p_dst = (void **)&__dst;
  if (v13)
LABEL_8:
    memmove(p_dst, v12, v14);
  *((_BYTE *)p_dst + v14) = 0;
  __p = 0;
  *v11 = sub_2394E5C88((uint64_t **)(a2 + 80), (uint64_t)&__p, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v104) < 0)
    operator delete(__dst);
  v18 = *(_QWORD *)(a1 + 32);
  v19 = off_256934448[0];
  v20 = strlen(off_256934448[0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    p_p = operator new(v23 + 1);
    v100 = v21;
    v101 = v24 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_18;
  }
  HIBYTE(v101) = v20;
  p_p = &__p;
  if (v20)
LABEL_18:
    memmove(p_p, v19, v21);
  *((_BYTE *)p_p + v21) = 0;
  __dst = 0;
  v103 = 0;
  v104 = 0;
  *(_DWORD *)(a1 + 108) = sub_23958C0D8((uint64_t **)(v18 + 80), (uint64_t)&__dst, (unsigned __int8 *)&__p);
  if (SHIBYTE(v104) < 0)
  {
    operator delete(__dst);
    if ((SHIBYTE(v101) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((SHIBYTE(v101) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(__p);
LABEL_21:
  v25 = *(_QWORD *)(a1 + 32);
  v26 = off_256934428[0];
  v27 = strlen(off_256934428[0]);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = (void **)operator new(v30 + 1);
    v103 = v28;
    v104 = v31 | 0x8000000000000000;
    __dst = v29;
    goto LABEL_28;
  }
  HIBYTE(v104) = v27;
  v29 = (void **)&__dst;
  if (v27)
LABEL_28:
    memmove(v29, v26, v28);
  *((_BYTE *)v29 + v28) = 0;
  LODWORD(__p) = 0;
  *(_DWORD *)(a1 + 112) = sub_2399346C0((uint64_t **)(v25 + 56), (uint64_t)&__p, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v104) < 0)
    operator delete(__dst);
  v32 = *(_QWORD *)(a1 + 32);
  v33 = off_256934418[0];
  v34 = strlen(off_256934418[0]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v35 = v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = (void **)operator new(v37 + 1);
    v103 = v35;
    v104 = v38 | 0x8000000000000000;
    __dst = v36;
    goto LABEL_38;
  }
  HIBYTE(v104) = v34;
  v36 = (void **)&__dst;
  if (v34)
LABEL_38:
    memmove(v36, v33, v35);
  *((_BYTE *)v36 + v35) = 0;
  LODWORD(v100) = 0;
  __p = 0;
  *(_DWORD *)(a1 + 116) = sub_2394E5DE4((uint64_t **)(v32 + 56), (uint64_t)&__p, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v104) < 0)
    operator delete(__dst);
  v39 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 108));
  v40 = *v39;
  v41 = (std::__shared_weak_count *)v39[1];
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(p_shared_owners);
    while (__stxr(v43 + 1, p_shared_owners));
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 16))(v40);
  v46 = *(_QWORD *)(a1 + 32);
  v48 = *(_QWORD *)(v46 + 152);
  v47 = *(_QWORD *)(v46 + 160);
  v49 = *(_BYTE **)(a1 + 80);
  if (v45 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 96) - (_QWORD)v49) >> 2))
  {
    v50 = *(_BYTE **)(a1 + 88);
    v51 = (char *)operator new(4 * v45);
    v52 = v50 - v49;
    v53 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
    v54 = v53;
    if (v50 == v49)
      goto LABEL_58;
    if ((unint64_t)(v52 - 4) >= 0x2C)
    {
      v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
      if ((unint64_t)(&v50[-(v52 & 0xFFFFFFFFFFFFFFFCLL)] - v51) >= 0x20)
      {
        v55 = v52 >> 2;
        v56 = ((unint64_t)(v52 - 4) >> 2) + 1;
        v57 = 4 * (v56 & 0x7FFFFFFFFFFFFFF8);
        v58 = &v50[-v57];
        v54 = &v53[-v57];
        v59 = &v51[4 * v55 - 16];
        v60 = (__int128 *)(v50 - 16);
        v61 = v56 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v62 = *v60;
          *((_OWORD *)v59 - 1) = *(v60 - 1);
          *(_OWORD *)v59 = v62;
          v59 -= 32;
          v60 -= 2;
          v61 -= 8;
        }
        while (v61);
        v50 = v58;
        if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_58:
          *(_QWORD *)(a1 + 80) = v54;
          *(_QWORD *)(a1 + 88) = v53;
          *(_QWORD *)(a1 + 96) = &v51[4 * v45];
          if (v49)
            operator delete(v49);
          goto LABEL_60;
        }
      }
    }
    else
    {
      v54 = &v51[(v50 - v49) & 0xFFFFFFFFFFFFFFFCLL];
    }
    do
    {
      v63 = *((_DWORD *)v50 - 1);
      v50 -= 4;
      *((_DWORD *)v54 - 1) = v63;
      v54 -= 4;
    }
    while (v50 != v49);
    goto LABEL_58;
  }
LABEL_60:
  v97 = v45;
  v64 = v47 - v48;
  if (((v47 - v48) & 0x3FFFFFFFCLL) != 0)
  {
    v65 = 0;
    v66 = 0;
    v67 = (v64 >> 2);
    while (1)
    {
      v69 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 16 * *(unsigned int *)(a1 + 112));
      v70 = *v69;
      v71 = (std::__shared_weak_count *)v69[1];
      if (!v71)
        goto LABEL_106;
      v72 = (unint64_t *)&v71->__shared_owners_;
      do
        v73 = __ldxr(v72);
      while (__stxr(v73 + 1, v72));
      do
        v74 = __ldaxr(v72);
      while (__stlxr(v74 - 1, v72));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
        if (v66 != *(_DWORD *)(*(_QWORD *)(v70 + 40) + 4 * v65))
          goto LABEL_64;
      }
      else
      {
LABEL_106:
        if (v66 != *(_DWORD *)(*(_QWORD *)(v70 + 40) + 4 * v65))
          goto LABEL_64;
      }
      v76 = *(char **)(a1 + 88);
      v75 = *(_QWORD *)(a1 + 96);
      if ((unint64_t)v76 >= v75)
        break;
      *(_DWORD *)v76 = v65;
      v68 = (uint64_t)(v76 + 4);
LABEL_63:
      *(_QWORD *)(a1 + 88) = v68;
      ++v66;
LABEL_64:
      if (++v65 == v67)
        goto LABEL_93;
    }
    v77 = (char *)*v98;
    v78 = v76 - (_BYTE *)*v98;
    v79 = v78 >> 2;
    v80 = (v78 >> 2) + 1;
    if (v80 >> 62)
      sub_2394189F8();
    v81 = v75 - (_QWORD)v77;
    if (v81 >> 1 > v80)
      v80 = v81 >> 1;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
      v82 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    if (v82)
    {
      if (v82 >> 62)
        sub_239418A80();
      v83 = operator new(4 * v82);
      v84 = &v83[4 * v79];
      *v84 = v65;
      v68 = (uint64_t)(v84 + 1);
      if (v76 == v77)
        goto LABEL_91;
    }
    else
    {
      v83 = 0;
      v84 = (_DWORD *)(4 * v79);
      *(_DWORD *)(4 * v79) = v65;
      v68 = 4 * v79 + 4;
      if (v76 == v77)
      {
LABEL_91:
        *(_QWORD *)(a1 + 80) = v84;
        *(_QWORD *)(a1 + 88) = v68;
        *(_QWORD *)(a1 + 96) = &v83[4 * v82];
        if (v77)
          operator delete(v77);
        goto LABEL_63;
      }
    }
    v85 = v76 - 4 - v77;
    if (v85 < 0x2C)
      goto LABEL_107;
    if ((unint64_t)(v76 - &v83[v78]) < 0x20)
      goto LABEL_107;
    v86 = (v85 >> 2) + 1;
    v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
    v88 = &v76[-v87];
    v84 = (_DWORD *)((char *)v84 - v87);
    v89 = &v83[4 * v79 - 16];
    v90 = v76 - 16;
    v91 = v86 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v92 = *(_OWORD *)v90;
      *(v89 - 1) = *((_OWORD *)v90 - 1);
      *v89 = v92;
      v89 -= 2;
      v90 -= 32;
      v91 -= 8;
    }
    while (v91);
    v76 = v88;
    if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_107:
      do
      {
        v93 = *((_DWORD *)v76 - 1);
        v76 -= 4;
        *--v84 = v93;
      }
      while (v76 != v77);
    }
    goto LABEL_91;
  }
LABEL_93:
  *(_DWORD *)(a1 + 72) = v97;
  v94 = **(_DWORD **)(a1 + 48);
  if (**(_DWORD **)(a1 + 56) < v94)
    v94 = **(_DWORD **)(a1 + 56);
  v95 = (float)v94 * 0.0078125;
  if (v95 >= *(float *)(a1 + 76))
    v95 = *(float *)(a1 + 76);
  *(float *)(a1 + 76) = v95;
  return a1;
}

void sub_2399BBEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, void **a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  void *v28;
  void **v29;
  void **v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;

  v28 = (void *)v26[91];
  if (v28)
  {
    v26[92] = v28;
    operator delete(v28);
    v29 = a14 + 63;
    v30 = a14 + 66;
    v31 = (void *)v26[88];
    if (!v31)
    {
LABEL_3:
      sub_2399BC180(a10);
      v32 = (void *)v26[79];
      if (!v32)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else
  {
    v29 = a14 + 63;
    v30 = a14 + 66;
    v31 = (void *)v26[88];
    if (!v31)
      goto LABEL_3;
  }
  v26[89] = v31;
  operator delete(v31);
  sub_2399BC180(a10);
  v32 = (void *)v26[79];
  if (!v32)
  {
LABEL_4:
    sub_23942A16C(v30);
    sub_23942A16C(v29);
    v33 = (void *)v26[70];
    if (!v33)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  v26[80] = v32;
  operator delete(v32);
  sub_23942A16C(v30);
  sub_23942A16C(v29);
  v33 = (void *)v26[70];
  if (!v33)
  {
LABEL_5:
    v34 = (void *)v26[67];
    if (!v34)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  v26[71] = v33;
  operator delete(v33);
  v34 = (void *)v26[67];
  if (!v34)
  {
LABEL_6:
    v35 = (void *)v26[64];
    if (!v35)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  v26[68] = v34;
  operator delete(v34);
  v35 = (void *)v26[64];
  if (!v35)
  {
LABEL_7:
    v36 = (void *)v26[61];
    if (!v36)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  v26[65] = v35;
  operator delete(v35);
  v36 = (void *)v26[61];
  if (!v36)
  {
LABEL_8:
    v37 = (void *)v26[58];
    if (!v37)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  v26[62] = v36;
  operator delete(v36);
  v37 = (void *)v26[58];
  if (!v37)
  {
LABEL_9:
    v38 = (void *)v26[55];
    if (!v38)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  v26[59] = v37;
  operator delete(v37);
  v38 = (void *)v26[55];
  if (!v38)
  {
LABEL_10:
    v39 = (void *)v26[52];
    if (!v39)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  v26[56] = v38;
  operator delete(v38);
  v39 = (void *)v26[52];
  if (!v39)
  {
LABEL_11:
    v40 = (void *)v26[49];
    if (!v40)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  v26[53] = v39;
  operator delete(v39);
  v40 = (void *)v26[49];
  if (!v40)
  {
LABEL_12:
    v41 = (void *)v26[46];
    if (!v41)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  v26[50] = v40;
  operator delete(v40);
  v41 = (void *)v26[46];
  if (!v41)
  {
LABEL_13:
    v42 = (void *)v26[43];
    if (!v42)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  v26[47] = v41;
  operator delete(v41);
  v42 = (void *)v26[43];
  if (!v42)
  {
LABEL_14:
    v43 = (void *)v26[40];
    if (!v43)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  v26[44] = v42;
  operator delete(v42);
  v43 = (void *)v26[40];
  if (!v43)
  {
LABEL_15:
    v44 = *a11;
    if (!*a11)
      goto LABEL_16;
    goto LABEL_33;
  }
LABEL_32:
  v26[41] = v43;
  operator delete(v43);
  v44 = *a11;
  if (!*a11)
  {
LABEL_16:
    sub_23942A16C(a12);
    v45 = *a14;
    if (!*a14)
      goto LABEL_17;
    goto LABEL_34;
  }
LABEL_33:
  v26[38] = v44;
  operator delete(v44);
  sub_23942A16C(a12);
  v45 = *a14;
  if (!*a14)
  {
LABEL_17:
    v46 = (_QWORD *)v26[3];
    if (v46 == v26)
    {
LABEL_18:
      v47 = 4;
      goto LABEL_37;
    }
LABEL_35:
    if (!v46)
      goto LABEL_38;
    v47 = 5;
    v26 = v46;
LABEL_37:
    (*(void (**)(_QWORD *))(*v26 + 8 * v47))(v26);
LABEL_38:
    _Unwind_Resume(a1);
  }
LABEL_34:
  v26[11] = v45;
  operator delete(v45);
  v46 = (_QWORD *)v26[3];
  if (v46 == v26)
    goto LABEL_18;
  goto LABEL_35;
}

void **sub_2399BC180(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 12);
        if (v6)
        {
          *((_QWORD *)v3 - 11) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v3 - 21);
        if (v7)
        {
          *((_QWORD *)v3 - 20) = v7;
          operator delete(v7);
        }
        v3 -= 232;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_2399BC214(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  size_t v41;
  char *v42;
  char *v43;
  char *v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  unint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  signed int v63;
  signed int v64;
  float *v65;
  float v66;
  double v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t i;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  float v75;
  unsigned int v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  size_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t *v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  unint64_t *p_shared_owners;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t *v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  size_t v121;
  size_t v122;
  void **p_dst;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  _QWORD *v128;
  char *v129;
  size_t v130;
  size_t v131;
  void **v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t *v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  char *v170;
  char *v171;
  size_t v172;
  void **__dst;
  size_t v174;
  unint64_t v175;
  unsigned int v176;
  __int16 v177;

  sub_2399BCEE0(a1);
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) & 1) != 0)
    return;
  v7 = *(_QWORD *)(a1 + 632);
  v8 = *(_QWORD *)(a1 + 640) - v7;
  if (!v8)
  {
LABEL_93:
    v87 = *(_QWORD *)(a1 + 24);
    if (v87 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 48))(v87) & 1) != 0)
      return;
    v88 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v88)
    {
      v89 = 4 * v88;
      v90 = operator new(4 * v88);
      bzero(v90, v89);
      v91 = *(_QWORD *)(a1 + 632);
      v92 = *(_QWORD *)(a1 + 640) - v91;
      if (!v92)
        goto LABEL_110;
    }
    else
    {
      v90 = 0;
      v91 = *(_QWORD *)(a1 + 632);
      v92 = *(_QWORD *)(a1 + 640) - v91;
      if (!v92)
        goto LABEL_110;
    }
    v93 = 0;
    v94 = v92 >> 2;
    v95 = v92 >> 2 != 0;
    v96 = (v92 >> 2) - 1;
    if (v96 == 0 || !v95)
      v94 = 1;
    do
    {
      v97 = *(unsigned int *)(v91 + 4 * v93);
      v98 = v93 + 1;
      v99 = (unsigned int *)(v91 + 4 * (v93 + 1));
      if (v93 == v96)
        v99 = (unsigned int *)(a1 + 72);
      v100 = *v99;
      if (v97 < v100)
      {
        v101 = v100 - v97;
        v102 = (unsigned int *)(*(_QWORD *)(a1 + 704) + 4 * v97);
        do
        {
          v103 = *v102++;
          *((_DWORD *)v90 + v103) = v93;
          --v101;
        }
        while (v101);
      }
      ++v93;
    }
    while (v98 != v94);
LABEL_110:
    v104 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v104 + 160) != *(_QWORD *)(v104 + 152))
    {
      v105 = 0;
      v106 = 0;
      do
      {
        v107 = (uint64_t *)(*(_QWORD *)(v104 + 56) + 16 * *(unsigned int *)(a1 + 112));
        v109 = *v107;
        v108 = (std::__shared_weak_count *)v107[1];
        if (v108)
        {
          p_shared_owners = (unint64_t *)&v108->__shared_owners_;
          do
            v111 = __ldxr(p_shared_owners);
          while (__stxr(v111 + 1, p_shared_owners));
          do
            v112 = __ldaxr(p_shared_owners);
          while (__stlxr(v112 - 1, p_shared_owners));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
            std::__shared_weak_count::__release_weak(v108);
          }
        }
        v113 = *((_DWORD *)v90 + *(unsigned int *)(*(_QWORD *)(v109 + 40) + 4 * v105));
        v114 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 16 * *(unsigned int *)(a1 + 112));
        v116 = *v114;
        v115 = (std::__shared_weak_count *)v114[1];
        if (v115)
        {
          v117 = (unint64_t *)&v115->__shared_owners_;
          do
            v118 = __ldxr(v117);
          while (__stxr(v118 + 1, v117));
          do
            v119 = __ldaxr(v117);
          while (__stlxr(v119 - 1, v117));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        *(_DWORD *)(*(_QWORD *)(v116 + 40) + 4 * v105) = v113;
        v104 = *(_QWORD *)(a1 + 32);
        v105 = ++v106;
      }
      while (v106 < (unint64_t)((uint64_t)(*(_QWORD *)(v104 + 160) - *(_QWORD *)(v104 + 152)) >> 2));
    }
    v176 = -1;
    v120 = off_256934428[0];
    v121 = strlen(off_256934428[0]);
    if (v121 > 0x7FFFFFFFFFFFFFF7)
      sub_23941A5AC();
    v122 = v121;
    if (v121 >= 0x17)
    {
      v124 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v121 | 7) != 0x17)
        v124 = v121 | 7;
      v125 = v124 + 1;
      p_dst = (void **)operator new(v124 + 1);
      v174 = v122;
      v175 = v125 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v175) = v121;
      p_dst = (void **)&__dst;
      if (!v121)
      {
LABEL_133:
        *((_BYTE *)p_dst + v122) = 0;
        v177 = 0;
        v126 = sub_23958CE84((uint64_t **)(v104 + 56), (uint64_t)&v177, (unsigned __int8 *)&__dst);
        v127 = v126;
        v176 = v126;
        if (SHIBYTE(v175) < 0)
        {
          operator delete(__dst);
          if (v127 == -1)
            goto LABEL_137;
        }
        else if (v126 == -1)
        {
LABEL_137:
          v128 = *(_QWORD **)(a1 + 32);
          v129 = off_256934428[0];
          v130 = strlen(off_256934428[0]);
          if (v130 > 0x7FFFFFFFFFFFFFF7)
            sub_23941A5AC();
          v131 = v130;
          if (v130 >= 0x17)
          {
            v133 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v130 | 7) != 0x17)
              v133 = v130 | 7;
            v134 = v133 + 1;
            v132 = (void **)operator new(v133 + 1);
            v174 = v131;
            v175 = v134 | 0x8000000000000000;
            __dst = v132;
          }
          else
          {
            HIBYTE(v175) = v130;
            v132 = (void **)&__dst;
            if (!v130)
            {
LABEL_145:
              *((_BYTE *)v132 + v131) = 0;
              sub_239589414(v128, &v176, (uint64_t)&__dst);
              if (SHIBYTE(v175) < 0)
                operator delete(__dst);
              goto LABEL_147;
            }
          }
          memmove(v132, v129, v131);
          goto LABEL_145;
        }
LABEL_147:
        v135 = *(_QWORD **)(a1 + 32);
        if (v135[20] != v135[19])
        {
          v136 = 0;
          v137 = 0;
          do
          {
            v138 = (uint64_t *)(v135[7] + 16 * *(unsigned int *)(a1 + 112));
            v140 = *v138;
            v139 = (std::__shared_weak_count *)v138[1];
            if (v139)
            {
              v141 = (unint64_t *)&v139->__shared_owners_;
              do
                v142 = __ldxr(v141);
              while (__stxr(v142 + 1, v141));
              do
                v143 = __ldaxr(v141);
              while (__stlxr(v143 - 1, v141));
              if (!v143)
              {
                ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                std::__shared_weak_count::__release_weak(v139);
              }
            }
            v144 = *(_DWORD *)(*(_QWORD *)(v140 + 40) + 4 * v136);
            v145 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 16 * v176);
            v147 = *v145;
            v146 = (std::__shared_weak_count *)v145[1];
            if (v146)
            {
              v148 = (unint64_t *)&v146->__shared_owners_;
              do
                v149 = __ldxr(v148);
              while (__stxr(v149 + 1, v148));
              do
                v150 = __ldaxr(v148);
              while (__stlxr(v150 - 1, v148));
              if (!v150)
              {
                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                std::__shared_weak_count::__release_weak(v146);
              }
            }
            *(_WORD *)(*(_QWORD *)(v147 + 40) + 2 * v136) = v144;
            v135 = *(_QWORD **)(a1 + 32);
            v136 = ++v137;
          }
          while (v137 < (unint64_t)((uint64_t)(v135[20] - v135[19]) >> 2));
        }
        v151 = *(unsigned int *)(a1 + 112);
        if ((_DWORD)v151 != -1)
        {
          v152 = (_QWORD *)(v135[7] + 16 * v151);
          v153 = (std::__shared_weak_count *)v152[1];
          *v152 = 0;
          v152[1] = 0;
          if (v153)
          {
            v154 = (unint64_t *)&v153->__shared_owners_;
            do
              v155 = __ldaxr(v154);
            while (__stlxr(v155 - 1, v154));
            if (!v155)
            {
              ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
              std::__shared_weak_count::__release_weak(v153);
            }
          }
        }
        *(_DWORD *)(a1 + 112) = -1;
        v156 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 108));
        v157 = *v156;
        v158 = (std::__shared_weak_count *)v156[1];
        if (v158)
        {
          v159 = (unint64_t *)&v158->__shared_owners_;
          do
            v160 = __ldxr(v159);
          while (__stxr(v160 + 1, v159));
          do
            v161 = __ldaxr(v159);
          while (__stlxr(v161 - 1, v159));
          if (!v161)
          {
            ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
            std::__shared_weak_count::__release_weak(v158);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v157 + 32))(v157, (uint64_t)(*(_QWORD *)(a1 + 640) - *(_QWORD *)(a1 + 632)) >> 2);
        v162 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 108));
        v163 = *v162;
        v164 = (std::__shared_weak_count *)v162[1];
        if (v164)
        {
          v165 = (unint64_t *)&v164->__shared_owners_;
          do
            v166 = __ldxr(v165);
          while (__stxr(v166 + 1, v165));
          do
            v167 = __ldaxr(v165);
          while (__stlxr(v167 - 1, v165));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 16))(v163) >= 2)
          sub_239933E34(*(_QWORD *)(a1 + 32));
        if (v90)
          operator delete(v90);
        return;
      }
    }
    memmove(p_dst, v120, v122);
    goto LABEL_133;
  }
  v9 = 0;
  v10 = v8 >> 2;
  v11 = (unsigned int *)(a1 + 72);
  v169 = (uint64_t *)(a1 + 584);
LABEL_5:
  *(_QWORD *)(a1 + 656) = *(unsigned int *)(v7 + 4 * v9);
  v168 = v9 + 1;
  v12 = (unsigned int *)(v7 + 4 * (v9 + 1));
  if (v9 == v10 - 1)
    v12 = v11;
  *(_QWORD *)(a1 + 664) = *v12;
  v13 = *(_QWORD *)(a1 + 24);
  if (!v13 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 48))(v13) & 1) == 0)
  {
    v14 = *(_QWORD *)(a1 + 592);
    v15 = *(_QWORD *)(a1 + 584);
    if (v14 != v15)
    {
      v16 = *(_QWORD *)(a1 + 592);
      do
      {
        v18 = *(void **)(v16 - 24);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *(_QWORD *)(v14 - 16) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v15);
      v14 = *v169;
    }
    *(_QWORD *)(a1 + 592) = v15;
    v19 = *(_QWORD *)(a1 + 264);
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3);
    if (v19 <= v20)
    {
      if (v19 < v20)
      {
        v21 = v14 + 24 * v19;
        if (v15 != v21)
        {
          v22 = v15;
          do
          {
            v24 = *(void **)(v22 - 24);
            v22 -= 24;
            v23 = v24;
            if (v24)
            {
              *(_QWORD *)(v15 - 16) = v23;
              operator delete(v23);
            }
            v15 = v22;
          }
          while (v22 != v21);
        }
        *(_QWORD *)(a1 + 592) = v21;
      }
    }
    else
    {
      sub_2394D951C((uint64_t)v169, v19 - v20);
    }
    if (*(_QWORD *)(a1 + 264))
    {
      v25 = 0;
      while (1)
      {
        v26 = *(_QWORD *)(a1 + 584);
        v27 = (_QWORD *)(v26 + 24 * v25);
        v28 = *(_QWORD *)(a1 + 256);
        v29 = v27 + 1;
        v30 = (char *)v27[1];
        v31 = (char *)*v27;
        v32 = (unint64_t)&v30[-*v27];
        v33 = v28 - v32;
        if (v28 <= v32)
        {
          if (v28 < v32)
            *v29 = &v31[v28];
          goto LABEL_27;
        }
        v34 = v26 + 24 * v25;
        v37 = *(_QWORD *)(v34 + 16);
        v36 = (_QWORD *)(v34 + 16);
        v35 = v37;
        if (v37 - (uint64_t)v30 < v33)
          break;
        bzero(v30, v28 - v32);
        *v29 = &v30[v33];
LABEL_27:
        if ((unint64_t)++v25 >= *(_QWORD *)(a1 + 264))
          goto LABEL_59;
      }
      if ((v28 & 0x8000000000000000) != 0)
        sub_2394189F8();
      v38 = v35 - (_QWORD)v31;
      v39 = 2 * v38;
      if (2 * v38 <= v28)
        v39 = *(_QWORD *)(a1 + 256);
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      v172 = v40;
      v171 = (char *)operator new(v40);
      v170 = &v171[v32];
      bzero(&v171[v32], v28 - v32);
      if (v30 == v31)
      {
        v42 = v171;
        v41 = v172;
        v44 = &v171[v32];
        goto LABEL_57;
      }
      if (v32 < 8)
      {
        v42 = v171;
        v41 = v172;
        v43 = &v171[v32];
        goto LABEL_54;
      }
      v42 = v171;
      v41 = v172;
      v43 = &v171[v32];
      if ((unint64_t)(v31 - v171) >= 0x20)
      {
        if (v32 < 0x20)
        {
          v45 = 0;
          goto LABEL_49;
        }
        v45 = v32 & 0xFFFFFFFFFFFFFFE0;
        v46 = &v171[v32 - 16];
        v47 = v30 - 16;
        v48 = v32 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v3 = *((_OWORD *)v47 - 1);
          v2 = *(_OWORD *)v47;
          *((_OWORD *)v46 - 1) = v3;
          *(_OWORD *)v46 = v2;
          v46 -= 32;
          v47 -= 32;
          v48 -= 32;
        }
        while (v48);
        if (v32 == v45)
          goto LABEL_56;
        if ((v32 & 0x18) != 0)
        {
LABEL_49:
          v43 = &v170[-(v32 & 0xFFFFFFFFFFFFFFF8)];
          v49 = &v171[&v30[-v45] - v31 - 8];
          v50 = &v30[-v45 - 8];
          v51 = v45 - (v32 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v52 = *(_QWORD *)v50;
            v50 -= 8;
            DWORD1(v2) = HIDWORD(v52);
            *(_QWORD *)v49 = v52;
            v49 -= 8;
            v51 += 8;
          }
          while (v51);
          v30 -= v32 & 0xFFFFFFFFFFFFFFF8;
          if (v32 == (v32 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_56;
          goto LABEL_54;
        }
        v43 = &v170[-v45];
        v30 -= v45;
      }
LABEL_54:
      v53 = v43 - 1;
      do
      {
        v54 = *--v30;
        *v53-- = v54;
      }
      while (v30 != v31);
LABEL_56:
      v30 = v31;
      v44 = v42;
LABEL_57:
      *v27 = v44;
      *v29 = &v42[v28];
      *v36 = &v42[v41];
      if (v30)
        operator delete(v30);
      goto LABEL_27;
    }
LABEL_59:
    *(_DWORD *)(a1 + 120) = 1058642330;
    *(_DWORD *)(a1 + 672) = 0;
    v55 = *(_QWORD *)(a1 + 656);
    v56 = *(_QWORD *)(a1 + 664);
    v57 = *(_QWORD *)(a1 + 704);
    v58 = *(_QWORD *)(a1 + 680);
    LODWORD(v2) = 0;
    v59 = v56 > v55;
    v60 = v56 - v55;
    if (v59)
    {
      v61 = (unsigned int *)(v57 + 4 * v55);
      do
      {
        v62 = *v61++;
        *(float *)&v2 = *(float *)&v2 + *(float *)(v58 + 232 * v62 + 8);
        --v60;
      }
      while (v60);
      *(_DWORD *)(a1 + 672) = v2;
    }
    v63 = **(_DWORD **)(a1 + 48);
    v64 = **(_DWORD **)(a1 + 56);
    *(float *)&v3 = (float)(v64 * v63);
    v65 = (float *)(v58 + 232 * *(unsigned int *)(v57 + 4 * v55) + 16);
    for (LODWORD(v4) = 1058642330; ; *(_DWORD *)(a1 + 120) = LODWORD(v4))
    {
      v66 = sqrtf(*(float *)&v2 / (float)(*(float *)&v4 * *(float *)&v3));
      *(float *)(a1 + 288) = v66;
      if (v63 >= (int)vcvtps_s32_f32((float)(v65[4] - v65[2]) / v66))
      {
        *(float *)&v5 = (float)(v65[5] - v65[3]) / v66;
        if (v64 >= (int)vcvtps_s32_f32(*(float *)&v5))
          break;
      }
      *(float *)&v4 = *(float *)&v4 / 1.01;
    }
    do
    {
      *(_BYTE *)(a1 + 124) = 0;
      sub_2399BF4EC(a1, *(double *)&v2, *(double *)&v3, v4, v5);
      v69 = *(_QWORD *)(a1 + 656);
      v70 = *(_QWORD *)(a1 + 704);
      LODWORD(v2) = *(_DWORD *)(*(_QWORD *)(a1 + 680) + 232 * *(unsigned int *)(v70 + 4 * v69) + 8);
      *(_DWORD *)(a1 + 140) = v2;
      *(_DWORD *)(a1 + 144) = 1;
      for (i = v69 + 1; i < *(_QWORD *)(a1 + 664); ++i)
      {
        v72 = *(_QWORD *)(a1 + 24);
        if (v72)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 48))(v72) & 1) != 0)
            break;
          v70 = *(_QWORD *)(a1 + 704);
        }
        sub_2399BFDB4(a1, *(_DWORD *)(v70 + 4 * i), *(double *)&v2, *(double *)&v3, v4, v5, v67, v68);
        if (*(_BYTE *)(a1 + 124))
          break;
        ++*(_DWORD *)(a1 + 144);
        v70 = *(_QWORD *)(a1 + 704);
        LODWORD(v3) = *(_DWORD *)(a1 + 140);
        *(float *)&v2 = *(float *)(*(_QWORD *)(a1 + 680) + 232 * *(unsigned int *)(v70 + 4 * i) + 8) + *(float *)&v3;
        *(_DWORD *)(a1 + 140) = v2;
      }
      v73 = *(_QWORD *)(a1 + 24);
      if (v73)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 48))(v73) & 1) != 0)
          break;
      }
      if (!*(_BYTE *)(a1 + 124))
      {
        if (*(_BYTE *)(a1 + 125))
          return;
        v78 = *(float *)(a1 + 76);
        v79 = (float)(*(_DWORD *)(a1 + 152) - *(_DWORD *)(a1 + 148)) - (float)(v78 * 2.0);
        v80 = (float)(*(_DWORD *)(a1 + 160) - *(_DWORD *)(a1 + 156)) - (float)(v78 * 2.0);
        v81 = (float)(int)v80;
        v82 = (float)(int)v79;
        v83 = *(float *)(a1 + 132);
        if ((float)(v81 / v82) <= v83)
        {
          v84 = (int)v79;
          v86 = vcvtms_s32_f32((float)(v82 * v83) + 0.5);
          v85 = (int)v79;
        }
        else
        {
          v84 = (int)v80;
          v85 = vcvtms_s32_f32((float)(v81 / v83) + 0.5);
          v86 = (int)v80;
        }
        *(_DWORD *)(a1 + 248) = v84;
        *(_QWORD *)(a1 + 272) = v85;
        *(_QWORD *)(a1 + 280) = v86;
        sub_2399BD0B8(a1);
        *(_DWORD *)(a1 + 164) = 0;
        v7 = *(_QWORD *)(a1 + 632);
        v10 = (*(_QWORD *)(a1 + 640) - v7) >> 2;
        v11 = (unsigned int *)(a1 + 72);
        v9 = v168;
        if (v168 < v10)
          goto LABEL_5;
        goto LABEL_93;
      }
      v74 = *(_DWORD *)(a1 + 164) + 1;
      *(_DWORD *)(a1 + 164) = v74;
      v75 = *(float *)(a1 + 120);
      v76 = *(_DWORD *)(a1 + 72);
      if (v76 > 0x1D)
      {
        *(float *)&v5 = (float)v76;
        v77 = (float)((float)(1.0 - (float)(*(float *)(a1 + 140) / *(float *)(a1 + 672))) * 0.25)
            + (float)((float)(1.0 - (float)((float)*(int *)(a1 + 144) / (float)v76)) / 10.0);
        if (v77 < 0.02)
          v77 = 0.01;
        if (v77 > 0.2)
          v77 = 0.2;
        *(float *)&v3 = v75 - v77;
        *(_DWORD *)(a1 + 120) = v3;
        if (v74 >= 0xC9)
        {
          *(_BYTE *)(a1 + 125) = 1;
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 76) = 2;
          return;
        }
      }
      else
      {
        *(float *)&v3 = (float)(v75 * *(float *)(a1 + 136)) + -0.005;
        *(_DWORD *)(a1 + 120) = v3;
      }
      if (*(float *)&v3 <= 0.0)
      {
        *(float *)&v3 = v75 * 0.9;
        *(float *)(a1 + 120) = v75 * 0.9;
      }
      LODWORD(v4) = *(_DWORD *)(a1 + 672);
      *(float *)&v2 = sqrtf(*(float *)&v4/ (float)(*(float *)&v3 * (float)(**(_DWORD **)(a1 + 56) * **(_DWORD **)(a1 + 48))));
      *(_DWORD *)(a1 + 288) = v2;
    }
    while (!*(_BYTE *)(a1 + 125));
  }
}

void sub_2399BCE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a20 < 0)
  {
    operator delete(__p);
    if (!v20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v20)
  {
    goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_2399BCEE0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  unsigned int *v17;
  unint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(float *)(a1 + 132) = (float)**(unsigned int **)(a1 + 56) / (float)**(unsigned int **)(a1 + 48);
  v2 = *(unsigned int *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 688);
  v4 = *(_QWORD *)(a1 + 680);
  v5 = 0x34F72C234F72C235 * ((v3 - v4) >> 3);
  if (v2 <= v5)
  {
    if (v2 < v5)
    {
      v6 = v4 + 232 * v2;
      while (v3 != v6)
      {
        v7 = *(void **)(v3 - 24);
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v3 - 96);
        if (v8)
        {
          *(_QWORD *)(v3 - 88) = v8;
          operator delete(v8);
        }
        v9 = *(void **)(v3 - 168);
        if (v9)
        {
          *(_QWORD *)(v3 - 160) = v9;
          operator delete(v9);
        }
        v3 -= 232;
      }
      *(_QWORD *)(a1 + 688) = v6;
    }
  }
  else
  {
    sub_2399C2FC8((uint64_t *)(a1 + 680), v2 - v5);
  }
  v10 = *(unsigned int *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 704);
  v12 = (*(_QWORD *)(a1 + 712) - v11) >> 2;
  if (v10 <= v12)
  {
    if (v10 < v12)
      *(_QWORD *)(a1 + 712) = v11 + 4 * v10;
  }
  else
  {
    sub_23942CB44(a1 + 704, v10 - v12);
    v10 = *(unsigned int *)(a1 + 72);
  }
  v13 = *(_QWORD *)(a1 + 728);
  v14 = (*(_QWORD *)(a1 + 736) - v13) >> 6;
  if (v10 <= v14)
  {
    if (v10 < v14)
      *(_QWORD *)(a1 + 736) = v13 + (v10 << 6);
  }
  else
  {
    sub_2399C35A0((void **)(a1 + 728), v10 - v14);
  }
  v15 = *(float *)(a1 + 76);
  v16 = (float)(2 * (unint64_t)**(unsigned int **)(a1 + 56)) + (float)(v15 * 2.0);
  *(_QWORD *)(a1 + 256) = (unint64_t)(float)((float)(2 * (unint64_t)**(unsigned int **)(a1 + 48))
                                                  + (float)(v15 * 2.0));
  *(_QWORD *)(a1 + 264) = (unint64_t)v16;
  sub_2399BD924(a1);
  v17 = *(unsigned int **)(a1 + 704);
  if (*(_DWORD *)(a1 + 72))
  {
    v18 = 0;
    do
    {
      v17[v18] = v18;
      ++v18;
    }
    while (v18 < *(unsigned int *)(a1 + 72));
  }
  v19 = *(unsigned int **)(a1 + 712);
  v20 = 126 - 2 * __clz(v19 - v17);
  v22 = a1;
  if (v19 == v17)
    v21 = 0;
  else
    v21 = v20;
  sub_2399C40F4(v17, v19, (uint64_t)&v22, v21, 1);
  sub_2399BF328(a1);
}

void sub_2399BD0B8(uint64_t a1)
{
  float v2;
  int v3;
  float v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int32x4_t v14;
  int32x2_t v15;
  int32x2_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  int32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float32_t v46;
  float32_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float *v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int *v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  float *v79;
  unint64_t v80;
  uint64_t *v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  float *v87;
  unint64_t v88;
  uint64_t *v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unsigned int *v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t *v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t *v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  float32x2_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  void *__p;
  uint64_t v141;
  unint64_t v142;

  v2 = *(float *)(a1 + 288);
  v3 = *(_DWORD *)(a1 + 148);
  v4 = *(float *)(a1 + 76);
  v5 = *(_DWORD *)(a1 + 156);
  v6 = *(_DWORD *)(a1 + 248);
  v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
  v8 = *v7;
  v9 = (std::__shared_weak_count *)v7[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v141 = 0;
  v142 = 0;
  __p = 0;
  if (v13)
  {
    v17 = v13;
    if (v13 < 0)
      sub_2394189F8();
    v18 = ((unint64_t)(v13 - 1) >> 6) + 1;
    __p = operator new(8 * v18);
    v141 = 0;
    v142 = v18;
    sub_23942D8C8(&__p, v17, 0);
  }
  v19 = *(_QWORD *)(a1 + 656);
  if (v19 < *(_QWORD *)(a1 + 664))
  {
    v20 = -(float)(v2 * (float)(v4 + (float)v3));
    v21 = -(float)(v2 * (float)(v4 + (float)v5));
    v22 = (float)(1.0 / v2) / (float)v6;
    v23 = v22 + 0.0;
    v24 = (float)((float)(v22 * 0.0) + 0.0) + 0.0;
    v25 = (float)((float)((float)(v22 * v20) + 0.0) + (float)(v21 * 0.0)) + 0.0;
    v26 = (float)(v20 * 0.0) + 0.0;
    v27 = (float)(v26 + (float)(v22 * v21)) + 0.0;
    *(float *)v28.i32 = (float)(v26 + (float)(v21 * 0.0)) + 0.0;
    *(float *)&v28.i32[1] = *(float *)v28.i32 + 1.0;
    v135 = (float32x2_t)v28;
    do
    {
      v29 = *(unsigned int *)(*(_QWORD *)(a1 + 704) + 4 * v19);
      v30 = *(_QWORD *)(a1 + 80);
      if ((_DWORD)v29 == *(_DWORD *)(a1 + 72) - 1)
      {
        v31 = ((*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152)) >> 2);
        v32 = *(unsigned int *)(v30 + 4 * v29);
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 680) + 232 * v29 + 4))
          goto LABEL_50;
      }
      else
      {
        v31 = *(unsigned int *)(v30 + 4 * (v29 + 1));
        v32 = *(unsigned int *)(v30 + 4 * v29);
        if (!*(_BYTE *)(*(_QWORD *)(a1 + 680) + 232 * v29 + 4))
        {
LABEL_50:
          if (v32 >= v31)
            goto LABEL_12;
          while (2)
          {
            v95 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 16 * *(unsigned int *)(a1 + 116));
            v97 = *v95;
            v96 = (std::__shared_weak_count *)v95[1];
            if (v96)
            {
              v98 = (unint64_t *)&v96->__shared_owners_;
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
              do
                v100 = __ldaxr(v98);
              while (__stlxr(v100 - 1, v98));
              if (!v100)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
            v101 = (unsigned int *)(*(_QWORD *)(v97 + 40) + 12 * v32);
            v102 = *v101;
            v103 = __p;
            v104 = v102 >> 6;
            v105 = 1 << v102;
            v106 = *((_QWORD *)__p + v104);
            if ((v105 & v106) != 0)
            {
              v107 = v101[1];
              v108 = v107 >> 6;
              v109 = 1 << v107;
              v110 = *((_QWORD *)__p + v108);
              if ((v109 & v110) != 0)
                goto LABEL_62;
LABEL_71:
              v103[v108] = v109 | v110;
              v122 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
              v124 = *v122;
              v123 = (std::__shared_weak_count *)v122[1];
              if (v123)
              {
                v125 = (unint64_t *)&v123->__shared_owners_;
                do
                  v126 = __ldxr(v125);
                while (__stxr(v126 + 1, v125));
                do
                  v127 = __ldaxr(v125);
                while (__stlxr(v127 - 1, v125));
                if (!v127)
                {
                  ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                  std::__shared_weak_count::__release_weak(v123);
                }
              }
              *(_QWORD *)(*(_QWORD *)(v124 + 40) + 8 * v101[1]) = 0;
              v103 = __p;
              v128 = v101[2];
              v112 = v128 >> 6;
              v113 = 1 << v128;
              v114 = *((_QWORD *)__p + v112);
              if ((v113 & v114) == 0)
                goto LABEL_78;
            }
            else
            {
              *((_QWORD *)__p + v104) = v105 | v106;
              v115 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
              v117 = *v115;
              v116 = (std::__shared_weak_count *)v115[1];
              if (v116)
              {
                v118 = (unint64_t *)&v116->__shared_owners_;
                do
                  v119 = __ldxr(v118);
                while (__stxr(v119 + 1, v118));
                do
                  v120 = __ldaxr(v118);
                while (__stlxr(v120 - 1, v118));
                if (!v120)
                {
                  ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                  std::__shared_weak_count::__release_weak(v116);
                }
              }
              *(_QWORD *)(*(_QWORD *)(v117 + 40) + 8 * *v101) = 0;
              v103 = __p;
              v121 = v101[1];
              v108 = v121 >> 6;
              v109 = 1 << v121;
              v110 = *((_QWORD *)__p + v108);
              if ((v109 & v110) == 0)
                goto LABEL_71;
LABEL_62:
              v111 = v101[2];
              v112 = v111 >> 6;
              v113 = 1 << v111;
              v114 = v103[v112];
              if ((v113 & v114) == 0)
              {
LABEL_78:
                v103[v112] = v113 | v114;
                v129 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
                v131 = *v129;
                v130 = (std::__shared_weak_count *)v129[1];
                if (v130)
                {
                  v132 = (unint64_t *)&v130->__shared_owners_;
                  do
                    v133 = __ldxr(v132);
                  while (__stxr(v133 + 1, v132));
                  do
                    v134 = __ldaxr(v132);
                  while (__stlxr(v134 - 1, v132));
                  if (!v134)
                  {
                    ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                    std::__shared_weak_count::__release_weak(v130);
                  }
                }
                *(_QWORD *)(*(_QWORD *)(v131 + 40) + 8 * v101[2]) = 0;
              }
            }
            if (++v32 == v31)
              goto LABEL_12;
            continue;
          }
        }
      }
      if (v32 < v31)
      {
        v33 = *(_QWORD *)(a1 + 728) + (v29 << 6);
        v14.i32[0] = *(_DWORD *)(v33 + 4);
        v15.i32[0] = *(_DWORD *)(v33 + 8);
        v34 = *(float *)(v33 + 12);
        v48.f32[0] = (float)((float)((float)((float)(v23 * *(float *)v33) + 0.0) + (float)(v24 * *(float *)v14.i32))
                           + (float)(v24 * *(float *)v15.i32))
                   + (float)(v25 * v34);
        v16.i32[0] = *(_DWORD *)(v33 + 16);
        v35 = *(float *)(v33 + 20);
        v36 = *(float *)(v33 + 24);
        v37 = *(float *)(v33 + 28);
        v49.f32[0] = (float)((float)((float)((float)(v23 * *(float *)v16.i32) + 0.0) + (float)(v24 * v35))
                           + (float)(v24 * v36))
                   + (float)(v25 * v37);
        v38 = *(float *)(v33 + 32);
        v39 = *(float *)(v33 + 36);
        v40 = *(float *)(v33 + 40);
        v41 = *(float *)(v33 + 44);
        v50.f32[0] = (float)((float)((float)((float)(v23 * v38) + 0.0) + (float)(v24 * v39)) + (float)(v24 * v40))
                   + (float)(v25 * v41);
        v42 = *(float *)(v33 + 48);
        v43 = *(float *)(v33 + 52);
        v44 = *(float *)(v33 + 56);
        v45 = *(float *)(v33 + 60);
        v51.f32[0] = (float)((float)((float)((float)(v23 * v42) + 0.0) + (float)(v24 * v43)) + (float)(v24 * v44))
                   + (float)(v25 * v45);
        v46 = (float)((float)((float)((float)(v24 * *(float *)v33) + 0.0) + (float)(v23 * *(float *)v14.i32))
                    + (float)(v24 * *(float *)v15.i32))
            + (float)(v27 * v34);
        v47 = (float)((float)((float)((float)(v24 * *(float *)v16.i32) + 0.0) + (float)(v23 * v35)) + (float)(v24 * v36))
            + (float)(v27 * v37);
        *(float *)v28.i32 = (float)((float)((float)(*(float *)v33 * 0.0) + 0.0) + (float)(*(float *)v14.i32 * 0.0))
                          + (float)(*(float *)v15.i32 * 0.0);
        *(float *)v14.i32 = (float)((float)((float)(*(float *)v16.i32 * 0.0) + 0.0) + (float)(v35 * 0.0))
                          + (float)(v36 * 0.0);
        *(float *)v15.i32 = (float)((float)((float)(v38 * 0.0) + 0.0) + (float)(v39 * 0.0)) + (float)(v40 * 0.0);
        *(float *)v16.i32 = (float)((float)((float)(v42 * 0.0) + 0.0) + (float)(v43 * 0.0)) + (float)(v44 * 0.0);
        v28 = (int32x2_t)vmla_n_f32((float32x2_t)vdup_lane_s32(v28, 0), v135, v34);
        *(float32x2_t *)v14.i8 = vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 0), v135, v37);
        v15 = (int32x2_t)vmla_n_f32((float32x2_t)vdup_lane_s32(v15, 0), v135, v41);
        v48.f32[1] = v46;
        *(int32x2_t *)&v48.u32[2] = v28;
        v49.f32[1] = v47;
        v49.i64[1] = v14.i64[0];
        v50.f32[1] = (float)((float)((float)((float)(v24 * v38) + 0.0) + (float)(v23 * v39)) + (float)(v24 * v40))
                   + (float)(v27 * v41);
        *(int32x2_t *)&v50.u32[2] = v15;
        v51.f32[1] = (float)((float)((float)((float)(v24 * v42) + 0.0) + (float)(v23 * v43)) + (float)(v24 * v44))
                   + (float)(v27 * v45);
        *(float32x2_t *)&v51.u32[2] = vmla_n_f32((float32x2_t)vdup_lane_s32(v16, 0), v135, v45);
        v138 = v49;
        v139 = v48;
        v136 = v51;
        v137 = v50;
        do
        {
          v53 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 16 * *(unsigned int *)(a1 + 116));
          v55 = *v53;
          v54 = (std::__shared_weak_count *)v53[1];
          if (v54)
          {
            v56 = (unint64_t *)&v54->__shared_owners_;
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
            do
              v58 = __ldaxr(v56);
            while (__stlxr(v58 - 1, v56));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
              v51 = v136;
              v50 = v137;
              v49 = v138;
              v48 = v139;
            }
          }
          v59 = (unsigned int *)(*(_QWORD *)(v55 + 40) + 12 * v32);
          v60 = *v59;
          v61 = __p;
          v62 = v60 >> 6;
          v63 = 1 << v60;
          v64 = *((_QWORD *)__p + v62);
          if ((v63 & v64) != 0)
          {
            v65 = v59[1];
            v66 = v65 >> 6;
            v67 = 1 << v65;
            v68 = *((_QWORD *)__p + v66);
            if ((v67 & v68) == 0)
              goto LABEL_36;
          }
          else
          {
            *((_QWORD *)__p + v62) = v63 | v64;
            v73 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
            v75 = *v73;
            v74 = (std::__shared_weak_count *)v73[1];
            if (v74)
            {
              v76 = (unint64_t *)&v74->__shared_owners_;
              do
                v77 = __ldxr(v76);
              while (__stxr(v77 + 1, v76));
              do
                v78 = __ldaxr(v76);
              while (__stlxr(v78 - 1, v76));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
                v51 = v136;
                v50 = v137;
                v49 = v138;
                v48 = v139;
              }
            }
            v79 = (float *)(*(_QWORD *)(v75 + 40) + 8 * *v59);
            v14 = (int32x4_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v51, v48, *v79), v49, v79[1]), (float32x4_t)0, v50);
            *(float32x2_t *)v79 = vdiv_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 3));
            v61 = __p;
            v80 = v59[1];
            v66 = v80 >> 6;
            v67 = 1 << v80;
            v68 = *((_QWORD *)__p + v66);
            if ((v67 & v68) == 0)
            {
LABEL_36:
              v61[v66] = v67 | v68;
              v81 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
              v83 = *v81;
              v82 = (std::__shared_weak_count *)v81[1];
              if (v82)
              {
                v84 = (unint64_t *)&v82->__shared_owners_;
                do
                  v85 = __ldxr(v84);
                while (__stxr(v85 + 1, v84));
                do
                  v86 = __ldaxr(v84);
                while (__stlxr(v86 - 1, v84));
                if (!v86)
                {
                  ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                  std::__shared_weak_count::__release_weak(v82);
                  v51 = v136;
                  v50 = v137;
                  v49 = v138;
                  v48 = v139;
                }
              }
              v87 = (float *)(*(_QWORD *)(v83 + 40) + 8 * v59[1]);
              v14 = (int32x4_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v51, v48, *v87), v49, v87[1]), (float32x4_t)0, v50);
              *(float32x2_t *)v87 = vdiv_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 3));
              v61 = __p;
              v88 = v59[2];
              v70 = v88 >> 6;
              v71 = 1 << v88;
              v72 = *((_QWORD *)__p + v70);
              if ((v71 & v72) != 0)
                goto LABEL_18;
LABEL_43:
              v61[v70] = v71 | v72;
              v89 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
              v91 = *v89;
              v90 = (std::__shared_weak_count *)v89[1];
              if (v90)
              {
                v92 = (unint64_t *)&v90->__shared_owners_;
                do
                  v93 = __ldxr(v92);
                while (__stxr(v93 + 1, v92));
                do
                  v94 = __ldaxr(v92);
                while (__stlxr(v94 - 1, v92));
                if (!v94)
                {
                  ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                  std::__shared_weak_count::__release_weak(v90);
                  v51 = v136;
                  v50 = v137;
                  v49 = v138;
                  v48 = v139;
                }
              }
              v52 = (float *)(*(_QWORD *)(v91 + 40) + 8 * v59[2]);
              v14 = (int32x4_t)vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v51, v48, *v52), v49, v52[1]), (float32x4_t)0, v50);
              *(float32x2_t *)v52 = vdiv_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 3));
              goto LABEL_18;
            }
          }
          v69 = v59[2];
          v70 = v69 >> 6;
          v71 = 1 << v69;
          v72 = v61[v70];
          if ((v71 & v72) == 0)
            goto LABEL_43;
LABEL_18:
          ++v32;
        }
        while (v32 != v31);
      }
LABEL_12:
      ++v19;
    }
    while (v19 < *(_QWORD *)(a1 + 664));
  }
  if (__p)
    operator delete(__p);
}

void sub_2399BD924(uint64_t a1)
{
  unsigned int v1;
  unsigned int i;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  float v54;
  float v55;
  uint64_t *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  float cosval;
  unint64_t v82;
  float v83;
  __n128 v84;
  __n128 v85;
  __float2 v86;
  uint64_t **v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float *v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  uint64_t *v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t **v104;
  _DWORD *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  float *v113;
  float v114;
  float v115;
  uint64_t *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t **v122;
  float v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x2_t v126;
  uint64_t v127;
  uint64_t *v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t v133;
  float v134;
  uint64_t v135;
  float v136;
  uint64_t **v137;
  float v138;
  uint64_t v139;
  uint64_t *v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  float v146;
  unint64_t v147;
  float v148;
  __float2 v149;
  uint64_t **v150;
  float v151;
  float v152;
  float v153;
  float v154;
  float v155;
  float *v156;
  float v157;
  float v158;
  float v159;
  float *v160;
  uint64_t v161;
  uint64_t *v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  float *v169;
  float v170;
  uint64_t *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  int v204;
  char *v205;
  unsigned int *v206;
  unsigned int *v207;
  unint64_t v208;
  unint64_t v209;
  int8x16_t *v210;
  uint64_t *v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unsigned int *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  unint64_t v237;
  _DWORD *v238;
  int v239;
  uint64_t v240;
  int8x16_t v241;
  int8x16_t v242;
  float32x4_t v243;
  uint64_t v244;
  float32x4_t v245;
  int8x16_t v246;
  int8x16_t *v247;
  _QWORD *v248;
  int8x16_t *v249;
  unint64_t v250;
  int8x16_t v251;
  int8x16_t *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  char *v257;
  __int128 v258;
  char *v259;
  char *j;
  __int32 v261;
  _OWORD *v262;
  unint64_t v263;
  char *v264;
  unint64_t v265;
  char *v266;
  uint64_t v267;
  char *v268;
  int64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  char *v274;
  char *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  uint64_t v282;
  __int128 v283;
  int v284;
  char *v285;
  char *v286;
  int64_t v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  char *v292;
  char *v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  char *v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  int v302;
  unint64_t v303;
  int v304;
  uint64_t v305;
  int8x16_t v306;
  int8x16_t v307;
  uint64_t v308;
  int8x16_t v309;
  float32x4_t v310;
  float32x4_t v311;
  int8x16_t v312;
  int8x16_t *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  int8x16_t v319;
  int8x16_t *v320;
  int8x16_t *k;
  __int32 v322;
  _QWORD *v323;
  void *v324;
  _QWORD *v325;
  _QWORD *v326;
  uint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  _QWORD *v330;
  void *v331;
  float v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  int8x16_t v337;
  int8x16_t v338;
  float sinval;
  uint64_t v340;
  uint64_t v341;
  float v342;
  uint64_t v343;
  uint64_t v344;
  float v345;
  float v346;
  unint64_t v347;
  unint64_t v348;
  int8x16_t *__p;
  int8x16_t *v350;
  int8x16_t *v351;
  void *v352;
  unsigned int *v353;
  uint64_t v354;
  void *v355;
  uint64_t v356;
  unint64_t v357;
  void *v358;
  char *v359;
  char *v360;
  void *v361;
  char *v362;
  char *v363;
  void *v364;
  void *v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  __int128 v370;
  __int128 v371;
  int v372;

  for (i = 0; ; i = v9 + 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
    v4 = *v3;
    v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v9 = i;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) <= (unint64_t)i)
      break;
    v11 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
    v12 = *v11;
    v13 = (std::__shared_weak_count *)v11[1];
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v10.n128_f32[0] = fabsf(*(float *)(*(_QWORD *)(v12 + 40) + 8 * v9));
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(unsigned int *)(a1 + 104);
    if (v10.n128_f32[0] == INFINITY)
    {
      v19 = (uint64_t *)(*(_QWORD *)(v17 + 80) + 16 * v18);
      v20 = *v19;
      v21 = (std::__shared_weak_count *)v19[1];
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
        do
          v24 = __ldaxr(v22);
        while (__stlxr(v24 - 1, v22));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v20 + 40) + 8 * v9) = 0;
      v25 = *(_QWORD *)(a1 + 32);
      v26 = *(unsigned int *)(a1 + 104);
    }
    else
    {
      v27 = (uint64_t *)(*(_QWORD *)(v17 + 80) + 16 * v18);
      v28 = *v27;
      v29 = (std::__shared_weak_count *)v27[1];
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
        do
          v32 = __ldaxr(v30);
        while (__stlxr(v32 - 1, v30));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v10.n128_u32[0] = *(_DWORD *)(*(_QWORD *)(v28 + 40) + 8 * v9);
      v25 = *(_QWORD *)(a1 + 32);
      v26 = *(unsigned int *)(a1 + 104);
    }
    v33 = (uint64_t *)(*(_QWORD *)(v25 + 80) + 16 * v26);
    v34 = *v33;
    v35 = (std::__shared_weak_count *)v33[1];
    if (v35)
    {
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v10);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v39 = *(_QWORD *)(a1 + 32);
    v40 = *(unsigned int *)(a1 + 104);
    if (fabsf(*(float *)(*(_QWORD *)(v34 + 40) + 8 * v9 + 4)) == INFINITY)
    {
      v41 = (uint64_t *)(*(_QWORD *)(v39 + 80) + 16 * v40);
      v42 = *v41;
      v43 = (std::__shared_weak_count *)v41[1];
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
        do
          v46 = __ldaxr(v44);
        while (__stlxr(v46 - 1, v44));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      *(_DWORD *)(*(_QWORD *)(v42 + 40) + 8 * v9 + 4) = 0;
    }
    else
    {
      v47 = *(std::__shared_weak_count **)(*(_QWORD *)(v39 + 80) + 16 * v40 + 8);
      if (v47)
      {
        v48 = (unint64_t *)&v47->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
        do
          v50 = __ldaxr(v48);
        while (__stlxr(v50 - 1, v48));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
    }
  }
  v51 = a1;
  if (*(_DWORD *)(a1 + 72))
  {
    v52 = 0;
    v53 = 8;
    do
    {
      v54 = sub_2399C2A8C(a1, v52);
      *(float *)(*(_QWORD *)(a1 + 680) + v53) = v54;
      v55 = v54 + *(float *)(a1 + 128);
      *(float *)(a1 + 128) = v55;
      ++v52;
      v53 += 232;
    }
    while (v52 < *(unsigned int *)(a1 + 72));
  }
  else
  {
    v55 = *(float *)(a1 + 128);
  }
  LOBYTE(v1) = **(_BYTE **)(a1 + 64);
  v370 = 0u;
  v371 = 0u;
  v372 = 1065353216;
  v56 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
  v57 = *v56;
  v58 = (std::__shared_weak_count *)v56[1];
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
    do
      v61 = __ldaxr(v59);
    while (__stlxr(v61 - 1, v59));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 16))(v57);
  v63 = v62;
  v367 = 0;
  v368 = 0;
  v369 = 0;
  if (v62)
  {
    if (v62 >> 61)
      sub_2394189F8();
    v64 = 8 * v62;
    v367 = (char *)operator new(8 * v62);
    v369 = &v367[8 * v63];
    bzero(v367, 8 * v63);
    v368 = &v367[v64];
  }
  v65 = operator new(0xCuLL);
  v365 = v65 + 3;
  v366 = (char *)(v65 + 3);
  *(_QWORD *)v65 = -1;
  v65[2] = -1;
  v364 = v65;
  v66 = operator new(0xCuLL);
  v362 = (char *)(v66 + 3);
  v363 = (char *)(v66 + 3);
  *(_QWORD *)v66 = -1;
  v66[2] = -1;
  v361 = v66;
  LODWORD(v67) = *(_DWORD *)(a1 + 72);
  if (!(_DWORD)v67)
  {
LABEL_323:
    v362 = (char *)v66;
    operator delete(v66);
    goto LABEL_324;
  }
  v68 = 0;
  v332 = sqrtf(v55 / (float)v1);
  while (2)
  {
    v69 = *(_QWORD *)(v51 + 80);
    if (v68 != (_DWORD)v67 - 1)
    {
      v70 = *(unsigned int *)(v69 + 4 * v68 + 4);
      v71 = *(unsigned int *)(v69 + 4 * v68);
      v333 = v71;
      if (v71 >= v70)
        goto LABEL_81;
      do
      {
LABEL_74:
        v72 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 56) + 16 * *(unsigned int *)(v51 + 116));
        v73 = *v72;
        v74 = (std::__shared_weak_count *)v72[1];
        if (v74)
        {
          v75 = (unint64_t *)&v74->__shared_owners_;
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
          do
            v77 = __ldaxr(v75);
          while (__stlxr(v77 - 1, v75));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v78 = *(_QWORD *)(v73 + 40);
        v79 = *(_QWORD *)(v51 + 32);
        LODWORD(v358) = v71;
        sub_23996362C(v79, (unsigned int *)&v358, (uint64_t)&v364);
        v80 = (unsigned int *)(v78 + 12 * v71);
        sub_2399C3DF4((uint64_t)&v370, v80, v80);
        sub_2399C3DF4((uint64_t)&v370, v80 + 1, v80 + 1);
        sub_2399C3DF4((uint64_t)&v370, v80 + 2, v80 + 2);
        ++v71;
      }
      while (v71 != v70);
      goto LABEL_81;
    }
    v70 = ((*(_QWORD *)(*(_QWORD *)(v51 + 32) + 160) - *(_QWORD *)(*(_QWORD *)(v51 + 32) + 152)) >> 2);
    v71 = *(unsigned int *)(v69 + 4 * v68);
    v333 = v71;
    if (v71 < v70)
      goto LABEL_74;
LABEL_81:
    v342 = 0.0;
    cosval = 1.0;
    v345 = 3.4028e38;
    v82 = 1;
    sinval = 0.0;
    do
    {
      v83 = (float)((float)((float)v82 * 5.0) / 180.0) * 3.14159265;
      if (v83 > 1.57079633)
        v83 = 1.5708;
      v86 = __sincosf_stret(v83);
      v84.n128_f32[0] = v86.__sinval;
      v87 = (uint64_t **)v371;
      if ((_QWORD)v371)
      {
        v88 = -v86.__sinval;
        v89 = 3.4028e38;
        v90 = -3.4028e38;
        v91 = -3.4028e38;
        v92 = 3.4028e38;
        do
        {
          v97 = *((unsigned int *)v87 + 4);
          v98 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 80) + 16 * *(unsigned int *)(v51 + 104));
          v100 = *v98;
          v99 = (std::__shared_weak_count *)v98[1];
          if (v99)
          {
            v101 = (unint64_t *)&v99->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
            do
              v103 = __ldaxr(v101);
            while (__stlxr(v103 - 1, v101));
            if (!v103)
            {
              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
              std::__shared_weak_count::__release_weak(v99);
            }
          }
          v93 = (float *)(*(_QWORD *)(v100 + 40) + 8 * v97);
          v94 = v93[1];
          v95 = (float)((float)(v86.__cosval * *v93) + 0.0) + (float)(v88 * v94);
          v96 = (float)((float)(v86.__sinval * *v93) + 0.0) + (float)(v86.__cosval * v94);
          if (v95 < v92)
            v92 = (float)((float)(v86.__cosval * *v93) + 0.0) + (float)(v88 * v94);
          if (v96 < v89)
            v89 = (float)((float)(v86.__sinval * *v93) + 0.0) + (float)(v86.__cosval * v94);
          if (v91 < v95)
            v91 = (float)((float)(v86.__cosval * *v93) + 0.0) + (float)(v88 * v94);
          if (v90 < v96)
            v90 = (float)((float)(v86.__sinval * *v93) + 0.0) + (float)(v86.__cosval * v94);
          v87 = (uint64_t **)*v87;
          v51 = a1;
        }
        while (v87);
        v84.n128_f32[0] = (float)(v91 - v92) * (float)(v90 - v89);
        if (v84.n128_f32[0] < v345)
        {
          cosval = v86.__cosval;
          sinval = v86.__sinval;
          v342 = -v86.__sinval;
          v345 = (float)(v91 - v92) * (float)(v90 - v89);
        }
      }
      ++v82;
    }
    while (v82 != 19);
    v104 = (uint64_t **)v371;
    v85.n128_u64[0] = 0x7F0000007FLL;
    if ((_QWORD)v371)
    {
      do
      {
        v106 = *((unsigned int *)v104 + 4);
        v107 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 80) + 16 * *(unsigned int *)(v51 + 104));
        v108 = *v107;
        v109 = (std::__shared_weak_count *)v107[1];
        if (v109)
        {
          v110 = (unint64_t *)&v109->__shared_owners_;
          do
            v111 = __ldxr(v110);
          while (__stxr(v111 + 1, v110));
          do
            v112 = __ldaxr(v110);
          while (__stlxr(v112 - 1, v110));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *, __n128, __n128))v109->__on_zero_shared)(v109, v84, v85);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        v113 = (float *)(*(_QWORD *)(v108 + 40) + 8 * v106);
        v114 = *v113;
        v115 = v113[1];
        v116 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 80) + 16 * *(unsigned int *)(v51 + 104));
        v117 = *v116;
        v118 = (std::__shared_weak_count *)v116[1];
        if (v118)
        {
          v119 = (unint64_t *)&v118->__shared_owners_;
          do
            v120 = __ldxr(v119);
          while (__stxr(v120 + 1, v119));
          do
            v121 = __ldaxr(v119);
          while (__stlxr(v121 - 1, v119));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *, __n128, __n128))v118->__on_zero_shared)(v118, v84, v85);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v84.n128_f32[0] = (float)((float)(cosval * v114) + 0.0) + (float)(v342 * v115);
        v85.n128_f32[0] = (float)((float)(sinval * v114) + 0.0) + (float)(cosval * v115);
        v105 = (_DWORD *)(*(_QWORD *)(v117 + 40) + 8 * v106);
        *v105 = v84.n128_u32[0];
        v105[1] = v85.n128_u32[0];
        v104 = (uint64_t **)*v104;
      }
      while (v104);
      v122 = (uint64_t **)v371;
      v123 = v332;
      v85.n128_u64[0] = 0x7F0000007FLL;
      if ((_QWORD)v371)
      {
        v124 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
        v125 = (float32x2_t)0x80000000800000;
        do
        {
          v127 = *((unsigned int *)v122 + 4);
          v128 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 80) + 16 * *(unsigned int *)(v51 + 104));
          v130 = *v128;
          v129 = (std::__shared_weak_count *)v128[1];
          if (v129)
          {
            v131 = (unint64_t *)&v129->__shared_owners_;
            do
              v132 = __ldxr(v131);
            while (__stxr(v132 + 1, v131));
            do
              v133 = __ldaxr(v131);
            while (__stlxr(v133 - 1, v131));
            if (!v133)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
          }
          v126 = *(float32x2_t *)(*(_QWORD *)(v130 + 40) + 8 * v127);
          v124 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v124, v126), (int8x8_t)v126, (int8x8_t)v124);
          v125 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v126, v125), (int8x8_t)v126, (int8x8_t)v125);
          v122 = (uint64_t **)*v122;
        }
        while (v122);
        v85.n128_u64[0] = (unint64_t)vsub_f32(v125, v124);
      }
    }
    else
    {
      v123 = v332;
    }
    v134 = v85.n128_f32[1];
    if (v85.n128_f32[0] >= v85.n128_f32[1])
      v134 = v85.n128_f32[0];
    v135 = *(_QWORD *)(v51 + 680);
    if (v134 > v123)
    {
      v136 = *(float *)(v135 + 232 * v68 + 8);
      v137 = (uint64_t **)v371;
      v138 = v123 / v134;
      if ((_QWORD)v371)
      {
        v346 = v123 / v134;
        do
        {
          v139 = *((unsigned int *)v137 + 4);
          v140 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 80) + 16 * *(unsigned int *)(v51 + 104));
          v142 = *v140;
          v141 = (std::__shared_weak_count *)v140[1];
          if (v141)
          {
            v143 = (unint64_t *)&v141->__shared_owners_;
            do
              v144 = __ldxr(v143);
            while (__stxr(v144 + 1, v143));
            do
              v145 = __ldaxr(v143);
            while (__stlxr(v145 - 1, v143));
            if (!v145)
            {
              ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
              std::__shared_weak_count::__release_weak(v141);
              v138 = v346;
            }
          }
          *(float32x2_t *)(*(_QWORD *)(v142 + 40) + 8 * v139) = vmul_n_f32(*(float32x2_t *)(*(_QWORD *)(v142 + 40) + 8 * v139), v138);
          v137 = (uint64_t **)*v137;
        }
        while (v137);
        v135 = *(_QWORD *)(v51 + 680);
      }
      v146 = v138 * (float)(v138 * v136);
      *(float *)(v135 + 232 * v68 + 8) = v146;
      *(float *)(v51 + 128) = *(float *)(v51 + 128) - (float)(v136 - v146);
    }
    v147 = 0;
    *(_BYTE *)(v135 + 232 * v68 + 4) = 1;
    v334 = v70;
    v348 = v68;
    do
    {
      v347 = v147;
      v148 = (float)v147 * 3.14159265 / 3.0 * 0.5;
      v149 = __sincosf_stret(v148);
      v150 = (uint64_t **)v371;
      if ((_QWORD)v371)
      {
        v151 = -v149.__sinval;
        v152 = 3.4028e38;
        v153 = -3.4028e38;
        v154 = -3.4028e38;
        v155 = 3.4028e38;
        do
        {
          v161 = *((unsigned int *)v150 + 4);
          v162 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 80) + 16 * *(unsigned int *)(v51 + 104));
          v164 = *v162;
          v163 = (std::__shared_weak_count *)v162[1];
          if (v163)
          {
            v165 = (unint64_t *)&v163->__shared_owners_;
            do
              v166 = __ldxr(v165);
            while (__stxr(v166 + 1, v165));
            do
              v167 = __ldaxr(v165);
            while (__stlxr(v167 - 1, v165));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
              std::__shared_weak_count::__release_weak(v163);
            }
          }
          v156 = (float *)(*(_QWORD *)(v164 + 40) + 8 * v161);
          v157 = v156[1];
          v158 = (float)((float)(v149.__cosval * *v156) + 0.0) + (float)(v151 * v157);
          v159 = (float)((float)(v149.__sinval * *v156) + 0.0) + (float)(v149.__cosval * v157);
          if (v158 < v155)
            v155 = (float)((float)(v149.__cosval * *v156) + 0.0) + (float)(v151 * v157);
          if (v159 < v152)
            v152 = (float)((float)(v149.__sinval * *v156) + 0.0) + (float)(v149.__cosval * v157);
          if (v154 < v158)
            v154 = (float)((float)(v149.__cosval * *v156) + 0.0) + (float)(v151 * v157);
          if (v153 < v159)
            v153 = (float)((float)(v149.__sinval * *v156) + 0.0) + (float)(v149.__cosval * v157);
          v160 = (float *)&v367[8 * v161];
          *v160 = v158;
          v160[1] = v159;
          v150 = (uint64_t **)*v150;
        }
        while (v150);
      }
      else
      {
        v154 = -3.4028e38;
        v155 = 3.4028e38;
        v152 = 3.4028e38;
        v153 = -3.4028e38;
      }
      v168 = *(_QWORD *)(v51 + 680);
      v169 = (float *)(v168 + 232 * v68 + 72 * v347);
      v169[14] = v148;
      v169[8] = v154;
      v169[9] = v153;
      v169[6] = v155;
      v169[7] = v152;
      if (!v347)
      {
        v170 = v154 - v155;
        if ((float)(v154 - v155) < (float)(v153 - v152))
          v170 = v153 - v152;
        *(float *)(v168 + 232 * v68) = v170;
      }
      v358 = 0;
      v359 = 0;
      v360 = 0;
      v171 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 80) + 16 * *(unsigned int *)(v51 + 104));
      v172 = *v171;
      v173 = (std::__shared_weak_count *)v171[1];
      if (v173)
      {
        v174 = (unint64_t *)&v173->__shared_owners_;
        do
          v175 = __ldxr(v174);
        while (__stxr(v175 + 1, v174));
        do
          v176 = __ldaxr(v174);
        while (__stlxr(v176 - 1, v174));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
          std::__shared_weak_count::__release_weak(v173);
        }
      }
      v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v172 + 16))(v172);
      v178 = v177;
      v355 = 0;
      v356 = 0;
      v357 = 0;
      if (v177)
      {
        if (v177 < 0)
          sub_2394189F8();
        v179 = ((unint64_t)(v177 - 1) >> 6) + 1;
        v355 = operator new(8 * v179);
        v356 = 0;
        v357 = v179;
        sub_23942D8C8(&v355, v178, 0);
      }
      v180 = v333;
      if (v333 >= v70)
        goto LABEL_178;
      while (2)
      {
        v211 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 56) + 16 * *(unsigned int *)(v51 + 116));
        v212 = *v211;
        v213 = (std::__shared_weak_count *)v211[1];
        if (v213)
        {
          v214 = (unint64_t *)&v213->__shared_owners_;
          do
            v215 = __ldxr(v214);
          while (__stxr(v215 + 1, v214));
          do
            v216 = __ldaxr(v214);
          while (__stlxr(v216 - 1, v214));
          if (!v216)
          {
            ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
            std::__shared_weak_count::__release_weak(v213);
          }
        }
        v217 = *(_QWORD *)(v212 + 40);
        v218 = *(_QWORD *)(v51 + 32);
        LODWORD(v352) = v180;
        sub_23996389C(v218, (unsigned int *)&v352, (uint64_t)&v361);
        v219 = 0;
        v335 = v180;
        v220 = v217 + 12 * v180;
        do
        {
          v222 = *(_QWORD *)(v51 + 32) + 104;
          v223 = (unsigned int *)sub_239962518(v222, (unsigned int *)v361 + v219);
          v224 = sub_239962518(v222, v223);
          v225 = v224;
          if (*(_DWORD *)(v224 + 16) == -1)
            goto LABEL_227;
          v226 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 56) + 16 * *(unsigned int *)(v51 + 112));
          v227 = *v226;
          v228 = (std::__shared_weak_count *)v226[1];
          if (!v228)
            goto LABEL_215;
          v229 = (unint64_t *)&v228->__shared_owners_;
          do
            v230 = __ldxr(v229);
          while (__stxr(v230 + 1, v229));
          do
            v231 = __ldaxr(v229);
          while (__stlxr(v231 - 1, v229));
          if (!v231)
          {
            ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
            std::__shared_weak_count::__release_weak(v228);
            if (v68 != *(_DWORD *)(*(_QWORD *)(v227 + 40) + 4 * *(unsigned int *)(v225 + 16)))
              goto LABEL_227;
          }
          else
          {
LABEL_215:
            if (v68 != *(_DWORD *)(*(_QWORD *)(v227 + 40) + 4 * *(unsigned int *)(v224 + 16)))
              goto LABEL_227;
          }
          v232 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v51 + 32) + 56) + 16 * *(unsigned int *)(v51 + 116));
          v233 = *v232;
          v234 = (std::__shared_weak_count *)v232[1];
          if (v234)
          {
            v235 = (unint64_t *)&v234->__shared_owners_;
            do
              v236 = __ldxr(v235);
            while (__stxr(v236 + 1, v235));
            do
              v237 = __ldaxr(v235);
            while (__stlxr(v237 - 1, v235));
            if (!v237)
            {
              ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
              std::__shared_weak_count::__release_weak(v234);
            }
          }
          v238 = (_DWORD *)(*(_QWORD *)(v233 + 40) + 12 * *(unsigned int *)(v225 + 16));
          v239 = *(_DWORD *)(v220 + 4 * v219);
          if (*v238 == v239 || v238[1] == v239 || v238[2] == v239)
            goto LABEL_208;
LABEL_227:
          v240 = (unsigned __int16)(v219 + 1) % 3u;
          v241.i64[0] = *(_QWORD *)&v367[8 * *(unsigned int *)(v220 + 4 * v219)];
          v241.i64[1] = v241.i64[0];
          v242.i64[0] = *(_QWORD *)&v367[8 * *(unsigned int *)(v220 + 4 * v240)];
          v242.i64[1] = v242.i64[0];
          v243.i64[0] = v242.i64[0];
          v243.i64[1] = v241.i64[0];
          v244 = *(_QWORD *)(v51 + 680) + 232 * v68 + 72 * v347;
          v245.i64[0] = v241.i64[0];
          v245.i64[1] = v242.i64[0];
          v246 = vbslq_s8((int8x16_t)vcgtq_f32(v245, v243), v242, v241);
          v249 = *(int8x16_t **)(v244 + 72);
          v248 = (_QWORD *)(v244 + 72);
          v247 = v249;
          v250 = v248[1];
          if ((unint64_t)v249 >= v250)
          {
            v252 = (int8x16_t *)*(v248 - 1);
            v253 = ((char *)v247 - (char *)v252) >> 5;
            v254 = v253 + 1;
            if ((unint64_t)(v253 + 1) >> 59)
              sub_2394189F8();
            v255 = v250 - (_QWORD)v252;
            if (v255 >> 4 > v254)
              v254 = v255 >> 4;
            if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFE0)
              v256 = 0x7FFFFFFFFFFFFFFLL;
            else
              v256 = v254;
            if (v256 >> 59)
              sub_239418A80();
            v337 = v246;
            v340 = *(_QWORD *)&v367[8 * *(unsigned int *)(v220 + 4 * v240)];
            v343 = *(_QWORD *)&v367[8 * *(unsigned int *)(v220 + 4 * v219)];
            v257 = (char *)operator new(32 * v256);
            *(_QWORD *)&v258 = v343;
            *((_QWORD *)&v258 + 1) = v340;
            v259 = &v257[32 * v253];
            *(_OWORD *)v259 = v258;
            *((int8x16_t *)v259 + 1) = v337;
            for (j = v259; v247 != v252; *((_DWORD *)j + 7) = v247[1].i32[3])
            {
              v261 = v247[-2].i32[0];
              v247 -= 2;
              *((_DWORD *)j - 8) = v261;
              j -= 32;
              *((_DWORD *)j + 1) = v247->i32[1];
              *((_DWORD *)j + 2) = v247->i32[2];
              *((_DWORD *)j + 3) = v247->i32[3];
              *((_DWORD *)j + 4) = v247[1].i32[0];
              *((_DWORD *)j + 5) = v247[1].i32[1];
              *((_DWORD *)j + 6) = v247[1].i32[2];
            }
            *(v248 - 1) = j;
            v262 = v259 + 32;
            *v248 = v259 + 32;
            v248[1] = &v257[32 * v256];
            if (v252)
              operator delete(v252);
            v51 = a1;
            *v248 = v262;
            v68 = v348;
            if (*(_DWORD *)(a1 + 756) != 2)
              goto LABEL_208;
          }
          else
          {
            v251.i64[1] = *(_QWORD *)&v367[8 * *(unsigned int *)(v220 + 4 * v240)];
            v251.i64[0] = *(_QWORD *)&v367[8 * *(unsigned int *)(v220 + 4 * v219)];
            *v247 = v251;
            v247[1] = v246;
            *v248 = v247 + 2;
            v68 = v348;
            if (*(_DWORD *)(v51 + 756) != 2)
              goto LABEL_208;
          }
          v263 = *(unsigned int *)(v220 + 4 * v219);
          v264 = (char *)v355;
          if (((*(_QWORD *)((char *)v355 + ((v263 >> 3) & 0x1FFFFFF8)) >> v263) & 1) != 0)
          {
            v265 = *(unsigned int *)(v220 + 4 * v240);
            if (((*(_QWORD *)((char *)v355 + ((v265 >> 3) & 0x1FFFFFF8)) >> v265) & 1) == 0)
              goto LABEL_268;
            goto LABEL_208;
          }
          v266 = v359;
          if (v359 < v360)
          {
            *(_DWORD *)v359 = v263;
            v267 = (uint64_t)(v266 + 4);
            goto LABEL_267;
          }
          v268 = (char *)v358;
          v269 = v359 - (_BYTE *)v358;
          v270 = (v359 - (_BYTE *)v358) >> 2;
          v271 = v270 + 1;
          if ((unint64_t)(v270 + 1) >> 62)
            goto LABEL_335;
          v272 = v360 - (_BYTE *)v358;
          if ((v360 - (_BYTE *)v358) >> 1 > v271)
            v271 = v272 >> 1;
          if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFFCLL)
            v273 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v273 = v271;
          if (v273)
          {
            if (v273 >> 62)
              goto LABEL_336;
            v274 = (char *)operator new(4 * v273);
            v275 = &v274[4 * v270];
            *(_DWORD *)v275 = *(_DWORD *)(v220 + 4 * v219);
            v267 = (uint64_t)(v275 + 4);
            if (v266 == v268)
              goto LABEL_264;
LABEL_258:
            v276 = v266 - 4 - v268;
            if (v276 < 0x2C)
              goto LABEL_345;
            if ((unint64_t)(v266 - &v274[v269]) < 0x20)
              goto LABEL_345;
            v277 = (v276 >> 2) + 1;
            v278 = 4 * (v277 & 0x7FFFFFFFFFFFFFF8);
            v279 = &v266[-v278];
            v275 -= v278;
            v280 = &v274[4 * v270 - 16];
            v281 = v266 - 16;
            v282 = v277 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v283 = *(_OWORD *)v281;
              *((_OWORD *)v280 - 1) = *((_OWORD *)v281 - 1);
              *(_OWORD *)v280 = v283;
              v280 -= 32;
              v281 -= 32;
              v282 -= 8;
            }
            while (v282);
            v266 = v279;
            if (v277 != (v277 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_345:
              do
              {
                v284 = *((_DWORD *)v266 - 1);
                v266 -= 4;
                *((_DWORD *)v275 - 1) = v284;
                v275 -= 4;
              }
              while (v266 != v268);
            }
            goto LABEL_264;
          }
          v274 = 0;
          v275 = (char *)(4 * v270);
          *(_DWORD *)(4 * v270) = v263;
          v267 = 4 * v270 + 4;
          if (v266 != v268)
            goto LABEL_258;
LABEL_264:
          v358 = v275;
          v359 = (char *)v267;
          v360 = &v274[4 * v273];
          if (v268)
          {
            operator delete(v268);
            v264 = (char *)v355;
          }
          v51 = a1;
          v68 = v348;
LABEL_267:
          v359 = (char *)v267;
          *(_QWORD *)&v264[((unint64_t)*(unsigned int *)(v220 + 4 * v219) >> 3) & 0x1FFFFFF8] |= 1 << *(_DWORD *)(v220 + 4 * v219);
          v265 = *(unsigned int *)(v220 + 4 * v240);
          if (((*(_QWORD *)&v264[(v265 >> 3) & 0x1FFFFFF8] >> v265) & 1) == 0)
          {
LABEL_268:
            v285 = v359;
            if (v359 >= v360)
            {
              v286 = (char *)v358;
              v287 = v359 - (_BYTE *)v358;
              v288 = (v359 - (_BYTE *)v358) >> 2;
              v289 = v288 + 1;
              if ((unint64_t)(v288 + 1) >> 62)
LABEL_335:
                sub_2394189F8();
              v290 = v360 - (_BYTE *)v358;
              if ((v360 - (_BYTE *)v358) >> 1 > v289)
                v289 = v290 >> 1;
              if ((unint64_t)v290 >= 0x7FFFFFFFFFFFFFFCLL)
                v291 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v291 = v289;
              if (v291)
              {
                if (v291 >> 62)
LABEL_336:
                  sub_239418A80();
                v292 = (char *)operator new(4 * v291);
                v293 = &v292[4 * v288];
                *(_DWORD *)v293 = *(_DWORD *)(v220 + 4 * v240);
                v221 = (uint64_t)(v293 + 4);
                if (v285 == v286)
                {
LABEL_286:
                  v358 = v293;
                  v359 = (char *)v221;
                  v360 = &v292[4 * v291];
                  if (v286)
                  {
                    operator delete(v286);
                    v264 = (char *)v355;
                  }
                  v51 = a1;
                  v68 = v348;
                  goto LABEL_207;
                }
              }
              else
              {
                v292 = 0;
                v293 = (char *)(4 * v288);
                *(_DWORD *)(4 * v288) = v265;
                v221 = 4 * v288 + 4;
                if (v285 == v286)
                  goto LABEL_286;
              }
              v294 = v285 - 4 - v286;
              if (v294 < 0x2C)
                goto LABEL_346;
              if ((unint64_t)(v285 - &v292[v287]) < 0x20)
                goto LABEL_346;
              v295 = (v294 >> 2) + 1;
              v296 = 4 * (v295 & 0x7FFFFFFFFFFFFFF8);
              v297 = &v285[-v296];
              v293 -= v296;
              v298 = &v292[4 * v288 - 16];
              v299 = v285 - 16;
              v300 = v295 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v301 = *(_OWORD *)v299;
                *((_OWORD *)v298 - 1) = *((_OWORD *)v299 - 1);
                *(_OWORD *)v298 = v301;
                v298 -= 32;
                v299 -= 32;
                v300 -= 8;
              }
              while (v300);
              v285 = v297;
              if (v295 != (v295 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_346:
                do
                {
                  v302 = *((_DWORD *)v285 - 1);
                  v285 -= 4;
                  *((_DWORD *)v293 - 1) = v302;
                  v293 -= 4;
                }
                while (v285 != v286);
              }
              goto LABEL_286;
            }
            *(_DWORD *)v359 = v265;
            v221 = (uint64_t)(v285 + 4);
LABEL_207:
            v359 = (char *)v221;
            *(_QWORD *)&v264[((unint64_t)*(unsigned int *)(v220 + 4 * v240) >> 3) & 0x1FFFFFF8] |= 1 << *(_DWORD *)(v220 + 4 * v240);
          }
LABEL_208:
          ++v219;
        }
        while (v219 != 3);
        v70 = v334;
        v180 = v335 + 1;
        if (v335 + 1 != v334)
          continue;
        break;
      }
LABEL_178:
      if (!v347)
      {
        v181 = *(_QWORD *)(v51 + 680) + 232 * v68;
        v184 = *(char **)(v181 + 136);
        v182 = v181 + 136;
        v183 = v184;
        v185 = *(_QWORD *)(v182 - 64) - *(_QWORD *)(v182 - 72);
        v186 = v185 >> 5;
        if (v185 >> 5 <= (unint64_t)((uint64_t)(*(_QWORD *)(v182 + 16) - (_QWORD)v184) >> 5))
          goto LABEL_186;
        if (v185 < 0)
          goto LABEL_340;
        v187 = (_QWORD *)(v182 - 120);
        v188 = *(char **)(v182 + 8);
        v189 = (char *)operator new(*(_QWORD *)(v182 - 64) - *(_QWORD *)(v182 - 72));
        v190 = &v189[v188 - v183];
        v191 = v190;
        if (v188 != v183)
        {
          v191 = &v189[v188 - v183];
          do
          {
            v192 = *((_DWORD *)v188 - 8);
            v188 -= 32;
            *((_DWORD *)v191 - 8) = v192;
            v191 -= 32;
            *((_DWORD *)v191 + 1) = *((_DWORD *)v188 + 1);
            *((_DWORD *)v191 + 2) = *((_DWORD *)v188 + 2);
            *((_DWORD *)v191 + 3) = *((_DWORD *)v188 + 3);
            *((_DWORD *)v191 + 4) = *((_DWORD *)v188 + 4);
            *((_DWORD *)v191 + 5) = *((_DWORD *)v188 + 5);
            *((_DWORD *)v191 + 6) = *((_DWORD *)v188 + 6);
            *((_DWORD *)v191 + 7) = *((_DWORD *)v188 + 7);
          }
          while (v188 != v183);
        }
        v187[15] = v191;
        v187[16] = v190;
        v187[17] = &v189[32 * v186];
        if (v183)
          operator delete(v183);
LABEL_186:
        v193 = *(_QWORD *)(v51 + 680) + 232 * v68;
        v196 = *(char **)(v193 + 208);
        v194 = v193 + 208;
        v195 = v196;
        v197 = *(_QWORD *)(v194 - 136) - *(_QWORD *)(v194 - 144);
        v198 = v197 >> 5;
        if (v197 >> 5 > (unint64_t)((uint64_t)(*(_QWORD *)(v194 + 16) - (_QWORD)v196) >> 5))
        {
          if ((v197 & 0x8000000000000000) == 0)
          {
            v199 = (_QWORD *)(v194 - 192);
            v200 = *(char **)(v194 + 8);
            v201 = (char *)operator new(*(_QWORD *)(v194 - 136) - *(_QWORD *)(v194 - 144));
            v202 = &v201[v200 - v195];
            v203 = v202;
            if (v200 != v195)
            {
              v203 = &v201[v200 - v195];
              do
              {
                v204 = *((_DWORD *)v200 - 8);
                v200 -= 32;
                *((_DWORD *)v203 - 8) = v204;
                v203 -= 32;
                *((_DWORD *)v203 + 1) = *((_DWORD *)v200 + 1);
                *((_DWORD *)v203 + 2) = *((_DWORD *)v200 + 2);
                *((_DWORD *)v203 + 3) = *((_DWORD *)v200 + 3);
                *((_DWORD *)v203 + 4) = *((_DWORD *)v200 + 4);
                *((_DWORD *)v203 + 5) = *((_DWORD *)v200 + 5);
                *((_DWORD *)v203 + 6) = *((_DWORD *)v200 + 6);
                *((_DWORD *)v203 + 7) = *((_DWORD *)v200 + 7);
              }
              while (v200 != v195);
            }
            v199[24] = v203;
            v199[25] = v202;
            v199[26] = &v201[32 * v198];
            if (v195)
              operator delete(v195);
            goto LABEL_193;
          }
LABEL_340:
          sub_2394189F8();
        }
      }
LABEL_193:
      if (*(_DWORD *)(v51 + 756) == 2)
      {
        v352 = 0;
        v353 = 0;
        v354 = 0;
        v205 = v367;
        sub_2399C6130((char **)&v358, (uint64_t)v367, (char **)&v352);
        v350 = 0;
        v351 = 0;
        v207 = (unsigned int *)v352;
        v206 = v353;
        v208 = (char *)v353 - (_BYTE *)v352;
        v209 = ((char *)v353 - (_BYTE *)v352) >> 2;
        if (v353 == v352)
        {
          v210 = 0;
        }
        else
        {
          if (v208 >= 0x1FFFFFFFFFFFFFFDLL)
            sub_2394189F8();
          v210 = (int8x16_t *)operator new(8 * v208);
          __p = v210;
          v350 = v210;
          v351 = &v210[2 * v209];
          if (v206 != v207)
          {
            v303 = 0;
            v304 = 0;
            do
            {
              v305 = v207[v303];
              v303 = (v304 + 1);
              v306.i64[0] = *(_QWORD *)&v205[8 * v305];
              v307.i64[0] = v306.i64[0];
              v307.i64[1] = v306.i64[0];
              v308 = *(_QWORD *)&v205[8 * v207[v303 % v209]];
              v309.i64[0] = v308;
              v309.i64[1] = v308;
              v310.i64[0] = v308;
              v310.i64[1] = v306.i64[0];
              v311.i64[0] = v306.i64[0];
              v311.i64[1] = v308;
              v312 = vbslq_s8((int8x16_t)vcgtq_f32(v311, v310), v309, v307);
              if (v210 < v351)
              {
                v306.i64[1] = *(_QWORD *)&v205[8 * v207[v303 % v209]];
                *v210 = v306;
                v210[1] = v312;
                v210 += 2;
              }
              else
              {
                v313 = __p;
                v314 = ((char *)v210 - (char *)__p) >> 5;
                v315 = v314 + 1;
                if ((unint64_t)(v314 + 1) >> 59)
                  sub_2394189F8();
                v316 = (char *)v351 - (char *)__p;
                if (v351 - __p > v315)
                  v315 = v316 >> 4;
                if ((unint64_t)v316 >= 0x7FFFFFFFFFFFFFE0)
                  v317 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v317 = v315;
                if (v317 >> 59)
                  sub_239418A80();
                v338 = v312;
                v341 = v308;
                v344 = v306.i64[0];
                v318 = (char *)operator new(32 * v317);
                v319.i64[0] = v344;
                v319.i64[1] = v341;
                v320 = (int8x16_t *)&v318[32 * v314];
                *v320 = v319;
                v320[1] = v338;
                for (k = v320; v210 != __p; k[1].i32[3] = v210[1].i32[3])
                {
                  v322 = v210[-2].i32[0];
                  v210 -= 2;
                  k[-2].i32[0] = v322;
                  k -= 2;
                  k->i32[1] = v210->i32[1];
                  k->i32[2] = v210->i32[2];
                  k->i32[3] = v210->i32[3];
                  k[1].i32[0] = v210[1].i32[0];
                  k[1].i32[1] = v210[1].i32[1];
                  k[1].i32[2] = v210[1].i32[2];
                }
                v210 = v320 + 2;
                __p = k;
                v351 = (int8x16_t *)&v318[32 * v317];
                if (v313)
                {
                  operator delete(v313);
                  v207 = (unsigned int *)v352;
                  v206 = v353;
                }
                v51 = a1;
              }
              v350 = v210;
              v209 = v206 - v207;
              v304 = v303;
            }
            while (v209 > v303);
            v210 = __p;
            v70 = v334;
          }
        }
        v323 = (_QWORD *)(*(_QWORD *)(v51 + 680) + 232 * v68 + 72 * v347);
        v324 = (void *)v323[8];
        v323[8] = v210;
        v323[9] = v350;
        v323[10] = v351;
        if (v324)
          operator delete(v324);
        if (v352)
        {
          v353 = (unsigned int *)v352;
          operator delete(v352);
        }
      }
      if (v355)
        operator delete(v355);
      if (v358)
      {
        v359 = (char *)v358;
        operator delete(v358);
      }
      v147 = v347 + 1;
    }
    while (v347 != 2);
    if (*((_QWORD *)&v371 + 1))
    {
      v325 = (_QWORD *)v371;
      if ((_QWORD)v371)
      {
        do
        {
          v326 = (_QWORD *)*v325;
          operator delete(v325);
          v325 = v326;
        }
        while (v326);
      }
      *(_QWORD *)&v371 = 0;
      v327 = *((_QWORD *)&v370 + 1);
      if (*((_QWORD *)&v370 + 1))
      {
        v328 = 0;
        do
          *(_QWORD *)(v370 + 8 * v328++) = 0;
        while (v327 != v328);
      }
      *((_QWORD *)&v371 + 1) = 0;
    }
    ++v68;
    v67 = *(unsigned int *)(v51 + 72);
    if (v68 < v67)
      continue;
    break;
  }
  v66 = v361;
  if (v361)
    goto LABEL_323;
LABEL_324:
  if (v364)
  {
    v365 = v364;
    operator delete(v364);
  }
  if (v367)
    operator delete(v367);
  v329 = (_QWORD *)v371;
  if ((_QWORD)v371)
  {
    do
    {
      v330 = (_QWORD *)*v329;
      operator delete(v329);
      v329 = v330;
    }
    while (v330);
  }
  v331 = (void *)v370;
  *(_QWORD *)&v370 = 0;
  if (v331)
    operator delete(v331);
}

void sub_2399BF184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42)
{
  uint64_t v42;
  void *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;

  if (__p)
  {
    operator delete(__p);
    v44 = *(void **)(v42 - 232);
    if (!v44)
    {
LABEL_4:
      v45 = *(_QWORD **)(v42 - 192);
      if (v45)
      {
        do
        {
          v46 = (_QWORD *)*v45;
          operator delete(v45);
          v45 = v46;
        }
        while (v46);
      }
      v47 = *(void **)(v42 - 208);
      *(_QWORD *)(v42 - 208) = 0;
      if (v47)
        operator delete(v47);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v44 = *(void **)(v42 - 232);
    if (!v44)
      goto LABEL_4;
  }
  operator delete(v44);
  goto LABEL_4;
}

void sub_2399BF328(uint64_t a1)
{
  _DWORD **v2;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;

  v2 = (_DWORD **)(a1 + 632);
  v3 = *(unsigned __int8 **)(a1 + 64);
  v4 = *v3;
  v5 = *(_QWORD *)(a1 + 632);
  v6 = (*(_QWORD *)(a1 + 640) - v5) >> 2;
  if (v4 <= v6)
  {
    if (v4 < v6)
      *(_QWORD *)(a1 + 640) = v5 + 4 * v4;
  }
  else
  {
    sub_23942CB44(a1 + 632, v4 - v6);
    v3 = *(unsigned __int8 **)(a1 + 64);
  }
  v7 = *v3;
  if (v7 == 1)
  {
    **v2 = 0;
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 72);
    if (v8 <= v7)
    {
      v20 = *(_QWORD *)(a1 + 632);
      v21 = (*(_QWORD *)(a1 + 640) - v20) >> 2;
      if (v8 <= v21)
      {
        if (v8 < v21)
          *(_QWORD *)(a1 + 640) = v20 + 4 * v8;
      }
      else
      {
        sub_23942CB44((uint64_t)v2, v8 - v21);
        LODWORD(v8) = *(_DWORD *)(a1 + 72);
      }
      if ((_DWORD)v8)
      {
        v23 = 0;
        v24 = *v2;
        do
        {
          v24[v23] = v23;
          ++v23;
        }
        while (v23 < *(unsigned int *)(a1 + 72));
      }
    }
    else
    {
      v9 = *(_DWORD **)(a1 + 632);
      *v9 = 0;
      v10 = *v3;
      v11 = *(unsigned int *)(a1 + 72);
      if (v11 >= 2)
      {
        v12 = *(unsigned int **)(a1 + 704);
        v13 = *(_QWORD *)(a1 + 680);
        v14 = *(float *)(a1 + 128);
        v15 = v14 / (float)v10;
        v16 = *(float *)(v13 + 232 * *v12 + 8);
        v17 = 1;
        v18 = 1;
        while (1)
        {
          if (v16 < v15)
          {
            v19 = v18;
          }
          else
          {
            v9[v18] = v17;
            v19 = v18 + 1;
            v10 = *v3;
            if (v18 + 1 >= v10)
              goto LABEL_19;
            v14 = v14 - v16;
            v15 = v14 / (float)(v10 - v18);
            v11 = *(unsigned int *)(a1 + 72);
            v16 = 0.0;
            ++v18;
          }
          v16 = v16 + *(float *)(v13 + 232 * v12[v17++] + 8);
          if (v17 >= v11)
            goto LABEL_19;
        }
      }
      v19 = 1;
LABEL_19:
      if (v19 < v10)
      {
        v22 = (uint64_t)(*(_QWORD *)(a1 + 640) - (_QWORD)v9) >> 2;
        if (v19 <= v22)
        {
          if (v19 < v22)
            *(_QWORD *)(a1 + 640) = &v9[v19];
        }
        else
        {
          sub_23942CB44((uint64_t)v2, v19 - v22);
        }
      }
    }
  }
}

_QWORD *sub_2399BF4EC(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  char **v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  char *v58;
  size_t v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  size_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  size_t v85;
  char *v86;
  char *v87;
  unint64_t v88;
  char *v89;
  char *v90;
  unint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _DWORD *v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  uint64_t v130;
  float v131;
  uint64_t v132;
  int v134;
  int v135;
  uint64_t v136;
  char *v137;
  size_t v138;
  size_t v139;
  _QWORD *v140;
  unint64_t v141;
  int v142;
  _QWORD *v143;

  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 704) + 4 * *(_QWORD *)(a1 + 656));
  sub_2399C266C(a1, a2, a3, a4, a5);
  v136 = v6;
  v13 = *(_QWORD *)(a1 + 680) + 232 * v6;
  v15 = *(_DWORD *)(v13 + 40);
  v14 = *(_DWORD *)(v13 + 44);
  v134 = v14;
  v135 = v15;
  if (v15 > v14)
    v14 = v15;
  v142 = v14;
  v16 = 2 * v14;
  v17 = *(_QWORD *)(a1 + 616);
  v18 = *(_QWORD *)(a1 + 608);
  if (v17 != v18)
  {
    v19 = *(_QWORD *)(a1 + 616);
    do
    {
      v21 = *(void **)(v19 - 24);
      v19 -= 24;
      v20 = v21;
      if (v21)
      {
        *(_QWORD *)(v17 - 16) = v20;
        operator delete(v20);
      }
      v17 = v19;
    }
    while (v19 != v18);
  }
  v22 = v16;
  v23 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 616) = v18;
  v143 = (_QWORD *)(a1 + 224);
  v24 = *(_QWORD *)(a1 + 232);
  if (v24 != v23)
  {
    v25 = *(_QWORD *)(a1 + 232);
    do
    {
      v27 = *(void **)(v25 - 24);
      v25 -= 24;
      v26 = v27;
      if (v27)
      {
        *(_QWORD *)(v24 - 16) = v26;
        operator delete(v26);
      }
      v24 = v25;
    }
    while (v25 != v23);
    v18 = *(_QWORD *)(a1 + 616);
  }
  *(_QWORD *)(a1 + 232) = v23;
  v28 = *(_QWORD *)(a1 + 608);
  v29 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v28) >> 3);
  if (v22 <= v29)
  {
    if (v22 < v29)
    {
      v30 = v28 + 24 * (int)v22;
      if (v18 != v30)
      {
        v31 = v18;
        do
        {
          v33 = *(void **)(v31 - 24);
          v31 -= 24;
          v32 = v33;
          if (v33)
          {
            *(_QWORD *)(v18 - 16) = v32;
            operator delete(v32);
          }
          v18 = v31;
        }
        while (v31 != v30);
      }
      *(_QWORD *)(a1 + 616) = v30;
    }
  }
  else
  {
    sub_2394D951C(a1 + 608, v22 - v29);
  }
  v35 = *(_QWORD *)(a1 + 224);
  v34 = *(_QWORD *)(a1 + 232);
  v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
  if (v22 <= v36)
  {
    if (v22 < v36)
    {
      v37 = v35 + 24 * (int)v22;
      if (v34 != v37)
      {
        v38 = *(_QWORD *)(a1 + 232);
        do
        {
          v40 = *(void **)(v38 - 24);
          v38 -= 24;
          v39 = v40;
          if (v40)
          {
            *(_QWORD *)(v34 - 16) = v39;
            operator delete(v39);
          }
          v34 = v38;
        }
        while (v38 != v37);
      }
      *(_QWORD *)(a1 + 232) = v37;
    }
  }
  else
  {
    sub_2394D951C((uint64_t)v143, v22 - v36);
  }
  v41 = *(_QWORD *)(a1 + 608);
  if (*(_QWORD *)(a1 + 616) != v41)
  {
    v42 = 0;
    v141 = v22;
    while (1)
    {
      v43 = (_QWORD *)(v41 + 24 * v42);
      v44 = v43 + 1;
      v45 = (char *)v43[1];
      v46 = (char *)*v43;
      v47 = (unint64_t)&v45[-*v43];
      v48 = v22 - v47;
      if (v22 > v47)
        break;
      if (v22 < v47)
        *v44 = &v46[v22];
LABEL_68:
      v73 = (_QWORD *)(*v143 + 24 * v42);
      v74 = v73 + 1;
      v75 = (char *)v73[1];
      v76 = (char *)*v73;
      v77 = (unint64_t)&v75[-*v73];
      v78 = v22 - v77;
      if (v22 <= v77)
      {
        if (v22 < v77)
          *v74 = &v76[v22];
        goto LABEL_35;
      }
      v79 = *v143 + 24 * v42;
      v82 = *(_QWORD *)(v79 + 16);
      v81 = (_QWORD *)(v79 + 16);
      v80 = v82;
      if (v82 - (uint64_t)v75 < v78)
      {
        v140 = v81;
        if (v142 < 0)
          sub_2394189F8();
        v83 = v80 - (_QWORD)v76;
        v84 = 2 * v83;
        if (2 * v83 <= v22)
          v84 = v22;
        if (v83 >= 0x3FFFFFFFFFFFFFFFLL)
          v85 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v85 = v84;
        v138 = v85;
        v86 = (char *)operator new(v85);
        v87 = &v86[v77];
        bzero(&v86[v77], v78);
        if (v75 == v76)
          goto LABEL_95;
        if (v77 >= 8 && (unint64_t)(v76 - v86) >= 0x20)
        {
          if (v77 >= 0x20)
          {
            v88 = v77 & 0xFFFFFFFFFFFFFFE0;
            v89 = &v86[v77 - 16];
            v90 = v75 - 16;
            v91 = v77 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v8 = *((_OWORD *)v90 - 1);
              v7 = *(_OWORD *)v90;
              *((_OWORD *)v89 - 1) = v8;
              *(_OWORD *)v89 = v7;
              v89 -= 32;
              v90 -= 32;
              v91 -= 32;
            }
            while (v91);
            if (v77 == v88)
              goto LABEL_94;
            if ((v77 & 0x18) != 0)
              goto LABEL_87;
            v87 -= v88;
            v75 -= v88;
          }
          else
          {
            v88 = 0;
LABEL_87:
            v87 -= v77 & 0xFFFFFFFFFFFFFFF8;
            v92 = &v86[&v75[-v88] - v76 - 8];
            v93 = &v75[-v88 - 8];
            v94 = v88 - (v77 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v95 = *(_QWORD *)v93;
              v93 -= 8;
              *(_QWORD *)&v7 = v95;
              *(_QWORD *)v92 = v95;
              v92 -= 8;
              v94 += 8;
            }
            while (v94);
            v75 -= v77 & 0xFFFFFFFFFFFFFFF8;
            if (v77 == (v77 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_94:
              v75 = v76;
              v87 = v86;
LABEL_95:
              *v73 = v87;
              v22 = v141;
              *v74 = &v86[v141];
              *v140 = &v86[v138];
              if (v75)
                operator delete(v75);
              goto LABEL_35;
            }
          }
        }
        v96 = v87 - 1;
        do
        {
          v97 = *--v75;
          *v96-- = v97;
        }
        while (v75 != v76);
        goto LABEL_94;
      }
      bzero(v75, v22 - v77);
      *v74 = &v75[v78];
LABEL_35:
      ++v42;
      v41 = *(_QWORD *)(a1 + 608);
      if (v42 >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 616) - v41) >> 3))
        goto LABEL_97;
    }
    v49 = v22;
    v50 = v41 + 24 * v42;
    v53 = *(_QWORD *)(v50 + 16);
    v52 = (_QWORD *)(v50 + 16);
    v51 = v53;
    if (v53 - (uint64_t)v45 >= v48)
    {
      bzero(v45, v48);
      *v44 = &v45[v48];
      v22 = v49;
      goto LABEL_68;
    }
    v54 = (char **)v43;
    if (v142 < 0)
      sub_2394189F8();
    v55 = v51 - (_QWORD)v46;
    v56 = 2 * v55;
    if (2 * v55 <= v49)
      v56 = v49;
    if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
      v57 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v57 = v56;
    v139 = v57;
    v58 = (char *)operator new(v57);
    v137 = &v58[v47];
    bzero(&v58[v47], v48);
    if (v45 == v46)
    {
      v62 = &v58[v47];
      v59 = v139;
      v61 = v52;
      goto LABEL_66;
    }
    if (v47 < 8)
    {
      v60 = &v58[v47];
      v59 = v139;
      v61 = v52;
      goto LABEL_63;
    }
    v60 = &v58[v47];
    v59 = v139;
    v61 = v52;
    if ((unint64_t)(v46 - v58) >= 0x20)
    {
      if (v47 < 0x20)
      {
        v63 = 0;
        goto LABEL_58;
      }
      v63 = v47 & 0xFFFFFFFFFFFFFFE0;
      v64 = &v58[v47 - 16];
      v65 = v45 - 16;
      v66 = v47 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v8 = *((_OWORD *)v65 - 1);
        v7 = *(_OWORD *)v65;
        *((_OWORD *)v64 - 1) = v8;
        *(_OWORD *)v64 = v7;
        v64 -= 32;
        v65 -= 32;
        v66 -= 32;
      }
      while (v66);
      if (v47 == v63)
        goto LABEL_65;
      if ((v47 & 0x18) != 0)
      {
LABEL_58:
        v60 = &v137[-(v47 & 0xFFFFFFFFFFFFFFF8)];
        v67 = &v58[&v45[-v63] - v46 - 8];
        v68 = &v45[-v63 - 8];
        v69 = v63 - (v47 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v70 = *(_QWORD *)v68;
          v68 -= 8;
          *(_QWORD *)&v7 = v70;
          *(_QWORD *)v67 = v70;
          v67 -= 8;
          v69 += 8;
        }
        while (v69);
        v45 -= v47 & 0xFFFFFFFFFFFFFFF8;
        if (v47 == (v47 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_65;
        goto LABEL_63;
      }
      v60 = &v137[-v63];
      v45 -= v63;
    }
LABEL_63:
    v71 = v60 - 1;
    do
    {
      v72 = *--v45;
      *v71-- = v72;
    }
    while (v45 != v46);
LABEL_65:
    v45 = v46;
    v62 = v58;
LABEL_66:
    *v54 = v62;
    v22 = v141;
    *v44 = &v58[v141];
    *v61 = &v58[v59];
    if (v45)
      operator delete(v45);
    goto LABEL_68;
  }
LABEL_97:
  v98 = *(_QWORD *)(a1 + 392);
  v99 = (*(_QWORD *)(a1 + 400) - v98) >> 2;
  if (v22 <= v99)
  {
    v100 = v136;
    if (v22 < v99)
      *(_QWORD *)(a1 + 400) = v98 + 4 * v22;
  }
  else
  {
    sub_23942CB44(a1 + 392, v22 - v99);
    v100 = v136;
  }
  v101 = *(_QWORD *)(a1 + 256);
  if (v101 <= *(_QWORD *)(a1 + 264))
    v101 = *(_QWORD *)(a1 + 264);
  v102 = *(_QWORD *)(a1 + 296);
  v103 = (*(_QWORD *)(a1 + 304) - v102) >> 2;
  if (v101 <= v103)
  {
    if (v101 < v103)
      *(_QWORD *)(a1 + 304) = v102 + 4 * v101;
  }
  else
  {
    sub_23942CB44(a1 + 296, v101 - v103);
  }
  v104 = *(_QWORD *)(a1 + 416);
  v105 = (*(_QWORD *)(a1 + 424) - v104) >> 2;
  if (v22 <= v105)
  {
    if (v22 < v105)
      *(_QWORD *)(a1 + 424) = v104 + 4 * v22;
  }
  else
  {
    sub_23942CB44(a1 + 416, v22 - v105);
  }
  v106 = *(_QWORD *)(a1 + 256);
  if (v106 <= *(_QWORD *)(a1 + 264))
    v106 = *(_QWORD *)(a1 + 264);
  v107 = *(_QWORD *)(a1 + 320);
  v108 = (*(_QWORD *)(a1 + 328) - v107) >> 2;
  if (v106 <= v108)
  {
    if (v106 < v108)
      *(_QWORD *)(a1 + 328) = v107 + 4 * v106;
  }
  else
  {
    sub_23942CB44(a1 + 320, v106 - v108);
  }
  v109 = *(_QWORD *)(a1 + 440);
  v110 = (*(_QWORD *)(a1 + 448) - v109) >> 2;
  if (v22 <= v110)
  {
    if (v22 < v110)
      *(_QWORD *)(a1 + 448) = v109 + 4 * v22;
  }
  else
  {
    sub_23942CB44(a1 + 440, v22 - v110);
  }
  v111 = *(_QWORD *)(a1 + 256);
  if (v111 <= *(_QWORD *)(a1 + 264))
    v111 = *(_QWORD *)(a1 + 264);
  v112 = *(_QWORD *)(a1 + 344);
  v113 = (*(_QWORD *)(a1 + 352) - v112) >> 2;
  if (v111 <= v113)
  {
    if (v111 < v113)
      *(_QWORD *)(a1 + 352) = v112 + 4 * v111;
  }
  else
  {
    sub_23942CB44(a1 + 344, v111 - v113);
  }
  v114 = *(_QWORD *)(a1 + 464);
  v115 = (*(_QWORD *)(a1 + 472) - v114) >> 2;
  if (v22 <= v115)
  {
    if (v22 < v115)
      *(_QWORD *)(a1 + 472) = v114 + 4 * v22;
  }
  else
  {
    sub_23942CB44(a1 + 464, v22 - v115);
  }
  v116 = *(_QWORD *)(a1 + 256);
  if (v116 <= *(_QWORD *)(a1 + 264))
    v116 = *(_QWORD *)(a1 + 264);
  v117 = *(_QWORD *)(a1 + 368);
  v118 = (*(_QWORD *)(a1 + 376) - v117) >> 2;
  if (v116 <= v118)
  {
    if (v116 < v118)
      *(_QWORD *)(a1 + 376) = v117 + 4 * v116;
  }
  else
  {
    sub_23942CB44(a1 + 368, v116 - v118);
  }
  sub_2399C0FC4(a1, v100, 0, *(double *)&v7, *(double *)&v8, v9, v10, v11, v12);
  *(float *)(a1 + 184) = (float)v134 / (float)v135;
  v119 = *(_DWORD **)(a1 + 584);
  if (v134 >= 0)
    v120 = v134;
  else
    v120 = v134 + 1;
  v121 = (int)(-1431655765 * ((*(_QWORD *)(a1 + 592) - (_QWORD)v119) >> 3)) / 2 - (v120 >> 1);
  v122 = v121 + v134;
  *(_DWORD *)(a1 + 156) = v121;
  *(_DWORD *)(a1 + 160) = v121 + v134;
  v123 = (v119[2] - *v119) / 2;
  if (v135 >= 0)
    v124 = v135;
  else
    v124 = v135 + 1;
  v125 = v123 - (v124 >> 1);
  LODWORD(v126) = v125 + v135;
  *(_DWORD *)(a1 + 148) = v125;
  *(_DWORD *)(a1 + 152) = v125 + v135;
  if (v134 >= 1 && v135 > 0)
  {
    v127 = v121;
    do
    {
      v128 = *(int *)(a1 + 148);
      if ((int)v128 < (int)v126)
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 584) + 24 * v127) + v128) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 24 * (v127 - *(int *)(a1 + 156)))
                                                                                       - *(int *)(a1 + 148)
                                                                                       + v128);
          ++v128;
          v126 = *(int *)(a1 + 152);
        }
        while (v128 < v126);
        v122 = *(_DWORD *)(a1 + 160);
      }
      ++v127;
    }
    while (v127 < v122);
    v125 = *(_DWORD *)(a1 + 148);
    v121 = *(_DWORD *)(a1 + 156);
  }
  v129 = *(float *)(a1 + 288);
  v130 = *(_QWORD *)(a1 + 680) + 232 * v100;
  v131 = *(float *)(v130 + 20);
  v132 = *(_QWORD *)(a1 + 728) + (v100 << 6);
  *(float *)(v132 + 48) = -(float)(*(float *)(v130 + 16) - (float)(v129 * (float)v125));
  *(float *)(v132 + 52) = -(float)(v131 - (float)(v129 * (float)v121));
  *(_OWORD *)v132 = xmmword_239F02850;
  *(_OWORD *)(v132 + 16) = xmmword_239ECEFC0;
  *(_OWORD *)(v132 + 32) = xmmword_239ECEFD0;
  *(_QWORD *)(v132 + 56) = 0x3F80000000000000;
  return sub_2399C13E0(a1, a1 + 296, a1 + 584, v125, v126, v121, v122, 0);
}

uint64_t sub_2399BFDB4(uint64_t result, unsigned int a2, double a3, double a4, double a5, double a6, double a7, __n128 a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  float v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  _BYTE *v23;
  char *v24;
  size_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _BYTE *v32;
  unint64_t v33;
  char *v34;
  void *v35;
  _BYTE *v36;
  char *v37;
  size_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  _BYTE *v42;
  unint64_t v43;
  char *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  _BYTE *v49;
  char *v50;
  size_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  _BYTE *v58;
  unint64_t v59;
  char *v60;
  void *v61;
  _BYTE *v62;
  char *v63;
  size_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  _BYTE *v71;
  unint64_t v72;
  char *v73;
  void *v74;
  unint64_t v75;
  int *v76;
  unint64_t v77;
  int *v78;
  int v79;
  unint64_t v80;
  int *v81;
  unint64_t v82;
  int *v83;
  int v84;
  unint64_t v85;
  int *v86;
  unint64_t v87;
  int *v88;
  int v89;
  unint64_t v90;
  int *v91;
  unint64_t v92;
  int *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  int v107;
  _QWORD *v108;
  _QWORD *v109;
  NSObject *v110;
  uint64_t (***v111)();
  int *v112;
  uint64_t v113;
  int v114;
  BOOL v115;
  BOOL v116;
  BOOL v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int **v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  int **v126;
  int **v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  __n128 v131;
  __n128 v132;
  __int128 v133;
  __int128 v134;
  int *v135;
  unsigned int v136;
  uint64_t (**context)();
  __int128 v138;
  uint64_t (***p_context)();
  unsigned int *v140;
  unsigned int v141;
  uint64_t *v142;
  unsigned int v143;
  int v144;
  uint64_t (**v145)();
  __int128 v146;
  uint64_t (***v147)();
  uint64_t v148;
  _BYTE v149[20];
  _BYTE v150[32];
  _BYTE v151[32];
  _BYTE v152[32];
  _BYTE v153[32];
  float v154[3];
  _BYTE v155[20];
  _BYTE v156[32];
  _BYTE v157[32];
  float v158;
  uint64_t v159;

  v159 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(result + 680);
  if (*(_BYTE *)(v8 + 232 * a2 + 4))
  {
    v9 = a2;
    v10 = result;
    *(_DWORD *)(result + 200) = 0x7FFFFFFF;
    LODWORD(a3) = *(_DWORD *)(result + 184);
    LODWORD(a4) = *(_DWORD *)(result + 132);
    if (*(float *)&a3 <= *(float *)&a4)
    {
      if (*(float *)&a3 < *(float *)&a4)
      {
        v13 = 1;
      }
      else
      {
        v12 = rand();
        LODWORD(a4) = 0.5;
        *(float *)&a3 = (float)v12 + 0.5;
        v13 = vcvtms_s32_f32(*(float *)&a3);
      }
      v136 = v13;
    }
    else
    {
      v136 = 0;
    }
    v14 = 0;
    v15 = 0;
    v129 = 0;
    v148 = 0;
    *(_DWORD *)v149 = 0x7FFFFFFF;
    *(_OWORD *)&v149[4] = 0uLL;
    *(_QWORD *)v150 = 0;
    *(_QWORD *)&v150[8] = 0x7FFFFFFF00000000;
    *(_QWORD *)&v150[16] = 0;
    *(_QWORD *)v151 = 0;
    *(_QWORD *)&v150[24] = 0;
    *(_QWORD *)&v151[8] = 0x7FFFFFFF00000000;
    *(_QWORD *)&v151[16] = 0;
    *(_QWORD *)v152 = 0;
    *(_QWORD *)&v151[24] = 0;
    *(_QWORD *)&v152[8] = 0x7FFFFFFF00000000;
    *(_QWORD *)v153 = 0;
    *(_QWORD *)&v152[16] = 0;
    *(_QWORD *)&v152[24] = 0;
    *(_QWORD *)&v153[8] = 0x7FFFFFFF00000000;
    *(_QWORD *)&v153[24] = 0;
    v124 = v8 + 232 * a2 + 16;
    *(_QWORD *)&v153[16] = 0;
    v122 = (int **)(v10 + 536);
    memset(v154, 0, sizeof(v154));
    v126 = (int **)(v10 + 488);
    v127 = (int **)(v10 + 512);
    *(_DWORD *)v155 = 0x7FFFFFFF;
    v16 = 0uLL;
    *(_QWORD *)&v155[12] = 0;
    *(_QWORD *)&v155[4] = 0;
    v17 = 0.0;
    *(_QWORD *)&v156[8] = 0x7FFFFFFF00000000;
    *(_QWORD *)&v157[8] = 0x7FFFFFFF00000000;
    a8.n128_u64[0] = 0x7FFFFFFFLL;
    *(_QWORD *)v156 = 0;
    *(_QWORD *)&v156[24] = 0;
    *(_QWORD *)&v156[16] = 0;
    *(_QWORD *)v157 = 0;
    *(_QWORD *)&v157[24] = 0;
    *(_QWORD *)&v157[16] = 0;
    v158 = 0.0;
    v123 = v9;
    while (1)
    {
      v132 = a8;
      v134 = v16;
      v128 = v15;
      v20 = v14;
      v21 = v124 + 72 * v14;
      v130 = v20;
      sub_2399C0FC4(v10, v9, v20, a3, a4, a5, a6, *(double *)&v16, a8.n128_f64[0]);
      v22 = (int *)(v21 + 24);
      v135 = (int *)(v21 + 28);
      sub_2399C13E0(v10, v10 + 392, v10 + 608, 0, *(_DWORD *)(v21 + 24), 0, *(_DWORD *)(v21 + 28), 1);
      v24 = *(char **)(v10 + 392);
      v23 = *(_BYTE **)(v10 + 400);
      v25 = v23 - v24;
      v26 = (v23 - v24) >> 2;
      v27 = *(_QWORD *)(v10 + 504);
      v28 = *(char **)(v10 + 488);
      if (v26 <= (v27 - (uint64_t)v28) >> 2)
      {
        v32 = *(_BYTE **)(v10 + 496);
        v33 = (v32 - v28) >> 2;
        if (v33 >= v26)
        {
          if (v23 == v24)
            goto LABEL_32;
          v35 = *(void **)(v10 + 488);
          v34 = *(char **)(v10 + 392);
          goto LABEL_31;
        }
        if (v32 != v28)
        {
          memmove(*(void **)(v10 + 488), *(const void **)(v10 + 392), v32 - v28);
          v28 = *(char **)(v10 + 496);
        }
        v34 = &v24[4 * v33];
        v25 = v23 - v34;
        if (v23 != v34)
        {
          v35 = v28;
LABEL_31:
          memmove(v35, v34, v25);
        }
      }
      else
      {
        if (v28)
        {
          *(_QWORD *)(v10 + 496) = v28;
          operator delete(v28);
          v27 = 0;
          *v126 = 0;
          *(_QWORD *)(v10 + 496) = 0;
          *(_QWORD *)(v10 + 504) = 0;
        }
        if ((v25 & 0x8000000000000000) != 0)
LABEL_236:
          sub_2394189F8();
        v29 = v27 >> 1;
        if (v27 >> 1 <= v26)
          v29 = (v23 - v24) >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        if (v30 >> 62)
LABEL_235:
          sub_2394189F8();
        v31 = (char *)operator new(4 * v30);
        v28 = v31;
        *(_QWORD *)(v10 + 488) = v31;
        *(_QWORD *)(v10 + 496) = v31;
        *(_QWORD *)(v10 + 504) = &v31[4 * v30];
        if (v23 != v24)
          memcpy(v31, v24, v23 - v24);
      }
LABEL_32:
      *(_QWORD *)(v10 + 496) = &v28[v25];
      v37 = *(char **)(v10 + 416);
      v36 = *(_BYTE **)(v10 + 424);
      v38 = v36 - v37;
      v39 = (v36 - v37) >> 2;
      v40 = *(_QWORD *)(v10 + 528);
      v41 = *(char **)(v10 + 512);
      if (v39 <= (v40 - (uint64_t)v41) >> 2)
      {
        v42 = *(_BYTE **)(v10 + 520);
        v43 = (v42 - v41) >> 2;
        if (v43 >= v39)
        {
          if (v36 == v37)
            goto LABEL_53;
          v45 = *(void **)(v10 + 512);
          v44 = *(char **)(v10 + 416);
          goto LABEL_43;
        }
        if (v42 != v41)
        {
          memmove(*(void **)(v10 + 512), *(const void **)(v10 + 416), v42 - v41);
          v41 = *(char **)(v10 + 520);
        }
        v44 = &v37[4 * v43];
        v38 = v36 - v44;
        if (v36 != v44)
        {
          v45 = v41;
LABEL_43:
          memmove(v45, v44, v38);
        }
      }
      else
      {
        if (v41)
        {
          *(_QWORD *)(v10 + 520) = v41;
          operator delete(v41);
          v40 = 0;
          *v127 = 0;
          *(_QWORD *)(v10 + 520) = 0;
          *(_QWORD *)(v10 + 528) = 0;
          if ((v38 & 0x8000000000000000) != 0)
            goto LABEL_236;
        }
        else if ((v38 & 0x8000000000000000) != 0)
        {
          goto LABEL_236;
        }
        v46 = v40 >> 1;
        if (v40 >> 1 <= v39)
          v46 = (v36 - v37) >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47 >> 62)
          goto LABEL_235;
        v48 = (char *)operator new(4 * v47);
        v41 = v48;
        *(_QWORD *)(v10 + 512) = v48;
        *(_QWORD *)(v10 + 520) = v48;
        *(_QWORD *)(v10 + 528) = &v48[4 * v47];
        if (v36 != v37)
          memcpy(v48, v37, v36 - v37);
      }
LABEL_53:
      *(_QWORD *)(v10 + 520) = &v41[v38];
      v50 = *(char **)(v10 + 440);
      v49 = *(_BYTE **)(v10 + 448);
      v51 = v49 - v50;
      v52 = (v49 - v50) >> 2;
      v53 = *(_QWORD *)(v10 + 552);
      v54 = *(char **)(v10 + 536);
      if (v52 <= (v53 - (uint64_t)v54) >> 2)
      {
        v58 = *(_BYTE **)(v10 + 544);
        v59 = (v58 - v54) >> 2;
        if (v59 >= v52)
        {
          if (v49 == v50)
            goto LABEL_73;
          v61 = *(void **)(v10 + 536);
          v60 = *(char **)(v10 + 440);
          goto LABEL_72;
        }
        if (v58 != v54)
        {
          memmove(*(void **)(v10 + 536), *(const void **)(v10 + 440), v58 - v54);
          v54 = *(char **)(v10 + 544);
        }
        v60 = &v50[4 * v59];
        v51 = v49 - v60;
        if (v49 != v60)
        {
          v61 = v54;
LABEL_72:
          memmove(v61, v60, v51);
        }
      }
      else
      {
        if (v54)
        {
          *(_QWORD *)(v10 + 544) = v54;
          operator delete(v54);
          v53 = 0;
          *v122 = 0;
          *(_QWORD *)(v10 + 544) = 0;
          *(_QWORD *)(v10 + 552) = 0;
        }
        if ((v51 & 0x8000000000000000) != 0)
          goto LABEL_236;
        v55 = v53 >> 1;
        if (v53 >> 1 <= v52)
          v55 = (v49 - v50) >> 2;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
          v56 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56 >> 62)
          goto LABEL_235;
        v57 = (char *)operator new(4 * v56);
        v54 = v57;
        *(_QWORD *)(v10 + 536) = v57;
        *(_QWORD *)(v10 + 544) = v57;
        *(_QWORD *)(v10 + 552) = &v57[4 * v56];
        if (v49 != v50)
          memcpy(v57, v50, v49 - v50);
      }
LABEL_73:
      *(_QWORD *)(v10 + 544) = &v54[v51];
      v63 = *(char **)(v10 + 464);
      v62 = *(_BYTE **)(v10 + 472);
      v64 = v62 - v63;
      v65 = (v62 - v63) >> 2;
      v66 = *(_QWORD *)(v10 + 576);
      v67 = *(char **)(v10 + 560);
      if (v65 <= (v66 - (uint64_t)v67) >> 2)
      {
        v71 = *(_BYTE **)(v10 + 568);
        v72 = (v71 - v67) >> 2;
        if (v72 >= v65)
        {
          if (v62 == v63)
            goto LABEL_93;
          v74 = *(void **)(v10 + 560);
          v73 = *(char **)(v10 + 464);
          goto LABEL_92;
        }
        if (v71 != v67)
        {
          memmove(*(void **)(v10 + 560), *(const void **)(v10 + 464), v71 - v67);
          v67 = *(char **)(v10 + 568);
        }
        v73 = &v63[4 * v72];
        v64 = v62 - v73;
        if (v62 != v73)
        {
          v74 = v67;
LABEL_92:
          memmove(v74, v73, v64);
        }
      }
      else
      {
        if (v67)
        {
          *(_QWORD *)(v10 + 568) = v67;
          operator delete(v67);
          v66 = 0;
          *(_QWORD *)(v10 + 560) = 0;
          *(_QWORD *)(v10 + 568) = 0;
          *(_QWORD *)(v10 + 576) = 0;
        }
        if ((v64 & 0x8000000000000000) != 0)
          goto LABEL_236;
        v68 = v66 >> 1;
        if (v66 >> 1 <= v65)
          v68 = (v62 - v63) >> 2;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v68;
        if (v69 >> 62)
          goto LABEL_235;
        v70 = (char *)operator new(4 * v69);
        v67 = v70;
        *(_QWORD *)(v10 + 560) = v70;
        *(_QWORD *)(v10 + 568) = v70;
        *(_QWORD *)(v10 + 576) = &v70[4 * v69];
        if (v62 != v63)
          memcpy(v70, v63, v62 - v63);
      }
LABEL_93:
      *(_QWORD *)(v10 + 568) = &v67[v64];
      v75 = *v135;
      if (v75 >= 2)
      {
        v76 = *(int **)(v10 + 560);
        v77 = v75 >> 1;
        v78 = &v76[v75 - 1];
        do
        {
          v79 = *v76;
          *v76++ = *v78;
          *v78-- = v79;
          --v77;
        }
        while (v77);
      }
      v80 = *v22;
      if (v80 >= 2)
      {
        v81 = *v122;
        v82 = v80 >> 1;
        v83 = &(*v122)[v80 - 1];
        do
        {
          v84 = *v81;
          *v81++ = *v83;
          *v83-- = v84;
          --v82;
        }
        while (v82);
      }
      v85 = *v135;
      if (v85 >= 2)
      {
        v86 = *v127;
        v87 = v85 >> 1;
        v88 = &(*v127)[v85 - 1];
        do
        {
          v89 = *v86;
          *v86++ = *v88;
          *v88-- = v89;
          --v87;
        }
        while (v87);
      }
      v90 = *v22;
      if (v90 >= 2)
      {
        v91 = *v126;
        v92 = v90 >> 1;
        v93 = &(*v126)[v90 - 1];
        do
        {
          v94 = *v91;
          *v91++ = *v93;
          *v93-- = v94;
          --v92;
        }
        while (v92);
      }
      v145 = &off_250AF1220;
      *(_QWORD *)&v146 = v10;
      *((_QWORD *)&v146 + 1) = v21;
      v147 = &v145;
      *(_DWORD *)(v10 + 188) = v130;
      if (v130)
      {
        if (!v136)
        {
          v95 = 0;
          v96 = 1;
          v97 = 3u;
          v98 = 1;
          v143 = 3u;
          v144 = 1;
          if (!*(_BYTE *)(v10 + 752))
            goto LABEL_108;
          goto LABEL_130;
        }
        goto LABEL_129;
      }
      if (v136)
      {
        *(_DWORD *)v150 = 1343554297;
        *(_DWORD *)v151 = 1343554297;
        *(_DWORD *)v152 = 1343554297;
        *(_DWORD *)v153 = 1343554297;
        v154[0] = 1.0e10;
        *(_DWORD *)v156 = 1343554297;
        *(_DWORD *)v157 = 1343554297;
        v158 = 1.0e10;
        v17 = 1.0e10;
LABEL_129:
        v97 = 0;
        v96 = 0;
        v98 = 2;
        v95 = 1;
        v143 = 0;
        v144 = 2;
        if (!*(_BYTE *)(v10 + 752))
          goto LABEL_108;
        goto LABEL_130;
      }
      v95 = 0;
      *(_DWORD *)v150 = -803929351;
      *(_DWORD *)v151 = -803929351;
      *(_DWORD *)v152 = -803929351;
      *(_DWORD *)v153 = -803929351;
      v154[0] = -1.0e10;
      *(_DWORD *)v156 = -803929351;
      v96 = 1;
      v97 = 3;
      *(_DWORD *)v157 = -803929351;
      v158 = -1.0e10;
      v17 = -1.0e10;
      v98 = 1;
      v143 = 3;
      v144 = 1;
      if (!*(_BYTE *)(v10 + 752))
      {
LABEL_108:
        LODWORD(context) = 0;
        if (v136)
          v99 = 156;
        else
          v99 = 148;
        v125 = v96;
        if (v136)
          v100 = 160;
        else
          v100 = 152;
        v101 = *(_DWORD *)(v10 + v100);
        v102 = *(_DWORD *)(v10 + v99);
        if (v136)
          v103 = 148;
        else
          v103 = 156;
        if (v136)
          v104 = 152;
        else
          v104 = 160;
        v105 = v101 - v102;
        v106 = *(_DWORD *)(v10 + v103);
        v107 = *(_DWORD *)(v10 + v104);
        if (v95)
          v108 = (_QWORD *)(v10 + 488);
        else
          v108 = (_QWORD *)(v10 + 392);
        sub_2399C1B84(v10, v108, v97, 90 * (((_BYTE)v97 + 2) & 3), *v135, v105, v106, v107, *v22, (uint64_t)&v148);
        LODWORD(context) = 0;
        if ((v125 & (v95 ^ 1)) != 0)
          v109 = (_QWORD *)(v10 + 488);
        else
          v109 = (_QWORD *)(v10 + 392);
        sub_2399C1B84(v10, v109, v98, 90 * (((_BYTE)v98 + 2) & 3), *v135, v105, v106, v107, *v22, (uint64_t)&v150[4]);
        LODWORD(context) = 1;
        __asm { BR              X9 ; loc_2399C0674 loc_2399C07B0 }
      }
LABEL_130:
      context = &off_250AF1220;
      v138 = v146;
      p_context = &context;
      v140 = &v143;
      v141 = v136;
      v142 = &v148;
      v110 = dispatch_queue_create("com.gcd.task2", MEMORY[0x24BDAC9C0]);
      dispatch_apply_f(8uLL, v110, &context, (void (__cdecl *)(void *, size_t))sub_2399C2CF8);
      dispatch_release(v110);
      v111 = p_context;
      if (p_context == &context)
      {
        v111 = &context;
        v113 = 4;
        v15 = v128;
        v112 = (int *)(v21 + 28);
      }
      else
      {
        v15 = v128;
        v112 = (int *)(v21 + 28);
        if (!p_context)
          goto LABEL_135;
        v113 = 5;
      }
      (*v111)[v113]();
LABEL_135:
      v114 = v129;
      a8 = v132;
      v16 = v134;
      if (*(float *)v150 < v17 && (*(_DWORD *)&v149[16] | 2) == 2
        || *(float *)v150 > v17 && (*(_DWORD *)&v149[16] | 2) == 3
        || (a4 = vabds_f32(*(float *)v150, v17), a5 = 0.000001, a4 < 0.000001)
        && (*(int *)v149 < v132.n128_i32[0]
         || ((*(float *)&a4 = fabsf((float)(*(_DWORD *)v149 - v132.n128_u32[0])),
              LODWORD(a6) = 1028443341,
              *(float *)&a5 = (float)v132.n128_i32[0] * 0.05,
              *(float *)&a4 < *(float *)&a5)
           ? (v115 = (int)v134 < *(_DWORD *)&v149[8])
           : (v115 = 0),
             v115)))
      {
        v15 = v148;
        a8.n128_u64[0] = *(_QWORD *)v149;
        *(_QWORD *)&v16 = *(_QWORD *)&v149[8];
        v17 = *(float *)v150;
        v114 = *(_DWORD *)&v149[16];
      }
      if (*(float *)v151 < v17 && (*(_DWORD *)&v150[28] | 2) == 2
        || *(float *)v151 > v17 && (*(_DWORD *)&v150[28] | 2) == 3
        || (a4 = vabds_f32(*(float *)v151, v17), a5 = 0.000001, a4 < 0.000001)
        && (*(int *)&v150[12] < a8.n128_i32[0]
         || ((*(float *)&a4 = fabsf((float)(*(_DWORD *)&v150[12] - a8.n128_u32[0])),
              LODWORD(a6) = 1028443341,
              *(float *)&a5 = (float)a8.n128_i32[0] * 0.05,
              *(float *)&a4 < *(float *)&a5)
           ? (v116 = (int)v16 < *(_DWORD *)&v150[20])
           : (v116 = 0),
             v116)))
      {
        v15 = *(_QWORD *)&v150[4];
        a8.n128_u64[0] = *(_QWORD *)&v150[12];
        *(_QWORD *)&v16 = *(_QWORD *)&v150[20];
        v17 = *(float *)v151;
        v114 = *(_DWORD *)&v150[28];
      }
      if (*(float *)v152 < v17 && (*(_DWORD *)&v151[28] | 2) == 2
        || *(float *)v152 > v17 && (*(_DWORD *)&v151[28] | 2) == 3
        || (a4 = vabds_f32(*(float *)v152, v17), a5 = 0.000001, a4 < 0.000001)
        && (*(int *)&v151[12] < a8.n128_i32[0]
         || ((*(float *)&a4 = fabsf((float)(*(_DWORD *)&v151[12] - a8.n128_u32[0])),
              LODWORD(a6) = 1028443341,
              *(float *)&a5 = (float)a8.n128_i32[0] * 0.05,
              *(float *)&a4 < *(float *)&a5)
           ? (v117 = (int)v16 < *(_DWORD *)&v151[20])
           : (v117 = 0),
             v117)))
      {
        v15 = *(_QWORD *)&v151[4];
        a8.n128_u64[0] = *(_QWORD *)&v151[12];
        *(_QWORD *)&v16 = *(_QWORD *)&v151[20];
        v17 = *(float *)v152;
        v114 = *(_DWORD *)&v151[28];
      }
      if (*(float *)v153 < v17 && (*(_DWORD *)&v152[28] | 2) == 2
        || *(float *)v153 > v17 && (*(_DWORD *)&v152[28] | 2) == 3
        || (a4 = vabds_f32(*(float *)v153, v17), a5 = 0.000001, a4 < 0.000001)
        && (*(int *)&v152[12] < a8.n128_i32[0]
         || (*(float *)&a4 = fabsf((float)(*(_DWORD *)&v152[12] - a8.n128_u32[0])),
             LODWORD(a6) = 1028443341,
             *(float *)&a5 = (float)a8.n128_i32[0] * 0.05,
             *(float *)&a4 < *(float *)&a5)
         && (int)v16 < *(int *)&v152[20]))
      {
        v15 = *(_QWORD *)&v152[4];
        a8.n128_u64[0] = *(_QWORD *)&v152[12];
        *(_QWORD *)&v16 = *(_QWORD *)&v152[20];
        v17 = *(float *)v153;
        v114 = *(_DWORD *)&v152[28];
      }
      if (v154[0] < v17 && (*(_DWORD *)&v153[28] | 2) == 2
        || v154[0] > v17 && (*(_DWORD *)&v153[28] | 2) == 3
        || (a4 = vabds_f32(v154[0], v17), a5 = 0.000001, a4 < 0.000001)
        && (*(int *)&v153[12] < a8.n128_i32[0]
         || (*(float *)&a4 = fabsf((float)(*(_DWORD *)&v153[12] - a8.n128_u32[0])),
             LODWORD(a6) = 1028443341,
             *(float *)&a5 = (float)a8.n128_i32[0] * 0.05,
             *(float *)&a4 < *(float *)&a5)
         && (int)v16 < *(int *)&v153[20]))
      {
        v15 = *(_QWORD *)&v153[4];
        a8.n128_u64[0] = *(_QWORD *)&v153[12];
        *(_QWORD *)&v16 = *(_QWORD *)&v153[20];
        v17 = v154[0];
        v114 = *(_DWORD *)&v153[28];
      }
      if (*(float *)v156 < v17 && (*(_DWORD *)&v155[16] | 2) == 2
        || *(float *)v156 > v17 && (*(_DWORD *)&v155[16] | 2) == 3
        || (a4 = vabds_f32(*(float *)v156, v17), a5 = 0.000001, a4 < 0.000001)
        && (*(int *)v155 < a8.n128_i32[0]
         || (*(float *)&a4 = fabsf((float)(*(_DWORD *)v155 - a8.n128_u32[0])),
             LODWORD(a6) = 1028443341,
             *(float *)&a5 = (float)a8.n128_i32[0] * 0.05,
             *(float *)&a4 < *(float *)&a5)
         && (int)v16 < *(int *)&v155[8]))
      {
        v15 = *(_QWORD *)&v154[1];
        a8.n128_u64[0] = *(_QWORD *)v155;
        *(_QWORD *)&v16 = *(_QWORD *)&v155[8];
        v17 = *(float *)v156;
        v114 = *(_DWORD *)&v155[16];
      }
      if (*(float *)v157 < v17 && (*(_DWORD *)&v156[28] | 2) == 2
        || *(float *)v157 > v17 && (*(_DWORD *)&v156[28] | 2) == 3
        || (a4 = vabds_f32(*(float *)v157, v17), a5 = 0.000001, a4 < 0.000001)
        && (*(int *)&v156[12] < a8.n128_i32[0]
         || (*(float *)&a4 = fabsf((float)(*(_DWORD *)&v156[12] - a8.n128_u32[0])),
             LODWORD(a6) = 1028443341,
             *(float *)&a5 = (float)a8.n128_i32[0] * 0.05,
             *(float *)&a4 < *(float *)&a5)
         && (int)v16 < *(int *)&v156[20]))
      {
        v15 = *(_QWORD *)&v156[4];
        a8.n128_u64[0] = *(_QWORD *)&v156[12];
        *(_QWORD *)&v16 = *(_QWORD *)&v156[20];
        v17 = *(float *)v157;
        v114 = *(_DWORD *)&v156[28];
      }
      *(float *)&a3 = v158;
      if (v158 < v17 && (*(_DWORD *)&v157[28] | 2) == 2
        || v158 > v17 && (*(_DWORD *)&v157[28] | 2) == 3
        || (a4 = vabds_f32(v158, v17), a5 = 0.000001, a4 < 0.000001)
        && (*(int *)&v157[12] < a8.n128_i32[0]
         || (*(float *)&a4 = fabsf((float)(*(_DWORD *)&v157[12] - a8.n128_u32[0])),
             LODWORD(a6) = 1028443341,
             *(float *)&a5 = (float)a8.n128_i32[0] * 0.05,
             *(float *)&a4 < *(float *)&a5)
         && (int)v16 < *(int *)&v157[20]))
      {
        v15 = *(_QWORD *)&v157[4];
        a8.n128_u64[0] = *(_QWORD *)&v157[12];
        *(_QWORD *)&v16 = *(_QWORD *)&v157[20];
        v17 = v158;
        v114 = *(_DWORD *)&v157[28];
      }
      *(_QWORD *)(v10 + 192) = v15;
      *(float *)(v10 + 220) = v17;
      *(_QWORD *)(v10 + 200) = a8.n128_u64[0];
      *(_QWORD *)(v10 + 208) = v16;
      v129 = v114;
      *(_DWORD *)(v10 + 216) = v114;
      if (v15 == v130)
      {
        v118 = *v112;
        if (*v112)
        {
          v119 = 0;
          LODWORD(v120) = *v22;
          do
          {
            if ((_DWORD)v120)
            {
              v121 = 0;
              do
              {
                *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 224) + 24 * v119) + v121) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v10 + 608) + 24 * v119)
                                                                                              + v121);
                ++v121;
                v120 = *v22;
              }
              while (v121 < v120);
              v118 = *v112;
            }
            ++v119;
          }
          while (v119 < v118);
        }
      }
      v18 = v147;
      if (v147 == &v145)
      {
        v131 = a8;
        v133 = v16;
        v18 = &v145;
        v19 = 4;
        v9 = v123;
      }
      else
      {
        v9 = v123;
        if (!v147)
          goto LABEL_11;
        v131 = a8;
        v133 = v16;
        v19 = 5;
      }
      (*v18)[v19]();
      a8 = v131;
      v16 = v133;
LABEL_11:
      v14 = v130 + 1;
      if (v130 == 2)
        return sub_2399C1630(v10, v9);
    }
  }
  return result;
}

void sub_2399C0F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t *a54)
{
  if (a54 == &a51)
  {
    (*(void (**)(void))(a51 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a54)
  {
    (*(void (**)(void))(*a54 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399C0FC4(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  float32x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  float32x2_t v13;
  float32x2_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  float32x2_t v24;
  float32x2_t *v25;
  float32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float v38;
  int v39;
  float v40;
  int v42;

  v9 = *(_QWORD *)(a1 + 680) + 232 * a2 + 16;
  v10 = (float32x2_t *)(v9 + 72 * a3);
  v11 = v10[3].i32[0];
  v12 = v10[3].i32[1];
  v13 = v10[1];
  v14 = v10[4];
  if ((_DWORD)v12)
    v15 = (_DWORD)v11 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    v16 = 0;
    do
    {
      v17 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 24 * v16) + v17++) = 0;
      while (v11 != v17);
      ++v16;
    }
    while (v16 != v12);
  }
  v18 = v9 + 72 * a3;
  v21 = *(_QWORD *)(v18 + 48);
  v19 = (uint64_t *)(v18 + 48);
  v20 = v21;
  if (v19[1] == v21)
    goto LABEL_33;
  v22 = 0;
  v23 = 0;
  v24 = vsub_f32(v13, v14);
  do
  {
    v25 = (float32x2_t *)(v20 + 32 * v22);
    LODWORD(a9) = *(_DWORD *)(a1 + 288);
    v26 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a9, 0);
    v27 = vcvt_s32_f32(vrndm_f32(vdiv_f32(vsub_f32(v25[2], v24), v26)));
    v28 = vcvt_s32_f32(vrndp_f32(vdiv_f32(vsub_f32(v25[3], v24), v26)));
    v29 = vcgt_s32((int32x2_t)0x200000002, vsub_s32(v28, v27));
    if ((v29.i32[0] & v29.i32[1] & 1) != 0)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608)
                           + 24 * (unint64_t)(float)(*(float *)(a1 + 76) + (float)v27.i32[1]))
               + (unint64_t)(float)(*(float *)(a1 + 76) + (float)v27.i32[0])) = 1;
      ++v23;
    }
    else if ((v29.i8[0] & 1) != 0)
    {
      v30 = v27.i32[1] + 1;
      if (v27.i32[1] + 1 < v28.i32[1])
      {
        v31 = (float)(int)floorf((float)(v25->f32[0] - v24.f32[0]) / *(float *)&a9);
        do
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 24
                                                       * (unint64_t)(float)(*(float *)(a1 + 76) + (float)v30))
                   + (unint64_t)(float)(*(float *)(a1 + 76) + v31)) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608)
                               + 24 * (unint64_t)(float)((float)(*(float *)(a1 + 76) + (float)v30) + -1.0))
                   + (unint64_t)(float)(*(float *)(a1 + 76) + v31)) = 1;
          v23 += 2;
          ++v30;
        }
        while (v28.i32[1] != v30);
      }
    }
    else if ((v29.i8[4] & 1) != 0)
    {
      v32 = v27.i32[0] + 1;
      if (v27.i32[0] + 1 < v28.i32[0])
      {
        v33 = (float)(int)floorf((float)(v25->f32[1] - v24.f32[1]) / *(float *)&a9);
        do
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 24 * (unint64_t)(float)(*(float *)(a1 + 76) + v33))
                   + (unint64_t)(float)(*(float *)(a1 + 76) + (float)v32)) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 24 * (unint64_t)(float)(*(float *)(a1 + 76) + v33))
                   + (unint64_t)(float)((float)(*(float *)(a1 + 76) + (float)v32) + -1.0)) = 1;
          v23 += 2;
          ++v32;
        }
        while (v28.i32[0] != v32);
      }
    }
    else
    {
      v34 = v25->f32[1];
      v35 = (float)(v25[1].f32[1] - v34) / (float)(v25[1].f32[0] - v25->f32[0]);
      v36 = v34 - (float)(v25->f32[0] * v35);
      if (fabsf(v35) >= 1.0)
      {
        v39 = v27.i32[1] + 1;
        if (v27.i32[1] + 1 < v28.i32[1])
        {
          do
          {
            v40 = (float)(int)floorf((float)((float)((float)((float)(v24.f32[1] + (float)((float)v39 * *(float *)(a1 + 288)))- v36)/ v35)- v24.f32[0])/ *(float *)(a1 + 288));
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608)
                                 + 24 * (unint64_t)(float)(*(float *)(a1 + 76) + (float)v39))
                     + (unint64_t)(float)(*(float *)(a1 + 76) + v40)) = 1;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608)
                                 + 24 * (unint64_t)(float)((float)(*(float *)(a1 + 76) + (float)v39) + -1.0))
                     + (unint64_t)(float)(*(float *)(a1 + 76) + v40)) = 1;
            v23 += 2;
            ++v39;
          }
          while (v28.i32[1] != v39);
        }
      }
      else
      {
        v37 = v27.i32[0] + 1;
        if (v27.i32[0] + 1 < v28.i32[0])
        {
          do
          {
            v38 = (float)(int)floorf((float)((float)(v36+ (float)(v35* (float)(v24.f32[0] + (float)((float)v37 * *(float *)(a1 + 288)))))- v24.f32[1])/ *(float *)(a1 + 288));
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 24 * (unint64_t)(float)(*(float *)(a1 + 76) + v38))
                     + (unint64_t)(float)(*(float *)(a1 + 76) + (float)v37)) = 1;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 608) + 24 * (unint64_t)(float)(*(float *)(a1 + 76) + v38))
                     + (unint64_t)(float)((float)(*(float *)(a1 + 76) + (float)v37) + -1.0)) = 1;
            v23 += 2;
            ++v37;
          }
          while (v28.i32[0] != v37);
        }
      }
    }
    ++v22;
    v20 = *v19;
  }
  while (v22 < (v19[1] - *v19) >> 5);
  if (!v23)
  {
LABEL_33:
    v42 = (int)*(float *)(a1 + 76);
    if ((_DWORD)v11 == 2 * v42 || (_DWORD)v12 == 2 * v42)
    {
      sub_2399C27CC((_QWORD *)a1, a2, a3, v42);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    sub_2399C27CC((_QWORD *)a1, a2, a3, (int)*(float *)(a1 + 76));
    return 1;
  }
}

_QWORD *sub_2399C13E0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, char a8)
{
  _QWORD *v12;
  char *v13;
  char *v14;
  __int128 v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *result;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _DWORD context[6];
  _DWORD *v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v25 = a5;
  v26 = a4;
  v23 = a7;
  v24 = a6;
  v12 = operator new(0x40uLL);
  v12[1] = &v26;
  v13 = (char *)(v12 + 1);
  *v12 = &off_250AF1268;
  v12[2] = &v25;
  v12[3] = &v24;
  v12[4] = &v23;
  *((_BYTE *)v12 + 40) = a8;
  v12[6] = a3;
  v12[7] = a2;
  v31 = v12;
  if (*(_BYTE *)(a1 + 752))
  {
    v14 = (char *)operator new(0x40uLL);
    *(_QWORD *)v14 = &off_250AF1268;
    v15 = *((_OWORD *)v13 + 1);
    *(_OWORD *)(v14 + 8) = *(_OWORD *)v13;
    *(_OWORD *)(v14 + 24) = v15;
    *(_OWORD *)(v14 + 40) = *((_OWORD *)v13 + 2);
    *((_QWORD *)v14 + 7) = *((_QWORD *)v13 + 6);
    v28 = v14;
    v29 = 0x100000001;
    v16 = dispatch_queue_create("com.gcd.task2", MEMORY[0x24BDAC9C0]);
    v17 = 4;
    dispatch_apply_f(4uLL, v16, context, (void (__cdecl *)(void *, size_t))sub_2399C2E78);
    dispatch_release(v16);
    v20 = v28;
    if (v28 == context)
    {
      v20 = context;
LABEL_13:
      (*(void (**)(_QWORD *, uint64_t))(*v20 + 8 * v17))(v20, v18);
      result = v31;
      if (v31 == v30)
        goto LABEL_14;
      goto LABEL_10;
    }
    if (v28)
    {
      v17 = 5;
      goto LABEL_13;
    }
  }
  else
  {
    context[0] = 0;
    sub_2399C39B8((uint64_t)v12, context);
    context[0] = 1;
    if (!v31
      || ((*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)v31 + 48))(v31, context), context[0] = 2, !v31)
      || ((*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)v31 + 48))(v31, context), context[0] = 3, !v31))
    {
      sub_2394172E0();
    }
    (*(void (**)(_BYTE *, _DWORD *))(*(_QWORD *)v31 + 48))(v31, context);
  }
  result = v31;
  if (v31 == v30)
  {
LABEL_14:
    v22 = 4;
    result = v30;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*result + 8 * v22))(result, v18, v19);
  }
LABEL_10:
  if (!result)
    return result;
  v22 = 5;
  return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*result + 8 * v22))(result, v18, v19);
}

void sub_2399C15EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399C1630(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  int v14;
  int v15;
  unsigned int v16;
  signed int v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float v22;
  int v23;
  double v24;
  float v25;
  __float2 v26;
  float v27;
  float v28;
  float v29;
  __float2 v30;
  float v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  float v47;
  float v48;
  float v49;
  float v50;
  unint64_t v51;
  float v52;

  result = sub_2399C1D64(a1, a2);
  v6 = *(_DWORD *)(a1 + 168);
  v5 = *(_DWORD *)(a1 + 172);
  v7 = *(_DWORD *)(a1 + 148);
  v8 = *(_DWORD *)(a1 + 152);
  if (v6 < v7)
    v7 = *(_DWORD *)(a1 + 168);
  v10 = *(_DWORD *)(a1 + 176);
  v9 = *(_DWORD *)(a1 + 180);
  v11 = *(_DWORD *)(a1 + 156);
  v12 = *(_DWORD *)(a1 + 160);
  if (v10 < v11)
    v11 = *(_DWORD *)(a1 + 176);
  if (v5 > v8)
    v8 = *(_DWORD *)(a1 + 172);
  if (v9 > v12)
    v12 = *(_DWORD *)(a1 + 180);
  v13 = *(float *)(a1 + 76);
  v14 = (int)(float)((float)(v8 - v7) + (float)(v13 * -2.0));
  v15 = (int)(float)((float)(v12 - v11) + (float)(v13 * -2.0));
  v16 = **(_DWORD **)(a1 + 48);
  if ((int)v16 >= v14)
  {
    v17 = **(_DWORD **)(a1 + 56);
    if (v17 < v15)
    {
      *(_BYTE *)(a1 + 124) = 1;
      if (*(_DWORD *)(a1 + 72) >= 0x1Eu)
        return result;
      goto LABEL_14;
    }
    v19 = v10;
    v20 = *(_QWORD *)(a1 + 680) + 232 * a2 + 72 * *(_QWORD *)(a1 + 192);
    v22 = *(float *)(v20 + 16);
    v21 = (float *)(v20 + 16);
    v23 = *(_DWORD *)(a1 + 212);
    v24 = (float)((float)v23 / 180.0);
    v25 = v24 * 3.14159265;
    v26 = __sincosf_stret(v25);
    v27 = 0.0;
    v28 = v21[1];
    *v21 = (float)((float)(v26.__cosval * v22) + 0.0) - (float)(v26.__sinval * v28);
    v21[1] = (float)((float)(v26.__sinval * v22) + 0.0) + (float)(v26.__cosval * v28);
    v29 = v21[10] + v24 * 3.14159265;
    v30 = __sincosf_stret(v29);
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 220);
    if (v23 > 179)
    {
      if (v23 == 180)
      {
        if (v10 >= v9 || v6 >= v5)
        {
          v6 = v5;
          v10 = v9;
        }
        else
        {
          v10 = v9;
          v6 = v5;
          do
          {
            v43 = *(int *)(a1 + 168);
            if ((int)v43 < v5)
            {
              v44 = ~(_DWORD)v43;
              do
              {
                v45 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 24 * v19);
                if (*(_BYTE *)(v45 + v43) != 1)
                {
                  v46 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 24 * (*(_DWORD *)(a1 + 180) + ~(_DWORD)v19))
                                 + v5
                                 + v44);
                  if (v46)
                  {
                    *(_BYTE *)(v45 + v43) = v46;
                    v6 = *(_DWORD *)(a1 + 172);
                  }
                }
                ++v43;
                --v44;
                v5 = v6;
              }
              while (v43 < v6);
              v10 = *(_DWORD *)(a1 + 180);
              v5 = v6;
            }
            ++v19;
          }
          while (v19 < v10);
        }
        goto LABEL_74;
      }
      v31 = 0.0;
      if (v23 == 270)
      {
        if (v10 < v9 && v6 < v5)
        {
          do
          {
            v36 = *(int *)(a1 + 168);
            if ((int)v36 < v5)
            {
              v37 = 24 * v36;
              do
              {
                v38 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 24 * v19);
                if (*(_BYTE *)(v38 + v36) != 1)
                {
                  v39 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) - 24 * *(int *)(a1 + 168) + v37)
                                 + *(_DWORD *)(a1 + 180)
                                 + ~(_DWORD)v19);
                  if (v39)
                  {
                    *(_BYTE *)(v38 + v36) = v39;
                    v5 = *(_DWORD *)(a1 + 172);
                  }
                }
                ++v36;
                v37 += 24;
              }
              while (v36 < v5);
              v9 = *(_DWORD *)(a1 + 180);
            }
            ++v19;
          }
          while (v19 < v9);
          v6 = *(_DWORD *)(a1 + 168);
        }
        v10 = v9;
        goto LABEL_74;
      }
    }
    else
    {
      if (!v23)
      {
        if (v10 < v9 && v6 < v5)
        {
          do
          {
            v40 = *(int *)(a1 + 168);
            if ((int)v40 < v5)
            {
              do
              {
                v41 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 24 * v19);
                if (*(_BYTE *)(v41 + v40) != 1)
                {
                  v42 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 24 * (v19 - *(int *)(a1 + 176)))
                                 - *(int *)(a1 + 168)
                                 + v40);
                  if (v42)
                  {
                    *(_BYTE *)(v41 + v40) = v42;
                    v5 = *(_DWORD *)(a1 + 172);
                  }
                }
                ++v40;
              }
              while (v40 < v5);
              v9 = *(_DWORD *)(a1 + 180);
            }
            ++v19;
          }
          while (v19 < v9);
          v6 = *(_DWORD *)(a1 + 168);
          v10 = *(_DWORD *)(a1 + 176);
        }
        goto LABEL_74;
      }
      v31 = 0.0;
      if (v23 == 90)
      {
        if (v10 < v9 && v6 < v5)
        {
          do
          {
            v32 = *(int *)(a1 + 168);
            if ((int)v32 < v5)
            {
              v33 = ~(_DWORD)v32;
              do
              {
                v34 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 24 * v19);
                if (*(_BYTE *)(v34 + v32) != 1)
                {
                  v35 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 24 * (v5 + v33)) + v19 - *(int *)(a1 + 176));
                  if (v35)
                  {
                    *(_BYTE *)(v34 + v32) = v35;
                    v5 = *(_DWORD *)(a1 + 172);
                  }
                }
                ++v32;
                --v33;
              }
              while (v32 < v5);
              v9 = *(_DWORD *)(a1 + 180);
            }
            ++v19;
          }
          while (v19 < v9);
          v10 = *(_DWORD *)(a1 + 176);
        }
        v6 = v5;
LABEL_74:
        v47 = *(float *)(a1 + 288);
        v31 = -(float)(*v21 - (float)(v47 * (float)v6));
        v27 = -(float)(v21[1] - (float)(v47 * (float)v10));
      }
    }
    v48 = (float)(v30.__cosval * 0.0) + 0.0;
    v49 = (float)((float)-v30.__sinval * 0.0) + 0.0;
    v50 = (float)(v48 + (float)(v30.__sinval * 0.0)) + 0.0;
    v51 = *(_QWORD *)(a1 + 728) + ((unint64_t)a2 << 6);
    *(float *)v51 = (float)((float)((float)(v30.__cosval + 0.0) + (float)(v30.__sinval * 0.0)) + 0.0)
                  + (float)(v31 * 0.0);
    *(float *)(v51 + 4) = (float)((float)(v30.__sinval + v48) + 0.0) + (float)(v27 * 0.0);
    *(float *)(v51 + 8) = v50;
    *(float *)(v51 + 12) = v50;
    v52 = (float)(v49 + (float)(v30.__cosval * 0.0)) + 0.0;
    *(float *)(v51 + 16) = (float)((float)((float)(0.0 - v30.__sinval) + (float)(v30.__cosval * 0.0)) + 0.0)
                         + (float)(v31 * 0.0);
    *(float *)(v51 + 20) = (float)((float)(v30.__cosval + v49) + 0.0) + (float)(v27 * 0.0);
    *(float *)(v51 + 24) = v52;
    *(float *)(v51 + 28) = v52;
    *(float *)(v51 + 32) = (float)(v31 * 0.0) + 0.0;
    *(float *)(v51 + 36) = (float)(v27 * 0.0) + 0.0;
    *(_QWORD *)(v51 + 40) = 1065353216;
    *(float *)(v51 + 48) = v31 + 0.0;
    *(float *)(v51 + 52) = v27 + 0.0;
    *(_QWORD *)(v51 + 56) = 0x3F80000000000000;
    return sub_2399C1F0C(a1, *(_DWORD *)(a1 + 216));
  }
  *(_BYTE *)(a1 + 124) = 1;
  if (*(_DWORD *)(a1 + 72) >= 0x1Eu)
    return result;
  *(float *)(a1 + 136) = (float)v16 / (float)v14;
  v17 = **(_DWORD **)(a1 + 56);
LABEL_14:
  if (v17 >= v15)
    v18 = *(float *)(a1 + 136);
  else
    v18 = (float)v17 / (float)v15;
  *(float *)(a1 + 136) = v18 * v18;
  return result;
}

uint64_t sub_2399C1B84(uint64_t result, _QWORD *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  int v10;
  int v11;
  float v13;
  int v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int *v27;
  int v28;
  int *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  float v35;
  float v36;
  float v37;
  int v38;

  v10 = a8 - a7;
  v11 = a8 - a9;
  if (a8 - a7 >= a9 && v11 >= a7)
  {
    v13 = *(float *)(result + 76);
    v14 = (int)v13;
    v15 = (float)a9 - v13;
    v16 = (float)(int)v13;
    v17 = (float)v10;
    v18 = (float)a6 / (float)v10;
    v19 = *(float *)(a10 + 28);
    v20 = *(_DWORD *)(a10 + 8);
    v21 = a7;
    v22 = v11 + 1;
    if ((a3 & 0xFFFFFFFD) != 0)
      v18 = v17 / (float)a6;
    v23 = 4 * (a7 + (uint64_t)v14);
    v24 = *a2 + 4 * v14;
    v25 = v14 + 1;
    do
    {
      v26 = 0;
      if (v15 <= v16)
      {
        v30 = 100000000;
        v36 = v18;
        if (a5 < 100000000)
          goto LABEL_23;
      }
      else
      {
        v27 = (int *)(*(_QWORD *)(result + 24 * a3 + 296) + v23);
        v28 = v25;
        v29 = (int *)v24;
        v30 = 100000000;
        do
        {
          v32 = *v27++;
          v31 = v32;
          v33 = *v29++;
          v34 = v33 + v31;
          v26 += v34;
          if (v34 < v30)
            v30 = v34;
          v35 = (float)v28++;
        }
        while (v15 > v35);
        v36 = v18;
        if (v30 > a5)
          goto LABEL_23;
      }
      v37 = (float)(a6 + a5 - v30);
      if ((a3 & 0xFFFFFFFD) != 0)
      {
        v36 = v17 / v37;
LABEL_23:
        v38 = v26 - v30 * a9;
        if (v36 >= v19)
          goto LABEL_24;
        goto LABEL_10;
      }
      v36 = v37 / v17;
      v38 = v26 - v30 * a9;
      if (v36 >= v19)
      {
LABEL_24:
        if (v36 <= v19 || (a3 | 2) != 3)
        {
          if (vabds_f32(v36, v19) >= 0.000001)
            goto LABEL_12;
          if (v38 >= v20 && (fabsf((float)(v38 - v20)) >= (float)((float)v20 * 0.05) || *(_DWORD *)(a10 + 16) >= v30))
            goto LABEL_12;
        }
        goto LABEL_11;
      }
LABEL_10:
      if ((a3 | 2) != 2)
        goto LABEL_24;
LABEL_11:
      *(_QWORD *)a10 = *(int *)(result + 188);
      *(float *)(a10 + 28) = v36;
      *(_DWORD *)(a10 + 8) = v38;
      *(_DWORD *)(a10 + 12) = v21;
      *(_DWORD *)(a10 + 16) = v30;
      *(_DWORD *)(a10 + 20) = a4;
      *(_DWORD *)(a10 + 24) = a3;
      v20 = v38;
      v19 = v36;
LABEL_12:
      ++v21;
      v23 += 4;
    }
    while (v22 != v21);
  }
  return result;
}

uint64_t sub_2399C1D64(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int *v16;

  v2 = *(_QWORD *)(result + 680) + 232 * a2 + 16;
  v3 = *(_QWORD *)(result + 192);
  switch(*(_DWORD *)(result + 216))
  {
    case 0:
      *(_DWORD *)(result + 168) = *(_DWORD *)(result + 204);
      v4 = *(_DWORD *)(result + 212);
      if (v4 == 180 || v4 == 0)
        v11 = *(_DWORD *)(v2 + 72 * v3 + 28);
      else
        v11 = *(_DWORD *)(v2 + 72 * v3 + 24);
      *(_DWORD *)(result + 176) = *(_DWORD *)(result + 156) - v11 + *(_DWORD *)(result + 208);
      goto LABEL_19;
    case 1:
      v6 = *(_DWORD *)(result + 204);
      *(_DWORD *)(result + 168) = *(_DWORD *)(result + 152) - *(_DWORD *)(result + 208);
      *(_DWORD *)(result + 176) = v6;
      v7 = *(_DWORD *)(result + 212);
      if (v7 > 179)
        goto LABEL_24;
      goto LABEL_20;
    case 2:
      v8 = *(_DWORD *)(result + 208);
      *(_DWORD *)(result + 168) = *(_DWORD *)(result + 204);
      *(_DWORD *)(result + 176) = *(_DWORD *)(result + 160) - v8;
      v7 = *(_DWORD *)(result + 212);
      if (v7 > 179)
        goto LABEL_24;
      goto LABEL_20;
    case 3:
      *(_DWORD *)(result + 176) = *(_DWORD *)(result + 204);
      v9 = *(_DWORD *)(result + 212);
      if (v9 == 180 || v9 == 0)
        v12 = *(_DWORD *)(v2 + 72 * v3 + 24);
      else
        v12 = *(_DWORD *)(v2 + 72 * v3 + 28);
      *(_DWORD *)(result + 168) = *(_DWORD *)(result + 208) + *(_DWORD *)(result + 148) - v12;
      v7 = *(_DWORD *)(result + 212);
      if (v7 > 179)
        goto LABEL_24;
      goto LABEL_20;
    default:
LABEL_19:
      v7 = *(_DWORD *)(result + 212);
      if (v7 <= 179)
      {
LABEL_20:
        if (v7)
        {
          if (v7 != 90)
            return result;
          goto LABEL_27;
        }
LABEL_26:
        v13 = v2 + 72 * v3;
        v14 = *(_DWORD *)(v13 + 24);
        LODWORD(v13) = *(_DWORD *)(v13 + 28);
        *(_DWORD *)(result + 172) = v14 + *(_DWORD *)(result + 168);
        *(_DWORD *)(result + 180) = v13 + *(_DWORD *)(result + 176);
        return result;
      }
LABEL_24:
      if (v7 != 270)
      {
        if (v7 != 180)
          return result;
        goto LABEL_26;
      }
LABEL_27:
      v16 = (int *)(v2 + 72 * v3 + 24);
      v15 = *v16;
      *(_DWORD *)(result + 172) = v16[1] + *(_DWORD *)(result + 168);
      *(_DWORD *)(result + 180) = v15 + *(_DWORD *)(result + 176);
      return result;
  }
}

uint64_t sub_2399C1F0C(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;

  LODWORD(v2) = *(_DWORD *)(result + 168);
  v3 = *(_DWORD *)(result + 172);
  v4 = *(_DWORD *)(result + 152);
  v5 = *(int *)(result + 148);
  if ((int)v2 >= (int)v5)
    v6 = *(_DWORD *)(result + 148);
  else
    v6 = *(_DWORD *)(result + 168);
  LODWORD(v7) = *(_DWORD *)(result + 176);
  v8 = *(_DWORD *)(result + 180);
  v9 = *(_DWORD *)(result + 160);
  v10 = *(int *)(result + 156);
  if ((int)v7 >= (int)v10)
    v11 = *(_DWORD *)(result + 156);
  else
    v11 = *(_DWORD *)(result + 176);
  if (v3 <= v4)
    v12 = *(_DWORD *)(result + 152);
  else
    v12 = *(_DWORD *)(result + 172);
  if (v8 <= v9)
    v13 = *(_DWORD *)(result + 160);
  else
    v13 = *(_DWORD *)(result + 180);
  switch(a2)
  {
    case 0:
      if ((int)v7 < (int)v10)
      {
        if ((int)v5 < (int)v2)
        {
          v14 = *(_QWORD *)(result + 296);
          do
          {
            *(_DWORD *)(v14 + 4 * v5++) += *(_DWORD *)(result + 156) - *(_DWORD *)(result + 176);
            v2 = *(int *)(result + 168);
          }
          while (v5 < v2);
          v3 = *(_DWORD *)(result + 172);
          v4 = *(_DWORD *)(result + 152);
        }
        if (v3 < v4)
        {
          v15 = *(_QWORD *)(result + 296);
          v16 = v3;
          do
            *(_DWORD *)(v15 + 4 * v16++) += *(_DWORD *)(result + 156) - *(_DWORD *)(result + 176);
          while (v16 < *(int *)(result + 152));
          LODWORD(v2) = *(_DWORD *)(result + 168);
          v3 = *(_DWORD *)(result + 172);
        }
      }
      if ((int)v2 < v3)
      {
        v17 = *(_QWORD *)(result + 296);
        v2 = (int)v2;
        do
        {
          v18 = 0;
          v19 = 24 * v11;
          do
          {
            if (v11 + v18 >= v13)
              break;
            v20 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 584) + v19) + v2);
            ++v18;
            v19 += 24;
          }
          while (!v20);
          *(_DWORD *)(v17 + 4 * v2++) = v11 + v18 + ~v11;
        }
        while (v2 < *(int *)(result + 172));
      }
      v60 = *(int *)(result + 176);
      if ((int)v60 < *(_DWORD *)(result + 180))
      {
        v61 = *(_QWORD *)(result + 368);
        v62 = *(_QWORD *)(result + 320);
        do
        {
          v64 = 0;
          do
          {
            if (v6 + v64 >= v12)
              break;
          }
          while (!*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 584) + 24 * v60) + v6 + v64++));
          *(_DWORD *)(v61 + 4 * v60) = v6 + v64 + ~v6;
          v66 = v12;
          v63 = v12;
          while (v66 > v6)
          {
            v67 = *(_QWORD *)(*(_QWORD *)(result + 584) + 24 * v60) + v66--;
            --v63;
            if (*(_BYTE *)(v67 - 1))
              goto LABEL_105;
          }
          v63 = v66;
LABEL_105:
          *(_DWORD *)(v62 + 4 * v60++) = v12 + ~v63;
        }
        while (v60 < *(int *)(result + 180));
      }
      break;
    case 1:
      if (v3 > v4)
      {
        if ((int)v10 < (int)v7)
        {
          v53 = *(_QWORD *)(result + 320);
          do
          {
            *(_DWORD *)(v53 + 4 * v10++) += *(_DWORD *)(result + 172) - *(_DWORD *)(result + 152);
            v7 = *(int *)(result + 176);
          }
          while (v10 < v7);
          v8 = *(_DWORD *)(result + 180);
          v9 = *(_DWORD *)(result + 160);
        }
        if (v8 < v9)
        {
          v54 = *(_QWORD *)(result + 320);
          v55 = v8;
          do
            *(_DWORD *)(v54 + 4 * v55++) += *(_DWORD *)(result + 172) - *(_DWORD *)(result + 152);
          while (v55 < *(int *)(result + 160));
          LODWORD(v7) = *(_DWORD *)(result + 176);
          v8 = *(_DWORD *)(result + 180);
        }
      }
      if ((int)v7 < v8)
      {
        v56 = *(_QWORD *)(result + 320);
        v7 = (int)v7;
        do
        {
          v58 = v12;
          v57 = v12;
          while (v58 > v6)
          {
            v59 = *(_QWORD *)(*(_QWORD *)(result + 584) + 24 * v7) + v58--;
            --v57;
            if (*(_BYTE *)(v59 - 1))
              goto LABEL_97;
          }
          v57 = v58;
LABEL_97:
          *(_DWORD *)(v56 + 4 * v7++) = v12 + ~v57;
        }
        while (v7 < *(int *)(result + 180));
      }
      v68 = *(int *)(result + 168);
      if ((int)v68 < *(_DWORD *)(result + 172))
      {
        v69 = *(_QWORD *)(result + 296);
        v70 = *(_QWORD *)(result + 344);
        do
        {
          v72 = 0;
          v73 = 24 * v11;
          do
          {
            if (v11 + v72 >= v13)
              break;
            v74 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 584) + v73) + v68);
            ++v72;
            v73 += 24;
          }
          while (!v74);
          *(_DWORD *)(v69 + 4 * v68) = v11 + v72 + ~v11;
          v75 = 24 * v13 - 24;
          v76 = v13;
          v71 = v13;
          while (v76 > v11)
          {
            --v76;
            --v71;
            v77 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 584) + v75) + v68);
            v75 -= 24;
            if (v77)
              goto LABEL_116;
          }
          v71 = v76;
LABEL_116:
          *(_DWORD *)(v70 + 4 * v68++) = v13 + ~v71;
        }
        while (v68 < *(int *)(result + 172));
      }
      break;
    case 2:
      if (v8 > v9)
      {
        if ((int)v5 < (int)v2)
        {
          v21 = *(_QWORD *)(result + 344);
          do
            *(_DWORD *)(v21 + 4 * v5++) += *(_DWORD *)(result + 180) - *(_DWORD *)(result + 160);
          while (v5 < *(int *)(result + 168));
          v3 = *(_DWORD *)(result + 172);
          v4 = *(_DWORD *)(result + 152);
          LODWORD(v2) = *(_DWORD *)(result + 168);
        }
        if (v3 < v4)
        {
          v22 = *(_QWORD *)(result + 344);
          v23 = v3;
          do
            *(_DWORD *)(v22 + 4 * v23++) += *(_DWORD *)(result + 180) - *(_DWORD *)(result + 160);
          while (v23 < *(int *)(result + 152));
          LODWORD(v2) = *(_DWORD *)(result + 168);
          v3 = *(_DWORD *)(result + 172);
        }
      }
      if ((int)v2 < v3)
      {
        v24 = *(_QWORD *)(result + 344);
        v2 = (int)v2;
        do
        {
          v26 = 24 * v13 - 24;
          v27 = v13;
          v25 = v13;
          while (v27 > v11)
          {
            --v27;
            --v25;
            v28 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 584) + v26) + v2);
            v26 -= 24;
            if (v28)
              goto LABEL_42;
          }
          v25 = v27;
LABEL_42:
          *(_DWORD *)(v24 + 4 * v2++) = v13 + ~v25;
        }
        while (v2 < *(int *)(result + 172));
      }
      v35 = *(int *)(result + 176);
      if ((int)v35 < *(_DWORD *)(result + 180))
      {
        v36 = *(_QWORD *)(result + 368);
        v37 = *(_QWORD *)(result + 320);
        do
        {
          v39 = 0;
          do
          {
            if (v6 + v39 >= v12)
              break;
          }
          while (!*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 584) + 24 * v35) + v6 + v39++));
          *(_DWORD *)(v36 + 4 * v35) = v6 + v39 + ~v6;
          v41 = v12;
          v38 = v12;
          while (v41 > v6)
          {
            v42 = *(_QWORD *)(*(_QWORD *)(result + 584) + 24 * v35) + v41--;
            --v38;
            if (*(_BYTE *)(v42 - 1))
              goto LABEL_66;
          }
          v38 = v41;
LABEL_66:
          *(_DWORD *)(v37 + 4 * v35++) = v12 + ~v38;
        }
        while (v35 < *(int *)(result + 180));
      }
      break;
    case 3:
      if ((int)v2 < (int)v5)
      {
        if ((int)v10 < (int)v7)
        {
          v29 = *(_QWORD *)(result + 368);
          do
          {
            *(_DWORD *)(v29 + 4 * v10++) += *(_DWORD *)(result + 148) - *(_DWORD *)(result + 168);
            v7 = *(int *)(result + 176);
          }
          while (v10 < v7);
          v8 = *(_DWORD *)(result + 180);
          v9 = *(_DWORD *)(result + 160);
        }
        if (v8 < v9)
        {
          v30 = *(_QWORD *)(result + 368);
          v31 = v8;
          do
            *(_DWORD *)(v30 + 4 * v31++) += *(_DWORD *)(result + 148) - *(_DWORD *)(result + 168);
          while (v31 < *(int *)(result + 160));
          LODWORD(v7) = *(_DWORD *)(result + 176);
          v8 = *(_DWORD *)(result + 180);
        }
      }
      if ((int)v7 < v8)
      {
        v32 = *(_QWORD *)(result + 368);
        v7 = (int)v7;
        do
        {
          v33 = 0;
          do
          {
            if (v6 + v33 >= v12)
              break;
          }
          while (!*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 584) + 24 * v7) + v6 + v33++));
          *(_DWORD *)(v32 + 4 * v7++) = v6 + v33 + ~v6;
        }
        while (v7 < *(int *)(result + 180));
      }
      v43 = *(int *)(result + 168);
      if ((int)v43 < *(_DWORD *)(result + 172))
      {
        v44 = *(_QWORD *)(result + 296);
        v45 = *(_QWORD *)(result + 344);
        do
        {
          v47 = 0;
          v48 = 24 * v11;
          do
          {
            if (v11 + v47 >= v13)
              break;
            v49 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 584) + v48) + v43);
            ++v47;
            v48 += 24;
          }
          while (!v49);
          *(_DWORD *)(v44 + 4 * v43) = v11 + v47 + ~v11;
          v50 = 24 * v13 - 24;
          v51 = v13;
          v46 = v13;
          while (v51 > v11)
          {
            --v51;
            --v46;
            v52 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 584) + v50) + v43);
            v50 -= 24;
            if (v52)
              goto LABEL_77;
          }
          v46 = v51;
LABEL_77:
          *(_DWORD *)(v45 + 4 * v43++) = v13 + ~v46;
        }
        while (v43 < *(int *)(result + 172));
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 148) = v6;
  *(_DWORD *)(result + 152) = v12;
  *(_DWORD *)(result + 156) = v11;
  *(_DWORD *)(result + 160) = v13;
  return result;
}

uint64_t sub_2399C266C(uint64_t result, double a2, double a3, double a4, double a5)
{
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  const float *v14;
  float32x2_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  int32x2_t v21;
  float32x2_t v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x2_t v27;
  int32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x2_t v34;

  v5 = *(_QWORD *)(result + 656);
  v6 = *(_QWORD *)(result + 664);
  v7 = v6 > v5;
  v8 = v6 - v5;
  if (v7)
  {
    v9 = *(_QWORD *)(result + 680);
    v10 = (unsigned int *)(*(_QWORD *)(result + 704) + 4 * v5);
    do
    {
      v12 = *v10++;
      v11 = v12;
      if (*(_BYTE *)(v9 + 232 * v12 + 4))
      {
        v13 = v9 + 232 * v11;
        v14 = (const float *)(result + 288);
        LODWORD(a5) = *(_DWORD *)(result + 288);
        v15 = *(float32x2_t *)(v13 + 24);
        v16 = vsub_f32(*(float32x2_t *)(v13 + 32), v15);
        v17 = vcvt_f32_s32((int32x2_t)vmax_u32((uint32x2_t)vcvt_s32_f32(vrndp_f32(vdiv_f32(v16, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0)))), (uint32x2_t)0x100000001));
        v18 = vmla_n_f32(vneg_f32(v16), v17, *(float *)&a5);
        v19 = vmul_f32(v18, (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)(v13 + 48) = v19;
        v18.i32[0] = *(_DWORD *)(result + 76);
        v20 = vld1_dup_f32(v14);
        *(float32x2_t *)(v13 + 16) = vsub_f32(vmls_lane_f32(v15, v20, v18, 0), v19);
        v21 = vcvt_s32_f32(vmla_n_f32(v17, (float32x2_t)0x4000000040000000, *(float *)(result + 76)));
        *(int32x2_t *)(v13 + 40) = v21;
        v21.i32[0] = *(_DWORD *)(result + 288);
        v22 = *(float32x2_t *)(v13 + 96);
        v23 = vsub_f32(*(float32x2_t *)(v13 + 104), v22);
        v24 = vcvt_f32_s32((int32x2_t)vmax_u32((uint32x2_t)vcvt_s32_f32(vrndp_f32(vdiv_f32(v23, (float32x2_t)vdup_lane_s32(v21, 0)))), (uint32x2_t)0x100000001));
        v25 = vmla_n_f32(vneg_f32(v23), v24, *(float *)v21.i32);
        v26 = vmul_f32(v25, (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)(v13 + 120) = v26;
        v25.i32[0] = *(_DWORD *)(result + 76);
        v27 = vld1_dup_f32(v14);
        *(float32x2_t *)(v13 + 88) = vsub_f32(vmls_lane_f32(v22, v27, v25, 0), v26);
        v28 = vcvt_s32_f32(vmla_n_f32(v24, (float32x2_t)0x4000000040000000, *(float *)(result + 76)));
        *(int32x2_t *)(v13 + 112) = v28;
        v28.i32[0] = *(_DWORD *)(result + 288);
        v29 = *(float32x2_t *)(v13 + 168);
        v30 = vsub_f32(*(float32x2_t *)(v13 + 176), v29);
        v31 = vcvt_f32_s32((int32x2_t)vmax_u32((uint32x2_t)vcvt_s32_f32(vrndp_f32(vdiv_f32(v30, (float32x2_t)vdup_lane_s32(v28, 0)))), (uint32x2_t)0x100000001));
        v32 = vmla_n_f32(vneg_f32(v30), v31, *(float *)v28.i32);
        v33 = vmul_f32(v32, (float32x2_t)0x3F0000003F000000);
        *(float32x2_t *)(v13 + 192) = v33;
        v32.i32[0] = *(_DWORD *)(result + 76);
        v34 = vld1_dup_f32(v14);
        *(float32x2_t *)(v13 + 160) = vsub_f32(vmls_lane_f32(v29, v34, v32, 0), v33);
        a5 = COERCE_DOUBLE(vcvt_s32_f32(vmla_n_f32(v31, (float32x2_t)0x4000000040000000, *(float *)(result + 76))));
        *(double *)(v13 + 184) = a5;
      }
      --v8;
    }
    while (v8);
  }
  return result;
}

_QWORD *sub_2399C27CC(_QWORD *result, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  if (a4 >= 1)
  {
    v5 = *(int *)(result[85] + 232 * a2 + 72 * a3 + 40);
    v4 = *(int *)(result[85] + 232 * a2 + 72 * a3 + 44);
    if ((_DWORD)v4 && (_DWORD)v5 != 0)
    {
      v7 = 0;
      do
      {
        v8 = 0;
        v9 = v7++ + 2;
        do
        {
          v10 = 0;
          v11 = (v8 - 1);
          v12 = v8 + 1;
          v13 = (v8 + 1);
          do
          {
            v14 = result[76];
            if (v7 != *(unsigned __int8 *)(*(_QWORD *)(v14 + 24 * v8) + v10))
              goto LABEL_13;
            if ((int)v8 >= 1)
            {
              if (0xAAAAAAAAAAAAAAABLL * ((result[77] - v14) >> 3) > v11)
              {
                if ((int)v10 >= 1)
                {
                  v15 = (v10 - 1);
                  v17 = (uint64_t *)(v14 + 24 * v11);
                  v16 = *v17;
                  if (v17[1] - *v17 > v15 && !*(_BYTE *)(v16 + v15))
                    *(_BYTE *)(v16 + v15) = v9;
LABEL_24:
                  v18 = *(_QWORD *)(result[76] + 24 * v11);
                  if (*(_QWORD *)(result[76] + 24 * v11 + 8) - v18 > (unint64_t)v10
                    && !*(_BYTE *)(v18 + v10))
                  {
                    *(_BYTE *)(v18 + v10) = v9;
                  }
                  goto LABEL_28;
                }
                if ((v10 & 0x80000000) == 0)
                  goto LABEL_24;
                if ((_DWORD)v10 == -1)
                {
LABEL_28:
                  v19 = (v10 + 1);
                  v20 = *(_QWORD *)(result[76] + 24 * v11);
                  if (*(_QWORD *)(result[76] + 24 * v11 + 8) - v20 > v19 && !*(_BYTE *)(v20 + v19))
                    *(_BYTE *)(v20 + v19) = v9;
                }
              }
LABEL_31:
              v21 = result[76];
              if (0xAAAAAAAAAAAAAAABLL * ((result[77] - v21) >> 3) <= v8)
                goto LABEL_44;
              if ((int)v10 < 1)
              {
                if ((v10 & 0x80000000) == 0)
                  goto LABEL_37;
                if ((_DWORD)v10 != -1)
                  goto LABEL_44;
              }
              else
              {
                v22 = (v10 - 1);
                v24 = (uint64_t *)(v21 + 24 * v8);
                v23 = *v24;
                if (v24[1] - *v24 > v22 && !*(_BYTE *)(v23 + v22))
                  *(_BYTE *)(v23 + v22) = v9;
LABEL_37:
                v25 = *(_QWORD *)(result[76] + 24 * v8);
                if (*(_QWORD *)(result[76] + 24 * v8 + 8) - v25 > (unint64_t)v10
                  && !*(_BYTE *)(v25 + v10))
                {
                  *(_BYTE *)(v25 + v10) = v9;
                }
              }
              v26 = (v10 + 1);
              v27 = *(_QWORD *)(result[76] + 24 * v8);
              if (*(_QWORD *)(result[76] + 24 * v8 + 8) - v27 > v26 && !*(_BYTE *)(v27 + v26))
                *(_BYTE *)(v27 + v26) = v9;
              goto LABEL_44;
            }
            if ((v8 & 0x80000000) == 0)
              goto LABEL_31;
            if ((_DWORD)v8 != -1)
              goto LABEL_13;
LABEL_44:
            v28 = result[76];
            if (0xAAAAAAAAAAAAAAABLL * ((result[77] - v28) >> 3) <= v13)
              goto LABEL_13;
            if ((int)v10 < 1)
            {
              if ((v10 & 0x80000000) != 0)
              {
                if ((_DWORD)v10 != -1)
                  goto LABEL_13;
                goto LABEL_54;
              }
            }
            else
            {
              v29 = (v10 - 1);
              v31 = (uint64_t *)(v28 + 24 * v13);
              v30 = *v31;
              if (v31[1] - *v31 > v29 && !*(_BYTE *)(v30 + v29))
                *(_BYTE *)(v30 + v29) = v9;
            }
            v32 = *(_QWORD *)(result[76] + 24 * v13);
            if (*(_QWORD *)(result[76] + 24 * v13 + 8) - v32 > (unint64_t)v10
              && !*(_BYTE *)(v32 + v10))
            {
              *(_BYTE *)(v32 + v10) = v9;
            }
LABEL_54:
            v33 = (v10 + 1);
            v34 = *(_QWORD *)(result[76] + 24 * v13);
            if (*(_QWORD *)(result[76] + 24 * v13 + 8) - v34 > v33 && !*(_BYTE *)(v34 + v33))
              *(_BYTE *)(v34 + v33) = v9;
LABEL_13:
            ++v10;
          }
          while (v5 != v10);
          ++v8;
        }
        while (v12 != v4);
      }
      while (v7 != a4);
    }
  }
  return result;
}

float sub_2399C2A8C(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float *v7;
  float *v8;
  uint64_t *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;

  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(unsigned int *)(v3 + 4 * a2);
  if (*(_DWORD *)(a1 + 72) - 1 == a2)
  {
    v5 = (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 160) - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 152)) >> 2;
    v6 = 0.0;
    if (v4 >= v5)
      return v6;
  }
  else
  {
    LODWORD(v5) = *(_DWORD *)(v3 + 4 * (a2 + 1));
    v6 = 0.0;
    if (v4 >= v5)
      return v6;
  }
  do
  {
    v9 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 16 * *(unsigned int *)(a1 + 116));
    v11 = *v9;
    v10 = (std::__shared_weak_count *)v9[1];
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v15 = *(_QWORD *)(v11 + 40);
    v16 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
    v18 = *v16;
    v17 = (std::__shared_weak_count *)v16[1];
    if (v17)
    {
      v19 = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v22 = (unsigned int *)(v15 + 12 * v4);
    v23 = *v22;
    v24 = *(_QWORD *)(v18 + 40);
    v25 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
    v27 = *v25;
    v26 = (std::__shared_weak_count *)v25[1];
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v31 = v22[1];
    v32 = *(_QWORD *)(v27 + 40);
    v33 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) + 16 * *(unsigned int *)(a1 + 104));
    v35 = *v33;
    v34 = (std::__shared_weak_count *)v33[1];
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v7 = (float *)(v24 + 8 * v23);
    v8 = (float *)(*(_QWORD *)(v35 + 40) + 8 * v22[2]);
    v6 = v6
       + (float)(fabsf((float)((float)(*(float *)(v32 + 8 * v31) - *v7) * (float)(v8[1] - v7[1]))- (float)((float)(*(float *)(v32 + 8 * v31 + 4) - v7[1]) * (float)(*v8 - *v7)))* 0.5);
    ++v4;
  }
  while ((_DWORD)v5 != (_DWORD)v4);
  return v6;
}

_QWORD *sub_2399C2CF8(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  int v10;
  _BYTE v11[24];
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a1[3];
  if (!v3)
  {
    v12 = 0;
    goto LABEL_13;
  }
  if (v3 == a1)
  {
    v12 = v11;
    (*(void (**)(_QWORD *, _BYTE *))(*a1 + 24))(a1, v11);
    v5 = (uint64_t)v12;
    v6 = a1[4];
    v7 = a1[6];
    v10 = a2 >> 1;
    if (!v12)
      goto LABEL_13;
  }
  else
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    v12 = (_BYTE *)v5;
    v6 = a1[4];
    v7 = a1[6];
    v10 = a2 >> 1;
    if (!v5)
LABEL_13:
      sub_2394172E0();
  }
  (*(void (**)(uint64_t, int *, unint64_t, _QWORD *, unint64_t))(*(_QWORD *)v5 + 48))(v5, &v10, v6 + 4 * (a2 & 1), a1 + 5, v7 + 32 * a2);
  result = v12;
  if (v12 == v11)
  {
    v9 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_2399C2E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2399C2E78(_QWORD *a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a1[3];
  if (!v3)
  {
    v9 = 0;
    v7 = a2;
    goto LABEL_13;
  }
  if (v3 == a1)
  {
    v9 = v8;
    (*(void (**)(_QWORD *, _BYTE *))(*a1 + 24))(a1, v8);
    v4 = (uint64_t)v9;
    v7 = a2;
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD))(*v3 + 16))(a1[3]);
    v9 = (_BYTE *)v4;
    v7 = a2;
    if (!v4)
LABEL_13:
      sub_2394172E0();
  }
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 48))(v4, &v7);
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2399C2F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(exception_object);
}

void sub_2399C2FC8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *__p;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;

  v4 = a1[2];
  v5 = a1[1];
  if (0x34F72C234F72C235 * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v5 + 232 * a2;
      do
      {
        *(_DWORD *)v5 = 0;
        *(_BYTE *)(v5 + 4) = 0;
        *(_DWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 48) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        *(_QWORD *)(v5 + 32) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 120) = 0;
        *(_QWORD *)(v5 + 192) = 0;
        *(_QWORD *)(v5 + 216) = 0;
        *(_QWORD *)(v5 + 224) = 0;
        *(_QWORD *)(v5 + 208) = 0;
        *(_OWORD *)(v5 + 64) = 0uLL;
        *(_OWORD *)(v5 + 80) = 0uLL;
        *(_OWORD *)(v5 + 96) = 0uLL;
        *(_OWORD *)(v5 + 136) = 0uLL;
        *(_OWORD *)(v5 + 152) = 0uLL;
        *(_OWORD *)(v5 + 168) = 0uLL;
        v5 += 232;
      }
      while (v5 != v11);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x11A7B9611A7B961)
      sub_2394189F8();
    v8 = 0x34F72C234F72C235 * ((v4 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x8D3DCB08D3DCB0)
      v9 = 0x11A7B9611A7B961;
    else
      v9 = v7;
    v23 = a1 + 2;
    if (v9)
    {
      if (v9 > 0x11A7B9611A7B961)
        sub_239418A80();
      v10 = (char *)operator new(232 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[232 * v6];
    __p = v10;
    v20 = v12;
    v22 = &v10[232 * v9];
    v13 = &v12[232 * a2];
    do
    {
      *(_DWORD *)v12 = 0;
      v12[4] = 0;
      *((_DWORD *)v12 + 2) = 0;
      *((_QWORD *)v12 + 6) = 0;
      *((_QWORD *)v12 + 3) = 0;
      *((_QWORD *)v12 + 4) = 0;
      *((_QWORD *)v12 + 2) = 0;
      *((_QWORD *)v12 + 15) = 0;
      *((_QWORD *)v12 + 24) = 0;
      *((_QWORD *)v12 + 27) = 0;
      *((_QWORD *)v12 + 28) = 0;
      *((_QWORD *)v12 + 26) = 0;
      *((_OWORD *)v12 + 4) = 0uLL;
      *((_OWORD *)v12 + 5) = 0uLL;
      *((_OWORD *)v12 + 6) = 0uLL;
      *(_OWORD *)(v12 + 136) = 0uLL;
      *(_OWORD *)(v12 + 152) = 0uLL;
      *(_OWORD *)(v12 + 168) = 0uLL;
      v12 += 232;
    }
    while (v12 != v13);
    v21 = v13;
    sub_2399C3210(a1, &__p);
    v14 = v20;
    while (1)
    {
      v15 = v21;
      if (v21 == v14)
        break;
      v21 -= 232;
      v16 = (void *)*((_QWORD *)v15 - 3);
      if (v16)
      {
        *((_QWORD *)v15 - 2) = v16;
        operator delete(v16);
      }
      v17 = (void *)*((_QWORD *)v15 - 12);
      if (v17)
      {
        *((_QWORD *)v15 - 11) = v17;
        operator delete(v17);
      }
      v18 = (void *)*((_QWORD *)v15 - 21);
      if (v18)
      {
        *((_QWORD *)v15 - 20) = v18;
        operator delete(v18);
      }
    }
    if (__p)
      operator delete(__p);
  }
}

void sub_2399C31FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2399C32E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2399C3210(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = *(_QWORD *)(v4 + v7 - 232);
      *(_DWORD *)(v8 - 224) = *(_DWORD *)(v4 + v7 - 224);
      *(_QWORD *)(v8 - 232) = v9;
      result = (uint64_t *)sub_2399C3364(v6 + v7 - 216, v4 + v7 - 216);
      v7 -= 232;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v10 = *v3;
  *v3 = v6;
  a2[1] = v10;
  v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

void sub_2399C32C4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;

  if (v2)
    sub_239EC33D4((_QWORD *)((char *)v1 + v2), v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399C32E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 232;
    v4 = *(void **)(i - 24);
    if (v4)
    {
      *(_QWORD *)(i - 16) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 96);
    if (v5)
    {
      *(_QWORD *)(i - 88) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(i - 168);
    if (v6)
    {
      *(_QWORD *)(i - 160) = v6;
      operator delete(v6);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_2399C3364(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_2399C350C((_OWORD *)(a1 + 48), *(__int128 **)(a2 + 48), *(__int128 **)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 5);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  v4 = *(_DWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  sub_2399C350C((_OWORD *)(a1 + 120), *(__int128 **)(a2 + 120), *(__int128 **)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 5);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  v5 = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 184) = v5;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_2399C350C((_OWORD *)(a1 + 192), *(__int128 **)(a2 + 192), *(__int128 **)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 5);
  return a1;
}

void sub_2399C34DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  while (1)
  {
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
    }
    v2 -= 72;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

_OWORD *sub_2399C350C(_OWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v5;
  __int128 v8;
  __int128 v9;

  if (a4)
  {
    v5 = result;
    if (a4 >> 59)
      sub_2394189F8();
    result = operator new(32 * a4);
    *v5 = result;
    v5[1] = result;
    for (v5[2] = &result[2 * a4]; a2 != a3; result += 2)
    {
      v8 = *a2;
      v9 = a2[1];
      a2 += 2;
      *result = v8;
      result[1] = v9;
    }
    v5[1] = result;
  }
  return result;
}

void sub_2399C3584(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2399C35A0(void **a1, unint64_t a2)
{
  _BYTE *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  _OWORD *v17;
  int v18;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - (_BYTE *)v5) >> 6)
  {
    if (a2)
    {
      v11 = (char *)&v5[4 * a2];
      v12 = a2 << 6;
      do
      {
        *v5 = xmmword_239F037CC;
        v5[1] = *(_OWORD *)algn_239F037DC;
        v5[2] = xmmword_239F037EC;
        v5[3] = unk_239F037FC;
        v5 += 4;
        v12 -= 64;
      }
      while (v12);
      v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = ((char *)v5 - (_BYTE *)*a1) >> 6;
    if ((v6 + a2) >> 58)
      sub_2394189F8();
    v7 = v4 - (_BYTE *)*a1;
    v8 = v7 >> 5;
    if (v7 >> 5 <= v6 + a2)
      v8 = v6 + a2;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0)
      v9 = 0x3FFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
    {
      if (v9 >> 58)
        sub_239418A80();
      v10 = (char *)operator new(v9 << 6);
    }
    else
    {
      v10 = 0;
    }
    v13 = &v10[64 * v6];
    v14 = a2 << 6;
    v15 = &v13[64 * a2];
    v16 = v13;
    do
    {
      *(_OWORD *)v16 = xmmword_239F037CC;
      *((_OWORD *)v16 + 1) = *(_OWORD *)algn_239F037DC;
      *((_OWORD *)v16 + 2) = xmmword_239F037EC;
      *((_OWORD *)v16 + 3) = unk_239F037FC;
      v16 += 64;
      v14 -= 64;
    }
    while (v14);
    v17 = *a1;
    if (v5 != *a1)
    {
      do
      {
        *((_OWORD *)v13 - 4) = xmmword_239F037CC;
        *((_OWORD *)v13 - 3) = *(_OWORD *)algn_239F037DC;
        *((_OWORD *)v13 - 2) = xmmword_239F037EC;
        *((_OWORD *)v13 - 1) = unk_239F037FC;
        v18 = *((_DWORD *)v5 - 16);
        v5 -= 4;
        *((_DWORD *)v13 - 16) = v18;
        *((_DWORD *)v13 - 15) = *((_DWORD *)v5 + 1);
        *((_DWORD *)v13 - 14) = *((_DWORD *)v5 + 2);
        *((_DWORD *)v13 - 13) = *((_DWORD *)v5 + 3);
        *((_DWORD *)v13 - 12) = *((_DWORD *)v5 + 4);
        *((_DWORD *)v13 - 11) = *((_DWORD *)v5 + 5);
        *((_DWORD *)v13 - 10) = *((_DWORD *)v5 + 6);
        *((_DWORD *)v13 - 9) = *((_DWORD *)v5 + 7);
        *((_DWORD *)v13 - 8) = *((_DWORD *)v5 + 8);
        *((_DWORD *)v13 - 7) = *((_DWORD *)v5 + 9);
        *((_DWORD *)v13 - 6) = *((_DWORD *)v5 + 10);
        *((_DWORD *)v13 - 5) = *((_DWORD *)v5 + 11);
        *((_DWORD *)v13 - 4) = *((_DWORD *)v5 + 12);
        *((_DWORD *)v13 - 3) = *((_DWORD *)v5 + 13);
        *((_DWORD *)v13 - 2) = *((_DWORD *)v5 + 14);
        *((_DWORD *)v13 - 1) = *((_DWORD *)v5 + 15);
        v13 -= 64;
      }
      while (v5 != v17);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = &v10[64 * v9];
    if (v5)
      operator delete(v5);
  }
}

void sub_2399C3780()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2399C3794(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_250AF1220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2399C37CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_250AF1220;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2399C37EC(uint64_t a1, int *a2, int *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *a2;
  v9 = *a3;
  if (*a2 == v9)
  {
    v10 = 1;
  }
  else
  {
    switch(v9)
    {
      case 0:
      case 2:
        v11 = v8 - v9 == 1;
        goto LABEL_6;
      case 1:
      case 3:
        v11 = v8 - v9 == -1;
LABEL_6:
        v10 = v11;
        break;
      default:
        v10 = 0;
        break;
    }
  }
  v12 = (int *)(v7 + 24);
  v13 = (int *)(v7 + 28);
  if ((v8 | 2) == 3)
    v14 = (int *)(v7 + 24);
  else
    v14 = (int *)(v7 + 28);
  v15 = *v14;
  if ((v8 | 2) == 3)
    v12 = v13;
  v16 = *v12;
  v17 = v9 - v8 + 6;
  v18 = v17 & 3;
  v20 = -v17;
  v19 = v20 < 0;
  v21 = v20 & 3;
  if (v19)
    v22 = v18;
  else
    v22 = -v21;
  v23 = 156;
  if (*a4)
    v24 = 156;
  else
    v24 = 148;
  if (*a4)
    v25 = 160;
  else
    v25 = 152;
  v26 = *(_DWORD *)(v6 + v25);
  v27 = *(_DWORD *)(v6 + v24);
  if (*a4)
    v23 = 148;
  v28 = *(_DWORD *)(v6 + v23);
  if (*a4)
    v29 = 152;
  else
    v29 = 160;
  v30 = *(_DWORD *)(v6 + v29);
  v31 = 392;
  if (v10)
    v31 = 488;
  return sub_2399C1B84(v6, (_QWORD *)(v6 + v31 + 24 * v8), v9, 90 * v22, v15, v26 - v27, v28, v30, v16, a5);
}

void sub_2399C391C()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2399C3930(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_250AF1268;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 sub_2399C3980(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_250AF1268;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2399C39B8(uint64_t result, _DWORD *a2)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int *v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;

  switch(*a2)
  {
    case 0:
      v2 = *(int **)(result + 16);
      v3 = **(int **)(result + 8);
      if ((int)v3 < *v2)
      {
        v4 = **(_QWORD **)(result + 56);
        v5 = *(int **)(result + 24);
        v6 = *(int **)(result + 32);
        if (*(_BYTE *)(result + 40))
        {
          do
          {
            v8 = *v5;
            v9 = *v6;
            if ((int)v8 > *v6)
              v9 = *v5;
            v10 = 24 * v8;
            v11 = v9 - v8;
            v7 = *v5;
            while (v11)
            {
              v12 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(result + 48) + v10) + v3);
              v10 += 24;
              ++v7;
              --v11;
              if (v12 == 1)
                goto LABEL_6;
            }
            v7 = v9;
LABEL_6:
            *(_DWORD *)(v4 + 4 * v3++) = v7 + ~(_DWORD)v8;
          }
          while (v3 < *v2);
        }
        else
        {
          do
          {
            v14 = *v5;
            v15 = *v6;
            if ((int)v14 > *v6)
              v15 = *v5;
            v16 = 24 * v14;
            v17 = v15 - v14;
            v13 = *v5;
            while (v17)
            {
              v18 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(result + 48) + v16) + v3);
              v16 += 24;
              ++v13;
              --v17;
              if (v18)
                goto LABEL_14;
            }
            v13 = v15;
LABEL_14:
            *(_DWORD *)(v4 + 4 * v3++) = v13 + ~(_DWORD)v14;
          }
          while (v3 < *v2);
        }
      }
      break;
    case 1:
      v19 = *(int **)(result + 32);
      v20 = **(int **)(result + 24);
      if ((int)v20 < *v19)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(result + 56) + 24);
        v23 = *(int **)(result + 8);
        v22 = *(int **)(result + 16);
        if (*(_BYTE *)(result + 40))
        {
          do
          {
            v24 = *v23;
            if (*v22 >= (int)v24)
              v25 = *v23;
            else
              v25 = *v22;
            v26 = *v22;
            while (v26 > v24)
            {
              v27 = v26 - 1;
              v28 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(result + 48) + 24 * v20) + v26-- - 1);
              if (v28 == 1)
              {
                v25 = v27;
                break;
              }
            }
            *(_DWORD *)(v21 + 4 * v20++) = *v22 + ~v25;
          }
          while (v20 < *v19);
        }
        else
        {
          do
          {
            v49 = *v23;
            if (*v22 >= (int)v49)
              v50 = *v23;
            else
              v50 = *v22;
            v51 = *v22;
            while (v51 > v49)
            {
              v52 = v51 - 1;
              if (*(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(result + 48) + 24 * v20) + v51-- - 1))
              {
                v50 = v52;
                break;
              }
            }
            *(_DWORD *)(v21 + 4 * v20++) = *v22 + ~v50;
          }
          while (v20 < *v19);
        }
      }
      break;
    case 2:
      v29 = *(int **)(result + 16);
      v30 = **(int **)(result + 8);
      if ((int)v30 < *v29)
      {
        v31 = *(_QWORD *)(*(_QWORD *)(result + 56) + 48);
        v33 = *(int **)(result + 24);
        v32 = *(int **)(result + 32);
        if (*(_BYTE *)(result + 40))
        {
          do
          {
            v34 = *v32;
            v35 = *v33;
            if (*v32 >= (int)v35)
              v36 = *v33;
            else
              v36 = *v32;
            v37 = 24 * v34 - 24;
            v38 = *v32;
            while (v38 > v35)
            {
              --v38;
              v39 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(result + 48) + v37) + v30);
              v37 -= 24;
              if (v39 == 1)
              {
                v36 = v38;
                break;
              }
            }
            *(_DWORD *)(v31 + 4 * v30++) = v34 + ~v36;
          }
          while (v30 < *v29);
        }
        else
        {
          do
          {
            v54 = *v32;
            v55 = *v33;
            if (*v32 >= (int)v55)
              v56 = *v33;
            else
              v56 = *v32;
            v57 = 24 * v54 - 24;
            v58 = *v32;
            while (v58 > v55)
            {
              --v58;
              v59 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(result + 48) + v57) + v30);
              v57 -= 24;
              if (v59)
              {
                v56 = v58;
                break;
              }
            }
            *(_DWORD *)(v31 + 4 * v30++) = v54 + ~v56;
          }
          while (v30 < *v29);
        }
      }
      break;
    case 3:
      v40 = *(int **)(result + 32);
      v41 = **(int **)(result + 24);
      if ((int)v41 < *v40)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(result + 56) + 72);
        v43 = *(int **)(result + 8);
        v44 = *(int **)(result + 16);
        if (*(_BYTE *)(result + 40))
        {
          do
          {
            v45 = *v44;
            if (*v43 > *v44)
              v45 = *v43;
            v46 = *v43;
            while (v45 != v46)
            {
              v47 = v46 + 1;
              v48 = *(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(result + 48) + 24 * v41) + v46++);
              if (v48 == 1)
              {
                v45 = v47;
                break;
              }
            }
            *(_DWORD *)(v42 + 4 * v41++) = v45 + ~*v43;
          }
          while (v41 < *v40);
        }
        else
        {
          do
          {
            v60 = *v44;
            if (*v43 > *v44)
              v60 = *v43;
            v61 = *v43;
            while (v60 != v61)
            {
              v62 = v61 + 1;
              if (*(unsigned __int8 *)(*(_QWORD *)(**(_QWORD **)(result + 48) + 24 * v41) + v61++))
              {
                v60 = v62;
                break;
              }
            }
            *(_DWORD *)(v42 + 4 * v41++) = v60 + ~*v43;
          }
          while (v41 < *v40);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_2399C3DF4(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t prime;
  unint64_t v21;
  uint8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v6 = v3;
  }
  else
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = v19;
    else
      prime = v18;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_36;
    if (prime < v7)
    {
      v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v22 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
      {
        v21 = std::__next_prime(v21);
      }
      else
      {
        v23 = 1 << -(char)__clz(v21 - 1);
        if (v21 >= 2)
          v21 = v23;
      }
      if (prime <= v21)
        prime = v21;
      if (prime < v7)
LABEL_36:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v6 %= v7;
    }
    else
    {
      v6 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
  if (v25)
  {
    *v14 = *v25;
LABEL_59:
    *v25 = v14;
    goto LABEL_60;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v6) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v26 >= v7)
        v26 %= v7;
    }
    else
    {
      v26 &= v7 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_2399C40E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_2399C40F4(unsigned int *result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  float v21;
  unsigned int v22;
  unsigned int v23;
  float v24;
  float v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  float v47;
  float v48;
  unsigned int v49;
  float v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  float v55;
  float v56;
  unsigned int v57;
  float v58;
  unsigned int v59;
  unsigned int v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  float v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  BOOL v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  float v92;
  float v93;
  unsigned int v94;
  float v95;
  unsigned int *v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  float v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  float v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  int64_t v118;
  BOOL v119;
  uint64_t v120;
  unsigned int *v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  float v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  float v143;
  unsigned int *v144;
  unsigned int *v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  float v150;
  unsigned int *v151;
  unsigned int v152;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v88 = *(a2 - 1);
        v89 = *v10;
        if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 680) + 232 * v88) > *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 680)
                                                                                     + 232 * *v10))
        {
          *v10 = v88;
          goto LABEL_167;
        }
        return result;
      case 3:
        v90 = *(_QWORD *)(*(_QWORD *)a3 + 680);
        v89 = *v10;
        v91 = v10[1];
        v92 = *(float *)(v90 + 232 * v91);
        v93 = *(float *)(v90 + 232 * *v10);
        v94 = *(a2 - 1);
        v95 = *(float *)(v90 + 232 * v94);
        if (v92 <= v93)
        {
          if (v95 > v92)
          {
            v10[1] = v94;
            *(a2 - 1) = v91;
            v104 = *v10;
            v100 = v10[1];
            v102 = *(float *)(v90 + 232 * v100);
            goto LABEL_155;
          }
        }
        else
        {
          if (v95 <= v92)
          {
            *v10 = v91;
            v10[1] = v89;
            v152 = *(a2 - 1);
            if (*(float *)(v90 + 232 * v152) <= v93)
              return result;
            v10[1] = v152;
          }
          else
          {
            *v10 = v94;
          }
LABEL_167:
          *(a2 - 1) = v89;
        }
        return result;
      case 4:
        return sub_2399C5070(v10, v10 + 1, v10 + 2, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 680));
      case 5:
        v96 = v10 + 2;
        v97 = v10 + 3;
        result = sub_2399C5070(v9, v9 + 1, v9 + 2, v9 + 3, *(_QWORD *)(*(_QWORD *)a3 + 680));
        v98 = *(a2 - 1);
        v99 = v9[3];
        v90 = *(_QWORD *)(*(_QWORD *)a3 + 680);
        if (*(float *)(v90 + 232 * v98) > *(float *)(v90 + 232 * v99))
        {
          *v97 = v98;
          *(a2 - 1) = v99;
          v100 = *v97;
          v101 = *v96;
          v102 = *(float *)(v90 + 232 * *v97);
          if (v102 > *(float *)(v90 + 232 * *v96))
          {
            *v96 = v100;
            *v97 = v101;
            v103 = v9[1];
            if (v102 > *(float *)(v90 + 232 * v103))
            {
              v9[1] = v100;
              v9[2] = v103;
              v104 = *v9;
LABEL_155:
              if (v102 > *(float *)(v90 + 232 * v104))
              {
                *v9 = v100;
                v9[1] = v104;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v116 = (unint64_t)(v12 - 2) >> 1;
              v117 = *(_QWORD *)a3;
              v118 = v116;
              do
              {
                if (v116 >= v118)
                {
                  v120 = (2 * v118) | 1;
                  v121 = &v10[v120];
                  if (2 * v118 + 2 >= v12)
                  {
                    v122 = *(_QWORD *)(v117 + 680);
                  }
                  else
                  {
                    v122 = *(_QWORD *)(v117 + 680);
                    if (*(float *)(v122 + 232 * *v121) > *(float *)(v122 + 232 * v121[1]))
                    {
                      ++v121;
                      v120 = 2 * v118 + 2;
                    }
                  }
                  v123 = &v10[v118];
                  result = (unsigned int *)*v121;
                  v124 = *v123;
                  v125 = *(float *)(v122 + 232 * *v123);
                  if (*(float *)(v122 + 232 * result) <= v125)
                  {
                    do
                    {
                      v126 = v121;
                      *v123 = result;
                      if (v116 < v120)
                        break;
                      v127 = 2 * v120;
                      v120 = (2 * v120) | 1;
                      v121 = &v10[v120];
                      v128 = v127 + 2;
                      if (v128 < v12 && *(float *)(v122 + 232 * *v121) > *(float *)(v122 + 232 * v121[1]))
                      {
                        ++v121;
                        v120 = v128;
                      }
                      result = (unsigned int *)*v121;
                      v123 = v126;
                    }
                    while (*(float *)(v122 + 232 * result) <= v125);
                    *v126 = v124;
                    v117 = *(_QWORD *)a3;
                  }
                }
                v119 = v118-- <= 0;
              }
              while (!v119);
              v129 = (unint64_t)v11 >> 2;
              do
              {
                v130 = 0;
                v131 = *v10;
                v132 = *(_QWORD *)a3;
                v133 = v10;
                do
                {
                  v134 = v133;
                  v133 += v130 + 1;
                  v135 = 2 * v130;
                  v130 = (2 * v130) | 1;
                  v136 = v135 + 2;
                  if (v136 < v129)
                  {
                    result = (unsigned int *)(232 * v133[1]);
                    if (*(float *)(*(_QWORD *)(v132 + 680) + 232 * *v133) > *(float *)((char *)result
                                                                                        + *(_QWORD *)(v132 + 680)))
                    {
                      ++v133;
                      v130 = v136;
                    }
                  }
                  *v134 = *v133;
                }
                while (v130 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
                if (v133 == --a2)
                {
                  *v133 = v131;
                }
                else
                {
                  *v133 = *a2;
                  *a2 = v131;
                  v137 = (char *)v133 - (char *)v10 + 4;
                  if (v137 >= 5)
                  {
                    v138 = (((unint64_t)v137 >> 2) - 2) >> 1;
                    v139 = &v10[v138];
                    v140 = *v139;
                    v141 = *v133;
                    v142 = *(_QWORD *)(*(_QWORD *)a3 + 680);
                    v143 = *(float *)(v142 + 232 * *v133);
                    if (*(float *)(v142 + 232 * *v139) > v143)
                    {
                      do
                      {
                        v144 = v139;
                        *v133 = v140;
                        if (!v138)
                          break;
                        v138 = (v138 - 1) >> 1;
                        v139 = &v10[v138];
                        v140 = *v139;
                        v133 = v144;
                      }
                      while (*(float *)(v142 + 232 * *v139) > v143);
                      *v144 = v141;
                    }
                  }
                }
                v119 = v129-- <= 2;
              }
              while (!v119);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = *(_QWORD *)(*(_QWORD *)a3 + 680);
          v16 = *(a2 - 1);
          v17 = *(float *)(v15 + 232 * v16);
          if ((unint64_t)v11 < 0x201)
          {
            v22 = *v10;
            v23 = *v14;
            v24 = *(float *)(v15 + 232 * *v10);
            v25 = *(float *)(v15 + 232 * *v14);
            if (v24 <= v25)
            {
              if (v17 > v24)
              {
                *v10 = v16;
                *(a2 - 1) = v22;
                v27 = *v14;
                if (*(float *)(v15 + 232 * *v10) > *(float *)(v15 + 232 * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_32;
            }
            if (v17 <= v24)
            {
              *v14 = v22;
              *v10 = v23;
              v40 = *(a2 - 1);
              if (*(float *)(v15 + 232 * v40) <= v25)
                goto LABEL_32;
              *v10 = v40;
            }
            else
            {
              *v14 = v16;
            }
            *(a2 - 1) = v23;
LABEL_32:
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = *v14;
          v19 = *v10;
          v20 = *(float *)(v15 + 232 * *v14);
          v21 = *(float *)(v15 + 232 * *v10);
          if (v20 <= v21)
          {
            if (v17 > v20)
            {
              *v14 = v16;
              *(a2 - 1) = v18;
              v26 = *v10;
              if (*(float *)(v15 + 232 * *v14) > *(float *)(v15 + 232 * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v17 <= v20)
            {
              *v10 = v18;
              *v14 = v19;
              v29 = *(a2 - 1);
              if (*(float *)(v15 + 232 * v29) <= v21)
                goto LABEL_23;
              *v14 = v29;
            }
            else
            {
              *v10 = v16;
            }
            *(a2 - 1) = v19;
          }
LABEL_23:
          v30 = &v10[v13];
          v33 = *(v30 - 1);
          v31 = v30 - 1;
          v32 = v33;
          v34 = v10[1];
          v35 = *(float *)(v15 + 232 * v33);
          v36 = *(float *)(v15 + 232 * v34);
          v37 = *(a2 - 2);
          v38 = *(float *)(v15 + 232 * v37);
          if (v35 <= v36)
          {
            if (v38 > v35)
            {
              *v31 = v37;
              *(a2 - 2) = v32;
              v39 = v10[1];
              if (*(float *)(v15 + 232 * *v31) > *(float *)(v15 + 232 * v39))
              {
                v10[1] = *v31;
                *v31 = v39;
              }
            }
          }
          else
          {
            if (v38 <= v35)
            {
              v10[1] = v32;
              *v31 = v34;
              v41 = *(a2 - 2);
              if (*(float *)(v15 + 232 * v41) <= v36)
                goto LABEL_37;
              *v31 = v41;
            }
            else
            {
              v10[1] = v37;
            }
            *(a2 - 2) = v34;
          }
LABEL_37:
          v42 = &v10[v13];
          v45 = v42[1];
          v43 = v42 + 1;
          v44 = v45;
          v46 = v10[2];
          v47 = *(float *)(v15 + 232 * v45);
          v48 = *(float *)(v15 + 232 * v46);
          v49 = *(a2 - 3);
          v50 = *(float *)(v15 + 232 * v49);
          if (v47 <= v48)
          {
            if (v50 > v47)
            {
              *v43 = v49;
              *(a2 - 3) = v44;
              v51 = v10[2];
              if (*(float *)(v15 + 232 * *v43) > *(float *)(v15 + 232 * v51))
              {
                v10[2] = *v43;
                *v43 = v51;
              }
            }
          }
          else
          {
            if (v50 <= v47)
            {
              v10[2] = v44;
              *v43 = v46;
              v52 = *(a2 - 3);
              if (*(float *)(v15 + 232 * v52) <= v48)
                goto LABEL_46;
              *v43 = v52;
            }
            else
            {
              v10[2] = v49;
            }
            *(a2 - 3) = v46;
          }
LABEL_46:
          v53 = *v14;
          v54 = *v31;
          v55 = *(float *)(v15 + 232 * *v14);
          v56 = *(float *)(v15 + 232 * *v31);
          v57 = *v43;
          v58 = *(float *)(v15 + 232 * *v43);
          if (v55 > v56)
          {
            if (v58 <= v55)
            {
              *v31 = v53;
              *v14 = v54;
              v31 = v14;
              v53 = v57;
              if (v58 <= v56)
              {
                v59 = *v10;
                *v10 = v54;
                *v14 = v59;
                --a4;
                v28 = *v10;
                if ((a5 & 1) != 0)
                  goto LABEL_56;
                goto LABEL_55;
              }
            }
            goto LABEL_53;
          }
          if (v58 <= v55)
            goto LABEL_54;
          *v14 = v57;
          *v43 = v53;
          v43 = v14;
          v53 = v54;
          if (v58 > v56)
          {
LABEL_53:
            *v31 = v57;
            *v43 = v54;
LABEL_54:
            v60 = *v10;
            *v10 = v53;
            *v14 = v60;
            --a4;
            v28 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_56;
LABEL_55:
            v61 = *(float *)(v15 + 232 * v28);
            if (*(float *)(v15 + 232 * *(v10 - 1)) > v61)
              goto LABEL_56;
            if (v61 <= *(float *)(v15 + 232 * *(a2 - 1)))
            {
              v80 = v10 + 1;
              do
              {
                v10 = v80;
                if (v80 >= a2)
                  break;
                ++v80;
              }
              while (v61 <= *(float *)(v15 + 232 * *v10));
            }
            else
            {
              do
              {
                v79 = v10[1];
                ++v10;
              }
              while (v61 <= *(float *)(v15 + 232 * v79));
            }
            v81 = a2;
            if (v10 < a2)
            {
              v81 = a2;
              do
                v82 = *--v81;
              while (v61 > *(float *)(v15 + 232 * v82));
            }
            if (v10 < v81)
            {
              v83 = *v10;
              v84 = *v81;
              do
              {
                *v10 = v84;
                *v81 = v83;
                do
                {
                  v85 = v10[1];
                  ++v10;
                  v83 = v85;
                }
                while (v61 <= *(float *)(v15 + 232 * v85));
                do
                {
                  v86 = *--v81;
                  v84 = v86;
                }
                while (v61 > *(float *)(v15 + 232 * v86));
              }
              while (v10 < v81);
            }
            v87 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v87;
            a5 = 0;
            *v87 = v28;
            continue;
          }
          v78 = *v10;
          *v10 = v57;
          *v14 = v78;
          --a4;
          v28 = *v10;
          if ((a5 & 1) == 0)
            goto LABEL_55;
LABEL_56:
          v62 = 0;
          v63 = *(_QWORD *)(*(_QWORD *)a3 + 680);
          v64 = *(float *)(v63 + 232 * v28);
          do
            v65 = v10[++v62];
          while (*(float *)(v63 + 232 * v65) > v64);
          v66 = &v10[v62];
          v67 = a2;
          if (v62 == 1)
          {
            v67 = a2;
            do
            {
              if (v66 >= v67)
                break;
              v69 = *--v67;
            }
            while (*(float *)(v63 + 232 * v69) <= v64);
          }
          else
          {
            do
              v68 = *--v67;
            while (*(float *)(v63 + 232 * v68) <= v64);
          }
          if (v66 >= v67)
          {
            v76 = v66 - 1;
            if (v66 - 1 != v10)
              goto LABEL_73;
          }
          else
          {
            v70 = *v67;
            v71 = v65;
            v72 = &v10[v62];
            v73 = v67;
            do
            {
              *v72 = v70;
              *v73 = v71;
              do
              {
                v74 = v72[1];
                ++v72;
                v71 = v74;
              }
              while (*(float *)(v63 + 232 * v74) > v64);
              do
              {
                v75 = *--v73;
                v70 = v75;
              }
              while (*(float *)(v63 + 232 * v75) <= v64);
            }
            while (v72 < v73);
            v76 = v72 - 1;
            if (v72 - 1 == v10)
              goto LABEL_74;
LABEL_73:
            *v10 = *v76;
          }
LABEL_74:
          *v76 = v28;
          if (v66 < v67)
            goto LABEL_77;
          v77 = sub_2399C4C84(v10, v76, a3);
          v10 = v76 + 1;
          result = (unsigned int *)sub_2399C4C84(v76 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v77)
              continue;
LABEL_77:
            result = (unsigned int *)sub_2399C40F4(v9, v76, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v76 + 1;
            continue;
          }
          a2 = v76;
          if (v77)
            return result;
          goto LABEL_2;
        }
        v105 = *(_QWORD *)a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v106 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v107 = 0;
              v108 = *(_QWORD *)(v105 + 680);
              v109 = v10;
              do
              {
                v112 = *v109;
                v111 = v109[1];
                v109 = v106;
                v113 = v112;
                v114 = *(float *)(v108 + 232 * v111);
                if (v114 > *(float *)(v108 + 232 * v112))
                {
                  v115 = v107;
                  do
                  {
                    *(unsigned int *)((char *)v10 + v115 + 4) = v113;
                    if (!v115)
                    {
                      v110 = v10;
                      goto LABEL_116;
                    }
                    v113 = *(unsigned int *)((char *)v10 + v115 - 4);
                    v115 -= 4;
                  }
                  while (v114 > *(float *)(v108 + 232 * v113));
                  v110 = (unsigned int *)((char *)v10 + v115 + 4);
LABEL_116:
                  *v110 = v111;
                }
                v106 = v109 + 1;
                v107 += 4;
              }
              while (v109 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v145 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v146 = *(_QWORD *)(v105 + 680);
            do
            {
              v148 = *v9;
              v147 = v9[1];
              v9 = v145;
              v149 = v148;
              v150 = *(float *)(v146 + 232 * v147);
              if (v150 > *(float *)(v146 + 232 * v148))
              {
                v151 = v9;
                do
                {
                  *v151 = v149;
                  v149 = *(v151 - 2);
                  --v151;
                }
                while (v150 > *(float *)(v146 + 232 * v149));
                *v151 = v147;
              }
              v145 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL sub_2399C4C84(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  float v13;
  float v14;
  unsigned int v15;
  float v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  float v22;
  float v23;
  float v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  float v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  int v40;
  uint64_t i;
  unsigned int v42;
  unsigned int v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 680) + 232 * v8) > *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 680)
                                                                                  + 232 * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *(_QWORD *)(*(_QWORD *)a3 + 680);
      v11 = *a1;
      v12 = a1[1];
      v13 = *(float *)(v10 + 232 * v12);
      v14 = *(float *)(v10 + 232 * *a1);
      v15 = *(a2 - 1);
      v16 = *(float *)(v10 + 232 * v15);
      if (v13 <= v14)
      {
        if (v16 > v13)
        {
          a1[1] = v15;
          *(a2 - 1) = v12;
          v38 = *a1;
          v37 = a1[1];
          if (*(float *)(v10 + 232 * v37) > *(float *)(v10 + 232 * *a1))
          {
            *a1 = v37;
            a1[1] = v38;
          }
        }
      }
      else if (v16 <= v13)
      {
        *a1 = v12;
        a1[1] = v11;
        v47 = *(a2 - 1);
        if (*(float *)(v10 + 232 * v47) > v14)
        {
          a1[1] = v47;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v15;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      sub_2399C5070(a1, a1 + 1, a1 + 2, a2 - 1, *(_QWORD *)(*(_QWORD *)a3 + 680));
      return 1;
    case 5:
      v27 = a1 + 2;
      v28 = a1 + 3;
      sub_2399C5070(a1, a1 + 1, a1 + 2, a1 + 3, *(_QWORD *)(*(_QWORD *)a3 + 680));
      v29 = *(a2 - 1);
      v30 = a1[3];
      v31 = *(_QWORD *)(*(_QWORD *)a3 + 680);
      if (*(float *)(v31 + 232 * v29) <= *(float *)(v31 + 232 * v30))
        return 1;
      *v28 = v29;
      *(a2 - 1) = v30;
      v32 = *v28;
      v33 = *v27;
      v34 = *(float *)(v31 + 232 * *v28);
      if (v34 <= *(float *)(v31 + 232 * *v27))
        return 1;
      *v27 = v32;
      *v28 = v33;
      v35 = a1[1];
      if (v34 <= *(float *)(v31 + 232 * v35))
        return 1;
      a1[1] = v32;
      a1[2] = v35;
      v36 = *a1;
      if (v34 <= *(float *)(v31 + 232 * *a1))
        return 1;
      *a1 = v32;
      a1[1] = v36;
      return 1;
    default:
      v18 = a1 + 2;
      v17 = a1[2];
      v19 = a1[1];
      v20 = *(_QWORD *)(*(_QWORD *)a3 + 680);
      v21 = *a1;
      v22 = *(float *)(v20 + 232 * v19);
      v23 = *(float *)(v20 + 232 * *a1);
      v24 = *(float *)(v20 + 232 * v17);
      if (v22 > v23)
      {
        v25 = a1;
        v26 = a1 + 2;
        if (v24 <= v22)
        {
          *a1 = v19;
          a1[1] = v21;
          v25 = a1 + 1;
          v26 = a1 + 2;
          if (v24 <= v23)
            goto LABEL_25;
        }
LABEL_24:
        *v25 = v17;
        *v26 = v21;
        goto LABEL_25;
      }
      if (v24 > v22)
      {
        a1[1] = v17;
        *v18 = v19;
        v25 = a1;
        v26 = a1 + 1;
        if (v24 > v23)
          goto LABEL_24;
      }
LABEL_25:
      v39 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v40 = 0;
      for (i = 12; ; i += 4)
      {
        v42 = *v39;
        v43 = *v18;
        v44 = *(float *)(v20 + 232 * *v39);
        if (v44 > *(float *)(v20 + 232 * v43))
          break;
LABEL_34:
        v18 = v39++;
        if (v39 == a2)
          return 1;
      }
      v45 = i;
      do
      {
        *(unsigned int *)((char *)a1 + v45) = v43;
        v46 = v45 - 4;
        if (v45 == 4)
        {
          *a1 = v42;
          if (++v40 != 8)
            goto LABEL_34;
          return v39 + 1 == a2;
        }
        v43 = *(unsigned int *)((char *)a1 + v45 - 8);
        v45 -= 4;
      }
      while (v44 > *(float *)(v20 + 232 * v43));
      *(unsigned int *)((char *)a1 + v46) = v42;
      if (++v40 != 8)
        goto LABEL_34;
      return v39 + 1 == a2;
  }
}

unsigned int *sub_2399C5070(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t a5)
{
  unsigned int v5;
  unsigned int v6;
  float v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *a2;
  v6 = *result;
  v7 = *(float *)(a5 + 232 * *a2);
  v8 = *(float *)(a5 + 232 * *result);
  v9 = *a3;
  v10 = *(float *)(a5 + 232 * *a3);
  if (v7 <= v8)
  {
    if (v10 <= v7)
    {
      v6 = *a3;
      goto LABEL_14;
    }
    *a2 = v9;
    *a3 = v5;
    v11 = *result;
    if (*(float *)(a5 + 232 * *a2) <= *(float *)(a5 + 232 * *result))
    {
      v6 = v5;
      v9 = v5;
      goto LABEL_14;
    }
    *result = *a2;
    *a2 = v11;
    v6 = *a3;
  }
  else
  {
    if (v10 <= v7)
    {
      *result = v5;
      *a2 = v6;
      v9 = *a3;
      if (*(float *)(a5 + 232 * *a3) <= v8)
      {
        v6 = *a3;
        goto LABEL_14;
      }
      *a2 = v9;
    }
    else
    {
      *result = v9;
    }
    *a3 = v6;
  }
  v9 = v6;
LABEL_14:
  if (*(float *)(a5 + 232 * *a4) > *(float *)(a5 + 232 * v6))
  {
    *a3 = *a4;
    *a4 = v9;
    v12 = *a2;
    if (*(float *)(a5 + 232 * *a3) > *(float *)(a5 + 232 * *a2))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = *result;
      if (*(float *)(a5 + 232 * *a2) > *(float *)(a5 + 232 * *result))
      {
        *result = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_2399C51C0(unint64_t *a1, uint64_t *a2)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  char *v7;
  double *v8;
  unint64_t v9;
  double *v10;
  double *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  _QWORD *v26;
  int *v27;
  unint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  double *v34;
  _DWORD *v35;
  int v36;

  v4 = (unsigned int *)*a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  if (v3 == *a1)
  {
    v8 = 0;
    v10 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFDLL)
      sub_2394189F8();
    v7 = (char *)operator new(4 * v5);
    v8 = (double *)v7;
    v9 = v5 >> 2;
    v10 = (double *)&v7[16 * (v5 >> 2)];
    v11 = (double *)v7;
    if ((((v5 >> 2) - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_40;
    v12 = (((v5 >> 2) - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
    v11 = (double *)&v7[16 * (v12 & 0x1FFFFFFFFFFFFFFELL)];
    v13 = v7 + 16;
    v14 = v12 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *((_DWORD *)v13 - 4) = 0;
      *(_DWORD *)v13 = 0;
      *((_QWORD *)v13 - 1) = 0;
      *((_QWORD *)v13 + 1) = 0;
      v13 += 32;
      v14 -= 2;
    }
    while (v14);
    if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_40:
      do
      {
        *(_DWORD *)v11 = 0;
        v11[1] = 0.0;
        v11 += 2;
      }
      while (v11 != v10);
    }
    v15 = *a2;
    if (v9 <= 1)
      v9 = 1;
    v16 = v7 + 8;
    do
    {
      v17 = *v4++;
      v18 = *(_QWORD *)(v15 + 8 * v17);
      *((_DWORD *)v16 - 2) = v17;
      *v16 = v18;
      v16 += 2;
      --v9;
    }
    while (v9);
  }
  v19 = 126 - 2 * __clz(((char *)v10 - (char *)v8) >> 4);
  if (v10 == v8)
    v20 = 0;
  else
    v20 = v19;
  sub_2399C8C2C(v8, v10, v20, 1);
  v21 = *a1;
  v22 = a1[1] - *a1;
  if (v22)
  {
    v23 = v22 >> 2;
    if (v23 <= 1)
      v23 = 1;
    if (v23 >= 0xA
      && (v21 < (unint64_t)&v8[2 * v23 - 1] - 4 ? (v24 = (unint64_t)v8 >= v21 + 4 * v23) : (v24 = 1), v24))
    {
      v25 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      v26 = (_QWORD *)(v21 + 8);
      v27 = (int *)(v8 + 4);
      v28 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v29 = v27 + 4;
        LODWORD(v30) = *(v27 - 8);
        HIDWORD(v30) = *(v27 - 4);
        v31 = *v27;
        v27 += 16;
        LODWORD(v32) = v31;
        HIDWORD(v32) = *v29;
        *(v26 - 1) = v30;
        *v26 = v32;
        v26 += 2;
        v28 -= 4;
      }
      while (v28);
      if (v23 == v25)
        goto LABEL_35;
    }
    else
    {
      v25 = 0;
    }
    v33 = v23 - v25;
    v34 = &v8[2 * v25];
    v35 = (_DWORD *)(v21 + 4 * v25);
    do
    {
      v36 = *(_DWORD *)v34;
      v34 += 2;
      *v35++ = v36;
      --v33;
    }
    while (v33);
LABEL_35:
    operator delete(v8);
    return 1;
  }
  if (v8)
    goto LABEL_35;
  return 1;
}

void sub_2399C53A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2399C53C4(unint64_t *a1, double **a2, uint64_t *a3, unsigned int *a4, uint64_t *a5)
{
  uint64_t *v5;
  double *v7;
  double *v8;
  unint64_t v9;
  double v10;
  double *v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double *v29;
  double *v30;
  unint64_t v31;
  double v32;
  unsigned int v33;
  double v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v38;
  unsigned int v40;
  _DWORD *v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  int v66;
  unint64_t v68;
  BOOL v69;
  unint64_t v70;
  _QWORD *v71;
  int *v72;
  unint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  int *v83;
  _DWORD *v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  unsigned int v91;
  _DWORD *v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t *v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  _DWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  int v115;
  uint64_t v116;
  _QWORD *v117;
  void *v118;
  void *v119;
  unint64_t v121;
  BOOL v122;
  uint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unsigned int v127;

  v5 = a5;
  v8 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v10 = 0.0;
    goto LABEL_9;
  }
  v9 = (char *)v7 - (char *)v8 - 8;
  if (v9 < 8)
  {
    v10 = 0.0;
    v11 = *a2;
    do
    {
LABEL_8:
      v15 = *v11++;
      v10 = v10 + v15;
    }
    while (v11 != v7);
    goto LABEL_9;
  }
  v12 = (v9 >> 3) + 1;
  v11 = &v8[v12 & 0x3FFFFFFFFFFFFFFELL];
  v13 = v8 + 1;
  v10 = 0.0;
  v14 = v12 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    v10 = v10 + *(v13 - 1) + *v13;
    v13 += 2;
    v14 -= 2;
  }
  while (v14);
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  v16 = *a4;
  v17 = a5[1];
  v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a5) >> 3);
  if (v16 <= v18)
  {
    if (v16 < v18)
    {
      v19 = *a5 + 24 * v16;
      if (v17 != v19)
      {
        v20 = a5[1];
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v17 - 16) = v21;
            operator delete(v21);
          }
          v17 = v20;
        }
        while (v20 != v19);
      }
      v5[1] = v19;
    }
  }
  else
  {
    sub_2394D951C((uint64_t)a5, v16 - v18);
  }
  v121 = *a4;
  if (!(_DWORD)v121)
    return (_DWORD)v121 != 0;
  if ((_DWORD)v121 != 1)
  {
    v30 = *a2;
    v29 = a2[1];
    v31 = v29 - *a2;
    v124 = v5;
    v125 = v31;
    v126 = a1;
    if (v31 > v121)
    {
      v32 = v10 / (double)v121;
      v122 = 0;
      v33 = 1;
      v34 = 0.0;
      v35 = *a4;
      v36 = v121 - 1;
      if (v32 <= 0.0 && v121 > 1)
        goto LABEL_36;
      while (1)
      {
        v41 = (_DWORD *)(*a1 + 16 * v36);
        v42 = *v41;
        v43 = (*a2)[v42];
        v44 = *v5 + 24 * (v33 - 1);
        v46 = (uint64_t *)(v44 + 8);
        v45 = *(char **)(v44 + 8);
        v47 = *(_QWORD *)(v44 + 16);
        if ((unint64_t)v45 >= v47)
          break;
        *(_DWORD *)v45 = v42;
        v38 = (uint64_t)(v45 + 4);
LABEL_30:
        v34 = v34 + v43;
        *v46 = v38;
        v35 = *a4;
        if (v31 <= *a4 + v36)
        {
          if (v122)
          {
            sub_2399C51C0((unint64_t *)(v5[1] - 24), a3);
            if (v33 < *a4)
            {
              v80 = (_QWORD *)v5[1];
              v81 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v80 - *v5) >> 3);
              if (v33 <= v81)
              {
                if (v33 < v81)
                {
                  v116 = *v5 + 24 * v33;
                  if (v80 != (_QWORD *)v116)
                  {
                    v117 = (_QWORD *)v5[1];
                    do
                    {
                      v119 = (void *)*(v117 - 3);
                      v117 -= 3;
                      v118 = v119;
                      if (v119)
                      {
                        *(v80 - 2) = v118;
                        operator delete(v118);
                      }
                      v80 = v117;
                    }
                    while (v117 != (_QWORD *)v116);
                  }
                  v5[1] = v116;
                }
              }
              else
              {
                sub_2394D951C((uint64_t)v5, v33 - v81);
              }
            }
            return (_DWORD)v121 != 0;
          }
          if (v36 % v35 + 1 == v35)
            v66 = 0;
          else
            v66 = v36 % v35 + 1;
          v122 = v66 == (_DWORD)v121 - 2;
          v36 = v66;
          if (v34 >= v32 && v35 > v33)
          {
LABEL_36:
            v10 = v10 - v34;
            v32 = v10 / (double)(v35 - v33);
            v40 = v36;
            sub_2399C51C0((unint64_t *)(*v5 + 24 * (v33 - 1)), a3);
            v36 = v40;
            v34 = 0.0;
            ++v33;
          }
        }
        else
        {
          v36 += v35;
          if (v34 >= v32 && v35 > v33)
            goto LABEL_36;
        }
      }
      v48 = *(char **)v44;
      v49 = (uint64_t)&v45[-*(_QWORD *)v44];
      v50 = v49 >> 2;
      v51 = (v49 >> 2) + 1;
      if (v51 >> 62)
        sub_2394189F8();
      v52 = v47 - (_QWORD)v48;
      if (v52 >> 1 > v51)
        v51 = v52 >> 1;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
        v53 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      v127 = v36;
      if (v53)
      {
        if (v53 >> 62)
          goto LABEL_133;
        v54 = operator new(4 * v53);
        v55 = &v54[4 * v50];
        *v55 = *v41;
        v38 = (uint64_t)(v55 + 1);
        if (v45 != v48)
          goto LABEL_47;
      }
      else
      {
        v54 = 0;
        v55 = (_DWORD *)(4 * v50);
        *(_DWORD *)(4 * v50) = v42;
        v38 = 4 * v50 + 4;
        if (v45 != v48)
        {
LABEL_47:
          v56 = v45 - 4 - v48;
          if (v56 >= 0x2C)
          {
            v57 = v45 - &v54[v49];
            v5 = v124;
            if (v57 >= 0x20)
            {
              v58 = (v56 >> 2) + 1;
              v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
              v60 = &v45[-v59];
              v55 = (_DWORD *)((char *)v55 - v59);
              v61 = &v54[4 * v50 - 16];
              v62 = v45 - 16;
              v63 = v58 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v64 = *(_OWORD *)v62;
                *(v61 - 1) = *((_OWORD *)v62 - 1);
                *v61 = v64;
                v61 -= 2;
                v62 -= 32;
                v63 -= 8;
              }
              while (v63);
              v45 = v60;
              if (v58 == (v58 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_56;
            }
          }
          else
          {
            v5 = v124;
          }
          do
          {
            v65 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *--v55 = v65;
          }
          while (v45 != v48);
LABEL_56:
          *(_QWORD *)v44 = v55;
          *v46 = v38;
          *(_QWORD *)(v44 + 16) = &v54[4 * v53];
          if (v48)
            operator delete(v48);
          v31 = v125;
          a1 = v126;
          v36 = v127;
          goto LABEL_30;
        }
      }
      v5 = v124;
      goto LABEL_56;
    }
    v78 = (_QWORD *)v5[1];
    v79 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v78 - *v5) >> 3);
    if (v31 <= v79)
    {
      if (v31 < v79)
      {
        v86 = *v5 + 24 * v31;
        if (v78 != (_QWORD *)v86)
        {
          v87 = (_QWORD *)v5[1];
          do
          {
            v89 = (void *)*(v87 - 3);
            v87 -= 3;
            v88 = v89;
            if (v89)
            {
              *(v78 - 2) = v88;
              operator delete(v88);
            }
            v78 = v87;
          }
          while (v87 != (_QWORD *)v86);
        }
        v5 = v124;
        v124[1] = v86;
      }
    }
    else
    {
      sub_2394D951C((uint64_t)v5, v31 - v79);
    }
    if (v29 == v30)
      return (_DWORD)v121 != 0;
    v90 = 0;
    v91 = 0;
    while (1)
    {
      while (1)
      {
        v93 = *v5 + 24 * v90;
        v94 = (_DWORD *)(*a1 + 16 * v90);
        v95 = (uint64_t *)(v93 + 8);
        v96 = *(char **)(v93 + 8);
        v97 = *(_QWORD *)(v93 + 16);
        if ((unint64_t)v96 >= v97)
          break;
        *(_DWORD *)v96 = *v94;
        v92 = v96 + 4;
        a1 = v126;
        *v95 = (uint64_t)v92;
        v90 = ++v91;
        if (v125 <= v91)
          return (_DWORD)v121 != 0;
      }
      v98 = *(char **)v93;
      v99 = (uint64_t)&v96[-*(_QWORD *)v93];
      v100 = v99 >> 2;
      v101 = (v99 >> 2) + 1;
      if (v101 >> 62)
        sub_2394189F8();
      v102 = v97 - (_QWORD)v98;
      if (v102 >> 1 > v101)
        v101 = v102 >> 1;
      v103 = (unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v101;
      if (v103)
        break;
      v104 = 0;
      v105 = (_DWORD *)(4 * v100);
      *(_DWORD *)(4 * v100) = *v94;
      v106 = 4 * v100 + 4;
      if (v96 != v98)
        goto LABEL_114;
LABEL_120:
      *(_QWORD *)v93 = v105;
      *v95 = v106;
      *(_QWORD *)(v93 + 16) = &v104[4 * v103];
      if (v98)
        operator delete(v98);
      v5 = v124;
      a1 = v126;
      *v95 = v106;
      v90 = ++v91;
      if (v125 <= v91)
        return (_DWORD)v121 != 0;
    }
    if (v103 >> 62)
LABEL_133:
      sub_239418A80();
    v104 = operator new(4 * v103);
    v105 = &v104[4 * v100];
    *v105 = *v94;
    v106 = (uint64_t)(v105 + 1);
    if (v96 == v98)
      goto LABEL_120;
LABEL_114:
    v107 = v96 - 4 - v98;
    if (v107 < 0x2C)
      goto LABEL_137;
    if ((unint64_t)(v96 - &v104[v99]) < 0x20)
      goto LABEL_137;
    v108 = (v107 >> 2) + 1;
    v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
    v110 = &v96[-v109];
    v105 = (_DWORD *)((char *)v105 - v109);
    v111 = &v104[4 * v100 - 16];
    v112 = v96 - 16;
    v113 = v108 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v114 = *(_OWORD *)v112;
      *(v111 - 1) = *((_OWORD *)v112 - 1);
      *v111 = v114;
      v111 -= 2;
      v112 -= 32;
      v113 -= 8;
    }
    while (v113);
    v96 = v110;
    if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_137:
      do
      {
        v115 = *((_DWORD *)v96 - 1);
        v96 -= 4;
        *--v105 = v115;
      }
      while (v96 != v98);
    }
    goto LABEL_120;
  }
  v23 = *v5;
  v24 = *a1;
  v25 = a1[1];
  v26 = (uint64_t)(v25 - *a1) >> 4;
  v27 = *(_QWORD *)*v5;
  v28 = (*(_QWORD *)(*v5 + 8) - v27) >> 2;
  if (v26 <= v28)
  {
    if (v26 < v28)
      *(_QWORD *)(v23 + 8) = v27 + 4 * v26;
  }
  else
  {
    sub_23942CB44(v23, v26 - v28);
    v24 = *a1;
    v25 = a1[1];
    v26 = (uint64_t)(v25 - *a1) >> 4;
  }
  if (v25 != v24)
  {
    v68 = *(_QWORD *)*v5;
    if (v26 <= 1)
      v26 = 1;
    if (v26 >= 0xA && (v68 < v24 + 16 * v26 - 12 ? (v69 = v24 >= v68 + 4 * v26) : (v69 = 1), v69))
    {
      v70 = v26 & 0xFFFFFFFFFFFFFFFCLL;
      v71 = (_QWORD *)(v68 + 8);
      v72 = (int *)(v24 + 32);
      v73 = v26 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v74 = v72 + 4;
        LODWORD(v75) = *(v72 - 8);
        HIDWORD(v75) = *(v72 - 4);
        v76 = *v72;
        v72 += 16;
        LODWORD(v77) = v76;
        HIDWORD(v77) = *v74;
        *(v71 - 1) = v75;
        *v71 = v77;
        v71 += 2;
        v73 -= 4;
      }
      while (v73);
      if (v26 == v70)
        return (_DWORD)v121 != 0;
    }
    else
    {
      v70 = 0;
    }
    v82 = v26 - v70;
    v83 = (int *)(v24 + 16 * v70);
    v84 = (_DWORD *)(v68 + 4 * v70);
    do
    {
      v85 = *v83;
      v83 += 4;
      *v84++ = v85;
      --v82;
    }
    while (v82);
  }
  return (_DWORD)v121 != 0;
}

uint64_t sub_2399C5B64(std::__shared_weak_count **a1, unsigned int a2)
{
  std::__shared_weak_count *v4;
  void *v5;
  int v6;
  int v7;
  int shared_owners_high;
  std::__shared_weak_count *v9;
  int v10;
  uint64_t shared_owners_low;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t shared_weak_owners;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;

  if (HIDWORD((*a1)->__vftable) >= a2 || LODWORD((*a1)->__shared_owners_) >= a2)
    return 0;
  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF12B0;
  LODWORD(v4[1].__vftable) = 0;
  HIDWORD(v4[1].__vftable) = a2;
  LODWORD(v4[1].__shared_owners_) = a2;
  HIDWORD(v4[1].__shared_owners_) = 1;
  v4[1].__shared_weak_owners_ = 0;
  v31 = v4 + 1;
  v32 = v4;
  v5 = (void *)operator new[]();
  v4[1].__shared_weak_owners_ = (uint64_t)v5;
  v6 = HIDWORD(v4[1].__vftable);
  v7 = LODWORD(v4[1].__shared_owners_) * v6;
  shared_owners_high = HIDWORD(v4[1].__shared_owners_);
  bzero(v5, (v7 * shared_owners_high));
  v9 = *a1;
  v10 = HIDWORD((*a1)->__vftable);
  if (v10)
  {
    shared_owners_low = LODWORD(v9->__shared_owners_);
    if ((_DWORD)shared_owners_low)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      shared_weak_owners = v9->__shared_weak_owners_;
      v16 = HIDWORD(v9->__shared_owners_);
      do
      {
        v17 = shared_owners_low;
        v18 = v12;
        v19 = v13;
        do
        {
          *((_BYTE *)v5 + v19) = *(_BYTE *)(shared_weak_owners + v18);
          v19 += v6 * shared_owners_high;
          v18 += v10 * v16;
          --v17;
        }
        while (v17);
        ++v14;
        v13 += shared_owners_high;
        v12 += v16;
      }
      while (v14 != v10);
    }
  }
  v20 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = a1[1];
  *a1 = v31;
  a1[1] = v32;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!v32)
    return 1;
  v28 = (unint64_t *)&v32->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
    return 1;
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  return 1;
}

void sub_2399C5D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_239416DA0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2399C5D98(uint64_t a1, uint64_t a2, uint64_t a3, signed int a4, int a5, unsigned int *a6, signed int *a7, _DWORD *a8, _DWORD *a9, int *a10, int a11, int *a12)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  signed int v37;
  signed int v38;
  signed int v39;
  int v40;
  int v41;
  signed int v42;
  signed int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v56;
  char v58;
  int v59;
  int v61;
  int v62;
  unsigned int v63;
  int v65;

  v12 = 0;
  v58 = 0;
  v56 = a5 * a4;
  if (a5 * a4 >= 4096)
    v13 = 4096;
  else
    v13 = a5 * a4;
  if (v13 <= 16)
    v14 = 16;
  else
    v14 = v13;
  v15 = a5 + 1;
  v16 = 0x7FFFFFFF;
  v61 = a5;
  v59 = v14;
  do
  {
    v17 = *(_DWORD *)(a2 + 4);
    v18 = *(_DWORD *)(a2 + 8);
    v19 = 69069 * *a12 + 12345;
    v20 = a12[1] ^ (a12[1] << 13);
    v21 = v20 ^ (v20 >> 17);
    v22 = v21 ^ (32 * v21);
    v23 = a12[3] + 698769069 * a12[2];
    v24 = v21 + v19 + a12[3] - 83 * a12[2];
    v25 = v24 & 1;
    *a12 = v19;
    a12[1] = v22;
    *((_QWORD *)a12 + 1) = v23;
    if ((v24 & 1) != 0)
      v26 = v17;
    else
      v26 = v18;
    if ((v24 & 1) != 0)
      v27 = v18;
    else
      v27 = v17;
    v28 = v15;
    v29 = a4 + 1;
    if (a11)
    {
      v29 = a11 - v27 >= a4 + 1 ? a4 + 1 : a11 - v27;
      v28 = a11 - v26;
      if (a11 - v26 >= v15)
        v28 = v15;
    }
    v30 = HIDWORD(v23);
    if (v29)
    {
      v19 = 69069 * v19 + 12345;
      v31 = v22 ^ (v22 << 13) ^ ((v22 ^ (v22 << 13)) >> 17);
      v22 = v31 ^ (32 * v31);
      *a12 = v19;
      a12[1] = v22;
      v23 = v30 + 698769069 * v23;
      v30 = HIDWORD(v23);
      *((_QWORD *)a12 + 1) = v23;
      v32 = (v19 + (int)v23 + v22) % (v29 + 1);
      if (v28)
        goto LABEL_24;
    }
    else
    {
      v32 = 0;
      if (v28)
      {
LABEL_24:
        v33 = 69069 * v19 + 12345;
        v34 = v22 ^ (v22 << 13) ^ ((v22 ^ (v22 << 13)) >> 17);
        v35 = v34 ^ (32 * v34);
        *a12 = v33;
        a12[1] = v35;
        v36 = v30 + 698769069 * v23;
        *((_QWORD *)a12 + 1) = v36;
        v37 = (v35 + v33 + (int)v36) % (v28 + 1);
        goto LABEL_27;
      }
    }
    v37 = 0;
LABEL_27:
    v38 = v32 + v27;
    if ((int)(v32 + v27) <= a4)
      v38 = a4;
    v39 = v37 + v26;
    if (v37 + v26 <= a5)
      v39 = a5;
    v40 = v39 * v38;
    if (v38 <= v39)
      v38 = v39;
    v41 = v40 + v38 * v38;
    if (v41 <= v16)
    {
      if (v41 != v16)
        goto LABEL_41;
      if (v37 >= (int)v32)
        v42 = v32;
      else
        v42 = v37;
      v43 = *a7;
      if (*a7 >= (int)*a6)
        v43 = *a6;
      if (v42 <= v43)
      {
LABEL_41:
        v62 = v16;
        v65 = v25;
        if (v25)
          v44 = a3;
        else
          v44 = a2;
        v45 = *(_DWORD *)(a1 + 8);
        if (v45
          && (v46 = *(_DWORD *)(a1 + 4)) != 0
          && ((v47 = *(_DWORD *)(v44 + 4), v63 = *(_DWORD *)(v44 + 8), v63 <= 8) ? (v48 = 1) : (v48 = 8),
              v47 <= 8 ? (v49 = 1) : (v49 = 8),
              v46 > v32))
        {
          v50 = 0;
          while (1)
          {
            v51 = v50;
            if (v50 + v37 < v45)
              break;
LABEL_61:
            v50 += v48;
            if (v51 + v48 >= v63)
            {
              v50 = (v51 & (v48 - 1)) + 1;
              if (v50 == v48)
                goto LABEL_8;
            }
          }
          v52 = 0;
          v53 = v32;
          while (!*(_BYTE *)(*(_QWORD *)(a1 + 16) + (v53 + (v50 + v37) * v46) * *(_DWORD *)(a1 + 12))
               || !*(_BYTE *)(*(_QWORD *)(v44 + 16) + (v52 + v50 * v47) * *(_DWORD *)(v44 + 12)))
          {
            v54 = v52 + v49;
            if (v52 + v49 < v47 || (v54 = (v52 & (v49 - 1)) + 1, v54 != v49))
            {
              v53 = v54 + v32;
              v52 = v54;
              if (v54 + v32 < v46)
                continue;
            }
            goto LABEL_61;
          }
          a5 = v61;
          v16 = v62;
          v14 = v59;
        }
        else
        {
LABEL_8:
          *a6 = v32;
          *a7 = v37;
          *a8 = v27;
          *a9 = v26;
          v58 = 1;
          v16 = v41;
          *a10 = v65;
          a5 = v61;
          v14 = v59;
          if (v40 == v56)
            return v58 & 1;
        }
      }
    }
    ++v12;
  }
  while (v12 != v14);
  return v58 & 1;
}

uint64_t sub_2399C6130(char **a1, uint64_t a2, char **a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  float *v12;
  float v13;
  float *v14;
  float v15;
  char *v16;
  unint64_t v17;
  char *v18;
  float *v19;
  char *v20;
  uint64_t v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  float *v30;
  float *i;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unsigned int *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  float *v50;
  float v51;
  float v52;
  char *v53;
  float *v54;
  float *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  uint64_t v71;
  __int128 v72;
  char *v73;
  unsigned int *v74;
  unint64_t v75;
  int32x2_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _DWORD *v80;
  char *v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  char *v87;
  uint64_t v88;
  __int128 v89;
  int v90;
  unsigned int v92;

  v4 = *a1;
  v3 = a1[1];
  v5 = v3 - *a1;
  if ((unint64_t)v5 < 0xC)
    return 0;
  v8 = v5 >> 2;
  if (v5 == 12)
  {
    if (a3 != a1)
      sub_23942156C(a3, v4, v3, 3uLL);
    return 1;
  }
  v10 = *(unsigned int *)v4;
  if (v4 != v3)
  {
    v11 = *a1;
    do
    {
      v12 = (float *)(a2 + 8 * *(unsigned int *)v11);
      v13 = v12[1];
      v14 = (float *)(a2 + 8 * v10);
      v15 = v14[1];
      if (v13 < v15 || v13 < (float)(v15 + 0.000001) && *v12 < *v14)
        v10 = *(unsigned int *)v11;
      v11 += 4;
    }
    while (v11 != v3);
  }
  if ((unint64_t)v5 >= 0x5555555555555555)
    sub_2394189F8();
  v16 = (char *)operator new(12 * v8);
  v17 = (unint64_t)v16;
  if (v4 == v3)
  {
    v20 = v16;
  }
  else
  {
    v18 = &v16[12 * v8];
    v19 = (float *)(a2 + 8 * v10);
    v20 = v16;
    do
    {
      v21 = *(unsigned int *)v4;
      if (v21 != v10)
      {
        v22 = (float *)(a2 + 8 * v21);
        v23 = *v22 - *v19;
        v24 = sqrtf((float)((float)(v22[1] - v19[1]) * (float)(v22[1] - v19[1])) + (float)(v23 * v23));
        v25 = v23 / v24;
        if (v24 <= 0.0)
          v26 = 1.0;
        else
          v26 = v25;
        if (v17 < (unint64_t)v18)
        {
          *(_DWORD *)v17 = v21;
          *(float *)(v17 + 4) = v26;
          *(float *)(v17 + 8) = v24;
          v17 += 12;
        }
        else
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v20) >> 2) + 1;
          if (v27 > 0x1555555555555555)
            sub_2394189F8();
          if (0x5555555555555556 * ((v18 - v20) >> 2) > v27)
            v27 = 0x5555555555555556 * ((v18 - v20) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v18 - v20) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v28 = 0x1555555555555555;
          else
            v28 = v27;
          if (v28)
          {
            if (v28 > 0x1555555555555555)
              sub_239418A80();
            v29 = (char *)operator new(12 * v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = (float *)&v29[4 * ((uint64_t)(v17 - (_QWORD)v20) >> 2)];
          *(_DWORD *)v30 = v21;
          v30[1] = v26;
          v30[2] = v24;
          for (i = v30; (char *)v17 != v20; *((_DWORD *)i + 2) = v33)
          {
            v32 = *(_QWORD *)(v17 - 12);
            v17 -= 12;
            v33 = *(_DWORD *)(v17 + 8);
            *(_QWORD *)(i - 3) = v32;
            i -= 3;
          }
          v18 = &v29[12 * v28];
          v17 = (unint64_t)(v30 + 3);
          if (v20)
            operator delete(v20);
          v20 = (char *)i;
          v19 = (float *)(a2 + 8 * v10);
        }
      }
      v4 += 4;
    }
    while (v4 != v3);
  }
  v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v20) >> 2);
  v6 = v34 > 1;
  if (v34 > 1)
  {
    v35 = 126 - 2 * __clz(v34);
    if ((char *)v17 == v20)
      v36 = 0;
    else
      v36 = v35;
    sub_2399C9D54((uint64_t)v20, v17, v36, 1);
    v37 = *a3;
    a3[1] = *a3;
    v38 = (unint64_t)a3[2];
    v92 = v6;
    if ((unint64_t)v37 >= v38)
    {
      v40 = v38 - (_QWORD)v37;
      v41 = v40 >> 1;
      if ((unint64_t)(v40 >> 1) <= 1)
        v41 = 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v42 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42 >> 62)
        goto LABEL_122;
      v43 = (char *)operator new(4 * v42);
      *(_DWORD *)v43 = v10;
      v39 = v43 + 4;
      *a3 = v43;
      a3[1] = v43 + 4;
      a3[2] = &v43[4 * v42];
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_DWORD *)v37 = v10;
      v39 = v37 + 4;
    }
    a3[1] = v39;
    if ((char *)v17 != v20)
    {
      v44 = (unsigned int *)v20;
      while (1)
      {
        while (1)
        {
          v46 = *v44;
          v47 = *a3;
          v48 = v39 - *a3;
          v49 = v48 >> 2;
          if ((unint64_t)v48 >= 5)
          {
            v50 = (float *)(a2 + 8 * v46);
            v51 = *v50;
            v52 = v50[1];
            do
            {
              v53 = &v47[4 * v49];
              v54 = (float *)(a2 + 8 * *((unsigned int *)v53 - 2));
              v55 = (float *)(a2 + 8 * *((unsigned int *)v53 - 1));
              if ((float)((float)((float)((float)(*v55 - *v54) * (float)(v52 - v54[1]))
                                 - (float)((float)(v55[1] - v54[1]) * (float)(v51 - *v54)))
                         * 0.5) >= 0.000001)
                break;
              v39 -= 4;
              a3[1] = v39;
              v48 -= 4;
              v49 = v48 >> 2;
            }
            while ((unint64_t)v48 > 4);
          }
          v56 = (unint64_t)a3[2];
          if ((unint64_t)v39 >= v56)
            break;
          *(_DWORD *)v39 = v46;
          v39 += 4;
          v45 = v39;
          a3[1] = v39;
          v44 += 3;
          if (v44 == (unsigned int *)v17)
            goto LABEL_92;
        }
        v57 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62)
          sub_2394189F8();
        v58 = v56 - (_QWORD)v47;
        if (v58 >> 1 > v57)
          v57 = v58 >> 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          if (v59 >> 62)
            sub_239418A80();
          v60 = v59;
          v61 = operator new(4 * v59);
          v59 = v60;
          v62 = &v61[4 * v49];
          *(_DWORD *)v62 = v46;
          v45 = v62 + 4;
          if (v39 == v47)
            goto LABEL_77;
        }
        else
        {
          v61 = 0;
          v62 = (char *)(4 * v49);
          *(_DWORD *)(4 * v49) = v46;
          v45 = (char *)(4 * v49 + 4);
          if (v39 == v47)
            goto LABEL_77;
        }
        v63 = v39 - 4 - v47;
        if (v63 >= 0xBC)
        {
          v66 = 4 * v49;
          if (&v61[4 * v49 - 4 - (v63 & 0xFFFFFFFFFFFFFFFCLL)] > &v61[4 * v49 - 4])
          {
            v64 = v39;
          }
          else if (&v39[-(v63 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v39 - 4)
          {
            v64 = v39;
          }
          else if ((unint64_t)(v39 - v61 - v66) >= 0x20)
          {
            v67 = (v63 >> 2) + 1;
            v68 = 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
            v64 = &v39[-v68];
            v62 -= v68;
            v69 = &v61[v66 - 16];
            v70 = (__int128 *)(v39 - 16);
            v71 = v67 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v72 = *v70;
              *(v69 - 1) = *(v70 - 1);
              *v69 = v72;
              v69 -= 2;
              v70 -= 2;
              v71 -= 8;
            }
            while (v71);
            if (v67 == (v67 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_77;
          }
          else
          {
            v64 = v39;
          }
        }
        else
        {
          v64 = v39;
        }
        do
        {
          v65 = *((_DWORD *)v64 - 1);
          v64 -= 4;
          *((_DWORD *)v62 - 1) = v65;
          v62 -= 4;
        }
        while (v64 != v47);
LABEL_77:
        *a3 = v62;
        a3[1] = v45;
        a3[2] = &v61[4 * v59];
        if (v47)
          operator delete(v47);
        a3[1] = v45;
        v44 += 3;
        v39 = v45;
        if (v44 == (unsigned int *)v17)
          goto LABEL_92;
      }
    }
    v45 = v39;
LABEL_92:
    v73 = *a3;
    v6 = v92;
    if (v45 - *a3 == 8)
    {
      v74 = (unsigned int *)&v20[4 * ((uint64_t)(v17 - (_QWORD)v20) >> 2) - 24];
      v75 = (unint64_t)a3[2];
      if ((unint64_t)v45 < v75)
      {
        *(_DWORD *)v45 = *v74;
        v76 = (int32x2_t *)(v45 + 4);
LABEL_113:
        a3[1] = (char *)v76;
        v76[-1] = vrev64_s32(v76[-1]);
        goto LABEL_114;
      }
      v77 = v75 - (_QWORD)v73;
      if ((unint64_t)(v77 >> 1) <= 3)
        v78 = 3;
      else
        v78 = v77 >> 1;
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
        v79 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v79 = v78;
      if (!(v79 >> 62))
      {
        v80 = operator new(4 * v79);
        v81 = (char *)(v80 + 2);
        v80[2] = *v74;
        v76 = (int32x2_t *)(v80 + 3);
        if (v45 == v73)
          goto LABEL_111;
        v82 = v45 - v73 - 4;
        if (v82 >= 0x2C)
        {
          if ((unint64_t)(v45 - 8 - (char *)v80) >= 0x20)
          {
            v84 = (v82 >> 2) + 1;
            v85 = 4 * (v84 & 0x7FFFFFFFFFFFFFF8);
            v83 = &v45[-v85];
            v81 -= v85;
            v86 = v80 - 2;
            v87 = v45 - 16;
            v88 = v84 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v89 = *(_OWORD *)v87;
              *(v86 - 1) = *((_OWORD *)v87 - 1);
              *v86 = v89;
              v86 -= 2;
              v87 -= 32;
              v88 -= 8;
            }
            while (v88);
            if (v84 == (v84 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_111:
              *a3 = v81;
              a3[1] = (char *)v76;
              a3[2] = (char *)&v80[v79];
              if (v73)
                operator delete(v73);
              goto LABEL_113;
            }
          }
          else
          {
            v83 = v45;
          }
        }
        else
        {
          v83 = v45;
        }
        do
        {
          v90 = *((_DWORD *)v83 - 1);
          v83 -= 4;
          *((_DWORD *)v81 - 1) = v90;
          v81 -= 4;
        }
        while (v83 != v73);
        goto LABEL_111;
      }
LABEL_122:
      sub_239418A80();
    }
  }
LABEL_114:
  if (v20)
    operator delete(v20);
  return v6;
}

void sub_2399C6824(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399C684C(uint64_t a1, _DWORD *a2, unsigned int *a3, float *a4, int a5)
{
  char *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *p_p;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  size_t v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  unsigned int v32;
  char *v33;
  size_t v34;
  size_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char *v40;
  size_t v41;
  size_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  char *v48;
  size_t v49;
  size_t v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  _QWORD *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  _QWORD *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v87;
  _QWORD *v88;
  unsigned int *v89;
  float *v90;
  unsigned int v91;
  _DWORD *v92;
  unsigned int v93;
  int v94;
  void *__p;
  size_t v96;
  unint64_t v97;
  unsigned int v98;
  void **__dst;
  size_t v100;
  unint64_t v101;

  v98 = -1;
  v10 = off_256934438[0];
  v11 = strlen(off_256934438[0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_99;
  v12 = v11;
  v94 = a5;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v100 = v12;
    v101 = v15 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v101) = v11;
  p_dst = (void **)&__dst;
  if (v11)
LABEL_8:
    memmove(p_dst, v10, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v16 = (_QWORD *)(a1 + 80);
  __p = 0;
  v93 = sub_2394E5C88((uint64_t **)(a1 + 80), (uint64_t)&__p, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v101) < 0)
    operator delete(__dst);
  v17 = off_256934448[0];
  v18 = strlen(off_256934448[0]);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    p_p = operator new(v21 + 1);
    v96 = v19;
    v97 = v22 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_18;
  }
  HIBYTE(v97) = v18;
  p_p = &__p;
  if (v18)
LABEL_18:
    memmove(p_p, v17, v19);
  *((_BYTE *)p_p + v19) = 0;
  __dst = 0;
  v100 = 0;
  v101 = 0;
  v23 = sub_23958C0D8((uint64_t **)(a1 + 80), (uint64_t)&__dst, (unsigned __int8 *)&__p);
  v24 = v23;
  if (SHIBYTE(v101) < 0)
  {
    operator delete(__dst);
    v91 = v24;
    v92 = a2;
    if ((SHIBYTE(v97) & 0x80000000) == 0)
      goto LABEL_21;
  }
  else
  {
    v91 = v23;
    v92 = a2;
    if ((SHIBYTE(v97) & 0x80000000) == 0)
      goto LABEL_21;
  }
  operator delete(__p);
LABEL_21:
  v25 = off_256934428[0];
  v26 = strlen(off_256934428[0]);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_99;
  v27 = v26;
  v89 = a3;
  v90 = a4;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = (void **)operator new(v29 + 1);
    v100 = v27;
    v101 = v30 | 0x8000000000000000;
    __dst = v28;
    goto LABEL_28;
  }
  HIBYTE(v101) = v26;
  v28 = (void **)&__dst;
  if (v26)
LABEL_28:
    memmove(v28, v25, v27);
  *((_BYTE *)v28 + v27) = 0;
  v88 = (_QWORD *)a1;
  v31 = (uint64_t **)(a1 + 56);
  LODWORD(__p) = 0;
  v32 = sub_2399346C0((uint64_t **)(a1 + 56), (uint64_t)&__p, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v101) < 0)
    operator delete(__dst);
  v33 = off_256934418[0];
  v34 = strlen(off_256934418[0]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_99;
  v35 = v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = (void **)operator new(v37 + 1);
    v100 = v35;
    v101 = v38 | 0x8000000000000000;
    __dst = v36;
    goto LABEL_38;
  }
  HIBYTE(v101) = v34;
  v36 = (void **)&__dst;
  if (v34)
LABEL_38:
    memmove(v36, v33, v35);
  *((_BYTE *)v36 + v35) = 0;
  LODWORD(v96) = 0;
  __p = 0;
  v39 = sub_2394E5DE4((uint64_t **)(a1 + 56), (uint64_t)&__p, (unsigned __int8 *)&__dst);
  if (SHIBYTE(v101) < 0)
    operator delete(__dst);
  v40 = off_256934428[0];
  v41 = strlen(off_256934428[0]);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_99;
  v42 = v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    v43 = (void **)operator new(v44 + 1);
    v100 = v42;
    v101 = v45 | 0x8000000000000000;
    __dst = v43;
    goto LABEL_48;
  }
  HIBYTE(v101) = v41;
  v43 = (void **)&__dst;
  if (v41)
LABEL_48:
    memmove(v43, v40, v42);
  *((_BYTE *)v43 + v42) = 0;
  LOWORD(__p) = 0;
  v46 = sub_23958CE84(v31, (uint64_t)&__p, (unsigned __int8 *)&__dst);
  v47 = v46;
  v98 = v46;
  if (SHIBYTE(v101) < 0)
  {
    operator delete(__dst);
    if (v47 != -1)
      goto LABEL_65;
  }
  else if (v46 != -1)
  {
    goto LABEL_65;
  }
  v48 = off_256934428[0];
  v49 = strlen(off_256934428[0]);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
LABEL_99:
    sub_23941A5AC();
  v50 = v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = (void **)operator new(v52 + 1);
    v100 = v50;
    v101 = v53 | 0x8000000000000000;
    __dst = v51;
    goto LABEL_62;
  }
  HIBYTE(v101) = v49;
  v51 = (void **)&__dst;
  if (v49)
LABEL_62:
    memmove(v51, v48, v50);
  *((_BYTE *)v51 + v50) = 0;
  sub_239589414(v88, &v98, (uint64_t)&__dst);
  if (SHIBYTE(v101) < 0)
    operator delete(__dst);
LABEL_65:
  v54 = *v16 + 16 * v93;
  v56 = *(_QWORD **)v54;
  v55 = *(std::__shared_weak_count **)(v54 + 8);
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v58 = __ldxr(p_shared_owners);
    while (__stxr(v58 + 1, p_shared_owners));
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v60 = (uint64_t *)(*v16 + 16 * v91);
  v62 = *v60;
  v61 = (std::__shared_weak_count *)v60[1];
  if (v61)
  {
    v63 = (unint64_t *)&v61->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
    do
      v65 = __ldaxr(v63);
    while (__stlxr(v65 - 1, v63));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v66 = (uint64_t)&(*v31)[2 * v32];
  v68 = *(_QWORD **)v66;
  v67 = *(std::__shared_weak_count **)(v66 + 8);
  if (v67)
  {
    v69 = (unint64_t *)&v67->__shared_owners_;
    do
      v70 = __ldxr(v69);
    while (__stxr(v70 + 1, v69));
    do
      v71 = __ldaxr(v69);
    while (__stlxr(v71 - 1, v69));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v72 = (uint64_t)&(*v31)[2 * v39];
  v73 = *(_QWORD **)v72;
  v74 = *(std::__shared_weak_count **)(v72 + 8);
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
    do
      v77 = __ldaxr(v75);
    while (__stlxr(v77 - 1, v75));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v78 = &(*v31)[2 * v98];
  v80 = *v78;
  v79 = (std::__shared_weak_count *)v78[1];
  if (v79)
  {
    v81 = (unint64_t *)&v79->__shared_owners_;
    do
      v82 = __ldxr(v81);
    while (__stxr(v82 + 1, v81));
    do
      v83 = __ldaxr(v81);
    while (__stlxr(v83 - 1, v81));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  __dst = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
  LODWORD(__p) = 0;
  LODWORD(v87) = v94;
  v84 = sub_2399C6F4C(v56, v68, v73, v80, (unint64_t *)&__dst, v92, v89, v90, &__p, v87);
  if ((_DWORD)v84)
  {
    v85 = (int)__p;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, __p);
    if (v85)
      sub_239933E34((size_t)v88);
  }
  return v84;
}

void sub_2399C6EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399C6F4C(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, unint64_t *a5, _DWORD *a6, unsigned int *a7, float *a8, _DWORD *a9, uint64_t a10)
{
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unsigned int *v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  double *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  _DWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  char *v86;
  char *v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  _BYTE *v98;
  _DWORD *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  int v108;
  char *v109;
  char *v110;
  uint64_t *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _BYTE *v120;
  _DWORD *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _OWORD *v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  char *v135;
  unsigned int *v136;
  unsigned int *v137;
  uint64_t v138;
  float v139;
  float64x2_t v140;
  float v141;
  unsigned int v142;
  float64x2_t v143;
  __double2 v144;
  float64x2_t v145;
  float64x2_t v146;
  float64x2_t v147;
  unsigned int *v148;
  unsigned int v149;
  float64x2_t v150;
  unsigned int *v151;
  unsigned int v152;
  float64x2_t v153;
  double v154;
  __double2 i;
  unsigned int v156;
  uint64_t v157;
  double v158;
  double v159;
  double v160;
  double v161;
  int v162;
  char *v163;
  double *v164;
  unsigned int v165;
  unsigned int *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  float v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  double v176;
  unint64_t v177;
  unsigned int *v178;
  double v179;
  double v180;
  float *v181;
  double v182;
  double v183;
  float *v184;
  unsigned int v185;
  double v186;
  unint64_t v187;
  double v188;
  unint64_t v189;
  int v190;
  unsigned int v191;
  double v192;
  uint64_t v193;
  float v194;
  double v195;
  uint64_t v196;
  char *v197;
  double v198;
  char *v199;
  float64x2_t v200;
  float64x2_t v201;
  uint64_t v202;
  int64x2_t v203;
  int64x2_t v204;
  uint64_t v205;
  unint64_t v206;
  unsigned int *v207;
  uint64_t v208;
  float64x2_t v209;
  float64x2_t v210;
  unsigned int *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  float64x2_t v216;
  float64x2_t v217;
  float64x2_t v218;
  float64x2_t v219;
  float64x2_t v220;
  float64x2_t v221;
  float64x2_t v222;
  char *v223;
  unsigned int *v224;
  unsigned int *v225;
  unsigned int *j;
  unsigned int v227;
  float64x2_t v228;
  int32x2_t v229;
  double v230;
  float v231;
  unsigned int *v232;
  unsigned int v233;
  float64x2_t k;
  unsigned int v235;
  uint64_t v236;
  float32x2_t v237;
  float64x2_t v238;
  unint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  char *v243;
  __int128 v244;
  __int128 v245;
  NSObject *v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  void *v252;
  char *v253;
  void *v254;
  void *v255;
  double *v257;
  unint64_t v258;
  uint64_t v259;
  _DWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  char *v263;
  char *v264;
  void *v265;
  char *v266;
  void *v267;
  void *v268;
  double *v269;
  unint64_t *v273;
  unint64_t v275;
  char *v276;
  unint64_t v277;
  unint64_t v278;
  uint64_t v280;
  int64x2_t v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  int64x2_t v285;
  void *v286;
  char *v287;
  uint64_t v288;
  char *v289;
  char *v290;
  char *v291;
  double *v292;
  double *v293;
  double *v294;
  unsigned int v295;
  void *v296;
  unint64_t v297;
  unint64_t v298;
  void *__p;
  char *v300;
  char *v301;
  double *v302;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  unsigned int *v307;
  unsigned int *v308;
  char *v309;
  unsigned int v310;
  double v311;
  _BYTE context[24];
  _BYTE *v313;
  _BYTE v314[24];
  _BYTE *v315;
  uint64_t v316;

  v316 = *MEMORY[0x24BDAC8D0];
  v311 = *a8 * 0.5;
  v12 = (*(uint64_t (**)(_QWORD *))(*a2 + 16))(a2);
  v13 = v12;
  v310 = v12;
  v307 = 0;
  v308 = 0;
  v309 = 0;
  v273 = a5;
  v14 = *a5;
  if (*a5)
  {
    if (v14 >> 62)
      sub_2394189F8();
    v15 = (unsigned int *)operator new(4 * v14);
    v16 = (char *)&v15[v14];
    v307 = v15;
    v308 = v15;
    v309 = v16;
    v17 = v13;
    if (v13)
      goto LABEL_4;
LABEL_40:
    v304 = 0;
    v305 = 0;
    v306 = 0;
    if (v14)
      goto LABEL_41;
LABEL_38:
    v36 = 0;
    v301 = 0;
    v302 = 0;
    v303 = 0;
    goto LABEL_58;
  }
  v16 = 0;
  v15 = 0;
  v17 = v12;
  if (!v12)
    goto LABEL_40;
LABEL_4:
  v18 = 0;
  v19 = 0;
  v20 = v15;
  do
  {
    if (v19 == *(_DWORD *)(a2[5] + 4 * v18))
    {
      if (v15 < (unsigned int *)v16)
      {
        *v15 = v18;
        v21 = (uint64_t)(v15 + 1);
LABEL_6:
        v308 = (unsigned int *)v21;
        ++v19;
        v17 = v310;
        v15 = (unsigned int *)v21;
        goto LABEL_7;
      }
      v22 = v15 - v20;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        sub_2394189F8();
      if ((v16 - (char *)v20) >> 1 > v23)
        v23 = (v16 - (char *)v20) >> 1;
      if ((unint64_t)(v16 - (char *)v20) >= 0x7FFFFFFFFFFFFFFCLL)
        v24 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        if (v24 >> 62)
          sub_239418A80();
        v25 = operator new(4 * v24);
        v26 = (unsigned int *)&v25[4 * v22];
        *v26 = v18;
        v21 = (uint64_t)(v26 + 1);
        if (v15 == v20)
          goto LABEL_24;
      }
      else
      {
        v25 = 0;
        v26 = (unsigned int *)(4 * v22);
        *(_DWORD *)(4 * v22) = v18;
        v21 = 4 * v22 + 4;
        if (v15 == v20)
          goto LABEL_24;
      }
      v27 = (char *)(v15 - 1) - (char *)v20;
      if (v27 >= 0xBC)
      {
        if (&v25[(char *)v15 - (char *)v20 - 4 - (v27 & 0xFFFFFFFFFFFFFFFCLL)] > &v25[(char *)v15 - (char *)v20 - 4])
        {
          v28 = v15;
        }
        else if ((unsigned int *)((char *)v15 - (v27 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v15 - 1)
        {
          v28 = v15;
        }
        else if ((unint64_t)((char *)v20 - v25) >= 0x20)
        {
          v30 = (v27 >> 2) + 1;
          v31 = 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
          v28 = &v15[v31 / 0xFFFFFFFFFFFFFFFCLL];
          v26 = (unsigned int *)((char *)v26 - v31);
          v32 = &v25[4 * v22 - 16];
          v33 = (__int128 *)(v15 - 4);
          v34 = v30 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v35 = *v33;
            *(v32 - 1) = *(v33 - 1);
            *v32 = v35;
            v32 -= 2;
            v33 -= 2;
            v34 -= 8;
          }
          while (v34);
          if (v30 == (v30 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_24;
        }
        else
        {
          v28 = v15;
        }
      }
      else
      {
        v28 = v15;
      }
      do
      {
        v29 = *--v28;
        *--v26 = v29;
      }
      while (v28 != v20);
LABEL_24:
      v16 = &v25[4 * v24];
      v307 = v26;
      v309 = v16;
      if (v20)
        operator delete(v20);
      v20 = v26;
      goto LABEL_6;
    }
LABEL_7:
    ++v18;
  }
  while (v18 < v17);
  v14 = *v273;
  v304 = 0;
  v305 = 0;
  v306 = 0;
  if (!v14)
    goto LABEL_38;
LABEL_41:
  if (v14 >> 61)
    sub_2394189F8();
  v304 = (char *)operator new(8 * v14);
  v306 = &v304[8 * v14];
  bzero(v304, 8 * v14);
  v305 = v306;
  v301 = 0;
  v302 = 0;
  v303 = 0;
  if (v14 >> 60)
    sub_2394189F8();
  v37 = (char *)operator new(16 * v14);
  v36 = (double *)v37;
  v301 = v37;
  v303 = &v37[16 * v14];
  v38 = v37;
  if (((v14 - 1) & 0xFFFFFFFFFFFFFFFLL) == 0)
    goto LABEL_277;
  v39 = ((v14 - 1) & 0xFFFFFFFFFFFFFFFLL) + 1;
  v38 = &v37[16 * (v39 & 0x1FFFFFFFFFFFFFFELL)];
  v40 = v37 + 16;
  v41 = v39 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    *((_DWORD *)v40 - 4) = 0;
    *(_DWORD *)v40 = 0;
    *((_QWORD *)v40 - 1) = 0;
    *((_QWORD *)v40 + 1) = 0;
    v40 += 32;
    v41 -= 2;
  }
  while (v41);
  if (v39 != (v39 & 0x1FFFFFFFFFFFFFFELL))
  {
LABEL_277:
    do
    {
      *(_DWORD *)v38 = 0;
      *((_QWORD *)v38 + 1) = 0;
      v38 += 16;
    }
    while (v38 != &v37[16 * v14]);
  }
  v302 = (double *)&v37[16 * v14];
  if (v14 <= 1)
    v42 = 1;
  else
    v42 = v14;
  if (v42 < 2 || ((_DWORD)v42 ? (v43 = (v42 - 1) >> 32 == 0) : (v43 = 0), !v43))
  {
    v44 = 0;
    v45 = 0;
    goto LABEL_57;
  }
  v259 = 0;
  v44 = v42 & 0xFFFFFFFFFFFFFFFELL;
  v45 = v42 & 0xFFFFFFFE;
  v260 = v37 + 16;
  do
  {
    *(v260 - 4) = v259;
    *v260 = v259 + 1;
    v260 += 8;
    v259 += 2;
  }
  while (v44 != v259);
  if (v42 != v44)
  {
    do
    {
LABEL_57:
      *(_DWORD *)&v37[16 * v44] = v45++;
      v44 = v45;
    }
    while (v14 > v45);
  }
LABEL_58:
  sub_2396DF70C(&__p, v14);
  v46 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v47 = v46;
  v296 = 0;
  v297 = 0;
  v298 = 0;
  if (!v46)
  {
    v50 = 0;
    v52 = *v273;
    if (*v273)
      goto LABEL_68;
LABEL_172:
    v162 = 1;
    goto LABEL_175;
  }
  if (v46 < 0)
    sub_2394189F8();
  v48 = (unint64_t)(v46 - 1) >> 6;
  v49 = operator new(8 * (v48 + 1));
  v50 = v49;
  v297 = v47;
  v298 = v48 + 1;
  v296 = v49;
  if (v47 >= 0x41)
    v51 = (v47 - 1) >> 6;
  else
    v51 = 0;
  v49[v51] = 0;
  if (v47 >= 0x40)
    bzero(v49, 8 * (v47 >> 6));
  if ((v47 & 0x3F) != 0)
    v50[v47 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v47 & 0x3F));
  v52 = *v273;
  if (!*v273)
    goto LABEL_172;
LABEL_68:
  v269 = v36;
  v53 = 0;
  v54 = 0;
  do
  {
    v55 = v53;
    v56 = v307[v53];
    v53 = (v54 + 1);
    if (v53 == v308 - v307)
      v57 = &v310;
    else
      v57 = &v307[v53];
    v280 = *v57;
    if (v56 < v280)
    {
      v275 = v53;
      v277 = v55;
      while (1)
      {
        v59 = (unsigned int *)(a3[5] + 12 * v56);
        v60 = *v59;
        if (((*(_QWORD *)((char *)v50 + ((v60 >> 3) & 0x1FFFFFF8)) >> v60) & 1) != 0)
        {
          v61 = v59[1];
          if (((*(_QWORD *)((char *)v50 + ((v61 >> 3) & 0x1FFFFFF8)) >> v61) & 1) == 0)
            goto LABEL_106;
          goto LABEL_81;
        }
        v63 = (char *)__p + 24 * v55;
        v65 = (uint64_t *)(v63 + 8);
        v64 = (char *)*((_QWORD *)v63 + 1);
        v66 = *((_QWORD *)v63 + 2);
        if ((unint64_t)v64 < v66)
        {
          *(_DWORD *)v64 = v60;
          v67 = (uint64_t)(v64 + 4);
          goto LABEL_105;
        }
        v282 = v50;
        v68 = *(char **)v63;
        v69 = (uint64_t)&v64[-*(_QWORD *)v63];
        v70 = v69 >> 2;
        v71 = (v69 >> 2) + 1;
        if (v71 >> 62)
          goto LABEL_266;
        v72 = v66 - (_QWORD)v68;
        if (v72 >> 1 > v71)
          v71 = v72 >> 1;
        v73 = (unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v71;
        if (v73)
          break;
        v75 = 0;
        v76 = (_DWORD *)(4 * v70);
        *(_DWORD *)(4 * v70) = v60;
        v67 = 4 * v70 + 4;
        if (v64 != v68)
          goto LABEL_96;
LABEL_102:
        *(_QWORD *)v63 = v76;
        *v65 = v67;
        *((_QWORD *)v63 + 2) = &v75[4 * v73];
        if (v68)
          operator delete(v68);
        v50 = v282;
        v55 = v277;
LABEL_105:
        *v65 = v67;
        *(_QWORD *)((char *)v50 + (((unint64_t)*v59 >> 3) & 0x1FFFFFF8)) |= 1 << *v59;
        v61 = v59[1];
        if (((*(_QWORD *)((char *)v50 + ((v61 >> 3) & 0x1FFFFFF8)) >> v61) & 1) == 0)
        {
LABEL_106:
          v86 = (char *)__p + 24 * v55;
          v88 = (uint64_t *)(v86 + 8);
          v87 = (char *)*((_QWORD *)v86 + 1);
          v89 = *((_QWORD *)v86 + 2);
          if ((unint64_t)v87 < v89)
          {
            *(_DWORD *)v87 = v61;
            v90 = (uint64_t)(v87 + 4);
            goto LABEL_128;
          }
          v283 = v50;
          v91 = *(char **)v86;
          v92 = (uint64_t)&v87[-*(_QWORD *)v86];
          v93 = v92 >> 2;
          v94 = (v92 >> 2) + 1;
          if (v94 >> 62)
            goto LABEL_266;
          v95 = v89 - (_QWORD)v91;
          if (v95 >> 1 > v94)
            v94 = v95 >> 1;
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL)
            v96 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v96 = v94;
          if (v96)
          {
            if (v96 >> 62)
              goto LABEL_267;
            v97 = v96;
            v98 = operator new(4 * v96);
            v96 = v97;
            v99 = &v98[4 * v93];
            *v99 = v59[1];
            v90 = (uint64_t)(v99 + 1);
            if (v87 == v91)
              goto LABEL_125;
LABEL_119:
            v100 = v87 - 4 - v91;
            if (v100 < 0x2C)
              goto LABEL_278;
            if ((unint64_t)(v87 - &v98[v92]) < 0x20)
              goto LABEL_278;
            v101 = (v100 >> 2) + 1;
            v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
            v103 = &v87[-v102];
            v99 = (_DWORD *)((char *)v99 - v102);
            v104 = &v98[4 * v93 - 16];
            v105 = v87 - 16;
            v106 = v101 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v107 = *(_OWORD *)v105;
              *(v104 - 1) = *((_OWORD *)v105 - 1);
              *v104 = v107;
              v104 -= 2;
              v105 -= 32;
              v106 -= 8;
            }
            while (v106);
            v87 = v103;
            if (v101 != (v101 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_278:
              do
              {
                v108 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *--v99 = v108;
              }
              while (v87 != v91);
            }
          }
          else
          {
            v98 = 0;
            v99 = (_DWORD *)(4 * v93);
            *(_DWORD *)(4 * v93) = v61;
            v90 = 4 * v93 + 4;
            if (v87 != v91)
              goto LABEL_119;
          }
LABEL_125:
          *(_QWORD *)v86 = v99;
          *v88 = v90;
          *((_QWORD *)v86 + 2) = &v98[4 * v96];
          if (v91)
            operator delete(v91);
          v50 = v283;
          v55 = v277;
LABEL_128:
          *v88 = v90;
          *(_QWORD *)((char *)v50 + (((unint64_t)v59[1] >> 3) & 0x1FFFFFF8)) |= 1 << v59[1];
          v62 = v59[2];
          if (((*(_QWORD *)((char *)v50 + ((v62 >> 3) & 0x1FFFFFF8)) >> v62) & 1) != 0)
            goto LABEL_78;
          goto LABEL_129;
        }
LABEL_81:
        v62 = v59[2];
        if (((*(_QWORD *)((char *)v50 + ((v62 >> 3) & 0x1FFFFFF8)) >> v62) & 1) != 0)
          goto LABEL_78;
LABEL_129:
        v109 = (char *)__p + 24 * v55;
        v111 = (uint64_t *)(v109 + 8);
        v110 = (char *)*((_QWORD *)v109 + 1);
        v112 = *((_QWORD *)v109 + 2);
        if ((unint64_t)v110 >= v112)
        {
          v284 = v50;
          v113 = *(char **)v109;
          v114 = (uint64_t)&v110[-*(_QWORD *)v109];
          v115 = v114 >> 2;
          v116 = (v114 >> 2) + 1;
          if (v116 >> 62)
LABEL_266:
            sub_2394189F8();
          v117 = v112 - (_QWORD)v113;
          if (v117 >> 1 > v116)
            v116 = v117 >> 1;
          if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFFCLL)
            v118 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v118 = v116;
          if (v118)
          {
            if (v118 >> 62)
LABEL_267:
              sub_239418A80();
            v119 = v118;
            v120 = operator new(4 * v118);
            v118 = v119;
            v121 = &v120[4 * v115];
            *v121 = v59[2];
            v58 = (uint64_t)(v121 + 1);
            if (v110 == v113)
              goto LABEL_147;
LABEL_141:
            v122 = v110 - 4 - v113;
            if (v122 < 0x2C)
              goto LABEL_279;
            if ((unint64_t)(v110 - &v120[v114]) < 0x20)
              goto LABEL_279;
            v123 = (v122 >> 2) + 1;
            v124 = 4 * (v123 & 0x7FFFFFFFFFFFFFF8);
            v125 = &v110[-v124];
            v121 = (_DWORD *)((char *)v121 - v124);
            v126 = &v120[4 * v115 - 16];
            v127 = v110 - 16;
            v128 = v123 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v129 = *(_OWORD *)v127;
              *(v126 - 1) = *((_OWORD *)v127 - 1);
              *v126 = v129;
              v126 -= 2;
              v127 -= 32;
              v128 -= 8;
            }
            while (v128);
            v110 = v125;
            if (v123 != (v123 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_279:
              do
              {
                v130 = *((_DWORD *)v110 - 1);
                v110 -= 4;
                *--v121 = v130;
              }
              while (v110 != v113);
            }
          }
          else
          {
            v120 = 0;
            v121 = (_DWORD *)(4 * v115);
            *(_DWORD *)(4 * v115) = v62;
            v58 = 4 * v115 + 4;
            if (v110 != v113)
              goto LABEL_141;
          }
LABEL_147:
          *(_QWORD *)v109 = v121;
          *v111 = v58;
          *((_QWORD *)v109 + 2) = &v120[4 * v118];
          if (v113)
            operator delete(v113);
          v50 = v284;
          v55 = v277;
          goto LABEL_77;
        }
        *(_DWORD *)v110 = v62;
        v58 = (uint64_t)(v110 + 4);
LABEL_77:
        *v111 = v58;
        *(_QWORD *)((char *)v50 + (((unint64_t)v59[2] >> 3) & 0x1FFFFFF8)) |= 1 << v59[2];
LABEL_78:
        if (++v56 == v280)
        {
          v52 = *v273;
          v53 = v275;
          goto LABEL_70;
        }
      }
      if (v73 >> 62)
        goto LABEL_267;
      v74 = v73;
      v75 = operator new(4 * v73);
      v73 = v74;
      v76 = &v75[4 * v70];
      *v76 = *v59;
      v67 = (uint64_t)(v76 + 1);
      if (v64 == v68)
        goto LABEL_102;
LABEL_96:
      v77 = v64 - 4 - v68;
      if (v77 < 0x2C)
        goto LABEL_280;
      if ((unint64_t)(v64 - &v75[v69]) < 0x20)
        goto LABEL_280;
      v78 = (v77 >> 2) + 1;
      v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
      v80 = &v64[-v79];
      v76 = (_DWORD *)((char *)v76 - v79);
      v81 = &v75[4 * v70 - 16];
      v82 = v64 - 16;
      v83 = v78 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v84 = *(_OWORD *)v82;
        *(v81 - 1) = *((_OWORD *)v82 - 1);
        *v81 = v84;
        v81 -= 2;
        v82 -= 32;
        v83 -= 8;
      }
      while (v83);
      v64 = v80;
      if (v78 != (v78 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_280:
        do
        {
          v85 = *((_DWORD *)v64 - 1);
          v64 -= 4;
          *--v76 = v85;
        }
        while (v64 != v68);
      }
      goto LABEL_102;
    }
LABEL_70:
    v54 = v53;
  }
  while (v52 > v53);
  if (v52)
  {
    v131 = 0;
    v276 = (char *)__p;
    v132 = a1[5];
    v281 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    v285 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    v278 = v52;
    do
    {
      v133 = 0;
      v134 = 0;
      v135 = &v276[24 * v131];
      v136 = *(unsigned int **)v135;
      v137 = (unsigned int *)*((_QWORD *)v135 + 1);
      v138 = a1[5];
      v139 = 3.4028e38;
      do
      {
        v142 = v133;
        v144 = __sincos_stret((float)((float)v133 * 0.098175));
        v143.f64[0] = v144.__cosval;
        v145 = (float64x2_t)v281;
        v146 = (float64x2_t)v285;
        if (v136 != v137)
        {
          if ((float)((float)v133 * 0.098175) <= 0.00000001)
          {
            v151 = v136;
            v145 = (float64x2_t)v281;
            v146 = (float64x2_t)v285;
            do
            {
              v152 = *v151++;
              v153 = vcvtq_f64_f32(*(float32x2_t *)(v138 + 8 * v152));
              v146 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v146, v153), (int8x16_t)v153, (int8x16_t)v146);
              v145 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v153, v145), (int8x16_t)v153, (int8x16_t)v145);
            }
            while (v151 != v137);
          }
          else
          {
            v147.f64[0] = -v144.__sinval;
            v147.f64[1] = v144.__cosval;
            v143.f64[1] = v144.__sinval;
            v148 = v136;
            v145 = (float64x2_t)v281;
            v146 = (float64x2_t)v285;
            do
            {
              v149 = *v148++;
              v150 = vmlaq_n_f64(vmlaq_n_f64((float64x2_t)0, v143, *(float *)(v138 + 8 * v149)), v147, *(float *)(v138 + 8 * v149 + 4));
              v146 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v146, v150), (int8x16_t)v150, (int8x16_t)v146);
              v145 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v150, v145), (int8x16_t)v150, (int8x16_t)v145);
            }
            while (v148 != v137);
          }
        }
        v140 = vsubq_f64(v145, v146);
        v141 = vmulq_laneq_f64(v140, v140, 1).f64[0];
        if (v139 > v141)
        {
          v139 = v141;
          v134 = v133;
        }
        ++v133;
      }
      while (v142 < 0xF);
      if (v134)
      {
        v154 = (float)((float)v134 * 0.098175);
        if (v154 > 0.00000001)
        {
          for (i = __sincos_stret(v154); v136 != v137; *(_DWORD *)(v157 + 4) = LODWORD(v161))
          {
            v156 = *v136++;
            v157 = v132 + 8 * v156;
            v158 = *(float *)v157;
            v159 = *(float *)(v157 + 4);
            v160 = i.__cosval * v158 + 0.0 + -i.__sinval * v159;
            v161 = i.__sinval * v158 + 0.0 + i.__cosval * v159;
            *(float *)&v159 = v160;
            *(float *)&v161 = v161;
            *(_DWORD *)v157 = LODWORD(v159);
          }
        }
      }
      ++v131;
      v52 = v278;
    }
    while (v278 > v131);
    v162 = 0;
  }
  else
  {
    v162 = 1;
  }
  v36 = v269;
LABEL_175:
  v295 = *a6 + 2 * v311;
  v292 = 0;
  v293 = 0;
  v294 = 0;
  if (v162)
  {
    v163 = 0;
    v164 = 0;
    v289 = 0;
    v290 = 0;
    v291 = 0;
  }
  else
  {
    if (v52 >> 61)
      sub_2394189F8();
    v164 = (double *)operator new(8 * v52);
    v292 = v164;
    v294 = &v164[v52];
    bzero(v164, 8 * v52);
    v293 = v294;
    v163 = (char *)operator new(8 * v52);
    v289 = v163;
    v291 = &v163[8 * v52];
    bzero(v163, 8 * v52);
    v290 = v291;
  }
  v165 = (*(uint64_t (**)(_QWORD *))(*a3 + 16))(a3);
  v166 = v307;
  v167 = v308 - v307;
  if (v308 != v307)
  {
    v168 = 0;
    v169 = v165;
    v170 = a1[5];
    v171 = a3[5] + 8;
    do
    {
      v173 = (v168 + 1);
      v174 = v169;
      if (v167 != v173)
        v174 = v166[v173];
      v175 = v166[v168];
      v176 = 0.0;
      if (v175 < v174)
      {
        v177 = v174 - v175;
        v178 = (unsigned int *)(v171 + 12 * v175);
        v179 = 0.0;
        v180 = 0.0;
        do
        {
          v181 = (float *)(v170 + 8 * *(v178 - 2));
          v182 = *v181;
          v183 = v181[1];
          v184 = (float *)(v170 + 8 * *(v178 - 1));
          v185 = *v178;
          v178 += 3;
          v186 = fabs(((*v184 - v182) * (*(float *)(v170 + 8 * v185 + 4) - v183)- (v184[1] - v183) * (*(float *)(v170 + 8 * v185) - v182))* 0.5)- v180;
          v176 = v179 + v186;
          v180 = v179 + v186 - v179 - v186;
          v179 = v176;
          --v177;
        }
        while (v177);
      }
      v172 = v176;
      v164[v168++] = v172;
    }
    while (v167 > v173);
  }
  v187 = *v273;
  if (!*v273)
    goto LABEL_218;
  v188 = 0.0;
  if (v187 == 1)
  {
    v189 = 0;
    v190 = 0;
    goto LABEL_191;
  }
  v190 = 0;
  v189 = 0;
  if (!(_DWORD)v187)
    goto LABEL_191;
  if ((v187 - 1) >> 32)
    goto LABEL_191;
  v189 = v187 & 0xFFFFFFFFFFFFFFFELL;
  v190 = v187 & 0xFFFFFFFE;
  v257 = v164 + 1;
  v258 = v187 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    v192 = *(v257 - 1);
    v188 = v188 + v192 + *v257;
    v257 += 2;
    v258 -= 2;
  }
  while (v258);
  if (v187 != v189)
  {
LABEL_191:
    v191 = v190 + 1;
    do
    {
      v192 = v164[v189];
      v188 = v188 + v192;
      v189 = v191++;
    }
    while (v187 > v189);
  }
  if (v188 <= 0.0)
  {
LABEL_218:
    v249 = 0;
    if (!v163)
      goto LABEL_220;
    goto LABEL_219;
  }
  v193 = 0;
  v194 = v188;
  v195 = sqrtf((float)(v295 * v295 * *a7) / (float)(v194 / 0.55));
  v196 = a1[5];
  v197 = (char *)__p;
  LODWORD(v192) = *a6;
  v198 = (double)*(unint64_t *)&v192 + -1.0;
  v199 = v304;
  v200 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v198, 0);
  v201 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v311 + 0.5), 0);
  v202 = a3[5] + 8;
  v203 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v204 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  do
  {
    v205 = v166[v193];
    v206 = (v193 + 1);
    v207 = &v166[v206];
    if (v167 == v206)
      v207 = &v310;
    v208 = *v207;
    v209 = (float64x2_t)v204;
    v210 = (float64x2_t)v203;
    if (v205 < v208)
    {
      v211 = (unsigned int *)(v202 + 12 * v205);
      v212 = v208 - v205;
      v209 = (float64x2_t)v204;
      v210 = (float64x2_t)v203;
      do
      {
        v213 = *(v211 - 2);
        v214 = *(v211 - 1);
        v215 = *v211;
        v211 += 3;
        v216 = vcvtq_f64_f32(*(float32x2_t *)(v196 + 8 * v213));
        v217 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v210, v216), (int8x16_t)v216, (int8x16_t)v210);
        v218 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v216, v209), (int8x16_t)v216, (int8x16_t)v209);
        v219 = vcvtq_f64_f32(*(float32x2_t *)(v196 + 8 * v214));
        v220 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v217, v219), (int8x16_t)v219, (int8x16_t)v217);
        v221 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v219, v218), (int8x16_t)v219, (int8x16_t)v218);
        v222 = vcvtq_f64_f32(*(float32x2_t *)(v196 + 8 * v215));
        v210 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v220, v222), (int8x16_t)v222, (int8x16_t)v220);
        v209 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v222, v221), (int8x16_t)v222, (int8x16_t)v221);
        --v212;
      }
      while (v212);
    }
    v223 = &v197[24 * v193];
    v224 = *(unsigned int **)v223;
    v225 = (unsigned int *)*((_QWORD *)v223 + 1);
    for (j = v224;
          j != v225;
          *(float32x2_t *)(v196 + 8 * v227) = vcvt_f32_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(v196 + 8 * v227)), v210), v195)))
    {
      v227 = *j++;
    }
    v228 = vmulq_n_f64(vsubq_f64(v209, v210), v195);
    v229 = vmovn_s64(vcgtq_f64(v228, v200));
    if (((v229.i32[0] | v229.i32[1]) & 1) != 0)
    {
      if (v228.f64[0] < v228.f64[1])
        v228.f64[0] = v228.f64[1];
      v230 = v198 / v228.f64[0];
      if (v224 != v225)
      {
        v232 = v224;
        do
        {
          v233 = *v232++;
          v231 = v230;
          *(float32x2_t *)(v196 + 8 * v233) = vmul_n_f32(*(float32x2_t *)(v196 + 8 * v233), v231);
        }
        while (v232 != v225);
      }
      v164[v193] = v230 * v230 * v164[v193];
    }
    for (k = 0uLL; v224 != v225; k = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v238, k), (int8x16_t)v238, (int8x16_t)k))
    {
      v235 = *v224++;
      v236 = 8 * v235;
      v237 = vcvt_f32_f64(vaddq_f64(v201, vcvtq_f64_f32(*(float32x2_t *)(v196 + v236))));
      *(float32x2_t *)(v196 + v236) = v237;
      v238 = vcvtq_f64_f32(v237);
    }
    *(float32x2_t *)&v199[8 * v193] = vcvt_f32_f64(k);
    *(double *)&v163[8 * v193] = vaddvq_f64(k);
    v36[2 * v193 + 1] = v164[v193];
    ++v193;
  }
  while (v187 > v206);
  v239 = 126 - 2 * __clz(((char *)v302 - (char *)v36) >> 4);
  if (v302 == v36)
    v240 = 0;
  else
    v240 = v239;
  sub_2399CB0A0(v36, v302, v240, 1);
  v286 = 0;
  v287 = 0;
  v288 = 0;
  sub_2399C53C4((unint64_t *)&v301, &v292, (uint64_t *)&v289, a7, (uint64_t *)&v286);
  *a9 = -1431655765 * ((unint64_t)(v287 - (_BYTE *)v286) >> 3);
  v241 = operator new(0x60uLL);
  *v241 = &off_250AF12E8;
  v241[1] = &v286;
  v242 = v241 + 1;
  v241[2] = &v295;
  v241[3] = &v304;
  v241[4] = &v311;
  v241[5] = &v307;
  v241[6] = &v310;
  v241[7] = a3;
  v241[8] = a1;
  v241[9] = &__p;
  v241[10] = a4;
  v241[11] = &a10;
  v315 = v241;
  v243 = (char *)operator new(0x60uLL);
  *(_QWORD *)v243 = &off_250AF12E8;
  v244 = *((_OWORD *)v242 + 3);
  *(_OWORD *)(v243 + 40) = *((_OWORD *)v242 + 2);
  *(_OWORD *)(v243 + 56) = v244;
  *(_OWORD *)(v243 + 72) = *((_OWORD *)v242 + 4);
  *((_QWORD *)v243 + 11) = v242[10];
  v245 = *((_OWORD *)v242 + 1);
  *(_OWORD *)(v243 + 8) = *(_OWORD *)v242;
  *(_OWORD *)(v243 + 24) = v245;
  v313 = v243;
  v246 = dispatch_queue_create("com.gcd.task3", MEMORY[0x24BDAC9C0]);
  dispatch_apply_f(*a9, v246, context, (void (__cdecl *)(void *, size_t))sub_2399C8ADC);
  dispatch_release(v246);
  v247 = v313;
  if (v313 == context)
  {
    v248 = 4;
    v247 = context;
LABEL_250:
    (*(void (**)(void))(*v247 + 8 * v248))();
  }
  else if (v313)
  {
    v248 = 5;
    goto LABEL_250;
  }
  v261 = v315;
  if (v315 == v314)
  {
    v262 = 4;
    v261 = v314;
LABEL_255:
    (*(void (**)(void))(*v261 + 8 * v262))();
  }
  else if (v315)
  {
    v262 = 5;
    goto LABEL_255;
  }
  v263 = (char *)v286;
  if (v286)
  {
    v264 = v287;
    v265 = v286;
    if (v287 != v286)
    {
      v266 = v287;
      do
      {
        v268 = (void *)*((_QWORD *)v266 - 3);
        v266 -= 24;
        v267 = v268;
        if (v268)
        {
          *((_QWORD *)v264 - 2) = v267;
          operator delete(v267);
        }
        v264 = v266;
      }
      while (v266 != v263);
      v265 = v286;
    }
    v287 = v263;
    operator delete(v265);
  }
  v249 = 1;
  if (v163)
  {
LABEL_219:
    v290 = v163;
    operator delete(v163);
  }
LABEL_220:
  if (v164)
    operator delete(v164);
  if (v50)
    operator delete(v50);
  v250 = (char *)__p;
  if (__p)
  {
    v251 = v300;
    v252 = __p;
    if (v300 != __p)
    {
      v253 = v300;
      do
      {
        v255 = (void *)*((_QWORD *)v253 - 3);
        v253 -= 24;
        v254 = v255;
        if (v255)
        {
          *((_QWORD *)v251 - 2) = v254;
          operator delete(v254);
        }
        v251 = v253;
      }
      while (v253 != v250);
      v252 = __p;
    }
    v300 = v250;
    operator delete(v252);
  }
  if (v36)
  {
    v302 = v36;
    operator delete(v36);
  }
  if (v304)
  {
    v305 = v304;
    operator delete(v304);
  }
  if (v307)
  {
    v308 = v307;
    operator delete(v307);
  }
  return v249;
}

void sub_2399C8328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,void *a38,uint64_t a39,void *a40,uint64_t a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;

  operator delete(v42);
  sub_23942A16C(&a24);
  operator delete(v41);
  if (v44)
  {
    a31 = (uint64_t)v44;
    operator delete(v44);
    v43 = a34;
  }
  if (v43)
  {
    operator delete(v43);
    v47 = __p;
    if (!__p)
    {
LABEL_5:
      v48 = a40;
      if (!a40)
        goto LABEL_6;
      goto LABEL_17;
    }
  }
  else
  {
    v47 = __p;
    if (!__p)
      goto LABEL_5;
  }
  v51 = (uint64_t)a38;
  v52 = v47;
  if (a38 != v47)
  {
    v53 = (uint64_t)a38;
    do
    {
      v55 = *(void **)(v53 - 24);
      v53 -= 24;
      v54 = v55;
      if (v55)
      {
        *(_QWORD *)(v51 - 16) = v54;
        operator delete(v54);
      }
      v51 = v53;
    }
    while ((void *)v53 != v47);
    v52 = __p;
  }
  a38 = v47;
  operator delete(v52);
  v48 = a40;
  if (!a40)
  {
LABEL_6:
    v49 = *(void **)(v45 - 256);
    if (!v49)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  a41 = (uint64_t)v48;
  operator delete(v48);
  v49 = *(void **)(v45 - 256);
  if (!v49)
  {
LABEL_7:
    v50 = *(void **)(v45 - 232);
    if (!v50)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  *(_QWORD *)(v45 - 248) = v49;
  operator delete(v49);
  v50 = *(void **)(v45 - 232);
  if (!v50)
LABEL_8:
    _Unwind_Resume(a1);
LABEL_19:
  *(_QWORD *)(v45 - 224) = v50;
  operator delete(v50);
  _Unwind_Resume(a1);
}

uint64_t sub_2399C84E4(unint64_t *a1, unint64_t *a2, unint64_t *a3, _DWORD *a4, unsigned int *a5, float *a6, _OWORD *a7, _OWORD *a8, unint64_t a9, uint64_t a10, _DWORD *a11, int a12)
{
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  BOOL v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int *v37;
  char *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  char *v47;
  int v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  __int128 *v52;
  _OWORD *v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  _WORD *v58;
  char *v59;
  __int16 v60;
  BOOL v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  unint64_t v77;
  __int128 *v78;
  _OWORD *v79;
  __int128 *v80;
  _OWORD *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  _OWORD *v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  __int128 *v94;
  unint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  _QWORD v102[3];
  char v103;
  uint64_t (*(*v104)())();
  void *__p;
  char *v106;
  uint64_t v107;
  _QWORD v108[3];
  char v109;
  uint64_t (*(*v110)())();
  void *v111;
  void *v112;
  uint64_t v113;
  _QWORD v114[3];
  char v115;
  uint64_t (*(*v116)())();
  void *v117;
  void *v118;
  uint64_t v119;
  _QWORD v120[3];
  char v121;
  uint64_t (*(*v122)())();
  char *v123;
  char *v124;
  uint64_t v125;

  v120[2] = 62;
  v121 = 9;
  v120[0] = &off_250ADCE98;
  v120[1] = 0x6E776F6E6B6E753CLL;
  v122 = sub_2399C8AD0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v19 = *a2;
  if (v19)
    sub_2394E4D00(&v123, v19);
  v114[1] = 0x6E776F6E6B6E753CLL;
  v114[2] = 62;
  v115 = 9;
  v114[0] = &off_250ADD058;
  v116 = sub_2399C8AD0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  if (*a1)
    sub_23942CB44((uint64_t)&v117, *a1);
  v108[1] = 0x6E776F6E6B6E753CLL;
  v108[2] = 62;
  v109 = 9;
  v108[0] = &off_250ADCF78;
  v110 = sub_2399C8AD0;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  v20 = *a1;
  if (*a1)
  {
    sub_2394E582C((char **)&v111, v20);
    v20 = *a1;
    if (*a1)
    {
      v21 = v117;
      v22 = (char *)v111;
      if (v20 < 0x14)
      {
        v23 = 0;
LABEL_9:
        v24 = 12 * v23;
        do
        {
          v21[v23] = *((_DWORD *)a7 + v23);
          v25 = *(_DWORD *)((char *)a8 + v24 + 8);
          v26 = &v22[v24];
          *(_QWORD *)v26 = *(_QWORD *)((char *)a8 + v24);
          *((_DWORD *)v26 + 2) = v25;
          ++v23;
          a8 = (_OWORD *)((char *)a8 + 12);
          v22 += 12;
        }
        while (v20 != v23);
        goto LABEL_11;
      }
      v23 = 0;
      v62 = !is_mul_ok(v20 - 1, 0xCuLL);
      v63 = 12 * (v20 - 1);
      if ((char *)v111 + v63 + 8 < (char *)v111 + 8
        || (char *)v111 + v63 + 4 < (char *)v111 + 4
        || (char *)v111 + v63 < v111
        || v62)
      {
        goto LABEL_9;
      }
      v23 = 0;
      v64 = (char *)v117 + 4 * v20;
      v65 = (char *)v111 + 12 * v20;
      v66 = (unint64_t)a7 + 4 * v20;
      v67 = (unint64_t)a8 + 12 * v20;
      v68 = (unint64_t)v117 < v66 && v64 > (char *)a7;
      v69 = v68;
      v70 = (unint64_t)v117 < v67 && v64 > (char *)a8;
      v71 = v70;
      v72 = (unint64_t)v111 < v66 && v65 > (char *)a7;
      v73 = v72;
      v74 = (unint64_t)v111 < v67 && v65 > (char *)a8;
      v75 = v74;
      if (v111 < v64 && v117 < v65)
        goto LABEL_9;
      if (v69)
        goto LABEL_9;
      if (v71)
        goto LABEL_9;
      if (v73)
        goto LABEL_9;
      if (v75)
        goto LABEL_9;
      v23 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      v77 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      v78 = a8;
      v79 = v117;
      v80 = a7;
      v81 = v111;
      do
      {
        v82 = *v80++;
        *v79++ = v82;
        v83 = *v78;
        v84 = v78[2];
        v81[1] = v78[1];
        v81[2] = v84;
        *v81 = v83;
        v81 += 3;
        v78 += 3;
        v77 -= 4;
      }
      while (v77);
      if (v20 != v23)
        goto LABEL_9;
    }
  }
LABEL_11:
  v27 = *a2;
  if (!*a2)
    goto LABEL_26;
  v28 = v123;
  if (v27 < 0x10
    || ((v29 = 8 * (v27 - 1), v30 = &v123[v29], v31 = &v123[v29 + 4], v30 >= v123) ? (v32 = v31 >= v123 + 4) : (v32 = 0),
        v32 ? (v33 = (v27 - 1) >> 61 == 0) : (v33 = 0),
        !v33 || (unint64_t)v123 < a9 + 8 * v27 && (unint64_t)&v123[8 * v27] > a9))
  {
    v34 = 0;
LABEL_24:
    v35 = v27 - v34;
    v36 = (8 * v34) | 4;
    v37 = (int *)(a9 + v36);
    v38 = &v28[v36];
    do
    {
      *((_DWORD *)v38 - 1) = *(v37 - 1);
      v39 = *v37;
      v37 += 2;
      *(_DWORD *)v38 = v39;
      v38 += 8;
      --v35;
    }
    while (v35);
    goto LABEL_26;
  }
  v34 = v27 & 0xFFFFFFFFFFFFFFF8;
  v93 = v123 + 32;
  v94 = (__int128 *)(a9 + 32);
  v95 = v27 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v97 = *(v94 - 2);
    v96 = *(v94 - 1);
    v99 = *v94;
    v98 = v94[1];
    v94 += 4;
    *((_OWORD *)v93 - 2) = v97;
    *((_OWORD *)v93 - 1) = v96;
    *(_OWORD *)v93 = v99;
    *((_OWORD *)v93 + 1) = v98;
    v93 += 64;
    v95 -= 8;
  }
  while (v95);
  if (v27 != v34)
    goto LABEL_24;
LABEL_26:
  v102[1] = 0x6E776F6E6B6E753CLL;
  v102[2] = 62;
  v103 = 9;
  v102[0] = &off_250ADF080;
  v104 = sub_2399C8AD0;
  __p = 0;
  v106 = 0;
  v107 = 0;
  if (v20)
    sub_2394C3584((uint64_t)&__p, v20);
  LODWORD(v100) = a12;
  v40 = sub_2399C6F4C(v120, v114, v108, (uint64_t)v102, a3, a4, a5, a6, a11, v100);
  if ((v40 & 1) == 0)
  {
    v50 = (char *)__p;
LABEL_44:
    v102[0] = &off_250ADF080;
    if (!v50)
      goto LABEL_46;
    goto LABEL_45;
  }
  v41 = *a2;
  if (*a2)
  {
    v42 = v123;
    if (v41 < 0x10)
      goto LABEL_31;
    v43 = 0;
    v85 = 8 * (v41 - 1);
    if (a9 + v85 < a9 || a9 + 4 + v85 < a9 + 4 || (v41 - 1) >> 61)
      goto LABEL_32;
    if ((unint64_t)&v123[8 * v41] > a9 && (unint64_t)v123 < a9 + 8 * v41)
    {
LABEL_31:
      v43 = 0;
LABEL_32:
      v44 = v41 - v43;
      v45 = (8 * v43) | 4;
      v46 = (_DWORD *)(a9 + v45);
      v47 = &v42[v45];
      do
      {
        *(v46 - 1) = *((_DWORD *)v47 - 1);
        v48 = *(_DWORD *)v47;
        v47 += 8;
        *v46 = v48;
        v46 += 2;
        --v44;
      }
      while (v44);
      goto LABEL_34;
    }
    v43 = v41 & 0xFFFFFFFFFFFFFFF8;
    v86 = v123 + 32;
    v87 = (_OWORD *)(a9 + 32);
    v88 = v41 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v90 = *((_OWORD *)v86 - 2);
      v89 = *((_OWORD *)v86 - 1);
      v92 = *(_OWORD *)v86;
      v91 = *((_OWORD *)v86 + 1);
      v86 += 64;
      *(v87 - 2) = v90;
      *(v87 - 1) = v89;
      *v87 = v92;
      v87[1] = v91;
      v87 += 4;
      v88 -= 8;
    }
    while (v88);
    if (v41 != v43)
      goto LABEL_32;
  }
LABEL_34:
  v49 = *a1;
  v50 = (char *)__p;
  if (!*a1)
    goto LABEL_44;
  v51 = 0;
  if (v49 < 0x10)
    goto LABEL_40;
  if ((unint64_t)(a10 - (_QWORD)__p) < 0x20)
    goto LABEL_40;
  v51 = v49 & 0xFFFFFFFFFFFFFFF0;
  v52 = (__int128 *)((char *)__p + 16);
  v53 = (_OWORD *)(a10 + 16);
  v54 = v49 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v55 = *v52;
    *(v53 - 1) = *(v52 - 1);
    *v53 = v55;
    v52 += 2;
    v53 += 2;
    v54 -= 16;
  }
  while (v54);
  if (v49 != v51)
  {
LABEL_40:
    v56 = v49 - v51;
    v57 = 2 * v51;
    v58 = (_WORD *)(a10 + v57);
    v59 = &v50[v57];
    do
    {
      v60 = *(_WORD *)v59;
      v59 += 2;
      *v58++ = v60;
      --v56;
    }
    while (v56);
  }
  v102[0] = &off_250ADF080;
LABEL_45:
  v106 = v50;
  operator delete(v50);
LABEL_46:
  sub_23995E4A4((uint64_t)v102);
  v108[0] = &off_250ADCF78;
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  sub_23995E4A4((uint64_t)v108);
  v114[0] = &off_250ADD058;
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  sub_23995E4A4((uint64_t)v114);
  v120[0] = &off_250ADCE98;
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  sub_23995E4A4((uint64_t)v120);
  return v40;
}

void sub_2399C8A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  sub_23958A178(&a12);
  sub_2394E52A8(&a20);
  sub_2394E62B0(&a28);
  sub_2394E484C((_QWORD *)(v28 - 152));
  _Unwind_Resume(a1);
}

uint64_t (*sub_2399C8AD0())()
{
  return sub_2399C8AD0;
}

_QWORD *sub_2399C8ADC(_QWORD *a1, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  int v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = (_QWORD *)a1[3];
  if (!v3)
  {
    v9 = 0;
    v7 = a2;
    goto LABEL_13;
  }
  if (v3 == a1)
  {
    v9 = v8;
    (*(void (**)(_QWORD *, _BYTE *))(*a1 + 24))(a1, v8);
    v4 = (uint64_t)v9;
    v7 = a2;
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD))(*v3 + 16))(a1[3]);
    v9 = (_BYTE *)v4;
    v7 = a2;
    if (!v4)
LABEL_13:
      sub_2394172E0();
  }
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v4 + 48))(v4, &v7);
  result = v9;
  if (v9 == v8)
  {
    v6 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2399C8BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(exception_object);
}

double *sub_2399C8C2C(double *result, double *a2, uint64_t a3, char a4)
{
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  double v17;
  double v18;
  int v19;
  int v20;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  double v26;
  int v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  int v34;
  int v35;
  double v36;
  double v37;
  int v38;
  double v39;
  int v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  int v48;
  int v49;
  double v50;
  double v51;
  int v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  int v58;
  int v59;
  int v60;
  double v61;
  uint64_t v62;
  double v63;
  double *v64;
  double *v65;
  double *v66;
  double v67;
  double *v68;
  double v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  double v73;
  double v74;
  BOOL v75;
  double *v76;
  double v77;
  double *v78;
  double v79;
  double *v80;
  double *v81;
  double v82;
  int v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  int v89;
  double v90;
  double v91;
  double v92;
  int v93;
  double v94;
  double v95;
  int v96;
  double v97;
  double v98;
  int v99;
  int v100;
  double v101;
  int v102;
  double v103;
  int v104;
  double *v105;
  BOOL v107;
  uint64_t v108;
  double *v109;
  uint64_t v110;
  double v111;
  double v112;
  int v113;
  uint64_t v114;
  char *v115;
  int64_t v116;
  int64_t v117;
  BOOL v118;
  uint64_t v119;
  double *v120;
  double *v121;
  double v122;
  int v123;
  double *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  double v130;
  double *v131;
  double *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  double *v137;
  int v138;
  double *v139;
  int v140;
  int v141;
  double *v142;
  double v143;
  double v144;
  int v145;
  double *v146;
  double *v147;
  uint64_t v148;
  double v149;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v87 = *(a2 - 1);
        v88 = v8[1];
        if (v87 > v88)
        {
          v89 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v89;
          v8[1] = v87;
          *(a2 - 1) = v88;
        }
        return result;
      case 3:
        v90 = v8[3];
        v91 = v8[1];
        v92 = *(a2 - 1);
        if (v90 <= v91)
        {
          if (v92 > v90)
          {
            v140 = *((_DWORD *)v8 + 4);
            *((_DWORD *)v8 + 4) = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v140;
            v8[3] = v92;
            *(a2 - 1) = v90;
            v97 = v8[3];
            v103 = v8[1];
            if (v97 > v103)
            {
              v141 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *((_DWORD *)v8 + 4);
              *((_DWORD *)v8 + 4) = v141;
              goto LABEL_163;
            }
          }
        }
        else
        {
          v93 = *(_DWORD *)v8;
          if (v92 <= v90)
          {
            *(_DWORD *)v8 = *((_DWORD *)v8 + 4);
            *((_DWORD *)v8 + 4) = v93;
            v8[1] = v90;
            v8[3] = v91;
            v149 = *(a2 - 1);
            if (v149 <= v91)
              return result;
            *((_DWORD *)v8 + 4) = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v93;
            v8[3] = v149;
          }
          else
          {
            *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v93;
            v8[1] = v92;
          }
          *(a2 - 1) = v91;
        }
        return result;
      case 4:
        return sub_2399C9B80(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_2399C9B80(v8, v8 + 2, v8 + 4, v8 + 6);
        v94 = *(a2 - 1);
        v95 = v8[7];
        if (v94 > v95)
        {
          v96 = *((_DWORD *)v8 + 12);
          *((_DWORD *)v8 + 12) = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v96;
          v8[7] = v94;
          *(a2 - 1) = v95;
          v97 = v8[7];
          v98 = v8[5];
          if (v97 > v98)
          {
            v99 = *((_DWORD *)v8 + 8);
            v100 = *((_DWORD *)v8 + 12);
            *((_DWORD *)v8 + 8) = v100;
            *((_DWORD *)v8 + 12) = v99;
            v8[5] = v97;
            v8[7] = v98;
            v101 = v8[3];
            if (v97 > v101)
            {
              v102 = *((_DWORD *)v8 + 4);
              *((_DWORD *)v8 + 4) = v100;
              *((_DWORD *)v8 + 8) = v102;
              v8[3] = v97;
              v8[5] = v101;
              v103 = v8[1];
              if (v97 > v103)
              {
                v104 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v100;
                *((_DWORD *)v8 + 4) = v104;
LABEL_163:
                v8[1] = v97;
                v8[3] = v103;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v105 = v8 + 2;
          v107 = v8 == a2 || v105 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v107)
            {
              v108 = 0;
              v109 = v8;
              do
              {
                v111 = v109[3];
                v112 = v109[1];
                v109 = v105;
                if (v111 > v112)
                {
                  v113 = *(_DWORD *)v105;
                  v114 = v108;
                  do
                  {
                    v115 = (char *)v8 + v114;
                    *((_DWORD *)v115 + 4) = *(_DWORD *)((char *)v8 + v114);
                    *((double *)v115 + 3) = *(double *)((char *)v8 + v114 + 8);
                    if (!v114)
                    {
                      v110 = (uint64_t)v8;
                      goto LABEL_122;
                    }
                    v114 -= 16;
                  }
                  while (v111 > *((double *)v115 - 1));
                  v110 = (uint64_t)v8 + v114 + 16;
LABEL_122:
                  *(_DWORD *)v110 = v113;
                  *(double *)(v110 + 8) = v111;
                }
                v105 = v109 + 2;
                v108 += 16;
              }
              while (v109 + 2 != a2);
            }
          }
          else if (!v107)
          {
            v142 = v8 + 3;
            do
            {
              v143 = v7[3];
              v144 = v7[1];
              v7 = v105;
              if (v143 > v144)
              {
                v145 = *(_DWORD *)v105;
                v146 = v142;
                do
                {
                  v147 = v146;
                  *((_DWORD *)v146 - 2) = *((_DWORD *)v146 - 6);
                  v148 = *((_QWORD *)v146 - 2);
                  v146 -= 2;
                  *(_QWORD *)v147 = v148;
                }
                while (v143 > *(v147 - 4));
                *((_DWORD *)v146 - 2) = v145;
                *v146 = v143;
              }
              v105 = v7 + 2;
              v142 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v116 = (unint64_t)(v10 - 2) >> 1;
          v117 = v116;
          do
          {
            if (v116 >= v117)
            {
              v119 = (2 * v117) | 1;
              v120 = &v8[2 * v119];
              if (2 * v117 + 2 < v10 && v120[1] > v120[3])
              {
                v120 += 2;
                v119 = 2 * v117 + 2;
              }
              v121 = &v8[2 * v117];
              v122 = v121[1];
              if (v120[1] <= v122)
              {
                v123 = *(_DWORD *)v121;
                do
                {
                  v124 = v121;
                  v121 = v120;
                  *(_DWORD *)v124 = *(_DWORD *)v120;
                  v124[1] = v120[1];
                  if (v116 < v119)
                    break;
                  v125 = 2 * v119;
                  v119 = (2 * v119) | 1;
                  v120 = &v8[2 * v119];
                  v126 = v125 + 2;
                  if (v126 < v10 && v120[1] > v120[3])
                  {
                    v120 += 2;
                    v119 = v126;
                  }
                }
                while (v120[1] <= v122);
                *(_DWORD *)v121 = v123;
                v121[1] = v122;
              }
            }
            v118 = v117-- <= 0;
          }
          while (!v118);
          v127 = (unint64_t)v9 >> 4;
          while (2)
          {
            v128 = 0;
            v129 = *(_DWORD *)v8;
            v130 = v8[1];
            v131 = v8;
            do
            {
              v132 = v131;
              v131 += 2 * v128 + 2;
              v133 = 2 * v128;
              v128 = (2 * v128) | 1;
              v134 = v133 + 2;
              if (v134 < v127 && v131[1] > v131[3])
              {
                v131 += 2;
                v128 = v134;
              }
              *(_DWORD *)v132 = *(_DWORD *)v131;
              v132[1] = v131[1];
            }
            while (v128 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
            if (v131 != a2 - 2)
            {
              *(_DWORD *)v131 = *((_DWORD *)a2 - 4);
              v131[1] = *(a2 - 1);
              *((_DWORD *)a2 - 4) = v129;
              *(a2 - 1) = v130;
              v135 = (char *)v131 - (char *)v8 + 16;
              if (v135 >= 17)
              {
                v136 = (((unint64_t)v135 >> 4) - 2) >> 1;
                v137 = &v8[2 * v136];
                v130 = v131[1];
                if (v137[1] > v130)
                {
                  v138 = *(_DWORD *)v131;
                  do
                  {
                    v139 = v131;
                    v131 = v137;
                    *(_DWORD *)v139 = *(_DWORD *)v137;
                    v139[1] = v137[1];
                    if (!v136)
                      break;
                    v136 = (v136 - 1) >> 1;
                    v137 = &v8[2 * v136];
                  }
                  while (v137[1] > v130);
                  *(_DWORD *)v131 = v138;
LABEL_146:
                  v131[1] = v130;
                }
              }
              a2 -= 2;
              v118 = v127-- <= 2;
              if (v118)
                return result;
              continue;
            }
            break;
          }
          *(_DWORD *)v131 = v129;
          goto LABEL_146;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 < 0x801)
        {
          v17 = v8[1];
          v18 = v12[1];
          if (v17 <= v18)
          {
            if (v13 > v17)
            {
              v24 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
              *((_DWORD *)a2 - 4) = v24;
              v8[1] = v13;
              *(a2 - 1) = v17;
              v25 = v8[1];
              v26 = v12[1];
              if (v25 > v26)
              {
                v27 = *(_DWORD *)v12;
                *(_DWORD *)v12 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v27;
                v12[1] = v25;
                v8[1] = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_DWORD *)v12;
            if (v13 <= v17)
            {
              *(_DWORD *)v12 = *(_DWORD *)v8;
              *(_DWORD *)v8 = v19;
              v12[1] = v17;
              v8[1] = v18;
              v39 = *(a2 - 1);
              if (v39 <= v18)
                goto LABEL_32;
              *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
              *((_DWORD *)a2 - 4) = v19;
              v8[1] = v39;
            }
            else
            {
              *(_DWORD *)v12 = *((_DWORD *)a2 - 4);
              *((_DWORD *)a2 - 4) = v19;
              v12[1] = v13;
            }
            *(a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v41 = v8[1];
          v40 = *(_DWORD *)v8;
          if (*(v8 - 1) > v41)
            goto LABEL_58;
          if (v41 <= *(a2 - 1))
          {
            v78 = v8 + 2;
            do
            {
              v8 = v78;
              if (v78 >= a2)
                break;
              v79 = v78[1];
              v78 += 2;
            }
            while (v41 <= v79);
          }
          else
          {
            v76 = v8;
            do
            {
              v8 = v76 + 2;
              v77 = v76[3];
              v76 += 2;
            }
            while (v41 <= v77);
          }
          v80 = a2;
          if (v8 < a2)
          {
            v81 = a2;
            do
            {
              v80 = v81 - 2;
              v82 = *(v81 - 1);
              v81 -= 2;
            }
            while (v41 > v82);
          }
          while (v8 < v80)
          {
            v83 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v80;
            *(_DWORD *)v80 = v83;
            v84 = *((_QWORD *)v8 + 1);
            v8[1] = v80[1];
            *((_QWORD *)v80 + 1) = v84;
            do
            {
              v85 = v8[3];
              v8 += 2;
            }
            while (v41 <= v85);
            do
            {
              v86 = *(v80 - 1);
              v80 -= 2;
            }
            while (v41 > v86);
          }
          if (v8 - 2 != v7)
          {
            *(_DWORD *)v7 = *((_DWORD *)v8 - 4);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *((_DWORD *)v8 - 4) = v40;
          *(v8 - 1) = v41;
          continue;
        }
        v14 = v12[1];
        v15 = v8[1];
        if (v14 <= v15)
        {
          if (v13 > v14)
          {
            v20 = *(_DWORD *)v12;
            *(_DWORD *)v12 = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v20;
            v12[1] = v13;
            *(a2 - 1) = v14;
            v21 = v12[1];
            v22 = v8[1];
            if (v21 > v22)
            {
              v23 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)v12;
              *(_DWORD *)v12 = v23;
              v8[1] = v21;
              v12[1] = v22;
            }
          }
        }
        else
        {
          v16 = *(_DWORD *)v8;
          if (v13 > v14)
          {
            *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v16;
            v8[1] = v13;
            goto LABEL_22;
          }
          *(_DWORD *)v8 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v16;
          v8[1] = v14;
          v12[1] = v15;
          v28 = *(a2 - 1);
          if (v28 > v15)
          {
            *(_DWORD *)v12 = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v16;
            v12[1] = v28;
LABEL_22:
            *(a2 - 1) = v15;
          }
        }
        v29 = &v8[2 * v11];
        v30 = v29 - 2;
        v31 = *(v29 - 1);
        v32 = v8[3];
        v33 = *(a2 - 3);
        if (v31 <= v32)
        {
          if (v33 > v31)
          {
            v35 = *(_DWORD *)v30;
            *(_DWORD *)v30 = *((_DWORD *)a2 - 8);
            *((_DWORD *)a2 - 8) = v35;
            v30[1] = v33;
            *(a2 - 3) = v31;
            v36 = v30[1];
            v37 = v8[3];
            if (v36 > v37)
            {
              v38 = *((_DWORD *)v8 + 4);
              *((_DWORD *)v8 + 4) = *(_DWORD *)v30;
              *(_DWORD *)v30 = v38;
              v8[3] = v36;
              v30[1] = v37;
            }
          }
        }
        else
        {
          v34 = *((_DWORD *)v8 + 4);
          if (v33 > v31)
          {
            *((_DWORD *)v8 + 4) = *((_DWORD *)a2 - 8);
            *((_DWORD *)a2 - 8) = v34;
            v8[3] = v33;
            goto LABEL_36;
          }
          *((_DWORD *)v8 + 4) = *(_DWORD *)v30;
          *(_DWORD *)v30 = v34;
          v8[3] = v31;
          v30[1] = v32;
          v42 = *(a2 - 3);
          if (v42 > v32)
          {
            *(_DWORD *)v30 = *((_DWORD *)a2 - 8);
            *((_DWORD *)a2 - 8) = v34;
            v30[1] = v42;
LABEL_36:
            *(a2 - 3) = v32;
          }
        }
        v43 = &v8[2 * v11];
        v44 = v43 + 2;
        v45 = v43[3];
        v46 = v8[5];
        v47 = *(a2 - 5);
        if (v45 <= v46)
        {
          if (v47 > v45)
          {
            v49 = *(_DWORD *)v44;
            *(_DWORD *)v44 = *((_DWORD *)a2 - 12);
            *((_DWORD *)a2 - 12) = v49;
            v44[1] = v47;
            *(a2 - 5) = v45;
            v50 = v44[1];
            v51 = v8[5];
            if (v50 > v51)
            {
              v52 = *((_DWORD *)v8 + 8);
              *((_DWORD *)v8 + 8) = *(_DWORD *)v44;
              *(_DWORD *)v44 = v52;
              v8[5] = v50;
              v44[1] = v51;
            }
          }
        }
        else
        {
          v48 = *((_DWORD *)v8 + 8);
          if (v47 > v45)
          {
            *((_DWORD *)v8 + 8) = *((_DWORD *)a2 - 12);
            *((_DWORD *)a2 - 12) = v48;
            v8[5] = v47;
            goto LABEL_45;
          }
          *((_DWORD *)v8 + 8) = *(_DWORD *)v44;
          *(_DWORD *)v44 = v48;
          v8[5] = v45;
          v44[1] = v46;
          v53 = *(a2 - 5);
          if (v53 > v46)
          {
            *(_DWORD *)v44 = *((_DWORD *)a2 - 12);
            *((_DWORD *)a2 - 12) = v48;
            v44[1] = v53;
LABEL_45:
            *(a2 - 5) = v46;
          }
        }
        v54 = v12[1];
        v55 = v30[1];
        v56 = v44[1];
        if (v54 <= v55)
        {
          v57 = *(_DWORD *)v12;
          if (v56 <= v54)
          {
            v55 = v12[1];
          }
          else
          {
            v58 = *(_DWORD *)v44;
            *(_DWORD *)v12 = *(_DWORD *)v44;
            *(_DWORD *)v44 = v57;
            v12[1] = v56;
            v44[1] = v54;
            if (v56 <= v55)
            {
              v55 = v56;
              v57 = v58;
            }
            else
            {
              v57 = *(_DWORD *)v30;
              *(_DWORD *)v30 = v58;
              *(_DWORD *)v12 = v57;
              v30[1] = v56;
              v12[1] = v55;
            }
          }
        }
        else
        {
          v57 = *(_DWORD *)v30;
          if (v56 <= v54)
          {
            *(_DWORD *)v30 = *(_DWORD *)v12;
            *(_DWORD *)v12 = v57;
            v30[1] = v54;
            v12[1] = v55;
            if (v56 > v55)
            {
              v59 = *(_DWORD *)v44;
              *(_DWORD *)v12 = *(_DWORD *)v44;
              *(_DWORD *)v44 = v57;
              v12[1] = v56;
              v44[1] = v55;
              v55 = v56;
              v57 = v59;
            }
          }
          else
          {
            *(_DWORD *)v30 = *(_DWORD *)v44;
            *(_DWORD *)v44 = v57;
            v30[1] = v56;
            v44[1] = v55;
            v57 = *(_DWORD *)v12;
            v55 = v54;
          }
        }
        v60 = *(_DWORD *)v8;
        *(_DWORD *)v8 = v57;
        *(_DWORD *)v12 = v60;
        v61 = v8[1];
        v8[1] = v55;
        v8[2 * v11 + 1] = v61;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v40 = *(_DWORD *)v8;
        v41 = v8[1];
LABEL_58:
        v62 = 0;
        do
        {
          v63 = v8[v62 + 3];
          v62 += 2;
        }
        while (v63 > v41);
        v64 = &v8[v62];
        v65 = a2;
        if (v62 == 2)
        {
          v68 = a2;
          while (v64 < v68)
          {
            v66 = v68 - 2;
            v69 = *(v68 - 1);
            v68 -= 2;
            if (v69 > v41)
              goto LABEL_66;
          }
          v66 = v68;
          v8 = v64;
        }
        else
        {
          do
          {
            v66 = v65 - 2;
            v67 = *(v65 - 1);
            v65 -= 2;
          }
          while (v67 <= v41);
LABEL_66:
          v8 = v64;
          if (v64 < v66)
          {
            v70 = (unint64_t)v66;
            do
            {
              v71 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)v70;
              *(_DWORD *)v70 = v71;
              v72 = *((_QWORD *)v8 + 1);
              v8[1] = *(double *)(v70 + 8);
              *(_QWORD *)(v70 + 8) = v72;
              do
              {
                v73 = v8[3];
                v8 += 2;
              }
              while (v73 > v41);
              do
              {
                v74 = *(double *)(v70 - 8);
                v70 -= 16;
              }
              while (v74 <= v41);
            }
            while ((unint64_t)v8 < v70);
          }
        }
        if (v8 - 2 != v7)
        {
          *(_DWORD *)v7 = *((_DWORD *)v8 - 4);
          v7[1] = *(v8 - 1);
        }
        *((_DWORD *)v8 - 4) = v40;
        *(v8 - 1) = v41;
        if (v64 < v66)
        {
LABEL_77:
          result = (double *)sub_2399C8C2C(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v75 = sub_2399C97D8(v7, v8 - 2);
        result = (double *)sub_2399C97D8(v8, a2);
        if (!(_DWORD)result)
        {
          if (v75)
            continue;
          goto LABEL_77;
        }
        a2 = v8 - 2;
        if (!v75)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_2399C97D8(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  int v17;
  double *v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  double v28;
  int v29;
  int v30;
  double v31;
  double v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  double *v38;
  uint64_t v39;
  int v40;
  double *v41;
  double v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *((_DWORD *)a2 - 4);
        *((_DWORD *)a2 - 4) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *((_DWORD *)a1 + 4);
          *((_DWORD *)a1 + 4) = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *((_DWORD *)a1 + 4);
            *((_DWORD *)a1 + 4) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *(_DWORD *)a1 = *((_DWORD *)a1 + 4);
          *((_DWORD *)a1 + 4) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 > v10)
          {
            *((_DWORD *)a1 + 4) = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *(_DWORD *)a1 = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_2399C9B80(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_2399C9B80(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 <= v20)
        return 1;
      v21 = *((_DWORD *)a1 + 12);
      *((_DWORD *)a1 + 12) = *((_DWORD *)a2 - 4);
      *((_DWORD *)a2 - 4) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = *((_DWORD *)a1 + 8);
      v25 = *((_DWORD *)a1 + 12);
      *((_DWORD *)a1 + 8) = v25;
      *((_DWORD *)a1 + 12) = v24;
      a1[5] = v22;
      a1[7] = v23;
      v26 = a1[3];
      if (v22 <= v26)
        return 1;
      v27 = *((_DWORD *)a1 + 4);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 8) = v27;
      a1[3] = v22;
      a1[5] = v26;
      v28 = a1[1];
      if (v22 <= v28)
        return 1;
      v29 = *(_DWORD *)a1;
      *(_DWORD *)a1 = v25;
      *((_DWORD *)a1 + 4) = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 > v13)
      {
        v17 = *(_DWORD *)a1;
        if (v16 <= v15)
        {
          *(_DWORD *)a1 = *((_DWORD *)a1 + 4);
          *((_DWORD *)a1 + 4) = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13)
            goto LABEL_30;
          *((_DWORD *)a1 + 4) = *((_DWORD *)a1 + 8);
          *((_DWORD *)a1 + 8) = v17;
          v18 = a1 + 3;
        }
        else
        {
          *(_DWORD *)a1 = *((_DWORD *)a1 + 8);
          *((_DWORD *)a1 + 8) = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        v34 = *((_DWORD *)a1 + 4);
        v35 = *((_DWORD *)a1 + 8);
        *((_DWORD *)a1 + 4) = v35;
        *((_DWORD *)a1 + 8) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          v36 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v35;
          *((_DWORD *)a1 + 4) = v36;
          v18 = a1 + 1;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v42 = v38[1];
        if (v42 > v41[1])
          break;
LABEL_39:
        v41 = v38;
        v39 += 16;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_DWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (char *)a1 + v44;
        *((_DWORD *)v45 + 12) = *(_DWORD *)((char *)a1 + v44 + 32);
        *((double *)v45 + 7) = *(double *)((char *)a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 16;
      }
      while (v42 > *((double *)v45 + 3));
      v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 12) = v43;
      *((double *)v46 + 7) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

double *sub_2399C9B80(double *result, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  int v7;
  int v8;
  double v9;
  double v10;
  int v11;
  double v12;
  int v13;
  double v14;
  double v15;
  int v16;
  double v17;
  double v18;
  int v19;

  v4 = a2[1];
  v5 = result[1];
  v6 = a3[1];
  if (v4 > v5)
  {
    v7 = *(_DWORD *)result;
    if (v6 <= v4)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(_DWORD *)a2 = v7;
      result[1] = v4;
      a2[1] = v5;
      v4 = a3[1];
      if (v4 <= v5)
        goto LABEL_11;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v7;
      a2[1] = v4;
    }
    else
    {
      *(_DWORD *)result = *(_DWORD *)a3;
      *(_DWORD *)a3 = v7;
      result[1] = v6;
    }
    a3[1] = v5;
    v4 = v5;
LABEL_11:
    v12 = a4[1];
    if (v12 <= v4)
      return result;
    goto LABEL_14;
  }
  if (v6 <= v4)
  {
    v4 = a3[1];
    v12 = a4[1];
    if (v12 <= v6)
      return result;
    goto LABEL_14;
  }
  v8 = *(_DWORD *)a2;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_DWORD *)a3 = v8;
  a2[1] = v6;
  a3[1] = v4;
  v9 = a2[1];
  v10 = result[1];
  if (v9 <= v10)
    goto LABEL_11;
  v11 = *(_DWORD *)result;
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_DWORD *)a2 = v11;
  result[1] = v9;
  a2[1] = v10;
  v4 = a3[1];
  v12 = a4[1];
  if (v12 <= v4)
    return result;
LABEL_14:
  v13 = *(_DWORD *)a3;
  *(_DWORD *)a3 = *(_DWORD *)a4;
  *(_DWORD *)a4 = v13;
  a3[1] = v12;
  a4[1] = v4;
  v14 = a3[1];
  v15 = a2[1];
  if (v14 > v15)
  {
    v16 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v16;
    a2[1] = v14;
    a3[1] = v15;
    v17 = a2[1];
    v18 = result[1];
    if (v17 > v18)
    {
      v19 = *(_DWORD *)result;
      *(_DWORD *)result = *(_DWORD *)a2;
      *(_DWORD *)a2 = v19;
      result[1] = v17;
      a2[1] = v18;
    }
  }
  return result;
}

void sub_2399C9CD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF12B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2399C9CE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF12B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B83E31CLL);
}

uint64_t sub_2399C9D14(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    result = MEMORY[0x23B83E2F8](result, 0x1000C8077774924);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return result;
}

uint64_t sub_2399C9D54(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v22;
  BOOL v23;
  unint64_t v24;
  float v25;
  float v26;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  float v36;
  float v37;
  unint64_t v39;
  float v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  float v44;
  unint64_t v46;
  float v47;
  float v48;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  float v53;
  float v54;
  float *v56;
  float *i;
  float v59;
  uint64_t v60;
  unint64_t v61;
  float v62;
  float v63;
  float v65;
  uint64_t v67;
  float v68;
  float v69;
  BOOL v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  float v74;
  float v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  int v79;
  float v80;
  float v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  float v85;
  float v86;
  _DWORD *v87;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _DWORD *v93;
  float v94;
  float v95;
  float v96;
  BOOL v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  int64_t v104;
  int64_t v105;
  int64_t v106;
  uint64_t v107;
  unint64_t v108;
  float v109;
  float v110;
  BOOL v111;
  float *v112;
  float v113;
  float v114;
  float v115;
  float v117;
  uint64_t v118;
  uint64_t v119;
  float v120;
  float v121;
  BOOL v122;
  float v123;
  int64_t v125;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  int64_t v132;
  float v133;
  float v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  float v141;
  float v142;
  float v143;
  BOOL v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  float v150;
  _DWORD *v152;
  float v153;
  float v154;
  float v155;
  BOOL v156;
  int v157;
  uint64_t v158;
  float v159;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;

  v7 = result;
LABEL_2:
  v8 = (uint64_t *)(a2 - 12);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 2);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v68 = *(float *)(a2 - 8);
        v69 = *(float *)(v9 + 4);
        if (v68 > v69
          || ((float)(v69 + -0.000001) < v68 ? (v70 = *(float *)(a2 - 4) < *(float *)(v9 + 8)) : (v70 = 0), v70))
        {
          v170 = *(_DWORD *)(v9 + 8);
          v164 = *(_QWORD *)v9;
          v71 = *v8;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 - 4);
          *(_QWORD *)v9 = v71;
          *(_DWORD *)(a2 - 4) = v170;
          *v8 = v164;
        }
        return result;
      case 3:
        return (uint64_t)sub_2399CAB84((float *)v9, (float *)(v9 + 12), (float *)(a2 - 12));
      case 4:
        v72 = (uint64_t *)(v9 + 12);
        v73 = (uint64_t *)(v9 + 24);
        result = (uint64_t)sub_2399CAB84((float *)v9, (float *)(v9 + 12), (float *)(v9 + 24));
        v74 = *(float *)(a2 - 8);
        v75 = *(float *)(v9 + 28);
        if (v74 > v75
          || ((float)(v75 + -0.000001) < v74 ? (v76 = *(float *)(a2 - 4) < *(float *)(v9 + 32)) : (v76 = 0), v76))
        {
          v77 = *v73;
          v78 = *(_DWORD *)(v9 + 32);
          v79 = *(_DWORD *)(a2 - 4);
          *v73 = *v8;
          *(_DWORD *)(v9 + 32) = v79;
          *(_DWORD *)(a2 - 4) = v78;
          *v8 = v77;
          v80 = *(float *)(v9 + 28);
          v81 = *(float *)(v9 + 16);
          if (v80 > v81
            || ((float)(v81 + -0.000001) < v80 ? (v82 = *(float *)(v9 + 32) < *(float *)(v9 + 20)) : (v82 = 0), v82))
          {
            v83 = *(_DWORD *)(v9 + 20);
            v84 = *v72;
            *v72 = *v73;
            *(_DWORD *)(v9 + 20) = *(_DWORD *)(v9 + 32);
            *v73 = v84;
            *(_DWORD *)(v9 + 32) = v83;
            v85 = *(float *)(v9 + 16);
            v86 = *(float *)(v9 + 4);
            if (v85 > v86 || (float)(v86 + -0.000001) < v85 && *(float *)(v9 + 20) < *(float *)(v9 + 8))
            {
              v171 = *(_DWORD *)(v9 + 8);
              v165 = *(_QWORD *)v9;
              *(_QWORD *)v9 = *v72;
              *(_DWORD *)(v9 + 8) = *(_DWORD *)(v9 + 20);
              *v72 = v165;
              *(_DWORD *)(v9 + 20) = v171;
            }
          }
        }
        return result;
      case 5:
        return (uint64_t)sub_2399CA8E8((float *)v9, (float *)(v9 + 12), (float *)(v9 + 24), (float *)(v9 + 36), (float *)(a2 - 12));
      default:
        if (v10 > 287)
        {
          if (!a3)
          {
            if (v9 != a2)
            {
              v104 = (unint64_t)(v11 - 2) >> 1;
              v105 = v104;
              do
              {
                v106 = v105;
                if (v104 >= v105)
                {
                  v107 = (2 * v105) | 1;
                  v108 = v9 + 12 * v107;
                  if (2 * v106 + 2 < v11)
                  {
                    v109 = *(float *)(v108 + 4);
                    v110 = *(float *)(v108 + 16);
                    if (v109 > v110
                      || ((float)(v110 + -0.000001) < v109
                        ? (v111 = *(float *)(v108 + 8) < *(float *)(v108 + 20))
                        : (v111 = 0),
                          v111))
                    {
                      v108 += 12;
                      v107 = 2 * v106 + 2;
                    }
                  }
                  v112 = (float *)(v9 + 12 * v106);
                  v113 = *(float *)(v108 + 4);
                  v114 = v112[1];
                  if (v113 <= v114)
                  {
                    v115 = v112[2];
                    if ((float)(v114 + -0.000001) >= v113 || *(float *)(v108 + 8) >= v115)
                    {
                      v117 = *v112;
                      do
                      {
                        result = (uint64_t)v112;
                        v112 = (float *)v108;
                        v118 = *(_QWORD *)v108;
                        *(float *)(result + 8) = v112[2];
                        *(_QWORD *)result = v118;
                        if (v104 < v107)
                          break;
                        v119 = 2 * v107;
                        v107 = (2 * v107) | 1;
                        v108 = v9 + 12 * v107;
                        result = v119 + 2;
                        if (result < v11)
                        {
                          v120 = *(float *)(v108 + 4);
                          v121 = *(float *)(v108 + 16);
                          if (v120 > v121
                            || ((float)(v121 + -0.000001) < v120
                              ? (v122 = *(float *)(v108 + 8) < *(float *)(v108 + 20))
                              : (v122 = 0),
                                v122))
                          {
                            v108 += 12;
                            v107 = result;
                          }
                        }
                        v123 = *(float *)(v108 + 4);
                        if (v123 > v114)
                          break;
                      }
                      while ((float)(v114 + -0.000001) >= v123 || *(float *)(v108 + 8) >= v115);
                      *v112 = v117;
                      v112[1] = v114;
                      v112[2] = v115;
                    }
                  }
                }
                v105 = v106 - 1;
              }
              while (v106);
              v125 = v10 / 0xCuLL;
              do
              {
                v127 = 0;
                v172 = *(_DWORD *)(v9 + 8);
                v166 = *(_QWORD *)v9;
                v128 = v9;
                do
                {
                  v130 = v128;
                  v128 += 12 * v127 + 12;
                  v131 = 2 * v127;
                  v127 = (2 * v127) | 1;
                  v132 = v131 + 2;
                  if (v132 < v125)
                  {
                    v133 = *(float *)(v128 + 4);
                    v134 = *(float *)(v128 + 16);
                    if (v133 > v134
                      || ((float)(v134 + -0.000001) < v133
                        ? (v135 = *(float *)(v128 + 8) < *(float *)(v128 + 20))
                        : (v135 = 0),
                          v135))
                    {
                      v128 += 12;
                      v127 = v132;
                    }
                  }
                  v129 = *(_QWORD *)v128;
                  *(_DWORD *)(v130 + 8) = *(_DWORD *)(v128 + 8);
                  *(_QWORD *)v130 = v129;
                }
                while (v127 <= (uint64_t)((unint64_t)(v125 - 2) >> 1));
                a2 -= 12;
                if (v128 == a2)
                {
                  *(_DWORD *)(v128 + 8) = v172;
                  *(_QWORD *)v128 = v166;
                }
                else
                {
                  v136 = *(_QWORD *)a2;
                  *(_DWORD *)(v128 + 8) = *(_DWORD *)(a2 + 8);
                  *(_QWORD *)v128 = v136;
                  *(_DWORD *)(a2 + 8) = v172;
                  *(_QWORD *)a2 = v166;
                  v137 = v128 - v9 + 12;
                  if (v137 >= 13)
                  {
                    v138 = v137 / 0xCuLL - 2;
                    v139 = v138 >> 1;
                    v140 = v9 + 12 * (v138 >> 1);
                    v141 = *(float *)(v140 + 4);
                    v142 = *(float *)(v128 + 4);
                    v143 = *(float *)(v128 + 8);
                    if (v141 > v142
                      || ((float)(v142 + -0.000001) < v141 ? (v144 = *(float *)(v140 + 8) < v143) : (v144 = 0), v144))
                    {
                      v145 = *(_DWORD *)v128;
                      v146 = *(_QWORD *)v140;
                      result = *(unsigned int *)(v140 + 8);
                      *(_DWORD *)(v128 + 8) = result;
                      *(_QWORD *)v128 = v146;
                      if (v138 >= 2)
                      {
                        while (1)
                        {
                          v148 = v139 - 1;
                          v139 = (v139 - 1) >> 1;
                          v149 = v9 + 12 * v139;
                          v150 = *(float *)(v149 + 4);
                          if (v150 <= v142 && ((float)(v142 + -0.000001) >= v150 || *(float *)(v149 + 8) >= v143))
                            break;
                          v147 = *(_QWORD *)v149;
                          result = *(unsigned int *)(v149 + 8);
                          *(_DWORD *)(v140 + 8) = result;
                          *(_QWORD *)v140 = v147;
                          v140 = v9 + 12 * v139;
                          if (v148 <= 1)
                            goto LABEL_230;
                        }
                      }
                      v149 = v140;
LABEL_230:
                      *(_DWORD *)v149 = v145;
                      *(float *)(v149 + 4) = v142;
                      *(float *)(v149 + 8) = v143;
                    }
                  }
                }
              }
              while (v125-- > 2);
            }
            return result;
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = v9 + 12 * ((unint64_t)v11 >> 1);
          if ((unint64_t)v10 >= 0x601)
          {
            sub_2399CAB84((float *)v7, (float *)(v7 + 12 * v12), (float *)(a2 - 12));
            v14 = 12 * v12;
            v15 = (float *)(12 * v12 + v7 - 12);
            sub_2399CAB84((float *)(v7 + 12), v15, (float *)(a2 - 24));
            v16 = (float *)(v7 + 12 + v14);
            sub_2399CAB84((float *)(v7 + 24), v16, (float *)(a2 - 36));
            result = (uint64_t)sub_2399CAB84(v15, (float *)v13, v16);
            v167 = *(_DWORD *)(v7 + 8);
            v161 = *(_QWORD *)v7;
            v17 = *(_DWORD *)(v13 + 8);
            *(_QWORD *)v7 = *(_QWORD *)v13;
            *(_DWORD *)(v7 + 8) = v17;
            *(_DWORD *)(v13 + 8) = v167;
            *(_QWORD *)v13 = v161;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_28;
LABEL_8:
            v18 = *(float *)(v7 - 8);
            v20 = *(float *)(v7 + 4);
            v19 = *(float *)(v7 + 8);
            if (v18 > v20)
              goto LABEL_29;
            if ((float)(v20 + -0.000001) < v18 && *(float *)(v7 - 4) < v19)
              goto LABEL_29;
            v22 = *(float *)(a2 - 8);
            if (v20 > v22 || ((float)(v22 + -0.000001) < v20 ? (v23 = v19 < *(float *)(a2 - 4)) : (v23 = 0), v23))
            {
              v52 = v7 + 12;
              do
              {
                v9 = v52;
                v53 = *(float *)(v52 + 4);
                if (v20 > v53)
                  break;
                v54 = *(float *)(v52 + 8);
                v52 += 12;
              }
              while ((float)(v53 + -0.000001) >= v20 || v19 >= v54);
            }
            else
            {
              v24 = v7 + 12;
              do
              {
                v9 = v24;
                if (v24 >= a2)
                  break;
                v25 = *(float *)(v24 + 4);
                if (v20 > v25)
                  break;
                v26 = *(float *)(v24 + 8);
                v24 += 12;
              }
              while ((float)(v25 + -0.000001) >= v20 || v19 >= v26);
            }
            v56 = (float *)a2;
            if (v9 < a2)
            {
              for (i = (float *)(a2 - 4); v20 > v22 || (float)(v22 + -0.000001) < v20 && v19 < *i; i -= 3)
                v22 = *(i - 4);
              v56 = i - 2;
            }
            v59 = *(float *)v7;
            while (v9 < (unint64_t)v56)
            {
              v169 = *(_DWORD *)(v9 + 8);
              v163 = *(_QWORD *)v9;
              v60 = *(_QWORD *)v56;
              *(float *)(v9 + 8) = v56[2];
              *(_QWORD *)v9 = v60;
              *((_DWORD *)v56 + 2) = v169;
              *(_QWORD *)v56 = v163;
              v61 = v9 + 12;
              do
              {
                v9 = v61;
                v62 = *(float *)(v61 + 4);
                if (v20 > v62)
                  break;
                v63 = *(float *)(v61 + 8);
                v61 += 12;
              }
              while ((float)(v62 + -0.000001) >= v20 || v19 >= v63);
              do
              {
                do
                {
                  v56 -= 3;
                  v65 = v56[1];
                }
                while (v20 > v65);
              }
              while ((float)(v65 + -0.000001) < v20 && v19 < v56[2]);
            }
            if (v9 - 12 != v7)
            {
              v67 = *(_QWORD *)(v9 - 12);
              *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 4);
              *(_QWORD *)v7 = v67;
            }
            a4 = 0;
            *(float *)(v9 - 12) = v59;
            *(float *)(v9 - 8) = v20;
            *(float *)(v9 - 4) = v19;
            continue;
          }
          result = (uint64_t)sub_2399CAB84((float *)(v7 + 12 * v12), (float *)v7, (float *)(a2 - 12));
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_8;
LABEL_28:
          v20 = *(float *)(v7 + 4);
          v19 = *(float *)(v7 + 8);
LABEL_29:
          v28 = 0;
          v29 = *(float *)v7;
          v30 = v20 + -0.000001;
          while (1)
          {
            v31 = *(float *)(v7 + v28 + 16);
            if (v31 <= v20 && (v30 >= v31 || *(float *)(v7 + v28 + 20) >= v19))
              break;
            v28 += 12;
          }
          v33 = v7 + v28 + 12;
          v34 = a2 - 12;
          if (v28)
          {
            do
            {
              v35 = v34;
              v36 = *(float *)(v34 + 4);
              if (v36 > v20)
                break;
              v37 = *(float *)(v34 + 8);
              v34 -= 12;
            }
            while (v30 >= v36 || v37 >= v19);
          }
          else
          {
            v35 = a2;
            while (v33 < v35)
            {
              v39 = v35 - 12;
              v40 = *(float *)(v35 - 8);
              if (v40 <= v20)
              {
                v41 = v30 < v40 && *(float *)(v35 - 4) < v19;
                v35 -= 12;
                if (!v41)
                  continue;
              }
              v35 = v39;
              break;
            }
          }
          v9 = v33;
          if (v33 < v35)
          {
            v42 = v35;
            do
            {
              v168 = *(_DWORD *)(v9 + 8);
              v162 = *(_QWORD *)v9;
              v43 = *(_QWORD *)v42;
              *(_DWORD *)(v9 + 8) = *(_DWORD *)(v42 + 8);
              *(_QWORD *)v9 = v43;
              *(_DWORD *)(v42 + 8) = v168;
              *(_QWORD *)v42 = v162;
              do
              {
                do
                {
                  v9 += 12;
                  v44 = *(float *)(v9 + 4);
                }
                while (v44 > v20);
              }
              while (v30 < v44 && *(float *)(v9 + 8) < v19);
              v46 = v42 - 12;
              do
              {
                v42 = v46;
                v47 = *(float *)(v46 + 4);
                if (v47 > v20)
                  break;
                v48 = *(float *)(v46 + 8);
                v46 -= 12;
              }
              while (v30 >= v47 || v48 >= v19);
            }
            while (v9 < v42);
          }
          if (v9 - 12 != v7)
          {
            v50 = *(_QWORD *)(v9 - 12);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v9 - 4);
            *(_QWORD *)v7 = v50;
          }
          *(float *)(v9 - 12) = v29;
          *(float *)(v9 - 8) = v20;
          *(float *)(v9 - 4) = v19;
          if (v33 < v35)
            goto LABEL_75;
          v51 = sub_2399CAD1C(v7, v9 - 12);
          result = sub_2399CAD1C(v9, a2);
          if (!(_DWORD)result)
          {
            if (v51)
              continue;
LABEL_75:
            result = sub_2399C9D54(v7, v9 - 12, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v9 - 12;
          if (v51)
            return result;
          goto LABEL_2;
        }
        v87 = (_DWORD *)(v9 + 12);
        v89 = v9 == a2 || v87 == (_DWORD *)a2;
        if ((a4 & 1) != 0)
        {
          if (!v89)
          {
            v90 = 0;
            v91 = v9;
            do
            {
              v93 = v87;
              v94 = *(float *)(v91 + 16);
              v95 = *(float *)(v91 + 20);
              v96 = *(float *)(v91 + 4);
              if (v94 > v96 || ((float)(v96 + -0.000001) < v94 ? (v97 = v95 < *(float *)(v91 + 8)) : (v97 = 0), v97))
              {
                v99 = *(_DWORD *)(v91 + 8);
                v98 = *(_DWORD *)(v91 + 12);
                *(_QWORD *)v93 = *(_QWORD *)v91;
                v93[2] = v99;
                v92 = v9;
                if (v91 != v9)
                {
                  v100 = v90;
                  while (1)
                  {
                    v101 = v9 + v100;
                    v102 = *(float *)(v9 + v100 - 8);
                    if (v94 <= v102 && ((float)(v102 + -0.000001) >= v94 || v95 >= *(float *)(v101 - 4)))
                      break;
                    *(_QWORD *)v101 = *(_QWORD *)(v101 - 12);
                    *(_DWORD *)(v101 + 8) = *(_DWORD *)(v101 - 4);
                    v100 -= 12;
                    if (!v100)
                    {
                      v92 = v9;
                      goto LABEL_148;
                    }
                  }
                  v92 = v9 + v100;
                }
LABEL_148:
                *(_DWORD *)v92 = v98;
                *(float *)(v92 + 4) = v94;
                *(float *)(v92 + 8) = v95;
              }
              v87 = v93 + 3;
              v90 += 12;
              v91 = (unint64_t)v93;
            }
            while (v93 + 3 != (_DWORD *)a2);
          }
        }
        else if (!v89)
        {
          do
          {
            v152 = v87;
            v153 = *(float *)(v7 + 16);
            v154 = *(float *)(v7 + 20);
            v155 = *(float *)(v7 + 4);
            if (v153 > v155
              || ((float)(v155 + -0.000001) < v153 ? (v156 = v154 < *(float *)(v7 + 8)) : (v156 = 0), v156))
            {
              v157 = *v87;
              do
              {
                do
                {
                  v158 = v7;
                  *(_QWORD *)(v7 + 12) = *(_QWORD *)v7;
                  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v7 + 8);
                  v7 -= 12;
                  v159 = *(float *)(v158 - 8);
                }
                while (v153 > v159);
              }
              while ((float)(v159 + -0.000001) < v153 && v154 < *(float *)(v158 - 4));
              *(_DWORD *)v158 = v157;
              *(float *)(v158 + 4) = v153;
              *(float *)(v158 + 8) = v154;
            }
            v87 = v152 + 3;
            v7 = (uint64_t)v152;
          }
          while (v152 + 3 != (_DWORD *)a2);
        }
        return result;
    }
  }
}

float *sub_2399CA8E8(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  float *result;
  float v11;
  float v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  float v17;
  float v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  int v22;
  float v23;
  float v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  int v28;
  float v29;
  float v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  int v34;
  float v35;
  float v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  int v40;
  float v41;
  float v42;
  int v43;
  uint64_t v44;
  int v45;
  float v46;
  float v47;
  int v48;
  uint64_t v49;
  int v50;

  result = sub_2399CAB84(a1, a2, a3);
  v11 = a4[1];
  v12 = a3[1];
  if (v11 > v12 || ((float)(v12 + -0.000001) < v11 ? (v13 = a4[2] < a3[2]) : (v13 = 0), v13))
  {
    v14 = *((_DWORD *)a3 + 2);
    v15 = *(_QWORD *)a3;
    v16 = *((_DWORD *)a4 + 2);
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *((_DWORD *)a3 + 2) = v16;
    *(_QWORD *)a4 = v15;
    *((_DWORD *)a4 + 2) = v14;
    v17 = a3[1];
    v18 = a2[1];
    if (v17 > v18 || ((float)(v18 + -0.000001) < v17 ? (v19 = a3[2] < a2[2]) : (v19 = 0), v19))
    {
      v20 = *((_DWORD *)a2 + 2);
      v21 = *(_QWORD *)a2;
      v22 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v22;
      *(_QWORD *)a3 = v21;
      *((_DWORD *)a3 + 2) = v20;
      v23 = a2[1];
      v24 = a1[1];
      if (v23 > v24 || ((float)(v24 + -0.000001) < v23 ? (v25 = a2[2] < a1[2]) : (v25 = 0), v25))
      {
        v26 = *((_DWORD *)a1 + 2);
        v27 = *(_QWORD *)a1;
        v28 = *((_DWORD *)a2 + 2);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_DWORD *)a1 + 2) = v28;
        *(_QWORD *)a2 = v27;
        *((_DWORD *)a2 + 2) = v26;
      }
    }
  }
  v29 = a5[1];
  v30 = a4[1];
  if (v29 > v30 || ((float)(v30 + -0.000001) < v29 ? (v31 = a5[2] < a4[2]) : (v31 = 0), v31))
  {
    v32 = *((_DWORD *)a4 + 2);
    v33 = *(_QWORD *)a4;
    v34 = *((_DWORD *)a5 + 2);
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *((_DWORD *)a4 + 2) = v34;
    *(_QWORD *)a5 = v33;
    *((_DWORD *)a5 + 2) = v32;
    v35 = a4[1];
    v36 = a3[1];
    if (v35 > v36 || ((float)(v36 + -0.000001) < v35 ? (v37 = a4[2] < a3[2]) : (v37 = 0), v37))
    {
      v38 = *((_DWORD *)a3 + 2);
      v39 = *(_QWORD *)a3;
      v40 = *((_DWORD *)a4 + 2);
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *((_DWORD *)a3 + 2) = v40;
      *(_QWORD *)a4 = v39;
      *((_DWORD *)a4 + 2) = v38;
      v41 = a3[1];
      v42 = a2[1];
      if (v41 > v42 || (float)(v42 + -0.000001) < v41 && a3[2] < a2[2])
      {
        v43 = *((_DWORD *)a2 + 2);
        v44 = *(_QWORD *)a2;
        v45 = *((_DWORD *)a3 + 2);
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *((_DWORD *)a2 + 2) = v45;
        *(_QWORD *)a3 = v44;
        *((_DWORD *)a3 + 2) = v43;
        v46 = a2[1];
        v47 = a1[1];
        if (v46 > v47 || (float)(v47 + -0.000001) < v46 && a2[2] < a1[2])
        {
          v48 = *((_DWORD *)a1 + 2);
          v49 = *(_QWORD *)a1;
          v50 = *((_DWORD *)a2 + 2);
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *((_DWORD *)a1 + 2) = v50;
          *(_QWORD *)a2 = v49;
          *((_DWORD *)a2 + 2) = v48;
        }
      }
    }
  }
  return result;
}

float *sub_2399CAB84(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  float v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  int v22;
  float v23;
  float v24;
  int v26;
  uint64_t v27;
  int v28;
  int v29;

  v4 = a2[1];
  v3 = a2[2];
  v5 = result[1];
  if (v4 > v5 || ((float)(v5 + -0.000001) < v4 ? (v6 = v3 < result[2]) : (v6 = 0), v6))
  {
    v18 = a3[1];
    if (v18 > v4 || ((float)(v4 + -0.000001) < v18 ? (v19 = a3[2] < v3) : (v19 = 0), v19))
    {
      v26 = *((_DWORD *)result + 2);
      v27 = *(_QWORD *)result;
      v29 = *((_DWORD *)a3 + 2);
      *(_QWORD *)result = *(_QWORD *)a3;
      *((_DWORD *)result + 2) = v29;
    }
    else
    {
      v20 = *((_DWORD *)result + 2);
      v21 = *(_QWORD *)result;
      v22 = *((_DWORD *)a2 + 2);
      *(_QWORD *)result = *(_QWORD *)a2;
      *((_DWORD *)result + 2) = v22;
      *(_QWORD *)a2 = v21;
      *((_DWORD *)a2 + 2) = v20;
      v23 = a3[1];
      v24 = a2[1];
      if (v23 <= v24 && ((float)(v24 + -0.000001) >= v23 || a3[2] >= a2[2]))
        return result;
      v26 = *((_DWORD *)a2 + 2);
      v27 = *(_QWORD *)a2;
      v28 = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *((_DWORD *)a2 + 2) = v28;
    }
    *(_QWORD *)a3 = v27;
    *((_DWORD *)a3 + 2) = v26;
    return result;
  }
  v7 = a3[1];
  if (v7 > v4 || ((float)(v4 + -0.000001) < v7 ? (v8 = a3[2] < v3) : (v8 = 0), v8))
  {
    v9 = *((_DWORD *)a2 + 2);
    v10 = *(_QWORD *)a2;
    v11 = *((_DWORD *)a3 + 2);
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *((_DWORD *)a2 + 2) = v11;
    *(_QWORD *)a3 = v10;
    *((_DWORD *)a3 + 2) = v9;
    v12 = a2[1];
    v13 = result[1];
    if (v12 > v13 || ((float)(v13 + -0.000001) < v12 ? (v14 = a2[2] < result[2]) : (v14 = 0), v14))
    {
      v15 = *((_DWORD *)result + 2);
      v16 = *(_QWORD *)result;
      v17 = *((_DWORD *)a2 + 2);
      *(_QWORD *)result = *(_QWORD *)a2;
      *((_DWORD *)result + 2) = v17;
      *(_QWORD *)a2 = v16;
      *((_DWORD *)a2 + 2) = v15;
    }
  }
  return result;
}

BOOL sub_2399CAD1C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v20;
  float v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  float v29;
  float v30;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  float v36;
  float v37;
  int v39;
  uint64_t v40;
  float v41;
  float v42;
  int v44;
  uint64_t v45;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v20 = *(float *)(a2 - 8);
      v21 = *(float *)(a1 + 4);
      if (v20 > v21
        || ((float)(v21 + -0.000001) < v20 ? (v22 = *(float *)(a2 - 4) < *(float *)(a1 + 8)) : (v22 = 0), v22))
      {
        v23 = a2 - 12;
        v24 = *(_DWORD *)(a1 + 8);
        v25 = *(_QWORD *)a1;
        v26 = *(_DWORD *)(a2 - 4);
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 12);
        *(_DWORD *)(a1 + 8) = v26;
        *(_QWORD *)v23 = v25;
        *(_DWORD *)(v23 + 8) = v24;
      }
      return result;
    case 3uLL:
      sub_2399CAB84((float *)a1, (float *)(a1 + 12), (float *)(a2 - 12));
      return 1;
    case 4uLL:
      v27 = (uint64_t *)(a1 + 12);
      v28 = (uint64_t *)(a1 + 24);
      sub_2399CAB84((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      v29 = *(float *)(a2 - 8);
      v30 = *(float *)(a1 + 28);
      if (v29 <= v30 && ((float)(v30 + -0.000001) >= v29 || *(float *)(a2 - 4) >= *(float *)(a1 + 32)))
        return 1;
      v32 = a2 - 12;
      v33 = *(_DWORD *)(a1 + 32);
      v34 = *v28;
      v35 = *(_DWORD *)(a2 - 4);
      *v28 = *(_QWORD *)(a2 - 12);
      *(_DWORD *)(a1 + 32) = v35;
      *(_QWORD *)v32 = v34;
      *(_DWORD *)(v32 + 8) = v33;
      v36 = *(float *)(a1 + 28);
      v37 = *(float *)(a1 + 16);
      if (v36 <= v37 && ((float)(v37 + -0.000001) >= v36 || *(float *)(a1 + 32) >= *(float *)(a1 + 20)))
        return 1;
      v39 = *(_DWORD *)(a1 + 20);
      v40 = *v27;
      *v27 = *v28;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 32);
      *v28 = v40;
      *(_DWORD *)(a1 + 32) = v39;
      v41 = *(float *)(a1 + 16);
      v42 = *(float *)(a1 + 4);
      if (v41 <= v42 && ((float)(v42 + -0.000001) >= v41 || *(float *)(a1 + 20) >= *(float *)(a1 + 8)))
        return 1;
      v44 = *(_DWORD *)(a1 + 8);
      v45 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *v27;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 20);
      *v27 = v45;
      *(_DWORD *)(a1 + 20) = v44;
      return 1;
    case 5uLL:
      sub_2399CA8E8((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24), (float *)(a1 + 36), (float *)(a2 - 12));
      return 1;
    default:
      v6 = a1 + 24;
      sub_2399CAB84((float *)a1, (float *)(a1 + 12), (float *)(a1 + 24));
      v7 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    v11 = *(float *)(v7 + 4);
    v12 = *(float *)(v7 + 8);
    v13 = *(float *)(v6 + 4);
    if (v11 > v13 || ((float)(v13 + -0.000001) < v11 ? (v14 = v12 < *(float *)(v6 + 8)) : (v14 = 0), v14))
    {
      v15 = *(_DWORD *)v7;
      *(_QWORD *)v7 = *(_QWORD *)v6;
      *(_DWORD *)(v7 + 8) = *(_DWORD *)(v6 + 8);
      v10 = a1;
      if (v6 != a1)
      {
        v16 = v8;
        while (1)
        {
          v17 = a1 + v16;
          v18 = *(float *)(a1 + v16 + 16);
          if (v11 <= v18 && ((float)(v18 + -0.000001) >= v11 || v12 >= *(float *)(v17 + 20)))
            break;
          *(_QWORD *)(v17 + 24) = *(_QWORD *)(v17 + 12);
          *(_DWORD *)(v17 + 32) = *(_DWORD *)(v17 + 20);
          v16 -= 12;
          if (v16 == -24)
          {
            v10 = a1;
            goto LABEL_5;
          }
        }
        v10 = a1 + v16 + 24;
      }
LABEL_5:
      *(_DWORD *)v10 = v15;
      *(float *)(v10 + 4) = v11;
      *(float *)(v10 + 8) = v12;
      if (++v9 == 8)
        return v7 + 12 == a2;
    }
    v6 = v7;
    v8 += 12;
    v7 += 12;
    if (v7 == a2)
      return 1;
  }
}

double *sub_2399CB0A0(double *result, double *a2, uint64_t a3, char a4)
{
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  int v16;
  double v17;
  double v18;
  int v19;
  int v20;
  double v21;
  double v22;
  int v23;
  int v24;
  double v25;
  double v26;
  int v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  double v33;
  int v34;
  int v35;
  double v36;
  double v37;
  int v38;
  double v39;
  int v40;
  double v41;
  double v42;
  double *v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  int v48;
  int v49;
  double v50;
  double v51;
  int v52;
  double v53;
  double v54;
  double v55;
  double v56;
  int v57;
  int v58;
  int v59;
  int v60;
  double v61;
  uint64_t v62;
  double v63;
  double *v64;
  double *v65;
  double *v66;
  double v67;
  double *v68;
  double v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  double v73;
  double v74;
  BOOL v75;
  double *v76;
  double v77;
  double *v78;
  double v79;
  double *v80;
  double *v81;
  double v82;
  int v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  int v89;
  double v90;
  double v91;
  double v92;
  int v93;
  double v94;
  double v95;
  int v96;
  double v97;
  double v98;
  int v99;
  int v100;
  double v101;
  int v102;
  double v103;
  int v104;
  double *v105;
  BOOL v107;
  uint64_t v108;
  double *v109;
  uint64_t v110;
  double v111;
  double v112;
  int v113;
  uint64_t v114;
  char *v115;
  int64_t v116;
  int64_t v117;
  BOOL v118;
  uint64_t v119;
  double *v120;
  double *v121;
  double v122;
  int v123;
  double *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  double v130;
  double *v131;
  double *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  double *v137;
  int v138;
  double *v139;
  int v140;
  int v141;
  double *v142;
  double v143;
  double v144;
  int v145;
  double *v146;
  double *v147;
  uint64_t v148;
  double v149;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v87 = *(a2 - 1);
        v88 = v8[1];
        if (v87 > v88)
        {
          v89 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v89;
          v8[1] = v87;
          *(a2 - 1) = v88;
        }
        return result;
      case 3:
        v90 = v8[3];
        v91 = v8[1];
        v92 = *(a2 - 1);
        if (v90 <= v91)
        {
          if (v92 > v90)
          {
            v140 = *((_DWORD *)v8 + 4);
            *((_DWORD *)v8 + 4) = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v140;
            v8[3] = v92;
            *(a2 - 1) = v90;
            v97 = v8[3];
            v103 = v8[1];
            if (v97 > v103)
            {
              v141 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *((_DWORD *)v8 + 4);
              *((_DWORD *)v8 + 4) = v141;
              goto LABEL_163;
            }
          }
        }
        else
        {
          v93 = *(_DWORD *)v8;
          if (v92 <= v90)
          {
            *(_DWORD *)v8 = *((_DWORD *)v8 + 4);
            *((_DWORD *)v8 + 4) = v93;
            v8[1] = v90;
            v8[3] = v91;
            v149 = *(a2 - 1);
            if (v149 <= v91)
              return result;
            *((_DWORD *)v8 + 4) = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v93;
            v8[3] = v149;
          }
          else
          {
            *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v93;
            v8[1] = v92;
          }
          *(a2 - 1) = v91;
        }
        return result;
      case 4:
        return sub_2399C9B80(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_2399C9B80(v8, v8 + 2, v8 + 4, v8 + 6);
        v94 = *(a2 - 1);
        v95 = v8[7];
        if (v94 > v95)
        {
          v96 = *((_DWORD *)v8 + 12);
          *((_DWORD *)v8 + 12) = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v96;
          v8[7] = v94;
          *(a2 - 1) = v95;
          v97 = v8[7];
          v98 = v8[5];
          if (v97 > v98)
          {
            v99 = *((_DWORD *)v8 + 8);
            v100 = *((_DWORD *)v8 + 12);
            *((_DWORD *)v8 + 8) = v100;
            *((_DWORD *)v8 + 12) = v99;
            v8[5] = v97;
            v8[7] = v98;
            v101 = v8[3];
            if (v97 > v101)
            {
              v102 = *((_DWORD *)v8 + 4);
              *((_DWORD *)v8 + 4) = v100;
              *((_DWORD *)v8 + 8) = v102;
              v8[3] = v97;
              v8[5] = v101;
              v103 = v8[1];
              if (v97 > v103)
              {
                v104 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v100;
                *((_DWORD *)v8 + 4) = v104;
LABEL_163:
                v8[1] = v97;
                v8[3] = v103;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v105 = v8 + 2;
          v107 = v8 == a2 || v105 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v107)
            {
              v108 = 0;
              v109 = v8;
              do
              {
                v111 = v109[3];
                v112 = v109[1];
                v109 = v105;
                if (v111 > v112)
                {
                  v113 = *(_DWORD *)v105;
                  v114 = v108;
                  do
                  {
                    v115 = (char *)v8 + v114;
                    *((_DWORD *)v115 + 4) = *(_DWORD *)((char *)v8 + v114);
                    *((double *)v115 + 3) = *(double *)((char *)v8 + v114 + 8);
                    if (!v114)
                    {
                      v110 = (uint64_t)v8;
                      goto LABEL_122;
                    }
                    v114 -= 16;
                  }
                  while (v111 > *((double *)v115 - 1));
                  v110 = (uint64_t)v8 + v114 + 16;
LABEL_122:
                  *(_DWORD *)v110 = v113;
                  *(double *)(v110 + 8) = v111;
                }
                v105 = v109 + 2;
                v108 += 16;
              }
              while (v109 + 2 != a2);
            }
          }
          else if (!v107)
          {
            v142 = v8 + 3;
            do
            {
              v143 = v7[3];
              v144 = v7[1];
              v7 = v105;
              if (v143 > v144)
              {
                v145 = *(_DWORD *)v105;
                v146 = v142;
                do
                {
                  v147 = v146;
                  *((_DWORD *)v146 - 2) = *((_DWORD *)v146 - 6);
                  v148 = *((_QWORD *)v146 - 2);
                  v146 -= 2;
                  *(_QWORD *)v147 = v148;
                }
                while (v143 > *(v147 - 4));
                *((_DWORD *)v146 - 2) = v145;
                *v146 = v143;
              }
              v105 = v7 + 2;
              v142 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 == a2)
            return result;
          v116 = (unint64_t)(v10 - 2) >> 1;
          v117 = v116;
          do
          {
            if (v116 >= v117)
            {
              v119 = (2 * v117) | 1;
              v120 = &v8[2 * v119];
              if (2 * v117 + 2 < v10 && v120[1] > v120[3])
              {
                v120 += 2;
                v119 = 2 * v117 + 2;
              }
              v121 = &v8[2 * v117];
              v122 = v121[1];
              if (v120[1] <= v122)
              {
                v123 = *(_DWORD *)v121;
                do
                {
                  v124 = v121;
                  v121 = v120;
                  *(_DWORD *)v124 = *(_DWORD *)v120;
                  v124[1] = v120[1];
                  if (v116 < v119)
                    break;
                  v125 = 2 * v119;
                  v119 = (2 * v119) | 1;
                  v120 = &v8[2 * v119];
                  v126 = v125 + 2;
                  if (v126 < v10 && v120[1] > v120[3])
                  {
                    v120 += 2;
                    v119 = v126;
                  }
                }
                while (v120[1] <= v122);
                *(_DWORD *)v121 = v123;
                v121[1] = v122;
              }
            }
            v118 = v117-- <= 0;
          }
          while (!v118);
          v127 = (unint64_t)v9 >> 4;
          while (2)
          {
            v128 = 0;
            v129 = *(_DWORD *)v8;
            v130 = v8[1];
            v131 = v8;
            do
            {
              v132 = v131;
              v131 += 2 * v128 + 2;
              v133 = 2 * v128;
              v128 = (2 * v128) | 1;
              v134 = v133 + 2;
              if (v134 < v127 && v131[1] > v131[3])
              {
                v131 += 2;
                v128 = v134;
              }
              *(_DWORD *)v132 = *(_DWORD *)v131;
              v132[1] = v131[1];
            }
            while (v128 <= (uint64_t)((unint64_t)(v127 - 2) >> 1));
            if (v131 != a2 - 2)
            {
              *(_DWORD *)v131 = *((_DWORD *)a2 - 4);
              v131[1] = *(a2 - 1);
              *((_DWORD *)a2 - 4) = v129;
              *(a2 - 1) = v130;
              v135 = (char *)v131 - (char *)v8 + 16;
              if (v135 >= 17)
              {
                v136 = (((unint64_t)v135 >> 4) - 2) >> 1;
                v137 = &v8[2 * v136];
                v130 = v131[1];
                if (v137[1] > v130)
                {
                  v138 = *(_DWORD *)v131;
                  do
                  {
                    v139 = v131;
                    v131 = v137;
                    *(_DWORD *)v139 = *(_DWORD *)v137;
                    v139[1] = v137[1];
                    if (!v136)
                      break;
                    v136 = (v136 - 1) >> 1;
                    v137 = &v8[2 * v136];
                  }
                  while (v137[1] > v130);
                  *(_DWORD *)v131 = v138;
LABEL_146:
                  v131[1] = v130;
                }
              }
              a2 -= 2;
              v118 = v127-- <= 2;
              if (v118)
                return result;
              continue;
            }
            break;
          }
          *(_DWORD *)v131 = v129;
          goto LABEL_146;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        v13 = *(a2 - 1);
        if ((unint64_t)v9 < 0x801)
        {
          v17 = v8[1];
          v18 = v12[1];
          if (v17 <= v18)
          {
            if (v13 > v17)
            {
              v24 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
              *((_DWORD *)a2 - 4) = v24;
              v8[1] = v13;
              *(a2 - 1) = v17;
              v25 = v8[1];
              v26 = v12[1];
              if (v25 > v26)
              {
                v27 = *(_DWORD *)v12;
                *(_DWORD *)v12 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v27;
                v12[1] = v25;
                v8[1] = v26;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_33;
                goto LABEL_57;
              }
            }
          }
          else
          {
            v19 = *(_DWORD *)v12;
            if (v13 <= v17)
            {
              *(_DWORD *)v12 = *(_DWORD *)v8;
              *(_DWORD *)v8 = v19;
              v12[1] = v17;
              v8[1] = v18;
              v39 = *(a2 - 1);
              if (v39 <= v18)
                goto LABEL_32;
              *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
              *((_DWORD *)a2 - 4) = v19;
              v8[1] = v39;
            }
            else
            {
              *(_DWORD *)v12 = *((_DWORD *)a2 - 4);
              *((_DWORD *)a2 - 4) = v19;
              v12[1] = v13;
            }
            *(a2 - 1) = v18;
          }
LABEL_32:
          --a3;
          if ((a4 & 1) != 0)
            goto LABEL_33;
LABEL_57:
          v41 = v8[1];
          v40 = *(_DWORD *)v8;
          if (*(v8 - 1) > v41)
            goto LABEL_58;
          if (v41 <= *(a2 - 1))
          {
            v78 = v8 + 2;
            do
            {
              v8 = v78;
              if (v78 >= a2)
                break;
              v79 = v78[1];
              v78 += 2;
            }
            while (v41 <= v79);
          }
          else
          {
            v76 = v8;
            do
            {
              v8 = v76 + 2;
              v77 = v76[3];
              v76 += 2;
            }
            while (v41 <= v77);
          }
          v80 = a2;
          if (v8 < a2)
          {
            v81 = a2;
            do
            {
              v80 = v81 - 2;
              v82 = *(v81 - 1);
              v81 -= 2;
            }
            while (v41 > v82);
          }
          while (v8 < v80)
          {
            v83 = *(_DWORD *)v8;
            *(_DWORD *)v8 = *(_DWORD *)v80;
            *(_DWORD *)v80 = v83;
            v84 = *((_QWORD *)v8 + 1);
            v8[1] = v80[1];
            *((_QWORD *)v80 + 1) = v84;
            do
            {
              v85 = v8[3];
              v8 += 2;
            }
            while (v41 <= v85);
            do
            {
              v86 = *(v80 - 1);
              v80 -= 2;
            }
            while (v41 > v86);
          }
          if (v8 - 2 != v7)
          {
            *(_DWORD *)v7 = *((_DWORD *)v8 - 4);
            v7[1] = *(v8 - 1);
          }
          a4 = 0;
          *((_DWORD *)v8 - 4) = v40;
          *(v8 - 1) = v41;
          continue;
        }
        v14 = v12[1];
        v15 = v8[1];
        if (v14 <= v15)
        {
          if (v13 > v14)
          {
            v20 = *(_DWORD *)v12;
            *(_DWORD *)v12 = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v20;
            v12[1] = v13;
            *(a2 - 1) = v14;
            v21 = v12[1];
            v22 = v8[1];
            if (v21 > v22)
            {
              v23 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)v12;
              *(_DWORD *)v12 = v23;
              v8[1] = v21;
              v12[1] = v22;
            }
          }
        }
        else
        {
          v16 = *(_DWORD *)v8;
          if (v13 > v14)
          {
            *(_DWORD *)v8 = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v16;
            v8[1] = v13;
            goto LABEL_22;
          }
          *(_DWORD *)v8 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v16;
          v8[1] = v14;
          v12[1] = v15;
          v28 = *(a2 - 1);
          if (v28 > v15)
          {
            *(_DWORD *)v12 = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v16;
            v12[1] = v28;
LABEL_22:
            *(a2 - 1) = v15;
          }
        }
        v29 = &v8[2 * v11];
        v30 = v29 - 2;
        v31 = *(v29 - 1);
        v32 = v8[3];
        v33 = *(a2 - 3);
        if (v31 <= v32)
        {
          if (v33 > v31)
          {
            v35 = *(_DWORD *)v30;
            *(_DWORD *)v30 = *((_DWORD *)a2 - 8);
            *((_DWORD *)a2 - 8) = v35;
            v30[1] = v33;
            *(a2 - 3) = v31;
            v36 = v30[1];
            v37 = v8[3];
            if (v36 > v37)
            {
              v38 = *((_DWORD *)v8 + 4);
              *((_DWORD *)v8 + 4) = *(_DWORD *)v30;
              *(_DWORD *)v30 = v38;
              v8[3] = v36;
              v30[1] = v37;
            }
          }
        }
        else
        {
          v34 = *((_DWORD *)v8 + 4);
          if (v33 > v31)
          {
            *((_DWORD *)v8 + 4) = *((_DWORD *)a2 - 8);
            *((_DWORD *)a2 - 8) = v34;
            v8[3] = v33;
            goto LABEL_36;
          }
          *((_DWORD *)v8 + 4) = *(_DWORD *)v30;
          *(_DWORD *)v30 = v34;
          v8[3] = v31;
          v30[1] = v32;
          v42 = *(a2 - 3);
          if (v42 > v32)
          {
            *(_DWORD *)v30 = *((_DWORD *)a2 - 8);
            *((_DWORD *)a2 - 8) = v34;
            v30[1] = v42;
LABEL_36:
            *(a2 - 3) = v32;
          }
        }
        v43 = &v8[2 * v11];
        v44 = v43 + 2;
        v45 = v43[3];
        v46 = v8[5];
        v47 = *(a2 - 5);
        if (v45 <= v46)
        {
          if (v47 > v45)
          {
            v49 = *(_DWORD *)v44;
            *(_DWORD *)v44 = *((_DWORD *)a2 - 12);
            *((_DWORD *)a2 - 12) = v49;
            v44[1] = v47;
            *(a2 - 5) = v45;
            v50 = v44[1];
            v51 = v8[5];
            if (v50 > v51)
            {
              v52 = *((_DWORD *)v8 + 8);
              *((_DWORD *)v8 + 8) = *(_DWORD *)v44;
              *(_DWORD *)v44 = v52;
              v8[5] = v50;
              v44[1] = v51;
            }
          }
        }
        else
        {
          v48 = *((_DWORD *)v8 + 8);
          if (v47 > v45)
          {
            *((_DWORD *)v8 + 8) = *((_DWORD *)a2 - 12);
            *((_DWORD *)a2 - 12) = v48;
            v8[5] = v47;
            goto LABEL_45;
          }
          *((_DWORD *)v8 + 8) = *(_DWORD *)v44;
          *(_DWORD *)v44 = v48;
          v8[5] = v45;
          v44[1] = v46;
          v53 = *(a2 - 5);
          if (v53 > v46)
          {
            *(_DWORD *)v44 = *((_DWORD *)a2 - 12);
            *((_DWORD *)a2 - 12) = v48;
            v44[1] = v53;
LABEL_45:
            *(a2 - 5) = v46;
          }
        }
        v54 = v12[1];
        v55 = v30[1];
        v56 = v44[1];
        if (v54 <= v55)
        {
          v57 = *(_DWORD *)v12;
          if (v56 <= v54)
          {
            v55 = v12[1];
          }
          else
          {
            v58 = *(_DWORD *)v44;
            *(_DWORD *)v12 = *(_DWORD *)v44;
            *(_DWORD *)v44 = v57;
            v12[1] = v56;
            v44[1] = v54;
            if (v56 <= v55)
            {
              v55 = v56;
              v57 = v58;
            }
            else
            {
              v57 = *(_DWORD *)v30;
              *(_DWORD *)v30 = v58;
              *(_DWORD *)v12 = v57;
              v30[1] = v56;
              v12[1] = v55;
            }
          }
        }
        else
        {
          v57 = *(_DWORD *)v30;
          if (v56 <= v54)
          {
            *(_DWORD *)v30 = *(_DWORD *)v12;
            *(_DWORD *)v12 = v57;
            v30[1] = v54;
            v12[1] = v55;
            if (v56 > v55)
            {
              v59 = *(_DWORD *)v44;
              *(_DWORD *)v12 = *(_DWORD *)v44;
              *(_DWORD *)v44 = v57;
              v12[1] = v56;
              v44[1] = v55;
              v55 = v56;
              v57 = v59;
            }
          }
          else
          {
            *(_DWORD *)v30 = *(_DWORD *)v44;
            *(_DWORD *)v44 = v57;
            v30[1] = v56;
            v44[1] = v55;
            v57 = *(_DWORD *)v12;
            v55 = v54;
          }
        }
        v60 = *(_DWORD *)v8;
        *(_DWORD *)v8 = v57;
        *(_DWORD *)v12 = v60;
        v61 = v8[1];
        v8[1] = v55;
        v8[2 * v11 + 1] = v61;
        --a3;
        if ((a4 & 1) == 0)
          goto LABEL_57;
LABEL_33:
        v40 = *(_DWORD *)v8;
        v41 = v8[1];
LABEL_58:
        v62 = 0;
        do
        {
          v63 = v8[v62 + 3];
          v62 += 2;
        }
        while (v63 > v41);
        v64 = &v8[v62];
        v65 = a2;
        if (v62 == 2)
        {
          v68 = a2;
          while (v64 < v68)
          {
            v66 = v68 - 2;
            v69 = *(v68 - 1);
            v68 -= 2;
            if (v69 > v41)
              goto LABEL_66;
          }
          v66 = v68;
          v8 = v64;
        }
        else
        {
          do
          {
            v66 = v65 - 2;
            v67 = *(v65 - 1);
            v65 -= 2;
          }
          while (v67 <= v41);
LABEL_66:
          v8 = v64;
          if (v64 < v66)
          {
            v70 = (unint64_t)v66;
            do
            {
              v71 = *(_DWORD *)v8;
              *(_DWORD *)v8 = *(_DWORD *)v70;
              *(_DWORD *)v70 = v71;
              v72 = *((_QWORD *)v8 + 1);
              v8[1] = *(double *)(v70 + 8);
              *(_QWORD *)(v70 + 8) = v72;
              do
              {
                v73 = v8[3];
                v8 += 2;
              }
              while (v73 > v41);
              do
              {
                v74 = *(double *)(v70 - 8);
                v70 -= 16;
              }
              while (v74 <= v41);
            }
            while ((unint64_t)v8 < v70);
          }
        }
        if (v8 - 2 != v7)
        {
          *(_DWORD *)v7 = *((_DWORD *)v8 - 4);
          v7[1] = *(v8 - 1);
        }
        *((_DWORD *)v8 - 4) = v40;
        *(v8 - 1) = v41;
        if (v64 < v66)
        {
LABEL_77:
          result = (double *)sub_2399CB0A0(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v75 = sub_2399CBC4C(v7, v8 - 2);
        result = (double *)sub_2399CBC4C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v75)
            continue;
          goto LABEL_77;
        }
        a2 = v8 - 2;
        if (!v75)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_2399CBC4C(double *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double v6;
  double v7;
  int v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double *v14;
  double v15;
  double v16;
  int v17;
  double *v18;
  double v19;
  double v20;
  int v21;
  double v22;
  double v23;
  int v24;
  int v25;
  double v26;
  int v27;
  double v28;
  int v29;
  int v30;
  double v31;
  double v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  double *v38;
  uint64_t v39;
  int v40;
  double *v41;
  double v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *((_DWORD *)a2 - 4);
        *((_DWORD *)a2 - 4) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      v9 = a1[3];
      v10 = a1[1];
      v11 = *(a2 - 1);
      if (v9 <= v10)
      {
        if (v11 > v9)
        {
          v30 = *((_DWORD *)a1 + 4);
          *((_DWORD *)a1 + 4) = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v30;
          a1[3] = v11;
          *(a2 - 1) = v9;
          v31 = a1[3];
          v32 = a1[1];
          if (v31 > v32)
          {
            v33 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *((_DWORD *)a1 + 4);
            *((_DWORD *)a1 + 4) = v33;
            a1[1] = v31;
            a1[3] = v32;
          }
        }
      }
      else
      {
        v12 = *(_DWORD *)a1;
        if (v11 <= v9)
        {
          *(_DWORD *)a1 = *((_DWORD *)a1 + 4);
          *((_DWORD *)a1 + 4) = v12;
          a1[1] = v9;
          a1[3] = v10;
          v37 = *(a2 - 1);
          if (v37 > v10)
          {
            *((_DWORD *)a1 + 4) = *((_DWORD *)a2 - 4);
            *((_DWORD *)a2 - 4) = v12;
            a1[3] = v37;
            *(a2 - 1) = v10;
          }
        }
        else
        {
          *(_DWORD *)a1 = *((_DWORD *)a2 - 4);
          *((_DWORD *)a2 - 4) = v12;
          a1[1] = v11;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 4:
      sub_2399C9B80(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_2399C9B80(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 <= v20)
        return 1;
      v21 = *((_DWORD *)a1 + 12);
      *((_DWORD *)a1 + 12) = *((_DWORD *)a2 - 4);
      *((_DWORD *)a2 - 4) = v21;
      a1[7] = v19;
      *(a2 - 1) = v20;
      v22 = a1[7];
      v23 = a1[5];
      if (v22 <= v23)
        return 1;
      v24 = *((_DWORD *)a1 + 8);
      v25 = *((_DWORD *)a1 + 12);
      *((_DWORD *)a1 + 8) = v25;
      *((_DWORD *)a1 + 12) = v24;
      a1[5] = v22;
      a1[7] = v23;
      v26 = a1[3];
      if (v22 <= v26)
        return 1;
      v27 = *((_DWORD *)a1 + 4);
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a1 + 8) = v27;
      a1[3] = v22;
      a1[5] = v26;
      v28 = a1[1];
      if (v22 <= v28)
        return 1;
      v29 = *(_DWORD *)a1;
      *(_DWORD *)a1 = v25;
      *((_DWORD *)a1 + 4) = v29;
      a1[1] = v22;
      a1[3] = v28;
      return 1;
    default:
      v13 = a1[1];
      v14 = a1 + 3;
      v15 = a1[3];
      v16 = a1[5];
      if (v15 > v13)
      {
        v17 = *(_DWORD *)a1;
        if (v16 <= v15)
        {
          *(_DWORD *)a1 = *((_DWORD *)a1 + 4);
          *((_DWORD *)a1 + 4) = v17;
          a1[1] = v15;
          a1[3] = v13;
          if (v16 <= v13)
            goto LABEL_30;
          *((_DWORD *)a1 + 4) = *((_DWORD *)a1 + 8);
          *((_DWORD *)a1 + 8) = v17;
          v18 = a1 + 3;
        }
        else
        {
          *(_DWORD *)a1 = *((_DWORD *)a1 + 8);
          *((_DWORD *)a1 + 8) = v17;
          v18 = a1 + 1;
        }
        v14 = a1 + 5;
        goto LABEL_29;
      }
      if (v16 > v15)
      {
        v34 = *((_DWORD *)a1 + 4);
        v35 = *((_DWORD *)a1 + 8);
        *((_DWORD *)a1 + 4) = v35;
        *((_DWORD *)a1 + 8) = v34;
        a1[3] = v16;
        a1[5] = v15;
        if (v16 > v13)
        {
          v36 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v35;
          *((_DWORD *)a1 + 4) = v36;
          v18 = a1 + 1;
LABEL_29:
          *v18 = v16;
          *v14 = v13;
        }
      }
LABEL_30:
      v38 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v39 = 0;
      v40 = 0;
      v41 = a1 + 4;
      while (1)
      {
        v42 = v38[1];
        if (v42 > v41[1])
          break;
LABEL_39:
        v41 = v38;
        v39 += 16;
        v38 += 2;
        if (v38 == a2)
          return 1;
      }
      v43 = *(_DWORD *)v38;
      v44 = v39;
      do
      {
        v45 = (char *)a1 + v44;
        *((_DWORD *)v45 + 12) = *(_DWORD *)((char *)a1 + v44 + 32);
        *((double *)v45 + 7) = *(double *)((char *)a1 + v44 + 40);
        if (v44 == -32)
        {
          *(_DWORD *)a1 = v43;
          a1[1] = v42;
          if (++v40 != 8)
            goto LABEL_39;
          return v38 + 2 == a2;
        }
        v44 -= 16;
      }
      while (v42 > *((double *)v45 + 3));
      v46 = (char *)a1 + v44;
      *((_DWORD *)v46 + 12) = v43;
      *((double *)v46 + 7) = v42;
      if (++v40 != 8)
        goto LABEL_39;
      return v38 + 2 == a2;
  }
}

void sub_2399CBFF8()
{
  JUMPOUT(0x23B83E31CLL);
}

__n128 sub_2399CC00C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_250AF12E8;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2399CC06C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_250AF12E8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void sub_2399CC0B4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  int *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int v7;
  void *v8;
  __n128 v9;
  uint64_t v10;
  unsigned int *v11;
  signed int v12;
  unsigned int v13;
  const double *v14;
  float32x2_t v15;
  float64x2_t v16;
  uint32x2_t v17;
  int v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int *v35;
  int v36;
  uint64_t v41;
  unsigned int v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  float *v59;
  float *v60;
  float *v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  float v78;
  float v79;
  float v81;
  float v82;
  float v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  unsigned int v88;
  unsigned int v89;
  float v90;
  float v91;
  float v92;
  float v93;
  unsigned int v94;
  float v95;
  unsigned int v96;
  unsigned int v97;
  float v98;
  float v99;
  float v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  float v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  unsigned int v118;
  float v119;
  double v120;
  unsigned int v121;
  uint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x4_t v126;
  int32x4_t v127;
  uint64x2_t v128;
  float64x2_t v129;
  float32x4_t v130;
  int16x4_t v131;
  float v132;
  char **v133;
  uint64_t v134;
  int32x2_t v135;
  int32x2_t v136;
  int32x2_t v137;
  int32x2_t v138;
  int32x2_t v139;
  int32x2_t v140;
  int32x2_t v141;
  int32x2_t v142;
  int32x2_t v143;
  unsigned int *v144;
  uint64_t v145;
  uint64_t v146;
  float *v147;
  unsigned int v148;
  unsigned int v149;
  unint64_t v150;
  float *v151;
  float *v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  float v169;
  float v170;
  float v172;
  float v173;
  float v174;
  unsigned int v175;
  float v176;
  float v177;
  float v178;
  unsigned int v179;
  unsigned int v180;
  float v181;
  float v182;
  float v183;
  float v184;
  unsigned int v185;
  float v186;
  unsigned int v187;
  unsigned int v188;
  float v189;
  float v190;
  float v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  float v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  uint64_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  unsigned int v209;
  float v210;
  double v211;
  unsigned int v212;
  uint64_t v213;
  float32x4_t v214;
  float32x4_t v215;
  int32x4_t v216;
  float32x4_t v217;
  int32x4_t v218;
  uint64x2_t v219;
  float64x2_t v220;
  float32x4_t v221;
  int16x4_t v222;
  float v223;
  uint64_t v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  int v229;
  int v230;
  uint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  int v236;
  uint64_t v237;
  unsigned int v238;
  int v239;
  int v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  int v247;
  int v248;
  int v249;
  uint64_t v250;
  int v251;
  int v252;
  int v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t shared_weak_owners;
  int shared_owners_high;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  unsigned int v268;
  uint64_t v269;
  const double *v270;
  int64x2_t v271;
  float64x2_t v272;
  int32x2_t v273;
  float64x2_t v274;
  uint64_t v275;
  int8x16_t v276;
  int64x2_t v277;
  unsigned int *v278;
  float v279;
  double v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int16x8_t v287;
  uint64_t v288;
  unsigned int **v289;
  unsigned int *v290;
  unsigned int *v291;
  uint64_t v292;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  unsigned int *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int16x8_t *v301;
  unint64_t v302;
  uint64_t v303;
  _WORD *v304;
  std::__shared_weak_count *v305;
  unint64_t *p_shared_owners;
  unint64_t v307;
  unsigned int **v308;
  unsigned int **v309;
  unsigned int v310;
  unsigned int *v311;
  unint64_t v312;
  unsigned int *v313;
  int32x2_t v314;
  uint64_t v315;
  int32x4_t v316;
  int32x4_t v317;
  float64x2_t v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  __int128 v322;
  uint64_t v323;
  __int128 v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  std::__shared_weak_count *v328;
  std::__shared_weak_count *v329;

  v2 = a1;
  v3 = *a2;
  v4 = *(int **)(a1 + 16);
  v5 = (std::__shared_weak_count *)operator new(0x30uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_250AF12B0;
  LODWORD(v5[1].__vftable) = 0;
  v6 = v5 + 1;
  v7 = *v4;
  HIDWORD(v5[1].__vftable) = *v4;
  LODWORD(v5[1].__shared_owners_) = v7;
  HIDWORD(v5[1].__shared_owners_) = 1;
  v5[1].__shared_weak_owners_ = 0;
  v328 = v5 + 1;
  v329 = v5;
  v8 = (void *)operator new[]();
  v5[1].__shared_weak_owners_ = (uint64_t)v8;
  bzero(v8, (LODWORD(v5[1].__shared_owners_) * HIDWORD(v5[1].__vftable) * HIDWORD(v5[1].__shared_owners_)));
  v10 = **(_QWORD **)(v2 + 8) + 24 * v3;
  v11 = *(unsigned int **)v10;
  v311 = *(unsigned int **)(v10 + 8);
  if (*(unsigned int **)v10 != v311)
  {
    v308 = (unsigned int **)(v10 + 8);
    v309 = (unsigned int **)(**(_QWORD **)(v2 + 8) + 24 * v3);
    v310 = v3;
    v12 = 0;
    v13 = **(_DWORD **)(v2 + 16);
    v315 = v2;
    while (1)
    {
      *(_QWORD *)&v326 = 0;
      *((_QWORD *)&v326 + 1) = 0x100000000;
      v327 = 0;
      v324 = 0uLL;
      v325 = 0;
      v313 = v11;
      v14 = *(const double **)(v2 + 32);
      v15 = *(float32x2_t *)(**(_QWORD **)(v2 + 24) + 8 * *v11);
      HIDWORD(v324) = 1;
      v16 = vld1q_dup_f64(v14);
      v17 = vmax_u32((uint32x2_t)vmovn_s64((int64x2_t)vcvtq_u64_f64(vaddq_f64(v16, vcvtq_f64_f32(v15)))), (uint32x2_t)0x100000001);
      v18 = v17.i32[0];
      v314 = (int32x2_t)v17;
      v19 = v17.u32[1];
      v20 = (v17.i32[1] * v17.i32[0]);
      v21 = (void *)operator new[]();
      bzero(v21, v20);
      v22 = operator new[]();
      v31 = *v313;
      v32 = (v31 + 1);
      v33 = *(uint64_t **)(v315 + 40);
      v34 = *v33;
      if (v32 == (v33[1] - *v33) >> 2)
        v35 = *(unsigned int **)(v315 + 48);
      else
        v35 = (unsigned int *)(v34 + 4 * v32);
      v36 = **(_DWORD **)(v315 + 88);
      __asm { FMOV            V0.2D, #0.5 }
      v318 = _Q0;
      if (v36)
      {
        if (v36 == 2)
        {
          v133 = (char **)(**(_QWORD **)(v315 + 72) + 24 * v31);
          v134 = *(_QWORD *)(*(_QWORD *)(v315 + 64) + 40);
          v322 = 0uLL;
          v323 = 0;
          sub_2399C6130(v133, v134, (char **)&v322);
          v144 = (unsigned int *)v322;
          v145 = *((_QWORD *)&v322 + 1) - v322;
          if (*((_QWORD *)&v322 + 1) - (_QWORD)v322 >= 9uLL)
          {
            v312 = (v145 >> 2) - 2;
            if (v145 >> 2 != 2)
            {
              v146 = *(unsigned int *)(v322 + 4);
              v147 = (float *)(v134 + 8 * *(unsigned int *)v322);
              v148 = v18 - 1;
              v149 = v19 - 1;
              LODWORD(v150) = 1;
              while (1)
              {
                v151 = (float *)(v134 + 8 * v146);
                v150 = (v150 + 1);
                v146 = v144[v150];
                v152 = (float *)(v134 + 8 * v146);
                v136.i32[0] = *(__int32 *)v147;
                v153 = v147[1];
                v154 = fminf(*v147, 3.4028e38);
                v155 = fminf(v153, 3.4028e38);
                v156 = fmaxf(*v147, -3.4028e38);
                v157 = fmaxf(v153, -3.4028e38);
                v137.i32[0] = *(__int32 *)v151;
                v158 = v151[1];
                if (*v151 >= v154)
                  v159 = v154;
                else
                  v159 = *v151;
                if (v158 >= v155)
                  v160 = v155;
                else
                  v160 = v151[1];
                if (v156 < *(float *)v137.i32)
                  v156 = *v151;
                if (v157 < v158)
                  v157 = v151[1];
                v135.i32[0] = *(__int32 *)v152;
                v161 = v152[1];
                if (*v152 < v159)
                  v159 = *v152;
                if (v161 < v160)
                  v160 = v152[1];
                if (v156 < *(float *)v135.i32)
                  v156 = *v152;
                if (v157 < v161)
                  v157 = v152[1];
                *(float *)v140.i32 = v158 - v153;
                v162 = *(float *)v137.i32 - *(float *)v136.i32;
                v163 = vcvtms_u32_f32(v159);
                if (v163 >= v148)
                  v164 = v18 - 1;
                else
                  v164 = v163;
                v165 = vcvtps_u32_f32(v156);
                if (v165 >= v148)
                  v165 = v18 - 1;
                v166 = vcvtms_u32_f32(v160);
                if (v166 >= v149)
                  v167 = v19 - 1;
                else
                  v167 = v166;
                v168 = vcvtps_u32_f32(v157);
                if (v168 >= v149)
                  v168 = v19 - 1;
                *(float *)v139.i32 = v161 - v158;
                v169 = *(float *)v135.i32 - *(float *)v137.i32;
                *(float *)v138.i32 = v153 - v161;
                v170 = *(float *)v136.i32 - *(float *)v135.i32;
                if (v167 <= v168 && v165 >= v164)
                  break;
LABEL_155:
                v172 = fabsf(v162);
                v173 = fabsf(*(float *)v140.i32);
                if (v172 < v173)
                  v172 = v173;
                if (v172 >= 0.00001 && v172 > 0.0)
                {
                  v174 = v162 / v172;
                  v175 = 1;
                  v176 = v153;
                  v177 = *(float *)v136.i32;
                  v178 = *(float *)v140.i32 / v172;
                  do
                  {
                    v179 = vcvtms_u32_f32(v177);
                    v180 = vcvtms_u32_f32(v176);
                    if (v179 >= v148)
                      v179 = v18 - 1;
                    if (v180 >= v149)
                      v180 = v19 - 1;
                    *((_BYTE *)v21 + v179 + v180 * v18) = 1;
                    v177 = v174 + v177;
                    v176 = v178 + v176;
                    v181 = (float)v175++;
                  }
                  while (v172 > v181);
                }
                v182 = vabds_f32(*(float *)v135.i32, *(float *)v137.i32);
                v183 = vabds_f32(v161, v158);
                if (v182 < v183)
                  v182 = v183;
                if (v182 >= 0.00001 && v182 > 0.0)
                {
                  v184 = v169 / v182;
                  v185 = 1;
                  v186 = *(float *)v139.i32 / v182;
                  do
                  {
                    v187 = vcvtms_u32_f32(*(float *)v137.i32);
                    v188 = vcvtms_u32_f32(v158);
                    if (v187 >= v148)
                      v187 = v18 - 1;
                    if (v188 >= v149)
                      v188 = v19 - 1;
                    *((_BYTE *)v21 + v187 + v188 * v18) = 1;
                    *(float *)v137.i32 = v184 + *(float *)v137.i32;
                    v158 = v186 + v158;
                    v189 = (float)v185++;
                  }
                  while (v182 > v189);
                }
                v190 = vabds_f32(*(float *)v136.i32, *(float *)v135.i32);
                v191 = vabds_f32(v153, v161);
                if (v190 >= v191)
                  v191 = v190;
                if (v191 >= 0.00001 && v191 > 0.0)
                {
                  v192 = 1;
                  do
                  {
                    v193 = vcvtms_u32_f32(*(float *)v135.i32);
                    v194 = vcvtms_u32_f32(v161);
                    if (v193 >= v148)
                      v193 = v18 - 1;
                    if (v194 >= v149)
                      v194 = v19 - 1;
                    *((_BYTE *)v21 + v193 + v194 * v18) = 1;
                    *(float *)v135.i32 = (float)(v170 / v191) + *(float *)v135.i32;
                    v161 = (float)(*(float *)v138.i32 / v191) + v161;
                    v195 = (float)v192++;
                  }
                  while (v191 > v195);
                }
                if (v312 < v150)
                  goto LABEL_208;
              }
              v196 = 0;
              *(float *)v141.i32 = (float)((float)(*(float *)v135.i32 - *(float *)v136.i32) * *(float *)v140.i32)
                                 - (float)((float)(v161 - v153) * v162);
              v197 = v165 + 1;
              v198 = v165 - v164;
              v199 = v18 * v167;
              v200 = v18 * v167 + v164;
              v201 = (v198 + 1) & 0x1FFFFFFFCLL;
              v202 = (float32x4_t)vdupq_lane_s32(v137, 0);
              v203 = (float32x4_t)vdupq_lane_s32(v139, 0);
              v204 = (float32x4_t)vdupq_lane_s32(v141, 0);
              v205 = (float32x4_t)vdupq_lane_s32(v135, 0);
              v206 = (float32x4_t)vdupq_lane_s32(v138, 0);
              v317 = vaddq_s32(vdupq_n_s32(v164), (int32x4_t)xmmword_239EC6870);
              v207 = (float32x4_t)vdupq_lane_s32(v136, 0);
              v208 = (float32x4_t)vdupq_lane_s32(v140, 0);
              v209 = v200;
              while (1)
              {
                v211 = (double)v167 + 0.5;
                v210 = v211;
                *(float *)&v211 = -(float)((float)(v210 - v158) * v169);
                *(float *)v142.i32 = -(float)((float)(v210 - v161) * v170);
                *(float *)v143.i32 = -(float)((float)(v210 - v153) * v162);
                v212 = v164;
                if (v198 >= 3)
                {
                  v212 = v164;
                  if (!__CFADD__(v200 + v18 * v196, (_DWORD)v198))
                    break;
                }
                do
                {
LABEL_204:
                  v223 = (double)v212 + 0.5;
                  if ((float)((float)(*(float *)&v211 + (float)((float)(v223 - *(float *)v137.i32) * *(float *)v139.i32))
                             / *(float *)v141.i32) >= 0.0
                    && (float)((float)(*(float *)v142.i32
                                     + (float)((float)(v223 - *(float *)v135.i32) * *(float *)v138.i32))
                             / *(float *)v141.i32) >= 0.0
                    && (float)((float)(*(float *)v143.i32
                                     + (float)((float)(v223 - *(float *)v136.i32) * *(float *)v140.i32))
                             / *(float *)v141.i32) >= 0.0)
                  {
                    *((_BYTE *)v21 + v199 + v212) = 1;
                  }
                  ++v212;
                }
                while (v197 != v212);
LABEL_187:
                ++v196;
                v209 += v18;
                v199 += v18;
                _ZF = v167++ == v168;
                if (_ZF)
                  goto LABEL_155;
              }
              v213 = 0;
              v214 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v211, 0);
              v215 = (float32x4_t)vdupq_lane_s32(v142, 0);
              v216 = v317;
              v217 = (float32x4_t)vdupq_lane_s32(v143, 0);
              while (2)
              {
                v219.i64[0] = v216.u32[0];
                v219.i64[1] = v216.u32[1];
                v220 = vcvtq_f64_u64(v219);
                v219.i64[0] = v216.u32[2];
                v219.i64[1] = v216.u32[3];
                v221 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v220, v318)), vaddq_f64(vcvtq_f64_u64(v219), v318));
                v222 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgezq_f32(vdivq_f32(vmlaq_f32(v214, v203, vsubq_f32(v221, v202)), v204)), (int8x16_t)vcgezq_f32(vdivq_f32(vmlaq_f32(v215, v206, vsubq_f32(v221, v205)), v204))), (int8x16_t)vcgezq_f32(vdivq_f32(vmlaq_f32(v217, v208, vsubq_f32(v221, v207)), v204))));
                if ((v222.i8[0] & 1) != 0)
                {
                  *((_BYTE *)v21 + v209 + v213) = 1;
                  if ((v222.i8[2] & 1) == 0)
                    goto LABEL_194;
LABEL_198:
                  *((_BYTE *)v21 + v209 + v213 + 1) = 1;
                  if ((v222.i8[4] & 1) == 0)
                    goto LABEL_199;
LABEL_195:
                  *((_BYTE *)v21 + v209 + v213 + 2) = 1;
                  if ((v222.i8[6] & 1) != 0)
                    goto LABEL_200;
                }
                else
                {
                  if ((v222.i8[2] & 1) != 0)
                    goto LABEL_198;
LABEL_194:
                  if ((v222.i8[4] & 1) != 0)
                    goto LABEL_195;
LABEL_199:
                  if ((v222.i8[6] & 1) != 0)
LABEL_200:
                    *((_BYTE *)v21 + v209 + v213 + 3) = 1;
                }
                v213 += 4;
                v218.i64[0] = 0x400000004;
                v218.i64[1] = 0x400000004;
                v216 = vaddq_s32(v216, v218);
                if (v201 == v213)
                {
                  v212 = v201 + v164;
                  if (v198 + 1 == v201)
                    goto LABEL_187;
                  goto LABEL_204;
                }
                continue;
              }
            }
          }
LABEL_208:
          if (v144)
          {
            *((_QWORD *)&v322 + 1) = v144;
            operator delete(v144);
          }
        }
        else if (v36 == 1 && v18 != 1)
        {
          v41 = (v19 - 1);
          if ((_DWORD)v19 != 1)
          {
            v42 = 0;
            v43 = v41 - 1;
            if (v18 >= 0)
              v44 = v18;
            else
              v44 = -v18;
            v45 = v43 * (unint64_t)v44;
            do
            {
              if (v19 >= 3)
              {
                v46 = 0;
                v49 = v45 > (v42 ^ (~v18 >> 31)) || (v45 & 0xFFFFFFFF00000000) != 0;
                if (!v49 && !HIDWORD(v43))
                {
                  v50 = v42;
                  v51 = v41 & 0xFFFFFFFE;
                  do
                  {
                    *((_BYTE *)v21 + v50) = 1;
                    *((_BYTE *)v21 + v18 + v50) = 1;
                    v50 += 2 * v18;
                    v51 -= 2;
                  }
                  while (v51);
                  v46 = v41 & 0xFFFFFFFE;
                  if (v46 == v41)
                    goto LABEL_16;
                }
              }
              else
              {
                v46 = 0;
              }
              v47 = v41 - v46;
              v48 = v42 + v18 * v46;
              do
              {
                *((_BYTE *)v21 + v48) = 1;
                v48 += v18;
                --v47;
              }
              while (v47);
LABEL_16:
              ++v42;
            }
            while (v42 != v18 - 1);
          }
        }
      }
      else
      {
        v52 = *(unsigned int *)(v34 + 4 * v31);
        v53 = *v35;
        if (v52 < v53)
        {
          v54 = *(_QWORD *)(*(_QWORD *)(v315 + 56) + 40);
          v55 = *(_QWORD *)(*(_QWORD *)(v315 + 64) + 40);
          v56 = v18 - 1;
          v57 = v19 - 1;
          while (1)
          {
            v58 = (unsigned int *)(v54 + 12 * v52);
            v59 = (float *)(v55 + 8 * *v58);
            v60 = (float *)(v55 + 8 * v58[1]);
            v61 = (float *)(v55 + 8 * v58[2]);
            v23.i32[0] = *(__int32 *)v59;
            v62 = v59[1];
            v63 = fminf(*v59, 3.4028e38);
            v64 = fminf(v62, 3.4028e38);
            v65 = fmaxf(*v59, -3.4028e38);
            v66 = fmaxf(v62, -3.4028e38);
            v24.i32[0] = *(__int32 *)v60;
            v67 = v60[1];
            if (*v60 >= v63)
              v68 = v63;
            else
              v68 = *v60;
            if (v67 >= v64)
              v69 = v64;
            else
              v69 = v60[1];
            if (v65 < *(float *)v24.i32)
              v65 = *v60;
            if (v66 < v67)
              v66 = v60[1];
            *(float *)_Q0.f64 = *v61;
            v70 = v61[1];
            if (*v61 < v68)
              v68 = *v61;
            if (v70 < v69)
              v69 = v61[1];
            if (v65 < *(float *)_Q0.f64)
              v65 = *v61;
            if (v66 < v70)
              v66 = v61[1];
            *(float *)v27.i32 = v67 - v62;
            v71 = *(float *)v24.i32 - *(float *)v23.i32;
            v72 = vcvtms_u32_f32(v68);
            if (v72 >= v56)
              v72 = v18 - 1;
            v73 = vcvtps_u32_f32(v65);
            if (v73 >= v56)
              v74 = v18 - 1;
            else
              v74 = v73;
            v75 = vcvtms_u32_f32(v69);
            if (v75 >= v57)
              v76 = v19 - 1;
            else
              v76 = v75;
            v77 = vcvtps_u32_f32(v66);
            if (v77 >= v57)
              v77 = v19 - 1;
            *(float *)v26.i32 = v70 - v67;
            v78 = *(float *)_Q0.f64 - *(float *)v24.i32;
            *(float *)v25.i32 = v62 - v70;
            v79 = *(float *)v23.i32 - *(float *)_Q0.f64;
            if (v76 <= v77 && v74 >= v72)
              break;
LABEL_66:
            v81 = fabsf(v71);
            v82 = fabsf(*(float *)v27.i32);
            if (v81 < v82)
              v81 = v82;
            if (v81 >= 0.00001 && v81 > 0.0)
            {
              v83 = v71 / v81;
              v84 = 1;
              v85 = v62;
              v86 = *(float *)v23.i32;
              v87 = *(float *)v27.i32 / v81;
              do
              {
                v88 = vcvtms_u32_f32(v86);
                v89 = vcvtms_u32_f32(v85);
                if (v88 >= v56)
                  v88 = v18 - 1;
                if (v89 >= v57)
                  v89 = v19 - 1;
                *((_BYTE *)v21 + v88 + v89 * v18) = 1;
                v86 = v83 + v86;
                v85 = v87 + v85;
                v90 = (float)v84++;
              }
              while (v81 > v90);
            }
            v91 = vabds_f32(*(float *)_Q0.f64, *(float *)v24.i32);
            v92 = vabds_f32(v70, v67);
            if (v91 < v92)
              v91 = v92;
            if (v91 >= 0.00001 && v91 > 0.0)
            {
              v93 = v78 / v91;
              v94 = 1;
              v95 = *(float *)v26.i32 / v91;
              do
              {
                v96 = vcvtms_u32_f32(*(float *)v24.i32);
                v97 = vcvtms_u32_f32(v67);
                if (v96 >= v56)
                  v96 = v18 - 1;
                if (v97 >= v57)
                  v97 = v19 - 1;
                *((_BYTE *)v21 + v96 + v97 * v18) = 1;
                *(float *)v24.i32 = v93 + *(float *)v24.i32;
                v67 = v95 + v67;
                v98 = (float)v94++;
              }
              while (v91 > v98);
            }
            v99 = vabds_f32(*(float *)v23.i32, *(float *)_Q0.f64);
            v100 = vabds_f32(v62, v70);
            if (v99 >= v100)
              v100 = v99;
            if (v100 >= 0.00001 && v100 > 0.0)
            {
              v101 = 1;
              do
              {
                v102 = vcvtms_u32_f32(*(float *)_Q0.f64);
                v103 = vcvtms_u32_f32(v70);
                if (v102 >= v56)
                  v102 = v18 - 1;
                if (v103 >= v57)
                  v103 = v19 - 1;
                *((_BYTE *)v21 + v102 + v103 * v18) = 1;
                *(float *)_Q0.f64 = (float)(v79 / v100) + *(float *)_Q0.f64;
                v70 = (float)(*(float *)v25.i32 / v100) + v70;
                v104 = (float)v101++;
              }
              while (v100 > v104);
            }
            if (++v52 == v53)
              goto LABEL_210;
          }
          v105 = 0;
          *(float *)v28.i32 = (float)((float)(*(float *)_Q0.f64 - *(float *)v23.i32) * *(float *)v27.i32)
                            - (float)((float)(v70 - v62) * v71);
          v106 = v74 + 1;
          v107 = v74 - v72;
          v108 = v18 * v76;
          v109 = v18 * v76 + v72;
          v110 = (v107 + 1) & 0x1FFFFFFFCLL;
          v111 = (float32x4_t)vdupq_lane_s32(v24, 0);
          v112 = (float32x4_t)vdupq_lane_s32(v26, 0);
          v113 = (float32x4_t)vdupq_lane_s32(v28, 0);
          v114 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&_Q0.f64[0], 0);
          v115 = (float32x4_t)vdupq_lane_s32(v25, 0);
          v316 = vaddq_s32(vdupq_n_s32(v72), (int32x4_t)xmmword_239EC6870);
          v116 = (float32x4_t)vdupq_lane_s32(v23, 0);
          v117 = (float32x4_t)vdupq_lane_s32(v27, 0);
          v118 = v109;
          while (1)
          {
            v120 = (double)v76 + 0.5;
            v119 = v120;
            *(float *)&v120 = -(float)((float)(v119 - v67) * v78);
            *(float *)v29.i32 = -(float)((float)(v119 - v70) * v79);
            *(float *)v30.i32 = -(float)((float)(v119 - v62) * v71);
            v121 = v72;
            if (v107 >= 3)
            {
              v121 = v72;
              if (!__CFADD__(v109 + v18 * v105, (_DWORD)v107))
                break;
            }
            do
            {
LABEL_115:
              v132 = (double)v121 + 0.5;
              if ((float)((float)(*(float *)&v120 + (float)((float)(v132 - *(float *)v24.i32) * *(float *)v26.i32))
                         / *(float *)v28.i32) >= 0.0
                && (float)((float)(*(float *)v29.i32 + (float)((float)(v132 - *(float *)_Q0.f64) * *(float *)v25.i32))
                         / *(float *)v28.i32) >= 0.0
                && (float)((float)(*(float *)v30.i32 + (float)((float)(v132 - *(float *)v23.i32) * *(float *)v27.i32))
                         / *(float *)v28.i32) >= 0.0)
              {
                *((_BYTE *)v21 + v108 + v121) = 1;
              }
              ++v121;
            }
            while (v106 != v121);
LABEL_98:
            ++v105;
            v118 += v18;
            v108 += v18;
            _ZF = v76++ == v77;
            if (_ZF)
              goto LABEL_66;
          }
          v122 = 0;
          v123 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v120, 0);
          v124 = (float32x4_t)vdupq_lane_s32(v29, 0);
          v125 = v316;
          v126 = (float32x4_t)vdupq_lane_s32(v30, 0);
          while (2)
          {
            v128.i64[0] = v125.u32[0];
            v128.i64[1] = v125.u32[1];
            v129 = vcvtq_f64_u64(v128);
            v128.i64[0] = v125.u32[2];
            v128.i64[1] = v125.u32[3];
            v130 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v129, v318)), vaddq_f64(vcvtq_f64_u64(v128), v318));
            v131 = vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgezq_f32(vdivq_f32(vmlaq_f32(v123, v112, vsubq_f32(v130, v111)), v113)), (int8x16_t)vcgezq_f32(vdivq_f32(vmlaq_f32(v124, v115, vsubq_f32(v130, v114)), v113))), (int8x16_t)vcgezq_f32(vdivq_f32(vmlaq_f32(v126, v117, vsubq_f32(v130, v116)), v113))));
            if ((v131.i8[0] & 1) != 0)
            {
              *((_BYTE *)v21 + v118 + v122) = 1;
              if ((v131.i8[2] & 1) == 0)
                goto LABEL_105;
LABEL_109:
              *((_BYTE *)v21 + v118 + v122 + 1) = 1;
              if ((v131.i8[4] & 1) == 0)
                goto LABEL_110;
LABEL_106:
              *((_BYTE *)v21 + v118 + v122 + 2) = 1;
              if ((v131.i8[6] & 1) != 0)
                goto LABEL_111;
            }
            else
            {
              if ((v131.i8[2] & 1) != 0)
                goto LABEL_109;
LABEL_105:
              if ((v131.i8[4] & 1) != 0)
                goto LABEL_106;
LABEL_110:
              if ((v131.i8[6] & 1) != 0)
LABEL_111:
                *((_BYTE *)v21 + v118 + v122 + 3) = 1;
            }
            v122 += 4;
            v127.i64[0] = 0x400000004;
            v127.i64[1] = 0x400000004;
            v125 = vaddq_s32(v125, v127);
            if (v110 == v122)
            {
              v121 = v110 + v72;
              if (v107 + 1 == v110)
                goto LABEL_98;
              goto LABEL_115;
            }
            continue;
          }
        }
      }
LABEL_210:
      *(int32x2_t *)((char *)&v326 + 4) = v314;
      if (v327)
        MEMORY[0x23B83E2F8](v327, 0x1000C8077774924);
      v327 = operator new[]();
      *(int32x2_t *)((char *)&v324 + 4) = vrev64_s32(v314);
      v224 = operator new[]();
      v225 = 0;
      v226 = 0;
      v227 = 0;
      v325 = v224;
      v228 = v327;
      v229 = HIDWORD(v326);
      v230 = DWORD1(v326) * HIDWORD(v326);
      do
      {
        v231 = 0;
        v232 = v227;
        v233 = v225;
        do
        {
          *(_BYTE *)(v228 + v233) = *((_BYTE *)v21 + v232);
          *(_BYTE *)(v22 + (v226 + v231++)) = *((_BYTE *)v21 + v232);
          v233 += v230;
          v232 += v18;
        }
        while (v19 != v231);
        ++v227;
        v226 += v19;
        v225 += v229;
      }
      while (v227 != v18);
      sub_2399CD3A4((uint64_t)&v326, v21, (int)**(double **)(v315 + 32));
      v234 = 0;
      v235 = 0;
      v236 = 0;
      v237 = v327;
      v238 = DWORD1(v326);
      v239 = HIDWORD(v326);
      v240 = DWORD1(v326) * HIDWORD(v326);
      do
      {
        v241 = v234;
        v242 = v235;
        v243 = v19;
        do
        {
          *(_BYTE *)(v224 + v242++) = *(_BYTE *)(v237 + v241);
          v241 += v240;
          --v243;
        }
        while (v243);
        ++v236;
        v235 += v19;
        v234 += v239;
      }
      while (v236 != v18);
      v320 = 0;
      v321 = 0;
      v319 = 0;
      v322 = xmmword_239F03810;
      if ((sub_2399C5D98((uint64_t)v6, (uint64_t)&v326, (uint64_t)&v324, v12, v12, (unsigned int *)&v321 + 1, (signed int *)&v321, (_DWORD *)&v320 + 1, &v320, &v319, v13, (int *)&v322) & 1) == 0)
      {
        if (v18 <= v19)
          v244 = v19;
        else
          v244 = v18;
        do
        {
          v245 = v244 + v12 + 1;
          if (v245 >= v13)
          {
            if (v245 <= (float)((float)v13 * 1.1))
              v13 = (float)((float)v13 * 1.1);
            else
              v13 = v244 + v12 + 1;
            sub_2399C5B64(&v328, v13);
            v6 = v328;
          }
          v12 += v244;
        }
        while (!sub_2399C5D98((uint64_t)v6, (uint64_t)&v326, (uint64_t)&v324, v12, v12, (unsigned int *)&v321 + 1, (signed int *)&v321, (_DWORD *)&v320 + 1, &v320, &v319, v13, (int *)&v322));
        v238 = DWORD1(v326);
      }
      v246 = SHIDWORD(v321);
      v247 = v321;
      v248 = v320 + v321;
      if (v12 > (int)v320 + (int)v321)
        v248 = v12;
      if (v248 <= HIDWORD(v320) + HIDWORD(v321))
        v12 = HIDWORD(v320) + HIDWORD(v321);
      else
        v12 = v248;
      v249 = v319;
      if (v319)
        v250 = v19;
      else
        v250 = v238;
      v251 = DWORD2(v326);
      if (v319)
        v251 = v18;
      v2 = v315;
      if (v251 >= 1 && (int)v250 >= 1)
      {
        v252 = 0;
        v253 = 0;
        v254 = v321;
        do
        {
          if (v253 + v247 >= 0)
          {
            v255 = v327;
            if (v249)
              v255 = v224;
            v256 = HIDWORD(v326);
            if (v249)
              v256 = 1;
            if (v253 + v247 < v12)
            {
              shared_weak_owners = v6->__shared_weak_owners_;
              shared_owners_high = HIDWORD(v6->__shared_owners_);
              v259 = v256 * v252;
              v260 = shared_owners_high * (v246 + HIDWORD(v6->__vftable) * v254);
              v261 = v246;
              v262 = v250;
              do
              {
                if ((v261 & 0x8000000000000000) == 0 && v261 < v12 && *(_BYTE *)(v255 + v259))
                  *(_BYTE *)(shared_weak_owners + v260) = 1;
                v259 += v256;
                v260 += shared_owners_high;
                ++v261;
                --v262;
              }
              while (v262);
            }
          }
          ++v253;
          v252 += v250;
          ++v254;
        }
        while (v253 != v251);
      }
      v263 = *(_QWORD *)(**(_QWORD **)(v315 + 72) + 24 * *v313);
      v264 = *(_QWORD *)(**(_QWORD **)(v315 + 72) + 24 * *v313 + 8);
      v265 = v264 - v263;
      if (v264 != v263)
      {
        v266 = 0;
        v267 = v265 >> 2;
        v268 = v249 == 0;
        v269 = *(_QWORD *)(*(_QWORD *)(v315 + 64) + 40);
        v270 = *(const double **)(v315 + 32);
        v271.i64[0] = (int)v246;
        v271.i64[1] = v247;
        v272 = vcvtq_f64_s64(v271);
        v273 = vdup_n_s32(v268);
        v274 = vld1q_dup_f64(v270);
        do
        {
          v275 = 8 * *(unsigned int *)(v263 + 4 * v266);
          v276 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(v269 + v275));
          v277.i64[0] = v273.u32[0];
          v277.i64[1] = v273.u32[1];
          *(float32x2_t *)(v269 + v275) = vcvt_f32_f64(vsubq_f64(vaddq_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v277, 0x3FuLL)), v276, vextq_s8(v276, v276, 8uLL)), v272), v274));
          ++v266;
        }
        while (v267 > v266);
      }
      MEMORY[0x23B83E2F8](v224, 0x1000C8077774924);
      MEMORY[0x23B83E2F8](v22, 0x1000C8077774924);
      if (v327)
        MEMORY[0x23B83E2F8](v327, 0x1000C8077774924);
      MEMORY[0x23B83E2F8](v21, 0x1000C8077774924);
      v11 = v313 + 1;
      if (v313 + 1 == v311)
      {
        v278 = *v309;
        v11 = *v308;
        v279 = (float)v12;
        v3 = v310;
        goto LABEL_264;
      }
    }
  }
  v279 = 0.0;
  v278 = *(unsigned int **)v10;
LABEL_264:
  v280 = fabsf(v279);
  v9.n128_f32[0] = 1.0 / v279;
  if (v280 <= 0.00000001)
    v9.n128_f32[0] = 1.0;
  if (v278 != v11)
  {
    v281 = *(_QWORD *)(v2 + 64);
    v282 = **(_QWORD **)(v2 + 72);
    v283 = *(uint64_t **)(v2 + 40);
    v284 = *v283;
    v285 = (v283[1] - *v283) >> 2;
    v286 = *(_QWORD *)(v2 + 80);
    v287 = vdupq_n_s16(v3);
    do
    {
      v288 = *v278;
      v289 = (unsigned int **)(v282 + 24 * v288);
      v290 = *v289;
      v291 = v289[1];
      if (v290 != v291)
      {
        v292 = *(_QWORD *)(v281 + 40);
        do
        {
          v293 = *v290++;
          *(float32x2_t *)(v292 + 8 * v293) = vmul_n_f32(*(float32x2_t *)(v292 + 8 * v293), v9.n128_f32[0]);
        }
        while (v290 != v291);
      }
      v294 = *(unsigned int *)(v284 + 4 * v288);
      v295 = (v288 + 1);
      if (v285 == v295)
        v296 = *(unsigned int **)(v2 + 48);
      else
        v296 = (unsigned int *)(v284 + 4 * v295);
      v297 = *v296;
      if (v294 >= v297)
        goto LABEL_268;
      v298 = *(_QWORD *)(v286 + 40);
      v299 = v297 - v294;
      if ((unint64_t)(v297 - v294) >= 0x10)
      {
        v300 = (v299 & 0xFFFFFFFFFFFFFFF0) + v294;
        v301 = (int16x8_t *)(v298 + 2 * v294 + 16);
        v302 = v299 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v301[-1] = v287;
          *v301 = v287;
          v301 += 2;
          v302 -= 16;
        }
        while (v302);
        if (v299 == (v299 & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_268;
      }
      else
      {
        v300 = v294;
      }
      v303 = v297 - v300;
      v304 = (_WORD *)(v298 + 2 * v300);
      do
      {
        *v304++ = v3;
        --v303;
      }
      while (v303);
LABEL_268:
      ++v278;
    }
    while (v278 != v11);
  }
  v305 = v329;
  if (v329)
  {
    p_shared_owners = (unint64_t *)&v329->__shared_owners_;
    do
      v307 = __ldaxr(p_shared_owners);
    while (__stlxr(v307 - 1, p_shared_owners));
    if (!v307)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v305->__on_zero_shared)(v305, v9);
      std::__shared_weak_count::__release_weak(v305);
    }
  }
}

void sub_2399CD2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v35;

  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399CD3A4(uint64_t a1, const void *a2, int a3)
{
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  unint64_t v9;
  size_t v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  _OWORD *v50;
  uint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  _QWORD *v67;
  int v68;
  int64_t v69;
  char *v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _OWORD *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  unint64_t v88;
  __int128 *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  _BYTE *v94;
  unint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *__p;
  char *v100;
  void *v101;
  _BYTE *v102;
  char *v103;

  v5 = *(_DWORD *)(a1 + 4);
  v6 = (_BYTE *)operator new[]();
  v7 = v6;
  v8 = *(unsigned int *)(a1 + 4);
  v9 = *(unsigned int *)(a1 + 8);
  v90 = a1;
  v10 = (v9 * v8);
  v95 = v9;
  v96 = v8;
  if ((_DWORD)v10)
  {
    memcpy(v6, a2, v10);
    v9 = v95;
    v8 = v96;
  }
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v11 = (int)v9 < 1 || (int)v8 < 1;
  v94 = v7;
  v91 = v5;
  if (!v11)
  {
    v60 = 0;
    v61 = 0;
    do
    {
      v62 = 0;
      v63 = v5;
      v64 = v5 * v61;
      v98 = v61 << 32;
      v65 = v63 * (v61 - 1);
      v66 = v61 + 1;
      v93 = v63 * (v61 + 1);
      do
      {
        if (!v7[(v64 + v62)])
          goto LABEL_78;
        v68 = v62 - 1;
        if (v62)
        {
          if (!v61)
            goto LABEL_90;
          if (!v7[v65 + v68])
            goto LABEL_102;
        }
        else if (!v61)
        {
LABEL_90:
          v69 = v62 + 1;
          if (!v62)
            goto LABEL_92;
LABEL_91:
          if (!v7[v64 + v68])
            goto LABEL_102;
          goto LABEL_92;
        }
        if (!v7[(v65 + v62)])
          goto LABEL_102;
        v69 = v62 + 1;
        if (v62 + 1 < (unint64_t)v8 && !v7[(v65 + v69)])
          goto LABEL_102;
        if (v62)
          goto LABEL_91;
LABEL_92:
        if (v69 < v8 && !v7[(v64 + v69)]
          || v62 && v66 < v9 && !v7[v93 + v68]
          || v66 < v9 && !v7[(v93 + v62)]
          || v69 < v8 && v66 < v9 && !v7[(v93 + v69)])
        {
LABEL_102:
          if (v60 < v103)
          {
            *(_QWORD *)v60 = v98 | v62;
            v67 = v60 + 8;
          }
          else
          {
            v70 = (char *)v101;
            v71 = v60 - (_BYTE *)v101;
            v72 = (v60 - (_BYTE *)v101) >> 3;
            v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 61)
              sub_2394189F8();
            v74 = v103 - (_BYTE *)v101;
            if ((v103 - (_BYTE *)v101) >> 2 > v73)
              v73 = v74 >> 2;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
              v75 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v75 = v73;
            if (v75)
            {
              if (v75 >> 61)
                sub_239418A80();
              v76 = operator new(8 * v75);
            }
            else
            {
              v76 = 0;
            }
            v77 = (uint64_t *)&v76[8 * v72];
            *v77 = v98 | v62;
            v67 = v77 + 1;
            if (v60 != v70)
            {
              v78 = v60 - 8 - v70;
              if (v78 < 0x168)
              {
                v79 = v60;
                goto LABEL_116;
              }
              if (&v76[v71 - 8 - (v78 & 0xFFFFFFFFFFFFFFF8)] > &v76[v71 - 8])
              {
                v79 = v60;
                goto LABEL_116;
              }
              if (&v60[-(v78 & 0xFFFFFFFFFFFFFFF8) - 8] > v60 - 8)
              {
                v79 = v60;
                goto LABEL_116;
              }
              if ((unint64_t)(v60 - v76 - v71) < 0x20)
              {
                v79 = v60;
                goto LABEL_116;
              }
              v81 = (v78 >> 3) + 1;
              v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
              v79 = &v60[-v82];
              v77 = (uint64_t *)((char *)v77 - v82);
              v83 = &v76[8 * v72 - 16];
              v84 = v60 - 16;
              v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v86 = *(_OWORD *)v84;
                *(v83 - 1) = *((_OWORD *)v84 - 1);
                *v83 = v86;
                v83 -= 2;
                v84 -= 32;
                v85 -= 4;
              }
              while (v85);
              if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_116:
                  v80 = *((_QWORD *)v79 - 1);
                  v79 -= 8;
                  *--v77 = v80;
                }
                while (v79 != v70);
              }
              v60 = (char *)v101;
            }
            v101 = v77;
            v103 = &v76[8 * v75];
            v7 = v94;
            if (v60)
              operator delete(v60);
            v9 = v95;
            v8 = v96;
            v66 = v61 + 1;
          }
          v102 = v67;
          v60 = (char *)v67;
        }
LABEL_78:
        ++v62;
      }
      while (v62 != v8);
      v61 = v66;
      v5 = v91;
    }
    while (v66 != v9);
  }
  v12 = 0;
  __p = 0;
  v100 = 0;
  v13 = v90;
LABEL_10:
  v14 = v101;
  if (v101 != v102)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a3)
        goto LABEL_69;
      --a3;
    }
    v15 = 0;
    v16 = (v102 - (_BYTE *)v101) >> 3;
    if (v16 <= 1)
      v16 = 1;
    v88 = v16;
    v18 = v95;
    v17 = v96;
LABEL_18:
    v19 = 0;
    v92 = v15;
    v20 = (char *)v101 + 8 * v15;
    v21 = *(_QWORD *)(v13 + 16) + ((*v20 + *(_DWORD *)(v13 + 4) * v20[1]) * *(_DWORD *)(v13 + 12));
    v89 = (__int128 *)(v21 + 16);
    v97 = v21;
    while (1)
    {
      v23 = dword_239F0384C[v19];
      v24 = (v23 + *v20);
      if (v23 + *v20 < 0)
        goto LABEL_21;
      if ((int)v24 >= v17)
        goto LABEL_21;
      v25 = (dword_239F0386C[v19] + v20[1]);
      if ((v25 & 0x80000000) != 0)
        goto LABEL_21;
      if ((int)v25 >= v18)
        goto LABEL_21;
      v26 = (v24 + v25 * v5);
      if (v7[v26])
        goto LABEL_21;
      v7[v26] = 1;
      v27 = *(unsigned int *)(v13 + 12);
      if ((_DWORD)v27)
      {
        v28 = *(_QWORD *)(v13 + 16);
        v29 = ((v24 + *(_DWORD *)(v13 + 4) * v25) * v27);
        if (v27 < 8 || (unint64_t)(v28 + v29 - v21) < 0x20)
        {
          v30 = 0;
LABEL_31:
          v31 = (char *)(v21 + v30);
          v32 = (_BYTE *)(v28 + v30 + v29);
          v33 = v27 - v30;
          do
          {
            v34 = *v31++;
            *v32++ = v34;
            --v33;
          }
          while (v33);
          goto LABEL_33;
        }
        if (v27 >= 0x20)
        {
          v30 = v27 & 0xFFFFFFE0;
          v50 = (_OWORD *)(v28 + v29 + 16);
          v51 = v30;
          v52 = v89;
          do
          {
            v53 = *v52;
            *(v50 - 1) = *(v52 - 1);
            *v50 = v53;
            v52 += 2;
            v50 += 2;
            v51 -= 32;
          }
          while (v51);
          if (v30 == v27)
            goto LABEL_33;
          if ((v27 & 0x18) == 0)
            goto LABEL_31;
        }
        else
        {
          v30 = 0;
        }
        v54 = v30;
        v30 = v27 & 0xFFFFFFF8;
        v55 = (uint64_t *)(v21 + v54);
        v56 = (_QWORD *)(v28 + v54 + v29);
        v57 = v54 - v30;
        do
        {
          v58 = *v55++;
          *v56++ = v58;
          v57 += 8;
        }
        while (v57);
        if (v30 != v27)
          goto LABEL_31;
      }
LABEL_33:
      if (v12 >= v100)
      {
        v35 = (v12 - __p) >> 3;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61)
          sub_2394189F8();
        v37 = v100 - __p;
        if ((v100 - __p) >> 2 > v36)
          v36 = v37 >> 2;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
          v38 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          if (v38 >> 61)
            sub_239418A80();
          v39 = operator new(8 * v38);
          v40 = &v39[8 * v35];
          *(_QWORD *)v40 = v24 | (v25 << 32);
          v22 = (uint64_t)(v40 + 8);
          if (v12 != __p)
          {
LABEL_43:
            v41 = v12 - 8 - __p;
            if (v41 < 0x168
              || &v39[v12 - __p - 8 - (v41 & 0xFFFFFFFFFFFFFFF8)] > &v39[v12 - __p - 8]
              || &v12[-(v41 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8
              || (unint64_t)(__p - v39) < 0x20)
            {
              v42 = v12;
              v13 = v90;
              v5 = v91;
            }
            else
            {
              v44 = (v41 >> 3) + 1;
              v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
              v42 = &v12[-v45];
              v40 -= v45;
              v46 = &v39[8 * v35 - 16];
              v47 = v12 - 16;
              v48 = v44 & 0x3FFFFFFFFFFFFFFCLL;
              v13 = v90;
              v5 = v91;
              do
              {
                v49 = *(_OWORD *)v47;
                *(v46 - 1) = *((_OWORD *)v47 - 1);
                *v46 = v49;
                v46 -= 2;
                v47 -= 32;
                v48 -= 4;
              }
              while (v48);
              if (v44 == (v44 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_46:
                v12 = __p;
                __p = v40;
                v100 = &v39[8 * v38];
                if (v12)
                  goto LABEL_47;
                goto LABEL_48;
              }
            }
            do
            {
              v43 = *((_QWORD *)v42 - 1);
              v42 -= 8;
              *((_QWORD *)v40 - 1) = v43;
              v40 -= 8;
            }
            while (v42 != __p);
            goto LABEL_46;
          }
        }
        else
        {
          v39 = 0;
          v40 = (char *)(8 * v35);
          *(_QWORD *)(8 * v35) = v24 | (v25 << 32);
          v22 = 8 * v35 + 8;
          if (v12 != __p)
            goto LABEL_43;
        }
        v13 = v90;
        v5 = v91;
        __p = v40;
        v100 = &v39[8 * v38];
        if (v12)
LABEL_47:
          operator delete(v12);
LABEL_48:
        v7 = v94;
        v18 = v95;
        v17 = v96;
        v21 = v97;
        goto LABEL_20;
      }
      *(_QWORD *)v12 = v24 | (v25 << 32);
      v22 = (uint64_t)(v12 + 8);
LABEL_20:
      v12 = (char *)v22;
LABEL_21:
      if (++v19 == 8)
      {
        v15 = v92 + 1;
        if (v92 + 1 != v88)
          goto LABEL_18;
        sub_23992AD34((uint64_t)&v101, __p, v12, (v12 - __p) >> 3);
        v12 = __p;
        goto LABEL_10;
      }
    }
  }
LABEL_69:
  if (__p)
  {
    operator delete(__p);
    v14 = v101;
  }
  if (v14)
  {
    v102 = v14;
    operator delete(v14);
  }
  MEMORY[0x23B83E2F8](v7, 0x1000C8077774924);
  return 1;
}

void sub_2399CDB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  MEMORY[0x23B83E2F8](v23, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL sub_2399CDB8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, int a7)
{
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *__p;
  char v18;
  id v19;
  int v20;

  v11 = *(void **)a1;
  v19 = 0;
  sub_2399FA2BC(v11, (uint64_t)&v19, a5, a7);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = v19;
  v14 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;

  if (v13)
  {
    if (a4)
      *(_DWORD *)(a3 + 384) = 5;
    v15 = *(_QWORD *)(a6 + 24);
    if (v15)
    {
      v18 = 0;
      LOBYTE(__p) = 0;
      v20 = 5;
      (*(void (**)(uint64_t, int *, void **))(*(_QWORD *)v15 + 48))(v15, &v20, &__p);
      if (v18 < 0)
        operator delete(__p);
    }
  }

  return v13 == 0;
}

void sub_2399CDC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_2399CDC84(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11)
{
  int64_t v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int32x4_t v27;
  int32x4_t *v28;
  int32x4_t v29;
  int32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  BOOL v45;
  _BYTE *v46;
  uint64_t v47;
  void **v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  const char *v73;
  _BYTE *v74;
  uint64_t v75;
  void **v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  id v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  int v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  uint32x4_t v114;
  int8x16_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  uint32x4_t *v122;
  uint32x4_t v123;
  uint32x4_t v124;
  uint32x4_t v125;
  uint32x4_t v126;
  uint32x4_t v127;
  uint32x4_t v128;
  uint32x4_t v129;
  uint32x4_t v130;
  int8x16_t *v131;
  uint64_t v132;
  unsigned int v133;
  int v134;
  uint64_t v135;
  void *v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  _DWORD *v161;
  _DWORD *v162;
  uint64_t v163;
  unint64_t v164;
  void *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  _DWORD *v177;
  _DWORD *v178;
  uint64_t v179;
  unint64_t v180;
  void *v181;
  unint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  _DWORD *v193;
  _DWORD *v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  unsigned int v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  int v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v209;
  _DWORD *v210;
  _DWORD *v211;
  void *v212;
  void *v213;
  unint64_t v214;
  id v215;
  id v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  void *v222;
  int v224;
  void *v225;
  void *v226;
  int v227;
  uint64_t v228;
  int v229;
  void *context;
  id v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD v239[6];
  _QWORD v240[6];
  id v241;
  void *v242[2];
  char v243;
  id v244;
  void *v245[2];
  _BYTE v246[9];
  uint64_t v247;
  char v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  _DWORD v253[5];

  context = (void *)MEMORY[0x23B83EC40]();
  v17 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  v228 = *(_QWORD *)(a5 + 4);
  v227 = *a2;
  v18 = a2[3];
  v229 = a2[1];
  v224 = a2[2];
  v231 = (id)objc_msgSend(*(id *)a1, "newBufferWithLength:options:", v17, 0);
  v232 = a1;
  v19 = (void *)objc_msgSend(*(id *)a1, "newBufferWithLength:options:", (unint64_t)(2* (((unint64_t)((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2)* (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL, 0);
  v20 = v19;
  if (v231 && v19)
  {
    v225 = v19;
    v216 = objc_retainAutorelease(v19);
    v21 = objc_msgSend(v216, "contents");
    v215 = objc_retainAutorelease(v231);
    memcpy((void *)objc_msgSend(v215, "contents"), *(const void **)a3, v17);
    v22 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if ((unint64_t)v22 >= 0xC)
    {
      v23 = (v22 >> 2) / 3uLL;
      if (v23 <= 1)
        v23 = 1;
      if (v23 >= 8)
      {
        v24 = v23 & 0x7FFFFFFFFFFFFFF8;
        v27 = (int32x4_t)xmmword_239EC6870;
        v28 = (int32x4_t *)(v21 + 16);
        v29.i64[0] = 0x400000004;
        v29.i64[1] = 0x400000004;
        v30.i64[0] = 0x800000008;
        v30.i64[1] = 0x800000008;
        v31 = v23 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v28[-1] = v27;
          *v28 = vaddq_s32(v27, v29);
          v27 = vaddq_s32(v27, v30);
          v28 += 2;
          v31 -= 8;
        }
        while (v31);
        goto LABEL_19;
      }
      v24 = 0;
      do
      {
        *(_DWORD *)(v21 + 4 * v24) = v24;
        ++v24;
LABEL_19:
        ;
      }
      while (v23 != v24);
    }
    v32 = objc_msgSend(*(id *)a1, "newBufferWithLength:options:", 64, 0);
    v33 = (void *)v32;
    if (!v32)
    {
      if (a10)
        *(_DWORD *)(a9 + 384) = 2;
      v43 = *(_QWORD *)(a11 + 24);
      if (!v43)
      {
        v26 = 1;
        goto LABEL_71;
      }
      v218 = 0;
      BYTE7(v250) = 0;
      LOBYTE(v249) = 0;
      *(_DWORD *)&v246[1] = 2;
      (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v43 + 48))(v43, &v246[1], &v249);
      if (SBYTE7(v250) < 0)
        operator delete((void *)v249);
      v26 = 1;
LABEL_70:
      v33 = v218;
LABEL_71:

      v20 = v225;
      goto LABEL_72;
    }
    v218 = (void *)v32;
    v249 = xmmword_239F02850;
    v250 = xmmword_239ECEFC0;
    v251 = xmmword_239ECEFD0;
    v252 = xmmword_239F03890;
    objc_msgSend(*(id *)(a1 + 8), "commandBuffer");
    v217 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)objc_opt_new();
    v35 = v34;
    v221 = v34;
    if (v227)
    {
      objc_msgSend(v34, "colorAttachments");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "objectAtIndexedSubscript:", 1);
      v37 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v37, "setTexture:", *(_QWORD *)(a1 + 32));
      objc_msgSend(v37, "setLoadAction:", 2);
      objc_msgSend(v37, "setStoreAction:", 1);
      objc_msgSend(v37, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

      v35 = v221;
    }
    if (!v18)
    {
      if (v229)
      {
        objc_msgSend(v35, "colorAttachments");
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v38, "objectAtIndexedSubscript:", 2);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v39, "setTexture:", *(_QWORD *)(a1 + 40));
        objc_msgSend(v39, "setLoadAction:", 2);
        objc_msgSend(v39, "setStoreAction:", 1);
        objc_msgSend(v39, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

        v35 = v221;
      }
      if (v224)
      {
        objc_msgSend(v35, "colorAttachments");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v40, "objectAtIndexedSubscript:", 3);
        v41 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v41, "setTexture:", *(_QWORD *)(a1 + 24));
        objc_msgSend(v41, "setLoadAction:", 2);
        objc_msgSend(v41, "setStoreAction:", 1);
        objc_msgSend(v41, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

        v35 = v221;
      }
    }
    objc_msgSend(v35, "setRenderTargetWidth:");
    objc_msgSend(v35, "setRenderTargetHeight:");
    objc_msgSend(v35, "setRenderTargetArrayLength:", 1);
    objc_msgSend(v35, "setDefaultRasterSampleCount:", 1);
    v248 = 4;
    strcpy(&v246[1], "VSAC");
    v246[0] = 0;
    LOBYTE(v245[0]) = 0;
    if (!v229 || v18)
    {
      v44 = "FSCBPO";
      if (v229)
        v45 = v18 == 0;
      else
        v45 = 1;
      if (v45)
        v44 = "FSCBMB";
      if (v229 | v18)
        v42 = v44;
      else
        v42 = "FSNCBMB";
    }
    else
    {
      v42 = "FSNCBPO";
    }
    MEMORY[0x23B83DBFC](v245, v42);
    if (v248 >= 0)
      v46 = &v246[1];
    else
      v46 = *(_BYTE **)&v246[1];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v46);
    v47 = objc_claimAutoreleasedReturnValue();
    if (v246[0] >= 0)
      v48 = v245;
    else
      v48 = (void **)v245[0];
    v213 = (void *)v47;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v48);
    v219 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = (void *)objc_msgSend(*(id *)(a1 + 16), "newFunctionWithName:", v47);
    v50 = (void *)objc_msgSend(*(id *)(a1 + 16), "newFunctionWithName:", v219);
    v51 = objc_alloc_init(MEMORY[0x24BDDD6B8]);
    objc_msgSend(v51, "setVertexFunction:", v49);
    objc_msgSend(v51, "setFragmentFunction:", v50);
    if (v227)
    {
      objc_msgSend(v51, "colorAttachments");
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v52, "objectAtIndexedSubscript:", 1);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "setPixelFormat:", 53);

    }
    if (!v18)
    {
      if (v229)
      {
        objc_msgSend(v51, "colorAttachments");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "objectAtIndexedSubscript:", 2);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v55, "setPixelFormat:", 53);

      }
      if (v224)
      {
        objc_msgSend(v51, "colorAttachments");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v56, "objectAtIndexedSubscript:", 3);
        v57 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "setPixelFormat:", 125);

      }
    }
    v58 = *(void **)v232;
    v244 = 0;
    v59 = (void *)objc_msgSend(v58, "newRenderPipelineStateWithDescriptor:error:", v51, &v244);
    v60 = v244;
    if (v60)
    {
      v61 = v60;
      if (a10)
        *(_DWORD *)(a9 + 384) = 5;
      v62 = v217;
      v63 = *(_QWORD *)(a11 + 24);
      if (v63)
      {
        v243 = 0;
        LOBYTE(v242[0]) = 0;
        v253[0] = 5;
        (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v63 + 48))(v63, v253, v242);
        if (v243 < 0)
          operator delete(v242[0]);
      }

      if ((v246[0] & 0x80000000) != 0)
      {
        operator delete(v245[0]);
        v64 = v221;
        if ((v248 & 0x80000000) == 0)
          goto LABEL_66;
      }
      else
      {
        v64 = v221;
        if ((v248 & 0x80000000) == 0)
        {
LABEL_66:

LABEL_67:
LABEL_68:
          v26 = 1;
LABEL_69:

          goto LABEL_70;
        }
      }
      operator delete(*(void **)&v246[1]);
      goto LABEL_66;
    }

    if ((v246[0] & 0x80000000) != 0)
      operator delete(v245[0]);
    v66 = a11;
    if (v248 < 0)
      operator delete(*(void **)&v246[1]);
    *(_QWORD *)&v246[1] = v228;
    objc_msgSend(v217, "renderCommandEncoderWithDescriptor:", v221);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v67, "setRenderPipelineState:", v59);
    objc_msgSend(v67, "setCullMode:", 0);
    objc_msgSend(v67, "setFrontFacingWinding:", 1);
    objc_msgSend(v67, "setVertexBuffer:offset:atIndex:", v215, 0, 0);
    objc_msgSend(v67, "setVertexBytes:length:atIndex:", &v249, 64, 1);
    objc_msgSend(v67, "setFragmentBytes:length:atIndex:", &v246[1], 8, 0);
    objc_msgSend(v67, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, 3 * ((v17 >> 2) / 9uLL), 1, v216, 0);
    objc_msgSend(v67, "endEncoding");

    if (v18)
    {
      v68 = (void *)objc_opt_new();
      v61 = v68;
      if (v229)
      {
        objc_msgSend(v68, "colorAttachments");
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v69, "objectAtIndexedSubscript:", 0);
        v70 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v70, "setTexture:", *(_QWORD *)(v232 + 40));
        objc_msgSend(v70, "setLoadAction:", 2);
        objc_msgSend(v70, "setStoreAction:", 1);
        objc_msgSend(v70, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

      }
      v62 = v217;
      if (v224)
      {
        objc_msgSend(v61, "colorAttachments");
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v71, "objectAtIndexedSubscript:", 1);
        v72 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v72, "setTexture:", *(_QWORD *)(v232 + 24));
        objc_msgSend(v72, "setLoadAction:", 2);
        objc_msgSend(v72, "setStoreAction:", 1);
        objc_msgSend(v72, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

      }
      objc_msgSend(v61, "setRenderTargetWidth:", v228);
      objc_msgSend(v61, "setRenderTargetHeight:", HIDWORD(v228));
      objc_msgSend(v61, "setRenderTargetArrayLength:", 1);
      objc_msgSend(v61, "setDefaultRasterSampleCount:", 1);
      v248 = 0;
      *(_WORD *)v246 = 0;
      LOBYTE(v245[0]) = 0;
      if (v229)
      {
        MEMORY[0x23B83DBFC](&v246[1], "BVSCBPO");
        v73 = "BFSCBPO";
      }
      else
      {
        MEMORY[0x23B83DBFC](&v246[1], "BVSCBMB");
        v73 = "BFSCBMB";
      }
      MEMORY[0x23B83DBFC](v245, v73);
      if (v248 >= 0)
        v74 = &v246[1];
      else
        v74 = *(_BYTE **)&v246[1];
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v74);
      v75 = objc_claimAutoreleasedReturnValue();
      v214 = 3 * ((v17 >> 2) / 9uLL);
      if (v246[0] >= 0)
        v76 = v245;
      else
        v76 = (void **)v245[0];
      v222 = (void *)v75;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v76);
      v220 = (void *)objc_claimAutoreleasedReturnValue();
      v77 = (void *)objc_msgSend(*(id *)(v232 + 16), "newFunctionWithName:", v75);
      v78 = (void *)objc_msgSend(*(id *)(v232 + 16), "newFunctionWithName:", v220);
      v79 = (void *)objc_opt_new();
      objc_msgSend(v79, "setVertexFunction:", v77);
      objc_msgSend(v79, "setFragmentFunction:", v78);
      if (v229)
      {
        objc_msgSend(v79, "colorAttachments");
        v80 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v80, "objectAtIndexedSubscript:", 0);
        v81 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v81, "setPixelFormat:", 53);

      }
      if (v224)
      {
        objc_msgSend(v79, "colorAttachments");
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v82, "objectAtIndexedSubscript:", 1);
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v83, "setPixelFormat:", 125);

      }
      v84 = *(void **)v232;
      v241 = 0;
      v64 = (void *)objc_msgSend(v84, "newRenderPipelineStateWithDescriptor:error:", v79, &v241);
      v85 = v241;
      if (v85)
      {
        v86 = v85;
        if (a10)
          *(_DWORD *)(a9 + 384) = 5;
        if (*(_QWORD *)(a11 + 24))
        {
          sub_23941A4FC(v242, "");
          v253[0] = 5;
          v87 = *(_QWORD *)(a11 + 24);
          if (!v87)
            sub_2394172E0();
          (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v87 + 48))(v87, v253, v242);
          if (v243 < 0)
            operator delete(v242[0]);
        }

        if ((v246[0] & 0x80000000) != 0)
          operator delete(v245[0]);
        if (v248 < 0)
          operator delete(*(void **)&v246[1]);
        goto LABEL_67;
      }

      if ((v246[0] & 0x80000000) != 0)
        operator delete(v245[0]);
      v212 = v64;
      if (v248 < 0)
        operator delete(*(void **)&v246[1]);
      *(_QWORD *)&v246[1] = v228;
      objc_msgSend(v217, "renderCommandEncoderWithDescriptor:", v61);
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "setRenderPipelineState:", v212);
      objc_msgSend(v88, "setCullMode:", 0);
      objc_msgSend(v88, "setFrontFacingWinding:", 1);
      objc_msgSend(v88, "setVertexBuffer:offset:atIndex:", v215, 0, 0);
      objc_msgSend(v88, "setVertexBytes:length:atIndex:", &v249, 64, 1);
      objc_msgSend(v88, "setFragmentBytes:length:atIndex:", &v246[1], 8, 0);
      objc_msgSend(v88, "drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:", 3, v214, 1, v216, 0);
      objc_msgSend(v88, "endEncoding");

      v66 = a11;
    }
    v62 = v217;
    sub_2399FCF18();
    objc_msgSend(v217, "commit");
    objc_msgSend(v217, "waitUntilCompleted");
    objc_msgSend(v217, "error");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    v90 = sub_2399F93F8(v89);

    if (v90)
    {
      if (a10)
        *(_DWORD *)(a9 + 384) = 16;
      if (*(_QWORD *)(v66 + 24))
      {
        sub_23941A4FC(&v246[1], "");
        LODWORD(v245[0]) = 16;
        v91 = *(_QWORD *)(v66 + 24);
        if (!v91)
          sub_2394172E0();
        (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v91 + 48))(v91, v245, &v246[1]);
        if (v248 < 0)
          operator delete(*(void **)&v246[1]);
      }
      goto LABEL_68;
    }
    v92 = 4 * v228;
    if (!v227)
    {
LABEL_158:
      if (v229)
      {
        sub_2396BD678(&v246[1], (HIDWORD(v228) * v228));
        v136 = *(void **)(v232 + 40);
        memset(v239, 0, 24);
        v239[3] = v228;
        v239[4] = HIDWORD(v228);
        v239[5] = 1;
        objc_msgSend(v136, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", *(_QWORD *)&v246[1], v92, v239, 0);
        v137 = *(_DWORD *)(a5 + 8);
        if (v137)
        {
          v138 = *(_DWORD *)(a5 + 4);
          if (v138)
          {
            v139 = 0;
            v140 = -1;
            do
            {
              if (v138)
              {
                v141 = 0;
                v142 = v137 + v140;
                do
                {
                  *(_DWORD *)(*(_QWORD *)(a6 + 16) + 4 * (v141 + v142 * *(_DWORD *)(a6 + 4)) * *(_DWORD *)(a6 + 12)) = *(_DWORD *)(*a4 + 4 * *(unsigned int *)(*(_QWORD *)&v246[1] + 4 * (v141 + v139 * v138)));
                  ++v141;
                  v138 = *(_DWORD *)(a5 + 4);
                }
                while (v141 < v138);
                v137 = *(_DWORD *)(a5 + 8);
              }
              ++v139;
              --v140;
            }
            while (v139 < v137);
          }
        }
        if (*(_QWORD *)&v246[1])
        {
          v247 = *(_QWORD *)&v246[1];
          operator delete(*(void **)&v246[1]);
        }
      }
      if (v224)
      {
        v143 = HIDWORD(v228) >> 2;
        v144 = (4 * v228 * (HIDWORD(v228) >> 2));
        v145 = sub_2396BD5E4(&v246[1], v144);
        v146 = *(_QWORD *)&v246[1];
        v147 = (v247 - *(_QWORD *)&v246[1]) >> 2;
        if (v144 <= v147)
        {
          if (v144 < v147)
            v247 = *(_QWORD *)&v246[1] + 4 * v144;
        }
        else
        {
          sub_2394807B4((uint64_t)v145, v144 - v147);
          v146 = *(_QWORD *)&v246[1];
        }
        v148 = *(void **)(v232 + 24);
        v149 = 16 * v228;
        v233 = 0;
        v234 = 0;
        v235 = 0;
        v236 = v228;
        v237 = v143;
        v238 = 1;
        objc_msgSend(v148, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v146, v149, &v233, 0);
        if (HIDWORD(v228) >= 4)
        {
          v150 = *(unsigned int *)(a5 + 4);
          if ((_DWORD)v150)
          {
            v151 = 0;
            v152 = 0;
            v153 = *(_QWORD *)(a7 + 16);
            v154 = *(_DWORD *)(a7 + 12);
            v155 = *(_QWORD *)&v246[1];
            v156 = *(_DWORD *)(a7 + 4) * v154;
            v157 = v156 * (*(_DWORD *)(a5 + 8) - 1);
            do
            {
              v158 = v150;
              v159 = v151;
              v160 = v157;
              do
              {
                v161 = (_DWORD *)(v153 + 16 * v160);
                v162 = (_DWORD *)(v155 + 16 * v159);
                *v161 = *v162;
                v161[1] = v162[1];
                v161[2] = v162[2];
                v160 += v154;
                ++v159;
                --v158;
              }
              while (v158);
              ++v152;
              v157 -= v156;
              v151 += v150;
            }
            while (v152 < v143);
          }
        }
        v163 = *(_QWORD *)&v246[1];
        v164 = (v247 - *(_QWORD *)&v246[1]) >> 2;
        if (v144 <= v164)
        {
          if (v144 < v164)
            v247 = *(_QWORD *)&v246[1] + 4 * v144;
        }
        else
        {
          sub_2394807B4((uint64_t)&v246[1], v144 - v164);
          v163 = *(_QWORD *)&v246[1];
        }
        v165 = *(void **)(v232 + 24);
        v233 = 0;
        v234 = v143;
        v235 = 0;
        v236 = v228;
        v237 = v143;
        v238 = 1;
        objc_msgSend(v165, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v163, v149, &v233, 0);
        if (HIDWORD(v228) >= 4)
        {
          v166 = *(unsigned int *)(a5 + 4);
          if ((_DWORD)v166)
          {
            v167 = 0;
            v168 = *(_QWORD *)(a7 + 16);
            v169 = *(_DWORD *)(a7 + 12);
            v170 = *(_QWORD *)&v246[1];
            v171 = *(_DWORD *)(a7 + 4) * v169;
            v172 = v171 * (~v143 + *(_DWORD *)(a5 + 8));
            v173 = HIDWORD(v228) >> 2;
            do
            {
              v174 = v167;
              v175 = v172;
              v176 = v166;
              do
              {
                v177 = (_DWORD *)(v168 + 16 * v175);
                v178 = (_DWORD *)(v170 + 16 * v174);
                *v177 = *v178;
                v177[1] = v178[1];
                v177[2] = v178[2];
                v175 += v169;
                ++v174;
                --v176;
              }
              while (v176);
              ++v173;
              v172 -= v171;
              v167 += v166;
            }
            while (v173 < 2 * v143);
          }
        }
        v179 = *(_QWORD *)&v246[1];
        v180 = (v247 - *(_QWORD *)&v246[1]) >> 2;
        if (v144 <= v180)
        {
          if (v144 < v180)
            v247 = *(_QWORD *)&v246[1] + 4 * v144;
        }
        else
        {
          sub_2394807B4((uint64_t)&v246[1], v144 - v180);
          v179 = *(_QWORD *)&v246[1];
        }
        v181 = *(void **)(v232 + 24);
        v182 = 2 * v143;
        v233 = 0;
        v234 = v182;
        v235 = 0;
        v236 = v228;
        v237 = v143;
        v238 = 1;
        objc_msgSend(v181, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v179, v149, &v233, 0);
        if (v182 < 3 * v143)
        {
          v183 = *(unsigned int *)(a5 + 4);
          if ((_DWORD)v183)
          {
            v184 = 0;
            v185 = *(_QWORD *)(a7 + 16);
            v186 = *(_DWORD *)(a7 + 12);
            v187 = *(_QWORD *)&v246[1];
            v188 = *(_DWORD *)(a7 + 4) * v186;
            v189 = v188 * (~(_DWORD)v182 + *(_DWORD *)(a5 + 8));
            do
            {
              v190 = v184;
              v191 = v189;
              v192 = v183;
              do
              {
                v193 = (_DWORD *)(v185 + 16 * v191);
                v194 = (_DWORD *)(v187 + 16 * v190);
                *v193 = *v194;
                v193[1] = v194[1];
                v193[2] = v194[2];
                v191 += v186;
                ++v190;
                --v192;
              }
              while (v192);
              LODWORD(v182) = v182 + 1;
              v189 -= v188;
              v184 += v183;
            }
            while (v182 < 3 * v143);
          }
        }
        v195 = 3 * v143;
        v196 = 4 * (_DWORD)v228 * (HIDWORD(v228) - 3 * v143);
        v197 = *(_QWORD *)&v246[1];
        v198 = (v247 - *(_QWORD *)&v246[1]) >> 2;
        if (v196 <= v198)
        {
          if (v196 < v198)
            v247 = *(_QWORD *)&v246[1] + 4 * v196;
        }
        else
        {
          sub_2394807B4((uint64_t)&v246[1], v196 - v198);
          v197 = *(_QWORD *)&v246[1];
        }
        v199 = *(void **)(v232 + 24);
        v233 = 0;
        v234 = 3 * v143;
        v235 = 0;
        v236 = v228;
        v237 = HIDWORD(v228) - 3 * v143;
        v238 = 1;
        objc_msgSend(v199, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", v197, v149, &v233, 0);
        if (v195 < HIDWORD(v228))
        {
          v200 = *(unsigned int *)(a5 + 4);
          if ((_DWORD)v200)
          {
            v201 = 0;
            v202 = *(_QWORD *)(a7 + 16);
            v203 = *(_DWORD *)(a7 + 12);
            v204 = *(_QWORD *)&v246[1];
            v205 = *(_DWORD *)(a7 + 4) * v203;
            v206 = v205 * (~(_DWORD)v195 + *(_DWORD *)(a5 + 8));
            do
            {
              v207 = v201;
              v208 = v206;
              v209 = v200;
              do
              {
                v210 = (_DWORD *)(v202 + 16 * v208);
                v211 = (_DWORD *)(v204 + 16 * v207);
                *v210 = *v211;
                v210[1] = v211[1];
                v210[2] = v211[2];
                v208 += v203;
                ++v207;
                --v209;
              }
              while (v209);
              LODWORD(v195) = v195 + 1;
              v206 -= v205;
              v201 += v200;
            }
            while (v195 < HIDWORD(v228));
          }
        }
        if (*(_QWORD *)&v246[1])
        {
          v247 = *(_QWORD *)&v246[1];
          operator delete(*(void **)&v246[1]);
        }
      }
      v26 = 0;
      goto LABEL_69;
    }
    sub_2396BD678(&v246[1], (HIDWORD(v228) * v228));
    v93 = *(void **)(v232 + 32);
    memset(v240, 0, 24);
    v240[3] = v228;
    v240[4] = HIDWORD(v228);
    v240[5] = 1;
    objc_msgSend(v93, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", *(_QWORD *)&v246[1], v92, v240, 0);
    v94 = *(_DWORD *)(a5 + 8);
    v95 = *(char **)&v246[1];
    if (!v94 || (v96 = *(unsigned int *)(a5 + 4), !(_DWORD)v96))
    {
LABEL_156:
      if (v95)
      {
        v247 = (uint64_t)v95;
        operator delete(v95);
      }
      goto LABEL_158;
    }
    v97 = *(_QWORD *)(a5 + 16);
    v98 = *(_DWORD *)(a5 + 12);
    if (v96 < 8)
    {
      v99 = 0;
      v100 = 0;
      v101 = v96 * (v94 - 1);
      v102 = v98 * (v101 + 6);
      v103 = v98 * (v101 + 5);
      v104 = v98 * (v101 + 4);
      v105 = v98 * (v101 + 3);
      v106 = v98 * (v101 + 2);
      v107 = v98 + v98 * v101;
      v108 = v96 * v98;
      v109 = v108 * (v94 - 1);
      do
      {
        *(_BYTE *)(v97 + (v109 + v99)) = *(_DWORD *)&v95[4 * v100] > 0x80u;
        if ((_DWORD)v96 != 1)
        {
          *(_BYTE *)(v97 + (v107 + v99)) = *(_DWORD *)&v95[4 * (v100 + 1)] > 0x80u;
          if ((_DWORD)v96 != 2)
          {
            *(_BYTE *)(v97 + (v106 + v99)) = *(_DWORD *)&v95[4 * (v100 + 2)] > 0x80u;
            if ((_DWORD)v96 != 3)
            {
              *(_BYTE *)(v97 + (v105 + v99)) = *(_DWORD *)&v95[4 * (v100 + 3)] > 0x80u;
              if ((_DWORD)v96 != 4)
              {
                *(_BYTE *)(v97 + (v104 + v99)) = *(_DWORD *)&v95[4 * (v100 + 4)] > 0x80u;
                if ((_DWORD)v96 != 5)
                {
                  *(_BYTE *)(v97 + (v103 + v99)) = *(_DWORD *)&v95[4 * (v100 + 5)] > 0x80u;
                  if ((_DWORD)v96 != 6)
                    *(_BYTE *)(v97 + (v102 + v99)) = *(_DWORD *)&v95[4 * (v100 + 6)] > 0x80u;
                }
              }
            }
          }
        }
        v100 += v96;
        v99 -= v108;
        --v94;
      }
      while (v94);
LABEL_155:
      v95 = *(char **)&v246[1];
      goto LABEL_156;
    }
    v110 = 0;
    v111 = 0;
    v112 = v96 - 1;
    v113 = v96 * (v94 - 1);
    v114.i64[0] = 0x8000000080;
    v114.i64[1] = 0x8000000080;
    v115.i64[0] = 0x101010101010101;
    v115.i64[1] = 0x101010101010101;
    while (1)
    {
      v116 = 0;
      v117 = __CFADD__(v96 * v111, v112);
      if (!__CFADD__(v96 * (v94 + ~v111), v112) && !v117 && !((unint64_t)(v96 - 1) >> 32) && v98 == 1)
      {
        if (v96 < 0x20)
        {
          v118 = 0;
LABEL_149:
          v132 = v118 - (v96 & 0xFFFFFFF8);
          do
          {
            *(int8x8_t *)(v97 + v113 + v118) = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32(*(uint32x4_t *)&v95[4 * (v110 + v118)], v114), (int16x8_t)vcgtq_u32(*(uint32x4_t *)&v95[4 * (v110 + v118) + 16], v114))), (int8x8_t)0x101010101010101);
            LODWORD(v118) = v118 + 8;
            v132 += 8;
          }
          while (v132);
          v116 = v96 & 0xFFFFFFF8;
          if (v116 == v96)
            goto LABEL_135;
          goto LABEL_152;
        }
        v119 = v113;
        v120 = v110;
        v121 = v96 & 0xFFFFFFE0;
        do
        {
          v122 = (uint32x4_t *)&v95[4 * v120];
          v123 = *v122;
          v124 = v122[1];
          v125 = v122[2];
          v126 = v122[3];
          v127 = v122[4];
          v128 = v122[5];
          v129 = v122[6];
          v130 = v122[7];
          v131 = (int8x16_t *)(v97 + v119);
          *v131 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v123, v114), (int16x8_t)vcgtq_u32(v124, v114)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v125, v114), (int16x8_t)vcgtq_u32(v126, v114))), v115);
          v131[1] = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v127, v114), (int16x8_t)vcgtq_u32(v128, v114)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v129, v114), (int16x8_t)vcgtq_u32(v130, v114))), v115);
          v120 += 32;
          v119 += 32;
          v121 -= 32;
        }
        while (v121);
        if ((v96 & 0xFFFFFFE0) == v96)
          goto LABEL_135;
        v118 = v96 & 0xFFFFFFE0;
        v116 = v118;
        if ((v96 & 0x18) != 0)
          goto LABEL_149;
      }
LABEL_152:
      v133 = v98 * (v113 + v116);
      v134 = v110 + v116;
      v135 = v96 - v116;
      do
      {
        *(_BYTE *)(v97 + v133) = *(_DWORD *)&v95[4 * v134] > 0x80u;
        v133 += v98;
        ++v134;
        --v135;
      }
      while (v135);
LABEL_135:
      ++v111;
      v110 += v96;
      v113 -= v96;
      if (v111 == v94)
        goto LABEL_155;
    }
  }
  if (a10)
    *(_DWORD *)(a9 + 384) = 2;
  v25 = *(_QWORD *)(a11 + 24);
  if (v25)
  {
    v226 = v20;
    BYTE7(v250) = 0;
    LOBYTE(v249) = 0;
    *(_DWORD *)&v246[1] = 2;
    (*(void (**)(uint64_t, _BYTE *, __int128 *))(*(_QWORD *)v25 + 48))(v25, &v246[1], &v249);
    if (SBYTE7(v250) < 0)
      operator delete((void *)v249);
    v26 = 1;
    v20 = v226;
  }
  else
  {
    v26 = 1;
  }
LABEL_72:

  objc_autoreleasePoolPop(context);
  return v26 == 0;
}

void sub_2399CF25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19)
{

  JUMPOUT(0x2399CF5B8);
}

void sub_2399CF504()
{
  JUMPOUT(0x2399CF5B0);
}

void sub_2399CF534()
{
  void *v0;

  JUMPOUT(0x2399CF53CLL);
}

void sub_2399CF544()
{
  JUMPOUT(0x2399CF5A0);
}

BOOL sub_2399CF5D0(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8, _QWORD *a9, unsigned __int8 a10)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  id *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  size_t v21;
  size_t v22;
  void **p_dst;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  char *v28;
  size_t v29;
  size_t v30;
  void **v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  size_t v38;
  size_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  char *v63;
  char *v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _DWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  float *v86;
  char *v87;
  float v88;
  uint64_t *v89;
  float *v90;
  unint64_t v91;
  uint64_t v92;
  float *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  float *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  float *v104;
  _OWORD *v105;
  float *v106;
  uint64_t v107;
  __int128 v108;
  int v109;
  char *v110;
  float v111;
  float *v112;
  uint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  float *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  _BYTE *v122;
  float *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  float *v127;
  _OWORD *v128;
  float *v129;
  uint64_t v130;
  __int128 v131;
  int v132;
  char *v133;
  char *v134;
  uint64_t *v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _BYTE *v143;
  _DWORD *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  _OWORD *v150;
  char *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  void *v162;
  void *v163;
  id v164;
  void *v165;
  void *v166;
  id v167;
  void *v168;
  void *v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  id *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  void *v178;
  char *v179;
  void *v180;
  void *v181;
  char *v182;
  char *v183;
  void *v184;
  char *v185;
  void *v186;
  void *v187;
  _BOOL4 v189;
  _QWORD *v190;
  uint64_t v191;
  char *v192;
  _OWORD *v193;
  char *v194;
  uint64_t v195;
  char *v196;
  size_t v197;
  size_t v198;
  void **v199;
  uint64_t v200;
  uint64_t v201;
  id *v202;
  void *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _BOOL4 v209;
  _QWORD *v210;
  uint64_t v211;
  id *v212;
  void *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  size_t v226;
  size_t v227;
  void **v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t *v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  char v244;
  float v245;
  char v246;
  unint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  float *v252;
  char *v253;
  float v254;
  float *v255;
  uint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  float *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  _BYTE *v265;
  float *v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  float *v270;
  _OWORD *v271;
  float *v272;
  uint64_t v273;
  __int128 v274;
  int v275;
  char *v276;
  float v277;
  float *v278;
  uint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  float *v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  _BYTE *v288;
  float *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  float *v293;
  _OWORD *v294;
  float *v295;
  uint64_t v296;
  __int128 v297;
  int v298;
  char *v299;
  uint64_t *v300;
  char *v301;
  unint64_t v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  _BYTE *v309;
  _DWORD *v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  _OWORD *v315;
  char *v316;
  uint64_t v317;
  __int128 v318;
  int v319;
  id *v320;
  void *v321;
  _QWORD *v322;
  uint64_t v323;
  _BOOL4 v324;
  _BOOL4 v325;
  void **v326;
  uint64_t v327;
  id *v328;
  void *v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  unsigned int *v337;
  unsigned int *v338;
  uint64_t v339;
  _QWORD *v340;
  unsigned int *v341;
  unsigned int *v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  int v346;
  char *v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  __int128 *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  _OWORD *v373;
  uint64_t v374;
  __int128 *v375;
  __int128 v376;
  uint64_t *v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  char *v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  char *v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  unint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  id v409;
  id v410;
  id v411;
  id v412;
  id v413;
  id v414;
  char *v415;
  char *v416;
  void *v417;
  char *v418;
  void *v419;
  void *v420;
  char *v421;
  char *v422;
  void *v423;
  char *v424;
  void *v425;
  void *v426;
  uint64_t v427;
  uint64_t v428;
  void *v429;
  char v430;
  int v432;
  char v437;
  _BOOL4 v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char *v444;
  char *v445;
  uint64_t v447;
  uint64_t **v449;
  uint64_t v450;
  _BOOL4 v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t **v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  uint64_t v460;
  uint64_t v461;
  unsigned int *v462;
  int v463;
  int v464;
  unsigned int *v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  __int128 v473;
  char *v474;
  __int128 v475;
  char *v476;
  __int128 v477;
  uint64_t v478;
  int v479;
  void *__p;
  char *v481;
  void *v482;
  char *v483;
  id *v484;
  _BYTE v485[24];
  _BYTE *v486;
  _BYTE v487[24];
  _BYTE *v488;
  _BYTE v489[24];
  _BYTE *v490;
  _BYTE v491[24];
  _BYTE *v492;
  void **__dst;
  size_t v494;
  unint64_t v495;
  void **v496;
  uint64_t v497;

  v497 = *MEMORY[0x24BDAC8D0];
  v10 = MEMORY[0x23B83EC40]();
  v11 = operator new();
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  v484 = (id *)v11;
  v12 = MTLCreateSystemDefaultDevice();
  v13 = v484;
  v14 = *v484;
  *v484 = v12;

  v15 = (void *)objc_msgSend(*v13, "newCommandQueue");
  v16 = v484[1];
  v484[1] = v15;

  v18 = *a2;
  v17 = a2[1];
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a2) >> 3);
  sub_2399D1AAC(&v482, v19);
  v452 = v18;
  v453 = v17;
  sub_2396DF70C(&__p, v19);
  v20 = off_256934428[0];
  v21 = strlen(off_256934428[0]);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v22 = v21;
  v454 = v19;
  v429 = (void *)v10;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    p_dst = (void **)operator new(v24 + 1);
    v494 = v22;
    v495 = v25 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v495) = v21;
  p_dst = (void **)&__dst;
  if (v21)
LABEL_8:
    memmove(p_dst, v20, v22);
  *((_BYTE *)p_dst + v22) = 0;
  *(_WORD *)v491 = 0;
  v456 = (uint64_t **)(a1 + 56);
  v26 = sub_23958CE84((uint64_t **)(a1 + 56), (uint64_t)v491, (unsigned __int8 *)&__dst);
  v27 = v26;
  if ((SHIBYTE(v495) & 0x80000000) == 0)
  {
    if (v26 != -1)
      goto LABEL_11;
LABEL_16:
    v451 = 0;
    v32 = -1;
    v33 = -1;
    goto LABEL_35;
  }
  operator delete(__dst);
  if (v27 == -1)
    goto LABEL_16;
LABEL_11:
  v28 = off_256934418[0];
  v29 = strlen(off_256934418[0]);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v34 = v29 | 7;
    v35 = v34 + 1;
    v31 = (void **)operator new(v34 + 1);
    v494 = v30;
    v495 = v35 | 0x8000000000000000;
    __dst = v31;
    goto LABEL_20;
  }
  HIBYTE(v495) = v29;
  v31 = (void **)&__dst;
  if (v29)
LABEL_20:
    memmove(v31, v28, v30);
  *((_BYTE *)v31 + v30) = 0;
  *(_QWORD *)&v491[4] = 0;
  *(_DWORD *)v491 = 0;
  v36 = sub_2394E5DE4(v456, (uint64_t)v491, (unsigned __int8 *)&__dst);
  v33 = v36;
  if ((SHIBYTE(v495) & 0x80000000) == 0)
  {
    if (v36 != -1)
      goto LABEL_23;
LABEL_28:
    v451 = 0;
    v32 = -1;
    goto LABEL_35;
  }
  operator delete(__dst);
  if (v33 == -1)
    goto LABEL_28;
LABEL_23:
  v37 = off_256934438[0];
  v38 = strlen(off_256934438[0]);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    sub_23941A5AC();
  v39 = v38;
  if (v38 >= 0x17)
  {
    v41 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v41 = v38 | 7;
    v42 = v41 + 1;
    v40 = (void **)operator new(v41 + 1);
    v494 = v39;
    v495 = v42 | 0x8000000000000000;
    __dst = v40;
    goto LABEL_32;
  }
  HIBYTE(v495) = v38;
  v40 = (void **)&__dst;
  if (v38)
LABEL_32:
    memmove(v40, v37, v39);
  *((_BYTE *)v40 + v39) = 0;
  *(_QWORD *)v491 = 0;
  v32 = sub_2394E5C88((uint64_t **)(a1 + 80), (uint64_t)v491, (unsigned __int8 *)&__dst);
  v451 = v32 != -1;
  if (SHIBYTE(v495) < 0)
    operator delete(__dst);
LABEL_35:
  v43 = &(*v456)[2 * v27];
  v44 = (std::__shared_weak_count *)v43[1];
  v461 = *v43;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(p_shared_owners);
    while (__stxr(v46 + 1, p_shared_owners));
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v48 = &(*v456)[2 * v33];
  v49 = (std::__shared_weak_count *)v48[1];
  v458 = *v48;
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v449 = (uint64_t **)(a1 + 80);
  v53 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 16 * v32);
  v54 = (std::__shared_weak_count *)v53[1];
  v466 = *v53;
  if (!v54)
    goto LABEL_52;
  v55 = (unint64_t *)&v54->__shared_owners_;
  do
    v56 = __ldxr(v55);
  while (__stxr(v56 + 1, v55));
  do
    v57 = __ldaxr(v55);
  while (__stlxr(v57 - 1, v55));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
      goto LABEL_53;
  }
  else
  {
LABEL_52:
    if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
    {
LABEL_53:
      v58 = 0;
      v59 = 0;
      while (1)
      {
        v60 = *(_QWORD *)(v458 + 40) + 12 * v58;
        __dst = *(void ***)v60;
        LODWORD(v494) = *(_DWORD *)(v60 + 8);
        v61 = *(_QWORD *)(v461 + 40);
        v62 = *(unsigned __int16 *)(v61 + 2 * v58);
        v63 = (char *)__p + 24 * *(unsigned __int16 *)(v61 + 2 * v58);
        v65 = (uint64_t *)(v63 + 8);
        v64 = (char *)*((_QWORD *)v63 + 1);
        v66 = *((_QWORD *)v63 + 2);
        v468 = v62;
        v463 = v59;
        if ((unint64_t)v64 >= v66)
          break;
        *(_DWORD *)v64 = v59;
        v67 = (uint64_t)(v64 + 4);
LABEL_77:
        v85 = 0;
        *v65 = v67;
        do
        {
          while (1)
          {
            v86 = (float *)(*(_QWORD *)(v466 + 40) + 8 * *((unsigned int *)&__dst + v85));
            v87 = (char *)v482 + 24 * v62;
            v88 = (float)(*v86 * 2.0) + -1.0;
            v89 = (uint64_t *)(v87 + 8);
            v90 = (float *)*((_QWORD *)v87 + 1);
            v91 = *((_QWORD *)v87 + 2);
            v471 = v85;
            if ((unint64_t)v90 < v91)
            {
              *v90 = v88;
              v92 = (uint64_t)(v90 + 1);
              goto LABEL_102;
            }
            v93 = *(float **)v87;
            v94 = (uint64_t)v90 - *(_QWORD *)v87;
            v95 = v94 >> 2;
            v96 = (v94 >> 2) + 1;
            if (v96 >> 62)
              sub_2394189F8();
            v97 = v91 - (_QWORD)v93;
            if (v97 >> 1 > v96)
              v96 = v97 >> 1;
            if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
              v98 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v98 = v96;
            if (v98)
            {
              if (v98 >> 62)
                sub_239418A80();
              v99 = operator new(4 * v98);
              v100 = (float *)&v99[4 * v95];
              *v100 = v88;
              v92 = (uint64_t)(v100 + 1);
              if (v90 == v93)
                goto LABEL_99;
LABEL_90:
              v101 = (char *)(v90 - 1) - (char *)v93;
              if (v101 < 0x2C)
                goto LABEL_471;
              if ((unint64_t)((char *)v90 - &v99[v94]) < 0x20)
                goto LABEL_471;
              v102 = (v101 >> 2) + 1;
              v103 = 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
              v104 = &v90[v103 / 0xFFFFFFFFFFFFFFFCLL];
              v100 = (float *)((char *)v100 - v103);
              v105 = &v99[4 * v95 - 16];
              v106 = v90 - 4;
              v107 = v102 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v108 = *(_OWORD *)v106;
                *(v105 - 1) = *((_OWORD *)v106 - 1);
                *v105 = v108;
                v105 -= 2;
                v106 -= 8;
                v107 -= 8;
              }
              while (v107);
              v90 = v104;
              if (v102 != (v102 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_471:
                do
                {
                  v109 = *((_DWORD *)v90-- - 1);
                  *((_DWORD *)v100-- - 1) = v109;
                }
                while (v90 != v93);
              }
              goto LABEL_99;
            }
            v99 = 0;
            v100 = (float *)(4 * v95);
            *(float *)(4 * v95) = v88;
            v92 = 4 * v95 + 4;
            if (v90 != v93)
              goto LABEL_90;
LABEL_99:
            *(_QWORD *)v87 = v100;
            *v89 = v92;
            *((_QWORD *)v87 + 2) = &v99[4 * v98];
            if (v93)
              operator delete(v93);
            v62 = v468;
LABEL_102:
            *v89 = v92;
            v110 = (char *)v482 + 24 * v62;
            v111 = (float)(v86[1] * 2.0) + -1.0;
            v113 = (uint64_t *)(v110 + 8);
            v112 = (float *)*((_QWORD *)v110 + 1);
            v114 = *((_QWORD *)v110 + 2);
            if ((unint64_t)v112 < v114)
            {
              *v112 = v111;
              v115 = (uint64_t)(v112 + 1);
              goto LABEL_125;
            }
            v116 = *(float **)v110;
            v117 = (uint64_t)v112 - *(_QWORD *)v110;
            v118 = v117 >> 2;
            v119 = (v117 >> 2) + 1;
            if (v119 >> 62)
              sub_2394189F8();
            v120 = v114 - (_QWORD)v116;
            if (v120 >> 1 > v119)
              v119 = v120 >> 1;
            if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
              v121 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v121 = v119;
            if (v121)
            {
              if (v121 >> 62)
                sub_239418A80();
              v122 = operator new(4 * v121);
              v123 = (float *)&v122[4 * v118];
              *v123 = v111;
              v115 = (uint64_t)(v123 + 1);
              if (v112 == v116)
                goto LABEL_122;
LABEL_113:
              v124 = (char *)(v112 - 1) - (char *)v116;
              if (v124 < 0x2C)
                goto LABEL_472;
              if ((unint64_t)((char *)v112 - &v122[v117]) < 0x20)
                goto LABEL_472;
              v125 = (v124 >> 2) + 1;
              v126 = 4 * (v125 & 0x7FFFFFFFFFFFFFF8);
              v127 = &v112[v126 / 0xFFFFFFFFFFFFFFFCLL];
              v123 = (float *)((char *)v123 - v126);
              v128 = &v122[4 * v118 - 16];
              v129 = v112 - 4;
              v130 = v125 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v131 = *(_OWORD *)v129;
                *(v128 - 1) = *((_OWORD *)v129 - 1);
                *v128 = v131;
                v128 -= 2;
                v129 -= 8;
                v130 -= 8;
              }
              while (v130);
              v112 = v127;
              if (v125 != (v125 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_472:
                do
                {
                  v132 = *((_DWORD *)v112-- - 1);
                  *((_DWORD *)v123-- - 1) = v132;
                }
                while (v112 != v116);
              }
              goto LABEL_122;
            }
            v122 = 0;
            v123 = (float *)(4 * v118);
            *(float *)(4 * v118) = v111;
            v115 = 4 * v118 + 4;
            if (v112 != v116)
              goto LABEL_113;
LABEL_122:
            *(_QWORD *)v110 = v123;
            *v113 = v115;
            *((_QWORD *)v110 + 2) = &v122[4 * v121];
            if (v116)
              operator delete(v116);
            v62 = v468;
LABEL_125:
            *v113 = v115;
            v133 = (char *)v482 + 24 * v62;
            v135 = (uint64_t *)(v133 + 8);
            v134 = (char *)*((_QWORD *)v133 + 1);
            v136 = *((_QWORD *)v133 + 2);
            if ((unint64_t)v134 >= v136)
              break;
            *(_DWORD *)v134 = 0;
            *v135 = (uint64_t)(v134 + 4);
            v85 = v471 + 1;
            if (v471 == 2)
              goto LABEL_54;
          }
          v137 = *(char **)v133;
          v138 = (uint64_t)&v134[-*(_QWORD *)v133];
          v139 = v138 >> 2;
          v140 = (v138 >> 2) + 1;
          if (v140 >> 62)
            sub_2394189F8();
          v141 = v136 - (_QWORD)v137;
          if (v141 >> 1 > v140)
            v140 = v141 >> 1;
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
            v142 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v142 = v140;
          if (!v142)
          {
            v143 = 0;
            v144 = (_DWORD *)(4 * v139);
            *(_DWORD *)(4 * v139) = 0;
            v145 = 4 * v139 + 4;
            if (v134 == v137)
              goto LABEL_143;
LABEL_137:
            v146 = v134 - 4 - v137;
            if (v146 < 0x2C)
              goto LABEL_473;
            if ((unint64_t)(v134 - &v143[v138]) < 0x20)
              goto LABEL_473;
            v147 = (v146 >> 2) + 1;
            v148 = 4 * (v147 & 0x7FFFFFFFFFFFFFF8);
            v149 = &v134[-v148];
            v144 = (_DWORD *)((char *)v144 - v148);
            v150 = &v143[4 * v139 - 16];
            v151 = v134 - 16;
            v152 = v147 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v153 = *(_OWORD *)v151;
              *(v150 - 1) = *((_OWORD *)v151 - 1);
              *v150 = v153;
              v150 -= 2;
              v151 -= 32;
              v152 -= 8;
            }
            while (v152);
            v134 = v149;
            if (v147 != (v147 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_473:
              do
              {
                v154 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *--v144 = v154;
              }
              while (v134 != v137);
            }
            goto LABEL_143;
          }
          if (v142 >> 62)
            sub_239418A80();
          v143 = operator new(4 * v142);
          v144 = &v143[4 * v139];
          *v144 = 0;
          v145 = (uint64_t)(v144 + 1);
          if (v134 != v137)
            goto LABEL_137;
LABEL_143:
          *(_QWORD *)v133 = v144;
          *v135 = v145;
          *((_QWORD *)v133 + 2) = &v143[4 * v142];
          if (v137)
            operator delete(v137);
          v62 = v468;
          *v135 = v145;
          v85 = v471 + 1;
        }
        while (v471 != 2);
LABEL_54:
        v58 = (v463 + 1);
        v59 = v463 + 1;
        if (v58 >= (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2)
          goto LABEL_148;
      }
      v68 = *(char **)v63;
      v69 = (uint64_t)&v64[-*(_QWORD *)v63];
      v70 = v69 >> 2;
      v71 = (v69 >> 2) + 1;
      if (v71 >> 62)
        sub_2394189F8();
      v72 = v66 - (_QWORD)v68;
      if (v72 >> 1 > v71)
        v71 = v72 >> 1;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
        v73 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
      {
        if (v73 >> 62)
          sub_239418A80();
        v74 = operator new(4 * v73);
        v75 = &v74[4 * v70];
        *v75 = v59;
        v67 = (uint64_t)(v75 + 1);
        if (v64 == v68)
          goto LABEL_74;
      }
      else
      {
        v74 = 0;
        v75 = (_DWORD *)(4 * v70);
        *(_DWORD *)(4 * v70) = v59;
        v67 = 4 * v70 + 4;
        if (v64 == v68)
        {
LABEL_74:
          *(_QWORD *)v63 = v75;
          *v65 = v67;
          *((_QWORD *)v63 + 2) = &v74[4 * v73];
          if (v68)
            operator delete(v68);
          v62 = v468;
          goto LABEL_77;
        }
      }
      v76 = v64 - 4 - v68;
      if (v76 < 0x2C)
        goto LABEL_474;
      if ((unint64_t)(v64 - &v74[v69]) < 0x20)
        goto LABEL_474;
      v77 = (v76 >> 2) + 1;
      v78 = 4 * (v77 & 0x7FFFFFFFFFFFFFF8);
      v79 = &v64[-v78];
      v75 = (_DWORD *)((char *)v75 - v78);
      v80 = &v74[4 * v70 - 16];
      v81 = v64 - 16;
      v82 = v77 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v83 = *(_OWORD *)v81;
        *(v80 - 1) = *((_OWORD *)v81 - 1);
        *v80 = v83;
        v80 -= 2;
        v81 -= 32;
        v82 -= 8;
      }
      while (v82);
      v64 = v79;
      if (v77 != (v77 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_474:
        do
        {
          v84 = *((_DWORD *)v64 - 1);
          v64 -= 4;
          *--v75 = v84;
        }
        while (v64 != v68);
      }
      goto LABEL_74;
    }
  }
LABEL_148:
  v156 = *(_DWORD *)(*a2 + 4);
  v155 = *(_DWORD *)(*a2 + 8);
  if (v155 == 0x4000)
    v157 = 0x2000;
  else
    v157 = 0x4000;
  if (v155 == 0x4000)
    v158 = 0x2000;
  else
    v158 = *(_DWORD *)(*a2 + 8);
  if (v156 == 0x4000)
    v159 = v157;
  else
    v159 = v156;
  v160 = v156 == 0x4000 && v155 == 0x4000;
  if (v156 == 0x4000)
    v161 = v158;
  else
    v161 = v155;
  v162 = (void *)objc_opt_new();
  objc_msgSend(v162, "setWidth:", v159);
  objc_msgSend(v162, "setHeight:", v161);
  objc_msgSend(v162, "setArrayLength:", 1);
  objc_msgSend(v162, "setTextureType:", 2);
  objc_msgSend(v162, "setStorageMode:", 0);
  objc_msgSend(v162, "setPixelFormat:", 53);
  objc_msgSend(v162, "setUsage:", 4);
  v163 = (void *)objc_msgSend(*v484, "newTextureWithDescriptor:", v162);
  v164 = v484[4];
  v484[4] = v163;

  v165 = (void *)objc_opt_new();
  objc_msgSend(v165, "setWidth:", v159);
  objc_msgSend(v165, "setHeight:", v161);
  objc_msgSend(v165, "setArrayLength:", 1);
  objc_msgSend(v165, "setTextureType:", 2);
  objc_msgSend(v165, "setStorageMode:", 0);
  objc_msgSend(v165, "setPixelFormat:", 125);
  objc_msgSend(v165, "setUsage:", 4);
  v166 = (void *)objc_msgSend(*v484, "newTextureWithDescriptor:", v165);
  v167 = v484[3];
  v484[3] = v166;

  v168 = (void *)objc_opt_new();
  objc_msgSend(v168, "setWidth:", v159);
  objc_msgSend(v168, "setHeight:", v161);
  objc_msgSend(v168, "setArrayLength:", 1);
  objc_msgSend(v168, "setTextureType:", 2);
  objc_msgSend(v168, "setStorageMode:", 0);
  objc_msgSend(v168, "setPixelFormat:", 53);
  objc_msgSend(v168, "setUsage:", 4);
  v169 = (void *)objc_msgSend(*v484, "newTextureWithDescriptor:", v168);
  v170 = v484[5];
  v484[5] = v169;

  if (v484[4] && v484[3] && v484[5])
  {

    v479 = 0;
    HIBYTE(v479) = objc_msgSend(*v484, "areBarycentricCoordsSupported") ^ 1;
    if (!v451)
    {
      v189 = 0;
      goto LABEL_200;
    }
    v173 = v484;
    v174 = a9[3];
    if (v174)
    {
      if ((_QWORD *)v174 == a9)
      {
        v490 = v489;
        (*(void (**)(_QWORD *, _BYTE *))(*a9 + 24))(a9, v489);
        goto LABEL_195;
      }
      v174 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v174 + 16))(v174);
    }
    v490 = (_BYTE *)v174;
LABEL_195:
    v189 = sub_2399CDB8C((uint64_t)v173, v171, a6, a7, a8, (uint64_t)v489, a10);
    v190 = v490;
    if (v490 == v489)
    {
      v191 = 4;
      v190 = v489;
      goto LABEL_199;
    }
    if (v490)
    {
      v191 = 5;
LABEL_199:
      (*(void (**)(void))(*v190 + 8 * v191))();
    }
LABEL_200:
    if (v160)
    {
      v477 = xmmword_239F038A0;
      v475 = xmmword_239F038A0;
      v473 = xmmword_239F038A0;
      v478 = operator new[]();
      v192 = (char *)operator new[]();
      memset(v192, 255, 0x10000000uLL);
      v476 = v192;
      v193 = (_OWORD *)operator new[]();
      *v193 = xmmword_239F038B0;
      v194 = (char *)(v193 + 1);
      bzero(v193 + 1, 0x40000000uLL);
      v474 = v194;
      if (!v189)
      {
        v438 = 0;
        v221 = -1;
        v222 = -1;
        goto LABEL_253;
      }
      v196 = off_256934418[0];
      v197 = strlen(off_256934418[0]);
      if (v197 > 0x7FFFFFFFFFFFFFF7)
        sub_23941A5AC();
      v198 = v197;
      if (v197 >= 0x17)
      {
        v223 = (v197 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v197 | 7) != 0x17)
          v223 = v197 | 7;
        v224 = v223 + 1;
        v199 = (void **)operator new(v223 + 1);
        v494 = v198;
        v495 = v224 | 0x8000000000000000;
        __dst = v199;
      }
      else
      {
        HIBYTE(v495) = v197;
        v199 = (void **)&__dst;
        if (!v197)
          goto LABEL_239;
      }
      memmove(v199, v196, v198);
LABEL_239:
      *((_BYTE *)v199 + v198) = 0;
      *(_QWORD *)&v491[4] = 0;
      *(_DWORD *)v491 = 0;
      v222 = sub_2394E5DE4(v456, (uint64_t)v491, (unsigned __int8 *)&__dst);
      if (SHIBYTE(v495) < 0)
        operator delete(__dst);
      if (v222 != -1)
      {
        v225 = off_256934438[0];
        v226 = strlen(off_256934438[0]);
        if (v226 > 0x7FFFFFFFFFFFFFF7)
          sub_23941A5AC();
        v227 = v226;
        if (v226 >= 0x17)
        {
          v229 = (v226 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v226 | 7) != 0x17)
            v229 = v226 | 7;
          v230 = v229 + 1;
          v228 = (void **)operator new(v229 + 1);
          v494 = v227;
          v495 = v230 | 0x8000000000000000;
          __dst = v228;
        }
        else
        {
          HIBYTE(v495) = v226;
          v228 = (void **)&__dst;
          if (!v226)
          {
LABEL_251:
            *((_BYTE *)v228 + v227) = 0;
            *(_QWORD *)v491 = 0;
            v221 = sub_2394E5C88(v449, (uint64_t)v491, (unsigned __int8 *)&__dst);
            v438 = v221 != -1;
            if (SHIBYTE(v495) < 0)
              operator delete(__dst);
            goto LABEL_253;
          }
        }
        memmove(v228, v225, v227);
        goto LABEL_251;
      }
      v438 = 0;
      v221 = -1;
LABEL_253:
      v231 = &(*v456)[2 * v222];
      v232 = (std::__shared_weak_count *)v231[1];
      v447 = *v231;
      if (v232)
      {
        v233 = (unint64_t *)&v232->__shared_owners_;
        do
          v234 = __ldxr(v233);
        while (__stxr(v234 + 1, v233));
        do
          v235 = __ldaxr(v233);
        while (__stlxr(v235 - 1, v233));
        if (!v235)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
      }
      v236 = &(*v449)[2 * v221];
      v237 = (std::__shared_weak_count *)v236[1];
      v467 = *v236;
      if (v237)
      {
        v238 = (unint64_t *)&v237->__shared_owners_;
        do
          v239 = __ldxr(v238);
        while (__stxr(v239 + 1, v238));
        do
          v240 = __ldaxr(v238);
        while (__stlxr(v240 - 1, v238));
        if (!v240)
        {
          ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
          std::__shared_weak_count::__release_weak(v237);
        }
      }
      if (v453 != v452)
      {
        v241 = 0;
        if (v454 <= 1)
          v242 = 1;
        else
          v242 = v454;
        v427 = v242;
        do
        {
          v243 = 0;
          v428 = v241;
          v472 = (int)v241;
          v244 = 1;
          do
          {
            v459 = 0;
            v430 = v244;
            v432 = v243;
            v245 = -(float)(2 * v243);
            v246 = 1;
            do
            {
              v437 = v246;
              *((_QWORD *)v482 + 3 * (int)v472 + 1) = *((_QWORD *)v482 + 3 * (int)v472);
              if (*(_QWORD *)(a1 + 160) != *(_QWORD *)(a1 + 152))
              {
                v247 = 0;
                v248 = 0;
                do
                {
                  v464 = v248;
                  v249 = 0;
                  v250 = *(_QWORD *)(v447 + 40) + 12 * v247;
                  __dst = *(void ***)v250;
                  LODWORD(v494) = *(_DWORD *)(v250 + 8);
                  do
                  {
                    v252 = (float *)(*(_QWORD *)(v467 + 40) + 8 * *((unsigned int *)&__dst + v249));
                    v253 = (char *)v482 + 24 * (int)v472;
                    v254 = (float)(v245 + (float)((float)(*v252 + *v252) * 2.0)) + -1.0;
                    v256 = (uint64_t *)(v253 + 8);
                    v255 = (float *)*((_QWORD *)v253 + 1);
                    v257 = *((_QWORD *)v253 + 2);
                    v469 = v249;
                    if ((unint64_t)v255 < v257)
                    {
                      *v255 = v254;
                      v258 = (uint64_t)(v255 + 1);
                      goto LABEL_302;
                    }
                    v259 = *(float **)v253;
                    v260 = (uint64_t)v255 - *(_QWORD *)v253;
                    v261 = v260 >> 2;
                    v262 = (v260 >> 2) + 1;
                    if (v262 >> 62)
                      goto LABEL_454;
                    v263 = v257 - (_QWORD)v259;
                    if (v263 >> 1 > v262)
                      v262 = v263 >> 1;
                    if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFFCLL)
                      v264 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v264 = v262;
                    if (v264)
                    {
                      if (v264 >> 62)
                        goto LABEL_455;
                      v265 = operator new(4 * v264);
                      v266 = (float *)&v265[4 * v261];
                      *v266 = v254;
                      v258 = (uint64_t)(v266 + 1);
                      if (v255 == v259)
                        goto LABEL_300;
LABEL_291:
                      v267 = (char *)(v255 - 1) - (char *)v259;
                      if (v267 < 0x2C)
                        goto LABEL_475;
                      if ((unint64_t)((char *)v255 - &v265[v260]) < 0x20)
                        goto LABEL_475;
                      v268 = (v267 >> 2) + 1;
                      v269 = 4 * (v268 & 0x7FFFFFFFFFFFFFF8);
                      v270 = &v255[v269 / 0xFFFFFFFFFFFFFFFCLL];
                      v266 = (float *)((char *)v266 - v269);
                      v271 = &v265[4 * v261 - 16];
                      v272 = v255 - 4;
                      v273 = v268 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v274 = *(_OWORD *)v272;
                        *(v271 - 1) = *((_OWORD *)v272 - 1);
                        *v271 = v274;
                        v271 -= 2;
                        v272 -= 8;
                        v273 -= 8;
                      }
                      while (v273);
                      v255 = v270;
                      if (v268 != (v268 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_475:
                        do
                        {
                          v275 = *((_DWORD *)v255-- - 1);
                          *((_DWORD *)v266-- - 1) = v275;
                        }
                        while (v255 != v259);
                      }
                      goto LABEL_300;
                    }
                    v265 = 0;
                    v266 = (float *)(4 * v261);
                    *(float *)(4 * v261) = v254;
                    v258 = 4 * v261 + 4;
                    if (v255 != v259)
                      goto LABEL_291;
LABEL_300:
                    *(_QWORD *)v253 = v266;
                    *v256 = v258;
                    *((_QWORD *)v253 + 2) = &v265[4 * v264];
                    if (v259)
                      operator delete(v259);
LABEL_302:
                    *v256 = v258;
                    v276 = (char *)v482 + 24 * (int)v472;
                    v277 = (float)((float)((float)(v252[1] + v252[1]) * 2.0) - (float)(2 * v459)) + -1.0;
                    v279 = (uint64_t *)(v276 + 8);
                    v278 = (float *)*((_QWORD *)v276 + 1);
                    v280 = *((_QWORD *)v276 + 2);
                    if ((unint64_t)v278 < v280)
                    {
                      *v278 = v277;
                      v281 = (uint64_t)(v278 + 1);
                      goto LABEL_323;
                    }
                    v282 = *(float **)v276;
                    v283 = (uint64_t)v278 - *(_QWORD *)v276;
                    v284 = v283 >> 2;
                    v285 = (v283 >> 2) + 1;
                    if (v285 >> 62)
                      goto LABEL_454;
                    v286 = v280 - (_QWORD)v282;
                    if (v286 >> 1 > v285)
                      v285 = v286 >> 1;
                    if ((unint64_t)v286 >= 0x7FFFFFFFFFFFFFFCLL)
                      v287 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v287 = v285;
                    if (v287)
                    {
                      if (v287 >> 62)
                        goto LABEL_455;
                      v288 = operator new(4 * v287);
                      v289 = (float *)&v288[4 * v284];
                      *v289 = v277;
                      v281 = (uint64_t)(v289 + 1);
                      if (v278 == v282)
                        goto LABEL_321;
LABEL_315:
                      v290 = (char *)(v278 - 1) - (char *)v282;
                      if (v290 < 0x2C)
                        goto LABEL_476;
                      if ((unint64_t)((char *)v278 - &v288[v283]) < 0x20)
                        goto LABEL_476;
                      v291 = (v290 >> 2) + 1;
                      v292 = 4 * (v291 & 0x7FFFFFFFFFFFFFF8);
                      v293 = &v278[v292 / 0xFFFFFFFFFFFFFFFCLL];
                      v289 = (float *)((char *)v289 - v292);
                      v294 = &v288[4 * v284 - 16];
                      v295 = v278 - 4;
                      v296 = v291 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v297 = *(_OWORD *)v295;
                        *(v294 - 1) = *((_OWORD *)v295 - 1);
                        *v294 = v297;
                        v294 -= 2;
                        v295 -= 8;
                        v296 -= 8;
                      }
                      while (v296);
                      v278 = v293;
                      if (v291 != (v291 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_476:
                        do
                        {
                          v298 = *((_DWORD *)v278-- - 1);
                          *((_DWORD *)v289-- - 1) = v298;
                        }
                        while (v278 != v282);
                      }
                      goto LABEL_321;
                    }
                    v288 = 0;
                    v289 = (float *)(4 * v284);
                    *(float *)(4 * v284) = v277;
                    v281 = 4 * v284 + 4;
                    if (v278 != v282)
                      goto LABEL_315;
LABEL_321:
                    *(_QWORD *)v276 = v289;
                    *v279 = v281;
                    *((_QWORD *)v276 + 2) = &v288[4 * v287];
                    if (v282)
                      operator delete(v282);
LABEL_323:
                    *v279 = v281;
                    v299 = (char *)v482 + 24 * (int)v472;
                    v300 = (uint64_t *)(v299 + 8);
                    v301 = (char *)*((_QWORD *)v299 + 1);
                    v302 = *((_QWORD *)v299 + 2);
                    if ((unint64_t)v301 < v302)
                    {
                      *(_DWORD *)v301 = 0;
                      v251 = (uint64_t)(v301 + 4);
                      goto LABEL_279;
                    }
                    v303 = *(char **)v299;
                    v304 = (uint64_t)&v301[-*(_QWORD *)v299];
                    v305 = v304 >> 2;
                    v306 = (v304 >> 2) + 1;
                    if (v306 >> 62)
LABEL_454:
                      sub_2394189F8();
                    v307 = v302 - (_QWORD)v303;
                    if (v307 >> 1 > v306)
                      v306 = v307 >> 1;
                    if ((unint64_t)v307 >= 0x7FFFFFFFFFFFFFFCLL)
                      v308 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v308 = v306;
                    if (v308)
                    {
                      if (v308 >> 62)
LABEL_455:
                        sub_239418A80();
                      v309 = operator new(4 * v308);
                      v310 = &v309[4 * v305];
                      *v310 = 0;
                      v251 = (uint64_t)(v310 + 1);
                      if (v301 == v303)
                        goto LABEL_341;
LABEL_335:
                      v311 = v301 - 4 - v303;
                      if (v311 < 0x2C)
                        goto LABEL_477;
                      if ((unint64_t)(v301 - &v309[v304]) < 0x20)
                        goto LABEL_477;
                      v312 = (v311 >> 2) + 1;
                      v313 = 4 * (v312 & 0x7FFFFFFFFFFFFFF8);
                      v314 = &v301[-v313];
                      v310 = (_DWORD *)((char *)v310 - v313);
                      v315 = &v309[4 * v305 - 16];
                      v316 = v301 - 16;
                      v317 = v312 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        v318 = *(_OWORD *)v316;
                        *(v315 - 1) = *((_OWORD *)v316 - 1);
                        *v315 = v318;
                        v315 -= 2;
                        v316 -= 32;
                        v317 -= 8;
                      }
                      while (v317);
                      v301 = v314;
                      if (v312 != (v312 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_477:
                        do
                        {
                          v319 = *((_DWORD *)v301 - 1);
                          v301 -= 4;
                          *--v310 = v319;
                        }
                        while (v301 != v303);
                      }
                      goto LABEL_341;
                    }
                    v309 = 0;
                    v310 = (_DWORD *)(4 * v305);
                    *(_DWORD *)(4 * v305) = 0;
                    v251 = 4 * v305 + 4;
                    if (v301 != v303)
                      goto LABEL_335;
LABEL_341:
                    *(_QWORD *)v299 = v310;
                    *v300 = v251;
                    *((_QWORD *)v299 + 2) = &v309[4 * v308];
                    if (v303)
                      operator delete(v303);
LABEL_279:
                    *v300 = v251;
                    v249 = v469 + 1;
                  }
                  while (v469 != 2);
                  v247 = (v464 + 1);
                  v248 = v464 + 1;
                }
                while (v247 < (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 2);
              }
              BYTE2(v479) = 1;
              LOWORD(v479) = 1;
              if (!v438)
              {
                v324 = 0;
                BYTE2(v479) = 0;
                LOWORD(v479) = 256;
                goto LABEL_366;
              }
              v320 = v484;
              v321 = v482;
              v322 = __p;
              v323 = a9[3];
              if (!v323)
                goto LABEL_347;
              if ((_QWORD *)v323 != a9)
              {
                v323 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v323 + 16))(v323);
LABEL_347:
                v496 = (void **)v323;
                goto LABEL_350;
              }
              v496 = (void **)&__dst;
              (*(void (**)(_QWORD *, void ***))(*a9 + 24))(a9, &__dst);
LABEL_350:
              v325 = sub_2399CDC84((uint64_t)v320, (unsigned __int8 *)&v479, (uint64_t)v321 + 24 * v472, &v322[3 * v472], (uint64_t)&v477, (uint64_t)&v475, (uint64_t)&v473, v195, a6, a7, (uint64_t)&__dst);
              v326 = v496;
              if (v496 == (void **)&__dst)
              {
                v326 = (void **)&__dst;
                v327 = 4;
              }
              else
              {
                if (!v496)
                  goto LABEL_355;
                v327 = 5;
              }
              (*((void (**)(void))*v326 + v327))();
LABEL_355:
              v324 = 0;
              BYTE2(v479) = 0;
              LOWORD(v479) = 256;
              if (!v325)
                goto LABEL_366;
              v328 = v484;
              v329 = v482;
              v330 = __p;
              v331 = a9[3];
              if (!v331)
                goto LABEL_359;
              if ((_QWORD *)v331 != a9)
              {
                v331 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v331 + 16))(v331);
LABEL_359:
                v492 = (_BYTE *)v331;
                goto LABEL_361;
              }
              v492 = v491;
              (*(void (**)(_QWORD *, _BYTE *))(*a9 + 24))(a9, v491);
LABEL_361:
              v324 = sub_2399CDC84((uint64_t)v328, (unsigned __int8 *)&v479, (uint64_t)v329 + 24 * v472, &v330[3 * v472], (uint64_t)&v477, (uint64_t)&v475, (uint64_t)&v473, v195, a6, a7, (uint64_t)v491);
              v332 = v492;
              if (v492 == v491)
              {
                v332 = v491;
                v333 = 4;
              }
              else
              {
                if (!v492)
                  goto LABEL_366;
                v333 = 5;
              }
              (*(void (**)(void))(*v332 + 8 * v333))();
LABEL_366:
              v438 = v324;
              v334 = DWORD1(v477);
              if (!DWORD1(v477) || !DWORD2(v477))
                goto LABEL_273;
              v335 = *a3 + 24 * v472;
              v336 = (_QWORD *)(v335 + 16);
              v337 = (unsigned int *)(v335 + 4);
              v338 = (unsigned int *)(v335 + 12);
              v339 = *a4 + 24 * v472;
              v340 = (_QWORD *)(v339 + 16);
              v341 = (unsigned int *)(v339 + 4);
              v342 = (unsigned int *)(v339 + 12);
              v343 = (DWORD1(v477) * v432);
              v344 = HIDWORD(v477);
              v345 = v476;
              v346 = HIDWORD(v475);
              v347 = v474;
              v348 = HIDWORD(v473);
              if (!HIDWORD(v477))
              {
                if (HIDWORD(v475))
                {
                  if (DWORD2(v477) <= 1uLL)
                    v381 = 1;
                  else
                    v381 = DWORD2(v477);
                  v382 = (DWORD2(v477) * v459);
                  if (HIDWORD(v473))
                  {
                    v383 = 0;
                    v384 = 4 * HIDWORD(v475);
                    v385 = 4 * DWORD1(v475) * (unint64_t)HIDWORD(v475);
                    v386 = 16 * HIDWORD(v473);
                    v387 = 16 * DWORD1(v473) * (unint64_t)HIDWORD(v473);
                    do
                    {
                      v388 = 0;
                      v389 = v347;
                      v390 = v345;
                      v391 = v382;
                      do
                      {
                        v392 = 0;
                        do
                        {
                          *(_DWORD *)(*v336 + 4 * (v343 + v391 * *v337) * *v338 + v392) = *(_DWORD *)&v390[v392];
                          v392 += 4;
                        }
                        while (v384 != v392);
                        v195 = 0;
                        do
                        {
                          *(_OWORD *)(*v340 + 16 * (v343 + v391 * *v341) * *v342 + v195) = *(_OWORD *)&v389[v195];
                          v195 += 16;
                        }
                        while (v386 != v195);
                        ++v388;
                        ++v391;
                        v390 += v385;
                        v389 += v387;
                      }
                      while (v388 != v381);
                      ++v383;
                      ++v343;
                      v345 += v384;
                      v347 += v386;
                    }
                    while (v383 != v334);
                  }
                  else
                  {
                    v402 = 0;
                    v403 = 4 * HIDWORD(v475);
                    v404 = 4 * DWORD1(v475) * (unint64_t)HIDWORD(v475);
                    do
                    {
                      v405 = 0;
                      v406 = v345;
                      v407 = v382;
                      do
                      {
                        v408 = 0;
                        do
                        {
                          *(_DWORD *)(*v336 + 4 * (v343 + v407 * *v337) * *v338 + v408) = *(_DWORD *)&v406[v408];
                          v408 += 4;
                        }
                        while (v403 != v408);
                        ++v405;
                        ++v407;
                        v406 += v404;
                      }
                      while (v405 != v381);
                      ++v402;
                      ++v343;
                      v345 += v403;
                    }
                    while (v402 != v334);
                  }
                }
                else if (HIDWORD(v473))
                {
                  v393 = 0;
                  if (DWORD2(v477) <= 1uLL)
                    v394 = 1;
                  else
                    v394 = DWORD2(v477);
                  v395 = (DWORD2(v477) * v459);
                  v396 = 16 * HIDWORD(v473);
                  v397 = 16 * DWORD1(v473) * (unint64_t)HIDWORD(v473);
                  do
                  {
                    v398 = 0;
                    v399 = v347;
                    v400 = v395;
                    do
                    {
                      v401 = 0;
                      do
                      {
                        *(_OWORD *)(*v340 + 16 * (v343 + v400 * *v341) * *v342 + v401) = *(_OWORD *)&v399[v401];
                        v401 += 16;
                      }
                      while (v396 != v401);
                      ++v398;
                      ++v400;
                      v399 += v397;
                    }
                    while (v398 != v394);
                    ++v393;
                    ++v343;
                    v347 += v396;
                  }
                  while (v393 != v334);
                }
                goto LABEL_273;
              }
              v349 = 0;
              v350 = *a2 + 24 * v472;
              v470 = (uint64_t *)(v350 + 16);
              v462 = (unsigned int *)(v350 + 12);
              v465 = (unsigned int *)(v350 + 4);
              if (DWORD2(v477) <= 1uLL)
                v351 = 1;
              else
                v351 = DWORD2(v477);
              v460 = (DWORD2(v477) * v459);
              v352 = DWORD1(v477) * (unint64_t)HIDWORD(v477);
              v353 = v478 + 16;
              v354 = 4 * HIDWORD(v475);
              v355 = 4 * DWORD1(v475) * (unint64_t)HIDWORD(v475);
              v356 = 16 * HIDWORD(v473);
              v195 = 16 * DWORD1(v473) * (unint64_t)HIDWORD(v473);
              v439 = v478;
              v440 = DWORD1(v477);
              v357 = v478;
              v358 = (DWORD1(v477) * v432);
              v450 = v195;
              while (2)
              {
                v359 = 0;
                v457 = v439 + v349 * v344;
                v443 = v349;
                v444 = v345;
                v455 = v349 + v343;
                v445 = v347;
                v360 = v345;
                v441 = v357;
                v442 = v353;
                v361 = v357;
                v362 = v460;
                v363 = (__int128 *)v353;
                do
                {
                  v364 = *v470;
                  v365 = *v465;
                  v366 = *v462;
                  v367 = v358 + v362 * v365;
                  if (v344 < 8
                    || (v455 + (v359 + v460) * v365) * v366 + v364 - (v457 + v352 * v359) < 0x20)
                  {
                    v368 = 0;
LABEL_379:
                    v369 = v364 + v367 * v366;
                    do
                    {
                      *(_BYTE *)(v369 + v368) = *(_BYTE *)(v361 + v368);
                      ++v368;
                    }
                    while (v344 != v368);
                    goto LABEL_381;
                  }
                  if (v344 >= 0x20)
                  {
                    v373 = (_OWORD *)(v364 + v367 * v366 + 16);
                    v374 = v344 & 0xFFFFFFE0;
                    v375 = v363;
                    do
                    {
                      v376 = *v375;
                      *(v373 - 1) = *(v375 - 1);
                      *v373 = v376;
                      v375 += 2;
                      v373 += 2;
                      v374 -= 32;
                    }
                    while (v374);
                    if ((v344 & 0xFFFFFFE0) == v344)
                      goto LABEL_381;
                    v368 = v344 & 0xFFFFFFE0;
                    v372 = v368;
                    if ((v344 & 0x18) == 0)
                      goto LABEL_379;
                  }
                  else
                  {
                    v372 = 0;
                  }
                  v377 = (uint64_t *)(v361 + v372);
                  v378 = (_QWORD *)(v364 + v372 + v367 * v366);
                  v379 = v372 - (v344 & 0xFFFFFFF8);
                  do
                  {
                    v380 = *v377++;
                    *v378++ = v380;
                    v379 += 8;
                  }
                  while (v379);
                  v368 = v344 & 0xFFFFFFF8;
                  v195 = v450;
                  if (v368 != v344)
                    goto LABEL_379;
LABEL_381:
                  if (v346)
                  {
                    v370 = 0;
                    do
                    {
                      *(_DWORD *)(*v336 + 4 * (v358 + v362 * *v337) * *v338 + v370) = *(_DWORD *)&v360[v370];
                      v370 += 4;
                    }
                    while (v354 != v370);
                  }
                  if (v348)
                  {
                    v371 = 0;
                    do
                    {
                      *(_OWORD *)(*v340 + 16 * (v358 + v362 * *v341) * *v342 + v371) = *(_OWORD *)&v347[v371];
                      v371 += 16;
                    }
                    while (v356 != v371);
                  }
                  ++v359;
                  v363 = (__int128 *)((char *)v363 + v352);
                  ++v362;
                  v361 += v352;
                  v360 += v355;
                  v347 += v195;
                }
                while (v359 != v351);
                v349 = v443 + 1;
                v353 = v442 + v344;
                ++v358;
                v357 = v441 + v344;
                v345 = &v444[v354];
                v347 = &v445[v356];
                if (v443 + 1 != v440)
                  continue;
                break;
              }
LABEL_273:
              v246 = 0;
              v459 = 1;
            }
            while ((v437 & 1) != 0);
            v244 = 0;
            v243 = 1;
          }
          while ((v430 & 1) != 0);
          v241 = v428 + 1;
        }
        while (v428 + 1 != v427);
      }
      if (v474)
        MEMORY[0x23B83E2F8](v474 - 16, 0x1000C80451B5BE8);
      v189 = v438;
      if (v476)
        MEMORY[0x23B83E2F8](v476, 0x1000C8052888210);
      if (v478)
        MEMORY[0x23B83E2F8](v478, 0x1000C8077774924);
      goto LABEL_437;
    }
    if (v453 == v452)
    {
LABEL_437:
      v409 = v484[4];
      v484[4] = 0;

      v410 = v484[3];
      v484[3] = 0;

      v411 = v484[5];
      v484[5] = 0;

      v412 = v484[2];
      v484[2] = 0;

      v413 = v484[1];
      v484[1] = 0;

      v414 = *v484;
      *v484 = 0;

      v415 = (char *)__p;
      if (__p)
      {
        v416 = v481;
        v417 = __p;
        if (v481 != __p)
        {
          v418 = v481;
          do
          {
            v420 = (void *)*((_QWORD *)v418 - 3);
            v418 -= 24;
            v419 = v420;
            if (v420)
            {
              *((_QWORD *)v416 - 2) = v419;
              operator delete(v419);
            }
            v416 = v418;
          }
          while (v418 != v415);
          v417 = __p;
        }
        v481 = v415;
        operator delete(v417);
      }
      v421 = (char *)v482;
      if (v482)
      {
        v422 = v483;
        v423 = v482;
        if (v483 != v482)
        {
          v424 = v483;
          do
          {
            v426 = (void *)*((_QWORD *)v424 - 3);
            v424 -= 24;
            v425 = v426;
            if (v426)
            {
              *((_QWORD *)v422 - 2) = v425;
              operator delete(v425);
            }
            v422 = v424;
          }
          while (v424 != v421);
          v423 = v482;
        }
        v483 = v421;
        operator delete(v423);
      }
      sub_2399D1D10(&v484, 0);
      objc_autoreleasePoolPop(v429);
      return v189;
    }
    v200 = 0;
    if (v454 <= 1)
      v201 = 1;
    else
      v201 = v454;
    while (1)
    {
      BYTE2(v479) = 1;
      LOWORD(v479) = 1;
      if (!v189)
      {
        v189 = 0;
        BYTE2(v479) = 0;
        LOWORD(v479) = 256;
        goto LABEL_211;
      }
      v202 = v484;
      v203 = v482;
      v204 = (char *)__p;
      v205 = *a2;
      v206 = *a3;
      v207 = *a4;
      v208 = a9[3];
      if (!v208)
        goto LABEL_216;
      if ((_QWORD *)v208 != a9)
        break;
      v488 = v487;
      (*(void (**)(_QWORD *, _BYTE *))(*a9 + 24))(a9, v487);
LABEL_218:
      v209 = sub_2399CDC84((uint64_t)v202, (unsigned __int8 *)&v479, (uint64_t)v203 + v200, &v204[v200], v205 + v200, v206 + v200, v207 + v200, v172, a6, a7, (uint64_t)v487);
      v210 = v488;
      if (v488 == v487)
      {
        v210 = v487;
        v211 = 4;
      }
      else
      {
        if (!v488)
          goto LABEL_223;
        v211 = 5;
      }
      (*(void (**)(void))(*v210 + 8 * v211))();
LABEL_223:
      v189 = 0;
      BYTE2(v479) = 0;
      LOWORD(v479) = 256;
      if (!v209)
        goto LABEL_211;
      v212 = v484;
      v213 = v482;
      v214 = (char *)__p;
      v215 = *a2;
      v216 = *a3;
      v217 = *a4;
      v218 = a9[3];
      if (v218)
      {
        if ((_QWORD *)v218 == a9)
        {
          v486 = v485;
          (*(void (**)(_QWORD *, _BYTE *))(*a9 + 24))(a9, v485);
          goto LABEL_229;
        }
        v218 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v218 + 16))(v218);
      }
      v486 = (_BYTE *)v218;
LABEL_229:
      v189 = sub_2399CDC84((uint64_t)v212, (unsigned __int8 *)&v479, (uint64_t)v213 + v200, &v214[v200], v215 + v200, v216 + v200, v217 + v200, v172, a6, a7, (uint64_t)v485);
      v219 = v486;
      if (v486 == v485)
      {
        v219 = v485;
        v220 = 4;
        goto LABEL_233;
      }
      if (v486)
      {
        v220 = 5;
LABEL_233:
        (*(void (**)(void))(*v219 + 8 * v220))();
      }
LABEL_211:
      v200 += 24;
      if (!--v201)
        goto LABEL_437;
    }
    v208 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v208 + 16))(v208);
LABEL_216:
    v488 = (_BYTE *)v208;
    goto LABEL_218;
  }
  if (a7)
    *(_DWORD *)(a6 + 384) = 2;
  v175 = a9[3];
  if (v175)
  {
    HIBYTE(v495) = 0;
    LOBYTE(__dst) = 0;
    *(_DWORD *)v491 = 2;
    (*(void (**)(uint64_t, _BYTE *, void ***))(*(_QWORD *)v175 + 48))(v175, v491, &__dst);
    if (SHIBYTE(v495) < 0)
      operator delete(__dst);
  }

  v176 = (char *)__p;
  if (__p)
  {
    v177 = v481;
    v178 = __p;
    if (v481 != __p)
    {
      v179 = v481;
      do
      {
        v181 = (void *)*((_QWORD *)v179 - 3);
        v179 -= 24;
        v180 = v181;
        if (v181)
        {
          *((_QWORD *)v177 - 2) = v180;
          operator delete(v180);
        }
        v177 = v179;
      }
      while (v179 != v176);
      v178 = __p;
    }
    v481 = v176;
    operator delete(v178);
  }
  v182 = (char *)v482;
  if (v482)
  {
    v183 = v483;
    v184 = v482;
    if (v483 != v482)
    {
      v185 = v483;
      do
      {
        v187 = (void *)*((_QWORD *)v185 - 3);
        v185 -= 24;
        v186 = v187;
        if (v187)
        {
          *((_QWORD *)v183 - 2) = v186;
          operator delete(v186);
        }
        v183 = v185;
      }
      while (v185 != v182);
      v184 = v482;
    }
    v483 = v182;
    operator delete(v184);
  }
  sub_2399D1D10(&v484, 0);
  objc_autoreleasePoolPop(v429);
  return 0;
}

void sub_2399D1790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char *__p,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t a64;
  id *a66;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  void *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;

  if (*(char *)(v66 - 153) < 0)
    operator delete(*(void **)(v66 - 176));
  if (a49)
  {
    MEMORY[0x23B83E2F8](a49 - 16, 0x1000C80451B5BE8);
    v68 = a53;
    if (!a53)
    {
LABEL_5:
      v69 = a57;
      if (!a57)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else
  {
    v68 = a53;
    if (!a53)
      goto LABEL_5;
  }
  MEMORY[0x23B83E2F8](v68, 0x1000C8052888210);
  v69 = a57;
  if (!a57)
  {
LABEL_7:
    if (__p)
    {
      v71 = a61;
      v72 = __p;
      if ((char *)a61 != __p)
      {
        v73 = (char *)a61;
        do
        {
          v75 = (void *)*((_QWORD *)v73 - 3);
          v73 -= 24;
          v74 = v75;
          if (v75)
          {
            *(_QWORD *)(v71 - 16) = v74;
            operator delete(v74);
          }
          v71 = (uint64_t)v73;
        }
        while (v73 != __p);
        v72 = __p;
      }
      operator delete(v72);
      v70 = a63;
      if (!a63)
      {
LABEL_9:
        sub_2399D1D10(&a66, 0);
        _Unwind_Resume(a1);
      }
    }
    else
    {
      v70 = a63;
      if (!a63)
        goto LABEL_9;
    }
    v76 = a64;
    v77 = v70;
    if ((void *)a64 != v70)
    {
      v78 = a64;
      do
      {
        v80 = *(void **)(v78 - 24);
        v78 -= 24;
        v79 = v80;
        if (v80)
        {
          *(_QWORD *)(v76 - 16) = v79;
          operator delete(v79);
        }
        v76 = v78;
      }
      while ((void *)v78 != v70);
      v77 = a63;
    }
    operator delete(v77);
    sub_2399D1D10(&a66, 0);
    _Unwind_Resume(a1);
  }
LABEL_6:
  MEMORY[0x23B83E2F8](v69, 0x1000C8077774924);
  goto LABEL_7;
}

_QWORD *sub_2399D1AAC(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_2394189F8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_2399D1B54(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    sub_239EC32F8((uint64_t)(v1 + 1), *v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_2399D1B74(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8, _QWORD *a9, unsigned __int8 a10)
{
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  _BOOL8 v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v18 = (void *)MEMORY[0x23B83EC40]();
  v19 = (_QWORD *)a9[3];
  if (v19)
  {
    if (v19 == a9)
    {
      v25 = v24;
      (*(void (**)(_QWORD *, _QWORD *))(*a9 + 24))(a9, v24);
    }
    else
    {
      v25 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19);
    }
  }
  else
  {
    v25 = 0;
  }
  v20 = sub_2399CF5D0(a1, a2, a4, a3, v17, a6, a7, a8, v24, a10);
  v21 = v25;
  if (v25 == v24)
  {
    v22 = 4;
    v21 = v24;
    goto LABEL_10;
  }
  if (v25)
  {
    v22 = 5;
LABEL_10:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  objc_autoreleasePoolPop(v18);
  return v20;
}

void sub_2399D1CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  if (a15 == v15)
  {
    (*(void (**)(void))(a12 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (a15)
  {
    (*(void (**)(void))(*(_QWORD *)a15 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

id **sub_2399D1D10(id **result, id *a2)
{
  id *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x23B83E31CLL);
  }
  return result;
}

unint64_t sub_2399D1D84(unint64_t result)
{
  unint64_t v1;

  v1 = result % *MEMORY[0x24BDB03C8];
  if (v1)
    return *MEMORY[0x24BDB03C8] + result - v1;
  return result;
}

uint64_t sub_2399D1DAC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t *a11, uint64_t a12, unsigned __int8 a13)
{
  void *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  int v34;
  unsigned int v35;
  __int128 v36;
  float32x2_t v37;
  unsigned int v38;
  int v39;
  int v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int32x2_t v44;
  int32x2_t v45;
  int32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t *v52;
  int v53;
  unsigned int v54;
  float v55;
  float v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  float64x2_t v88;
  float v89;
  float v90;
  float v91;
  float32x2_t v92;
  float32x2_t v93;
  id v94;
  float v95;
  __int128 v96;
  void *v97;
  unint64_t v98;
  int64x2_t v99;
  unint64_t v100;
  int64x2_t v101;
  id v102;
  id v103;
  int v104;
  void *v105[2];
  char v106;
  int v107;
  int v108;
  _DWORD v109[3];

  v107 = a6;
  v108 = a5;
  v19 = (void *)MEMORY[0x23B83EC40]();
  v20 = (a6 * a5);
  v21 = (_QWORD *)MEMORY[0x24BDB03C8];
  v22 = 12 * v20 % *MEMORY[0x24BDB03C8];
  if (v22)
    v23 = *MEMORY[0x24BDB03C8] + 12 * v20 - v22;
  else
    v23 = 12 * v20;
  v24 = (void *)objc_msgSend(*a1, "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(a2 + 16), v23, 0, 0);
  v25 = 4 * v20;
  v26 = v25 % *v21;
  if (v26)
    v27 = *v21 + v25 - v26;
  else
    v27 = 4 * v20;
  v28 = (void *)objc_msgSend(*a1, "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(a3 + 16), v27, 0, 0);
  v29 = v25 % *v21;
  if (v29)
    v30 = *v21 + v25 - v29;
  else
    v30 = 4 * v20;
  v31 = objc_msgSend(*a1, "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(a4 + 16), v30, 0, 0);
  v32 = (void *)v31;
  if (v24 && v28 && v31)
  {
    v84 = v19;
    v85 = (void *)v31;
    v86 = v28;
    v87 = v24;
    v104 = 31;
    v33 = (char *)operator new(0xF04uLL);
    bzero(v33, 0xF04uLL);
    v34 = 0;
    v35 = 0;
    LODWORD(v36) = 0;
    v37 = (float32x2_t)vdup_n_s32(0x424C0520u);
    v88 = (float64x2_t)vdupq_n_s64(0x3F798FE8B00194AEuLL);
    do
    {
      v38 = (v34 - 15) * (v34 - 15);
      if (v35 < 0xFFFFFFE2)
      {
        v40 = 0;
        v41 = vdup_n_s32(v38);
        v42 = (int32x2_t)0x100000000;
        do
        {
          v43 = vadd_s32(v42, (int32x2_t)0xE0000000ELL);
          v44 = vadd_s32(v42, (int32x2_t)0xC0000000CLL);
          v45 = vmla_s32(v41, v43, v43);
          v46 = vmla_s32(v41, v44, v44);
          v47 = vdiv_f32(vcvt_f32_s32(vneg_s32(v45)), v37);
          v89 = v47.f32[0];
          v93 = vdiv_f32(vcvt_f32_s32(vneg_s32(v46)), v37);
          v95 = *(float *)&v36;
          v91 = expf(v47.f32[1]);
          v48.f32[0] = expf(v89);
          v48.f32[1] = v91;
          v92 = v48;
          v90 = expf(v93.f32[1]);
          v49.f32[0] = expf(v93.f32[0]);
          v49.f32[1] = v90;
          v50 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v92), v88));
          v51 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v49), v88));
          v52 = (float32x2_t *)&v33[4 * v35 + 4 * v40];
          *v52 = v50;
          v52[1] = v51;
          *(float *)&v36 = (float)((float)((float)(v95 + v50.f32[0]) + v50.f32[1]) + v51.f32[0]) + v51.f32[1];
          v40 += 4;
          v42 = vadd_s32(v42, (int32x2_t)0x400000004);
        }
        while (v40 != 28);
        v39 = 28;
        v35 += 28;
      }
      else
      {
        v39 = 0;
      }
      v53 = v39 - 15;
      do
      {
        v96 = v36;
        v54 = v35;
        v55 = expf((float)-(v38 + v53 * v53) / 51.005);
        v36 = v96;
        v56 = v55 * 0.00624075788;
        *(float *)&v36 = *(float *)&v96 + v56;
        ++v35;
        *(float *)&v33[4 * v54] = v56;
        ++v53;
      }
      while (v53 != 16);
      ++v34;
    }
    while (v34 != 31);
    v57 = 0;
    v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v36, 0);
    do
    {
      v59 = (float32x4_t *)&v33[v57];
      v60 = vdivq_f32(*(float32x4_t *)&v33[v57 + 16], v58);
      *v59 = vdivq_f32(*(float32x4_t *)&v33[v57], v58);
      v59[1] = v60;
      v61 = vdivq_f32(*(float32x4_t *)&v33[v57 + 48], v58);
      v59[2] = vdivq_f32(*(float32x4_t *)&v33[v57 + 32], v58);
      v59[3] = v61;
      v62 = vdivq_f32(*(float32x4_t *)&v33[v57 + 80], v58);
      v59[4] = vdivq_f32(*(float32x4_t *)&v33[v57 + 64], v58);
      v59[5] = v62;
      v59[6] = vdivq_f32(*(float32x4_t *)&v33[v57 + 96], v58);
      *(float32x2_t *)v59[7].f32 = vdiv_f32(*(float32x2_t *)&v33[v57 + 112], *(float32x2_t *)v58.f32);
      v59[7].f32[2] = *(float *)&v33[v57 + 120] / *(float *)&v36;
      v57 += 124;
    }
    while ((_DWORD)v57 != 3844);
    v63 = *a1;
    v103 = 0;
    v32 = v85;
    sub_2399FA2BC(v63, (uint64_t)&v103, a11, a13);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    v65 = v103;
    if (v65)
    {
      v66 = v65;
      if (a10)
        *(_DWORD *)(a9 + 384) = 5;
      v67 = *(_QWORD *)(a12 + 24);
      if (v67)
      {
        v106 = 0;
        LOBYTE(v105[0]) = 0;
        v109[0] = 5;
        (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v67 + 48))(v67, v109, v105);
        if (v106 < 0)
          operator delete(v105[0]);
      }
      v68 = 1;
      v69 = 1;
    }
    else
    {
      v71 = objc_alloc_init(MEMORY[0x24BDDD550]);
      objc_msgSend(v71, "setThreadGroupSizeIsMultipleOfThreadExecutionWidth:", 1);
      v72 = (void *)objc_msgSend(v64, "newFunctionWithName:", CFSTR("wkecUsTj5u"));
      objc_msgSend(v71, "setComputeFunction:", v72);

      v73 = *a1;
      v102 = 0;
      v74 = (void *)objc_msgSend(v73, "newComputePipelineStateWithDescriptor:options:reflection:error:", v71, 0, 0, &v102);
      v66 = v102;
      v97 = v74;
      if (v74)
      {
        v94 = v71;
        objc_msgSend(a1[1], "commandBuffer");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        v76 = objc_msgSend(v74, "maxTotalThreadsPerThreadgroup");
        if (v76 >= v20)
          v77 = v20;
        else
          v77 = v76;
        objc_msgSend(v75, "computeCommandEncoder");
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v78, "setBuffer:offset:atIndex:", v87, 0, 0);
        objc_msgSend(v78, "setBuffer:offset:atIndex:", v86, 0, 1);
        objc_msgSend(v78, "setBuffer:offset:atIndex:", v85, 0, 2);
        objc_msgSend(v78, "setBytes:length:atIndex:", v33, 3844, 3);
        objc_msgSend(v78, "setBytes:length:atIndex:", &v104, 4, 4);
        objc_msgSend(v78, "setBytes:length:atIndex:", &v108, 4, 5);
        objc_msgSend(v78, "setBytes:length:atIndex:", &v107, 4, 6);
        objc_msgSend(v78, "setComputePipelineState:", v97);
        v100 = v20;
        v101 = vdupq_n_s64(1uLL);
        v98 = v77;
        v99 = v101;
        objc_msgSend(v78, "dispatchThreads:threadsPerThreadgroup:", &v100, &v98);
        objc_msgSend(v78, "endEncoding");
        sub_2399FCF18();
        objc_msgSend(v75, "commit");
        objc_msgSend(v75, "waitUntilCompleted");
        objc_msgSend(v75, "error");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = sub_2399F93F8(v79);

        if (v80)
        {
          if (a10)
            *(_DWORD *)(a9 + 384) = 16;
          v81 = *(_QWORD *)(a12 + 24);
          if (v81)
          {
            v106 = 0;
            LOBYTE(v105[0]) = 0;
            v109[0] = 16;
            (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v81 + 48))(v81, v109, v105);
            if (v106 < 0)
              operator delete(v105[0]);
          }
        }
        v69 = v80 ^ 1;

        v68 = 0;
        v71 = v94;
      }
      else
      {
        if (a10)
          *(_DWORD *)(a9 + 384) = 5;
        v82 = *(_QWORD *)(a12 + 24);
        if (v82)
        {
          v106 = 0;
          LOBYTE(v105[0]) = 0;
          v109[0] = 5;
          (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v82 + 48))(v82, v109, v105);
          if (v106 < 0)
            operator delete(v105[0]);
        }
        v68 = 1;
        v69 = 1;
      }

    }
    operator delete(v33);
    v28 = v86;
    v24 = v87;
    v19 = v84;
  }
  else
  {
    if (a10)
      *(_DWORD *)(a9 + 384) = 2;
    v70 = *(_QWORD *)(a12 + 24);
    if (v70)
    {
      v106 = 0;
      LOBYTE(v105[0]) = 0;
      v109[0] = 2;
      (*(void (**)(uint64_t, _DWORD *, void **))(*(_QWORD *)v70 + 48))(v70, v109, v105);
      if (v106 < 0)
        operator delete(v105[0]);
    }
    v68 = 1;
    v69 = 1;
  }

  objc_autoreleasePoolPop(v19);
  if (v68)
    return 0;
  else
    return v69;
}

void sub_2399D2510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  if (*(char *)(v32 - 169) < 0)
    operator delete(*(void **)(v32 - 192));

  operator delete(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_2399D265C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t *a7, _QWORD *a8, unsigned __int8 a9)
{
  int v13;
  int v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *context;
  id v29[2];
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v13 = *(_DWORD *)(a1 + 4);
  v14 = *(_DWORD *)(a1 + 8);
  context = (void *)MEMORY[0x23B83EC40]();
  v15 = (void *)MEMORY[0x23B83EC40]();
  v16 = MTLCreateSystemDefaultDevice();
  v29[0] = v16;
  v17 = (void *)objc_msgSend(v16, "newCommandQueue");
  v29[1] = v17;
  objc_autoreleasePoolPop(v15);
  v20 = a8[3];
  if (!v20)
    goto LABEL_4;
  if ((_QWORD *)v20 != a8)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
LABEL_4:
    v31 = (_BYTE *)v20;
    goto LABEL_6;
  }
  v31 = v30;
  (*(void (**)(_QWORD *, _BYTE *))(*a8 + 24))(a8, v30);
LABEL_6:
  v21 = sub_2399D1DAC(v29, a1, a2, a3, v13, v14, v18, v19, a5, a6, a7, (uint64_t)v30, a9);
  v22 = v31;
  if (v31 == v30)
  {
    v23 = 4;
    v22 = v30;
    goto LABEL_10;
  }
  if (v31)
  {
    v23 = 5;
LABEL_10:
    (*(void (**)(void))(*v22 + 8 * v23))();
  }

  objc_autoreleasePoolPop(context);
  return v21;
}

void sub_2399D27E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  void *v24;
  char *v26;
  uint64_t v27;

  v26 = a23;
  if (a23 == v23)
  {
    v27 = 4;
    v26 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:

  _Unwind_Resume(a1);
}

uint64_t sub_2399D2838(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char **v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v9 = (char *)a1[18];
  v10 = (char *)a1[19];
  v8 = (char **)(a1 + 18);
  if (v10 != v9)
  {
    do
    {
      v11 = (void *)*((_QWORD *)v10 - 5);
      if (v11)
      {
        *((_QWORD *)v10 - 4) = v11;
        operator delete(v11);
      }
      v10 -= 48;
    }
    while (v10 != v9);
    v10 = *v8;
  }
  v12 = a1[21];
  a1[19] = v9;
  a1[22] = v12;
  qword_256934460 = a4;
  if (!a3)
    a3 = a4 * a2;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 4);
  if (a2 <= v13)
  {
    if (a2 < v13)
    {
      v14 = &v10[48 * a2];
      while (v9 != v14)
      {
        v15 = (void *)*((_QWORD *)v9 - 5);
        if (v15)
        {
          *((_QWORD *)v9 - 4) = v15;
          operator delete(v15);
        }
        v9 -= 48;
      }
      a1[19] = v14;
    }
  }
  else
  {
    sub_2399D4600(v8, a2 - v13);
  }
  v16 = (_BYTE *)a1[21];
  if (2 * a3 > (unint64_t)((uint64_t)(a1[23] - (_QWORD)v16) >> 4))
  {
    if ((unint64_t)(2 * a3) >> 60)
      sub_2394189F8();
    v17 = (_BYTE *)a1[22];
    v18 = (char *)operator new(32 * a3);
    v19 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFF0];
    v20 = v19;
    if (v17 != v16)
    {
      v21 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v20 = v21 - 16;
        *((_OWORD *)v21 - 1) = *((_OWORD *)v17 - 1);
        v17 -= 16;
        v21 -= 16;
      }
      while (v17 != v16);
    }
    a1[21] = v20;
    a1[22] = v19;
    a1[23] = &v18[32 * a3];
    if (v16)
      operator delete(v16);
  }
  return 1;
}

uint64_t sub_2399D29BC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t sub_2399D29E0(_QWORD *a1)
{
  return (*a1)++;
}

void sub_2399D29F4(_QWORD *a1, int a2, int a3, float a4, float a5)
{
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _DWORD *v37;
  char *v38;
  int64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  int v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _BYTE *v74;
  _DWORD *v75;
  char *v76;
  int64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  _OWORD *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  int v86;
  _QWORD *v87;
  int v88;

  v9 = a1 + 21;
  v11 = (_QWORD *)a1[22];
  v10 = a1[23];
  v87 = a1 + 21;
  if ((unint64_t)v11 < v10)
  {
    *v11 = 0;
    v11[1] = 0;
    v12 = (uint64_t)(v11 + 2);
    goto LABEL_18;
  }
  v13 = (_QWORD *)*v9;
  v14 = ((uint64_t)v11 - *v9) >> 4;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 60)
    goto LABEL_81;
  v16 = v10 - (_QWORD)v13;
  if (v16 >> 3 > v15)
    v15 = v16 >> 3;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
    v17 = 0xFFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 60)
      goto LABEL_80;
    v18 = (char *)operator new(16 * v17);
    v19 = &v18[16 * v14];
    v20 = &v18[16 * v17];
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    v12 = (uint64_t)(v19 + 16);
    if (v11 == v13)
      goto LABEL_16;
  }
  else
  {
    v19 = (char *)(16 * v14);
    v20 = 0;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    v12 = 16 * v14 + 16;
    if (v11 == v13)
      goto LABEL_16;
  }
  do
  {
    *((_OWORD *)v19 - 1) = *((_OWORD *)v11 - 1);
    v19 -= 16;
    v11 -= 2;
  }
  while (v11 != v13);
  v11 = (_QWORD *)*v9;
LABEL_16:
  a1[21] = v19;
  a1[22] = v12;
  a1[23] = v20;
  if (v11)
    operator delete(v11);
LABEL_18:
  a1[22] = v12;
  v21 = ((unint64_t)(v12 - a1[21]) >> 4) - 1;
  *(float *)(v12 - 16) = a4;
  *(float *)(v12 - 12) = a4;
  v22 = a1[18] + 48 * a2;
  v25 = *(_QWORD *)(v22 + 24);
  v24 = (_QWORD *)(v22 + 24);
  v23 = v25;
  v26 = v24 - 1;
  v27 = (char *)*(v24 - 1);
  v88 = a2;
  if ((unint64_t)v27 < v25)
  {
    *(_DWORD *)v27 = v21;
    v28 = (uint64_t)(v27 + 4);
    goto LABEL_40;
  }
  v29 = v24 - 2;
  v30 = (char *)*(v24 - 2);
  v31 = v27 - v30;
  v32 = (v27 - v30) >> 2;
  v33 = v32 + 1;
  if ((unint64_t)(v32 + 1) >> 62)
    sub_2394189F8();
  v34 = v23 - (_QWORD)v30;
  if (v34 >> 1 > v33)
    v33 = v34 >> 1;
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
    v35 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v35 = v33;
  if (v35)
  {
    if (v35 >> 62)
      goto LABEL_80;
    v36 = operator new(4 * v35);
    v29 = v24 - 2;
    v31 = v27 - v30;
    v37 = &v36[4 * v32];
    v38 = &v36[4 * v35];
    *v37 = v21;
    v28 = (uint64_t)(v37 + 1);
    v39 = v27 - v30;
    if (v27 == v30)
      goto LABEL_38;
    goto LABEL_29;
  }
  v36 = 0;
  v37 = (_DWORD *)(4 * v32);
  v38 = 0;
  *(_DWORD *)(4 * v32) = v21;
  v28 = 4 * v32 + 4;
  v39 = v27 - v30;
  if (v27 != v30)
  {
LABEL_29:
    v40 = v39 - 4;
    if (v40 < 0x2C)
      goto LABEL_86;
    if ((unint64_t)(v27 - v36 - v31) < 0x20)
      goto LABEL_86;
    v41 = (v40 >> 2) + 1;
    v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
    v43 = &v27[-v42];
    v37 = (_DWORD *)((char *)v37 - v42);
    v44 = &v36[4 * v32 - 16];
    v45 = v27 - 16;
    v46 = v41 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v47 = *(_OWORD *)v45;
      *(v44 - 1) = *((_OWORD *)v45 - 1);
      *v44 = v47;
      v44 -= 2;
      v45 -= 32;
      v46 -= 8;
    }
    while (v46);
    v27 = v43;
    if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_86:
      do
      {
        v48 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *--v37 = v48;
      }
      while (v27 != v30);
    }
  }
LABEL_38:
  *v29 = v37;
  *v26 = v28;
  *v24 = v38;
  if (v30)
    operator delete(v30);
LABEL_40:
  v49 = a3;
  *v26 = v28;
  *(_DWORD *)(v12 - 8) = a2;
  *(_DWORD *)(v12 - 4) = a3;
  v51 = (_QWORD *)a1[22];
  v50 = a1[23];
  if ((unint64_t)v51 < v50)
  {
    *v51 = 0;
    v51[1] = 0;
    v52 = (uint64_t)(v51 + 2);
    goto LABEL_57;
  }
  v53 = (_QWORD *)*v87;
  v54 = ((uint64_t)v51 - *v87) >> 4;
  v55 = v54 + 1;
  if ((unint64_t)(v54 + 1) >> 60)
LABEL_81:
    sub_2394189F8();
  v56 = v50 - (_QWORD)v53;
  if (v56 >> 3 > v55)
    v55 = v56 >> 3;
  if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
    v57 = 0xFFFFFFFFFFFFFFFLL;
  else
    v57 = v55;
  if (v57)
  {
    if (v57 >> 60)
      goto LABEL_80;
    v58 = (char *)operator new(16 * v57);
    v59 = &v58[16 * v54];
    v60 = &v58[16 * v57];
    *(_QWORD *)v59 = 0;
    *((_QWORD *)v59 + 1) = 0;
    v52 = (uint64_t)(v59 + 16);
    if (v51 == v53)
      goto LABEL_55;
  }
  else
  {
    v59 = (char *)(16 * v54);
    v60 = 0;
    *(_QWORD *)v59 = 0;
    *((_QWORD *)v59 + 1) = 0;
    v52 = 16 * v54 + 16;
    if (v51 == v53)
      goto LABEL_55;
  }
  do
  {
    *((_OWORD *)v59 - 1) = *((_OWORD *)v51 - 1);
    v59 -= 16;
    v51 -= 2;
  }
  while (v51 != v53);
  v51 = (_QWORD *)*v87;
LABEL_55:
  a1[21] = v59;
  a1[22] = v52;
  a1[23] = v60;
  if (v51)
    operator delete(v51);
LABEL_57:
  a1[22] = v52;
  v61 = ((unint64_t)(v52 - a1[21]) >> 4) - 1;
  *(float *)(v52 - 16) = a5;
  *(float *)(v52 - 12) = a5;
  v62 = a1[18] + 48 * a3;
  v65 = *(_QWORD *)(v62 + 24);
  v64 = (_QWORD *)(v62 + 24);
  v63 = v65;
  v66 = v64 - 1;
  v67 = (char *)*(v64 - 1);
  if ((unint64_t)v67 < v65)
  {
    *(_DWORD *)v67 = v61;
    v68 = (uint64_t)(v67 + 4);
    goto LABEL_79;
  }
  v69 = (char *)*(v64 - 2);
  v70 = (v67 - v69) >> 2;
  v71 = v70 + 1;
  if ((unint64_t)(v70 + 1) >> 62)
    sub_2394189F8();
  v72 = v63 - (_QWORD)v69;
  if (v72 >> 1 > v71)
    v71 = v72 >> 1;
  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
    v73 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v73 = v71;
  if (v73)
  {
    if (!(v73 >> 62))
    {
      v74 = operator new(4 * v73);
      v75 = &v74[4 * v70];
      v76 = &v74[4 * v73];
      *v75 = v61;
      v68 = (uint64_t)(v75 + 1);
      v77 = v67 - v69;
      if (v67 != v69)
        goto LABEL_68;
LABEL_71:
      v49 = a3;
      goto LABEL_77;
    }
LABEL_80:
    sub_239418A80();
  }
  v74 = 0;
  v75 = (_DWORD *)(4 * v70);
  v76 = 0;
  *(_DWORD *)(4 * v70) = v61;
  v68 = 4 * v70 + 4;
  v77 = v67 - v69;
  if (v67 == v69)
    goto LABEL_71;
LABEL_68:
  v78 = v77 - 4;
  if (v78 < 0x2C)
  {
    v49 = a3;
    do
    {
LABEL_76:
      v86 = *((_DWORD *)v67 - 1);
      v67 -= 4;
      *--v75 = v86;
    }
    while (v67 != v69);
    goto LABEL_77;
  }
  v49 = a3;
  if ((unint64_t)(v69 - v74) < 0x20)
    goto LABEL_76;
  v79 = (v78 >> 2) + 1;
  v80 = 4 * (v79 & 0x7FFFFFFFFFFFFFF8);
  v81 = &v67[-v80];
  v75 = (_DWORD *)((char *)v75 - v80);
  v82 = &v74[4 * v70 - 16];
  v83 = v67 - 16;
  v84 = v79 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v85 = *(_OWORD *)v83;
    *(v82 - 1) = *((_OWORD *)v83 - 1);
    *v82 = v85;
    v82 -= 2;
    v83 -= 32;
    v84 -= 8;
  }
  while (v84);
  v67 = v81;
  if (v79 != (v79 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_76;
LABEL_77:
  *(v64 - 2) = v75;
  *v66 = v68;
  *v64 = v76;
  if (v69)
    operator delete(v69);
LABEL_79:
  *v66 = v68;
  *(_DWORD *)(v52 - 8) = v49;
  *(_DWORD *)(v52 - 4) = v88;
}

float sub_2399D2F20(uint64_t a1, int a2, float a3, float a4, double a5)
{
  float result;

  *(float *)&a5 = a3 - a4;
  *(int32x2_t *)(*(_QWORD *)(a1 + 144) + 48 * a2) = vdup_lane_s32(*(int32x2_t *)&a5, 0);
  if (a4 < a3)
    a3 = a4;
  result = a3 + *(float *)(a1 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

void sub_2399D2F50(uint64_t a1)
{
  void *v1;
  void **v2;
  __int128 v3;
  void *v4;
  uint64_t v5;
  void **v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  void **v27;
  void **v28;

  v1 = *(void **)(a1 + 96);
  v2 = *(void ***)(a1 + 104);
  v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v4 = *(void **)(a1 + 48);
  v6 = *(void ***)(a1 + 56);
  v5 = a1 + 48;
  v28 = (void **)v3;
  v7 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v27 = (void **)v7;
  v8 = *(_QWORD *)(a1 + 144);
  if ((int)(-1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 152) - v8) >> 4)) >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = v8 + v10;
      v17 = *(float *)(v16 + 4);
      if (v17 > 0.0)
        break;
      if (v17 >= 0.0)
      {
        *(_OWORD *)(v16 + 32) = xmmword_239F038D0;
        goto LABEL_4;
      }
      v20 = ((v13 - v12) << 7) - 1;
      *(_OWORD *)(v16 + 32) = xmmword_239F038E0;
      if (v13 == v12)
        v20 = 0;
      v19 = v14 + v11;
      if (v20 == v14 + v11)
        goto LABEL_9;
LABEL_3:
      *(_DWORD *)(*(_QWORD *)(v12 + ((v19 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v19 & 0x3FF)) = v15;
      *(_QWORD *)(a1 + 88) = ++v14;
LABEL_4:
      ++v15;
      v8 = *(_QWORD *)(a1 + 144);
      v10 += 48;
      if (v15 >= (int)(-1431655765 * ((unint64_t)(*(_QWORD *)(a1 + 152) - v8) >> 4)))
        goto LABEL_16;
    }
    v18 = ((v13 - v12) << 7) - 1;
    *(_OWORD *)(v16 + 32) = xmmword_239F038F0;
    if (v13 == v12)
      v18 = 0;
    v19 = v14 + v11;
    if (v18 != v14 + v11)
      goto LABEL_3;
LABEL_9:
    sub_2399D3FD8(v5);
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(a1 + 64);
    v11 = *(_QWORD *)(a1 + 80);
    v14 = *(_QWORD *)(a1 + 88);
    v19 = v11 + v14;
    goto LABEL_3;
  }
LABEL_16:
  v21 = (char *)v27 - (char *)v6;
  if ((unint64_t)((char *)v27 - (char *)v6) >= 0x11)
  {
    do
    {
      v22 = *v6++;
      operator delete(v22);
      v21 -= 8;
    }
    while (v21 > 0x10);
  }
  while (v6 != v27)
  {
    v23 = *v6++;
    operator delete(v23);
  }
  if (v4)
    operator delete(v4);
  v24 = (char *)v28 - (char *)v2;
  if ((unint64_t)((char *)v28 - (char *)v2) >= 0x11)
  {
    do
    {
      v25 = *v2++;
      operator delete(v25);
      v24 -= 8;
    }
    while (v24 > 0x10);
  }
  while (v2 != v28)
  {
    v26 = *v2++;
    operator delete(v26);
  }
  if (v1)
    operator delete(v1);
}

void sub_2399D31B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_23953439C((uint64_t)va);
  sub_23953439C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2399D31CC(_QWORD *a1)
{
  uint64_t v1;
  void **v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;

  v1 = a1[11];
  if (!v1)
    return 0;
  v33 = (uint64_t)(a1 + 6);
  v3 = (void **)a1[7];
  v4 = a1[10];
  while (1)
  {
    v5 = (*(_DWORD **)((char *)v3 + ((v4 >> 7) & 0x1FFFFFFFFFFFFF8)))[v4 & 0x3FF];
    a1[10] = ++v4;
    a1[11] = v1 - 1;
    if (v4 >= 0x800)
    {
      operator delete(*v3);
      v3 = (void **)(a1[7] + 8);
      a1[7] = v3;
      v4 = a1[10] - 1024;
      a1[10] = v4;
    }
    v6 = a1[18];
    v7 = v6 + 48 * v5;
    v9 = *(_DWORD *)(v7 + 40);
    v8 = (_DWORD *)(v7 + 40);
    if (v9)
    {
      v10 = v6 + 48 * v5;
      v13 = *(_QWORD *)(v10 + 8);
      v12 = (uint64_t *)(v10 + 8);
      v11 = v13;
      if (v12[1] != v13)
        break;
    }
LABEL_3:
    v1 = a1[11];
    if (!v1)
      return 0;
  }
  v14 = 0;
  v15 = (_DWORD *)(v6 + 48 * v5 + 44);
  v34 = v15;
  while (1)
  {
    v18 = *(int *)(v11 + 4 * v14);
    v19 = a1[21];
    v20 = *(_DWORD *)(v19 + 16 * v18 + 12);
    v21 = a1[18];
    v22 = *(_DWORD *)(v21 + 48 * v20 + 40);
    if (*v8 != 1)
      break;
    if (v22 == 1 || *(float *)(v19 + 16 * v18 + 4) <= 0.0)
      goto LABEL_11;
    v23 = (void **)a1[8];
    if (v23 == v3)
      v24 = 0;
    else
      v24 = (((char *)v23 - (char *)v3) << 7) - 1;
    v25 = a1[11];
    v26 = v25 + v4;
    if (v22 == 2)
    {
      if (v24 == v26)
      {
        sub_2399D3FD8(v33);
        v3 = (void **)a1[7];
        v25 = a1[11];
        v26 = a1[10] + v25;
      }
      (*(_DWORD **)((char *)v3 + ((v26 >> 7) & 0x1FFFFFFFFFFFFF8)))[v26 & 0x3FF] = v5;
      a1[11] = v25 + 1;
      v30 = (uint64_t)a1;
      v31 = v5;
      v32 = v20;
      goto LABEL_37;
    }
    if (v24 == v26)
    {
      sub_2399D3FD8(v33);
      v15 = v34;
      v3 = (void **)a1[7];
      v4 = a1[10];
      v25 = a1[11];
      v26 = v4 + v25;
    }
    HIDWORD(v16) = 1;
LABEL_10:
    LODWORD(v16) = v18;
    (*(_DWORD **)((char *)v3 + ((v26 >> 7) & 0x1FFFFFFFFFFFFF8)))[v26 & 0x3FF] = v20;
    a1[11] = v25 + 1;
    v17 = v21 + 48 * v20;
    *(_DWORD *)(v17 + 32) = v5;
    *(_DWORD *)(v17 + 44) = *v15 + 1;
    *(_QWORD *)(v17 + 36) = v16;
LABEL_11:
    ++v14;
    v11 = *v12;
    if (v14 >= (v12[1] - *v12) >> 2)
      goto LABEL_3;
  }
  if (v22 == 2)
    goto LABEL_11;
  v18 ^= 1uLL;
  if (*(float *)(v19 + 16 * v18 + 4) <= 0.0)
    goto LABEL_11;
  v27 = (void **)a1[8];
  if (v27 == v3)
    v28 = 0;
  else
    v28 = (((char *)v27 - (char *)v3) << 7) - 1;
  v25 = a1[11];
  v26 = v25 + v4;
  if (v22 != 1)
  {
    if (v28 == v26)
    {
      sub_2399D3FD8(v33);
      v15 = v34;
      v3 = (void **)a1[7];
      v4 = a1[10];
      v25 = a1[11];
      v26 = v4 + v25;
    }
    HIDWORD(v16) = 2;
    goto LABEL_10;
  }
  if (v28 == v26)
  {
    sub_2399D3FD8(v33);
    v3 = (void **)a1[7];
    v25 = a1[11];
    v26 = a1[10] + v25;
  }
  (*(_DWORD **)((char *)v3 + ((v26 >> 7) & 0x1FFFFFFFFFFFFF8)))[v26 & 0x3FF] = v5;
  a1[11] = v25 + 1;
  v30 = (uint64_t)a1;
  v31 = v20;
  v32 = v5;
LABEL_37:
  sub_2399D34B0(v30, v31, v32, v18);
  return 1;
}

void sub_2399D34B0(uint64_t a1, int a2, int a3, int a4)
{
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _DWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _DWORD *v53;
  unint64_t v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  void **v64;

  v7 = *(char **)(a1 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v64 = (void **)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v7 >= v8)
  {
    v10 = v8 - (_QWORD)v7;
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12)
      v13 = v11;
    if (v13 >> 62)
LABEL_74:
      sub_239418A80();
    v14 = v13;
    v15 = operator new(4 * v13);
    v16 = &v15[v14];
    *v15 = a4;
    v9 = (char *)(v15 + 1);
    *(_QWORD *)(a1 + 24) = v15;
    *(_QWORD *)(a1 + 32) = v15 + 1;
    *(_QWORD *)(a1 + 40) = v16;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_DWORD *)v7 = a4;
    v9 = v7 + 4;
  }
  *(_QWORD *)(a1 + 32) = v9;
  while (1)
  {
    v18 = *(_QWORD *)(a1 + 144);
    v19 = *(_DWORD *)(v18 + 48 * a2 + 32);
    if (v19 == -11)
      break;
    v20 = *(_DWORD *)(v18 + 48 * a2 + 36);
    v21 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v9 < v21)
    {
      *(_DWORD *)v9 = v20;
      v17 = (uint64_t)(v9 + 4);
      goto LABEL_12;
    }
    v22 = (char *)*v64;
    v23 = v9 - (_BYTE *)*v64;
    v24 = v23 >> 2;
    v25 = (v23 >> 2) + 1;
    if (v25 >> 62)
LABEL_73:
      sub_2394189F8();
    v26 = v21 - (_QWORD)v22;
    if (v26 >> 1 > v25)
      v25 = v26 >> 1;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 62)
        goto LABEL_74;
      v28 = operator new(4 * v27);
      v29 = &v28[4 * v24];
      *v29 = v20;
      v17 = (uint64_t)(v29 + 1);
      if (v9 == v22)
        goto LABEL_38;
    }
    else
    {
      v28 = 0;
      v29 = (_DWORD *)(4 * v24);
      *(_DWORD *)(4 * v24) = v20;
      v17 = 4 * v24 + 4;
      if (v9 == v22)
        goto LABEL_38;
    }
    v30 = v9 - 4 - v22;
    if (v30 >= 0xBC)
    {
      if (&v28[v23 - 4 - (v30 & 0xFFFFFFFFFFFFFFFCLL)] > &v28[v23 - 4])
      {
        v31 = v9;
      }
      else if (&v9[-(v30 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4)
      {
        v31 = v9;
      }
      else if ((unint64_t)(v9 - v28 - v23) >= 0x20)
      {
        v32 = (v30 >> 2) + 1;
        v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
        v31 = &v9[-v33];
        v29 = (_DWORD *)((char *)v29 - v33);
        v34 = &v28[4 * v24 - 16];
        v35 = v9 - 16;
        v36 = v32 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v37 = *(_OWORD *)v35;
          *(v34 - 1) = *((_OWORD *)v35 - 1);
          *v34 = v37;
          v34 -= 2;
          v35 -= 32;
          v36 -= 8;
        }
        while (v36);
        if (v32 == (v32 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_38;
      }
      else
      {
        v31 = v9;
      }
    }
    else
    {
      v31 = v9;
    }
    do
    {
      v38 = *((_DWORD *)v31 - 1);
      v31 -= 4;
      *--v29 = v38;
    }
    while (v31 != v22);
LABEL_38:
    *(_QWORD *)(a1 + 24) = v29;
    *(_QWORD *)(a1 + 32) = v17;
    *(_QWORD *)(a1 + 40) = &v28[4 * v27];
    if (v22)
      operator delete(v22);
LABEL_12:
    *(_QWORD *)(a1 + 32) = v17;
    v9 = (char *)v17;
    a2 = v19;
  }
  *(_DWORD *)(a1 + 12) = a2;
  v39 = *(_QWORD *)(a1 + 144);
  v40 = a3;
  v41 = *(_DWORD *)(v39 + 48 * a3 + 32);
  if (v41 != -10)
  {
    v42 = a3;
    while (1)
    {
      v40 = v41;
      v44 = *(_DWORD *)(v39 + 48 * v42 + 36);
      v45 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v9 >= v45)
        break;
      *(_DWORD *)v9 = v44;
      v43 = (uint64_t)(v9 + 4);
LABEL_44:
      *(_QWORD *)(a1 + 32) = v43;
      v42 = v40;
      v41 = *(_DWORD *)(v39 + 48 * v40 + 32);
      v9 = (char *)v43;
      if (v41 == -10)
        goto LABEL_41;
    }
    v46 = (char *)*v64;
    v47 = v9 - (_BYTE *)*v64;
    v48 = v47 >> 2;
    v49 = (v47 >> 2) + 1;
    if (v49 >> 62)
      goto LABEL_73;
    v50 = v45 - (_QWORD)v46;
    if (v50 >> 1 > v49)
      v49 = v50 >> 1;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 62)
        goto LABEL_74;
      v52 = operator new(4 * v51);
      v53 = &v52[4 * v48];
      *v53 = v44;
      v43 = (uint64_t)(v53 + 1);
      if (v9 == v46)
        goto LABEL_60;
    }
    else
    {
      v52 = 0;
      v53 = (_DWORD *)(4 * v48);
      *(_DWORD *)(4 * v48) = v44;
      v43 = 4 * v48 + 4;
      if (v9 == v46)
        goto LABEL_60;
    }
    v54 = v9 - 4 - v46;
    if (v54 >= 0xBC)
    {
      if (&v52[v47 - 4 - (v54 & 0xFFFFFFFFFFFFFFFCLL)] > &v52[v47 - 4])
      {
        v55 = v9;
      }
      else if (&v9[-(v54 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v9 - 4)
      {
        v55 = v9;
      }
      else if ((unint64_t)(v9 - v52 - v47) >= 0x20)
      {
        v57 = (v54 >> 2) + 1;
        v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
        v55 = &v9[-v58];
        v53 = (_DWORD *)((char *)v53 - v58);
        v59 = &v52[4 * v48 - 16];
        v60 = v9 - 16;
        v61 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v62 = *(_OWORD *)v60;
          *(v59 - 1) = *((_OWORD *)v60 - 1);
          *v59 = v62;
          v59 -= 2;
          v60 -= 32;
          v61 -= 8;
        }
        while (v61);
        if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_60:
          *(_QWORD *)(a1 + 24) = v53;
          *(_QWORD *)(a1 + 32) = v43;
          *(_QWORD *)(a1 + 40) = &v52[4 * v51];
          if (v46)
          {
            operator delete(v46);
            v39 = *(_QWORD *)(a1 + 144);
          }
          goto LABEL_44;
        }
      }
      else
      {
        v55 = v9;
      }
    }
    else
    {
      v55 = v9;
    }
    do
    {
      v56 = *((_DWORD *)v55 - 1);
      v55 -= 4;
      *--v53 = v56;
    }
    while (v55 != v46);
    goto LABEL_60;
  }
LABEL_41:
  *(_DWORD *)(a1 + 16) = v40;
}

float sub_2399D38FC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  uint64_t v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t i;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float result;

  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = v2 + 48 * v3;
  v7 = *(float *)(v5 + 4);
  v6 = (float *)(v5 + 4);
  v8 = v7;
  v9 = v2 + 48 * v4;
  v11 = *(float *)(v9 + 4);
  v10 = (float *)(v9 + 4);
  v12 = -v11;
  if (v8 <= (float)-v11)
    v13 = v8;
  else
    v13 = v12;
  v14 = *(int **)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32) - (_QWORD)v14;
  if (v15)
  {
    v16 = v15 >> 2;
    if ((unint64_t)(v15 >> 2) <= 1)
      v16 = 1;
    do
    {
      v17 = *v14++;
      v18 = *(_QWORD *)(a1 + 168) + 16 * v17;
      if (*(float *)(v18 + 4) < v13)
        v13 = *(float *)(v18 + 4);
      --v16;
    }
    while (v16);
  }
  *v6 = v8 - v13;
  v19 = v13 + *v10;
  *v10 = v19;
  if (fabsf(*v6) <= 1.1755e-38)
  {
    v21 = *(_QWORD *)(a1 + 112);
    v22 = *(_QWORD *)(a1 + 104);
    v23 = ((v21 - v22) << 7) - 1;
    v24 = v2 + 48 * v3;
    *(_QWORD *)(v24 + 32) = 0x1300000013;
    *(_DWORD *)(v24 + 44) = 0;
    if (v21 == v22)
      v23 = 0;
    v25 = *(_QWORD *)(a1 + 136);
    v26 = v25 + *(_QWORD *)(a1 + 128);
    if (v23 == v26)
    {
      sub_2399D3FD8(a1 + 96);
      v22 = *(_QWORD *)(a1 + 104);
      v25 = *(_QWORD *)(a1 + 136);
      v26 = *(_QWORD *)(a1 + 128) + v25;
      v19 = *v10;
    }
    *(_DWORD *)(*(_QWORD *)(v22 + ((v26 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v26 & 0x3FF)) = v3;
    *(_QWORD *)(a1 + 136) = v25 + 1;
    if (fabsf(v19) > 1.1755e-38)
    {
LABEL_12:
      v20 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(a1 + 32) == v20)
        goto LABEL_44;
      goto LABEL_25;
    }
  }
  else if (fabsf(v19) > 1.1755e-38)
  {
    goto LABEL_12;
  }
  v27 = *(_QWORD *)(a1 + 112);
  v28 = *(_QWORD *)(a1 + 104);
  v29 = ((v27 - v28) << 7) - 1;
  v30 = v27 == v28;
  v31 = v2 + 48 * v4;
  *(_QWORD *)(v31 + 32) = 0x1300000013;
  *(_DWORD *)(v31 + 44) = 0;
  v32 = *(_DWORD *)(a1 + 16);
  if (v30)
    v33 = 0;
  else
    v33 = v29;
  v34 = *(_QWORD *)(a1 + 136);
  v35 = v34 + *(_QWORD *)(a1 + 128);
  if (v33 == v35)
  {
    sub_2399D3FD8(a1 + 96);
    v28 = *(_QWORD *)(a1 + 104);
    v34 = *(_QWORD *)(a1 + 136);
    v35 = *(_QWORD *)(a1 + 128) + v34;
  }
  *(_DWORD *)(*(_QWORD *)(v28 + ((v35 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v35 & 0x3FF)) = v32;
  *(_QWORD *)(a1 + 136) = v34 + 1;
  v20 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(a1 + 32) != v20)
  {
LABEL_25:
    for (i = 0; i < (*(_QWORD *)(a1 + 32) - v20) >> 2; ++i)
    {
      v38 = *(int *)(v20 + 4 * i);
      v39 = *(_QWORD *)(a1 + 168);
      v40 = v38 ^ 1;
      v41 = v39 + 16 * v38;
      *(float *)(v41 + 4) = *(float *)(v41 + 4) - v13;
      *(float *)(v39 + 16 * v40 + 4) = v13 + *(float *)(v39 + 16 * v40 + 4);
      if (fabsf(*(float *)(v41 + 4)) <= 1.1755e-38)
      {
        v42 = *(_QWORD *)(a1 + 144);
        v43 = *(_DWORD *)(v41 + 8);
        v37 = *(_DWORD *)(v41 + 12);
        v44 = *(_DWORD *)(v42 + 48 * v43 + 40);
        if (v44 == 2)
        {
          if (*(_DWORD *)(v42 + 48 * v37 + 40) != 2)
            goto LABEL_28;
          v51 = *(_QWORD *)(a1 + 112);
          v46 = *(_QWORD *)(a1 + 104);
          v52 = v42 + 48 * v43;
          *(_QWORD *)(v52 + 32) = 0x1300000013;
          *(_DWORD *)(v52 + 44) = 0;
          if (v51 == v46)
            v53 = 0;
          else
            v53 = ((v51 - v46) << 7) - 1;
          v49 = *(_QWORD *)(a1 + 136);
          v50 = v49 + *(_QWORD *)(a1 + 128);
          if (v53 == v50)
          {
            sub_2399D3FD8(a1 + 96);
            v46 = *(_QWORD *)(a1 + 104);
            v49 = *(_QWORD *)(a1 + 136);
            v50 = *(_QWORD *)(a1 + 128) + v49;
          }
          v37 = v43;
        }
        else
        {
          if (v44 != 1 || *(_DWORD *)(v42 + 48 * v37 + 40) != 1)
            goto LABEL_28;
          v45 = *(_QWORD *)(a1 + 112);
          v46 = *(_QWORD *)(a1 + 104);
          v47 = v42 + 48 * v37;
          *(_QWORD *)(v47 + 32) = 0x1300000013;
          *(_DWORD *)(v47 + 44) = 0;
          if (v45 == v46)
            v48 = 0;
          else
            v48 = ((v45 - v46) << 7) - 1;
          v49 = *(_QWORD *)(a1 + 136);
          v50 = v49 + *(_QWORD *)(a1 + 128);
          if (v48 == v50)
          {
            sub_2399D3FD8(a1 + 96);
            v46 = *(_QWORD *)(a1 + 104);
            v49 = *(_QWORD *)(a1 + 136);
            v50 = *(_QWORD *)(a1 + 128) + v49;
          }
        }
        *(_DWORD *)(*(_QWORD *)(v46 + ((v50 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v50 & 0x3FF)) = v37;
        *(_QWORD *)(a1 + 136) = v49 + 1;
      }
LABEL_28:
      v20 = *(_QWORD *)(a1 + 24);
    }
  }
LABEL_44:
  result = v13 + *(float *)(a1 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

void sub_2399D3C88(_QWORD *a1)
{
  uint64_t v1;
  void **v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  int v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = a1[17];
  if (v1)
  {
    v46 = (uint64_t)(a1 + 6);
    v47 = (uint64_t)(a1 + 12);
    do
    {
      while (2)
      {
        v3 = (void **)a1[13];
        v4 = (*(_DWORD **)((char *)v3 + ((a1[16] >> 7) & 0x1FFFFFFFFFFFFF8)))[a1[16] & 0x3FFLL];
        v5 = a1[16] + 1;
        a1[16] = v5;
        a1[17] = v1 - 1;
        if (v5 >= 0x800)
        {
          operator delete(*v3);
          a1[13] += 8;
          a1[16] -= 1024;
        }
        v6 = a1[18];
        v7 = v6 + 48 * v4;
        v10 = *(_QWORD *)(v7 + 8);
        v9 = (uint64_t *)(v7 + 8);
        v8 = v10;
        v11 = v9[1];
        v12 = v11 - v10;
        if (v11 == v10)
          goto LABEL_3;
        v13 = v6 + 48 * v4;
        v16 = *(_DWORD *)(v13 + 40);
        v15 = (_DWORD *)(v13 + 40);
        v14 = v16;
        v17 = v16 == 1;
        if (!v16)
        {
LABEL_28:
          v28 = 0;
          do
          {
            if (*v15)
            {
              v29 = *(int *)(v8 + 4 * v28);
              v30 = a1[21];
              v31 = *(_DWORD *)(v30 + 16 * v29 + 12);
              v32 = a1[18];
              if (*v15 == *(_DWORD *)(v32 + 48 * v31 + 40))
              {
                v33 = v32 + 48 * v31;
                v35 = *(_DWORD *)(v33 + 32);
                v34 = (_QWORD *)(v33 + 32);
                if (v35 == v4)
                {
                  v36 = a1[14];
                  v37 = a1[13];
                  *v34 = 0x1300000013;
                  *(_DWORD *)(v32 + 48 * v31 + 44) = 0;
                  if (v36 == v37)
                    v38 = 0;
                  else
                    v38 = ((v36 - v37) << 7) - 1;
                  v39 = a1[17];
                  v40 = v39 + a1[16];
                  if (v38 == v40)
                  {
                    sub_2399D3FD8(v47);
                    v37 = a1[13];
                    v39 = a1[17];
                    v40 = a1[16] + v39;
                    v30 = a1[21];
                  }
                  *(_DWORD *)(*(_QWORD *)(v37 + ((v40 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v40 & 0x3FF)) = v31;
                  a1[17] = v39 + 1;
                }
                if (*(float *)(v30 + 16 * (v29 ^ 1) + 4) > 0.0)
                {
                  v41 = a1[8];
                  v42 = a1[7];
                  if (v41 == v42)
                    v43 = 0;
                  else
                    v43 = ((v41 - v42) << 7) - 1;
                  v44 = a1[11];
                  v45 = v44 + a1[10];
                  if (v43 == v45)
                  {
                    sub_2399D3FD8(v46);
                    v42 = a1[7];
                    v44 = a1[11];
                    v45 = a1[10] + v44;
                  }
                  *(_DWORD *)(*(_QWORD *)(v42 + ((v45 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v45 & 0x3FF)) = v31;
                  a1[11] = v44 + 1;
                }
              }
            }
            ++v28;
            v8 = *v9;
          }
          while (v28 < (v9[1] - *v9) >> 2);
LABEL_3:
          *(_DWORD *)(v6 + 48 * v4 + 40) = 0;
          v1 = a1[17];
          if (!v1)
            return;
          continue;
        }
        break;
      }
      v18 = 0;
      v19 = 0;
      v20 = v12 >> 2;
      v21 = a1[21];
      if (v20 <= 1)
        v20 = 1;
      v22 = -1;
      v23 = -1;
      do
      {
        v24 = *(int *)(v8 + 4 * v19);
        v25 = *(_DWORD *)(v21 + 16 * v24 + 12);
        if (v14 != *(_DWORD *)(v6 + 48 * v25 + 40))
          goto LABEL_12;
        if (v14 == 1)
        {
          if (fabsf(*(float *)(v21 + 16 * (v24 ^ 1) + 4)) <= 1.1755e-38)
            goto LABEL_12;
        }
        else if (v14 == 2 && fabsf(*(float *)(v21 + 16 * v24 + 4)) <= 1.1755e-38)
        {
          goto LABEL_12;
        }
        v26 = *(_DWORD *)(v21 + 16 * v24 + 12);
        while (1)
        {
          v26 = *(_DWORD *)(v6 + 48 * v26 + 32);
          if (v26 == -20)
            break;
          if ((v26 + 9) >= 0xFFFFFFFE)
          {
            if (!v18 || v18 > *(_DWORD *)(v6 + 48 * v25 + 44))
            {
              v23 = v24 ^ v17;
              v18 = *(_DWORD *)(v6 + 48 * v25 + 44);
              v22 = *(_DWORD *)(v21 + 16 * v24 + 12);
            }
            break;
          }
        }
LABEL_12:
        ++v19;
      }
      while (v19 != v20);
      if (v22 == -1)
        goto LABEL_28;
      v27 = (_DWORD *)(v6 + 48 * v4);
      v27[8] = v22;
      v27[9] = v23;
      v27[11] = *(_DWORD *)(v6 + 48 * v22 + 44) + 1;
      v1 = a1[17];
    }
    while (v1);
  }
}

void sub_2399D3FD8(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      sub_239418A80();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      sub_23946CE0C((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    sub_23946CF98((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        sub_239418A80();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            sub_239418A80();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_2399D4534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2399D4550(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2399D4564(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2399D457C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2399D4594(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 48;
        *(_QWORD *)(a1 + 16) = v2 - 48;
        v5 = *(void **)(v2 - 40);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 32) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 48;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2399D4600(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;
  char *v21;
  char *v22;
  __int128 v23;
  _QWORD *v24;

  v4 = a1[2];
  v5 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    sub_2399D47F4(a1, a2);
    return;
  }
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
  v7 = v6 + a2;
  if (v6 + a2 > 0x555555555555555)
    sub_2394189F8();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v7;
  v24 = a1 + 2;
  if (v9)
  {
    if (v9 > 0x555555555555555)
      sub_239418A80();
    v10 = (char *)operator new(48 * v9);
  }
  else
  {
    v10 = 0;
  }
  v21 = v10;
  v22 = &v10[48 * v6];
  *(_QWORD *)&v23 = v22;
  *((_QWORD *)&v23 + 1) = &v10[48 * v9];
  sub_2399D491C(&v21, a2);
  v12 = *a1;
  v11 = a1[1];
  v13 = v22;
  if (v11 == *a1)
  {
    v17 = a1[1];
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = &v13[v14];
      v16 = &v11[v14];
      *((_QWORD *)v15 - 6) = *(_QWORD *)&v11[v14 - 48];
      *((_QWORD *)v15 - 5) = 0;
      *((_QWORD *)v15 - 4) = 0;
      *((_QWORD *)v15 - 3) = 0;
      *(_OWORD *)(v15 - 40) = *(_OWORD *)&v11[v14 - 40];
      *((_QWORD *)v15 - 3) = *(_QWORD *)&v11[v14 - 24];
      *((_QWORD *)v16 - 5) = 0;
      *((_QWORD *)v16 - 4) = 0;
      *((_QWORD *)v16 - 3) = 0;
      *((_OWORD *)v15 - 1) = *(_OWORD *)&v11[v14 - 16];
      v14 -= 48;
    }
    while (&v11[v14] != v12);
    v17 = *a1;
    v11 = a1[1];
    v13 += v14;
  }
  *a1 = v13;
  v18 = a1[2];
  *(_OWORD *)(a1 + 1) = v23;
  *(_QWORD *)&v23 = v11;
  *((_QWORD *)&v23 + 1) = v18;
  v21 = v17;
  v22 = v17;
  if (v11 == v17)
  {
    if (!v11)
      return;
    goto LABEL_20;
  }
  do
  {
    while (1)
    {
      v19 = v11 - 48;
      *(_QWORD *)&v23 = v11 - 48;
      v20 = (void *)*((_QWORD *)v11 - 5);
      if (!v20)
        break;
      *((_QWORD *)v11 - 4) = v20;
      operator delete(v20);
      v11 = (char *)v23;
      if ((char *)v23 == v17)
        goto LABEL_25;
    }
    v11 -= 48;
  }
  while (v19 != v17);
LABEL_25:
  v11 = v21;
  if (v21)
LABEL_20:
    operator delete(v11);
}

void sub_2399D47E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2399D4594((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2399D47F4(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v3 = result[1];
  if (a2)
  {
    v4 = v3 + 48 * a2;
    v5 = qword_256934460;
    if (qword_256934460)
    {
      if ((unint64_t)qword_256934460 >> 62)
      {
        *(_OWORD *)v3 = 0u;
        *(_OWORD *)(v3 + 16) = 0u;
        *(_OWORD *)(v3 + 32) = xmmword_239F038D0;
        sub_2394189F8();
      }
      v6 = 48 * a2;
      do
      {
        *(_OWORD *)v3 = 0u;
        *(_OWORD *)(v3 + 16) = 0u;
        *(_OWORD *)(v3 + 32) = xmmword_239F038D0;
        result = operator new(4 * v5);
        *(_QWORD *)(v3 + 8) = result;
        *(_QWORD *)(v3 + 16) = result;
        *(_QWORD *)(v3 + 24) = (char *)result + 4 * v5;
        v3 += 48;
        v6 -= 48;
      }
      while (v6);
    }
    else
    {
      do
      {
        *(_OWORD *)v3 = 0uLL;
        *(_OWORD *)(v3 + 16) = 0uLL;
        *(_OWORD *)(v3 + 32) = xmmword_239F038D0;
        v3 += 48;
      }
      while (v3 != v4);
    }
    v3 = v4;
  }
  v2[1] = v3;
  return result;
}

void sub_2399D48E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v5;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 + 16) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2399D491C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  v3 = result[2];
  if (a2)
  {
    v4 = v3 + 48 * a2;
    v5 = qword_256934460;
    if (qword_256934460)
    {
      if ((unint64_t)qword_256934460 >> 62)
      {
        *(_OWORD *)v3 = 0u;
        *(_OWORD *)(v3 + 16) = 0u;
        *(_OWORD *)(v3 + 32) = xmmword_239F038D0;
        sub_2394189F8();
      }
      v6 = 48 * a2;
      do
      {
        *(_OWORD *)v3 = 0u;
        *(_OWORD *)(v3 + 16) = 0u;
        *(_OWORD *)(v3 + 32) = xmmword_239F038D0;
        result = operator new(4 * v5);
        *(_QWORD *)(v3 + 8) = result;
        *(_QWORD *)(v3 + 16) = result;
        *(_QWORD *)(v3 + 24) = (char *)result + 4 * v5;
        v3 += 48;
        v6 -= 48;
      }
      while (v6);
    }
    else
    {
      do
      {
        *(_OWORD *)v3 = 0uLL;
        *(_OWORD *)(v3 + 16) = 0uLL;
        *(_OWORD *)(v3 + 32) = xmmword_239F038D0;
        v3 += 48;
      }
      while (v3 != v4);
    }
    v3 = v4;
  }
  v2[2] = v3;
  return result;
}

void sub_2399D4A10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void *v5;

  v5 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v3 + 16) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(v1 + 16) = v3;
  _Unwind_Resume(exception_object);
}

double sub_2399D4A44(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 184) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t sub_2399D4A78(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(_QWORD *)(a1 + 144);
  for (i = *(_QWORD *)(a1 + 152); i != v2; i -= 48)
  {
    v4 = *(void **)(i - 40);
    if (v4)
    {
      *(_QWORD *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  *(_QWORD *)(a1 + 152) = v2;
  v5 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 176) = v5;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD *)(a1 + 144);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 152);
    v8 = *(void **)(a1 + 144);
    if (v7 != v6)
    {
      do
      {
        v9 = *(void **)(v7 - 40);
        if (v9)
        {
          *(_QWORD *)(v7 - 32) = v9;
          operator delete(v9);
        }
        v7 -= 48;
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 144);
    }
    *(_QWORD *)(a1 + 152) = v6;
    operator delete(v8);
  }
  sub_23953439C(a1 + 96);
  sub_23953439C(a1 + 48);
  v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(_QWORD *)(a1 + 32) = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_2399D4B4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *(_QWORD *)(a1 + 144);
  for (i = *(_QWORD *)(a1 + 152); i != v2; i -= 48)
  {
    v4 = *(void **)(i - 40);
    if (v4)
    {
      *(_QWORD *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  *(_QWORD *)(a1 + 152) = v2;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = 0;
}

float sub_2399D4BBC(uint64_t a1, float *a2)
{
  float result;

  sub_2399D2F50(a1);
  if (sub_2399D31CC((_QWORD *)a1))
  {
    do
    {
      sub_2399D38FC(a1);
      sub_2399D3C88((_QWORD *)a1);
    }
    while ((sub_2399D31CC((_QWORD *)a1) & 1) != 0);
  }
  result = *(float *)(a1 + 8);
  *a2 = result;
  return result;
}

BOOL sub_2399D4C10(uint64_t a1, int a2)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 144) + 48 * a2 + 40) == 1;
}

void sub_2399D4C2C(const __CFDictionary *a1@<X0>, const void *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  const __CFString *Value;
  const char *CStringPtr;
  size_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v6 = (void *)MEMORY[0x23B83EC40]();
  Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
  if (!Value)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    objc_autoreleasePoolPop(v6);
    return;
  }
  CStringPtr = CFStringGetCStringPtr(Value, 0);
  v9 = strlen(CStringPtr);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    a3[1] = v10;
    a3[2] = v12 | 0x8000000000000000;
    *a3 = v13;
    a3 = v13;
  }
  else
  {
    *((_BYTE *)a3 + 23) = v9;
    if (!v9)
      goto LABEL_11;
  }
  memmove(a3, CStringPtr, v10);
LABEL_11:
  *((_BYTE *)a3 + v10) = 0;
  objc_autoreleasePoolPop(v6);
}

CFStringRef sub_2399D4D1C(uint64_t a1)
{
  void **v1;
  void **v2;
  void *v4;
  const char *v6;
  void **v7;
  CFStringRef v8;
  void *__p[2];
  char v11;
  void *__dst[2];
  uint64_t v13;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_23941A7F8(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a1;
    v13 = *(_QWORD *)(a1 + 16);
  }
  if (v13 >= 0)
    v1 = (void **)((char *)__dst + HIBYTE(v13));
  else
    v1 = (void **)((char *)__dst[0] + (unint64_t)__dst[1]);
  if (v13 >= 0)
    v2 = __dst;
  else
    v2 = (void **)__dst[0];
  for (; v2 != v1; v2 = (void **)((char *)v2 + 1))
    *(_BYTE *)v2 = __tolower(*(unsigned __int8 *)v2);
  std::operator+<char>();
  if (SHIBYTE(v13) < 0)
  {
    v4 = __dst[1];
    if (__dst[1] == (void *)4 && *(_DWORD *)__dst[0] == 1735420462)
      goto LABEL_32;
    if (__dst[1] == (void *)5)
    {
      if (*(_DWORD *)__dst[0] == 1701866030 && *((_BYTE *)__dst[0] + 4) == 103)
        goto LABEL_32;
      v4 = __dst[1];
    }
    if (v4 != (void *)4 || *(_DWORD *)__dst[0] != 1920492846)
      goto LABEL_36;
    goto LABEL_34;
  }
  if (HIBYTE(v13) == 4)
  {
    if (LODWORD(__dst[0]) == 1735420462)
    {
LABEL_32:
      v6 = "public.jpeg";
LABEL_35:
      MEMORY[0x23B83DBFC](__p, v6);
      goto LABEL_36;
    }
    if (LODWORD(__dst[0]) != 1920492846)
      goto LABEL_36;
LABEL_34:
    v6 = "com.ilm.openexr-image";
    goto LABEL_35;
  }
  if (HIBYTE(v13) == 5 && LODWORD(__dst[0]) == 1701866030 && BYTE4(__dst[0]) == 103)
    goto LABEL_32;
LABEL_36:
  if (v11 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x24BDBD240], (const char *)v7, 0x8000100u);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return v8;
  }
  else if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    return v8;
  }
  operator delete(__dst[0]);
  return v8;
}

void sub_2399D4F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a21 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_2399D4F80(uint64_t *a1, int *a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  const __CFURL *v7;
  CGImageSource *v8;
  CGImageSourceStatus Status;
  CGImage *ImageAtIndex;
  int Width;
  const void *v12;
  void *v13;
  const __CFNumber *Value;
  double *p_valuePtr;
  unsigned __int8 v16;
  double *v17;
  BOOL v18;
  int v20;
  int v21;
  unint64_t v23;
  size_t BitsPerPixel;
  int Height;
  const __CFDictionary *theDict;
  double valuePtr;
  uint64_t v28;
  unsigned __int8 v29;

  v4 = (void *)MEMORY[0x23B83EC40]();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v6);
  v7 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v8 = CGImageSourceCreateWithURL(v7, 0);
  Status = CGImageSourceGetStatus(v8);
  if (Status)
  {
    CFRelease(v7);
    CFRelease(v8);
    goto LABEL_41;
  }
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v8, 0, 0);
  theDict = CGImageSourceCopyPropertiesAtIndex(v8, 0, 0);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  BitsPerPixel = CGImageGetBitsPerPixel(ImageAtIndex);
  v12 = (const void *)*MEMORY[0x24BDD93D0];
  v13 = (void *)MEMORY[0x23B83EC40]();
  valuePtr = 0.0;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, v12);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberCGFloatType, &valuePtr);
    v23 = (unint64_t)valuePtr >> 3;
  }
  else
  {
    v23 = 0;
  }
  objc_autoreleasePoolPop(v13);
  p_valuePtr = &valuePtr;
  sub_2399D4C2C(theDict, (const void *)*MEMORY[0x24BDD92D0], &valuePtr);
  v16 = v29;
  if ((v29 & 0x80u) == 0)
    v17 = (double *)((char *)&valuePtr + v29);
  else
    v17 = (double *)(*(_QWORD *)&valuePtr + v28);
  if ((v29 & 0x80u) != 0)
    p_valuePtr = *(double **)&valuePtr;
  if (p_valuePtr != v17)
  {
    do
    {
      *(_BYTE *)p_valuePtr = __tolower(*(unsigned __int8 *)p_valuePtr);
      p_valuePtr = (double *)((char *)p_valuePtr + 1);
    }
    while (p_valuePtr != v17);
    v16 = v29;
  }
  if ((v16 & 0x80) != 0)
  {
    if (v28 != 3
      || (**(_WORD **)&valuePtr == 26482 ? (v18 = *(_BYTE *)(*(_QWORD *)&valuePtr + 2) == 98) : (v18 = 0), !v18))
    {
      if (v28 == 4 && **(_DWORD **)&valuePtr == 2036429415)
        goto LABEL_29;
      goto LABEL_34;
    }
LABEL_37:
    v20 = 0;
    a2[1] = Width;
    a2[2] = Height;
    goto LABEL_38;
  }
  if (v16 != 3)
  {
    if (v16 == 4 && LODWORD(valuePtr) == 2036429415)
    {
LABEL_29:
      a2[1] = Width;
      a2[2] = Height;
LABEL_35:
      v20 = 1;
      v21 = 1;
      goto LABEL_39;
    }
    goto LABEL_34;
  }
  if (LOWORD(valuePtr) == 26482 && BYTE2(valuePtr) == 98)
    goto LABEL_37;
LABEL_34:
  a2[1] = Width;
  a2[2] = Height;
  if ((BitsPerPixel >> 3) / v23 == 1)
    goto LABEL_35;
  v20 = 0;
LABEL_38:
  v21 = 3;
LABEL_39:
  a2[3] = v21;
  *a2 = v20;
  CFRelease(v7);
  CFRelease(v8);
  CGImageRelease(ImageAtIndex);
  CFRelease(theDict);
  if ((char)v29 < 0)
    operator delete(*(void **)&valuePtr);
LABEL_41:

  objc_autoreleasePoolPop(v4);
  return Status == kCGImageStatusComplete;
}

void sub_2399D526C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399D527C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399D528C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399D529C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399D52AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399D52BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399D52CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399D52DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399D52EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2399D52FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_2399D5330(std::string *a1, uint64_t a2, int a3, int a4)
{
  void *v8;
  std::string::size_type size;
  std::string *v10;
  std::__fs::filesystem::path::__string_view v11;
  void **p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v13;
  std::basic_string_view<_CharT, _Traits>::size_type v14;
  void **v15;
  uint64_t *v16;
  void *v17;
  const __CFURL *v18;
  const __CFString *v19;
  CGImageDestination *v20;
  void *v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  CGColorSpaceRef DeviceGray;
  _BOOL8 v26;
  CGColorSpace *v27;
  int v28;
  CGDataProvider *v29;
  CGBitmapInfo v30;
  CGImage *v31;
  CGImage *v32;
  int v33;
  void *v34;
  double v35;
  void *v36;
  const __CFDictionary *v37;
  int v39;
  int v40;
  const __CFURL *v41;
  void *v42;
  void *__p[2];
  uint64_t v44;
  _DWORD v45[2];
  void *v46[2];
  uint64_t v47;
  std::__fs::filesystem::path v48;
  void **__dst;
  void *v50;
  unint64_t v51;

  v8 = (void *)MEMORY[0x23B83EC40]();
  memset(&v48, 0, sizeof(v48));
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v10 = a1;
  else
    v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  sub_23948900C(&v48.__pn_, v10, (std::string *)((char *)v10 + size));
  v11 = std::__fs::filesystem::path::__extension(&v48);
  if (v11.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_23941A5AC();
  if (v11.__size_ >= 0x17)
  {
    v13 = (v11.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11.__size_ | 7) != 0x17)
      v13 = v11.__size_ | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v50 = (void *)v11.__size_;
    v51 = v14 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v51) = v11.__size_;
  p_dst = (void **)&__dst;
  if (v11.__size_)
LABEL_13:
    memmove(p_dst, v11.__data_, v11.__size_);
  *((_BYTE *)p_dst + v11.__size_) = 0;
  v15 = __dst;
  v45[0] = v51;
  *(_DWORD *)((char *)v45 + 3) = *(_DWORD *)((char *)&v51 + 3);
  if (SHIBYTE(v51) < 0)
  {
    sub_23941A7F8(v46, __dst, (unint64_t)v50);
    operator delete(v15);
  }
  else
  {
    v46[0] = __dst;
    v46[1] = v50;
    LODWORD(v47) = v45[0];
    *(_DWORD *)((char *)&v47 + 3) = *(_DWORD *)((char *)v45 + 3);
    HIBYTE(v47) = HIBYTE(v51);
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = (uint64_t *)a1;
  else
    v16 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v17);
  v18 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(v47) < 0)
  {
    sub_23941A7F8(__p, v46[0], (unint64_t)v46[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v46;
    v44 = v47;
  }
  v19 = sub_2399D4D1C((uint64_t)__p);
  if (SHIBYTE(v44) < 0)
    operator delete(__p[0]);
  v20 = CGImageDestinationCreateWithURL(v18, v19, 1uLL, 0);
  if (v20)
  {
    v41 = v18;
    v42 = v17;
    v39 = a3;
    v40 = a4;
    v21 = v8;
    v23 = *(unsigned int *)(a2 + 8);
    v22 = *(unsigned int *)(a2 + 12);
    v24 = *(unsigned int *)(a2 + 4);
    if ((_DWORD)v22 == 1)
      DeviceGray = CGColorSpaceCreateDeviceGray();
    else
      DeviceGray = CGColorSpaceCreateDeviceRGB();
    v27 = DeviceGray;
    v28 = *(_DWORD *)(a2 + 12);
    v29 = CGDataProviderCreateWithData(0, *(const void **)(a2 + 16), v24 * (unint64_t)v22 * v23, 0);
    if (v28 == 4)
      v30 = 3;
    else
      v30 = 0;
    v17 = v42;
    v31 = CGImageCreate(v24, v23, 8uLL, 8 * v22, v24 * (unint64_t)v22, v27, v30, v29, 0, 0, kCGRenderingIntentDefault);
    v8 = v21;
    v32 = v31;
    if (v40)
    {
      v33 = v39 & ~(v39 >> 31);
      if (v33 >= 0x64)
        v33 = 100;
      v34 = (void *)MEMORY[0x24BDBCE70];
      v35 = (double)v33 / 100.0;
      *(float *)&v35 = v35;
      objc_msgSend(MEMORY[0x24BDD16E0], "numberWithFloat:", v35);
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "dictionaryWithObjectsAndKeys:", v36, *MEMORY[0x24BDD9220], 0);
      v37 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

      CGImageDestinationAddImage(v20, v32, v37);
    }
    else
    {
      CGImageDestinationAddImage(v20, v31, 0);
    }
    v26 = CGImageDestinationFinalize(v20);
    CFRelease(v19);
    CFRelease(v41);
    CFRelease(v20);
    CGDataProviderRelease(v29);
    CGImageRelease(v32);
  }
  else
  {
    CFRelease(v18);
    CFRelease(v19);
    v26 = 0;
  }

  if (SHIBYTE(v47) < 0)
  {
    operator delete(v46[0]);
    if ((SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_41;
LABEL_43:
    operator delete(v48.__pn_.__r_.__value_.__l.__data_);
    goto LABEL_41;
  }
  if (SHIBYTE(v48.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_43;
LABEL_41:
  objc_autoreleasePoolPop(v8);
  return v26;
}

void sub_2399D56D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(a1);
}

BOOL sub_2399D5784(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  const __CFURL *v7;
  CGImageSource *v8;
  CGImageSourceStatus Status;
  CGImage *ImageAtIndex;
  CGDataProvider *DataProvider;
  const UInt8 *BytePtr;
  size_t Width;
  size_t Height;
  CGImage *v15;
  size_t v16;
  size_t BitsPerPixel;
  const void *v18;
  void *v19;
  CFTypeID v20;
  const void *v21;
  void *v22;
  const __CFNumber *v23;
  double v24;
  char *p_value;
  unsigned __int8 v26;
  char *v27;
  size_t v28;
  unint64_t v30;
  int v32;
  uint64_t v33;
  CGColorSpace *ColorSpace;
  double v35;
  unint64_t v37;
  size_t v38;
  uint8_t *v39;
  BOOL v40;
  BOOL v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  uint64_t v47;
  size_t v48;
  float v54;
  uint64_t v55;
  uint64_t v56;
  float32x2_t v57;
  float64x2_t v58;
  uint64_t v59;
  float32x2_t *v60;
  uint64_t v61;
  size_t v62;
  unsigned int v63;
  int32x2_t v64;
  uint64x2_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _DWORD *v69;
  uint64_t v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t v76;
  size_t v77;
  uint8_t *v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  size_t v92;
  float v93;
  _BOOL4 v95;
  CGColorSpaceModel Model;
  void *v97;
  const __CFURL *cf;
  const __CFData *v99;
  void *v100;
  CGImage *image;
  const __CFDictionary *theDict;
  void *value;
  uint64_t v104;
  unsigned __int8 v105;

  v4 = (void *)MEMORY[0x23B83EC40]();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v6);
  v7 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v8 = CGImageSourceCreateWithURL(v7, 0);
  Status = CGImageSourceGetStatus(v8);
  if (Status)
  {
    CFRelease(v7);
    CFRelease(v8);
    goto LABEL_94;
  }
  v100 = v6;
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v8, 0, 0);
  theDict = CGImageSourceCopyPropertiesAtIndex(v8, 0, 0);
  DataProvider = CGImageGetDataProvider(ImageAtIndex);
  v99 = CGDataProviderCopyData(DataProvider);
  BytePtr = CFDataGetBytePtr(v99);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  v15 = ImageAtIndex;
  v16 = Height;
  cf = v7;
  image = v15;
  BitsPerPixel = CGImageGetBitsPerPixel(v15);
  v18 = (const void *)*MEMORY[0x24BDD9660];
  v19 = (void *)MEMORY[0x23B83EC40]();
  value = 0;
  v95 = CFDictionaryGetValueIfPresent(theDict, v18, (const void **)&value)
     && (v20 = CFGetTypeID(value), v20 == CFBooleanGetTypeID())
     && CFBooleanGetValue((CFBooleanRef)value) != 0;
  objc_autoreleasePoolPop(v19);
  v21 = (const void *)*MEMORY[0x24BDD93D0];
  v22 = (void *)MEMORY[0x23B83EC40]();
  value = 0;
  v23 = (const __CFNumber *)CFDictionaryGetValue(theDict, v21);
  v97 = v4;
  if (v23)
  {
    CFNumberGetValue(v23, kCFNumberCGFloatType, &value);
    v24 = *(double *)&value;
  }
  else
  {
    v24 = 0.0;
  }
  objc_autoreleasePoolPop(v22);
  p_value = (char *)&value;
  sub_2399D4C2C(theDict, (const void *)*MEMORY[0x24BDD92D0], &value);
  v26 = v105;
  if ((v105 & 0x80u) == 0)
    v27 = (char *)&value + v105;
  else
    v27 = (char *)value + v104;
  if ((v105 & 0x80u) != 0)
    p_value = (char *)value;
  if (p_value != v27)
  {
    do
    {
      *p_value = __tolower(*p_value);
      ++p_value;
    }
    while (p_value != v27);
    v26 = v105;
  }
  v28 = BitsPerPixel >> 3;
  if ((v26 & 0x80) != 0)
  {
    if (v104 != 3 || (*(_WORD *)value == 26482 ? (_ZF = *((_BYTE *)value + 2) == 98) : (_ZF = 0), !_ZF))
    {
      if (v104 == 4 && *(_DWORD *)value == 2036429415)
        goto LABEL_33;
LABEL_38:
      v30 = v28 / ((unint64_t)v24 >> 3);
      goto LABEL_39;
    }
LABEL_68:
    v30 = 3;
    goto LABEL_39;
  }
  if (v26 == 3)
  {
    if ((unsigned __int16)value != 26482 || BYTE2(value) != 98)
      goto LABEL_38;
    goto LABEL_68;
  }
  if (v26 != 4 || (_DWORD)value != 2036429415)
    goto LABEL_38;
LABEL_33:
  v30 = 1;
LABEL_39:
  if (v30 == 1)
    v32 = 1;
  else
    v32 = 3;
  *(_DWORD *)(a2 + 8) = v16;
  *(_DWORD *)(a2 + 12) = v32;
  *(_DWORD *)a2 = v30 == 1;
  *(_DWORD *)(a2 + 4) = Width;
  v33 = *(_QWORD *)(a2 + 16);
  if (v33)
    MEMORY[0x23B83E2F8](v33, 0x1000C8052888210);
  *(_QWORD *)(a2 + 16) = operator new[]();
  ColorSpace = CGImageGetColorSpace(image);
  Model = CGColorSpaceGetModel(ColorSpace);
  if (Model == kCGColorSpaceModelIndexed)
  {
    v38 = CGColorSpaceGetColorTableCount(ColorSpace) * v30;
    v39 = (uint8_t *)operator new[]();
    CGColorSpaceGetColorTable(ColorSpace, v39);
    v40 = v38 != 0;
  }
  else
  {
    v39 = 0;
    v40 = 0;
  }
  Status = kCGImageStatusComplete;
  if (v16)
    v41 = Width == 0;
  else
    v41 = 1;
  v42 = v41;
  if (v30 == 1)
  {
    v6 = v100;
    if ((v42 & 1) == 0)
    {
      if (v95)
      {
        v43 = 0;
        v44 = 0;
        do
        {
          v45 = *(unsigned int *)(a2 + 12);
          v46 = (float *)(*(_QWORD *)(a2 + 16) + v43 * *(unsigned int *)(a2 + 4) * v45);
          v47 = 4 * v45;
          v48 = Width;
          do
          {
            _H0 = *(_WORD *)BytePtr;
            __asm { FCVT            S0, H0 }
            v54 = (double)(int)_S0 / 255.0;
            *v46 = v54;
            BytePtr += v28;
            v46 = (float *)((char *)v46 + v47);
            --v48;
          }
          while (v48);
          ++v44;
          v43 += 4;
        }
        while (v44 != v16);
      }
      else if (v40)
      {
        v66 = 0;
        v67 = 0;
        do
        {
          v68 = *(unsigned int *)(a2 + 12);
          v69 = (_DWORD *)(*(_QWORD *)(a2 + 16) + v66 * *(unsigned int *)(a2 + 4) * v68);
          v70 = 4 * v68;
          v71 = Width;
          do
          {
            LOBYTE(v35) = v39[*BytePtr];
            v35 = (double)*(unint64_t *)&v35 / 255.0;
            *(float *)&v35 = v35;
            *v69 = LODWORD(v35);
            BytePtr += v28;
            v69 = (_DWORD *)((char *)v69 + v70);
            --v71;
          }
          while (v71);
          ++v67;
          v66 += 4;
        }
        while (v67 != v16);
      }
      else
      {
        v81 = 0;
        v82 = 0;
        do
        {
          v83 = *(unsigned int *)(a2 + 12);
          v84 = (_DWORD *)(*(_QWORD *)(a2 + 16) + v81 * *(unsigned int *)(a2 + 4) * v83);
          v85 = 4 * v83;
          v86 = Width;
          do
          {
            LOBYTE(v35) = *BytePtr;
            v35 = (double)*(unint64_t *)&v35 / 255.0;
            *(float *)&v35 = v35;
            *v84 = LODWORD(v35);
            BytePtr += v28;
            v84 = (_DWORD *)((char *)v84 + v85);
            --v86;
          }
          while (v86);
          ++v82;
          v81 += 4;
        }
        while (v82 != v16);
      }
    }
  }
  else
  {
    v6 = v100;
    if ((v42 & 1) == 0)
    {
      if (v95)
      {
        v55 = 0;
        v56 = 0;
        v57 = (float32x2_t)vdup_n_s32(0x437F0000u);
        v58 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
        do
        {
          v59 = *(unsigned int *)(a2 + 12);
          v60 = (float32x2_t *)(*(_QWORD *)(a2 + 16) + v55 * *(unsigned int *)(a2 + 4) * v59 + 8);
          v61 = 4 * v59;
          v62 = Width;
          do
          {
            LOWORD(_D2) = *((_WORD *)BytePtr + 2);
            __asm { FCVT            S2, H2 }
            v63 = (int)(float)(*(float *)&_D2 * 255.0);
            LODWORD(_D2) = *(_DWORD *)BytePtr;
            v64 = vcvt_s32_f32(vmul_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)&_D2), v57));
            v65.i64[0] = v64.u32[0];
            v65.i64[1] = v64.u32[1];
            v60[-1] = vcvt_f32_f64(vdivq_f64(vcvtq_f64_u64(v65), v58));
            _D2 = (double)v63 / 255.0;
            *(float *)&_D2 = _D2;
            v60->i32[0] = LODWORD(_D2);
            BytePtr += v28;
            v60 = (float32x2_t *)((char *)v60 + v61);
            --v62;
          }
          while (v62);
          ++v56;
          v55 += 4;
        }
        while (v56 != v16);
      }
      else if (v40)
      {
        v72 = 0;
        v73 = 0;
        do
        {
          v74 = *(unsigned int *)(a2 + 12);
          v75 = (_DWORD *)(*(_QWORD *)(a2 + 16) + v72 * *(unsigned int *)(a2 + 4) * v74 + 8);
          v76 = 4 * v74;
          v77 = Width;
          do
          {
            v78 = &v39[3 * *BytePtr];
            LOBYTE(v35) = *v78;
            v79 = (double)*(unint64_t *)&v35 / 255.0;
            *(float *)&v79 = v79;
            *(v75 - 2) = LODWORD(v79);
            LOBYTE(v79) = v78[1];
            v80 = (double)*(unint64_t *)&v79 / 255.0;
            *(float *)&v80 = v80;
            *(v75 - 1) = LODWORD(v80);
            LOBYTE(v80) = v78[2];
            v35 = (double)*(unint64_t *)&v80 / 255.0;
            *(float *)&v35 = v35;
            *v75 = LODWORD(v35);
            BytePtr += v28;
            v75 = (_DWORD *)((char *)v75 + v76);
            --v77;
          }
          while (v77);
          ++v73;
          v72 += 4;
        }
        while (v73 != v16);
      }
      else
      {
        v87 = 0;
        v88 = 0;
        do
        {
          v89 = *(unsigned int *)(a2 + 12);
          v90 = (float *)(*(_QWORD *)(a2 + 16) + v87 * *(unsigned int *)(a2 + 4) * v89 + 8);
          v91 = 4 * v89;
          v92 = Width;
          do
          {
            LOBYTE(v35) = *BytePtr;
            v93 = (double)*(unint64_t *)&v35 / 255.0;
            LOBYTE(_D2) = BytePtr[1];
            LOBYTE(v37) = BytePtr[2];
            _D2 = (double)*(unint64_t *)&_D2 / 255.0;
            *(float *)&_D2 = _D2;
            *(v90 - 2) = v93;
            *(v90 - 1) = *(float *)&_D2;
            v35 = (double)v37 / 255.0;
            *(float *)&v35 = v35;
            *v90 = *(float *)&v35;
            BytePtr += v28;
            v90 = (float *)((char *)v90 + v91);
            --v92;
          }
          while (v92);
          ++v88;
          v87 += 4;
        }
        while (v88 != v16);
      }
    }
  }
  if (Model == kCGColorSpaceModelIndexed)
    MEMORY[0x23B83E2F8](v39, 0x1000C8077774924);
  CFRelease(cf);
  v4 = v97;
  CFRelease(v8);
  CGImageRelease(image);
  CFRelease(theDict);
  CFRelease(v99);
  if ((char)v105 < 0)
    operator delete(value);
LABEL_94:

  objc_autoreleasePoolPop(v4);
  return Status == kCGImageStatusComplete;
}

void sub_2399D5F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_2399D6080(uint64_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  const __CFURL *v7;
  CGImageSource *v8;
  CGImageSourceStatus Status;
  CGImage *ImageAtIndex;
  CGDataProvider *DataProvider;
  const UInt8 *BytePtr;
  size_t Width;
  size_t Height;
  size_t BitsPerPixel;
  const void *v16;
  void *v17;
  const __CFNumber *Value;
  double v19;
  char *p_valuePtr;
  unsigned __int8 v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  _BOOL4 v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  size_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  size_t v51;
  uint64_t v57;
  float16x4_t *v58;
  unint64_t v59;
  uint64_t v60;
  float16x4_t *v61;
  size_t v62;
  void *v64;
  CGImage *image;
  const __CFData *cf;
  void *v67;
  const __CFDictionary *theDict;
  char *valuePtr;
  uint64_t v70;
  unsigned __int8 v71;

  v4 = (void *)MEMORY[0x23B83EC40]();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v6);
  v7 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v8 = CGImageSourceCreateWithURL(v7, 0);
  Status = CGImageSourceGetStatus(v8);
  if (Status)
  {
    CFRelease(v7);
    CFRelease(v8);
    goto LABEL_72;
  }
  v67 = v6;
  ImageAtIndex = CGImageSourceCreateImageAtIndex(v8, 0, 0);
  theDict = CGImageSourceCopyPropertiesAtIndex(v8, 0, 0);
  DataProvider = CGImageGetDataProvider(ImageAtIndex);
  cf = CGDataProviderCopyData(DataProvider);
  BytePtr = CFDataGetBytePtr(cf);
  Width = CGImageGetWidth(ImageAtIndex);
  Height = CGImageGetHeight(ImageAtIndex);
  v64 = v4;
  image = ImageAtIndex;
  BitsPerPixel = CGImageGetBitsPerPixel(ImageAtIndex);
  v16 = (const void *)*MEMORY[0x24BDD93D0];
  v17 = (void *)MEMORY[0x23B83EC40]();
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, v16);
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberCGFloatType, &valuePtr);
    v19 = *(double *)&valuePtr;
  }
  else
  {
    v19 = 0.0;
  }
  objc_autoreleasePoolPop(v17);
  p_valuePtr = (char *)&valuePtr;
  sub_2399D4C2C(theDict, (const void *)*MEMORY[0x24BDD92D0], &valuePtr);
  v21 = v71;
  if ((v71 & 0x80u) == 0)
    v22 = (char *)&valuePtr + v71;
  else
    v22 = &valuePtr[v70];
  if ((v71 & 0x80u) != 0)
    p_valuePtr = valuePtr;
  if (p_valuePtr != v22)
  {
    do
    {
      *p_valuePtr = __tolower(*p_valuePtr);
      ++p_valuePtr;
    }
    while (p_valuePtr != v22);
    v21 = v71;
  }
  v23 = BitsPerPixel >> 3;
  v24 = (unint64_t)v19;
  if ((v21 & 0x80) != 0)
  {
    if (v70 != 3 || (*(_WORD *)valuePtr == 26482 ? (_ZF = valuePtr[2] == 98) : (_ZF = 0), !_ZF))
    {
      if (v70 == 4 && *(_DWORD *)valuePtr == 2036429415)
        goto LABEL_29;
LABEL_34:
      v26 = v23 / (v24 >> 3) == 1;
      goto LABEL_35;
    }
LABEL_59:
    v26 = 0;
    goto LABEL_35;
  }
  if (v21 == 3)
  {
    if ((unsigned __int16)valuePtr != 26482 || BYTE2(valuePtr) != 98)
      goto LABEL_34;
    goto LABEL_59;
  }
  if (v21 != 4 || (_DWORD)valuePtr != 2036429415)
    goto LABEL_34;
LABEL_29:
  v26 = 1;
LABEL_35:
  if (v26)
    v28 = 1;
  else
    v28 = 3;
  *(_DWORD *)(a2 + 8) = Height;
  *(_DWORD *)(a2 + 12) = v28;
  *(_DWORD *)a2 = v26;
  *(_DWORD *)(a2 + 4) = Width;
  v29 = *(_QWORD *)(a2 + 16);
  if (v29)
    MEMORY[0x23B83E2F8](v29, 0x1000C8052888210);
  v30 = operator new[]();
  *(_QWORD *)(a2 + 16) = v30;
  if (v26)
  {
    if (Height && Width)
    {
      v32 = *(_DWORD *)(a2 + 4);
      v33 = *(unsigned int *)(a2 + 12);
      if (v24 == 16)
      {
        v47 = 0;
        v48 = 4 * v32 * (unint64_t)v33;
        v49 = 4 * v33;
        do
        {
          v50 = (_DWORD *)v30;
          v51 = Width;
          do
          {
            _H0 = *(_WORD *)BytePtr;
            __asm { FCVT            S0, H0 }
            *v50 = _S0;
            BytePtr += v23;
            v50 = (_DWORD *)((char *)v50 + v49);
            --v51;
          }
          while (v51);
          ++v47;
          v30 += v48;
        }
        while (v47 != Height);
      }
      else if (v24 == 32)
      {
        v34 = 0;
        v35 = 4 * v32 * (unint64_t)v33;
        v36 = 4 * v33;
        do
        {
          v37 = (_DWORD *)v30;
          v38 = Width;
          do
          {
            *v37 = *(_DWORD *)BytePtr;
            BytePtr += v23;
            v37 = (_DWORD *)((char *)v37 + v36);
            --v38;
          }
          while (v38);
          ++v34;
          v30 += v35;
        }
        while (v34 != Height);
      }
    }
  }
  else if (Height && Width)
  {
    v39 = *(_DWORD *)(a2 + 4);
    v40 = *(unsigned int *)(a2 + 12);
    if (v24 == 16)
    {
      v57 = 0;
      v58 = (float16x4_t *)(v30 + 8);
      v59 = 4 * v39 * (unint64_t)v40;
      v60 = 4 * v40;
      do
      {
        v61 = v58;
        v62 = Width;
        do
        {
          _D0.i32[0] = *(_DWORD *)BytePtr;
          _D0 = (float16x4_t)vcvtq_f32_f16(_D0).u64[0];
          v61[-1] = _D0;
          _D0.i16[0] = *((_WORD *)BytePtr + 2);
          __asm { FCVT            S0, H0 }
          v61->i32[0] = _D0.i32[0];
          BytePtr += v23;
          v61 = (float16x4_t *)((char *)v61 + v60);
          --v62;
        }
        while (v62);
        ++v57;
        v58 = (float16x4_t *)((char *)v58 + v59);
      }
      while (v57 != Height);
    }
    else if (v24 == 32)
    {
      v41 = 0;
      v42 = (_DWORD *)(v30 + 8);
      v43 = 4 * v39 * (unint64_t)v40;
      v44 = 4 * v40;
      do
      {
        v45 = v42;
        v46 = Width;
        do
        {
          *(v45 - 2) = *(_DWORD *)BytePtr;
          *(v45 - 1) = *((_DWORD *)BytePtr + 1);
          *v45 = *((_DWORD *)BytePtr + 2);
          BytePtr += v23;
          v45 = (_DWORD *)((char *)v45 + v44);
          --v46;
        }
        while (v46);
        ++v41;
        v42 = (_DWORD *)((char *)v42 + v43);
      }
      while (v41 != Height);
    }
  }
  CFRelease(v7);
  CFRelease(v8);
  CGImageRelease(image);
  CFRelease(theDict);
  CFRelease(cf);
  if ((char)v71 < 0)
    operator delete(valuePtr);
  v6 = v67;
  v4 = v64;
LABEL_72:

  objc_autoreleasePoolPop(v4);
  return Status == kCGImageStatusComplete;
}

void sub_2399D6550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2399D6564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2399D6578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2399D658C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2399D65A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2399D65B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2399D65C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2399D65DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2399D65F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_2399D6604(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_2399D661C(_Unwind_Exception *a1)
{
  void *v1;
  void *v3;

  v3 = v1;

  _Unwind_Resume(a1);
}

void sub_2399D6634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_2399D6674()
{
  uint64_t v0;
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  double v32;
  char *v33;
  double v34;
  char *v35;
  char *v36;
  double v37;
  char *v38;
  double v39;
  char *v40;
  double v41;
  char *v42;
  double v43;
  char *v44;
  double v45;
  char *v46;
  double v47;
  char *v48;
  double v49;
  char *v50;
  double v51;
  char *v52;
  double v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  char *v75;
  uint64_t **v76;
  double v77;
  _BYTE *v78;
  double v79;
  char *v80;
  uint64_t **v81;
  double v82;
  uint64_t **v83;
  double v84;
  uint64_t **v85;
  double v86;
  char *v87;
  double v88;
  char *v89;
  double v90;
  char *v91;
  double v92;
  char *v93;
  double v94;
  char *v95;
  double v96;
  char *v97;
  double v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  double v105;
  char *v106;
  char *v107;
  double v108;
  char *v109;
  char *v110;
  double v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  double v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  _QWORD *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unsigned __int8 *v152;
  uint64_t *v153[2];
  uint64_t *v154[2];
  uint64_t *v155;
  uint64_t *v156[3];
  __int128 v157;
  uint64_t *v158;
  __int128 v159;
  uint64_t *v160;
  uint64_t *v161[2];
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  __int128 v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t *v184;
  uint64_t *v185;
  __int128 v186;
  char v187[8];
  uint64_t v188;
  void *__p[2];
  uint64_t v190;
  unsigned __int8 v191[8];
  uint64_t v192[2];
  char v193;
  unsigned __int8 v194;
  uint64_t v195[2];
  char v196;
  unsigned __int8 v197[8];
  uint64_t v198[2];
  char v199;
  unsigned __int8 v200;
  uint64_t v201[2];
  char v202;
  unsigned __int8 v203[8];
  uint64_t v204[2];
  char v205;
  unsigned __int8 v206;
  uint64_t v207[2];
  char v208;
  unsigned __int8 v209[8];
  uint64_t v210[2];
  char v211;
  unsigned __int8 v212;
  uint64_t v213[2];
  char v214;
  unsigned __int8 v215[8];
  uint64_t v216[2];
  char v217;
  unsigned __int8 v218;
  uint64_t v219[2];
  char v220;
  unsigned __int8 v221[8];
  uint64_t v222[2];
  char v223;
  unsigned __int8 v224;
  uint64_t v225[2];
  char v226;
  unsigned __int8 v227[8];
  uint64_t v228[2];
  char v229;
  unsigned __int8 v230;
  uint64_t v231[2];
  char v232;
  unsigned __int8 v233[8];
  uint64_t v234[2];
  char v235;
  unsigned __int8 v236;
  uint64_t v237[2];
  char v238;
  unsigned __int8 v239[8];
  uint64_t v240[2];
  char v241;
  unsigned __int8 v242;
  uint64_t v243[2];
  char v244;
  unsigned __int8 v245[8];
  uint64_t v246[2];
  char v247;
  unsigned __int8 v248;
  uint64_t v249[2];
  char v250;
  unsigned __int8 v251[8];
  uint64_t v252[2];
  char v253;
  unsigned __int8 v254;
  _QWORD v255[2];
  char v256;
  unsigned __int8 v257[8];
  uint64_t v258[2];
  char v259;
  unsigned __int8 v260;
  uint64_t v261[2];
  char v262;
  unsigned __int8 v263[8];
  uint64_t v264[2];
  char v265;
  unsigned __int8 v266;
  uint64_t v267[2];
  char v268;
  unsigned __int8 v269[8];
  uint64_t v270[2];
  char v271;
  unsigned __int8 v272;
  uint64_t v273[2];
  char v274;
  unsigned __int8 v275[8];
  uint64_t v276[2];
  char v277;
  unsigned __int8 v278;
  uint64_t v279[2];
  char v280;
  unsigned __int8 v281[8];
  uint64_t v282[2];
  char v283;
  unsigned __int8 v284;
  uint64_t v285[2];
  char v286;
  unsigned __int8 v287[8];
  uint64_t v288[2];
  char v289;
  unsigned __int8 v290;
  uint64_t v291[2];
  char v292;
  unsigned __int8 v293[8];
  uint64_t v294[2];
  char v295;
  unsigned __int8 v296;
  uint64_t v297[2];
  char v298;
  unsigned __int8 v299[8];
  uint64_t v300[2];
  char v301;
  unsigned __int8 v302;
  uint64_t v303[2];
  char v304;
  unsigned __int8 v305[8];
  uint64_t v306[2];
  char v307;
  unsigned __int8 v308;
  uint64_t v309[2];
  char v310;
  unsigned __int8 v311[8];
  uint64_t v312[2];
  char v313;
  unsigned __int8 v314;
  uint64_t v315[2];
  char v316;
  unsigned __int8 v317[8];
  uint64_t v318[2];
  char v319;
  unsigned __int8 v320;
  uint64_t v321[2];
  char v322;
  unsigned __int8 v323[8];
  uint64_t v324[2];
  char v325;
  unsigned __int8 v326;
  uint64_t v327[2];
  char v328;
  unsigned __int8 v329[8];
  uint64_t v330[2];
  char v331;
  unsigned __int8 v332;
  _QWORD v333[2];
  char v334;
  unsigned __int8 v335[8];
  uint64_t v336[2];
  char v337;
  unsigned __int8 v338;
  _QWORD v339[2];
  char v340;
  unsigned __int8 v341[8];
  uint64_t v342[2];
  char v343;
  unsigned __int8 v344;
  _QWORD v345[2];
  char v346;
  unsigned __int8 v347[8];
  uint64_t v348[2];
  char v349;
  unsigned __int8 v350;
  _QWORD v351[2];
  char v352;
  unsigned __int8 v353[8];
  uint64_t v354[2];
  char v355;
  unsigned __int8 v356;
  _QWORD v357[2];
  char v358;
  unsigned __int8 v359[8];
  uint64_t v360[2];
  char v361;
  unsigned __int8 v362;
  _QWORD v363[2];
  char v364;
  unsigned __int8 v365[8];
  uint64_t v366[2];
  char v367;
  unsigned __int8 v368;
  _QWORD v369[2];
  char v370;
  unsigned __int8 v371[8];
  uint64_t v372[2];
  char v373;
  unsigned __int8 v374;
  _QWORD v375[2];
  char v376;
  unsigned __int8 v377[8];
  uint64_t v378[2];
  char v379;
  unsigned __int8 v380;
  _QWORD v381[2];
  char v382;
  unsigned __int8 v383[8];
  uint64_t v384[2];
  char v385;
  unsigned __int8 v386;
  _QWORD v387[2];
  char v388;
  char v389[8];
  uint64_t v390[2];
  char v391;
  char v392[8];
  uint64_t v393[2];
  char v394;
  char v395[8];
  uint64_t v396[2];
  char v397;
  char v398[8];
  uint64_t v399[2];
  char v400;
  char v401[8];
  uint64_t v402[2];
  char v403;
  char v404[8];
  uint64_t v405[2];
  char v406;
  char v407[8];
  uint64_t v408[2];
  char v409;
  char v410[8];
  uint64_t v411[2];
  char v412;
  char v413[8];
  uint64_t v414[2];
  char v415;
  char v416[8];
  uint64_t v417[2];
  char v418;
  char v419[8];
  uint64_t v420[2];
  char v421;
  unsigned __int8 v422[8];
  uint64_t v423[2];
  char v424;
  char v425[8];
  uint64_t v426[2];
  char v427;
  unsigned __int8 v428[8];
  uint64_t v429[2];
  char v430;
  unsigned __int8 v431;
  _QWORD v432[2];
  char v433;
  unsigned __int8 v434[8];
  uint64_t v435[2];
  char v436;
  unsigned __int8 v437;
  uint64_t v438[2];
  char v439;
  unsigned __int8 v440[8];
  uint64_t v441[2];
  char v442;
  unsigned __int8 v443;
  _QWORD v444[2];
  char v445;
  unsigned __int8 v446[8];
  uint64_t v447[2];
  char v448;
  unsigned __int8 v449;
  uint64_t v450[2];
  char v451;
  unsigned __int8 v452[8];
  uint64_t v453[2];
  char v454;
  unsigned __int8 v455;
  uint64_t v456[2];
  char v457;
  unsigned __int8 v458[8];
  uint64_t v459[2];
  char v460;
  unsigned __int8 v461;
  _QWORD v462[2];
  char v463;
  unsigned __int8 v464[8];
  uint64_t v465[2];
  char v466;
  unsigned __int8 v467;
  _QWORD v468[2];
  char v469;
  unsigned __int8 v470[8];
  uint64_t v471[2];
  char v472;
  unsigned __int8 v473;
  _QWORD v474[2];
  char v475;
  char v476[8];
  uint64_t v477[2];
  char v478;
  char v479[8];
  uint64_t v480[2];
  char v481;
  char v482[8];
  uint64_t v483[2];
  char v484;
  char v485[8];
  uint64_t v486[2];
  char v487;
  char v488[8];
  uint64_t v489[2];
  char v490;
  char v491[8];
  uint64_t v492[2];
  char v493;
  char v494[8];
  uint64_t v495[2];
  char v496;
  char v497[8];
  uint64_t v498[2];
  char v499;
  unsigned __int8 v500[8];
  uint64_t v501[2];
  char v502;
  char v503[8];
  uint64_t v504[2];
  char v505;
  unsigned __int8 v506[8];
  uint64_t v507[2];
  char v508;
  unsigned __int8 v509;
  _QWORD v510[2];
  char v511;
  unsigned __int8 v512[8];
  uint64_t v513[2];
  char v514;
  unsigned __int8 v515;
  _QWORD v516[2];
  char v517;
  unsigned __int8 v518[8];
  uint64_t v519[2];
  char v520;
  unsigned __int8 v521;
  _QWORD v522[2];
  char v523;
  unsigned __int8 v524[8];
  uint64_t v525[2];
  char v526;
  unsigned __int8 v527;
  _QWORD v528[2];
  char v529;
  unsigned __int8 v530[8];
  uint64_t v531[2];
  char v532;
  unsigned __int8 v533;
  _QWORD v534[2];
  char v535;
  unsigned __int8 v536[8];
  uint64_t v537[2];
  char v538;
  unsigned __int8 v539;
  _QWORD v540[2];
  char v541;
  unsigned __int8 v542[8];
  uint64_t v543[2];
  char v544;
  unsigned __int8 v545;
  _QWORD v546[2];
  char v547;
  unsigned __int8 v548[8];
  uint64_t v549[2];
  char v550;
  unsigned __int8 v551;
  _QWORD v552[2];
  char v553;
  unsigned __int8 v554[8];
  uint64_t v555[2];
  char v556;
  unsigned __int8 v557;
  _QWORD v558[2];
  char v559;
  unsigned __int8 v560[8];
  uint64_t v561[2];
  char v562;
  unsigned __int8 v563;
  _QWORD v564[2];
  char v565;
  unsigned __int8 v566[8];
  uint64_t v567[2];
  char v568;
  unsigned __int8 v569;
  _QWORD v570[2];
  char v571;
  unsigned __int8 v572[8];
  uint64_t v573[2];
  char v574;
  unsigned __int8 v575;
  _QWORD v576[2];
  char v577;
  unsigned __int8 v578[8];
  uint64_t v579[2];
  char v580;
  unsigned __int8 v581;
  _QWORD v582[2];
  char v583;
  char v584[8];
  uint64_t v585[2];
  char v586;
  char v587[8];
  uint64_t v588[2];
  char v589;
  char v590[8];
  uint64_t v591[2];
  char v592;
  char v593[8];
  uint64_t v594[2];
  char v595;
  char v596[8];
  uint64_t v597[2];
  char v598;
  char v599[8];
  uint64_t v600[2];
  char v601;
  char v602[8];
  uint64_t v603[2];
  char v604;
  char v605[8];
  uint64_t v606[2];
  char v607;
  char v608[8];
  uint64_t v609[2];
  char v610;
  char v611[8];
  uint64_t v612[2];
  char v613;
  char v614[8];
  uint64_t v615[2];
  char v616;
  unsigned __int8 v617[8];
  uint64_t v618[2];
  char v619;
  char v620[8];
  uint64_t v621[2];
  char v622;
  unsigned __int8 v623[8];
  uint64_t v624[2];
  char v625;
  unsigned __int8 v626;
  _QWORD v627[2];
  char v628;
  unsigned __int8 v629[8];
  uint64_t v630[2];
  char v631;
  unsigned __int8 v632;
  _QWORD v633[2];
  char v634;
  unsigned __int8 v635[8];
  uint64_t v636[2];
  char v637;
  unsigned __int8 v638;
  _QWORD v639[2];
  char v640;
  unsigned __int8 v641[8];
  uint64_t v642[2];
  char v643;
  unsigned __int8 v644;
  _QWORD v645[2];
  char v646;
  unsigned __int8 v647[8];
  uint64_t v648[2];
  char v649;
  unsigned __int8 v650;
  _QWORD v651[2];
  char v652;
  unsigned __int8 v653[8];
  uint64_t v654[2];
  char v655;
  unsigned __int8 v656;
  _QWORD v657[2];
  char v658;
  unsigned __int8 v659[8];
  uint64_t v660[2];
  char v661;
  unsigned __int8 v662;
  _QWORD v663[2];
  char v664;
  unsigned __int8 v665[8];
  uint64_t v666[2];
  char v667;
  unsigned __int8 v668;
  _QWORD v669[2];
  char v670;
  char v671[8];
  uint64_t v672[2];
  char v673;
  char v674[8];
  uint64_t v675[2];
  char v676;
  char v677[8];
  uint64_t v678[2];
  char v679;
  char v680[8];
  uint64_t v681[2];
  char v682;
  char v683[8];
  uint64_t v684[2];
  char v685;
  char v686[8];
  uint64_t v687[2];
  char v688;
  char v689[8];
  uint64_t v690[2];
  char v691;
  char v692[8];
  uint64_t v693[2];
  char v694;
  unsigned __int8 v695[8];
  uint64_t v696[2];
  char v697;
  char v698[8];
  uint64_t v699[2];
  char v700;
  unsigned __int8 v701[8];
  uint64_t v702[2];
  char v703;
  unsigned __int8 v704;
  _QWORD v705[2];
  char v706;
  char v707[8];
  uint64_t v708[2];
  char v709;
  char v710[8];
  uint64_t v711[2];
  char v712;
  char v713[8];
  uint64_t v714[2];
  char v715;
  char v716[8];
  uint64_t v717[2];
  char v718;
  char v719[8];
  uint64_t v720[2];
  char v721;
  char v722[8];
  uint64_t v723[2];
  char v724;
  char v725[8];
  uint64_t v726[2];
  char v727;
  char v728[8];
  uint64_t v729[2];
  char v730;
  char v731[8];
  uint64_t v732[2];
  char v733;
  char v734[8];
  uint64_t v735[2];
  char v736;
  char v737[8];
  uint64_t v738[2];
  char v739;
  char v740[8];
  uint64_t v741[2];
  char v742;
  char v743[8];
  uint64_t v744[2];
  char v745;
  char v746[8];
  uint64_t v747[2];
  char v748;
  char v749[8];
  uint64_t v750[2];
  char v751;
  char v752[8];
  uint64_t v753[2];
  char v754;
  char v755[8];
  uint64_t v756[2];
  char v757;
  char v758[8];
  uint64_t v759[2];
  char v760;
  char v761[8];
  uint64_t v762[2];
  char v763;
  char v764[8];
  uint64_t v765[2];
  char v766;
  char v767[8];
  uint64_t v768[2];
  char v769;
  char v770[8];
  uint64_t v771[2];
  char v772;
  char v773[8];
  uint64_t v774[2];
  char v775;
  char v776[8];
  uint64_t v777[2];
  char v778;
  char v779[8];
  uint64_t v780[2];
  char v781;
  char v782[8];
  uint64_t v783[2];
  char v784;
  char v785[8];
  uint64_t v786[2];
  char v787;
  char v788[8];
  uint64_t v789[2];
  char v790;
  char v791[8];
  uint64_t v792[2];
  char v793;
  uint64_t v794;

  v0 = MEMORY[0x24BDAC7A8]();
  v2 = v1;
  v3 = v0;
  v794 = *MEMORY[0x24BDAC8D0];
  sub_2399DAFD4();
  if (!qword_25693C8E0)
    goto LABEL_30;
  v4 = *(unsigned int *)(v3 + 384);
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)qword_25693C8E0);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = *(unsigned int *)(v3 + 384);
    if (qword_25693C8E0 <= v4)
      v6 = v4 % qword_25693C8E0;
  }
  else
  {
    v6 = ((_DWORD)qword_25693C8E0 - 1) & v4;
  }
  v7 = *(uint64_t ***)(qword_25693C8D8 + 8 * v6);
  if (!v7 || (v8 = *v7) == 0)
LABEL_30:
    sub_23941D898("unordered_map::at: key not found");
  if (v5.u32[0] < 2uLL)
  {
    while (1)
    {
      v10 = v8[1];
      if (v10 == v4)
      {
        if (*((_DWORD *)v8 + 4) == (_DWORD)v4)
          goto LABEL_21;
      }
      else if ((v10 & (qword_25693C8E0 - 1)) != v6)
      {
        goto LABEL_30;
      }
      v8 = (uint64_t *)*v8;
      if (!v8)
        goto LABEL_30;
    }
  }
  while (1)
  {
    v9 = v8[1];
    if (v9 == v4)
      break;
    if (v9 >= qword_25693C8E0)
      v9 %= (unint64_t)qword_25693C8E0;
    if (v9 != v6)
      goto LABEL_30;
LABEL_11:
    v8 = (uint64_t *)*v8;
    if (!v8)
      goto LABEL_30;
  }
  if (*((_DWORD *)v8 + 4) != (_DWORD)v4)
    goto LABEL_11;
LABEL_21:
  if (*((char *)v8 + 47) < 0)
  {
    sub_23941A7F8(__p, (void *)v8[3], v8[4]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v8 + 3);
    v190 = v8[5];
  }
  v701[0] = 3;
  v11 = (char *)operator new(0x18uLL);
  v11[23] = 14;
  strcpy(v11, "load_high_time");
  v702[0] = (uint64_t)v11;
  v702[1] = (uint64_t)v701;
  v703 = 1;
  v12 = *(_QWORD *)v3;
  v704 = 7;
  v705[0] = v12;
  v705[1] = &v704;
  v706 = 1;
  sub_2399DB6FC((uint64_t)v707, (uint64_t)v701, 2, 1, 2);
  v708[1] = (uint64_t)v707;
  v709 = 1;
  v695[0] = 3;
  v13 = (char *)operator new(0x18uLL);
  v13[23] = 18;
  strcpy(v13, "high_mesh_topology");
  v696[0] = (uint64_t)v13;
  v696[1] = (uint64_t)v695;
  v697 = 1;
  v665[0] = 3;
  v14 = (char *)operator new(0x18uLL);
  v14[23] = 10;
  strcpy(v14, "n_vertices");
  v666[0] = (uint64_t)v14;
  v666[1] = (uint64_t)v665;
  v667 = 1;
  v185 = v669;
  v15 = *(unsigned int *)(v3 + 8);
  v668 = 6;
  v669[0] = v15;
  v669[1] = &v668;
  v670 = 1;
  sub_2399DB6FC((uint64_t)v671, (uint64_t)v665, 2, 1, 2);
  v672[1] = (uint64_t)v671;
  v673 = 1;
  v659[0] = 3;
  v16 = (char *)operator new(0x18uLL);
  v16[23] = 12;
  strcpy(v16, "n_half_edges");
  v660[0] = (uint64_t)v16;
  v660[1] = (uint64_t)v659;
  v661 = 1;
  v184 = v663;
  v17 = *(unsigned int *)(v3 + 12);
  v662 = 6;
  v663[0] = v17;
  v663[1] = &v662;
  v664 = 1;
  sub_2399DB6FC((uint64_t)v674, (uint64_t)v659, 2, 1, 2);
  v675[1] = (uint64_t)v674;
  v676 = 1;
  v653[0] = 3;
  v18 = (char *)operator new(0x18uLL);
  v18[23] = 21;
  v186 = *(_OWORD *)"n_boundary_half_edges";
  strcpy(v18, "n_boundary_half_edges");
  v171 = *(uint64_t **)"lf_edges";
  v654[0] = (uint64_t)v18;
  v654[1] = (uint64_t)v653;
  v655 = 1;
  v183 = v657;
  v19 = *(unsigned int *)(v3 + 16);
  v656 = 6;
  v657[0] = v19;
  v657[1] = &v656;
  v658 = 1;
  sub_2399DB6FC((uint64_t)v677, (uint64_t)v653, 2, 1, 2);
  v678[1] = (uint64_t)v677;
  v679 = 1;
  v647[0] = 3;
  v20 = (char *)operator new(0x18uLL);
  v20[23] = 7;
  strcpy(v20, "n_edges");
  v648[0] = (uint64_t)v20;
  v648[1] = (uint64_t)v647;
  v649 = 1;
  v182 = v651;
  v21 = *(unsigned int *)(v3 + 20);
  v650 = 6;
  v651[0] = v21;
  v651[1] = &v650;
  v652 = 1;
  sub_2399DB6FC((uint64_t)v680, (uint64_t)v647, 2, 1, 2);
  v681[1] = (uint64_t)v680;
  v682 = 1;
  v641[0] = 3;
  v22 = (char *)operator new(0x18uLL);
  v22[23] = 7;
  strcpy(v22, "n_faces");
  v642[0] = (uint64_t)v22;
  v642[1] = (uint64_t)v641;
  v643 = 1;
  v181 = v645;
  v23 = *(unsigned int *)(v3 + 24);
  v644 = 6;
  v645[0] = v23;
  v645[1] = &v644;
  v646 = 1;
  sub_2399DB6FC((uint64_t)v683, (uint64_t)v641, 2, 1, 2);
  v684[1] = (uint64_t)v683;
  v685 = 1;
  v635[0] = 3;
  v24 = (char *)operator new(0x18uLL);
  v24[23] = 16;
  v166 = *(_OWORD *)"n_boundary_loops";
  strcpy(v24, "n_boundary_loops");
  v636[0] = (uint64_t)v24;
  v636[1] = (uint64_t)v635;
  v637 = 1;
  v180 = v639;
  v25 = *(unsigned int *)(v3 + 28);
  v638 = 6;
  v639[0] = v25;
  v639[1] = &v638;
  v640 = 1;
  sub_2399DB6FC((uint64_t)v686, (uint64_t)v635, 2, 1, 2);
  v687[1] = (uint64_t)v686;
  v688 = 1;
  v629[0] = 3;
  v26 = (char *)operator new(0x18uLL);
  v26[23] = 7;
  strcpy(v26, "n_genus");
  v630[0] = (uint64_t)v26;
  v630[1] = (uint64_t)v629;
  v631 = 1;
  v179 = v633;
  v27 = *(unsigned int *)(v3 + 32);
  v632 = 6;
  v633[0] = v27;
  v633[1] = &v632;
  v634 = 1;
  sub_2399DB6FC((uint64_t)v689, (uint64_t)v629, 2, 1, 2);
  v690[1] = (uint64_t)v689;
  v691 = 1;
  v623[0] = 3;
  v28 = (char *)operator new(0x18uLL);
  v28[23] = 12;
  v163 = *(uint64_t **)"n_components";
  strcpy(v28, "n_components");
  v624[0] = (uint64_t)v28;
  v624[1] = (uint64_t)v623;
  v625 = 1;
  v178 = v627;
  v29 = *(unsigned int *)(v3 + 36);
  v626 = 6;
  v627[0] = v29;
  v627[1] = &v626;
  v628 = 1;
  sub_2399DB6FC((uint64_t)v692, (uint64_t)v623, 2, 1, 2);
  v693[1] = (uint64_t)v692;
  v694 = 1;
  v699[1] = sub_2399DB6FC((uint64_t)v698, (uint64_t)v671, 8, 1, 2);
  v700 = 1;
  sub_2399DB6FC((uint64_t)v710, (uint64_t)v695, 2, 1, 2);
  v167 = *(uint64_t **)"n_half_edges";
  v711[1] = (uint64_t)v710;
  v712 = 1;
  v617[0] = 3;
  v30 = (char *)operator new(0x18uLL);
  v30[23] = 18;
  strcpy(v30, "high_mesh_geometry");
  v618[0] = (uint64_t)v30;
  v618[1] = (uint64_t)v617;
  v619 = 1;
  v578[0] = 3;
  v31 = (char *)operator new(0x18uLL);
  v31[23] = 15;
  strcpy(v31, "avg_edge_length");
  qmemcpy(v161, "e_lengthavg_edge", sizeof(v161));
  v579[0] = (uint64_t)v31;
  v579[1] = (uint64_t)v578;
  v580 = 1;
  v176 = v582;
  v177 = v705;
  v32 = *(float *)(v3 + 48);
  v581 = 7;
  *(double *)v582 = v32;
  v582[1] = &v581;
  v583 = 1;
  sub_2399DB6FC((uint64_t)v584, (uint64_t)v578, 2, 1, 2);
  v585[1] = (uint64_t)v584;
  v586 = 1;
  v572[0] = 3;
  v33 = (char *)operator new(0x18uLL);
  v33[23] = 18;
  v159 = *(_OWORD *)"avg_vertex_valence";
  strcpy(v33, "avg_vertex_valence");
  v573[0] = (uint64_t)v33;
  v573[1] = (uint64_t)v572;
  v574 = 1;
  v175 = v576;
  v34 = *(float *)(v3 + 52);
  v575 = 7;
  *(double *)v576 = v34;
  v576[1] = &v575;
  v577 = 1;
  sub_2399DB6FC((uint64_t)v587, (uint64_t)v572, 2, 1, 2);
  v588[1] = (uint64_t)v587;
  v589 = 1;
  v567[0] = 0;
  v566[0] = 3;
  v35 = (char *)operator new(0x18uLL);
  v36 = (char *)operator new(0x20uLL);
  *(_QWORD *)v35 = v36;
  v157 = xmmword_239EC77A0;
  *(_OWORD *)(v35 + 8) = xmmword_239EC77A0;
  strcpy(v36, "vertex_valence_deviation");
  qmemcpy(v156, "eviationvertex_valence_d", sizeof(v156));
  v567[0] = (uint64_t)v35;
  v567[1] = (uint64_t)v566;
  v568 = 1;
  v174 = v570;
  v37 = *(float *)(v3 + 56);
  v569 = 7;
  *(double *)v570 = v37;
  v570[1] = &v569;
  v571 = 1;
  sub_2399DB6FC((uint64_t)v590, (uint64_t)v566, 2, 1, 2);
  v591[1] = (uint64_t)v590;
  v592 = 1;
  v560[0] = 3;
  v38 = (char *)operator new(0x18uLL);
  v38[23] = 14;
  strcpy(v38, "edge_length_SD");
  qmemcpy(v154, "ength_SDedge_len", sizeof(v154));
  v561[0] = (uint64_t)v38;
  v561[1] = (uint64_t)v560;
  v562 = 1;
  v173 = v564;
  v39 = *(float *)(v3 + 60);
  v563 = 7;
  *(double *)v564 = v39;
  v564[1] = &v563;
  v565 = 1;
  sub_2399DB6FC((uint64_t)v593, (uint64_t)v560, 2, 1, 2);
  v594[1] = (uint64_t)v593;
  v595 = 1;
  v554[0] = 3;
  v40 = (char *)operator new(0x18uLL);
  v40[23] = 13;
  strcpy(v40, "face_angle_SD");
  qmemcpy(v153, "angle_SDface_ang", sizeof(v153));
  v555[0] = (uint64_t)v40;
  v555[1] = (uint64_t)v554;
  v556 = 1;
  v172 = v558;
  v41 = *(float *)(v3 + 64);
  v557 = 7;
  *(double *)v558 = v41;
  v558[1] = &v557;
  v559 = 1;
  sub_2399DB6FC((uint64_t)v596, (uint64_t)v554, 2, 1, 2);
  v597[1] = (uint64_t)v596;
  v598 = 1;
  v548[0] = 3;
  v42 = (char *)operator new(0x18uLL);
  v42[23] = 10;
  strcpy(v42, "bbox_min_x");
  v549[0] = (uint64_t)v42;
  v549[1] = (uint64_t)v548;
  v550 = 1;
  v170 = v552;
  v43 = *(float *)(v3 + 80);
  v551 = 7;
  *(double *)v552 = v43;
  v552[1] = &v551;
  v553 = 1;
  sub_2399DB6FC((uint64_t)v599, (uint64_t)v548, 2, 1, 2);
  v600[1] = (uint64_t)v599;
  v601 = 1;
  v542[0] = 3;
  v44 = (char *)operator new(0x18uLL);
  v44[23] = 10;
  strcpy(v44, "bbox_min_y");
  v543[0] = (uint64_t)v44;
  v543[1] = (uint64_t)v542;
  v544 = 1;
  v169 = v546;
  v45 = *(float *)(v3 + 84);
  v545 = 7;
  *(double *)v546 = v45;
  v546[1] = &v545;
  v547 = 1;
  sub_2399DB6FC((uint64_t)v602, (uint64_t)v542, 2, 1, 2);
  v603[1] = (uint64_t)v602;
  v604 = 1;
  v536[0] = 3;
  v46 = (char *)operator new(0x18uLL);
  v46[23] = 10;
  strcpy(v46, "bbox_min_z");
  v537[0] = (uint64_t)v46;
  v537[1] = (uint64_t)v536;
  v538 = 1;
  v168 = v540;
  v47 = *(float *)(v3 + 88);
  v539 = 7;
  *(double *)v540 = v47;
  v540[1] = &v539;
  v541 = 1;
  sub_2399DB6FC((uint64_t)v605, (uint64_t)v536, 2, 1, 2);
  v606[1] = (uint64_t)v605;
  v607 = 1;
  v530[0] = 3;
  v48 = (char *)operator new(0x18uLL);
  v48[23] = 10;
  strcpy(v48, "bbox_max_x");
  v531[0] = (uint64_t)v48;
  v531[1] = (uint64_t)v530;
  v532 = 1;
  v165 = v534;
  v49 = *(float *)(v3 + 96);
  v533 = 7;
  *(double *)v534 = v49;
  v534[1] = &v533;
  v535 = 1;
  sub_2399DB6FC((uint64_t)v608, (uint64_t)v530, 2, 1, 2);
  v609[1] = (uint64_t)v608;
  v610 = 1;
  v524[0] = 3;
  v50 = (char *)operator new(0x18uLL);
  v50[23] = 10;
  strcpy(v50, "bbox_max_y");
  v525[0] = (uint64_t)v50;
  v525[1] = (uint64_t)v524;
  v526 = 1;
  v164 = v528;
  v51 = *(float *)(v3 + 100);
  v527 = 7;
  *(double *)v528 = v51;
  v528[1] = &v527;
  v529 = 1;
  sub_2399DB6FC((uint64_t)v611, (uint64_t)v524, 2, 1, 2);
  v612[1] = (uint64_t)v611;
  v613 = 1;
  v518[0] = 3;
  v52 = (char *)operator new(0x18uLL);
  v52[23] = 10;
  strcpy(v52, "bbox_max_z");
  v519[0] = (uint64_t)v52;
  v519[1] = (uint64_t)v518;
  v520 = 1;
  v162 = v522;
  v53 = *(float *)(v3 + 104);
  v521 = 7;
  *(double *)v522 = v53;
  v522[1] = &v521;
  v523 = 1;
  sub_2399DB6FC((uint64_t)v614, (uint64_t)v518, 2, 1, 2);
  v615[1] = (uint64_t)v614;
  v616 = 1;
  v621[1] = sub_2399DB6FC((uint64_t)v620, (uint64_t)v584, 11, 1, 2);
  v622 = 1;
  sub_2399DB6FC((uint64_t)v713, (uint64_t)v617, 2, 1, 2);
  v714[1] = (uint64_t)v713;
  v715 = 1;
  v512[0] = 3;
  v54 = (char *)operator new(0x18uLL);
  v54[23] = 13;
  strcpy(v54, "load_low_time");
  v513[0] = (uint64_t)v54;
  v513[1] = (uint64_t)v512;
  v514 = 1;
  v160 = v516;
  v55 = *(_QWORD *)(v3 + 112);
  v515 = 7;
  v516[0] = v55;
  v516[1] = &v515;
  v517 = 1;
  sub_2399DB6FC((uint64_t)v716, (uint64_t)v512, 2, 1, 2);
  v717[1] = (uint64_t)v716;
  v718 = 1;
  v506[0] = 3;
  v56 = (char *)operator new(0x18uLL);
  v56[23] = 13;
  strcpy(v56, "simplify_time");
  v507[0] = (uint64_t)v56;
  v507[1] = (uint64_t)v506;
  v508 = 1;
  v158 = v510;
  v57 = *(_QWORD *)(v3 + 120);
  v509 = 7;
  v510[0] = v57;
  v510[1] = &v509;
  v511 = 1;
  sub_2399DB6FC((uint64_t)v719, (uint64_t)v506, 2, 1, 2);
  v720[1] = (uint64_t)v719;
  v721 = 1;
  v500[0] = 3;
  v58 = (char *)operator new(0x18uLL);
  v152 = v2;
  v58[23] = 17;
  strcpy(v58, "low_mesh_topology");
  v501[0] = (uint64_t)v58;
  v501[1] = (uint64_t)v500;
  v502 = 1;
  v470[0] = 3;
  v59 = (char *)operator new(0x18uLL);
  v59[23] = 10;
  strcpy(v59, "n_vertices");
  v471[0] = (uint64_t)v59;
  v471[1] = (uint64_t)v470;
  v472 = 1;
  v155 = v474;
  v60 = *(unsigned int *)(v3 + 128);
  v473 = 6;
  v474[0] = v60;
  v474[1] = &v473;
  v475 = 1;
  sub_2399DB6FC((uint64_t)v476, (uint64_t)v470, 2, 1, 2);
  v477[1] = (uint64_t)v476;
  v478 = 1;
  v464[0] = 3;
  v61 = operator new(0x18uLL);
  v61[23] = 12;
  strcpy(v61 + 8, "dges");
  *(_QWORD *)v61 = v167;
  v465[0] = (uint64_t)v61;
  v465[1] = (uint64_t)v464;
  v466 = 1;
  v167 = v468;
  v62 = *(unsigned int *)(v3 + 132);
  v467 = 6;
  v468[0] = v62;
  v468[1] = &v467;
  v469 = 1;
  sub_2399DB6FC((uint64_t)v479, (uint64_t)v464, 2, 1, 2);
  v480[1] = (uint64_t)v479;
  v481 = 1;
  v458[0] = 3;
  v63 = (char *)operator new(0x18uLL);
  v63[23] = 21;
  *(_OWORD *)v63 = v186;
  *(_QWORD *)(v63 + 13) = v171;
  v63[21] = 0;
  v459[0] = (uint64_t)v63;
  v459[1] = (uint64_t)v458;
  v460 = 1;
  v171 = v462;
  v64 = *(unsigned int *)(v3 + 136);
  v461 = 6;
  v462[0] = v64;
  v462[1] = &v461;
  v463 = 1;
  sub_2399DB6FC((uint64_t)v482, (uint64_t)v458, 2, 1, 2);
  v483[1] = (uint64_t)v482;
  v484 = 1;
  v452[0] = 3;
  v65 = (char *)operator new(0x18uLL);
  v65[23] = 7;
  strcpy(v65, "n_edges");
  v453[0] = (uint64_t)v65;
  v453[1] = (uint64_t)v452;
  v454 = 1;
  v66 = *(unsigned int *)(v3 + 140);
  v455 = 6;
  v456[0] = v66;
  v456[1] = (uint64_t)&v455;
  v457 = 1;
  sub_2399DB6FC((uint64_t)v485, (uint64_t)v452, 2, 1, 2);
  v486[1] = (uint64_t)v485;
  v487 = 1;
  v446[0] = 3;
  v67 = (char *)operator new(0x18uLL);
  v67[23] = 7;
  strcpy(v67, "n_faces");
  v447[0] = (uint64_t)v67;
  v447[1] = (uint64_t)v446;
  v448 = 1;
  v68 = *(unsigned int *)(v3 + 144);
  v449 = 6;
  v450[0] = v68;
  v450[1] = (uint64_t)&v449;
  v451 = 1;
  sub_2399DB6FC((uint64_t)v488, (uint64_t)v446, 2, 1, 2);
  v489[1] = (uint64_t)v488;
  v490 = 1;
  v440[0] = 3;
  v69 = operator new(0x18uLL);
  v69[23] = 16;
  *(_OWORD *)v69 = v166;
  v69[16] = 0;
  v441[0] = (uint64_t)v69;
  v441[1] = (uint64_t)v440;
  v442 = 1;
  *(_QWORD *)&v166 = v444;
  v70 = *(unsigned int *)(v3 + 148);
  v443 = 6;
  v444[0] = v70;
  v444[1] = &v443;
  v445 = 1;
  sub_2399DB6FC((uint64_t)v491, (uint64_t)v440, 2, 1, 2);
  v492[1] = (uint64_t)v491;
  v493 = 1;
  v434[0] = 3;
  v71 = (char *)operator new(0x18uLL);
  v71[23] = 7;
  strcpy(v71, "n_genus");
  v435[0] = (uint64_t)v71;
  v435[1] = (uint64_t)v434;
  v436 = 1;
  v72 = *(unsigned int *)(v3 + 152);
  v437 = 6;
  v438[0] = v72;
  v438[1] = (uint64_t)&v437;
  v439 = 1;
  sub_2399DB6FC((uint64_t)v494, (uint64_t)v434, 2, 1, 2);
  v495[1] = (uint64_t)v494;
  v496 = 1;
  v428[0] = 3;
  v73 = operator new(0x18uLL);
  v73[23] = 12;
  strcpy(v73 + 8, "ents");
  *(_QWORD *)v73 = v163;
  v429[0] = (uint64_t)v73;
  v429[1] = (uint64_t)v428;
  v430 = 1;
  v163 = v432;
  v74 = *(unsigned int *)(v3 + 156);
  v431 = 6;
  v432[0] = v74;
  v432[1] = &v431;
  v433 = 1;
  sub_2399DB6FC((uint64_t)v497, (uint64_t)v428, 2, 1, 2);
  v498[1] = (uint64_t)v497;
  v499 = 1;
  v504[1] = sub_2399DB6FC((uint64_t)v503, (uint64_t)v476, 8, 1, 2);
  v505 = 1;
  sub_2399DB6FC((uint64_t)v722, (uint64_t)v500, 2, 1, 2);
  v723[1] = (uint64_t)v722;
  v724 = 1;
  v422[0] = 3;
  v75 = (char *)operator new(0x18uLL);
  v75[23] = 17;
  strcpy(v75, "low_mesh_geometry");
  v423[0] = (uint64_t)v75;
  v423[1] = (uint64_t)v422;
  v424 = 1;
  v383[0] = 3;
  v76 = (uint64_t **)operator new(0x18uLL);
  *((_BYTE *)v76 + 23) = 15;
  *v76 = v161[1];
  *(uint64_t **)((char *)v76 + 7) = v161[0];
  *((_BYTE *)v76 + 15) = 0;
  v384[0] = (uint64_t)v76;
  v384[1] = (uint64_t)v383;
  v385 = 1;
  v161[1] = v387;
  v77 = *(float *)(v3 + 160);
  v386 = 7;
  *(double *)v387 = v77;
  v387[1] = &v386;
  v388 = 1;
  sub_2399DB6FC((uint64_t)v389, (uint64_t)v383, 2, 1, 2);
  v390[1] = (uint64_t)v389;
  v391 = 1;
  v377[0] = 3;
  v78 = operator new(0x18uLL);
  v78[23] = 18;
  strcpy(v78 + 16, "ce");
  *(_OWORD *)v78 = v159;
  v378[0] = (uint64_t)v78;
  v378[1] = (uint64_t)v377;
  v379 = 1;
  v161[0] = v381;
  v79 = *(float *)(v3 + 164);
  v380 = 7;
  *(double *)v381 = v79;
  v381[1] = &v380;
  v382 = 1;
  sub_2399DB6FC((uint64_t)v392, (uint64_t)v377, 2, 1, 2);
  v393[1] = (uint64_t)v392;
  v394 = 1;
  v372[0] = 0;
  v371[0] = 3;
  v80 = (char *)operator new(0x18uLL);
  v81 = (uint64_t **)operator new(0x20uLL);
  *(_QWORD *)v80 = v81;
  *(_OWORD *)(v80 + 8) = v157;
  *(_OWORD *)v81 = *(_OWORD *)&v156[1];
  v81[2] = v156[0];
  *((_BYTE *)v81 + 24) = 0;
  v372[0] = (uint64_t)v80;
  v372[1] = (uint64_t)v371;
  v373 = 1;
  *(_QWORD *)&v159 = v375;
  v82 = *(float *)(v3 + 168);
  v374 = 7;
  *(double *)v375 = v82;
  v375[1] = &v374;
  v376 = 1;
  sub_2399DB6FC((uint64_t)v395, (uint64_t)v371, 2, 1, 2);
  v396[1] = (uint64_t)v395;
  v397 = 1;
  v365[0] = 3;
  v83 = (uint64_t **)operator new(0x18uLL);
  *((_BYTE *)v83 + 23) = 14;
  *v83 = v154[1];
  *(uint64_t **)((char *)v83 + 6) = v154[0];
  *((_BYTE *)v83 + 14) = 0;
  v366[0] = (uint64_t)v83;
  v366[1] = (uint64_t)v365;
  v367 = 1;
  *(_QWORD *)&v157 = v369;
  v84 = *(float *)(v3 + 172);
  v368 = 7;
  *(double *)v369 = v84;
  v369[1] = &v368;
  v370 = 1;
  sub_2399DB6FC((uint64_t)v398, (uint64_t)v365, 2, 1, 2);
  v399[1] = (uint64_t)v398;
  v400 = 1;
  v359[0] = 3;
  v85 = (uint64_t **)operator new(0x18uLL);
  *((_BYTE *)v85 + 23) = 13;
  *v85 = v153[1];
  *(uint64_t **)((char *)v85 + 5) = v153[0];
  *((_BYTE *)v85 + 13) = 0;
  v360[0] = (uint64_t)v85;
  v360[1] = (uint64_t)v359;
  v361 = 1;
  v156[1] = v363;
  v86 = *(float *)(v3 + 176);
  v362 = 7;
  *(double *)v363 = v86;
  v363[1] = &v362;
  v364 = 1;
  sub_2399DB6FC((uint64_t)v401, (uint64_t)v359, 2, 1, 2);
  v402[1] = (uint64_t)v401;
  v403 = 1;
  v353[0] = 3;
  v87 = (char *)operator new(0x18uLL);
  v87[23] = 10;
  strcpy(v87, "bbox_min_x");
  v354[0] = (uint64_t)v87;
  v354[1] = (uint64_t)v353;
  v355 = 1;
  v156[0] = v357;
  v88 = *(float *)(v3 + 192);
  v356 = 7;
  *(double *)v357 = v88;
  v357[1] = &v356;
  v358 = 1;
  sub_2399DB6FC((uint64_t)v404, (uint64_t)v353, 2, 1, 2);
  v405[1] = (uint64_t)v404;
  v406 = 1;
  v347[0] = 3;
  v89 = (char *)operator new(0x18uLL);
  v89[23] = 10;
  strcpy(v89, "bbox_min_y");
  v348[0] = (uint64_t)v89;
  v348[1] = (uint64_t)v347;
  v349 = 1;
  v154[1] = v351;
  v90 = *(float *)(v3 + 196);
  v350 = 7;
  *(double *)v351 = v90;
  v351[1] = &v350;
  v352 = 1;
  sub_2399DB6FC((uint64_t)v407, (uint64_t)v347, 2, 1, 2);
  v408[1] = (uint64_t)v407;
  v409 = 1;
  v341[0] = 3;
  v91 = (char *)operator new(0x18uLL);
  v91[23] = 10;
  strcpy(v91, "bbox_min_z");
  v342[0] = (uint64_t)v91;
  v342[1] = (uint64_t)v341;
  v343 = 1;
  v154[0] = v345;
  v92 = *(float *)(v3 + 200);
  v344 = 7;
  *(double *)v345 = v92;
  v345[1] = &v344;
  v346 = 1;
  sub_2399DB6FC((uint64_t)v410, (uint64_t)v341, 2, 1, 2);
  v411[1] = (uint64_t)v410;
  v412 = 1;
  v335[0] = 3;
  v93 = (char *)operator new(0x18uLL);
  v93[23] = 10;
  strcpy(v93, "bbox_max_x");
  v336[0] = (uint64_t)v93;
  v336[1] = (uint64_t)v335;
  v337 = 1;
  v153[1] = v339;
  v94 = *(float *)(v3 + 208);
  v338 = 7;
  *(double *)v339 = v94;
  v339[1] = &v338;
  v340 = 1;
  sub_2399DB6FC((uint64_t)v413, (uint64_t)v335, 2, 1, 2);
  v414[1] = (uint64_t)v413;
  v415 = 1;
  v329[0] = 3;
  v95 = (char *)operator new(0x18uLL);
  v95[23] = 10;
  strcpy(v95, "bbox_max_y");
  v330[0] = (uint64_t)v95;
  v330[1] = (uint64_t)v329;
  v331 = 1;
  v153[0] = v333;
  v96 = *(float *)(v3 + 212);
  v332 = 7;
  *(double *)v333 = v96;
  v333[1] = &v332;
  v334 = 1;
  sub_2399DB6FC((uint64_t)v416, (uint64_t)v329, 2, 1, 2);
  v417[1] = (uint64_t)v416;
  v418 = 1;
  v323[0] = 3;
  v97 = (char *)operator new(0x18uLL);
  v97[23] = 10;
  strcpy(v97, "bbox_max_z");
  v324[0] = (uint64_t)v97;
  v324[1] = (uint64_t)v323;
  v325 = 1;
  v98 = *(float *)(v3 + 216);
  v326 = 7;
  *(double *)v327 = v98;
  v327[1] = (uint64_t)&v326;
  v328 = 1;
  sub_2399DB6FC((uint64_t)v419, (uint64_t)v323, 2, 1, 2);
  v420[1] = (uint64_t)v419;
  v421 = 1;
  v426[1] = sub_2399DB6FC((uint64_t)v425, (uint64_t)v389, 11, 1, 2);
  v427 = 1;
  sub_2399DB6FC((uint64_t)v725, (uint64_t)v422, 2, 1, 2);
  v726[1] = (uint64_t)v725;
  v727 = 1;
  v317[0] = 3;
  v99 = (char *)operator new(0x18uLL);
  v99[23] = 10;
  strcpy(v99, "chart_time");
  v318[0] = (uint64_t)v99;
  v318[1] = (uint64_t)v317;
  v319 = 1;
  v100 = *(_QWORD *)(v3 + 224);
  v320 = 7;
  v321[0] = v100;
  v321[1] = (uint64_t)&v320;
  v322 = 1;
  sub_2399DB6FC((uint64_t)v728, (uint64_t)v317, 2, 1, 2);
  v729[1] = (uint64_t)v728;
  v730 = 1;
  v311[0] = 3;
  v101 = (char *)operator new(0x18uLL);
  v101[23] = 12;
  strcpy(v101, "chart_number");
  v312[0] = (uint64_t)v101;
  v312[1] = (uint64_t)v311;
  v313 = 1;
  v102 = *(_QWORD *)(v3 + 232);
  v314 = 6;
  v315[0] = v102;
  v315[1] = (uint64_t)&v314;
  v316 = 1;
  sub_2399DB6FC((uint64_t)v731, (uint64_t)v311, 2, 1, 2);
  v732[1] = (uint64_t)v731;
  v733 = 1;
  v306[0] = 0;
  v305[0] = 3;
  v103 = (char *)operator new(0x18uLL);
  v104 = (char *)operator new(0x19uLL);
  *(_QWORD *)v103 = v104;
  v186 = xmmword_239EC7360;
  *(_OWORD *)(v103 + 8) = xmmword_239EC7360;
  strcpy(v104, "chart_max_stretch_ratio");
  v306[0] = (uint64_t)v103;
  v306[1] = (uint64_t)v305;
  v307 = 1;
  v105 = *(float *)(v3 + 240);
  v308 = 7;
  *(double *)v309 = v105;
  v309[1] = (uint64_t)&v308;
  v310 = 1;
  sub_2399DB6FC((uint64_t)v734, (uint64_t)v305, 2, 1, 2);
  v735[1] = (uint64_t)v734;
  v736 = 1;
  v300[0] = 0;
  v299[0] = 3;
  v106 = (char *)operator new(0x18uLL);
  v107 = (char *)operator new(0x19uLL);
  *(_QWORD *)v106 = v107;
  *(_OWORD *)(v106 + 8) = v186;
  strcpy(v107, "chart_avg_stretch_ratio");
  v300[0] = (uint64_t)v106;
  v300[1] = (uint64_t)v299;
  v301 = 1;
  v108 = *(float *)(v3 + 244);
  v302 = 7;
  *(double *)v303 = v108;
  v303[1] = (uint64_t)&v302;
  v304 = 1;
  sub_2399DB6FC((uint64_t)v737, (uint64_t)v299, 2, 1, 2);
  v738[1] = (uint64_t)v737;
  v739 = 1;
  v294[0] = 0;
  v293[0] = 3;
  v109 = (char *)operator new(0x18uLL);
  v110 = (char *)operator new(0x20uLL);
  *(_QWORD *)v109 = v110;
  *(_OWORD *)(v109 + 8) = xmmword_239EC77E0;
  strcpy(v110, "chart_self_intersect_ratio");
  v294[0] = (uint64_t)v109;
  v294[1] = (uint64_t)v293;
  v295 = 1;
  v111 = *(float *)(v3 + 248);
  v296 = 7;
  *(double *)v297 = v111;
  v297[1] = (uint64_t)&v296;
  v298 = 1;
  sub_2399DB6FC((uint64_t)v740, (uint64_t)v293, 2, 1, 2);
  v741[1] = (uint64_t)v740;
  v742 = 1;
  v287[0] = 3;
  v112 = (char *)operator new(0x18uLL);
  v112[23] = 9;
  strcpy(v112, "pack_time");
  v288[0] = (uint64_t)v112;
  v288[1] = (uint64_t)v287;
  v289 = 1;
  v113 = *(_QWORD *)(v3 + 256);
  v290 = 7;
  v291[0] = v113;
  v291[1] = (uint64_t)&v290;
  v292 = 1;
  sub_2399DB6FC((uint64_t)v743, (uint64_t)v287, 2, 1, 2);
  v744[1] = (uint64_t)v743;
  v745 = 1;
  v281[0] = 3;
  v114 = (char *)operator new(0x18uLL);
  v114[23] = 15;
  strcpy(v114, "pack_img_number");
  v282[0] = (uint64_t)v114;
  v282[1] = (uint64_t)v281;
  v283 = 1;
  v115 = *(_QWORD *)(v3 + 264);
  v284 = 6;
  v285[0] = v115;
  v285[1] = (uint64_t)&v284;
  v286 = 1;
  sub_2399DB6FC((uint64_t)v746, (uint64_t)v281, 2, 1, 2);
  v747[1] = (uint64_t)v746;
  v748 = 1;
  v275[0] = 3;
  v116 = (char *)operator new(0x18uLL);
  v116[23] = 11;
  strcpy(v116, "mesh_repair");
  v276[0] = (uint64_t)v116;
  v276[1] = (uint64_t)v275;
  v277 = 1;
  v117 = *(_QWORD *)(v3 + 272);
  v278 = 6;
  v279[0] = v117;
  v279[1] = (uint64_t)&v278;
  v280 = 1;
  sub_2399DB6FC((uint64_t)v749, (uint64_t)v275, 2, 1, 2);
  v750[1] = (uint64_t)v749;
  v751 = 1;
  v269[0] = 3;
  v118 = (char *)operator new(0x18uLL);
  v118[23] = 20;
  strcpy(v118, "mesh_processing_time");
  v270[0] = (uint64_t)v118;
  v270[1] = (uint64_t)v269;
  v271 = 1;
  v119 = *(_QWORD *)(v3 + 280);
  v272 = 7;
  v273[0] = v119;
  v273[1] = (uint64_t)&v272;
  v274 = 1;
  sub_2399DB6FC((uint64_t)v752, (uint64_t)v269, 2, 1, 2);
  v753[1] = (uint64_t)v752;
  v754 = 1;
  v263[0] = 3;
  v120 = (char *)operator new(0x18uLL);
  v120[23] = 14;
  strcpy(v120, "rasterize_time");
  v264[0] = (uint64_t)v120;
  v264[1] = (uint64_t)v263;
  v265 = 1;
  v121 = *(_QWORD *)(v3 + 288);
  v266 = 7;
  v267[0] = v121;
  v267[1] = (uint64_t)&v266;
  v268 = 1;
  sub_2399DB6FC((uint64_t)v755, (uint64_t)v263, 2, 1, 2);
  v756[1] = (uint64_t)v755;
  v757 = 1;
  v257[0] = 3;
  v122 = (char *)operator new(0x18uLL);
  v122[23] = 14;
  strcpy(v122, "build_ray_time");
  v258[0] = (uint64_t)v122;
  v258[1] = (uint64_t)v257;
  v259 = 1;
  v123 = *(_QWORD *)(v3 + 296);
  v260 = 7;
  v261[0] = v123;
  v261[1] = (uint64_t)&v260;
  v262 = 1;
  sub_2399DB6FC((uint64_t)v758, (uint64_t)v257, 2, 1, 2);
  v759[1] = (uint64_t)v758;
  v760 = 1;
  v252[0] = 0;
  v251[0] = 3;
  v124 = (char *)operator new(0x18uLL);
  v125 = (char *)operator new(0x19uLL);
  *(_QWORD *)v124 = v125;
  *(_OWORD *)(v124 + 8) = v186;
  strcpy(v125, "retrieve_attribute_time");
  v252[0] = (uint64_t)v124;
  v252[1] = (uint64_t)v251;
  v253 = 1;
  *(_QWORD *)&v186 = v255;
  v126 = *(_QWORD *)(v3 + 304);
  v254 = 7;
  v255[0] = v126;
  v255[1] = &v254;
  v256 = 1;
  sub_2399DB6FC((uint64_t)v761, (uint64_t)v251, 2, 1, 2);
  v762[1] = (uint64_t)v761;
  v763 = 1;
  v246[0] = 0;
  v245[0] = 3;
  v127 = (char *)operator new(0x18uLL);
  v128 = (char *)operator new(0x20uLL);
  *(_QWORD *)v127 = v128;
  *(_OWORD *)(v127 + 8) = xmmword_239EC77E0;
  strcpy(v128, "intersected_number_of_rays");
  v246[0] = (uint64_t)v127;
  v246[1] = (uint64_t)v245;
  v247 = 1;
  v129 = *(_QWORD *)(v3 + 312);
  v248 = 6;
  v249[0] = v129;
  v249[1] = (uint64_t)&v248;
  v250 = 1;
  sub_2399DB6FC((uint64_t)v764, (uint64_t)v245, 2, 1, 2);
  v765[1] = (uint64_t)v764;
  v766 = 1;
  v239[0] = 3;
  v130 = (char *)operator new(0x18uLL);
  v130[23] = 20;
  strcpy(v130, "total_number_of_rays");
  v240[0] = (uint64_t)v130;
  v240[1] = (uint64_t)v239;
  v241 = 1;
  v131 = *(_QWORD *)(v3 + 320);
  v242 = 6;
  v243[0] = v131;
  v243[1] = (uint64_t)&v242;
  v244 = 1;
  sub_2399DB6FC((uint64_t)v767, (uint64_t)v239, 2, 1, 2);
  v768[1] = (uint64_t)v767;
  v769 = 1;
  v233[0] = 3;
  v132 = (char *)operator new(0x18uLL);
  v132[23] = 16;
  strcpy(v132, "intersected_rate");
  v234[0] = (uint64_t)v132;
  v234[1] = (uint64_t)v233;
  v235 = 1;
  v133 = *(float *)(v3 + 328);
  v236 = 7;
  *(double *)v237 = v133;
  v237[1] = (uint64_t)&v236;
  v238 = 1;
  sub_2399DB6FC((uint64_t)v770, (uint64_t)v233, 2, 1, 2);
  v771[1] = (uint64_t)v770;
  v772 = 1;
  v227[0] = 3;
  v134 = (char *)operator new(0x18uLL);
  v134[23] = 8;
  strcpy(v134, "min_disp");
  v228[0] = (uint64_t)v134;
  v228[1] = (uint64_t)v227;
  v229 = 1;
  v135 = *(_QWORD *)(v3 + 336);
  v230 = 7;
  v231[0] = v135;
  v231[1] = (uint64_t)&v230;
  v232 = 1;
  sub_2399DB6FC((uint64_t)v773, (uint64_t)v227, 2, 1, 2);
  v774[1] = (uint64_t)v773;
  v775 = 1;
  v221[0] = 3;
  v136 = (char *)operator new(0x18uLL);
  v136[23] = 8;
  strcpy(v136, "max_disp");
  v222[0] = (uint64_t)v136;
  v222[1] = (uint64_t)v221;
  v223 = 1;
  v137 = *(_QWORD *)(v3 + 344);
  v224 = 7;
  v225[0] = v137;
  v225[1] = (uint64_t)&v224;
  v226 = 1;
  sub_2399DB6FC((uint64_t)v776, (uint64_t)v221, 2, 1, 2);
  v777[1] = (uint64_t)v776;
  v778 = 1;
  v215[0] = 3;
  v138 = (char *)operator new(0x18uLL);
  v138[23] = 12;
  strcpy(v138, "imaging_time");
  v216[0] = (uint64_t)v138;
  v216[1] = (uint64_t)v215;
  v217 = 1;
  v139 = *(_QWORD *)(v3 + 352);
  v218 = 7;
  v219[0] = v139;
  v219[1] = (uint64_t)&v218;
  v220 = 1;
  sub_2399DB6FC((uint64_t)v779, (uint64_t)v215, 2, 1, 2);
  v780[1] = (uint64_t)v779;
  v781 = 1;
  v209[0] = 3;
  v140 = (char *)operator new(0x18uLL);
  v140[23] = 16;
  strcpy(v140, "generate_ao_time");
  v210[0] = (uint64_t)v140;
  v210[1] = (uint64_t)v209;
  v211 = 1;
  v141 = *(_QWORD *)(v3 + 360);
  v212 = 7;
  v213[0] = v141;
  v213[1] = (uint64_t)&v212;
  v214 = 1;
  sub_2399DB6FC((uint64_t)v782, (uint64_t)v209, 2, 1, 2);
  v783[1] = (uint64_t)v782;
  v784 = 1;
  v203[0] = 3;
  v142 = (char *)operator new(0x18uLL);
  v142[23] = 18;
  strcpy(v142, "generate_maps_time");
  v204[0] = (uint64_t)v142;
  v204[1] = (uint64_t)v203;
  v205 = 1;
  v143 = *(_QWORD *)(v3 + 368);
  v206 = 7;
  v207[0] = v143;
  v207[1] = (uint64_t)&v206;
  v208 = 1;
  sub_2399DB6FC((uint64_t)v785, (uint64_t)v203, 2, 1, 2);
  v786[1] = (uint64_t)v785;
  v787 = 1;
  v197[0] = 3;
  v144 = (char *)operator new(0x18uLL);
  v144[23] = 9;
  strcpy(v144, "save_time");
  v198[0] = (uint64_t)v144;
  v198[1] = (uint64_t)v197;
  v199 = 1;
  v145 = *(_QWORD *)(v3 + 376);
  v200 = 7;
  v201[0] = v145;
  v201[1] = (uint64_t)&v200;
  v202 = 1;
  sub_2399DB6FC((uint64_t)v788, (uint64_t)v197, 2, 1, 2);
  v789[1] = (uint64_t)v788;
  v790 = 1;
  v191[0] = 3;
  v146 = (char *)operator new(0x18uLL);
  v146[23] = 10;
  strcpy(v146, "error_code");
  v192[0] = (uint64_t)v146;
  v192[1] = (uint64_t)v191;
  v193 = 1;
  v195[0] = 0;
  v194 = 3;
  v147 = operator new(0x18uLL);
  v148 = (uint64_t)v147;
  if (SHIBYTE(v190) < 0)
  {
    sub_23941A7F8(v147, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v147 = *(_OWORD *)__p;
    v147[2] = v190;
  }
  v195[0] = v148;
  v195[1] = (uint64_t)&v194;
  v196 = 1;
  sub_2399DB6FC((uint64_t)v791, (uint64_t)v191, 2, 1, 2);
  v792[1] = (uint64_t)v791;
  v793 = 1;
  sub_2399DB6FC((uint64_t)v187, (uint64_t)v707, 29, 1, 2);
  v149 = *v152;
  *v152 = v187[0];
  v187[0] = v149;
  v150 = *((_QWORD *)v152 + 1);
  *((_QWORD *)v152 + 1) = v188;
  v188 = v150;
  sub_239956828(&v188, v149);
  sub_239956828(v792, v791[0]);
  sub_239956828(v789, v788[0]);
  sub_239956828(v786, v785[0]);
  sub_239956828(v783, v782[0]);
  sub_239956828(v780, v779[0]);
  sub_239956828(v777, v776[0]);
  sub_239956828(v774, v773[0]);
  sub_239956828(v771, v770[0]);
  sub_239956828(v768, v767[0]);
  sub_239956828(v765, v764[0]);
  sub_239956828(v762, v761[0]);
  sub_239956828(v759, v758[0]);
  sub_239956828(v756, v755[0]);
  sub_239956828(v753, v752[0]);
  sub_239956828(v750, v749[0]);
  sub_239956828(v747, v746[0]);
  sub_239956828(v744, v743[0]);
  sub_239956828(v741, v740[0]);
  sub_239956828(v738, v737[0]);
  sub_239956828(v735, v734[0]);
  sub_239956828(v732, v731[0]);
  sub_239956828(v729, v728[0]);
  sub_239956828(v726, v725[0]);
  sub_239956828(v723, v722[0]);
  sub_239956828(v720, v719[0]);
  sub_239956828(v717, v716[0]);
  sub_239956828(v714, v713[0]);
  sub_239956828(v711, v710[0]);
  sub_239956828(v708, v707[0]);
  sub_239956828(v195, v194);
  sub_239956828(v192, v191[0]);
  sub_239956828(v201, v200);
  sub_239956828(v198, v197[0]);
  sub_239956828(v207, v206);
  sub_239956828(v204, v203[0]);
  sub_239956828(v213, v212);
  sub_239956828(v210, v209[0]);
  sub_239956828(v219, v218);
  sub_239956828(v216, v215[0]);
  sub_239956828(v225, v224);
  sub_239956828(v222, v221[0]);
  sub_239956828(v231, v230);
  sub_239956828(v228, v227[0]);
  sub_239956828(v237, v236);
  sub_239956828(v234, v233[0]);
  sub_239956828(v243, v242);
  sub_239956828(v240, v239[0]);
  sub_239956828(v249, v248);
  sub_239956828(v246, v245[0]);
  sub_239956828((uint64_t *)v186, v254);
  sub_239956828(v252, v251[0]);
  sub_239956828(v261, v260);
  sub_239956828(v258, v257[0]);
  sub_239956828(v267, v266);
  sub_239956828(v264, v263[0]);
  sub_239956828(v273, v272);
  sub_239956828(v270, v269[0]);
  sub_239956828(v279, v278);
  sub_239956828(v276, v275[0]);
  sub_239956828(v285, v284);
  sub_239956828(v282, v281[0]);
  sub_239956828(v291, v290);
  sub_239956828(v288, v287[0]);
  sub_239956828(v297, v296);
  sub_239956828(v294, v293[0]);
  sub_239956828(v303, v302);
  sub_239956828(v300, v299[0]);
  sub_239956828(v309, v308);
  sub_239956828(v306, v305[0]);
  sub_239956828(v315, v314);
  sub_239956828(v312, v311[0]);
  sub_239956828(v321, v320);
  sub_239956828(v318, v317[0]);
  sub_239956828(v426, v425[0]);
  sub_239956828(v423, v422[0]);
  sub_239956828(v420, v419[0]);
  sub_239956828(v417, v416[0]);
  sub_239956828(v414, v413[0]);
  sub_239956828(v411, v410[0]);
  sub_239956828(v408, v407[0]);
  sub_239956828(v405, v404[0]);
  sub_239956828(v402, v401[0]);
  sub_239956828(v399, v398[0]);
  sub_239956828(v396, v395[0]);
  sub_239956828(v393, v392[0]);
  sub_239956828(v390, v389[0]);
  sub_239956828(v327, v326);
  sub_239956828(v324, v323[0]);
  sub_239956828(v153[0], v332);
  sub_239956828(v330, v329[0]);
  sub_239956828(v153[1], v338);
  sub_239956828(v336, v335[0]);
  sub_239956828(v154[0], v344);
  sub_239956828(v342, v341[0]);
  sub_239956828(v154[1], v350);
  sub_239956828(v348, v347[0]);
  sub_239956828(v156[0], v356);
  sub_239956828(v354, v353[0]);
  sub_239956828(v156[1], v362);
  sub_239956828(v360, v359[0]);
  sub_239956828((uint64_t *)v157, v368);
  sub_239956828(v366, v365[0]);
  sub_239956828((uint64_t *)v159, v374);
  sub_239956828(v372, v371[0]);
  sub_239956828(v161[0], v380);
  sub_239956828(v378, v377[0]);
  sub_239956828(v161[1], v386);
  sub_239956828(v384, v383[0]);
  sub_239956828(v504, v503[0]);
  sub_239956828(v501, v500[0]);
  sub_239956828(v498, v497[0]);
  sub_239956828(v495, v494[0]);
  sub_239956828(v492, v491[0]);
  sub_239956828(v489, v488[0]);
  sub_239956828(v486, v485[0]);
  sub_239956828(v483, v482[0]);
  sub_239956828(v480, v479[0]);
  sub_239956828(v477, v476[0]);
  sub_239956828(v163, v431);
  sub_239956828(v429, v428[0]);
  sub_239956828(v438, v437);
  sub_239956828(v435, v434[0]);
  sub_239956828((uint64_t *)v166, v443);
  sub_239956828(v441, v440[0]);
  sub_239956828(v450, v449);
  sub_239956828(v447, v446[0]);
  sub_239956828(v456, v455);
  sub_239956828(v453, v452[0]);
  sub_239956828(v171, v461);
  sub_239956828(v459, v458[0]);
  sub_239956828(v167, v467);
  sub_239956828(v465, v464[0]);
  sub_239956828(v155, v473);
  sub_239956828(v471, v470[0]);
  sub_239956828(v158, v509);
  sub_239956828(v507, v506[0]);
  sub_239956828(v160, v515);
  sub_239956828(v513, v512[0]);
  sub_239956828(v621, v620[0]);
  sub_239956828(v618, v617[0]);
  sub_239956828(v615, v614[0]);
  sub_239956828(v612, v611[0]);
  sub_239956828(v609, v608[0]);
  sub_239956828(v606, v605[0]);
  sub_239956828(v603, v602[0]);
  sub_239956828(v600, v599[0]);
  sub_239956828(v597, v596[0]);
  sub_239956828(v594, v593[0]);
  sub_239956828(v591, v590[0]);
  sub_239956828(v588, v587[0]);
  sub_239956828(v585, v584[0]);
  sub_239956828(v162, v521);
  sub_239956828(v519, v518[0]);
  sub_239956828(v164, v527);
  sub_239956828(v525, v524[0]);
  sub_239956828(v165, v533);
  sub_239956828(v531, v530[0]);
  sub_239956828(v168, v539);
  sub_239956828(v537, v536[0]);
  sub_239956828(v169, v545);
  sub_239956828(v543, v542[0]);
  sub_239956828(v170, v551);
  sub_239956828(v549, v548[0]);
  sub_239956828(v172, v557);
  sub_239956828(v555, v554[0]);
  sub_239956828(v173, v563);
  sub_239956828(v561, v560[0]);
  sub_239956828(v174, v569);
  sub_239956828(v567, v566[0]);
  sub_239956828(v175, v575);
  sub_239956828(v573, v572[0]);
  sub_239956828(v176, v581);
  sub_239956828(v579, v578[0]);
  sub_239956828(v699, v698[0]);
  sub_239956828(v696, v695[0]);
  sub_239956828(v693, v692[0]);
  sub_239956828(v690, v689[0]);
  sub_239956828(v687, v686[0]);
  sub_239956828(v684, v683[0]);
  sub_239956828(v681, v680[0]);
  sub_239956828(v678, v677[0]);
  sub_239956828(v675, v674[0]);
  sub_239956828(v672, v671[0]);
  sub_239956828(v178, v626);
  sub_239956828(v624, v623[0]);
  sub_239956828(v179, v632);
  sub_239956828(v630, v629[0]);
  sub_239956828(v180, v638);
  sub_239956828(v636, v635[0]);
  sub_239956828(v181, v644);
  sub_239956828(v642, v641[0]);
  sub_239956828(v182, v650);
  sub_239956828(v648, v647[0]);
  sub_239956828(v183, v656);
  sub_239956828(v654, v653[0]);
  sub_239956828(v184, v662);
  sub_239956828(v660, v659[0]);
  sub_239956828(v185, v668);
  sub_239956828(v666, v665[0]);
  sub_239956828(v177, v704);
  sub_239956828(v702, v701[0]);
  if (SHIBYTE(v190) < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_2399D9C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t *a18, uint64_t *a19, uint64_t a20,uint64_t *a21,uint64_t *a22,uint64_t *a23,uint64_t *a24,_Unwind_Exception *exception_objecta,uint64_t *a26,uint64_t *a27,uint64_t *a28,uint64_t *a29,uint64_t *a30,uint64_t *a31,uint64_t *a32,uint64_t *a33,uint64_t *a34,uint64_t *a35,uint64_t *a36,uint64_t *a37,uint64_t *a38,uint64_t *a39,uint64_t *a40,uint64_t *a41,uint64_t a42,uint64_t *a43,uint64_t a44,uint64_t a45,uint64_t *a46,uint64_t *a47,uint64_t a48,uint64_t a49,uint64_t *a50,uint64_t *a51,uint64_t *a52,uint64_t *a53,uint64_t *a54,uint64_t *a55,uint64_t *a56,uint64_t *a57,uint64_t a58,uint64_t a59,uint64_t *a60,uint64_t *a61,uint64_t *a62,uint64_t *a63)
{
  uint64_t *a64;
  uint64_t *a65;
  uint64_t *a66;
  uint64_t *a67;
  uint64_t *a68;
  uint64_t *a69;
  uint64_t *a70;
  uint64_t *a71;
  uint64_t *a72;
  void *v72;
  unsigned __int8 *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  int v78;

  operator delete(v72);
  sub_239956828((uint64_t *)&STACK[0x270], LOBYTE(STACK[0x268]));
  sub_239956828(v74, LOBYTE(STACK[0x2C8]));
  sub_239956828((uint64_t *)&STACK[0x2B0], LOBYTE(STACK[0x2A8]));
  sub_239956828(a10, LOBYTE(STACK[0x308]));
  sub_239956828((uint64_t *)&STACK[0x2F0], LOBYTE(STACK[0x2E8]));
  sub_239956828(a11, LOBYTE(STACK[0x348]));
  sub_239956828((uint64_t *)&STACK[0x330], LOBYTE(STACK[0x328]));
  sub_239956828(a12, LOBYTE(STACK[0x388]));
  sub_239956828((uint64_t *)&STACK[0x370], LOBYTE(STACK[0x368]));
  sub_239956828(a13, LOBYTE(STACK[0x3C8]));
  sub_239956828((uint64_t *)&STACK[0x3B0], LOBYTE(STACK[0x3A8]));
  sub_239956828(a14, LOBYTE(STACK[0x408]));
  sub_239956828((uint64_t *)&STACK[0x3F0], LOBYTE(STACK[0x3E8]));
  sub_239956828(a15, LOBYTE(STACK[0x448]));
  sub_239956828((uint64_t *)&STACK[0x430], LOBYTE(STACK[0x428]));
  sub_239956828(a16, LOBYTE(STACK[0x488]));
  sub_239956828((uint64_t *)&STACK[0x470], LOBYTE(STACK[0x468]));
  sub_239956828(a19, LOBYTE(STACK[0x4C8]));
  sub_239956828((uint64_t *)&STACK[0x4B0], LOBYTE(STACK[0x4A8]));
  sub_239956828((uint64_t *)STACK[0x230], LOBYTE(STACK[0x508]));
  sub_239956828((uint64_t *)&STACK[0x4F0], LOBYTE(STACK[0x4E8]));
  sub_239956828(a17, LOBYTE(STACK[0x548]));
  sub_239956828((uint64_t *)&STACK[0x530], LOBYTE(STACK[0x528]));
  sub_239956828(a18, LOBYTE(STACK[0x588]));
  sub_239956828((uint64_t *)&STACK[0x570], LOBYTE(STACK[0x568]));
  sub_239956828(a21, LOBYTE(STACK[0x5C8]));
  sub_239956828((uint64_t *)&STACK[0x5B0], LOBYTE(STACK[0x5A8]));
  sub_239956828(a22, LOBYTE(STACK[0x608]));
  sub_239956828((uint64_t *)&STACK[0x5F0], LOBYTE(STACK[0x5E8]));
  sub_239956828(a23, LOBYTE(STACK[0x648]));
  sub_239956828((uint64_t *)&STACK[0x630], LOBYTE(STACK[0x628]));
  sub_239956828(a24, LOBYTE(STACK[0x688]));
  sub_239956828((uint64_t *)&STACK[0x670], LOBYTE(STACK[0x668]));
  sub_239956828(a26, LOBYTE(STACK[0x6C8]));
  sub_239956828((uint64_t *)&STACK[0x6B0], LOBYTE(STACK[0x6A8]));
  sub_239956828(a27, LOBYTE(STACK[0x708]));
  sub_239956828((uint64_t *)&STACK[0x6F0], LOBYTE(STACK[0x6E8]));
  sub_239956828(a29, LOBYTE(STACK[0x748]));
  sub_239956828((uint64_t *)&STACK[0x730], LOBYTE(STACK[0x728]));
  sub_239956828(a30, LOBYTE(STACK[0x788]));
  sub_239956828((uint64_t *)&STACK[0x770], LOBYTE(STACK[0x768]));
  sub_239956828(a32, LOBYTE(STACK[0x7C8]));
  sub_239956828((uint64_t *)&STACK[0x7B0], LOBYTE(STACK[0x7A8]));
  sub_239956828((uint64_t *)&STACK[0xC30], LOBYTE(STACK[0xC28]));
  sub_239956828((uint64_t *)&STACK[0xC10], LOBYTE(STACK[0xC08]));
  sub_239956828((uint64_t *)&STACK[0xBF0], LOBYTE(STACK[0xBE8]));
  sub_239956828((uint64_t *)&STACK[0xBD0], LOBYTE(STACK[0xBC8]));
  sub_239956828((uint64_t *)&STACK[0xBB0], LOBYTE(STACK[0xBA8]));
  sub_239956828((uint64_t *)&STACK[0xB90], LOBYTE(STACK[0xB88]));
  sub_239956828((uint64_t *)&STACK[0xB70], LOBYTE(STACK[0xB68]));
  sub_239956828((uint64_t *)&STACK[0xB50], LOBYTE(STACK[0xB48]));
  sub_239956828((uint64_t *)&STACK[0xB30], LOBYTE(STACK[0xB28]));
  sub_239956828((uint64_t *)&STACK[0xB10], LOBYTE(STACK[0xB08]));
  sub_239956828((uint64_t *)&STACK[0xAF0], LOBYTE(STACK[0xAE8]));
  sub_239956828((uint64_t *)&STACK[0xAD0], LOBYTE(STACK[0xAC8]));
  sub_239956828((uint64_t *)&STACK[0xAB0], LOBYTE(STACK[0xAA8]));
  sub_239956828(a34, LOBYTE(STACK[0x808]));
  sub_239956828((uint64_t *)&STACK[0x7F0], LOBYTE(STACK[0x7E8]));
  sub_239956828(a35, LOBYTE(STACK[0x848]));
  sub_239956828((uint64_t *)&STACK[0x830], LOBYTE(STACK[0x828]));
  sub_239956828(a36, LOBYTE(STACK[0x888]));
  sub_239956828((uint64_t *)&STACK[0x870], LOBYTE(STACK[0x868]));
  sub_239956828(a37, LOBYTE(STACK[0x8C8]));
  sub_239956828((uint64_t *)&STACK[0x8B0], LOBYTE(STACK[0x8A8]));
  sub_239956828(a38, LOBYTE(STACK[0x908]));
  sub_239956828((uint64_t *)&STACK[0x8F0], LOBYTE(STACK[0x8E8]));
  sub_239956828(a40, LOBYTE(STACK[0x948]));
  sub_239956828((uint64_t *)&STACK[0x930], LOBYTE(STACK[0x928]));
  sub_239956828(a41, LOBYTE(STACK[0x988]));
  sub_239956828((uint64_t *)&STACK[0x970], LOBYTE(STACK[0x968]));
  sub_239956828(a43, LOBYTE(STACK[0x9C8]));
  sub_239956828((uint64_t *)&STACK[0x9B0], LOBYTE(STACK[0x9A8]));
  sub_239956828(a47, LOBYTE(STACK[0xA08]));
  sub_239956828((uint64_t *)&STACK[0x9F0], LOBYTE(STACK[0x9E8]));
  sub_239956828(a51, LOBYTE(STACK[0xA48]));
  sub_239956828((uint64_t *)&STACK[0xA30], LOBYTE(STACK[0xA28]));
  sub_239956828(a52, LOBYTE(STACK[0xA88]));
  sub_239956828((uint64_t *)&STACK[0xA70], LOBYTE(STACK[0xA68]));
  sub_239956828((uint64_t *)&STACK[0xF70], LOBYTE(STACK[0xF68]));
  sub_239956828((uint64_t *)&STACK[0xF50], LOBYTE(STACK[0xF48]));
  sub_239956828((uint64_t *)&STACK[0xF30], LOBYTE(STACK[0xF28]));
  sub_239956828((uint64_t *)&STACK[0xF10], LOBYTE(STACK[0xF08]));
  sub_239956828((uint64_t *)&STACK[0xEF0], LOBYTE(STACK[0xEE8]));
  sub_239956828((uint64_t *)&STACK[0xED0], LOBYTE(STACK[0xEC8]));
  sub_239956828((uint64_t *)&STACK[0xEB0], LOBYTE(STACK[0xEA8]));
  sub_239956828((uint64_t *)&STACK[0xE90], LOBYTE(STACK[0xE88]));
  sub_239956828((uint64_t *)&STACK[0xE70], LOBYTE(STACK[0xE68]));
  sub_239956828((uint64_t *)&STACK[0xE50], LOBYTE(STACK[0xE48]));
  sub_239956828(a54, LOBYTE(STACK[0xC68]));
  sub_239956828((uint64_t *)&STACK[0xC50], LOBYTE(STACK[0xC48]));
  sub_239956828(a28, LOBYTE(STACK[0xCA8]));
  sub_239956828((uint64_t *)&STACK[0xC90], LOBYTE(STACK[0xC88]));
  sub_239956828(a57, LOBYTE(STACK[0xCE8]));
  sub_239956828((uint64_t *)&STACK[0xCD0], LOBYTE(STACK[0xCC8]));
  sub_239956828(a31, LOBYTE(STACK[0xD28]));
  sub_239956828((uint64_t *)&STACK[0xD10], LOBYTE(STACK[0xD08]));
  sub_239956828(a33, LOBYTE(STACK[0xD68]));
  sub_239956828((uint64_t *)&STACK[0xD50], LOBYTE(STACK[0xD48]));
  sub_239956828(a64, LOBYTE(STACK[0xDA8]));
  sub_239956828((uint64_t *)&STACK[0xD90], LOBYTE(STACK[0xD88]));
  sub_239956828(a60, LOBYTE(STACK[0xDE8]));
  sub_239956828((uint64_t *)&STACK[0xDD0], LOBYTE(STACK[0xDC8]));
  sub_239956828(a39, LOBYTE(STACK[0xE28]));
  sub_239956828((uint64_t *)&STACK[0xE10], LOBYTE(STACK[0xE08]));
  sub_239956828(a46, LOBYTE(STACK[0xFA8]));
  sub_239956828((uint64_t *)&STACK[0xF90], LOBYTE(STACK[0xF88]));
  sub_239956828(a50, LOBYTE(STACK[0xFE8]));
  sub_239956828((uint64_t *)&STACK[0xFD0], LOBYTE(STACK[0xFC8]));
  sub_239956828((uint64_t *)&STACK[0x1450], v73[704]);
  sub_239956828((uint64_t *)&STACK[0x1430], v73[672]);
  sub_239956828((uint64_t *)&STACK[0x1410], v73[640]);
  sub_239956828((uint64_t *)&STACK[0x13F0], v73[608]);
  sub_239956828((uint64_t *)&STACK[0x13D0], v73[576]);
  sub_239956828((uint64_t *)&STACK[0x13B0], v73[544]);
  sub_239956828((uint64_t *)&STACK[0x1390], v73[512]);
  sub_239956828((uint64_t *)&STACK[0x1370], v73[480]);
  sub_239956828((uint64_t *)&STACK[0x1350], v73[448]);
  sub_239956828((uint64_t *)&STACK[0x1330], v73[416]);
  sub_239956828((uint64_t *)&STACK[0x1310], v73[384]);
  sub_239956828((uint64_t *)&STACK[0x12F0], v73[352]);
  sub_239956828((uint64_t *)&STACK[0x12D0], v73[320]);
  sub_239956828(a53, LOBYTE(STACK[0x1028]));
  sub_239956828((uint64_t *)&STACK[0x1010], LOBYTE(STACK[0x1008]));
  sub_239956828(a55, LOBYTE(STACK[0x1068]));
  sub_239956828((uint64_t *)&STACK[0x1050], LOBYTE(STACK[0x1048]));
  sub_239956828(a56, LOBYTE(STACK[0x10A8]));
  sub_239956828((uint64_t *)&STACK[0x1090], LOBYTE(STACK[0x1088]));
  sub_239956828(a61, LOBYTE(STACK[0x10E8]));
  sub_239956828((uint64_t *)&STACK[0x10D0], LOBYTE(STACK[0x10C8]));
  sub_239956828(a62, LOBYTE(STACK[0x1128]));
  sub_239956828((uint64_t *)&STACK[0x1110], LOBYTE(STACK[0x1108]));
  sub_239956828(a63, LOBYTE(STACK[0x1168]));
  sub_239956828((uint64_t *)&STACK[0x1150], LOBYTE(STACK[0x1148]));
  sub_239956828(a65, LOBYTE(STACK[0x11A8]));
  sub_239956828((uint64_t *)&STACK[0x1190], LOBYTE(STACK[0x1188]));
  sub_239956828(a66, v73[96]);
  sub_239956828((uint64_t *)&STACK[0x11D0], v73[64]);
  sub_239956828(a67, v73[160]);
  sub_239956828((uint64_t *)&STACK[0x1210], v73[128]);
  sub_239956828(a68, v73[224]);
  sub_239956828((uint64_t *)&STACK[0x1250], v73[192]);
  sub_239956828(a69, v73[288]);
  sub_239956828((uint64_t *)&STACK[0x1290], v73[256]);
  sub_239956828((uint64_t *)&STACK[0x1790], v73[1536]);
  sub_239956828((uint64_t *)&STACK[0x1770], v73[1504]);
  v76 = (uint64_t *)STACK[0x228];
  v77 = (uint64_t *)STACK[0x220];
  sub_239956828((uint64_t *)&STACK[0x1750], v73[1472]);
  sub_239956828((uint64_t *)&STACK[0x1730], v73[1440]);
  sub_239956828((uint64_t *)&STACK[0x1710], v73[1408]);
  sub_239956828((uint64_t *)&STACK[0x16F0], v73[1376]);
  sub_239956828((uint64_t *)&STACK[0x16D0], v73[1344]);
  sub_239956828((uint64_t *)&STACK[0x16B0], v73[1312]);
  sub_239956828((uint64_t *)&STACK[0x1690], v73[1280]);
  sub_239956828((uint64_t *)&STACK[0x1670], v73[1248]);
  sub_239956828(a71, v73[768]);
  sub_239956828((uint64_t *)&STACK[0x1470], v73[736]);
  sub_239956828(a72, v73[832]);
  sub_239956828((uint64_t *)&STACK[0x14B0], v73[800]);
  sub_239956828((uint64_t *)STACK[0x200], v73[896]);
  sub_239956828((uint64_t *)&STACK[0x14F0], v73[864]);
  sub_239956828((uint64_t *)STACK[0x208], v73[960]);
  sub_239956828((uint64_t *)&STACK[0x1530], v73[928]);
  sub_239956828((uint64_t *)STACK[0x210], v73[1024]);
  sub_239956828((uint64_t *)&STACK[0x1570], v73[992]);
  sub_239956828((uint64_t *)STACK[0x218], v73[1088]);
  sub_239956828((uint64_t *)&STACK[0x15B0], v73[1056]);
  sub_239956828(v77, v73[1152]);
  sub_239956828((uint64_t *)&STACK[0x15F0], v73[1120]);
  sub_239956828(v76, v73[1216]);
  sub_239956828((uint64_t *)&STACK[0x1630], v73[1184]);
  sub_239956828(a70, v73[1600]);
  sub_239956828((uint64_t *)&STACK[0x17B0], v73[1568]);
  while ((unint64_t *)v75 != &STACK[0x17E8])
  {
    v78 = *(unsigned __int8 *)(v75 - 32);
    v75 -= 32;
    sub_239956828((uint64_t *)(v75 + 8), v78);
  }
  if (SLOBYTE(STACK[0x267]) < 0)
  {
    operator delete((void *)STACK[0x250]);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_2399DAFD4()
{
  unsigned __int8 v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  _DWORD v6[7];
  unsigned int v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  void *__p;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_25693C8D0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25693C8D0))
  {
    v6[0] = 0;
    sub_239602204((uint64_t)&v7, v6, "ERROR_NONE");
    v5 = 1;
    sub_239602204((uint64_t)&v10, &v5, "ERROR_OUT_OF_MEMORY");
    v4 = 2;
    sub_239602204((uint64_t)&v13, &v4, "ERROR_GPU_OUT_OF_MEMORY");
    v3 = 3;
    sub_239602204((uint64_t)&v16, &v3, "ERROR_UNEXPECTED_LOW_INTERSECT_RATE");
    v2 = 4;
    sub_239602204((uint64_t)&v19, &v2, "ERROR_NO_AVAILABLE_METAL_LIB");
    v1 = 5;
    sub_239602204((uint64_t)&v22, &v1, "ERROR_INVALID_METAL_LIBRARY");
    sub_2399DB27C((uint64_t)&qword_25693C8D8, &v7, 6);
    if (v24 < 0)
    {
      operator delete(__p);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_6:
        if ((v18 & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v20);
    if ((v18 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v15 & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    operator delete(v17);
    if ((v15 & 0x80000000) == 0)
    {
LABEL_8:
      if ((v12 & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_15;
    }
LABEL_14:
    operator delete(v14);
    if ((v12 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v9 & 0x80000000) == 0)
      {
LABEL_10:
        __cxa_atexit((void (*)(void *))sub_2399DB2FC, &qword_25693C8D8, &dword_23940C000);
        __cxa_guard_release(&qword_25693C8D0);
        return;
      }
LABEL_16:
      operator delete(v8);
      goto LABEL_10;
    }
LABEL_15:
    operator delete(v11);
    if ((v9 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_16;
  }
}

void sub_2399DB1D4(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  char *v45;
  _Unwind_Exception *v48;

  if (a45 < 0)
    operator delete(__p);
  sub_239EC3430((uint64_t)&a19, a1, a2, (uint64_t)&a13, &a18);
  v48 = a13;
  if (&a19 != v45 && a18)
  {
    do
    {
      if (*(v45 - 1) < 0)
        operator delete(*((void **)v45 - 3));
      v45 -= 32;
    }
    while (v45 != &a19);
  }
  __cxa_guard_abort(&qword_25693C8D0);
  _Unwind_Resume(v48);
}

uint64_t sub_2399DB27C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      sub_2399DB364(a1, a2, (uint64_t)a2);
      a2 += 8;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_2399DB2DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;

  v3 = *(void ***)(v1 + 16);
  if (v3)
    sub_239EC09C8(v3);
  sub_239EBFDD0((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2399DB2FC(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

char *sub_2399DB364(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  char **v9;
  char *result;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  float v14;
  float v15;
  _QWORD *v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  int8x8_t v22;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(char ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      result = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)result + 1);
            if (v12 == v6)
            {
              if (*((_DWORD *)result + 4) == (_DWORD)v6)
                return result;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            result = *(char **)result;
            if (!result)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = *((_QWORD *)result + 1);
          if (v11 == v6)
          {
            if (*((_DWORD *)result + 4) == (_DWORD)v6)
              return result;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          result = *(char **)result;
        }
        while (result);
      }
    }
  }
LABEL_23:
  v27 = (char *)operator new(0x30uLL);
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v6;
  *((_DWORD *)v27 + 4) = *(_DWORD *)a3;
  v13 = v27 + 24;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_23941A7F8(v13, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v27 + 5) = *(_QWORD *)(a3 + 24);
  }
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v22)
      goto LABEL_40;
    if (prime < *(_QWORD *)&v22)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v22 < 3uLL || (v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < *(_QWORD *)&v22)
LABEL_40:
        sub_239427FE0(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        v17 = v27;
        if (v16)
          goto LABEL_29;
      }
      else
      {
        v3 = v6;
        v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        v17 = v27;
        if (v16)
          goto LABEL_29;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      v17 = v27;
      if (v16)
        goto LABEL_29;
    }
LABEL_53:
    *v17 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v27)
    {
      v26 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v26 >= v7)
          v26 %= v7;
      }
      else
      {
        v26 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27;
    }
    goto LABEL_64;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v17 = v27;
  if (!v16)
    goto LABEL_53;
LABEL_29:
  *v17 = *v16;
  *v16 = v27;
LABEL_64:
  result = v27;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_2399DB6D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2399DB6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2395A0D0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2399DB6FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5)
{
  uint64_t v10;
  _BYTE **v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  void *exception;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v10 = 32 * a3;
    v11 = (_BYTE **)(a2 + 16);
    while (1)
    {
      v12 = *v11;
      if (**v11 != 2
        || *(_QWORD *)(*((_QWORD *)v12 + 1) + 8) - **((_QWORD **)v12 + 1) != 32
        || *(_BYTE *)sub_2399DB960((uint64_t)v12, 0) != 3)
      {
        break;
      }
      v11 += 4;
      v10 -= 32;
      if (!v10)
        goto LABEL_7;
    }
    v13 = 0;
    if ((a4 & 1) == 0)
    {
LABEL_17:
      if (a5 == 2)
        v19 = 0;
      else
        v19 = v13;
      if (a5 != 1)
        LOBYTE(v13) = 1;
      if ((v13 & 1) == 0)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_23941A4FC(&v24, "cannot create object from initializer list");
        sub_239958B24(301, (uint64_t)&v24, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_250AF0B28, (void (*)(void *))sub_239958C9C);
      }
      if (!v19)
        goto LABEL_24;
      goto LABEL_9;
    }
  }
  else
  {
LABEL_7:
    v13 = 1;
    if ((a4 & 1) == 0)
      goto LABEL_17;
  }
  if (!v13)
  {
LABEL_24:
    v20 = a2 + 32 * a3;
    *(_BYTE *)a1 = 2;
    v21 = operator new(0x18uLL);
    v21[1] = 0;
    v21[2] = 0;
    *v21 = 0;
    sub_2399DBC18(v21, a2, v20, (v20 - a2) >> 5);
    *(_QWORD *)(a1 + 8) = v21;
    return a1;
  }
LABEL_9:
  *(_BYTE *)a1 = 1;
  v14 = operator new(0x18uLL);
  v14[2] = 0;
  v14[1] = 0;
  *v14 = v14 + 1;
  *(_QWORD *)(a1 + 8) = v14;
  if (a3)
  {
    v15 = 32 * a3;
    v16 = (_BYTE *)(a2 + 24);
    do
    {
      v17 = *((_QWORD *)v16 - 1);
      if (*v16)
      {
        LOBYTE(v24) = *(_BYTE *)v17;
        v18 = *(_QWORD *)(v17 + 8);
        v25 = v18;
        *(_BYTE *)v17 = 0;
        *(_QWORD *)(v17 + 8) = 0;
      }
      else
      {
        sub_23995944C((uint64_t)&v24, (unsigned __int8 *)v17);
        v18 = v25;
      }
      sub_2399DBA84(*(uint64_t ***)(a1 + 8), *(const void ***)(*(_QWORD *)v18 + 8), *(_QWORD *)(*(_QWORD *)v18 + 8), *(_QWORD *)v18 + 16);
      sub_239956828(&v25, v24);
      v16 += 32;
      v15 -= 32;
    }
    while (v15);
  }
  return a1;
}

void sub_2399DB8FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2399DB910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_239956828(v10, a10);
  _Unwind_Resume(a1);
}

void sub_2399DB928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_2399DB960(uint64_t a1, uint64_t a2)
{
  void *exception;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  __int128 v9;
  std::string::size_type v10;

  if (*(_BYTE *)a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char *)sub_239959DEC((char *)a1);
    sub_23941A4FC(&v8, v5);
    v6 = std::string::insert(&v8, 0, "cannot use operator[] with a numeric argument with ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v10 = v6->__r_.__value_.__r.__words[2];
    v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    sub_239958B24(305, (uint64_t)&v9, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_250AF0B28, (void (*)(void *))sub_239958C9C);
  }
  return **(_QWORD **)(a1 + 8) + 16 * a2;
}

void sub_2399DBA24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t **sub_2399DBA84(uint64_t **a1, const void **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  size_t v10;
  const void *v11;
  uint64_t **v12;
  _QWORD *v13;
  const void *v14;
  const void *v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v19;
  int v20;
  _BOOL4 v21;
  int v22;
  _BOOL4 v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    if (v9 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v7;
        v15 = (const void *)v7[4];
        v13 = v7 + 4;
        v14 = v15;
        v16 = *((char *)v13 + 23);
        if (v16 >= 0)
          v17 = *((unsigned __int8 *)v13 + 23);
        else
          v17 = v13[1];
        if (v16 >= 0)
          v18 = v13;
        else
          v18 = v14;
        if (v17 >= v10)
          v19 = v10;
        else
          v19 = v17;
        v20 = memcmp(v11, v18, v19);
        v21 = v10 < v17;
        if (v20)
          v21 = v20 < 0;
        if (!v21)
          break;
        v7 = *v12;
        v8 = v12;
        if (!*v12)
          goto LABEL_27;
      }
      v22 = memcmp(v18, v11, v19);
      v23 = v17 < v10;
      if (v22)
        v23 = v22 < 0;
      if (!v23)
        break;
      v7 = v12[1];
      if (!v7)
      {
        v8 = v12 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v12 = a1 + 1;
LABEL_27:
    v24 = (uint64_t *)v12;
    v12 = (uint64_t **)operator new(0x48uLL);
    *((_OWORD *)v12 + 2) = *(_OWORD *)a3;
    v12[6] = *(uint64_t **)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *((_BYTE *)v12 + 56) = *(_BYTE *)a4;
    v12[8] = *(uint64_t **)(a4 + 8);
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v24;
    *v8 = (uint64_t *)v12;
    v25 = (uint64_t *)**a1;
    v26 = (uint64_t *)v12;
    if (v25)
    {
      *a1 = v25;
      v26 = *v8;
    }
    sub_2394213B8(a1[1], v26);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v12;
}

void sub_2399DBC18(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 v14[8];
  uint64_t v15;

  if (a4)
  {
    if (a4 >> 60)
      sub_2394189F8();
    v8 = (char *)operator new(16 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[16 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v13 = *(_QWORD *)(a2 + 16);
        if (*(_BYTE *)(a2 + 24))
        {
          v10 = *(_BYTE *)v13;
          v11 = *(_QWORD *)(v13 + 8);
          *(_BYTE *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          sub_23995944C((uint64_t)v14, (unsigned __int8 *)v13);
          v10 = v14[0];
          v11 = v15;
        }
        v12 = (unsigned __int8 *)&v8[v9];
        *v12 = v10;
        *((_QWORD *)v12 + 1) = v11;
        v14[0] = 0;
        v15 = 0;
        sub_239956828(&v15, 0);
        a2 += 32;
        v9 += 16;
      }
      while (a2 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_2399DBD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_239959CEC(&a9);
  _Unwind_Resume(a1);
}

void sub_2399DBD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 16)
    sub_239956828((uint64_t *)(v10 + v11 - 8), *(unsigned __int8 *)(v10 + v11 - 16));
  *(_QWORD *)(v9 + 8) = v10;
  sub_239959CEC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2399DBD58(_QWORD *a1, _DWORD *a2, unsigned int **a3, unsigned int a4)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v25;
  __int128 v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  v7 = *a3;
  v8 = (*a3)[1];
  v35 = **a3;
  v9 = v7[2];
  LODWORD(v7) = v7[3];
  v33 = v9;
  v34 = v8;
  v32 = (int)v7;
  v10 = a1 + 13;
  v31 = *(_DWORD *)(sub_239962518((uint64_t)(a1 + 13), &v35) + 12);
  v30 = *(_DWORD *)(sub_239962518((uint64_t)v10, &v33) + 12);
  LODWORD(v26) = -1;
  v29 = sub_239967A60(a1, &v26);
  v27 = -1;
  *(_QWORD *)&v26 = -1;
  *((_QWORD *)&v26 + 1) = -1;
  v28 = sub_23996142C((uint64_t)a1, 0, &v26);
  v27 = -1;
  *(_QWORD *)&v26 = -1;
  *((_QWORD *)&v26 + 1) = -1;
  v25 = sub_23996142C((uint64_t)a1, 0, &v26);
  v11 = a4;
  v12 = (uint64_t *)(a1[4] + 16 * a4);
  v14 = *v12;
  v13 = (std::__shared_weak_count *)v12[1];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)(*(_QWORD *)(v14 + 40) + (((unint64_t)v28 >> 3) & 0x1FFFFFF8)) |= 1 << v28;
  v18 = (uint64_t *)(a1[4] + 16 * v11);
  v20 = *v18;
  v19 = (std::__shared_weak_count *)v18[1];
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)(*(_QWORD *)(v20 + 40) + (((unint64_t)v25 >> 3) & 0x1FFFFFF8)) |= 1 << v25;
  sub_23996253C((uint64_t)v10, &v28, &v35);
  sub_23996253C((uint64_t)v10, &v34, &v28);
  sub_23996253C((uint64_t)v10, &v25, &v33);
  sub_23996253C((uint64_t)v10, &v32, &v25);
  sub_23996256C((uint64_t)v10, &v28, &v25);
  sub_23996259C((uint64_t)v10, a2, &v28);
  sub_23996259C((uint64_t)v10, &v29, &v25);
  sub_23996259C((uint64_t)v10, &v29, &v33);
  sub_23996259C((uint64_t)v10, &v29, &v32);
  sub_2399625F4(v10, &v31, &v25);
  sub_2399625F4(v10, &v30, &v28);
  return 1;
}

uint64_t sub_2399DBFCC(_QWORD *a1, _DWORD *a2, unsigned int **a3, unsigned int a4)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  __int128 v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;

  v7 = *a3;
  v8 = **a3;
  v52 = (*a3)[1];
  v53 = v8;
  v9 = v7[3];
  v51 = v7[2];
  v49 = v7[4];
  v50 = v9;
  v10 = a1 + 13;
  v48 = *(_DWORD *)(sub_239962518((uint64_t)(a1 + 13), &v53) + 12);
  v47 = *(_DWORD *)(sub_239962518((uint64_t)v10, &v51) + 12);
  v46 = *(_DWORD *)(sub_239962518((uint64_t)v10, &v50) + 12);
  LODWORD(v41) = -1;
  v45 = sub_239967A60(a1, &v41);
  LODWORD(v41) = -1;
  v44 = sub_239967A60(a1, &v41);
  v42 = -1;
  *(_QWORD *)&v41 = -1;
  *((_QWORD *)&v41 + 1) = -1;
  v11 = sub_23996142C((uint64_t)a1, 0, &v41);
  v42 = -1;
  v43 = v11;
  *(_QWORD *)&v41 = -1;
  *((_QWORD *)&v41 + 1) = -1;
  v40 = sub_23996142C((uint64_t)a1, 0, &v41);
  v42 = -1;
  *(_QWORD *)&v41 = -1;
  *((_QWORD *)&v41 + 1) = -1;
  v39 = sub_23996142C((uint64_t)a1, 0, &v41);
  v42 = -1;
  *(_QWORD *)&v41 = -1;
  *((_QWORD *)&v41 + 1) = -1;
  v38 = sub_23996142C((uint64_t)a1, 0, &v41);
  v12 = a4;
  v13 = (uint64_t *)(a1[4] + 16 * a4);
  v15 = *v13;
  v14 = (std::__shared_weak_count *)v13[1];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)(*(_QWORD *)(v15 + 40) + (((unint64_t)v43 >> 3) & 0x1FFFFFF8)) |= 1 << v43;
  v19 = (uint64_t *)(a1[4] + 16 * v12);
  v21 = *v19;
  v20 = (std::__shared_weak_count *)v19[1];
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_QWORD *)(*(_QWORD *)(v21 + 40) + (((unint64_t)v40 >> 3) & 0x1FFFFFF8)) |= 1 << v40;
  v25 = (uint64_t *)(a1[4] + 16 * v12);
  v27 = *v25;
  v26 = (std::__shared_weak_count *)v25[1];
  if (v26)
  {
    v28 = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *(_QWORD *)(*(_QWORD *)(v27 + 40) + (((unint64_t)v39 >> 3) & 0x1FFFFFF8)) |= 1 << v39;
  v31 = (uint64_t *)(a1[4] + 16 * v12);
  v33 = *v31;
  v32 = (std::__shared_weak_count *)v31[1];
  if (v32)
  {
    v34 = (unint64_t *)&v32->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    do
      v36 = __ldaxr(v34);
    while (__stlxr(v36 - 1, v34));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  *(_QWORD *)(*(_QWORD *)(v33 + 40) + (((unint64_t)v38 >> 3) & 0x1FFFFFF8)) |= 1 << v38;
  sub_23996253C((uint64_t)v10, &v43, &v53);
  sub_23996253C((uint64_t)v10, &v52, &v43);
  sub_23996253C((uint64_t)v10, &v40, &v51);
  sub_23996253C((uint64_t)v10, &v51, &v39);
  sub_23996253C((uint64_t)v10, &v39, &v40);
  sub_23996253C((uint64_t)v10, &v38, &v50);
  sub_23996253C((uint64_t)v10, &v49, &v38);
  sub_23996256C((uint64_t)v10, &v43, &v40);
  sub_23996256C((uint64_t)v10, &v39, &v38);
  sub_23996259C((uint64_t)v10, a2, &v43);
  sub_23996259C((uint64_t)v10, &v45, &v40);
  sub_23996259C((uint64_t)v10, &v45, &v51);
  sub_23996259C((uint64_t)v10, &v45, &v39);
  sub_23996259C((uint64_t)v10, &v44, &v38);
  sub_23996259C((uint64_t)v10, &v44, &v50);
  sub_23996259C((uint64_t)v10, &v44, &v49);
  sub_2399625F4(v10, &v48, &v40);
  sub_2399625F4(v10, &v48, &v38);
  sub_2399625F4(v10, &v47, &v43);
  sub_2399625F4(v10, &v46, &v39);
  return 1;
}

uint64_t sub_2399DC418(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  unsigned int *v4;
  unint64_t v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  _BOOL4 v21;
  BOOL v22;
  unsigned int *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t result;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  int i;
  uint64_t v47;
  _DWORD *v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  _DWORD v58[4];
  void *__p;
  _BYTE *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63[3];
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;

  v4 = a2;
  v6 = *a2;
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
  v9 = *v7;
  v8 = (std::__shared_weak_count *)v7[1];
  if (!v8)
    goto LABEL_6;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    if (((*(_QWORD *)(*(_QWORD *)(v9 + 40) + ((v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1) != 0)
      return sub_239968338(a1, v4);
  }
  else
  {
LABEL_6:
    if (((*(_QWORD *)(*(_QWORD *)(v9 + 40) + ((v6 >> 3) & 0x1FFFFFF8)) >> v6) & 1) != 0)
      return sub_239968338(a1, v4);
  }
  v13 = *(unsigned int *)sub_239962518(a1 + 104, v4);
  v14 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
  v16 = *v14;
  v15 = (std::__shared_weak_count *)v14[1];
  if (!v15)
    goto LABEL_12;
  v17 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  do
    v19 = __ldaxr(v17);
  while (__stlxr(v19 - 1, v17));
  if (v19)
  {
LABEL_12:
    if (((*(_QWORD *)(*(_QWORD *)(v16 + 40) + ((v13 >> 3) & 0x1FFFFFF8)) >> v13) & 1) == 0)
      goto LABEL_13;
    return sub_239968338(a1, v4);
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  if (((*(_QWORD *)(*(_QWORD *)(v16 + 40) + ((v13 >> 3) & 0x1FFFFFF8)) >> v13) & 1) != 0)
    return sub_239968338(a1, v4);
LABEL_13:
  v81 = *(_DWORD *)(sub_239962518(a1 + 104, v4) + 12);
  v20 = (unsigned int *)sub_239962518(a1 + 104, v4);
  v80 = *(_DWORD *)(sub_239962518(a1 + 104, v20) + 12);
  if (v81 == v80)
    return 0;
  v21 = sub_2399423C8(a1, &v81);
  v22 = sub_2399423C8(a1, &v80);
  if (v21 && v22)
    return 0;
  if (!v21)
    v4 = (unsigned int *)sub_239962518(a1 + 104, v4);
  v79 = *v4;
  v78 = *(_DWORD *)(sub_239962518(a1 + 104, &v79) + 8);
  v77 = *(_DWORD *)(sub_239962518(a1 + 104, &v78) + 8);
  v76 = *(_DWORD *)sub_239962518(a1 + 104, &v79);
  v75 = *(_DWORD *)(sub_239962518(a1 + 104, &v76) + 8);
  v74 = *(_DWORD *)(sub_239962518(a1 + 104, &v75) + 8);
  v73 = *(_DWORD *)sub_239962518(a1 + 104, &v77);
  v72 = *(_DWORD *)sub_239962518(a1 + 104, &v75);
  v71 = *(_DWORD *)sub_239962518(a1 + 104, &v78);
  v70 = *(_DWORD *)sub_239962518(a1 + 104, &v74);
  v69 = *(_DWORD *)(sub_239962518(a1 + 104, &v79) + 16);
  v68 = *(_DWORD *)(sub_239962518(a1 + 104, &v76) + 16);
  v67 = *(_DWORD *)(sub_239962518(a1 + 104, &v79) + 12);
  v23 = (unsigned int *)sub_239962518(a1 + 104, &v79);
  v66 = *(_DWORD *)(sub_239962518(a1 + 104, v23) + 12);
  v24 = *(_DWORD *)(sub_239962518(a1 + 104, &v77) + 12);
  v65 = v24;
  v25 = *(_DWORD *)(sub_239962518(a1 + 104, &v74) + 12);
  v64 = v25;
  LODWORD(__p) = v67;
  sub_239962B1C((uint64_t)v63, (_QWORD *)(a1 + 104), (unsigned int *)&__p);
  v26 = 0;
  do
    v27 = v26++;
  while (sub_239962B44(v63) != -1);
  LODWORD(__p) = v66;
  sub_239962B1C((uint64_t)v63, (_QWORD *)(a1 + 104), (unsigned int *)&__p);
  v28 = -1;
  do
    ++v28;
  while (sub_239962B44(v63) != -1);
  LODWORD(__p) = v24;
  sub_239962B1C((uint64_t)v63, (_QWORD *)(a1 + 104), (unsigned int *)&__p);
  v29 = -1;
  do
    ++v29;
  while (sub_239962B44(v63) != -1);
  if (v29 < 3)
    return 0;
  LODWORD(__p) = v25;
  sub_239962B1C((uint64_t)v63, (_QWORD *)(a1 + 104), (unsigned int *)&__p);
  v31 = -1;
  do
    ++v31;
  while (sub_239962B44(v63) != -1);
  result = 0;
  if (v31 >= 3 && v28 >= 3)
  {
    v32 = v73;
    v33 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
    v35 = *v33;
    v34 = (std::__shared_weak_count *)v33[1];
    if (v34)
    {
      v36 = (unint64_t *)&v34->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      do
        v38 = __ldaxr(v36);
      while (__stlxr(v38 - 1, v36));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if ((((*(_QWORD *)(*(_QWORD *)(v35 + 40) + ((v32 >> 3) & 0x1FFFFFF8)) >> v32) & 1) == 0
       || (sub_2399640F8(a1, &v72) & 1) == 0)
      && v27 == 2)
    {
      return 0;
    }
    if (v26 + v28 - 1 < 6)
      return 0;
    v40 = v64;
    v39 = v65;
    if (v65 == v64 || v65 == v67)
      return 0;
    result = 0;
    if (v67 != v66 && v64 != v66 && v64 != v67 && v65 != v66)
    {
      sub_239962480((uint64_t)v63, (_QWORD *)(a1 + 104), &v67);
      v41 = sub_2399624A8(v63);
      v62 = v41;
      if (v41 != -1)
      {
        v42 = 0;
        do
        {
          if (v41 == v66)
          {
            if (v42 > 0)
              return 0;
            v42 = 1;
          }
          sub_239962480((uint64_t)&__p, (_QWORD *)(a1 + 104), &v62);
          while (1)
          {
            v43 = sub_2399624A8((uint64_t *)&__p);
            if (v43 == -1)
              break;
            if (v43 == v66 && v62 != v39 && v62 != v40)
              return 0;
          }
          v41 = sub_2399624A8(v63);
          v62 = v41;
        }
        while (v41 != -1);
      }
      __p = 0;
      v60 = 0;
      v61 = 0;
      sub_239962B1C((uint64_t)v58, (_QWORD *)(a1 + 104), &v66);
      for (i = sub_239962B44(v58); ; i = sub_239962B44(v58))
      {
        v57 = i;
        if (i == -1)
          break;
        if (i != v78 && i != v76)
          sub_239968AD4(&__p, &v57);
      }
      v47 = sub_239962F9C(a1);
      *(_OWORD *)(*(_QWORD *)(v47 + 40) + 16 * v67) = *a3;
      sub_23996256C(a1 + 104, &v73, &v71);
      sub_23996256C(a1 + 104, &v72, &v70);
      v48 = __p;
      if (v60 != __p)
      {
        v49 = 0;
        v50 = 1;
        do
        {
          sub_2399625C8((_QWORD *)(a1 + 104), &v48[v49], &v67);
          v49 = v50;
          v48 = __p;
          ++v50;
        }
        while (v49 < (v60 - (_BYTE *)__p) >> 2);
      }
      sub_2399625F4((_QWORD *)(a1 + 104), &v65, &v71);
      sub_2399625F4((_QWORD *)(a1 + 104), &v64, &v72);
      sub_2399625F4((_QWORD *)(a1 + 104), &v67, &v73);
      *(_DWORD *)sub_23996252C(a1 + 104, &v69) = -1;
      *(_DWORD *)sub_23996252C(a1 + 104, &v68) = -1;
      v51 = sub_239962518(a1 + 104, &v79);
      *(_QWORD *)v51 = -1;
      *(_QWORD *)(v51 + 8) = -1;
      *(_DWORD *)(v51 + 16) = -1;
      v52 = sub_239962518(a1 + 104, &v78);
      *(_QWORD *)v52 = -1;
      *(_QWORD *)(v52 + 8) = -1;
      *(_DWORD *)(v52 + 16) = -1;
      v53 = sub_239962518(a1 + 104, &v77);
      *(_QWORD *)v53 = -1;
      *(_QWORD *)(v53 + 8) = -1;
      *(_DWORD *)(v53 + 16) = -1;
      v54 = sub_239962518(a1 + 104, &v76);
      *(_QWORD *)v54 = -1;
      *(_QWORD *)(v54 + 8) = -1;
      *(_DWORD *)(v54 + 16) = -1;
      v55 = sub_239962518(a1 + 104, &v75);
      *(_QWORD *)v55 = -1;
      *(_QWORD *)(v55 + 8) = -1;
      *(_DWORD *)(v55 + 16) = -1;
      v56 = sub_239962518(a1 + 104, &v74);
      *(_QWORD *)v56 = -1;
      *(_QWORD *)(v56 + 8) = -1;
      *(_DWORD *)(v56 + 16) = -1;
      *(_DWORD *)sub_239962508((_QWORD *)(a1 + 104), &v66) = -1;
      if (__p)
      {
        v60 = __p;
        operator delete(__p);
      }
      return 1;
    }
  }
  return result;
}

void sub_2399DCB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399DCBA8(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  _QWORD *v5;
  _DWORD *v6;
  unsigned int v7;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;

  v5 = (_QWORD *)(a1 + 104);
  if (*(_DWORD *)(sub_239962518(a1 + 104, a2) + 8) != *a3)
    return 0;
  v6 = (_DWORD *)sub_239962518((uint64_t)v5, a2);
  v7 = *a3;
  if (*v6 == *a3)
    return 0;
  v21 = *a2;
  v20 = v7;
  v19 = *(_DWORD *)sub_239962518((uint64_t)v5, &v21);
  v18 = *(_DWORD *)sub_239962518((uint64_t)v5, &v20);
  v17 = *(_DWORD *)(sub_239962518((uint64_t)v5, &v18) + 4);
  v16 = *(_DWORD *)(sub_239962518((uint64_t)v5, &v20) + 8);
  v15 = *(_DWORD *)(sub_239962518((uint64_t)v5, &v20) + 12);
  v9 = (unsigned int *)sub_239962518((uint64_t)v5, &v20);
  v14 = *(_DWORD *)(sub_239962518((uint64_t)v5, v9) + 12);
  v13 = *(_DWORD *)(sub_239962518((uint64_t)v5, &v21) + 16);
  v12 = *(_DWORD *)(sub_239962518((uint64_t)v5, &v19) + 16);
  sub_23996253C((uint64_t)v5, &v21, &v16);
  sub_23996253C((uint64_t)v5, &v17, &v19);
  sub_2399625F4(v5, &v14, &v19);
  sub_23996259C((uint64_t)v5, &v13, &v21);
  sub_23996259C((uint64_t)v5, &v12, &v19);
  *(_DWORD *)sub_239962508(v5, &v15) = -1;
  v10 = sub_239962518((uint64_t)v5, &v18);
  *(_QWORD *)v10 = -1;
  *(_QWORD *)(v10 + 8) = -1;
  *(_DWORD *)(v10 + 16) = -1;
  v11 = sub_239962518((uint64_t)v5, &v20);
  *(_QWORD *)v11 = -1;
  *(_QWORD *)(v11 + 8) = -1;
  *(_DWORD *)(v11 + 16) = -1;
  return 1;
}

uint64_t sub_2399DCD74(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  _QWORD *v4;
  unsigned int *v5;
  char *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unsigned int *v50;
  unsigned int *v51;
  _DWORD *v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  _BYTE *v58;
  _BYTE *v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  _DWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _OWORD *v71;
  __int128 *v72;
  uint64_t v73;
  __int128 v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  char *v79;
  _BYTE *v80;
  int64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _OWORD *v92;
  __int128 *v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  _BYTE *v101;
  int64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  char *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _OWORD *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  int v117;
  unsigned int *v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  int64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  _DWORD *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  _OWORD *v137;
  __int128 *v138;
  uint64_t v139;
  __int128 v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  char **v148;
  char *v149;
  uint64_t v150;
  char **v151;
  char *v152;
  _DWORD *v153;
  int64_t v154;
  uint64_t v155;
  unsigned __int8 v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  char v160;
  uint64_t v161;
  unsigned __int8 v162;
  char *v163;
  int v164;
  float v165;
  float v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  unsigned int v179;
  unint64_t v180;
  int v181;
  unint64_t v182;
  unint64_t i;
  _BYTE *v184;
  char *v185;
  _BYTE *v186;
  int64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  _BYTE *v192;
  char *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  _OWORD *v198;
  __int128 *v199;
  uint64_t v200;
  __int128 v201;
  int v202;
  char *v203;
  char **v204;
  BOOL v205;
  uint64_t v206;
  unsigned int *v207;
  unsigned int v208;
  uint64_t v209;
  unsigned int v210;
  _BYTE *v211;
  _BYTE *v212;
  int64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  unsigned int *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  _OWORD *v224;
  __int128 *v225;
  uint64_t v226;
  __int128 v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t *v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  unint64_t *p_shared_owners;
  unint64_t v235;
  unint64_t v236;
  void **v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  char *v242;
  unsigned int *v244;
  unsigned int *v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  void *v250;
  char *v251;
  char *v252;
  void *v253;
  char *v254;
  char *v255;
  void *v256;
  char *v257;
  _QWORD *v258;
  char v259;
  void *__p;
  char *v261;
  char *v262;
  void *v263;
  char *v264;
  char *v265;
  int v266;
  int v267;
  int v268;
  int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  uint64_t v280;
  char *v281;
  unsigned int v282;
  unsigned int v283[3];

  v4 = (_QWORD *)(a1 + 104);
  v283[0] = *(_DWORD *)(sub_239962518(a1 + 104, a2) + 16);
  v244 = a2;
  v5 = (unsigned int *)sub_239962518((uint64_t)v4, a2);
  v282 = *(_DWORD *)(sub_239962518((uint64_t)v4, v5) + 16);
  v279 = 0;
  v280 = 0;
  v281 = 0;
  v276 = 0;
  v277 = 0;
  v278 = 0;
  v6 = 0;
  v7 = *(_DWORD *)sub_23996252C((uint64_t)v4, v283);
  LODWORD(v263) = v7;
  do
  {
    v9 = v4;
    v10 = *(_DWORD *)(sub_239962518((uint64_t)v4, (unsigned int *)&v263) + 8);
    LODWORD(v263) = v10;
    if (v6 < v281)
    {
      *(_DWORD *)v6 = v10;
      v8 = (uint64_t)(v6 + 4);
      goto LABEL_3;
    }
    v11 = v279;
    v12 = (v6 - v279) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_2394189F8();
    v14 = v281 - v279;
    if ((v281 - v279) >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        sub_239418A80();
      v16 = operator new(4 * v15);
      v17 = &v16[4 * v12];
      *(_DWORD *)v17 = v10;
      v8 = (uint64_t)(v17 + 4);
      if (v6 == v11)
      {
LABEL_20:
        v279 = v17;
        v280 = v8;
        v281 = &v16[4 * v15];
        v4 = v9;
        if (!v6)
          goto LABEL_3;
LABEL_21:
        operator delete(v6);
        goto LABEL_3;
      }
    }
    else
    {
      v16 = 0;
      v17 = (char *)(4 * v12);
      *(_DWORD *)(4 * v12) = v10;
      v8 = 4 * v12 + 4;
      if (v6 == v11)
        goto LABEL_20;
    }
    v18 = v6 - 4 - v11;
    if (v18 < 0xBC)
    {
      v19 = v6;
      goto LABEL_16;
    }
    if (&v16[v6 - v11 - 4 - (v18 & 0xFFFFFFFFFFFFFFFCLL)] > &v16[v6 - v11 - 4])
    {
      v19 = v6;
      do
      {
LABEL_16:
        v20 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v17 - 1) = v20;
        v17 -= 4;
      }
      while (v19 != v11);
      goto LABEL_17;
    }
    if (&v6[-(v18 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4)
    {
      v19 = v6;
      goto LABEL_16;
    }
    if ((unint64_t)(v11 - v16) < 0x20)
    {
      v19 = v6;
      goto LABEL_16;
    }
    v21 = (v18 >> 2) + 1;
    v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    v19 = &v6[-v22];
    v17 -= v22;
    v23 = &v16[4 * v12 - 16];
    v24 = v6 - 16;
    v25 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 8;
    }
    while (v25);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_16;
LABEL_17:
    v6 = v279;
    v279 = v17;
    v280 = v8;
    v281 = &v16[4 * v15];
    v4 = v9;
    if (v6)
      goto LABEL_21;
LABEL_3:
    v280 = v8;
    v6 = (char *)v8;
  }
  while ((_DWORD)v263 != v7);
  v27 = *(_DWORD *)sub_23996252C((uint64_t)v4, &v282);
  LODWORD(v263) = v27;
  do
  {
    v29 = *(_DWORD *)(sub_239962518((uint64_t)v4, (unsigned int *)&v263) + 8);
    LODWORD(v263) = v29;
    v30 = v277;
    if (v277 < v278)
    {
      *(_DWORD *)v277 = v29;
      v28 = (uint64_t)(v30 + 4);
      v4 = v9;
      goto LABEL_34;
    }
    v31 = v276;
    v32 = (v277 - v276) >> 2;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 62)
      sub_2394189F8();
    v34 = v278 - v276;
    if ((v278 - v276) >> 1 > v33)
      v33 = v34 >> 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
      v35 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 >> 62)
        sub_239418A80();
      v36 = (char *)operator new(4 * v35);
      v37 = &v36[4 * v32];
      *(_DWORD *)v37 = v29;
      v28 = (uint64_t)(v37 + 4);
      if (v30 == v31)
      {
LABEL_54:
        v276 = v37;
        v278 = &v36[4 * v35];
        v4 = v9;
        if (!v30)
          goto LABEL_34;
LABEL_55:
        operator delete(v30);
        goto LABEL_34;
      }
    }
    else
    {
      v36 = 0;
      v37 = (char *)(4 * v32);
      *(_DWORD *)(4 * v32) = v29;
      v28 = 4 * v32 + 4;
      if (v30 == v31)
        goto LABEL_54;
    }
    v38 = v30 - 4 - v31;
    if (v38 < 0x2C)
      goto LABEL_326;
    if ((unint64_t)(v31 - v36) < 0x20)
      goto LABEL_326;
    v39 = (v38 >> 2) + 1;
    v40 = 4 * (v39 & 0x7FFFFFFFFFFFFFF8);
    v41 = &v30[-v40];
    v37 -= v40;
    v42 = &v36[4 * v32 - 16];
    v43 = v30 - 16;
    v44 = v39 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v45 = *(_OWORD *)v43;
      *((_OWORD *)v42 - 1) = *((_OWORD *)v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 32;
      v44 -= 8;
    }
    while (v44);
    v30 = v41;
    if (v39 != (v39 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_326:
      do
      {
        v46 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v37 - 1) = v46;
        v37 -= 4;
      }
      while (v30 != v31);
    }
    v30 = v276;
    v276 = v37;
    v278 = &v36[4 * v35];
    v4 = v9;
    if (v30)
      goto LABEL_55;
LABEL_34:
    v277 = (char *)v28;
  }
  while ((_DWORD)v263 != v27);
  v47 = v280 - (_QWORD)v279;
  v48 = v276;
  if ((unint64_t)(v280 - (_QWORD)v279) > 0x10)
    goto LABEL_65;
  v49 = v28 - (_QWORD)v276;
  if ((unint64_t)(v28 - (_QWORD)v276) > 0x10 || v47 == 16 && v49 == 16)
    goto LABEL_65;
  v50 = v47 >= v49 ? v244 : (unsigned int *)sub_239962518((uint64_t)v4, v244);
  v275 = *v50;
  v274 = *(_DWORD *)sub_239962518((uint64_t)v4, &v275);
  v273 = *(_DWORD *)(sub_239962518((uint64_t)v4, &v275) + 16);
  v272 = *(_DWORD *)(sub_239962518((uint64_t)v4, &v274) + 16);
  v271 = *(_DWORD *)(sub_239962518((uint64_t)v4, &v275) + 8);
  v270 = *(_DWORD *)(sub_239962518((uint64_t)v4, &v275) + 4);
  v269 = *(_DWORD *)(sub_239962518((uint64_t)v4, &v274) + 8);
  v268 = *(_DWORD *)(sub_239962518((uint64_t)v4, &v274) + 4);
  v51 = (unsigned int *)sub_239962518((uint64_t)v4, &v275);
  v267 = *(_DWORD *)(sub_239962518((uint64_t)v4, v51) + 12);
  v266 = *(_DWORD *)(sub_239962518((uint64_t)v4, &v275) + 12);
  v52 = (_DWORD *)sub_239962518((uint64_t)v4, &v271);
  if (*v52 == v268 || (v53 = (_DWORD *)sub_239962518((uint64_t)v4, &v270), *v53 == v269))
  {
LABEL_65:
    v54 = 0;
    if (v48)
      goto LABEL_66;
    goto LABEL_67;
  }
  v263 = 0;
  v264 = 0;
  v265 = 0;
  __p = 0;
  v261 = 0;
  v262 = 0;
  LODWORD(v256) = v275;
  while (2)
  {
    v57 = *(_DWORD *)(sub_239962518((uint64_t)v4, (unsigned int *)&v256) + 8);
    LODWORD(v256) = v57;
    if (v57 != v275)
    {
      v58 = v261;
      if (v261 < v262)
      {
        *(_DWORD *)v261 = v57;
        v56 = (uint64_t)(v58 + 4);
        goto LABEL_72;
      }
      v59 = __p;
      v60 = v261 - (_BYTE *)__p;
      v61 = (v261 - (_BYTE *)__p) >> 2;
      v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 62)
        goto LABEL_317;
      v63 = v262 - (_BYTE *)__p;
      if ((v262 - (_BYTE *)__p) >> 1 > v62)
        v62 = v63 >> 1;
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
        v64 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v64 = v62;
      if (v64)
      {
        if (v64 >> 62)
          goto LABEL_319;
        v65 = operator new(4 * v64);
        v66 = &v65[4 * v61];
        *v66 = v57;
        v56 = (uint64_t)(v66 + 1);
        if (v58 != v59)
        {
LABEL_84:
          v67 = v58 - 4 - v59;
          if (v67 < 0x2C)
            goto LABEL_327;
          if ((unint64_t)(v58 - &v65[v60]) < 0x20)
            goto LABEL_327;
          v68 = (v67 >> 2) + 1;
          v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
          v70 = &v58[-v69];
          v66 = (_DWORD *)((char *)v66 - v69);
          v71 = &v65[4 * v61 - 16];
          v72 = (__int128 *)(v58 - 16);
          v73 = v68 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v74 = *v72;
            *(v71 - 1) = *(v72 - 1);
            *v71 = v74;
            v71 -= 2;
            v72 -= 2;
            v73 -= 8;
          }
          while (v73);
          v58 = v70;
          if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_327:
            do
            {
              v75 = *((_DWORD *)v58 - 1);
              v58 -= 4;
              *--v66 = v75;
            }
            while (v58 != v59);
          }
          v58 = __p;
          __p = v66;
          v261 = (char *)v56;
          v262 = &v65[4 * v64];
          if (!v58)
          {
LABEL_72:
            v261 = (char *)v56;
            if ((_DWORD)v256 == v275)
              break;
            continue;
          }
LABEL_94:
          operator delete(v58);
          goto LABEL_72;
        }
      }
      else
      {
        v65 = 0;
        v66 = (_DWORD *)(4 * v61);
        *(_DWORD *)(4 * v61) = v57;
        v56 = 4 * v61 + 4;
        if (v58 != v59)
          goto LABEL_84;
      }
      __p = v66;
      v261 = (char *)v56;
      v262 = &v65[4 * v64];
      if (!v58)
        goto LABEL_72;
      goto LABEL_94;
    }
    break;
  }
  v76 = sub_239962518((uint64_t)v4, &v274);
  v77 = v76;
  v78 = v261;
  if (v261 < v262)
  {
    *(_DWORD *)v261 = *(_DWORD *)(v76 + 8);
    v79 = v78 + 4;
    goto LABEL_117;
  }
  v80 = __p;
  v81 = v261 - (_BYTE *)__p;
  v82 = (v261 - (_BYTE *)__p) >> 2;
  v83 = v82 + 1;
  if ((unint64_t)(v82 + 1) >> 62)
    goto LABEL_317;
  v84 = v262 - (_BYTE *)__p;
  if ((v262 - (_BYTE *)__p) >> 1 > v83)
    v83 = v84 >> 1;
  if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
    v85 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v85 = v83;
  if (!v85)
  {
    v86 = 0;
    goto LABEL_107;
  }
  if (v85 >> 62)
    goto LABEL_319;
  v86 = operator new(4 * v85);
LABEL_107:
  v87 = &v86[4 * v82];
  *(_DWORD *)v87 = *(_DWORD *)(v77 + 8);
  v79 = v87 + 4;
  if (v78 != v80)
  {
    v88 = v78 - v80 - 4;
    if (v88 < 0x2C)
      goto LABEL_328;
    if ((unint64_t)(v78 - v86 - v81) < 0x20)
      goto LABEL_328;
    v89 = (v88 >> 2) + 1;
    v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
    v91 = &v78[-v90];
    v87 -= v90;
    v92 = &v86[4 * v82 - 16];
    v93 = (__int128 *)(v78 - 16);
    v94 = v89 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v95 = *v93;
      *(v92 - 1) = *(v93 - 1);
      *v92 = v95;
      v92 -= 2;
      v93 -= 2;
      v94 -= 8;
    }
    while (v94);
    v78 = v91;
    if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_328:
      do
      {
        v96 = *((_DWORD *)v78 - 1);
        v78 -= 4;
        *((_DWORD *)v87 - 1) = v96;
        v87 -= 4;
      }
      while (v78 != v80);
    }
    v78 = __p;
  }
  __p = v87;
  v261 = v79;
  v262 = &v86[4 * v85];
  if (v78)
    operator delete(v78);
LABEL_117:
  v261 = v79;
  v97 = sub_239962518((uint64_t)v4, &v274);
  v98 = v97;
  v99 = v261;
  if (v261 < v262)
  {
    *(_DWORD *)v261 = *(_DWORD *)(v97 + 4);
    v100 = v99 + 4;
    goto LABEL_139;
  }
  v101 = __p;
  v102 = v261 - (_BYTE *)__p;
  v103 = (v261 - (_BYTE *)__p) >> 2;
  v104 = v103 + 1;
  if ((unint64_t)(v103 + 1) >> 62)
LABEL_317:
    sub_2394189F8();
  v105 = v262 - (_BYTE *)__p;
  if ((v262 - (_BYTE *)__p) >> 1 > v104)
    v104 = v105 >> 1;
  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
    v106 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v106 = v104;
  if (!v106)
  {
    v107 = 0;
    goto LABEL_129;
  }
  if (v106 >> 62)
LABEL_319:
    sub_239418A80();
  v107 = operator new(4 * v106);
LABEL_129:
  v108 = &v107[4 * v103];
  *(_DWORD *)v108 = *(_DWORD *)(v98 + 4);
  v100 = v108 + 4;
  if (v99 != v101)
  {
    v109 = v99 - v101 - 4;
    if (v109 < 0x2C)
      goto LABEL_329;
    if ((unint64_t)(v99 - v107 - v102) < 0x20)
      goto LABEL_329;
    v110 = (v109 >> 2) + 1;
    v111 = 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
    v112 = &v99[-v111];
    v108 -= v111;
    v113 = &v107[4 * v103 - 16];
    v114 = v99 - 16;
    v115 = v110 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v116 = *(_OWORD *)v114;
      *(v113 - 1) = *((_OWORD *)v114 - 1);
      *v113 = v116;
      v113 -= 2;
      v114 -= 32;
      v115 -= 8;
    }
    while (v115);
    v99 = v112;
    if (v110 != (v110 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_329:
      do
      {
        v117 = *((_DWORD *)v99 - 1);
        v99 -= 4;
        *((_DWORD *)v108 - 1) = v117;
        v108 -= 4;
      }
      while (v99 != v101);
    }
    v99 = (char *)__p;
  }
  __p = v108;
  v261 = v100;
  v262 = &v107[4 * v106];
  if (v99)
    operator delete(v99);
LABEL_139:
  v261 = v100;
  v118 = (unsigned int *)__p;
  if (v100 != __p)
  {
    v119 = 0;
    v120 = 0;
    do
    {
      v122 = sub_239962518((uint64_t)v4, &v118[v119]);
      v123 = v122;
      v124 = v264;
      if (v264 < v265)
      {
        *(_DWORD *)v264 = *(_DWORD *)(v122 + 12);
        v121 = (uint64_t)(v124 + 4);
      }
      else
      {
        v125 = v263;
        v126 = v264 - (_BYTE *)v263;
        v127 = (v264 - (_BYTE *)v263) >> 2;
        v128 = v127 + 1;
        if ((unint64_t)(v127 + 1) >> 62)
          sub_2394189F8();
        v129 = v265 - (_BYTE *)v263;
        if ((v265 - (_BYTE *)v263) >> 1 > v128)
          v128 = v129 >> 1;
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL)
          v130 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v130 = v128;
        if (v130)
        {
          if (v130 >> 62)
            sub_239418A80();
          v131 = operator new(4 * v130);
          v132 = &v131[4 * v127];
          *v132 = *(_DWORD *)(v123 + 12);
          v121 = (uint64_t)(v132 + 1);
          if (v124 != v125)
          {
LABEL_153:
            v133 = v124 - 4 - v125;
            if (v133 < 0x2C)
              goto LABEL_330;
            if ((unint64_t)(v124 - &v131[v126]) < 0x20)
              goto LABEL_330;
            v134 = (v133 >> 2) + 1;
            v135 = 4 * (v134 & 0x7FFFFFFFFFFFFFF8);
            v136 = &v124[-v135];
            v132 = (_DWORD *)((char *)v132 - v135);
            v137 = &v131[4 * v127 - 16];
            v138 = (__int128 *)(v124 - 16);
            v139 = v134 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v140 = *v138;
              *(v137 - 1) = *(v138 - 1);
              *v137 = v140;
              v137 -= 2;
              v138 -= 2;
              v139 -= 8;
            }
            while (v139);
            v124 = v136;
            if (v134 != (v134 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_330:
              do
              {
                v141 = *((_DWORD *)v124 - 1);
                v124 -= 4;
                *--v132 = v141;
              }
              while (v124 != v125);
            }
            v124 = v263;
            v263 = v132;
            v265 = &v131[4 * v130];
            if (!v124)
              goto LABEL_142;
LABEL_163:
            operator delete(v124);
            goto LABEL_142;
          }
        }
        else
        {
          v131 = 0;
          v132 = (_DWORD *)(4 * v127);
          *(_DWORD *)(4 * v127) = *(_DWORD *)(v123 + 12);
          v121 = 4 * v127 + 4;
          if (v124 != v125)
            goto LABEL_153;
        }
        v263 = v132;
        v265 = &v131[4 * v130];
        if (v124)
          goto LABEL_163;
      }
LABEL_142:
      v264 = (char *)v121;
      v118 = (unsigned int *)__p;
      v119 = ++v120;
    }
    while (v120 < (unint64_t)((v261 - (_BYTE *)__p) >> 2));
  }
  v259 = 0;
  v143 = v272;
  v142 = v273;
  v144 = (char *)operator new(8uLL);
  *(_QWORD *)v144 = v142 | (v143 << 32);
  v257 = v144 + 8;
  v258 = v144 + 8;
  v256 = v144;
  sub_2399DE440(a1, (uint64_t)&v256, &v263, v145, &v259);
  operator delete(v144);
  if (v259)
    goto LABEL_165;
  v146 = *a3;
  if (*a3 == -1)
    goto LABEL_188;
  v256 = 0;
  v257 = 0;
  v258 = 0;
  v253 = 0;
  v254 = 0;
  v255 = 0;
  v147 = *(_QWORD *)(sub_239964210(a1, v146) + 40);
  v148 = (char **)(v147 + 24 * v273);
  if (&v256 != (void **)v148)
  {
    v149 = *(char **)(v147 + 24 * v273 + 8);
    sub_23942156C(&v256, *v148, v149, (v149 - *v148) >> 2);
  }
  v150 = *(_QWORD *)(sub_239964210(a1, *a3) + 40);
  v151 = (char **)(v150 + 24 * v272);
  if (&v253 != (void **)v151)
  {
    v152 = *(char **)(v150 + 24 * v272 + 8);
    sub_23942156C(&v253, *v151, v152, (v152 - *v151) >> 2);
  }
  if (v254 == v253 || (v153 = v256, v154 = v257 - (_BYTE *)v256, v257 == v256))
  {
LABEL_182:
    v160 = 0;
LABEL_183:
    v163 = (char *)v253;
    if (v253)
    {
LABEL_184:
      v254 = v163;
      operator delete(v163);
    }
  }
  else
  {
    v155 = 0;
    v156 = 0;
    v157 = v154 >> 2;
LABEL_174:
    v158 = 0;
    v159 = 0;
    do
    {
      if (*((_DWORD *)v253 + v155) == *((_DWORD *)v256 + v158))
      {
        v160 = 0;
        v155 = ++v156;
        if ((v254 - (_BYTE *)v253) >> 2 > (unint64_t)v156)
          goto LABEL_174;
        goto LABEL_183;
      }
      v158 = ++v159;
    }
    while (v157 > v159);
    v161 = 0;
    v162 = 0;
    while (*((_DWORD *)v253 + (unsigned __int16)(v156 + 2 - 3 * ((21846 * (v156 + 2)) >> 16))) != *((_DWORD *)v256 + v161))
    {
      v161 = ++v162;
      if (v157 <= v162)
        goto LABEL_182;
    }
    if (v154 == -4)
    {
      LODWORD(v206) = (_DWORD)v256 + 4 * v157 + 4;
      v257 = (char *)v256 + 4 * v157 + 4;
    }
    else
    {
      sub_23942CB44((uint64_t)&v256, 1uLL);
      v153 = v256;
      LODWORD(v206) = (_DWORD)v257;
    }
    LODWORD(v206) = ((v206 - (_DWORD)v153) >> 2) - 2;
    if (v206 > v162)
    {
      v206 = v206;
      do
      {
        v153[v206 + 1] = v153[v206];
        --v206;
      }
      while (v162 < v206);
    }
    v153[v161 + 1] = *((_DWORD *)v253 + v155);
    v231 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * *a3);
    v232 = *v231;
    v233 = (std::__shared_weak_count *)v231[1];
    if (v233)
    {
      p_shared_owners = (unint64_t *)&v233->__shared_owners_;
      do
        v235 = __ldxr(p_shared_owners);
      while (__stxr(v235 + 1, p_shared_owners));
      do
        v236 = __ldaxr(p_shared_owners);
      while (__stlxr(v236 - 1, p_shared_owners));
      if (!v236)
      {
        ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
        std::__shared_weak_count::__release_weak(v233);
      }
    }
    v237 = (void **)(*(_QWORD *)(v232 + 40) + 24 * v273);
    if (v237 != &v256)
      sub_23942156C(v237, (char *)v256, v257, (v257 - (_BYTE *)v256) >> 2);
    v160 = 1;
    v163 = (char *)v253;
    if (v253)
      goto LABEL_184;
  }
  if (v256)
  {
    v257 = (char *)v256;
    operator delete(v256);
  }
  if ((v160 & 1) != 0)
  {
LABEL_188:
    sub_23996253C((uint64_t)v4, &v270, &v269);
    sub_23996253C((uint64_t)v4, &v268, &v271);
    sub_2399625F4(v4, &v267, &v271);
    sub_2399625F4(v4, &v266, &v269);
    sub_23996259C((uint64_t)v4, &v273, &v269);
    sub_23996259C((uint64_t)v4, &v273, &v268);
    if (*a3 == -1)
    {
      v164 = *(_DWORD *)sub_23996252C((uint64_t)v4, &v273);
      LODWORD(v256) = v164;
      LODWORD(v253) = -1;
      v165 = -200.0;
      do
      {
        LODWORD(v256) = *(_DWORD *)(sub_239962518((uint64_t)v4, (unsigned int *)&v256) + 8);
        v166 = sub_23992E268(a1, v256);
        if (v166 > v165)
        {
          LODWORD(v253) = (_DWORD)v256;
          v165 = v166;
        }
      }
      while ((_DWORD)v256 != v164);
      if ((_DWORD)v253 != -1)
      {
        v167 = sub_239962518((uint64_t)v4, (unsigned int *)&v253);
        if (*(_DWORD *)(v167 + 4) != *(_DWORD *)sub_23996252C((uint64_t)v4, &v273) && v165 > 120.0)
        {
          v168 = sub_239962518((uint64_t)v4, (unsigned int *)&v253);
          sub_23996259C((uint64_t)v4, &v273, (_DWORD *)(v168 + 4));
        }
      }
      if (*a3 == -1)
      {
        v257 = 0;
        v258 = 0;
        v255 = 0;
        v256 = &v257;
        v253 = 0;
        v254 = 0;
        sub_2399DE618(a1, &v273, &v253, (uint64_t **)&v256);
        v169 = (char *)v256;
        v253 = 0;
        v254 = 0;
        v255 = 0;
        if (v256 == &v257)
        {
          v238 = 0;
        }
        else
        {
          v170 = 0;
          do
          {
            v172 = *((_QWORD *)v169 + 5);
            v171 = *((_QWORD *)v169 + 6);
            if ((unint64_t)(v171 - v172) >= 5)
            {
              if (v171 == v172)
              {
                v179 = 0;
                v172 = *((_QWORD *)v169 + 6);
              }
              else
              {
                v173 = 0;
                v174 = 0;
                while (2)
                {
                  if (v171 == v172)
                  {
                    v171 = v172;
                    v179 = v174;
                  }
                  else
                  {
                    v175 = 0;
                    v176 = 0;
                    while (1)
                    {
                      if (v174 != v176)
                      {
                        v177 = *(_DWORD *)(v172 + 4 * v173);
                        v178 = sub_239962518((uint64_t)v4, (unsigned int *)(v172 + 4 * v175));
                        v172 = *((_QWORD *)v169 + 5);
                        v171 = *((_QWORD *)v169 + 6);
                        if (v177 == *(_DWORD *)(v178 + 8))
                          break;
                      }
                      v175 = ++v176;
                      if (v176 >= (unint64_t)((v171 - v172) >> 2))
                      {
                        v179 = v174;
                        goto LABEL_213;
                      }
                    }
                    v179 = 0;
                    v173 = ++v174;
                    if (v174 < (unint64_t)((v171 - v172) >> 2))
                      continue;
                  }
                  break;
                }
              }
LABEL_213:
              v180 = (v179 + 1) % (unint64_t)((v171 - v172) >> 2);
              if (v179 != (_DWORD)v180)
              {
                LOBYTE(v181) = 0;
                do
                {
                  if ((v181 & 1) != 0)
                  {
                    v182 = (v171 - v172) >> 2;
                    for (i = (v180 + 1) % v182; v179 != (_DWORD)i; i = (i + 1) % v182)
                      ;
                    goto LABEL_221;
                  }
                  v181 = sub_2399DCBA8(a1, (unsigned int *)(v172 + 4 * v179), (unsigned int *)(v172 + 4 * v180));
                  v172 = *((_QWORD *)v169 + 5);
                  v171 = *((_QWORD *)v169 + 6);
                  v180 = (v180 + 1) % (unint64_t)((v171 - v172) >> 2);
                }
                while (v179 != (_DWORD)v180);
                if (!v181)
                  goto LABEL_244;
LABEL_221:
                v184 = v254;
                if (v254 >= v255)
                {
                  v186 = v253;
                  v187 = v254 - (_BYTE *)v253;
                  v188 = (v254 - (_BYTE *)v253) >> 2;
                  v189 = v188 + 1;
                  if ((unint64_t)(v188 + 1) >> 62)
                    sub_2394189F8();
                  v190 = v255 - (_BYTE *)v253;
                  if ((v255 - (_BYTE *)v253) >> 1 > v189)
                    v189 = v190 >> 1;
                  if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFFCLL)
                    v191 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v191 = v189;
                  if (v191)
                  {
                    if (v191 >> 62)
                      sub_239418A80();
                    v192 = operator new(4 * v191);
                  }
                  else
                  {
                    v192 = 0;
                  }
                  v193 = &v192[4 * v188];
                  *(_DWORD *)v193 = *((_DWORD *)v169 + 8);
                  v185 = v193 + 4;
                  if (v184 != v186)
                  {
                    v194 = v184 - 4 - v186;
                    if (v194 < 0x2C)
                      goto LABEL_331;
                    if ((unint64_t)(v184 - &v192[v187]) < 0x20)
                      goto LABEL_331;
                    v195 = (v194 >> 2) + 1;
                    v196 = 4 * (v195 & 0x7FFFFFFFFFFFFFF8);
                    v197 = &v184[-v196];
                    v193 -= v196;
                    v198 = &v192[4 * v188 - 16];
                    v199 = (__int128 *)(v184 - 16);
                    v200 = v195 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v201 = *v199;
                      *(v198 - 1) = *(v199 - 1);
                      *v198 = v201;
                      v198 -= 2;
                      v199 -= 2;
                      v200 -= 8;
                    }
                    while (v200);
                    v184 = v197;
                    if (v195 != (v195 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_331:
                      do
                      {
                        v202 = *((_DWORD *)v184 - 1);
                        v184 -= 4;
                        *((_DWORD *)v193 - 1) = v202;
                        v193 -= 4;
                      }
                      while (v184 != v186);
                    }
                    v184 = v253;
                  }
                  v253 = v193;
                  v254 = v185;
                  v255 = &v192[4 * v191];
                  v4 = v9;
                  if (v184)
                    operator delete(v184);
                }
                else
                {
                  *(_DWORD *)v254 = *((_DWORD *)v169 + 8);
                  v185 = v184 + 4;
                }
                v254 = v185;
                ++v170;
              }
            }
LABEL_244:
            v203 = (char *)*((_QWORD *)v169 + 1);
            if (v203)
            {
              do
              {
                v204 = (char **)v203;
                v203 = *(char **)v203;
              }
              while (v203);
            }
            else
            {
              do
              {
                v204 = (char **)*((_QWORD *)v169 + 2);
                v205 = *v204 == v169;
                v169 = (char *)v204;
              }
              while (!v205);
            }
            v169 = (char *)v204;
          }
          while (v204 != &v257);
          v250 = 0;
          v251 = 0;
          v252 = 0;
          if (v170)
          {
            sub_239968AD4(&v253, &v273);
            v207 = (unsigned int *)v253;
            v242 = v254;
            if (v253 != v254)
            {
              do
              {
                v245 = v207;
                v249 = *v207;
                v251 = (char *)v250;
                v208 = *(_DWORD *)sub_23996252C((uint64_t)v4, &v249);
                v248 = v208;
                do
                {
                  v210 = *(_DWORD *)(sub_239962518((uint64_t)v4, &v248) + 8);
                  v248 = v210;
                  v211 = v251;
                  if (v251 < v252)
                  {
                    *(_DWORD *)v251 = v210;
                    v209 = (uint64_t)(v211 + 4);
                    v4 = v9;
                    goto LABEL_259;
                  }
                  v212 = v250;
                  v213 = v251 - (_BYTE *)v250;
                  v214 = (v251 - (_BYTE *)v250) >> 2;
                  v215 = v214 + 1;
                  if ((unint64_t)(v214 + 1) >> 62)
                    sub_2394189F8();
                  v216 = v252 - (_BYTE *)v250;
                  if ((v252 - (_BYTE *)v250) >> 1 > v215)
                    v215 = v216 >> 1;
                  if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL)
                    v217 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v217 = v215;
                  if (v217)
                  {
                    if (v217 >> 62)
                      sub_239418A80();
                    v218 = operator new(4 * v217);
                    v219 = (unsigned int *)&v218[4 * v214];
                    *v219 = v210;
                    v209 = (uint64_t)(v219 + 1);
                    if (v211 == v212)
                      goto LABEL_279;
LABEL_272:
                    v220 = v211 - 4 - v212;
                    if (v220 < 0x2C)
                      goto LABEL_332;
                    if ((unint64_t)(v211 - &v218[v213]) < 0x20)
                      goto LABEL_332;
                    v221 = (v220 >> 2) + 1;
                    v222 = 4 * (v221 & 0x7FFFFFFFFFFFFFF8);
                    v223 = &v211[-v222];
                    v219 = (unsigned int *)((char *)v219 - v222);
                    v224 = &v218[4 * v214 - 16];
                    v225 = (__int128 *)(v211 - 16);
                    v226 = v221 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v227 = *v225;
                      *(v224 - 1) = *(v225 - 1);
                      *v224 = v227;
                      v224 -= 2;
                      v225 -= 2;
                      v226 -= 8;
                    }
                    while (v226);
                    v211 = v223;
                    if (v221 != (v221 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_332:
                      do
                      {
                        v228 = *((_DWORD *)v211 - 1);
                        v211 -= 4;
                        *--v219 = v228;
                      }
                      while (v211 != v212);
                    }
                    v211 = v250;
                    goto LABEL_279;
                  }
                  v218 = 0;
                  v219 = (unsigned int *)(4 * v214);
                  *(_DWORD *)(4 * v214) = v210;
                  v209 = 4 * v214 + 4;
                  if (v211 != v212)
                    goto LABEL_272;
LABEL_279:
                  v250 = v219;
                  v251 = (char *)v209;
                  v252 = &v218[4 * v217];
                  v4 = v9;
                  if (v211)
                    operator delete(v211);
LABEL_259:
                  v251 = (char *)v209;
                }
                while (v248 != v208);
                if (v209 - (_QWORD)v250 == 8)
                {
                  v229 = sub_239962518((uint64_t)v4, (unsigned int *)v250);
                  if (*(_DWORD *)(v229 + 8) == *((_DWORD *)v250 + 1))
                  {
                    v230 = *(_DWORD *)v250;
                    v246 = *(_DWORD *)(v229 + 8);
                    v247 = v230;
                    sub_2399DEBC0(a1, &v249, &v247, &v246);
                  }
                }
                v207 = v245 + 1;
              }
              while (v245 + 1 != (unsigned int *)v242);
            }
            if (v250)
            {
              v251 = (char *)v250;
              operator delete(v250);
            }
          }
          v238 = (char *)v253;
        }
        if (v238)
        {
          v254 = v238;
          operator delete(v238);
        }
        sub_2394EF618((uint64_t)&v256, v257);
      }
    }
    v239 = sub_239962518((uint64_t)v4, &v275);
    *(_QWORD *)v239 = -1;
    *(_QWORD *)(v239 + 8) = -1;
    *(_DWORD *)(v239 + 16) = -1;
    v240 = sub_239962518((uint64_t)v4, &v274);
    *(_QWORD *)v240 = -1;
    *(_QWORD *)(v240 + 8) = -1;
    *(_DWORD *)(v240 + 16) = -1;
    *(_DWORD *)sub_23996252C((uint64_t)v4, &v272) = -1;
    v54 = 1;
  }
  else
  {
LABEL_165:
    v54 = 0;
  }
  if (__p)
  {
    v261 = (char *)__p;
    operator delete(__p);
  }
  if (v263)
    operator delete(v263);
  v48 = v276;
  if (v276)
  {
LABEL_66:
    v277 = v48;
    operator delete(v48);
  }
LABEL_67:
  if (v279)
    operator delete(v279);
  return v54;
}

void sub_2399DE290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,_QWORD *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;

  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  sub_2394EF618((uint64_t)&a20, a21);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
    v29 = a27;
    if (a27)
    {
LABEL_12:
      a28 = (uint64_t)v29;
      operator delete(v29);
      v30 = *(void **)(v28 - 160);
      if (v30)
      {
LABEL_13:
        *(_QWORD *)(v28 - 152) = v30;
        operator delete(v30);
        v31 = *(void **)(v28 - 136);
        if (v31)
        {
LABEL_14:
          *(_QWORD *)(v28 - 128) = v31;
          operator delete(v31);
          _Unwind_Resume(a1);
        }
LABEL_5:
        _Unwind_Resume(a1);
      }
LABEL_4:
      v31 = *(void **)(v28 - 136);
      if (v31)
        goto LABEL_14;
      goto LABEL_5;
    }
  }
  else
  {
    v29 = a27;
    if (a27)
      goto LABEL_12;
  }
  v30 = *(void **)(v28 - 160);
  if (v30)
    goto LABEL_13;
  goto LABEL_4;
}

uint64_t sub_2399DE440(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _BYTE *a5)
{
  _DWORD *v5;
  unint64_t v9;
  int v10;
  _QWORD *v11;
  unsigned int *v12;
  unint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  unint64_t v21;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD v27[4];

  *a5 = 0;
  v5 = (_DWORD *)*a3;
  if (a3[1] != *a3)
  {
    v9 = 0;
    v10 = 0;
    v11 = (_QWORD *)(a1 + 104);
    while (1)
    {
      v12 = &v5[v9];
      sub_239962B1C((uint64_t)v27, v11, v12);
      v26 = sub_239962B44(v27);
      if (v26 != -1)
        break;
      v9 = ++v10;
LABEL_24:
      v5 = (_DWORD *)*a3;
      if (v9 >= (uint64_t)(a3[1] - *a3) >> 2)
        return 1;
    }
    v13 = v9 - 1;
    v9 = ++v10;
    while (1)
    {
      v14 = *(_DWORD *)(sub_239962518((uint64_t)v11, &v26) + 16);
      v25 = v14;
      if (v14 != -1)
      {
        v16 = *(_DWORD **)a2;
        v15 = *(_DWORD **)(a2 + 8);
        if (*(_DWORD **)a2 != v15)
        {
          while (*v16 != v14)
          {
            if (++v16 == v15)
            {
              v16 = *(_DWORD **)(a2 + 8);
              break;
            }
          }
        }
        if (v16 == v15)
          break;
      }
LABEL_6:
      v26 = sub_239962B44(v27);
      if (v26 == -1)
        goto LABEL_24;
    }
    v17 = *(_DWORD *)sub_23996252C((uint64_t)v11, &v25);
    v24 = v17;
    while (1)
    {
      v24 = *(_DWORD *)(sub_239962518((uint64_t)v11, &v24) + 8);
      v18 = *(_DWORD *)(sub_239962518((uint64_t)v11, &v24) + 12);
      if (v18 != *v12)
      {
        v20 = (_DWORD *)*a3;
        v19 = (_DWORD *)a3[1];
        v21 = ((uint64_t)v19 - *a3) >> 2;
        if (v18 != *(_DWORD *)(*a3 + 4 * ((v13 + v21) % v21)) && v18 != v20[v9 % v21] && v20 != v19)
          break;
      }
LABEL_13:
      if (v24 == v17)
        goto LABEL_6;
    }
    while (v18 != *v20)
    {
      if (++v20 == v19)
        goto LABEL_13;
    }
    *a5 = 1;
  }
  return 1;
}

BOOL sub_2399DE618(uint64_t a1, unsigned int *a2, _QWORD *a3, uint64_t **a4)
{
  uint64_t *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  unsigned int *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t **v42;
  unsigned int v43;
  _DWORD *v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  int v65;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int *v73;

  v4 = a4[2];
  if (v4)
    return v4 == 0;
  v71 = 0;
  v72 = 0;
  v6 = a1 + 104;
  v73 = 0;
  v7 = 0;
  v8 = *(_DWORD *)sub_23996252C(a1 + 104, a2);
  v70 = v8;
  do
  {
    while (1)
    {
      v9 = *(_DWORD *)(sub_239962518(v6, &v70) + 8);
      v70 = v9;
      if (v7 >= v73)
        break;
      *v7++ = v9;
      v72 = v7;
      if (v70 == v8)
        goto LABEL_34;
    }
    v10 = v71;
    v11 = (char *)((char *)v7 - (char *)v71);
    v12 = v7 - v71;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_2394189F8();
    v14 = (char *)v73 - (char *)v71;
    if (((char *)v73 - (char *)v71) >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        sub_239418A80();
      v16 = operator new(4 * v15);
      v17 = (unsigned int *)&v16[4 * v12];
      *v17 = v9;
      v18 = (uint64_t)(v17 + 1);
      if (v7 == v10)
      {
LABEL_14:
        v71 = v17;
        v72 = (unsigned int *)v18;
        v73 = (unsigned int *)&v16[4 * v15];
        if (!v7)
          goto LABEL_16;
LABEL_15:
        operator delete(v7);
        goto LABEL_16;
      }
    }
    else
    {
      v16 = 0;
      v17 = (unsigned int *)(4 * v12);
      *(_DWORD *)(4 * v12) = v9;
      v18 = 4 * v12 + 4;
      if (v7 == v10)
        goto LABEL_14;
    }
    v19 = (char *)(v7 - 1) - (char *)v10;
    if (v19 < 0xBC)
    {
      v20 = v7;
      goto LABEL_21;
    }
    if (&v11[(_QWORD)v16 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v11[(_QWORD)v16 - 4])
    {
      v20 = v7;
      do
      {
LABEL_21:
        v21 = *--v20;
        *--v17 = v21;
      }
      while (v20 != v10);
      goto LABEL_22;
    }
    if ((unsigned int *)((char *)v7 - (v19 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v7 - 1)
    {
      v20 = v7;
      goto LABEL_21;
    }
    if ((unint64_t)((char *)v7 - v16 - (_QWORD)v11) < 0x20)
    {
      v20 = v7;
      goto LABEL_21;
    }
    v22 = (v19 >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v7[v23 / 0xFFFFFFFFFFFFFFFCLL];
    v17 = (unsigned int *)((char *)v17 - v23);
    v24 = &v16[4 * v12 - 16];
    v25 = v7 - 4;
    v26 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 8;
      v26 -= 8;
    }
    while (v26);
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_21;
LABEL_22:
    v7 = v71;
    v71 = v17;
    v72 = (unsigned int *)v18;
    v73 = (unsigned int *)&v16[4 * v15];
    if (v7)
      goto LABEL_15;
LABEL_16:
    v7 = (unsigned int *)v18;
    v72 = (unsigned int *)v18;
  }
  while (v70 != v8);
LABEL_34:
  if (v7 == v71)
    goto LABEL_81;
  v28 = 0;
  v29 = 0;
  v7 = v71;
  while (2)
  {
    v69 = v7[v28];
    v31 = *(unsigned int *)sub_239962518(v6, &v69);
    v32 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
    v33 = *v32;
    v34 = (std::__shared_weak_count *)v32[1];
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(p_shared_owners);
      while (__stxr(v36 + 1, p_shared_owners));
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
        if (((*(_QWORD *)(*(_QWORD *)(v33 + 40) + ((v31 >> 3) & 0x1FFFFFF8)) >> v31) & 1) == 0)
          goto LABEL_45;
        goto LABEL_38;
      }
    }
    if (((*(_QWORD *)(*(_QWORD *)(v33 + 40) + ((v31 >> 3) & 0x1FFFFFF8)) >> v31) & 1) != 0)
      goto LABEL_38;
LABEL_45:
    v38 = (unsigned int *)sub_239962518(v6, &v69);
    v39 = *(unsigned int *)(sub_239962518(v6, v38) + 16);
    if (!a3[1] || ((*(_QWORD *)(*a3 + ((v39 >> 3) & 0x1FFFFFF8)) >> v39) & 1) == 0)
    {
      v40 = a4 + 1;
      while (1)
      {
        v41 = *v40;
        v42 = v40;
        if (!*v40)
          break;
        while (1)
        {
          v40 = (uint64_t **)v41;
          v43 = *((_DWORD *)v41 + 8);
          if (v39 < v43)
            break;
          if (v43 >= v39)
          {
            v44 = v40;
            v48 = (char *)v40[6];
            v47 = (unint64_t)v40[7];
            if ((unint64_t)v48 < v47)
              goto LABEL_36;
            goto LABEL_60;
          }
          v41 = v40[1];
          if (!v41)
          {
            v42 = v40 + 1;
            goto LABEL_53;
          }
        }
      }
LABEL_53:
      v44 = operator new(0x40uLL);
      v44[8] = v39;
      *((_QWORD *)v44 + 6) = 0;
      *((_QWORD *)v44 + 7) = 0;
      *((_QWORD *)v44 + 5) = 0;
      *(_QWORD *)v44 = 0;
      *((_QWORD *)v44 + 1) = 0;
      *((_QWORD *)v44 + 2) = v40;
      *v42 = (uint64_t *)v44;
      v45 = (uint64_t *)**a4;
      v46 = (uint64_t *)v44;
      if (v45)
      {
        *a4 = v45;
        v46 = *v42;
      }
      sub_2394213B8(a4[1], v46);
      a4[2] = (uint64_t *)((char *)a4[2] + 1);
      v48 = (char *)*((_QWORD *)v44 + 6);
      v47 = *((_QWORD *)v44 + 7);
      if ((unint64_t)v48 < v47)
      {
LABEL_36:
        *(_DWORD *)v48 = v69;
        v30 = (uint64_t)(v48 + 4);
        goto LABEL_37;
      }
LABEL_60:
      v49 = (char *)*((_QWORD *)v44 + 5);
      v50 = (v48 - v49) >> 2;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 62)
        sub_2394189F8();
      v52 = v47 - (_QWORD)v49;
      if (v52 >> 1 > v51)
        v51 = v52 >> 1;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
        v53 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
      {
        if (v53 >> 62)
          sub_239418A80();
        v54 = v53;
        v55 = (char *)operator new(4 * v53);
        v53 = v54;
        v56 = &v55[4 * v50];
        *(_DWORD *)v56 = v69;
        v30 = (uint64_t)(v56 + 4);
        if (v48 == v49)
        {
LABEL_78:
          *((_QWORD *)v44 + 5) = v56;
          *((_QWORD *)v44 + 6) = v30;
          *((_QWORD *)v44 + 7) = &v55[4 * v53];
          if (v48)
            operator delete(v48);
LABEL_37:
          *((_QWORD *)v44 + 6) = v30;
          goto LABEL_38;
        }
      }
      else
      {
        v55 = 0;
        v56 = (char *)(4 * v50);
        *(_DWORD *)(4 * v50) = v69;
        v30 = 4 * v50 + 4;
        if (v48 == v49)
          goto LABEL_78;
      }
      v57 = v48 - 4 - v49;
      if (v57 < 0x2C)
        goto LABEL_90;
      if ((unint64_t)(v49 - v55) < 0x20)
        goto LABEL_90;
      v58 = (v57 >> 2) + 1;
      v59 = 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
      v60 = &v48[-v59];
      v56 -= v59;
      v61 = &v55[4 * v50 - 16];
      v62 = (__int128 *)(v48 - 16);
      v63 = v58 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v64 = *v62;
        *((_OWORD *)v61 - 1) = *(v62 - 1);
        *(_OWORD *)v61 = v64;
        v61 -= 32;
        v62 -= 2;
        v63 -= 8;
      }
      while (v63);
      v48 = v60;
      if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_90:
        do
        {
          v65 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *((_DWORD *)v56 - 1) = v65;
          v56 -= 4;
        }
        while (v48 != v49);
      }
      v48 = (char *)*((_QWORD *)v44 + 5);
      goto LABEL_78;
    }
LABEL_38:
    v7 = v71;
    v28 = ++v29;
    if (v29 < (unint64_t)(v72 - v71))
      continue;
    break;
  }
  if (v71)
  {
LABEL_81:
    v72 = v7;
    operator delete(v7);
  }
  v4 = 0;
  return v4 == 0;
}

void sub_2399DEB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2399DEBC0(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;

  v7 = (_QWORD *)(a1 + 104);
  v14 = *(_DWORD *)sub_239962518(a1 + 104, a3);
  v13 = *(_DWORD *)sub_239962518((uint64_t)v7, a4);
  v12 = *(_DWORD *)(sub_239962518((uint64_t)v7, a3) + 12);
  v11 = *(_DWORD *)(sub_239962518((uint64_t)v7, a4) + 12);
  sub_23996256C((uint64_t)v7, &v14, &v13);
  sub_2399625C8(v7, &v14, &v11);
  sub_2399625C8(v7, &v13, &v12);
  v8 = sub_239962518((uint64_t)v7, a3);
  *(_QWORD *)v8 = -1;
  *(_QWORD *)(v8 + 8) = -1;
  *(_DWORD *)(v8 + 16) = -1;
  v9 = sub_239962518((uint64_t)v7, a4);
  *(_QWORD *)v9 = -1;
  *(_QWORD *)(v9 + 8) = -1;
  *(_DWORD *)(v9 + 16) = -1;
  *(_DWORD *)sub_23996252C((uint64_t)v7, a2) = -1;
  return 1;
}

uint64_t sub_2399DECBC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  float32x4_t v15;

  v4 = a1[13];
  v3 = a1[14];
  if ((uint64_t)(a2[1] - *a2) >> 4 != (v3 - v4) >> 2)
    return 0;
  v8 = a1[19];
  v7 = a1[20];
  if ((uint64_t)(a3[1] - *a3) >> 4 != (v7 - v8) >> 2)
    return 0;
  if (v7 != v8)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      sub_23995E194((uint64_t)a1, v10, (float32x4_t *)(*a3 + 16 * v10));
      v10 = v11++;
    }
    while (v10 < (uint64_t)(a1[20] - a1[19]) >> 2);
    v4 = a1[13];
    v3 = a1[14];
  }
  if (v3 != v4)
  {
    v12 = 0;
    v13 = 1;
    do
    {
      sub_23995DFFC((uint64_t)a1, a3, v12, &v15);
      *(float32x4_t *)(*a2 + 16 * v12) = v15;
      v12 = v13++;
    }
    while (v12 < (uint64_t)(a1[14] - a1[13]) >> 2);
  }
  return 1;
}

BOOL sub_2399DEDD4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v11;
  unsigned int v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int *v48;
  uint64_t *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  unsigned int v58;
  unsigned int v59;
  _DWORD v60[4];

  v2 = a2[1] - *a2;
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 112);
  v5 = (_QWORD *)(a1 + 104);
  v6 = v4 - v3;
  if (v4 != v3 && v2 == v6)
  {
    v11 = 0;
    v12 = 0;
    v55 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    do
    {
      v59 = v12;
      sub_239962B1C((uint64_t)v60, v5, &v59);
      v14 = sub_239962B44(v60);
      v59 = v14;
      if (v14 == -1)
      {
        v13 = 0.0;
      }
      else
      {
        v15 = v14;
        v13 = 0.0;
        do
        {
          v30 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 180));
          v32 = *v30;
          v31 = (std::__shared_weak_count *)v30[1];
          if (v31)
          {
            p_shared_owners = (unint64_t *)&v31->__shared_owners_;
            do
              v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if (((*(_QWORD *)(*(_QWORD *)(v32 + 40) + (((unint64_t)v15 >> 3) & 0x1FFFFFF8)) >> v15) & 1) == 0)
          {
            v58 = *(_DWORD *)(sub_239962518((uint64_t)v5, &v59) + 4);
            v36 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
            v38 = *v36;
            v37 = (std::__shared_weak_count *)v36[1];
            if (v37)
            {
              v39 = (unint64_t *)&v37->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
              do
                v41 = __ldaxr(v39);
              while (__stlxr(v41 - 1, v39));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            v57 = *(float32x4_t *)(*(_QWORD *)(v38 + 40) + 16 * v11);
            v42 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
            v44 = *v42;
            v43 = (std::__shared_weak_count *)v42[1];
            if (v43)
            {
              v45 = (unint64_t *)&v43->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
              do
                v47 = __ldaxr(v45);
              while (__stlxr(v47 - 1, v45));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
                std::__shared_weak_count::__release_weak(v43);
              }
            }
            v48 = (unsigned int *)sub_239962518((uint64_t)v5, &v59);
            v56 = *(float32x4_t *)(*(_QWORD *)(v44 + 40) + 16
                                                         * *(unsigned int *)(sub_239962518((uint64_t)v5, v48) + 12));
            v49 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 176));
            v51 = *v49;
            v50 = (std::__shared_weak_count *)v49[1];
            if (v50)
            {
              v52 = (unint64_t *)&v50->__shared_owners_;
              do
                v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
              do
                v54 = __ldaxr(v52);
              while (__stlxr(v54 - 1, v52));
              if (!v54)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v16 = *(float32x4_t *)(*(_QWORD *)(v51 + 40)
                                 + 16 * *(unsigned int *)(sub_239962518((uint64_t)v5, &v58) + 12));
            v17 = vaddq_f32(v57, v56);
            v18 = vmulq_f32(vaddq_f32(v17, v16), v55);
            v19.i64[0] = 0x3F0000003F000000;
            v19.i64[1] = 0x3F0000003F000000;
            v20 = vmulq_f32(v17, v19);
            v21 = (int32x4_t)vsubq_f32(v18, v57);
            v22 = (int32x4_t)vsubq_f32(vmulq_f32(vaddq_f32(v57, v16), v19), v57);
            v23 = (float32x4_t)vzip2q_s32(vzip1q_s32(v21, (int32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 0xCuLL)), v21);
            v24 = (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL), v21);
            v25 = vmlsq_f32(vmulq_f32(v23, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL), v22)), (float32x4_t)vzip2q_s32(vzip1q_s32(v22, (int32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 0xCuLL)), v22), v24);
            v26 = vmulq_f32(v25, v25);
            v26.i32[3] = 0;
            v27 = (int32x4_t)vsubq_f32(v20, v57);
            v28 = vmlsq_f32(vmulq_f32((float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL), v27), v23), (float32x4_t)vzip2q_s32(vzip1q_s32(v27, (int32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 0xCuLL)), v27), v24);
            v29 = vmulq_f32(v28, v28);
            v29.i32[3] = 0;
            v13 = v13
                + (float)(sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v26, v26)))
                        + sqrtf(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29))))
                * 0.5;
          }
          v15 = sub_239962B44(v60);
          v59 = v15;
        }
        while (v15 != -1);
      }
      *(float *)(*a2 + 4 * v11) = v13;
      v11 = ++v12;
    }
    while (v12 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 2));
  }
  return v2 == v6;
}

uint64_t sub_2399DF160(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char **v12;
  uint64_t v13;
  __n128 v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  float *v29;
  float *v30;
  float *v31;
  _QWORD *v32;
  _DWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  float v39;
  float v40;
  float v41;
  double v42;
  BOOL v43;
  float v44;
  float32x4_t v45;
  float v46;
  int64_t v47;
  float *v48;
  uint64_t v49;
  unint64_t v50;
  float *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  float *v57;
  unint64_t v58;
  float *v59;
  float *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  float *v65;
  uint64_t v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  unint64_t v80;
  BOOL v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  _DWORD *v85;
  unint64_t v86;
  unsigned int *v87;
  uint64_t v88;
  __n128 v89;
  int32x2_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  float v98;
  float32x4_t v99;
  uint64_t *v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  float32x4_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  float32x4_t v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  _DWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  void *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  int64_t v146;
  float *v147;
  size_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  unsigned int v158;
  float v159;
  uint64_t *v160;
  uint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int *v166;
  _DWORD *v167;
  uint64_t v168;
  unsigned int v169;
  _DWORD *v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  char **v187;
  _QWORD *v188;
  float *v189;
  int64_t v190;
  char *v191;
  char *v192;
  char **v193;
  _QWORD *v194;
  _QWORD *v195;
  void *v196;
  int64_t v197;
  char *v198;
  char *v199;
  char *v200;
  const void *v201;
  uint64_t v202;
  char *v203;
  size_t v204;
  _QWORD *v205;
  char *v206;
  _DWORD *v207;
  uint64_t v208;
  _DWORD *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _DWORD *v213;
  _DWORD *v214;
  _OWORD *v215;
  __int128 *v216;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  char *v222;
  uint64_t v224;
  float32x4_t v225;
  uint64_t v231;
  float v232;
  uint64_t v233;
  uint64_t v234;
  int32x2_t v235;
  int32x2_t v236;
  uint64_t v237;
  uint64_t v239;
  uint64_t v240;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  float *v246;
  void *__p;
  char *v248;
  char *v249;
  void *v250;
  char *v251;
  char *v252;
  float *v253;
  float *v254;
  float *v255;
  float32x4_t v256;
  char *v257;
  void *v258;
  uint64_t v259;
  unint64_t v260;
  unsigned int v261;
  _QWORD *v262;
  uint64_t v263;
  unint64_t v264;
  __int128 v265;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  while (v10[1] - *v10 <= 0x18FuLL)
  {
    v11 = operator new(0xD0uLL);
    v11[1] = 0;
    v11[2] = 0;
    *v11 = &off_250ADED90;
    v12 = (char **)sub_23996301C((uint64_t)(v11 + 3));
    *(_QWORD *)&v265 = v12;
    *((_QWORD *)&v265 + 1) = v11;
    v13 = v10[1];
    if (*v10 == v13)
    {
      sub_23995F9AC(v12, a1);
      v15 = a2;
      v16 = a3;
    }
    else
    {
      sub_23995F9AC(v12, *(_QWORD *)(v13 - 16));
      v15 = (uint64_t *)(*(_QWORD *)(v9 + 8) - 24);
      v16 = (uint64_t *)(*(_QWORD *)(v8 + 8) - 24);
    }
    v244 = *v15;
    v245 = *v16;
    v17 = v265;
    v19 = (_QWORD *)(v265 + 104);
    v18 = *(_QWORD *)(v265 + 104);
    v20 = *(_QWORD *)(v265 + 112);
    v22 = *(_QWORD *)(v265 + 128);
    v21 = *(_QWORD *)(v265 + 136);
    v263 = 0;
    v264 = 0;
    v262 = 0;
    v23 = v21 - v22;
    v239 = v20;
    v240 = v18;
    if (v23)
    {
      if (v23 < 0)
        sub_2394189F8();
      v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 2);
      v262 = operator new(8 * (((v24 - 1) >> 6) + 1));
      v263 = 0;
      v264 = ((v24 - 1) >> 6) + 1;
      sub_23942D8C8(&v262, v24, 0);
      v26 = *(_QWORD *)(v17 + 128);
      v25 = *(_QWORD *)(v17 + 136);
      if (v25 != v26)
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = v262;
        while (2)
        {
          v34 = v27 >> 6;
          v35 = 1 << v27;
          if ((v32[v27 >> 6] & (1 << v27)) != 0)
            goto LABEL_13;
          LODWORD(v258) = v28;
          v36 = *(unsigned int *)(sub_239962518((uint64_t)v19, (unsigned int *)&v258) + 12);
          LODWORD(v258) = v28;
          v37 = (unsigned int *)sub_239962518((uint64_t)v19, (unsigned int *)&v258);
          v38 = *(unsigned int *)(sub_239962518((uint64_t)v19, v37) + 12);
          v39 = *(float *)(v245 + 4 * v36);
          v40 = 1.0;
          if (v39 > 0.00000001)
          {
            v41 = *(float *)(v245 + 4 * v38);
            v42 = v41;
            v43 = v39 <= v41;
            v44 = v41 / v39;
            v40 = v39 / v41;
            if (v43)
              v40 = v44;
            if (v42 <= 0.00000001)
              v40 = 1.0;
          }
          v45 = vmulq_f32(*(float32x4_t *)(v244 + 16 * v36), *(float32x4_t *)(v244 + 16 * v38));
          v45.i32[3] = 0;
          v46 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45)) * v40;
          if (v30 < v31)
          {
            *(_DWORD *)v30 = v28;
            v30[1] = v46;
            v30 += 2;
          }
          else
          {
            v47 = (char *)v30 - (char *)v29;
            v48 = v29;
            v49 = ((char *)v30 - (char *)v29) >> 3;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 61)
              sub_2394189F8();
            v51 = v48;
            v52 = (char *)v31 - (char *)v48;
            v53 = v31 - v48;
            if (v53 > v50)
              v50 = v53;
            if (v52 >= 0x7FFFFFFFFFFFFFF8)
              v54 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v54 = v50;
            if (v54)
            {
              if (v54 >> 61)
                sub_239418A80();
              v55 = (char *)operator new(8 * v54);
              v56 = (uint64_t)&v55[8 * v49];
              *(_DWORD *)v56 = v28;
              *(float *)(v56 + 4) = v46;
              v57 = v51;
              if (v30 != v51)
              {
LABEL_30:
                v58 = (char *)(v30 - 2) - (char *)v57;
                if (v58 < 0x168
                  || &v55[v47 - 8 - (v58 & 0xFFFFFFFFFFFFFFF8)] > &v55[v47 - 8]
                  || (float *)((char *)v30 - (v58 & 0xFFFFFFFFFFFFFFF8) - 8) > v30 - 2
                  || (unint64_t)((char *)v30 - &v55[v47]) < 0x20)
                {
                  v59 = v30;
                  v60 = (float *)v56;
                  v57 = v51;
                }
                else
                {
                  v62 = (v58 >> 3) + 1;
                  v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
                  v59 = &v30[v63 / 0xFFFFFFFFFFFFFFFCLL];
                  v60 = (float *)(v56 - v63);
                  v64 = &v55[8 * v49 - 16];
                  v65 = v30 - 4;
                  v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v67 = *(_OWORD *)v65;
                    *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
                    *(_OWORD *)v64 = v67;
                    v64 -= 32;
                    v65 -= 8;
                    v66 -= 4;
                  }
                  while (v66);
                  v57 = v51;
                  if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_33:
                    v31 = (float *)&v55[8 * v54];
                    v30 = (float *)(v56 + 8);
                    if (v57)
                      goto LABEL_34;
                    goto LABEL_35;
                  }
                }
                do
                {
                  v61 = *((_QWORD *)v59 - 1);
                  v59 -= 2;
                  *((_QWORD *)v60 - 1) = v61;
                  v60 -= 2;
                }
                while (v59 != v57);
                goto LABEL_33;
              }
            }
            else
            {
              v55 = 0;
              v56 = 8 * v49;
              *(_DWORD *)v56 = v28;
              *(float *)(v56 + 4) = v46;
              v57 = v51;
              if (v30 != v51)
                goto LABEL_30;
            }
            v60 = (float *)v56;
            v31 = (float *)&v55[8 * v54];
            v30 = (float *)(v56 + 8);
            if (v57)
LABEL_34:
              operator delete(v57);
LABEL_35:
            v29 = v60;
          }
          v262[v34] |= v35;
          LODWORD(v258) = v28;
          v33 = (_DWORD *)sub_239962518((uint64_t)v19, (unsigned int *)&v258);
          v32 = v262;
          *(_QWORD *)((char *)v262 + (((unint64_t)*v33 >> 3) & 0x1FFFFFF8)) |= 1 << *v33;
          v26 = *(_QWORD *)(v17 + 128);
          v25 = *(_QWORD *)(v17 + 136);
LABEL_13:
          v27 = ++v28;
          if (0xCCCCCCCCCCCCCCCDLL * ((v25 - v26) >> 2) <= v28)
            goto LABEL_47;
          continue;
        }
      }
    }
    v30 = 0;
    v29 = 0;
LABEL_47:
    v243 = ((char *)v30 - (char *)v29) >> 3;
    v68 = 126 - 2 * __clz(v243);
    if (v30 == v29)
      v69 = 0;
    else
      v69 = v68;
    sub_2399E20A0(v29, (uint64_t *)v30, v69, 1, v14);
    v261 = -1;
    HIBYTE(v260) = 5;
    strcpy((char *)&v258, "v:c2f");
    v246 = v29;
    sub_2399E0540((_QWORD *)v17, &v261, (uint64_t)&v258);
    if (SHIBYTE(v260) < 0)
    {
      operator delete(v258);
      if (*(_QWORD *)(v17 + 112) == *(_QWORD *)(v17 + 104))
      {
LABEL_67:
        v258 = 0;
        v259 = 0;
        v260 = 0;
        v81 = v30 == v29;
        v82 = ((char *)v30 - (char *)v29) >> 3;
        if (!v81)
          goto LABEL_68;
        goto LABEL_117;
      }
    }
    else if (*(_QWORD *)(v17 + 112) == *(_QWORD *)(v17 + 104))
    {
      goto LABEL_67;
    }
    v70 = 0;
    v71 = 0;
    do
    {
      v75 = (uint64_t *)(*(_QWORD *)(v17 + 8) + 16 * v261);
      v76 = *v75;
      v77 = (std::__shared_weak_count *)v75[1];
      if (v77)
      {
        p_shared_owners = (unint64_t *)&v77->__shared_owners_;
        do
          v79 = __ldxr(p_shared_owners);
        while (__stxr(v79 + 1, p_shared_owners));
        do
          v80 = __ldaxr(p_shared_owners);
        while (__stlxr(v80 - 1, p_shared_owners));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      *(int32x2_t *)(*(_QWORD *)(v76 + 40) + 8 * v70) = vdup_n_s32(v71);
      v73 = *(_QWORD *)(v17 + 104);
      v72 = *(_QWORD *)(v17 + 112);
      v74 = (v72 - v73) >> 2;
      v70 = ++v71;
    }
    while (v74 > v71);
    v258 = 0;
    v259 = 0;
    v260 = 0;
    if (v72 != v73)
    {
      if (v72 - v73 < 0)
        sub_2394189F8();
      v258 = operator new(8 * (((v74 - 1) >> 6) + 1));
      v259 = 0;
      v260 = ((v74 - 1) >> 6) + 1;
      sub_23942D8C8(&v258, v74, 0);
    }
    v81 = v30 == v29;
    v82 = ((char *)v30 - (char *)v29) >> 3;
    if (!v81)
    {
LABEL_68:
      v83 = 0;
      v84 = 0;
      while (1)
      {
        *(float *)&v250 = v29[2 * v83];
        v256.i32[0] = (int)v250;
        if (*(_DWORD *)(sub_239962518((uint64_t)v19, (unsigned int *)&v256) + 12) != -1)
        {
          v86 = *(unsigned int *)(sub_239962518((uint64_t)v19, (unsigned int *)&v250) + 12);
          v87 = (unsigned int *)sub_239962518((uint64_t)v19, (unsigned int *)&v250);
          v88 = sub_239962518((uint64_t)v19, v87);
          if ((*((_QWORD *)v258 + (v86 >> 6)) & (1 << v86)) == 0)
          {
            v91 = *(unsigned int *)(v88 + 12);
            if ((*((_QWORD *)v258 + (v91 >> 6)) & (1 << v91)) == 0)
              break;
          }
        }
LABEL_70:
        v83 = ++v84;
        v29 = v246;
        if (v82 <= v84)
          goto LABEL_117;
      }
      *(float *)v90.i32 = *(float *)(v245 + 4 * v86) + *(float *)(v245 + 4 * v91);
      v256 = 0uLL;
      v89.n128_f64[0] = *(float *)v90.i32;
      v92 = (uint64_t *)(*(_QWORD *)(v17 + 8) + 16 * *(unsigned int *)(v17 + 176));
      v93 = *v92;
      v94 = (std::__shared_weak_count *)v92[1];
      if (*(float *)v90.i32 > 1.0e-16)
      {
        if (v94)
        {
          v95 = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldxr(v95);
          while (__stxr(v96 + 1, v95));
          do
            v97 = __ldaxr(v95);
          while (__stlxr(v97 - 1, v95));
          if (!v97)
          {
            v235 = v90;
            v231 = v93;
            ((void (*)(std::__shared_weak_count *, __n128))v94->__on_zero_shared)(v94, v89);
            std::__shared_weak_count::__release_weak(v94);
            v93 = v231;
            v90 = v235;
          }
        }
        v98 = *(float *)(v245 + 4 * v86);
        v99 = *(float32x4_t *)(*(_QWORD *)(v93 + 40) + 16 * v86);
        v100 = (uint64_t *)(*(_QWORD *)(v17 + 8) + 16 * *(unsigned int *)(v17 + 176));
        v101 = *v100;
        v102 = (std::__shared_weak_count *)v100[1];
        if (v102)
        {
          v103 = (unint64_t *)&v102->__shared_owners_;
          do
            v104 = __ldxr(v103);
          while (__stxr(v104 + 1, v103));
          do
            v105 = __ldaxr(v103);
          while (__stlxr(v105 - 1, v103));
          if (!v105)
          {
            v232 = v98;
            v236 = v90;
            v225 = v99;
            v224 = v101;
            ((void (*)(std::__shared_weak_count *, __n128))v102->__on_zero_shared)(v102, v89);
            std::__shared_weak_count::__release_weak(v102);
            v101 = v224;
            v99 = v225;
            v98 = v232;
            v90 = v236;
          }
        }
        v106 = vdivq_f32(vaddq_f32(vmulq_n_f32(v99, v98), vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)(v101 + 40) + 16 * v91), *(float *)(v245 + 4 * v91))), (float32x4_t)vdupq_lane_s32(v90, 0));
        goto LABEL_101;
      }
      if (!v94)
        goto LABEL_93;
      v107 = (unint64_t *)&v94->__shared_owners_;
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
      do
        v109 = __ldaxr(v107);
      while (__stlxr(v109 - 1, v107));
      if (!v109)
      {
        v234 = v93;
        ((void (*)(std::__shared_weak_count *, __n128))v94->__on_zero_shared)(v94, v89);
        std::__shared_weak_count::__release_weak(v94);
        v110 = *(_QWORD *)(v234 + 40);
        v117 = (uint64_t *)(*(_QWORD *)(v17 + 8) + 16 * *(unsigned int *)(v17 + 176));
        v112 = *v117;
        v113 = (std::__shared_weak_count *)v117[1];
        if (v113)
        {
LABEL_94:
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
          do
            v116 = __ldaxr(v114);
          while (__stlxr(v116 - 1, v114));
          if (!v116)
          {
            v237 = v110;
            v233 = v112;
            ((void (*)(std::__shared_weak_count *, __n128))v113->__on_zero_shared)(v113, v89);
            std::__shared_weak_count::__release_weak(v113);
            v112 = v233;
            v110 = v237;
          }
        }
      }
      else
      {
LABEL_93:
        v110 = *(_QWORD *)(v93 + 40);
        v111 = (uint64_t *)(*(_QWORD *)(v17 + 8) + 16 * *(unsigned int *)(v17 + 176));
        v112 = *v111;
        v113 = (std::__shared_weak_count *)v111[1];
        if (v113)
          goto LABEL_94;
      }
      v118.i64[0] = 0x3F0000003F000000;
      v118.i64[1] = 0x3F0000003F000000;
      v106 = vmulq_f32(vaddq_f32(*(float32x4_t *)(*(_QWORD *)(v112 + 40) + 16 * v91), *(float32x4_t *)(v110 + 16 * v86)), v118);
LABEL_101:
      v256 = v106;
      v82 = v243;
      if (sub_2399DC418(v17, (unsigned int *)&v250, &v256))
      {
        v119 = v258;
        *((_QWORD *)v258 + (v86 >> 6)) |= 1 << v86;
        v119[v91 >> 6] |= 1 << v91;
        LODWORD(v253) = v86;
        if (*(_DWORD *)sub_239962508(v19, (unsigned int *)&v253) != -1)
        {
          v120 = (uint64_t *)(*(_QWORD *)(v17 + 8) + 16 * v261);
          v121 = *v120;
          v122 = (std::__shared_weak_count *)v120[1];
          if (v122)
          {
            v123 = (unint64_t *)&v122->__shared_owners_;
            do
              v124 = __ldxr(v123);
            while (__stxr(v124 + 1, v123));
            do
              v125 = __ldaxr(v123);
            while (__stlxr(v125 - 1, v123));
            if (!v125)
            {
              ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
              std::__shared_weak_count::__release_weak(v122);
            }
          }
          v126 = (_DWORD *)(*(_QWORD *)(v121 + 40) + 8 * v86);
          *v126 = v86;
          v126[1] = v91;
          v82 = v243;
        }
        LODWORD(v253) = v91;
        if (*(_DWORD *)sub_239962508(v19, (unsigned int *)&v253) != -1)
        {
          v127 = (uint64_t *)(*(_QWORD *)(v17 + 8) + 16 * v261);
          v128 = *v127;
          v129 = (std::__shared_weak_count *)v127[1];
          if (v129)
          {
            v130 = (unint64_t *)&v129->__shared_owners_;
            do
              v131 = __ldxr(v130);
            while (__stxr(v131 + 1, v130));
            do
              v132 = __ldaxr(v130);
            while (__stlxr(v132 - 1, v130));
            if (!v132)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
          }
          v85 = (_DWORD *)(*(_QWORD *)(v128 + 40) + 8 * v91);
          *v85 = v86;
          v85[1] = v91;
          v82 = v243;
        }
      }
      goto LABEL_70;
    }
LABEL_117:
    if (sub_2394ED744(v17) && sub_2394ED928(v17))
      sub_2394EDB0C(v17);
    v133 = *(_QWORD *)(v265 + 112) - *(_QWORD *)(v265 + 104);
    if ((unint64_t)v133 >= 8)
    {
      v134 = ((unint64_t)(v239 - v240) >> 2);
      if (v134 != v133 >> 2)
      {
        v141 = *(_QWORD *)(v17 + 104);
        v140 = *(_QWORD *)(v17 + 112);
        v257 = 0;
        v256 = 0uLL;
        v142 = v140 - v141;
        if (v140 == v141)
        {
          v253 = 0;
          v254 = 0;
          v255 = 0;
          v250 = 0;
          v251 = 0;
          v252 = 0;
          if (((unint64_t)(v239 - v240) >> 2))
            goto LABEL_139;
        }
        else
        {
          if ((unint64_t)v142 >= 0x3FFFFFFFFFFFFFFDLL)
            sub_2394189F8();
          v143 = (char *)operator new(4 * v142);
          v256.i64[0] = (uint64_t)v143;
          v257 = &v143[16 * (v142 >> 2)];
          bzero(v143, 4 * v142);
          v256.i64[1] = (uint64_t)&v143[4 * v142];
          v145 = *(_QWORD *)(v17 + 104);
          v144 = *(_QWORD *)(v17 + 112);
          v253 = 0;
          v254 = 0;
          v255 = 0;
          v146 = v144 - v145;
          if (v144 != v145)
          {
            if (v146 < 0)
              sub_2394189F8();
            v147 = (float *)operator new(v144 - v145);
            v253 = v147;
            v255 = &v147[v146 >> 2];
            bzero(v147, v146);
            v254 = (float *)((char *)v147 + v146);
          }
          v250 = 0;
          v251 = 0;
          v252 = 0;
          if (((unint64_t)(v239 - v240) >> 2))
          {
LABEL_139:
            v148 = 4 * v134;
            v149 = (char *)operator new(4 * v134);
            v150 = &v149[4 * v134];
            v250 = v149;
            v252 = v150;
            memset(v149, 255, v148);
            v251 = v150;
            v152 = *(_QWORD *)(v17 + 104);
            v151 = *(_QWORD *)(v17 + 112);
            v248 = 0;
            v249 = 0;
            __p = 0;
            v153 = v151 - v152;
            if (v151 == v152)
              goto LABEL_158;
LABEL_143:
            if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFDLL)
              sub_2394189F8();
            v156 = (char *)operator new(2 * v153);
            __p = v156;
            v249 = &v156[8 * (v153 >> 2)];
            bzero(v156, 2 * v153);
            v248 = &v156[2 * v153];
            if (*(_QWORD *)(v17 + 112) != *(_QWORD *)(v17 + 104))
            {
              v157 = 0;
              v158 = 0;
              do
              {
                v160 = (uint64_t *)(*(_QWORD *)(v17 + 8) + 16 * v261);
                v161 = *v160;
                v162 = (std::__shared_weak_count *)v160[1];
                if (v162)
                {
                  v163 = (unint64_t *)&v162->__shared_owners_;
                  do
                    v164 = __ldxr(v163);
                  while (__stxr(v164 + 1, v163));
                  do
                    v165 = __ldaxr(v163);
                  while (__stlxr(v165 - 1, v163));
                  if (!v165)
                  {
                    ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                    std::__shared_weak_count::__release_weak(v162);
                  }
                }
                v166 = (unsigned int *)(*(_QWORD *)(v161 + 40) + 8 * v157);
                v167 = (char *)__p + 8 * v157;
                *v167 = *v166;
                v167[1] = v166[1];
                v168 = *v166;
                v169 = v166[1];
                v170 = v250;
                *((_DWORD *)v250 + v168) = v158;
                if ((_DWORD)v168 == v169)
                {
                  *v167 = *v166;
                  v167[1] = v166[1];
                  *(_OWORD *)(v256.i64[0] + 16 * v157) = *(_OWORD *)(v244 + 16 * *v166);
                  v159 = *(float *)(v245 + 4 * *v166);
                }
                else
                {
                  v170[v166[1]] = v158;
                  *v167 = *v166;
                  v167[1] = v166[1];
                  v171 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v244 + 16 * *v166), *(float *)(v245 + 4 * *v166)), vmulq_n_f32(*(float32x4_t *)(v244 + 16 * v166[1]), *(float *)(v245 + 4 * v166[1])));
                  v172 = vmulq_f32(v171, v171);
                  v172.i32[3] = 0;
                  v173 = vpaddq_f32(v172, v172);
                  v174 = vpaddq_f32(v173, v173);
                  v175 = (float32x4_t)xmmword_239F02850;
                  if (v174.f32[0] > 0.0)
                    v175 = vdivq_f32(v171, vsqrtq_f32(v174));
                  *(float32x4_t *)(v256.i64[0] + 16 * v157) = v175;
                  v159 = *(float *)(v245 + 4 * *v166) + *(float *)(v245 + 4 * v166[1]);
                }
                v253[v157] = v159;
                v157 = ++v158;
              }
              while (v158 < (unint64_t)((uint64_t)(*(_QWORD *)(v17 + 112) - *(_QWORD *)(v17 + 104)) >> 2));
            }
LABEL_158:
            v176 = a8;
            v177 = a7;
            if (v261 == -1)
              goto LABEL_163;
            v178 = (_QWORD *)(*(_QWORD *)(v17 + 8) + 16 * v261);
            v179 = (std::__shared_weak_count *)v178[1];
            *v178 = 0;
            v178[1] = 0;
            if (!v179)
              goto LABEL_163;
            v180 = (unint64_t *)&v179->__shared_owners_;
            do
              v181 = __ldaxr(v180);
            while (__stlxr(v181 - 1, v180));
            if (v181)
            {
LABEL_163:
              v261 = -1;
              v182 = (uint64_t)a4;
              v183 = (_QWORD *)a4[1];
              if ((unint64_t)v183 < a4[2])
                goto LABEL_164;
LABEL_178:
              a4[1] = sub_23951E0F0(v182, &v265);
              v187 = (char **)a6;
              v188 = *(_QWORD **)(a6 + 8);
              if ((unint64_t)v188 >= *(_QWORD *)(a6 + 16))
                goto LABEL_179;
LABEL_168:
              *v188 = 0;
              v188[1] = 0;
              v188[2] = 0;
              v189 = v253;
              v190 = (char *)v254 - (char *)v253;
              if (v254 != v253)
              {
                if (v190 < 0)
                  sub_2394189F8();
                v191 = (char *)operator new((char *)v254 - (char *)v253);
                *v188 = v191;
                v188[1] = v191;
                v192 = &v191[4 * (v190 >> 2)];
                v188[2] = v192;
                memcpy(v191, v189, v190);
                v188[1] = v192;
                v177 = a7;
              }
              *(_QWORD *)(a6 + 8) = v188 + 3;
              *(_QWORD *)(a6 + 8) = v188 + 3;
              v193 = (char **)a5;
              v194 = *(_QWORD **)(a5 + 8);
              if ((unint64_t)v194 >= *(_QWORD *)(a5 + 16))
                goto LABEL_172;
LABEL_180:
              *v194 = 0;
              v194[1] = 0;
              v194[2] = 0;
              v201 = (const void *)v256.i64[0];
              v202 = v256.i64[1] - v256.i64[0];
              if (v256.i64[1] != v256.i64[0])
              {
                if (v202 < 0)
                  sub_2394189F8();
                v203 = (char *)operator new(v256.i64[1] - v256.i64[0]);
                *v194 = v203;
                v194[1] = v203;
                v194[2] = &v203[16 * (v202 >> 4)];
                v204 = v202 & 0xFFFFFFFFFFFFFFF0;
                memcpy(v203, v201, v204);
                v194[1] = &v203[v204];
              }
              *(_QWORD *)(a5 + 8) = v194 + 3;
              *(_QWORD *)(a5 + 8) = v194 + 3;
              v195 = *(_QWORD **)(v177 + 8);
              if ((unint64_t)v195 >= *(_QWORD *)(v177 + 16))
                goto LABEL_184;
LABEL_173:
              *v195 = 0;
              v195[1] = 0;
              v195[2] = 0;
              v196 = v250;
              v197 = v251 - (_BYTE *)v250;
              if (v251 != v250)
              {
                if (v197 < 0)
                  sub_2394189F8();
                v198 = (char *)operator new(v251 - (_BYTE *)v250);
                *v195 = v198;
                v195[1] = v198;
                v199 = &v198[4 * (v197 >> 2)];
                v195[2] = v199;
                memcpy(v198, v196, v197);
                v195[1] = v199;
                v177 = a7;
              }
              v200 = (char *)(v195 + 3);
              *(_QWORD *)(v177 + 8) = v195 + 3;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
              v261 = -1;
              v182 = (uint64_t)a4;
              v183 = (_QWORD *)a4[1];
              if ((unint64_t)v183 >= a4[2])
                goto LABEL_178;
LABEL_164:
              *v183 = v265;
              v184 = *((_QWORD *)&v265 + 1);
              v183[1] = *((_QWORD *)&v265 + 1);
              if (v184)
              {
                v185 = (unint64_t *)(v184 + 8);
                do
                  v186 = __ldxr(v185);
                while (__stxr(v186 + 1, v185));
              }
              *(_QWORD *)(v182 + 8) = v183 + 2;
              v187 = (char **)a6;
              v188 = *(_QWORD **)(a6 + 8);
              if ((unint64_t)v188 < *(_QWORD *)(a6 + 16))
                goto LABEL_168;
LABEL_179:
              *(_QWORD *)(a6 + 8) = sub_2399E3974(v187, (uint64_t)&v253);
              v193 = (char **)a5;
              v194 = *(_QWORD **)(a5 + 8);
              if ((unint64_t)v194 < *(_QWORD *)(a5 + 16))
                goto LABEL_180;
LABEL_172:
              *(_QWORD *)(a5 + 8) = sub_2399E3B80(v193, (uint64_t)&v256);
              v195 = *(_QWORD **)(v177 + 8);
              if ((unint64_t)v195 < *(_QWORD *)(v177 + 16))
                goto LABEL_173;
LABEL_184:
              v200 = sub_2395BB144((char **)v177, (uint64_t)&v250);
            }
            *(_QWORD *)(v177 + 8) = v200;
            v205 = *(_QWORD **)(a8 + 8);
            if ((unint64_t)v205 >= *(_QWORD *)(a8 + 16))
            {
              v222 = sub_2399E3D98((char **)a8, (uint64_t)&__p);
            }
            else
            {
              *v205 = 0;
              v205[1] = 0;
              v205[2] = 0;
              v207 = __p;
              v206 = v248;
              v208 = v248 - (_BYTE *)__p;
              if (v248 != __p)
              {
                if (v208 < 0)
                  sub_2394189F8();
                v209 = operator new(v248 - (_BYTE *)__p);
                *v205 = v209;
                v205[1] = v209;
                v205[2] = &v209[2 * (v208 >> 3)];
                v210 = v208 - 8;
                if ((unint64_t)(v208 - 8) < 0x38
                  || v209 < (_DWORD *)((char *)v207 + (v210 & 0xFFFFFFFFFFFFFFF8) + 8)
                  && v207 < (_DWORD *)((char *)v209 + (v210 & 0xFFFFFFFFFFFFFFF8) + 8))
                {
                  goto LABEL_223;
                }
                v211 = (v210 >> 3) + 1;
                v212 = 2 * (v211 & 0x3FFFFFFFFFFFFFF8);
                v213 = &v207[v212];
                v214 = &v209[v212];
                v215 = v209 + 8;
                v216 = (__int128 *)(v207 + 8);
                v217 = v211 & 0x3FFFFFFFFFFFFFF8;
                do
                {
                  v219 = *(v216 - 2);
                  v218 = *(v216 - 1);
                  v221 = *v216;
                  v220 = v216[1];
                  v216 += 4;
                  *(v215 - 2) = v219;
                  *(v215 - 1) = v218;
                  *v215 = v221;
                  v215[1] = v220;
                  v215 += 4;
                  v217 -= 8;
                }
                while (v217);
                v207 = v213;
                v209 = v214;
                if (v211 != (v211 & 0x3FFFFFFFFFFFFFF8))
                {
LABEL_223:
                  do
                  {
                    *v209 = *v207;
                    v209[1] = v207[1];
                    v209 += 2;
                    v207 += 2;
                  }
                  while (v207 != (_DWORD *)v206);
                  v214 = v209;
                }
                v205[1] = v214;
              }
              v222 = (char *)(v205 + 3);
              v176 = a8;
              *(_QWORD *)(a8 + 8) = v205 + 3;
            }
            *(_QWORD *)(v176 + 8) = v222;
            v10 = a4;
            if (__p)
            {
              v248 = (char *)__p;
              operator delete(__p);
            }
            if (v250)
            {
              v251 = (char *)v250;
              operator delete(v250);
            }
            if (v253)
            {
              v254 = v253;
              operator delete(v253);
            }
            if (v256.i64[0])
            {
              v256.i64[1] = v256.i64[0];
              operator delete((void *)v256.i64[0]);
            }
            v135 = 1;
            v136 = v258;
            if (!v258)
              goto LABEL_124;
LABEL_123:
            operator delete(v136);
            goto LABEL_124;
          }
        }
        v155 = *(_QWORD *)(v17 + 104);
        v154 = *(_QWORD *)(v17 + 112);
        v248 = 0;
        v249 = 0;
        __p = 0;
        v153 = v154 - v155;
        if (v154 != v155)
          goto LABEL_143;
        goto LABEL_158;
      }
    }
    v135 = 0;
    v10 = a4;
    v136 = v258;
    if (v258)
      goto LABEL_123;
LABEL_124:
    if (v29)
      operator delete(v29);
    if (v262)
      operator delete(v262);
    v137 = (std::__shared_weak_count *)*((_QWORD *)&v265 + 1);
    v9 = a5;
    v8 = a6;
    if (*((_QWORD *)&v265 + 1))
    {
      v138 = (unint64_t *)(*((_QWORD *)&v265 + 1) + 8);
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    if ((v135 & 1) == 0)
      return 1;
  }
  return 1;
}

